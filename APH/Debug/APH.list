
APH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08012288  08012288  00022288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012898  08012898  00030228  2**0
                  CONTENTS
  4 .ARM          00000008  08012898  08012898  00022898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080128a0  080128a0  00030228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080128a0  080128a0  000228a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080128a4  080128a4  000228a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  080128a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009304  20000228  08012ad0  00030228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000952c  08012ad0  0003952c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f489  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006cce  00000000  00000000  0007f6e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003760  00000000  00000000  000863b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000034b8  00000000  00000000  00089b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001db1d  00000000  00000000  0008cfc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021ffe  00000000  00000000  000aaae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ac374  00000000  00000000  000ccae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00178e57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f94c  00000000  00000000  00178ed4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000228 	.word	0x20000228
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801226c 	.word	0x0801226c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000022c 	.word	0x2000022c
 80001dc:	0801226c 	.word	0x0801226c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <Set_Output>:




void Set_Output(GPIO_DebugPins dp, GPIO_PinState st)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	460a      	mov	r2, r1
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	4613      	mov	r3, r2
 8000f56:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(dpArray[dp].PORT, dpArray[dp].PIN, st);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <Set_Output+0x34>)
 8000f5c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <Set_Output+0x34>)
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	4413      	add	r3, r2
 8000f68:	889b      	ldrh	r3, [r3, #4]
 8000f6a:	79ba      	ldrb	r2, [r7, #6]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f008 fbb9 	bl	80096e4 <HAL_GPIO_WritePin>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000000 	.word	0x20000000

08000f80 <initFastTask>:
/* Private variables ---------------------------------------------------------*/

static osEventFlagsId_t ntFlag = NULL;

void initFastTask(osEventFlagsId_t normTaskEventHandle)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	ntFlag = normTaskEventHandle;
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <initFastTask+0x1c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000244 	.word	0x20000244

08000fa0 <StartFastTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFastTask */
void StartFastTask(void *argument)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFastTask */
  uint32_t cnt = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  uint32_t loop = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
  uint32_t test = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]

  while (ntFlag == NULL)
 8000fb4:	e002      	b.n	8000fbc <StartFastTask+0x1c>
  {
	  osDelay(1);
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f00b fefe 	bl	800cdb8 <osDelay>
  while (ntFlag == NULL)
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <StartFastTask+0x98>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0f8      	beq.n	8000fb6 <StartFastTask+0x16>
  }
 /* Infinite loop */

  for(;;)
  {
  	Set_Output(OUT_TEST_1, 1);
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff ffbe 	bl	8000f48 <Set_Output>
  	for(loop = 0; loop < 2000; loop++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	e005      	b.n	8000fde <StartFastTask+0x3e>
  	{
  		test = test + 3;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	3303      	adds	r3, #3
 8000fd6:	60fb      	str	r3, [r7, #12]
  	for(loop = 0; loop < 2000; loop++)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fe4:	d3f5      	bcc.n	8000fd2 <StartFastTask+0x32>
  	}
  	if(test > 3000)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d902      	bls.n	8000ff6 <StartFastTask+0x56>
  		test = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	e001      	b.n	8000ffa <StartFastTask+0x5a>
  	else
  		test = 7;
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	60fb      	str	r3, [r7, #12]
  	Set_Output(OUT_TEST_1, 0);
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff ffa3 	bl	8000f48 <Set_Output>

  	Set_Output(OUT_TEST_2, 1);
 8001002:	2101      	movs	r1, #1
 8001004:	2001      	movs	r0, #1
 8001006:	f7ff ff9f 	bl	8000f48 <Set_Output>
    osDelay(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f00b fed4 	bl	800cdb8 <osDelay>
  	Set_Output(OUT_TEST_2, 0);
 8001010:	2100      	movs	r1, #0
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff ff98 	bl	8000f48 <Set_Output>
    cnt++;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3301      	adds	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
    if (cnt >= 10)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b09      	cmp	r3, #9
 8001022:	d9cf      	bls.n	8000fc4 <StartFastTask+0x24>
    {
    	cnt = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
    	osEventFlagsSet(ntFlag,1);
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <StartFastTask+0x98>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	4618      	mov	r0, r3
 8001030:	f00b ff42 	bl	800ceb8 <osEventFlagsSet>
  	Set_Output(OUT_TEST_1, 1);
 8001034:	e7c6      	b.n	8000fc4 <StartFastTask+0x24>
 8001036:	bf00      	nop
 8001038:	20000244 	.word	0x20000244

0800103c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001040:	f007 ff60 	bl	8008f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001044:	f000 f868 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001048:	f000 f8d2 	bl	80011f0 <MX_GPIO_Init>
  MX_MEMS_Init();
 800104c:	f00a fede 	bl	800be0c <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001050:	f00b fda2 	bl	800cb98 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001054:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <main+0x9c>)
 8001056:	2100      	movs	r1, #0
 8001058:	4820      	ldr	r0, [pc, #128]	; (80010dc <main+0xa0>)
 800105a:	f00b fe07 	bl	800cc6c <osThreadNew>
 800105e:	4602      	mov	r2, r0
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <main+0xa4>)
 8001062:	601a      	str	r2, [r3, #0]

  /* creation of fastTask */
  fastTaskHandle = osThreadNew(StartFastTask, NULL, &fastTask_attributes);
 8001064:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <main+0xa8>)
 8001066:	2100      	movs	r1, #0
 8001068:	481f      	ldr	r0, [pc, #124]	; (80010e8 <main+0xac>)
 800106a:	f00b fdff 	bl	800cc6c <osThreadNew>
 800106e:	4602      	mov	r2, r0
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <main+0xb0>)
 8001072:	601a      	str	r2, [r3, #0]

  /* creation of normalTask */
  normalTaskHandle = osThreadNew(StartNormalTask, NULL, &normalTask_attributes);
 8001074:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <main+0xb4>)
 8001076:	2100      	movs	r1, #0
 8001078:	481e      	ldr	r0, [pc, #120]	; (80010f4 <main+0xb8>)
 800107a:	f00b fdf7 	bl	800cc6c <osThreadNew>
 800107e:	4602      	mov	r2, r0
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <main+0xbc>)
 8001082:	601a      	str	r2, [r3, #0]

  /* creation of slowTask */
  slowTaskHandle = osThreadNew(StartSlowTask, NULL, &slowTask_attributes);
 8001084:	4a1d      	ldr	r2, [pc, #116]	; (80010fc <main+0xc0>)
 8001086:	2100      	movs	r1, #0
 8001088:	481d      	ldr	r0, [pc, #116]	; (8001100 <main+0xc4>)
 800108a:	f00b fdef 	bl	800cc6c <osThreadNew>
 800108e:	4602      	mov	r2, r0
 8001090:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <main+0xc8>)
 8001092:	601a      	str	r2, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of normTaskEvent */
  normTaskEventHandle = osEventFlagsNew(&normTaskEvent_attributes);
 8001094:	481c      	ldr	r0, [pc, #112]	; (8001108 <main+0xcc>)
 8001096:	f00b febd 	bl	800ce14 <osEventFlagsNew>
 800109a:	4602      	mov	r2, r0
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <main+0xd0>)
 800109e:	601a      	str	r2, [r3, #0]

  /* creation of slowTaskEvent */
  slowTaskEventHandle = osEventFlagsNew(&slowTaskEvent_attributes);
 80010a0:	481b      	ldr	r0, [pc, #108]	; (8001110 <main+0xd4>)
 80010a2:	f00b feb7 	bl	800ce14 <osEventFlagsNew>
 80010a6:	4602      	mov	r2, r0
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <main+0xd8>)
 80010aa:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  initFastTask(normTaskEventHandle);
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <main+0xd0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff65 	bl	8000f80 <initFastTask>
  initSlowTask(slowTaskEventHandle);
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <main+0xd8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f968 	bl	8001390 <initSlowTask>
  initNormalTask(normTaskEventHandle ,slowTaskEventHandle);
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <main+0xd0>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <main+0xd8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4610      	mov	r0, r2
 80010cc:	f000 f90e 	bl	80012ec <initNormalTask>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010d0:	f00b fd96 	bl	800cc00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <main+0x98>
 80010d6:	bf00      	nop
 80010d8:	080126dc 	.word	0x080126dc
 80010dc:	080012b1 	.word	0x080012b1
 80010e0:	20006a8c 	.word	0x20006a8c
 80010e4:	08012700 	.word	0x08012700
 80010e8:	08000fa1 	.word	0x08000fa1
 80010ec:	200083d0 	.word	0x200083d0
 80010f0:	08012724 	.word	0x08012724
 80010f4:	08001319 	.word	0x08001319
 80010f8:	2000830c 	.word	0x2000830c
 80010fc:	08012748 	.word	0x08012748
 8001100:	080013b1 	.word	0x080013b1
 8001104:	20008314 	.word	0x20008314
 8001108:	0801276c 	.word	0x0801276c
 800110c:	20008310 	.word	0x20008310
 8001110:	0801277c 	.word	0x0801277c
 8001114:	200083d4 	.word	0x200083d4

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b094      	sub	sp, #80	; 0x50
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	2230      	movs	r2, #48	; 0x30
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f00e ff55 	bl	800ffd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <SystemClock_Config+0xd0>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	4a28      	ldr	r2, [pc, #160]	; (80011e8 <SystemClock_Config+0xd0>)
 8001146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114a:	6413      	str	r3, [r2, #64]	; 0x40
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <SystemClock_Config+0xd0>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001158:	2300      	movs	r3, #0
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <SystemClock_Config+0xd4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001164:	4a21      	ldr	r2, [pc, #132]	; (80011ec <SystemClock_Config+0xd4>)
 8001166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <SystemClock_Config+0xd4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001178:	2302      	movs	r3, #2
 800117a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001180:	2310      	movs	r3, #16
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001184:	2302      	movs	r3, #2
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001188:	2300      	movs	r3, #0
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800118c:	2310      	movs	r3, #16
 800118e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001190:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001194:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001196:	2304      	movs	r3, #4
 8001198:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800119a:	2307      	movs	r3, #7
 800119c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	4618      	mov	r0, r3
 80011a4:	f009 faca 	bl	800a73c <HAL_RCC_OscConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ae:	f000 f899 	bl	80012e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b2:	230f      	movs	r3, #15
 80011b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b6:	2302      	movs	r3, #2
 80011b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2102      	movs	r1, #2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f009 fd24 	bl	800ac1c <HAL_RCC_ClockConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011da:	f000 f883 	bl	80012e4 <Error_Handler>
  }
}
 80011de:	bf00      	nop
 80011e0:	3750      	adds	r7, #80	; 0x50
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40007000 	.word	0x40007000

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_TEST_1_Pin|OUT_TEST_2_Pin|OUT_TEST_3_Pin|OUT_TEST_4_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 7158 	mov.w	r1, #864	; 0x360
 800127c:	480b      	ldr	r0, [pc, #44]	; (80012ac <MX_GPIO_Init+0xbc>)
 800127e:	f008 fa31 	bl	80096e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT_TEST_1_Pin OUT_TEST_2_Pin OUT_TEST_3_Pin OUT_TEST_4_Pin */
  GPIO_InitStruct.Pin = OUT_TEST_1_Pin|OUT_TEST_2_Pin|OUT_TEST_3_Pin|OUT_TEST_4_Pin;
 8001282:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_GPIO_Init+0xbc>)
 800129c:	f007 ffa6 	bl	80091ec <HAL_GPIO_Init>

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020800 	.word	0x40020800

080012b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f00b fd7d 	bl	800cdb8 <osDelay>
 80012be:	e7fb      	b.n	80012b8 <StartDefaultTask+0x8>

080012c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012d2:	f007 fe39 	bl	8008f48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40014400 	.word	0x40014400

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ea:	e7fe      	b.n	80012ea <Error_Handler+0x6>

080012ec <initNormalTask>:
static osEventFlagsId_t ntFlag = NULL;
static osEventFlagsId_t stFlag = NULL;


void initNormalTask(osEventFlagsId_t normTaskEventHandle, osEventFlagsId_t slowTaskEventHandle)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
	ntFlag = normTaskEventHandle;
 80012f6:	4a06      	ldr	r2, [pc, #24]	; (8001310 <initNormalTask+0x24>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6013      	str	r3, [r2, #0]
	stFlag = slowTaskEventHandle;
 80012fc:	4a05      	ldr	r2, [pc, #20]	; (8001314 <initNormalTask+0x28>)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	6013      	str	r3, [r2, #0]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000248 	.word	0x20000248
 8001314:	2000024c 	.word	0x2000024c

08001318 <StartNormalTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartNormalTask */
void StartNormalTask(void *argument)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	uint32_t cnt;
	uint32_t blink;



    while ((ntFlag == NULL) || (stFlag == NULL))
 8001320:	e002      	b.n	8001328 <StartNormalTask+0x10>
	{
    	osDelay(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f00b fd48 	bl	800cdb8 <osDelay>
    while ((ntFlag == NULL) || (stFlag == NULL))
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <StartNormalTask+0x70>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f8      	beq.n	8001322 <StartNormalTask+0xa>
 8001330:	4b16      	ldr	r3, [pc, #88]	; (800138c <StartNormalTask+0x74>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f4      	beq.n	8001322 <StartNormalTask+0xa>


  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait (ntFlag,1, 0, 15);
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <StartNormalTask+0x70>)
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	230f      	movs	r3, #15
 800133e:	2200      	movs	r2, #0
 8001340:	2101      	movs	r1, #1
 8001342:	f00b fe55 	bl	800cff0 <osEventFlagsWait>
	  osEventFlagsClear(ntFlag,1);
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <StartNormalTask+0x70>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2101      	movs	r1, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f00b fe0b 	bl	800cf68 <osEventFlagsClear>
	  cnt++;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3301      	adds	r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
	  blink++;
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	3301      	adds	r3, #1
 800135c:	60bb      	str	r3, [r7, #8]
	  Set_Output(OUT_TEST_3,blink & 1);
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	b2db      	uxtb	r3, r3
 8001368:	4619      	mov	r1, r3
 800136a:	2002      	movs	r0, #2
 800136c:	f7ff fdec 	bl	8000f48 <Set_Output>
	  if(cnt >= 10)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b09      	cmp	r3, #9
 8001374:	d9e0      	bls.n	8001338 <StartNormalTask+0x20>
	  {
		  cnt = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
		  osEventFlagsSet(stFlag,1);
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <StartNormalTask+0x74>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2101      	movs	r1, #1
 8001380:	4618      	mov	r0, r3
 8001382:	f00b fd99 	bl	800ceb8 <osEventFlagsSet>
	  osEventFlagsWait (ntFlag,1, 0, 15);
 8001386:	e7d7      	b.n	8001338 <StartNormalTask+0x20>
 8001388:	20000248 	.word	0x20000248
 800138c:	2000024c 	.word	0x2000024c

08001390 <initSlowTask>:
/* Private variables ---------------------------------------------------------*/
static osEventFlagsId_t stFlag = NULL;


void initSlowTask(osEventFlagsId_t slowTaskEventHandle)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	stFlag = slowTaskEventHandle;
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <initSlowTask+0x1c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000250 	.word	0x20000250

080013b0 <StartSlowTask>:

void StartSlowTask(void *argument)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

	uint32_t cnt;
	uint32_t blink;
	//TaskHandle_t stHandle = xTaskGetHandle( "slowTask" );

	while (stFlag == NULL)
 80013b8:	e002      	b.n	80013c0 <StartSlowTask+0x10>
    {
	  osDelay(1);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f00b fcfc 	bl	800cdb8 <osDelay>
	while (stFlag == NULL)
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <StartSlowTask+0x88>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f8      	beq.n	80013ba <StartSlowTask+0xa>
	}

	initCompass(57); //TODO
 80013c8:	2039      	movs	r0, #57	; 0x39
 80013ca:	f00e fdb7 	bl	800ff3c <initCompass>


  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait (stFlag,1, 0, 150);
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <StartSlowTask+0x88>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	2396      	movs	r3, #150	; 0x96
 80013d4:	2200      	movs	r2, #0
 80013d6:	2101      	movs	r1, #1
 80013d8:	f00b fe0a 	bl	800cff0 <osEventFlagsWait>
	  osEventFlagsClear(stFlag,1);
 80013dc:	4b16      	ldr	r3, [pc, #88]	; (8001438 <StartSlowTask+0x88>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2101      	movs	r1, #1
 80013e2:	4618      	mov	r0, r3
 80013e4:	f00b fdc0 	bl	800cf68 <osEventFlagsClear>
	  if(blink & 8)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <StartSlowTask+0x4a>
	  {
		  BSP_LED_On(LED_GREEN);
 80013f2:	2000      	movs	r0, #0
 80013f4:	f007 fba0 	bl	8008b38 <BSP_LED_On>
 80013f8:	e002      	b.n	8001400 <StartSlowTask+0x50>
	  }
	  else
	  {
		  BSP_LED_Off(LED_GREEN);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f007 fbb2 	bl	8008b64 <BSP_LED_Off>
	  }
	  //Set_Output(OUT_TEST_4,blink & 1);
	  cnt++;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	3301      	adds	r3, #1
 8001404:	60fb      	str	r3, [r7, #12]
	  blink++;
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	3301      	adds	r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
	  if(cnt >= 10)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b09      	cmp	r3, #9
 8001410:	d9dd      	bls.n	80013ce <StartSlowTask+0x1e>
	  {
		  printf("\n\n\n\rHallo\n\n\r");
 8001412:	480a      	ldr	r0, [pc, #40]	; (800143c <StartSlowTask+0x8c>)
 8001414:	f00e fde8 	bl	800ffe8 <iprintf>
		  cnt= 0;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
		  Set_Output(OUT_TEST_4, 1);
 800141c:	2101      	movs	r1, #1
 800141e:	2003      	movs	r0, #3
 8001420:	f7ff fd92 	bl	8000f48 <Set_Output>
		  SetCompassData();
 8001424:	f00e fd9a 	bl	800ff5c <SetCompassData>
		  MX_MEMS_Process();
 8001428:	f00a fcf6 	bl	800be18 <MX_MEMS_Process>
		  Set_Output(OUT_TEST_4, 0);
 800142c:	2100      	movs	r1, #0
 800142e:	2003      	movs	r0, #3
 8001430:	f7ff fd8a 	bl	8000f48 <Set_Output>
	  osEventFlagsWait (stFlag,1, 0, 150);
 8001434:	e7cb      	b.n	80013ce <StartSlowTask+0x1e>
 8001436:	bf00      	nop
 8001438:	20000250 	.word	0x20000250
 800143c:	080122d8 	.word	0x080122d8

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_MspInit+0x54>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a11      	ldr	r2, [pc, #68]	; (8001494 <HAL_MspInit+0x54>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <HAL_MspInit+0x54>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_MspInit+0x54>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <HAL_MspInit+0x54>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_MspInit+0x54>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	210f      	movs	r1, #15
 8001482:	f06f 0001 	mvn.w	r0, #1
 8001486:	f007 fe59 	bl	800913c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800

08001498 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08c      	sub	sp, #48	; 0x30
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	2019      	movs	r0, #25
 80014ae:	f007 fe45 	bl	800913c <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014b2:	2019      	movs	r0, #25
 80014b4:	f007 fe5e 	bl	8009174 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <HAL_InitTick+0xa0>)
 80014be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c0:	4a1d      	ldr	r2, [pc, #116]	; (8001538 <HAL_InitTick+0xa0>)
 80014c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c6:	6453      	str	r3, [r2, #68]	; 0x44
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_InitTick+0xa0>)
 80014ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014d4:	f107 0210 	add.w	r2, r7, #16
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f009 fd8e 	bl	800b000 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014e4:	f009 fd78 	bl	800afd8 <HAL_RCC_GetPCLK2Freq>
 80014e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ec:	4a13      	ldr	r2, [pc, #76]	; (800153c <HAL_InitTick+0xa4>)
 80014ee:	fba2 2303 	umull	r2, r3, r2, r3
 80014f2:	0c9b      	lsrs	r3, r3, #18
 80014f4:	3b01      	subs	r3, #1
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_InitTick+0xa8>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <HAL_InitTick+0xac>)
 80014fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_InitTick+0xa8>)
 8001500:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001504:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001506:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <HAL_InitTick+0xa8>)
 8001508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_InitTick+0xa8>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_InitTick+0xa8>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001518:	4809      	ldr	r0, [pc, #36]	; (8001540 <HAL_InitTick+0xa8>)
 800151a:	f009 fda3 	bl	800b064 <HAL_TIM_Base_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d104      	bne.n	800152e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001524:	4806      	ldr	r0, [pc, #24]	; (8001540 <HAL_InitTick+0xa8>)
 8001526:	f009 fdd2 	bl	800b0ce <HAL_TIM_Base_Start_IT>
 800152a:	4603      	mov	r3, r0
 800152c:	e000      	b.n	8001530 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3730      	adds	r7, #48	; 0x30
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	431bde83 	.word	0x431bde83
 8001540:	200093f8 	.word	0x200093f8
 8001544:	40014400 	.word	0x40014400

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800154c:	e7fe      	b.n	800154c <NMI_Handler+0x4>

0800154e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <UsageFault_Handler+0x4>

08001566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800157a:	f009 fdcc 	bl	800b116 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200093f8 	.word	0x200093f8

08001588 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <BSP_I2C1_Init+0x58>)
 8001594:	4a13      	ldr	r2, [pc, #76]	; (80015e4 <BSP_I2C1_Init+0x5c>)
 8001596:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <BSP_I2C1_Init+0x60>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	4912      	ldr	r1, [pc, #72]	; (80015e8 <BSP_I2C1_Init+0x60>)
 80015a0:	600a      	str	r2, [r1, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d117      	bne.n	80015d6 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80015a6:	480e      	ldr	r0, [pc, #56]	; (80015e0 <BSP_I2C1_Init+0x58>)
 80015a8:	f008 fd52 	bl	800a050 <HAL_I2C_GetState>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d111      	bne.n	80015d6 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80015b2:	480b      	ldr	r0, [pc, #44]	; (80015e0 <BSP_I2C1_Init+0x58>)
 80015b4:	f000 f8e2 	bl	800177c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10b      	bne.n	80015d6 <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80015be:	4808      	ldr	r0, [pc, #32]	; (80015e0 <BSP_I2C1_Init+0x58>)
 80015c0:	f000 f8a8 	bl	8001714 <MX_I2C1_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 80015ca:	f06f 0307 	mvn.w	r3, #7
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	e001      	b.n	80015d6 <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80015d6:	687b      	ldr	r3, [r7, #4]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20009438 	.word	0x20009438
 80015e4:	40005400 	.word	0x40005400
 80015e8:	20000254 	.word	0x20000254

080015ec <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <BSP_I2C1_DeInit+0x48>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d014      	beq.n	8001628 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <BSP_I2C1_DeInit+0x48>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3b01      	subs	r3, #1
 8001604:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <BSP_I2C1_DeInit+0x48>)
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <BSP_I2C1_DeInit+0x48>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10b      	bne.n	8001628 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001610:	4809      	ldr	r0, [pc, #36]	; (8001638 <BSP_I2C1_DeInit+0x4c>)
 8001612:	f000 f8fd 	bl	8001810 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001616:	4808      	ldr	r0, [pc, #32]	; (8001638 <BSP_I2C1_DeInit+0x4c>)
 8001618:	f008 f9b6 	bl	8009988 <HAL_I2C_DeInit>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001622:	f06f 0307 	mvn.w	r3, #7
 8001626:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001628:	687b      	ldr	r3, [r7, #4]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000254 	.word	0x20000254
 8001638:	20009438 	.word	0x20009438

0800163c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af04      	add	r7, sp, #16
 8001642:	60ba      	str	r2, [r7, #8]
 8001644:	461a      	mov	r2, r3
 8001646:	4603      	mov	r3, r0
 8001648:	81fb      	strh	r3, [r7, #14]
 800164a:	460b      	mov	r3, r1
 800164c:	81bb      	strh	r3, [r7, #12]
 800164e:	4613      	mov	r3, r2
 8001650:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001656:	89ba      	ldrh	r2, [r7, #12]
 8001658:	89f9      	ldrh	r1, [r7, #14]
 800165a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165e:	9302      	str	r3, [sp, #8]
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2301      	movs	r3, #1
 800166a:	480c      	ldr	r0, [pc, #48]	; (800169c <BSP_I2C1_WriteReg+0x60>)
 800166c:	f008 f9d0 	bl	8009a10 <HAL_I2C_Mem_Write>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00c      	beq.n	8001690 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001676:	4809      	ldr	r0, [pc, #36]	; (800169c <BSP_I2C1_WriteReg+0x60>)
 8001678:	f008 fcf8 	bl	800a06c <HAL_I2C_GetError>
 800167c:	4603      	mov	r3, r0
 800167e:	2b04      	cmp	r3, #4
 8001680:	d103      	bne.n	800168a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001682:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e002      	b.n	8001690 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800168a:	f06f 0303 	mvn.w	r3, #3
 800168e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001690:	697b      	ldr	r3, [r7, #20]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20009438 	.word	0x20009438

080016a0 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af04      	add	r7, sp, #16
 80016a6:	60ba      	str	r2, [r7, #8]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4603      	mov	r3, r0
 80016ac:	81fb      	strh	r3, [r7, #14]
 80016ae:	460b      	mov	r3, r1
 80016b0:	81bb      	strh	r3, [r7, #12]
 80016b2:	4613      	mov	r3, r2
 80016b4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80016ba:	89ba      	ldrh	r2, [r7, #12]
 80016bc:	89f9      	ldrh	r1, [r7, #14]
 80016be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c2:	9302      	str	r3, [sp, #8]
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2301      	movs	r3, #1
 80016ce:	480c      	ldr	r0, [pc, #48]	; (8001700 <BSP_I2C1_ReadReg+0x60>)
 80016d0:	f008 fa98 	bl	8009c04 <HAL_I2C_Mem_Read>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00c      	beq.n	80016f4 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80016da:	4809      	ldr	r0, [pc, #36]	; (8001700 <BSP_I2C1_ReadReg+0x60>)
 80016dc:	f008 fcc6 	bl	800a06c <HAL_I2C_GetError>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d103      	bne.n	80016ee <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80016e6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e002      	b.n	80016f4 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80016ee:	f06f 0303 	mvn.w	r3, #3
 80016f2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80016f4:	697b      	ldr	r3, [r7, #20]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20009438 	.word	0x20009438

08001704 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001708:	f007 fc32 	bl	8008f70 <HAL_GetTick>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a14      	ldr	r2, [pc, #80]	; (8001774 <MX_I2C1_Init+0x60>)
 8001724:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a13      	ldr	r2, [pc, #76]	; (8001778 <MX_I2C1_Init+0x64>)
 800172a:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800173e:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f007 ffdd 	bl	8009718 <HAL_I2C_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001768:	7bfb      	ldrb	r3, [r7, #15]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40005400 	.word	0x40005400
 8001778:	000186a0 	.word	0x000186a0

0800177c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <I2C1_MspInit+0x8c>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	4a1e      	ldr	r2, [pc, #120]	; (8001808 <I2C1_MspInit+0x8c>)
 800178e:	f043 0302 	orr.w	r3, r3, #2
 8001792:	6313      	str	r3, [r2, #48]	; 0x30
 8001794:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <I2C1_MspInit+0x8c>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80017a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a6:	2312      	movs	r3, #18
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017aa:	2301      	movs	r3, #1
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80017b2:	2304      	movs	r3, #4
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4813      	ldr	r0, [pc, #76]	; (800180c <I2C1_MspInit+0x90>)
 80017be:	f007 fd15 	bl	80091ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80017c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c8:	2312      	movs	r3, #18
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80017d4:	2304      	movs	r3, #4
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	480b      	ldr	r0, [pc, #44]	; (800180c <I2C1_MspInit+0x90>)
 80017e0:	f007 fd04 	bl	80091ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <I2C1_MspInit+0x8c>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	4a06      	ldr	r2, [pc, #24]	; (8001808 <I2C1_MspInit+0x8c>)
 80017ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017f2:	6413      	str	r3, [r2, #64]	; 0x40
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <I2C1_MspInit+0x8c>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001800:	bf00      	nop
 8001802:	3728      	adds	r7, #40	; 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800
 800180c:	40020400 	.word	0x40020400

08001810 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <I2C1_MspDeInit+0x30>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	4a08      	ldr	r2, [pc, #32]	; (8001840 <I2C1_MspDeInit+0x30>)
 800181e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001822:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001824:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001828:	4806      	ldr	r0, [pc, #24]	; (8001844 <I2C1_MspDeInit+0x34>)
 800182a:	f007 fe61 	bl	80094f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800182e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001832:	4804      	ldr	r0, [pc, #16]	; (8001844 <I2C1_MspDeInit+0x34>)
 8001834:	f007 fe5c 	bl	80094f0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	40020400 	.word	0x40020400

08001848 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	e00a      	b.n	8001870 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800185a:	f3af 8000 	nop.w
 800185e:	4601      	mov	r1, r0
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	60ba      	str	r2, [r7, #8]
 8001866:	b2ca      	uxtb	r2, r1
 8001868:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	dbf0      	blt.n	800185a <_read+0x12>
	}

return len;
 8001878:	687b      	ldr	r3, [r7, #4]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	e009      	b.n	80018a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	60ba      	str	r2, [r7, #8]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f007 fad1 	bl	8008e44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	3301      	adds	r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	dbf1      	blt.n	8001894 <_write+0x12>
	}
	return len;
 80018b0:	687b      	ldr	r3, [r7, #4]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_close>:

int _close(int file)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
	return -1;
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018e2:	605a      	str	r2, [r3, #4]
	return 0;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <_isatty>:

int _isatty(int file)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
	return 1;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
	return 0;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800192c:	4a14      	ldr	r2, [pc, #80]	; (8001980 <_sbrk+0x5c>)
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <_sbrk+0x60>)
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <_sbrk+0x64>)
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <_sbrk+0x68>)
 8001944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	429a      	cmp	r2, r3
 8001952:	d207      	bcs.n	8001964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001954:	f00e fb0a 	bl	800ff6c <__errno>
 8001958:	4602      	mov	r2, r0
 800195a:	230c      	movs	r3, #12
 800195c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	e009      	b.n	8001978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	4a05      	ldr	r2, [pc, #20]	; (8001988 <_sbrk+0x64>)
 8001974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20018000 	.word	0x20018000
 8001984:	00000400 	.word	0x00000400
 8001988:	20000258 	.word	0x20000258
 800198c:	20009530 	.word	0x20009530

08001990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <SystemInit+0x28>)
 8001996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199a:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <SystemInit+0x28>)
 800199c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <SystemInit+0x28>)
 80019a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019aa:	609a      	str	r2, [r3, #8]
#endif
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019c2:	e003      	b.n	80019cc <LoopCopyDataInit>

080019c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019ca:	3104      	adds	r1, #4

080019cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019cc:	480b      	ldr	r0, [pc, #44]	; (80019fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019d4:	d3f6      	bcc.n	80019c4 <CopyDataInit>
  ldr  r2, =_sbss
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019d8:	e002      	b.n	80019e0 <LoopFillZerobss>

080019da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019dc:	f842 3b04 	str.w	r3, [r2], #4

080019e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019e4:	d3f9      	bcc.n	80019da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019e6:	f7ff ffd3 	bl	8001990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ea:	f00e fac5 	bl	800ff78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ee:	f7ff fb25 	bl	800103c <main>
  bx  lr    
 80019f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019f4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80019f8:	080128a8 	.word	0x080128a8
  ldr  r0, =_sdata
 80019fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a00:	20000228 	.word	0x20000228
  ldr  r2, =_sbss
 8001a04:	20000228 	.word	0x20000228
  ldr  r3, = _ebss
 8001a08:	2000952c 	.word	0x2000952c

08001a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC_IRQHandler>
	...

08001a10 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d103      	bne.n	8001a28 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8001a20:	f04f 33ff 	mov.w	r3, #4294967295
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	e030      	b.n	8001a8a <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	7b1a      	ldrb	r2, [r3, #12]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	699a      	ldr	r2, [r3, #24]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a0c      	ldr	r2, [pc, #48]	; (8001a94 <HTS221_RegisterBusIO+0x84>)
 8001a64:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a0b      	ldr	r2, [pc, #44]	; (8001a98 <HTS221_RegisterBusIO+0x88>)
 8001a6a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d004      	beq.n	8001a84 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4798      	blx	r3
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	e002      	b.n	8001a8a <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295
 8001a88:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	080020c7 	.word	0x080020c7
 8001a98:	08002129 	.word	0x08002129

08001a9c <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d108      	bne.n	8001ac0 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 faa4 	bl	8001ffc <HTS221_Initialize>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
 8001abe:	e004      	b.n	8001aca <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d111      	bne.n	8001b08 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f878 	bl	8001bda <HTS221_HUM_Disable>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
 8001af4:	e00d      	b.n	8001b12 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f95f 	bl	8001dba <HTS221_TEMP_Disable>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	e004      	b.n	8001b12 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	331c      	adds	r3, #28
 8001b28:	6839      	ldr	r1, [r7, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 fc28 	bl	8002380 <hts221_device_id_get>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	e000      	b.n	8001b3e <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2201      	movs	r2, #1
 8001b56:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	2200      	movs	r2, #0
 8001b68:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <HTS221_GetCapabilities+0x44>)
 8001b6e:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <HTS221_GetCapabilities+0x44>)
 8001b74:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	41480000 	.word	0x41480000

08001b90 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e015      	b.n	8001bd2 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10b      	bne.n	8001bc8 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	331c      	adds	r3, #28
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 fbf3 	bl	80023a2 <hts221_power_on_set>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	e004      	b.n	8001bd2 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e015      	b.n	8001c1c <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10b      	bne.n	8001c12 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	331c      	adds	r3, #28
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 fbce 	bl	80023a2 <hts221_power_on_set>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c10:	e004      	b.n	8001c1c <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001c2e:	6839      	ldr	r1, [r7, #0]
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f96f 	bl	8001f14 <HTS221_GetOutputDataRate>
 8001c36:	4603      	mov	r3, r0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001c4c:	ed97 0a00 	vldr	s0, [r7]
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f9a3 	bl	8001f9c <HTS221_SetOutputDataRate>
 8001c56:	4603      	mov	r3, r0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	331c      	adds	r3, #28
 8001c6e:	f107 020c 	add.w	r2, r7, #12
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fc58 	bl	800252a <hts221_hum_adc_point_0_get>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295
 8001c84:	e06b      	b.n	8001d5e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f103 021c 	add.w	r2, r3, #28
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	3304      	adds	r3, #4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4610      	mov	r0, r2
 8001c96:	f000 fbaa 	bl	80023ee <hts221_hum_rh_point_0_get>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca4:	e05b      	b.n	8001d5e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f103 021c 	add.w	r2, r3, #28
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	3308      	adds	r3, #8
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	f000 fc5c 	bl	8002572 <hts221_hum_adc_point_1_get>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc4:	e04b      	b.n	8001d5e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f103 021c 	add.w	r2, r3, #28
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	330c      	adds	r3, #12
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	f000 fba8 	bl	800242a <hts221_hum_rh_point_1_get>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce4:	e03b      	b.n	8001d5e <HTS221_HUM_GetHumidity+0xfe>
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	83bb      	strh	r3, [r7, #28]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	331c      	adds	r3, #28
 8001cee:	f107 021c 	add.w	r2, r7, #28
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fafd 	bl	80022f4 <hts221_humidity_raw_get>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
 8001d04:	e02b      	b.n	8001d5e <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001d06:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d0a:	ee07 3a90 	vmov	s15, r3
 8001d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d12:	f107 030c 	add.w	r3, r7, #12
 8001d16:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f99a 	bl	8002054 <Linear_Interpolation>
 8001d20:	eef0 7a40 	vmov.f32	s15, s0
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d38:	d503      	bpl.n	8001d42 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	edd3 7a00 	vldr	s15, [r3]
 8001d48:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001d68 <HTS221_HUM_GetHumidity+0x108>
 8001d4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d54:	dd02      	ble.n	8001d5c <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <HTS221_HUM_GetHumidity+0x10c>)
 8001d5a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3720      	adds	r7, #32
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	42c80000 	.word	0x42c80000
 8001d6c:	42c80000 	.word	0x42c80000

08001d70 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e015      	b.n	8001db2 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10b      	bne.n	8001da8 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	331c      	adds	r3, #28
 8001d94:	2101      	movs	r1, #1
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fb03 	bl	80023a2 <hts221_power_on_set>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	e004      	b.n	8001db2 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e015      	b.n	8001dfc <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10b      	bne.n	8001df2 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	331c      	adds	r3, #28
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fade 	bl	80023a2 <hts221_power_on_set>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	e004      	b.n	8001dfc <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001e0e:	6839      	ldr	r1, [r7, #0]
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f87f 	bl	8001f14 <HTS221_GetOutputDataRate>
 8001e16:	4603      	mov	r3, r0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001e2c:	ed97 0a00 	vldr	s0, [r7]
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f8b3 	bl	8001f9c <HTS221_SetOutputDataRate>
 8001e36:	4603      	mov	r3, r0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	331c      	adds	r3, #28
 8001e4e:	f107 020c 	add.w	r2, r7, #12
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 fbb0 	bl	80025ba <hts221_temp_adc_point_0_get>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	e052      	b.n	8001f0c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f103 021c 	add.w	r2, r3, #28
 8001e6c:	f107 030c 	add.w	r3, r7, #12
 8001e70:	3304      	adds	r3, #4
 8001e72:	4619      	mov	r1, r3
 8001e74:	4610      	mov	r0, r2
 8001e76:	f000 faf6 	bl	8002466 <hts221_temp_deg_point_0_get>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295
 8001e84:	e042      	b.n	8001f0c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f103 021c 	add.w	r2, r3, #28
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	3308      	adds	r3, #8
 8001e92:	4619      	mov	r1, r3
 8001e94:	4610      	mov	r0, r2
 8001e96:	f000 fbb4 	bl	8002602 <hts221_temp_adc_point_1_get>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea4:	e032      	b.n	8001f0c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f103 021c 	add.w	r2, r3, #28
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	330c      	adds	r3, #12
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	f000 fb07 	bl	80024c8 <hts221_temp_deg_point_1_get>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec4:	e022      	b.n	8001f0c <HTS221_TEMP_GetTemperature+0xcc>
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	83bb      	strh	r3, [r7, #28]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	331c      	adds	r3, #28
 8001ece:	f107 021c 	add.w	r2, r7, #28
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 fa30 	bl	800233a <hts221_temperature_raw_get>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8001ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee4:	e012      	b.n	8001f0c <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001ee6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001eea:	ee07 3a90 	vmov	s15, r3
 8001eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f8aa 	bl	8002054 <Linear_Interpolation>
 8001f00:	eef0 7a40 	vmov.f32	s15, s0
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	331c      	adds	r3, #28
 8001f26:	f107 020b 	add.w	r2, r7, #11
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f983 	bl	8002238 <hts221_data_rate_get>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3c:	e025      	b.n	8001f8a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8001f3e:	7afb      	ldrb	r3, [r7, #11]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d81d      	bhi.n	8001f80 <HTS221_GetOutputDataRate+0x6c>
 8001f44:	a201      	add	r2, pc, #4	; (adr r2, 8001f4c <HTS221_GetOutputDataRate+0x38>)
 8001f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4a:	bf00      	nop
 8001f4c:	08001f5d 	.word	0x08001f5d
 8001f50:	08001f67 	.word	0x08001f67
 8001f54:	08001f71 	.word	0x08001f71
 8001f58:	08001f79 	.word	0x08001f79
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
      break;
 8001f64:	e010      	b.n	8001f88 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f6c:	601a      	str	r2, [r3, #0]
      break;
 8001f6e:	e00b      	b.n	8001f88 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <HTS221_GetOutputDataRate+0x80>)
 8001f74:	601a      	str	r2, [r3, #0]
      break;
 8001f76:	e007      	b.n	8001f88 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <HTS221_GetOutputDataRate+0x84>)
 8001f7c:	601a      	str	r2, [r3, #0]
      break;
 8001f7e:	e003      	b.n	8001f88 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295
 8001f84:	60fb      	str	r3, [r7, #12]
      break;
 8001f86:	bf00      	nop
  }

  return ret;
 8001f88:	68fb      	ldr	r3, [r7, #12]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40e00000 	.word	0x40e00000
 8001f98:	41480000 	.word	0x41480000

08001f9c <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001fa8:	edd7 7a00 	vldr	s15, [r7]
 8001fac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb8:	d801      	bhi.n	8001fbe <HTS221_SetOutputDataRate+0x22>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00b      	b.n	8001fd6 <HTS221_SetOutputDataRate+0x3a>
 8001fbe:	edd7 7a00 	vldr	s15, [r7]
 8001fc2:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fce:	d801      	bhi.n	8001fd4 <HTS221_SetOutputDataRate+0x38>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e000      	b.n	8001fd6 <HTS221_SetOutputDataRate+0x3a>
 8001fd4:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8001fd6:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	331c      	adds	r3, #28
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 f902 	bl	80021ea <hts221_data_rate_set>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8001fec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff0:	e000      	b.n	8001ff4 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	331c      	adds	r3, #28
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f9c9 	bl	80023a2 <hts221_power_on_set>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	e017      	b.n	800204c <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	331c      	adds	r3, #28
 8002020:	2101      	movs	r1, #1
 8002022:	4618      	mov	r0, r3
 8002024:	f000 f940 	bl	80022a8 <hts221_block_data_update_set>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
 8002032:	e00b      	b.n	800204c <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8002034:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ffaf 	bl	8001f9c <HTS221_SetOutputDataRate>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8002044:	f04f 33ff 	mov.w	r3, #4294967295
 8002048:	e000      	b.n	800204c <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	ed93 7a03 	vldr	s14, [r3, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	edd3 7a01 	vldr	s15, [r3, #4]
 800206c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002070:	edd7 7a00 	vldr	s15, [r7]
 8002074:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	edd3 6a02 	vldr	s13, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	edd3 7a01 	vldr	s15, [r3, #4]
 8002084:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	ed93 6a00 	vldr	s12, [r3]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	edd3 7a03 	vldr	s15, [r3, #12]
 8002094:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002098:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800209c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80020b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020b4:	eef0 7a66 	vmov.f32	s15, s13
}
 80020b8:	eeb0 0a67 	vmov.f32	s0, s15
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80020c6:	b590      	push	{r4, r7, lr}
 80020c8:	b087      	sub	sp, #28
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	461a      	mov	r2, r3
 80020d2:	460b      	mov	r3, r1
 80020d4:	72fb      	strb	r3, [r7, #11]
 80020d6:	4613      	mov	r3, r2
 80020d8:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10e      	bne.n	8002104 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	695c      	ldr	r4, [r3, #20]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	7b1b      	ldrb	r3, [r3, #12]
 80020ee:	b298      	uxth	r0, r3
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	b299      	uxth	r1, r3
 80020fa:	893b      	ldrh	r3, [r7, #8]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	47a0      	blx	r4
 8002100:	4603      	mov	r3, r0
 8002102:	e00d      	b.n	8002120 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	695c      	ldr	r4, [r3, #20]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	7b1b      	ldrb	r3, [r3, #12]
 800210c:	b298      	uxth	r0, r3
 800210e:	7afb      	ldrb	r3, [r7, #11]
 8002110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002114:	b2db      	uxtb	r3, r3
 8002116:	b299      	uxth	r1, r3
 8002118:	893b      	ldrh	r3, [r7, #8]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	47a0      	blx	r4
 800211e:	4603      	mov	r3, r0
  }
}
 8002120:	4618      	mov	r0, r3
 8002122:	371c      	adds	r7, #28
 8002124:	46bd      	mov	sp, r7
 8002126:	bd90      	pop	{r4, r7, pc}

08002128 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	461a      	mov	r2, r3
 8002134:	460b      	mov	r3, r1
 8002136:	72fb      	strb	r3, [r7, #11]
 8002138:	4613      	mov	r3, r2
 800213a:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10e      	bne.n	8002166 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	691c      	ldr	r4, [r3, #16]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	7b1b      	ldrb	r3, [r3, #12]
 8002150:	b298      	uxth	r0, r3
 8002152:	7afb      	ldrb	r3, [r7, #11]
 8002154:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002158:	b2db      	uxtb	r3, r3
 800215a:	b299      	uxth	r1, r3
 800215c:	893b      	ldrh	r3, [r7, #8]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	47a0      	blx	r4
 8002162:	4603      	mov	r3, r0
 8002164:	e00d      	b.n	8002182 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	691c      	ldr	r4, [r3, #16]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	7b1b      	ldrb	r3, [r3, #12]
 800216e:	b298      	uxth	r0, r3
 8002170:	7afb      	ldrb	r3, [r7, #11]
 8002172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002176:	b2db      	uxtb	r3, r3
 8002178:	b299      	uxth	r1, r3
 800217a:	893b      	ldrh	r3, [r7, #8]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	47a0      	blx	r4
 8002180:	4603      	mov	r3, r0
  }
}
 8002182:	4618      	mov	r0, r3
 8002184:	371c      	adds	r7, #28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd90      	pop	{r4, r7, pc}

0800218a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 800218a:	b590      	push	{r4, r7, lr}
 800218c:	b087      	sub	sp, #28
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	461a      	mov	r2, r3
 8002196:	460b      	mov	r3, r1
 8002198:	72fb      	strb	r3, [r7, #11]
 800219a:	4613      	mov	r3, r2
 800219c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	685c      	ldr	r4, [r3, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6898      	ldr	r0, [r3, #8]
 80021a6:	893b      	ldrh	r3, [r7, #8]
 80021a8:	7af9      	ldrb	r1, [r7, #11]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	47a0      	blx	r4
 80021ae:	6178      	str	r0, [r7, #20]
  return ret;
 80021b0:	697b      	ldr	r3, [r7, #20]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd90      	pop	{r4, r7, pc}

080021ba <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80021ba:	b590      	push	{r4, r7, lr}
 80021bc:	b087      	sub	sp, #28
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	461a      	mov	r2, r3
 80021c6:	460b      	mov	r3, r1
 80021c8:	72fb      	strb	r3, [r7, #11]
 80021ca:	4613      	mov	r3, r2
 80021cc:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681c      	ldr	r4, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6898      	ldr	r0, [r3, #8]
 80021d6:	893b      	ldrh	r3, [r7, #8]
 80021d8:	7af9      	ldrb	r1, [r7, #11]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	47a0      	blx	r4
 80021de:	6178      	str	r0, [r7, #20]
  return ret;
 80021e0:	697b      	ldr	r3, [r7, #20]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd90      	pop	{r4, r7, pc}

080021ea <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b084      	sub	sp, #16
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80021f6:	f107 0208 	add.w	r2, r7, #8
 80021fa:	2301      	movs	r3, #1
 80021fc:	2120      	movs	r1, #32
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ffc3 	bl	800218a <hts221_read_reg>
 8002204:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10f      	bne.n	800222c <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	b2da      	uxtb	r2, r3
 8002214:	7a3b      	ldrb	r3, [r7, #8]
 8002216:	f362 0301 	bfi	r3, r2, #0, #2
 800221a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800221c:	f107 0208 	add.w	r2, r7, #8
 8002220:	2301      	movs	r3, #1
 8002222:	2120      	movs	r1, #32
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ffc8 	bl	80021ba <hts221_write_reg>
 800222a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800222c:	68fb      	ldr	r3, [r7, #12]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8002242:	f107 0208 	add.w	r2, r7, #8
 8002246:	2301      	movs	r3, #1
 8002248:	2120      	movs	r1, #32
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff ff9d 	bl	800218a <hts221_read_reg>
 8002250:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8002252:	7a3b      	ldrb	r3, [r7, #8]
 8002254:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b03      	cmp	r3, #3
 800225c:	d81a      	bhi.n	8002294 <hts221_data_rate_get+0x5c>
 800225e:	a201      	add	r2, pc, #4	; (adr r2, 8002264 <hts221_data_rate_get+0x2c>)
 8002260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002264:	08002275 	.word	0x08002275
 8002268:	0800227d 	.word	0x0800227d
 800226c:	08002285 	.word	0x08002285
 8002270:	0800228d 	.word	0x0800228d
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
      break;
 800227a:	e00f      	b.n	800229c <hts221_data_rate_get+0x64>
    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2201      	movs	r2, #1
 8002280:	701a      	strb	r2, [r3, #0]
      break;
 8002282:	e00b      	b.n	800229c <hts221_data_rate_get+0x64>
    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2202      	movs	r2, #2
 8002288:	701a      	strb	r2, [r3, #0]
      break;
 800228a:	e007      	b.n	800229c <hts221_data_rate_get+0x64>
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2203      	movs	r2, #3
 8002290:	701a      	strb	r2, [r3, #0]
      break;
 8002292:	e003      	b.n	800229c <hts221_data_rate_get+0x64>
    default:
      *val = HTS221_ODR_ND;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2204      	movs	r2, #4
 8002298:	701a      	strb	r2, [r3, #0]
      break;
 800229a:	bf00      	nop
  }

  return ret;
 800229c:	68fb      	ldr	r3, [r7, #12]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop

080022a8 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80022b4:	f107 0208 	add.w	r2, r7, #8
 80022b8:	2301      	movs	r3, #1
 80022ba:	2120      	movs	r1, #32
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff64 	bl	800218a <hts221_read_reg>
 80022c2:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10f      	bne.n	80022ea <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	7a3b      	ldrb	r3, [r7, #8]
 80022d4:	f362 0382 	bfi	r3, r2, #2, #1
 80022d8:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80022da:	f107 0208 	add.w	r2, r7, #8
 80022de:	2301      	movs	r3, #1
 80022e0:	2120      	movs	r1, #32
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ff69 	bl	80021ba <hts221_write_reg>
 80022e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80022fe:	f107 0208 	add.w	r2, r7, #8
 8002302:	2302      	movs	r3, #2
 8002304:	2128      	movs	r1, #40	; 0x28
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff ff3f 	bl	800218a <hts221_read_reg>
 800230c:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800230e:	7a7b      	ldrb	r3, [r7, #9]
 8002310:	b21a      	sxth	r2, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800231c:	b29b      	uxth	r3, r3
 800231e:	021b      	lsls	r3, r3, #8
 8002320:	b29a      	uxth	r2, r3
 8002322:	7a3b      	ldrb	r3, [r7, #8]
 8002324:	b29b      	uxth	r3, r3
 8002326:	4413      	add	r3, r2
 8002328:	b29b      	uxth	r3, r3
 800232a:	b21a      	sxth	r2, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	801a      	strh	r2, [r3, #0]

  return ret;
 8002330:	68fb      	ldr	r3, [r7, #12]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8002344:	f107 0208 	add.w	r2, r7, #8
 8002348:	2302      	movs	r3, #2
 800234a:	212a      	movs	r1, #42	; 0x2a
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ff1c 	bl	800218a <hts221_read_reg>
 8002352:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002354:	7a7b      	ldrb	r3, [r7, #9]
 8002356:	b21a      	sxth	r2, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002362:	b29b      	uxth	r3, r3
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	b29a      	uxth	r2, r3
 8002368:	7a3b      	ldrb	r3, [r7, #8]
 800236a:	b29b      	uxth	r3, r3
 800236c:	4413      	add	r3, r2
 800236e:	b29b      	uxth	r3, r3
 8002370:	b21a      	sxth	r2, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	801a      	strh	r2, [r3, #0]

  return ret;
 8002376:	68fb      	ldr	r3, [r7, #12]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800238a:	2301      	movs	r3, #1
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	210f      	movs	r1, #15
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff fefa 	bl	800218a <hts221_read_reg>
 8002396:	60f8      	str	r0, [r7, #12]
  return ret;
 8002398:	68fb      	ldr	r3, [r7, #12]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	460b      	mov	r3, r1
 80023ac:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80023ae:	f107 0208 	add.w	r2, r7, #8
 80023b2:	2301      	movs	r3, #1
 80023b4:	2120      	movs	r1, #32
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff fee7 	bl	800218a <hts221_read_reg>
 80023bc:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10f      	bne.n	80023e4 <hts221_power_on_set+0x42>
    reg.pd = val;
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	7a3b      	ldrb	r3, [r7, #8]
 80023ce:	f362 13c7 	bfi	r3, r2, #7, #1
 80023d2:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80023d4:	f107 0208 	add.w	r2, r7, #8
 80023d8:	2301      	movs	r3, #1
 80023da:	2120      	movs	r1, #32
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff feec 	bl	80021ba <hts221_write_reg>
 80023e2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80023e4:	68fb      	ldr	r3, [r7, #12]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80023f8:	f107 020b 	add.w	r2, r7, #11
 80023fc:	2301      	movs	r3, #1
 80023fe:	2130      	movs	r1, #48	; 0x30
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff fec2 	bl	800218a <hts221_read_reg>
 8002406:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8002408:	7afb      	ldrb	r3, [r7, #11]
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002412:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002416:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002420:	68fb      	ldr	r3, [r7, #12]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8002434:	f107 020b 	add.w	r2, r7, #11
 8002438:	2301      	movs	r3, #1
 800243a:	2131      	movs	r1, #49	; 0x31
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff fea4 	bl	800218a <hts221_read_reg>
 8002442:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8002444:	7afb      	ldrb	r3, [r7, #11]
 8002446:	ee07 3a90 	vmov	s15, r3
 800244a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800244e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002452:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800245c:	68fb      	ldr	r3, [r7, #12]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8002470:	f107 020f 	add.w	r2, r7, #15
 8002474:	2301      	movs	r3, #1
 8002476:	2132      	movs	r1, #50	; 0x32
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff fe86 	bl	800218a <hts221_read_reg>
 800247e:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d11b      	bne.n	80024be <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8002486:	f107 0210 	add.w	r2, r7, #16
 800248a:	2301      	movs	r3, #1
 800248c:	2135      	movs	r1, #53	; 0x35
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff fe7b 	bl	800218a <hts221_read_reg>
 8002494:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8002496:	7c3b      	ldrb	r3, [r7, #16]
 8002498:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800249c:	b2db      	uxtb	r3, r3
 800249e:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80024a0:	7cfb      	ldrb	r3, [r7, #19]
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	4413      	add	r3, r2
 80024a8:	ee07 3a90 	vmov	s15, r3
 80024ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024b0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80024b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80024be:	697b      	ldr	r3, [r7, #20]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80024d2:	f107 020f 	add.w	r2, r7, #15
 80024d6:	2301      	movs	r3, #1
 80024d8:	2133      	movs	r1, #51	; 0x33
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff fe55 	bl	800218a <hts221_read_reg>
 80024e0:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d11b      	bne.n	8002520 <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 80024e8:	f107 0210 	add.w	r2, r7, #16
 80024ec:	2301      	movs	r3, #1
 80024ee:	2135      	movs	r1, #53	; 0x35
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff fe4a 	bl	800218a <hts221_read_reg>
 80024f6:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80024f8:	7c3b      	ldrb	r3, [r7, #16]
 80024fa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002502:	7cfb      	ldrb	r3, [r7, #19]
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	4413      	add	r3, r2
 800250a:	ee07 3a90 	vmov	s15, r3
 800250e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002512:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002516:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8002520:	697b      	ldr	r3, [r7, #20]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8002534:	f107 0208 	add.w	r2, r7, #8
 8002538:	2302      	movs	r3, #2
 800253a:	2136      	movs	r1, #54	; 0x36
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff fe24 	bl	800218a <hts221_read_reg>
 8002542:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002544:	7a7b      	ldrb	r3, [r7, #9]
 8002546:	b29b      	uxth	r3, r3
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	b29a      	uxth	r2, r3
 800254c:	7a3b      	ldrb	r3, [r7, #8]
 800254e:	b29b      	uxth	r3, r3
 8002550:	4413      	add	r3, r2
 8002552:	b29b      	uxth	r3, r3
 8002554:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002556:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8002568:	68fb      	ldr	r3, [r7, #12]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 800257c:	f107 0208 	add.w	r2, r7, #8
 8002580:	2302      	movs	r3, #2
 8002582:	213a      	movs	r1, #58	; 0x3a
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff fe00 	bl	800218a <hts221_read_reg>
 800258a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800258c:	7a7b      	ldrb	r3, [r7, #9]
 800258e:	b29b      	uxth	r3, r3
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	b29a      	uxth	r2, r3
 8002594:	7a3b      	ldrb	r3, [r7, #8]
 8002596:	b29b      	uxth	r3, r3
 8002598:	4413      	add	r3, r2
 800259a:	b29b      	uxth	r3, r3
 800259c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800259e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025a2:	ee07 3a90 	vmov	s15, r3
 80025a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80025b0:	68fb      	ldr	r3, [r7, #12]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80025c4:	f107 0208 	add.w	r2, r7, #8
 80025c8:	2302      	movs	r3, #2
 80025ca:	213c      	movs	r1, #60	; 0x3c
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff fddc 	bl	800218a <hts221_read_reg>
 80025d2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80025d4:	7a7b      	ldrb	r3, [r7, #9]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	b29a      	uxth	r2, r3
 80025dc:	7a3b      	ldrb	r3, [r7, #8]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80025e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80025f8:	68fb      	ldr	r3, [r7, #12]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 800260c:	f107 0208 	add.w	r2, r7, #8
 8002610:	2302      	movs	r3, #2
 8002612:	213e      	movs	r1, #62	; 0x3e
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff fdb8 	bl	800218a <hts221_read_reg>
 800261a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800261c:	7a7b      	ldrb	r3, [r7, #9]
 800261e:	b29b      	uxth	r3, r3
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	b29a      	uxth	r2, r3
 8002624:	7a3b      	ldrb	r3, [r7, #8]
 8002626:	b29b      	uxth	r3, r3
 8002628:	4413      	add	r3, r2
 800262a:	b29b      	uxth	r3, r3
 800262c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800262e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002632:	ee07 3a90 	vmov	s15, r3
 8002636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8002640:	68fb      	ldr	r3, [r7, #12]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <LIS2DW12_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d103      	bne.n	8002668 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	e04d      	b.n	8002704 <LIS2DW12_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	7b1a      	ldrb	r2, [r3, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	695a      	ldr	r2, [r3, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	699a      	ldr	r2, [r3, #24]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a1b      	ldr	r2, [pc, #108]	; (8002710 <LIS2DW12_RegisterBusIO+0xc4>)
 80026a4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a1a      	ldr	r2, [pc, #104]	; (8002714 <LIS2DW12_RegisterBusIO+0xc8>)
 80026aa:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d103      	bne.n	80026c2 <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	e020      	b.n	8002704 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4798      	blx	r3
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <LIS2DW12_RegisterBusIO+0x8a>
    {
      ret = LIS2DW12_ERROR;
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	e016      	b.n	8002704 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d112      	bne.n	8002704 <LIS2DW12_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10d      	bne.n	8002704 <LIS2DW12_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 80026e8:	2305      	movs	r3, #5
 80026ea:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 80026ec:	7afb      	ldrb	r3, [r7, #11]
 80026ee:	461a      	mov	r2, r3
 80026f0:	2121      	movs	r1, #33	; 0x21
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fd87 	bl	8003206 <LIS2DW12_Write_Reg>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <LIS2DW12_RegisterBusIO+0xb8>
          {
            ret = LIS2DW12_ERROR;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002702:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002704:	68fb      	ldr	r3, [r7, #12]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	08003599 	.word	0x08003599
 8002714:	080035cf 	.word	0x080035cf

08002718 <LIS2DW12_Init>:
 * @brief  Initialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	331c      	adds	r3, #28
 8002724:	2101      	movs	r1, #1
 8002726:	4618      	mov	r0, r3
 8002728:	f001 fa94 	bl	8003c54 <lis2dw12_auto_increment_set>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295
 8002736:	e04b      	b.n	80027d0 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	331c      	adds	r3, #28
 800273c:	2101      	movs	r1, #1
 800273e:	4618      	mov	r0, r3
 8002740:	f001 f9a8 	bl	8003a94 <lis2dw12_block_data_update_set>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
 800274e:	e03f      	b.n	80027d0 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	331c      	adds	r3, #28
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f001 faa2 	bl	8003ca0 <lis2dw12_fifo_mode_set>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8002762:	f04f 33ff 	mov.w	r3, #4294967295
 8002766:	e033      	b.n	80027d0 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	331c      	adds	r3, #28
 800276c:	2104      	movs	r1, #4
 800276e:	4618      	mov	r0, r3
 8002770:	f000 ff78 	bl	8003664 <lis2dw12_power_mode_set>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295
 800277e:	e027      	b.n	80027d0 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a15      	ldr	r2, [pc, #84]	; (80027d8 <LIS2DW12_Init+0xc0>)
 8002784:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	331c      	adds	r3, #28
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f001 f869 	bl	8003874 <lis2dw12_data_rate_set>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ac:	e010      	b.n	80027d0 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	331c      	adds	r3, #28
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 f993 	bl	8003ae0 <lis2dw12_full_scale_set>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
 80027c4:	e004      	b.n	80027d0 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	42c80000 	.word	0x42c80000

080027dc <LIS2DW12_DeInit>:
 * @brief  Deinitialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f888 	bl	80028fa <LIS2DW12_ACC_Disable>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 80027f0:	f04f 33ff 	mov.w	r3, #4294967295
 80027f4:	e010      	b.n	8002818 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <LIS2DW12_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	331c      	adds	r3, #28
 800282e:	6839      	ldr	r1, [r7, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f001 f9fe 	bl	8003c32 <lis2dw12_device_id_get>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 800283c:	f04f 33ff 	mov.w	r3, #4294967295
 8002840:	e000      	b.n	8002844 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <LIS2DW12_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2DW12 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2200      	movs	r2, #0
 8002860:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2200      	movs	r2, #0
 8002866:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2200      	movs	r2, #0
 800286c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2200      	movs	r2, #0
 8002872:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	2210      	movs	r2, #16
 8002878:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2200      	movs	r2, #0
 800287e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4a06      	ldr	r2, [pc, #24]	; (80028a4 <LIS2DW12_GetCapabilities+0x58>)
 800288c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	44c80000 	.word	0x44c80000

080028a8 <LIS2DW12_ACC_Enable>:
 * @brief  Enable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e019      	b.n	80028f2 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode, pObj->acc_low_noise) != LIS2DW12_OK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80028d0:	461a      	mov	r2, r3
 80028d2:	eeb0 0a67 	vmov.f32	s0, s15
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fcb0 	bl	800323c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <LIS2DW12_ACC_Enable+0x40>
  {
    return LIS2DW12_ERROR;
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
 80028e6:	e004      	b.n	80028f2 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <LIS2DW12_ACC_Disable>:
 * @brief  Disable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	e010      	b.n	8002932 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	331c      	adds	r3, #28
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f000 ffac 	bl	8003874 <lis2dw12_data_rate_set>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8002922:	f04f 33ff 	mov.w	r3, #4294967295
 8002926:	e004      	b.n	8002932 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <LIS2DW12_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	331c      	adds	r3, #28
 800294e:	f107 020b 	add.w	r2, r7, #11
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f001 f8e9 	bl	8003b2c <lis2dw12_full_scale_get>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
 8002964:	e0a0      	b.n	8002aa8 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	331c      	adds	r3, #28
 800296a:	f107 020a 	add.w	r2, r7, #10
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fec5 	bl	8003700 <lis2dw12_power_mode_get>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
 8002980:	e092      	b.n	8002aa8 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch(mode)
 8002982:	7abb      	ldrb	r3, [r7, #10]
 8002984:	2b1b      	cmp	r3, #27
 8002986:	f200 8087 	bhi.w	8002a98 <LIS2DW12_ACC_GetSensitivity+0x15c>
 800298a:	a201      	add	r2, pc, #4	; (adr r2, 8002990 <LIS2DW12_ACC_GetSensitivity+0x54>)
 800298c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002990:	08002a01 	.word	0x08002a01
 8002994:	08002a4d 	.word	0x08002a4d
 8002998:	08002a4d 	.word	0x08002a4d
 800299c:	08002a4d 	.word	0x08002a4d
 80029a0:	08002a4d 	.word	0x08002a4d
 80029a4:	08002a99 	.word	0x08002a99
 80029a8:	08002a99 	.word	0x08002a99
 80029ac:	08002a99 	.word	0x08002a99
 80029b0:	08002a01 	.word	0x08002a01
 80029b4:	08002a4d 	.word	0x08002a4d
 80029b8:	08002a4d 	.word	0x08002a4d
 80029bc:	08002a4d 	.word	0x08002a4d
 80029c0:	08002a99 	.word	0x08002a99
 80029c4:	08002a99 	.word	0x08002a99
 80029c8:	08002a99 	.word	0x08002a99
 80029cc:	08002a99 	.word	0x08002a99
 80029d0:	08002a01 	.word	0x08002a01
 80029d4:	08002a4d 	.word	0x08002a4d
 80029d8:	08002a4d 	.word	0x08002a4d
 80029dc:	08002a4d 	.word	0x08002a4d
 80029e0:	08002a4d 	.word	0x08002a4d
 80029e4:	08002a99 	.word	0x08002a99
 80029e8:	08002a99 	.word	0x08002a99
 80029ec:	08002a99 	.word	0x08002a99
 80029f0:	08002a01 	.word	0x08002a01
 80029f4:	08002a4d 	.word	0x08002a4d
 80029f8:	08002a4d 	.word	0x08002a4d
 80029fc:	08002a4d 	.word	0x08002a4d
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8002a00:	7afb      	ldrb	r3, [r7, #11]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d81a      	bhi.n	8002a3c <LIS2DW12_ACC_GetSensitivity+0x100>
 8002a06:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8002a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0c:	08002a1d 	.word	0x08002a1d
 8002a10:	08002a25 	.word	0x08002a25
 8002a14:	08002a2d 	.word	0x08002a2d
 8002a18:	08002a35 	.word	0x08002a35
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4a24      	ldr	r2, [pc, #144]	; (8002ab0 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002a20:	601a      	str	r2, [r3, #0]
           break;
 8002a22:	e012      	b.n	8002a4a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4a23      	ldr	r2, [pc, #140]	; (8002ab4 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8002a28:	601a      	str	r2, [r3, #0]
          break;
 8002a2a:	e00e      	b.n	8002a4a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4a22      	ldr	r2, [pc, #136]	; (8002ab8 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8002a30:	601a      	str	r2, [r3, #0]
           break;
 8002a32:	e00a      	b.n	8002a4a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	4a21      	ldr	r2, [pc, #132]	; (8002abc <LIS2DW12_ACC_GetSensitivity+0x180>)
 8002a38:	601a      	str	r2, [r3, #0]
          break;
 8002a3a:	e006      	b.n	8002a4a <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	4a20      	ldr	r2, [pc, #128]	; (8002ac0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002a40:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295
 8002a46:	60fb      	str	r3, [r7, #12]
          break;
 8002a48:	bf00      	nop
      }
      break;
 8002a4a:	e02c      	b.n	8002aa6 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8002a4c:	7afb      	ldrb	r3, [r7, #11]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d81a      	bhi.n	8002a88 <LIS2DW12_ACC_GetSensitivity+0x14c>
 8002a52:	a201      	add	r2, pc, #4	; (adr r2, 8002a58 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8002a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a58:	08002a69 	.word	0x08002a69
 8002a5c:	08002a71 	.word	0x08002a71
 8002a60:	08002a79 	.word	0x08002a79
 8002a64:	08002a81 	.word	0x08002a81
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	4a16      	ldr	r2, [pc, #88]	; (8002ac4 <LIS2DW12_ACC_GetSensitivity+0x188>)
 8002a6c:	601a      	str	r2, [r3, #0]
           break;
 8002a6e:	e012      	b.n	8002a96 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4a15      	ldr	r2, [pc, #84]	; (8002ac8 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8002a74:	601a      	str	r2, [r3, #0]
          break;
 8002a76:	e00e      	b.n	8002a96 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002a7c:	601a      	str	r2, [r3, #0]
           break;
 8002a7e:	e00a      	b.n	8002a96 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	4a0c      	ldr	r2, [pc, #48]	; (8002ab4 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8002a84:	601a      	str	r2, [r3, #0]
          break;
 8002a86:	e006      	b.n	8002a96 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002a8c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a92:	60fb      	str	r3, [r7, #12]
          break;
 8002a94:	bf00      	nop
      }
      break;
 8002a96:	e006      	b.n	8002aa6 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002a9c:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa2:	60fb      	str	r3, [r7, #12]
      break;
 8002aa4:	bf00      	nop
  }

  return ret;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	3f79db23 	.word	0x3f79db23
 8002ab4:	3ff9db23 	.word	0x3ff9db23
 8002ab8:	4079db23 	.word	0x4079db23
 8002abc:	40f9db23 	.word	0x40f9db23
 8002ac0:	bf800000 	.word	0xbf800000
 8002ac4:	3e79db23 	.word	0x3e79db23
 8002ac8:	3ef9db23 	.word	0x3ef9db23

08002acc <LIS2DW12_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	331c      	adds	r3, #28
 8002ade:	f107 020b 	add.w	r2, r7, #11
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 ff0b 	bl	8003900 <lis2dw12_data_rate_get>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8002af0:	f04f 33ff 	mov.w	r3, #4294967295
 8002af4:	e1d4      	b.n	8002ea0 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	331c      	adds	r3, #28
 8002afa:	f107 020a 	add.w	r2, r7, #10
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fdfd 	bl	8003700 <lis2dw12_power_mode_get>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8002b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b10:	e1c6      	b.n	8002ea0 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 8002b12:	7afb      	ldrb	r3, [r7, #11]
 8002b14:	2b32      	cmp	r3, #50	; 0x32
 8002b16:	f200 81bb 	bhi.w	8002e90 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 8002b1a:	a201      	add	r2, pc, #4	; (adr r2, 8002b20 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8002b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b20:	08002bed 	.word	0x08002bed
 8002b24:	08002bf7 	.word	0x08002bf7
 8002b28:	08002c95 	.word	0x08002c95
 8002b2c:	08002c9d 	.word	0x08002c9d
 8002b30:	08002ca5 	.word	0x08002ca5
 8002b34:	08002cad 	.word	0x08002cad
 8002b38:	08002cb5 	.word	0x08002cb5
 8002b3c:	08002cbd 	.word	0x08002cbd
 8002b40:	08002d59 	.word	0x08002d59
 8002b44:	08002df5 	.word	0x08002df5
 8002b48:	08002e91 	.word	0x08002e91
 8002b4c:	08002e91 	.word	0x08002e91
 8002b50:	08002e91 	.word	0x08002e91
 8002b54:	08002e91 	.word	0x08002e91
 8002b58:	08002e91 	.word	0x08002e91
 8002b5c:	08002e91 	.word	0x08002e91
 8002b60:	08002e91 	.word	0x08002e91
 8002b64:	08002e91 	.word	0x08002e91
 8002b68:	08002bed 	.word	0x08002bed
 8002b6c:	08002e91 	.word	0x08002e91
 8002b70:	08002e91 	.word	0x08002e91
 8002b74:	08002e91 	.word	0x08002e91
 8002b78:	08002e91 	.word	0x08002e91
 8002b7c:	08002e91 	.word	0x08002e91
 8002b80:	08002e91 	.word	0x08002e91
 8002b84:	08002e91 	.word	0x08002e91
 8002b88:	08002e91 	.word	0x08002e91
 8002b8c:	08002e91 	.word	0x08002e91
 8002b90:	08002e91 	.word	0x08002e91
 8002b94:	08002e91 	.word	0x08002e91
 8002b98:	08002e91 	.word	0x08002e91
 8002b9c:	08002e91 	.word	0x08002e91
 8002ba0:	08002e91 	.word	0x08002e91
 8002ba4:	08002e91 	.word	0x08002e91
 8002ba8:	08002e91 	.word	0x08002e91
 8002bac:	08002e91 	.word	0x08002e91
 8002bb0:	08002e91 	.word	0x08002e91
 8002bb4:	08002e91 	.word	0x08002e91
 8002bb8:	08002e91 	.word	0x08002e91
 8002bbc:	08002e91 	.word	0x08002e91
 8002bc0:	08002e91 	.word	0x08002e91
 8002bc4:	08002e91 	.word	0x08002e91
 8002bc8:	08002e91 	.word	0x08002e91
 8002bcc:	08002e91 	.word	0x08002e91
 8002bd0:	08002e91 	.word	0x08002e91
 8002bd4:	08002e91 	.word	0x08002e91
 8002bd8:	08002e91 	.word	0x08002e91
 8002bdc:	08002e91 	.word	0x08002e91
 8002be0:	08002e91 	.word	0x08002e91
 8002be4:	08002e91 	.word	0x08002e91
 8002be8:	08002bed 	.word	0x08002bed
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
      break;
 8002bf4:	e153      	b.n	8002e9e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8002bf6:	7abb      	ldrb	r3, [r7, #10]
 8002bf8:	2b1b      	cmp	r3, #27
 8002bfa:	d843      	bhi.n	8002c84 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 8002bfc:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 8002bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c02:	bf00      	nop
 8002c04:	08002c7d 	.word	0x08002c7d
 8002c08:	08002c7d 	.word	0x08002c7d
 8002c0c:	08002c7d 	.word	0x08002c7d
 8002c10:	08002c7d 	.word	0x08002c7d
 8002c14:	08002c75 	.word	0x08002c75
 8002c18:	08002c85 	.word	0x08002c85
 8002c1c:	08002c85 	.word	0x08002c85
 8002c20:	08002c85 	.word	0x08002c85
 8002c24:	08002c7d 	.word	0x08002c7d
 8002c28:	08002c7d 	.word	0x08002c7d
 8002c2c:	08002c7d 	.word	0x08002c7d
 8002c30:	08002c7d 	.word	0x08002c7d
 8002c34:	08002c85 	.word	0x08002c85
 8002c38:	08002c85 	.word	0x08002c85
 8002c3c:	08002c85 	.word	0x08002c85
 8002c40:	08002c85 	.word	0x08002c85
 8002c44:	08002c7d 	.word	0x08002c7d
 8002c48:	08002c7d 	.word	0x08002c7d
 8002c4c:	08002c7d 	.word	0x08002c7d
 8002c50:	08002c7d 	.word	0x08002c7d
 8002c54:	08002c75 	.word	0x08002c75
 8002c58:	08002c85 	.word	0x08002c85
 8002c5c:	08002c85 	.word	0x08002c85
 8002c60:	08002c85 	.word	0x08002c85
 8002c64:	08002c7d 	.word	0x08002c7d
 8002c68:	08002c7d 	.word	0x08002c7d
 8002c6c:	08002c7d 	.word	0x08002c7d
 8002c70:	08002c7d 	.word	0x08002c7d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	4a8c      	ldr	r2, [pc, #560]	; (8002ea8 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002c78:	601a      	str	r2, [r3, #0]
           break;
 8002c7a:	e00a      	b.n	8002c92 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	4a8b      	ldr	r2, [pc, #556]	; (8002eac <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8002c80:	601a      	str	r2, [r3, #0]
          break;
 8002c82:	e006      	b.n	8002c92 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	4a8a      	ldr	r2, [pc, #552]	; (8002eb0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002c88:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8e:	60fb      	str	r3, [r7, #12]
          break;
 8002c90:	bf00      	nop
      }
      break;
 8002c92:	e104      	b.n	8002e9e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	4a84      	ldr	r2, [pc, #528]	; (8002ea8 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002c98:	601a      	str	r2, [r3, #0]
      break;
 8002c9a:	e100      	b.n	8002e9e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	4a85      	ldr	r2, [pc, #532]	; (8002eb4 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 8002ca0:	601a      	str	r2, [r3, #0]
      break;
 8002ca2:	e0fc      	b.n	8002e9e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4a84      	ldr	r2, [pc, #528]	; (8002eb8 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 8002ca8:	601a      	str	r2, [r3, #0]
      break;
 8002caa:	e0f8      	b.n	8002e9e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	4a83      	ldr	r2, [pc, #524]	; (8002ebc <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 8002cb0:	601a      	str	r2, [r3, #0]
      break;
 8002cb2:	e0f4      	b.n	8002e9e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	4a82      	ldr	r2, [pc, #520]	; (8002ec0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002cb8:	601a      	str	r2, [r3, #0]
      break;
 8002cba:	e0f0      	b.n	8002e9e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8002cbc:	7abb      	ldrb	r3, [r7, #10]
 8002cbe:	2b1b      	cmp	r3, #27
 8002cc0:	d842      	bhi.n	8002d48 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 8002cc2:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8002cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc8:	08002d41 	.word	0x08002d41
 8002ccc:	08002d41 	.word	0x08002d41
 8002cd0:	08002d41 	.word	0x08002d41
 8002cd4:	08002d41 	.word	0x08002d41
 8002cd8:	08002d39 	.word	0x08002d39
 8002cdc:	08002d49 	.word	0x08002d49
 8002ce0:	08002d49 	.word	0x08002d49
 8002ce4:	08002d49 	.word	0x08002d49
 8002ce8:	08002d41 	.word	0x08002d41
 8002cec:	08002d41 	.word	0x08002d41
 8002cf0:	08002d41 	.word	0x08002d41
 8002cf4:	08002d41 	.word	0x08002d41
 8002cf8:	08002d49 	.word	0x08002d49
 8002cfc:	08002d49 	.word	0x08002d49
 8002d00:	08002d49 	.word	0x08002d49
 8002d04:	08002d49 	.word	0x08002d49
 8002d08:	08002d41 	.word	0x08002d41
 8002d0c:	08002d41 	.word	0x08002d41
 8002d10:	08002d41 	.word	0x08002d41
 8002d14:	08002d41 	.word	0x08002d41
 8002d18:	08002d39 	.word	0x08002d39
 8002d1c:	08002d49 	.word	0x08002d49
 8002d20:	08002d49 	.word	0x08002d49
 8002d24:	08002d49 	.word	0x08002d49
 8002d28:	08002d41 	.word	0x08002d41
 8002d2c:	08002d41 	.word	0x08002d41
 8002d30:	08002d41 	.word	0x08002d41
 8002d34:	08002d41 	.word	0x08002d41
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	4a62      	ldr	r2, [pc, #392]	; (8002ec4 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 8002d3c:	601a      	str	r2, [r3, #0]
           break;
 8002d3e:	e00a      	b.n	8002d56 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	4a5f      	ldr	r2, [pc, #380]	; (8002ec0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002d44:	601a      	str	r2, [r3, #0]
          break;
 8002d46:	e006      	b.n	8002d56 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4a59      	ldr	r2, [pc, #356]	; (8002eb0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002d4c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d52:	60fb      	str	r3, [r7, #12]
          break;
 8002d54:	bf00      	nop
      }
      break;
 8002d56:	e0a2      	b.n	8002e9e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8002d58:	7abb      	ldrb	r3, [r7, #10]
 8002d5a:	2b1b      	cmp	r3, #27
 8002d5c:	d842      	bhi.n	8002de4 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 8002d5e:	a201      	add	r2, pc, #4	; (adr r2, 8002d64 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8002d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d64:	08002ddd 	.word	0x08002ddd
 8002d68:	08002ddd 	.word	0x08002ddd
 8002d6c:	08002ddd 	.word	0x08002ddd
 8002d70:	08002ddd 	.word	0x08002ddd
 8002d74:	08002dd5 	.word	0x08002dd5
 8002d78:	08002de5 	.word	0x08002de5
 8002d7c:	08002de5 	.word	0x08002de5
 8002d80:	08002de5 	.word	0x08002de5
 8002d84:	08002ddd 	.word	0x08002ddd
 8002d88:	08002ddd 	.word	0x08002ddd
 8002d8c:	08002ddd 	.word	0x08002ddd
 8002d90:	08002ddd 	.word	0x08002ddd
 8002d94:	08002de5 	.word	0x08002de5
 8002d98:	08002de5 	.word	0x08002de5
 8002d9c:	08002de5 	.word	0x08002de5
 8002da0:	08002de5 	.word	0x08002de5
 8002da4:	08002ddd 	.word	0x08002ddd
 8002da8:	08002ddd 	.word	0x08002ddd
 8002dac:	08002ddd 	.word	0x08002ddd
 8002db0:	08002ddd 	.word	0x08002ddd
 8002db4:	08002dd5 	.word	0x08002dd5
 8002db8:	08002de5 	.word	0x08002de5
 8002dbc:	08002de5 	.word	0x08002de5
 8002dc0:	08002de5 	.word	0x08002de5
 8002dc4:	08002ddd 	.word	0x08002ddd
 8002dc8:	08002ddd 	.word	0x08002ddd
 8002dcc:	08002ddd 	.word	0x08002ddd
 8002dd0:	08002ddd 	.word	0x08002ddd
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	4a3c      	ldr	r2, [pc, #240]	; (8002ec8 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8002dd8:	601a      	str	r2, [r3, #0]
           break;
 8002dda:	e00a      	b.n	8002df2 <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	4a38      	ldr	r2, [pc, #224]	; (8002ec0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002de0:	601a      	str	r2, [r3, #0]
          break;
 8002de2:	e006      	b.n	8002df2 <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	4a32      	ldr	r2, [pc, #200]	; (8002eb0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002de8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295
 8002dee:	60fb      	str	r3, [r7, #12]
          break;
 8002df0:	bf00      	nop
      }
      break;
 8002df2:	e054      	b.n	8002e9e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8002df4:	7abb      	ldrb	r3, [r7, #10]
 8002df6:	2b1b      	cmp	r3, #27
 8002df8:	d842      	bhi.n	8002e80 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 8002dfa:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 8002dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e00:	08002e79 	.word	0x08002e79
 8002e04:	08002e79 	.word	0x08002e79
 8002e08:	08002e79 	.word	0x08002e79
 8002e0c:	08002e79 	.word	0x08002e79
 8002e10:	08002e71 	.word	0x08002e71
 8002e14:	08002e81 	.word	0x08002e81
 8002e18:	08002e81 	.word	0x08002e81
 8002e1c:	08002e81 	.word	0x08002e81
 8002e20:	08002e79 	.word	0x08002e79
 8002e24:	08002e79 	.word	0x08002e79
 8002e28:	08002e79 	.word	0x08002e79
 8002e2c:	08002e79 	.word	0x08002e79
 8002e30:	08002e81 	.word	0x08002e81
 8002e34:	08002e81 	.word	0x08002e81
 8002e38:	08002e81 	.word	0x08002e81
 8002e3c:	08002e81 	.word	0x08002e81
 8002e40:	08002e79 	.word	0x08002e79
 8002e44:	08002e79 	.word	0x08002e79
 8002e48:	08002e79 	.word	0x08002e79
 8002e4c:	08002e79 	.word	0x08002e79
 8002e50:	08002e71 	.word	0x08002e71
 8002e54:	08002e81 	.word	0x08002e81
 8002e58:	08002e81 	.word	0x08002e81
 8002e5c:	08002e81 	.word	0x08002e81
 8002e60:	08002e79 	.word	0x08002e79
 8002e64:	08002e79 	.word	0x08002e79
 8002e68:	08002e79 	.word	0x08002e79
 8002e6c:	08002e79 	.word	0x08002e79
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	4a16      	ldr	r2, [pc, #88]	; (8002ecc <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8002e74:	601a      	str	r2, [r3, #0]
           break;
 8002e76:	e00a      	b.n	8002e8e <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	4a11      	ldr	r2, [pc, #68]	; (8002ec0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002e7c:	601a      	str	r2, [r3, #0]
          break;
 8002e7e:	e006      	b.n	8002e8e <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	4a0b      	ldr	r2, [pc, #44]	; (8002eb0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002e84:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8a:	60fb      	str	r3, [r7, #12]
          break;
 8002e8c:	bf00      	nop
      }
      break;
 8002e8e:	e006      	b.n	8002e9e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	4a07      	ldr	r2, [pc, #28]	; (8002eb0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002e94:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9a:	60fb      	str	r3, [r7, #12]
      break;
 8002e9c:	bf00      	nop
  }

  return ret;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	41480000 	.word	0x41480000
 8002eac:	3fcccccd 	.word	0x3fcccccd
 8002eb0:	bf800000 	.word	0xbf800000
 8002eb4:	41c80000 	.word	0x41c80000
 8002eb8:	42480000 	.word	0x42480000
 8002ebc:	42c80000 	.word	0x42c80000
 8002ec0:	43480000 	.word	0x43480000
 8002ec4:	43c80000 	.word	0x43c80000
 8002ec8:	44480000 	.word	0x44480000
 8002ecc:	44c80000 	.word	0x44c80000

08002ed0 <LIS2DW12_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8002edc:	2200      	movs	r2, #0
 8002ede:	2100      	movs	r1, #0
 8002ee0:	ed97 0a00 	vldr	s0, [r7]
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f805 	bl	8002ef4 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8002eea:	4603      	mov	r3, r0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f00:	460b      	mov	r3, r1
 8002f02:	71fb      	strb	r3, [r7, #7]
 8002f04:	4613      	mov	r3, r2
 8002f06:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d109      	bne.n	8002f26 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8002f12:	79ba      	ldrb	r2, [r7, #6]
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	4619      	mov	r1, r3
 8002f18:	ed97 0a02 	vldr	s0, [r7, #8]
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f98d 	bl	800323c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002f22:	4603      	mov	r3, r0
 8002f24:	e008      	b.n	8002f38 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8002f26:	79ba      	ldrb	r2, [r7, #6]
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 fa9f 	bl	8003474 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8002f36:	4603      	mov	r3, r0
  }
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <LIS2DW12_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	331c      	adds	r3, #28
 8002f52:	f107 020b 	add.w	r2, r7, #11
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fde7 	bl	8003b2c <lis2dw12_full_scale_get>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8002f64:	f04f 33ff 	mov.w	r3, #4294967295
 8002f68:	e027      	b.n	8002fba <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8002f6a:	7afb      	ldrb	r3, [r7, #11]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d81b      	bhi.n	8002fa8 <LIS2DW12_ACC_GetFullScale+0x68>
 8002f70:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <LIS2DW12_ACC_GetFullScale+0x38>)
 8002f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f76:	bf00      	nop
 8002f78:	08002f89 	.word	0x08002f89
 8002f7c:	08002f91 	.word	0x08002f91
 8002f80:	08002f99 	.word	0x08002f99
 8002f84:	08002fa1 	.word	0x08002fa1
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	601a      	str	r2, [r3, #0]
      break;
 8002f8e:	e013      	b.n	8002fb8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2204      	movs	r2, #4
 8002f94:	601a      	str	r2, [r3, #0]
      break;
 8002f96:	e00f      	b.n	8002fb8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	601a      	str	r2, [r3, #0]
      break;
 8002f9e:	e00b      	b.n	8002fb8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2210      	movs	r2, #16
 8002fa4:	601a      	str	r2, [r3, #0]
      break;
 8002fa6:	e007      	b.n	8002fb8 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f04f 32ff 	mov.w	r2, #4294967295
 8002fae:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb4:	60fb      	str	r3, [r7, #12]
      break;
 8002fb6:	bf00      	nop
  }

  return ret;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop

08002fc4 <LIS2DW12_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
         : (FullScale <= 4) ? LIS2DW12_4g
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	dd0b      	ble.n	8002fec <LIS2DW12_ACC_SetFullScale+0x28>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	dd06      	ble.n	8002fe8 <LIS2DW12_ACC_SetFullScale+0x24>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	dc01      	bgt.n	8002fe4 <LIS2DW12_ACC_SetFullScale+0x20>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e004      	b.n	8002fee <LIS2DW12_ACC_SetFullScale+0x2a>
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e002      	b.n	8002fee <LIS2DW12_ACC_SetFullScale+0x2a>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <LIS2DW12_ACC_SetFullScale+0x2a>
 8002fec:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8002fee:	73fb      	strb	r3, [r7, #15]
         : (FullScale <= 8) ? LIS2DW12_8g
         :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	331c      	adds	r3, #28
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fd71 	bl	8003ae0 <lis2dw12_full_scale_set>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8003004:	f04f 33ff 	mov.w	r3, #4294967295
 8003008:	e000      	b.n	800300c <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <LIS2DW12_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	331c      	adds	r3, #28
 8003026:	f107 020b 	add.w	r2, r7, #11
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fb67 	bl	8003700 <lis2dw12_power_mode_get>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
 800303c:	e089      	b.n	8003152 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	331c      	adds	r3, #28
 8003042:	f107 020c 	add.w	r2, r7, #12
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fda7 	bl	8003b9c <lis2dw12_acceleration_raw_get>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8003054:	f04f 33ff 	mov.w	r3, #4294967295
 8003058:	e07b      	b.n	8003152 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch(mode)
 800305a:	7afb      	ldrb	r3, [r7, #11]
 800305c:	2b1b      	cmp	r3, #27
 800305e:	d873      	bhi.n	8003148 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8003060:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8003062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003066:	bf00      	nop
 8003068:	080030d9 	.word	0x080030d9
 800306c:	08003111 	.word	0x08003111
 8003070:	08003111 	.word	0x08003111
 8003074:	08003111 	.word	0x08003111
 8003078:	08003111 	.word	0x08003111
 800307c:	08003149 	.word	0x08003149
 8003080:	08003149 	.word	0x08003149
 8003084:	08003149 	.word	0x08003149
 8003088:	080030d9 	.word	0x080030d9
 800308c:	08003111 	.word	0x08003111
 8003090:	08003111 	.word	0x08003111
 8003094:	08003111 	.word	0x08003111
 8003098:	08003149 	.word	0x08003149
 800309c:	08003149 	.word	0x08003149
 80030a0:	08003149 	.word	0x08003149
 80030a4:	08003149 	.word	0x08003149
 80030a8:	080030d9 	.word	0x080030d9
 80030ac:	08003111 	.word	0x08003111
 80030b0:	08003111 	.word	0x08003111
 80030b4:	08003111 	.word	0x08003111
 80030b8:	08003111 	.word	0x08003111
 80030bc:	08003149 	.word	0x08003149
 80030c0:	08003149 	.word	0x08003149
 80030c4:	08003149 	.word	0x08003149
 80030c8:	080030d9 	.word	0x080030d9
 80030cc:	08003111 	.word	0x08003111
 80030d0:	08003111 	.word	0x08003111
 80030d4:	08003111 	.word	0x08003111
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 80030d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	da00      	bge.n	80030e2 <LIS2DW12_ACC_GetAxesRaw+0xce>
 80030e0:	330f      	adds	r3, #15
 80030e2:	111b      	asrs	r3, r3, #4
 80030e4:	b21a      	sxth	r2, r3
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 80030ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	da00      	bge.n	80030f4 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 80030f2:	330f      	adds	r3, #15
 80030f4:	111b      	asrs	r3, r3, #4
 80030f6:	b21a      	sxth	r2, r3
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 80030fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	da00      	bge.n	8003106 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8003104:	330f      	adds	r3, #15
 8003106:	111b      	asrs	r3, r3, #4
 8003108:	b21a      	sxth	r2, r3
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	809a      	strh	r2, [r3, #4]
      break;
 800310e:	e01f      	b.n	8003150 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8003110:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	da00      	bge.n	800311a <LIS2DW12_ACC_GetAxesRaw+0x106>
 8003118:	3303      	adds	r3, #3
 800311a:	109b      	asrs	r3, r3, #2
 800311c:	b21a      	sxth	r2, r3
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8003122:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003126:	2b00      	cmp	r3, #0
 8003128:	da00      	bge.n	800312c <LIS2DW12_ACC_GetAxesRaw+0x118>
 800312a:	3303      	adds	r3, #3
 800312c:	109b      	asrs	r3, r3, #2
 800312e:	b21a      	sxth	r2, r3
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8003134:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	da00      	bge.n	800313e <LIS2DW12_ACC_GetAxesRaw+0x12a>
 800313c:	3303      	adds	r3, #3
 800313e:	109b      	asrs	r3, r3, #2
 8003140:	b21a      	sxth	r2, r3
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	809a      	strh	r2, [r3, #4]
      break;
 8003146:	e003      	b.n	8003150 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8003148:	f04f 33ff 	mov.w	r3, #4294967295
 800314c:	617b      	str	r3, [r7, #20]
      break;
 800314e:	bf00      	nop
  }

  return ret;
 8003150:	697b      	ldr	r3, [r7, #20]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop

0800315c <LIS2DW12_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 800316c:	f107 0310 	add.w	r3, r7, #16
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff ff4e 	bl	8003014 <LIS2DW12_ACC_GetAxesRaw>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 800317e:	f04f 33ff 	mov.w	r3, #4294967295
 8003182:	e03c      	b.n	80031fe <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8003184:	f107 030c 	add.w	r3, r7, #12
 8003188:	4619      	mov	r1, r3
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff fbd6 	bl	800293c <LIS2DW12_ACC_GetSensitivity>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295
 800319a:	e030      	b.n	80031fe <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800319c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80031a0:	ee07 3a90 	vmov	s15, r3
 80031a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80031ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031b4:	ee17 2a90 	vmov	r2, s15
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80031bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80031c0:	ee07 3a90 	vmov	s15, r3
 80031c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80031cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031d4:	ee17 2a90 	vmov	r2, s15
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80031dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80031e0:	ee07 3a90 	vmov	s15, r3
 80031e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80031ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031f4:	ee17 2a90 	vmov	r2, s15
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <LIS2DW12_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	460b      	mov	r3, r1
 8003210:	70fb      	strb	r3, [r7, #3]
 8003212:	4613      	mov	r3, r2
 8003214:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f103 001c 	add.w	r0, r3, #28
 800321c:	1cba      	adds	r2, r7, #2
 800321e:	78f9      	ldrb	r1, [r7, #3]
 8003220:	2301      	movs	r3, #1
 8003222:	f000 fa07 	bl	8003634 <lis2dw12_write_reg>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 800322c:	f04f 33ff 	mov.w	r3, #4294967295
 8003230:	e000      	b.n	8003234 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	ed87 0a02 	vstr	s0, [r7, #8]
 8003248:	460b      	mov	r3, r1
 800324a:	71fb      	strb	r3, [r7, #7]
 800324c:	4613      	mov	r3, r2
 800324e:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	3b01      	subs	r3, #1
 8003254:	2b03      	cmp	r3, #3
 8003256:	d80b      	bhi.n	8003270 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8003258:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	0800329d 	.word	0x0800329d
 8003264:	080032c9 	.word	0x080032c9
 8003268:	080032f5 	.word	0x080032f5
 800326c:	08003321 	.word	0x08003321
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8003270:	79bb      	ldrb	r3, [r7, #6]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d002      	beq.n	800327c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8003276:	2304      	movs	r3, #4
 8003278:	75fb      	strb	r3, [r7, #23]
          break;
 800327a:	e002      	b.n	8003282 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 800327c:	2314      	movs	r3, #20
 800327e:	75fb      	strb	r3, [r7, #23]
          break;
 8003280:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if(Odr < 12.5f)
 8003282:	edd7 7a02 	vldr	s15, [r7, #8]
 8003286:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800328a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800328e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003292:	d400      	bmi.n	8003296 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8003294:	e05a      	b.n	800334c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8003296:	4b6f      	ldr	r3, [pc, #444]	; (8003454 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8003298:	60bb      	str	r3, [r7, #8]
      break;
 800329a:	e057      	b.n	800334c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 800329c:	79bb      	ldrb	r3, [r7, #6]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d002      	beq.n	80032a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80032a2:	2303      	movs	r3, #3
 80032a4:	75fb      	strb	r3, [r7, #23]
          break;
 80032a6:	e002      	b.n	80032ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80032a8:	2313      	movs	r3, #19
 80032aa:	75fb      	strb	r3, [r7, #23]
          break;
 80032ac:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 80032ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80032b2:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8003458 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80032b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032be:	dc00      	bgt.n	80032c2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 80032c0:	e044      	b.n	800334c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80032c2:	4b66      	ldr	r3, [pc, #408]	; (800345c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80032c4:	60bb      	str	r3, [r7, #8]
      break;
 80032c6:	e041      	b.n	800334c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 80032c8:	79bb      	ldrb	r3, [r7, #6]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d002      	beq.n	80032d4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 80032ce:	2302      	movs	r3, #2
 80032d0:	75fb      	strb	r3, [r7, #23]
          break;
 80032d2:	e002      	b.n	80032da <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80032d4:	2312      	movs	r3, #18
 80032d6:	75fb      	strb	r3, [r7, #23]
          break;
 80032d8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 80032da:	edd7 7a02 	vldr	s15, [r7, #8]
 80032de:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003458 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80032e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ea:	dc00      	bgt.n	80032ee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 80032ec:	e02e      	b.n	800334c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80032ee:	4b5b      	ldr	r3, [pc, #364]	; (800345c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80032f0:	60bb      	str	r3, [r7, #8]
      break;
 80032f2:	e02b      	b.n	800334c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 80032f4:	79bb      	ldrb	r3, [r7, #6]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d002      	beq.n	8003300 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
          break;
 80032fe:	e002      	b.n	8003306 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8003300:	2311      	movs	r3, #17
 8003302:	75fb      	strb	r3, [r7, #23]
          break;
 8003304:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8003306:	edd7 7a02 	vldr	s15, [r7, #8]
 800330a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003458 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800330e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003316:	dc00      	bgt.n	800331a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8003318:	e018      	b.n	800334c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800331a:	4b50      	ldr	r3, [pc, #320]	; (800345c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800331c:	60bb      	str	r3, [r7, #8]
      break;
 800331e:	e015      	b.n	800334c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8003320:	79bb      	ldrb	r3, [r7, #6]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d002      	beq.n	800332c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8003326:	2300      	movs	r3, #0
 8003328:	75fb      	strb	r3, [r7, #23]
          break;
 800332a:	e002      	b.n	8003332 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 800332c:	2310      	movs	r3, #16
 800332e:	75fb      	strb	r3, [r7, #23]
          break;
 8003330:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8003332:	edd7 7a02 	vldr	s15, [r7, #8]
 8003336:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003458 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800333a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800333e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003342:	dc00      	bgt.n	8003346 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8003344:	e001      	b.n	800334a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8003346:	4b45      	ldr	r3, [pc, #276]	; (800345c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003348:	60bb      	str	r3, [r7, #8]
      break;
 800334a:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 800334c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003350:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003460 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8003354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335c:	d801      	bhi.n	8003362 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 800335e:	2301      	movs	r3, #1
 8003360:	e04d      	b.n	80033fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003362:	edd7 7a02 	vldr	s15, [r7, #8]
 8003366:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800336a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800336e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003372:	d801      	bhi.n	8003378 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8003374:	2302      	movs	r3, #2
 8003376:	e042      	b.n	80033fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003378:	edd7 7a02 	vldr	s15, [r7, #8]
 800337c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003388:	d801      	bhi.n	800338e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 800338a:	2303      	movs	r3, #3
 800338c:	e037      	b.n	80033fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800338e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003392:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003464 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8003396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800339a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339e:	d801      	bhi.n	80033a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80033a0:	2304      	movs	r3, #4
 80033a2:	e02c      	b.n	80033fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80033a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80033a8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003468 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 80033ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b4:	d801      	bhi.n	80033ba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 80033b6:	2305      	movs	r3, #5
 80033b8:	e021      	b.n	80033fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80033ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80033be:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003458 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80033c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ca:	d801      	bhi.n	80033d0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 80033cc:	2306      	movs	r3, #6
 80033ce:	e016      	b.n	80033fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80033d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80033d4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800346c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 80033d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e0:	d801      	bhi.n	80033e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 80033e2:	2307      	movs	r3, #7
 80033e4:	e00b      	b.n	80033fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80033e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80033ea:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003470 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 80033ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f6:	d801      	bhi.n	80033fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 80033f8:	2308      	movs	r3, #8
 80033fa:	e000      	b.n	80033fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80033fc:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 80033fe:	75bb      	strb	r3, [r7, #22]
          : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
          : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
          :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	331c      	adds	r3, #28
 8003404:	7dba      	ldrb	r2, [r7, #22]
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fa33 	bl	8003874 <lis2dw12_data_rate_set>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8003414:	f04f 33ff 	mov.w	r3, #4294967295
 8003418:	e018      	b.n	800344c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	331c      	adds	r3, #28
 800341e:	7dfa      	ldrb	r2, [r7, #23]
 8003420:	4611      	mov	r1, r2
 8003422:	4618      	mov	r0, r3
 8003424:	f000 f91e 	bl	8003664 <lis2dw12_power_mode_set>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 800342e:	f04f 33ff 	mov.w	r3, #4294967295
 8003432:	e00b      	b.n	800344c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	79fa      	ldrb	r2, [r7, #7]
 800343e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	79ba      	ldrb	r2, [r7, #6]
 8003446:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	41480000 	.word	0x41480000
 8003458:	43480000 	.word	0x43480000
 800345c:	43480000 	.word	0x43480000
 8003460:	3fcccccd 	.word	0x3fcccccd
 8003464:	42480000 	.word	0x42480000
 8003468:	42c80000 	.word	0x42c80000
 800346c:	43c80000 	.word	0x43c80000
 8003470:	44480000 	.word	0x44480000

08003474 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003480:	460b      	mov	r3, r1
 8003482:	71fb      	strb	r3, [r7, #7]
 8003484:	4613      	mov	r3, r2
 8003486:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	79fa      	ldrb	r2, [r7, #7]
 800348c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	79ba      	ldrb	r2, [r7, #6]
 8003494:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                : (Odr <=   12.5f) ?   12.5f
 8003498:	edd7 7a02 	vldr	s15, [r7, #8]
 800349c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800355c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80034a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a8:	d801      	bhi.n	80034ae <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 80034aa:	4b2d      	ldr	r3, [pc, #180]	; (8003560 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 80034ac:	e04d      	b.n	800354a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   25.0f) ?   25.0f
 80034ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80034b2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80034b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034be:	d801      	bhi.n	80034c4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 80034c0:	4b28      	ldr	r3, [pc, #160]	; (8003564 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 80034c2:	e042      	b.n	800354a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   50.0f) ?   50.0f
 80034c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80034c8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80034cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d4:	d801      	bhi.n	80034da <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 80034d6:	4b24      	ldr	r3, [pc, #144]	; (8003568 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 80034d8:	e037      	b.n	800354a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  100.0f) ?  100.0f
 80034da:	edd7 7a02 	vldr	s15, [r7, #8]
 80034de:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800356c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80034e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ea:	d801      	bhi.n	80034f0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 80034ec:	4b20      	ldr	r3, [pc, #128]	; (8003570 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 80034ee:	e02c      	b.n	800354a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  200.0f) ?  200.0f
 80034f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80034f4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003574 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 80034f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003500:	d801      	bhi.n	8003506 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003502:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8003504:	e021      	b.n	800354a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  400.0f) ?  400.0f
 8003506:	edd7 7a02 	vldr	s15, [r7, #8]
 800350a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800357c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 800350e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003516:	d801      	bhi.n	800351c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003518:	4b19      	ldr	r3, [pc, #100]	; (8003580 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 800351a:	e016      	b.n	800354a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  800.0f) ?  800.0f
 800351c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003520:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003584 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8003524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352c:	d801      	bhi.n	8003532 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 800352e:	4b16      	ldr	r3, [pc, #88]	; (8003588 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8003530:	e00b      	b.n	800354a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                :                    1600.0f;
 8003532:	edd7 7a02 	vldr	s15, [r7, #8]
 8003536:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800358c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 800353a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800353e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003542:	d801      	bhi.n	8003548 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003544:	4b12      	ldr	r3, [pc, #72]	; (8003590 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8003546:	e000      	b.n	800354a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8003548:	4b12      	ldr	r3, [pc, #72]	; (8003594 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	3fcccccd 	.word	0x3fcccccd
 8003560:	3fcccccd 	.word	0x3fcccccd
 8003564:	41480000 	.word	0x41480000
 8003568:	41c80000 	.word	0x41c80000
 800356c:	42480000 	.word	0x42480000
 8003570:	42480000 	.word	0x42480000
 8003574:	42c80000 	.word	0x42c80000
 8003578:	42c80000 	.word	0x42c80000
 800357c:	43480000 	.word	0x43480000
 8003580:	43480000 	.word	0x43480000
 8003584:	43c80000 	.word	0x43c80000
 8003588:	43c80000 	.word	0x43c80000
 800358c:	44480000 	.word	0x44480000
 8003590:	44480000 	.word	0x44480000
 8003594:	44c80000 	.word	0x44c80000

08003598 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	607a      	str	r2, [r7, #4]
 80035a2:	461a      	mov	r2, r3
 80035a4:	460b      	mov	r3, r1
 80035a6:	72fb      	strb	r3, [r7, #11]
 80035a8:	4613      	mov	r3, r2
 80035aa:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	695c      	ldr	r4, [r3, #20]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	7b1b      	ldrb	r3, [r3, #12]
 80035b8:	b298      	uxth	r0, r3
 80035ba:	7afb      	ldrb	r3, [r7, #11]
 80035bc:	b299      	uxth	r1, r3
 80035be:	893b      	ldrh	r3, [r7, #8]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	47a0      	blx	r4
 80035c4:	4603      	mov	r3, r0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd90      	pop	{r4, r7, pc}

080035ce <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80035ce:	b590      	push	{r4, r7, lr}
 80035d0:	b087      	sub	sp, #28
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	461a      	mov	r2, r3
 80035da:	460b      	mov	r3, r1
 80035dc:	72fb      	strb	r3, [r7, #11]
 80035de:	4613      	mov	r3, r2
 80035e0:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	691c      	ldr	r4, [r3, #16]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	7b1b      	ldrb	r3, [r3, #12]
 80035ee:	b298      	uxth	r0, r3
 80035f0:	7afb      	ldrb	r3, [r7, #11]
 80035f2:	b299      	uxth	r1, r3
 80035f4:	893b      	ldrh	r3, [r7, #8]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	47a0      	blx	r4
 80035fa:	4603      	mov	r3, r0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	bd90      	pop	{r4, r7, pc}

08003604 <lis2dw12_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	461a      	mov	r2, r3
 8003610:	460b      	mov	r3, r1
 8003612:	72fb      	strb	r3, [r7, #11]
 8003614:	4613      	mov	r3, r2
 8003616:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	685c      	ldr	r4, [r3, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6898      	ldr	r0, [r3, #8]
 8003620:	893b      	ldrh	r3, [r7, #8]
 8003622:	7af9      	ldrb	r1, [r7, #11]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	47a0      	blx	r4
 8003628:	6178      	str	r0, [r7, #20]
  return ret;
 800362a:	697b      	ldr	r3, [r7, #20]
}
 800362c:	4618      	mov	r0, r3
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	bd90      	pop	{r4, r7, pc}

08003634 <lis2dw12_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8003634:	b590      	push	{r4, r7, lr}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	461a      	mov	r2, r3
 8003640:	460b      	mov	r3, r1
 8003642:	72fb      	strb	r3, [r7, #11]
 8003644:	4613      	mov	r3, r2
 8003646:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681c      	ldr	r4, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6898      	ldr	r0, [r3, #8]
 8003650:	893b      	ldrh	r3, [r7, #8]
 8003652:	7af9      	ldrb	r1, [r7, #11]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	47a0      	blx	r4
 8003658:	6178      	str	r0, [r7, #20]
  return ret;
 800365a:	697b      	ldr	r3, [r7, #20]
}
 800365c:	4618      	mov	r0, r3
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	bd90      	pop	{r4, r7, pc}

08003664 <lis2dw12_power_mode_set>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx, lis2dw12_mode_t val)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8003670:	f107 0210 	add.w	r2, r7, #16
 8003674:	2301      	movs	r3, #1
 8003676:	2120      	movs	r1, #32
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff ffc3 	bl	8003604 <lis2dw12_read_reg>
 800367e:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d118      	bne.n	80036b8 <lis2dw12_power_mode_set+0x54>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 8003686:	78fb      	ldrb	r3, [r7, #3]
 8003688:	089b      	lsrs	r3, r3, #2
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	b2da      	uxtb	r2, r3
 8003690:	7c3b      	ldrb	r3, [r7, #16]
 8003692:	f362 0383 	bfi	r3, r2, #2, #2
 8003696:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	7c3b      	ldrb	r3, [r7, #16]
 80036a2:	f362 0301 	bfi	r3, r2, #0, #2
 80036a6:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 80036a8:	f107 0210 	add.w	r2, r7, #16
 80036ac:	2301      	movs	r3, #1
 80036ae:	2120      	movs	r1, #32
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ffbf 	bl	8003634 <lis2dw12_write_reg>
 80036b6:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d107      	bne.n	80036ce <lis2dw12_power_mode_set+0x6a>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 80036be:	f107 020c 	add.w	r2, r7, #12
 80036c2:	2301      	movs	r3, #1
 80036c4:	2125      	movs	r1, #37	; 0x25
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff ff9c 	bl	8003604 <lis2dw12_read_reg>
 80036cc:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d110      	bne.n	80036f6 <lis2dw12_power_mode_set+0x92>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	7b3b      	ldrb	r3, [r7, #12]
 80036e0:	f362 0382 	bfi	r3, r2, #2, #1
 80036e4:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 80036e6:	f107 020c 	add.w	r2, r7, #12
 80036ea:	2301      	movs	r3, #1
 80036ec:	2125      	movs	r1, #37	; 0x25
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff ffa0 	bl	8003634 <lis2dw12_write_reg>
 80036f4:	6178      	str	r0, [r7, #20]
  }
  return ret;
 80036f6:	697b      	ldr	r3, [r7, #20]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <lis2dw12_power_mode_get>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx, lis2dw12_mode_t *val)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 800370a:	f107 0210 	add.w	r2, r7, #16
 800370e:	2301      	movs	r3, #1
 8003710:	2120      	movs	r1, #32
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff ff76 	bl	8003604 <lis2dw12_read_reg>
 8003718:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f040 80a3 	bne.w	8003868 <lis2dw12_power_mode_get+0x168>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8003722:	f107 020c 	add.w	r2, r7, #12
 8003726:	2301      	movs	r3, #1
 8003728:	2125      	movs	r1, #37	; 0x25
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff ff6a 	bl	8003604 <lis2dw12_read_reg>
 8003730:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8003732:	7b3b      	ldrb	r3, [r7, #12]
 8003734:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003738:	b2db      	uxtb	r3, r3
 800373a:	011a      	lsls	r2, r3, #4
 800373c:	7c3b      	ldrb	r3, [r7, #16]
 800373e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003742:	b2db      	uxtb	r3, r3
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
            ctrl1.lp_mode)) {
 8003748:	7c3a      	ldrb	r2, [r7, #16]
 800374a:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800374e:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8003750:	4413      	add	r3, r2
 8003752:	2b1b      	cmp	r3, #27
 8003754:	f200 8084 	bhi.w	8003860 <lis2dw12_power_mode_get+0x160>
 8003758:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <lis2dw12_power_mode_get+0x60>)
 800375a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375e:	bf00      	nop
 8003760:	080037f1 	.word	0x080037f1
 8003764:	080037e9 	.word	0x080037e9
 8003768:	080037e1 	.word	0x080037e1
 800376c:	080037d9 	.word	0x080037d9
 8003770:	080037d1 	.word	0x080037d1
 8003774:	08003861 	.word	0x08003861
 8003778:	08003861 	.word	0x08003861
 800377c:	08003861 	.word	0x08003861
 8003780:	08003811 	.word	0x08003811
 8003784:	08003809 	.word	0x08003809
 8003788:	08003801 	.word	0x08003801
 800378c:	080037f9 	.word	0x080037f9
 8003790:	08003861 	.word	0x08003861
 8003794:	08003861 	.word	0x08003861
 8003798:	08003861 	.word	0x08003861
 800379c:	08003861 	.word	0x08003861
 80037a0:	08003839 	.word	0x08003839
 80037a4:	08003831 	.word	0x08003831
 80037a8:	08003829 	.word	0x08003829
 80037ac:	08003821 	.word	0x08003821
 80037b0:	08003819 	.word	0x08003819
 80037b4:	08003861 	.word	0x08003861
 80037b8:	08003861 	.word	0x08003861
 80037bc:	08003861 	.word	0x08003861
 80037c0:	08003859 	.word	0x08003859
 80037c4:	08003851 	.word	0x08003851
 80037c8:	08003849 	.word	0x08003849
 80037cc:	08003841 	.word	0x08003841
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2204      	movs	r2, #4
 80037d4:	701a      	strb	r2, [r3, #0]
        break;
 80037d6:	e048      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2203      	movs	r2, #3
 80037dc:	701a      	strb	r2, [r3, #0]
        break;
 80037de:	e044      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2202      	movs	r2, #2
 80037e4:	701a      	strb	r2, [r3, #0]
        break;
 80037e6:	e040      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2201      	movs	r2, #1
 80037ec:	701a      	strb	r2, [r3, #0]
        break;
 80037ee:	e03c      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2200      	movs	r2, #0
 80037f4:	701a      	strb	r2, [r3, #0]
        break;
 80037f6:	e038      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	220b      	movs	r2, #11
 80037fc:	701a      	strb	r2, [r3, #0]
        break;
 80037fe:	e034      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	220a      	movs	r2, #10
 8003804:	701a      	strb	r2, [r3, #0]
        break;
 8003806:	e030      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2209      	movs	r2, #9
 800380c:	701a      	strb	r2, [r3, #0]
        break;
 800380e:	e02c      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2208      	movs	r2, #8
 8003814:	701a      	strb	r2, [r3, #0]
        break;
 8003816:	e028      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2214      	movs	r2, #20
 800381c:	701a      	strb	r2, [r3, #0]
        break;
 800381e:	e024      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2213      	movs	r2, #19
 8003824:	701a      	strb	r2, [r3, #0]
        break;
 8003826:	e020      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2212      	movs	r2, #18
 800382c:	701a      	strb	r2, [r3, #0]
        break;
 800382e:	e01c      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2211      	movs	r2, #17
 8003834:	701a      	strb	r2, [r3, #0]
        break;
 8003836:	e018      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2210      	movs	r2, #16
 800383c:	701a      	strb	r2, [r3, #0]
        break;
 800383e:	e014      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	221b      	movs	r2, #27
 8003844:	701a      	strb	r2, [r3, #0]
        break;
 8003846:	e010      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	221a      	movs	r2, #26
 800384c:	701a      	strb	r2, [r3, #0]
        break;
 800384e:	e00c      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2219      	movs	r2, #25
 8003854:	701a      	strb	r2, [r3, #0]
        break;
 8003856:	e008      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2218      	movs	r2, #24
 800385c:	701a      	strb	r2, [r3, #0]
        break;
 800385e:	e004      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2204      	movs	r2, #4
 8003864:	701a      	strb	r2, [r3, #0]
        break;
 8003866:	e000      	b.n	800386a <lis2dw12_power_mode_get+0x16a>
    }
  }
 8003868:	bf00      	nop
  return ret;
 800386a:	697b      	ldr	r3, [r7, #20]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8003880:	f107 0210 	add.w	r2, r7, #16
 8003884:	2301      	movs	r3, #1
 8003886:	2120      	movs	r1, #32
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff febb 	bl	8003604 <lis2dw12_read_reg>
 800388e:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10f      	bne.n	80038b6 <lis2dw12_data_rate_set+0x42>
    ctrl1.odr = (uint8_t) val;
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	b2da      	uxtb	r2, r3
 800389e:	7c3b      	ldrb	r3, [r7, #16]
 80038a0:	f362 1307 	bfi	r3, r2, #4, #4
 80038a4:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 80038a6:	f107 0210 	add.w	r2, r7, #16
 80038aa:	2301      	movs	r3, #1
 80038ac:	2120      	movs	r1, #32
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff fec0 	bl	8003634 <lis2dw12_write_reg>
 80038b4:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d107      	bne.n	80038cc <lis2dw12_data_rate_set+0x58>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 80038bc:	f107 020c 	add.w	r2, r7, #12
 80038c0:	2301      	movs	r3, #1
 80038c2:	2122      	movs	r1, #34	; 0x22
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff fe9d 	bl	8003604 <lis2dw12_read_reg>
 80038ca:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d110      	bne.n	80038f4 <lis2dw12_data_rate_set+0x80>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	091b      	lsrs	r3, r3, #4
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	7b3b      	ldrb	r3, [r7, #12]
 80038de:	f362 0301 	bfi	r3, r2, #0, #2
 80038e2:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 80038e4:	f107 020c 	add.w	r2, r7, #12
 80038e8:	2301      	movs	r3, #1
 80038ea:	2122      	movs	r1, #34	; 0x22
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff fea1 	bl	8003634 <lis2dw12_write_reg>
 80038f2:	6178      	str	r0, [r7, #20]
  }
  return ret;
 80038f4:	697b      	ldr	r3, [r7, #20]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 800390a:	f107 0210 	add.w	r2, r7, #16
 800390e:	2301      	movs	r3, #1
 8003910:	2120      	movs	r1, #32
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff fe76 	bl	8003604 <lis2dw12_read_reg>
 8003918:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f040 80b3 	bne.w	8003a88 <lis2dw12_data_rate_get+0x188>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8003922:	f107 020c 	add.w	r2, r7, #12
 8003926:	2301      	movs	r3, #1
 8003928:	2122      	movs	r1, #34	; 0x22
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff fe6a 	bl	8003604 <lis2dw12_read_reg>
 8003930:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr) {
 8003932:	7b3b      	ldrb	r3, [r7, #12]
 8003934:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003938:	b2db      	uxtb	r3, r3
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	7c3a      	ldrb	r2, [r7, #16]
 800393e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	4413      	add	r3, r2
 8003946:	2b32      	cmp	r3, #50	; 0x32
 8003948:	f200 809a 	bhi.w	8003a80 <lis2dw12_data_rate_get+0x180>
 800394c:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <lis2dw12_data_rate_get+0x54>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	08003a21 	.word	0x08003a21
 8003958:	08003a29 	.word	0x08003a29
 800395c:	08003a31 	.word	0x08003a31
 8003960:	08003a39 	.word	0x08003a39
 8003964:	08003a41 	.word	0x08003a41
 8003968:	08003a49 	.word	0x08003a49
 800396c:	08003a51 	.word	0x08003a51
 8003970:	08003a59 	.word	0x08003a59
 8003974:	08003a61 	.word	0x08003a61
 8003978:	08003a69 	.word	0x08003a69
 800397c:	08003a81 	.word	0x08003a81
 8003980:	08003a81 	.word	0x08003a81
 8003984:	08003a81 	.word	0x08003a81
 8003988:	08003a81 	.word	0x08003a81
 800398c:	08003a81 	.word	0x08003a81
 8003990:	08003a81 	.word	0x08003a81
 8003994:	08003a81 	.word	0x08003a81
 8003998:	08003a81 	.word	0x08003a81
 800399c:	08003a79 	.word	0x08003a79
 80039a0:	08003a81 	.word	0x08003a81
 80039a4:	08003a81 	.word	0x08003a81
 80039a8:	08003a81 	.word	0x08003a81
 80039ac:	08003a81 	.word	0x08003a81
 80039b0:	08003a81 	.word	0x08003a81
 80039b4:	08003a81 	.word	0x08003a81
 80039b8:	08003a81 	.word	0x08003a81
 80039bc:	08003a81 	.word	0x08003a81
 80039c0:	08003a81 	.word	0x08003a81
 80039c4:	08003a81 	.word	0x08003a81
 80039c8:	08003a81 	.word	0x08003a81
 80039cc:	08003a81 	.word	0x08003a81
 80039d0:	08003a81 	.word	0x08003a81
 80039d4:	08003a81 	.word	0x08003a81
 80039d8:	08003a81 	.word	0x08003a81
 80039dc:	08003a81 	.word	0x08003a81
 80039e0:	08003a81 	.word	0x08003a81
 80039e4:	08003a81 	.word	0x08003a81
 80039e8:	08003a81 	.word	0x08003a81
 80039ec:	08003a81 	.word	0x08003a81
 80039f0:	08003a81 	.word	0x08003a81
 80039f4:	08003a81 	.word	0x08003a81
 80039f8:	08003a81 	.word	0x08003a81
 80039fc:	08003a81 	.word	0x08003a81
 8003a00:	08003a81 	.word	0x08003a81
 8003a04:	08003a81 	.word	0x08003a81
 8003a08:	08003a81 	.word	0x08003a81
 8003a0c:	08003a81 	.word	0x08003a81
 8003a10:	08003a81 	.word	0x08003a81
 8003a14:	08003a81 	.word	0x08003a81
 8003a18:	08003a81 	.word	0x08003a81
 8003a1c:	08003a71 	.word	0x08003a71
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2200      	movs	r2, #0
 8003a24:	701a      	strb	r2, [r3, #0]
        break;
 8003a26:	e030      	b.n	8003a8a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
        break;
 8003a2e:	e02c      	b.n	8003a8a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2202      	movs	r2, #2
 8003a34:	701a      	strb	r2, [r3, #0]
        break;
 8003a36:	e028      	b.n	8003a8a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	701a      	strb	r2, [r3, #0]
        break;
 8003a3e:	e024      	b.n	8003a8a <lis2dw12_data_rate_get+0x18a>
       case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2204      	movs	r2, #4
 8003a44:	701a      	strb	r2, [r3, #0]
        break;
 8003a46:	e020      	b.n	8003a8a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2205      	movs	r2, #5
 8003a4c:	701a      	strb	r2, [r3, #0]
        break;
 8003a4e:	e01c      	b.n	8003a8a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2206      	movs	r2, #6
 8003a54:	701a      	strb	r2, [r3, #0]
        break;
 8003a56:	e018      	b.n	8003a8a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2207      	movs	r2, #7
 8003a5c:	701a      	strb	r2, [r3, #0]
        break;
 8003a5e:	e014      	b.n	8003a8a <lis2dw12_data_rate_get+0x18a>
       case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2208      	movs	r2, #8
 8003a64:	701a      	strb	r2, [r3, #0]
        break;
 8003a66:	e010      	b.n	8003a8a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2209      	movs	r2, #9
 8003a6c:	701a      	strb	r2, [r3, #0]
        break;
 8003a6e:	e00c      	b.n	8003a8a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2232      	movs	r2, #50	; 0x32
 8003a74:	701a      	strb	r2, [r3, #0]
        break;
 8003a76:	e008      	b.n	8003a8a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2212      	movs	r2, #18
 8003a7c:	701a      	strb	r2, [r3, #0]
        break;
 8003a7e:	e004      	b.n	8003a8a <lis2dw12_data_rate_get+0x18a>
      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2200      	movs	r2, #0
 8003a84:	701a      	strb	r2, [r3, #0]
        break;
 8003a86:	e000      	b.n	8003a8a <lis2dw12_data_rate_get+0x18a>
    }
  }
 8003a88:	bf00      	nop
  return ret;
 8003a8a:	697b      	ldr	r3, [r7, #20]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8003aa0:	f107 0208 	add.w	r2, r7, #8
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	2121      	movs	r1, #33	; 0x21
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff fdab 	bl	8003604 <lis2dw12_read_reg>
 8003aae:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <lis2dw12_block_data_update_set+0x42>
    reg.bdu = val;
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	7a3b      	ldrb	r3, [r7, #8]
 8003ac0:	f362 03c3 	bfi	r3, r2, #3, #1
 8003ac4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8003ac6:	f107 0208 	add.w	r2, r7, #8
 8003aca:	2301      	movs	r3, #1
 8003acc:	2121      	movs	r1, #33	; 0x21
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff fdb0 	bl	8003634 <lis2dw12_write_reg>
 8003ad4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8003aec:	f107 0208 	add.w	r2, r7, #8
 8003af0:	2301      	movs	r3, #1
 8003af2:	2125      	movs	r1, #37	; 0x25
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff fd85 	bl	8003604 <lis2dw12_read_reg>
 8003afa:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10f      	bne.n	8003b22 <lis2dw12_full_scale_set+0x42>
    reg.fs = (uint8_t) val;
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	7a3b      	ldrb	r3, [r7, #8]
 8003b0c:	f362 1305 	bfi	r3, r2, #4, #2
 8003b10:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8003b12:	f107 0208 	add.w	r2, r7, #8
 8003b16:	2301      	movs	r3, #1
 8003b18:	2125      	movs	r1, #37	; 0x25
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff fd8a 	bl	8003634 <lis2dw12_write_reg>
 8003b20:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003b22:	68fb      	ldr	r3, [r7, #12]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8003b36:	f107 0208 	add.w	r2, r7, #8
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	2125      	movs	r1, #37	; 0x25
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff fd60 	bl	8003604 <lis2dw12_read_reg>
 8003b44:	60f8      	str	r0, [r7, #12]

  switch (reg.fs) {
 8003b46:	7a3b      	ldrb	r3, [r7, #8]
 8003b48:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d81a      	bhi.n	8003b88 <lis2dw12_full_scale_get+0x5c>
 8003b52:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <lis2dw12_full_scale_get+0x2c>)
 8003b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b58:	08003b69 	.word	0x08003b69
 8003b5c:	08003b71 	.word	0x08003b71
 8003b60:	08003b79 	.word	0x08003b79
 8003b64:	08003b81 	.word	0x08003b81
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	701a      	strb	r2, [r3, #0]
      break;
 8003b6e:	e00f      	b.n	8003b90 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2201      	movs	r2, #1
 8003b74:	701a      	strb	r2, [r3, #0]
      break;
 8003b76:	e00b      	b.n	8003b90 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	701a      	strb	r2, [r3, #0]
      break;
 8003b7e:	e007      	b.n	8003b90 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2203      	movs	r2, #3
 8003b84:	701a      	strb	r2, [r3, #0]
      break;
 8003b86:	e003      	b.n	8003b90 <lis2dw12_full_scale_get+0x64>
    default:
      *val = LIS2DW12_2g;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
      break;
 8003b8e:	bf00      	nop
  }
  return ret;
 8003b90:	68fb      	ldr	r3, [r7, #12]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop

08003b9c <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8003ba6:	f107 020c 	add.w	r2, r7, #12
 8003baa:	2306      	movs	r3, #6
 8003bac:	2128      	movs	r1, #40	; 0x28
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff fd28 	bl	8003604 <lis2dw12_read_reg>
 8003bb4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003bb6:	7b7b      	ldrb	r3, [r7, #13]
 8003bb8:	b21a      	sxth	r2, r3
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	7b3b      	ldrb	r3, [r7, #12]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	4413      	add	r3, r2
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	b21a      	sxth	r2, r3
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003bd8:	7bfa      	ldrb	r2, [r7, #15]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	3302      	adds	r3, #2
 8003bde:	b212      	sxth	r2, r2
 8003be0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	3302      	adds	r3, #2
 8003be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	7bbb      	ldrb	r3, [r7, #14]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	3302      	adds	r3, #2
 8003bfc:	b212      	sxth	r2, r2
 8003bfe:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003c00:	7c7a      	ldrb	r2, [r7, #17]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	3304      	adds	r3, #4
 8003c06:	b212      	sxth	r2, r2
 8003c08:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	7c3b      	ldrb	r3, [r7, #16]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	3304      	adds	r3, #4
 8003c24:	b212      	sxth	r2, r2
 8003c26:	801a      	strh	r2, [r3, #0]

  return ret;
 8003c28:	697b      	ldr	r3, [r7, #20]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	210f      	movs	r1, #15
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff fcde 	bl	8003604 <lis2dw12_read_reg>
 8003c48:	60f8      	str	r0, [r7, #12]
  return ret;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8003c60:	f107 0208 	add.w	r2, r7, #8
 8003c64:	2301      	movs	r3, #1
 8003c66:	2121      	movs	r1, #33	; 0x21
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff fccb 	bl	8003604 <lis2dw12_read_reg>
 8003c6e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10f      	bne.n	8003c96 <lis2dw12_auto_increment_set+0x42>
    reg.if_add_inc = val;
 8003c76:	78fb      	ldrb	r3, [r7, #3]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	7a3b      	ldrb	r3, [r7, #8]
 8003c80:	f362 0382 	bfi	r3, r2, #2, #1
 8003c84:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8003c86:	f107 0208 	add.w	r2, r7, #8
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	2121      	movs	r1, #33	; 0x21
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff fcd0 	bl	8003634 <lis2dw12_write_reg>
 8003c94:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003c96:	68fb      	ldr	r3, [r7, #12]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <lis2dw12_fifo_mode_set>:
  * @param  val      change the values of fmode in reg FIFO_CTRL
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx, lis2dw12_fmode_t val)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 8003cac:	f107 0208 	add.w	r2, r7, #8
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	212e      	movs	r1, #46	; 0x2e
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff fca5 	bl	8003604 <lis2dw12_read_reg>
 8003cba:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10f      	bne.n	8003ce2 <lis2dw12_fifo_mode_set+0x42>
    reg.fmode = (uint8_t) val;
 8003cc2:	78fb      	ldrb	r3, [r7, #3]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	7a3b      	ldrb	r3, [r7, #8]
 8003ccc:	f362 1347 	bfi	r3, r2, #5, #3
 8003cd0:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 8003cd2:	f107 0208 	add.w	r2, r7, #8
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	212e      	movs	r1, #46	; 0x2e
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff fcaa 	bl	8003634 <lis2dw12_write_reg>
 8003ce0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <LIS2MDL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d103      	bne.n	8003d08 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003d00:	f04f 33ff 	mov.w	r3, #4294967295
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	e05d      	b.n	8003dc4 <LIS2MDL_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	7b1a      	ldrb	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	699a      	ldr	r2, [r3, #24]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a23      	ldr	r2, [pc, #140]	; (8003dd0 <LIS2MDL_RegisterBusIO+0xe4>)
 8003d44:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a22      	ldr	r2, [pc, #136]	; (8003dd4 <LIS2MDL_RegisterBusIO+0xe8>)
 8003d4a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d103      	bne.n	8003d62 <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 8003d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	e030      	b.n	8003dc4 <LIS2MDL_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4798      	blx	r3
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <LIS2MDL_RegisterBusIO+0x8a>
    {
      ret = LIS2MDL_ERROR;
 8003d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	e026      	b.n	8003dc4 <LIS2MDL_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d022      	beq.n	8003dc4 <LIS2MDL_RegisterBusIO+0xd8>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d11d      	bne.n	8003dc4 <LIS2MDL_RegisterBusIO+0xd8>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d10d      	bne.n	8003dac <LIS2MDL_RegisterBusIO+0xc0>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8003d90:	2334      	movs	r3, #52	; 0x34
 8003d92:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8003d94:	7afb      	ldrb	r3, [r7, #11]
 8003d96:	461a      	mov	r2, r3
 8003d98:	2162      	movs	r1, #98	; 0x62
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fa15 	bl	80041ca <LIS2MDL_Write_Reg>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00e      	beq.n	8003dc4 <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295
 8003daa:	e00c      	b.n	8003dc6 <LIS2MDL_RegisterBusIO+0xda>
            }
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	331c      	adds	r3, #28
 8003db0:	2101      	movs	r1, #1
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fbe2 	bl	800457c <lis2mdl_i2c_interface_set>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc2:	e000      	b.n	8003dc6 <LIS2MDL_RegisterBusIO+0xda>
        }
      }
    }
  }

  return ret;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	08004201 	.word	0x08004201
 8003dd4:	08004263 	.word	0x08004263

08003dd8 <LIS2MDL_Init>:
 * @brief  Initialize the LIS2MDL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	331c      	adds	r3, #28
 8003de4:	2101      	movs	r1, #1
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fb20 	bl	800442c <lis2mdl_block_data_update_set>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <LIS2MDL_Init+0x20>
  {
    return LIS2MDL_ERROR;
 8003df2:	f04f 33ff 	mov.w	r3, #4294967295
 8003df6:	e028      	b.n	8003e4a <LIS2MDL_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	331c      	adds	r3, #28
 8003dfc:	2102      	movs	r1, #2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fa90 	bl	8004324 <lis2mdl_operating_mode_set>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <LIS2MDL_Init+0x38>
  {
    return LIS2MDL_ERROR;
 8003e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0e:	e01c      	b.n	8003e4a <LIS2MDL_Init+0x72>
  }

  /* Output data rate selection */
  if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	331c      	adds	r3, #28
 8003e14:	2103      	movs	r1, #3
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 faaa 	bl	8004370 <lis2mdl_data_rate_set>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <LIS2MDL_Init+0x50>
  {
    return LIS2MDL_ERROR;
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	e010      	b.n	8003e4a <LIS2MDL_Init+0x72>
  }

  /* Self Test disabled. */
  if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	331c      	adds	r3, #28
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fb7e 	bl	8004530 <lis2mdl_self_test_set>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <LIS2MDL_Init+0x68>
  {
    return LIS2MDL_ERROR;
 8003e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3e:	e004      	b.n	8003e4a <LIS2MDL_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <LIS2MDL_DeInit>:
 * @brief  Deinitialize the LIS2MDL magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f874 	bl	8003f48 <LIS2MDL_MAG_Disable>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003e66:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6a:	e004      	b.n	8003e76 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <LIS2MDL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
  if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	331c      	adds	r3, #28
 8003e8c:	6839      	ldr	r1, [r7, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fb3d 	bl	800450e <lis2mdl_device_id_get>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <LIS2MDL_ReadID+0x22>
  {
    return LIS2MDL_ERROR;
 8003e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9e:	e000      	b.n	8003ea2 <LIS2MDL_ReadID+0x24>
  }

  return LIS2MDL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <LIS2MDL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2232      	movs	r2, #50	; 0x32
 8003ede:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	4a04      	ldr	r2, [pc, #16]	; (8003f04 <LIS2MDL_GetCapabilities+0x58>)
 8003ef4:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	42c80000 	.word	0x42c80000

08003f08 <LIS2MDL_MAG_Enable>:
 * @brief Enable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e010      	b.n	8003f40 <LIS2MDL_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	331c      	adds	r3, #28
 8003f22:	2100      	movs	r1, #0
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 f9fd 	bl	8004324 <lis2mdl_operating_mode_set>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <LIS2MDL_MAG_Enable+0x2e>
  {
    return LIS2MDL_ERROR;
 8003f30:	f04f 33ff 	mov.w	r3, #4294967295
 8003f34:	e004      	b.n	8003f40 <LIS2MDL_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <LIS2MDL_MAG_Disable>:
 * @brief Disable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	e010      	b.n	8003f80 <LIS2MDL_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	331c      	adds	r3, #28
 8003f62:	2102      	movs	r1, #2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 f9dd 	bl	8004324 <lis2mdl_operating_mode_set>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <LIS2MDL_MAG_Disable+0x2e>
  {
    return LIS2MDL_ERROR;
 8003f70:	f04f 33ff 	mov.w	r3, #4294967295
 8003f74:	e004      	b.n	8003f80 <LIS2MDL_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <LIS2MDL_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003f98:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <LIS2MDL_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	331c      	adds	r3, #28
 8003fba:	f107 020b 	add.w	r2, r7, #11
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 f9fb 	bl	80043bc <lis2mdl_data_rate_get>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8003fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd0:	e023      	b.n	800401a <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003fd2:	7afb      	ldrb	r3, [r7, #11]
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d81b      	bhi.n	8004010 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8003fd8:	a201      	add	r2, pc, #4	; (adr r2, 8003fe0 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8003fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fde:	bf00      	nop
 8003fe0:	08003ff1 	.word	0x08003ff1
 8003fe4:	08003ff9 	.word	0x08003ff9
 8003fe8:	08004001 	.word	0x08004001
 8003fec:	08004009 	.word	0x08004009
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	4a0c      	ldr	r2, [pc, #48]	; (8004024 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8003ff4:	601a      	str	r2, [r3, #0]
      break;
 8003ff6:	e00f      	b.n	8004018 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	4a0b      	ldr	r2, [pc, #44]	; (8004028 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8003ffc:	601a      	str	r2, [r3, #0]
      break;
 8003ffe:	e00b      	b.n	8004018 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8004004:	601a      	str	r2, [r3, #0]
      break;
 8004006:	e007      	b.n	8004018 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	4a09      	ldr	r2, [pc, #36]	; (8004030 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 800400c:	601a      	str	r2, [r3, #0]
      break;
 800400e:	e003      	b.n	8004018 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8004010:	f04f 33ff 	mov.w	r3, #4294967295
 8004014:	60fb      	str	r3, [r7, #12]
      break;
 8004016:	bf00      	nop
  }

  return ret;
 8004018:	68fb      	ldr	r3, [r7, #12]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	41200000 	.word	0x41200000
 8004028:	41a00000 	.word	0x41a00000
 800402c:	42480000 	.word	0x42480000
 8004030:	42c80000 	.word	0x42c80000

08004034 <LIS2MDL_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8004040:	edd7 7a00 	vldr	s15, [r7]
 8004044:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800404c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004050:	d801      	bhi.n	8004056 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8004052:	2300      	movs	r3, #0
 8004054:	e016      	b.n	8004084 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004056:	edd7 7a00 	vldr	s15, [r7]
 800405a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800405e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004066:	d801      	bhi.n	800406c <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8004068:	2301      	movs	r3, #1
 800406a:	e00b      	b.n	8004084 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800406c:	edd7 7a00 	vldr	s15, [r7]
 8004070:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80040ac <LIS2MDL_MAG_SetOutputDataRate+0x78>
 8004074:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407c:	d801      	bhi.n	8004082 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800407e:	2302      	movs	r3, #2
 8004080:	e000      	b.n	8004084 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004082:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8004084:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	331c      	adds	r3, #28
 800408a:	7bfa      	ldrb	r2, [r7, #15]
 800408c:	4611      	mov	r1, r2
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f96e 	bl	8004370 <lis2mdl_data_rate_set>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <LIS2MDL_MAG_SetOutputDataRate+0x6c>
  {
    return LIS2MDL_ERROR;
 800409a:	f04f 33ff 	mov.w	r3, #4294967295
 800409e:	e000      	b.n	80040a2 <LIS2MDL_MAG_SetOutputDataRate+0x6e>
  }

  return LIS2MDL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	42480000 	.word	0x42480000

080040b0 <LIS2MDL_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2232      	movs	r2, #50	; 0x32
 80040be:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <LIS2MDL_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <LIS2MDL_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	331c      	adds	r3, #28
 80040f4:	f107 0208 	add.w	r2, r7, #8
 80040f8:	4611      	mov	r1, r2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f9bc 	bl	8004478 <lis2mdl_magnetic_raw_get>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8004106:	f04f 33ff 	mov.w	r3, #4294967295
 800410a:	e00c      	b.n	8004126 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800410c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004114:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800411c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <LIS2MDL_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b086      	sub	sp, #24
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	331c      	adds	r3, #28
 800413c:	f107 0210 	add.w	r2, r7, #16
 8004140:	4611      	mov	r1, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f998 	bl	8004478 <lis2mdl_magnetic_raw_get>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <LIS2MDL_MAG_GetAxes+0x26>
  {
    return LIS2MDL_ERROR;
 800414e:	f04f 33ff 	mov.w	r3, #4294967295
 8004152:	e036      	b.n	80041c2 <LIS2MDL_MAG_GetAxes+0x94>
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8004154:	f107 030c 	add.w	r3, r7, #12
 8004158:	4619      	mov	r1, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff ff14 	bl	8003f88 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004160:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004164:	ee07 3a90 	vmov	s15, r3
 8004168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800416c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004178:	ee17 2a90 	vmov	r2, s15
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004180:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004184:	ee07 3a90 	vmov	s15, r3
 8004188:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800418c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004198:	ee17 2a90 	vmov	r2, s15
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80041a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80041a4:	ee07 3a90 	vmov	s15, r3
 80041a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80041b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041b8:	ee17 2a90 	vmov	r2, s15
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <LIS2MDL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	460b      	mov	r3, r1
 80041d4:	70fb      	strb	r3, [r7, #3]
 80041d6:	4613      	mov	r3, r2
 80041d8:	70bb      	strb	r3, [r7, #2]
  if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f103 001c 	add.w	r0, r3, #28
 80041e0:	1cba      	adds	r2, r7, #2
 80041e2:	78f9      	ldrb	r1, [r7, #3]
 80041e4:	2301      	movs	r3, #1
 80041e6:	f000 f885 	bl	80042f4 <lis2mdl_write_reg>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <LIS2MDL_Write_Reg+0x2c>
  {
    return LIS2MDL_ERROR;
 80041f0:	f04f 33ff 	mov.w	r3, #4294967295
 80041f4:	e000      	b.n	80041f8 <LIS2MDL_Write_Reg+0x2e>
  }

  return LIS2MDL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004200:	b590      	push	{r4, r7, lr}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	461a      	mov	r2, r3
 800420c:	460b      	mov	r3, r1
 800420e:	72fb      	strb	r3, [r7, #11]
 8004210:	4613      	mov	r3, r2
 8004212:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10e      	bne.n	800423e <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	695c      	ldr	r4, [r3, #20]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	7b1b      	ldrb	r3, [r3, #12]
 8004228:	b298      	uxth	r0, r3
 800422a:	7afb      	ldrb	r3, [r7, #11]
 800422c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004230:	b2db      	uxtb	r3, r3
 8004232:	b299      	uxth	r1, r3
 8004234:	893b      	ldrh	r3, [r7, #8]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	47a0      	blx	r4
 800423a:	4603      	mov	r3, r0
 800423c:	e00d      	b.n	800425a <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	695c      	ldr	r4, [r3, #20]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	7b1b      	ldrb	r3, [r3, #12]
 8004246:	b298      	uxth	r0, r3
 8004248:	7afb      	ldrb	r3, [r7, #11]
 800424a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800424e:	b2db      	uxtb	r3, r3
 8004250:	b299      	uxth	r1, r3
 8004252:	893b      	ldrh	r3, [r7, #8]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	47a0      	blx	r4
 8004258:	4603      	mov	r3, r0
  }
}
 800425a:	4618      	mov	r0, r3
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	bd90      	pop	{r4, r7, pc}

08004262 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004262:	b590      	push	{r4, r7, lr}
 8004264:	b087      	sub	sp, #28
 8004266:	af00      	add	r7, sp, #0
 8004268:	60f8      	str	r0, [r7, #12]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	461a      	mov	r2, r3
 800426e:	460b      	mov	r3, r1
 8004270:	72fb      	strb	r3, [r7, #11]
 8004272:	4613      	mov	r3, r2
 8004274:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10e      	bne.n	80042a0 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	691c      	ldr	r4, [r3, #16]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	7b1b      	ldrb	r3, [r3, #12]
 800428a:	b298      	uxth	r0, r3
 800428c:	7afb      	ldrb	r3, [r7, #11]
 800428e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004292:	b2db      	uxtb	r3, r3
 8004294:	b299      	uxth	r1, r3
 8004296:	893b      	ldrh	r3, [r7, #8]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	47a0      	blx	r4
 800429c:	4603      	mov	r3, r0
 800429e:	e00d      	b.n	80042bc <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	691c      	ldr	r4, [r3, #16]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	7b1b      	ldrb	r3, [r3, #12]
 80042a8:	b298      	uxth	r0, r3
 80042aa:	7afb      	ldrb	r3, [r7, #11]
 80042ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	b299      	uxth	r1, r3
 80042b4:	893b      	ldrh	r3, [r7, #8]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	47a0      	blx	r4
 80042ba:	4603      	mov	r3, r0
  }
}
 80042bc:	4618      	mov	r0, r3
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd90      	pop	{r4, r7, pc}

080042c4 <lis2mdl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	607a      	str	r2, [r7, #4]
 80042ce:	461a      	mov	r2, r3
 80042d0:	460b      	mov	r3, r1
 80042d2:	72fb      	strb	r3, [r7, #11]
 80042d4:	4613      	mov	r3, r2
 80042d6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	685c      	ldr	r4, [r3, #4]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6898      	ldr	r0, [r3, #8]
 80042e0:	893b      	ldrh	r3, [r7, #8]
 80042e2:	7af9      	ldrb	r1, [r7, #11]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	47a0      	blx	r4
 80042e8:	6178      	str	r0, [r7, #20]
  return ret;
 80042ea:	697b      	ldr	r3, [r7, #20]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd90      	pop	{r4, r7, pc}

080042f4 <lis2mdl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80042f4:	b590      	push	{r4, r7, lr}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	461a      	mov	r2, r3
 8004300:	460b      	mov	r3, r1
 8004302:	72fb      	strb	r3, [r7, #11]
 8004304:	4613      	mov	r3, r2
 8004306:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681c      	ldr	r4, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6898      	ldr	r0, [r3, #8]
 8004310:	893b      	ldrh	r3, [r7, #8]
 8004312:	7af9      	ldrb	r1, [r7, #11]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	47a0      	blx	r4
 8004318:	6178      	str	r0, [r7, #20]
  return ret;
 800431a:	697b      	ldr	r3, [r7, #20]
}
 800431c:	4618      	mov	r0, r3
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	bd90      	pop	{r4, r7, pc}

08004324 <lis2mdl_operating_mode_set>:
  * @param  val    change the values of md in reg CFG_REG_A
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx, lis2mdl_md_t val)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	460b      	mov	r3, r1
 800432e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8004330:	f107 0208 	add.w	r2, r7, #8
 8004334:	2301      	movs	r3, #1
 8004336:	2160      	movs	r1, #96	; 0x60
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff ffc3 	bl	80042c4 <lis2mdl_read_reg>
 800433e:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10f      	bne.n	8004366 <lis2mdl_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 8004346:	78fb      	ldrb	r3, [r7, #3]
 8004348:	f003 0303 	and.w	r3, r3, #3
 800434c:	b2da      	uxtb	r2, r3
 800434e:	7a3b      	ldrb	r3, [r7, #8]
 8004350:	f362 0301 	bfi	r3, r2, #0, #2
 8004354:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8004356:	f107 0208 	add.w	r2, r7, #8
 800435a:	2301      	movs	r3, #1
 800435c:	2160      	movs	r1, #96	; 0x60
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff ffc8 	bl	80042f4 <lis2mdl_write_reg>
 8004364:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004366:	68fb      	ldr	r3, [r7, #12]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 800437c:	f107 0208 	add.w	r2, r7, #8
 8004380:	2301      	movs	r3, #1
 8004382:	2160      	movs	r1, #96	; 0x60
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ff9d 	bl	80042c4 <lis2mdl_read_reg>
 800438a:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10f      	bne.n	80043b2 <lis2mdl_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	b2da      	uxtb	r2, r3
 800439a:	7a3b      	ldrb	r3, [r7, #8]
 800439c:	f362 0383 	bfi	r3, r2, #2, #2
 80043a0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 80043a2:	f107 0208 	add.w	r2, r7, #8
 80043a6:	2301      	movs	r3, #1
 80043a8:	2160      	movs	r1, #96	; 0x60
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff ffa2 	bl	80042f4 <lis2mdl_write_reg>
 80043b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80043b2:	68fb      	ldr	r3, [r7, #12]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 80043c6:	f107 0208 	add.w	r2, r7, #8
 80043ca:	2301      	movs	r3, #1
 80043cc:	2160      	movs	r1, #96	; 0x60
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff ff78 	bl	80042c4 <lis2mdl_read_reg>
 80043d4:	60f8      	str	r0, [r7, #12]
  switch (reg.odr){
 80043d6:	7a3b      	ldrb	r3, [r7, #8]
 80043d8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d81a      	bhi.n	8004418 <lis2mdl_data_rate_get+0x5c>
 80043e2:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <lis2mdl_data_rate_get+0x2c>)
 80043e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e8:	080043f9 	.word	0x080043f9
 80043ec:	08004401 	.word	0x08004401
 80043f0:	08004409 	.word	0x08004409
 80043f4:	08004411 	.word	0x08004411
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
      break;
 80043fe:	e00f      	b.n	8004420 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]
      break;
 8004406:	e00b      	b.n	8004420 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2202      	movs	r2, #2
 800440c:	701a      	strb	r2, [r3, #0]
      break;
 800440e:	e007      	b.n	8004420 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2203      	movs	r2, #3
 8004414:	701a      	strb	r2, [r3, #0]
      break;
 8004416:	e003      	b.n	8004420 <lis2mdl_data_rate_get+0x64>
    default:
      *val = LIS2MDL_ODR_10Hz;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
      break;
 800441e:	bf00      	nop
  }
  return ret;
 8004420:	68fb      	ldr	r3, [r7, #12]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop

0800442c <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8004438:	f107 0208 	add.w	r2, r7, #8
 800443c:	2301      	movs	r3, #1
 800443e:	2162      	movs	r1, #98	; 0x62
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff ff3f 	bl	80042c4 <lis2mdl_read_reg>
 8004446:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10f      	bne.n	800446e <lis2mdl_block_data_update_set+0x42>
    reg.bdu = val;
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	b2da      	uxtb	r2, r3
 8004456:	7a3b      	ldrb	r3, [r7, #8]
 8004458:	f362 1304 	bfi	r3, r2, #4, #1
 800445c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 800445e:	f107 0208 	add.w	r2, r7, #8
 8004462:	2301      	movs	r3, #1
 8004464:	2162      	movs	r1, #98	; 0x62
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7ff ff44 	bl	80042f4 <lis2mdl_write_reg>
 800446c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800446e:	68fb      	ldr	r3, [r7, #12]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004482:	f107 020c 	add.w	r2, r7, #12
 8004486:	2306      	movs	r3, #6
 8004488:	2168      	movs	r1, #104	; 0x68
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff ff1a 	bl	80042c4 <lis2mdl_read_reg>
 8004490:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004492:	7b7b      	ldrb	r3, [r7, #13]
 8004494:	b21a      	sxth	r2, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	021b      	lsls	r3, r3, #8
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	7b3b      	ldrb	r3, [r7, #12]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	4413      	add	r3, r2
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	b21a      	sxth	r2, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80044b4:	7bfa      	ldrb	r2, [r7, #15]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	3302      	adds	r3, #2
 80044ba:	b212      	sxth	r2, r2
 80044bc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	3302      	adds	r3, #2
 80044c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	7bbb      	ldrb	r3, [r7, #14]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	3302      	adds	r3, #2
 80044d8:	b212      	sxth	r2, r2
 80044da:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80044dc:	7c7a      	ldrb	r2, [r7, #17]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	3304      	adds	r3, #4
 80044e2:	b212      	sxth	r2, r2
 80044e4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	3304      	adds	r3, #4
 80044ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	7c3b      	ldrb	r3, [r7, #16]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	4413      	add	r3, r2
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	3304      	adds	r3, #4
 8004500:	b212      	sxth	r2, r2
 8004502:	801a      	strh	r2, [r3, #0]

  return ret;
 8004504:	697b      	ldr	r3, [r7, #20]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004518:	2301      	movs	r3, #1
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	214f      	movs	r1, #79	; 0x4f
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff fed0 	bl	80042c4 <lis2mdl_read_reg>
 8004524:	60f8      	str	r0, [r7, #12]
  return ret;
 8004526:	68fb      	ldr	r3, [r7, #12]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 800453c:	f107 0208 	add.w	r2, r7, #8
 8004540:	2301      	movs	r3, #1
 8004542:	2162      	movs	r1, #98	; 0x62
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7ff febd 	bl	80042c4 <lis2mdl_read_reg>
 800454a:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10f      	bne.n	8004572 <lis2mdl_self_test_set+0x42>
    reg.self_test = val;
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	b2da      	uxtb	r2, r3
 800455a:	7a3b      	ldrb	r3, [r7, #8]
 800455c:	f362 0341 	bfi	r3, r2, #1, #1
 8004560:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8004562:	f107 0208 	add.w	r2, r7, #8
 8004566:	2301      	movs	r3, #1
 8004568:	2162      	movs	r1, #98	; 0x62
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fec2 	bl	80042f4 <lis2mdl_write_reg>
 8004570:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004572:	68fb      	ldr	r3, [r7, #12]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <lis2mdl_i2c_interface_set>:
  * @param  val   change the values of i2c_dis in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx, lis2mdl_i2c_dis_t val)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8004588:	f107 0208 	add.w	r2, r7, #8
 800458c:	2301      	movs	r3, #1
 800458e:	2162      	movs	r1, #98	; 0x62
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff fe97 	bl	80042c4 <lis2mdl_read_reg>
 8004596:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10f      	bne.n	80045be <lis2mdl_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	7a3b      	ldrb	r3, [r7, #8]
 80045a8:	f362 1345 	bfi	r3, r2, #5, #1
 80045ac:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 80045ae:	f107 0208 	add.w	r2, r7, #8
 80045b2:	2301      	movs	r3, #1
 80045b4:	2162      	movs	r1, #98	; 0x62
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff fe9c 	bl	80042f4 <lis2mdl_write_reg>
 80045bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80045be:	68fb      	ldr	r3, [r7, #12]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <LPS22HH_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d103      	bne.n	80045e4 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 80045dc:	f04f 33ff 	mov.w	r3, #4294967295
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	e04d      	b.n	8004680 <LPS22HH_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	7b1a      	ldrb	r2, [r3, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	695a      	ldr	r2, [r3, #20]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	699a      	ldr	r2, [r3, #24]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a1b      	ldr	r2, [pc, #108]	; (800468c <LPS22HH_RegisterBusIO+0xc4>)
 8004620:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a1a      	ldr	r2, [pc, #104]	; (8004690 <LPS22HH_RegisterBusIO+0xc8>)
 8004626:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <LPS22HH_RegisterBusIO+0x76>
    {
      ret = LPS22HH_ERROR;
 8004636:	f04f 33ff 	mov.w	r3, #4294967295
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	e020      	b.n	8004680 <LPS22HH_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4798      	blx	r3
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <LPS22HH_RegisterBusIO+0x8a>
    {
      ret = LPS22HH_ERROR;
 800464a:	f04f 33ff 	mov.w	r3, #4294967295
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	e016      	b.n	8004680 <LPS22HH_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d112      	bne.n	8004680 <LPS22HH_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10d      	bne.n	8004680 <LPS22HH_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004664:	2301      	movs	r3, #1
 8004666:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8004668:	7afb      	ldrb	r3, [r7, #11]
 800466a:	461a      	mov	r2, r3
 800466c:	2110      	movs	r1, #16
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f9df 	bl	8004a32 <LPS22HH_Write_Reg>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <LPS22HH_RegisterBusIO+0xb8>
          {
            ret = LPS22HH_ERROR;
 800467a:	f04f 33ff 	mov.w	r3, #4294967295
 800467e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004680:	68fb      	ldr	r3, [r7, #12]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	08004d5b 	.word	0x08004d5b
 8004690:	08004d91 	.word	0x08004d91

08004694 <LPS22HH_Init>:
 * @brief  Initialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d108      	bne.n	80046b8 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fb0e 	bl	8004cc8 <LPS22HH_Initialize>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 80046b2:	f04f 33ff 	mov.w	r3, #4294967295
 80046b6:	e004      	b.n	80046c2 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HH_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <LPS22HH_DeInit>:
 * @brief  Deinitialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b082      	sub	sp, #8
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d111      	bne.n	8004700 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f877 	bl	80047d0 <LPS22HH_PRESS_Disable>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 80046e8:	f04f 33ff 	mov.w	r3, #4294967295
 80046ec:	e00d      	b.n	800470a <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f918 	bl	8004924 <LPS22HH_TEMP_Disable>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 80046fa:	f04f 33ff 	mov.w	r3, #4294967295
 80046fe:	e004      	b.n	800470a <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HH_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <LPS22HH_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	331c      	adds	r3, #28
 8004720:	6839      	ldr	r1, [r7, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fd1a 	bl	800515c <lps22hh_device_id_get>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 800472e:	f04f 33ff 	mov.w	r3, #4294967295
 8004732:	e000      	b.n	8004736 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <LPS22HH_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HH sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2200      	movs	r2, #0
 800474e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2201      	movs	r2, #1
 8004754:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2201      	movs	r2, #1
 800475a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2200      	movs	r2, #0
 8004760:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	4a05      	ldr	r2, [pc, #20]	; (8004784 <LPS22HH_GetCapabilities+0x44>)
 800476e:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	4a04      	ldr	r2, [pc, #16]	; (8004784 <LPS22HH_GetCapabilities+0x44>)
 8004774:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	43480000 	.word	0x43480000

08004788 <LPS22HH_PRESS_Enable>:
 * @brief  Enable the LPS22HH pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e014      	b.n	80047c8 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f103 021c 	add.w	r2, r3, #28
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80047aa:	4619      	mov	r1, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f000 fb93 	bl	8004ed8 <lps22hh_data_rate_set>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80047b8:	f04f 33ff 	mov.w	r3, #4294967295
 80047bc:	e004      	b.n	80047c8 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HH_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <LPS22HH_PRESS_Disable>:
 * @brief  Disable the LPS22HH pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	e024      	b.n	8004830 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d11a      	bne.n	8004826 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f103 021c 	add.w	r2, r3, #28
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	332b      	adds	r3, #43	; 0x2b
 80047fa:	4619      	mov	r1, r3
 80047fc:	4610      	mov	r0, r2
 80047fe:	f000 fbb9 	bl	8004f74 <lps22hh_data_rate_get>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8004808:	f04f 33ff 	mov.w	r3, #4294967295
 800480c:	e010      	b.n	8004830 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	331c      	adds	r3, #28
 8004812:	2100      	movs	r1, #0
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fb5f 	bl	8004ed8 <lps22hh_data_rate_set>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8004820:	f04f 33ff 	mov.w	r3, #4294967295
 8004824:	e004      	b.n	8004830 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HH_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <LPS22HH_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8004842:	6839      	ldr	r1, [r7, #0]
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f90f 	bl	8004a68 <LPS22HH_GetOutputDataRate>
 800484a:	4603      	mov	r3, r0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <LPS22HH_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004866:	2b01      	cmp	r3, #1
 8004868:	d106      	bne.n	8004878 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800486a:	ed97 0a00 	vldr	s0, [r7]
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f95e 	bl	8004b30 <LPS22HH_SetOutputDataRate_When_Enabled>
 8004874:	4603      	mov	r3, r0
 8004876:	e005      	b.n	8004884 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004878:	ed97 0a00 	vldr	s0, [r7]
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f9c9 	bl	8004c14 <LPS22HH_SetOutputDataRate_When_Disabled>
 8004882:	4603      	mov	r3, r0
  }
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <LPS22HH_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8004896:	f107 030c 	add.w	r3, r7, #12
 800489a:	2204      	movs	r2, #4
 800489c:	2100      	movs	r1, #0
 800489e:	4618      	mov	r0, r3
 80048a0:	f00b fb99 	bl	800ffd6 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	331c      	adds	r3, #28
 80048a8:	f107 020c 	add.w	r2, r7, #12
 80048ac:	4611      	mov	r1, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fc08 	bl	80050c4 <lps22hh_pressure_raw_get>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 80048ba:	f04f 33ff 	mov.w	r3, #4294967295
 80048be:	e009      	b.n	80048d4 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fab0 	bl	8004e28 <lps22hh_from_lsb_to_hpa>
 80048c8:	eef0 7a40 	vmov.f32	s15, s0
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <LPS22HH_TEMP_Enable>:
 * @brief  Enable the LPS22HH temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e014      	b.n	800491c <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f103 021c 	add.w	r2, r3, #28
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f000 fae9 	bl	8004ed8 <lps22hh_data_rate_set>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 800490c:	f04f 33ff 	mov.w	r3, #4294967295
 8004910:	e004      	b.n	800491c <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HH_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <LPS22HH_TEMP_Disable>:
 * @brief  Disable the LPS22HH temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	e024      	b.n	8004984 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004940:	2b00      	cmp	r3, #0
 8004942:	d11a      	bne.n	800497a <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f103 021c 	add.w	r2, r3, #28
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	332b      	adds	r3, #43	; 0x2b
 800494e:	4619      	mov	r1, r3
 8004950:	4610      	mov	r0, r2
 8004952:	f000 fb0f 	bl	8004f74 <lps22hh_data_rate_get>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 800495c:	f04f 33ff 	mov.w	r3, #4294967295
 8004960:	e010      	b.n	8004984 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	331c      	adds	r3, #28
 8004966:	2100      	movs	r1, #0
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fab5 	bl	8004ed8 <lps22hh_data_rate_set>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8004974:	f04f 33ff 	mov.w	r3, #4294967295
 8004978:	e004      	b.n	8004984 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HH_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <LPS22HH_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8004996:	6839      	ldr	r1, [r7, #0]
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f865 	bl	8004a68 <LPS22HH_GetOutputDataRate>
 800499e:	4603      	mov	r3, r0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <LPS22HH_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d106      	bne.n	80049cc <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80049be:	ed97 0a00 	vldr	s0, [r7]
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f8b4 	bl	8004b30 <LPS22HH_SetOutputDataRate_When_Enabled>
 80049c8:	4603      	mov	r3, r0
 80049ca:	e005      	b.n	80049d8 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80049cc:	ed97 0a00 	vldr	s0, [r7]
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f91f 	bl	8004c14 <LPS22HH_SetOutputDataRate_When_Disabled>
 80049d6:	4603      	mov	r3, r0
  }
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <LPS22HH_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80049ea:	f107 030c 	add.w	r3, r7, #12
 80049ee:	2202      	movs	r2, #2
 80049f0:	2100      	movs	r1, #0
 80049f2:	4618      	mov	r0, r3
 80049f4:	f00b faef 	bl	800ffd6 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	331c      	adds	r3, #28
 80049fc:	f107 020c 	add.w	r2, r7, #12
 8004a00:	4611      	mov	r1, r2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fb87 	bl	8005116 <lps22hh_temperature_raw_get>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8004a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a12:	e00a      	b.n	8004a2a <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8004a14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fa1d 	bl	8004e58 <lps22hh_from_lsb_to_celsius>
 8004a1e:	eef0 7a40 	vmov.f32	s15, s0
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <LPS22HH_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	70fb      	strb	r3, [r7, #3]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f103 001c 	add.w	r0, r3, #28
 8004a48:	1cba      	adds	r2, r7, #2
 8004a4a:	78f9      	ldrb	r1, [r7, #3]
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	f000 f9d2 	bl	8004df6 <lps22hh_write_reg>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8004a58:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5c:	e000      	b.n	8004a60 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <LPS22HH_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	331c      	adds	r3, #28
 8004a7a:	f107 020b 	add.w	r2, r7, #11
 8004a7e:	4611      	mov	r1, r2
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fa77 	bl	8004f74 <lps22hh_data_rate_get>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8004a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a90:	e03d      	b.n	8004b0e <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8004a92:	7afb      	ldrb	r3, [r7, #11]
 8004a94:	2b07      	cmp	r3, #7
 8004a96:	d835      	bhi.n	8004b04 <LPS22HH_GetOutputDataRate+0x9c>
 8004a98:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <LPS22HH_GetOutputDataRate+0x38>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004ac1 	.word	0x08004ac1
 8004aa4:	08004acb 	.word	0x08004acb
 8004aa8:	08004ad5 	.word	0x08004ad5
 8004aac:	08004add 	.word	0x08004add
 8004ab0:	08004ae5 	.word	0x08004ae5
 8004ab4:	08004aed 	.word	0x08004aed
 8004ab8:	08004af5 	.word	0x08004af5
 8004abc:	08004afd 	.word	0x08004afd
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
      break;
 8004ac8:	e020      	b.n	8004b0c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004ad0:	601a      	str	r2, [r3, #0]
      break;
 8004ad2:	e01b      	b.n	8004b0c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	4a10      	ldr	r2, [pc, #64]	; (8004b18 <LPS22HH_GetOutputDataRate+0xb0>)
 8004ad8:	601a      	str	r2, [r3, #0]
      break;
 8004ada:	e017      	b.n	8004b0c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	4a0f      	ldr	r2, [pc, #60]	; (8004b1c <LPS22HH_GetOutputDataRate+0xb4>)
 8004ae0:	601a      	str	r2, [r3, #0]
      break;
 8004ae2:	e013      	b.n	8004b0c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	4a0e      	ldr	r2, [pc, #56]	; (8004b20 <LPS22HH_GetOutputDataRate+0xb8>)
 8004ae8:	601a      	str	r2, [r3, #0]
      break;
 8004aea:	e00f      	b.n	8004b0c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	4a0d      	ldr	r2, [pc, #52]	; (8004b24 <LPS22HH_GetOutputDataRate+0xbc>)
 8004af0:	601a      	str	r2, [r3, #0]
      break;
 8004af2:	e00b      	b.n	8004b0c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	4a0c      	ldr	r2, [pc, #48]	; (8004b28 <LPS22HH_GetOutputDataRate+0xc0>)
 8004af8:	601a      	str	r2, [r3, #0]
      break;
 8004afa:	e007      	b.n	8004b0c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	4a0b      	ldr	r2, [pc, #44]	; (8004b2c <LPS22HH_GetOutputDataRate+0xc4>)
 8004b00:	601a      	str	r2, [r3, #0]
      break;
 8004b02:	e003      	b.n	8004b0c <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8004b04:	f04f 33ff 	mov.w	r3, #4294967295
 8004b08:	60fb      	str	r3, [r7, #12]
      break;
 8004b0a:	bf00      	nop
  }

  return ret;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	41200000 	.word	0x41200000
 8004b1c:	41c80000 	.word	0x41c80000
 8004b20:	42480000 	.word	0x42480000
 8004b24:	42960000 	.word	0x42960000
 8004b28:	42c80000 	.word	0x42c80000
 8004b2c:	43480000 	.word	0x43480000

08004b30 <LPS22HH_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004b3c:	edd7 7a00 	vldr	s15, [r7]
 8004b40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b4c:	d801      	bhi.n	8004b52 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e037      	b.n	8004bc2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004b52:	edd7 7a00 	vldr	s15, [r7]
 8004b56:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b62:	d801      	bhi.n	8004b68 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e02c      	b.n	8004bc2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004b68:	edd7 7a00 	vldr	s15, [r7]
 8004b6c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b78:	d801      	bhi.n	8004b7e <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e021      	b.n	8004bc2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004b7e:	edd7 7a00 	vldr	s15, [r7]
 8004b82:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004c08 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8004b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8e:	d801      	bhi.n	8004b94 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8004b90:	2304      	movs	r3, #4
 8004b92:	e016      	b.n	8004bc2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004b94:	edd7 7a00 	vldr	s15, [r7]
 8004b98:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004c0c <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8004b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba4:	d801      	bhi.n	8004baa <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8004ba6:	2305      	movs	r3, #5
 8004ba8:	e00b      	b.n	8004bc2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004baa:	edd7 7a00 	vldr	s15, [r7]
 8004bae:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004c10 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8004bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bba:	d801      	bhi.n	8004bc0 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8004bbc:	2306      	movs	r3, #6
 8004bbe:	e000      	b.n	8004bc2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004bc0:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8004bc2:	73fb      	strb	r3, [r7, #15]
          : (Odr <=  50.0f) ? LPS22HH_50_Hz
          : (Odr <=  75.0f) ? LPS22HH_75_Hz
          : (Odr <= 100.0f) ? LPS22HH_100_Hz
          :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	331c      	adds	r3, #28
 8004bc8:	7bfa      	ldrb	r2, [r7, #15]
 8004bca:	4611      	mov	r1, r2
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 f983 	bl	8004ed8 <lps22hh_data_rate_set>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8004bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bdc:	e00f      	b.n	8004bfe <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f103 021c 	add.w	r2, r3, #28
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	332b      	adds	r3, #43	; 0x2b
 8004be8:	4619      	mov	r1, r3
 8004bea:	4610      	mov	r0, r2
 8004bec:	f000 f9c2 	bl	8004f74 <lps22hh_data_rate_get>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8004bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfa:	e000      	b.n	8004bfe <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	42480000 	.word	0x42480000
 8004c0c:	42960000 	.word	0x42960000
 8004c10:	42c80000 	.word	0x42c80000

08004c14 <LPS22HH_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004c20:	edd7 7a00 	vldr	s15, [r7]
 8004c24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c30:	d801      	bhi.n	8004c36 <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e037      	b.n	8004ca6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004c36:	edd7 7a00 	vldr	s15, [r7]
 8004c3a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c46:	d801      	bhi.n	8004c4c <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e02c      	b.n	8004ca6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004c4c:	edd7 7a00 	vldr	s15, [r7]
 8004c50:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5c:	d801      	bhi.n	8004c62 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e021      	b.n	8004ca6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004c62:	edd7 7a00 	vldr	s15, [r7]
 8004c66:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004cbc <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 8004c6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c72:	d801      	bhi.n	8004c78 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8004c74:	2304      	movs	r3, #4
 8004c76:	e016      	b.n	8004ca6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004c78:	edd7 7a00 	vldr	s15, [r7]
 8004c7c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004cc0 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8004c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c88:	d801      	bhi.n	8004c8e <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8004c8a:	2305      	movs	r3, #5
 8004c8c:	e00b      	b.n	8004ca6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004c8e:	edd7 7a00 	vldr	s15, [r7]
 8004c92:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004cc4 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 8004c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9e:	d801      	bhi.n	8004ca4 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8004ca0:	2306      	movs	r3, #6
 8004ca2:	e000      	b.n	8004ca6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004ca4:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                 : (Odr <=  50.0f) ? LPS22HH_50_Hz
                 : (Odr <=  75.0f) ? LPS22HH_75_Hz
                 : (Odr <= 100.0f) ? LPS22HH_100_Hz
                 :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	42480000 	.word	0x42480000
 8004cc0:	42960000 	.word	0x42960000
 8004cc4:	42c80000 	.word	0x42c80000

08004cc8 <LPS22HH_Initialize>:
 * @brief  Initialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	331c      	adds	r3, #28
 8004cd4:	2111      	movs	r1, #17
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fa9d 	bl	8005216 <lps22hh_i3c_interface_set>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 8004ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce6:	e034      	b.n	8004d52 <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	331c      	adds	r3, #28
 8004cec:	2110      	movs	r1, #16
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f8f2 	bl	8004ed8 <lps22hh_data_rate_set>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 8004cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfe:	e028      	b.n	8004d52 <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	331c      	adds	r3, #28
 8004d04:	2100      	movs	r1, #0
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fa5f 	bl	80051ca <lps22hh_lp_bandwidth_set>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 8004d12:	f04f 33ff 	mov.w	r3, #4294967295
 8004d16:	e01c      	b.n	8004d52 <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	331c      	adds	r3, #28
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 f8b4 	bl	8004e8c <lps22hh_block_data_update_set>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 8004d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d2e:	e010      	b.n	8004d52 <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	331c      	adds	r3, #28
 8004d34:	2101      	movs	r1, #1
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fa21 	bl	800517e <lps22hh_auto_increment_set>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 8004d42:	f04f 33ff 	mov.w	r3, #4294967295
 8004d46:	e004      	b.n	8004d52 <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2203      	movs	r2, #3
 8004d4c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HH_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004d5a:	b590      	push	{r4, r7, lr}
 8004d5c:	b087      	sub	sp, #28
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	461a      	mov	r2, r3
 8004d66:	460b      	mov	r3, r1
 8004d68:	72fb      	strb	r3, [r7, #11]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	695c      	ldr	r4, [r3, #20]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	7b1b      	ldrb	r3, [r3, #12]
 8004d7a:	b298      	uxth	r0, r3
 8004d7c:	7afb      	ldrb	r3, [r7, #11]
 8004d7e:	b299      	uxth	r1, r3
 8004d80:	893b      	ldrh	r3, [r7, #8]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	47a0      	blx	r4
 8004d86:	4603      	mov	r3, r0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	371c      	adds	r7, #28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd90      	pop	{r4, r7, pc}

08004d90 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004d90:	b590      	push	{r4, r7, lr}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	607a      	str	r2, [r7, #4]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	72fb      	strb	r3, [r7, #11]
 8004da0:	4613      	mov	r3, r2
 8004da2:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	691c      	ldr	r4, [r3, #16]
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	7b1b      	ldrb	r3, [r3, #12]
 8004db0:	b298      	uxth	r0, r3
 8004db2:	7afb      	ldrb	r3, [r7, #11]
 8004db4:	b299      	uxth	r1, r3
 8004db6:	893b      	ldrh	r3, [r7, #8]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	47a0      	blx	r4
 8004dbc:	4603      	mov	r3, r0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd90      	pop	{r4, r7, pc}

08004dc6 <lps22hh_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004dc6:	b590      	push	{r4, r7, lr}
 8004dc8:	b087      	sub	sp, #28
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	60f8      	str	r0, [r7, #12]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	72fb      	strb	r3, [r7, #11]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685c      	ldr	r4, [r3, #4]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6898      	ldr	r0, [r3, #8]
 8004de2:	893b      	ldrh	r3, [r7, #8]
 8004de4:	7af9      	ldrb	r1, [r7, #11]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	47a0      	blx	r4
 8004dea:	6178      	str	r0, [r7, #20]
  return ret;
 8004dec:	697b      	ldr	r3, [r7, #20]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd90      	pop	{r4, r7, pc}

08004df6 <lps22hh_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8004df6:	b590      	push	{r4, r7, lr}
 8004df8:	b087      	sub	sp, #28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	461a      	mov	r2, r3
 8004e02:	460b      	mov	r3, r1
 8004e04:	72fb      	strb	r3, [r7, #11]
 8004e06:	4613      	mov	r3, r2
 8004e08:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681c      	ldr	r4, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6898      	ldr	r0, [r3, #8]
 8004e12:	893b      	ldrh	r3, [r7, #8]
 8004e14:	7af9      	ldrb	r1, [r7, #11]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	47a0      	blx	r4
 8004e1a:	6178      	str	r0, [r7, #20]
  return ret;
 8004e1c:	697b      	ldr	r3, [r7, #20]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd90      	pop	{r4, r7, pc}
	...

08004e28 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  return ( (float_t) lsb / 1048576.0f );
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004e54 <lps22hh_from_lsb_to_hpa+0x2c>
 8004e3e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e42:	eef0 7a66 	vmov.f32	s15, s13
}
 8004e46:	eeb0 0a67 	vmov.f32	s0, s15
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	49800000 	.word	0x49800000

08004e58 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	80fb      	strh	r3, [r7, #6]
  return ( (float_t) lsb / 100.0f );
 8004e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e6e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004e88 <lps22hh_from_lsb_to_celsius+0x30>
 8004e72:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e76:	eef0 7a66 	vmov.f32	s15, s13
}
 8004e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	42c80000 	.word	0x42c80000

08004e8c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	460b      	mov	r3, r1
 8004e96:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
 8004e98:	f107 0208 	add.w	r2, r7, #8
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	2110      	movs	r1, #16
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff ff90 	bl	8004dc6 <lps22hh_read_reg>
 8004ea6:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10f      	bne.n	8004ece <lps22hh_block_data_update_set+0x42>
    reg.bdu = val;
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	7a3b      	ldrb	r3, [r7, #8]
 8004eb8:	f362 0341 	bfi	r3, r2, #1, #1
 8004ebc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
 8004ebe:	f107 0208 	add.w	r2, r7, #8
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	2110      	movs	r1, #16
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff ff95 	bl	8004df6 <lps22hh_write_reg>
 8004ecc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004ece:	68fb      	ldr	r3, [r7, #12]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004ee4:	f107 0210 	add.w	r2, r7, #16
 8004ee8:	2301      	movs	r3, #1
 8004eea:	2110      	movs	r1, #16
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff ff6a 	bl	8004dc6 <lps22hh_read_reg>
 8004ef2:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d107      	bne.n	8004f0a <lps22hh_data_rate_set+0x32>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8004efa:	f107 020c 	add.w	r2, r7, #12
 8004efe:	2301      	movs	r3, #1
 8004f00:	2111      	movs	r1, #17
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff ff5f 	bl	8004dc6 <lps22hh_read_reg>
 8004f08:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10f      	bne.n	8004f30 <lps22hh_data_rate_set+0x58>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	7c3b      	ldrb	r3, [r7, #16]
 8004f1a:	f362 1306 	bfi	r3, r2, #4, #3
 8004f1e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004f20:	f107 0210 	add.w	r2, r7, #16
 8004f24:	2301      	movs	r3, #1
 8004f26:	2110      	movs	r1, #16
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff ff64 	bl	8004df6 <lps22hh_write_reg>
 8004f2e:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d119      	bne.n	8004f6a <lps22hh_data_rate_set+0x92>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8004f36:	78fb      	ldrb	r3, [r7, #3]
 8004f38:	091b      	lsrs	r3, r3, #4
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	7b3b      	ldrb	r3, [r7, #12]
 8004f42:	f362 0341 	bfi	r3, r2, #1, #1
 8004f46:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	08db      	lsrs	r3, r3, #3
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	7b3b      	ldrb	r3, [r7, #12]
 8004f54:	f362 0300 	bfi	r3, r2, #0, #1
 8004f58:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8004f5a:	f107 020c 	add.w	r2, r7, #12
 8004f5e:	2301      	movs	r3, #1
 8004f60:	2111      	movs	r1, #17
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff ff47 	bl	8004df6 <lps22hh_write_reg>
 8004f68:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8004f6a:	697b      	ldr	r3, [r7, #20]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004f7e:	f107 0210 	add.w	r2, r7, #16
 8004f82:	2301      	movs	r3, #1
 8004f84:	2110      	movs	r1, #16
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff ff1d 	bl	8004dc6 <lps22hh_read_reg>
 8004f8c:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d107      	bne.n	8004fa4 <lps22hh_data_rate_get+0x30>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8004f94:	f107 020c 	add.w	r2, r7, #12
 8004f98:	2301      	movs	r3, #1
 8004f9a:	2111      	movs	r1, #17
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff ff12 	bl	8004dc6 <lps22hh_read_reg>
 8004fa2:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f040 8086 	bne.w	80050b8 <lps22hh_data_rate_get+0x144>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8004fac:	f107 020c 	add.w	r2, r7, #12
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	2111      	movs	r1, #17
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff ff06 	bl	8004dc6 <lps22hh_read_reg>
 8004fba:	6178      	str	r0, [r7, #20]
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004fbc:	7b3b      	ldrb	r3, [r7, #12]
 8004fbe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	011a      	lsls	r2, r3, #4
 8004fc6:	7b3b      	ldrb	r3, [r7, #12]
 8004fc8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	4413      	add	r3, r2
            ctrl_reg1.odr )) {
 8004fd2:	7c3a      	ldrb	r2, [r7, #16]
 8004fd4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004fd8:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004fda:	4413      	add	r3, r2
 8004fdc:	2b15      	cmp	r3, #21
 8004fde:	d867      	bhi.n	80050b0 <lps22hh_data_rate_get+0x13c>
 8004fe0:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <lps22hh_data_rate_get+0x74>)
 8004fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe6:	bf00      	nop
 8004fe8:	08005041 	.word	0x08005041
 8004fec:	08005051 	.word	0x08005051
 8004ff0:	08005059 	.word	0x08005059
 8004ff4:	08005061 	.word	0x08005061
 8004ff8:	08005069 	.word	0x08005069
 8004ffc:	08005071 	.word	0x08005071
 8005000:	080050a1 	.word	0x080050a1
 8005004:	080050a9 	.word	0x080050a9
 8005008:	08005049 	.word	0x08005049
 800500c:	080050b1 	.word	0x080050b1
 8005010:	080050b1 	.word	0x080050b1
 8005014:	080050b1 	.word	0x080050b1
 8005018:	080050b1 	.word	0x080050b1
 800501c:	080050b1 	.word	0x080050b1
 8005020:	080050b1 	.word	0x080050b1
 8005024:	080050b1 	.word	0x080050b1
 8005028:	080050b1 	.word	0x080050b1
 800502c:	08005079 	.word	0x08005079
 8005030:	08005081 	.word	0x08005081
 8005034:	08005089 	.word	0x08005089
 8005038:	08005091 	.word	0x08005091
 800503c:	08005099 	.word	0x08005099
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2200      	movs	r2, #0
 8005044:	701a      	strb	r2, [r3, #0]
        break;
 8005046:	e038      	b.n	80050ba <lps22hh_data_rate_get+0x146>
      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2208      	movs	r2, #8
 800504c:	701a      	strb	r2, [r3, #0]
        break;
 800504e:	e034      	b.n	80050ba <lps22hh_data_rate_get+0x146>
      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2201      	movs	r2, #1
 8005054:	701a      	strb	r2, [r3, #0]
        break;
 8005056:	e030      	b.n	80050ba <lps22hh_data_rate_get+0x146>
      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2202      	movs	r2, #2
 800505c:	701a      	strb	r2, [r3, #0]
        break;
 800505e:	e02c      	b.n	80050ba <lps22hh_data_rate_get+0x146>
      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2203      	movs	r2, #3
 8005064:	701a      	strb	r2, [r3, #0]
        break;
 8005066:	e028      	b.n	80050ba <lps22hh_data_rate_get+0x146>
      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2204      	movs	r2, #4
 800506c:	701a      	strb	r2, [r3, #0]
        break;
 800506e:	e024      	b.n	80050ba <lps22hh_data_rate_get+0x146>
      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2205      	movs	r2, #5
 8005074:	701a      	strb	r2, [r3, #0]
        break;
 8005076:	e020      	b.n	80050ba <lps22hh_data_rate_get+0x146>
      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2211      	movs	r2, #17
 800507c:	701a      	strb	r2, [r3, #0]
        break;
 800507e:	e01c      	b.n	80050ba <lps22hh_data_rate_get+0x146>
      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2212      	movs	r2, #18
 8005084:	701a      	strb	r2, [r3, #0]
        break;
 8005086:	e018      	b.n	80050ba <lps22hh_data_rate_get+0x146>
      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2213      	movs	r2, #19
 800508c:	701a      	strb	r2, [r3, #0]
        break;
 800508e:	e014      	b.n	80050ba <lps22hh_data_rate_get+0x146>
      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2214      	movs	r2, #20
 8005094:	701a      	strb	r2, [r3, #0]
        break;
 8005096:	e010      	b.n	80050ba <lps22hh_data_rate_get+0x146>
      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2215      	movs	r2, #21
 800509c:	701a      	strb	r2, [r3, #0]
        break;
 800509e:	e00c      	b.n	80050ba <lps22hh_data_rate_get+0x146>
      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2206      	movs	r2, #6
 80050a4:	701a      	strb	r2, [r3, #0]
        break;
 80050a6:	e008      	b.n	80050ba <lps22hh_data_rate_get+0x146>
      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2207      	movs	r2, #7
 80050ac:	701a      	strb	r2, [r3, #0]
        break;
 80050ae:	e004      	b.n	80050ba <lps22hh_data_rate_get+0x146>
      default:
        *val = LPS22HH_POWER_DOWN;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2200      	movs	r2, #0
 80050b4:	701a      	strb	r2, [r3, #0]
        break;
 80050b6:	e000      	b.n	80050ba <lps22hh_data_rate_get+0x146>
    }
  }
 80050b8:	bf00      	nop
  return ret;
 80050ba:	697b      	ldr	r3, [r7, #20]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];

  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80050ce:	f107 0208 	add.w	r2, r7, #8
 80050d2:	2303      	movs	r3, #3
 80050d4:	2128      	movs	r1, #40	; 0x28
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff fe75 	bl	8004dc6 <lps22hh_read_reg>
 80050dc:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80050de:	7abb      	ldrb	r3, [r7, #10]
 80050e0:	461a      	mov	r2, r3
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	7a7a      	ldrb	r2, [r7, #9]
 80050ee:	441a      	add	r2, r3
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	021b      	lsls	r3, r3, #8
 80050fa:	7a3a      	ldrb	r2, [r7, #8]
 80050fc:	441a      	add	r2, r3
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	021a      	lsls	r2, r3, #8
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	601a      	str	r2, [r3, #0]

  return ret;
 800510c:	68fb      	ldr	r3, [r7, #12]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005120:	f107 0208 	add.w	r2, r7, #8
 8005124:	2302      	movs	r3, #2
 8005126:	212b      	movs	r1, #43	; 0x2b
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff fe4c 	bl	8004dc6 <lps22hh_read_reg>
 800512e:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8005130:	7a7b      	ldrb	r3, [r7, #9]
 8005132:	b21a      	sxth	r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800513e:	b29b      	uxth	r3, r3
 8005140:	021b      	lsls	r3, r3, #8
 8005142:	b29a      	uxth	r2, r3
 8005144:	7a3b      	ldrb	r3, [r7, #8]
 8005146:	b29b      	uxth	r3, r3
 8005148:	4413      	add	r3, r2
 800514a:	b29b      	uxth	r3, r3
 800514c:	b21a      	sxth	r2, r3
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	801a      	strh	r2, [r3, #0]

  return ret;
 8005152:	68fb      	ldr	r3, [r7, #12]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005166:	2301      	movs	r3, #1
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	210f      	movs	r1, #15
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7ff fe2a 	bl	8004dc6 <lps22hh_read_reg>
 8005172:	60f8      	str	r0, [r7, #12]
  return ret;
 8005174:	68fb      	ldr	r3, [r7, #12]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	460b      	mov	r3, r1
 8005188:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*) &reg, 1);
 800518a:	f107 0208 	add.w	r2, r7, #8
 800518e:	2301      	movs	r3, #1
 8005190:	2111      	movs	r1, #17
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7ff fe17 	bl	8004dc6 <lps22hh_read_reg>
 8005198:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10f      	bne.n	80051c0 <lps22hh_auto_increment_set+0x42>
    reg.if_add_inc = val;
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	7a3b      	ldrb	r3, [r7, #8]
 80051aa:	f362 1304 	bfi	r3, r2, #4, #1
 80051ae:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*) &reg, 1);
 80051b0:	f107 0208 	add.w	r2, r7, #8
 80051b4:	2301      	movs	r3, #1
 80051b6:	2111      	movs	r1, #17
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7ff fe1c 	bl	8004df6 <lps22hh_write_reg>
 80051be:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80051c0:	68fb      	ldr	r3, [r7, #12]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <lps22hh_lp_bandwidth_set>:
  * @param  val      change the values of lpfp_cfg in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx, lps22hh_lpfp_cfg_t val)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	460b      	mov	r3, r1
 80051d4:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
 80051d6:	f107 0208 	add.w	r2, r7, #8
 80051da:	2301      	movs	r3, #1
 80051dc:	2110      	movs	r1, #16
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff fdf1 	bl	8004dc6 <lps22hh_read_reg>
 80051e4:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10f      	bne.n	800520c <lps22hh_lp_bandwidth_set+0x42>
    reg.lpfp_cfg = (uint8_t)val;
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	7a3b      	ldrb	r3, [r7, #8]
 80051f6:	f362 0383 	bfi	r3, r2, #2, #2
 80051fa:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
 80051fc:	f107 0208 	add.w	r2, r7, #8
 8005200:	2301      	movs	r3, #1
 8005202:	2110      	movs	r1, #16
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff fdf6 	bl	8004df6 <lps22hh_write_reg>
 800520a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800520c:	68fb      	ldr	r3, [r7, #12]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	460b      	mov	r3, r1
 8005220:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t*) &reg, 1);
 8005222:	f107 0208 	add.w	r2, r7, #8
 8005226:	2301      	movs	r3, #1
 8005228:	210e      	movs	r1, #14
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7ff fdcb 	bl	8004dc6 <lps22hh_read_reg>
 8005230:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d118      	bne.n	800526a <lps22hh_i3c_interface_set+0x54>
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8005238:	78fb      	ldrb	r3, [r7, #3]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	b2da      	uxtb	r2, r3
 8005240:	7a3b      	ldrb	r3, [r7, #8]
 8005242:	f362 0341 	bfi	r3, r2, #1, #1
 8005246:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	091b      	lsrs	r3, r3, #4
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	b2da      	uxtb	r2, r3
 8005252:	7a3b      	ldrb	r3, [r7, #8]
 8005254:	f362 13c7 	bfi	r3, r2, #7, #1
 8005258:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t*) &reg, 1);
 800525a:	f107 0208 	add.w	r2, r7, #8
 800525e:	2301      	movs	r3, #1
 8005260:	210e      	movs	r1, #14
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7ff fdc7 	bl	8004df6 <lps22hh_write_reg>
 8005268:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800526a:	68fb      	ldr	r3, [r7, #12]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <LSM6DSO_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d103      	bne.n	8005290 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005288:	f04f 33ff 	mov.w	r3, #4294967295
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	e04d      	b.n	800532c <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	7b1a      	ldrb	r2, [r3, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	695a      	ldr	r2, [r3, #20]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a1b      	ldr	r2, [pc, #108]	; (8005338 <LSM6DSO_RegisterBusIO+0xc4>)
 80052cc:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a1a      	ldr	r2, [pc, #104]	; (800533c <LSM6DSO_RegisterBusIO+0xc8>)
 80052d2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d103      	bne.n	80052ea <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 80052e2:	f04f 33ff 	mov.w	r3, #4294967295
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e020      	b.n	800532c <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4798      	blx	r3
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 80052f6:	f04f 33ff 	mov.w	r3, #4294967295
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	e016      	b.n	800532c <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d112      	bne.n	800532c <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10d      	bne.n	800532c <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005310:	230c      	movs	r3, #12
 8005312:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005314:	7afb      	ldrb	r3, [r7, #11]
 8005316:	461a      	mov	r2, r3
 8005318:	2112      	movs	r1, #18
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 ff57 	bl	80061ce <LSM6DSO_Write_Reg>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 8005326:	f04f 33ff 	mov.w	r3, #4294967295
 800532a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800532c:	68fb      	ldr	r3, [r7, #12]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	08006671 	.word	0x08006671
 800533c:	080066a7 	.word	0x080066a7

08005340 <LSM6DSO_Init>:
 * @brief  Initialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	331c      	adds	r3, #28
 800534c:	2180      	movs	r1, #128	; 0x80
 800534e:	4618      	mov	r0, r3
 8005350:	f001 fe21 	bl	8006f96 <lsm6dso_i3c_disable_set>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 800535a:	f04f 33ff 	mov.w	r3, #4294967295
 800535e:	e060      	b.n	8005422 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	331c      	adds	r3, #28
 8005364:	2101      	movs	r1, #1
 8005366:	4618      	mov	r0, r3
 8005368:	f001 fdef 	bl	8006f4a <lsm6dso_auto_increment_set>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 8005372:	f04f 33ff 	mov.w	r3, #4294967295
 8005376:	e054      	b.n	8005422 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	331c      	adds	r3, #28
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f001 fd64 	bl	8006e4c <lsm6dso_block_data_update_set>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 800538a:	f04f 33ff 	mov.w	r3, #4294967295
 800538e:	e048      	b.n	8005422 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	331c      	adds	r3, #28
 8005394:	2100      	movs	r1, #0
 8005396:	4618      	mov	r0, r3
 8005398:	f001 fe43 	bl	8007022 <lsm6dso_fifo_mode_set>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 80053a2:	f04f 33ff 	mov.w	r3, #4294967295
 80053a6:	e03c      	b.n	8005422 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2204      	movs	r2, #4
 80053ac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	331c      	adds	r3, #28
 80053b4:	2100      	movs	r1, #0
 80053b6:	4618      	mov	r0, r3
 80053b8:	f001 fa1e 	bl	80067f8 <lsm6dso_xl_data_rate_set>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 80053c2:	f04f 33ff 	mov.w	r3, #4294967295
 80053c6:	e02c      	b.n	8005422 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	331c      	adds	r3, #28
 80053cc:	2100      	movs	r1, #0
 80053ce:	4618      	mov	r0, r3
 80053d0:	f001 f9b4 	bl	800673c <lsm6dso_xl_full_scale_set>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 80053da:	f04f 33ff 	mov.w	r3, #4294967295
 80053de:	e020      	b.n	8005422 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2204      	movs	r2, #4
 80053e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	331c      	adds	r3, #28
 80053ec:	2100      	movs	r1, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	f001 fbce 	bl	8006b90 <lsm6dso_gy_data_rate_set>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 80053fa:	f04f 33ff 	mov.w	r3, #4294967295
 80053fe:	e010      	b.n	8005422 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	331c      	adds	r3, #28
 8005404:	2106      	movs	r1, #6
 8005406:	4618      	mov	r0, r3
 8005408:	f001 fb5a 	bl	8006ac0 <lsm6dso_gy_full_scale_set>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8005412:	f04f 33ff 	mov.w	r3, #4294967295
 8005416:	e004      	b.n	8005422 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <LSM6DSO_DeInit>:
 * @brief  Deinitialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b082      	sub	sp, #8
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f888 	bl	8005548 <LSM6DSO_ACC_Disable>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 800543e:	f04f 33ff 	mov.w	r3, #4294967295
 8005442:	e015      	b.n	8005470 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fc2c 	bl	8005ca2 <LSM6DSO_GYRO_Disable>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8005450:	f04f 33ff 	mov.w	r3, #4294967295
 8005454:	e00c      	b.n	8005470 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <LSM6DSO_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	331c      	adds	r3, #28
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	4618      	mov	r0, r3
 800548a:	f001 fd4d 	bl	8006f28 <lsm6dso_device_id_get>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8005494:	f04f 33ff 	mov.w	r3, #4294967295
 8005498:	e000      	b.n	800549c <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <LSM6DSO_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSO sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2201      	movs	r2, #1
 80054b2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2201      	movs	r2, #1
 80054b8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2200      	movs	r2, #0
 80054be:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2200      	movs	r2, #0
 80054c4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80054cc:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2210      	movs	r2, #16
 80054d2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2200      	movs	r2, #0
 80054d8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	4a07      	ldr	r2, [pc, #28]	; (80054fc <LSM6DSO_GetCapabilities+0x58>)
 80054de:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	4a06      	ldr	r2, [pc, #24]	; (80054fc <LSM6DSO_GetCapabilities+0x58>)
 80054e4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	45d02000 	.word	0x45d02000

08005500 <LSM6DSO_ACC_Enable>:
 * @brief  Enable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	e014      	b.n	8005540 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f103 021c 	add.w	r2, r3, #28
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005522:	4619      	mov	r1, r3
 8005524:	4610      	mov	r0, r2
 8005526:	f001 f967 	bl	80067f8 <lsm6dso_xl_data_rate_set>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8005530:	f04f 33ff 	mov.w	r3, #4294967295
 8005534:	e004      	b.n	8005540 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <LSM6DSO_ACC_Disable>:
 * @brief  Disable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	e01f      	b.n	800559e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f103 021c 	add.w	r2, r3, #28
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	332b      	adds	r3, #43	; 0x2b
 8005568:	4619      	mov	r1, r3
 800556a:	4610      	mov	r0, r2
 800556c:	f001 fa40 	bl	80069f0 <lsm6dso_xl_data_rate_get>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8005576:	f04f 33ff 	mov.w	r3, #4294967295
 800557a:	e010      	b.n	800559e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	331c      	adds	r3, #28
 8005580:	2100      	movs	r1, #0
 8005582:	4618      	mov	r0, r3
 8005584:	f001 f938 	bl	80067f8 <lsm6dso_xl_data_rate_set>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800558e:	f04f 33ff 	mov.w	r3, #4294967295
 8005592:	e004      	b.n	800559e <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <LSM6DSO_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	331c      	adds	r3, #28
 80055ba:	f107 020b 	add.w	r2, r7, #11
 80055be:	4611      	mov	r1, r2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f001 f8e1 	bl	8006788 <lsm6dso_xl_full_scale_get>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80055cc:	f04f 33ff 	mov.w	r3, #4294967295
 80055d0:	e023      	b.n	800561a <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80055d2:	7afb      	ldrb	r3, [r7, #11]
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d81b      	bhi.n	8005610 <LSM6DSO_ACC_GetSensitivity+0x68>
 80055d8:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <LSM6DSO_ACC_GetSensitivity+0x38>)
 80055da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055de:	bf00      	nop
 80055e0:	080055f1 	.word	0x080055f1
 80055e4:	08005609 	.word	0x08005609
 80055e8:	080055f9 	.word	0x080055f9
 80055ec:	08005601 	.word	0x08005601
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	4a0c      	ldr	r2, [pc, #48]	; (8005624 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 80055f4:	601a      	str	r2, [r3, #0]
      break;
 80055f6:	e00f      	b.n	8005618 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	4a0b      	ldr	r2, [pc, #44]	; (8005628 <LSM6DSO_ACC_GetSensitivity+0x80>)
 80055fc:	601a      	str	r2, [r3, #0]
      break;
 80055fe:	e00b      	b.n	8005618 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	4a0a      	ldr	r2, [pc, #40]	; (800562c <LSM6DSO_ACC_GetSensitivity+0x84>)
 8005604:	601a      	str	r2, [r3, #0]
      break;
 8005606:	e007      	b.n	8005618 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	4a09      	ldr	r2, [pc, #36]	; (8005630 <LSM6DSO_ACC_GetSensitivity+0x88>)
 800560c:	601a      	str	r2, [r3, #0]
      break;
 800560e:	e003      	b.n	8005618 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005610:	f04f 33ff 	mov.w	r3, #4294967295
 8005614:	60fb      	str	r3, [r7, #12]
      break;
 8005616:	bf00      	nop
  }

  return ret;
 8005618:	68fb      	ldr	r3, [r7, #12]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	3d79db23 	.word	0x3d79db23
 8005628:	3df9db23 	.word	0x3df9db23
 800562c:	3e79db23 	.word	0x3e79db23
 8005630:	3ef9db23 	.word	0x3ef9db23

08005634 <LSM6DSO_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	331c      	adds	r3, #28
 8005646:	f107 020b 	add.w	r2, r7, #11
 800564a:	4611      	mov	r1, r2
 800564c:	4618      	mov	r0, r3
 800564e:	f001 f9cf 	bl	80069f0 <lsm6dso_xl_data_rate_get>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8005658:	f04f 33ff 	mov.w	r3, #4294967295
 800565c:	e054      	b.n	8005708 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800565e:	7afb      	ldrb	r3, [r7, #11]
 8005660:	2b0b      	cmp	r3, #11
 8005662:	d84c      	bhi.n	80056fe <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8005664:	a201      	add	r2, pc, #4	; (adr r2, 800566c <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8005666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566a:	bf00      	nop
 800566c:	0800569d 	.word	0x0800569d
 8005670:	080056af 	.word	0x080056af
 8005674:	080056b7 	.word	0x080056b7
 8005678:	080056bf 	.word	0x080056bf
 800567c:	080056c7 	.word	0x080056c7
 8005680:	080056cf 	.word	0x080056cf
 8005684:	080056d7 	.word	0x080056d7
 8005688:	080056df 	.word	0x080056df
 800568c:	080056e7 	.word	0x080056e7
 8005690:	080056ef 	.word	0x080056ef
 8005694:	080056f7 	.word	0x080056f7
 8005698:	080056a7 	.word	0x080056a7
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]
      break;
 80056a4:	e02f      	b.n	8005706 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	4a19      	ldr	r2, [pc, #100]	; (8005710 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80056aa:	601a      	str	r2, [r3, #0]
      break;
 80056ac:	e02b      	b.n	8005706 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	4a18      	ldr	r2, [pc, #96]	; (8005714 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80056b2:	601a      	str	r2, [r3, #0]
      break;
 80056b4:	e027      	b.n	8005706 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	4a17      	ldr	r2, [pc, #92]	; (8005718 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 80056ba:	601a      	str	r2, [r3, #0]
      break;
 80056bc:	e023      	b.n	8005706 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	4a16      	ldr	r2, [pc, #88]	; (800571c <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 80056c2:	601a      	str	r2, [r3, #0]
      break;
 80056c4:	e01f      	b.n	8005706 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	4a15      	ldr	r2, [pc, #84]	; (8005720 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 80056ca:	601a      	str	r2, [r3, #0]
      break;
 80056cc:	e01b      	b.n	8005706 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	4a14      	ldr	r2, [pc, #80]	; (8005724 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 80056d2:	601a      	str	r2, [r3, #0]
      break;
 80056d4:	e017      	b.n	8005706 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	4a13      	ldr	r2, [pc, #76]	; (8005728 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 80056da:	601a      	str	r2, [r3, #0]
      break;
 80056dc:	e013      	b.n	8005706 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	4a12      	ldr	r2, [pc, #72]	; (800572c <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 80056e2:	601a      	str	r2, [r3, #0]
      break;
 80056e4:	e00f      	b.n	8005706 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	4a11      	ldr	r2, [pc, #68]	; (8005730 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 80056ea:	601a      	str	r2, [r3, #0]
      break;
 80056ec:	e00b      	b.n	8005706 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	4a10      	ldr	r2, [pc, #64]	; (8005734 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80056f2:	601a      	str	r2, [r3, #0]
      break;
 80056f4:	e007      	b.n	8005706 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	4a0f      	ldr	r2, [pc, #60]	; (8005738 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80056fa:	601a      	str	r2, [r3, #0]
      break;
 80056fc:	e003      	b.n	8005706 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80056fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005702:	60fb      	str	r3, [r7, #12]
      break;
 8005704:	bf00      	nop
  }

  return ret;
 8005706:	68fb      	ldr	r3, [r7, #12]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	3fcccccd 	.word	0x3fcccccd
 8005714:	41480000 	.word	0x41480000
 8005718:	41d00000 	.word	0x41d00000
 800571c:	42500000 	.word	0x42500000
 8005720:	42d00000 	.word	0x42d00000
 8005724:	43500000 	.word	0x43500000
 8005728:	43d08000 	.word	0x43d08000
 800572c:	44504000 	.word	0x44504000
 8005730:	44d06000 	.word	0x44d06000
 8005734:	45505000 	.word	0x45505000
 8005738:	45d05800 	.word	0x45d05800

0800573c <LSM6DSO_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8005748:	2100      	movs	r1, #0
 800574a:	ed97 0a00 	vldr	s0, [r7]
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f806 	bl	8005760 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8005754:	4603      	mov	r3, r0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the accelerometer operating mode
 * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08c      	sub	sp, #48	; 0x30
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	ed87 0a02 	vstr	s0, [r7, #8]
 800576c:	460b      	mov	r3, r1
 800576e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	62bb      	str	r3, [r7, #40]	; 0x28
  
  switch (Mode)
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d079      	beq.n	8005872 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
 800577e:	2b02      	cmp	r3, #2
 8005780:	f000 80e5 	beq.w	800594e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
 8005784:	2b00      	cmp	r3, #0
 8005786:	f040 815e 	bne.w	8005a46 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f103 001c 	add.w	r0, r3, #28
 8005790:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005794:	2301      	movs	r3, #1
 8005796:	2114      	movs	r1, #20
 8005798:	f000 ffa0 	bl	80066dc <lsm6dso_read_reg>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x48>
      {
        return LSM6DSO_ERROR;
 80057a2:	f04f 33ff 	mov.w	r3, #4294967295
 80057a6:	e16c      	b.n	8005a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val1.xl_ulp_en != 0U)
 80057a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d025      	beq.n	8005802 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d10b      	bne.n	80057d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x78>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	331c      	adds	r3, #28
 80057c4:	2100      	movs	r1, #0
 80057c6:	4618      	mov	r0, r3
 80057c8:	f001 f816 	bl	80067f8 <lsm6dso_xl_data_rate_set>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x78>
          {
            return LSM6DSO_ERROR;
 80057d2:	f04f 33ff 	mov.w	r3, #4294967295
 80057d6:	e154      	b.n	8005a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
          }
        }

        val1.xl_ulp_en = 0;
 80057d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057dc:	f36f 13c7 	bfc	r3, #7, #1
 80057e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f103 001c 	add.w	r0, r3, #28
 80057ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80057ee:	2301      	movs	r3, #1
 80057f0:	2114      	movs	r1, #20
 80057f2:	f000 ff8b 	bl	800670c <lsm6dso_write_reg>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
        {
          return LSM6DSO_ERROR;
 80057fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005800:	e13f      	b.n	8005a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f103 001c 	add.w	r0, r3, #28
 8005808:	f107 0220 	add.w	r2, r7, #32
 800580c:	2301      	movs	r3, #1
 800580e:	2115      	movs	r1, #21
 8005810:	f000 ff64 	bl	80066dc <lsm6dso_read_reg>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc0>
      {
        return LSM6DSO_ERROR;
 800581a:	f04f 33ff 	mov.w	r3, #4294967295
 800581e:	e130      	b.n	8005a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val2.xl_hm_mode != 0U)
 8005820:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005824:	f003 0310 	and.w	r3, r3, #16
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d014      	beq.n	8005858 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf8>
      {
        val2.xl_hm_mode = 0U;
 800582e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005832:	f36f 1304 	bfc	r3, #4, #1
 8005836:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f103 001c 	add.w	r0, r3, #28
 8005840:	f107 0220 	add.w	r2, r7, #32
 8005844:	2301      	movs	r3, #1
 8005846:	2115      	movs	r1, #21
 8005848:	f000 ff60 	bl	800670c <lsm6dso_write_reg>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf8>
        {
          return LSM6DSO_ERROR;
 8005852:	f04f 33ff 	mov.w	r3, #4294967295
 8005856:	e114      	b.n	8005a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8005858:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800585c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005868:	d400      	bmi.n	800586c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x10c>
      {
        newOdr = 12.5f;
      }
      break;
 800586a:	e0f0      	b.n	8005a4e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
        newOdr = 12.5f;
 800586c:	4b87      	ldr	r3, [pc, #540]	; (8005a8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x32c>)
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005870:	e0ed      	b.n	8005a4e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f103 001c 	add.w	r0, r3, #28
 8005878:	f107 021c 	add.w	r2, r7, #28
 800587c:	2301      	movs	r3, #1
 800587e:	2114      	movs	r1, #20
 8005880:	f000 ff2c 	bl	80066dc <lsm6dso_read_reg>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x130>
      {
        return LSM6DSO_ERROR;
 800588a:	f04f 33ff 	mov.w	r3, #4294967295
 800588e:	e0f8      	b.n	8005a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val1.xl_ulp_en != 0U)
 8005890:	7f3b      	ldrb	r3, [r7, #28]
 8005892:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d023      	beq.n	80058e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d10b      	bne.n	80058be <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	331c      	adds	r3, #28
 80058aa:	2100      	movs	r1, #0
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 ffa3 	bl	80067f8 <lsm6dso_xl_data_rate_set>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
          {
            return LSM6DSO_ERROR;
 80058b8:	f04f 33ff 	mov.w	r3, #4294967295
 80058bc:	e0e1      	b.n	8005a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
          }
        }

        val1.xl_ulp_en = 0;
 80058be:	7f3b      	ldrb	r3, [r7, #28]
 80058c0:	f36f 13c7 	bfc	r3, #7, #1
 80058c4:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f103 001c 	add.w	r0, r3, #28
 80058cc:	f107 021c 	add.w	r2, r7, #28
 80058d0:	2301      	movs	r3, #1
 80058d2:	2114      	movs	r1, #20
 80058d4:	f000 ff1a 	bl	800670c <lsm6dso_write_reg>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
        {
          return LSM6DSO_ERROR;
 80058de:	f04f 33ff 	mov.w	r3, #4294967295
 80058e2:	e0ce      	b.n	8005a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f103 001c 	add.w	r0, r3, #28
 80058ea:	f107 0218 	add.w	r2, r7, #24
 80058ee:	2301      	movs	r3, #1
 80058f0:	2115      	movs	r1, #21
 80058f2:	f000 fef3 	bl	80066dc <lsm6dso_read_reg>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a2>
      {
        return LSM6DSO_ERROR;
 80058fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005900:	e0bf      	b.n	8005a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val2.xl_hm_mode == 0U)
 8005902:	7e3b      	ldrb	r3, [r7, #24]
 8005904:	f003 0310 	and.w	r3, r3, #16
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d112      	bne.n	8005934 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
      {
        val2.xl_hm_mode = 1U;
 800590e:	7e3b      	ldrb	r3, [r7, #24]
 8005910:	f043 0310 	orr.w	r3, r3, #16
 8005914:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f103 001c 	add.w	r0, r3, #28
 800591c:	f107 0218 	add.w	r2, r7, #24
 8005920:	2301      	movs	r3, #1
 8005922:	2115      	movs	r1, #21
 8005924:	f000 fef2 	bl	800670c <lsm6dso_write_reg>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
        {
          return LSM6DSO_ERROR;
 800592e:	f04f 33ff 	mov.w	r3, #4294967295
 8005932:	e0a6      	b.n	8005a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005934:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005938:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005a90 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>
 800593c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005944:	dc00      	bgt.n	8005948 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e8>
      {
        newOdr = 208.0f;
      }
      break;
 8005946:	e082      	b.n	8005a4e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
        newOdr = 208.0f;
 8005948:	4b52      	ldr	r3, [pc, #328]	; (8005a94 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>)
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
 800594c:	e07f      	b.n	8005a4e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f103 001c 	add.w	r0, r3, #28
 8005954:	f107 0210 	add.w	r2, r7, #16
 8005958:	2301      	movs	r3, #1
 800595a:	2115      	movs	r1, #21
 800595c:	f000 febe 	bl	80066dc <lsm6dso_read_reg>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20c>
      {
        return LSM6DSO_ERROR;
 8005966:	f04f 33ff 	mov.w	r3, #4294967295
 800596a:	e08a      	b.n	8005a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val2.xl_hm_mode != 0U)
 800596c:	7c3b      	ldrb	r3, [r7, #16]
 800596e:	f003 0310 	and.w	r3, r3, #16
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d012      	beq.n	800599e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23e>
      {
        val2.xl_hm_mode = 0U;
 8005978:	7c3b      	ldrb	r3, [r7, #16]
 800597a:	f36f 1304 	bfc	r3, #4, #1
 800597e:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f103 001c 	add.w	r0, r3, #28
 8005986:	f107 0210 	add.w	r2, r7, #16
 800598a:	2301      	movs	r3, #1
 800598c:	2115      	movs	r1, #21
 800598e:	f000 febd 	bl	800670c <lsm6dso_write_reg>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23e>
        {
          return LSM6DSO_ERROR;
 8005998:	f04f 33ff 	mov.w	r3, #4294967295
 800599c:	e071      	b.n	8005a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d108      	bne.n	80059ba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x25a>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f97a 	bl	8005ca2 <LSM6DSO_GYRO_Disable>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x25a>
        {
          return LSM6DSO_ERROR;
 80059b4:	f04f 33ff 	mov.w	r3, #4294967295
 80059b8:	e063      	b.n	8005a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f103 001c 	add.w	r0, r3, #28
 80059c0:	f107 0214 	add.w	r2, r7, #20
 80059c4:	2301      	movs	r3, #1
 80059c6:	2114      	movs	r1, #20
 80059c8:	f000 fe88 	bl	80066dc <lsm6dso_read_reg>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x278>
      {
        return LSM6DSO_ERROR;
 80059d2:	f04f 33ff 	mov.w	r3, #4294967295
 80059d6:	e054      	b.n	8005a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val1.xl_ulp_en == 0U)
 80059d8:	7d3b      	ldrb	r3, [r7, #20]
 80059da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d123      	bne.n	8005a2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2cc>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d10b      	bne.n	8005a06 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a6>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	331c      	adds	r3, #28
 80059f2:	2100      	movs	r1, #0
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 feff 	bl	80067f8 <lsm6dso_xl_data_rate_set>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a6>
          {
            return LSM6DSO_ERROR;
 8005a00:	f04f 33ff 	mov.w	r3, #4294967295
 8005a04:	e03d      	b.n	8005a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
          }
        }

        val1.xl_ulp_en = 1U;
 8005a06:	7d3b      	ldrb	r3, [r7, #20]
 8005a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a0c:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f103 001c 	add.w	r0, r3, #28
 8005a14:	f107 0214 	add.w	r2, r7, #20
 8005a18:	2301      	movs	r3, #1
 8005a1a:	2114      	movs	r1, #20
 8005a1c:	f000 fe76 	bl	800670c <lsm6dso_write_reg>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2cc>
        {
          return LSM6DSO_ERROR;
 8005a26:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2a:	e02a      	b.n	8005a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005a2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005a30:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005a90 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>
 8005a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a3c:	dc00      	bgt.n	8005a40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e0>
      {
        newOdr = 208.0f;
      }
      break;
 8005a3e:	e006      	b.n	8005a4e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
        newOdr = 208.0f;
 8005a40:	4b14      	ldr	r3, [pc, #80]	; (8005a94 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>)
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a44:	e003      	b.n	8005a4e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
    }
    default:
      ret = LSM6DSO_ERROR;
 8005a46:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8005a4c:	bf00      	nop
  }

  if(ret == LSM6DSO_ERROR)
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a54:	d102      	bne.n	8005a5c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2fc>
  {
    return LSM6DSO_ERROR;
 8005a56:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5a:	e012      	b.n	8005a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
  }

  if (pObj->acc_is_enabled == 1U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d106      	bne.n	8005a74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x314>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8005a66:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 fbca 	bl	8006204 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8005a70:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005a72:	e005      	b.n	8005a80 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8005a74:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 fc5b 	bl	8006334 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8005a7e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8005a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3730      	adds	r7, #48	; 0x30
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	41480000 	.word	0x41480000
 8005a90:	43500000 	.word	0x43500000
 8005a94:	43500000 	.word	0x43500000

08005a98 <LSM6DSO_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	331c      	adds	r3, #28
 8005aaa:	f107 020b 	add.w	r2, r7, #11
 8005aae:	4611      	mov	r1, r2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 fe69 	bl	8006788 <lsm6dso_xl_full_scale_get>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8005abc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac0:	e023      	b.n	8005b0a <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8005ac2:	7afb      	ldrb	r3, [r7, #11]
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d81b      	bhi.n	8005b00 <LSM6DSO_ACC_GetFullScale+0x68>
 8005ac8:	a201      	add	r2, pc, #4	; (adr r2, 8005ad0 <LSM6DSO_ACC_GetFullScale+0x38>)
 8005aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ace:	bf00      	nop
 8005ad0:	08005ae1 	.word	0x08005ae1
 8005ad4:	08005af9 	.word	0x08005af9
 8005ad8:	08005ae9 	.word	0x08005ae9
 8005adc:	08005af1 	.word	0x08005af1
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	601a      	str	r2, [r3, #0]
      break;
 8005ae6:	e00f      	b.n	8005b08 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2204      	movs	r2, #4
 8005aec:	601a      	str	r2, [r3, #0]
      break;
 8005aee:	e00b      	b.n	8005b08 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2208      	movs	r2, #8
 8005af4:	601a      	str	r2, [r3, #0]
      break;
 8005af6:	e007      	b.n	8005b08 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2210      	movs	r2, #16
 8005afc:	601a      	str	r2, [r3, #0]
      break;
 8005afe:	e003      	b.n	8005b08 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005b00:	f04f 33ff 	mov.w	r3, #4294967295
 8005b04:	60fb      	str	r3, [r7, #12]
      break;
 8005b06:	bf00      	nop
  }

  return ret;
 8005b08:	68fb      	ldr	r3, [r7, #12]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop

08005b14 <LSM6DSO_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	dd0b      	ble.n	8005b3c <LSM6DSO_ACC_SetFullScale+0x28>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	dd06      	ble.n	8005b38 <LSM6DSO_ACC_SetFullScale+0x24>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	dc01      	bgt.n	8005b34 <LSM6DSO_ACC_SetFullScale+0x20>
 8005b30:	2303      	movs	r3, #3
 8005b32:	e004      	b.n	8005b3e <LSM6DSO_ACC_SetFullScale+0x2a>
 8005b34:	2301      	movs	r3, #1
 8005b36:	e002      	b.n	8005b3e <LSM6DSO_ACC_SetFullScale+0x2a>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e000      	b.n	8005b3e <LSM6DSO_ACC_SetFullScale+0x2a>
 8005b3c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8005b3e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	331c      	adds	r3, #28
 8005b44:	7bfa      	ldrb	r2, [r7, #15]
 8005b46:	4611      	mov	r1, r2
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fdf7 	bl	800673c <lsm6dso_xl_full_scale_set>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8005b54:	f04f 33ff 	mov.w	r3, #4294967295
 8005b58:	e000      	b.n	8005b5c <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <LSM6DSO_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	331c      	adds	r3, #28
 8005b72:	f107 0208 	add.w	r2, r7, #8
 8005b76:	4611      	mov	r1, r2
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f001 f99e 	bl	8006eba <lsm6dso_acceleration_raw_get>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8005b84:	f04f 33ff 	mov.w	r3, #4294967295
 8005b88:	e00c      	b.n	8005ba4 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005b8a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005b92:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005b9a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <LSM6DSO_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8005bb6:	f04f 0300 	mov.w	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	331c      	adds	r3, #28
 8005bc0:	f107 0210 	add.w	r2, r7, #16
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 f977 	bl	8006eba <lsm6dso_acceleration_raw_get>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8005bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd6:	e03c      	b.n	8005c52 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8005bd8:	f107 030c 	add.w	r3, r7, #12
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff fce2 	bl	80055a8 <LSM6DSO_ACC_GetSensitivity>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8005bea:	f04f 33ff 	mov.w	r3, #4294967295
 8005bee:	e030      	b.n	8005c52 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8005bf0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005bf4:	ee07 3a90 	vmov	s15, r3
 8005bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c08:	ee17 2a90 	vmov	r2, s15
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8005c10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c14:	ee07 3a90 	vmov	s15, r3
 8005c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c28:	ee17 2a90 	vmov	r2, s15
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8005c30:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005c34:	ee07 3a90 	vmov	s15, r3
 8005c38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c48:	ee17 2a90 	vmov	r2, s15
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <LSM6DSO_GYRO_Enable>:
 * @brief  Enable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e014      	b.n	8005c9a <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f103 021c 	add.w	r2, r3, #28
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	f000 ff86 	bl	8006b90 <lsm6dso_gy_data_rate_set>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8005c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8e:	e004      	b.n	8005c9a <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <LSM6DSO_GYRO_Disable>:
 * @brief  Disable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	e01f      	b.n	8005cf8 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f103 021c 	add.w	r2, r3, #28
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	332c      	adds	r3, #44	; 0x2c
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	f001 f85f 	bl	8006d88 <lsm6dso_gy_data_rate_get>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8005cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd4:	e010      	b.n	8005cf8 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	331c      	adds	r3, #28
 8005cda:	2100      	movs	r1, #0
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f000 ff57 	bl	8006b90 <lsm6dso_gy_data_rate_set>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8005ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cec:	e004      	b.n	8005cf8 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <LSM6DSO_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	331c      	adds	r3, #28
 8005d12:	f107 020b 	add.w	r2, r7, #11
 8005d16:	4611      	mov	r1, r2
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fef7 	bl	8006b0c <lsm6dso_gy_full_scale_get>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005d24:	f04f 33ff 	mov.w	r3, #4294967295
 8005d28:	e02d      	b.n	8005d86 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8005d2a:	7afb      	ldrb	r3, [r7, #11]
 8005d2c:	2b06      	cmp	r3, #6
 8005d2e:	d825      	bhi.n	8005d7c <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8005d30:	a201      	add	r2, pc, #4	; (adr r2, 8005d38 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8005d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d36:	bf00      	nop
 8005d38:	08005d5d 	.word	0x08005d5d
 8005d3c:	08005d55 	.word	0x08005d55
 8005d40:	08005d65 	.word	0x08005d65
 8005d44:	08005d7d 	.word	0x08005d7d
 8005d48:	08005d6d 	.word	0x08005d6d
 8005d4c:	08005d7d 	.word	0x08005d7d
 8005d50:	08005d75 	.word	0x08005d75
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	4a0e      	ldr	r2, [pc, #56]	; (8005d90 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8005d58:	601a      	str	r2, [r3, #0]
      break;
 8005d5a:	e013      	b.n	8005d84 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	4a0d      	ldr	r2, [pc, #52]	; (8005d94 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8005d60:	601a      	str	r2, [r3, #0]
      break;
 8005d62:	e00f      	b.n	8005d84 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	4a0c      	ldr	r2, [pc, #48]	; (8005d98 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8005d68:	601a      	str	r2, [r3, #0]
      break;
 8005d6a:	e00b      	b.n	8005d84 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	4a0b      	ldr	r2, [pc, #44]	; (8005d9c <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8005d70:	601a      	str	r2, [r3, #0]
      break;
 8005d72:	e007      	b.n	8005d84 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	4a0a      	ldr	r2, [pc, #40]	; (8005da0 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8005d78:	601a      	str	r2, [r3, #0]
      break;
 8005d7a:	e003      	b.n	8005d84 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8005d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d80:	60fb      	str	r3, [r7, #12]
      break;
 8005d82:	bf00      	nop
  }

  return ret;
 8005d84:	68fb      	ldr	r3, [r7, #12]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	408c0000 	.word	0x408c0000
 8005d94:	410c0000 	.word	0x410c0000
 8005d98:	418c0000 	.word	0x418c0000
 8005d9c:	420c0000 	.word	0x420c0000
 8005da0:	428c0000 	.word	0x428c0000

08005da4 <LSM6DSO_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	331c      	adds	r3, #28
 8005db6:	f107 020b 	add.w	r2, r7, #11
 8005dba:	4611      	mov	r1, r2
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 ffe3 	bl	8006d88 <lsm6dso_gy_data_rate_get>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8005dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dcc:	e04e      	b.n	8005e6c <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8005dce:	7afb      	ldrb	r3, [r7, #11]
 8005dd0:	2b0a      	cmp	r3, #10
 8005dd2:	d846      	bhi.n	8005e62 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8005dd4:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005e09 	.word	0x08005e09
 8005de0:	08005e13 	.word	0x08005e13
 8005de4:	08005e1b 	.word	0x08005e1b
 8005de8:	08005e23 	.word	0x08005e23
 8005dec:	08005e2b 	.word	0x08005e2b
 8005df0:	08005e33 	.word	0x08005e33
 8005df4:	08005e3b 	.word	0x08005e3b
 8005df8:	08005e43 	.word	0x08005e43
 8005dfc:	08005e4b 	.word	0x08005e4b
 8005e00:	08005e53 	.word	0x08005e53
 8005e04:	08005e5b 	.word	0x08005e5b
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
      break;
 8005e10:	e02b      	b.n	8005e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	4a17      	ldr	r2, [pc, #92]	; (8005e74 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8005e16:	601a      	str	r2, [r3, #0]
      break;
 8005e18:	e027      	b.n	8005e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	4a16      	ldr	r2, [pc, #88]	; (8005e78 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8005e1e:	601a      	str	r2, [r3, #0]
      break;
 8005e20:	e023      	b.n	8005e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	4a15      	ldr	r2, [pc, #84]	; (8005e7c <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8005e26:	601a      	str	r2, [r3, #0]
      break;
 8005e28:	e01f      	b.n	8005e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	4a14      	ldr	r2, [pc, #80]	; (8005e80 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8005e2e:	601a      	str	r2, [r3, #0]
      break;
 8005e30:	e01b      	b.n	8005e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8005e36:	601a      	str	r2, [r3, #0]
      break;
 8005e38:	e017      	b.n	8005e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	4a12      	ldr	r2, [pc, #72]	; (8005e88 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8005e3e:	601a      	str	r2, [r3, #0]
      break;
 8005e40:	e013      	b.n	8005e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	4a11      	ldr	r2, [pc, #68]	; (8005e8c <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8005e46:	601a      	str	r2, [r3, #0]
      break;
 8005e48:	e00f      	b.n	8005e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	4a10      	ldr	r2, [pc, #64]	; (8005e90 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8005e4e:	601a      	str	r2, [r3, #0]
      break;
 8005e50:	e00b      	b.n	8005e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	4a0f      	ldr	r2, [pc, #60]	; (8005e94 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8005e56:	601a      	str	r2, [r3, #0]
      break;
 8005e58:	e007      	b.n	8005e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	4a0e      	ldr	r2, [pc, #56]	; (8005e98 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8005e5e:	601a      	str	r2, [r3, #0]
      break;
 8005e60:	e003      	b.n	8005e6a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8005e62:	f04f 33ff 	mov.w	r3, #4294967295
 8005e66:	60fb      	str	r3, [r7, #12]
      break;
 8005e68:	bf00      	nop
  }

  return ret;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	41480000 	.word	0x41480000
 8005e78:	41d00000 	.word	0x41d00000
 8005e7c:	42500000 	.word	0x42500000
 8005e80:	42d00000 	.word	0x42d00000
 8005e84:	43500000 	.word	0x43500000
 8005e88:	43d08000 	.word	0x43d08000
 8005e8c:	44504000 	.word	0x44504000
 8005e90:	44d06000 	.word	0x44d06000
 8005e94:	45505000 	.word	0x45505000
 8005e98:	45d05800 	.word	0x45d05800

08005e9c <LSM6DSO_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	ed97 0a00 	vldr	s0, [r7]
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f806 	bl	8005ec0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8005eb4:	4603      	mov	r3, r0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
 * @param  Odr the output data rate value to be set
 * @param  Mode the gyroscope operating mode
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8005ed8:	79fb      	ldrb	r3, [r7, #7]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d028      	beq.n	8005f34 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8005ee2:	e05c      	b.n	8005f9e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f103 001c 	add.w	r0, r3, #28
 8005eea:	f107 0214 	add.w	r2, r7, #20
 8005eee:	2301      	movs	r3, #1
 8005ef0:	2116      	movs	r1, #22
 8005ef2:	f000 fbf3 	bl	80066dc <lsm6dso_read_reg>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8005efc:	f04f 33ff 	mov.w	r3, #4294967295
 8005f00:	e06c      	b.n	8005fdc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8005f02:	7d3b      	ldrb	r3, [r7, #20]
 8005f04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d04b      	beq.n	8005fa6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8005f0e:	7d3b      	ldrb	r3, [r7, #20]
 8005f10:	f36f 13c7 	bfc	r3, #7, #1
 8005f14:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f103 001c 	add.w	r0, r3, #28
 8005f1c:	f107 0214 	add.w	r2, r7, #20
 8005f20:	2301      	movs	r3, #1
 8005f22:	2116      	movs	r1, #22
 8005f24:	f000 fbf2 	bl	800670c <lsm6dso_write_reg>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d03b      	beq.n	8005fa6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8005f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f32:	e053      	b.n	8005fdc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f103 001c 	add.w	r0, r3, #28
 8005f3a:	f107 0210 	add.w	r2, r7, #16
 8005f3e:	2301      	movs	r3, #1
 8005f40:	2116      	movs	r1, #22
 8005f42:	f000 fbcb 	bl	80066dc <lsm6dso_read_reg>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8005f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f50:	e044      	b.n	8005fdc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8005f52:	7c3b      	ldrb	r3, [r7, #16]
 8005f54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d112      	bne.n	8005f84 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8005f5e:	7c3b      	ldrb	r3, [r7, #16]
 8005f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f64:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f103 001c 	add.w	r0, r3, #28
 8005f6c:	f107 0210 	add.w	r2, r7, #16
 8005f70:	2301      	movs	r3, #1
 8005f72:	2116      	movs	r1, #22
 8005f74:	f000 fbca 	bl	800670c <lsm6dso_write_reg>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8005f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f82:	e02b      	b.n	8005fdc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005f84:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f88:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005fe4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8005f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f94:	dc00      	bgt.n	8005f98 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8005f96:	e007      	b.n	8005fa8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8005f98:	4b13      	ldr	r3, [pc, #76]	; (8005fe8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8005f9a:	61bb      	str	r3, [r7, #24]
 8005f9c:	e004      	b.n	8005fa8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8005f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa2:	61fb      	str	r3, [r7, #28]
      break;
 8005fa4:	e000      	b.n	8005fa8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8005fa6:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fae:	d102      	bne.n	8005fb6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8005fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb4:	e012      	b.n	8005fdc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d106      	bne.n	8005fce <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8005fc0:	ed97 0a06 	vldr	s0, [r7, #24]
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 fa45 	bl	8006454 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8005fca:	61f8      	str	r0, [r7, #28]
 8005fcc:	e005      	b.n	8005fda <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8005fce:	ed97 0a06 	vldr	s0, [r7, #24]
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 faca 	bl	800656c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8005fd8:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8005fda:	69fb      	ldr	r3, [r7, #28]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3720      	adds	r7, #32
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	43500000 	.word	0x43500000
 8005fe8:	43500000 	.word	0x43500000

08005fec <LSM6DSO_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	331c      	adds	r3, #28
 8005ffe:	f107 020b 	add.w	r2, r7, #11
 8006002:	4611      	mov	r1, r2
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fd81 	bl	8006b0c <lsm6dso_gy_full_scale_get>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8006010:	f04f 33ff 	mov.w	r3, #4294967295
 8006014:	e030      	b.n	8006078 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8006016:	7afb      	ldrb	r3, [r7, #11]
 8006018:	2b06      	cmp	r3, #6
 800601a:	d828      	bhi.n	800606e <LSM6DSO_GYRO_GetFullScale+0x82>
 800601c:	a201      	add	r2, pc, #4	; (adr r2, 8006024 <LSM6DSO_GYRO_GetFullScale+0x38>)
 800601e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006022:	bf00      	nop
 8006024:	08006049 	.word	0x08006049
 8006028:	08006041 	.word	0x08006041
 800602c:	08006051 	.word	0x08006051
 8006030:	0800606f 	.word	0x0800606f
 8006034:	0800605b 	.word	0x0800605b
 8006038:	0800606f 	.word	0x0800606f
 800603c:	08006065 	.word	0x08006065
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	227d      	movs	r2, #125	; 0x7d
 8006044:	601a      	str	r2, [r3, #0]
      break;
 8006046:	e016      	b.n	8006076 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	22fa      	movs	r2, #250	; 0xfa
 800604c:	601a      	str	r2, [r3, #0]
      break;
 800604e:	e012      	b.n	8006076 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006056:	601a      	str	r2, [r3, #0]
      break;
 8006058:	e00d      	b.n	8006076 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006060:	601a      	str	r2, [r3, #0]
      break;
 8006062:	e008      	b.n	8006076 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800606a:	601a      	str	r2, [r3, #0]
      break;
 800606c:	e003      	b.n	8006076 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 800606e:	f04f 33ff 	mov.w	r3, #4294967295
 8006072:	60fb      	str	r3, [r7, #12]
      break;
 8006074:	bf00      	nop
  }

  return ret;
 8006076:	68fb      	ldr	r3, [r7, #12]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <LSM6DSO_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b7d      	cmp	r3, #125	; 0x7d
 800608e:	dd12      	ble.n	80060b6 <LSM6DSO_GYRO_SetFullScale+0x36>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2bfa      	cmp	r3, #250	; 0xfa
 8006094:	dd0d      	ble.n	80060b2 <LSM6DSO_GYRO_SetFullScale+0x32>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800609c:	dd07      	ble.n	80060ae <LSM6DSO_GYRO_SetFullScale+0x2e>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060a4:	dc01      	bgt.n	80060aa <LSM6DSO_GYRO_SetFullScale+0x2a>
 80060a6:	2304      	movs	r3, #4
 80060a8:	e006      	b.n	80060b8 <LSM6DSO_GYRO_SetFullScale+0x38>
 80060aa:	2306      	movs	r3, #6
 80060ac:	e004      	b.n	80060b8 <LSM6DSO_GYRO_SetFullScale+0x38>
 80060ae:	2302      	movs	r3, #2
 80060b0:	e002      	b.n	80060b8 <LSM6DSO_GYRO_SetFullScale+0x38>
 80060b2:	2300      	movs	r3, #0
 80060b4:	e000      	b.n	80060b8 <LSM6DSO_GYRO_SetFullScale+0x38>
 80060b6:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 80060b8:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	331c      	adds	r3, #28
 80060be:	7bfa      	ldrb	r2, [r7, #15]
 80060c0:	4611      	mov	r1, r2
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fcfc 	bl	8006ac0 <lsm6dso_gy_full_scale_set>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 80060ce:	f04f 33ff 	mov.w	r3, #4294967295
 80060d2:	e000      	b.n	80060d6 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <LSM6DSO_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b084      	sub	sp, #16
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	331c      	adds	r3, #28
 80060ec:	f107 0208 	add.w	r2, r7, #8
 80060f0:	4611      	mov	r1, r2
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fed0 	bl	8006e98 <lsm6dso_angular_rate_raw_get>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 80060fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006102:	e00c      	b.n	800611e <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006104:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800610c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006114:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <LSM6DSO_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b086      	sub	sp, #24
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	331c      	adds	r3, #28
 8006134:	f107 0210 	add.w	r2, r7, #16
 8006138:	4611      	mov	r1, r2
 800613a:	4618      	mov	r0, r3
 800613c:	f000 feac 	bl	8006e98 <lsm6dso_angular_rate_raw_get>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8006146:	f04f 33ff 	mov.w	r3, #4294967295
 800614a:	e03c      	b.n	80061c6 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800614c:	f107 030c 	add.w	r3, r7, #12
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7ff fdd4 	bl	8005d00 <LSM6DSO_GYRO_GetSensitivity>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 800615e:	f04f 33ff 	mov.w	r3, #4294967295
 8006162:	e030      	b.n	80061c6 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006164:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006168:	ee07 3a90 	vmov	s15, r3
 800616c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006170:	edd7 7a03 	vldr	s15, [r7, #12]
 8006174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006178:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800617c:	ee17 2a90 	vmov	r2, s15
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006184:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006188:	ee07 3a90 	vmov	s15, r3
 800618c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006190:	edd7 7a03 	vldr	s15, [r7, #12]
 8006194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800619c:	ee17 2a90 	vmov	r2, s15
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80061a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80061a8:	ee07 3a90 	vmov	s15, r3
 80061ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80061b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061bc:	ee17 2a90 	vmov	r2, s15
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <LSM6DSO_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b082      	sub	sp, #8
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	460b      	mov	r3, r1
 80061d8:	70fb      	strb	r3, [r7, #3]
 80061da:	4613      	mov	r3, r2
 80061dc:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f103 001c 	add.w	r0, r3, #28
 80061e4:	1cba      	adds	r2, r7, #2
 80061e6:	78f9      	ldrb	r1, [r7, #3]
 80061e8:	2301      	movs	r3, #1
 80061ea:	f000 fa8f 	bl	800670c <lsm6dso_write_reg>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 80061f4:	f04f 33ff 	mov.w	r3, #4294967295
 80061f8:	e000      	b.n	80061fc <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006210:	edd7 7a00 	vldr	s15, [r7]
 8006214:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006314 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8006218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800621c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006220:	d801      	bhi.n	8006226 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8006222:	230b      	movs	r3, #11
 8006224:	e063      	b.n	80062ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006226:	edd7 7a00 	vldr	s15, [r7]
 800622a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800622e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006236:	d801      	bhi.n	800623c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8006238:	2301      	movs	r3, #1
 800623a:	e058      	b.n	80062ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800623c:	edd7 7a00 	vldr	s15, [r7]
 8006240:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800624c:	d801      	bhi.n	8006252 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800624e:	2302      	movs	r3, #2
 8006250:	e04d      	b.n	80062ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006252:	edd7 7a00 	vldr	s15, [r7]
 8006256:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8006318 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 800625a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800625e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006262:	d801      	bhi.n	8006268 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006264:	2303      	movs	r3, #3
 8006266:	e042      	b.n	80062ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006268:	edd7 7a00 	vldr	s15, [r7]
 800626c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800631c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8006270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006278:	d801      	bhi.n	800627e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800627a:	2304      	movs	r3, #4
 800627c:	e037      	b.n	80062ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800627e:	edd7 7a00 	vldr	s15, [r7]
 8006282:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006320 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8006286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800628a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800628e:	d801      	bhi.n	8006294 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8006290:	2305      	movs	r3, #5
 8006292:	e02c      	b.n	80062ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006294:	edd7 7a00 	vldr	s15, [r7]
 8006298:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006324 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 800629c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a4:	d801      	bhi.n	80062aa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80062a6:	2306      	movs	r3, #6
 80062a8:	e021      	b.n	80062ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80062aa:	edd7 7a00 	vldr	s15, [r7]
 80062ae:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006328 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 80062b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ba:	d801      	bhi.n	80062c0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80062bc:	2307      	movs	r3, #7
 80062be:	e016      	b.n	80062ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80062c0:	edd7 7a00 	vldr	s15, [r7]
 80062c4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800632c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 80062c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d0:	d801      	bhi.n	80062d6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80062d2:	2308      	movs	r3, #8
 80062d4:	e00b      	b.n	80062ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80062d6:	edd7 7a00 	vldr	s15, [r7]
 80062da:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006330 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 80062de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e6:	d801      	bhi.n	80062ec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 80062e8:	2309      	movs	r3, #9
 80062ea:	e000      	b.n	80062ee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80062ec:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80062ee:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
          :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	331c      	adds	r3, #28
 80062f4:	7bfa      	ldrb	r2, [r7, #15]
 80062f6:	4611      	mov	r1, r2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fa7d 	bl	80067f8 <lsm6dso_xl_data_rate_set>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8006304:	f04f 33ff 	mov.w	r3, #4294967295
 8006308:	e000      	b.n	800630c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	3fcccccd 	.word	0x3fcccccd
 8006318:	42500000 	.word	0x42500000
 800631c:	42d00000 	.word	0x42d00000
 8006320:	43500000 	.word	0x43500000
 8006324:	43d08000 	.word	0x43d08000
 8006328:	44504000 	.word	0x44504000
 800632c:	44d06000 	.word	0x44d06000
 8006330:	45505000 	.word	0x45505000

08006334 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006340:	edd7 7a00 	vldr	s15, [r7]
 8006344:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006434 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8006348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800634c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006350:	d801      	bhi.n	8006356 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8006352:	230b      	movs	r3, #11
 8006354:	e063      	b.n	800641e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006356:	edd7 7a00 	vldr	s15, [r7]
 800635a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800635e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006366:	d801      	bhi.n	800636c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8006368:	2301      	movs	r3, #1
 800636a:	e058      	b.n	800641e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800636c:	edd7 7a00 	vldr	s15, [r7]
 8006370:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006374:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637c:	d801      	bhi.n	8006382 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800637e:	2302      	movs	r3, #2
 8006380:	e04d      	b.n	800641e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006382:	edd7 7a00 	vldr	s15, [r7]
 8006386:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006438 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 800638a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800638e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006392:	d801      	bhi.n	8006398 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8006394:	2303      	movs	r3, #3
 8006396:	e042      	b.n	800641e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006398:	edd7 7a00 	vldr	s15, [r7]
 800639c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800643c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80063a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a8:	d801      	bhi.n	80063ae <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80063aa:	2304      	movs	r3, #4
 80063ac:	e037      	b.n	800641e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80063ae:	edd7 7a00 	vldr	s15, [r7]
 80063b2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006440 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 80063b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063be:	d801      	bhi.n	80063c4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 80063c0:	2305      	movs	r3, #5
 80063c2:	e02c      	b.n	800641e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80063c4:	edd7 7a00 	vldr	s15, [r7]
 80063c8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006444 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 80063cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d4:	d801      	bhi.n	80063da <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80063d6:	2306      	movs	r3, #6
 80063d8:	e021      	b.n	800641e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80063da:	edd7 7a00 	vldr	s15, [r7]
 80063de:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006448 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 80063e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ea:	d801      	bhi.n	80063f0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80063ec:	2307      	movs	r3, #7
 80063ee:	e016      	b.n	800641e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80063f0:	edd7 7a00 	vldr	s15, [r7]
 80063f4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800644c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 80063f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006400:	d801      	bhi.n	8006406 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006402:	2308      	movs	r3, #8
 8006404:	e00b      	b.n	800641e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006406:	edd7 7a00 	vldr	s15, [r7]
 800640a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006450 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 800640e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006416:	d801      	bhi.n	800641c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8006418:	2309      	movs	r3, #9
 800641a:	e000      	b.n	800641e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800641c:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	3fcccccd 	.word	0x3fcccccd
 8006438:	42500000 	.word	0x42500000
 800643c:	42d00000 	.word	0x42d00000
 8006440:	43500000 	.word	0x43500000
 8006444:	43d08000 	.word	0x43d08000
 8006448:	44504000 	.word	0x44504000
 800644c:	44d06000 	.word	0x44d06000
 8006450:	45505000 	.word	0x45505000

08006454 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006460:	edd7 7a00 	vldr	s15, [r7]
 8006464:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006468:	eef4 7ac7 	vcmpe.f32	s15, s14
 800646c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006470:	d801      	bhi.n	8006476 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8006472:	2301      	movs	r3, #1
 8006474:	e058      	b.n	8006528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006476:	edd7 7a00 	vldr	s15, [r7]
 800647a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800647e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006486:	d801      	bhi.n	800648c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8006488:	2302      	movs	r3, #2
 800648a:	e04d      	b.n	8006528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800648c:	edd7 7a00 	vldr	s15, [r7]
 8006490:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006550 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8006494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800649c:	d801      	bhi.n	80064a2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800649e:	2303      	movs	r3, #3
 80064a0:	e042      	b.n	8006528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80064a2:	edd7 7a00 	vldr	s15, [r7]
 80064a6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006554 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80064aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b2:	d801      	bhi.n	80064b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80064b4:	2304      	movs	r3, #4
 80064b6:	e037      	b.n	8006528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80064b8:	edd7 7a00 	vldr	s15, [r7]
 80064bc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006558 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80064c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064c8:	d801      	bhi.n	80064ce <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80064ca:	2305      	movs	r3, #5
 80064cc:	e02c      	b.n	8006528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80064ce:	edd7 7a00 	vldr	s15, [r7]
 80064d2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800655c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80064d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064de:	d801      	bhi.n	80064e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80064e0:	2306      	movs	r3, #6
 80064e2:	e021      	b.n	8006528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80064e4:	edd7 7a00 	vldr	s15, [r7]
 80064e8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006560 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80064ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f4:	d801      	bhi.n	80064fa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80064f6:	2307      	movs	r3, #7
 80064f8:	e016      	b.n	8006528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80064fa:	edd7 7a00 	vldr	s15, [r7]
 80064fe:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006564 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8006502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800650a:	d801      	bhi.n	8006510 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 800650c:	2308      	movs	r3, #8
 800650e:	e00b      	b.n	8006528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006510:	edd7 7a00 	vldr	s15, [r7]
 8006514:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006568 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8006518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800651c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006520:	d801      	bhi.n	8006526 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006522:	2309      	movs	r3, #9
 8006524:	e000      	b.n	8006528 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006526:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006528:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
          :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	331c      	adds	r3, #28
 800652e:	7bfa      	ldrb	r2, [r7, #15]
 8006530:	4611      	mov	r1, r2
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fb2c 	bl	8006b90 <lsm6dso_gy_data_rate_set>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 800653e:	f04f 33ff 	mov.w	r3, #4294967295
 8006542:	e000      	b.n	8006546 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	42500000 	.word	0x42500000
 8006554:	42d00000 	.word	0x42d00000
 8006558:	43500000 	.word	0x43500000
 800655c:	43d08000 	.word	0x43d08000
 8006560:	44504000 	.word	0x44504000
 8006564:	44d06000 	.word	0x44d06000
 8006568:	45505000 	.word	0x45505000

0800656c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006578:	edd7 7a00 	vldr	s15, [r7]
 800657c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006588:	d801      	bhi.n	800658e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800658a:	2301      	movs	r3, #1
 800658c:	e058      	b.n	8006640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800658e:	edd7 7a00 	vldr	s15, [r7]
 8006592:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800659a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800659e:	d801      	bhi.n	80065a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80065a0:	2302      	movs	r3, #2
 80065a2:	e04d      	b.n	8006640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80065a4:	edd7 7a00 	vldr	s15, [r7]
 80065a8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006654 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80065ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b4:	d801      	bhi.n	80065ba <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80065b6:	2303      	movs	r3, #3
 80065b8:	e042      	b.n	8006640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80065ba:	edd7 7a00 	vldr	s15, [r7]
 80065be:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006658 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80065c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ca:	d801      	bhi.n	80065d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80065cc:	2304      	movs	r3, #4
 80065ce:	e037      	b.n	8006640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80065d0:	edd7 7a00 	vldr	s15, [r7]
 80065d4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800665c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80065d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e0:	d801      	bhi.n	80065e6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80065e2:	2305      	movs	r3, #5
 80065e4:	e02c      	b.n	8006640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80065e6:	edd7 7a00 	vldr	s15, [r7]
 80065ea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006660 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80065ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f6:	d801      	bhi.n	80065fc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80065f8:	2306      	movs	r3, #6
 80065fa:	e021      	b.n	8006640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80065fc:	edd7 7a00 	vldr	s15, [r7]
 8006600:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006664 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8006604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800660c:	d801      	bhi.n	8006612 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800660e:	2307      	movs	r3, #7
 8006610:	e016      	b.n	8006640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006612:	edd7 7a00 	vldr	s15, [r7]
 8006616:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006668 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800661a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800661e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006622:	d801      	bhi.n	8006628 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8006624:	2308      	movs	r3, #8
 8006626:	e00b      	b.n	8006640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006628:	edd7 7a00 	vldr	s15, [r7]
 800662c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800666c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8006630:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006638:	d801      	bhi.n	800663e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800663a:	2309      	movs	r3, #9
 800663c:	e000      	b.n	8006640 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800663e:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                 :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	42500000 	.word	0x42500000
 8006658:	42d00000 	.word	0x42d00000
 800665c:	43500000 	.word	0x43500000
 8006660:	43d08000 	.word	0x43d08000
 8006664:	44504000 	.word	0x44504000
 8006668:	44d06000 	.word	0x44d06000
 800666c:	45505000 	.word	0x45505000

08006670 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006670:	b590      	push	{r4, r7, lr}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	607a      	str	r2, [r7, #4]
 800667a:	461a      	mov	r2, r3
 800667c:	460b      	mov	r3, r1
 800667e:	72fb      	strb	r3, [r7, #11]
 8006680:	4613      	mov	r3, r2
 8006682:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	695c      	ldr	r4, [r3, #20]
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	7b1b      	ldrb	r3, [r3, #12]
 8006690:	b298      	uxth	r0, r3
 8006692:	7afb      	ldrb	r3, [r7, #11]
 8006694:	b299      	uxth	r1, r3
 8006696:	893b      	ldrh	r3, [r7, #8]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	47a0      	blx	r4
 800669c:	4603      	mov	r3, r0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd90      	pop	{r4, r7, pc}

080066a6 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80066a6:	b590      	push	{r4, r7, lr}
 80066a8:	b087      	sub	sp, #28
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	60f8      	str	r0, [r7, #12]
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	461a      	mov	r2, r3
 80066b2:	460b      	mov	r3, r1
 80066b4:	72fb      	strb	r3, [r7, #11]
 80066b6:	4613      	mov	r3, r2
 80066b8:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	691c      	ldr	r4, [r3, #16]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	7b1b      	ldrb	r3, [r3, #12]
 80066c6:	b298      	uxth	r0, r3
 80066c8:	7afb      	ldrb	r3, [r7, #11]
 80066ca:	b299      	uxth	r1, r3
 80066cc:	893b      	ldrh	r3, [r7, #8]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	47a0      	blx	r4
 80066d2:	4603      	mov	r3, r0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd90      	pop	{r4, r7, pc}

080066dc <lsm6dso_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80066dc:	b590      	push	{r4, r7, lr}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	607a      	str	r2, [r7, #4]
 80066e6:	461a      	mov	r2, r3
 80066e8:	460b      	mov	r3, r1
 80066ea:	72fb      	strb	r3, [r7, #11]
 80066ec:	4613      	mov	r3, r2
 80066ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	685c      	ldr	r4, [r3, #4]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6898      	ldr	r0, [r3, #8]
 80066f8:	893b      	ldrh	r3, [r7, #8]
 80066fa:	7af9      	ldrb	r1, [r7, #11]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	47a0      	blx	r4
 8006700:	6178      	str	r0, [r7, #20]
  return ret;
 8006702:	697b      	ldr	r3, [r7, #20]
}
 8006704:	4618      	mov	r0, r3
 8006706:	371c      	adds	r7, #28
 8006708:	46bd      	mov	sp, r7
 800670a:	bd90      	pop	{r4, r7, pc}

0800670c <lsm6dso_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 800670c:	b590      	push	{r4, r7, lr}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	607a      	str	r2, [r7, #4]
 8006716:	461a      	mov	r2, r3
 8006718:	460b      	mov	r3, r1
 800671a:	72fb      	strb	r3, [r7, #11]
 800671c:	4613      	mov	r3, r2
 800671e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681c      	ldr	r4, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6898      	ldr	r0, [r3, #8]
 8006728:	893b      	ldrh	r3, [r7, #8]
 800672a:	7af9      	ldrb	r1, [r7, #11]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	47a0      	blx	r4
 8006730:	6178      	str	r0, [r7, #20]
  return ret;
 8006732:	697b      	ldr	r3, [r7, #20]
}
 8006734:	4618      	mov	r0, r3
 8006736:	371c      	adds	r7, #28
 8006738:	46bd      	mov	sp, r7
 800673a:	bd90      	pop	{r4, r7, pc}

0800673c <lsm6dso_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8006748:	f107 0208 	add.w	r2, r7, #8
 800674c:	2301      	movs	r3, #1
 800674e:	2110      	movs	r1, #16
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7ff ffc3 	bl	80066dc <lsm6dso_read_reg>
 8006756:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10f      	bne.n	800677e <lsm6dso_xl_full_scale_set+0x42>
    reg.fs_xl = (uint8_t) val;
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	f003 0303 	and.w	r3, r3, #3
 8006764:	b2da      	uxtb	r2, r3
 8006766:	7a3b      	ldrb	r3, [r7, #8]
 8006768:	f362 0383 	bfi	r3, r2, #2, #2
 800676c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 800676e:	f107 0208 	add.w	r2, r7, #8
 8006772:	2301      	movs	r3, #1
 8006774:	2110      	movs	r1, #16
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff ffc8 	bl	800670c <lsm6dso_write_reg>
 800677c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800677e:	68fb      	ldr	r3, [r7, #12]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <lsm6dso_xl_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dso_fs_xl_t *val)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8006792:	f107 0208 	add.w	r2, r7, #8
 8006796:	2301      	movs	r3, #1
 8006798:	2110      	movs	r1, #16
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff ff9e 	bl	80066dc <lsm6dso_read_reg>
 80067a0:	60f8      	str	r0, [r7, #12]
  switch (reg.fs_xl) {
 80067a2:	7a3b      	ldrb	r3, [r7, #8]
 80067a4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d81a      	bhi.n	80067e4 <lsm6dso_xl_full_scale_get+0x5c>
 80067ae:	a201      	add	r2, pc, #4	; (adr r2, 80067b4 <lsm6dso_xl_full_scale_get+0x2c>)
 80067b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b4:	080067c5 	.word	0x080067c5
 80067b8:	080067cd 	.word	0x080067cd
 80067bc:	080067d5 	.word	0x080067d5
 80067c0:	080067dd 	.word	0x080067dd
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	2200      	movs	r2, #0
 80067c8:	701a      	strb	r2, [r3, #0]
      break;
 80067ca:	e00f      	b.n	80067ec <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2201      	movs	r2, #1
 80067d0:	701a      	strb	r2, [r3, #0]
      break;
 80067d2:	e00b      	b.n	80067ec <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2202      	movs	r2, #2
 80067d8:	701a      	strb	r2, [r3, #0]
      break;
 80067da:	e007      	b.n	80067ec <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2203      	movs	r2, #3
 80067e0:	701a      	strb	r2, [r3, #0]
      break;
 80067e2:	e003      	b.n	80067ec <lsm6dso_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSO_2g;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2200      	movs	r2, #0
 80067e8:	701a      	strb	r2, [r3, #0]
      break;
 80067ea:	bf00      	nop
  }

  return ret;
 80067ec:	68fb      	ldr	r3, [r7, #12]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop

080067f8 <lsm6dso_xl_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dso_odr_xl_t val)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8006808:	f107 030c 	add.w	r3, r7, #12
 800680c:	4619      	mov	r1, r3
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fc2d 	bl	800706e <lsm6dso_fsm_enable_get>
 8006814:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	f040 80c4 	bne.w	80069a6 <lsm6dso_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800681e:	7b3b      	ldrb	r3, [r7, #12]
 8006820:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006824:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8006826:	7b3b      	ldrb	r3, [r7, #12]
 8006828:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800682c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800682e:	4313      	orrs	r3, r2
 8006830:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8006832:	7b3b      	ldrb	r3, [r7, #12]
 8006834:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006838:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800683a:	4313      	orrs	r3, r2
 800683c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800683e:	7b3b      	ldrb	r3, [r7, #12]
 8006840:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006844:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8006846:	4313      	orrs	r3, r2
 8006848:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 800684a:	7b3b      	ldrb	r3, [r7, #12]
 800684c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006850:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8006852:	4313      	orrs	r3, r2
 8006854:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8006856:	7b3b      	ldrb	r3, [r7, #12]
 8006858:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800685c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 800685e:	4313      	orrs	r3, r2
 8006860:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8006862:	7b3b      	ldrb	r3, [r7, #12]
 8006864:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006868:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800686a:	4313      	orrs	r3, r2
 800686c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 800686e:	7b3b      	ldrb	r3, [r7, #12]
 8006870:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006874:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8006876:	4313      	orrs	r3, r2
 8006878:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800687a:	7b7b      	ldrb	r3, [r7, #13]
 800687c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006880:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8006882:	4313      	orrs	r3, r2
 8006884:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8006886:	7b7b      	ldrb	r3, [r7, #13]
 8006888:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800688c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800688e:	4313      	orrs	r3, r2
 8006890:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8006892:	7b7b      	ldrb	r3, [r7, #13]
 8006894:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006898:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800689a:	4313      	orrs	r3, r2
 800689c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 800689e:	7b7b      	ldrb	r3, [r7, #13]
 80068a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80068a4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80068a6:	4313      	orrs	r3, r2
 80068a8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80068aa:	7b7b      	ldrb	r3, [r7, #13]
 80068ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80068b0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80068b2:	4313      	orrs	r3, r2
 80068b4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80068b6:	7b7b      	ldrb	r3, [r7, #13]
 80068b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80068bc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80068be:	4313      	orrs	r3, r2
 80068c0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80068c2:	7b7b      	ldrb	r3, [r7, #13]
 80068c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80068c8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80068ca:	4313      	orrs	r3, r2
 80068cc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 80068ce:	7b7b      	ldrb	r3, [r7, #13]
 80068d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80068d4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80068d6:	4313      	orrs	r3, r2
 80068d8:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d163      	bne.n	80069a6 <lsm6dso_xl_data_rate_set+0x1ae>

      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80068de:	f107 030b 	add.w	r3, r7, #11
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fbe3 	bl	80070b0 <lsm6dso_fsm_data_rate_get>
 80068ea:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d159      	bne.n	80069a6 <lsm6dso_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 80068f2:	7afb      	ldrb	r3, [r7, #11]
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d853      	bhi.n	80069a0 <lsm6dso_xl_data_rate_set+0x1a8>
 80068f8:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <lsm6dso_xl_data_rate_set+0x108>)
 80068fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fe:	bf00      	nop
 8006900:	08006911 	.word	0x08006911
 8006904:	08006923 	.word	0x08006923
 8006908:	08006941 	.word	0x08006941
 800690c:	0800696b 	.word	0x0800696b
          case LSM6DSO_ODR_FSM_12Hz5:

            if (val == LSM6DSO_XL_ODR_OFF){
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d102      	bne.n	800691c <lsm6dso_xl_data_rate_set+0x124>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8006916:	2301      	movs	r3, #1
 8006918:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 800691a:	e045      	b.n	80069a8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800691c:	78fb      	ldrb	r3, [r7, #3]
 800691e:	75fb      	strb	r3, [r7, #23]
            break;
 8006920:	e042      	b.n	80069a8 <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_26Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 8006922:	78fb      	ldrb	r3, [r7, #3]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d102      	bne.n	800692e <lsm6dso_xl_data_rate_set+0x136>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006928:	2302      	movs	r3, #2
 800692a:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 800692c:	e03c      	b.n	80069a8 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d102      	bne.n	800693a <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006934:	2302      	movs	r3, #2
 8006936:	75fb      	strb	r3, [r7, #23]
            break;
 8006938:	e036      	b.n	80069a8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	75fb      	strb	r3, [r7, #23]
            break;
 800693e:	e033      	b.n	80069a8 <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_52Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d102      	bne.n	800694c <lsm6dso_xl_data_rate_set+0x154>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006946:	2303      	movs	r3, #3
 8006948:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 800694a:	e02d      	b.n	80069a8 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d102      	bne.n	8006958 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006952:	2303      	movs	r3, #3
 8006954:	75fb      	strb	r3, [r7, #23]
            break;
 8006956:	e027      	b.n	80069a8 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_26Hz){
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	2b02      	cmp	r3, #2
 800695c:	d102      	bne.n	8006964 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800695e:	2303      	movs	r3, #3
 8006960:	75fb      	strb	r3, [r7, #23]
            break;
 8006962:	e021      	b.n	80069a8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	75fb      	strb	r3, [r7, #23]
            break;
 8006968:	e01e      	b.n	80069a8 <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_104Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 800696a:	78fb      	ldrb	r3, [r7, #3]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d102      	bne.n	8006976 <lsm6dso_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006970:	2304      	movs	r3, #4
 8006972:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 8006974:	e018      	b.n	80069a8 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d102      	bne.n	8006982 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800697c:	2304      	movs	r3, #4
 800697e:	75fb      	strb	r3, [r7, #23]
            break;
 8006980:	e012      	b.n	80069a8 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_26Hz){
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	2b02      	cmp	r3, #2
 8006986:	d102      	bne.n	800698e <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006988:	2304      	movs	r3, #4
 800698a:	75fb      	strb	r3, [r7, #23]
            break;
 800698c:	e00c      	b.n	80069a8 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_52Hz){
 800698e:	78fb      	ldrb	r3, [r7, #3]
 8006990:	2b03      	cmp	r3, #3
 8006992:	d102      	bne.n	800699a <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006994:	2304      	movs	r3, #4
 8006996:	75fb      	strb	r3, [r7, #23]
            break;
 8006998:	e006      	b.n	80069a8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800699a:	78fb      	ldrb	r3, [r7, #3]
 800699c:	75fb      	strb	r3, [r7, #23]
            break;
 800699e:	e003      	b.n	80069a8 <lsm6dso_xl_data_rate_set+0x1b0>
          default:
            odr_xl = val;
 80069a0:	78fb      	ldrb	r3, [r7, #3]
 80069a2:	75fb      	strb	r3, [r7, #23]
            break;
 80069a4:	e000      	b.n	80069a8 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 80069a6:	bf00      	nop
    }
  }
  if (ret == 0) {
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d107      	bne.n	80069be <lsm6dso_xl_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 80069ae:	f107 0208 	add.w	r2, r7, #8
 80069b2:	2301      	movs	r3, #1
 80069b4:	2110      	movs	r1, #16
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff fe90 	bl	80066dc <lsm6dso_read_reg>
 80069bc:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10f      	bne.n	80069e4 <lsm6dso_xl_data_rate_set+0x1ec>
    reg.odr_xl = (uint8_t) odr_xl;
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	7a3b      	ldrb	r3, [r7, #8]
 80069ce:	f362 1307 	bfi	r3, r2, #4, #4
 80069d2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 80069d4:	f107 0208 	add.w	r2, r7, #8
 80069d8:	2301      	movs	r3, #1
 80069da:	2110      	movs	r1, #16
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7ff fe95 	bl	800670c <lsm6dso_write_reg>
 80069e2:	6138      	str	r0, [r7, #16]
  }
  return ret;
 80069e4:	693b      	ldr	r3, [r7, #16]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop

080069f0 <lsm6dso_xl_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_odr_xl_t *val)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 80069fa:	f107 0208 	add.w	r2, r7, #8
 80069fe:	2301      	movs	r3, #1
 8006a00:	2110      	movs	r1, #16
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7ff fe6a 	bl	80066dc <lsm6dso_read_reg>
 8006a08:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl) {
 8006a0a:	7a3b      	ldrb	r3, [r7, #8]
 8006a0c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b0b      	cmp	r3, #11
 8006a14:	d84a      	bhi.n	8006aac <lsm6dso_xl_data_rate_get+0xbc>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <lsm6dso_xl_data_rate_get+0x2c>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a4d 	.word	0x08006a4d
 8006a20:	08006a55 	.word	0x08006a55
 8006a24:	08006a5d 	.word	0x08006a5d
 8006a28:	08006a65 	.word	0x08006a65
 8006a2c:	08006a6d 	.word	0x08006a6d
 8006a30:	08006a75 	.word	0x08006a75
 8006a34:	08006a7d 	.word	0x08006a7d
 8006a38:	08006a85 	.word	0x08006a85
 8006a3c:	08006a8d 	.word	0x08006a8d
 8006a40:	08006a95 	.word	0x08006a95
 8006a44:	08006a9d 	.word	0x08006a9d
 8006a48:	08006aa5 	.word	0x08006aa5
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	701a      	strb	r2, [r3, #0]
      break;
 8006a52:	e02f      	b.n	8006ab4 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2201      	movs	r2, #1
 8006a58:	701a      	strb	r2, [r3, #0]
      break;
 8006a5a:	e02b      	b.n	8006ab4 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	701a      	strb	r2, [r3, #0]
      break;
 8006a62:	e027      	b.n	8006ab4 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2203      	movs	r2, #3
 8006a68:	701a      	strb	r2, [r3, #0]
      break;
 8006a6a:	e023      	b.n	8006ab4 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2204      	movs	r2, #4
 8006a70:	701a      	strb	r2, [r3, #0]
      break;
 8006a72:	e01f      	b.n	8006ab4 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2205      	movs	r2, #5
 8006a78:	701a      	strb	r2, [r3, #0]
      break;
 8006a7a:	e01b      	b.n	8006ab4 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2206      	movs	r2, #6
 8006a80:	701a      	strb	r2, [r3, #0]
      break;
 8006a82:	e017      	b.n	8006ab4 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2207      	movs	r2, #7
 8006a88:	701a      	strb	r2, [r3, #0]
      break;
 8006a8a:	e013      	b.n	8006ab4 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2208      	movs	r2, #8
 8006a90:	701a      	strb	r2, [r3, #0]
      break;
 8006a92:	e00f      	b.n	8006ab4 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2209      	movs	r2, #9
 8006a98:	701a      	strb	r2, [r3, #0]
      break;
 8006a9a:	e00b      	b.n	8006ab4 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	220a      	movs	r2, #10
 8006aa0:	701a      	strb	r2, [r3, #0]
      break;
 8006aa2:	e007      	b.n	8006ab4 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	220b      	movs	r2, #11
 8006aa8:	701a      	strb	r2, [r3, #0]
      break;
 8006aaa:	e003      	b.n	8006ab4 <lsm6dso_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	701a      	strb	r2, [r3, #0]
      break;
 8006ab2:	bf00      	nop
  }
  return ret;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop

08006ac0 <lsm6dso_gy_full_scale_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dso_fs_g_t val)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006acc:	f107 0208 	add.w	r2, r7, #8
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	2111      	movs	r1, #17
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff fe01 	bl	80066dc <lsm6dso_read_reg>
 8006ada:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10f      	bne.n	8006b02 <lsm6dso_gy_full_scale_set+0x42>
    reg.fs_g = (uint8_t) val;
 8006ae2:	78fb      	ldrb	r3, [r7, #3]
 8006ae4:	f003 0307 	and.w	r3, r3, #7
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	7a3b      	ldrb	r3, [r7, #8]
 8006aec:	f362 0343 	bfi	r3, r2, #1, #3
 8006af0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006af2:	f107 0208 	add.w	r2, r7, #8
 8006af6:	2301      	movs	r3, #1
 8006af8:	2111      	movs	r1, #17
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff fe06 	bl	800670c <lsm6dso_write_reg>
 8006b00:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006b02:	68fb      	ldr	r3, [r7, #12]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <lsm6dso_gy_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dso_fs_g_t *val)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006b16:	f107 0208 	add.w	r2, r7, #8
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	2111      	movs	r1, #17
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff fddc 	bl	80066dc <lsm6dso_read_reg>
 8006b24:	60f8      	str	r0, [r7, #12]
  switch (reg.fs_g) {
 8006b26:	7a3b      	ldrb	r3, [r7, #8]
 8006b28:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b06      	cmp	r3, #6
 8006b30:	d824      	bhi.n	8006b7c <lsm6dso_gy_full_scale_get+0x70>
 8006b32:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <lsm6dso_gy_full_scale_get+0x2c>)
 8006b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b38:	08006b55 	.word	0x08006b55
 8006b3c:	08006b5d 	.word	0x08006b5d
 8006b40:	08006b65 	.word	0x08006b65
 8006b44:	08006b7d 	.word	0x08006b7d
 8006b48:	08006b6d 	.word	0x08006b6d
 8006b4c:	08006b7d 	.word	0x08006b7d
 8006b50:	08006b75 	.word	0x08006b75
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2200      	movs	r2, #0
 8006b58:	701a      	strb	r2, [r3, #0]
      break;
 8006b5a:	e013      	b.n	8006b84 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	701a      	strb	r2, [r3, #0]
      break;
 8006b62:	e00f      	b.n	8006b84 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2202      	movs	r2, #2
 8006b68:	701a      	strb	r2, [r3, #0]
      break;
 8006b6a:	e00b      	b.n	8006b84 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2204      	movs	r2, #4
 8006b70:	701a      	strb	r2, [r3, #0]
      break;
 8006b72:	e007      	b.n	8006b84 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2206      	movs	r2, #6
 8006b78:	701a      	strb	r2, [r3, #0]
      break;
 8006b7a:	e003      	b.n	8006b84 <lsm6dso_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSO_250dps;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	701a      	strb	r2, [r3, #0]
      break;
 8006b82:	bf00      	nop
  }

  return ret;
 8006b84:	68fb      	ldr	r3, [r7, #12]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop

08006b90 <lsm6dso_gy_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dso_odr_g_t val)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8006ba0:	f107 030c 	add.w	r3, r7, #12
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fa61 	bl	800706e <lsm6dso_fsm_enable_get>
 8006bac:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f040 80c4 	bne.w	8006d3e <lsm6dso_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8006bb6:	7b3b      	ldrb	r3, [r7, #12]
 8006bb8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006bbc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8006bbe:	7b3b      	ldrb	r3, [r7, #12]
 8006bc0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006bc4:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8006bca:	7b3b      	ldrb	r3, [r7, #12]
 8006bcc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006bd0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8006bd6:	7b3b      	ldrb	r3, [r7, #12]
 8006bd8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006bdc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8006bde:	4313      	orrs	r3, r2
 8006be0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8006be2:	7b3b      	ldrb	r3, [r7, #12]
 8006be4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006be8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8006bea:	4313      	orrs	r3, r2
 8006bec:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8006bee:	7b3b      	ldrb	r3, [r7, #12]
 8006bf0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006bf4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8006bfa:	7b3b      	ldrb	r3, [r7, #12]
 8006bfc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006c00:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8006c02:	4313      	orrs	r3, r2
 8006c04:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8006c06:	7b3b      	ldrb	r3, [r7, #12]
 8006c08:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006c0c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8006c12:	7b7b      	ldrb	r3, [r7, #13]
 8006c14:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006c18:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8006c1e:	7b7b      	ldrb	r3, [r7, #13]
 8006c20:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006c24:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8006c26:	4313      	orrs	r3, r2
 8006c28:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8006c2a:	7b7b      	ldrb	r3, [r7, #13]
 8006c2c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c30:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8006c32:	4313      	orrs	r3, r2
 8006c34:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8006c36:	7b7b      	ldrb	r3, [r7, #13]
 8006c38:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006c3c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8006c42:	7b7b      	ldrb	r3, [r7, #13]
 8006c44:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006c48:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8006c4e:	7b7b      	ldrb	r3, [r7, #13]
 8006c50:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006c54:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8006c56:	4313      	orrs	r3, r2
 8006c58:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8006c5a:	7b7b      	ldrb	r3, [r7, #13]
 8006c5c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006c60:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8006c62:	4313      	orrs	r3, r2
 8006c64:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 8006c66:	7b7b      	ldrb	r3, [r7, #13]
 8006c68:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006c6c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d163      	bne.n	8006d3e <lsm6dso_gy_data_rate_set+0x1ae>

      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8006c76:	f107 030b 	add.w	r3, r7, #11
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fa17 	bl	80070b0 <lsm6dso_fsm_data_rate_get>
 8006c82:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d159      	bne.n	8006d3e <lsm6dso_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8006c8a:	7afb      	ldrb	r3, [r7, #11]
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d853      	bhi.n	8006d38 <lsm6dso_gy_data_rate_set+0x1a8>
 8006c90:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <lsm6dso_gy_data_rate_set+0x108>)
 8006c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c96:	bf00      	nop
 8006c98:	08006ca9 	.word	0x08006ca9
 8006c9c:	08006cbb 	.word	0x08006cbb
 8006ca0:	08006cd9 	.word	0x08006cd9
 8006ca4:	08006d03 	.word	0x08006d03
          case LSM6DSO_ODR_FSM_12Hz5:

            if (val == LSM6DSO_GY_ODR_OFF){
 8006ca8:	78fb      	ldrb	r3, [r7, #3]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d102      	bne.n	8006cb4 <lsm6dso_gy_data_rate_set+0x124>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 8006cb2:	e045      	b.n	8006d40 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	75fb      	strb	r3, [r7, #23]
            break;
 8006cb8:	e042      	b.n	8006d40 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_26Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 8006cba:	78fb      	ldrb	r3, [r7, #3]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d102      	bne.n	8006cc6 <lsm6dso_gy_data_rate_set+0x136>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 8006cc4:	e03c      	b.n	8006d40 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d102      	bne.n	8006cd2 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006ccc:	2302      	movs	r3, #2
 8006cce:	75fb      	strb	r3, [r7, #23]
            break;
 8006cd0:	e036      	b.n	8006d40 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006cd2:	78fb      	ldrb	r3, [r7, #3]
 8006cd4:	75fb      	strb	r3, [r7, #23]
            break;
 8006cd6:	e033      	b.n	8006d40 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_52Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d102      	bne.n	8006ce4 <lsm6dso_gy_data_rate_set+0x154>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 8006ce2:	e02d      	b.n	8006d40 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8006ce4:	78fb      	ldrb	r3, [r7, #3]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d102      	bne.n	8006cf0 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006cea:	2303      	movs	r3, #3
 8006cec:	75fb      	strb	r3, [r7, #23]
            break;
 8006cee:	e027      	b.n	8006d40 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_26Hz){
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d102      	bne.n	8006cfc <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	75fb      	strb	r3, [r7, #23]
            break;
 8006cfa:	e021      	b.n	8006d40 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	75fb      	strb	r3, [r7, #23]
            break;
 8006d00:	e01e      	b.n	8006d40 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_104Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <lsm6dso_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006d08:	2304      	movs	r3, #4
 8006d0a:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 8006d0c:	e018      	b.n	8006d40 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8006d0e:	78fb      	ldrb	r3, [r7, #3]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d102      	bne.n	8006d1a <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006d14:	2304      	movs	r3, #4
 8006d16:	75fb      	strb	r3, [r7, #23]
            break;
 8006d18:	e012      	b.n	8006d40 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_26Hz){
 8006d1a:	78fb      	ldrb	r3, [r7, #3]
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d102      	bne.n	8006d26 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006d20:	2304      	movs	r3, #4
 8006d22:	75fb      	strb	r3, [r7, #23]
            break;
 8006d24:	e00c      	b.n	8006d40 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_52Hz){
 8006d26:	78fb      	ldrb	r3, [r7, #3]
 8006d28:	2b03      	cmp	r3, #3
 8006d2a:	d102      	bne.n	8006d32 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	75fb      	strb	r3, [r7, #23]
            break;
 8006d30:	e006      	b.n	8006d40 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	75fb      	strb	r3, [r7, #23]
            break;
 8006d36:	e003      	b.n	8006d40 <lsm6dso_gy_data_rate_set+0x1b0>
          default:
            odr_gy = val;
 8006d38:	78fb      	ldrb	r3, [r7, #3]
 8006d3a:	75fb      	strb	r3, [r7, #23]
            break;
 8006d3c:	e000      	b.n	8006d40 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8006d3e:	bf00      	nop
    }
  }

  if (ret == 0) {
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d107      	bne.n	8006d56 <lsm6dso_gy_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006d46:	f107 0208 	add.w	r2, r7, #8
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	2111      	movs	r1, #17
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7ff fcc4 	bl	80066dc <lsm6dso_read_reg>
 8006d54:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10f      	bne.n	8006d7c <lsm6dso_gy_data_rate_set+0x1ec>
    reg.odr_g = (uint8_t) odr_gy;
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
 8006d5e:	f003 030f 	and.w	r3, r3, #15
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	7a3b      	ldrb	r3, [r7, #8]
 8006d66:	f362 1307 	bfi	r3, r2, #4, #4
 8006d6a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006d6c:	f107 0208 	add.w	r2, r7, #8
 8006d70:	2301      	movs	r3, #1
 8006d72:	2111      	movs	r1, #17
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff fcc9 	bl	800670c <lsm6dso_write_reg>
 8006d7a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006d7c:	693b      	ldr	r3, [r7, #16]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop

08006d88 <lsm6dso_gy_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_odr_g_t *val)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006d92:	f107 0208 	add.w	r2, r7, #8
 8006d96:	2301      	movs	r3, #1
 8006d98:	2111      	movs	r1, #17
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7ff fc9e 	bl	80066dc <lsm6dso_read_reg>
 8006da0:	60f8      	str	r0, [r7, #12]
  switch (reg.odr_g) {
 8006da2:	7a3b      	ldrb	r3, [r7, #8]
 8006da4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b0a      	cmp	r3, #10
 8006dac:	d844      	bhi.n	8006e38 <lsm6dso_gy_data_rate_get+0xb0>
 8006dae:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <lsm6dso_gy_data_rate_get+0x2c>)
 8006db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db4:	08006de1 	.word	0x08006de1
 8006db8:	08006de9 	.word	0x08006de9
 8006dbc:	08006df1 	.word	0x08006df1
 8006dc0:	08006df9 	.word	0x08006df9
 8006dc4:	08006e01 	.word	0x08006e01
 8006dc8:	08006e09 	.word	0x08006e09
 8006dcc:	08006e11 	.word	0x08006e11
 8006dd0:	08006e19 	.word	0x08006e19
 8006dd4:	08006e21 	.word	0x08006e21
 8006dd8:	08006e29 	.word	0x08006e29
 8006ddc:	08006e31 	.word	0x08006e31
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	2200      	movs	r2, #0
 8006de4:	701a      	strb	r2, [r3, #0]
      break;
 8006de6:	e02b      	b.n	8006e40 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2201      	movs	r2, #1
 8006dec:	701a      	strb	r2, [r3, #0]
      break;
 8006dee:	e027      	b.n	8006e40 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2202      	movs	r2, #2
 8006df4:	701a      	strb	r2, [r3, #0]
      break;
 8006df6:	e023      	b.n	8006e40 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2203      	movs	r2, #3
 8006dfc:	701a      	strb	r2, [r3, #0]
      break;
 8006dfe:	e01f      	b.n	8006e40 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	2204      	movs	r2, #4
 8006e04:	701a      	strb	r2, [r3, #0]
      break;
 8006e06:	e01b      	b.n	8006e40 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2205      	movs	r2, #5
 8006e0c:	701a      	strb	r2, [r3, #0]
      break;
 8006e0e:	e017      	b.n	8006e40 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	2206      	movs	r2, #6
 8006e14:	701a      	strb	r2, [r3, #0]
      break;
 8006e16:	e013      	b.n	8006e40 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	2207      	movs	r2, #7
 8006e1c:	701a      	strb	r2, [r3, #0]
      break;
 8006e1e:	e00f      	b.n	8006e40 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2208      	movs	r2, #8
 8006e24:	701a      	strb	r2, [r3, #0]
      break;
 8006e26:	e00b      	b.n	8006e40 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	2209      	movs	r2, #9
 8006e2c:	701a      	strb	r2, [r3, #0]
      break;
 8006e2e:	e007      	b.n	8006e40 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	220a      	movs	r2, #10
 8006e34:	701a      	strb	r2, [r3, #0]
      break;
 8006e36:	e003      	b.n	8006e40 <lsm6dso_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	701a      	strb	r2, [r3, #0]
      break;
 8006e3e:	bf00      	nop
  }
  return ret;
 8006e40:	68fb      	ldr	r3, [r7, #12]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop

08006e4c <lsm6dso_block_data_update_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of bdu in reg CTRL3_C
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8006e58:	f107 0208 	add.w	r2, r7, #8
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	2112      	movs	r1, #18
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7ff fc3b 	bl	80066dc <lsm6dso_read_reg>
 8006e66:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10f      	bne.n	8006e8e <lsm6dso_block_data_update_set+0x42>
    reg.bdu = val;
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	7a3b      	ldrb	r3, [r7, #8]
 8006e78:	f362 1386 	bfi	r3, r2, #6, #1
 8006e7c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8006e7e:	f107 0208 	add.w	r2, r7, #8
 8006e82:	2301      	movs	r3, #1
 8006e84:	2112      	movs	r1, #18
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7ff fc40 	bl	800670c <lsm6dso_write_reg>
 8006e8c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <lsm6dso_angular_rate_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8006ea2:	2306      	movs	r3, #6
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	2122      	movs	r1, #34	; 0x22
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff fc17 	bl	80066dc <lsm6dso_read_reg>
 8006eae:	60f8      	str	r0, [r7, #12]
  return ret;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <lsm6dso_acceleration_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8006ec4:	2306      	movs	r3, #6
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	2128      	movs	r1, #40	; 0x28
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff fc06 	bl	80066dc <lsm6dso_read_reg>
 8006ed0:	60f8      	str	r0, [r7, #12]
  return ret;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <lsm6dso_mem_bank_set>:
  * @param  val      change the values of reg_access in
  *                               reg FUNC_CFG_ACCESS
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx, lsm6dso_reg_access_t val)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 8006ee8:	f107 0208 	add.w	r2, r7, #8
 8006eec:	2301      	movs	r3, #1
 8006eee:	2101      	movs	r1, #1
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7ff fbf3 	bl	80066dc <lsm6dso_read_reg>
 8006ef6:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10f      	bne.n	8006f1e <lsm6dso_mem_bank_set+0x42>
    reg.reg_access = (uint8_t)val;
 8006efe:	78fb      	ldrb	r3, [r7, #3]
 8006f00:	f003 0303 	and.w	r3, r3, #3
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	7a3b      	ldrb	r3, [r7, #8]
 8006f08:	f362 1387 	bfi	r3, r2, #6, #2
 8006f0c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 8006f0e:	f107 0208 	add.w	r2, r7, #8
 8006f12:	2301      	movs	r3, #1
 8006f14:	2101      	movs	r1, #1
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff fbf8 	bl	800670c <lsm6dso_write_reg>
 8006f1c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <lsm6dso_device_id_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8006f32:	2301      	movs	r3, #1
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	210f      	movs	r1, #15
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff fbcf 	bl	80066dc <lsm6dso_read_reg>
 8006f3e:	60f8      	str	r0, [r7, #12]
  return ret;
 8006f40:	68fb      	ldr	r3, [r7, #12]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <lsm6dso_auto_increment_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of if_inc in reg CTRL3_C
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	460b      	mov	r3, r1
 8006f54:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8006f56:	f107 0208 	add.w	r2, r7, #8
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	2112      	movs	r1, #18
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7ff fbbc 	bl	80066dc <lsm6dso_read_reg>
 8006f64:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10f      	bne.n	8006f8c <lsm6dso_auto_increment_set+0x42>
    reg.if_inc = val;
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	7a3b      	ldrb	r3, [r7, #8]
 8006f76:	f362 0382 	bfi	r3, r2, #2, #1
 8006f7a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8006f7c:	f107 0208 	add.w	r2, r7, #8
 8006f80:	2301      	movs	r3, #1
 8006f82:	2112      	movs	r1, #18
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7ff fbc1 	bl	800670c <lsm6dso_write_reg>
 8006f8a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <lsm6dso_i3c_disable_set>:
  * @param  val      change the values of i3c_disable
  *                                    in reg CTRL9_XL
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx, lsm6dso_i3c_disable_t val)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b086      	sub	sp, #24
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 8006fa2:	f107 020c 	add.w	r2, r7, #12
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	2118      	movs	r1, #24
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7ff fb96 	bl	80066dc <lsm6dso_read_reg>
 8006fb0:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d111      	bne.n	8006fdc <lsm6dso_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8006fb8:	78fb      	ldrb	r3, [r7, #3]
 8006fba:	09db      	lsrs	r3, r3, #7
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	7b3b      	ldrb	r3, [r7, #12]
 8006fc6:	f362 0341 	bfi	r3, r2, #1, #1
 8006fca:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 8006fcc:	f107 020c 	add.w	r2, r7, #12
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	2118      	movs	r1, #24
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff fb99 	bl	800670c <lsm6dso_write_reg>
 8006fda:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d107      	bne.n	8006ff2 <lsm6dso_i3c_disable_set+0x5c>

    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8006fe2:	f107 0210 	add.w	r2, r7, #16
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	2162      	movs	r1, #98	; 0x62
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7ff fb76 	bl	80066dc <lsm6dso_read_reg>
 8006ff0:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&i3c_bus_avb, 1);
  }
  if (ret == 0) {
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10f      	bne.n	8007018 <lsm6dso_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	f003 0303 	and.w	r3, r3, #3
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	7c3b      	ldrb	r3, [r7, #16]
 8007002:	f362 03c4 	bfi	r3, r2, #3, #2
 8007006:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8007008:	f107 0210 	add.w	r2, r7, #16
 800700c:	2301      	movs	r3, #1
 800700e:	2162      	movs	r1, #98	; 0x62
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff fb7b 	bl	800670c <lsm6dso_write_reg>
 8007016:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&i3c_bus_avb, 1);
  }

  return ret;
 8007018:	697b      	ldr	r3, [r7, #20]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <lsm6dso_fifo_mode_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fifo_mode in reg FIFO_CTRL4
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dso_fifo_mode_t val)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	460b      	mov	r3, r1
 800702c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 800702e:	f107 0208 	add.w	r2, r7, #8
 8007032:	2301      	movs	r3, #1
 8007034:	210a      	movs	r1, #10
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff fb50 	bl	80066dc <lsm6dso_read_reg>
 800703c:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10f      	bne.n	8007064 <lsm6dso_fifo_mode_set+0x42>
    reg.fifo_mode = (uint8_t)val;
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	b2da      	uxtb	r2, r3
 800704c:	7a3b      	ldrb	r3, [r7, #8]
 800704e:	f362 0302 	bfi	r3, r2, #0, #3
 8007052:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 8007054:	f107 0208 	add.w	r2, r7, #8
 8007058:	2301      	movs	r3, #1
 800705a:	210a      	movs	r1, #10
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff fb55 	bl	800670c <lsm6dso_write_reg>
 8007062:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007064:	68fb      	ldr	r3, [r7, #12]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <lsm6dso_fsm_enable_get>:
  * @param  val      union of registers from FSM_ENABLE_A to FSM_ENABLE_B
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007078:	2102      	movs	r1, #2
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7ff ff2e 	bl	8006edc <lsm6dso_mem_bank_set>
 8007080:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d106      	bne.n	8007096 <lsm6dso_fsm_enable_get+0x28>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t*) val, 2);
 8007088:	2302      	movs	r3, #2
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	2146      	movs	r1, #70	; 0x46
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff fb24 	bl	80066dc <lsm6dso_read_reg>
 8007094:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d104      	bne.n	80070a6 <lsm6dso_fsm_enable_get+0x38>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800709c:	2100      	movs	r1, #0
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7ff ff1c 	bl	8006edc <lsm6dso_mem_bank_set>
 80070a4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80070a6:	68fb      	ldr	r3, [r7, #12]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <lsm6dso_fsm_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fsm_odr in reg EMB_FUNC_ODR_CFG_B
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_fsm_odr_t *val)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80070ba:	2102      	movs	r1, #2
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7ff ff0d 	bl	8006edc <lsm6dso_mem_bank_set>
 80070c2:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d107      	bne.n	80070da <lsm6dso_fsm_data_rate_get+0x2a>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 80070ca:	f107 0208 	add.w	r2, r7, #8
 80070ce:	2301      	movs	r3, #1
 80070d0:	215f      	movs	r1, #95	; 0x5f
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7ff fb02 	bl	80066dc <lsm6dso_read_reg>
 80070d8:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&reg, 1);
  }
  if (ret == 0) {
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d12a      	bne.n	8007136 <lsm6dso_fsm_data_rate_get+0x86>
    switch (reg.fsm_odr) {
 80070e0:	7a3b      	ldrb	r3, [r7, #8]
 80070e2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b03      	cmp	r3, #3
 80070ea:	d81b      	bhi.n	8007124 <lsm6dso_fsm_data_rate_get+0x74>
 80070ec:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <lsm6dso_fsm_data_rate_get+0x44>)
 80070ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f2:	bf00      	nop
 80070f4:	08007105 	.word	0x08007105
 80070f8:	0800710d 	.word	0x0800710d
 80070fc:	08007115 	.word	0x08007115
 8007100:	0800711d 	.word	0x0800711d
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2200      	movs	r2, #0
 8007108:	701a      	strb	r2, [r3, #0]
        break;
 800710a:	e00f      	b.n	800712c <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2201      	movs	r2, #1
 8007110:	701a      	strb	r2, [r3, #0]
        break;
 8007112:	e00b      	b.n	800712c <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2202      	movs	r2, #2
 8007118:	701a      	strb	r2, [r3, #0]
        break;
 800711a:	e007      	b.n	800712c <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	2203      	movs	r2, #3
 8007120:	701a      	strb	r2, [r3, #0]
        break;
 8007122:	e003      	b.n	800712c <lsm6dso_fsm_data_rate_get+0x7c>
      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	2200      	movs	r2, #0
 8007128:	701a      	strb	r2, [r3, #0]
        break;
 800712a:	bf00      	nop
    }
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800712c:	2100      	movs	r1, #0
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff fed4 	bl	8006edc <lsm6dso_mem_bank_set>
 8007134:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007136:	68fb      	ldr	r3, [r7, #12]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <STTS751_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d103      	bne.n	8007158 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8007150:	f04f 33ff 	mov.w	r3, #4294967295
 8007154:	60fb      	str	r3, [r7, #12]
 8007156:	e030      	b.n	80071ba <STTS751_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	7b1a      	ldrb	r2, [r3, #12]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	691a      	ldr	r2, [r3, #16]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	695a      	ldr	r2, [r3, #20]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	699a      	ldr	r2, [r3, #24]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a0c      	ldr	r2, [pc, #48]	; (80071c4 <STTS751_RegisterBusIO+0x84>)
 8007194:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a0b      	ldr	r2, [pc, #44]	; (80071c8 <STTS751_RegisterBusIO+0x88>)
 800719a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d004      	beq.n	80071b4 <STTS751_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4798      	blx	r3
 80071b0:	60f8      	str	r0, [r7, #12]
 80071b2:	e002      	b.n	80071ba <STTS751_RegisterBusIO+0x7a>
    }
    else
    {
      ret = STTS751_ERROR;
 80071b4:	f04f 33ff 	mov.w	r3, #4294967295
 80071b8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80071ba:	68fb      	ldr	r3, [r7, #12]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	08007649 	.word	0x08007649
 80071c8:	080076b7 	.word	0x080076b7

080071cc <STTS751_Init>:
 * @brief  Initialize the STTS751 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d127      	bne.n	800722e <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	331c      	adds	r3, #28
 80071e2:	2101      	movs	r1, #1
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fc42 	bl	8007a6e <stts751_pin_event_route_set>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 80071f0:	f04f 33ff 	mov.w	r3, #4294967295
 80071f4:	e020      	b.n	8007238 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80071fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	331c      	adds	r3, #28
 8007202:	2103      	movs	r1, #3
 8007204:	4618      	mov	r0, r3
 8007206:	f000 fbaa 	bl	800795e <stts751_resolution_set>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8007210:	f04f 33ff 	mov.w	r3, #4294967295
 8007214:	e010      	b.n	8007238 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	331c      	adds	r3, #28
 800721a:	2180      	movs	r1, #128	; 0x80
 800721c:	4618      	mov	r0, r3
 800721e:	f000 facb 	bl	80077b8 <stts751_temp_data_rate_set>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 8007228:	f04f 33ff 	mov.w	r3, #4294967295
 800722c:	e004      	b.n	8007238 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return STTS751_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <STTS751_DeInit>:
 * @brief  Deinitialize the STTS751 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800724e:	2b01      	cmp	r3, #1
 8007250:	d108      	bne.n	8007264 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f870 	bl	8007338 <STTS751_TEMP_Disable>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 800725e:	f04f 33ff 	mov.w	r3, #4294967295
 8007262:	e004      	b.n	800726e <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return STTS751_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <STTS751_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b084      	sub	sp, #16
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	331c      	adds	r3, #28
 8007284:	f107 020c 	add.w	r2, r7, #12
 8007288:	4611      	mov	r1, r2
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fc15 	bl	8007aba <stts751_device_id_get>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 8007296:	f04f 33ff 	mov.w	r3, #4294967295
 800729a:	e003      	b.n	80072a4 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 800729c:	7b7a      	ldrb	r2, [r7, #13]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <STTS751_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to STTS751 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2200      	movs	r2, #0
 80072ba:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2200      	movs	r2, #0
 80072c0:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2201      	movs	r2, #1
 80072c6:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2200      	movs	r2, #0
 80072cc:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	f04f 0200 	mov.w	r2, #0
 80072d4:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80072dc:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	60da      	str	r2, [r3, #12]
  return STTS751_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <STTS751_TEMP_Enable>:
 * @brief  Enable the STTS751 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007302:	2b01      	cmp	r3, #1
 8007304:	d101      	bne.n	800730a <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	e012      	b.n	8007330 <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007310:	eeb0 0a67 	vmov.f32	s0, s15
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f8b3 	bl	8007480 <STTS751_TEMP_SetOutputDataRate>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 8007320:	f04f 33ff 	mov.w	r3, #4294967295
 8007324:	e004      	b.n	8007330 <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return STTS751_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <STTS751_TEMP_Disable>:
 * @brief  Disable the STTS751 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	e01c      	b.n	8007388 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	332c      	adds	r3, #44	; 0x2c
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f81b 	bl	8007390 <STTS751_TEMP_GetOutputDataRate>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 8007360:	f04f 33ff 	mov.w	r3, #4294967295
 8007364:	e010      	b.n	8007388 <STTS751_TEMP_Disable+0x50>
  }
  
  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	331c      	adds	r3, #28
 800736a:	2180      	movs	r1, #128	; 0x80
 800736c:	4618      	mov	r0, r3
 800736e:	f000 fa23 	bl	80077b8 <stts751_temp_data_rate_set>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 8007378:	f04f 33ff 	mov.w	r3, #4294967295
 800737c:	e004      	b.n	8007388 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return STTS751_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <STTS751_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	331c      	adds	r3, #28
 80073a2:	f107 020b 	add.w	r2, r7, #11
 80073a6:	4611      	mov	r1, r2
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 fa5b 	bl	8007864 <stts751_temp_data_rate_get>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 80073b4:	f04f 33ff 	mov.w	r3, #4294967295
 80073b8:	e05e      	b.n	8007478 <STTS751_TEMP_GetOutputDataRate+0xe8>
  }

  switch (odr_low_level)
 80073ba:	7afb      	ldrb	r3, [r7, #11]
 80073bc:	2b05      	cmp	r3, #5
 80073be:	d03d      	beq.n	800743c <STTS751_TEMP_GetOutputDataRate+0xac>
 80073c0:	2b05      	cmp	r3, #5
 80073c2:	dc0d      	bgt.n	80073e0 <STTS751_TEMP_GetOutputDataRate+0x50>
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d02a      	beq.n	800741e <STTS751_TEMP_GetOutputDataRate+0x8e>
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	dc04      	bgt.n	80073d6 <STTS751_TEMP_GetOutputDataRate+0x46>
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d01c      	beq.n	800740a <STTS751_TEMP_GetOutputDataRate+0x7a>
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d01f      	beq.n	8007414 <STTS751_TEMP_GetOutputDataRate+0x84>
 80073d4:	e04b      	b.n	800746e <STTS751_TEMP_GetOutputDataRate+0xde>
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d026      	beq.n	8007428 <STTS751_TEMP_GetOutputDataRate+0x98>
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d029      	beq.n	8007432 <STTS751_TEMP_GetOutputDataRate+0xa2>
 80073de:	e046      	b.n	800746e <STTS751_TEMP_GetOutputDataRate+0xde>
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	d03a      	beq.n	800745a <STTS751_TEMP_GetOutputDataRate+0xca>
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	dc04      	bgt.n	80073f2 <STTS751_TEMP_GetOutputDataRate+0x62>
 80073e8:	2b06      	cmp	r3, #6
 80073ea:	d02c      	beq.n	8007446 <STTS751_TEMP_GetOutputDataRate+0xb6>
 80073ec:	2b07      	cmp	r3, #7
 80073ee:	d02f      	beq.n	8007450 <STTS751_TEMP_GetOutputDataRate+0xc0>
 80073f0:	e03d      	b.n	800746e <STTS751_TEMP_GetOutputDataRate+0xde>
 80073f2:	2b80      	cmp	r3, #128	; 0x80
 80073f4:	d004      	beq.n	8007400 <STTS751_TEMP_GetOutputDataRate+0x70>
 80073f6:	2b90      	cmp	r3, #144	; 0x90
 80073f8:	d002      	beq.n	8007400 <STTS751_TEMP_GetOutputDataRate+0x70>
 80073fa:	2b09      	cmp	r3, #9
 80073fc:	d032      	beq.n	8007464 <STTS751_TEMP_GetOutputDataRate+0xd4>
 80073fe:	e036      	b.n	800746e <STTS751_TEMP_GetOutputDataRate+0xde>
  {
    case STTS751_TEMP_ODR_OFF:
	case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	f04f 0200 	mov.w	r2, #0
 8007406:	601a      	str	r2, [r3, #0]
      break;
 8007408:	e035      	b.n	8007476 <STTS751_TEMP_GetOutputDataRate+0xe6>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8007410:	601a      	str	r2, [r3, #0]
      break;
 8007412:	e030      	b.n	8007476 <STTS751_TEMP_GetOutputDataRate+0xe6>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 800741a:	601a      	str	r2, [r3, #0]
      break;
 800741c:	e02b      	b.n	8007476 <STTS751_TEMP_GetOutputDataRate+0xe6>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8007424:	601a      	str	r2, [r3, #0]
      break;
 8007426:	e026      	b.n	8007476 <STTS751_TEMP_GetOutputDataRate+0xe6>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800742e:	601a      	str	r2, [r3, #0]
      break;
 8007430:	e021      	b.n	8007476 <STTS751_TEMP_GetOutputDataRate+0xe6>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007438:	601a      	str	r2, [r3, #0]
      break;
 800743a:	e01c      	b.n	8007476 <STTS751_TEMP_GetOutputDataRate+0xe6>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007442:	601a      	str	r2, [r3, #0]
      break;
 8007444:	e017      	b.n	8007476 <STTS751_TEMP_GetOutputDataRate+0xe6>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800744c:	601a      	str	r2, [r3, #0]
      break;
 800744e:	e012      	b.n	8007476 <STTS751_TEMP_GetOutputDataRate+0xe6>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8007456:	601a      	str	r2, [r3, #0]
      break;
 8007458:	e00d      	b.n	8007476 <STTS751_TEMP_GetOutputDataRate+0xe6>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8007460:	601a      	str	r2, [r3, #0]
      break;
 8007462:	e008      	b.n	8007476 <STTS751_TEMP_GetOutputDataRate+0xe6>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800746a:	601a      	str	r2, [r3, #0]
      break;
 800746c:	e003      	b.n	8007476 <STTS751_TEMP_GetOutputDataRate+0xe6>

    default:
      ret = STTS751_ERROR;
 800746e:	f04f 33ff 	mov.w	r3, #4294967295
 8007472:	60fb      	str	r3, [r7, #12]
      break;
 8007474:	bf00      	nop
  }

  return ret;
 8007476:	68fb      	ldr	r3, [r7, #12]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <STTS751_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	331c      	adds	r3, #28
 8007490:	f107 020e 	add.w	r2, r7, #14
 8007494:	4611      	mov	r1, r2
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fa88 	bl	80079ac <stts751_resolution_get>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 80074a2:	f04f 33ff 	mov.w	r3, #4294967295
 80074a6:	e0a5      	b.n	80075f4 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if(Odr == 16.0f && res == STTS751_12bit)
 80074a8:	edd7 7a00 	vldr	s15, [r7]
 80074ac:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80074b0:	eef4 7a47 	vcmp.f32	s15, s14
 80074b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b8:	d10e      	bne.n	80074d8 <STTS751_TEMP_SetOutputDataRate+0x58>
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	2b03      	cmp	r3, #3
 80074be:	d10b      	bne.n	80074d8 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	331c      	adds	r3, #28
 80074c4:	2101      	movs	r1, #1
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fa49 	bl	800795e <stts751_resolution_set>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 80074d2:	f04f 33ff 	mov.w	r3, #4294967295
 80074d6:	e08d      	b.n	80075f4 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if(Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 80074d8:	edd7 7a00 	vldr	s15, [r7]
 80074dc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80075fc <STTS751_TEMP_SetOutputDataRate+0x17c>
 80074e0:	eef4 7a47 	vcmp.f32	s15, s14
 80074e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e8:	d111      	bne.n	800750e <STTS751_TEMP_SetOutputDataRate+0x8e>
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	2b03      	cmp	r3, #3
 80074ee:	d002      	beq.n	80074f6 <STTS751_TEMP_SetOutputDataRate+0x76>
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d10b      	bne.n	800750e <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	331c      	adds	r3, #28
 80074fa:	2100      	movs	r1, #0
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 fa2e 	bl	800795e <stts751_resolution_set>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 8007508:	f04f 33ff 	mov.w	r3, #4294967295
 800750c:	e072      	b.n	80075f4 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 800750e:	edd7 7a00 	vldr	s15, [r7]
 8007512:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007600 <STTS751_TEMP_SetOutputDataRate+0x180>
 8007516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800751a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751e:	d801      	bhi.n	8007524 <STTS751_TEMP_SetOutputDataRate+0xa4>
 8007520:	2300      	movs	r3, #0
 8007522:	e058      	b.n	80075d6 <STTS751_TEMP_SetOutputDataRate+0x156>
 8007524:	edd7 7a00 	vldr	s15, [r7]
 8007528:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800752c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007534:	d801      	bhi.n	800753a <STTS751_TEMP_SetOutputDataRate+0xba>
 8007536:	2301      	movs	r3, #1
 8007538:	e04d      	b.n	80075d6 <STTS751_TEMP_SetOutputDataRate+0x156>
 800753a:	edd7 7a00 	vldr	s15, [r7]
 800753e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8007542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754a:	d801      	bhi.n	8007550 <STTS751_TEMP_SetOutputDataRate+0xd0>
 800754c:	2302      	movs	r3, #2
 800754e:	e042      	b.n	80075d6 <STTS751_TEMP_SetOutputDataRate+0x156>
 8007550:	edd7 7a00 	vldr	s15, [r7]
 8007554:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800755c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007560:	d801      	bhi.n	8007566 <STTS751_TEMP_SetOutputDataRate+0xe6>
 8007562:	2303      	movs	r3, #3
 8007564:	e037      	b.n	80075d6 <STTS751_TEMP_SetOutputDataRate+0x156>
 8007566:	edd7 7a00 	vldr	s15, [r7]
 800756a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800756e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007576:	d801      	bhi.n	800757c <STTS751_TEMP_SetOutputDataRate+0xfc>
 8007578:	2304      	movs	r3, #4
 800757a:	e02c      	b.n	80075d6 <STTS751_TEMP_SetOutputDataRate+0x156>
 800757c:	edd7 7a00 	vldr	s15, [r7]
 8007580:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007584:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758c:	d801      	bhi.n	8007592 <STTS751_TEMP_SetOutputDataRate+0x112>
 800758e:	2305      	movs	r3, #5
 8007590:	e021      	b.n	80075d6 <STTS751_TEMP_SetOutputDataRate+0x156>
 8007592:	edd7 7a00 	vldr	s15, [r7]
 8007596:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800759a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800759e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a2:	d801      	bhi.n	80075a8 <STTS751_TEMP_SetOutputDataRate+0x128>
 80075a4:	2306      	movs	r3, #6
 80075a6:	e016      	b.n	80075d6 <STTS751_TEMP_SetOutputDataRate+0x156>
 80075a8:	edd7 7a00 	vldr	s15, [r7]
 80075ac:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80075b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b8:	d801      	bhi.n	80075be <STTS751_TEMP_SetOutputDataRate+0x13e>
 80075ba:	2307      	movs	r3, #7
 80075bc:	e00b      	b.n	80075d6 <STTS751_TEMP_SetOutputDataRate+0x156>
 80075be:	edd7 7a00 	vldr	s15, [r7]
 80075c2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80075c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ce:	d801      	bhi.n	80075d4 <STTS751_TEMP_SetOutputDataRate+0x154>
 80075d0:	2308      	movs	r3, #8
 80075d2:	e000      	b.n	80075d6 <STTS751_TEMP_SetOutputDataRate+0x156>
 80075d4:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 80075d6:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 4.0f   ) ? STTS751_TEMP_ODR_4Hz
          : (Odr <= 8.0f   ) ? STTS751_TEMP_ODR_8Hz
          : (Odr <= 16.0f  ) ? STTS751_TEMP_ODR_16Hz
          :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	331c      	adds	r3, #28
 80075dc:	7bfa      	ldrb	r2, [r7, #15]
 80075de:	4611      	mov	r1, r2
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 f8e9 	bl	80077b8 <stts751_temp_data_rate_set>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 80075ec:	f04f 33ff 	mov.w	r3, #4294967295
 80075f0:	e000      	b.n	80075f4 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	42000000 	.word	0x42000000
 8007600:	3d800000 	.word	0x3d800000

08007604 <STTS751_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	331c      	adds	r3, #28
 8007612:	f107 020e 	add.w	r2, r7, #14
 8007616:	4611      	mov	r1, r2
 8007618:	4618      	mov	r0, r3
 800761a:	f000 f9ff 	bl	8007a1c <stts751_temperature_raw_get>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 8007624:	f04f 33ff 	mov.w	r3, #4294967295
 8007628:	e00a      	b.n	8007640 <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 800762a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800762e:	4618      	mov	r0, r3
 8007630:	f000 f8a8 	bl	8007784 <stts751_from_lsb_to_celsius>
 8007634:	eef0 7a40 	vmov.f32	s15, s0
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007648:	b590      	push	{r4, r7, lr}
 800764a:	b089      	sub	sp, #36	; 0x24
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	607a      	str	r2, [r7, #4]
 8007652:	461a      	mov	r2, r3
 8007654:	460b      	mov	r3, r1
 8007656:	72fb      	strb	r3, [r7, #11]
 8007658:	4613      	mov	r3, r2
 800765a:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d11f      	bne.n	80076ac <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800766c:	2300      	movs	r3, #0
 800766e:	83fb      	strh	r3, [r7, #30]
 8007670:	e018      	b.n	80076a4 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	695c      	ldr	r4, [r3, #20]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	7b1b      	ldrb	r3, [r3, #12]
 800767a:	b298      	uxth	r0, r3
 800767c:	7afb      	ldrb	r3, [r7, #11]
 800767e:	b29a      	uxth	r2, r3
 8007680:	8bfb      	ldrh	r3, [r7, #30]
 8007682:	4413      	add	r3, r2
 8007684:	b299      	uxth	r1, r3
 8007686:	8bfb      	ldrh	r3, [r7, #30]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	441a      	add	r2, r3
 800768c:	2301      	movs	r3, #1
 800768e:	47a0      	blx	r4
 8007690:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d002      	beq.n	800769e <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8007698:	f04f 33ff 	mov.w	r3, #4294967295
 800769c:	e007      	b.n	80076ae <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800769e:	8bfb      	ldrh	r3, [r7, #30]
 80076a0:	3301      	adds	r3, #1
 80076a2:	83fb      	strh	r3, [r7, #30]
 80076a4:	8bfa      	ldrh	r2, [r7, #30]
 80076a6:	893b      	ldrh	r3, [r7, #8]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d3e2      	bcc.n	8007672 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 80076ac:	69bb      	ldr	r3, [r7, #24]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3724      	adds	r7, #36	; 0x24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd90      	pop	{r4, r7, pc}

080076b6 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80076b6:	b590      	push	{r4, r7, lr}
 80076b8:	b089      	sub	sp, #36	; 0x24
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	607a      	str	r2, [r7, #4]
 80076c0:	461a      	mov	r2, r3
 80076c2:	460b      	mov	r3, r1
 80076c4:	72fb      	strb	r3, [r7, #11]
 80076c6:	4613      	mov	r3, r2
 80076c8:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d11f      	bne.n	800771a <WriteRegWrap+0x64>
  {
	for (i = 0; i < Length; i++)
 80076da:	2300      	movs	r3, #0
 80076dc:	83fb      	strh	r3, [r7, #30]
 80076de:	e018      	b.n	8007712 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	691c      	ldr	r4, [r3, #16]
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	7b1b      	ldrb	r3, [r3, #12]
 80076e8:	b298      	uxth	r0, r3
 80076ea:	7afb      	ldrb	r3, [r7, #11]
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	8bfb      	ldrh	r3, [r7, #30]
 80076f0:	4413      	add	r3, r2
 80076f2:	b299      	uxth	r1, r3
 80076f4:	8bfb      	ldrh	r3, [r7, #30]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	441a      	add	r2, r3
 80076fa:	2301      	movs	r3, #1
 80076fc:	47a0      	blx	r4
 80076fe:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 8007706:	f04f 33ff 	mov.w	r3, #4294967295
 800770a:	e007      	b.n	800771c <WriteRegWrap+0x66>
	for (i = 0; i < Length; i++)
 800770c:	8bfb      	ldrh	r3, [r7, #30]
 800770e:	3301      	adds	r3, #1
 8007710:	83fb      	strh	r3, [r7, #30]
 8007712:	8bfa      	ldrh	r2, [r7, #30]
 8007714:	893b      	ldrh	r3, [r7, #8]
 8007716:	429a      	cmp	r2, r3
 8007718:	d3e2      	bcc.n	80076e0 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800771a:	69bb      	ldr	r3, [r7, #24]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3724      	adds	r7, #36	; 0x24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd90      	pop	{r4, r7, pc}

08007724 <stts751_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8007724:	b590      	push	{r4, r7, lr}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	607a      	str	r2, [r7, #4]
 800772e:	461a      	mov	r2, r3
 8007730:	460b      	mov	r3, r1
 8007732:	72fb      	strb	r3, [r7, #11]
 8007734:	4613      	mov	r3, r2
 8007736:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	685c      	ldr	r4, [r3, #4]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6898      	ldr	r0, [r3, #8]
 8007740:	893b      	ldrh	r3, [r7, #8]
 8007742:	7af9      	ldrb	r1, [r7, #11]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	47a0      	blx	r4
 8007748:	6178      	str	r0, [r7, #20]
  return ret;
 800774a:	697b      	ldr	r3, [r7, #20]
}
 800774c:	4618      	mov	r0, r3
 800774e:	371c      	adds	r7, #28
 8007750:	46bd      	mov	sp, r7
 8007752:	bd90      	pop	{r4, r7, pc}

08007754 <stts751_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8007754:	b590      	push	{r4, r7, lr}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	607a      	str	r2, [r7, #4]
 800775e:	461a      	mov	r2, r3
 8007760:	460b      	mov	r3, r1
 8007762:	72fb      	strb	r3, [r7, #11]
 8007764:	4613      	mov	r3, r2
 8007766:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681c      	ldr	r4, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6898      	ldr	r0, [r3, #8]
 8007770:	893b      	ldrh	r3, [r7, #8]
 8007772:	7af9      	ldrb	r1, [r7, #11]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	47a0      	blx	r4
 8007778:	6178      	str	r0, [r7, #20]
  return ret;
 800777a:	697b      	ldr	r3, [r7, #20]
}
 800777c:	4618      	mov	r0, r3
 800777e:	371c      	adds	r7, #28
 8007780:	46bd      	mov	sp, r7
 8007782:	bd90      	pop	{r4, r7, pc}

08007784 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float stts751_from_lsb_to_celsius(int16_t lsb)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	4603      	mov	r3, r0
 800778c:	80fb      	strh	r3, [r7, #6]
  return ((float)lsb) / 256.0f;
 800778e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800779a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80077b4 <stts751_from_lsb_to_celsius+0x30>
 800779e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80077a2:	eef0 7a66 	vmov.f32	s15, s13
}
 80077a6:	eeb0 0a67 	vmov.f32	s0, s15
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	43800000 	.word	0x43800000

080077b8 <stts751_temp_data_rate_set>:
  * @param  val      change the sensor data rate
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx, stts751_odr_t val)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 80077c4:	23aa      	movs	r3, #170	; 0xaa
 80077c6:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 80077c8:	f107 020c 	add.w	r2, r7, #12
 80077cc:	2301      	movs	r3, #1
 80077ce:	2104      	movs	r1, #4
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7ff ffa7 	bl	8007724 <stts751_read_reg>
 80077d6:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&conversion_rate, 1);
  if (ret == 0) {
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10f      	bne.n	80077fe <stts751_temp_data_rate_set+0x46>
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 80077de:	78fb      	ldrb	r3, [r7, #3]
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	7b3b      	ldrb	r3, [r7, #12]
 80077e8:	f362 0303 	bfi	r3, r2, #0, #4
 80077ec:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 80077ee:	f107 020c 	add.w	r2, r7, #12
 80077f2:	2301      	movs	r3, #1
 80077f4:	2104      	movs	r1, #4
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7ff ffac 	bl	8007754 <stts751_write_reg>
 80077fc:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&conversion_rate, 1);
  }
  if (ret == 0) {
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d107      	bne.n	8007814 <stts751_temp_data_rate_set+0x5c>
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8007804:	f107 0210 	add.w	r2, r7, #16
 8007808:	2301      	movs	r3, #1
 800780a:	2103      	movs	r1, #3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff ff89 	bl	8007724 <stts751_read_reg>
 8007812:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&configuration, 1);
  }
  if (ret == 0) {
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d111      	bne.n	800783e <stts751_temp_data_rate_set+0x86>
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	09db      	lsrs	r3, r3, #7
 800781e:	b2db      	uxtb	r3, r3
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	b2da      	uxtb	r2, r3
 8007826:	7c3b      	ldrb	r3, [r7, #16]
 8007828:	f362 1386 	bfi	r3, r2, #6, #1
 800782c:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 800782e:	f107 0210 	add.w	r2, r7, #16
 8007832:	2301      	movs	r3, #1
 8007834:	2103      	movs	r1, #3
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7ff ff8c 	bl	8007754 <stts751_write_reg>
 800783c:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&configuration, 1);
  }
  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT)) {
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10a      	bne.n	800785a <stts751_temp_data_rate_set+0xa2>
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	2b90      	cmp	r3, #144	; 0x90
 8007848:	d107      	bne.n	800785a <stts751_temp_data_rate_set+0xa2>
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 800784a:	f107 020b 	add.w	r2, r7, #11
 800784e:	2301      	movs	r3, #1
 8007850:	210f      	movs	r1, #15
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7ff ff7e 	bl	8007754 <stts751_write_reg>
 8007858:	6178      	str	r0, [r7, #20]
  }
  return ret;
 800785a:	697b      	ldr	r3, [r7, #20]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3718      	adds	r7, #24
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <stts751_temp_data_rate_get>:
  * @param  val      Get the sensor data rate
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx, stts751_odr_t *val)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 800786e:	f107 0210 	add.w	r2, r7, #16
 8007872:	2301      	movs	r3, #1
 8007874:	2104      	movs	r1, #4
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7ff ff54 	bl	8007724 <stts751_read_reg>
 800787c:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&conversion_rate, 1);
  if (ret == 0) {
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d107      	bne.n	8007894 <stts751_temp_data_rate_get+0x30>
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8007884:	f107 020c 	add.w	r2, r7, #12
 8007888:	2301      	movs	r3, #1
 800788a:	2103      	movs	r1, #3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff ff49 	bl	8007724 <stts751_read_reg>
 8007892:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&configuration, 1);
  }
  switch ( (configuration.stop << 7) + conversion_rate.conv) {
 8007894:	7b3b      	ldrb	r3, [r7, #12]
 8007896:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800789a:	b2db      	uxtb	r3, r3
 800789c:	01db      	lsls	r3, r3, #7
 800789e:	7c3a      	ldrb	r2, [r7, #16]
 80078a0:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80078a4:	b2d2      	uxtb	r2, r2
 80078a6:	4413      	add	r3, r2
 80078a8:	2b05      	cmp	r3, #5
 80078aa:	d03b      	beq.n	8007924 <stts751_temp_data_rate_get+0xc0>
 80078ac:	2b05      	cmp	r3, #5
 80078ae:	dc0d      	bgt.n	80078cc <stts751_temp_data_rate_get+0x68>
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d02b      	beq.n	800790c <stts751_temp_data_rate_get+0xa8>
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	dc04      	bgt.n	80078c2 <stts751_temp_data_rate_get+0x5e>
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d01f      	beq.n	80078fc <stts751_temp_data_rate_get+0x98>
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d021      	beq.n	8007904 <stts751_temp_data_rate_get+0xa0>
 80078c0:	e044      	b.n	800794c <stts751_temp_data_rate_get+0xe8>
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d026      	beq.n	8007914 <stts751_temp_data_rate_get+0xb0>
 80078c6:	2b04      	cmp	r3, #4
 80078c8:	d028      	beq.n	800791c <stts751_temp_data_rate_get+0xb8>
 80078ca:	e03f      	b.n	800794c <stts751_temp_data_rate_get+0xe8>
 80078cc:	2b08      	cmp	r3, #8
 80078ce:	d035      	beq.n	800793c <stts751_temp_data_rate_get+0xd8>
 80078d0:	2b08      	cmp	r3, #8
 80078d2:	dc04      	bgt.n	80078de <stts751_temp_data_rate_get+0x7a>
 80078d4:	2b06      	cmp	r3, #6
 80078d6:	d029      	beq.n	800792c <stts751_temp_data_rate_get+0xc8>
 80078d8:	2b07      	cmp	r3, #7
 80078da:	d02b      	beq.n	8007934 <stts751_temp_data_rate_get+0xd0>
 80078dc:	e036      	b.n	800794c <stts751_temp_data_rate_get+0xe8>
 80078de:	2b80      	cmp	r3, #128	; 0x80
 80078e0:	d004      	beq.n	80078ec <stts751_temp_data_rate_get+0x88>
 80078e2:	2b90      	cmp	r3, #144	; 0x90
 80078e4:	d006      	beq.n	80078f4 <stts751_temp_data_rate_get+0x90>
 80078e6:	2b09      	cmp	r3, #9
 80078e8:	d02c      	beq.n	8007944 <stts751_temp_data_rate_get+0xe0>
 80078ea:	e02f      	b.n	800794c <stts751_temp_data_rate_get+0xe8>
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2280      	movs	r2, #128	; 0x80
 80078f0:	701a      	strb	r2, [r3, #0]
      break;
 80078f2:	e02f      	b.n	8007954 <stts751_temp_data_rate_get+0xf0>
    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2290      	movs	r2, #144	; 0x90
 80078f8:	701a      	strb	r2, [r3, #0]
      break;
 80078fa:	e02b      	b.n	8007954 <stts751_temp_data_rate_get+0xf0>
    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2200      	movs	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]
      break;
 8007902:	e027      	b.n	8007954 <stts751_temp_data_rate_get+0xf0>
    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2201      	movs	r2, #1
 8007908:	701a      	strb	r2, [r3, #0]
      break;
 800790a:	e023      	b.n	8007954 <stts751_temp_data_rate_get+0xf0>
     case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2202      	movs	r2, #2
 8007910:	701a      	strb	r2, [r3, #0]
      break;
 8007912:	e01f      	b.n	8007954 <stts751_temp_data_rate_get+0xf0>
    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2203      	movs	r2, #3
 8007918:	701a      	strb	r2, [r3, #0]
      break;
 800791a:	e01b      	b.n	8007954 <stts751_temp_data_rate_get+0xf0>
    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2204      	movs	r2, #4
 8007920:	701a      	strb	r2, [r3, #0]
      break;
 8007922:	e017      	b.n	8007954 <stts751_temp_data_rate_get+0xf0>
    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	2205      	movs	r2, #5
 8007928:	701a      	strb	r2, [r3, #0]
      break;
 800792a:	e013      	b.n	8007954 <stts751_temp_data_rate_get+0xf0>
     case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2206      	movs	r2, #6
 8007930:	701a      	strb	r2, [r3, #0]
      break;
 8007932:	e00f      	b.n	8007954 <stts751_temp_data_rate_get+0xf0>
    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	2207      	movs	r2, #7
 8007938:	701a      	strb	r2, [r3, #0]
      break;
 800793a:	e00b      	b.n	8007954 <stts751_temp_data_rate_get+0xf0>
    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2208      	movs	r2, #8
 8007940:	701a      	strb	r2, [r3, #0]
      break;
 8007942:	e007      	b.n	8007954 <stts751_temp_data_rate_get+0xf0>
    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2209      	movs	r2, #9
 8007948:	701a      	strb	r2, [r3, #0]
      break;
 800794a:	e003      	b.n	8007954 <stts751_temp_data_rate_get+0xf0>
    default:
      *val = STTS751_TEMP_ODR_OFF;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2280      	movs	r2, #128	; 0x80
 8007950:	701a      	strb	r2, [r3, #0]
      break;
 8007952:	bf00      	nop
  }
  return ret;
 8007954:	697b      	ldr	r3, [r7, #20]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	460b      	mov	r3, r1
 8007968:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,(uint8_t*) &reg, 1);
 800796a:	f107 0208 	add.w	r2, r7, #8
 800796e:	2301      	movs	r3, #1
 8007970:	2103      	movs	r1, #3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff fed6 	bl	8007724 <stts751_read_reg>
 8007978:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10f      	bne.n	80079a0 <stts751_resolution_set+0x42>
    reg.tres = (uint8_t) val;
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	f003 0303 	and.w	r3, r3, #3
 8007986:	b2da      	uxtb	r2, r3
 8007988:	7a3b      	ldrb	r3, [r7, #8]
 800798a:	f362 0383 	bfi	r3, r2, #2, #2
 800798e:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,(uint8_t*) &reg, 1);
 8007990:	f107 0208 	add.w	r2, r7, #8
 8007994:	2301      	movs	r3, #1
 8007996:	2103      	movs	r1, #3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7ff fedb 	bl	8007754 <stts751_write_reg>
 800799e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80079a0:	68fb      	ldr	r3, [r7, #12]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,(uint8_t*) &reg, 1);
 80079b6:	f107 0208 	add.w	r2, r7, #8
 80079ba:	2301      	movs	r3, #1
 80079bc:	2103      	movs	r1, #3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7ff feb0 	bl	8007724 <stts751_read_reg>
 80079c4:	60f8      	str	r0, [r7, #12]

  switch (reg.tres) {
 80079c6:	7a3b      	ldrb	r3, [r7, #8]
 80079c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d81a      	bhi.n	8007a08 <stts751_resolution_get+0x5c>
 80079d2:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <stts751_resolution_get+0x2c>)
 80079d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d8:	080079f1 	.word	0x080079f1
 80079dc:	080079f9 	.word	0x080079f9
 80079e0:	080079e9 	.word	0x080079e9
 80079e4:	08007a01 	.word	0x08007a01
    case STTS751_9bit:
      *val = STTS751_9bit;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2202      	movs	r2, #2
 80079ec:	701a      	strb	r2, [r3, #0]
      break;
 80079ee:	e00f      	b.n	8007a10 <stts751_resolution_get+0x64>
    case STTS751_10bit:
      *val = STTS751_10bit;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2200      	movs	r2, #0
 80079f4:	701a      	strb	r2, [r3, #0]
      break;
 80079f6:	e00b      	b.n	8007a10 <stts751_resolution_get+0x64>
    case STTS751_11bit:
      *val = STTS751_11bit;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2201      	movs	r2, #1
 80079fc:	701a      	strb	r2, [r3, #0]
      break;
 80079fe:	e007      	b.n	8007a10 <stts751_resolution_get+0x64>
    case STTS751_12bit:
      *val = STTS751_12bit;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2203      	movs	r2, #3
 8007a04:	701a      	strb	r2, [r3, #0]
      break;
 8007a06:	e003      	b.n	8007a10 <stts751_resolution_get+0x64>
    default:
      *val = STTS751_9bit;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	701a      	strb	r2, [r3, #0]
      break;
 8007a0e:	bf00      	nop
  }
  return ret;
 8007a10:	68fb      	ldr	r3, [r7, #12]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop

08007a1c <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint16_t temperature;
  uint8_t temperature_low;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8007a26:	f107 020a 	add.w	r2, r7, #10
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7ff fe78 	bl	8007724 <stts751_read_reg>
 8007a34:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&temperature, 1);
  if (ret == 0) {
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d113      	bne.n	8007a64 <stts751_temperature_raw_get+0x48>
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8007a3c:	f107 0209 	add.w	r2, r7, #9
 8007a40:	2301      	movs	r3, #1
 8007a42:	2102      	movs	r1, #2
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7ff fe6d 	bl	8007724 <stts751_read_reg>
 8007a4a:	60f8      	str	r0, [r7, #12]
                           &temperature_low, 1);

    temperature  = (temperature << 8) + temperature_low;
 8007a4c:	897b      	ldrh	r3, [r7, #10]
 8007a4e:	021b      	lsls	r3, r3, #8
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	7a7b      	ldrb	r3, [r7, #9]
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	4413      	add	r3, r2
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	817b      	strh	r3, [r7, #10]
    *buff = (int16_t)temperature;
 8007a5c:	897b      	ldrh	r3, [r7, #10]
 8007a5e:	b21a      	sxth	r2, r3
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 8007a64:	68fb      	ldr	r3, [r7, #12]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	460b      	mov	r3, r1
 8007a78:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,(uint8_t*)&reg, 1);
 8007a7a:	f107 0208 	add.w	r2, r7, #8
 8007a7e:	2301      	movs	r3, #1
 8007a80:	2103      	movs	r1, #3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7ff fe4e 	bl	8007724 <stts751_read_reg>
 8007a88:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10f      	bne.n	8007ab0 <stts751_pin_event_route_set+0x42>
    reg.mask1 = val;
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	7a3b      	ldrb	r3, [r7, #8]
 8007a9a:	f362 13c7 	bfi	r3, r2, #7, #1
 8007a9e:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t*)&reg, 1);
 8007aa0:	f107 0208 	add.w	r2, r7, #8
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	2103      	movs	r1, #3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7ff fe53 	bl	8007754 <stts751_write_reg>
 8007aae:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	21fd      	movs	r1, #253	; 0xfd
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff fe2a 	bl	8007724 <stts751_read_reg>
 8007ad0:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&buff->product_id, 1);
  if (ret == 0){
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d107      	bne.n	8007ae8 <stts751_device_id_get+0x2e>
  ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	2301      	movs	r3, #1
 8007ade:	21fe      	movs	r1, #254	; 0xfe
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff fe1f 	bl	8007724 <stts751_read_reg>
 8007ae6:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&buff->manufacturer_id, 1);
  }
  if (ret == 0){
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d107      	bne.n	8007afe <stts751_device_id_get+0x44>
  ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	1c9a      	adds	r2, r3, #2
 8007af2:	2301      	movs	r3, #1
 8007af4:	21ff      	movs	r1, #255	; 0xff
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff fe14 	bl	8007724 <stts751_read_reg>
 8007afc:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&buff->revision_id, 1);
  }
  return ret;
 8007afe:	68fb      	ldr	r3, [r7, #12]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <IKS01A3_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 *         - ENV_TEMPERATURE for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08a      	sub	sp, #40	; 0x28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007b12:	2300      	movs	r3, #0
 8007b14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8007b16:	2301      	movs	r3, #1
 8007b18:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	61bb      	str	r3, [r7, #24]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d036      	beq.n	8007b92 <IKS01A3_ENV_SENSOR_Init+0x8a>
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d302      	bcc.n	8007b2e <IKS01A3_ENV_SENSOR_Init+0x26>
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d064      	beq.n	8007bf6 <IKS01A3_ENV_SENSOR_Init+0xee>
 8007b2c:	e095      	b.n	8007c5a <IKS01A3_ENV_SENSOR_Init+0x152>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8007b2e:	6838      	ldr	r0, [r7, #0]
 8007b30:	f000 f9bc 	bl	8007eac <HTS221_0_Probe>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <IKS01A3_ENV_SENSOR_Init+0x38>
      {
        return BSP_ERROR_NO_INIT;
 8007b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3e:	e0cc      	b.n	8007cda <IKS01A3_ENV_SENSOR_Init+0x1d2>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007b40:	4a68      	ldr	r2, [pc, #416]	; (8007ce4 <IKS01A3_ENV_SENSOR_Init+0x1dc>)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	4967      	ldr	r1, [pc, #412]	; (8007ce8 <IKS01A3_ENV_SENSOR_Init+0x1e0>)
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007b52:	f107 0108 	add.w	r1, r7, #8
 8007b56:	4610      	mov	r0, r2
 8007b58:	4798      	blx	r3
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <IKS01A3_ENV_SENSOR_Init+0x5e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007b60:	f06f 0306 	mvn.w	r3, #6
 8007b64:	e0b9      	b.n	8007cda <IKS01A3_ENV_SENSOR_Init+0x1d2>
      }
      if (cap.Temperature == 1U)
 8007b66:	7a3b      	ldrb	r3, [r7, #8]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d103      	bne.n	8007b74 <IKS01A3_ENV_SENSOR_Init+0x6c>
      {
        component_functions |= ENV_TEMPERATURE;
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	f043 0301 	orr.w	r3, r3, #1
 8007b72:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007b74:	7abb      	ldrb	r3, [r7, #10]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d103      	bne.n	8007b82 <IKS01A3_ENV_SENSOR_Init+0x7a>
      {
        component_functions |= ENV_HUMIDITY;
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	f043 0304 	orr.w	r3, r3, #4
 8007b80:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007b82:	7a7b      	ldrb	r3, [r7, #9]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d16c      	bne.n	8007c62 <IKS01A3_ENV_SENSOR_Init+0x15a>
      {
        component_functions |= ENV_PRESSURE;
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	f043 0302 	orr.w	r3, r3, #2
 8007b8e:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007b90:	e067      	b.n	8007c62 <IKS01A3_ENV_SENSOR_Init+0x15a>
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8007b92:	6838      	ldr	r0, [r7, #0]
 8007b94:	f000 fa44 	bl	8008020 <LPS22HH_0_Probe>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d002      	beq.n	8007ba4 <IKS01A3_ENV_SENSOR_Init+0x9c>
      {
        return BSP_ERROR_NO_INIT;
 8007b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba2:	e09a      	b.n	8007cda <IKS01A3_ENV_SENSOR_Init+0x1d2>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007ba4:	4a4f      	ldr	r2, [pc, #316]	; (8007ce4 <IKS01A3_ENV_SENSOR_Init+0x1dc>)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	494e      	ldr	r1, [pc, #312]	; (8007ce8 <IKS01A3_ENV_SENSOR_Init+0x1e0>)
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007bb6:	f107 0108 	add.w	r1, r7, #8
 8007bba:	4610      	mov	r0, r2
 8007bbc:	4798      	blx	r3
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <IKS01A3_ENV_SENSOR_Init+0xc2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007bc4:	f06f 0306 	mvn.w	r3, #6
 8007bc8:	e087      	b.n	8007cda <IKS01A3_ENV_SENSOR_Init+0x1d2>
      }
      if (cap.Temperature == 1U)
 8007bca:	7a3b      	ldrb	r3, [r7, #8]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d103      	bne.n	8007bd8 <IKS01A3_ENV_SENSOR_Init+0xd0>
      {
        component_functions |= ENV_TEMPERATURE;
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	f043 0301 	orr.w	r3, r3, #1
 8007bd6:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007bd8:	7abb      	ldrb	r3, [r7, #10]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d103      	bne.n	8007be6 <IKS01A3_ENV_SENSOR_Init+0xde>
      {
        component_functions |= ENV_HUMIDITY;
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	f043 0304 	orr.w	r3, r3, #4
 8007be4:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007be6:	7a7b      	ldrb	r3, [r7, #9]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d13c      	bne.n	8007c66 <IKS01A3_ENV_SENSOR_Init+0x15e>
      {
        component_functions |= ENV_PRESSURE;
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	f043 0302 	orr.w	r3, r3, #2
 8007bf2:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007bf4:	e037      	b.n	8007c66 <IKS01A3_ENV_SENSOR_Init+0x15e>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8007bf6:	6838      	ldr	r0, [r7, #0]
 8007bf8:	f000 face 	bl	8008198 <STTS751_0_Probe>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <IKS01A3_ENV_SENSOR_Init+0x100>
      {
        return BSP_ERROR_NO_INIT;
 8007c02:	f04f 33ff 	mov.w	r3, #4294967295
 8007c06:	e068      	b.n	8007cda <IKS01A3_ENV_SENSOR_Init+0x1d2>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007c08:	4a36      	ldr	r2, [pc, #216]	; (8007ce4 <IKS01A3_ENV_SENSOR_Init+0x1dc>)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	4935      	ldr	r1, [pc, #212]	; (8007ce8 <IKS01A3_ENV_SENSOR_Init+0x1e0>)
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c1a:	f107 0108 	add.w	r1, r7, #8
 8007c1e:	4610      	mov	r0, r2
 8007c20:	4798      	blx	r3
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <IKS01A3_ENV_SENSOR_Init+0x126>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007c28:	f06f 0306 	mvn.w	r3, #6
 8007c2c:	e055      	b.n	8007cda <IKS01A3_ENV_SENSOR_Init+0x1d2>
      }
      if (cap.Temperature == 1U)
 8007c2e:	7a3b      	ldrb	r3, [r7, #8]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d103      	bne.n	8007c3c <IKS01A3_ENV_SENSOR_Init+0x134>
      {
        component_functions |= ENV_TEMPERATURE;
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	f043 0301 	orr.w	r3, r3, #1
 8007c3a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007c3c:	7abb      	ldrb	r3, [r7, #10]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d103      	bne.n	8007c4a <IKS01A3_ENV_SENSOR_Init+0x142>
      {
        component_functions |= ENV_HUMIDITY;
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	f043 0304 	orr.w	r3, r3, #4
 8007c48:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007c4a:	7a7b      	ldrb	r3, [r7, #9]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d10c      	bne.n	8007c6a <IKS01A3_ENV_SENSOR_Init+0x162>
      {
        component_functions |= ENV_PRESSURE;
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	f043 0302 	orr.w	r3, r3, #2
 8007c56:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007c58:	e007      	b.n	8007c6a <IKS01A3_ENV_SENSOR_Init+0x162>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007c5a:	f06f 0301 	mvn.w	r3, #1
 8007c5e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007c60:	e004      	b.n	8007c6c <IKS01A3_ENV_SENSOR_Init+0x164>
      break;
 8007c62:	bf00      	nop
 8007c64:	e002      	b.n	8007c6c <IKS01A3_ENV_SENSOR_Init+0x164>
      break;
 8007c66:	bf00      	nop
 8007c68:	e000      	b.n	8007c6c <IKS01A3_ENV_SENSOR_Init+0x164>
      break;
 8007c6a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d001      	beq.n	8007c76 <IKS01A3_ENV_SENSOR_Init+0x16e>
  {
    return ret;
 8007c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c74:	e031      	b.n	8007cda <IKS01A3_ENV_SENSOR_Init+0x1d2>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8007c76:	2300      	movs	r3, #0
 8007c78:	61fb      	str	r3, [r7, #28]
 8007c7a:	e02a      	b.n	8007cd2 <IKS01A3_ENV_SENSOR_Init+0x1ca>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	4013      	ands	r3, r2
 8007c82:	6a3a      	ldr	r2, [r7, #32]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d11e      	bne.n	8007cc6 <IKS01A3_ENV_SENSOR_Init+0x1be>
 8007c88:	69ba      	ldr	r2, [r7, #24]
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	6a3a      	ldr	r2, [r7, #32]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d118      	bne.n	8007cc6 <IKS01A3_ENV_SENSOR_Init+0x1be>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007c94:	4a15      	ldr	r2, [pc, #84]	; (8007cec <IKS01A3_ENV_SENSOR_Init+0x1e4>)
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c9c:	4814      	ldr	r0, [pc, #80]	; (8007cf0 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	005b      	lsls	r3, r3, #1
 8007ca4:	4413      	add	r3, r2
 8007ca6:	440b      	add	r3, r1
 8007ca8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	490e      	ldr	r1, [pc, #56]	; (8007ce8 <IKS01A3_ENV_SENSOR_Init+0x1e0>)
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	4798      	blx	r3
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <IKS01A3_ENV_SENSOR_Init+0x1be>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8007cc0:	f06f 0304 	mvn.w	r3, #4
 8007cc4:	e009      	b.n	8007cda <IKS01A3_ENV_SENSOR_Init+0x1d2>
      }
    }
    function = function << 1;
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	61fb      	str	r3, [r7, #28]
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d9d1      	bls.n	8007c7c <IKS01A3_ENV_SENSOR_Init+0x174>
  }

  return ret;
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3728      	adds	r7, #40	; 0x28
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20000280 	.word	0x20000280
 8007ce8:	2000948c 	.word	0x2000948c
 8007cec:	20000178 	.word	0x20000178
 8007cf0:	2000025c 	.word	0x2000025c

08007cf4 <IKS01A3_ENV_SENSOR_GetCapabilities>:
 * @param  Instance Environmental sensor instance
 * @param  Capabilities pointer to Environmental sensor capabilities
 * @retval BSP status
 */
int32_t IKS01A3_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_ENV_SENSOR_Capabilities_t *Capabilities)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d903      	bls.n	8007d0c <IKS01A3_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007d04:	f06f 0301 	mvn.w	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
 8007d0a:	e014      	b.n	8007d36 <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8007d0c:	4a0c      	ldr	r2, [pc, #48]	; (8007d40 <IKS01A3_ENV_SENSOR_GetCapabilities+0x4c>)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	490b      	ldr	r1, [pc, #44]	; (8007d44 <IKS01A3_ENV_SENSOR_GetCapabilities+0x50>)
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	4610      	mov	r0, r2
 8007d22:	4798      	blx	r3
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <IKS01A3_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007d2a:	f06f 0306 	mvn.w	r3, #6
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	e001      	b.n	8007d36 <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8007d32:	2300      	movs	r3, #0
 8007d34:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007d36:	68fb      	ldr	r3, [r7, #12]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	20000280 	.word	0x20000280
 8007d44:	2000948c 	.word	0x2000948c

08007d48 <IKS01A3_ENV_SENSOR_ReadID>:
 * @param  Instance environmental sensor instance to be used
 * @param  Id WHOAMI value
 * @retval BSP status
 */
int32_t IKS01A3_ENV_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d903      	bls.n	8007d60 <IKS01A3_ENV_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007d58:	f06f 0301 	mvn.w	r3, #1
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	e014      	b.n	8007d8a <IKS01A3_ENV_SENSOR_ReadID+0x42>
  }
  else if (EnvDrv[Instance]->ReadID(EnvCompObj[Instance], Id) != BSP_ERROR_NONE)
 8007d60:	4a0c      	ldr	r2, [pc, #48]	; (8007d94 <IKS01A3_ENV_SENSOR_ReadID+0x4c>)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	490b      	ldr	r1, [pc, #44]	; (8007d98 <IKS01A3_ENV_SENSOR_ReadID+0x50>)
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	4610      	mov	r0, r2
 8007d76:	4798      	blx	r3
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <IKS01A3_ENV_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007d7e:	f06f 0306 	mvn.w	r3, #6
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	e001      	b.n	8007d8a <IKS01A3_ENV_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	20000280 	.word	0x20000280
 8007d98:	2000948c 	.word	0x2000948c

08007d9c <IKS01A3_ENV_SENSOR_GetOutputDataRate>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Odr pointer to Output Data Rate read value
 * @retval BSP status
 */
int32_t IKS01A3_ENV_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d903      	bls.n	8007db6 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007dae:	f06f 0301 	mvn.w	r3, #1
 8007db2:	617b      	str	r3, [r7, #20]
 8007db4:	e029      	b.n	8007e0a <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007db6:	4a17      	ldr	r2, [pc, #92]	; (8007e14 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x78>)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d11d      	bne.n	8007e04 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8007dc8:	4a13      	ldr	r2, [pc, #76]	; (8007e18 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x7c>)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007dd0:	4812      	ldr	r0, [pc, #72]	; (8007e1c <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x80>)
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	4413      	add	r3, r2
 8007dda:	440b      	add	r3, r1
 8007ddc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	490f      	ldr	r1, [pc, #60]	; (8007e20 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x84>)
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007dea:	6879      	ldr	r1, [r7, #4]
 8007dec:	4610      	mov	r0, r2
 8007dee:	4798      	blx	r3
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007df6:	f06f 0304 	mvn.w	r3, #4
 8007dfa:	617b      	str	r3, [r7, #20]
 8007dfc:	e005      	b.n	8007e0a <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	617b      	str	r3, [r7, #20]
 8007e02:	e002      	b.n	8007e0a <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007e04:	f06f 0301 	mvn.w	r3, #1
 8007e08:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007e0a:	697b      	ldr	r3, [r7, #20]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	2000028c 	.word	0x2000028c
 8007e18:	20000178 	.word	0x20000178
 8007e1c:	2000025c 	.word	0x2000025c
 8007e20:	2000948c 	.word	0x2000948c

08007e24 <IKS01A3_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d903      	bls.n	8007e3e <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007e36:	f06f 0301 	mvn.w	r3, #1
 8007e3a:	617b      	str	r3, [r7, #20]
 8007e3c:	e029      	b.n	8007e92 <IKS01A3_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007e3e:	4a17      	ldr	r2, [pc, #92]	; (8007e9c <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	4013      	ands	r3, r2
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d11d      	bne.n	8007e8c <IKS01A3_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007e50:	4a13      	ldr	r2, [pc, #76]	; (8007ea0 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e58:	4812      	ldr	r0, [pc, #72]	; (8007ea4 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	4413      	add	r3, r2
 8007e62:	440b      	add	r3, r1
 8007e64:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	490f      	ldr	r1, [pc, #60]	; (8007ea8 <IKS01A3_ENV_SENSOR_GetValue+0x84>)
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	4610      	mov	r0, r2
 8007e76:	4798      	blx	r3
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <IKS01A3_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e7e:	f06f 0304 	mvn.w	r3, #4
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	e005      	b.n	8007e92 <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007e86:	2300      	movs	r3, #0
 8007e88:	617b      	str	r3, [r7, #20]
 8007e8a:	e002      	b.n	8007e92 <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007e8c:	f06f 0301 	mvn.w	r3, #1
 8007e90:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007e92:	697b      	ldr	r3, [r7, #20]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	2000028c 	.word	0x2000028c
 8007ea0:	20000178 	.word	0x20000178
 8007ea4:	2000025c 	.word	0x2000025c
 8007ea8:	2000948c 	.word	0x2000948c

08007eac <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b090      	sub	sp, #64	; 0x40
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t              id;
  int32_t              ret = BSP_ERROR_NONE;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8007eb8:	2300      	movs	r3, #0
 8007eba:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8007ebc:	23bf      	movs	r3, #191	; 0xbf
 8007ebe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8007ec2:	4b49      	ldr	r3, [pc, #292]	; (8007fe8 <HTS221_0_Probe+0x13c>)
 8007ec4:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8007ec6:	4b49      	ldr	r3, [pc, #292]	; (8007fec <HTS221_0_Probe+0x140>)
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8007eca:	4b49      	ldr	r3, [pc, #292]	; (8007ff0 <HTS221_0_Probe+0x144>)
 8007ecc:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8007ece:	4b49      	ldr	r3, [pc, #292]	; (8007ff4 <HTS221_0_Probe+0x148>)
 8007ed0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8007ed2:	4b49      	ldr	r3, [pc, #292]	; (8007ff8 <HTS221_0_Probe+0x14c>)
 8007ed4:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8007ed6:	f107 0320 	add.w	r3, r7, #32
 8007eda:	4619      	mov	r1, r3
 8007edc:	4847      	ldr	r0, [pc, #284]	; (8007ffc <HTS221_0_Probe+0x150>)
 8007ede:	f7f9 fd97 	bl	8001a10 <HTS221_RegisterBusIO>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007ee8:	f06f 0306 	mvn.w	r3, #6
 8007eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eee:	e076      	b.n	8007fde <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8007ef0:	f107 031f 	add.w	r3, r7, #31
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	4841      	ldr	r0, [pc, #260]	; (8007ffc <HTS221_0_Probe+0x150>)
 8007ef8:	f7f9 fe0f 	bl	8001b1a <HTS221_ReadID>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007f02:	f06f 0306 	mvn.w	r3, #6
 8007f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f08:	e069      	b.n	8007fde <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8007f0a:	7ffb      	ldrb	r3, [r7, #31]
 8007f0c:	2bbc      	cmp	r3, #188	; 0xbc
 8007f0e:	d003      	beq.n	8007f18 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007f10:	f06f 0306 	mvn.w	r3, #6
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f16:	e062      	b.n	8007fde <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8007f18:	f107 030c 	add.w	r3, r7, #12
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4837      	ldr	r0, [pc, #220]	; (8007ffc <HTS221_0_Probe+0x150>)
 8007f20:	f7f9 fe12 	bl	8001b48 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007f24:	7b3b      	ldrb	r3, [r7, #12]
 8007f26:	461a      	mov	r2, r3
 8007f28:	7b7b      	ldrb	r3, [r7, #13]
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007f32:	4313      	orrs	r3, r2
 8007f34:	4a32      	ldr	r2, [pc, #200]	; (8008000 <HTS221_0_Probe+0x154>)
 8007f36:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8007f38:	4b32      	ldr	r3, [pc, #200]	; (8008004 <HTS221_0_Probe+0x158>)
 8007f3a:	4a30      	ldr	r2, [pc, #192]	; (8007ffc <HTS221_0_Probe+0x150>)
 8007f3c:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8007f3e:	4b32      	ldr	r3, [pc, #200]	; (8008008 <HTS221_0_Probe+0x15c>)
 8007f40:	4a32      	ldr	r2, [pc, #200]	; (800800c <HTS221_0_Probe+0x160>)
 8007f42:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d11d      	bne.n	8007f86 <HTS221_0_Probe+0xda>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d018      	beq.n	8007f86 <HTS221_0_Probe+0xda>
 8007f54:	7b3b      	ldrb	r3, [r7, #12]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d115      	bne.n	8007f86 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8007f5a:	4b2d      	ldr	r3, [pc, #180]	; (8008010 <HTS221_0_Probe+0x164>)
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	4a2d      	ldr	r2, [pc, #180]	; (8008014 <HTS221_0_Probe+0x168>)
 8007f60:	492d      	ldr	r1, [pc, #180]	; (8008018 <HTS221_0_Probe+0x16c>)
 8007f62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8007f66:	4b28      	ldr	r3, [pc, #160]	; (8008008 <HTS221_0_Probe+0x15c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a25      	ldr	r2, [pc, #148]	; (8008004 <HTS221_0_Probe+0x158>)
 8007f6e:	6812      	ldr	r2, [r2, #0]
 8007f70:	4610      	mov	r0, r2
 8007f72:	4798      	blx	r3
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f7a:	f06f 0304 	mvn.w	r3, #4
 8007f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f80:	e001      	b.n	8007f86 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007f82:	2300      	movs	r3, #0
 8007f84:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8007f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d11d      	bne.n	8007fc8 <HTS221_0_Probe+0x11c>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f003 0304 	and.w	r3, r3, #4
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d018      	beq.n	8007fc8 <HTS221_0_Probe+0x11c>
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d115      	bne.n	8007fc8 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8007f9c:	4b1c      	ldr	r3, [pc, #112]	; (8008010 <HTS221_0_Probe+0x164>)
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	4a1c      	ldr	r2, [pc, #112]	; (8008014 <HTS221_0_Probe+0x168>)
 8007fa2:	491e      	ldr	r1, [pc, #120]	; (800801c <HTS221_0_Probe+0x170>)
 8007fa4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8007fa8:	4b17      	ldr	r3, [pc, #92]	; (8008008 <HTS221_0_Probe+0x15c>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a15      	ldr	r2, [pc, #84]	; (8008004 <HTS221_0_Probe+0x158>)
 8007fb0:	6812      	ldr	r2, [r2, #0]
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	4798      	blx	r3
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007fbc:	f06f 0304 	mvn.w	r3, #4
 8007fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fc2:	e001      	b.n	8007fc8 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8007fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d107      	bne.n	8007fde <HTS221_0_Probe+0x132>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007fd8:	f06f 0304 	mvn.w	r3, #4
 8007fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 8007fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3740      	adds	r7, #64	; 0x40
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	08001589 	.word	0x08001589
 8007fec:	080015ed 	.word	0x080015ed
 8007ff0:	080016a1 	.word	0x080016a1
 8007ff4:	0800163d 	.word	0x0800163d
 8007ff8:	08001705 	.word	0x08001705
 8007ffc:	20000298 	.word	0x20000298
 8008000:	2000028c 	.word	0x2000028c
 8008004:	2000948c 	.word	0x2000948c
 8008008:	20000280 	.word	0x20000280
 800800c:	20000024 	.word	0x20000024
 8008010:	20000178 	.word	0x20000178
 8008014:	2000025c 	.word	0x2000025c
 8008018:	20000048 	.word	0x20000048
 800801c:	20000034 	.word	0x20000034

08008020 <LPS22HH_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b090      	sub	sp, #64	; 0x40
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008028:	2300      	movs	r3, #0
 800802a:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 800802c:	2300      	movs	r3, #0
 800802e:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8008030:	23bb      	movs	r3, #187	; 0xbb
 8008032:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008036:	4b4a      	ldr	r3, [pc, #296]	; (8008160 <LPS22HH_0_Probe+0x140>)
 8008038:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800803a:	4b4a      	ldr	r3, [pc, #296]	; (8008164 <LPS22HH_0_Probe+0x144>)
 800803c:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800803e:	4b4a      	ldr	r3, [pc, #296]	; (8008168 <LPS22HH_0_Probe+0x148>)
 8008040:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008042:	4b4a      	ldr	r3, [pc, #296]	; (800816c <LPS22HH_0_Probe+0x14c>)
 8008044:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008046:	4b4a      	ldr	r3, [pc, #296]	; (8008170 <LPS22HH_0_Probe+0x150>)
 8008048:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 800804a:	f107 0320 	add.w	r3, r7, #32
 800804e:	4619      	mov	r1, r3
 8008050:	4848      	ldr	r0, [pc, #288]	; (8008174 <LPS22HH_0_Probe+0x154>)
 8008052:	f7fc fab9 	bl	80045c8 <LPS22HH_RegisterBusIO>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800805c:	f06f 0306 	mvn.w	r3, #6
 8008060:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008062:	e078      	b.n	8008156 <LPS22HH_0_Probe+0x136>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8008064:	f107 031f 	add.w	r3, r7, #31
 8008068:	4619      	mov	r1, r3
 800806a:	4842      	ldr	r0, [pc, #264]	; (8008174 <LPS22HH_0_Probe+0x154>)
 800806c:	f7fc fb51 	bl	8004712 <LPS22HH_ReadID>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008076:	f06f 0306 	mvn.w	r3, #6
 800807a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800807c:	e06b      	b.n	8008156 <LPS22HH_0_Probe+0x136>
  }
  else if (id != LPS22HH_ID)
 800807e:	7ffb      	ldrb	r3, [r7, #31]
 8008080:	2bb3      	cmp	r3, #179	; 0xb3
 8008082:	d003      	beq.n	800808c <LPS22HH_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008084:	f06f 0306 	mvn.w	r3, #6
 8008088:	63fb      	str	r3, [r7, #60]	; 0x3c
 800808a:	e064      	b.n	8008156 <LPS22HH_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 800808c:	f107 030c 	add.w	r3, r7, #12
 8008090:	4619      	mov	r1, r3
 8008092:	4838      	ldr	r0, [pc, #224]	; (8008174 <LPS22HH_0_Probe+0x154>)
 8008094:	f7fc fb54 	bl	8004740 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008098:	7b3b      	ldrb	r3, [r7, #12]
 800809a:	461a      	mov	r2, r3
 800809c:	7b7b      	ldrb	r3, [r7, #13]
 800809e:	005b      	lsls	r3, r3, #1
 80080a0:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80080a6:	4313      	orrs	r3, r2
 80080a8:	4a33      	ldr	r2, [pc, #204]	; (8008178 <LPS22HH_0_Probe+0x158>)
 80080aa:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 80080ac:	4b33      	ldr	r3, [pc, #204]	; (800817c <LPS22HH_0_Probe+0x15c>)
 80080ae:	4a31      	ldr	r2, [pc, #196]	; (8008174 <LPS22HH_0_Probe+0x154>)
 80080b0:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 80080b2:	4b33      	ldr	r3, [pc, #204]	; (8008180 <LPS22HH_0_Probe+0x160>)
 80080b4:	4a33      	ldr	r2, [pc, #204]	; (8008184 <LPS22HH_0_Probe+0x164>)
 80080b6:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80080b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d11e      	bne.n	80080fc <LPS22HH_0_Probe+0xdc>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d019      	beq.n	80080fc <LPS22HH_0_Probe+0xdc>
 80080c8:	7b3b      	ldrb	r3, [r7, #12]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d116      	bne.n	80080fc <LPS22HH_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 80080ce:	4b2e      	ldr	r3, [pc, #184]	; (8008188 <LPS22HH_0_Probe+0x168>)
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	4a2e      	ldr	r2, [pc, #184]	; (800818c <LPS22HH_0_Probe+0x16c>)
 80080d4:	3303      	adds	r3, #3
 80080d6:	492e      	ldr	r1, [pc, #184]	; (8008190 <LPS22HH_0_Probe+0x170>)
 80080d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 80080dc:	4b28      	ldr	r3, [pc, #160]	; (8008180 <LPS22HH_0_Probe+0x160>)
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a26      	ldr	r2, [pc, #152]	; (800817c <LPS22HH_0_Probe+0x15c>)
 80080e4:	6852      	ldr	r2, [r2, #4]
 80080e6:	4610      	mov	r0, r2
 80080e8:	4798      	blx	r3
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <LPS22HH_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80080f0:	f06f 0304 	mvn.w	r3, #4
 80080f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080f6:	e001      	b.n	80080fc <LPS22HH_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80080f8:	2300      	movs	r3, #0
 80080fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80080fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d11e      	bne.n	8008140 <LPS22HH_0_Probe+0x120>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	2b00      	cmp	r3, #0
 800810a:	d019      	beq.n	8008140 <LPS22HH_0_Probe+0x120>
 800810c:	7b7b      	ldrb	r3, [r7, #13]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d116      	bne.n	8008140 <LPS22HH_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8008112:	4b1d      	ldr	r3, [pc, #116]	; (8008188 <LPS22HH_0_Probe+0x168>)
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	4a1d      	ldr	r2, [pc, #116]	; (800818c <LPS22HH_0_Probe+0x16c>)
 8008118:	3303      	adds	r3, #3
 800811a:	491e      	ldr	r1, [pc, #120]	; (8008194 <LPS22HH_0_Probe+0x174>)
 800811c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008120:	4b17      	ldr	r3, [pc, #92]	; (8008180 <LPS22HH_0_Probe+0x160>)
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a15      	ldr	r2, [pc, #84]	; (800817c <LPS22HH_0_Probe+0x15c>)
 8008128:	6852      	ldr	r2, [r2, #4]
 800812a:	4610      	mov	r0, r2
 800812c:	4798      	blx	r3
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d003      	beq.n	800813c <LPS22HH_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008134:	f06f 0304 	mvn.w	r3, #4
 8008138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800813a:	e001      	b.n	8008140 <LPS22HH_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800813c:	2300      	movs	r3, #0
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008142:	2b00      	cmp	r3, #0
 8008144:	d107      	bne.n	8008156 <LPS22HH_0_Probe+0x136>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f003 0304 	and.w	r3, r3, #4
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <LPS22HH_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008150:	f06f 0304 	mvn.w	r3, #4
 8008154:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8008156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008158:	4618      	mov	r0, r3
 800815a:	3740      	adds	r7, #64	; 0x40
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	08001589 	.word	0x08001589
 8008164:	080015ed 	.word	0x080015ed
 8008168:	080016a1 	.word	0x080016a1
 800816c:	0800163d 	.word	0x0800163d
 8008170:	08001705 	.word	0x08001705
 8008174:	200002c4 	.word	0x200002c4
 8008178:	2000028c 	.word	0x2000028c
 800817c:	2000948c 	.word	0x2000948c
 8008180:	20000280 	.word	0x20000280
 8008184:	200000c4 	.word	0x200000c4
 8008188:	20000178 	.word	0x20000178
 800818c:	2000025c 	.word	0x2000025c
 8008190:	200000e8 	.word	0x200000e8
 8008194:	200000d4 	.word	0x200000d4

08008198 <STTS751_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE
 * @retval BSP status
 */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b090      	sub	sp, #64	; 0x40
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80081a0:	2300      	movs	r3, #0
 80081a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 80081a4:	2300      	movs	r3, #0
 80081a6:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 80081a8:	2395      	movs	r3, #149	; 0x95
 80081aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 80081ae:	4b3f      	ldr	r3, [pc, #252]	; (80082ac <STTS751_0_Probe+0x114>)
 80081b0:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80081b2:	4b3f      	ldr	r3, [pc, #252]	; (80082b0 <STTS751_0_Probe+0x118>)
 80081b4:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80081b6:	4b3f      	ldr	r3, [pc, #252]	; (80082b4 <STTS751_0_Probe+0x11c>)
 80081b8:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80081ba:	4b3f      	ldr	r3, [pc, #252]	; (80082b8 <STTS751_0_Probe+0x120>)
 80081bc:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 80081be:	4b3f      	ldr	r3, [pc, #252]	; (80082bc <STTS751_0_Probe+0x124>)
 80081c0:	63bb      	str	r3, [r7, #56]	; 0x38

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 80081c2:	f107 0320 	add.w	r3, r7, #32
 80081c6:	4619      	mov	r1, r3
 80081c8:	483d      	ldr	r0, [pc, #244]	; (80082c0 <STTS751_0_Probe+0x128>)
 80081ca:	f7fe ffb9 	bl	8007140 <STTS751_RegisterBusIO>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d003      	beq.n	80081dc <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80081d4:	f06f 0306 	mvn.w	r3, #6
 80081d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081da:	e061      	b.n	80082a0 <STTS751_0_Probe+0x108>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 80081dc:	f107 031f 	add.w	r3, r7, #31
 80081e0:	4619      	mov	r1, r3
 80081e2:	4837      	ldr	r0, [pc, #220]	; (80082c0 <STTS751_0_Probe+0x128>)
 80081e4:	f7ff f847 	bl	8007276 <STTS751_ReadID>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80081ee:	f06f 0306 	mvn.w	r3, #6
 80081f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081f4:	e054      	b.n	80082a0 <STTS751_0_Probe+0x108>
  }
  else if (id != STTS751_ID_MAN)
 80081f6:	7ffb      	ldrb	r3, [r7, #31]
 80081f8:	2b53      	cmp	r3, #83	; 0x53
 80081fa:	d003      	beq.n	8008204 <STTS751_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80081fc:	f06f 0306 	mvn.w	r3, #6
 8008200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008202:	e04d      	b.n	80082a0 <STTS751_0_Probe+0x108>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8008204:	f107 030c 	add.w	r3, r7, #12
 8008208:	4619      	mov	r1, r3
 800820a:	482d      	ldr	r0, [pc, #180]	; (80082c0 <STTS751_0_Probe+0x128>)
 800820c:	f7ff f84e 	bl	80072ac <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008210:	7b3b      	ldrb	r3, [r7, #12]
 8008212:	461a      	mov	r2, r3
 8008214:	7b7b      	ldrb	r3, [r7, #13]
 8008216:	005b      	lsls	r3, r3, #1
 8008218:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800821e:	4313      	orrs	r3, r2
 8008220:	4a28      	ldr	r2, [pc, #160]	; (80082c4 <STTS751_0_Probe+0x12c>)
 8008222:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8008224:	4b28      	ldr	r3, [pc, #160]	; (80082c8 <STTS751_0_Probe+0x130>)
 8008226:	4a26      	ldr	r2, [pc, #152]	; (80082c0 <STTS751_0_Probe+0x128>)
 8008228:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 800822a:	4b28      	ldr	r3, [pc, #160]	; (80082cc <STTS751_0_Probe+0x134>)
 800822c:	4a28      	ldr	r2, [pc, #160]	; (80082d0 <STTS751_0_Probe+0x138>)
 800822e:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d11e      	bne.n	8008274 <STTS751_0_Probe+0xdc>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	2b00      	cmp	r3, #0
 800823e:	d019      	beq.n	8008274 <STTS751_0_Probe+0xdc>
 8008240:	7b3b      	ldrb	r3, [r7, #12]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d116      	bne.n	8008274 <STTS751_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8008246:	4b23      	ldr	r3, [pc, #140]	; (80082d4 <STTS751_0_Probe+0x13c>)
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	4a23      	ldr	r2, [pc, #140]	; (80082d8 <STTS751_0_Probe+0x140>)
 800824c:	3306      	adds	r3, #6
 800824e:	4923      	ldr	r1, [pc, #140]	; (80082dc <STTS751_0_Probe+0x144>)
 8008250:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8008254:	4b1d      	ldr	r3, [pc, #116]	; (80082cc <STTS751_0_Probe+0x134>)
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a1b      	ldr	r2, [pc, #108]	; (80082c8 <STTS751_0_Probe+0x130>)
 800825c:	6892      	ldr	r2, [r2, #8]
 800825e:	4610      	mov	r0, r2
 8008260:	4798      	blx	r3
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d003      	beq.n	8008270 <STTS751_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008268:	f06f 0304 	mvn.w	r3, #4
 800826c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800826e:	e001      	b.n	8008274 <STTS751_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008270:	2300      	movs	r3, #0
 8008272:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008276:	2b00      	cmp	r3, #0
 8008278:	d107      	bne.n	800828a <STTS751_0_Probe+0xf2>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f003 0304 	and.w	r3, r3, #4
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <STTS751_0_Probe+0xf2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008284:	f06f 0304 	mvn.w	r3, #4
 8008288:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800828a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800828c:	2b00      	cmp	r3, #0
 800828e:	d107      	bne.n	80082a0 <STTS751_0_Probe+0x108>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <STTS751_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800829a:	f06f 0304 	mvn.w	r3, #4
 800829e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 80082a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3740      	adds	r7, #64	; 0x40
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	08001589 	.word	0x08001589
 80082b0:	080015ed 	.word	0x080015ed
 80082b4:	080016a1 	.word	0x080016a1
 80082b8:	0800163d 	.word	0x0800163d
 80082bc:	08001705 	.word	0x08001705
 80082c0:	200002f0 	.word	0x200002f0
 80082c4:	2000028c 	.word	0x2000028c
 80082c8:	2000948c 	.word	0x2000948c
 80082cc:	20000280 	.word	0x20000280
 80082d0:	20000154 	.word	0x20000154
 80082d4:	20000178 	.word	0x20000178
 80082d8:	2000025c 	.word	0x2000025c
 80082dc:	20000164 	.word	0x20000164

080082e0 <IKS01A3_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08e      	sub	sp, #56	; 0x38
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80082ea:	2300      	movs	r3, #0
 80082ec:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80082ee:	2301      	movs	r3, #1
 80082f0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80082f2:	2300      	movs	r3, #0
 80082f4:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d036      	beq.n	800836a <IKS01A3_MOTION_SENSOR_Init+0x8a>
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d302      	bcc.n	8008306 <IKS01A3_MOTION_SENSOR_Init+0x26>
 8008300:	2b02      	cmp	r3, #2
 8008302:	d064      	beq.n	80083ce <IKS01A3_MOTION_SENSOR_Init+0xee>
 8008304:	e095      	b.n	8008432 <IKS01A3_MOTION_SENSOR_Init+0x152>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8008306:	6838      	ldr	r0, [r7, #0]
 8008308:	f000 fa00 	bl	800870c <LSM6DSO_0_Probe>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d002      	beq.n	8008318 <IKS01A3_MOTION_SENSOR_Init+0x38>
      {
        return BSP_ERROR_NO_INIT;
 8008312:	f04f 33ff 	mov.w	r3, #4294967295
 8008316:	e0cc      	b.n	80084b2 <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008318:	4a68      	ldr	r2, [pc, #416]	; (80084bc <IKS01A3_MOTION_SENSOR_Init+0x1dc>)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	4967      	ldr	r1, [pc, #412]	; (80084c0 <IKS01A3_MOTION_SENSOR_Init+0x1e0>)
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800832a:	f107 010c 	add.w	r1, r7, #12
 800832e:	4610      	mov	r0, r2
 8008330:	4798      	blx	r3
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <IKS01A3_MOTION_SENSOR_Init+0x5e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008338:	f06f 0306 	mvn.w	r3, #6
 800833c:	e0b9      	b.n	80084b2 <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 800833e:	7b3b      	ldrb	r3, [r7, #12]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d103      	bne.n	800834c <IKS01A3_MOTION_SENSOR_Init+0x6c>
      {
        component_functions |= MOTION_ACCELERO;
 8008344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008346:	f043 0302 	orr.w	r3, r3, #2
 800834a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800834c:	7b7b      	ldrb	r3, [r7, #13]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d103      	bne.n	800835a <IKS01A3_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_GYRO;
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	f043 0301 	orr.w	r3, r3, #1
 8008358:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800835a:	7bbb      	ldrb	r3, [r7, #14]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d16c      	bne.n	800843a <IKS01A3_MOTION_SENSOR_Init+0x15a>
      {
        component_functions |= MOTION_MAGNETO;
 8008360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008362:	f043 0304 	orr.w	r3, r3, #4
 8008366:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008368:	e067      	b.n	800843a <IKS01A3_MOTION_SENSOR_Init+0x15a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 800836a:	6838      	ldr	r0, [r7, #0]
 800836c:	f000 fa8a 	bl	8008884 <LIS2DW12_0_Probe>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <IKS01A3_MOTION_SENSOR_Init+0x9c>
      {
        return BSP_ERROR_NO_INIT;
 8008376:	f04f 33ff 	mov.w	r3, #4294967295
 800837a:	e09a      	b.n	80084b2 <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800837c:	4a4f      	ldr	r2, [pc, #316]	; (80084bc <IKS01A3_MOTION_SENSOR_Init+0x1dc>)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	494e      	ldr	r1, [pc, #312]	; (80084c0 <IKS01A3_MOTION_SENSOR_Init+0x1e0>)
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800838e:	f107 010c 	add.w	r1, r7, #12
 8008392:	4610      	mov	r0, r2
 8008394:	4798      	blx	r3
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <IKS01A3_MOTION_SENSOR_Init+0xc2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800839c:	f06f 0306 	mvn.w	r3, #6
 80083a0:	e087      	b.n	80084b2 <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 80083a2:	7b3b      	ldrb	r3, [r7, #12]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d103      	bne.n	80083b0 <IKS01A3_MOTION_SENSOR_Init+0xd0>
      {
        component_functions |= MOTION_ACCELERO;
 80083a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083aa:	f043 0302 	orr.w	r3, r3, #2
 80083ae:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80083b0:	7b7b      	ldrb	r3, [r7, #13]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d103      	bne.n	80083be <IKS01A3_MOTION_SENSOR_Init+0xde>
      {
        component_functions |= MOTION_GYRO;
 80083b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b8:	f043 0301 	orr.w	r3, r3, #1
 80083bc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d13c      	bne.n	800843e <IKS01A3_MOTION_SENSOR_Init+0x15e>
      {
        component_functions |= MOTION_MAGNETO;
 80083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c6:	f043 0304 	orr.w	r3, r3, #4
 80083ca:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80083cc:	e037      	b.n	800843e <IKS01A3_MOTION_SENSOR_Init+0x15e>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 80083ce:	6838      	ldr	r0, [r7, #0]
 80083d0:	f000 fafc 	bl	80089cc <LIS2MDL_0_Probe>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <IKS01A3_MOTION_SENSOR_Init+0x100>
      {
        return BSP_ERROR_NO_INIT;
 80083da:	f04f 33ff 	mov.w	r3, #4294967295
 80083de:	e068      	b.n	80084b2 <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80083e0:	4a36      	ldr	r2, [pc, #216]	; (80084bc <IKS01A3_MOTION_SENSOR_Init+0x1dc>)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	4935      	ldr	r1, [pc, #212]	; (80084c0 <IKS01A3_MOTION_SENSOR_Init+0x1e0>)
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80083f2:	f107 010c 	add.w	r1, r7, #12
 80083f6:	4610      	mov	r0, r2
 80083f8:	4798      	blx	r3
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d002      	beq.n	8008406 <IKS01A3_MOTION_SENSOR_Init+0x126>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008400:	f06f 0306 	mvn.w	r3, #6
 8008404:	e055      	b.n	80084b2 <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8008406:	7b3b      	ldrb	r3, [r7, #12]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d103      	bne.n	8008414 <IKS01A3_MOTION_SENSOR_Init+0x134>
      {
        component_functions |= MOTION_ACCELERO;
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	f043 0302 	orr.w	r3, r3, #2
 8008412:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008414:	7b7b      	ldrb	r3, [r7, #13]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d103      	bne.n	8008422 <IKS01A3_MOTION_SENSOR_Init+0x142>
      {
        component_functions |= MOTION_GYRO;
 800841a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841c:	f043 0301 	orr.w	r3, r3, #1
 8008420:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d10c      	bne.n	8008442 <IKS01A3_MOTION_SENSOR_Init+0x162>
      {
        component_functions |= MOTION_MAGNETO;
 8008428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842a:	f043 0304 	orr.w	r3, r3, #4
 800842e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008430:	e007      	b.n	8008442 <IKS01A3_MOTION_SENSOR_Init+0x162>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008432:	f06f 0301 	mvn.w	r3, #1
 8008436:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8008438:	e004      	b.n	8008444 <IKS01A3_MOTION_SENSOR_Init+0x164>
      break;
 800843a:	bf00      	nop
 800843c:	e002      	b.n	8008444 <IKS01A3_MOTION_SENSOR_Init+0x164>
      break;
 800843e:	bf00      	nop
 8008440:	e000      	b.n	8008444 <IKS01A3_MOTION_SENSOR_Init+0x164>
      break;
 8008442:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8008444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <IKS01A3_MOTION_SENSOR_Init+0x16e>
  {
    return ret;
 800844a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844c:	e031      	b.n	80084b2 <IKS01A3_MOTION_SENSOR_Init+0x1d2>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800844e:	2300      	movs	r3, #0
 8008450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008452:	e02a      	b.n	80084aa <IKS01A3_MOTION_SENSOR_Init+0x1ca>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008458:	4013      	ands	r3, r2
 800845a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800845c:	429a      	cmp	r2, r3
 800845e:	d11e      	bne.n	800849e <IKS01A3_MOTION_SENSOR_Init+0x1be>
 8008460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008464:	4013      	ands	r3, r2
 8008466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008468:	429a      	cmp	r2, r3
 800846a:	d118      	bne.n	800849e <IKS01A3_MOTION_SENSOR_Init+0x1be>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800846c:	4a15      	ldr	r2, [pc, #84]	; (80084c4 <IKS01A3_MOTION_SENSOR_Init+0x1e4>)
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008474:	4814      	ldr	r0, [pc, #80]	; (80084c8 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	4613      	mov	r3, r2
 800847a:	005b      	lsls	r3, r3, #1
 800847c:	4413      	add	r3, r2
 800847e:	440b      	add	r3, r1
 8008480:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	490e      	ldr	r1, [pc, #56]	; (80084c0 <IKS01A3_MOTION_SENSOR_Init+0x1e0>)
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800848e:	4610      	mov	r0, r2
 8008490:	4798      	blx	r3
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <IKS01A3_MOTION_SENSOR_Init+0x1be>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8008498:	f06f 0304 	mvn.w	r3, #4
 800849c:	e009      	b.n	80084b2 <IKS01A3_MOTION_SENSOR_Init+0x1d2>
      }
    }
    function = function << 1;
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	005b      	lsls	r3, r3, #1
 80084a2:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80084a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a6:	3301      	adds	r3, #1
 80084a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d9d1      	bls.n	8008454 <IKS01A3_MOTION_SENSOR_Init+0x174>
  }

  return ret;
 80084b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3738      	adds	r7, #56	; 0x38
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20000344 	.word	0x20000344
 80084c0:	20009498 	.word	0x20009498
 80084c4:	2000018c 	.word	0x2000018c
 80084c8:	20000320 	.word	0x20000320

080084cc <IKS01A3_MOTION_SENSOR_GetCapabilities>:
 * @param  Instance Motion sensor instance
 * @param  Capabilities pointer to motion sensor capabilities
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d903      	bls.n	80084e4 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80084dc:	f06f 0301 	mvn.w	r3, #1
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	e014      	b.n	800850e <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 80084e4:	4a0c      	ldr	r2, [pc, #48]	; (8008518 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x4c>)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	490b      	ldr	r1, [pc, #44]	; (800851c <IKS01A3_MOTION_SENSOR_GetCapabilities+0x50>)
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	4610      	mov	r0, r2
 80084fa:	4798      	blx	r3
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <IKS01A3_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008502:	f06f 0306 	mvn.w	r3, #6
 8008506:	60fb      	str	r3, [r7, #12]
 8008508:	e001      	b.n	800850e <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800850a:	2300      	movs	r3, #0
 800850c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800850e:	68fb      	ldr	r3, [r7, #12]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	20000344 	.word	0x20000344
 800851c:	20009498 	.word	0x20009498

08008520 <IKS01A3_MOTION_SENSOR_ReadID>:
 * @param  Instance Motion sensor instance
 * @param  Id WHOAMI value
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b02      	cmp	r3, #2
 800852e:	d903      	bls.n	8008538 <IKS01A3_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008530:	f06f 0301 	mvn.w	r3, #1
 8008534:	60fb      	str	r3, [r7, #12]
 8008536:	e014      	b.n	8008562 <IKS01A3_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 8008538:	4a0c      	ldr	r2, [pc, #48]	; (800856c <IKS01A3_MOTION_SENSOR_ReadID+0x4c>)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	490b      	ldr	r1, [pc, #44]	; (8008570 <IKS01A3_MOTION_SENSOR_ReadID+0x50>)
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <IKS01A3_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008556:	f06f 0306 	mvn.w	r3, #6
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	e001      	b.n	8008562 <IKS01A3_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800855e:	2300      	movs	r3, #0
 8008560:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008562:	68fb      	ldr	r3, [r7, #12]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	20000344 	.word	0x20000344
 8008570:	20009498 	.word	0x20009498

08008574 <IKS01A3_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2b02      	cmp	r3, #2
 8008584:	d903      	bls.n	800858e <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008586:	f06f 0301 	mvn.w	r3, #1
 800858a:	617b      	str	r3, [r7, #20]
 800858c:	e029      	b.n	80085e2 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800858e:	4a17      	ldr	r2, [pc, #92]	; (80085ec <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	4013      	ands	r3, r2
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	429a      	cmp	r2, r3
 800859e:	d11d      	bne.n	80085dc <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80085a0:	4a13      	ldr	r2, [pc, #76]	; (80085f0 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80085a8:	4812      	ldr	r0, [pc, #72]	; (80085f4 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	4613      	mov	r3, r2
 80085ae:	005b      	lsls	r3, r3, #1
 80085b0:	4413      	add	r3, r2
 80085b2:	440b      	add	r3, r1
 80085b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	490f      	ldr	r1, [pc, #60]	; (80085f8 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80085c2:	6879      	ldr	r1, [r7, #4]
 80085c4:	4610      	mov	r0, r2
 80085c6:	4798      	blx	r3
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80085ce:	f06f 0304 	mvn.w	r3, #4
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	e005      	b.n	80085e2 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80085d6:	2300      	movs	r3, #0
 80085d8:	617b      	str	r3, [r7, #20]
 80085da:	e002      	b.n	80085e2 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80085dc:	f06f 0301 	mvn.w	r3, #1
 80085e0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80085e2:	697b      	ldr	r3, [r7, #20]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	20000350 	.word	0x20000350
 80085f0:	2000018c 	.word	0x2000018c
 80085f4:	20000320 	.word	0x20000320
 80085f8:	20009498 	.word	0x20009498

080085fc <IKS01A3_MOTION_SENSOR_GetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr pointer to Output Data Rate read value
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2b02      	cmp	r3, #2
 800860c:	d903      	bls.n	8008616 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800860e:	f06f 0301 	mvn.w	r3, #1
 8008612:	617b      	str	r3, [r7, #20]
 8008614:	e029      	b.n	800866a <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008616:	4a17      	ldr	r2, [pc, #92]	; (8008674 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x78>)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	4013      	ands	r3, r2
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	429a      	cmp	r2, r3
 8008626:	d11d      	bne.n	8008664 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8008628:	4a13      	ldr	r2, [pc, #76]	; (8008678 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008630:	4812      	ldr	r0, [pc, #72]	; (800867c <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x80>)
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	4613      	mov	r3, r2
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	4413      	add	r3, r2
 800863a:	440b      	add	r3, r1
 800863c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	490f      	ldr	r1, [pc, #60]	; (8008680 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x84>)
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	4610      	mov	r0, r2
 800864e:	4798      	blx	r3
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008656:	f06f 0304 	mvn.w	r3, #4
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	e005      	b.n	800866a <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800865e:	2300      	movs	r3, #0
 8008660:	617b      	str	r3, [r7, #20]
 8008662:	e002      	b.n	800866a <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008664:	f06f 0301 	mvn.w	r3, #1
 8008668:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800866a:	697b      	ldr	r3, [r7, #20]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3718      	adds	r7, #24
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	20000350 	.word	0x20000350
 8008678:	2000018c 	.word	0x2000018c
 800867c:	20000320 	.word	0x20000320
 8008680:	20009498 	.word	0x20009498

08008684 <IKS01A3_MOTION_SENSOR_GetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale pointer to Fullscale read value
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2b02      	cmp	r3, #2
 8008694:	d903      	bls.n	800869e <IKS01A3_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008696:	f06f 0301 	mvn.w	r3, #1
 800869a:	617b      	str	r3, [r7, #20]
 800869c:	e029      	b.n	80086f2 <IKS01A3_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800869e:	4a17      	ldr	r2, [pc, #92]	; (80086fc <IKS01A3_MOTION_SENSOR_GetFullScale+0x78>)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	4013      	ands	r3, r2
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d11d      	bne.n	80086ec <IKS01A3_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 80086b0:	4a13      	ldr	r2, [pc, #76]	; (8008700 <IKS01A3_MOTION_SENSOR_GetFullScale+0x7c>)
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80086b8:	4812      	ldr	r0, [pc, #72]	; (8008704 <IKS01A3_MOTION_SENSOR_GetFullScale+0x80>)
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	4613      	mov	r3, r2
 80086be:	005b      	lsls	r3, r3, #1
 80086c0:	4413      	add	r3, r2
 80086c2:	440b      	add	r3, r1
 80086c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	490f      	ldr	r1, [pc, #60]	; (8008708 <IKS01A3_MOTION_SENSOR_GetFullScale+0x84>)
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80086d2:	6879      	ldr	r1, [r7, #4]
 80086d4:	4610      	mov	r0, r2
 80086d6:	4798      	blx	r3
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <IKS01A3_MOTION_SENSOR_GetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80086de:	f06f 0304 	mvn.w	r3, #4
 80086e2:	617b      	str	r3, [r7, #20]
 80086e4:	e005      	b.n	80086f2 <IKS01A3_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80086e6:	2300      	movs	r3, #0
 80086e8:	617b      	str	r3, [r7, #20]
 80086ea:	e002      	b.n	80086f2 <IKS01A3_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80086ec:	f06f 0301 	mvn.w	r3, #1
 80086f0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80086f2:	697b      	ldr	r3, [r7, #20]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	20000350 	.word	0x20000350
 8008700:	2000018c 	.word	0x2000018c
 8008704:	20000320 	.word	0x20000320
 8008708:	20009498 	.word	0x20009498

0800870c <LSM6DSO_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b092      	sub	sp, #72	; 0x48
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008714:	2300      	movs	r3, #0
 8008716:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8008718:	2300      	movs	r3, #0
 800871a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800871c:	23d7      	movs	r3, #215	; 0xd7
 800871e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008722:	4b4a      	ldr	r3, [pc, #296]	; (800884c <LSM6DSO_0_Probe+0x140>)
 8008724:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008726:	4b4a      	ldr	r3, [pc, #296]	; (8008850 <LSM6DSO_0_Probe+0x144>)
 8008728:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800872a:	4b4a      	ldr	r3, [pc, #296]	; (8008854 <LSM6DSO_0_Probe+0x148>)
 800872c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800872e:	4b4a      	ldr	r3, [pc, #296]	; (8008858 <LSM6DSO_0_Probe+0x14c>)
 8008730:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008732:	4b4a      	ldr	r3, [pc, #296]	; (800885c <LSM6DSO_0_Probe+0x150>)
 8008734:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8008736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800873a:	4619      	mov	r1, r3
 800873c:	4848      	ldr	r0, [pc, #288]	; (8008860 <LSM6DSO_0_Probe+0x154>)
 800873e:	f7fc fd99 	bl	8005274 <LSM6DSO_RegisterBusIO>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d003      	beq.n	8008750 <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008748:	f06f 0306 	mvn.w	r3, #6
 800874c:	647b      	str	r3, [r7, #68]	; 0x44
 800874e:	e077      	b.n	8008840 <LSM6DSO_0_Probe+0x134>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8008750:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008754:	4619      	mov	r1, r3
 8008756:	4842      	ldr	r0, [pc, #264]	; (8008860 <LSM6DSO_0_Probe+0x154>)
 8008758:	f7fc fe8e 	bl	8005478 <LSM6DSO_ReadID>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008762:	f06f 0306 	mvn.w	r3, #6
 8008766:	647b      	str	r3, [r7, #68]	; 0x44
 8008768:	e06a      	b.n	8008840 <LSM6DSO_0_Probe+0x134>
  }
  else if (id != LSM6DSO_ID)
 800876a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800876e:	2b6c      	cmp	r3, #108	; 0x6c
 8008770:	d003      	beq.n	800877a <LSM6DSO_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008772:	f06f 0306 	mvn.w	r3, #6
 8008776:	647b      	str	r3, [r7, #68]	; 0x44
 8008778:	e062      	b.n	8008840 <LSM6DSO_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800877a:	f107 0308 	add.w	r3, r7, #8
 800877e:	4619      	mov	r1, r3
 8008780:	4837      	ldr	r0, [pc, #220]	; (8008860 <LSM6DSO_0_Probe+0x154>)
 8008782:	f7fc fe8f 	bl	80054a4 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008786:	7a7b      	ldrb	r3, [r7, #9]
 8008788:	461a      	mov	r2, r3
 800878a:	7a3b      	ldrb	r3, [r7, #8]
 800878c:	005b      	lsls	r3, r3, #1
 800878e:	431a      	orrs	r2, r3
 8008790:	7abb      	ldrb	r3, [r7, #10]
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4313      	orrs	r3, r2
 8008796:	4a33      	ldr	r2, [pc, #204]	; (8008864 <LSM6DSO_0_Probe+0x158>)
 8008798:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800879a:	4b33      	ldr	r3, [pc, #204]	; (8008868 <LSM6DSO_0_Probe+0x15c>)
 800879c:	4a30      	ldr	r2, [pc, #192]	; (8008860 <LSM6DSO_0_Probe+0x154>)
 800879e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 80087a0:	4b32      	ldr	r3, [pc, #200]	; (800886c <LSM6DSO_0_Probe+0x160>)
 80087a2:	4a33      	ldr	r2, [pc, #204]	; (8008870 <LSM6DSO_0_Probe+0x164>)
 80087a4:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80087a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d11d      	bne.n	80087e8 <LSM6DSO_0_Probe+0xdc>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d018      	beq.n	80087e8 <LSM6DSO_0_Probe+0xdc>
 80087b6:	7a7b      	ldrb	r3, [r7, #9]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d115      	bne.n	80087e8 <LSM6DSO_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 80087bc:	4b2d      	ldr	r3, [pc, #180]	; (8008874 <LSM6DSO_0_Probe+0x168>)
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	4a2d      	ldr	r2, [pc, #180]	; (8008878 <LSM6DSO_0_Probe+0x16c>)
 80087c2:	492e      	ldr	r1, [pc, #184]	; (800887c <LSM6DSO_0_Probe+0x170>)
 80087c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80087c8:	4b28      	ldr	r3, [pc, #160]	; (800886c <LSM6DSO_0_Probe+0x160>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a26      	ldr	r2, [pc, #152]	; (8008868 <LSM6DSO_0_Probe+0x15c>)
 80087d0:	6812      	ldr	r2, [r2, #0]
 80087d2:	4610      	mov	r0, r2
 80087d4:	4798      	blx	r3
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <LSM6DSO_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80087dc:	f06f 0304 	mvn.w	r3, #4
 80087e0:	647b      	str	r3, [r7, #68]	; 0x44
 80087e2:	e001      	b.n	80087e8 <LSM6DSO_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80087e4:	2300      	movs	r3, #0
 80087e6:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80087e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d11d      	bne.n	800882a <LSM6DSO_0_Probe+0x11e>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d018      	beq.n	800882a <LSM6DSO_0_Probe+0x11e>
 80087f8:	7a3b      	ldrb	r3, [r7, #8]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d115      	bne.n	800882a <LSM6DSO_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80087fe:	4b1d      	ldr	r3, [pc, #116]	; (8008874 <LSM6DSO_0_Probe+0x168>)
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	4a1d      	ldr	r2, [pc, #116]	; (8008878 <LSM6DSO_0_Probe+0x16c>)
 8008804:	491e      	ldr	r1, [pc, #120]	; (8008880 <LSM6DSO_0_Probe+0x174>)
 8008806:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800880a:	4b18      	ldr	r3, [pc, #96]	; (800886c <LSM6DSO_0_Probe+0x160>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a15      	ldr	r2, [pc, #84]	; (8008868 <LSM6DSO_0_Probe+0x15c>)
 8008812:	6812      	ldr	r2, [r2, #0]
 8008814:	4610      	mov	r0, r2
 8008816:	4798      	blx	r3
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d003      	beq.n	8008826 <LSM6DSO_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800881e:	f06f 0304 	mvn.w	r3, #4
 8008822:	647b      	str	r3, [r7, #68]	; 0x44
 8008824:	e001      	b.n	800882a <LSM6DSO_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008826:	2300      	movs	r3, #0
 8008828:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800882a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800882c:	2b00      	cmp	r3, #0
 800882e:	d107      	bne.n	8008840 <LSM6DSO_0_Probe+0x134>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f003 0304 	and.w	r3, r3, #4
 8008836:	2b00      	cmp	r3, #0
 8008838:	d002      	beq.n	8008840 <LSM6DSO_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800883a:	f06f 0304 	mvn.w	r3, #4
 800883e:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8008840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008842:	4618      	mov	r0, r3
 8008844:	3748      	adds	r7, #72	; 0x48
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	08001589 	.word	0x08001589
 8008850:	080015ed 	.word	0x080015ed
 8008854:	080016a1 	.word	0x080016a1
 8008858:	0800163d 	.word	0x0800163d
 800885c:	08001705 	.word	0x08001705
 8008860:	2000035c 	.word	0x2000035c
 8008864:	20000350 	.word	0x20000350
 8008868:	20009498 	.word	0x20009498
 800886c:	20000344 	.word	0x20000344
 8008870:	200000fc 	.word	0x200000fc
 8008874:	2000018c 	.word	0x2000018c
 8008878:	20000320 	.word	0x20000320
 800887c:	20000130 	.word	0x20000130
 8008880:	2000010c 	.word	0x2000010c

08008884 <LIS2DW12_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b092      	sub	sp, #72	; 0x48
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800888c:	2300      	movs	r3, #0
 800888e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8008890:	2300      	movs	r3, #0
 8008892:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8008894:	2333      	movs	r3, #51	; 0x33
 8008896:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 800889a:	4b3f      	ldr	r3, [pc, #252]	; (8008998 <LIS2DW12_0_Probe+0x114>)
 800889c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800889e:	4b3f      	ldr	r3, [pc, #252]	; (800899c <LIS2DW12_0_Probe+0x118>)
 80088a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80088a2:	4b3f      	ldr	r3, [pc, #252]	; (80089a0 <LIS2DW12_0_Probe+0x11c>)
 80088a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80088a6:	4b3f      	ldr	r3, [pc, #252]	; (80089a4 <LIS2DW12_0_Probe+0x120>)
 80088a8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 80088aa:	4b3f      	ldr	r3, [pc, #252]	; (80089a8 <LIS2DW12_0_Probe+0x124>)
 80088ac:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 80088ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088b2:	4619      	mov	r1, r3
 80088b4:	483d      	ldr	r0, [pc, #244]	; (80089ac <LIS2DW12_0_Probe+0x128>)
 80088b6:	f7f9 fec9 	bl	800264c <LIS2DW12_RegisterBusIO>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d003      	beq.n	80088c8 <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80088c0:	f06f 0306 	mvn.w	r3, #6
 80088c4:	647b      	str	r3, [r7, #68]	; 0x44
 80088c6:	e062      	b.n	800898e <LIS2DW12_0_Probe+0x10a>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 80088c8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80088cc:	4619      	mov	r1, r3
 80088ce:	4837      	ldr	r0, [pc, #220]	; (80089ac <LIS2DW12_0_Probe+0x128>)
 80088d0:	f7f9 ffa6 	bl	8002820 <LIS2DW12_ReadID>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d003      	beq.n	80088e2 <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80088da:	f06f 0306 	mvn.w	r3, #6
 80088de:	647b      	str	r3, [r7, #68]	; 0x44
 80088e0:	e055      	b.n	800898e <LIS2DW12_0_Probe+0x10a>
  }
  else if (id != LIS2DW12_ID)
 80088e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088e6:	2b44      	cmp	r3, #68	; 0x44
 80088e8:	d003      	beq.n	80088f2 <LIS2DW12_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80088ea:	f06f 0306 	mvn.w	r3, #6
 80088ee:	647b      	str	r3, [r7, #68]	; 0x44
 80088f0:	e04d      	b.n	800898e <LIS2DW12_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 80088f2:	f107 0308 	add.w	r3, r7, #8
 80088f6:	4619      	mov	r1, r3
 80088f8:	482c      	ldr	r0, [pc, #176]	; (80089ac <LIS2DW12_0_Probe+0x128>)
 80088fa:	f7f9 ffa7 	bl	800284c <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80088fe:	7a7b      	ldrb	r3, [r7, #9]
 8008900:	461a      	mov	r2, r3
 8008902:	7a3b      	ldrb	r3, [r7, #8]
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	431a      	orrs	r2, r3
 8008908:	7abb      	ldrb	r3, [r7, #10]
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4313      	orrs	r3, r2
 800890e:	4a28      	ldr	r2, [pc, #160]	; (80089b0 <LIS2DW12_0_Probe+0x12c>)
 8008910:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8008912:	4b28      	ldr	r3, [pc, #160]	; (80089b4 <LIS2DW12_0_Probe+0x130>)
 8008914:	4a25      	ldr	r2, [pc, #148]	; (80089ac <LIS2DW12_0_Probe+0x128>)
 8008916:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8008918:	4b27      	ldr	r3, [pc, #156]	; (80089b8 <LIS2DW12_0_Probe+0x134>)
 800891a:	4a28      	ldr	r2, [pc, #160]	; (80089bc <LIS2DW12_0_Probe+0x138>)
 800891c:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800891e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008920:	2b00      	cmp	r3, #0
 8008922:	d11e      	bne.n	8008962 <LIS2DW12_0_Probe+0xde>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f003 0302 	and.w	r3, r3, #2
 800892a:	2b00      	cmp	r3, #0
 800892c:	d019      	beq.n	8008962 <LIS2DW12_0_Probe+0xde>
 800892e:	7a3b      	ldrb	r3, [r7, #8]
 8008930:	2b01      	cmp	r3, #1
 8008932:	d116      	bne.n	8008962 <LIS2DW12_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008934:	4b22      	ldr	r3, [pc, #136]	; (80089c0 <LIS2DW12_0_Probe+0x13c>)
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	4a22      	ldr	r2, [pc, #136]	; (80089c4 <LIS2DW12_0_Probe+0x140>)
 800893a:	3303      	adds	r3, #3
 800893c:	4922      	ldr	r1, [pc, #136]	; (80089c8 <LIS2DW12_0_Probe+0x144>)
 800893e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8008942:	4b1d      	ldr	r3, [pc, #116]	; (80089b8 <LIS2DW12_0_Probe+0x134>)
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a1a      	ldr	r2, [pc, #104]	; (80089b4 <LIS2DW12_0_Probe+0x130>)
 800894a:	6852      	ldr	r2, [r2, #4]
 800894c:	4610      	mov	r0, r2
 800894e:	4798      	blx	r3
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <LIS2DW12_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008956:	f06f 0304 	mvn.w	r3, #4
 800895a:	647b      	str	r3, [r7, #68]	; 0x44
 800895c:	e001      	b.n	8008962 <LIS2DW12_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800895e:	2300      	movs	r3, #0
 8008960:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008964:	2b00      	cmp	r3, #0
 8008966:	d107      	bne.n	8008978 <LIS2DW12_0_Probe+0xf4>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <LIS2DW12_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008972:	f06f 0304 	mvn.w	r3, #4
 8008976:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800897a:	2b00      	cmp	r3, #0
 800897c:	d107      	bne.n	800898e <LIS2DW12_0_Probe+0x10a>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f003 0304 	and.w	r3, r3, #4
 8008984:	2b00      	cmp	r3, #0
 8008986:	d002      	beq.n	800898e <LIS2DW12_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008988:	f06f 0304 	mvn.w	r3, #4
 800898c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 800898e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008990:	4618      	mov	r0, r3
 8008992:	3748      	adds	r7, #72	; 0x48
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	08001589 	.word	0x08001589
 800899c:	080015ed 	.word	0x080015ed
 80089a0:	080016a1 	.word	0x080016a1
 80089a4:	0800163d 	.word	0x0800163d
 80089a8:	08001705 	.word	0x08001705
 80089ac:	2000038c 	.word	0x2000038c
 80089b0:	20000350 	.word	0x20000350
 80089b4:	20009498 	.word	0x20009498
 80089b8:	20000344 	.word	0x20000344
 80089bc:	2000005c 	.word	0x2000005c
 80089c0:	2000018c 	.word	0x2000018c
 80089c4:	20000320 	.word	0x20000320
 80089c8:	2000006c 	.word	0x2000006c

080089cc <LIS2MDL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b092      	sub	sp, #72	; 0x48
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 80089d4:	2300      	movs	r3, #0
 80089d6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 80089d8:	2300      	movs	r3, #0
 80089da:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 80089dc:	233d      	movs	r3, #61	; 0x3d
 80089de:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 80089e2:	4b3f      	ldr	r3, [pc, #252]	; (8008ae0 <LIS2MDL_0_Probe+0x114>)
 80089e4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80089e6:	4b3f      	ldr	r3, [pc, #252]	; (8008ae4 <LIS2MDL_0_Probe+0x118>)
 80089e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80089ea:	4b3f      	ldr	r3, [pc, #252]	; (8008ae8 <LIS2MDL_0_Probe+0x11c>)
 80089ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80089ee:	4b3f      	ldr	r3, [pc, #252]	; (8008aec <LIS2MDL_0_Probe+0x120>)
 80089f0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 80089f2:	4b3f      	ldr	r3, [pc, #252]	; (8008af0 <LIS2MDL_0_Probe+0x124>)
 80089f4:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 80089f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089fa:	4619      	mov	r1, r3
 80089fc:	483d      	ldr	r0, [pc, #244]	; (8008af4 <LIS2MDL_0_Probe+0x128>)
 80089fe:	f7fb f975 	bl	8003cec <LIS2MDL_RegisterBusIO>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d003      	beq.n	8008a10 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008a08:	f06f 0306 	mvn.w	r3, #6
 8008a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8008a0e:	e062      	b.n	8008ad6 <LIS2MDL_0_Probe+0x10a>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8008a10:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008a14:	4619      	mov	r1, r3
 8008a16:	4837      	ldr	r0, [pc, #220]	; (8008af4 <LIS2MDL_0_Probe+0x128>)
 8008a18:	f7fb fa31 	bl	8003e7e <LIS2MDL_ReadID>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008a22:	f06f 0306 	mvn.w	r3, #6
 8008a26:	647b      	str	r3, [r7, #68]	; 0x44
 8008a28:	e055      	b.n	8008ad6 <LIS2MDL_0_Probe+0x10a>
  }
  else if (id != LIS2MDL_ID)
 8008a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a2e:	2b40      	cmp	r3, #64	; 0x40
 8008a30:	d003      	beq.n	8008a3a <LIS2MDL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008a32:	f06f 0306 	mvn.w	r3, #6
 8008a36:	647b      	str	r3, [r7, #68]	; 0x44
 8008a38:	e04d      	b.n	8008ad6 <LIS2MDL_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8008a3a:	f107 0308 	add.w	r3, r7, #8
 8008a3e:	4619      	mov	r1, r3
 8008a40:	482c      	ldr	r0, [pc, #176]	; (8008af4 <LIS2MDL_0_Probe+0x128>)
 8008a42:	f7fb fa33 	bl	8003eac <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008a46:	7a7b      	ldrb	r3, [r7, #9]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	7a3b      	ldrb	r3, [r7, #8]
 8008a4c:	005b      	lsls	r3, r3, #1
 8008a4e:	431a      	orrs	r2, r3
 8008a50:	7abb      	ldrb	r3, [r7, #10]
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4313      	orrs	r3, r2
 8008a56:	4a28      	ldr	r2, [pc, #160]	; (8008af8 <LIS2MDL_0_Probe+0x12c>)
 8008a58:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8008a5a:	4b28      	ldr	r3, [pc, #160]	; (8008afc <LIS2MDL_0_Probe+0x130>)
 8008a5c:	4a25      	ldr	r2, [pc, #148]	; (8008af4 <LIS2MDL_0_Probe+0x128>)
 8008a5e:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8008a60:	4b27      	ldr	r3, [pc, #156]	; (8008b00 <LIS2MDL_0_Probe+0x134>)
 8008a62:	4a28      	ldr	r2, [pc, #160]	; (8008b04 <LIS2MDL_0_Probe+0x138>)
 8008a64:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8008a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d11e      	bne.n	8008aaa <LIS2MDL_0_Probe+0xde>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f003 0304 	and.w	r3, r3, #4
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d019      	beq.n	8008aaa <LIS2MDL_0_Probe+0xde>
 8008a76:	7abb      	ldrb	r3, [r7, #10]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d116      	bne.n	8008aaa <LIS2MDL_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008a7c:	4b22      	ldr	r3, [pc, #136]	; (8008b08 <LIS2MDL_0_Probe+0x13c>)
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	4a22      	ldr	r2, [pc, #136]	; (8008b0c <LIS2MDL_0_Probe+0x140>)
 8008a82:	3306      	adds	r3, #6
 8008a84:	4922      	ldr	r1, [pc, #136]	; (8008b10 <LIS2MDL_0_Probe+0x144>)
 8008a86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8008a8a:	4b1d      	ldr	r3, [pc, #116]	; (8008b00 <LIS2MDL_0_Probe+0x134>)
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a1a      	ldr	r2, [pc, #104]	; (8008afc <LIS2MDL_0_Probe+0x130>)
 8008a92:	6892      	ldr	r2, [r2, #8]
 8008a94:	4610      	mov	r0, r2
 8008a96:	4798      	blx	r3
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d003      	beq.n	8008aa6 <LIS2MDL_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a9e:	f06f 0304 	mvn.w	r3, #4
 8008aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8008aa4:	e001      	b.n	8008aaa <LIS2MDL_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8008aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d107      	bne.n	8008ac0 <LIS2MDL_0_Probe+0xf4>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d002      	beq.n	8008ac0 <LIS2MDL_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008aba:	f06f 0304 	mvn.w	r3, #4
 8008abe:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d107      	bne.n	8008ad6 <LIS2MDL_0_Probe+0x10a>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <LIS2MDL_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ad0:	f06f 0304 	mvn.w	r3, #4
 8008ad4:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8008ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3748      	adds	r7, #72	; 0x48
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	08001589 	.word	0x08001589
 8008ae4:	080015ed 	.word	0x080015ed
 8008ae8:	080016a1 	.word	0x080016a1
 8008aec:	0800163d 	.word	0x0800163d
 8008af0:	08001705 	.word	0x08001705
 8008af4:	200003c0 	.word	0x200003c0
 8008af8:	20000350 	.word	0x20000350
 8008afc:	20009498 	.word	0x20009498
 8008b00:	20000344 	.word	0x20000344
 8008b04:	20000090 	.word	0x20000090
 8008b08:	2000018c 	.word	0x2000018c
 8008b0c:	20000320 	.word	0x20000320
 8008b10:	200000a0 	.word	0x200000a0

08008b14 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	4a04      	ldr	r2, [pc, #16]	; (8008b34 <BSP_LED_Init+0x20>)
 8008b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b26:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	080127a4 	.word	0x080127a4

08008b38 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	4a06      	ldr	r2, [pc, #24]	; (8008b60 <BSP_LED_On+0x28>)
 8008b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b4a:	2120      	movs	r1, #32
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 fdc8 	bl	80096e4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	200001a0 	.word	0x200001a0

08008b64 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
 8008b70:	4a06      	ldr	r2, [pc, #24]	; (8008b8c <BSP_LED_Off+0x28>)
 8008b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b76:	2120      	movs	r1, #32
 8008b78:	2200      	movs	r2, #0
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fdb2 	bl	80096e4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	200001a0 	.word	0x200001a0

08008b90 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b088      	sub	sp, #32
 8008b94:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b96:	2300      	movs	r3, #0
 8008b98:	60bb      	str	r3, [r7, #8]
 8008b9a:	4b1c      	ldr	r3, [pc, #112]	; (8008c0c <LED_USER_GPIO_Init+0x7c>)
 8008b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9e:	4a1b      	ldr	r2, [pc, #108]	; (8008c0c <LED_USER_GPIO_Init+0x7c>)
 8008ba0:	f043 0301 	orr.w	r3, r3, #1
 8008ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ba6:	4b19      	ldr	r3, [pc, #100]	; (8008c0c <LED_USER_GPIO_Init+0x7c>)
 8008ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	60bb      	str	r3, [r7, #8]
 8008bb0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bb2:	f107 030c 	add.w	r3, r7, #12
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	605a      	str	r2, [r3, #4]
 8008bbc:	609a      	str	r2, [r3, #8]
 8008bbe:	60da      	str	r2, [r3, #12]
 8008bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	607b      	str	r3, [r7, #4]
 8008bc6:	4b11      	ldr	r3, [pc, #68]	; (8008c0c <LED_USER_GPIO_Init+0x7c>)
 8008bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bca:	4a10      	ldr	r2, [pc, #64]	; (8008c0c <LED_USER_GPIO_Init+0x7c>)
 8008bcc:	f043 0301 	orr.w	r3, r3, #1
 8008bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8008bd2:	4b0e      	ldr	r3, [pc, #56]	; (8008c0c <LED_USER_GPIO_Init+0x7c>)
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	607b      	str	r3, [r7, #4]
 8008bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8008bde:	2200      	movs	r2, #0
 8008be0:	2120      	movs	r1, #32
 8008be2:	480b      	ldr	r0, [pc, #44]	; (8008c10 <LED_USER_GPIO_Init+0x80>)
 8008be4:	f000 fd7e 	bl	80096e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8008be8:	2320      	movs	r3, #32
 8008bea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bec:	2301      	movs	r3, #1
 8008bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8008bf8:	f107 030c 	add.w	r3, r7, #12
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4804      	ldr	r0, [pc, #16]	; (8008c10 <LED_USER_GPIO_Init+0x80>)
 8008c00:	f000 faf4 	bl	80091ec <HAL_GPIO_Init>

}
 8008c04:	bf00      	nop
 8008c06:	3720      	adds	r7, #32
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	40023800 	.word	0x40023800
 8008c10:	40020000 	.word	0x40020000

08008c14 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	460a      	mov	r2, r1
 8008c1e:	71fb      	strb	r3, [r7, #7]
 8008c20:	4613      	mov	r3, r2
 8008c22:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8008c24:	2300      	movs	r3, #0
 8008c26:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8008c28:	79fb      	ldrb	r3, [r7, #7]
 8008c2a:	4a1f      	ldr	r2, [pc, #124]	; (8008ca8 <BSP_PB_Init+0x94>)
 8008c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c30:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8008c32:	79bb      	ldrb	r3, [r7, #6]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d131      	bne.n	8008c9c <BSP_PB_Init+0x88>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8008c38:	79fb      	ldrb	r3, [r7, #7]
 8008c3a:	00db      	lsls	r3, r3, #3
 8008c3c:	4a1b      	ldr	r2, [pc, #108]	; (8008cac <BSP_PB_Init+0x98>)
 8008c3e:	1898      	adds	r0, r3, r2
 8008c40:	79fb      	ldrb	r3, [r7, #7]
 8008c42:	4a1b      	ldr	r2, [pc, #108]	; (8008cb0 <BSP_PB_Init+0x9c>)
 8008c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c48:	4619      	mov	r1, r3
 8008c4a:	f000 fabb 	bl	80091c4 <HAL_EXTI_GetHandle>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d003      	beq.n	8008c5c <BSP_PB_Init+0x48>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008c54:	f06f 0303 	mvn.w	r3, #3
 8008c58:	60fb      	str	r3, [r7, #12]
 8008c5a:	e01f      	b.n	8008c9c <BSP_PB_Init+0x88>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	4a12      	ldr	r2, [pc, #72]	; (8008cac <BSP_PB_Init+0x98>)
 8008c62:	1898      	adds	r0, r3, r2
 8008c64:	79fb      	ldrb	r3, [r7, #7]
 8008c66:	4a13      	ldr	r2, [pc, #76]	; (8008cb4 <BSP_PB_Init+0xa0>)
 8008c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	2100      	movs	r1, #0
 8008c70:	f000 fa8e 	bl	8009190 <HAL_EXTI_RegisterCallback>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <BSP_PB_Init+0x6e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008c7a:	f06f 0303 	mvn.w	r3, #3
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	e00c      	b.n	8008c9c <BSP_PB_Init+0x88>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8008c82:	2028      	movs	r0, #40	; 0x28
 8008c84:	79fb      	ldrb	r3, [r7, #7]
 8008c86:	4a0c      	ldr	r2, [pc, #48]	; (8008cb8 <BSP_PB_Init+0xa4>)
 8008c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4619      	mov	r1, r3
 8008c90:	f000 fa54 	bl	800913c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8008c94:	2328      	movs	r3, #40	; 0x28
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 fa6c 	bl	8009174 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	080127a8 	.word	0x080127a8
 8008cac:	200001a8 	.word	0x200001a8
 8008cb0:	080127ac 	.word	0x080127ac
 8008cb4:	080127b0 	.word	0x080127b0
 8008cb8:	080127b4 	.word	0x080127b4

08008cbc <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8008cc6:	79fb      	ldrb	r3, [r7, #7]
 8008cc8:	4a09      	ldr	r2, [pc, #36]	; (8008cf0 <BSP_PB_GetState+0x34>)
 8008cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 fced 	bl	80096b4 <HAL_GPIO_ReadPin>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	bf0c      	ite	eq
 8008ce0:	2301      	moveq	r3, #1
 8008ce2:	2300      	movne	r3, #0
 8008ce4:	b2db      	uxtb	r3, r3
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	200001a4 	.word	0x200001a4

08008cf4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	f003 fa3f 	bl	800c17c <BSP_PB_Callback>
}
 8008cfe:	bf00      	nop
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60bb      	str	r3, [r7, #8]
 8008d0e:	4b19      	ldr	r3, [pc, #100]	; (8008d74 <BUTTON_USER_GPIO_Init+0x70>)
 8008d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d12:	4a18      	ldr	r2, [pc, #96]	; (8008d74 <BUTTON_USER_GPIO_Init+0x70>)
 8008d14:	f043 0304 	orr.w	r3, r3, #4
 8008d18:	6313      	str	r3, [r2, #48]	; 0x30
 8008d1a:	4b16      	ldr	r3, [pc, #88]	; (8008d74 <BUTTON_USER_GPIO_Init+0x70>)
 8008d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1e:	f003 0304 	and.w	r3, r3, #4
 8008d22:	60bb      	str	r3, [r7, #8]
 8008d24:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d26:	f107 030c 	add.w	r3, r7, #12
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	605a      	str	r2, [r3, #4]
 8008d30:	609a      	str	r2, [r3, #8]
 8008d32:	60da      	str	r2, [r3, #12]
 8008d34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d36:	2300      	movs	r3, #0
 8008d38:	607b      	str	r3, [r7, #4]
 8008d3a:	4b0e      	ldr	r3, [pc, #56]	; (8008d74 <BUTTON_USER_GPIO_Init+0x70>)
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3e:	4a0d      	ldr	r2, [pc, #52]	; (8008d74 <BUTTON_USER_GPIO_Init+0x70>)
 8008d40:	f043 0304 	orr.w	r3, r3, #4
 8008d44:	6313      	str	r3, [r2, #48]	; 0x30
 8008d46:	4b0b      	ldr	r3, [pc, #44]	; (8008d74 <BUTTON_USER_GPIO_Init+0x70>)
 8008d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4a:	f003 0304 	and.w	r3, r3, #4
 8008d4e:	607b      	str	r3, [r7, #4]
 8008d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8008d52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008d58:	4b07      	ldr	r3, [pc, #28]	; (8008d78 <BUTTON_USER_GPIO_Init+0x74>)
 8008d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8008d60:	f107 030c 	add.w	r3, r7, #12
 8008d64:	4619      	mov	r1, r3
 8008d66:	4805      	ldr	r0, [pc, #20]	; (8008d7c <BUTTON_USER_GPIO_Init+0x78>)
 8008d68:	f000 fa40 	bl	80091ec <HAL_GPIO_Init>

}
 8008d6c:	bf00      	nop
 8008d6e:	3720      	adds	r7, #32
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	40023800 	.word	0x40023800
 8008d78:	10210000 	.word	0x10210000
 8008d7c:	40020800 	.word	0x40020800

08008d80 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	4603      	mov	r3, r0
 8008d88:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8008d8e:	79fb      	ldrb	r3, [r7, #7]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d903      	bls.n	8008d9c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008d94:	f06f 0301 	mvn.w	r3, #1
 8008d98:	60fb      	str	r3, [r7, #12]
 8008d9a:	e01c      	b.n	8008dd6 <BSP_COM_Init+0x56>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8008d9c:	79fa      	ldrb	r2, [r7, #7]
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
 8008da0:	490f      	ldr	r1, [pc, #60]	; (8008de0 <BSP_COM_Init+0x60>)
 8008da2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008da6:	490f      	ldr	r1, [pc, #60]	; (8008de4 <BSP_COM_Init+0x64>)
 8008da8:	019b      	lsls	r3, r3, #6
 8008daa:	440b      	add	r3, r1
 8008dac:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8008dae:	79fb      	ldrb	r3, [r7, #7]
 8008db0:	019b      	lsls	r3, r3, #6
 8008db2:	4a0c      	ldr	r2, [pc, #48]	; (8008de4 <BSP_COM_Init+0x64>)
 8008db4:	4413      	add	r3, r2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 f85c 	bl	8008e74 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8008dbc:	79fb      	ldrb	r3, [r7, #7]
 8008dbe:	019b      	lsls	r3, r3, #6
 8008dc0:	4a08      	ldr	r2, [pc, #32]	; (8008de4 <BSP_COM_Init+0x64>)
 8008dc2:	4413      	add	r3, r2
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 f80f 	bl	8008de8 <MX_USART2_UART_Init>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <BSP_COM_Init+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008dd0:	f06f 0303 	mvn.w	r3, #3
 8008dd4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	200001b0 	.word	0x200001b0
 8008de4:	200094a4 	.word	0x200094a4

08008de8 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART2;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a12      	ldr	r2, [pc, #72]	; (8008e40 <MX_USART2_UART_Init+0x58>)
 8008df8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008e00:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	220c      	movs	r2, #12
 8008e18:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f002 fb3a 	bl	800b4a0 <HAL_UART_Init>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	40004400 	.word	0x40004400

08008e44 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) /* For IAR and MDK-ARM */
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8008e4c:	4b07      	ldr	r3, [pc, #28]	; (8008e6c <__io_putchar+0x28>)
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	019b      	lsls	r3, r3, #6
 8008e52:	4a07      	ldr	r2, [pc, #28]	; (8008e70 <__io_putchar+0x2c>)
 8008e54:	1898      	adds	r0, r3, r2
 8008e56:	1d39      	adds	r1, r7, #4
 8008e58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f002 fb76 	bl	800b54e <HAL_UART_Transmit>
  return ch;
 8008e62:	687b      	ldr	r3, [r7, #4]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	200003ec 	.word	0x200003ec
 8008e70:	200094a4 	.word	0x200094a4

08008e74 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b08a      	sub	sp, #40	; 0x28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	613b      	str	r3, [r7, #16]
 8008e80:	4b1e      	ldr	r3, [pc, #120]	; (8008efc <USART2_MspInit+0x88>)
 8008e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e84:	4a1d      	ldr	r2, [pc, #116]	; (8008efc <USART2_MspInit+0x88>)
 8008e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8008e8c:	4b1b      	ldr	r3, [pc, #108]	; (8008efc <USART2_MspInit+0x88>)
 8008e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e94:	613b      	str	r3, [r7, #16]
 8008e96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e98:	2300      	movs	r3, #0
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	4b17      	ldr	r3, [pc, #92]	; (8008efc <USART2_MspInit+0x88>)
 8008e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea0:	4a16      	ldr	r2, [pc, #88]	; (8008efc <USART2_MspInit+0x88>)
 8008ea2:	f043 0301 	orr.w	r3, r3, #1
 8008ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8008ea8:	4b14      	ldr	r3, [pc, #80]	; (8008efc <USART2_MspInit+0x88>)
 8008eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	60fb      	str	r3, [r7, #12]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8008eb4:	2304      	movs	r3, #4
 8008eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eb8:	2302      	movs	r3, #2
 8008eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8008ec4:	2307      	movs	r3, #7
 8008ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8008ec8:	f107 0314 	add.w	r3, r7, #20
 8008ecc:	4619      	mov	r1, r3
 8008ece:	480c      	ldr	r0, [pc, #48]	; (8008f00 <USART2_MspInit+0x8c>)
 8008ed0:	f000 f98c 	bl	80091ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8008ed4:	2308      	movs	r3, #8
 8008ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ed8:	2302      	movs	r3, #2
 8008eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8008ee4:	2307      	movs	r3, #7
 8008ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8008ee8:	f107 0314 	add.w	r3, r7, #20
 8008eec:	4619      	mov	r1, r3
 8008eee:	4804      	ldr	r0, [pc, #16]	; (8008f00 <USART2_MspInit+0x8c>)
 8008ef0:	f000 f97c 	bl	80091ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8008ef4:	bf00      	nop
 8008ef6:	3728      	adds	r7, #40	; 0x28
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	40023800 	.word	0x40023800
 8008f00:	40020000 	.word	0x40020000

08008f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008f08:	4b0e      	ldr	r3, [pc, #56]	; (8008f44 <HAL_Init+0x40>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a0d      	ldr	r2, [pc, #52]	; (8008f44 <HAL_Init+0x40>)
 8008f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008f14:	4b0b      	ldr	r3, [pc, #44]	; (8008f44 <HAL_Init+0x40>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a0a      	ldr	r2, [pc, #40]	; (8008f44 <HAL_Init+0x40>)
 8008f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008f20:	4b08      	ldr	r3, [pc, #32]	; (8008f44 <HAL_Init+0x40>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a07      	ldr	r2, [pc, #28]	; (8008f44 <HAL_Init+0x40>)
 8008f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f2c:	2003      	movs	r0, #3
 8008f2e:	f000 f8fa 	bl	8009126 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008f32:	2000      	movs	r0, #0
 8008f34:	f7f8 fab0 	bl	8001498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008f38:	f7f8 fa82 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	40023c00 	.word	0x40023c00

08008f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008f4c:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <HAL_IncTick+0x20>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	461a      	mov	r2, r3
 8008f52:	4b06      	ldr	r3, [pc, #24]	; (8008f6c <HAL_IncTick+0x24>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4413      	add	r3, r2
 8008f58:	4a04      	ldr	r2, [pc, #16]	; (8008f6c <HAL_IncTick+0x24>)
 8008f5a:	6013      	str	r3, [r2, #0]
}
 8008f5c:	bf00      	nop
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	200001b8 	.word	0x200001b8
 8008f6c:	200094e4 	.word	0x200094e4

08008f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008f70:	b480      	push	{r7}
 8008f72:	af00      	add	r7, sp, #0
  return uwTick;
 8008f74:	4b03      	ldr	r3, [pc, #12]	; (8008f84 <HAL_GetTick+0x14>)
 8008f76:	681b      	ldr	r3, [r3, #0]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	200094e4 	.word	0x200094e4

08008f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f90:	f7ff ffee 	bl	8008f70 <HAL_GetTick>
 8008f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa0:	d005      	beq.n	8008fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008fa2:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <HAL_Delay+0x40>)
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	4413      	add	r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008fae:	bf00      	nop
 8008fb0:	f7ff ffde 	bl	8008f70 <HAL_GetTick>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d8f7      	bhi.n	8008fb0 <HAL_Delay+0x28>
  {
  }
}
 8008fc0:	bf00      	nop
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	200001b8 	.word	0x200001b8

08008fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f003 0307 	and.w	r3, r3, #7
 8008fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008fdc:	4b0c      	ldr	r3, [pc, #48]	; (8009010 <__NVIC_SetPriorityGrouping+0x44>)
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008fe8:	4013      	ands	r3, r2
 8008fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008ffe:	4a04      	ldr	r2, [pc, #16]	; (8009010 <__NVIC_SetPriorityGrouping+0x44>)
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	60d3      	str	r3, [r2, #12]
}
 8009004:	bf00      	nop
 8009006:	3714      	adds	r7, #20
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	e000ed00 	.word	0xe000ed00

08009014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009014:	b480      	push	{r7}
 8009016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009018:	4b04      	ldr	r3, [pc, #16]	; (800902c <__NVIC_GetPriorityGrouping+0x18>)
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	0a1b      	lsrs	r3, r3, #8
 800901e:	f003 0307 	and.w	r3, r3, #7
}
 8009022:	4618      	mov	r0, r3
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	e000ed00 	.word	0xe000ed00

08009030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800903a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800903e:	2b00      	cmp	r3, #0
 8009040:	db0b      	blt.n	800905a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	f003 021f 	and.w	r2, r3, #31
 8009048:	4907      	ldr	r1, [pc, #28]	; (8009068 <__NVIC_EnableIRQ+0x38>)
 800904a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800904e:	095b      	lsrs	r3, r3, #5
 8009050:	2001      	movs	r0, #1
 8009052:	fa00 f202 	lsl.w	r2, r0, r2
 8009056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800905a:	bf00      	nop
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	e000e100 	.word	0xe000e100

0800906c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	4603      	mov	r3, r0
 8009074:	6039      	str	r1, [r7, #0]
 8009076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800907c:	2b00      	cmp	r3, #0
 800907e:	db0a      	blt.n	8009096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	b2da      	uxtb	r2, r3
 8009084:	490c      	ldr	r1, [pc, #48]	; (80090b8 <__NVIC_SetPriority+0x4c>)
 8009086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800908a:	0112      	lsls	r2, r2, #4
 800908c:	b2d2      	uxtb	r2, r2
 800908e:	440b      	add	r3, r1
 8009090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009094:	e00a      	b.n	80090ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	b2da      	uxtb	r2, r3
 800909a:	4908      	ldr	r1, [pc, #32]	; (80090bc <__NVIC_SetPriority+0x50>)
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	f003 030f 	and.w	r3, r3, #15
 80090a2:	3b04      	subs	r3, #4
 80090a4:	0112      	lsls	r2, r2, #4
 80090a6:	b2d2      	uxtb	r2, r2
 80090a8:	440b      	add	r3, r1
 80090aa:	761a      	strb	r2, [r3, #24]
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	e000e100 	.word	0xe000e100
 80090bc:	e000ed00 	.word	0xe000ed00

080090c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b089      	sub	sp, #36	; 0x24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f003 0307 	and.w	r3, r3, #7
 80090d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	f1c3 0307 	rsb	r3, r3, #7
 80090da:	2b04      	cmp	r3, #4
 80090dc:	bf28      	it	cs
 80090de:	2304      	movcs	r3, #4
 80090e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	3304      	adds	r3, #4
 80090e6:	2b06      	cmp	r3, #6
 80090e8:	d902      	bls.n	80090f0 <NVIC_EncodePriority+0x30>
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	3b03      	subs	r3, #3
 80090ee:	e000      	b.n	80090f2 <NVIC_EncodePriority+0x32>
 80090f0:	2300      	movs	r3, #0
 80090f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090f4:	f04f 32ff 	mov.w	r2, #4294967295
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	fa02 f303 	lsl.w	r3, r2, r3
 80090fe:	43da      	mvns	r2, r3
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	401a      	ands	r2, r3
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009108:	f04f 31ff 	mov.w	r1, #4294967295
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	fa01 f303 	lsl.w	r3, r1, r3
 8009112:	43d9      	mvns	r1, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009118:	4313      	orrs	r3, r2
         );
}
 800911a:	4618      	mov	r0, r3
 800911c:	3724      	adds	r7, #36	; 0x24
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7ff ff4c 	bl	8008fcc <__NVIC_SetPriorityGrouping>
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	4603      	mov	r3, r0
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800914a:	2300      	movs	r3, #0
 800914c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800914e:	f7ff ff61 	bl	8009014 <__NVIC_GetPriorityGrouping>
 8009152:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	68b9      	ldr	r1, [r7, #8]
 8009158:	6978      	ldr	r0, [r7, #20]
 800915a:	f7ff ffb1 	bl	80090c0 <NVIC_EncodePriority>
 800915e:	4602      	mov	r2, r0
 8009160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009164:	4611      	mov	r1, r2
 8009166:	4618      	mov	r0, r3
 8009168:	f7ff ff80 	bl	800906c <__NVIC_SetPriority>
}
 800916c:	bf00      	nop
 800916e:	3718      	adds	r7, #24
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	4603      	mov	r3, r0
 800917c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800917e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009182:	4618      	mov	r0, r3
 8009184:	f7ff ff54 	bl	8009030 <__NVIC_EnableIRQ>
}
 8009188:	bf00      	nop
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009190:	b480      	push	{r7}
 8009192:	b087      	sub	sp, #28
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	460b      	mov	r3, r1
 800919a:	607a      	str	r2, [r7, #4]
 800919c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80091a2:	7afb      	ldrb	r3, [r7, #11]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d103      	bne.n	80091b0 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	605a      	str	r2, [r3, #4]
      break;
 80091ae:	e002      	b.n	80091b6 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	75fb      	strb	r3, [r7, #23]
      break;
 80091b4:	bf00      	nop
  }

  return status;
 80091b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	371c      	adds	r7, #28
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d101      	bne.n	80091d8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e003      	b.n	80091e0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80091de:	2300      	movs	r3, #0
  }
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b089      	sub	sp, #36	; 0x24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80091fa:	2300      	movs	r3, #0
 80091fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80091fe:	2300      	movs	r3, #0
 8009200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009202:	2300      	movs	r3, #0
 8009204:	61fb      	str	r3, [r7, #28]
 8009206:	e159      	b.n	80094bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009208:	2201      	movs	r2, #1
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	fa02 f303 	lsl.w	r3, r2, r3
 8009210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	4013      	ands	r3, r2
 800921a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	429a      	cmp	r2, r3
 8009222:	f040 8148 	bne.w	80094b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d00b      	beq.n	8009246 <HAL_GPIO_Init+0x5a>
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	2b02      	cmp	r3, #2
 8009234:	d007      	beq.n	8009246 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800923a:	2b11      	cmp	r3, #17
 800923c:	d003      	beq.n	8009246 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	2b12      	cmp	r3, #18
 8009244:	d130      	bne.n	80092a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	005b      	lsls	r3, r3, #1
 8009250:	2203      	movs	r2, #3
 8009252:	fa02 f303 	lsl.w	r3, r2, r3
 8009256:	43db      	mvns	r3, r3
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	4013      	ands	r3, r2
 800925c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	68da      	ldr	r2, [r3, #12]
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	005b      	lsls	r3, r3, #1
 8009266:	fa02 f303 	lsl.w	r3, r2, r3
 800926a:	69ba      	ldr	r2, [r7, #24]
 800926c:	4313      	orrs	r3, r2
 800926e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	69ba      	ldr	r2, [r7, #24]
 8009274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800927c:	2201      	movs	r2, #1
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	fa02 f303 	lsl.w	r3, r2, r3
 8009284:	43db      	mvns	r3, r3
 8009286:	69ba      	ldr	r2, [r7, #24]
 8009288:	4013      	ands	r3, r2
 800928a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	091b      	lsrs	r3, r3, #4
 8009292:	f003 0201 	and.w	r2, r3, #1
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	fa02 f303 	lsl.w	r3, r2, r3
 800929c:	69ba      	ldr	r2, [r7, #24]
 800929e:	4313      	orrs	r3, r2
 80092a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	2203      	movs	r2, #3
 80092b4:	fa02 f303 	lsl.w	r3, r2, r3
 80092b8:	43db      	mvns	r3, r3
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	4013      	ands	r3, r2
 80092be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	689a      	ldr	r2, [r3, #8]
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	005b      	lsls	r3, r3, #1
 80092c8:	fa02 f303 	lsl.w	r3, r2, r3
 80092cc:	69ba      	ldr	r2, [r7, #24]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d003      	beq.n	80092e8 <HAL_GPIO_Init+0xfc>
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	2b12      	cmp	r3, #18
 80092e6:	d123      	bne.n	8009330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	08da      	lsrs	r2, r3, #3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3208      	adds	r2, #8
 80092f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	f003 0307 	and.w	r3, r3, #7
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	220f      	movs	r2, #15
 8009300:	fa02 f303 	lsl.w	r3, r2, r3
 8009304:	43db      	mvns	r3, r3
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	4013      	ands	r3, r2
 800930a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	691a      	ldr	r2, [r3, #16]
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	f003 0307 	and.w	r3, r3, #7
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	fa02 f303 	lsl.w	r3, r2, r3
 800931c:	69ba      	ldr	r2, [r7, #24]
 800931e:	4313      	orrs	r3, r2
 8009320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	08da      	lsrs	r2, r3, #3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	3208      	adds	r2, #8
 800932a:	69b9      	ldr	r1, [r7, #24]
 800932c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	2203      	movs	r2, #3
 800933c:	fa02 f303 	lsl.w	r3, r2, r3
 8009340:	43db      	mvns	r3, r3
 8009342:	69ba      	ldr	r2, [r7, #24]
 8009344:	4013      	ands	r3, r2
 8009346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	f003 0203 	and.w	r2, r3, #3
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	fa02 f303 	lsl.w	r3, r2, r3
 8009358:	69ba      	ldr	r2, [r7, #24]
 800935a:	4313      	orrs	r3, r2
 800935c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 80a2 	beq.w	80094b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009372:	2300      	movs	r3, #0
 8009374:	60fb      	str	r3, [r7, #12]
 8009376:	4b56      	ldr	r3, [pc, #344]	; (80094d0 <HAL_GPIO_Init+0x2e4>)
 8009378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800937a:	4a55      	ldr	r2, [pc, #340]	; (80094d0 <HAL_GPIO_Init+0x2e4>)
 800937c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009380:	6453      	str	r3, [r2, #68]	; 0x44
 8009382:	4b53      	ldr	r3, [pc, #332]	; (80094d0 <HAL_GPIO_Init+0x2e4>)
 8009384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800938e:	4a51      	ldr	r2, [pc, #324]	; (80094d4 <HAL_GPIO_Init+0x2e8>)
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	089b      	lsrs	r3, r3, #2
 8009394:	3302      	adds	r3, #2
 8009396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800939a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	f003 0303 	and.w	r3, r3, #3
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	220f      	movs	r2, #15
 80093a6:	fa02 f303 	lsl.w	r3, r2, r3
 80093aa:	43db      	mvns	r3, r3
 80093ac:	69ba      	ldr	r2, [r7, #24]
 80093ae:	4013      	ands	r3, r2
 80093b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a48      	ldr	r2, [pc, #288]	; (80094d8 <HAL_GPIO_Init+0x2ec>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d019      	beq.n	80093ee <HAL_GPIO_Init+0x202>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a47      	ldr	r2, [pc, #284]	; (80094dc <HAL_GPIO_Init+0x2f0>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d013      	beq.n	80093ea <HAL_GPIO_Init+0x1fe>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a46      	ldr	r2, [pc, #280]	; (80094e0 <HAL_GPIO_Init+0x2f4>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d00d      	beq.n	80093e6 <HAL_GPIO_Init+0x1fa>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a45      	ldr	r2, [pc, #276]	; (80094e4 <HAL_GPIO_Init+0x2f8>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d007      	beq.n	80093e2 <HAL_GPIO_Init+0x1f6>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a44      	ldr	r2, [pc, #272]	; (80094e8 <HAL_GPIO_Init+0x2fc>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d101      	bne.n	80093de <HAL_GPIO_Init+0x1f2>
 80093da:	2304      	movs	r3, #4
 80093dc:	e008      	b.n	80093f0 <HAL_GPIO_Init+0x204>
 80093de:	2307      	movs	r3, #7
 80093e0:	e006      	b.n	80093f0 <HAL_GPIO_Init+0x204>
 80093e2:	2303      	movs	r3, #3
 80093e4:	e004      	b.n	80093f0 <HAL_GPIO_Init+0x204>
 80093e6:	2302      	movs	r3, #2
 80093e8:	e002      	b.n	80093f0 <HAL_GPIO_Init+0x204>
 80093ea:	2301      	movs	r3, #1
 80093ec:	e000      	b.n	80093f0 <HAL_GPIO_Init+0x204>
 80093ee:	2300      	movs	r3, #0
 80093f0:	69fa      	ldr	r2, [r7, #28]
 80093f2:	f002 0203 	and.w	r2, r2, #3
 80093f6:	0092      	lsls	r2, r2, #2
 80093f8:	4093      	lsls	r3, r2
 80093fa:	69ba      	ldr	r2, [r7, #24]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009400:	4934      	ldr	r1, [pc, #208]	; (80094d4 <HAL_GPIO_Init+0x2e8>)
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	089b      	lsrs	r3, r3, #2
 8009406:	3302      	adds	r3, #2
 8009408:	69ba      	ldr	r2, [r7, #24]
 800940a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800940e:	4b37      	ldr	r3, [pc, #220]	; (80094ec <HAL_GPIO_Init+0x300>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	43db      	mvns	r3, r3
 8009418:	69ba      	ldr	r2, [r7, #24]
 800941a:	4013      	ands	r3, r2
 800941c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	4313      	orrs	r3, r2
 8009430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009432:	4a2e      	ldr	r2, [pc, #184]	; (80094ec <HAL_GPIO_Init+0x300>)
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009438:	4b2c      	ldr	r3, [pc, #176]	; (80094ec <HAL_GPIO_Init+0x300>)
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	43db      	mvns	r3, r3
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	4013      	ands	r3, r2
 8009446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d003      	beq.n	800945c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009454:	69ba      	ldr	r2, [r7, #24]
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	4313      	orrs	r3, r2
 800945a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800945c:	4a23      	ldr	r2, [pc, #140]	; (80094ec <HAL_GPIO_Init+0x300>)
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009462:	4b22      	ldr	r3, [pc, #136]	; (80094ec <HAL_GPIO_Init+0x300>)
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	43db      	mvns	r3, r3
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	4013      	ands	r3, r2
 8009470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800947a:	2b00      	cmp	r3, #0
 800947c:	d003      	beq.n	8009486 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800947e:	69ba      	ldr	r2, [r7, #24]
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	4313      	orrs	r3, r2
 8009484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009486:	4a19      	ldr	r2, [pc, #100]	; (80094ec <HAL_GPIO_Init+0x300>)
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800948c:	4b17      	ldr	r3, [pc, #92]	; (80094ec <HAL_GPIO_Init+0x300>)
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	43db      	mvns	r3, r3
 8009496:	69ba      	ldr	r2, [r7, #24]
 8009498:	4013      	ands	r3, r2
 800949a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d003      	beq.n	80094b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80094a8:	69ba      	ldr	r2, [r7, #24]
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80094b0:	4a0e      	ldr	r2, [pc, #56]	; (80094ec <HAL_GPIO_Init+0x300>)
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	3301      	adds	r3, #1
 80094ba:	61fb      	str	r3, [r7, #28]
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	2b0f      	cmp	r3, #15
 80094c0:	f67f aea2 	bls.w	8009208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80094c4:	bf00      	nop
 80094c6:	3724      	adds	r7, #36	; 0x24
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	40023800 	.word	0x40023800
 80094d4:	40013800 	.word	0x40013800
 80094d8:	40020000 	.word	0x40020000
 80094dc:	40020400 	.word	0x40020400
 80094e0:	40020800 	.word	0x40020800
 80094e4:	40020c00 	.word	0x40020c00
 80094e8:	40021000 	.word	0x40021000
 80094ec:	40013c00 	.word	0x40013c00

080094f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b087      	sub	sp, #28
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80094fe:	2300      	movs	r3, #0
 8009500:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8009502:	2300      	movs	r3, #0
 8009504:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009506:	2300      	movs	r3, #0
 8009508:	617b      	str	r3, [r7, #20]
 800950a:	e0bb      	b.n	8009684 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800950c:	2201      	movs	r2, #1
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	fa02 f303 	lsl.w	r3, r2, r3
 8009514:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	4013      	ands	r3, r2
 800951c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	429a      	cmp	r2, r3
 8009524:	f040 80ab 	bne.w	800967e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009528:	4a5b      	ldr	r2, [pc, #364]	; (8009698 <HAL_GPIO_DeInit+0x1a8>)
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	089b      	lsrs	r3, r3, #2
 800952e:	3302      	adds	r3, #2
 8009530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009534:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f003 0303 	and.w	r3, r3, #3
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	220f      	movs	r2, #15
 8009540:	fa02 f303 	lsl.w	r3, r2, r3
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	4013      	ands	r3, r2
 8009548:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a53      	ldr	r2, [pc, #332]	; (800969c <HAL_GPIO_DeInit+0x1ac>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d019      	beq.n	8009586 <HAL_GPIO_DeInit+0x96>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a52      	ldr	r2, [pc, #328]	; (80096a0 <HAL_GPIO_DeInit+0x1b0>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d013      	beq.n	8009582 <HAL_GPIO_DeInit+0x92>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a51      	ldr	r2, [pc, #324]	; (80096a4 <HAL_GPIO_DeInit+0x1b4>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d00d      	beq.n	800957e <HAL_GPIO_DeInit+0x8e>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a50      	ldr	r2, [pc, #320]	; (80096a8 <HAL_GPIO_DeInit+0x1b8>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d007      	beq.n	800957a <HAL_GPIO_DeInit+0x8a>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a4f      	ldr	r2, [pc, #316]	; (80096ac <HAL_GPIO_DeInit+0x1bc>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d101      	bne.n	8009576 <HAL_GPIO_DeInit+0x86>
 8009572:	2304      	movs	r3, #4
 8009574:	e008      	b.n	8009588 <HAL_GPIO_DeInit+0x98>
 8009576:	2307      	movs	r3, #7
 8009578:	e006      	b.n	8009588 <HAL_GPIO_DeInit+0x98>
 800957a:	2303      	movs	r3, #3
 800957c:	e004      	b.n	8009588 <HAL_GPIO_DeInit+0x98>
 800957e:	2302      	movs	r3, #2
 8009580:	e002      	b.n	8009588 <HAL_GPIO_DeInit+0x98>
 8009582:	2301      	movs	r3, #1
 8009584:	e000      	b.n	8009588 <HAL_GPIO_DeInit+0x98>
 8009586:	2300      	movs	r3, #0
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	f002 0203 	and.w	r2, r2, #3
 800958e:	0092      	lsls	r2, r2, #2
 8009590:	4093      	lsls	r3, r2
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	429a      	cmp	r2, r3
 8009596:	d132      	bne.n	80095fe <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009598:	4b45      	ldr	r3, [pc, #276]	; (80096b0 <HAL_GPIO_DeInit+0x1c0>)
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	43db      	mvns	r3, r3
 80095a0:	4943      	ldr	r1, [pc, #268]	; (80096b0 <HAL_GPIO_DeInit+0x1c0>)
 80095a2:	4013      	ands	r3, r2
 80095a4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80095a6:	4b42      	ldr	r3, [pc, #264]	; (80096b0 <HAL_GPIO_DeInit+0x1c0>)
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	43db      	mvns	r3, r3
 80095ae:	4940      	ldr	r1, [pc, #256]	; (80096b0 <HAL_GPIO_DeInit+0x1c0>)
 80095b0:	4013      	ands	r3, r2
 80095b2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80095b4:	4b3e      	ldr	r3, [pc, #248]	; (80096b0 <HAL_GPIO_DeInit+0x1c0>)
 80095b6:	689a      	ldr	r2, [r3, #8]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	43db      	mvns	r3, r3
 80095bc:	493c      	ldr	r1, [pc, #240]	; (80096b0 <HAL_GPIO_DeInit+0x1c0>)
 80095be:	4013      	ands	r3, r2
 80095c0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80095c2:	4b3b      	ldr	r3, [pc, #236]	; (80096b0 <HAL_GPIO_DeInit+0x1c0>)
 80095c4:	68da      	ldr	r2, [r3, #12]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	43db      	mvns	r3, r3
 80095ca:	4939      	ldr	r1, [pc, #228]	; (80096b0 <HAL_GPIO_DeInit+0x1c0>)
 80095cc:	4013      	ands	r3, r2
 80095ce:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	f003 0303 	and.w	r3, r3, #3
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	220f      	movs	r2, #15
 80095da:	fa02 f303 	lsl.w	r3, r2, r3
 80095de:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80095e0:	4a2d      	ldr	r2, [pc, #180]	; (8009698 <HAL_GPIO_DeInit+0x1a8>)
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	089b      	lsrs	r3, r3, #2
 80095e6:	3302      	adds	r3, #2
 80095e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	43da      	mvns	r2, r3
 80095f0:	4829      	ldr	r0, [pc, #164]	; (8009698 <HAL_GPIO_DeInit+0x1a8>)
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	089b      	lsrs	r3, r3, #2
 80095f6:	400a      	ands	r2, r1
 80095f8:	3302      	adds	r3, #2
 80095fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	005b      	lsls	r3, r3, #1
 8009606:	2103      	movs	r1, #3
 8009608:	fa01 f303 	lsl.w	r3, r1, r3
 800960c:	43db      	mvns	r3, r3
 800960e:	401a      	ands	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	08da      	lsrs	r2, r3, #3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	3208      	adds	r2, #8
 800961c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	f003 0307 	and.w	r3, r3, #7
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	220f      	movs	r2, #15
 800962a:	fa02 f303 	lsl.w	r3, r2, r3
 800962e:	43db      	mvns	r3, r3
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	08d2      	lsrs	r2, r2, #3
 8009634:	4019      	ands	r1, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	3208      	adds	r2, #8
 800963a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	68da      	ldr	r2, [r3, #12]
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	005b      	lsls	r3, r3, #1
 8009646:	2103      	movs	r1, #3
 8009648:	fa01 f303 	lsl.w	r3, r1, r3
 800964c:	43db      	mvns	r3, r3
 800964e:	401a      	ands	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	2101      	movs	r1, #1
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	fa01 f303 	lsl.w	r3, r1, r3
 8009660:	43db      	mvns	r3, r3
 8009662:	401a      	ands	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689a      	ldr	r2, [r3, #8]
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	005b      	lsls	r3, r3, #1
 8009670:	2103      	movs	r1, #3
 8009672:	fa01 f303 	lsl.w	r3, r1, r3
 8009676:	43db      	mvns	r3, r3
 8009678:	401a      	ands	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	3301      	adds	r3, #1
 8009682:	617b      	str	r3, [r7, #20]
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	2b0f      	cmp	r3, #15
 8009688:	f67f af40 	bls.w	800950c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800968c:	bf00      	nop
 800968e:	371c      	adds	r7, #28
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	40013800 	.word	0x40013800
 800969c:	40020000 	.word	0x40020000
 80096a0:	40020400 	.word	0x40020400
 80096a4:	40020800 	.word	0x40020800
 80096a8:	40020c00 	.word	0x40020c00
 80096ac:	40021000 	.word	0x40021000
 80096b0:	40013c00 	.word	0x40013c00

080096b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	460b      	mov	r3, r1
 80096be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	691a      	ldr	r2, [r3, #16]
 80096c4:	887b      	ldrh	r3, [r7, #2]
 80096c6:	4013      	ands	r3, r2
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80096cc:	2301      	movs	r3, #1
 80096ce:	73fb      	strb	r3, [r7, #15]
 80096d0:	e001      	b.n	80096d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80096d2:	2300      	movs	r3, #0
 80096d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	807b      	strh	r3, [r7, #2]
 80096f0:	4613      	mov	r3, r2
 80096f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80096f4:	787b      	ldrb	r3, [r7, #1]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80096fa:	887a      	ldrh	r2, [r7, #2]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009700:	e003      	b.n	800970a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009702:	887b      	ldrh	r3, [r7, #2]
 8009704:	041a      	lsls	r2, r3, #16
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	619a      	str	r2, [r3, #24]
}
 800970a:	bf00      	nop
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
	...

08009718 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e11f      	b.n	800996a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b00      	cmp	r3, #0
 8009734:	d106      	bne.n	8009744 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f951 	bl	80099e6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2224      	movs	r2, #36	; 0x24
 8009748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f022 0201 	bic.w	r2, r2, #1
 800975a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800976a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800977a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800977c:	f001 fc18 	bl	800afb0 <HAL_RCC_GetPCLK1Freq>
 8009780:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	4a7b      	ldr	r2, [pc, #492]	; (8009974 <HAL_I2C_Init+0x25c>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d807      	bhi.n	800979c <HAL_I2C_Init+0x84>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	4a7a      	ldr	r2, [pc, #488]	; (8009978 <HAL_I2C_Init+0x260>)
 8009790:	4293      	cmp	r3, r2
 8009792:	bf94      	ite	ls
 8009794:	2301      	movls	r3, #1
 8009796:	2300      	movhi	r3, #0
 8009798:	b2db      	uxtb	r3, r3
 800979a:	e006      	b.n	80097aa <HAL_I2C_Init+0x92>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4a77      	ldr	r2, [pc, #476]	; (800997c <HAL_I2C_Init+0x264>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	bf94      	ite	ls
 80097a4:	2301      	movls	r3, #1
 80097a6:	2300      	movhi	r3, #0
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d001      	beq.n	80097b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e0db      	b.n	800996a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	4a72      	ldr	r2, [pc, #456]	; (8009980 <HAL_I2C_Init+0x268>)
 80097b6:	fba2 2303 	umull	r2, r3, r2, r3
 80097ba:	0c9b      	lsrs	r3, r3, #18
 80097bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	430a      	orrs	r2, r1
 80097d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	4a64      	ldr	r2, [pc, #400]	; (8009974 <HAL_I2C_Init+0x25c>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d802      	bhi.n	80097ec <HAL_I2C_Init+0xd4>
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	3301      	adds	r3, #1
 80097ea:	e009      	b.n	8009800 <HAL_I2C_Init+0xe8>
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80097f2:	fb02 f303 	mul.w	r3, r2, r3
 80097f6:	4a63      	ldr	r2, [pc, #396]	; (8009984 <HAL_I2C_Init+0x26c>)
 80097f8:	fba2 2303 	umull	r2, r3, r2, r3
 80097fc:	099b      	lsrs	r3, r3, #6
 80097fe:	3301      	adds	r3, #1
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	6812      	ldr	r2, [r2, #0]
 8009804:	430b      	orrs	r3, r1
 8009806:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	69db      	ldr	r3, [r3, #28]
 800980e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009812:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	4956      	ldr	r1, [pc, #344]	; (8009974 <HAL_I2C_Init+0x25c>)
 800981c:	428b      	cmp	r3, r1
 800981e:	d80d      	bhi.n	800983c <HAL_I2C_Init+0x124>
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	1e59      	subs	r1, r3, #1
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	005b      	lsls	r3, r3, #1
 800982a:	fbb1 f3f3 	udiv	r3, r1, r3
 800982e:	3301      	adds	r3, #1
 8009830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009834:	2b04      	cmp	r3, #4
 8009836:	bf38      	it	cc
 8009838:	2304      	movcc	r3, #4
 800983a:	e04f      	b.n	80098dc <HAL_I2C_Init+0x1c4>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d111      	bne.n	8009868 <HAL_I2C_Init+0x150>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	1e58      	subs	r0, r3, #1
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6859      	ldr	r1, [r3, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	005b      	lsls	r3, r3, #1
 8009850:	440b      	add	r3, r1
 8009852:	fbb0 f3f3 	udiv	r3, r0, r3
 8009856:	3301      	adds	r3, #1
 8009858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800985c:	2b00      	cmp	r3, #0
 800985e:	bf0c      	ite	eq
 8009860:	2301      	moveq	r3, #1
 8009862:	2300      	movne	r3, #0
 8009864:	b2db      	uxtb	r3, r3
 8009866:	e012      	b.n	800988e <HAL_I2C_Init+0x176>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	1e58      	subs	r0, r3, #1
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6859      	ldr	r1, [r3, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	440b      	add	r3, r1
 8009876:	0099      	lsls	r1, r3, #2
 8009878:	440b      	add	r3, r1
 800987a:	fbb0 f3f3 	udiv	r3, r0, r3
 800987e:	3301      	adds	r3, #1
 8009880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009884:	2b00      	cmp	r3, #0
 8009886:	bf0c      	ite	eq
 8009888:	2301      	moveq	r3, #1
 800988a:	2300      	movne	r3, #0
 800988c:	b2db      	uxtb	r3, r3
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <HAL_I2C_Init+0x17e>
 8009892:	2301      	movs	r3, #1
 8009894:	e022      	b.n	80098dc <HAL_I2C_Init+0x1c4>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10e      	bne.n	80098bc <HAL_I2C_Init+0x1a4>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	1e58      	subs	r0, r3, #1
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6859      	ldr	r1, [r3, #4]
 80098a6:	460b      	mov	r3, r1
 80098a8:	005b      	lsls	r3, r3, #1
 80098aa:	440b      	add	r3, r1
 80098ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80098b0:	3301      	adds	r3, #1
 80098b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098ba:	e00f      	b.n	80098dc <HAL_I2C_Init+0x1c4>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	1e58      	subs	r0, r3, #1
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6859      	ldr	r1, [r3, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	440b      	add	r3, r1
 80098ca:	0099      	lsls	r1, r3, #2
 80098cc:	440b      	add	r3, r1
 80098ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80098d2:	3301      	adds	r3, #1
 80098d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098dc:	6879      	ldr	r1, [r7, #4]
 80098de:	6809      	ldr	r1, [r1, #0]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	69da      	ldr	r2, [r3, #28]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a1b      	ldr	r3, [r3, #32]
 80098f6:	431a      	orrs	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	430a      	orrs	r2, r1
 80098fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800990a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	6911      	ldr	r1, [r2, #16]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	68d2      	ldr	r2, [r2, #12]
 8009916:	4311      	orrs	r1, r2
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	6812      	ldr	r2, [r2, #0]
 800991c:	430b      	orrs	r3, r1
 800991e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	695a      	ldr	r2, [r3, #20]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	431a      	orrs	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	430a      	orrs	r2, r1
 800993a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f042 0201 	orr.w	r2, r2, #1
 800994a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2220      	movs	r2, #32
 8009956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	000186a0 	.word	0x000186a0
 8009978:	001e847f 	.word	0x001e847f
 800997c:	003d08ff 	.word	0x003d08ff
 8009980:	431bde83 	.word	0x431bde83
 8009984:	10624dd3 	.word	0x10624dd3

08009988 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d101      	bne.n	800999a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e021      	b.n	80099de <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2224      	movs	r2, #36	; 0x24
 800999e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f022 0201 	bic.w	r2, r2, #1
 80099b0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f821 	bl	80099fa <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80099ee:	bf00      	nop
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80099fa:	b480      	push	{r7}
 80099fc:	b083      	sub	sp, #12
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009a02:	bf00      	nop
 8009a04:	370c      	adds	r7, #12
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
	...

08009a10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b088      	sub	sp, #32
 8009a14:	af02      	add	r7, sp, #8
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	4608      	mov	r0, r1
 8009a1a:	4611      	mov	r1, r2
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	4603      	mov	r3, r0
 8009a20:	817b      	strh	r3, [r7, #10]
 8009a22:	460b      	mov	r3, r1
 8009a24:	813b      	strh	r3, [r7, #8]
 8009a26:	4613      	mov	r3, r2
 8009a28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009a2a:	f7ff faa1 	bl	8008f70 <HAL_GetTick>
 8009a2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	2b20      	cmp	r3, #32
 8009a3a:	f040 80d9 	bne.w	8009bf0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	2319      	movs	r3, #25
 8009a44:	2201      	movs	r2, #1
 8009a46:	496d      	ldr	r1, [pc, #436]	; (8009bfc <HAL_I2C_Mem_Write+0x1ec>)
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f000 fc99 	bl	800a380 <I2C_WaitOnFlagUntilTimeout>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d001      	beq.n	8009a58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009a54:	2302      	movs	r3, #2
 8009a56:	e0cc      	b.n	8009bf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d101      	bne.n	8009a66 <HAL_I2C_Mem_Write+0x56>
 8009a62:	2302      	movs	r3, #2
 8009a64:	e0c5      	b.n	8009bf2 <HAL_I2C_Mem_Write+0x1e2>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d007      	beq.n	8009a8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f042 0201 	orr.w	r2, r2, #1
 8009a8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2221      	movs	r2, #33	; 0x21
 8009aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2240      	movs	r2, #64	; 0x40
 8009aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6a3a      	ldr	r2, [r7, #32]
 8009ab6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009abc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	4a4d      	ldr	r2, [pc, #308]	; (8009c00 <HAL_I2C_Mem_Write+0x1f0>)
 8009acc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009ace:	88f8      	ldrh	r0, [r7, #6]
 8009ad0:	893a      	ldrh	r2, [r7, #8]
 8009ad2:	8979      	ldrh	r1, [r7, #10]
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	9301      	str	r3, [sp, #4]
 8009ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	4603      	mov	r3, r0
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 fad0 	bl	800a084 <I2C_RequestMemoryWrite>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d052      	beq.n	8009b90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e081      	b.n	8009bf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f000 fd1a 	bl	800a52c <I2C_WaitOnTXEFlagUntilTimeout>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00d      	beq.n	8009b1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b02:	2b04      	cmp	r3, #4
 8009b04:	d107      	bne.n	8009b16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e06b      	b.n	8009bf2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1e:	781a      	ldrb	r2, [r3, #0]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b34:	3b01      	subs	r3, #1
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	3b01      	subs	r3, #1
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	f003 0304 	and.w	r3, r3, #4
 8009b54:	2b04      	cmp	r3, #4
 8009b56:	d11b      	bne.n	8009b90 <HAL_I2C_Mem_Write+0x180>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d017      	beq.n	8009b90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	781a      	ldrb	r2, [r3, #0]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1aa      	bne.n	8009aee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f000 fd06 	bl	800a5ae <I2C_WaitOnBTFFlagUntilTimeout>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00d      	beq.n	8009bc4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bac:	2b04      	cmp	r3, #4
 8009bae:	d107      	bne.n	8009bc0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bbe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e016      	b.n	8009bf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2220      	movs	r2, #32
 8009bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	e000      	b.n	8009bf2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009bf0:	2302      	movs	r3, #2
  }
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3718      	adds	r7, #24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	00100002 	.word	0x00100002
 8009c00:	ffff0000 	.word	0xffff0000

08009c04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b08c      	sub	sp, #48	; 0x30
 8009c08:	af02      	add	r7, sp, #8
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	4608      	mov	r0, r1
 8009c0e:	4611      	mov	r1, r2
 8009c10:	461a      	mov	r2, r3
 8009c12:	4603      	mov	r3, r0
 8009c14:	817b      	strh	r3, [r7, #10]
 8009c16:	460b      	mov	r3, r1
 8009c18:	813b      	strh	r3, [r7, #8]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009c1e:	f7ff f9a7 	bl	8008f70 <HAL_GetTick>
 8009c22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	f040 8208 	bne.w	800a042 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	2319      	movs	r3, #25
 8009c38:	2201      	movs	r2, #1
 8009c3a:	497b      	ldr	r1, [pc, #492]	; (8009e28 <HAL_I2C_Mem_Read+0x224>)
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f000 fb9f 	bl	800a380 <I2C_WaitOnFlagUntilTimeout>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d001      	beq.n	8009c4c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009c48:	2302      	movs	r3, #2
 8009c4a:	e1fb      	b.n	800a044 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d101      	bne.n	8009c5a <HAL_I2C_Mem_Read+0x56>
 8009c56:	2302      	movs	r3, #2
 8009c58:	e1f4      	b.n	800a044 <HAL_I2C_Mem_Read+0x440>
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 0301 	and.w	r3, r3, #1
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d007      	beq.n	8009c80 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f042 0201 	orr.w	r2, r2, #1
 8009c7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2222      	movs	r2, #34	; 0x22
 8009c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2240      	movs	r2, #64	; 0x40
 8009c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009caa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4a5b      	ldr	r2, [pc, #364]	; (8009e2c <HAL_I2C_Mem_Read+0x228>)
 8009cc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009cc2:	88f8      	ldrh	r0, [r7, #6]
 8009cc4:	893a      	ldrh	r2, [r7, #8]
 8009cc6:	8979      	ldrh	r1, [r7, #10]
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cca:	9301      	str	r3, [sp, #4]
 8009ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f000 fa6c 	bl	800a1b0 <I2C_RequestMemoryRead>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e1b0      	b.n	800a044 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d113      	bne.n	8009d12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cea:	2300      	movs	r3, #0
 8009cec:	623b      	str	r3, [r7, #32]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	695b      	ldr	r3, [r3, #20]
 8009cf4:	623b      	str	r3, [r7, #32]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	699b      	ldr	r3, [r3, #24]
 8009cfc:	623b      	str	r3, [r7, #32]
 8009cfe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	e184      	b.n	800a01c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d11b      	bne.n	8009d52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	61fb      	str	r3, [r7, #28]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	61fb      	str	r3, [r7, #28]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	61fb      	str	r3, [r7, #28]
 8009d3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d4e:	601a      	str	r2, [r3, #0]
 8009d50:	e164      	b.n	800a01c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d11b      	bne.n	8009d92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	61bb      	str	r3, [r7, #24]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	695b      	ldr	r3, [r3, #20]
 8009d84:	61bb      	str	r3, [r7, #24]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	61bb      	str	r3, [r7, #24]
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	e144      	b.n	800a01c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d92:	2300      	movs	r3, #0
 8009d94:	617b      	str	r3, [r7, #20]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	695b      	ldr	r3, [r3, #20]
 8009d9c:	617b      	str	r3, [r7, #20]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	617b      	str	r3, [r7, #20]
 8009da6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009da8:	e138      	b.n	800a01c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	f200 80f1 	bhi.w	8009f96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d123      	bne.n	8009e04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 fc35 	bl	800a630 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e139      	b.n	800a044 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	691a      	ldr	r2, [r3, #16]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dda:	b2d2      	uxtb	r2, r2
 8009ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dec:	3b01      	subs	r3, #1
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e02:	e10b      	b.n	800a01c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	d14e      	bne.n	8009eaa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e12:	2200      	movs	r2, #0
 8009e14:	4906      	ldr	r1, [pc, #24]	; (8009e30 <HAL_I2C_Mem_Read+0x22c>)
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f000 fab2 	bl	800a380 <I2C_WaitOnFlagUntilTimeout>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d008      	beq.n	8009e34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e10e      	b.n	800a044 <HAL_I2C_Mem_Read+0x440>
 8009e26:	bf00      	nop
 8009e28:	00100002 	.word	0x00100002
 8009e2c:	ffff0000 	.word	0xffff0000
 8009e30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	691a      	ldr	r2, [r3, #16]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4e:	b2d2      	uxtb	r2, r2
 8009e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e60:	3b01      	subs	r3, #1
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	691a      	ldr	r2, [r3, #16]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	b2d2      	uxtb	r2, r2
 8009e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e88:	1c5a      	adds	r2, r3, #1
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e92:	3b01      	subs	r3, #1
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ea8:	e0b8      	b.n	800a01c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	4966      	ldr	r1, [pc, #408]	; (800a04c <HAL_I2C_Mem_Read+0x448>)
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f000 fa63 	bl	800a380 <I2C_WaitOnFlagUntilTimeout>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e0bf      	b.n	800a044 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ed2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	691a      	ldr	r2, [r3, #16]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ede:	b2d2      	uxtb	r2, r2
 8009ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee6:	1c5a      	adds	r2, r3, #1
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	3b01      	subs	r3, #1
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	494f      	ldr	r1, [pc, #316]	; (800a04c <HAL_I2C_Mem_Read+0x448>)
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 fa35 	bl	800a380 <I2C_WaitOnFlagUntilTimeout>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d001      	beq.n	8009f20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e091      	b.n	800a044 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	691a      	ldr	r2, [r3, #16]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3a:	b2d2      	uxtb	r2, r2
 8009f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	691a      	ldr	r2, [r3, #16]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6c:	b2d2      	uxtb	r2, r2
 8009f6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	1c5a      	adds	r2, r3, #1
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f94:	e042      	b.n	800a01c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f000 fb48 	bl	800a630 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e04c      	b.n	800a044 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	691a      	ldr	r2, [r3, #16]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb4:	b2d2      	uxtb	r2, r2
 8009fb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbc:	1c5a      	adds	r2, r3, #1
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	f003 0304 	and.w	r3, r3, #4
 8009fe6:	2b04      	cmp	r3, #4
 8009fe8:	d118      	bne.n	800a01c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	691a      	ldr	r2, [r3, #16]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff4:	b2d2      	uxtb	r2, r2
 8009ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffc:	1c5a      	adds	r2, r3, #1
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a006:	3b01      	subs	r3, #1
 800a008:	b29a      	uxth	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a012:	b29b      	uxth	r3, r3
 800a014:	3b01      	subs	r3, #1
 800a016:	b29a      	uxth	r2, r3
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a020:	2b00      	cmp	r3, #0
 800a022:	f47f aec2 	bne.w	8009daa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2220      	movs	r2, #32
 800a02a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	e000      	b.n	800a044 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a042:	2302      	movs	r3, #2
  }
}
 800a044:	4618      	mov	r0, r3
 800a046:	3728      	adds	r7, #40	; 0x28
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	00010004 	.word	0x00010004

0800a050 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a05e:	b2db      	uxtb	r3, r3
}
 800a060:	4618      	mov	r0, r3
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a078:	4618      	mov	r0, r3
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af02      	add	r7, sp, #8
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	4608      	mov	r0, r1
 800a08e:	4611      	mov	r1, r2
 800a090:	461a      	mov	r2, r3
 800a092:	4603      	mov	r3, r0
 800a094:	817b      	strh	r3, [r7, #10]
 800a096:	460b      	mov	r3, r1
 800a098:	813b      	strh	r3, [r7, #8]
 800a09a:	4613      	mov	r3, r2
 800a09c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f000 f960 	bl	800a380 <I2C_WaitOnFlagUntilTimeout>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00d      	beq.n	800a0e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d4:	d103      	bne.n	800a0de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e05f      	b.n	800a1a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0e2:	897b      	ldrh	r3, [r7, #10]
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f4:	6a3a      	ldr	r2, [r7, #32]
 800a0f6:	492d      	ldr	r1, [pc, #180]	; (800a1ac <I2C_RequestMemoryWrite+0x128>)
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f000 f998 	bl	800a42e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e04c      	b.n	800a1a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a108:	2300      	movs	r3, #0
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	695b      	ldr	r3, [r3, #20]
 800a112:	617b      	str	r3, [r7, #20]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	617b      	str	r3, [r7, #20]
 800a11c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a11e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a120:	6a39      	ldr	r1, [r7, #32]
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 fa02 	bl	800a52c <I2C_WaitOnTXEFlagUntilTimeout>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00d      	beq.n	800a14a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a132:	2b04      	cmp	r3, #4
 800a134:	d107      	bne.n	800a146 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a144:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e02b      	b.n	800a1a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a14a:	88fb      	ldrh	r3, [r7, #6]
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d105      	bne.n	800a15c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a150:	893b      	ldrh	r3, [r7, #8]
 800a152:	b2da      	uxtb	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	611a      	str	r2, [r3, #16]
 800a15a:	e021      	b.n	800a1a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a15c:	893b      	ldrh	r3, [r7, #8]
 800a15e:	0a1b      	lsrs	r3, r3, #8
 800a160:	b29b      	uxth	r3, r3
 800a162:	b2da      	uxtb	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a16a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a16c:	6a39      	ldr	r1, [r7, #32]
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f000 f9dc 	bl	800a52c <I2C_WaitOnTXEFlagUntilTimeout>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00d      	beq.n	800a196 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17e:	2b04      	cmp	r3, #4
 800a180:	d107      	bne.n	800a192 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a190:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e005      	b.n	800a1a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a196:	893b      	ldrh	r3, [r7, #8]
 800a198:	b2da      	uxtb	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3718      	adds	r7, #24
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	00010002 	.word	0x00010002

0800a1b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b088      	sub	sp, #32
 800a1b4:	af02      	add	r7, sp, #8
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	4608      	mov	r0, r1
 800a1ba:	4611      	mov	r1, r2
 800a1bc:	461a      	mov	r2, r3
 800a1be:	4603      	mov	r3, r0
 800a1c0:	817b      	strh	r3, [r7, #10]
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	813b      	strh	r3, [r7, #8]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a1d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f000 f8c2 	bl	800a380 <I2C_WaitOnFlagUntilTimeout>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00d      	beq.n	800a21e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a20c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a210:	d103      	bne.n	800a21a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a218:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a21a:	2303      	movs	r3, #3
 800a21c:	e0aa      	b.n	800a374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a21e:	897b      	ldrh	r3, [r7, #10]
 800a220:	b2db      	uxtb	r3, r3
 800a222:	461a      	mov	r2, r3
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a22c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a230:	6a3a      	ldr	r2, [r7, #32]
 800a232:	4952      	ldr	r1, [pc, #328]	; (800a37c <I2C_RequestMemoryRead+0x1cc>)
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 f8fa 	bl	800a42e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	e097      	b.n	800a374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a244:	2300      	movs	r3, #0
 800a246:	617b      	str	r3, [r7, #20]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	695b      	ldr	r3, [r3, #20]
 800a24e:	617b      	str	r3, [r7, #20]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	699b      	ldr	r3, [r3, #24]
 800a256:	617b      	str	r3, [r7, #20]
 800a258:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a25c:	6a39      	ldr	r1, [r7, #32]
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f000 f964 	bl	800a52c <I2C_WaitOnTXEFlagUntilTimeout>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00d      	beq.n	800a286 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26e:	2b04      	cmp	r3, #4
 800a270:	d107      	bne.n	800a282 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a280:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	e076      	b.n	800a374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a286:	88fb      	ldrh	r3, [r7, #6]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d105      	bne.n	800a298 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a28c:	893b      	ldrh	r3, [r7, #8]
 800a28e:	b2da      	uxtb	r2, r3
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	611a      	str	r2, [r3, #16]
 800a296:	e021      	b.n	800a2dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a298:	893b      	ldrh	r3, [r7, #8]
 800a29a:	0a1b      	lsrs	r3, r3, #8
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a8:	6a39      	ldr	r1, [r7, #32]
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 f93e 	bl	800a52c <I2C_WaitOnTXEFlagUntilTimeout>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00d      	beq.n	800a2d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ba:	2b04      	cmp	r3, #4
 800a2bc:	d107      	bne.n	800a2ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e050      	b.n	800a374 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2d2:	893b      	ldrh	r3, [r7, #8]
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2de:	6a39      	ldr	r1, [r7, #32]
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f000 f923 	bl	800a52c <I2C_WaitOnTXEFlagUntilTimeout>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00d      	beq.n	800a308 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f0:	2b04      	cmp	r3, #4
 800a2f2:	d107      	bne.n	800a304 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a302:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	e035      	b.n	800a374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a316:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	2200      	movs	r2, #0
 800a320:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 f82b 	bl	800a380 <I2C_WaitOnFlagUntilTimeout>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00d      	beq.n	800a34c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a33a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a33e:	d103      	bne.n	800a348 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a346:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a348:	2303      	movs	r3, #3
 800a34a:	e013      	b.n	800a374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a34c:	897b      	ldrh	r3, [r7, #10]
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	f043 0301 	orr.w	r3, r3, #1
 800a354:	b2da      	uxtb	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	6a3a      	ldr	r2, [r7, #32]
 800a360:	4906      	ldr	r1, [pc, #24]	; (800a37c <I2C_RequestMemoryRead+0x1cc>)
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f000 f863 	bl	800a42e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	e000      	b.n	800a374 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3718      	adds	r7, #24
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	00010002 	.word	0x00010002

0800a380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	603b      	str	r3, [r7, #0]
 800a38c:	4613      	mov	r3, r2
 800a38e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a390:	e025      	b.n	800a3de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a398:	d021      	beq.n	800a3de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a39a:	f7fe fde9 	bl	8008f70 <HAL_GetTick>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d302      	bcc.n	800a3b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d116      	bne.n	800a3de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2220      	movs	r2, #32
 800a3ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ca:	f043 0220 	orr.w	r2, r3, #32
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e023      	b.n	800a426 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	0c1b      	lsrs	r3, r3, #16
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d10d      	bne.n	800a404 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	43da      	mvns	r2, r3
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	bf0c      	ite	eq
 800a3fa:	2301      	moveq	r3, #1
 800a3fc:	2300      	movne	r3, #0
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	461a      	mov	r2, r3
 800a402:	e00c      	b.n	800a41e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	43da      	mvns	r2, r3
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	4013      	ands	r3, r2
 800a410:	b29b      	uxth	r3, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	bf0c      	ite	eq
 800a416:	2301      	moveq	r3, #1
 800a418:	2300      	movne	r3, #0
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	461a      	mov	r2, r3
 800a41e:	79fb      	ldrb	r3, [r7, #7]
 800a420:	429a      	cmp	r2, r3
 800a422:	d0b6      	beq.n	800a392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b084      	sub	sp, #16
 800a432:	af00      	add	r7, sp, #0
 800a434:	60f8      	str	r0, [r7, #12]
 800a436:	60b9      	str	r1, [r7, #8]
 800a438:	607a      	str	r2, [r7, #4]
 800a43a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a43c:	e051      	b.n	800a4e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	695b      	ldr	r3, [r3, #20]
 800a444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a44c:	d123      	bne.n	800a496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a45c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a466:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2200      	movs	r2, #0
 800a46c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2220      	movs	r2, #32
 800a472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a482:	f043 0204 	orr.w	r2, r3, #4
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e046      	b.n	800a524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a49c:	d021      	beq.n	800a4e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a49e:	f7fe fd67 	bl	8008f70 <HAL_GetTick>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	1ad3      	subs	r3, r2, r3
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d302      	bcc.n	800a4b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d116      	bne.n	800a4e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2220      	movs	r2, #32
 800a4be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ce:	f043 0220 	orr.w	r2, r3, #32
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e020      	b.n	800a524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	0c1b      	lsrs	r3, r3, #16
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d10c      	bne.n	800a506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	43da      	mvns	r2, r3
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	bf14      	ite	ne
 800a4fe:	2301      	movne	r3, #1
 800a500:	2300      	moveq	r3, #0
 800a502:	b2db      	uxtb	r3, r3
 800a504:	e00b      	b.n	800a51e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	699b      	ldr	r3, [r3, #24]
 800a50c:	43da      	mvns	r2, r3
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	4013      	ands	r3, r2
 800a512:	b29b      	uxth	r3, r3
 800a514:	2b00      	cmp	r3, #0
 800a516:	bf14      	ite	ne
 800a518:	2301      	movne	r3, #1
 800a51a:	2300      	moveq	r3, #0
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d18d      	bne.n	800a43e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a522:	2300      	movs	r3, #0
}
 800a524:	4618      	mov	r0, r3
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a538:	e02d      	b.n	800a596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f000 f8ce 	bl	800a6dc <I2C_IsAcknowledgeFailed>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e02d      	b.n	800a5a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a550:	d021      	beq.n	800a596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a552:	f7fe fd0d 	bl	8008f70 <HAL_GetTick>
 800a556:	4602      	mov	r2, r0
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	1ad3      	subs	r3, r2, r3
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d302      	bcc.n	800a568 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d116      	bne.n	800a596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2220      	movs	r2, #32
 800a572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a582:	f043 0220 	orr.w	r2, r3, #32
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	e007      	b.n	800a5a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	695b      	ldr	r3, [r3, #20]
 800a59c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a0:	2b80      	cmp	r3, #128	; 0x80
 800a5a2:	d1ca      	bne.n	800a53a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	60f8      	str	r0, [r7, #12]
 800a5b6:	60b9      	str	r1, [r7, #8]
 800a5b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a5ba:	e02d      	b.n	800a618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f000 f88d 	bl	800a6dc <I2C_IsAcknowledgeFailed>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d001      	beq.n	800a5cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e02d      	b.n	800a628 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d2:	d021      	beq.n	800a618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5d4:	f7fe fccc 	bl	8008f70 <HAL_GetTick>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	68ba      	ldr	r2, [r7, #8]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d302      	bcc.n	800a5ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d116      	bne.n	800a618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2220      	movs	r2, #32
 800a5f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a604:	f043 0220 	orr.w	r2, r3, #32
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	e007      	b.n	800a628 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	f003 0304 	and.w	r3, r3, #4
 800a622:	2b04      	cmp	r3, #4
 800a624:	d1ca      	bne.n	800a5bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a63c:	e042      	b.n	800a6c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	f003 0310 	and.w	r3, r3, #16
 800a648:	2b10      	cmp	r3, #16
 800a64a:	d119      	bne.n	800a680 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f06f 0210 	mvn.w	r2, #16
 800a654:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2220      	movs	r2, #32
 800a660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	e029      	b.n	800a6d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a680:	f7fe fc76 	bl	8008f70 <HAL_GetTick>
 800a684:	4602      	mov	r2, r0
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	1ad3      	subs	r3, r2, r3
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d302      	bcc.n	800a696 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d116      	bne.n	800a6c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2220      	movs	r2, #32
 800a6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b0:	f043 0220 	orr.w	r2, r3, #32
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e007      	b.n	800a6d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ce:	2b40      	cmp	r3, #64	; 0x40
 800a6d0:	d1b5      	bne.n	800a63e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6f2:	d11b      	bne.n	800a72c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a6fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2220      	movs	r2, #32
 800a708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a718:	f043 0204 	orr.w	r2, r3, #4
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	e000      	b.n	800a72e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
	...

0800a73c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b086      	sub	sp, #24
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d101      	bne.n	800a74e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e25b      	b.n	800ac06 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 0301 	and.w	r3, r3, #1
 800a756:	2b00      	cmp	r3, #0
 800a758:	d075      	beq.n	800a846 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a75a:	4ba3      	ldr	r3, [pc, #652]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	f003 030c 	and.w	r3, r3, #12
 800a762:	2b04      	cmp	r3, #4
 800a764:	d00c      	beq.n	800a780 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a766:	4ba0      	ldr	r3, [pc, #640]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a76e:	2b08      	cmp	r3, #8
 800a770:	d112      	bne.n	800a798 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a772:	4b9d      	ldr	r3, [pc, #628]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a77a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a77e:	d10b      	bne.n	800a798 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a780:	4b99      	ldr	r3, [pc, #612]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d05b      	beq.n	800a844 <HAL_RCC_OscConfig+0x108>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d157      	bne.n	800a844 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e236      	b.n	800ac06 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7a0:	d106      	bne.n	800a7b0 <HAL_RCC_OscConfig+0x74>
 800a7a2:	4b91      	ldr	r3, [pc, #580]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a90      	ldr	r2, [pc, #576]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a7a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7ac:	6013      	str	r3, [r2, #0]
 800a7ae:	e01d      	b.n	800a7ec <HAL_RCC_OscConfig+0xb0>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a7b8:	d10c      	bne.n	800a7d4 <HAL_RCC_OscConfig+0x98>
 800a7ba:	4b8b      	ldr	r3, [pc, #556]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a8a      	ldr	r2, [pc, #552]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a7c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7c4:	6013      	str	r3, [r2, #0]
 800a7c6:	4b88      	ldr	r3, [pc, #544]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a87      	ldr	r2, [pc, #540]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a7cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7d0:	6013      	str	r3, [r2, #0]
 800a7d2:	e00b      	b.n	800a7ec <HAL_RCC_OscConfig+0xb0>
 800a7d4:	4b84      	ldr	r3, [pc, #528]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a83      	ldr	r2, [pc, #524]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a7da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7de:	6013      	str	r3, [r2, #0]
 800a7e0:	4b81      	ldr	r3, [pc, #516]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a80      	ldr	r2, [pc, #512]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a7e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d013      	beq.n	800a81c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7f4:	f7fe fbbc 	bl	8008f70 <HAL_GetTick>
 800a7f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7fa:	e008      	b.n	800a80e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a7fc:	f7fe fbb8 	bl	8008f70 <HAL_GetTick>
 800a800:	4602      	mov	r2, r0
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	1ad3      	subs	r3, r2, r3
 800a806:	2b64      	cmp	r3, #100	; 0x64
 800a808:	d901      	bls.n	800a80e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e1fb      	b.n	800ac06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a80e:	4b76      	ldr	r3, [pc, #472]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a816:	2b00      	cmp	r3, #0
 800a818:	d0f0      	beq.n	800a7fc <HAL_RCC_OscConfig+0xc0>
 800a81a:	e014      	b.n	800a846 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a81c:	f7fe fba8 	bl	8008f70 <HAL_GetTick>
 800a820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a822:	e008      	b.n	800a836 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a824:	f7fe fba4 	bl	8008f70 <HAL_GetTick>
 800a828:	4602      	mov	r2, r0
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	2b64      	cmp	r3, #100	; 0x64
 800a830:	d901      	bls.n	800a836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a832:	2303      	movs	r3, #3
 800a834:	e1e7      	b.n	800ac06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a836:	4b6c      	ldr	r3, [pc, #432]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1f0      	bne.n	800a824 <HAL_RCC_OscConfig+0xe8>
 800a842:	e000      	b.n	800a846 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 0302 	and.w	r3, r3, #2
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d063      	beq.n	800a91a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a852:	4b65      	ldr	r3, [pc, #404]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	f003 030c 	and.w	r3, r3, #12
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00b      	beq.n	800a876 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a85e:	4b62      	ldr	r3, [pc, #392]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a866:	2b08      	cmp	r3, #8
 800a868:	d11c      	bne.n	800a8a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a86a:	4b5f      	ldr	r3, [pc, #380]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a872:	2b00      	cmp	r3, #0
 800a874:	d116      	bne.n	800a8a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a876:	4b5c      	ldr	r3, [pc, #368]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f003 0302 	and.w	r3, r3, #2
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d005      	beq.n	800a88e <HAL_RCC_OscConfig+0x152>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d001      	beq.n	800a88e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e1bb      	b.n	800ac06 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a88e:	4b56      	ldr	r3, [pc, #344]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	00db      	lsls	r3, r3, #3
 800a89c:	4952      	ldr	r1, [pc, #328]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a8a2:	e03a      	b.n	800a91a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d020      	beq.n	800a8ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a8ac:	4b4f      	ldr	r3, [pc, #316]	; (800a9ec <HAL_RCC_OscConfig+0x2b0>)
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8b2:	f7fe fb5d 	bl	8008f70 <HAL_GetTick>
 800a8b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8b8:	e008      	b.n	800a8cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a8ba:	f7fe fb59 	bl	8008f70 <HAL_GetTick>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	1ad3      	subs	r3, r2, r3
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d901      	bls.n	800a8cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	e19c      	b.n	800ac06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8cc:	4b46      	ldr	r3, [pc, #280]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 0302 	and.w	r3, r3, #2
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d0f0      	beq.n	800a8ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8d8:	4b43      	ldr	r3, [pc, #268]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	00db      	lsls	r3, r3, #3
 800a8e6:	4940      	ldr	r1, [pc, #256]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	600b      	str	r3, [r1, #0]
 800a8ec:	e015      	b.n	800a91a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8ee:	4b3f      	ldr	r3, [pc, #252]	; (800a9ec <HAL_RCC_OscConfig+0x2b0>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8f4:	f7fe fb3c 	bl	8008f70 <HAL_GetTick>
 800a8f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8fa:	e008      	b.n	800a90e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a8fc:	f7fe fb38 	bl	8008f70 <HAL_GetTick>
 800a900:	4602      	mov	r2, r0
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	1ad3      	subs	r3, r2, r3
 800a906:	2b02      	cmp	r3, #2
 800a908:	d901      	bls.n	800a90e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a90a:	2303      	movs	r3, #3
 800a90c:	e17b      	b.n	800ac06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a90e:	4b36      	ldr	r3, [pc, #216]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0302 	and.w	r3, r3, #2
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1f0      	bne.n	800a8fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f003 0308 	and.w	r3, r3, #8
 800a922:	2b00      	cmp	r3, #0
 800a924:	d030      	beq.n	800a988 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d016      	beq.n	800a95c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a92e:	4b30      	ldr	r3, [pc, #192]	; (800a9f0 <HAL_RCC_OscConfig+0x2b4>)
 800a930:	2201      	movs	r2, #1
 800a932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a934:	f7fe fb1c 	bl	8008f70 <HAL_GetTick>
 800a938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a93a:	e008      	b.n	800a94e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a93c:	f7fe fb18 	bl	8008f70 <HAL_GetTick>
 800a940:	4602      	mov	r2, r0
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	2b02      	cmp	r3, #2
 800a948:	d901      	bls.n	800a94e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a94a:	2303      	movs	r3, #3
 800a94c:	e15b      	b.n	800ac06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a94e:	4b26      	ldr	r3, [pc, #152]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a952:	f003 0302 	and.w	r3, r3, #2
 800a956:	2b00      	cmp	r3, #0
 800a958:	d0f0      	beq.n	800a93c <HAL_RCC_OscConfig+0x200>
 800a95a:	e015      	b.n	800a988 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a95c:	4b24      	ldr	r3, [pc, #144]	; (800a9f0 <HAL_RCC_OscConfig+0x2b4>)
 800a95e:	2200      	movs	r2, #0
 800a960:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a962:	f7fe fb05 	bl	8008f70 <HAL_GetTick>
 800a966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a968:	e008      	b.n	800a97c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a96a:	f7fe fb01 	bl	8008f70 <HAL_GetTick>
 800a96e:	4602      	mov	r2, r0
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	1ad3      	subs	r3, r2, r3
 800a974:	2b02      	cmp	r3, #2
 800a976:	d901      	bls.n	800a97c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a978:	2303      	movs	r3, #3
 800a97a:	e144      	b.n	800ac06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a97c:	4b1a      	ldr	r3, [pc, #104]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a97e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a980:	f003 0302 	and.w	r3, r3, #2
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1f0      	bne.n	800a96a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 0304 	and.w	r3, r3, #4
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 80a0 	beq.w	800aad6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a996:	2300      	movs	r3, #0
 800a998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a99a:	4b13      	ldr	r3, [pc, #76]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10f      	bne.n	800a9c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	60bb      	str	r3, [r7, #8]
 800a9aa:	4b0f      	ldr	r3, [pc, #60]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ae:	4a0e      	ldr	r2, [pc, #56]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a9b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9b4:	6413      	str	r3, [r2, #64]	; 0x40
 800a9b6:	4b0c      	ldr	r3, [pc, #48]	; (800a9e8 <HAL_RCC_OscConfig+0x2ac>)
 800a9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9be:	60bb      	str	r3, [r7, #8]
 800a9c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9c6:	4b0b      	ldr	r3, [pc, #44]	; (800a9f4 <HAL_RCC_OscConfig+0x2b8>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d121      	bne.n	800aa16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a9d2:	4b08      	ldr	r3, [pc, #32]	; (800a9f4 <HAL_RCC_OscConfig+0x2b8>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a07      	ldr	r2, [pc, #28]	; (800a9f4 <HAL_RCC_OscConfig+0x2b8>)
 800a9d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a9de:	f7fe fac7 	bl	8008f70 <HAL_GetTick>
 800a9e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9e4:	e011      	b.n	800aa0a <HAL_RCC_OscConfig+0x2ce>
 800a9e6:	bf00      	nop
 800a9e8:	40023800 	.word	0x40023800
 800a9ec:	42470000 	.word	0x42470000
 800a9f0:	42470e80 	.word	0x42470e80
 800a9f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9f8:	f7fe faba 	bl	8008f70 <HAL_GetTick>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	1ad3      	subs	r3, r2, r3
 800aa02:	2b02      	cmp	r3, #2
 800aa04:	d901      	bls.n	800aa0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800aa06:	2303      	movs	r3, #3
 800aa08:	e0fd      	b.n	800ac06 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa0a:	4b81      	ldr	r3, [pc, #516]	; (800ac10 <HAL_RCC_OscConfig+0x4d4>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d0f0      	beq.n	800a9f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d106      	bne.n	800aa2c <HAL_RCC_OscConfig+0x2f0>
 800aa1e:	4b7d      	ldr	r3, [pc, #500]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800aa20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa22:	4a7c      	ldr	r2, [pc, #496]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800aa24:	f043 0301 	orr.w	r3, r3, #1
 800aa28:	6713      	str	r3, [r2, #112]	; 0x70
 800aa2a:	e01c      	b.n	800aa66 <HAL_RCC_OscConfig+0x32a>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	2b05      	cmp	r3, #5
 800aa32:	d10c      	bne.n	800aa4e <HAL_RCC_OscConfig+0x312>
 800aa34:	4b77      	ldr	r3, [pc, #476]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800aa36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa38:	4a76      	ldr	r2, [pc, #472]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800aa3a:	f043 0304 	orr.w	r3, r3, #4
 800aa3e:	6713      	str	r3, [r2, #112]	; 0x70
 800aa40:	4b74      	ldr	r3, [pc, #464]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800aa42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa44:	4a73      	ldr	r2, [pc, #460]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800aa46:	f043 0301 	orr.w	r3, r3, #1
 800aa4a:	6713      	str	r3, [r2, #112]	; 0x70
 800aa4c:	e00b      	b.n	800aa66 <HAL_RCC_OscConfig+0x32a>
 800aa4e:	4b71      	ldr	r3, [pc, #452]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800aa50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa52:	4a70      	ldr	r2, [pc, #448]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800aa54:	f023 0301 	bic.w	r3, r3, #1
 800aa58:	6713      	str	r3, [r2, #112]	; 0x70
 800aa5a:	4b6e      	ldr	r3, [pc, #440]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800aa5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa5e:	4a6d      	ldr	r2, [pc, #436]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800aa60:	f023 0304 	bic.w	r3, r3, #4
 800aa64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d015      	beq.n	800aa9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa6e:	f7fe fa7f 	bl	8008f70 <HAL_GetTick>
 800aa72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa74:	e00a      	b.n	800aa8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa76:	f7fe fa7b 	bl	8008f70 <HAL_GetTick>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d901      	bls.n	800aa8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800aa88:	2303      	movs	r3, #3
 800aa8a:	e0bc      	b.n	800ac06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa8c:	4b61      	ldr	r3, [pc, #388]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800aa8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa90:	f003 0302 	and.w	r3, r3, #2
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d0ee      	beq.n	800aa76 <HAL_RCC_OscConfig+0x33a>
 800aa98:	e014      	b.n	800aac4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa9a:	f7fe fa69 	bl	8008f70 <HAL_GetTick>
 800aa9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aaa0:	e00a      	b.n	800aab8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aaa2:	f7fe fa65 	bl	8008f70 <HAL_GetTick>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	1ad3      	subs	r3, r2, r3
 800aaac:	f241 3288 	movw	r2, #5000	; 0x1388
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d901      	bls.n	800aab8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800aab4:	2303      	movs	r3, #3
 800aab6:	e0a6      	b.n	800ac06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aab8:	4b56      	ldr	r3, [pc, #344]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800aaba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aabc:	f003 0302 	and.w	r3, r3, #2
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1ee      	bne.n	800aaa2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aac4:	7dfb      	ldrb	r3, [r7, #23]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d105      	bne.n	800aad6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aaca:	4b52      	ldr	r3, [pc, #328]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800aacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aace:	4a51      	ldr	r2, [pc, #324]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800aad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aad4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f000 8092 	beq.w	800ac04 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aae0:	4b4c      	ldr	r3, [pc, #304]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	f003 030c 	and.w	r3, r3, #12
 800aae8:	2b08      	cmp	r3, #8
 800aaea:	d05c      	beq.n	800aba6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	699b      	ldr	r3, [r3, #24]
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d141      	bne.n	800ab78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aaf4:	4b48      	ldr	r3, [pc, #288]	; (800ac18 <HAL_RCC_OscConfig+0x4dc>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aafa:	f7fe fa39 	bl	8008f70 <HAL_GetTick>
 800aafe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab00:	e008      	b.n	800ab14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab02:	f7fe fa35 	bl	8008f70 <HAL_GetTick>
 800ab06:	4602      	mov	r2, r0
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d901      	bls.n	800ab14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800ab10:	2303      	movs	r3, #3
 800ab12:	e078      	b.n	800ac06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab14:	4b3f      	ldr	r3, [pc, #252]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1f0      	bne.n	800ab02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	69da      	ldr	r2, [r3, #28]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a1b      	ldr	r3, [r3, #32]
 800ab28:	431a      	orrs	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2e:	019b      	lsls	r3, r3, #6
 800ab30:	431a      	orrs	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab36:	085b      	lsrs	r3, r3, #1
 800ab38:	3b01      	subs	r3, #1
 800ab3a:	041b      	lsls	r3, r3, #16
 800ab3c:	431a      	orrs	r2, r3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab42:	061b      	lsls	r3, r3, #24
 800ab44:	4933      	ldr	r1, [pc, #204]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800ab46:	4313      	orrs	r3, r2
 800ab48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab4a:	4b33      	ldr	r3, [pc, #204]	; (800ac18 <HAL_RCC_OscConfig+0x4dc>)
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab50:	f7fe fa0e 	bl	8008f70 <HAL_GetTick>
 800ab54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab56:	e008      	b.n	800ab6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab58:	f7fe fa0a 	bl	8008f70 <HAL_GetTick>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	1ad3      	subs	r3, r2, r3
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d901      	bls.n	800ab6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800ab66:	2303      	movs	r3, #3
 800ab68:	e04d      	b.n	800ac06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab6a:	4b2a      	ldr	r3, [pc, #168]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d0f0      	beq.n	800ab58 <HAL_RCC_OscConfig+0x41c>
 800ab76:	e045      	b.n	800ac04 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab78:	4b27      	ldr	r3, [pc, #156]	; (800ac18 <HAL_RCC_OscConfig+0x4dc>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab7e:	f7fe f9f7 	bl	8008f70 <HAL_GetTick>
 800ab82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab84:	e008      	b.n	800ab98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab86:	f7fe f9f3 	bl	8008f70 <HAL_GetTick>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	1ad3      	subs	r3, r2, r3
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	d901      	bls.n	800ab98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800ab94:	2303      	movs	r3, #3
 800ab96:	e036      	b.n	800ac06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab98:	4b1e      	ldr	r3, [pc, #120]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d1f0      	bne.n	800ab86 <HAL_RCC_OscConfig+0x44a>
 800aba4:	e02e      	b.n	800ac04 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	699b      	ldr	r3, [r3, #24]
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d101      	bne.n	800abb2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e029      	b.n	800ac06 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800abb2:	4b18      	ldr	r3, [pc, #96]	; (800ac14 <HAL_RCC_OscConfig+0x4d8>)
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	69db      	ldr	r3, [r3, #28]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d11c      	bne.n	800ac00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d115      	bne.n	800ac00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800abda:	4013      	ands	r3, r2
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d10d      	bne.n	800ac00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800abee:	429a      	cmp	r2, r3
 800abf0:	d106      	bne.n	800ac00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d001      	beq.n	800ac04 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800ac00:	2301      	movs	r3, #1
 800ac02:	e000      	b.n	800ac06 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3718      	adds	r7, #24
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	40007000 	.word	0x40007000
 800ac14:	40023800 	.word	0x40023800
 800ac18:	42470060 	.word	0x42470060

0800ac1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d101      	bne.n	800ac30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e0cc      	b.n	800adca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ac30:	4b68      	ldr	r3, [pc, #416]	; (800add4 <HAL_RCC_ClockConfig+0x1b8>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 030f 	and.w	r3, r3, #15
 800ac38:	683a      	ldr	r2, [r7, #0]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d90c      	bls.n	800ac58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac3e:	4b65      	ldr	r3, [pc, #404]	; (800add4 <HAL_RCC_ClockConfig+0x1b8>)
 800ac40:	683a      	ldr	r2, [r7, #0]
 800ac42:	b2d2      	uxtb	r2, r2
 800ac44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac46:	4b63      	ldr	r3, [pc, #396]	; (800add4 <HAL_RCC_ClockConfig+0x1b8>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 030f 	and.w	r3, r3, #15
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d001      	beq.n	800ac58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e0b8      	b.n	800adca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 0302 	and.w	r3, r3, #2
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d020      	beq.n	800aca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 0304 	and.w	r3, r3, #4
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d005      	beq.n	800ac7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac70:	4b59      	ldr	r3, [pc, #356]	; (800add8 <HAL_RCC_ClockConfig+0x1bc>)
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	4a58      	ldr	r2, [pc, #352]	; (800add8 <HAL_RCC_ClockConfig+0x1bc>)
 800ac76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ac7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 0308 	and.w	r3, r3, #8
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d005      	beq.n	800ac94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ac88:	4b53      	ldr	r3, [pc, #332]	; (800add8 <HAL_RCC_ClockConfig+0x1bc>)
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	4a52      	ldr	r2, [pc, #328]	; (800add8 <HAL_RCC_ClockConfig+0x1bc>)
 800ac8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ac92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac94:	4b50      	ldr	r3, [pc, #320]	; (800add8 <HAL_RCC_ClockConfig+0x1bc>)
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	494d      	ldr	r1, [pc, #308]	; (800add8 <HAL_RCC_ClockConfig+0x1bc>)
 800aca2:	4313      	orrs	r3, r2
 800aca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f003 0301 	and.w	r3, r3, #1
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d044      	beq.n	800ad3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d107      	bne.n	800acca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acba:	4b47      	ldr	r3, [pc, #284]	; (800add8 <HAL_RCC_ClockConfig+0x1bc>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d119      	bne.n	800acfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e07f      	b.n	800adca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d003      	beq.n	800acda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800acd6:	2b03      	cmp	r3, #3
 800acd8:	d107      	bne.n	800acea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800acda:	4b3f      	ldr	r3, [pc, #252]	; (800add8 <HAL_RCC_ClockConfig+0x1bc>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d109      	bne.n	800acfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e06f      	b.n	800adca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800acea:	4b3b      	ldr	r3, [pc, #236]	; (800add8 <HAL_RCC_ClockConfig+0x1bc>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 0302 	and.w	r3, r3, #2
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d101      	bne.n	800acfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	e067      	b.n	800adca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800acfa:	4b37      	ldr	r3, [pc, #220]	; (800add8 <HAL_RCC_ClockConfig+0x1bc>)
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	f023 0203 	bic.w	r2, r3, #3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	4934      	ldr	r1, [pc, #208]	; (800add8 <HAL_RCC_ClockConfig+0x1bc>)
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ad0c:	f7fe f930 	bl	8008f70 <HAL_GetTick>
 800ad10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad12:	e00a      	b.n	800ad2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad14:	f7fe f92c 	bl	8008f70 <HAL_GetTick>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	1ad3      	subs	r3, r2, r3
 800ad1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d901      	bls.n	800ad2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ad26:	2303      	movs	r3, #3
 800ad28:	e04f      	b.n	800adca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad2a:	4b2b      	ldr	r3, [pc, #172]	; (800add8 <HAL_RCC_ClockConfig+0x1bc>)
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f003 020c 	and.w	r2, r3, #12
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d1eb      	bne.n	800ad14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ad3c:	4b25      	ldr	r3, [pc, #148]	; (800add4 <HAL_RCC_ClockConfig+0x1b8>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f003 030f 	and.w	r3, r3, #15
 800ad44:	683a      	ldr	r2, [r7, #0]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d20c      	bcs.n	800ad64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad4a:	4b22      	ldr	r3, [pc, #136]	; (800add4 <HAL_RCC_ClockConfig+0x1b8>)
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	b2d2      	uxtb	r2, r2
 800ad50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad52:	4b20      	ldr	r3, [pc, #128]	; (800add4 <HAL_RCC_ClockConfig+0x1b8>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f003 030f 	and.w	r3, r3, #15
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d001      	beq.n	800ad64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ad60:	2301      	movs	r3, #1
 800ad62:	e032      	b.n	800adca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 0304 	and.w	r3, r3, #4
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d008      	beq.n	800ad82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad70:	4b19      	ldr	r3, [pc, #100]	; (800add8 <HAL_RCC_ClockConfig+0x1bc>)
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	4916      	ldr	r1, [pc, #88]	; (800add8 <HAL_RCC_ClockConfig+0x1bc>)
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 0308 	and.w	r3, r3, #8
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d009      	beq.n	800ada2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ad8e:	4b12      	ldr	r3, [pc, #72]	; (800add8 <HAL_RCC_ClockConfig+0x1bc>)
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	00db      	lsls	r3, r3, #3
 800ad9c:	490e      	ldr	r1, [pc, #56]	; (800add8 <HAL_RCC_ClockConfig+0x1bc>)
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ada2:	f000 f821 	bl	800ade8 <HAL_RCC_GetSysClockFreq>
 800ada6:	4601      	mov	r1, r0
 800ada8:	4b0b      	ldr	r3, [pc, #44]	; (800add8 <HAL_RCC_ClockConfig+0x1bc>)
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	091b      	lsrs	r3, r3, #4
 800adae:	f003 030f 	and.w	r3, r3, #15
 800adb2:	4a0a      	ldr	r2, [pc, #40]	; (800addc <HAL_RCC_ClockConfig+0x1c0>)
 800adb4:	5cd3      	ldrb	r3, [r2, r3]
 800adb6:	fa21 f303 	lsr.w	r3, r1, r3
 800adba:	4a09      	ldr	r2, [pc, #36]	; (800ade0 <HAL_RCC_ClockConfig+0x1c4>)
 800adbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800adbe:	4b09      	ldr	r3, [pc, #36]	; (800ade4 <HAL_RCC_ClockConfig+0x1c8>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7f6 fb68 	bl	8001498 <HAL_InitTick>

  return HAL_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	40023c00 	.word	0x40023c00
 800add8:	40023800 	.word	0x40023800
 800addc:	0801278c 	.word	0x0801278c
 800ade0:	20000020 	.word	0x20000020
 800ade4:	200001b4 	.word	0x200001b4

0800ade8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ade8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800adee:	2300      	movs	r3, #0
 800adf0:	607b      	str	r3, [r7, #4]
 800adf2:	2300      	movs	r3, #0
 800adf4:	60fb      	str	r3, [r7, #12]
 800adf6:	2300      	movs	r3, #0
 800adf8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800adfa:	2300      	movs	r3, #0
 800adfc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800adfe:	4b63      	ldr	r3, [pc, #396]	; (800af8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	f003 030c 	and.w	r3, r3, #12
 800ae06:	2b04      	cmp	r3, #4
 800ae08:	d007      	beq.n	800ae1a <HAL_RCC_GetSysClockFreq+0x32>
 800ae0a:	2b08      	cmp	r3, #8
 800ae0c:	d008      	beq.n	800ae20 <HAL_RCC_GetSysClockFreq+0x38>
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f040 80b4 	bne.w	800af7c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ae14:	4b5e      	ldr	r3, [pc, #376]	; (800af90 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800ae16:	60bb      	str	r3, [r7, #8]
       break;
 800ae18:	e0b3      	b.n	800af82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ae1a:	4b5e      	ldr	r3, [pc, #376]	; (800af94 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800ae1c:	60bb      	str	r3, [r7, #8]
      break;
 800ae1e:	e0b0      	b.n	800af82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ae20:	4b5a      	ldr	r3, [pc, #360]	; (800af8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ae2a:	4b58      	ldr	r3, [pc, #352]	; (800af8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d04a      	beq.n	800aecc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ae36:	4b55      	ldr	r3, [pc, #340]	; (800af8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	099b      	lsrs	r3, r3, #6
 800ae3c:	f04f 0400 	mov.w	r4, #0
 800ae40:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ae44:	f04f 0200 	mov.w	r2, #0
 800ae48:	ea03 0501 	and.w	r5, r3, r1
 800ae4c:	ea04 0602 	and.w	r6, r4, r2
 800ae50:	4629      	mov	r1, r5
 800ae52:	4632      	mov	r2, r6
 800ae54:	f04f 0300 	mov.w	r3, #0
 800ae58:	f04f 0400 	mov.w	r4, #0
 800ae5c:	0154      	lsls	r4, r2, #5
 800ae5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ae62:	014b      	lsls	r3, r1, #5
 800ae64:	4619      	mov	r1, r3
 800ae66:	4622      	mov	r2, r4
 800ae68:	1b49      	subs	r1, r1, r5
 800ae6a:	eb62 0206 	sbc.w	r2, r2, r6
 800ae6e:	f04f 0300 	mov.w	r3, #0
 800ae72:	f04f 0400 	mov.w	r4, #0
 800ae76:	0194      	lsls	r4, r2, #6
 800ae78:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ae7c:	018b      	lsls	r3, r1, #6
 800ae7e:	1a5b      	subs	r3, r3, r1
 800ae80:	eb64 0402 	sbc.w	r4, r4, r2
 800ae84:	f04f 0100 	mov.w	r1, #0
 800ae88:	f04f 0200 	mov.w	r2, #0
 800ae8c:	00e2      	lsls	r2, r4, #3
 800ae8e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800ae92:	00d9      	lsls	r1, r3, #3
 800ae94:	460b      	mov	r3, r1
 800ae96:	4614      	mov	r4, r2
 800ae98:	195b      	adds	r3, r3, r5
 800ae9a:	eb44 0406 	adc.w	r4, r4, r6
 800ae9e:	f04f 0100 	mov.w	r1, #0
 800aea2:	f04f 0200 	mov.w	r2, #0
 800aea6:	0262      	lsls	r2, r4, #9
 800aea8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800aeac:	0259      	lsls	r1, r3, #9
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4614      	mov	r4, r2
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f04f 0400 	mov.w	r4, #0
 800aebc:	461a      	mov	r2, r3
 800aebe:	4623      	mov	r3, r4
 800aec0:	f7f5 fec2 	bl	8000c48 <__aeabi_uldivmod>
 800aec4:	4603      	mov	r3, r0
 800aec6:	460c      	mov	r4, r1
 800aec8:	60fb      	str	r3, [r7, #12]
 800aeca:	e049      	b.n	800af60 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aecc:	4b2f      	ldr	r3, [pc, #188]	; (800af8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	099b      	lsrs	r3, r3, #6
 800aed2:	f04f 0400 	mov.w	r4, #0
 800aed6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800aeda:	f04f 0200 	mov.w	r2, #0
 800aede:	ea03 0501 	and.w	r5, r3, r1
 800aee2:	ea04 0602 	and.w	r6, r4, r2
 800aee6:	4629      	mov	r1, r5
 800aee8:	4632      	mov	r2, r6
 800aeea:	f04f 0300 	mov.w	r3, #0
 800aeee:	f04f 0400 	mov.w	r4, #0
 800aef2:	0154      	lsls	r4, r2, #5
 800aef4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800aef8:	014b      	lsls	r3, r1, #5
 800aefa:	4619      	mov	r1, r3
 800aefc:	4622      	mov	r2, r4
 800aefe:	1b49      	subs	r1, r1, r5
 800af00:	eb62 0206 	sbc.w	r2, r2, r6
 800af04:	f04f 0300 	mov.w	r3, #0
 800af08:	f04f 0400 	mov.w	r4, #0
 800af0c:	0194      	lsls	r4, r2, #6
 800af0e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800af12:	018b      	lsls	r3, r1, #6
 800af14:	1a5b      	subs	r3, r3, r1
 800af16:	eb64 0402 	sbc.w	r4, r4, r2
 800af1a:	f04f 0100 	mov.w	r1, #0
 800af1e:	f04f 0200 	mov.w	r2, #0
 800af22:	00e2      	lsls	r2, r4, #3
 800af24:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800af28:	00d9      	lsls	r1, r3, #3
 800af2a:	460b      	mov	r3, r1
 800af2c:	4614      	mov	r4, r2
 800af2e:	195b      	adds	r3, r3, r5
 800af30:	eb44 0406 	adc.w	r4, r4, r6
 800af34:	f04f 0100 	mov.w	r1, #0
 800af38:	f04f 0200 	mov.w	r2, #0
 800af3c:	02a2      	lsls	r2, r4, #10
 800af3e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800af42:	0299      	lsls	r1, r3, #10
 800af44:	460b      	mov	r3, r1
 800af46:	4614      	mov	r4, r2
 800af48:	4618      	mov	r0, r3
 800af4a:	4621      	mov	r1, r4
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f04f 0400 	mov.w	r4, #0
 800af52:	461a      	mov	r2, r3
 800af54:	4623      	mov	r3, r4
 800af56:	f7f5 fe77 	bl	8000c48 <__aeabi_uldivmod>
 800af5a:	4603      	mov	r3, r0
 800af5c:	460c      	mov	r4, r1
 800af5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800af60:	4b0a      	ldr	r3, [pc, #40]	; (800af8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	0c1b      	lsrs	r3, r3, #16
 800af66:	f003 0303 	and.w	r3, r3, #3
 800af6a:	3301      	adds	r3, #1
 800af6c:	005b      	lsls	r3, r3, #1
 800af6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	fbb2 f3f3 	udiv	r3, r2, r3
 800af78:	60bb      	str	r3, [r7, #8]
      break;
 800af7a:	e002      	b.n	800af82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800af7c:	4b04      	ldr	r3, [pc, #16]	; (800af90 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800af7e:	60bb      	str	r3, [r7, #8]
      break;
 800af80:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af82:	68bb      	ldr	r3, [r7, #8]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3714      	adds	r7, #20
 800af88:	46bd      	mov	sp, r7
 800af8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af8c:	40023800 	.word	0x40023800
 800af90:	00f42400 	.word	0x00f42400
 800af94:	007a1200 	.word	0x007a1200

0800af98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af98:	b480      	push	{r7}
 800af9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af9c:	4b03      	ldr	r3, [pc, #12]	; (800afac <HAL_RCC_GetHCLKFreq+0x14>)
 800af9e:	681b      	ldr	r3, [r3, #0]
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	20000020 	.word	0x20000020

0800afb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800afb4:	f7ff fff0 	bl	800af98 <HAL_RCC_GetHCLKFreq>
 800afb8:	4601      	mov	r1, r0
 800afba:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	0a9b      	lsrs	r3, r3, #10
 800afc0:	f003 0307 	and.w	r3, r3, #7
 800afc4:	4a03      	ldr	r2, [pc, #12]	; (800afd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800afc6:	5cd3      	ldrb	r3, [r2, r3]
 800afc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800afcc:	4618      	mov	r0, r3
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	40023800 	.word	0x40023800
 800afd4:	0801279c 	.word	0x0801279c

0800afd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800afdc:	f7ff ffdc 	bl	800af98 <HAL_RCC_GetHCLKFreq>
 800afe0:	4601      	mov	r1, r0
 800afe2:	4b05      	ldr	r3, [pc, #20]	; (800aff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	0b5b      	lsrs	r3, r3, #13
 800afe8:	f003 0307 	and.w	r3, r3, #7
 800afec:	4a03      	ldr	r2, [pc, #12]	; (800affc <HAL_RCC_GetPCLK2Freq+0x24>)
 800afee:	5cd3      	ldrb	r3, [r2, r3]
 800aff0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	40023800 	.word	0x40023800
 800affc:	0801279c 	.word	0x0801279c

0800b000 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	220f      	movs	r2, #15
 800b00e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b010:	4b12      	ldr	r3, [pc, #72]	; (800b05c <HAL_RCC_GetClockConfig+0x5c>)
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	f003 0203 	and.w	r2, r3, #3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b01c:	4b0f      	ldr	r3, [pc, #60]	; (800b05c <HAL_RCC_GetClockConfig+0x5c>)
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b028:	4b0c      	ldr	r3, [pc, #48]	; (800b05c <HAL_RCC_GetClockConfig+0x5c>)
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b034:	4b09      	ldr	r3, [pc, #36]	; (800b05c <HAL_RCC_GetClockConfig+0x5c>)
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	08db      	lsrs	r3, r3, #3
 800b03a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b042:	4b07      	ldr	r3, [pc, #28]	; (800b060 <HAL_RCC_GetClockConfig+0x60>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 020f 	and.w	r2, r3, #15
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	601a      	str	r2, [r3, #0]
}
 800b04e:	bf00      	nop
 800b050:	370c      	adds	r7, #12
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	40023800 	.word	0x40023800
 800b060:	40023c00 	.word	0x40023c00

0800b064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b072:	2301      	movs	r3, #1
 800b074:	e01d      	b.n	800b0b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d106      	bne.n	800b090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f815 	bl	800b0ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2202      	movs	r2, #2
 800b094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	3304      	adds	r3, #4
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	4610      	mov	r0, r2
 800b0a4:	f000 f968 	bl	800b378 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3708      	adds	r7, #8
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b0ba:	b480      	push	{r7}
 800b0bc:	b083      	sub	sp, #12
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b0c2:	bf00      	nop
 800b0c4:	370c      	adds	r7, #12
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr

0800b0ce <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b0ce:	b480      	push	{r7}
 800b0d0:	b085      	sub	sp, #20
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	68da      	ldr	r2, [r3, #12]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f042 0201 	orr.w	r2, r2, #1
 800b0e4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	f003 0307 	and.w	r3, r3, #7
 800b0f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2b06      	cmp	r3, #6
 800b0f6:	d007      	beq.n	800b108 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f042 0201 	orr.w	r2, r2, #1
 800b106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3714      	adds	r7, #20
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr

0800b116 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b082      	sub	sp, #8
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	f003 0302 	and.w	r3, r3, #2
 800b128:	2b02      	cmp	r3, #2
 800b12a:	d122      	bne.n	800b172 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	f003 0302 	and.w	r3, r3, #2
 800b136:	2b02      	cmp	r3, #2
 800b138:	d11b      	bne.n	800b172 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f06f 0202 	mvn.w	r2, #2
 800b142:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	699b      	ldr	r3, [r3, #24]
 800b150:	f003 0303 	and.w	r3, r3, #3
 800b154:	2b00      	cmp	r3, #0
 800b156:	d003      	beq.n	800b160 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 f8ee 	bl	800b33a <HAL_TIM_IC_CaptureCallback>
 800b15e:	e005      	b.n	800b16c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 f8e0 	bl	800b326 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 f8f1 	bl	800b34e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	f003 0304 	and.w	r3, r3, #4
 800b17c:	2b04      	cmp	r3, #4
 800b17e:	d122      	bne.n	800b1c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	f003 0304 	and.w	r3, r3, #4
 800b18a:	2b04      	cmp	r3, #4
 800b18c:	d11b      	bne.n	800b1c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f06f 0204 	mvn.w	r2, #4
 800b196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2202      	movs	r2, #2
 800b19c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	699b      	ldr	r3, [r3, #24]
 800b1a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d003      	beq.n	800b1b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 f8c4 	bl	800b33a <HAL_TIM_IC_CaptureCallback>
 800b1b2:	e005      	b.n	800b1c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 f8b6 	bl	800b326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f8c7 	bl	800b34e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	f003 0308 	and.w	r3, r3, #8
 800b1d0:	2b08      	cmp	r3, #8
 800b1d2:	d122      	bne.n	800b21a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	f003 0308 	and.w	r3, r3, #8
 800b1de:	2b08      	cmp	r3, #8
 800b1e0:	d11b      	bne.n	800b21a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f06f 0208 	mvn.w	r2, #8
 800b1ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2204      	movs	r2, #4
 800b1f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	69db      	ldr	r3, [r3, #28]
 800b1f8:	f003 0303 	and.w	r3, r3, #3
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d003      	beq.n	800b208 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 f89a 	bl	800b33a <HAL_TIM_IC_CaptureCallback>
 800b206:	e005      	b.n	800b214 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 f88c 	bl	800b326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 f89d 	bl	800b34e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	f003 0310 	and.w	r3, r3, #16
 800b224:	2b10      	cmp	r3, #16
 800b226:	d122      	bne.n	800b26e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	f003 0310 	and.w	r3, r3, #16
 800b232:	2b10      	cmp	r3, #16
 800b234:	d11b      	bne.n	800b26e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f06f 0210 	mvn.w	r2, #16
 800b23e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2208      	movs	r2, #8
 800b244:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	69db      	ldr	r3, [r3, #28]
 800b24c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b250:	2b00      	cmp	r3, #0
 800b252:	d003      	beq.n	800b25c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 f870 	bl	800b33a <HAL_TIM_IC_CaptureCallback>
 800b25a:	e005      	b.n	800b268 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 f862 	bl	800b326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f873 	bl	800b34e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	f003 0301 	and.w	r3, r3, #1
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d10e      	bne.n	800b29a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	f003 0301 	and.w	r3, r3, #1
 800b286:	2b01      	cmp	r3, #1
 800b288:	d107      	bne.n	800b29a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f06f 0201 	mvn.w	r2, #1
 800b292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f7f6 f813 	bl	80012c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2a4:	2b80      	cmp	r3, #128	; 0x80
 800b2a6:	d10e      	bne.n	800b2c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2b2:	2b80      	cmp	r3, #128	; 0x80
 800b2b4:	d107      	bne.n	800b2c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b2be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f8e3 	bl	800b48c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2d0:	2b40      	cmp	r3, #64	; 0x40
 800b2d2:	d10e      	bne.n	800b2f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2de:	2b40      	cmp	r3, #64	; 0x40
 800b2e0:	d107      	bne.n	800b2f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b2ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 f838 	bl	800b362 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	691b      	ldr	r3, [r3, #16]
 800b2f8:	f003 0320 	and.w	r3, r3, #32
 800b2fc:	2b20      	cmp	r3, #32
 800b2fe:	d10e      	bne.n	800b31e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	f003 0320 	and.w	r3, r3, #32
 800b30a:	2b20      	cmp	r3, #32
 800b30c:	d107      	bne.n	800b31e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f06f 0220 	mvn.w	r2, #32
 800b316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f8ad 	bl	800b478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b31e:	bf00      	nop
 800b320:	3708      	adds	r7, #8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b326:	b480      	push	{r7}
 800b328:	b083      	sub	sp, #12
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b32e:	bf00      	nop
 800b330:	370c      	adds	r7, #12
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b33a:	b480      	push	{r7}
 800b33c:	b083      	sub	sp, #12
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b342:	bf00      	nop
 800b344:	370c      	adds	r7, #12
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr

0800b34e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b34e:	b480      	push	{r7}
 800b350:	b083      	sub	sp, #12
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b356:	bf00      	nop
 800b358:	370c      	adds	r7, #12
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b362:	b480      	push	{r7}
 800b364:	b083      	sub	sp, #12
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b36a:	bf00      	nop
 800b36c:	370c      	adds	r7, #12
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
	...

0800b378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4a34      	ldr	r2, [pc, #208]	; (800b45c <TIM_Base_SetConfig+0xe4>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d00f      	beq.n	800b3b0 <TIM_Base_SetConfig+0x38>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b396:	d00b      	beq.n	800b3b0 <TIM_Base_SetConfig+0x38>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a31      	ldr	r2, [pc, #196]	; (800b460 <TIM_Base_SetConfig+0xe8>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d007      	beq.n	800b3b0 <TIM_Base_SetConfig+0x38>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a30      	ldr	r2, [pc, #192]	; (800b464 <TIM_Base_SetConfig+0xec>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d003      	beq.n	800b3b0 <TIM_Base_SetConfig+0x38>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a2f      	ldr	r2, [pc, #188]	; (800b468 <TIM_Base_SetConfig+0xf0>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d108      	bne.n	800b3c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4a25      	ldr	r2, [pc, #148]	; (800b45c <TIM_Base_SetConfig+0xe4>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d01b      	beq.n	800b402 <TIM_Base_SetConfig+0x8a>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3d0:	d017      	beq.n	800b402 <TIM_Base_SetConfig+0x8a>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a22      	ldr	r2, [pc, #136]	; (800b460 <TIM_Base_SetConfig+0xe8>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d013      	beq.n	800b402 <TIM_Base_SetConfig+0x8a>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a21      	ldr	r2, [pc, #132]	; (800b464 <TIM_Base_SetConfig+0xec>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d00f      	beq.n	800b402 <TIM_Base_SetConfig+0x8a>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a20      	ldr	r2, [pc, #128]	; (800b468 <TIM_Base_SetConfig+0xf0>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d00b      	beq.n	800b402 <TIM_Base_SetConfig+0x8a>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a1f      	ldr	r2, [pc, #124]	; (800b46c <TIM_Base_SetConfig+0xf4>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d007      	beq.n	800b402 <TIM_Base_SetConfig+0x8a>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4a1e      	ldr	r2, [pc, #120]	; (800b470 <TIM_Base_SetConfig+0xf8>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d003      	beq.n	800b402 <TIM_Base_SetConfig+0x8a>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4a1d      	ldr	r2, [pc, #116]	; (800b474 <TIM_Base_SetConfig+0xfc>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d108      	bne.n	800b414 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	4313      	orrs	r3, r2
 800b412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	695b      	ldr	r3, [r3, #20]
 800b41e:	4313      	orrs	r3, r2
 800b420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	689a      	ldr	r2, [r3, #8]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4a08      	ldr	r2, [pc, #32]	; (800b45c <TIM_Base_SetConfig+0xe4>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d103      	bne.n	800b448 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	691a      	ldr	r2, [r3, #16]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	615a      	str	r2, [r3, #20]
}
 800b44e:	bf00      	nop
 800b450:	3714      	adds	r7, #20
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr
 800b45a:	bf00      	nop
 800b45c:	40010000 	.word	0x40010000
 800b460:	40000400 	.word	0x40000400
 800b464:	40000800 	.word	0x40000800
 800b468:	40000c00 	.word	0x40000c00
 800b46c:	40014000 	.word	0x40014000
 800b470:	40014400 	.word	0x40014400
 800b474:	40014800 	.word	0x40014800

0800b478 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b480:	bf00      	nop
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b494:	bf00      	nop
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e03f      	b.n	800b532 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d106      	bne.n	800b4cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 f837 	bl	800b53a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2224      	movs	r2, #36	; 0x24
 800b4d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	68da      	ldr	r2, [r3, #12]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b4e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 f915 	bl	800b714 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	691a      	ldr	r2, [r3, #16]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b4f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	695a      	ldr	r2, [r3, #20]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b508:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	68da      	ldr	r2, [r3, #12]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b518:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2220      	movs	r2, #32
 800b524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2220      	movs	r2, #32
 800b52c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b083      	sub	sp, #12
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800b542:	bf00      	nop
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr

0800b54e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b54e:	b580      	push	{r7, lr}
 800b550:	b088      	sub	sp, #32
 800b552:	af02      	add	r7, sp, #8
 800b554:	60f8      	str	r0, [r7, #12]
 800b556:	60b9      	str	r1, [r7, #8]
 800b558:	603b      	str	r3, [r7, #0]
 800b55a:	4613      	mov	r3, r2
 800b55c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800b55e:	2300      	movs	r3, #0
 800b560:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	2b20      	cmp	r3, #32
 800b56c:	f040 8083 	bne.w	800b676 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d002      	beq.n	800b57c <HAL_UART_Transmit+0x2e>
 800b576:	88fb      	ldrh	r3, [r7, #6]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d101      	bne.n	800b580 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	e07b      	b.n	800b678 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b586:	2b01      	cmp	r3, #1
 800b588:	d101      	bne.n	800b58e <HAL_UART_Transmit+0x40>
 800b58a:	2302      	movs	r3, #2
 800b58c:	e074      	b.n	800b678 <HAL_UART_Transmit+0x12a>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2201      	movs	r2, #1
 800b592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2221      	movs	r2, #33	; 0x21
 800b5a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b5a4:	f7fd fce4 	bl	8008f70 <HAL_GetTick>
 800b5a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	88fa      	ldrh	r2, [r7, #6]
 800b5ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	88fa      	ldrh	r2, [r7, #6]
 800b5b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800b5be:	e042      	b.n	800b646 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5d6:	d122      	bne.n	800b61e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	2180      	movs	r1, #128	; 0x80
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f000 f84c 	bl	800b680 <UART_WaitOnFlagUntilTimeout>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d001      	beq.n	800b5f2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800b5ee:	2303      	movs	r3, #3
 800b5f0:	e042      	b.n	800b678 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	881b      	ldrh	r3, [r3, #0]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b604:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d103      	bne.n	800b616 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	3302      	adds	r3, #2
 800b612:	60bb      	str	r3, [r7, #8]
 800b614:	e017      	b.n	800b646 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	3301      	adds	r3, #1
 800b61a:	60bb      	str	r3, [r7, #8]
 800b61c:	e013      	b.n	800b646 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	2200      	movs	r2, #0
 800b626:	2180      	movs	r1, #128	; 0x80
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f000 f829 	bl	800b680 <UART_WaitOnFlagUntilTimeout>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d001      	beq.n	800b638 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800b634:	2303      	movs	r3, #3
 800b636:	e01f      	b.n	800b678 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	1c5a      	adds	r2, r3, #1
 800b63c:	60ba      	str	r2, [r7, #8]
 800b63e:	781a      	ldrb	r2, [r3, #0]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1b7      	bne.n	800b5c0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	9300      	str	r3, [sp, #0]
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	2200      	movs	r2, #0
 800b658:	2140      	movs	r1, #64	; 0x40
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f000 f810 	bl	800b680 <UART_WaitOnFlagUntilTimeout>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d001      	beq.n	800b66a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800b666:	2303      	movs	r3, #3
 800b668:	e006      	b.n	800b678 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2220      	movs	r2, #32
 800b66e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800b672:	2300      	movs	r3, #0
 800b674:	e000      	b.n	800b678 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800b676:	2302      	movs	r3, #2
  }
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3718      	adds	r7, #24
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	603b      	str	r3, [r7, #0]
 800b68c:	4613      	mov	r3, r2
 800b68e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b690:	e02c      	b.n	800b6ec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b698:	d028      	beq.n	800b6ec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d007      	beq.n	800b6b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b6a0:	f7fd fc66 	bl	8008f70 <HAL_GetTick>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	1ad3      	subs	r3, r2, r3
 800b6aa:	69ba      	ldr	r2, [r7, #24]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d21d      	bcs.n	800b6ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	68da      	ldr	r2, [r3, #12]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b6be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	695a      	ldr	r2, [r3, #20]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f022 0201 	bic.w	r2, r2, #1
 800b6ce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2220      	movs	r2, #32
 800b6d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2220      	movs	r2, #32
 800b6dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e00f      	b.n	800b70c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	4013      	ands	r3, r2
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	bf0c      	ite	eq
 800b6fc:	2301      	moveq	r3, #1
 800b6fe:	2300      	movne	r3, #0
 800b700:	b2db      	uxtb	r3, r3
 800b702:	461a      	mov	r2, r3
 800b704:	79fb      	ldrb	r3, [r7, #7]
 800b706:	429a      	cmp	r2, r3
 800b708:	d0c3      	beq.n	800b692 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b718:	b085      	sub	sp, #20
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	691b      	ldr	r3, [r3, #16]
 800b724:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	68da      	ldr	r2, [r3, #12]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	430a      	orrs	r2, r1
 800b732:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	689a      	ldr	r2, [r3, #8]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	691b      	ldr	r3, [r3, #16]
 800b73c:	431a      	orrs	r2, r3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	695b      	ldr	r3, [r3, #20]
 800b742:	431a      	orrs	r2, r3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	69db      	ldr	r3, [r3, #28]
 800b748:	4313      	orrs	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b756:	f023 030c 	bic.w	r3, r3, #12
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	6812      	ldr	r2, [r2, #0]
 800b75e:	68f9      	ldr	r1, [r7, #12]
 800b760:	430b      	orrs	r3, r1
 800b762:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	695b      	ldr	r3, [r3, #20]
 800b76a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	699a      	ldr	r2, [r3, #24]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	430a      	orrs	r2, r1
 800b778:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	69db      	ldr	r3, [r3, #28]
 800b77e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b782:	f040 818b 	bne.w	800ba9c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4ac1      	ldr	r2, [pc, #772]	; (800ba90 <UART_SetConfig+0x37c>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d005      	beq.n	800b79c <UART_SetConfig+0x88>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4abf      	ldr	r2, [pc, #764]	; (800ba94 <UART_SetConfig+0x380>)
 800b796:	4293      	cmp	r3, r2
 800b798:	f040 80bd 	bne.w	800b916 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b79c:	f7ff fc1c 	bl	800afd8 <HAL_RCC_GetPCLK2Freq>
 800b7a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	461d      	mov	r5, r3
 800b7a6:	f04f 0600 	mov.w	r6, #0
 800b7aa:	46a8      	mov	r8, r5
 800b7ac:	46b1      	mov	r9, r6
 800b7ae:	eb18 0308 	adds.w	r3, r8, r8
 800b7b2:	eb49 0409 	adc.w	r4, r9, r9
 800b7b6:	4698      	mov	r8, r3
 800b7b8:	46a1      	mov	r9, r4
 800b7ba:	eb18 0805 	adds.w	r8, r8, r5
 800b7be:	eb49 0906 	adc.w	r9, r9, r6
 800b7c2:	f04f 0100 	mov.w	r1, #0
 800b7c6:	f04f 0200 	mov.w	r2, #0
 800b7ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b7ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b7d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b7d6:	4688      	mov	r8, r1
 800b7d8:	4691      	mov	r9, r2
 800b7da:	eb18 0005 	adds.w	r0, r8, r5
 800b7de:	eb49 0106 	adc.w	r1, r9, r6
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	461d      	mov	r5, r3
 800b7e8:	f04f 0600 	mov.w	r6, #0
 800b7ec:	196b      	adds	r3, r5, r5
 800b7ee:	eb46 0406 	adc.w	r4, r6, r6
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	4623      	mov	r3, r4
 800b7f6:	f7f5 fa27 	bl	8000c48 <__aeabi_uldivmod>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	460c      	mov	r4, r1
 800b7fe:	461a      	mov	r2, r3
 800b800:	4ba5      	ldr	r3, [pc, #660]	; (800ba98 <UART_SetConfig+0x384>)
 800b802:	fba3 2302 	umull	r2, r3, r3, r2
 800b806:	095b      	lsrs	r3, r3, #5
 800b808:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	461d      	mov	r5, r3
 800b810:	f04f 0600 	mov.w	r6, #0
 800b814:	46a9      	mov	r9, r5
 800b816:	46b2      	mov	sl, r6
 800b818:	eb19 0309 	adds.w	r3, r9, r9
 800b81c:	eb4a 040a 	adc.w	r4, sl, sl
 800b820:	4699      	mov	r9, r3
 800b822:	46a2      	mov	sl, r4
 800b824:	eb19 0905 	adds.w	r9, r9, r5
 800b828:	eb4a 0a06 	adc.w	sl, sl, r6
 800b82c:	f04f 0100 	mov.w	r1, #0
 800b830:	f04f 0200 	mov.w	r2, #0
 800b834:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b838:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b83c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b840:	4689      	mov	r9, r1
 800b842:	4692      	mov	sl, r2
 800b844:	eb19 0005 	adds.w	r0, r9, r5
 800b848:	eb4a 0106 	adc.w	r1, sl, r6
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	461d      	mov	r5, r3
 800b852:	f04f 0600 	mov.w	r6, #0
 800b856:	196b      	adds	r3, r5, r5
 800b858:	eb46 0406 	adc.w	r4, r6, r6
 800b85c:	461a      	mov	r2, r3
 800b85e:	4623      	mov	r3, r4
 800b860:	f7f5 f9f2 	bl	8000c48 <__aeabi_uldivmod>
 800b864:	4603      	mov	r3, r0
 800b866:	460c      	mov	r4, r1
 800b868:	461a      	mov	r2, r3
 800b86a:	4b8b      	ldr	r3, [pc, #556]	; (800ba98 <UART_SetConfig+0x384>)
 800b86c:	fba3 1302 	umull	r1, r3, r3, r2
 800b870:	095b      	lsrs	r3, r3, #5
 800b872:	2164      	movs	r1, #100	; 0x64
 800b874:	fb01 f303 	mul.w	r3, r1, r3
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	00db      	lsls	r3, r3, #3
 800b87c:	3332      	adds	r3, #50	; 0x32
 800b87e:	4a86      	ldr	r2, [pc, #536]	; (800ba98 <UART_SetConfig+0x384>)
 800b880:	fba2 2303 	umull	r2, r3, r2, r3
 800b884:	095b      	lsrs	r3, r3, #5
 800b886:	005b      	lsls	r3, r3, #1
 800b888:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b88c:	4498      	add	r8, r3
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	461d      	mov	r5, r3
 800b892:	f04f 0600 	mov.w	r6, #0
 800b896:	46a9      	mov	r9, r5
 800b898:	46b2      	mov	sl, r6
 800b89a:	eb19 0309 	adds.w	r3, r9, r9
 800b89e:	eb4a 040a 	adc.w	r4, sl, sl
 800b8a2:	4699      	mov	r9, r3
 800b8a4:	46a2      	mov	sl, r4
 800b8a6:	eb19 0905 	adds.w	r9, r9, r5
 800b8aa:	eb4a 0a06 	adc.w	sl, sl, r6
 800b8ae:	f04f 0100 	mov.w	r1, #0
 800b8b2:	f04f 0200 	mov.w	r2, #0
 800b8b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b8ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b8be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b8c2:	4689      	mov	r9, r1
 800b8c4:	4692      	mov	sl, r2
 800b8c6:	eb19 0005 	adds.w	r0, r9, r5
 800b8ca:	eb4a 0106 	adc.w	r1, sl, r6
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	461d      	mov	r5, r3
 800b8d4:	f04f 0600 	mov.w	r6, #0
 800b8d8:	196b      	adds	r3, r5, r5
 800b8da:	eb46 0406 	adc.w	r4, r6, r6
 800b8de:	461a      	mov	r2, r3
 800b8e0:	4623      	mov	r3, r4
 800b8e2:	f7f5 f9b1 	bl	8000c48 <__aeabi_uldivmod>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	460c      	mov	r4, r1
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	4b6a      	ldr	r3, [pc, #424]	; (800ba98 <UART_SetConfig+0x384>)
 800b8ee:	fba3 1302 	umull	r1, r3, r3, r2
 800b8f2:	095b      	lsrs	r3, r3, #5
 800b8f4:	2164      	movs	r1, #100	; 0x64
 800b8f6:	fb01 f303 	mul.w	r3, r1, r3
 800b8fa:	1ad3      	subs	r3, r2, r3
 800b8fc:	00db      	lsls	r3, r3, #3
 800b8fe:	3332      	adds	r3, #50	; 0x32
 800b900:	4a65      	ldr	r2, [pc, #404]	; (800ba98 <UART_SetConfig+0x384>)
 800b902:	fba2 2303 	umull	r2, r3, r2, r3
 800b906:	095b      	lsrs	r3, r3, #5
 800b908:	f003 0207 	and.w	r2, r3, #7
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4442      	add	r2, r8
 800b912:	609a      	str	r2, [r3, #8]
 800b914:	e26f      	b.n	800bdf6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b916:	f7ff fb4b 	bl	800afb0 <HAL_RCC_GetPCLK1Freq>
 800b91a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	461d      	mov	r5, r3
 800b920:	f04f 0600 	mov.w	r6, #0
 800b924:	46a8      	mov	r8, r5
 800b926:	46b1      	mov	r9, r6
 800b928:	eb18 0308 	adds.w	r3, r8, r8
 800b92c:	eb49 0409 	adc.w	r4, r9, r9
 800b930:	4698      	mov	r8, r3
 800b932:	46a1      	mov	r9, r4
 800b934:	eb18 0805 	adds.w	r8, r8, r5
 800b938:	eb49 0906 	adc.w	r9, r9, r6
 800b93c:	f04f 0100 	mov.w	r1, #0
 800b940:	f04f 0200 	mov.w	r2, #0
 800b944:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b948:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b94c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b950:	4688      	mov	r8, r1
 800b952:	4691      	mov	r9, r2
 800b954:	eb18 0005 	adds.w	r0, r8, r5
 800b958:	eb49 0106 	adc.w	r1, r9, r6
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	461d      	mov	r5, r3
 800b962:	f04f 0600 	mov.w	r6, #0
 800b966:	196b      	adds	r3, r5, r5
 800b968:	eb46 0406 	adc.w	r4, r6, r6
 800b96c:	461a      	mov	r2, r3
 800b96e:	4623      	mov	r3, r4
 800b970:	f7f5 f96a 	bl	8000c48 <__aeabi_uldivmod>
 800b974:	4603      	mov	r3, r0
 800b976:	460c      	mov	r4, r1
 800b978:	461a      	mov	r2, r3
 800b97a:	4b47      	ldr	r3, [pc, #284]	; (800ba98 <UART_SetConfig+0x384>)
 800b97c:	fba3 2302 	umull	r2, r3, r3, r2
 800b980:	095b      	lsrs	r3, r3, #5
 800b982:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	461d      	mov	r5, r3
 800b98a:	f04f 0600 	mov.w	r6, #0
 800b98e:	46a9      	mov	r9, r5
 800b990:	46b2      	mov	sl, r6
 800b992:	eb19 0309 	adds.w	r3, r9, r9
 800b996:	eb4a 040a 	adc.w	r4, sl, sl
 800b99a:	4699      	mov	r9, r3
 800b99c:	46a2      	mov	sl, r4
 800b99e:	eb19 0905 	adds.w	r9, r9, r5
 800b9a2:	eb4a 0a06 	adc.w	sl, sl, r6
 800b9a6:	f04f 0100 	mov.w	r1, #0
 800b9aa:	f04f 0200 	mov.w	r2, #0
 800b9ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b9b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b9b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b9ba:	4689      	mov	r9, r1
 800b9bc:	4692      	mov	sl, r2
 800b9be:	eb19 0005 	adds.w	r0, r9, r5
 800b9c2:	eb4a 0106 	adc.w	r1, sl, r6
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	461d      	mov	r5, r3
 800b9cc:	f04f 0600 	mov.w	r6, #0
 800b9d0:	196b      	adds	r3, r5, r5
 800b9d2:	eb46 0406 	adc.w	r4, r6, r6
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	4623      	mov	r3, r4
 800b9da:	f7f5 f935 	bl	8000c48 <__aeabi_uldivmod>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	460c      	mov	r4, r1
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	4b2c      	ldr	r3, [pc, #176]	; (800ba98 <UART_SetConfig+0x384>)
 800b9e6:	fba3 1302 	umull	r1, r3, r3, r2
 800b9ea:	095b      	lsrs	r3, r3, #5
 800b9ec:	2164      	movs	r1, #100	; 0x64
 800b9ee:	fb01 f303 	mul.w	r3, r1, r3
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	00db      	lsls	r3, r3, #3
 800b9f6:	3332      	adds	r3, #50	; 0x32
 800b9f8:	4a27      	ldr	r2, [pc, #156]	; (800ba98 <UART_SetConfig+0x384>)
 800b9fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b9fe:	095b      	lsrs	r3, r3, #5
 800ba00:	005b      	lsls	r3, r3, #1
 800ba02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ba06:	4498      	add	r8, r3
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	461d      	mov	r5, r3
 800ba0c:	f04f 0600 	mov.w	r6, #0
 800ba10:	46a9      	mov	r9, r5
 800ba12:	46b2      	mov	sl, r6
 800ba14:	eb19 0309 	adds.w	r3, r9, r9
 800ba18:	eb4a 040a 	adc.w	r4, sl, sl
 800ba1c:	4699      	mov	r9, r3
 800ba1e:	46a2      	mov	sl, r4
 800ba20:	eb19 0905 	adds.w	r9, r9, r5
 800ba24:	eb4a 0a06 	adc.w	sl, sl, r6
 800ba28:	f04f 0100 	mov.w	r1, #0
 800ba2c:	f04f 0200 	mov.w	r2, #0
 800ba30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ba38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ba3c:	4689      	mov	r9, r1
 800ba3e:	4692      	mov	sl, r2
 800ba40:	eb19 0005 	adds.w	r0, r9, r5
 800ba44:	eb4a 0106 	adc.w	r1, sl, r6
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	461d      	mov	r5, r3
 800ba4e:	f04f 0600 	mov.w	r6, #0
 800ba52:	196b      	adds	r3, r5, r5
 800ba54:	eb46 0406 	adc.w	r4, r6, r6
 800ba58:	461a      	mov	r2, r3
 800ba5a:	4623      	mov	r3, r4
 800ba5c:	f7f5 f8f4 	bl	8000c48 <__aeabi_uldivmod>
 800ba60:	4603      	mov	r3, r0
 800ba62:	460c      	mov	r4, r1
 800ba64:	461a      	mov	r2, r3
 800ba66:	4b0c      	ldr	r3, [pc, #48]	; (800ba98 <UART_SetConfig+0x384>)
 800ba68:	fba3 1302 	umull	r1, r3, r3, r2
 800ba6c:	095b      	lsrs	r3, r3, #5
 800ba6e:	2164      	movs	r1, #100	; 0x64
 800ba70:	fb01 f303 	mul.w	r3, r1, r3
 800ba74:	1ad3      	subs	r3, r2, r3
 800ba76:	00db      	lsls	r3, r3, #3
 800ba78:	3332      	adds	r3, #50	; 0x32
 800ba7a:	4a07      	ldr	r2, [pc, #28]	; (800ba98 <UART_SetConfig+0x384>)
 800ba7c:	fba2 2303 	umull	r2, r3, r2, r3
 800ba80:	095b      	lsrs	r3, r3, #5
 800ba82:	f003 0207 	and.w	r2, r3, #7
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4442      	add	r2, r8
 800ba8c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ba8e:	e1b2      	b.n	800bdf6 <UART_SetConfig+0x6e2>
 800ba90:	40011000 	.word	0x40011000
 800ba94:	40011400 	.word	0x40011400
 800ba98:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4ad7      	ldr	r2, [pc, #860]	; (800be00 <UART_SetConfig+0x6ec>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d005      	beq.n	800bab2 <UART_SetConfig+0x39e>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4ad6      	ldr	r2, [pc, #856]	; (800be04 <UART_SetConfig+0x6f0>)
 800baac:	4293      	cmp	r3, r2
 800baae:	f040 80d1 	bne.w	800bc54 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800bab2:	f7ff fa91 	bl	800afd8 <HAL_RCC_GetPCLK2Freq>
 800bab6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	469a      	mov	sl, r3
 800babc:	f04f 0b00 	mov.w	fp, #0
 800bac0:	46d0      	mov	r8, sl
 800bac2:	46d9      	mov	r9, fp
 800bac4:	eb18 0308 	adds.w	r3, r8, r8
 800bac8:	eb49 0409 	adc.w	r4, r9, r9
 800bacc:	4698      	mov	r8, r3
 800bace:	46a1      	mov	r9, r4
 800bad0:	eb18 080a 	adds.w	r8, r8, sl
 800bad4:	eb49 090b 	adc.w	r9, r9, fp
 800bad8:	f04f 0100 	mov.w	r1, #0
 800badc:	f04f 0200 	mov.w	r2, #0
 800bae0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bae4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bae8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800baec:	4688      	mov	r8, r1
 800baee:	4691      	mov	r9, r2
 800baf0:	eb1a 0508 	adds.w	r5, sl, r8
 800baf4:	eb4b 0609 	adc.w	r6, fp, r9
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	4619      	mov	r1, r3
 800bafe:	f04f 0200 	mov.w	r2, #0
 800bb02:	f04f 0300 	mov.w	r3, #0
 800bb06:	f04f 0400 	mov.w	r4, #0
 800bb0a:	0094      	lsls	r4, r2, #2
 800bb0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bb10:	008b      	lsls	r3, r1, #2
 800bb12:	461a      	mov	r2, r3
 800bb14:	4623      	mov	r3, r4
 800bb16:	4628      	mov	r0, r5
 800bb18:	4631      	mov	r1, r6
 800bb1a:	f7f5 f895 	bl	8000c48 <__aeabi_uldivmod>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	460c      	mov	r4, r1
 800bb22:	461a      	mov	r2, r3
 800bb24:	4bb8      	ldr	r3, [pc, #736]	; (800be08 <UART_SetConfig+0x6f4>)
 800bb26:	fba3 2302 	umull	r2, r3, r3, r2
 800bb2a:	095b      	lsrs	r3, r3, #5
 800bb2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	469b      	mov	fp, r3
 800bb34:	f04f 0c00 	mov.w	ip, #0
 800bb38:	46d9      	mov	r9, fp
 800bb3a:	46e2      	mov	sl, ip
 800bb3c:	eb19 0309 	adds.w	r3, r9, r9
 800bb40:	eb4a 040a 	adc.w	r4, sl, sl
 800bb44:	4699      	mov	r9, r3
 800bb46:	46a2      	mov	sl, r4
 800bb48:	eb19 090b 	adds.w	r9, r9, fp
 800bb4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bb50:	f04f 0100 	mov.w	r1, #0
 800bb54:	f04f 0200 	mov.w	r2, #0
 800bb58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bb5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bb60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bb64:	4689      	mov	r9, r1
 800bb66:	4692      	mov	sl, r2
 800bb68:	eb1b 0509 	adds.w	r5, fp, r9
 800bb6c:	eb4c 060a 	adc.w	r6, ip, sl
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	4619      	mov	r1, r3
 800bb76:	f04f 0200 	mov.w	r2, #0
 800bb7a:	f04f 0300 	mov.w	r3, #0
 800bb7e:	f04f 0400 	mov.w	r4, #0
 800bb82:	0094      	lsls	r4, r2, #2
 800bb84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bb88:	008b      	lsls	r3, r1, #2
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	4623      	mov	r3, r4
 800bb8e:	4628      	mov	r0, r5
 800bb90:	4631      	mov	r1, r6
 800bb92:	f7f5 f859 	bl	8000c48 <__aeabi_uldivmod>
 800bb96:	4603      	mov	r3, r0
 800bb98:	460c      	mov	r4, r1
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	4b9a      	ldr	r3, [pc, #616]	; (800be08 <UART_SetConfig+0x6f4>)
 800bb9e:	fba3 1302 	umull	r1, r3, r3, r2
 800bba2:	095b      	lsrs	r3, r3, #5
 800bba4:	2164      	movs	r1, #100	; 0x64
 800bba6:	fb01 f303 	mul.w	r3, r1, r3
 800bbaa:	1ad3      	subs	r3, r2, r3
 800bbac:	011b      	lsls	r3, r3, #4
 800bbae:	3332      	adds	r3, #50	; 0x32
 800bbb0:	4a95      	ldr	r2, [pc, #596]	; (800be08 <UART_SetConfig+0x6f4>)
 800bbb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bbb6:	095b      	lsrs	r3, r3, #5
 800bbb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbbc:	4498      	add	r8, r3
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	469b      	mov	fp, r3
 800bbc2:	f04f 0c00 	mov.w	ip, #0
 800bbc6:	46d9      	mov	r9, fp
 800bbc8:	46e2      	mov	sl, ip
 800bbca:	eb19 0309 	adds.w	r3, r9, r9
 800bbce:	eb4a 040a 	adc.w	r4, sl, sl
 800bbd2:	4699      	mov	r9, r3
 800bbd4:	46a2      	mov	sl, r4
 800bbd6:	eb19 090b 	adds.w	r9, r9, fp
 800bbda:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bbde:	f04f 0100 	mov.w	r1, #0
 800bbe2:	f04f 0200 	mov.w	r2, #0
 800bbe6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bbea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bbee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bbf2:	4689      	mov	r9, r1
 800bbf4:	4692      	mov	sl, r2
 800bbf6:	eb1b 0509 	adds.w	r5, fp, r9
 800bbfa:	eb4c 060a 	adc.w	r6, ip, sl
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	4619      	mov	r1, r3
 800bc04:	f04f 0200 	mov.w	r2, #0
 800bc08:	f04f 0300 	mov.w	r3, #0
 800bc0c:	f04f 0400 	mov.w	r4, #0
 800bc10:	0094      	lsls	r4, r2, #2
 800bc12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bc16:	008b      	lsls	r3, r1, #2
 800bc18:	461a      	mov	r2, r3
 800bc1a:	4623      	mov	r3, r4
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	4631      	mov	r1, r6
 800bc20:	f7f5 f812 	bl	8000c48 <__aeabi_uldivmod>
 800bc24:	4603      	mov	r3, r0
 800bc26:	460c      	mov	r4, r1
 800bc28:	461a      	mov	r2, r3
 800bc2a:	4b77      	ldr	r3, [pc, #476]	; (800be08 <UART_SetConfig+0x6f4>)
 800bc2c:	fba3 1302 	umull	r1, r3, r3, r2
 800bc30:	095b      	lsrs	r3, r3, #5
 800bc32:	2164      	movs	r1, #100	; 0x64
 800bc34:	fb01 f303 	mul.w	r3, r1, r3
 800bc38:	1ad3      	subs	r3, r2, r3
 800bc3a:	011b      	lsls	r3, r3, #4
 800bc3c:	3332      	adds	r3, #50	; 0x32
 800bc3e:	4a72      	ldr	r2, [pc, #456]	; (800be08 <UART_SetConfig+0x6f4>)
 800bc40:	fba2 2303 	umull	r2, r3, r2, r3
 800bc44:	095b      	lsrs	r3, r3, #5
 800bc46:	f003 020f 	and.w	r2, r3, #15
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4442      	add	r2, r8
 800bc50:	609a      	str	r2, [r3, #8]
 800bc52:	e0d0      	b.n	800bdf6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc54:	f7ff f9ac 	bl	800afb0 <HAL_RCC_GetPCLK1Freq>
 800bc58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	469a      	mov	sl, r3
 800bc5e:	f04f 0b00 	mov.w	fp, #0
 800bc62:	46d0      	mov	r8, sl
 800bc64:	46d9      	mov	r9, fp
 800bc66:	eb18 0308 	adds.w	r3, r8, r8
 800bc6a:	eb49 0409 	adc.w	r4, r9, r9
 800bc6e:	4698      	mov	r8, r3
 800bc70:	46a1      	mov	r9, r4
 800bc72:	eb18 080a 	adds.w	r8, r8, sl
 800bc76:	eb49 090b 	adc.w	r9, r9, fp
 800bc7a:	f04f 0100 	mov.w	r1, #0
 800bc7e:	f04f 0200 	mov.w	r2, #0
 800bc82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bc86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bc8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bc8e:	4688      	mov	r8, r1
 800bc90:	4691      	mov	r9, r2
 800bc92:	eb1a 0508 	adds.w	r5, sl, r8
 800bc96:	eb4b 0609 	adc.w	r6, fp, r9
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	4619      	mov	r1, r3
 800bca0:	f04f 0200 	mov.w	r2, #0
 800bca4:	f04f 0300 	mov.w	r3, #0
 800bca8:	f04f 0400 	mov.w	r4, #0
 800bcac:	0094      	lsls	r4, r2, #2
 800bcae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bcb2:	008b      	lsls	r3, r1, #2
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	4623      	mov	r3, r4
 800bcb8:	4628      	mov	r0, r5
 800bcba:	4631      	mov	r1, r6
 800bcbc:	f7f4 ffc4 	bl	8000c48 <__aeabi_uldivmod>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	4b50      	ldr	r3, [pc, #320]	; (800be08 <UART_SetConfig+0x6f4>)
 800bcc8:	fba3 2302 	umull	r2, r3, r3, r2
 800bccc:	095b      	lsrs	r3, r3, #5
 800bcce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	469b      	mov	fp, r3
 800bcd6:	f04f 0c00 	mov.w	ip, #0
 800bcda:	46d9      	mov	r9, fp
 800bcdc:	46e2      	mov	sl, ip
 800bcde:	eb19 0309 	adds.w	r3, r9, r9
 800bce2:	eb4a 040a 	adc.w	r4, sl, sl
 800bce6:	4699      	mov	r9, r3
 800bce8:	46a2      	mov	sl, r4
 800bcea:	eb19 090b 	adds.w	r9, r9, fp
 800bcee:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bcf2:	f04f 0100 	mov.w	r1, #0
 800bcf6:	f04f 0200 	mov.w	r2, #0
 800bcfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bcfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bd02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bd06:	4689      	mov	r9, r1
 800bd08:	4692      	mov	sl, r2
 800bd0a:	eb1b 0509 	adds.w	r5, fp, r9
 800bd0e:	eb4c 060a 	adc.w	r6, ip, sl
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	4619      	mov	r1, r3
 800bd18:	f04f 0200 	mov.w	r2, #0
 800bd1c:	f04f 0300 	mov.w	r3, #0
 800bd20:	f04f 0400 	mov.w	r4, #0
 800bd24:	0094      	lsls	r4, r2, #2
 800bd26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bd2a:	008b      	lsls	r3, r1, #2
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	4623      	mov	r3, r4
 800bd30:	4628      	mov	r0, r5
 800bd32:	4631      	mov	r1, r6
 800bd34:	f7f4 ff88 	bl	8000c48 <__aeabi_uldivmod>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	460c      	mov	r4, r1
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	4b32      	ldr	r3, [pc, #200]	; (800be08 <UART_SetConfig+0x6f4>)
 800bd40:	fba3 1302 	umull	r1, r3, r3, r2
 800bd44:	095b      	lsrs	r3, r3, #5
 800bd46:	2164      	movs	r1, #100	; 0x64
 800bd48:	fb01 f303 	mul.w	r3, r1, r3
 800bd4c:	1ad3      	subs	r3, r2, r3
 800bd4e:	011b      	lsls	r3, r3, #4
 800bd50:	3332      	adds	r3, #50	; 0x32
 800bd52:	4a2d      	ldr	r2, [pc, #180]	; (800be08 <UART_SetConfig+0x6f4>)
 800bd54:	fba2 2303 	umull	r2, r3, r2, r3
 800bd58:	095b      	lsrs	r3, r3, #5
 800bd5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd5e:	4498      	add	r8, r3
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	469b      	mov	fp, r3
 800bd64:	f04f 0c00 	mov.w	ip, #0
 800bd68:	46d9      	mov	r9, fp
 800bd6a:	46e2      	mov	sl, ip
 800bd6c:	eb19 0309 	adds.w	r3, r9, r9
 800bd70:	eb4a 040a 	adc.w	r4, sl, sl
 800bd74:	4699      	mov	r9, r3
 800bd76:	46a2      	mov	sl, r4
 800bd78:	eb19 090b 	adds.w	r9, r9, fp
 800bd7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bd80:	f04f 0100 	mov.w	r1, #0
 800bd84:	f04f 0200 	mov.w	r2, #0
 800bd88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bd8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bd90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bd94:	4689      	mov	r9, r1
 800bd96:	4692      	mov	sl, r2
 800bd98:	eb1b 0509 	adds.w	r5, fp, r9
 800bd9c:	eb4c 060a 	adc.w	r6, ip, sl
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	4619      	mov	r1, r3
 800bda6:	f04f 0200 	mov.w	r2, #0
 800bdaa:	f04f 0300 	mov.w	r3, #0
 800bdae:	f04f 0400 	mov.w	r4, #0
 800bdb2:	0094      	lsls	r4, r2, #2
 800bdb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bdb8:	008b      	lsls	r3, r1, #2
 800bdba:	461a      	mov	r2, r3
 800bdbc:	4623      	mov	r3, r4
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	4631      	mov	r1, r6
 800bdc2:	f7f4 ff41 	bl	8000c48 <__aeabi_uldivmod>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	460c      	mov	r4, r1
 800bdca:	461a      	mov	r2, r3
 800bdcc:	4b0e      	ldr	r3, [pc, #56]	; (800be08 <UART_SetConfig+0x6f4>)
 800bdce:	fba3 1302 	umull	r1, r3, r3, r2
 800bdd2:	095b      	lsrs	r3, r3, #5
 800bdd4:	2164      	movs	r1, #100	; 0x64
 800bdd6:	fb01 f303 	mul.w	r3, r1, r3
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	011b      	lsls	r3, r3, #4
 800bdde:	3332      	adds	r3, #50	; 0x32
 800bde0:	4a09      	ldr	r2, [pc, #36]	; (800be08 <UART_SetConfig+0x6f4>)
 800bde2:	fba2 2303 	umull	r2, r3, r2, r3
 800bde6:	095b      	lsrs	r3, r3, #5
 800bde8:	f003 020f 	and.w	r2, r3, #15
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4442      	add	r2, r8
 800bdf2:	609a      	str	r2, [r3, #8]
}
 800bdf4:	e7ff      	b.n	800bdf6 <UART_SetConfig+0x6e2>
 800bdf6:	bf00      	nop
 800bdf8:	3714      	adds	r7, #20
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be00:	40011000 	.word	0x40011000
 800be04:	40011400 	.word	0x40011400
 800be08:	51eb851f 	.word	0x51eb851f

0800be0c <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS01A3_DataLogTerminal_Init(void);
static void MX_IKS01A3_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Init_PreTreatment */

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */
  MX_IKS01A3_DataLogTerminal_Init();
 800be10:	f000 f808 	bl	800be24 <MX_IKS01A3_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800be14:	bf00      	nop
 800be16:	bd80      	pop	{r7, pc}

0800be18 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_IKS01A3_DataLogTerminal_Process();
 800be1c:	f000 f9be 	bl	800c19c <MX_IKS01A3_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 800be20:	bf00      	nop
 800be22:	bd80      	pop	{r7, pc}

0800be24 <MX_IKS01A3_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Init(void)
{
 800be24:	b5b0      	push	{r4, r5, r7, lr}
 800be26:	b088      	sub	sp, #32
 800be28:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 800be2a:	2000      	movs	r0, #0
 800be2c:	f7fc fe72 	bl	8008b14 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800be30:	2101      	movs	r1, #1
 800be32:	2000      	movs	r0, #0
 800be34:	f7fc feee 	bl	8008c14 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 800be38:	2000      	movs	r0, #0
 800be3a:	f7fc ff3f 	bl	8008cbc <BSP_PB_GetState>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	bf0c      	ite	eq
 800be44:	2301      	moveq	r3, #1
 800be46:	2300      	movne	r3, #0
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	461a      	mov	r2, r3
 800be4c:	4bbe      	ldr	r3, [pc, #760]	; (800c148 <MX_IKS01A3_DataLogTerminal_Init+0x324>)
 800be4e:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800be50:	2000      	movs	r0, #0
 800be52:	f7fc ff95 	bl	8008d80 <BSP_COM_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);
 800be56:	2103      	movs	r1, #3
 800be58:	2000      	movs	r0, #0
 800be5a:	f7fc fa41 	bl	80082e0 <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 800be5e:	2102      	movs	r1, #2
 800be60:	2001      	movs	r0, #1
 800be62:	f7fc fa3d 	bl	80082e0 <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 800be66:	2104      	movs	r1, #4
 800be68:	2002      	movs	r0, #2
 800be6a:	f7fc fa39 	bl	80082e0 <IKS01A3_MOTION_SENSOR_Init>

  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800be6e:	2300      	movs	r3, #0
 800be70:	60fb      	str	r3, [r7, #12]
 800be72:	e0c3      	b.n	800bffc <MX_IKS01A3_DataLogTerminal_Init+0x1d8>
  {
    IKS01A3_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 800be74:	68f8      	ldr	r0, [r7, #12]
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	4613      	mov	r3, r2
 800be7a:	00db      	lsls	r3, r3, #3
 800be7c:	1a9b      	subs	r3, r3, r2
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	4ab2      	ldr	r2, [pc, #712]	; (800c14c <MX_IKS01A3_DataLogTerminal_Init+0x328>)
 800be82:	4413      	add	r3, r2
 800be84:	4619      	mov	r1, r3
 800be86:	f7fc fb21 	bl	80084cc <IKS01A3_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800be8a:	49b0      	ldr	r1, [pc, #704]	; (800c14c <MX_IKS01A3_DataLogTerminal_Init+0x328>)
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	4613      	mov	r3, r2
 800be90:	00db      	lsls	r3, r3, #3
 800be92:	1a9b      	subs	r3, r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	440b      	add	r3, r1
 800be98:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800be9a:	4618      	mov	r0, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800be9c:	49ab      	ldr	r1, [pc, #684]	; (800c14c <MX_IKS01A3_DataLogTerminal_Init+0x328>)
 800be9e:	68fa      	ldr	r2, [r7, #12]
 800bea0:	4613      	mov	r3, r2
 800bea2:	00db      	lsls	r3, r3, #3
 800bea4:	1a9b      	subs	r3, r3, r2
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	440b      	add	r3, r1
 800beaa:	3301      	adds	r3, #1
 800beac:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800beae:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800beb0:	49a6      	ldr	r1, [pc, #664]	; (800c14c <MX_IKS01A3_DataLogTerminal_Init+0x328>)
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	4613      	mov	r3, r2
 800beb6:	00db      	lsls	r3, r3, #3
 800beb8:	1a9b      	subs	r3, r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	440b      	add	r3, r1
 800bebe:	3302      	adds	r3, #2
 800bec0:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800bec2:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800bec4:	49a1      	ldr	r1, [pc, #644]	; (800c14c <MX_IKS01A3_DataLogTerminal_Init+0x328>)
 800bec6:	68fa      	ldr	r2, [r7, #12]
 800bec8:	4613      	mov	r3, r2
 800beca:	00db      	lsls	r3, r3, #3
 800becc:	1a9b      	subs	r3, r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	440b      	add	r3, r1
 800bed2:	3303      	adds	r3, #3
 800bed4:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800bed6:	9303      	str	r3, [sp, #12]
 800bed8:	9502      	str	r5, [sp, #8]
 800beda:	9401      	str	r4, [sp, #4]
 800bedc:	9000      	str	r0, [sp, #0]
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	4a9b      	ldr	r2, [pc, #620]	; (800c150 <MX_IKS01A3_DataLogTerminal_Init+0x32c>)
 800bee2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bee6:	489b      	ldr	r0, [pc, #620]	; (800c154 <MX_IKS01A3_DataLogTerminal_Init+0x330>)
 800bee8:	f004 f896 	bl	8010018 <sniprintf>
    printf("%s", dataOut);
 800beec:	4999      	ldr	r1, [pc, #612]	; (800c154 <MX_IKS01A3_DataLogTerminal_Init+0x330>)
 800beee:	489a      	ldr	r0, [pc, #616]	; (800c158 <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800bef0:	f004 f87a 	bl	800ffe8 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 800bef4:	4995      	ldr	r1, [pc, #596]	; (800c14c <MX_IKS01A3_DataLogTerminal_Init+0x328>)
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	4613      	mov	r3, r2
 800befa:	00db      	lsls	r3, r3, #3
 800befc:	1a9b      	subs	r3, r3, r2
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	440b      	add	r3, r1
 800bf02:	3314      	adds	r3, #20
 800bf04:	edd3 7a00 	vldr	s15, [r3]
 800bf08:	463b      	mov	r3, r7
 800bf0a:	2103      	movs	r1, #3
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	eeb0 0a67 	vmov.f32	s0, s15
 800bf12:	f000 f9d1 	bl	800c2b8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800bf1a:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800bf1c:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800bf1e:	498b      	ldr	r1, [pc, #556]	; (800c14c <MX_IKS01A3_DataLogTerminal_Init+0x328>)
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	4613      	mov	r3, r2
 800bf24:	00db      	lsls	r3, r3, #3
 800bf26:	1a9b      	subs	r3, r3, r2
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	440b      	add	r3, r1
 800bf2c:	3308      	adds	r3, #8
 800bf2e:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800bf30:	9301      	str	r3, [sp, #4]
 800bf32:	9000      	str	r0, [sp, #0]
 800bf34:	4623      	mov	r3, r4
 800bf36:	4a89      	ldr	r2, [pc, #548]	; (800c15c <MX_IKS01A3_DataLogTerminal_Init+0x338>)
 800bf38:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bf3c:	4885      	ldr	r0, [pc, #532]	; (800c154 <MX_IKS01A3_DataLogTerminal_Init+0x330>)
 800bf3e:	f004 f86b 	bl	8010018 <sniprintf>
    printf("%s", dataOut);
 800bf42:	4984      	ldr	r1, [pc, #528]	; (800c154 <MX_IKS01A3_DataLogTerminal_Init+0x330>)
 800bf44:	4884      	ldr	r0, [pc, #528]	; (800c158 <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800bf46:	f004 f84f 	bl	800ffe8 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 800bf4a:	4980      	ldr	r1, [pc, #512]	; (800c14c <MX_IKS01A3_DataLogTerminal_Init+0x328>)
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	4613      	mov	r3, r2
 800bf50:	00db      	lsls	r3, r3, #3
 800bf52:	1a9b      	subs	r3, r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	440b      	add	r3, r1
 800bf58:	3310      	adds	r3, #16
 800bf5a:	edd3 7a00 	vldr	s15, [r3]
 800bf5e:	463b      	mov	r3, r7
 800bf60:	2103      	movs	r1, #3
 800bf62:	4618      	mov	r0, r3
 800bf64:	eeb0 0a67 	vmov.f32	s0, s15
 800bf68:	f000 f9a6 	bl	800c2b8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800bf70:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800bf72:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800bf74:	4975      	ldr	r1, [pc, #468]	; (800c14c <MX_IKS01A3_DataLogTerminal_Init+0x328>)
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	4613      	mov	r3, r2
 800bf7a:	00db      	lsls	r3, r3, #3
 800bf7c:	1a9b      	subs	r3, r3, r2
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	440b      	add	r3, r1
 800bf82:	3304      	adds	r3, #4
 800bf84:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800bf86:	9301      	str	r3, [sp, #4]
 800bf88:	9000      	str	r0, [sp, #0]
 800bf8a:	4623      	mov	r3, r4
 800bf8c:	4a74      	ldr	r2, [pc, #464]	; (800c160 <MX_IKS01A3_DataLogTerminal_Init+0x33c>)
 800bf8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bf92:	4870      	ldr	r0, [pc, #448]	; (800c154 <MX_IKS01A3_DataLogTerminal_Init+0x330>)
 800bf94:	f004 f840 	bl	8010018 <sniprintf>
    printf("%s", dataOut);
 800bf98:	496e      	ldr	r1, [pc, #440]	; (800c154 <MX_IKS01A3_DataLogTerminal_Init+0x330>)
 800bf9a:	486f      	ldr	r0, [pc, #444]	; (800c158 <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800bf9c:	f004 f824 	bl	800ffe8 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 800bfa0:	496a      	ldr	r1, [pc, #424]	; (800c14c <MX_IKS01A3_DataLogTerminal_Init+0x328>)
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	4613      	mov	r3, r2
 800bfa6:	00db      	lsls	r3, r3, #3
 800bfa8:	1a9b      	subs	r3, r3, r2
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	440b      	add	r3, r1
 800bfae:	3318      	adds	r3, #24
 800bfb0:	edd3 7a00 	vldr	s15, [r3]
 800bfb4:	463b      	mov	r3, r7
 800bfb6:	2103      	movs	r1, #3
 800bfb8:	4618      	mov	r0, r3
 800bfba:	eeb0 0a67 	vmov.f32	s0, s15
 800bfbe:	f000 f97b 	bl	800c2b8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800bfc6:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800bfc8:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800bfca:	4960      	ldr	r1, [pc, #384]	; (800c14c <MX_IKS01A3_DataLogTerminal_Init+0x328>)
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	4613      	mov	r3, r2
 800bfd0:	00db      	lsls	r3, r3, #3
 800bfd2:	1a9b      	subs	r3, r3, r2
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	440b      	add	r3, r1
 800bfd8:	330c      	adds	r3, #12
 800bfda:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800bfdc:	9301      	str	r3, [sp, #4]
 800bfde:	9000      	str	r0, [sp, #0]
 800bfe0:	4623      	mov	r3, r4
 800bfe2:	4a60      	ldr	r2, [pc, #384]	; (800c164 <MX_IKS01A3_DataLogTerminal_Init+0x340>)
 800bfe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bfe8:	485a      	ldr	r0, [pc, #360]	; (800c154 <MX_IKS01A3_DataLogTerminal_Init+0x330>)
 800bfea:	f004 f815 	bl	8010018 <sniprintf>
    printf("%s", dataOut);
 800bfee:	4959      	ldr	r1, [pc, #356]	; (800c154 <MX_IKS01A3_DataLogTerminal_Init+0x330>)
 800bff0:	4859      	ldr	r0, [pc, #356]	; (800c158 <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800bff2:	f003 fff9 	bl	800ffe8 <iprintf>
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	3301      	adds	r3, #1
 800bffa:	60fb      	str	r3, [r7, #12]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2b02      	cmp	r3, #2
 800c000:	f67f af38 	bls.w	800be74 <MX_IKS01A3_DataLogTerminal_Init+0x50>
  }

  IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 800c004:	2105      	movs	r1, #5
 800c006:	2000      	movs	r0, #0
 800c008:	f7fb fd7e 	bl	8007b08 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_TEMPERATURE | ENV_PRESSURE);
 800c00c:	2103      	movs	r1, #3
 800c00e:	2001      	movs	r0, #1
 800c010:	f7fb fd7a 	bl	8007b08 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 800c014:	2101      	movs	r1, #1
 800c016:	2002      	movs	r0, #2
 800c018:	f7fb fd76 	bl	8007b08 <IKS01A3_ENV_SENSOR_Init>

  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800c01c:	2300      	movs	r3, #0
 800c01e:	60fb      	str	r3, [r7, #12]
 800c020:	e08a      	b.n	800c138 <MX_IKS01A3_DataLogTerminal_Init+0x314>
  {
    IKS01A3_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	011b      	lsls	r3, r3, #4
 800c028:	4a4f      	ldr	r2, [pc, #316]	; (800c168 <MX_IKS01A3_DataLogTerminal_Init+0x344>)
 800c02a:	4413      	add	r3, r2
 800c02c:	4619      	mov	r1, r3
 800c02e:	f7fb fe61 	bl	8007cf4 <IKS01A3_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800c032:	4a4d      	ldr	r2, [pc, #308]	; (800c168 <MX_IKS01A3_DataLogTerminal_Init+0x344>)
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	011b      	lsls	r3, r3, #4
 800c038:	4413      	add	r3, r2
 800c03a:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800c03c:	4619      	mov	r1, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800c03e:	4a4a      	ldr	r2, [pc, #296]	; (800c168 <MX_IKS01A3_DataLogTerminal_Init+0x344>)
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	011b      	lsls	r3, r3, #4
 800c044:	4413      	add	r3, r2
 800c046:	3301      	adds	r3, #1
 800c048:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800c04a:	4618      	mov	r0, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800c04c:	4a46      	ldr	r2, [pc, #280]	; (800c168 <MX_IKS01A3_DataLogTerminal_Init+0x344>)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	011b      	lsls	r3, r3, #4
 800c052:	4413      	add	r3, r2
 800c054:	3302      	adds	r3, #2
 800c056:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800c058:	461c      	mov	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800c05a:	4a43      	ldr	r2, [pc, #268]	; (800c168 <MX_IKS01A3_DataLogTerminal_Init+0x344>)
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	011b      	lsls	r3, r3, #4
 800c060:	4413      	add	r3, r2
 800c062:	3303      	adds	r3, #3
 800c064:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800c066:	9303      	str	r3, [sp, #12]
 800c068:	9402      	str	r4, [sp, #8]
 800c06a:	9001      	str	r0, [sp, #4]
 800c06c:	9100      	str	r1, [sp, #0]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	4a3e      	ldr	r2, [pc, #248]	; (800c16c <MX_IKS01A3_DataLogTerminal_Init+0x348>)
 800c072:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c076:	4837      	ldr	r0, [pc, #220]	; (800c154 <MX_IKS01A3_DataLogTerminal_Init+0x330>)
 800c078:	f003 ffce 	bl	8010018 <sniprintf>
    printf("%s", dataOut);
 800c07c:	4935      	ldr	r1, [pc, #212]	; (800c154 <MX_IKS01A3_DataLogTerminal_Init+0x330>)
 800c07e:	4836      	ldr	r0, [pc, #216]	; (800c158 <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800c080:	f003 ffb2 	bl	800ffe8 <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 800c084:	4a38      	ldr	r2, [pc, #224]	; (800c168 <MX_IKS01A3_DataLogTerminal_Init+0x344>)
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	011b      	lsls	r3, r3, #4
 800c08a:	4413      	add	r3, r2
 800c08c:	3308      	adds	r3, #8
 800c08e:	edd3 7a00 	vldr	s15, [r3]
 800c092:	463b      	mov	r3, r7
 800c094:	2103      	movs	r1, #3
 800c096:	4618      	mov	r0, r3
 800c098:	eeb0 0a67 	vmov.f32	s0, s15
 800c09c:	f000 f90c 	bl	800c2b8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 800c0a4:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	4a31      	ldr	r2, [pc, #196]	; (800c170 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800c0ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c0b0:	4828      	ldr	r0, [pc, #160]	; (800c154 <MX_IKS01A3_DataLogTerminal_Init+0x330>)
 800c0b2:	f003 ffb1 	bl	8010018 <sniprintf>
    printf("%s", dataOut);
 800c0b6:	4927      	ldr	r1, [pc, #156]	; (800c154 <MX_IKS01A3_DataLogTerminal_Init+0x330>)
 800c0b8:	4827      	ldr	r0, [pc, #156]	; (800c158 <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800c0ba:	f003 ff95 	bl	800ffe8 <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 800c0be:	4a2a      	ldr	r2, [pc, #168]	; (800c168 <MX_IKS01A3_DataLogTerminal_Init+0x344>)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	011b      	lsls	r3, r3, #4
 800c0c4:	4413      	add	r3, r2
 800c0c6:	330c      	adds	r3, #12
 800c0c8:	edd3 7a00 	vldr	s15, [r3]
 800c0cc:	463b      	mov	r3, r7
 800c0ce:	2103      	movs	r1, #3
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	eeb0 0a67 	vmov.f32	s0, s15
 800c0d6:	f000 f8ef 	bl	800c2b8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 800c0de:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800c0e0:	9300      	str	r3, [sp, #0]
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	4a23      	ldr	r2, [pc, #140]	; (800c174 <MX_IKS01A3_DataLogTerminal_Init+0x350>)
 800c0e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c0ea:	481a      	ldr	r0, [pc, #104]	; (800c154 <MX_IKS01A3_DataLogTerminal_Init+0x330>)
 800c0ec:	f003 ff94 	bl	8010018 <sniprintf>
    printf("%s", dataOut);
 800c0f0:	4918      	ldr	r1, [pc, #96]	; (800c154 <MX_IKS01A3_DataLogTerminal_Init+0x330>)
 800c0f2:	4819      	ldr	r0, [pc, #100]	; (800c158 <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800c0f4:	f003 ff78 	bl	800ffe8 <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 800c0f8:	4a1b      	ldr	r2, [pc, #108]	; (800c168 <MX_IKS01A3_DataLogTerminal_Init+0x344>)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	011b      	lsls	r3, r3, #4
 800c0fe:	4413      	add	r3, r2
 800c100:	3304      	adds	r3, #4
 800c102:	edd3 7a00 	vldr	s15, [r3]
 800c106:	463b      	mov	r3, r7
 800c108:	2103      	movs	r1, #3
 800c10a:	4618      	mov	r0, r3
 800c10c:	eeb0 0a67 	vmov.f32	s0, s15
 800c110:	f000 f8d2 	bl	800c2b8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	461a      	mov	r2, r3
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	9300      	str	r3, [sp, #0]
 800c11c:	4613      	mov	r3, r2
 800c11e:	4a16      	ldr	r2, [pc, #88]	; (800c178 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800c120:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c124:	480b      	ldr	r0, [pc, #44]	; (800c154 <MX_IKS01A3_DataLogTerminal_Init+0x330>)
 800c126:	f003 ff77 	bl	8010018 <sniprintf>
    printf("%s", dataOut);
 800c12a:	490a      	ldr	r1, [pc, #40]	; (800c154 <MX_IKS01A3_DataLogTerminal_Init+0x330>)
 800c12c:	480a      	ldr	r0, [pc, #40]	; (800c158 <MX_IKS01A3_DataLogTerminal_Init+0x334>)
 800c12e:	f003 ff5b 	bl	800ffe8 <iprintf>
  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	3301      	adds	r3, #1
 800c136:	60fb      	str	r3, [r7, #12]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	f67f af71 	bls.w	800c022 <MX_IKS01A3_DataLogTerminal_Init+0x1fe>
  }
}
 800c140:	bf00      	nop
 800c142:	3710      	adds	r7, #16
 800c144:	46bd      	mov	sp, r7
 800c146:	bdb0      	pop	{r4, r5, r7, pc}
 800c148:	20000574 	.word	0x20000574
 800c14c:	200003f0 	.word	0x200003f0
 800c150:	080122e8 	.word	0x080122e8
 800c154:	20000474 	.word	0x20000474
 800c158:	0801235c 	.word	0x0801235c
 800c15c:	08012360 	.word	0x08012360
 800c160:	0801238c 	.word	0x0801238c
 800c164:	080123bc 	.word	0x080123bc
 800c168:	20000444 	.word	0x20000444
 800c16c:	080123e8 	.word	0x080123e8
 800c170:	0801245c 	.word	0x0801245c
 800c174:	08012478 	.word	0x08012478
 800c178:	08012498 	.word	0x08012498

0800c17c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	4603      	mov	r3, r0
 800c184:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 800c186:	4b04      	ldr	r3, [pc, #16]	; (800c198 <BSP_PB_Callback+0x1c>)
 800c188:	2201      	movs	r2, #1
 800c18a:	701a      	strb	r2, [r3, #0]
}
 800c18c:	bf00      	nop
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr
 800c198:	200003ed 	.word	0x200003ed

0800c19c <MX_IKS01A3_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Process(void)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
  int i;

  if (PushButtonDetected != 0U)
 800c1a2:	4b40      	ldr	r3, [pc, #256]	; (800c2a4 <MX_IKS01A3_DataLogTerminal_Process+0x108>)
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d011      	beq.n	800c1d0 <MX_IKS01A3_DataLogTerminal_Process+0x34>
  {
    /* Debouncing */
    HAL_Delay(50);
 800c1ac:	2032      	movs	r0, #50	; 0x32
 800c1ae:	f7fc feeb 	bl	8008f88 <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 800c1b2:	bf00      	nop
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	f7fc fd81 	bl	8008cbc <BSP_PB_GetState>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	4b3a      	ldr	r3, [pc, #232]	; (800c2a8 <MX_IKS01A3_DataLogTerminal_Process+0x10c>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d0f7      	beq.n	800c1b4 <MX_IKS01A3_DataLogTerminal_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 800c1c4:	2032      	movs	r0, #50	; 0x32
 800c1c6:	f7fc fedf 	bl	8008f88 <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 800c1ca:	4b36      	ldr	r3, [pc, #216]	; (800c2a4 <MX_IKS01A3_DataLogTerminal_Process+0x108>)
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	701a      	strb	r2, [r3, #0]

    /* Do nothing */
  }

  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	607b      	str	r3, [r7, #4]
 800c1d4:	e02e      	b.n	800c234 <MX_IKS01A3_DataLogTerminal_Process+0x98>
  {

    if(MotionCapabilities[i].Acc)
 800c1d6:	4935      	ldr	r1, [pc, #212]	; (800c2ac <MX_IKS01A3_DataLogTerminal_Process+0x110>)
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	00db      	lsls	r3, r3, #3
 800c1de:	1a9b      	subs	r3, r3, r2
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	440b      	add	r3, r1
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d003      	beq.n	800c1f2 <MX_IKS01A3_DataLogTerminal_Process+0x56>
    {
      Accelero_Sensor_Handler(i);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f000 f8ed 	bl	800c3cc <Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 800c1f2:	492e      	ldr	r1, [pc, #184]	; (800c2ac <MX_IKS01A3_DataLogTerminal_Process+0x110>)
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	00db      	lsls	r3, r3, #3
 800c1fa:	1a9b      	subs	r3, r3, r2
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	440b      	add	r3, r1
 800c200:	3301      	adds	r3, #1
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d003      	beq.n	800c210 <MX_IKS01A3_DataLogTerminal_Process+0x74>
    {
      Gyro_Sensor_Handler(i);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f000 f994 	bl	800c538 <Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 800c210:	4926      	ldr	r1, [pc, #152]	; (800c2ac <MX_IKS01A3_DataLogTerminal_Process+0x110>)
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	4613      	mov	r3, r2
 800c216:	00db      	lsls	r3, r3, #3
 800c218:	1a9b      	subs	r3, r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	440b      	add	r3, r1
 800c21e:	3302      	adds	r3, #2
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d003      	beq.n	800c22e <MX_IKS01A3_DataLogTerminal_Process+0x92>
    {
      Magneto_Sensor_Handler(i);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	4618      	mov	r0, r3
 800c22a:	f000 fa39 	bl	800c6a0 <Magneto_Sensor_Handler>
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	3301      	adds	r3, #1
 800c232:	607b      	str	r3, [r7, #4]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2b02      	cmp	r3, #2
 800c238:	d9cd      	bls.n	800c1d6 <MX_IKS01A3_DataLogTerminal_Process+0x3a>
    }
  }

  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800c23a:	2300      	movs	r3, #0
 800c23c:	607b      	str	r3, [r7, #4]
 800c23e:	e025      	b.n	800c28c <MX_IKS01A3_DataLogTerminal_Process+0xf0>
  {
    if(EnvCapabilities[i].Humidity)
 800c240:	4a1b      	ldr	r2, [pc, #108]	; (800c2b0 <MX_IKS01A3_DataLogTerminal_Process+0x114>)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	011b      	lsls	r3, r3, #4
 800c246:	4413      	add	r3, r2
 800c248:	3302      	adds	r3, #2
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d003      	beq.n	800c258 <MX_IKS01A3_DataLogTerminal_Process+0xbc>
    {
      Hum_Sensor_Handler(i);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4618      	mov	r0, r3
 800c254:	f000 fc06 	bl	800ca64 <Hum_Sensor_Handler>
    }
    if(EnvCapabilities[i].Temperature)
 800c258:	4a15      	ldr	r2, [pc, #84]	; (800c2b0 <MX_IKS01A3_DataLogTerminal_Process+0x114>)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	011b      	lsls	r3, r3, #4
 800c25e:	4413      	add	r3, r2
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d003      	beq.n	800c26e <MX_IKS01A3_DataLogTerminal_Process+0xd2>
    {
      Temp_Sensor_Handler(i);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4618      	mov	r0, r3
 800c26a:	f000 facd 	bl	800c808 <Temp_Sensor_Handler>
    }
    if(EnvCapabilities[i].Pressure)
 800c26e:	4a10      	ldr	r2, [pc, #64]	; (800c2b0 <MX_IKS01A3_DataLogTerminal_Process+0x114>)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	011b      	lsls	r3, r3, #4
 800c274:	4413      	add	r3, r2
 800c276:	3301      	adds	r3, #1
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d003      	beq.n	800c286 <MX_IKS01A3_DataLogTerminal_Process+0xea>
    {
      Press_Sensor_Handler(i);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4618      	mov	r0, r3
 800c282:	f000 fb5d 	bl	800c940 <Press_Sensor_Handler>
  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	3301      	adds	r3, #1
 800c28a:	607b      	str	r3, [r7, #4]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b02      	cmp	r3, #2
 800c290:	d9d6      	bls.n	800c240 <MX_IKS01A3_DataLogTerminal_Process+0xa4>
    }
  }

  HAL_Delay( 1000 );
 800c292:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c296:	f7fc fe77 	bl	8008f88 <HAL_Delay>
}
 800c29a:	bf00      	nop
 800c29c:	3708      	adds	r7, #8
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	200003ed 	.word	0x200003ed
 800c2a8:	20000574 	.word	0x20000574
 800c2ac:	200003f0 	.word	0x200003f0
 800c2b0:	20000444 	.word	0x20000444
 800c2b4:	00000000 	.word	0x00000000

0800c2b8 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 800c2b8:	b5b0      	push	{r4, r5, r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	ed87 0a03 	vstr	s0, [r7, #12]
 800c2c2:	60b8      	str	r0, [r7, #8]
 800c2c4:	6079      	str	r1, [r7, #4]
  if(in >= 0.0f)
 800c2c6:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d2:	db03      	blt.n	800c2dc <floatToInt+0x24>
  {
    out_value->sign = 0;
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	701a      	strb	r2, [r3, #0]
 800c2da:	e008      	b.n	800c2ee <floatToInt+0x36>
  }else
  {
    out_value->sign = 1;
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	701a      	strb	r2, [r3, #0]
    in = -in;
 800c2e2:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2e6:	eef1 7a67 	vneg.f32	s15, s15
 800c2ea:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f7f4 f92a 	bl	8000548 <__aeabi_f2d>
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	460d      	mov	r5, r1
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f7f4 f913 	bl	8000524 <__aeabi_i2d>
 800c2fe:	4602      	mov	r2, r0
 800c300:	460b      	mov	r3, r1
 800c302:	ec43 2b11 	vmov	d1, r2, r3
 800c306:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 800c3c0 <floatToInt+0x108>
 800c30a:	f004 ff59 	bl	80111c0 <pow>
 800c30e:	ec53 2b10 	vmov	r2, r3, d0
 800c312:	f04f 0000 	mov.w	r0, #0
 800c316:	492c      	ldr	r1, [pc, #176]	; (800c3c8 <floatToInt+0x110>)
 800c318:	f7f4 fa98 	bl	800084c <__aeabi_ddiv>
 800c31c:	4602      	mov	r2, r0
 800c31e:	460b      	mov	r3, r1
 800c320:	4620      	mov	r0, r4
 800c322:	4629      	mov	r1, r5
 800c324:	f7f3 ffb2 	bl	800028c <__adddf3>
 800c328:	4603      	mov	r3, r0
 800c32a:	460c      	mov	r4, r1
 800c32c:	4618      	mov	r0, r3
 800c32e:	4621      	mov	r1, r4
 800c330:	f7f4 fc3a 	bl	8000ba8 <__aeabi_d2f>
 800c334:	4603      	mov	r3, r0
 800c336:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 800c338:	edd7 7a03 	vldr	s15, [r7, #12]
 800c33c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c340:	ee17 2a90 	vmov	r2, s15
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	ee07 3a90 	vmov	s15, r3
 800c350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c354:	ed97 7a03 	vldr	s14, [r7, #12]
 800c358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c35c:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	f7f4 f8f1 	bl	8000548 <__aeabi_f2d>
 800c366:	4604      	mov	r4, r0
 800c368:	460d      	mov	r5, r1
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7f4 f8da 	bl	8000524 <__aeabi_i2d>
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	ec43 2b11 	vmov	d1, r2, r3
 800c378:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800c3c0 <floatToInt+0x108>
 800c37c:	f004 ff20 	bl	80111c0 <pow>
 800c380:	ec53 2b10 	vmov	r2, r3, d0
 800c384:	4620      	mov	r0, r4
 800c386:	4629      	mov	r1, r5
 800c388:	f7f4 f936 	bl	80005f8 <__aeabi_dmul>
 800c38c:	4603      	mov	r3, r0
 800c38e:	460c      	mov	r4, r1
 800c390:	ec44 3b17 	vmov	d7, r3, r4
 800c394:	eeb0 0a47 	vmov.f32	s0, s14
 800c398:	eef0 0a67 	vmov.f32	s1, s15
 800c39c:	f004 fed6 	bl	801114c <trunc>
 800c3a0:	ec54 3b10 	vmov	r3, r4, d0
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	4621      	mov	r1, r4
 800c3a8:	f7f4 fbd6 	bl	8000b58 <__aeabi_d2iz>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	609a      	str	r2, [r3, #8]
}
 800c3b4:	bf00      	nop
 800c3b6:	3710      	adds	r7, #16
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bdb0      	pop	{r4, r5, r7, pc}
 800c3bc:	f3af 8000 	nop.w
 800c3c0:	00000000 	.word	0x00000000
 800c3c4:	40240000 	.word	0x40240000
 800c3c8:	3fe00000 	.word	0x3fe00000

0800c3cc <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
 800c3cc:	b5b0      	push	{r4, r5, r7, lr}
 800c3ce:	b092      	sub	sp, #72	; 0x48
 800c3d0:	af06      	add	r7, sp, #24
 800c3d2:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS01A3_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 800c3d4:	f107 031c 	add.w	r3, r7, #28
 800c3d8:	461a      	mov	r2, r3
 800c3da:	2102      	movs	r1, #2
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f7fc f8c9 	bl	8008574 <IKS01A3_MOTION_SENSOR_GetAxes>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d007      	beq.n	800c3f8 <Accelero_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	4a48      	ldr	r2, [pc, #288]	; (800c50c <Accelero_Sensor_Handler+0x140>)
 800c3ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c3f0:	4847      	ldr	r0, [pc, #284]	; (800c510 <Accelero_Sensor_Handler+0x144>)
 800c3f2:	f003 fe11 	bl	8010018 <sniprintf>
 800c3f6:	e013      	b.n	800c420 <Accelero_Sensor_Handler+0x54>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800c3f8:	687d      	ldr	r5, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 800c3fa:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800c3fc:	687a      	ldr	r2, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 800c3fe:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800c400:	6878      	ldr	r0, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 800c402:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800c404:	9404      	str	r4, [sp, #16]
 800c406:	9003      	str	r0, [sp, #12]
 800c408:	9102      	str	r1, [sp, #8]
 800c40a:	9201      	str	r2, [sp, #4]
 800c40c:	9300      	str	r3, [sp, #0]
 800c40e:	462b      	mov	r3, r5
 800c410:	4a40      	ldr	r2, [pc, #256]	; (800c514 <Accelero_Sensor_Handler+0x148>)
 800c412:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c416:	483e      	ldr	r0, [pc, #248]	; (800c510 <Accelero_Sensor_Handler+0x144>)
 800c418:	f003 fdfe 	bl	8010018 <sniprintf>
whoami = 0;
 800c41c:	2300      	movs	r3, #0
 800c41e:	73fb      	strb	r3, [r7, #15]
  }

  printf("%s", dataOut);
 800c420:	493b      	ldr	r1, [pc, #236]	; (800c510 <Accelero_Sensor_Handler+0x144>)
 800c422:	483d      	ldr	r0, [pc, #244]	; (800c518 <Accelero_Sensor_Handler+0x14c>)
 800c424:	f003 fde0 	bl	800ffe8 <iprintf>

  if (verbose == 1)
 800c428:	4b3c      	ldr	r3, [pc, #240]	; (800c51c <Accelero_Sensor_Handler+0x150>)
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d168      	bne.n	800c502 <Accelero_Sensor_Handler+0x136>
  {
    if (IKS01A3_MOTION_SENSOR_ReadID(Instance, &whoami))
 800c430:	f107 030f 	add.w	r3, r7, #15
 800c434:	4619      	mov	r1, r3
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f7fc f872 	bl	8008520 <IKS01A3_MOTION_SENSOR_ReadID>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d007      	beq.n	800c452 <Accelero_Sensor_Handler+0x86>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4a36      	ldr	r2, [pc, #216]	; (800c520 <Accelero_Sensor_Handler+0x154>)
 800c446:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c44a:	4831      	ldr	r0, [pc, #196]	; (800c510 <Accelero_Sensor_Handler+0x144>)
 800c44c:	f003 fde4 	bl	8010018 <sniprintf>
 800c450:	e008      	b.n	800c464 <Accelero_Sensor_Handler+0x98>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	7bfa      	ldrb	r2, [r7, #15]
 800c456:	9200      	str	r2, [sp, #0]
 800c458:	4a32      	ldr	r2, [pc, #200]	; (800c524 <Accelero_Sensor_Handler+0x158>)
 800c45a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c45e:	482c      	ldr	r0, [pc, #176]	; (800c510 <Accelero_Sensor_Handler+0x144>)
 800c460:	f003 fdda 	bl	8010018 <sniprintf>
    }

    printf("%s", dataOut);
 800c464:	492a      	ldr	r1, [pc, #168]	; (800c510 <Accelero_Sensor_Handler+0x144>)
 800c466:	482c      	ldr	r0, [pc, #176]	; (800c518 <Accelero_Sensor_Handler+0x14c>)
 800c468:	f003 fdbe 	bl	800ffe8 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 800c46c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c470:	461a      	mov	r2, r3
 800c472:	2102      	movs	r1, #2
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f7fc f8c1 	bl	80085fc <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
 800c47a:	4603      	mov	r3, r0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d007      	beq.n	800c490 <Accelero_Sensor_Handler+0xc4>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	4a29      	ldr	r2, [pc, #164]	; (800c528 <Accelero_Sensor_Handler+0x15c>)
 800c484:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c488:	4821      	ldr	r0, [pc, #132]	; (800c510 <Accelero_Sensor_Handler+0x144>)
 800c48a:	f003 fdc5 	bl	8010018 <sniprintf>
 800c48e:	e014      	b.n	800c4ba <Accelero_Sensor_Handler+0xee>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800c490:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c494:	f107 0310 	add.w	r3, r7, #16
 800c498:	2103      	movs	r1, #3
 800c49a:	4618      	mov	r0, r3
 800c49c:	eeb0 0a67 	vmov.f32	s0, s15
 800c4a0:	f7ff ff0a 	bl	800c2b8 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800c4a8:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c4aa:	9101      	str	r1, [sp, #4]
 800c4ac:	9200      	str	r2, [sp, #0]
 800c4ae:	4a1f      	ldr	r2, [pc, #124]	; (800c52c <Accelero_Sensor_Handler+0x160>)
 800c4b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c4b4:	4816      	ldr	r0, [pc, #88]	; (800c510 <Accelero_Sensor_Handler+0x144>)
 800c4b6:	f003 fdaf 	bl	8010018 <sniprintf>
    }

    printf("%s", dataOut);
 800c4ba:	4915      	ldr	r1, [pc, #84]	; (800c510 <Accelero_Sensor_Handler+0x144>)
 800c4bc:	4816      	ldr	r0, [pc, #88]	; (800c518 <Accelero_Sensor_Handler+0x14c>)
 800c4be:	f003 fd93 	bl	800ffe8 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 800c4c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	2102      	movs	r1, #2
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f7fc f8da 	bl	8008684 <IKS01A3_MOTION_SENSOR_GetFullScale>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d007      	beq.n	800c4e6 <Accelero_Sensor_Handler+0x11a>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	4a15      	ldr	r2, [pc, #84]	; (800c530 <Accelero_Sensor_Handler+0x164>)
 800c4da:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c4de:	480c      	ldr	r0, [pc, #48]	; (800c510 <Accelero_Sensor_Handler+0x144>)
 800c4e0:	f003 fd9a 	bl	8010018 <sniprintf>
 800c4e4:	e009      	b.n	800c4fa <Accelero_Sensor_Handler+0x12e>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	4a11      	ldr	r2, [pc, #68]	; (800c534 <Accelero_Sensor_Handler+0x168>)
 800c4f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c4f4:	4806      	ldr	r0, [pc, #24]	; (800c510 <Accelero_Sensor_Handler+0x144>)
 800c4f6:	f003 fd8f 	bl	8010018 <sniprintf>
    }

    printf("%s", dataOut);
 800c4fa:	4905      	ldr	r1, [pc, #20]	; (800c510 <Accelero_Sensor_Handler+0x144>)
 800c4fc:	4806      	ldr	r0, [pc, #24]	; (800c518 <Accelero_Sensor_Handler+0x14c>)
 800c4fe:	f003 fd73 	bl	800ffe8 <iprintf>
  }
}
 800c502:	bf00      	nop
 800c504:	3730      	adds	r7, #48	; 0x30
 800c506:	46bd      	mov	sp, r7
 800c508:	bdb0      	pop	{r4, r5, r7, pc}
 800c50a:	bf00      	nop
 800c50c:	080124b4 	.word	0x080124b4
 800c510:	20000474 	.word	0x20000474
 800c514:	080124c8 	.word	0x080124c8
 800c518:	0801235c 	.word	0x0801235c
 800c51c:	200001b9 	.word	0x200001b9
 800c520:	080124f8 	.word	0x080124f8
 800c524:	0801250c 	.word	0x0801250c
 800c528:	08012520 	.word	0x08012520
 800c52c:	08012534 	.word	0x08012534
 800c530:	0801254c 	.word	0x0801254c
 800c534:	0801255c 	.word	0x0801255c

0800c538 <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
 800c538:	b5b0      	push	{r4, r5, r7, lr}
 800c53a:	b092      	sub	sp, #72	; 0x48
 800c53c:	af06      	add	r7, sp, #24
 800c53e:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS01A3_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 800c540:	f107 031c 	add.w	r3, r7, #28
 800c544:	461a      	mov	r2, r3
 800c546:	2101      	movs	r1, #1
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f7fc f813 	bl	8008574 <IKS01A3_MOTION_SENSOR_GetAxes>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d007      	beq.n	800c564 <Gyro_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4a47      	ldr	r2, [pc, #284]	; (800c674 <Gyro_Sensor_Handler+0x13c>)
 800c558:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c55c:	4846      	ldr	r0, [pc, #280]	; (800c678 <Gyro_Sensor_Handler+0x140>)
 800c55e:	f003 fd5b 	bl	8010018 <sniprintf>
 800c562:	e011      	b.n	800c588 <Gyro_Sensor_Handler+0x50>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800c564:	687d      	ldr	r5, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 800c566:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800c568:	687a      	ldr	r2, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 800c56a:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800c56c:	6878      	ldr	r0, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 800c56e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800c570:	9404      	str	r4, [sp, #16]
 800c572:	9003      	str	r0, [sp, #12]
 800c574:	9102      	str	r1, [sp, #8]
 800c576:	9201      	str	r2, [sp, #4]
 800c578:	9300      	str	r3, [sp, #0]
 800c57a:	462b      	mov	r3, r5
 800c57c:	4a3f      	ldr	r2, [pc, #252]	; (800c67c <Gyro_Sensor_Handler+0x144>)
 800c57e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c582:	483d      	ldr	r0, [pc, #244]	; (800c678 <Gyro_Sensor_Handler+0x140>)
 800c584:	f003 fd48 	bl	8010018 <sniprintf>
  }

  printf("%s", dataOut);
 800c588:	493b      	ldr	r1, [pc, #236]	; (800c678 <Gyro_Sensor_Handler+0x140>)
 800c58a:	483d      	ldr	r0, [pc, #244]	; (800c680 <Gyro_Sensor_Handler+0x148>)
 800c58c:	f003 fd2c 	bl	800ffe8 <iprintf>

  if (verbose == 1)
 800c590:	4b3c      	ldr	r3, [pc, #240]	; (800c684 <Gyro_Sensor_Handler+0x14c>)
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	2b01      	cmp	r3, #1
 800c596:	d168      	bne.n	800c66a <Gyro_Sensor_Handler+0x132>
  {
    if (IKS01A3_MOTION_SENSOR_ReadID(Instance, &whoami))
 800c598:	f107 030f 	add.w	r3, r7, #15
 800c59c:	4619      	mov	r1, r3
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f7fb ffbe 	bl	8008520 <IKS01A3_MOTION_SENSOR_ReadID>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d007      	beq.n	800c5ba <Gyro_Sensor_Handler+0x82>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	4a36      	ldr	r2, [pc, #216]	; (800c688 <Gyro_Sensor_Handler+0x150>)
 800c5ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c5b2:	4831      	ldr	r0, [pc, #196]	; (800c678 <Gyro_Sensor_Handler+0x140>)
 800c5b4:	f003 fd30 	bl	8010018 <sniprintf>
 800c5b8:	e008      	b.n	800c5cc <Gyro_Sensor_Handler+0x94>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	7bfa      	ldrb	r2, [r7, #15]
 800c5be:	9200      	str	r2, [sp, #0]
 800c5c0:	4a32      	ldr	r2, [pc, #200]	; (800c68c <Gyro_Sensor_Handler+0x154>)
 800c5c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c5c6:	482c      	ldr	r0, [pc, #176]	; (800c678 <Gyro_Sensor_Handler+0x140>)
 800c5c8:	f003 fd26 	bl	8010018 <sniprintf>
    }

    printf("%s", dataOut);
 800c5cc:	492a      	ldr	r1, [pc, #168]	; (800c678 <Gyro_Sensor_Handler+0x140>)
 800c5ce:	482c      	ldr	r0, [pc, #176]	; (800c680 <Gyro_Sensor_Handler+0x148>)
 800c5d0:	f003 fd0a 	bl	800ffe8 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 800c5d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c5d8:	461a      	mov	r2, r3
 800c5da:	2101      	movs	r1, #1
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f7fc f80d 	bl	80085fc <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d007      	beq.n	800c5f8 <Gyro_Sensor_Handler+0xc0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a29      	ldr	r2, [pc, #164]	; (800c690 <Gyro_Sensor_Handler+0x158>)
 800c5ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c5f0:	4821      	ldr	r0, [pc, #132]	; (800c678 <Gyro_Sensor_Handler+0x140>)
 800c5f2:	f003 fd11 	bl	8010018 <sniprintf>
 800c5f6:	e014      	b.n	800c622 <Gyro_Sensor_Handler+0xea>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800c5f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c5fc:	f107 0310 	add.w	r3, r7, #16
 800c600:	2103      	movs	r1, #3
 800c602:	4618      	mov	r0, r3
 800c604:	eeb0 0a67 	vmov.f32	s0, s15
 800c608:	f7ff fe56 	bl	800c2b8 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800c610:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c612:	9101      	str	r1, [sp, #4]
 800c614:	9200      	str	r2, [sp, #0]
 800c616:	4a1f      	ldr	r2, [pc, #124]	; (800c694 <Gyro_Sensor_Handler+0x15c>)
 800c618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c61c:	4816      	ldr	r0, [pc, #88]	; (800c678 <Gyro_Sensor_Handler+0x140>)
 800c61e:	f003 fcfb 	bl	8010018 <sniprintf>
    }

    printf("%s", dataOut);
 800c622:	4915      	ldr	r1, [pc, #84]	; (800c678 <Gyro_Sensor_Handler+0x140>)
 800c624:	4816      	ldr	r0, [pc, #88]	; (800c680 <Gyro_Sensor_Handler+0x148>)
 800c626:	f003 fcdf 	bl	800ffe8 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 800c62a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c62e:	461a      	mov	r2, r3
 800c630:	2101      	movs	r1, #1
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7fc f826 	bl	8008684 <IKS01A3_MOTION_SENSOR_GetFullScale>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d007      	beq.n	800c64e <Gyro_Sensor_Handler+0x116>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4a15      	ldr	r2, [pc, #84]	; (800c698 <Gyro_Sensor_Handler+0x160>)
 800c642:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c646:	480c      	ldr	r0, [pc, #48]	; (800c678 <Gyro_Sensor_Handler+0x140>)
 800c648:	f003 fce6 	bl	8010018 <sniprintf>
 800c64c:	e009      	b.n	800c662 <Gyro_Sensor_Handler+0x12a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	4613      	mov	r3, r2
 800c656:	4a11      	ldr	r2, [pc, #68]	; (800c69c <Gyro_Sensor_Handler+0x164>)
 800c658:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c65c:	4806      	ldr	r0, [pc, #24]	; (800c678 <Gyro_Sensor_Handler+0x140>)
 800c65e:	f003 fcdb 	bl	8010018 <sniprintf>
    }

    printf("%s", dataOut);
 800c662:	4905      	ldr	r1, [pc, #20]	; (800c678 <Gyro_Sensor_Handler+0x140>)
 800c664:	4806      	ldr	r0, [pc, #24]	; (800c680 <Gyro_Sensor_Handler+0x148>)
 800c666:	f003 fcbf 	bl	800ffe8 <iprintf>
  }
}
 800c66a:	bf00      	nop
 800c66c:	3730      	adds	r7, #48	; 0x30
 800c66e:	46bd      	mov	sp, r7
 800c670:	bdb0      	pop	{r4, r5, r7, pc}
 800c672:	bf00      	nop
 800c674:	0801256c 	.word	0x0801256c
 800c678:	20000474 	.word	0x20000474
 800c67c:	08012580 	.word	0x08012580
 800c680:	0801235c 	.word	0x0801235c
 800c684:	200001b9 	.word	0x200001b9
 800c688:	080124f8 	.word	0x080124f8
 800c68c:	0801250c 	.word	0x0801250c
 800c690:	08012520 	.word	0x08012520
 800c694:	08012534 	.word	0x08012534
 800c698:	0801254c 	.word	0x0801254c
 800c69c:	080125b0 	.word	0x080125b0

0800c6a0 <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
 800c6a0:	b5b0      	push	{r4, r5, r7, lr}
 800c6a2:	b092      	sub	sp, #72	; 0x48
 800c6a4:	af06      	add	r7, sp, #24
 800c6a6:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS01A3_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 800c6a8:	f107 031c 	add.w	r3, r7, #28
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	2104      	movs	r1, #4
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f7fb ff5f 	bl	8008574 <IKS01A3_MOTION_SENSOR_GetAxes>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d007      	beq.n	800c6cc <Magneto_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a47      	ldr	r2, [pc, #284]	; (800c7dc <Magneto_Sensor_Handler+0x13c>)
 800c6c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c6c4:	4846      	ldr	r0, [pc, #280]	; (800c7e0 <Magneto_Sensor_Handler+0x140>)
 800c6c6:	f003 fca7 	bl	8010018 <sniprintf>
 800c6ca:	e011      	b.n	800c6f0 <Magneto_Sensor_Handler+0x50>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800c6cc:	687d      	ldr	r5, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 800c6ce:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800c6d0:	687a      	ldr	r2, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 800c6d2:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800c6d4:	6878      	ldr	r0, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 800c6d6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800c6d8:	9404      	str	r4, [sp, #16]
 800c6da:	9003      	str	r0, [sp, #12]
 800c6dc:	9102      	str	r1, [sp, #8]
 800c6de:	9201      	str	r2, [sp, #4]
 800c6e0:	9300      	str	r3, [sp, #0]
 800c6e2:	462b      	mov	r3, r5
 800c6e4:	4a3f      	ldr	r2, [pc, #252]	; (800c7e4 <Magneto_Sensor_Handler+0x144>)
 800c6e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c6ea:	483d      	ldr	r0, [pc, #244]	; (800c7e0 <Magneto_Sensor_Handler+0x140>)
 800c6ec:	f003 fc94 	bl	8010018 <sniprintf>
  }

  printf("%s", dataOut);
 800c6f0:	493b      	ldr	r1, [pc, #236]	; (800c7e0 <Magneto_Sensor_Handler+0x140>)
 800c6f2:	483d      	ldr	r0, [pc, #244]	; (800c7e8 <Magneto_Sensor_Handler+0x148>)
 800c6f4:	f003 fc78 	bl	800ffe8 <iprintf>

  if (verbose == 1)
 800c6f8:	4b3c      	ldr	r3, [pc, #240]	; (800c7ec <Magneto_Sensor_Handler+0x14c>)
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d168      	bne.n	800c7d2 <Magneto_Sensor_Handler+0x132>
  {
    if (IKS01A3_MOTION_SENSOR_ReadID(Instance, &whoami))
 800c700:	f107 030f 	add.w	r3, r7, #15
 800c704:	4619      	mov	r1, r3
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f7fb ff0a 	bl	8008520 <IKS01A3_MOTION_SENSOR_ReadID>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d007      	beq.n	800c722 <Magneto_Sensor_Handler+0x82>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4a36      	ldr	r2, [pc, #216]	; (800c7f0 <Magneto_Sensor_Handler+0x150>)
 800c716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c71a:	4831      	ldr	r0, [pc, #196]	; (800c7e0 <Magneto_Sensor_Handler+0x140>)
 800c71c:	f003 fc7c 	bl	8010018 <sniprintf>
 800c720:	e008      	b.n	800c734 <Magneto_Sensor_Handler+0x94>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	7bfa      	ldrb	r2, [r7, #15]
 800c726:	9200      	str	r2, [sp, #0]
 800c728:	4a32      	ldr	r2, [pc, #200]	; (800c7f4 <Magneto_Sensor_Handler+0x154>)
 800c72a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c72e:	482c      	ldr	r0, [pc, #176]	; (800c7e0 <Magneto_Sensor_Handler+0x140>)
 800c730:	f003 fc72 	bl	8010018 <sniprintf>
    }

    printf("%s", dataOut);
 800c734:	492a      	ldr	r1, [pc, #168]	; (800c7e0 <Magneto_Sensor_Handler+0x140>)
 800c736:	482c      	ldr	r0, [pc, #176]	; (800c7e8 <Magneto_Sensor_Handler+0x148>)
 800c738:	f003 fc56 	bl	800ffe8 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 800c73c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c740:	461a      	mov	r2, r3
 800c742:	2104      	movs	r1, #4
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f7fb ff59 	bl	80085fc <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d007      	beq.n	800c760 <Magneto_Sensor_Handler+0xc0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4a29      	ldr	r2, [pc, #164]	; (800c7f8 <Magneto_Sensor_Handler+0x158>)
 800c754:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c758:	4821      	ldr	r0, [pc, #132]	; (800c7e0 <Magneto_Sensor_Handler+0x140>)
 800c75a:	f003 fc5d 	bl	8010018 <sniprintf>
 800c75e:	e014      	b.n	800c78a <Magneto_Sensor_Handler+0xea>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800c760:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c764:	f107 0310 	add.w	r3, r7, #16
 800c768:	2103      	movs	r1, #3
 800c76a:	4618      	mov	r0, r3
 800c76c:	eeb0 0a67 	vmov.f32	s0, s15
 800c770:	f7ff fda2 	bl	800c2b8 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800c778:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c77a:	9101      	str	r1, [sp, #4]
 800c77c:	9200      	str	r2, [sp, #0]
 800c77e:	4a1f      	ldr	r2, [pc, #124]	; (800c7fc <Magneto_Sensor_Handler+0x15c>)
 800c780:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c784:	4816      	ldr	r0, [pc, #88]	; (800c7e0 <Magneto_Sensor_Handler+0x140>)
 800c786:	f003 fc47 	bl	8010018 <sniprintf>
    }

    printf("%s", dataOut);
 800c78a:	4915      	ldr	r1, [pc, #84]	; (800c7e0 <Magneto_Sensor_Handler+0x140>)
 800c78c:	4816      	ldr	r0, [pc, #88]	; (800c7e8 <Magneto_Sensor_Handler+0x148>)
 800c78e:	f003 fc2b 	bl	800ffe8 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 800c792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c796:	461a      	mov	r2, r3
 800c798:	2104      	movs	r1, #4
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f7fb ff72 	bl	8008684 <IKS01A3_MOTION_SENSOR_GetFullScale>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d007      	beq.n	800c7b6 <Magneto_Sensor_Handler+0x116>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	4a15      	ldr	r2, [pc, #84]	; (800c800 <Magneto_Sensor_Handler+0x160>)
 800c7aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c7ae:	480c      	ldr	r0, [pc, #48]	; (800c7e0 <Magneto_Sensor_Handler+0x140>)
 800c7b0:	f003 fc32 	bl	8010018 <sniprintf>
 800c7b4:	e009      	b.n	800c7ca <Magneto_Sensor_Handler+0x12a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ba:	9300      	str	r3, [sp, #0]
 800c7bc:	4613      	mov	r3, r2
 800c7be:	4a11      	ldr	r2, [pc, #68]	; (800c804 <Magneto_Sensor_Handler+0x164>)
 800c7c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c7c4:	4806      	ldr	r0, [pc, #24]	; (800c7e0 <Magneto_Sensor_Handler+0x140>)
 800c7c6:	f003 fc27 	bl	8010018 <sniprintf>
    }

    printf("%s", dataOut);
 800c7ca:	4905      	ldr	r1, [pc, #20]	; (800c7e0 <Magneto_Sensor_Handler+0x140>)
 800c7cc:	4806      	ldr	r0, [pc, #24]	; (800c7e8 <Magneto_Sensor_Handler+0x148>)
 800c7ce:	f003 fc0b 	bl	800ffe8 <iprintf>
  }
}
 800c7d2:	bf00      	nop
 800c7d4:	3730      	adds	r7, #48	; 0x30
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bdb0      	pop	{r4, r5, r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	080125c4 	.word	0x080125c4
 800c7e0:	20000474 	.word	0x20000474
 800c7e4:	080125d8 	.word	0x080125d8
 800c7e8:	0801235c 	.word	0x0801235c
 800c7ec:	200001b9 	.word	0x200001b9
 800c7f0:	080124f8 	.word	0x080124f8
 800c7f4:	0801250c 	.word	0x0801250c
 800c7f8:	08012520 	.word	0x08012520
 800c7fc:	08012534 	.word	0x08012534
 800c800:	0801254c 	.word	0x0801254c
 800c804:	08012608 	.word	0x08012608

0800c808 <Temp_Sensor_Handler>:
  * @brief  Handles the temperature data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Temp_Sensor_Handler(uint32_t Instance)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b08c      	sub	sp, #48	; 0x30
 800c80c:	af04      	add	r7, sp, #16
 800c80e:	6078      	str	r0, [r7, #4]
  float odr;
  float temperature;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature))
 800c810:	f107 0318 	add.w	r3, r7, #24
 800c814:	461a      	mov	r2, r3
 800c816:	2101      	movs	r1, #1
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7fb fb03 	bl	8007e24 <IKS01A3_ENV_SENSOR_GetValue>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d007      	beq.n	800c834 <Temp_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: Error\r\n", (int)Instance);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4a3d      	ldr	r2, [pc, #244]	; (800c91c <Temp_Sensor_Handler+0x114>)
 800c828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c82c:	483c      	ldr	r0, [pc, #240]	; (800c920 <Temp_Sensor_Handler+0x118>)
 800c82e:	f003 fbf3 	bl	8010018 <sniprintf>
 800c832:	e01d      	b.n	800c870 <Temp_Sensor_Handler+0x68>
  }
  else
  {
    floatToInt(temperature, &out_value, 2);
 800c834:	edd7 7a06 	vldr	s15, [r7, #24]
 800c838:	f107 030c 	add.w	r3, r7, #12
 800c83c:	2102      	movs	r1, #2
 800c83e:	4618      	mov	r0, r3
 800c840:	eeb0 0a67 	vmov.f32	s0, s15
 800c844:	f7ff fd38 	bl	800c2b8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d001      	beq.n	800c856 <Temp_Sensor_Handler+0x4e>
 800c852:	232d      	movs	r3, #45	; 0x2d
 800c854:	e000      	b.n	800c858 <Temp_Sensor_Handler+0x50>
 800c856:	232b      	movs	r3, #43	; 0x2b
 800c858:	6939      	ldr	r1, [r7, #16]
             (int)out_value.out_dec);
 800c85a:	6978      	ldr	r0, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 800c85c:	9002      	str	r0, [sp, #8]
 800c85e:	9101      	str	r1, [sp, #4]
 800c860:	9300      	str	r3, [sp, #0]
 800c862:	4613      	mov	r3, r2
 800c864:	4a2f      	ldr	r2, [pc, #188]	; (800c924 <Temp_Sensor_Handler+0x11c>)
 800c866:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c86a:	482d      	ldr	r0, [pc, #180]	; (800c920 <Temp_Sensor_Handler+0x118>)
 800c86c:	f003 fbd4 	bl	8010018 <sniprintf>
  }

  printf("%s", dataOut);
 800c870:	492b      	ldr	r1, [pc, #172]	; (800c920 <Temp_Sensor_Handler+0x118>)
 800c872:	482d      	ldr	r0, [pc, #180]	; (800c928 <Temp_Sensor_Handler+0x120>)
 800c874:	f003 fbb8 	bl	800ffe8 <iprintf>

  if (verbose == 1)
 800c878:	4b2c      	ldr	r3, [pc, #176]	; (800c92c <Temp_Sensor_Handler+0x124>)
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d148      	bne.n	800c912 <Temp_Sensor_Handler+0x10a>
  {
    if (IKS01A3_ENV_SENSOR_ReadID(Instance, &whoami))
 800c880:	f107 030b 	add.w	r3, r7, #11
 800c884:	4619      	mov	r1, r3
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f7fb fa5e 	bl	8007d48 <IKS01A3_ENV_SENSOR_ReadID>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d007      	beq.n	800c8a2 <Temp_Sensor_Handler+0x9a>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4a26      	ldr	r2, [pc, #152]	; (800c930 <Temp_Sensor_Handler+0x128>)
 800c896:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c89a:	4821      	ldr	r0, [pc, #132]	; (800c920 <Temp_Sensor_Handler+0x118>)
 800c89c:	f003 fbbc 	bl	8010018 <sniprintf>
 800c8a0:	e008      	b.n	800c8b4 <Temp_Sensor_Handler+0xac>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	7afa      	ldrb	r2, [r7, #11]
 800c8a6:	9200      	str	r2, [sp, #0]
 800c8a8:	4a22      	ldr	r2, [pc, #136]	; (800c934 <Temp_Sensor_Handler+0x12c>)
 800c8aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c8ae:	481c      	ldr	r0, [pc, #112]	; (800c920 <Temp_Sensor_Handler+0x118>)
 800c8b0:	f003 fbb2 	bl	8010018 <sniprintf>
    }

    printf("%s", dataOut);
 800c8b4:	491a      	ldr	r1, [pc, #104]	; (800c920 <Temp_Sensor_Handler+0x118>)
 800c8b6:	481c      	ldr	r0, [pc, #112]	; (800c928 <Temp_Sensor_Handler+0x120>)
 800c8b8:	f003 fb96 	bl	800ffe8 <iprintf>

    if (IKS01A3_ENV_SENSOR_GetOutputDataRate(Instance, ENV_TEMPERATURE, &odr))
 800c8bc:	f107 031c 	add.w	r3, r7, #28
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	2101      	movs	r1, #1
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f7fb fa69 	bl	8007d9c <IKS01A3_ENV_SENSOR_GetOutputDataRate>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d007      	beq.n	800c8e0 <Temp_Sensor_Handler+0xd8>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a19      	ldr	r2, [pc, #100]	; (800c938 <Temp_Sensor_Handler+0x130>)
 800c8d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c8d8:	4811      	ldr	r0, [pc, #68]	; (800c920 <Temp_Sensor_Handler+0x118>)
 800c8da:	f003 fb9d 	bl	8010018 <sniprintf>
 800c8de:	e014      	b.n	800c90a <Temp_Sensor_Handler+0x102>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800c8e0:	edd7 7a07 	vldr	s15, [r7, #28]
 800c8e4:	f107 030c 	add.w	r3, r7, #12
 800c8e8:	2103      	movs	r1, #3
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	eeb0 0a67 	vmov.f32	s0, s15
 800c8f0:	f7ff fce2 	bl	800c2b8 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 800c8f8:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c8fa:	9101      	str	r1, [sp, #4]
 800c8fc:	9200      	str	r2, [sp, #0]
 800c8fe:	4a0f      	ldr	r2, [pc, #60]	; (800c93c <Temp_Sensor_Handler+0x134>)
 800c900:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c904:	4806      	ldr	r0, [pc, #24]	; (800c920 <Temp_Sensor_Handler+0x118>)
 800c906:	f003 fb87 	bl	8010018 <sniprintf>
    }

    printf("%s", dataOut);
 800c90a:	4905      	ldr	r1, [pc, #20]	; (800c920 <Temp_Sensor_Handler+0x118>)
 800c90c:	4806      	ldr	r0, [pc, #24]	; (800c928 <Temp_Sensor_Handler+0x120>)
 800c90e:	f003 fb6b 	bl	800ffe8 <iprintf>
  }
}
 800c912:	bf00      	nop
 800c914:	3720      	adds	r7, #32
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	0801261c 	.word	0x0801261c
 800c920:	20000474 	.word	0x20000474
 800c924:	08012630 	.word	0x08012630
 800c928:	0801235c 	.word	0x0801235c
 800c92c:	200001b9 	.word	0x200001b9
 800c930:	080124f8 	.word	0x080124f8
 800c934:	0801250c 	.word	0x0801250c
 800c938:	08012650 	.word	0x08012650
 800c93c:	08012534 	.word	0x08012534

0800c940 <Press_Sensor_Handler>:
  * @brief  Handles the pressure sensor data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Press_Sensor_Handler(uint32_t Instance)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b08a      	sub	sp, #40	; 0x28
 800c944:	af02      	add	r7, sp, #8
 800c946:	6078      	str	r0, [r7, #4]
  float odr;
  float pressure;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure))
 800c948:	f107 0318 	add.w	r3, r7, #24
 800c94c:	461a      	mov	r2, r3
 800c94e:	2102      	movs	r1, #2
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f7fb fa67 	bl	8007e24 <IKS01A3_ENV_SENSOR_GetValue>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d007      	beq.n	800c96c <Press_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: Error\r\n", (int)Instance);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	4a38      	ldr	r2, [pc, #224]	; (800ca40 <Press_Sensor_Handler+0x100>)
 800c960:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c964:	4837      	ldr	r0, [pc, #220]	; (800ca44 <Press_Sensor_Handler+0x104>)
 800c966:	f003 fb57 	bl	8010018 <sniprintf>
 800c96a:	e014      	b.n	800c996 <Press_Sensor_Handler+0x56>
  }
  else
  {
    floatToInt(pressure, &out_value, 2);
 800c96c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c970:	f107 030c 	add.w	r3, r7, #12
 800c974:	2102      	movs	r1, #2
 800c976:	4618      	mov	r0, r3
 800c978:	eeb0 0a67 	vmov.f32	s0, s15
 800c97c:	f7ff fc9c 	bl	800c2b8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 800c984:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 800c986:	9101      	str	r1, [sp, #4]
 800c988:	9200      	str	r2, [sp, #0]
 800c98a:	4a2f      	ldr	r2, [pc, #188]	; (800ca48 <Press_Sensor_Handler+0x108>)
 800c98c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c990:	482c      	ldr	r0, [pc, #176]	; (800ca44 <Press_Sensor_Handler+0x104>)
 800c992:	f003 fb41 	bl	8010018 <sniprintf>
  }

  printf("%s", dataOut);
 800c996:	492b      	ldr	r1, [pc, #172]	; (800ca44 <Press_Sensor_Handler+0x104>)
 800c998:	482c      	ldr	r0, [pc, #176]	; (800ca4c <Press_Sensor_Handler+0x10c>)
 800c99a:	f003 fb25 	bl	800ffe8 <iprintf>

  if (verbose == 1)
 800c99e:	4b2c      	ldr	r3, [pc, #176]	; (800ca50 <Press_Sensor_Handler+0x110>)
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d148      	bne.n	800ca38 <Press_Sensor_Handler+0xf8>
  {
    if (IKS01A3_ENV_SENSOR_ReadID(Instance, &whoami))
 800c9a6:	f107 030b 	add.w	r3, r7, #11
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f7fb f9cb 	bl	8007d48 <IKS01A3_ENV_SENSOR_ReadID>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d007      	beq.n	800c9c8 <Press_Sensor_Handler+0x88>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	4a26      	ldr	r2, [pc, #152]	; (800ca54 <Press_Sensor_Handler+0x114>)
 800c9bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c9c0:	4820      	ldr	r0, [pc, #128]	; (800ca44 <Press_Sensor_Handler+0x104>)
 800c9c2:	f003 fb29 	bl	8010018 <sniprintf>
 800c9c6:	e008      	b.n	800c9da <Press_Sensor_Handler+0x9a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	7afa      	ldrb	r2, [r7, #11]
 800c9cc:	9200      	str	r2, [sp, #0]
 800c9ce:	4a22      	ldr	r2, [pc, #136]	; (800ca58 <Press_Sensor_Handler+0x118>)
 800c9d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c9d4:	481b      	ldr	r0, [pc, #108]	; (800ca44 <Press_Sensor_Handler+0x104>)
 800c9d6:	f003 fb1f 	bl	8010018 <sniprintf>
    }

    printf("%s", dataOut);
 800c9da:	491a      	ldr	r1, [pc, #104]	; (800ca44 <Press_Sensor_Handler+0x104>)
 800c9dc:	481b      	ldr	r0, [pc, #108]	; (800ca4c <Press_Sensor_Handler+0x10c>)
 800c9de:	f003 fb03 	bl	800ffe8 <iprintf>

    if (IKS01A3_ENV_SENSOR_GetOutputDataRate(Instance, ENV_PRESSURE, &odr))
 800c9e2:	f107 031c 	add.w	r3, r7, #28
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	2102      	movs	r1, #2
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f7fb f9d6 	bl	8007d9c <IKS01A3_ENV_SENSOR_GetOutputDataRate>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d007      	beq.n	800ca06 <Press_Sensor_Handler+0xc6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4a18      	ldr	r2, [pc, #96]	; (800ca5c <Press_Sensor_Handler+0x11c>)
 800c9fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c9fe:	4811      	ldr	r0, [pc, #68]	; (800ca44 <Press_Sensor_Handler+0x104>)
 800ca00:	f003 fb0a 	bl	8010018 <sniprintf>
 800ca04:	e014      	b.n	800ca30 <Press_Sensor_Handler+0xf0>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800ca06:	edd7 7a07 	vldr	s15, [r7, #28]
 800ca0a:	f107 030c 	add.w	r3, r7, #12
 800ca0e:	2103      	movs	r1, #3
 800ca10:	4618      	mov	r0, r3
 800ca12:	eeb0 0a67 	vmov.f32	s0, s15
 800ca16:	f7ff fc4f 	bl	800c2b8 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 800ca1e:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800ca20:	9101      	str	r1, [sp, #4]
 800ca22:	9200      	str	r2, [sp, #0]
 800ca24:	4a0e      	ldr	r2, [pc, #56]	; (800ca60 <Press_Sensor_Handler+0x120>)
 800ca26:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ca2a:	4806      	ldr	r0, [pc, #24]	; (800ca44 <Press_Sensor_Handler+0x104>)
 800ca2c:	f003 faf4 	bl	8010018 <sniprintf>
    }

    printf("%s", dataOut);
 800ca30:	4904      	ldr	r1, [pc, #16]	; (800ca44 <Press_Sensor_Handler+0x104>)
 800ca32:	4806      	ldr	r0, [pc, #24]	; (800ca4c <Press_Sensor_Handler+0x10c>)
 800ca34:	f003 fad8 	bl	800ffe8 <iprintf>
  }
}
 800ca38:	bf00      	nop
 800ca3a:	3720      	adds	r7, #32
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	08012664 	.word	0x08012664
 800ca44:	20000474 	.word	0x20000474
 800ca48:	0801267c 	.word	0x0801267c
 800ca4c:	0801235c 	.word	0x0801235c
 800ca50:	200001b9 	.word	0x200001b9
 800ca54:	080124f8 	.word	0x080124f8
 800ca58:	0801250c 	.word	0x0801250c
 800ca5c:	08012650 	.word	0x08012650
 800ca60:	08012534 	.word	0x08012534

0800ca64 <Hum_Sensor_Handler>:
  * @brief  Handles the humidity data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Hum_Sensor_Handler(uint32_t Instance)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b08a      	sub	sp, #40	; 0x28
 800ca68:	af02      	add	r7, sp, #8
 800ca6a:	6078      	str	r0, [r7, #4]
  float odr;
  float humidity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity))
 800ca6c:	f107 0318 	add.w	r3, r7, #24
 800ca70:	461a      	mov	r2, r3
 800ca72:	2104      	movs	r1, #4
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f7fb f9d5 	bl	8007e24 <IKS01A3_ENV_SENSOR_GetValue>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d007      	beq.n	800ca90 <Hum_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: Error\r\n", (int)Instance);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4a38      	ldr	r2, [pc, #224]	; (800cb64 <Hum_Sensor_Handler+0x100>)
 800ca84:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ca88:	4837      	ldr	r0, [pc, #220]	; (800cb68 <Hum_Sensor_Handler+0x104>)
 800ca8a:	f003 fac5 	bl	8010018 <sniprintf>
 800ca8e:	e014      	b.n	800caba <Hum_Sensor_Handler+0x56>
  }
  else
  {
    floatToInt(humidity, &out_value, 2);
 800ca90:	edd7 7a06 	vldr	s15, [r7, #24]
 800ca94:	f107 030c 	add.w	r3, r7, #12
 800ca98:	2102      	movs	r1, #2
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	eeb0 0a67 	vmov.f32	s0, s15
 800caa0:	f7ff fc0a 	bl	800c2b8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 800caa8:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 800caaa:	9101      	str	r1, [sp, #4]
 800caac:	9200      	str	r2, [sp, #0]
 800caae:	4a2f      	ldr	r2, [pc, #188]	; (800cb6c <Hum_Sensor_Handler+0x108>)
 800cab0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cab4:	482c      	ldr	r0, [pc, #176]	; (800cb68 <Hum_Sensor_Handler+0x104>)
 800cab6:	f003 faaf 	bl	8010018 <sniprintf>
  }

  printf("%s", dataOut);
 800caba:	492b      	ldr	r1, [pc, #172]	; (800cb68 <Hum_Sensor_Handler+0x104>)
 800cabc:	482c      	ldr	r0, [pc, #176]	; (800cb70 <Hum_Sensor_Handler+0x10c>)
 800cabe:	f003 fa93 	bl	800ffe8 <iprintf>

  if (verbose == 1)
 800cac2:	4b2c      	ldr	r3, [pc, #176]	; (800cb74 <Hum_Sensor_Handler+0x110>)
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d148      	bne.n	800cb5c <Hum_Sensor_Handler+0xf8>
  {
    if (IKS01A3_ENV_SENSOR_ReadID(Instance, &whoami))
 800caca:	f107 030b 	add.w	r3, r7, #11
 800cace:	4619      	mov	r1, r3
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f7fb f939 	bl	8007d48 <IKS01A3_ENV_SENSOR_ReadID>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d007      	beq.n	800caec <Hum_Sensor_Handler+0x88>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4a26      	ldr	r2, [pc, #152]	; (800cb78 <Hum_Sensor_Handler+0x114>)
 800cae0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cae4:	4820      	ldr	r0, [pc, #128]	; (800cb68 <Hum_Sensor_Handler+0x104>)
 800cae6:	f003 fa97 	bl	8010018 <sniprintf>
 800caea:	e008      	b.n	800cafe <Hum_Sensor_Handler+0x9a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	7afa      	ldrb	r2, [r7, #11]
 800caf0:	9200      	str	r2, [sp, #0]
 800caf2:	4a22      	ldr	r2, [pc, #136]	; (800cb7c <Hum_Sensor_Handler+0x118>)
 800caf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800caf8:	481b      	ldr	r0, [pc, #108]	; (800cb68 <Hum_Sensor_Handler+0x104>)
 800cafa:	f003 fa8d 	bl	8010018 <sniprintf>
    }

    printf("%s", dataOut);
 800cafe:	491a      	ldr	r1, [pc, #104]	; (800cb68 <Hum_Sensor_Handler+0x104>)
 800cb00:	481b      	ldr	r0, [pc, #108]	; (800cb70 <Hum_Sensor_Handler+0x10c>)
 800cb02:	f003 fa71 	bl	800ffe8 <iprintf>

    if (IKS01A3_ENV_SENSOR_GetOutputDataRate(Instance, ENV_HUMIDITY, &odr))
 800cb06:	f107 031c 	add.w	r3, r7, #28
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	2104      	movs	r1, #4
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f7fb f944 	bl	8007d9c <IKS01A3_ENV_SENSOR_GetOutputDataRate>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d007      	beq.n	800cb2a <Hum_Sensor_Handler+0xc6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	4a18      	ldr	r2, [pc, #96]	; (800cb80 <Hum_Sensor_Handler+0x11c>)
 800cb1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb22:	4811      	ldr	r0, [pc, #68]	; (800cb68 <Hum_Sensor_Handler+0x104>)
 800cb24:	f003 fa78 	bl	8010018 <sniprintf>
 800cb28:	e014      	b.n	800cb54 <Hum_Sensor_Handler+0xf0>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800cb2a:	edd7 7a07 	vldr	s15, [r7, #28]
 800cb2e:	f107 030c 	add.w	r3, r7, #12
 800cb32:	2103      	movs	r1, #3
 800cb34:	4618      	mov	r0, r3
 800cb36:	eeb0 0a67 	vmov.f32	s0, s15
 800cb3a:	f7ff fbbd 	bl	800c2b8 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 800cb42:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800cb44:	9101      	str	r1, [sp, #4]
 800cb46:	9200      	str	r2, [sp, #0]
 800cb48:	4a0e      	ldr	r2, [pc, #56]	; (800cb84 <Hum_Sensor_Handler+0x120>)
 800cb4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb4e:	4806      	ldr	r0, [pc, #24]	; (800cb68 <Hum_Sensor_Handler+0x104>)
 800cb50:	f003 fa62 	bl	8010018 <sniprintf>
    }

    printf("%s", dataOut);
 800cb54:	4904      	ldr	r1, [pc, #16]	; (800cb68 <Hum_Sensor_Handler+0x104>)
 800cb56:	4806      	ldr	r0, [pc, #24]	; (800cb70 <Hum_Sensor_Handler+0x10c>)
 800cb58:	f003 fa46 	bl	800ffe8 <iprintf>
  }
}
 800cb5c:	bf00      	nop
 800cb5e:	3720      	adds	r7, #32
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	08012698 	.word	0x08012698
 800cb68:	20000474 	.word	0x20000474
 800cb6c:	080126ac 	.word	0x080126ac
 800cb70:	0801235c 	.word	0x0801235c
 800cb74:	200001b9 	.word	0x200001b9
 800cb78:	080124f8 	.word	0x080124f8
 800cb7c:	0801250c 	.word	0x0801250c
 800cb80:	08012650 	.word	0x08012650
 800cb84:	08012534 	.word	0x08012534

0800cb88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cb88:	b480      	push	{r7}
 800cb8a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800cb8c:	bf00      	nop
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr
	...

0800cb98 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb9e:	f3ef 8305 	mrs	r3, IPSR
 800cba2:	60bb      	str	r3, [r7, #8]
  return(result);
 800cba4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d10f      	bne.n	800cbca <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbaa:	f3ef 8310 	mrs	r3, PRIMASK
 800cbae:	607b      	str	r3, [r7, #4]
  return(result);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d105      	bne.n	800cbc2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cbb6:	f3ef 8311 	mrs	r3, BASEPRI
 800cbba:	603b      	str	r3, [r7, #0]
  return(result);
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d007      	beq.n	800cbd2 <osKernelInitialize+0x3a>
 800cbc2:	4b0e      	ldr	r3, [pc, #56]	; (800cbfc <osKernelInitialize+0x64>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	d103      	bne.n	800cbd2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800cbca:	f06f 0305 	mvn.w	r3, #5
 800cbce:	60fb      	str	r3, [r7, #12]
 800cbd0:	e00c      	b.n	800cbec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cbd2:	4b0a      	ldr	r3, [pc, #40]	; (800cbfc <osKernelInitialize+0x64>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d105      	bne.n	800cbe6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cbda:	4b08      	ldr	r3, [pc, #32]	; (800cbfc <osKernelInitialize+0x64>)
 800cbdc:	2201      	movs	r2, #1
 800cbde:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	60fb      	str	r3, [r7, #12]
 800cbe4:	e002      	b.n	800cbec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cbe6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cbec:	68fb      	ldr	r3, [r7, #12]
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3714      	adds	r7, #20
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	20000578 	.word	0x20000578

0800cc00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc06:	f3ef 8305 	mrs	r3, IPSR
 800cc0a:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10f      	bne.n	800cc32 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc12:	f3ef 8310 	mrs	r3, PRIMASK
 800cc16:	607b      	str	r3, [r7, #4]
  return(result);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d105      	bne.n	800cc2a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc1e:	f3ef 8311 	mrs	r3, BASEPRI
 800cc22:	603b      	str	r3, [r7, #0]
  return(result);
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d007      	beq.n	800cc3a <osKernelStart+0x3a>
 800cc2a:	4b0f      	ldr	r3, [pc, #60]	; (800cc68 <osKernelStart+0x68>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	d103      	bne.n	800cc3a <osKernelStart+0x3a>
    stat = osErrorISR;
 800cc32:	f06f 0305 	mvn.w	r3, #5
 800cc36:	60fb      	str	r3, [r7, #12]
 800cc38:	e010      	b.n	800cc5c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cc3a:	4b0b      	ldr	r3, [pc, #44]	; (800cc68 <osKernelStart+0x68>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d109      	bne.n	800cc56 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cc42:	f7ff ffa1 	bl	800cb88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cc46:	4b08      	ldr	r3, [pc, #32]	; (800cc68 <osKernelStart+0x68>)
 800cc48:	2202      	movs	r2, #2
 800cc4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cc4c:	f001 fc34 	bl	800e4b8 <vTaskStartScheduler>
      stat = osOK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	60fb      	str	r3, [r7, #12]
 800cc54:	e002      	b.n	800cc5c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800cc56:	f04f 33ff 	mov.w	r3, #4294967295
 800cc5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3710      	adds	r7, #16
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	20000578 	.word	0x20000578

0800cc6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b090      	sub	sp, #64	; 0x40
 800cc70:	af04      	add	r7, sp, #16
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc7c:	f3ef 8305 	mrs	r3, IPSR
 800cc80:	61fb      	str	r3, [r7, #28]
  return(result);
 800cc82:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	f040 808f 	bne.w	800cda8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc8a:	f3ef 8310 	mrs	r3, PRIMASK
 800cc8e:	61bb      	str	r3, [r7, #24]
  return(result);
 800cc90:	69bb      	ldr	r3, [r7, #24]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d105      	bne.n	800cca2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc96:	f3ef 8311 	mrs	r3, BASEPRI
 800cc9a:	617b      	str	r3, [r7, #20]
  return(result);
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d003      	beq.n	800ccaa <osThreadNew+0x3e>
 800cca2:	4b44      	ldr	r3, [pc, #272]	; (800cdb4 <osThreadNew+0x148>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d07e      	beq.n	800cda8 <osThreadNew+0x13c>
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d07b      	beq.n	800cda8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ccb0:	2380      	movs	r3, #128	; 0x80
 800ccb2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ccb4:	2318      	movs	r3, #24
 800ccb6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ccbc:	f04f 33ff 	mov.w	r3, #4294967295
 800ccc0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d045      	beq.n	800cd54 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d002      	beq.n	800ccd6 <osThreadNew+0x6a>
        name = attr->name;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	699b      	ldr	r3, [r3, #24]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d002      	beq.n	800cce4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	699b      	ldr	r3, [r3, #24]
 800cce2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d008      	beq.n	800ccfc <osThreadNew+0x90>
 800ccea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccec:	2b38      	cmp	r3, #56	; 0x38
 800ccee:	d805      	bhi.n	800ccfc <osThreadNew+0x90>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	f003 0301 	and.w	r3, r3, #1
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d001      	beq.n	800cd00 <osThreadNew+0x94>
        return (NULL);
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	e054      	b.n	800cdaa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	695b      	ldr	r3, [r3, #20]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d003      	beq.n	800cd10 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	695b      	ldr	r3, [r3, #20]
 800cd0c:	089b      	lsrs	r3, r3, #2
 800cd0e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00e      	beq.n	800cd36 <osThreadNew+0xca>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	2b5b      	cmp	r3, #91	; 0x5b
 800cd1e:	d90a      	bls.n	800cd36 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d006      	beq.n	800cd36 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	695b      	ldr	r3, [r3, #20]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d002      	beq.n	800cd36 <osThreadNew+0xca>
        mem = 1;
 800cd30:	2301      	movs	r3, #1
 800cd32:	623b      	str	r3, [r7, #32]
 800cd34:	e010      	b.n	800cd58 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d10c      	bne.n	800cd58 <osThreadNew+0xec>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	68db      	ldr	r3, [r3, #12]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d108      	bne.n	800cd58 <osThreadNew+0xec>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	691b      	ldr	r3, [r3, #16]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d104      	bne.n	800cd58 <osThreadNew+0xec>
          mem = 0;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	623b      	str	r3, [r7, #32]
 800cd52:	e001      	b.n	800cd58 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800cd54:	2300      	movs	r3, #0
 800cd56:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cd58:	6a3b      	ldr	r3, [r7, #32]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d110      	bne.n	800cd80 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd66:	9202      	str	r2, [sp, #8]
 800cd68:	9301      	str	r3, [sp, #4]
 800cd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6c:	9300      	str	r3, [sp, #0]
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd74:	68f8      	ldr	r0, [r7, #12]
 800cd76:	f001 f9cd 	bl	800e114 <xTaskCreateStatic>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	613b      	str	r3, [r7, #16]
 800cd7e:	e013      	b.n	800cda8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800cd80:	6a3b      	ldr	r3, [r7, #32]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d110      	bne.n	800cda8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd88:	b29a      	uxth	r2, r3
 800cd8a:	f107 0310 	add.w	r3, r7, #16
 800cd8e:	9301      	str	r3, [sp, #4]
 800cd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd92:	9300      	str	r3, [sp, #0]
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	f001 fa15 	bl	800e1c8 <xTaskCreate>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d001      	beq.n	800cda8 <osThreadNew+0x13c>
          hTask = NULL;
 800cda4:	2300      	movs	r3, #0
 800cda6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cda8:	693b      	ldr	r3, [r7, #16]
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3730      	adds	r7, #48	; 0x30
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	20000578 	.word	0x20000578

0800cdb8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b086      	sub	sp, #24
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdc0:	f3ef 8305 	mrs	r3, IPSR
 800cdc4:	613b      	str	r3, [r7, #16]
  return(result);
 800cdc6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d10f      	bne.n	800cdec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdcc:	f3ef 8310 	mrs	r3, PRIMASK
 800cdd0:	60fb      	str	r3, [r7, #12]
  return(result);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d105      	bne.n	800cde4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cdd8:	f3ef 8311 	mrs	r3, BASEPRI
 800cddc:	60bb      	str	r3, [r7, #8]
  return(result);
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d007      	beq.n	800cdf4 <osDelay+0x3c>
 800cde4:	4b0a      	ldr	r3, [pc, #40]	; (800ce10 <osDelay+0x58>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2b02      	cmp	r3, #2
 800cdea:	d103      	bne.n	800cdf4 <osDelay+0x3c>
    stat = osErrorISR;
 800cdec:	f06f 0305 	mvn.w	r3, #5
 800cdf0:	617b      	str	r3, [r7, #20]
 800cdf2:	e007      	b.n	800ce04 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d002      	beq.n	800ce04 <osDelay+0x4c>
      vTaskDelay(ticks);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f001 fb26 	bl	800e450 <vTaskDelay>
    }
  }

  return (stat);
 800ce04:	697b      	ldr	r3, [r7, #20]
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3718      	adds	r7, #24
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	20000578 	.word	0x20000578

0800ce14 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b088      	sub	sp, #32
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce20:	f3ef 8305 	mrs	r3, IPSR
 800ce24:	617b      	str	r3, [r7, #20]
  return(result);
 800ce26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d13d      	bne.n	800cea8 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce2c:	f3ef 8310 	mrs	r3, PRIMASK
 800ce30:	613b      	str	r3, [r7, #16]
  return(result);
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d105      	bne.n	800ce44 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce38:	f3ef 8311 	mrs	r3, BASEPRI
 800ce3c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d003      	beq.n	800ce4c <osEventFlagsNew+0x38>
 800ce44:	4b1b      	ldr	r3, [pc, #108]	; (800ceb4 <osEventFlagsNew+0xa0>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	d02d      	beq.n	800cea8 <osEventFlagsNew+0x94>
    mem = -1;
 800ce4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce50:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d015      	beq.n	800ce84 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d006      	beq.n	800ce6e <osEventFlagsNew+0x5a>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	2b1f      	cmp	r3, #31
 800ce66:	d902      	bls.n	800ce6e <osEventFlagsNew+0x5a>
        mem = 1;
 800ce68:	2301      	movs	r3, #1
 800ce6a:	61bb      	str	r3, [r7, #24]
 800ce6c:	e00c      	b.n	800ce88 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	689b      	ldr	r3, [r3, #8]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d108      	bne.n	800ce88 <osEventFlagsNew+0x74>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d104      	bne.n	800ce88 <osEventFlagsNew+0x74>
          mem = 0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	61bb      	str	r3, [r7, #24]
 800ce82:	e001      	b.n	800ce88 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 800ce84:	2300      	movs	r3, #0
 800ce86:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ce88:	69bb      	ldr	r3, [r7, #24]
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d106      	bne.n	800ce9c <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	4618      	mov	r0, r3
 800ce94:	f000 f956 	bl	800d144 <xEventGroupCreateStatic>
 800ce98:	61f8      	str	r0, [r7, #28]
 800ce9a:	e005      	b.n	800cea8 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d102      	bne.n	800cea8 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800cea2:	f000 f984 	bl	800d1ae <xEventGroupCreate>
 800cea6:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800cea8:	69fb      	ldr	r3, [r7, #28]
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3720      	adds	r7, #32
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	20000578 	.word	0x20000578

0800ceb8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b088      	sub	sp, #32
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d004      	beq.n	800ced6 <osEventFlagsSet+0x1e>
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d003      	beq.n	800cede <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800ced6:	f06f 0303 	mvn.w	r3, #3
 800ceda:	61fb      	str	r3, [r7, #28]
 800cedc:	e03a      	b.n	800cf54 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cede:	f3ef 8305 	mrs	r3, IPSR
 800cee2:	617b      	str	r3, [r7, #20]
  return(result);
 800cee4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d10f      	bne.n	800cf0a <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ceea:	f3ef 8310 	mrs	r3, PRIMASK
 800ceee:	613b      	str	r3, [r7, #16]
  return(result);
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d105      	bne.n	800cf02 <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cef6:	f3ef 8311 	mrs	r3, BASEPRI
 800cefa:	60fb      	str	r3, [r7, #12]
  return(result);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d021      	beq.n	800cf46 <osEventFlagsSet+0x8e>
 800cf02:	4b17      	ldr	r3, [pc, #92]	; (800cf60 <osEventFlagsSet+0xa8>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b02      	cmp	r3, #2
 800cf08:	d11d      	bne.n	800cf46 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800cf0e:	f107 0308 	add.w	r3, r7, #8
 800cf12:	461a      	mov	r2, r3
 800cf14:	6839      	ldr	r1, [r7, #0]
 800cf16:	69b8      	ldr	r0, [r7, #24]
 800cf18:	f000 fb60 	bl	800d5dc <xEventGroupSetBitsFromISR>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d103      	bne.n	800cf2a <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 800cf22:	f06f 0302 	mvn.w	r3, #2
 800cf26:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800cf28:	e013      	b.n	800cf52 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d00e      	beq.n	800cf52 <osEventFlagsSet+0x9a>
 800cf34:	4b0b      	ldr	r3, [pc, #44]	; (800cf64 <osEventFlagsSet+0xac>)
 800cf36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf3a:	601a      	str	r2, [r3, #0]
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800cf44:	e005      	b.n	800cf52 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800cf46:	6839      	ldr	r1, [r7, #0]
 800cf48:	69b8      	ldr	r0, [r7, #24]
 800cf4a:	f000 fa82 	bl	800d452 <xEventGroupSetBits>
 800cf4e:	61f8      	str	r0, [r7, #28]
 800cf50:	e000      	b.n	800cf54 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800cf52:	bf00      	nop
  }

  return (rflags);
 800cf54:	69fb      	ldr	r3, [r7, #28]
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3720      	adds	r7, #32
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	bf00      	nop
 800cf60:	20000578 	.word	0x20000578
 800cf64:	e000ed04 	.word	0xe000ed04

0800cf68 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b088      	sub	sp, #32
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d004      	beq.n	800cf86 <osEventFlagsClear+0x1e>
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d003      	beq.n	800cf8e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800cf86:	f06f 0303 	mvn.w	r3, #3
 800cf8a:	61fb      	str	r3, [r7, #28]
 800cf8c:	e029      	b.n	800cfe2 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf8e:	f3ef 8305 	mrs	r3, IPSR
 800cf92:	617b      	str	r3, [r7, #20]
  return(result);
 800cf94:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d10f      	bne.n	800cfba <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf9a:	f3ef 8310 	mrs	r3, PRIMASK
 800cf9e:	613b      	str	r3, [r7, #16]
  return(result);
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d105      	bne.n	800cfb2 <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cfa6:	f3ef 8311 	mrs	r3, BASEPRI
 800cfaa:	60fb      	str	r3, [r7, #12]
  return(result);
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d012      	beq.n	800cfd8 <osEventFlagsClear+0x70>
 800cfb2:	4b0e      	ldr	r3, [pc, #56]	; (800cfec <osEventFlagsClear+0x84>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2b02      	cmp	r3, #2
 800cfb8:	d10e      	bne.n	800cfd8 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800cfba:	69b8      	ldr	r0, [r7, #24]
 800cfbc:	f000 fa26 	bl	800d40c <xEventGroupGetBitsFromISR>
 800cfc0:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800cfc2:	6839      	ldr	r1, [r7, #0]
 800cfc4:	69b8      	ldr	r0, [r7, #24]
 800cfc6:	f000 fa0d 	bl	800d3e4 <xEventGroupClearBitsFromISR>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d108      	bne.n	800cfe2 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 800cfd0:	f06f 0302 	mvn.w	r3, #2
 800cfd4:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800cfd6:	e004      	b.n	800cfe2 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 800cfd8:	6839      	ldr	r1, [r7, #0]
 800cfda:	69b8      	ldr	r0, [r7, #24]
 800cfdc:	f000 f9cc 	bl	800d378 <xEventGroupClearBits>
 800cfe0:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800cfe2:	69fb      	ldr	r3, [r7, #28]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3720      	adds	r7, #32
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}
 800cfec:	20000578 	.word	0x20000578

0800cff0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b08e      	sub	sp, #56	; 0x38
 800cff4:	af02      	add	r7, sp, #8
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
 800cffc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800d002:	6a3b      	ldr	r3, [r7, #32]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d004      	beq.n	800d012 <osEventFlagsWait+0x22>
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d003      	beq.n	800d01a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800d012:	f06f 0303 	mvn.w	r3, #3
 800d016:	627b      	str	r3, [r7, #36]	; 0x24
 800d018:	e059      	b.n	800d0ce <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d01a:	f3ef 8305 	mrs	r3, IPSR
 800d01e:	61fb      	str	r3, [r7, #28]
  return(result);
 800d020:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10f      	bne.n	800d046 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d026:	f3ef 8310 	mrs	r3, PRIMASK
 800d02a:	61bb      	str	r3, [r7, #24]
  return(result);
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d105      	bne.n	800d03e <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d032:	f3ef 8311 	mrs	r3, BASEPRI
 800d036:	617b      	str	r3, [r7, #20]
  return(result);
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d007      	beq.n	800d04e <osEventFlagsWait+0x5e>
 800d03e:	4b26      	ldr	r3, [pc, #152]	; (800d0d8 <osEventFlagsWait+0xe8>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	2b02      	cmp	r3, #2
 800d044:	d103      	bne.n	800d04e <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 800d046:	f06f 0305 	mvn.w	r3, #5
 800d04a:	627b      	str	r3, [r7, #36]	; 0x24
 800d04c:	e03f      	b.n	800d0ce <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f003 0301 	and.w	r3, r3, #1
 800d054:	2b00      	cmp	r3, #0
 800d056:	d002      	beq.n	800d05e <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 800d058:	2301      	movs	r3, #1
 800d05a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d05c:	e001      	b.n	800d062 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 800d05e:	2300      	movs	r3, #0
 800d060:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f003 0302 	and.w	r3, r3, #2
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d002      	beq.n	800d072 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 800d06c:	2300      	movs	r3, #0
 800d06e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d070:	e001      	b.n	800d076 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 800d072:	2301      	movs	r3, #1
 800d074:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d07e:	68b9      	ldr	r1, [r7, #8]
 800d080:	6a38      	ldr	r0, [r7, #32]
 800d082:	f000 f8af 	bl	800d1e4 <xEventGroupWaitBits>
 800d086:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f003 0301 	and.w	r3, r3, #1
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00e      	beq.n	800d0b0 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 800d092:	68ba      	ldr	r2, [r7, #8]
 800d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d096:	429a      	cmp	r2, r3
 800d098:	d019      	beq.n	800d0ce <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d003      	beq.n	800d0a8 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 800d0a0:	f06f 0301 	mvn.w	r3, #1
 800d0a4:	627b      	str	r3, [r7, #36]	; 0x24
 800d0a6:	e012      	b.n	800d0ce <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800d0a8:	f06f 0302 	mvn.w	r3, #2
 800d0ac:	627b      	str	r3, [r7, #36]	; 0x24
 800d0ae:	e00e      	b.n	800d0ce <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800d0b0:	68ba      	ldr	r2, [r7, #8]
 800d0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d109      	bne.n	800d0ce <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d003      	beq.n	800d0c8 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 800d0c0:	f06f 0301 	mvn.w	r3, #1
 800d0c4:	627b      	str	r3, [r7, #36]	; 0x24
 800d0c6:	e002      	b.n	800d0ce <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800d0c8:	f06f 0302 	mvn.w	r3, #2
 800d0cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 800d0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3730      	adds	r7, #48	; 0x30
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	20000578 	.word	0x20000578

0800d0dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d0dc:	b480      	push	{r7}
 800d0de:	b085      	sub	sp, #20
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	4a07      	ldr	r2, [pc, #28]	; (800d108 <vApplicationGetIdleTaskMemory+0x2c>)
 800d0ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	4a06      	ldr	r2, [pc, #24]	; (800d10c <vApplicationGetIdleTaskMemory+0x30>)
 800d0f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2280      	movs	r2, #128	; 0x80
 800d0f8:	601a      	str	r2, [r3, #0]
}
 800d0fa:	bf00      	nop
 800d0fc:	3714      	adds	r7, #20
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop
 800d108:	2000057c 	.word	0x2000057c
 800d10c:	200005d8 	.word	0x200005d8

0800d110 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d110:	b480      	push	{r7}
 800d112:	b085      	sub	sp, #20
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	4a07      	ldr	r2, [pc, #28]	; (800d13c <vApplicationGetTimerTaskMemory+0x2c>)
 800d120:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	4a06      	ldr	r2, [pc, #24]	; (800d140 <vApplicationGetTimerTaskMemory+0x30>)
 800d126:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d12e:	601a      	str	r2, [r3, #0]
}
 800d130:	bf00      	nop
 800d132:	3714      	adds	r7, #20
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr
 800d13c:	200007d8 	.word	0x200007d8
 800d140:	20000834 	.word	0x20000834

0800d144 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800d144:	b580      	push	{r7, lr}
 800d146:	b086      	sub	sp, #24
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d109      	bne.n	800d166 <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d156:	f383 8811 	msr	BASEPRI, r3
 800d15a:	f3bf 8f6f 	isb	sy
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	613b      	str	r3, [r7, #16]
 800d164:	e7fe      	b.n	800d164 <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800d166:	2320      	movs	r3, #32
 800d168:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	2b20      	cmp	r3, #32
 800d16e:	d009      	beq.n	800d184 <xEventGroupCreateStatic+0x40>
 800d170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d174:	f383 8811 	msr	BASEPRI, r3
 800d178:	f3bf 8f6f 	isb	sy
 800d17c:	f3bf 8f4f 	dsb	sy
 800d180:	60fb      	str	r3, [r7, #12]
 800d182:	e7fe      	b.n	800d182 <xEventGroupCreateStatic+0x3e>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d00a      	beq.n	800d1a4 <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	2200      	movs	r2, #0
 800d192:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	3304      	adds	r3, #4
 800d198:	4618      	mov	r0, r3
 800d19a:	f000 fa33 	bl	800d604 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800d1a4:	697b      	ldr	r3, [r7, #20]
	}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3718      	adds	r7, #24
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}

0800d1ae <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800d1ae:	b580      	push	{r7, lr}
 800d1b0:	b082      	sub	sp, #8
 800d1b2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800d1b4:	2020      	movs	r0, #32
 800d1b6:	f002 fceb 	bl	800fb90 <pvPortMalloc>
 800d1ba:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00a      	beq.n	800d1d8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	3304      	adds	r3, #4
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f000 fa19 	bl	800d604 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800d1d8:	687b      	ldr	r3, [r7, #4]
	}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3708      	adds	r7, #8
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
	...

0800d1e4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b090      	sub	sp, #64	; 0x40
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	607a      	str	r2, [r7, #4]
 800d1f0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d109      	bne.n	800d218 <xEventGroupWaitBits+0x34>
 800d204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d208:	f383 8811 	msr	BASEPRI, r3
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	623b      	str	r3, [r7, #32]
 800d216:	e7fe      	b.n	800d216 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d009      	beq.n	800d236 <xEventGroupWaitBits+0x52>
 800d222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d226:	f383 8811 	msr	BASEPRI, r3
 800d22a:	f3bf 8f6f 	isb	sy
 800d22e:	f3bf 8f4f 	dsb	sy
 800d232:	61fb      	str	r3, [r7, #28]
 800d234:	e7fe      	b.n	800d234 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d109      	bne.n	800d250 <xEventGroupWaitBits+0x6c>
 800d23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d240:	f383 8811 	msr	BASEPRI, r3
 800d244:	f3bf 8f6f 	isb	sy
 800d248:	f3bf 8f4f 	dsb	sy
 800d24c:	61bb      	str	r3, [r7, #24]
 800d24e:	e7fe      	b.n	800d24e <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d250:	f001 fe02 	bl	800ee58 <xTaskGetSchedulerState>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d102      	bne.n	800d260 <xEventGroupWaitBits+0x7c>
 800d25a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d101      	bne.n	800d264 <xEventGroupWaitBits+0x80>
 800d260:	2301      	movs	r3, #1
 800d262:	e000      	b.n	800d266 <xEventGroupWaitBits+0x82>
 800d264:	2300      	movs	r3, #0
 800d266:	2b00      	cmp	r3, #0
 800d268:	d109      	bne.n	800d27e <xEventGroupWaitBits+0x9a>
 800d26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26e:	f383 8811 	msr	BASEPRI, r3
 800d272:	f3bf 8f6f 	isb	sy
 800d276:	f3bf 8f4f 	dsb	sy
 800d27a:	617b      	str	r3, [r7, #20]
 800d27c:	e7fe      	b.n	800d27c <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 800d27e:	f001 f97f 	bl	800e580 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800d282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800d288:	683a      	ldr	r2, [r7, #0]
 800d28a:	68b9      	ldr	r1, [r7, #8]
 800d28c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d28e:	f000 f983 	bl	800d598 <prvTestWaitCondition>
 800d292:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800d294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d296:	2b00      	cmp	r3, #0
 800d298:	d00e      	beq.n	800d2b8 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800d29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d028      	beq.n	800d2fa <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	43db      	mvns	r3, r3
 800d2b0:	401a      	ands	r2, r3
 800d2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2b4:	601a      	str	r2, [r3, #0]
 800d2b6:	e020      	b.n	800d2fa <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800d2b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d104      	bne.n	800d2c8 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800d2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	633b      	str	r3, [r7, #48]	; 0x30
 800d2c6:	e018      	b.n	800d2fa <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d003      	beq.n	800d2d6 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800d2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d2d4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d003      	beq.n	800d2e4 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800d2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d2e2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800d2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2e6:	1d18      	adds	r0, r3, #4
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	f001 fb37 	bl	800e964 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800d2fa:	f001 f94f 	bl	800e59c <xTaskResumeAll>
 800d2fe:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800d300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d302:	2b00      	cmp	r3, #0
 800d304:	d031      	beq.n	800d36a <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 800d306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d107      	bne.n	800d31c <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 800d30c:	4b19      	ldr	r3, [pc, #100]	; (800d374 <xEventGroupWaitBits+0x190>)
 800d30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d312:	601a      	str	r2, [r3, #0]
 800d314:	f3bf 8f4f 	dsb	sy
 800d318:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800d31c:	f001 fe26 	bl	800ef6c <uxTaskResetEventItemValue>
 800d320:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800d322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d11a      	bne.n	800d362 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 800d32c:	f002 fb16 	bl	800f95c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800d330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800d336:	683a      	ldr	r2, [r7, #0]
 800d338:	68b9      	ldr	r1, [r7, #8]
 800d33a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d33c:	f000 f92c 	bl	800d598 <prvTestWaitCondition>
 800d340:	4603      	mov	r3, r0
 800d342:	2b00      	cmp	r3, #0
 800d344:	d009      	beq.n	800d35a <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d006      	beq.n	800d35a <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	43db      	mvns	r3, r3
 800d354:	401a      	ands	r2, r3
 800d356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d358:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800d35a:	2301      	movs	r3, #1
 800d35c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800d35e:	f002 fb2b 	bl	800f9b8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d364:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d368:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800d36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3740      	adds	r7, #64	; 0x40
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	e000ed04 	.word	0xe000ed04

0800d378 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b086      	sub	sp, #24
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d109      	bne.n	800d3a0 <xEventGroupClearBits+0x28>
 800d38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d390:	f383 8811 	msr	BASEPRI, r3
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	f3bf 8f4f 	dsb	sy
 800d39c:	60fb      	str	r3, [r7, #12]
 800d39e:	e7fe      	b.n	800d39e <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d009      	beq.n	800d3be <xEventGroupClearBits+0x46>
 800d3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ae:	f383 8811 	msr	BASEPRI, r3
 800d3b2:	f3bf 8f6f 	isb	sy
 800d3b6:	f3bf 8f4f 	dsb	sy
 800d3ba:	60bb      	str	r3, [r7, #8]
 800d3bc:	e7fe      	b.n	800d3bc <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 800d3be:	f002 facd 	bl	800f95c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	43db      	mvns	r3, r3
 800d3d0:	401a      	ands	r2, r3
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800d3d6:	f002 faef 	bl	800f9b8 <vPortExitCritical>

	return uxReturn;
 800d3da:	693b      	ldr	r3, [r7, #16]
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3718      	adds	r7, #24
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	683a      	ldr	r2, [r7, #0]
 800d3f2:	6879      	ldr	r1, [r7, #4]
 800d3f4:	4804      	ldr	r0, [pc, #16]	; (800d408 <xEventGroupClearBitsFromISR+0x24>)
 800d3f6:	f002 f96b 	bl	800f6d0 <xTimerPendFunctionCallFromISR>
 800d3fa:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
	}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3710      	adds	r7, #16
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
 800d406:	bf00      	nop
 800d408:	0800d57f 	.word	0x0800d57f

0800d40c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800d40c:	b480      	push	{r7}
 800d40e:	b089      	sub	sp, #36	; 0x24
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d418:	f3ef 8211 	mrs	r2, BASEPRI
 800d41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d420:	f383 8811 	msr	BASEPRI, r3
 800d424:	f3bf 8f6f 	isb	sy
 800d428:	f3bf 8f4f 	dsb	sy
 800d42c:	60fa      	str	r2, [r7, #12]
 800d42e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d430:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d432:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	617b      	str	r3, [r7, #20]
 800d43a:	69bb      	ldr	r3, [r7, #24]
 800d43c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	f383 8811 	msr	BASEPRI, r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800d444:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800d446:	4618      	mov	r0, r3
 800d448:	3724      	adds	r7, #36	; 0x24
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr

0800d452 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b08e      	sub	sp, #56	; 0x38
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
 800d45a:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800d45c:	2300      	movs	r3, #0
 800d45e:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800d464:	2300      	movs	r3, #0
 800d466:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d109      	bne.n	800d482 <xEventGroupSetBits+0x30>
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d472:	f383 8811 	msr	BASEPRI, r3
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	613b      	str	r3, [r7, #16]
 800d480:	e7fe      	b.n	800d480 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d009      	beq.n	800d4a0 <xEventGroupSetBits+0x4e>
 800d48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d490:	f383 8811 	msr	BASEPRI, r3
 800d494:	f3bf 8f6f 	isb	sy
 800d498:	f3bf 8f4f 	dsb	sy
 800d49c:	60fb      	str	r3, [r7, #12]
 800d49e:	e7fe      	b.n	800d49e <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800d4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a2:	3304      	adds	r3, #4
 800d4a4:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a8:	3308      	adds	r3, #8
 800d4aa:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800d4ac:	f001 f868 	bl	800e580 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800d4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800d4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	431a      	orrs	r2, r3
 800d4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c0:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800d4c2:	e03c      	b.n	800d53e <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 800d4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800d4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800d4d4:	69bb      	ldr	r3, [r7, #24]
 800d4d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d4da:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d4dc:	69bb      	ldr	r3, [r7, #24]
 800d4de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d4e2:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d108      	bne.n	800d500 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800d4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	4013      	ands	r3, r2
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00b      	beq.n	800d512 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4fe:	e008      	b.n	800d512 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800d500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	69bb      	ldr	r3, [r7, #24]
 800d506:	4013      	ands	r3, r2
 800d508:	69ba      	ldr	r2, [r7, #24]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d101      	bne.n	800d512 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800d50e:	2301      	movs	r3, #1
 800d510:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800d512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d514:	2b00      	cmp	r3, #0
 800d516:	d010      	beq.n	800d53a <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d003      	beq.n	800d52a <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800d522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	4313      	orrs	r3, r2
 800d528:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800d52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d532:	4619      	mov	r1, r3
 800d534:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d536:	f001 fadb 	bl	800eaf0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800d53a:	69fb      	ldr	r3, [r7, #28]
 800d53c:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800d53e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d540:	6a3b      	ldr	r3, [r7, #32]
 800d542:	429a      	cmp	r2, r3
 800d544:	d1be      	bne.n	800d4c4 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800d546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54c:	43db      	mvns	r3, r3
 800d54e:	401a      	ands	r2, r3
 800d550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d552:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800d554:	f001 f822 	bl	800e59c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800d558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55a:	681b      	ldr	r3, [r3, #0]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3738      	adds	r7, #56	; 0x38
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800d56e:	6839      	ldr	r1, [r7, #0]
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f7ff ff6e 	bl	800d452 <xEventGroupSetBits>
}
 800d576:	bf00      	nop
 800d578:	3708      	adds	r7, #8
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800d57e:	b580      	push	{r7, lr}
 800d580:	b082      	sub	sp, #8
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
 800d586:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800d588:	6839      	ldr	r1, [r7, #0]
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f7ff fef4 	bl	800d378 <xEventGroupClearBits>
}
 800d590:	bf00      	nop
 800d592:	3708      	adds	r7, #8
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800d598:	b480      	push	{r7}
 800d59a:	b087      	sub	sp, #28
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	60b9      	str	r1, [r7, #8]
 800d5a2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d107      	bne.n	800d5be <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800d5ae:	68fa      	ldr	r2, [r7, #12]
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	4013      	ands	r3, r2
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00a      	beq.n	800d5ce <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	617b      	str	r3, [r7, #20]
 800d5bc:	e007      	b.n	800d5ce <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800d5be:	68fa      	ldr	r2, [r7, #12]
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	4013      	ands	r3, r2
 800d5c4:	68ba      	ldr	r2, [r7, #8]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d101      	bne.n	800d5ce <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800d5ce:	697b      	ldr	r3, [r7, #20]
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	371c      	adds	r7, #28
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b086      	sub	sp, #24
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	68ba      	ldr	r2, [r7, #8]
 800d5ec:	68f9      	ldr	r1, [r7, #12]
 800d5ee:	4804      	ldr	r0, [pc, #16]	; (800d600 <xEventGroupSetBitsFromISR+0x24>)
 800d5f0:	f002 f86e 	bl	800f6d0 <xTimerPendFunctionCallFromISR>
 800d5f4:	6178      	str	r0, [r7, #20]

		return xReturn;
 800d5f6:	697b      	ldr	r3, [r7, #20]
	}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3718      	adds	r7, #24
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	0800d565 	.word	0x0800d565

0800d604 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f103 0208 	add.w	r2, r3, #8
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f04f 32ff 	mov.w	r2, #4294967295
 800d61c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f103 0208 	add.w	r2, r3, #8
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f103 0208 	add.w	r2, r3, #8
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2200      	movs	r2, #0
 800d636:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d638:	bf00      	nop
 800d63a:	370c      	adds	r7, #12
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d644:	b480      	push	{r7}
 800d646:	b083      	sub	sp, #12
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d652:	bf00      	nop
 800d654:	370c      	adds	r7, #12
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr

0800d65e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d65e:	b480      	push	{r7}
 800d660:	b085      	sub	sp, #20
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
 800d666:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	68fa      	ldr	r2, [r7, #12]
 800d672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	689a      	ldr	r2, [r3, #8]
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	683a      	ldr	r2, [r7, #0]
 800d682:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	683a      	ldr	r2, [r7, #0]
 800d688:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	1c5a      	adds	r2, r3, #1
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	601a      	str	r2, [r3, #0]
}
 800d69a:	bf00      	nop
 800d69c:	3714      	adds	r7, #20
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a4:	4770      	bx	lr

0800d6a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d6a6:	b480      	push	{r7}
 800d6a8:	b085      	sub	sp, #20
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
 800d6ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6bc:	d103      	bne.n	800d6c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	691b      	ldr	r3, [r3, #16]
 800d6c2:	60fb      	str	r3, [r7, #12]
 800d6c4:	e00c      	b.n	800d6e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	3308      	adds	r3, #8
 800d6ca:	60fb      	str	r3, [r7, #12]
 800d6cc:	e002      	b.n	800d6d4 <vListInsert+0x2e>
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	60fb      	str	r3, [r7, #12]
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	68ba      	ldr	r2, [r7, #8]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d2f6      	bcs.n	800d6ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	685a      	ldr	r2, [r3, #4]
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	683a      	ldr	r2, [r7, #0]
 800d6ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	68fa      	ldr	r2, [r7, #12]
 800d6f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	683a      	ldr	r2, [r7, #0]
 800d6fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	1c5a      	adds	r2, r3, #1
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	601a      	str	r2, [r3, #0]
}
 800d70c:	bf00      	nop
 800d70e:	3714      	adds	r7, #20
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr

0800d718 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d718:	b480      	push	{r7}
 800d71a:	b085      	sub	sp, #20
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	691b      	ldr	r3, [r3, #16]
 800d724:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	6892      	ldr	r2, [r2, #8]
 800d72e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	689b      	ldr	r3, [r3, #8]
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	6852      	ldr	r2, [r2, #4]
 800d738:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	429a      	cmp	r2, r3
 800d742:	d103      	bne.n	800d74c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	689a      	ldr	r2, [r3, #8]
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2200      	movs	r2, #0
 800d750:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	1e5a      	subs	r2, r3, #1
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
}
 800d760:	4618      	mov	r0, r3
 800d762:	3714      	adds	r7, #20
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr

0800d76c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d109      	bne.n	800d794 <xQueueGenericReset+0x28>
 800d780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d784:	f383 8811 	msr	BASEPRI, r3
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	60bb      	str	r3, [r7, #8]
 800d792:	e7fe      	b.n	800d792 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800d794:	f002 f8e2 	bl	800f95c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7a0:	68f9      	ldr	r1, [r7, #12]
 800d7a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d7a4:	fb01 f303 	mul.w	r3, r1, r3
 800d7a8:	441a      	add	r2, r3
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681a      	ldr	r2, [r3, #0]
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7c4:	3b01      	subs	r3, #1
 800d7c6:	68f9      	ldr	r1, [r7, #12]
 800d7c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d7ca:	fb01 f303 	mul.w	r3, r1, r3
 800d7ce:	441a      	add	r2, r3
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	22ff      	movs	r2, #255	; 0xff
 800d7d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	22ff      	movs	r2, #255	; 0xff
 800d7e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d114      	bne.n	800d814 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	691b      	ldr	r3, [r3, #16]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d01a      	beq.n	800d828 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	3310      	adds	r3, #16
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f001 f918 	bl	800ea2c <xTaskRemoveFromEventList>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d012      	beq.n	800d828 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d802:	4b0d      	ldr	r3, [pc, #52]	; (800d838 <xQueueGenericReset+0xcc>)
 800d804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d808:	601a      	str	r2, [r3, #0]
 800d80a:	f3bf 8f4f 	dsb	sy
 800d80e:	f3bf 8f6f 	isb	sy
 800d812:	e009      	b.n	800d828 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	3310      	adds	r3, #16
 800d818:	4618      	mov	r0, r3
 800d81a:	f7ff fef3 	bl	800d604 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	3324      	adds	r3, #36	; 0x24
 800d822:	4618      	mov	r0, r3
 800d824:	f7ff feee 	bl	800d604 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d828:	f002 f8c6 	bl	800f9b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d82c:	2301      	movs	r3, #1
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	e000ed04 	.word	0xe000ed04

0800d83c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b08e      	sub	sp, #56	; 0x38
 800d840:	af02      	add	r7, sp, #8
 800d842:	60f8      	str	r0, [r7, #12]
 800d844:	60b9      	str	r1, [r7, #8]
 800d846:	607a      	str	r2, [r7, #4]
 800d848:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d109      	bne.n	800d864 <xQueueGenericCreateStatic+0x28>
 800d850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d854:	f383 8811 	msr	BASEPRI, r3
 800d858:	f3bf 8f6f 	isb	sy
 800d85c:	f3bf 8f4f 	dsb	sy
 800d860:	62bb      	str	r3, [r7, #40]	; 0x28
 800d862:	e7fe      	b.n	800d862 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d109      	bne.n	800d87e <xQueueGenericCreateStatic+0x42>
 800d86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86e:	f383 8811 	msr	BASEPRI, r3
 800d872:	f3bf 8f6f 	isb	sy
 800d876:	f3bf 8f4f 	dsb	sy
 800d87a:	627b      	str	r3, [r7, #36]	; 0x24
 800d87c:	e7fe      	b.n	800d87c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d002      	beq.n	800d88a <xQueueGenericCreateStatic+0x4e>
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d001      	beq.n	800d88e <xQueueGenericCreateStatic+0x52>
 800d88a:	2301      	movs	r3, #1
 800d88c:	e000      	b.n	800d890 <xQueueGenericCreateStatic+0x54>
 800d88e:	2300      	movs	r3, #0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d109      	bne.n	800d8a8 <xQueueGenericCreateStatic+0x6c>
 800d894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d898:	f383 8811 	msr	BASEPRI, r3
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	623b      	str	r3, [r7, #32]
 800d8a6:	e7fe      	b.n	800d8a6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d102      	bne.n	800d8b4 <xQueueGenericCreateStatic+0x78>
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d101      	bne.n	800d8b8 <xQueueGenericCreateStatic+0x7c>
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e000      	b.n	800d8ba <xQueueGenericCreateStatic+0x7e>
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d109      	bne.n	800d8d2 <xQueueGenericCreateStatic+0x96>
 800d8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c2:	f383 8811 	msr	BASEPRI, r3
 800d8c6:	f3bf 8f6f 	isb	sy
 800d8ca:	f3bf 8f4f 	dsb	sy
 800d8ce:	61fb      	str	r3, [r7, #28]
 800d8d0:	e7fe      	b.n	800d8d0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d8d2:	2350      	movs	r3, #80	; 0x50
 800d8d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	2b50      	cmp	r3, #80	; 0x50
 800d8da:	d009      	beq.n	800d8f0 <xQueueGenericCreateStatic+0xb4>
 800d8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e0:	f383 8811 	msr	BASEPRI, r3
 800d8e4:	f3bf 8f6f 	isb	sy
 800d8e8:	f3bf 8f4f 	dsb	sy
 800d8ec:	61bb      	str	r3, [r7, #24]
 800d8ee:	e7fe      	b.n	800d8ee <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d8f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00d      	beq.n	800d918 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d904:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90a:	9300      	str	r3, [sp, #0]
 800d90c:	4613      	mov	r3, r2
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	68b9      	ldr	r1, [r7, #8]
 800d912:	68f8      	ldr	r0, [r7, #12]
 800d914:	f000 f805 	bl	800d922 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3730      	adds	r7, #48	; 0x30
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}

0800d922 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d922:	b580      	push	{r7, lr}
 800d924:	b084      	sub	sp, #16
 800d926:	af00      	add	r7, sp, #0
 800d928:	60f8      	str	r0, [r7, #12]
 800d92a:	60b9      	str	r1, [r7, #8]
 800d92c:	607a      	str	r2, [r7, #4]
 800d92e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d103      	bne.n	800d93e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d936:	69bb      	ldr	r3, [r7, #24]
 800d938:	69ba      	ldr	r2, [r7, #24]
 800d93a:	601a      	str	r2, [r3, #0]
 800d93c:	e002      	b.n	800d944 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d944:	69bb      	ldr	r3, [r7, #24]
 800d946:	68fa      	ldr	r2, [r7, #12]
 800d948:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	68ba      	ldr	r2, [r7, #8]
 800d94e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d950:	2101      	movs	r1, #1
 800d952:	69b8      	ldr	r0, [r7, #24]
 800d954:	f7ff ff0a 	bl	800d76c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	78fa      	ldrb	r2, [r7, #3]
 800d95c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d960:	bf00      	nop
 800d962:	3710      	adds	r7, #16
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b08e      	sub	sp, #56	; 0x38
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
 800d974:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d976:	2300      	movs	r3, #0
 800d978:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d980:	2b00      	cmp	r3, #0
 800d982:	d109      	bne.n	800d998 <xQueueGenericSend+0x30>
 800d984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d988:	f383 8811 	msr	BASEPRI, r3
 800d98c:	f3bf 8f6f 	isb	sy
 800d990:	f3bf 8f4f 	dsb	sy
 800d994:	62bb      	str	r3, [r7, #40]	; 0x28
 800d996:	e7fe      	b.n	800d996 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d103      	bne.n	800d9a6 <xQueueGenericSend+0x3e>
 800d99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d101      	bne.n	800d9aa <xQueueGenericSend+0x42>
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	e000      	b.n	800d9ac <xQueueGenericSend+0x44>
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d109      	bne.n	800d9c4 <xQueueGenericSend+0x5c>
 800d9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b4:	f383 8811 	msr	BASEPRI, r3
 800d9b8:	f3bf 8f6f 	isb	sy
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	627b      	str	r3, [r7, #36]	; 0x24
 800d9c2:	e7fe      	b.n	800d9c2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	2b02      	cmp	r3, #2
 800d9c8:	d103      	bne.n	800d9d2 <xQueueGenericSend+0x6a>
 800d9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	d101      	bne.n	800d9d6 <xQueueGenericSend+0x6e>
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e000      	b.n	800d9d8 <xQueueGenericSend+0x70>
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d109      	bne.n	800d9f0 <xQueueGenericSend+0x88>
 800d9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e0:	f383 8811 	msr	BASEPRI, r3
 800d9e4:	f3bf 8f6f 	isb	sy
 800d9e8:	f3bf 8f4f 	dsb	sy
 800d9ec:	623b      	str	r3, [r7, #32]
 800d9ee:	e7fe      	b.n	800d9ee <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9f0:	f001 fa32 	bl	800ee58 <xTaskGetSchedulerState>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d102      	bne.n	800da00 <xQueueGenericSend+0x98>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d101      	bne.n	800da04 <xQueueGenericSend+0x9c>
 800da00:	2301      	movs	r3, #1
 800da02:	e000      	b.n	800da06 <xQueueGenericSend+0x9e>
 800da04:	2300      	movs	r3, #0
 800da06:	2b00      	cmp	r3, #0
 800da08:	d109      	bne.n	800da1e <xQueueGenericSend+0xb6>
 800da0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0e:	f383 8811 	msr	BASEPRI, r3
 800da12:	f3bf 8f6f 	isb	sy
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	61fb      	str	r3, [r7, #28]
 800da1c:	e7fe      	b.n	800da1c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da1e:	f001 ff9d 	bl	800f95c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800da22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d302      	bcc.n	800da34 <xQueueGenericSend+0xcc>
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	2b02      	cmp	r3, #2
 800da32:	d129      	bne.n	800da88 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800da34:	683a      	ldr	r2, [r7, #0]
 800da36:	68b9      	ldr	r1, [r7, #8]
 800da38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da3a:	f000 f9ff 	bl	800de3c <prvCopyDataToQueue>
 800da3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da44:	2b00      	cmp	r3, #0
 800da46:	d010      	beq.n	800da6a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4a:	3324      	adds	r3, #36	; 0x24
 800da4c:	4618      	mov	r0, r3
 800da4e:	f000 ffed 	bl	800ea2c <xTaskRemoveFromEventList>
 800da52:	4603      	mov	r3, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	d013      	beq.n	800da80 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800da58:	4b3f      	ldr	r3, [pc, #252]	; (800db58 <xQueueGenericSend+0x1f0>)
 800da5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da5e:	601a      	str	r2, [r3, #0]
 800da60:	f3bf 8f4f 	dsb	sy
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	e00a      	b.n	800da80 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800da6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d007      	beq.n	800da80 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800da70:	4b39      	ldr	r3, [pc, #228]	; (800db58 <xQueueGenericSend+0x1f0>)
 800da72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da76:	601a      	str	r2, [r3, #0]
 800da78:	f3bf 8f4f 	dsb	sy
 800da7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800da80:	f001 ff9a 	bl	800f9b8 <vPortExitCritical>
				return pdPASS;
 800da84:	2301      	movs	r3, #1
 800da86:	e063      	b.n	800db50 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d103      	bne.n	800da96 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da8e:	f001 ff93 	bl	800f9b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800da92:	2300      	movs	r3, #0
 800da94:	e05c      	b.n	800db50 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d106      	bne.n	800daaa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da9c:	f107 0314 	add.w	r3, r7, #20
 800daa0:	4618      	mov	r0, r3
 800daa2:	f001 f885 	bl	800ebb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800daa6:	2301      	movs	r3, #1
 800daa8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800daaa:	f001 ff85 	bl	800f9b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800daae:	f000 fd67 	bl	800e580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dab2:	f001 ff53 	bl	800f95c <vPortEnterCritical>
 800dab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dabc:	b25b      	sxtb	r3, r3
 800dabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dac2:	d103      	bne.n	800dacc <xQueueGenericSend+0x164>
 800dac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac6:	2200      	movs	r2, #0
 800dac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dad2:	b25b      	sxtb	r3, r3
 800dad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dad8:	d103      	bne.n	800dae2 <xQueueGenericSend+0x17a>
 800dada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dadc:	2200      	movs	r2, #0
 800dade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dae2:	f001 ff69 	bl	800f9b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dae6:	1d3a      	adds	r2, r7, #4
 800dae8:	f107 0314 	add.w	r3, r7, #20
 800daec:	4611      	mov	r1, r2
 800daee:	4618      	mov	r0, r3
 800daf0:	f001 f874 	bl	800ebdc <xTaskCheckForTimeOut>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d124      	bne.n	800db44 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dafa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dafc:	f000 fa96 	bl	800e02c <prvIsQueueFull>
 800db00:	4603      	mov	r3, r0
 800db02:	2b00      	cmp	r3, #0
 800db04:	d018      	beq.n	800db38 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800db06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db08:	3310      	adds	r3, #16
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	4611      	mov	r1, r2
 800db0e:	4618      	mov	r0, r3
 800db10:	f000 ff04 	bl	800e91c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800db14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db16:	f000 fa21 	bl	800df5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800db1a:	f000 fd3f 	bl	800e59c <xTaskResumeAll>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	f47f af7c 	bne.w	800da1e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800db26:	4b0c      	ldr	r3, [pc, #48]	; (800db58 <xQueueGenericSend+0x1f0>)
 800db28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db2c:	601a      	str	r2, [r3, #0]
 800db2e:	f3bf 8f4f 	dsb	sy
 800db32:	f3bf 8f6f 	isb	sy
 800db36:	e772      	b.n	800da1e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800db38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db3a:	f000 fa0f 	bl	800df5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db3e:	f000 fd2d 	bl	800e59c <xTaskResumeAll>
 800db42:	e76c      	b.n	800da1e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800db44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db46:	f000 fa09 	bl	800df5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db4a:	f000 fd27 	bl	800e59c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800db4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800db50:	4618      	mov	r0, r3
 800db52:	3738      	adds	r7, #56	; 0x38
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	e000ed04 	.word	0xe000ed04

0800db5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b08e      	sub	sp, #56	; 0x38
 800db60:	af00      	add	r7, sp, #0
 800db62:	60f8      	str	r0, [r7, #12]
 800db64:	60b9      	str	r1, [r7, #8]
 800db66:	607a      	str	r2, [r7, #4]
 800db68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800db6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db70:	2b00      	cmp	r3, #0
 800db72:	d109      	bne.n	800db88 <xQueueGenericSendFromISR+0x2c>
 800db74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db78:	f383 8811 	msr	BASEPRI, r3
 800db7c:	f3bf 8f6f 	isb	sy
 800db80:	f3bf 8f4f 	dsb	sy
 800db84:	627b      	str	r3, [r7, #36]	; 0x24
 800db86:	e7fe      	b.n	800db86 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d103      	bne.n	800db96 <xQueueGenericSendFromISR+0x3a>
 800db8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db92:	2b00      	cmp	r3, #0
 800db94:	d101      	bne.n	800db9a <xQueueGenericSendFromISR+0x3e>
 800db96:	2301      	movs	r3, #1
 800db98:	e000      	b.n	800db9c <xQueueGenericSendFromISR+0x40>
 800db9a:	2300      	movs	r3, #0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d109      	bne.n	800dbb4 <xQueueGenericSendFromISR+0x58>
 800dba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba4:	f383 8811 	msr	BASEPRI, r3
 800dba8:	f3bf 8f6f 	isb	sy
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	623b      	str	r3, [r7, #32]
 800dbb2:	e7fe      	b.n	800dbb2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	2b02      	cmp	r3, #2
 800dbb8:	d103      	bne.n	800dbc2 <xQueueGenericSendFromISR+0x66>
 800dbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d101      	bne.n	800dbc6 <xQueueGenericSendFromISR+0x6a>
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	e000      	b.n	800dbc8 <xQueueGenericSendFromISR+0x6c>
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d109      	bne.n	800dbe0 <xQueueGenericSendFromISR+0x84>
 800dbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd0:	f383 8811 	msr	BASEPRI, r3
 800dbd4:	f3bf 8f6f 	isb	sy
 800dbd8:	f3bf 8f4f 	dsb	sy
 800dbdc:	61fb      	str	r3, [r7, #28]
 800dbde:	e7fe      	b.n	800dbde <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dbe0:	f001 ff98 	bl	800fb14 <vPortValidateInterruptPriority>
	__asm volatile
 800dbe4:	f3ef 8211 	mrs	r2, BASEPRI
 800dbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbec:	f383 8811 	msr	BASEPRI, r3
 800dbf0:	f3bf 8f6f 	isb	sy
 800dbf4:	f3bf 8f4f 	dsb	sy
 800dbf8:	61ba      	str	r2, [r7, #24]
 800dbfa:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dbfc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dbfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d302      	bcc.n	800dc12 <xQueueGenericSendFromISR+0xb6>
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d12c      	bne.n	800dc6c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dc1c:	683a      	ldr	r2, [r7, #0]
 800dc1e:	68b9      	ldr	r1, [r7, #8]
 800dc20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc22:	f000 f90b 	bl	800de3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dc26:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800dc2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc2e:	d112      	bne.n	800dc56 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d016      	beq.n	800dc66 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3a:	3324      	adds	r3, #36	; 0x24
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f000 fef5 	bl	800ea2c <xTaskRemoveFromEventList>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d00e      	beq.n	800dc66 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d00b      	beq.n	800dc66 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2201      	movs	r2, #1
 800dc52:	601a      	str	r2, [r3, #0]
 800dc54:	e007      	b.n	800dc66 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dc56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	b25a      	sxtb	r2, r3
 800dc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dc66:	2301      	movs	r3, #1
 800dc68:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800dc6a:	e001      	b.n	800dc70 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	637b      	str	r3, [r7, #52]	; 0x34
 800dc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc72:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3738      	adds	r7, #56	; 0x38
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b08c      	sub	sp, #48	; 0x30
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dc90:	2300      	movs	r3, #0
 800dc92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d109      	bne.n	800dcb2 <xQueueReceive+0x2e>
	__asm volatile
 800dc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca2:	f383 8811 	msr	BASEPRI, r3
 800dca6:	f3bf 8f6f 	isb	sy
 800dcaa:	f3bf 8f4f 	dsb	sy
 800dcae:	623b      	str	r3, [r7, #32]
 800dcb0:	e7fe      	b.n	800dcb0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d103      	bne.n	800dcc0 <xQueueReceive+0x3c>
 800dcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d101      	bne.n	800dcc4 <xQueueReceive+0x40>
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	e000      	b.n	800dcc6 <xQueueReceive+0x42>
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d109      	bne.n	800dcde <xQueueReceive+0x5a>
 800dcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcce:	f383 8811 	msr	BASEPRI, r3
 800dcd2:	f3bf 8f6f 	isb	sy
 800dcd6:	f3bf 8f4f 	dsb	sy
 800dcda:	61fb      	str	r3, [r7, #28]
 800dcdc:	e7fe      	b.n	800dcdc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dcde:	f001 f8bb 	bl	800ee58 <xTaskGetSchedulerState>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d102      	bne.n	800dcee <xQueueReceive+0x6a>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d101      	bne.n	800dcf2 <xQueueReceive+0x6e>
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e000      	b.n	800dcf4 <xQueueReceive+0x70>
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d109      	bne.n	800dd0c <xQueueReceive+0x88>
 800dcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfc:	f383 8811 	msr	BASEPRI, r3
 800dd00:	f3bf 8f6f 	isb	sy
 800dd04:	f3bf 8f4f 	dsb	sy
 800dd08:	61bb      	str	r3, [r7, #24]
 800dd0a:	e7fe      	b.n	800dd0a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd0c:	f001 fe26 	bl	800f95c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd14:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d01f      	beq.n	800dd5c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd1c:	68b9      	ldr	r1, [r7, #8]
 800dd1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd20:	f000 f8f6 	bl	800df10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd26:	1e5a      	subs	r2, r3, #1
 800dd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2e:	691b      	ldr	r3, [r3, #16]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d00f      	beq.n	800dd54 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd36:	3310      	adds	r3, #16
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f000 fe77 	bl	800ea2c <xTaskRemoveFromEventList>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d007      	beq.n	800dd54 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dd44:	4b3c      	ldr	r3, [pc, #240]	; (800de38 <xQueueReceive+0x1b4>)
 800dd46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd4a:	601a      	str	r2, [r3, #0]
 800dd4c:	f3bf 8f4f 	dsb	sy
 800dd50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dd54:	f001 fe30 	bl	800f9b8 <vPortExitCritical>
				return pdPASS;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	e069      	b.n	800de30 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d103      	bne.n	800dd6a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dd62:	f001 fe29 	bl	800f9b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dd66:	2300      	movs	r3, #0
 800dd68:	e062      	b.n	800de30 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d106      	bne.n	800dd7e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd70:	f107 0310 	add.w	r3, r7, #16
 800dd74:	4618      	mov	r0, r3
 800dd76:	f000 ff1b 	bl	800ebb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dd7e:	f001 fe1b 	bl	800f9b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dd82:	f000 fbfd 	bl	800e580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd86:	f001 fde9 	bl	800f95c <vPortEnterCritical>
 800dd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd90:	b25b      	sxtb	r3, r3
 800dd92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd96:	d103      	bne.n	800dda0 <xQueueReceive+0x11c>
 800dd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dda6:	b25b      	sxtb	r3, r3
 800dda8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddac:	d103      	bne.n	800ddb6 <xQueueReceive+0x132>
 800ddae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ddb6:	f001 fdff 	bl	800f9b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ddba:	1d3a      	adds	r2, r7, #4
 800ddbc:	f107 0310 	add.w	r3, r7, #16
 800ddc0:	4611      	mov	r1, r2
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f000 ff0a 	bl	800ebdc <xTaskCheckForTimeOut>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d123      	bne.n	800de16 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ddce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddd0:	f000 f916 	bl	800e000 <prvIsQueueEmpty>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d017      	beq.n	800de0a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ddda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dddc:	3324      	adds	r3, #36	; 0x24
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	4611      	mov	r1, r2
 800dde2:	4618      	mov	r0, r3
 800dde4:	f000 fd9a 	bl	800e91c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dde8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddea:	f000 f8b7 	bl	800df5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ddee:	f000 fbd5 	bl	800e59c <xTaskResumeAll>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d189      	bne.n	800dd0c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800ddf8:	4b0f      	ldr	r3, [pc, #60]	; (800de38 <xQueueReceive+0x1b4>)
 800ddfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddfe:	601a      	str	r2, [r3, #0]
 800de00:	f3bf 8f4f 	dsb	sy
 800de04:	f3bf 8f6f 	isb	sy
 800de08:	e780      	b.n	800dd0c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800de0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de0c:	f000 f8a6 	bl	800df5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de10:	f000 fbc4 	bl	800e59c <xTaskResumeAll>
 800de14:	e77a      	b.n	800dd0c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800de16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de18:	f000 f8a0 	bl	800df5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de1c:	f000 fbbe 	bl	800e59c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de22:	f000 f8ed 	bl	800e000 <prvIsQueueEmpty>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	f43f af6f 	beq.w	800dd0c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800de2e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800de30:	4618      	mov	r0, r3
 800de32:	3730      	adds	r7, #48	; 0x30
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	e000ed04 	.word	0xe000ed04

0800de3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b086      	sub	sp, #24
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800de48:	2300      	movs	r3, #0
 800de4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de56:	2b00      	cmp	r3, #0
 800de58:	d10d      	bne.n	800de76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d14d      	bne.n	800defe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	689b      	ldr	r3, [r3, #8]
 800de66:	4618      	mov	r0, r3
 800de68:	f001 f814 	bl	800ee94 <xTaskPriorityDisinherit>
 800de6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	2200      	movs	r2, #0
 800de72:	609a      	str	r2, [r3, #8]
 800de74:	e043      	b.n	800defe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d119      	bne.n	800deb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	6858      	ldr	r0, [r3, #4]
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de84:	461a      	mov	r2, r3
 800de86:	68b9      	ldr	r1, [r7, #8]
 800de88:	f002 f89a 	bl	800ffc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	685a      	ldr	r2, [r3, #4]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de94:	441a      	add	r2, r3
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	685a      	ldr	r2, [r3, #4]
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	689b      	ldr	r3, [r3, #8]
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d32b      	bcc.n	800defe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	605a      	str	r2, [r3, #4]
 800deae:	e026      	b.n	800defe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	68d8      	ldr	r0, [r3, #12]
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb8:	461a      	mov	r2, r3
 800deba:	68b9      	ldr	r1, [r7, #8]
 800debc:	f002 f880 	bl	800ffc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	68da      	ldr	r2, [r3, #12]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec8:	425b      	negs	r3, r3
 800deca:	441a      	add	r2, r3
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	68da      	ldr	r2, [r3, #12]
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d207      	bcs.n	800deec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	689a      	ldr	r2, [r3, #8]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dee4:	425b      	negs	r3, r3
 800dee6:	441a      	add	r2, r3
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2b02      	cmp	r3, #2
 800def0:	d105      	bne.n	800defe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d002      	beq.n	800defe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	3b01      	subs	r3, #1
 800defc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	1c5a      	adds	r2, r3, #1
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800df06:	697b      	ldr	r3, [r7, #20]
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3718      	adds	r7, #24
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d018      	beq.n	800df54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	68da      	ldr	r2, [r3, #12]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df2a:	441a      	add	r2, r3
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	68da      	ldr	r2, [r3, #12]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	429a      	cmp	r2, r3
 800df3a:	d303      	bcc.n	800df44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	68d9      	ldr	r1, [r3, #12]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df4c:	461a      	mov	r2, r3
 800df4e:	6838      	ldr	r0, [r7, #0]
 800df50:	f002 f836 	bl	800ffc0 <memcpy>
	}
}
 800df54:	bf00      	nop
 800df56:	3708      	adds	r7, #8
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800df64:	f001 fcfa 	bl	800f95c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df70:	e011      	b.n	800df96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df76:	2b00      	cmp	r3, #0
 800df78:	d012      	beq.n	800dfa0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	3324      	adds	r3, #36	; 0x24
 800df7e:	4618      	mov	r0, r3
 800df80:	f000 fd54 	bl	800ea2c <xTaskRemoveFromEventList>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d001      	beq.n	800df8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800df8a:	f000 fe87 	bl	800ec9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800df8e:	7bfb      	ldrb	r3, [r7, #15]
 800df90:	3b01      	subs	r3, #1
 800df92:	b2db      	uxtb	r3, r3
 800df94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	dce9      	bgt.n	800df72 <prvUnlockQueue+0x16>
 800df9e:	e000      	b.n	800dfa2 <prvUnlockQueue+0x46>
					break;
 800dfa0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	22ff      	movs	r2, #255	; 0xff
 800dfa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dfaa:	f001 fd05 	bl	800f9b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dfae:	f001 fcd5 	bl	800f95c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dfba:	e011      	b.n	800dfe0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	691b      	ldr	r3, [r3, #16]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d012      	beq.n	800dfea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	3310      	adds	r3, #16
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f000 fd2f 	bl	800ea2c <xTaskRemoveFromEventList>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d001      	beq.n	800dfd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dfd4:	f000 fe62 	bl	800ec9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dfd8:	7bbb      	ldrb	r3, [r7, #14]
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dfe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	dce9      	bgt.n	800dfbc <prvUnlockQueue+0x60>
 800dfe8:	e000      	b.n	800dfec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dfea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	22ff      	movs	r2, #255	; 0xff
 800dff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dff4:	f001 fce0 	bl	800f9b8 <vPortExitCritical>
}
 800dff8:	bf00      	nop
 800dffa:	3710      	adds	r7, #16
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e008:	f001 fca8 	bl	800f95c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e010:	2b00      	cmp	r3, #0
 800e012:	d102      	bne.n	800e01a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e014:	2301      	movs	r3, #1
 800e016:	60fb      	str	r3, [r7, #12]
 800e018:	e001      	b.n	800e01e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e01a:	2300      	movs	r3, #0
 800e01c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e01e:	f001 fccb 	bl	800f9b8 <vPortExitCritical>

	return xReturn;
 800e022:	68fb      	ldr	r3, [r7, #12]
}
 800e024:	4618      	mov	r0, r3
 800e026:	3710      	adds	r7, #16
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e034:	f001 fc92 	bl	800f95c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e040:	429a      	cmp	r2, r3
 800e042:	d102      	bne.n	800e04a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e044:	2301      	movs	r3, #1
 800e046:	60fb      	str	r3, [r7, #12]
 800e048:	e001      	b.n	800e04e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e04a:	2300      	movs	r3, #0
 800e04c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e04e:	f001 fcb3 	bl	800f9b8 <vPortExitCritical>

	return xReturn;
 800e052:	68fb      	ldr	r3, [r7, #12]
}
 800e054:	4618      	mov	r0, r3
 800e056:	3710      	adds	r7, #16
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e05c:	b480      	push	{r7}
 800e05e:	b085      	sub	sp, #20
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e066:	2300      	movs	r3, #0
 800e068:	60fb      	str	r3, [r7, #12]
 800e06a:	e014      	b.n	800e096 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e06c:	4a0e      	ldr	r2, [pc, #56]	; (800e0a8 <vQueueAddToRegistry+0x4c>)
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d10b      	bne.n	800e090 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e078:	490b      	ldr	r1, [pc, #44]	; (800e0a8 <vQueueAddToRegistry+0x4c>)
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	683a      	ldr	r2, [r7, #0]
 800e07e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e082:	4a09      	ldr	r2, [pc, #36]	; (800e0a8 <vQueueAddToRegistry+0x4c>)
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	00db      	lsls	r3, r3, #3
 800e088:	4413      	add	r3, r2
 800e08a:	687a      	ldr	r2, [r7, #4]
 800e08c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e08e:	e005      	b.n	800e09c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	3301      	adds	r3, #1
 800e094:	60fb      	str	r3, [r7, #12]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2b07      	cmp	r3, #7
 800e09a:	d9e7      	bls.n	800e06c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e09c:	bf00      	nop
 800e09e:	3714      	adds	r7, #20
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr
 800e0a8:	200094e8 	.word	0x200094e8

0800e0ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b086      	sub	sp, #24
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	60b9      	str	r1, [r7, #8]
 800e0b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e0bc:	f001 fc4e 	bl	800f95c <vPortEnterCritical>
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0c6:	b25b      	sxtb	r3, r3
 800e0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0cc:	d103      	bne.n	800e0d6 <vQueueWaitForMessageRestricted+0x2a>
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e0dc:	b25b      	sxtb	r3, r3
 800e0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0e2:	d103      	bne.n	800e0ec <vQueueWaitForMessageRestricted+0x40>
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e0ec:	f001 fc64 	bl	800f9b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d106      	bne.n	800e106 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	3324      	adds	r3, #36	; 0x24
 800e0fc:	687a      	ldr	r2, [r7, #4]
 800e0fe:	68b9      	ldr	r1, [r7, #8]
 800e100:	4618      	mov	r0, r3
 800e102:	f000 fc69 	bl	800e9d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e106:	6978      	ldr	r0, [r7, #20]
 800e108:	f7ff ff28 	bl	800df5c <prvUnlockQueue>
	}
 800e10c:	bf00      	nop
 800e10e:	3718      	adds	r7, #24
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e114:	b580      	push	{r7, lr}
 800e116:	b08e      	sub	sp, #56	; 0x38
 800e118:	af04      	add	r7, sp, #16
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	607a      	str	r2, [r7, #4]
 800e120:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e124:	2b00      	cmp	r3, #0
 800e126:	d109      	bne.n	800e13c <xTaskCreateStatic+0x28>
 800e128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e12c:	f383 8811 	msr	BASEPRI, r3
 800e130:	f3bf 8f6f 	isb	sy
 800e134:	f3bf 8f4f 	dsb	sy
 800e138:	623b      	str	r3, [r7, #32]
 800e13a:	e7fe      	b.n	800e13a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800e13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d109      	bne.n	800e156 <xTaskCreateStatic+0x42>
 800e142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e146:	f383 8811 	msr	BASEPRI, r3
 800e14a:	f3bf 8f6f 	isb	sy
 800e14e:	f3bf 8f4f 	dsb	sy
 800e152:	61fb      	str	r3, [r7, #28]
 800e154:	e7fe      	b.n	800e154 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e156:	235c      	movs	r3, #92	; 0x5c
 800e158:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	2b5c      	cmp	r3, #92	; 0x5c
 800e15e:	d009      	beq.n	800e174 <xTaskCreateStatic+0x60>
 800e160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e164:	f383 8811 	msr	BASEPRI, r3
 800e168:	f3bf 8f6f 	isb	sy
 800e16c:	f3bf 8f4f 	dsb	sy
 800e170:	61bb      	str	r3, [r7, #24]
 800e172:	e7fe      	b.n	800e172 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e174:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d01e      	beq.n	800e1ba <xTaskCreateStatic+0xa6>
 800e17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d01b      	beq.n	800e1ba <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e184:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e18a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18e:	2202      	movs	r2, #2
 800e190:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e194:	2300      	movs	r3, #0
 800e196:	9303      	str	r3, [sp, #12]
 800e198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19a:	9302      	str	r3, [sp, #8]
 800e19c:	f107 0314 	add.w	r3, r7, #20
 800e1a0:	9301      	str	r3, [sp, #4]
 800e1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a4:	9300      	str	r3, [sp, #0]
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	68b9      	ldr	r1, [r7, #8]
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	f000 f850 	bl	800e252 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e1b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1b4:	f000 f8dc 	bl	800e370 <prvAddNewTaskToReadyList>
 800e1b8:	e001      	b.n	800e1be <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e1be:	697b      	ldr	r3, [r7, #20]
	}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3728      	adds	r7, #40	; 0x28
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b08c      	sub	sp, #48	; 0x30
 800e1cc:	af04      	add	r7, sp, #16
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	60b9      	str	r1, [r7, #8]
 800e1d2:	603b      	str	r3, [r7, #0]
 800e1d4:	4613      	mov	r3, r2
 800e1d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e1d8:	88fb      	ldrh	r3, [r7, #6]
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f001 fcd7 	bl	800fb90 <pvPortMalloc>
 800e1e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d00e      	beq.n	800e208 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e1ea:	205c      	movs	r0, #92	; 0x5c
 800e1ec:	f001 fcd0 	bl	800fb90 <pvPortMalloc>
 800e1f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d003      	beq.n	800e200 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	697a      	ldr	r2, [r7, #20]
 800e1fc:	631a      	str	r2, [r3, #48]	; 0x30
 800e1fe:	e005      	b.n	800e20c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e200:	6978      	ldr	r0, [r7, #20]
 800e202:	f001 fd87 	bl	800fd14 <vPortFree>
 800e206:	e001      	b.n	800e20c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e208:	2300      	movs	r3, #0
 800e20a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d017      	beq.n	800e242 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e212:	69fb      	ldr	r3, [r7, #28]
 800e214:	2200      	movs	r2, #0
 800e216:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e21a:	88fa      	ldrh	r2, [r7, #6]
 800e21c:	2300      	movs	r3, #0
 800e21e:	9303      	str	r3, [sp, #12]
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	9302      	str	r3, [sp, #8]
 800e224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e226:	9301      	str	r3, [sp, #4]
 800e228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e22a:	9300      	str	r3, [sp, #0]
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	68b9      	ldr	r1, [r7, #8]
 800e230:	68f8      	ldr	r0, [r7, #12]
 800e232:	f000 f80e 	bl	800e252 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e236:	69f8      	ldr	r0, [r7, #28]
 800e238:	f000 f89a 	bl	800e370 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e23c:	2301      	movs	r3, #1
 800e23e:	61bb      	str	r3, [r7, #24]
 800e240:	e002      	b.n	800e248 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e242:	f04f 33ff 	mov.w	r3, #4294967295
 800e246:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e248:	69bb      	ldr	r3, [r7, #24]
	}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3720      	adds	r7, #32
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}

0800e252 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e252:	b580      	push	{r7, lr}
 800e254:	b088      	sub	sp, #32
 800e256:	af00      	add	r7, sp, #0
 800e258:	60f8      	str	r0, [r7, #12]
 800e25a:	60b9      	str	r1, [r7, #8]
 800e25c:	607a      	str	r2, [r7, #4]
 800e25e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e262:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	461a      	mov	r2, r3
 800e26a:	21a5      	movs	r1, #165	; 0xa5
 800e26c:	f001 feb3 	bl	800ffd6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e27a:	3b01      	subs	r3, #1
 800e27c:	009b      	lsls	r3, r3, #2
 800e27e:	4413      	add	r3, r2
 800e280:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e282:	69bb      	ldr	r3, [r7, #24]
 800e284:	f023 0307 	bic.w	r3, r3, #7
 800e288:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e28a:	69bb      	ldr	r3, [r7, #24]
 800e28c:	f003 0307 	and.w	r3, r3, #7
 800e290:	2b00      	cmp	r3, #0
 800e292:	d009      	beq.n	800e2a8 <prvInitialiseNewTask+0x56>
 800e294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e298:	f383 8811 	msr	BASEPRI, r3
 800e29c:	f3bf 8f6f 	isb	sy
 800e2a0:	f3bf 8f4f 	dsb	sy
 800e2a4:	617b      	str	r3, [r7, #20]
 800e2a6:	e7fe      	b.n	800e2a6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d01f      	beq.n	800e2ee <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	61fb      	str	r3, [r7, #28]
 800e2b2:	e012      	b.n	800e2da <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e2b4:	68ba      	ldr	r2, [r7, #8]
 800e2b6:	69fb      	ldr	r3, [r7, #28]
 800e2b8:	4413      	add	r3, r2
 800e2ba:	7819      	ldrb	r1, [r3, #0]
 800e2bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	3334      	adds	r3, #52	; 0x34
 800e2c4:	460a      	mov	r2, r1
 800e2c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e2c8:	68ba      	ldr	r2, [r7, #8]
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d006      	beq.n	800e2e2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	61fb      	str	r3, [r7, #28]
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	2b0f      	cmp	r3, #15
 800e2de:	d9e9      	bls.n	800e2b4 <prvInitialiseNewTask+0x62>
 800e2e0:	e000      	b.n	800e2e4 <prvInitialiseNewTask+0x92>
			{
				break;
 800e2e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e2ec:	e003      	b.n	800e2f6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f8:	2b37      	cmp	r3, #55	; 0x37
 800e2fa:	d901      	bls.n	800e300 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e2fc:	2337      	movs	r3, #55	; 0x37
 800e2fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e304:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e30a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e30e:	2200      	movs	r2, #0
 800e310:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e314:	3304      	adds	r3, #4
 800e316:	4618      	mov	r0, r3
 800e318:	f7ff f994 	bl	800d644 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e31e:	3318      	adds	r3, #24
 800e320:	4618      	mov	r0, r3
 800e322:	f7ff f98f 	bl	800d644 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e32a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e334:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e33a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33e:	2200      	movs	r2, #0
 800e340:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e344:	2200      	movs	r2, #0
 800e346:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e34a:	683a      	ldr	r2, [r7, #0]
 800e34c:	68f9      	ldr	r1, [r7, #12]
 800e34e:	69b8      	ldr	r0, [r7, #24]
 800e350:	f001 f9de 	bl	800f710 <pxPortInitialiseStack>
 800e354:	4602      	mov	r2, r0
 800e356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e358:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d002      	beq.n	800e366 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e366:	bf00      	nop
 800e368:	3720      	adds	r7, #32
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
	...

0800e370 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b082      	sub	sp, #8
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e378:	f001 faf0 	bl	800f95c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e37c:	4b2d      	ldr	r3, [pc, #180]	; (800e434 <prvAddNewTaskToReadyList+0xc4>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	3301      	adds	r3, #1
 800e382:	4a2c      	ldr	r2, [pc, #176]	; (800e434 <prvAddNewTaskToReadyList+0xc4>)
 800e384:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e386:	4b2c      	ldr	r3, [pc, #176]	; (800e438 <prvAddNewTaskToReadyList+0xc8>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d109      	bne.n	800e3a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e38e:	4a2a      	ldr	r2, [pc, #168]	; (800e438 <prvAddNewTaskToReadyList+0xc8>)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e394:	4b27      	ldr	r3, [pc, #156]	; (800e434 <prvAddNewTaskToReadyList+0xc4>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d110      	bne.n	800e3be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e39c:	f000 fca2 	bl	800ece4 <prvInitialiseTaskLists>
 800e3a0:	e00d      	b.n	800e3be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e3a2:	4b26      	ldr	r3, [pc, #152]	; (800e43c <prvAddNewTaskToReadyList+0xcc>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d109      	bne.n	800e3be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e3aa:	4b23      	ldr	r3, [pc, #140]	; (800e438 <prvAddNewTaskToReadyList+0xc8>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d802      	bhi.n	800e3be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e3b8:	4a1f      	ldr	r2, [pc, #124]	; (800e438 <prvAddNewTaskToReadyList+0xc8>)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e3be:	4b20      	ldr	r3, [pc, #128]	; (800e440 <prvAddNewTaskToReadyList+0xd0>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	4a1e      	ldr	r2, [pc, #120]	; (800e440 <prvAddNewTaskToReadyList+0xd0>)
 800e3c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e3c8:	4b1d      	ldr	r3, [pc, #116]	; (800e440 <prvAddNewTaskToReadyList+0xd0>)
 800e3ca:	681a      	ldr	r2, [r3, #0]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3d4:	4b1b      	ldr	r3, [pc, #108]	; (800e444 <prvAddNewTaskToReadyList+0xd4>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d903      	bls.n	800e3e4 <prvAddNewTaskToReadyList+0x74>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e0:	4a18      	ldr	r2, [pc, #96]	; (800e444 <prvAddNewTaskToReadyList+0xd4>)
 800e3e2:	6013      	str	r3, [r2, #0]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3e8:	4613      	mov	r3, r2
 800e3ea:	009b      	lsls	r3, r3, #2
 800e3ec:	4413      	add	r3, r2
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	4a15      	ldr	r2, [pc, #84]	; (800e448 <prvAddNewTaskToReadyList+0xd8>)
 800e3f2:	441a      	add	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	3304      	adds	r3, #4
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	4610      	mov	r0, r2
 800e3fc:	f7ff f92f 	bl	800d65e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e400:	f001 fada 	bl	800f9b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e404:	4b0d      	ldr	r3, [pc, #52]	; (800e43c <prvAddNewTaskToReadyList+0xcc>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00e      	beq.n	800e42a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e40c:	4b0a      	ldr	r3, [pc, #40]	; (800e438 <prvAddNewTaskToReadyList+0xc8>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e416:	429a      	cmp	r2, r3
 800e418:	d207      	bcs.n	800e42a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e41a:	4b0c      	ldr	r3, [pc, #48]	; (800e44c <prvAddNewTaskToReadyList+0xdc>)
 800e41c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e420:	601a      	str	r2, [r3, #0]
 800e422:	f3bf 8f4f 	dsb	sy
 800e426:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e42a:	bf00      	nop
 800e42c:	3708      	adds	r7, #8
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	20002d08 	.word	0x20002d08
 800e438:	20002834 	.word	0x20002834
 800e43c:	20002d14 	.word	0x20002d14
 800e440:	20002d24 	.word	0x20002d24
 800e444:	20002d10 	.word	0x20002d10
 800e448:	20002838 	.word	0x20002838
 800e44c:	e000ed04 	.word	0xe000ed04

0800e450 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e458:	2300      	movs	r3, #0
 800e45a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d016      	beq.n	800e490 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e462:	4b13      	ldr	r3, [pc, #76]	; (800e4b0 <vTaskDelay+0x60>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d009      	beq.n	800e47e <vTaskDelay+0x2e>
 800e46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e46e:	f383 8811 	msr	BASEPRI, r3
 800e472:	f3bf 8f6f 	isb	sy
 800e476:	f3bf 8f4f 	dsb	sy
 800e47a:	60bb      	str	r3, [r7, #8]
 800e47c:	e7fe      	b.n	800e47c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800e47e:	f000 f87f 	bl	800e580 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e482:	2100      	movs	r1, #0
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f000 fd89 	bl	800ef9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e48a:	f000 f887 	bl	800e59c <xTaskResumeAll>
 800e48e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d107      	bne.n	800e4a6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800e496:	4b07      	ldr	r3, [pc, #28]	; (800e4b4 <vTaskDelay+0x64>)
 800e498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e49c:	601a      	str	r2, [r3, #0]
 800e49e:	f3bf 8f4f 	dsb	sy
 800e4a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e4a6:	bf00      	nop
 800e4a8:	3710      	adds	r7, #16
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	20002d30 	.word	0x20002d30
 800e4b4:	e000ed04 	.word	0xe000ed04

0800e4b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b08a      	sub	sp, #40	; 0x28
 800e4bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e4c6:	463a      	mov	r2, r7
 800e4c8:	1d39      	adds	r1, r7, #4
 800e4ca:	f107 0308 	add.w	r3, r7, #8
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7fe fe04 	bl	800d0dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e4d4:	6839      	ldr	r1, [r7, #0]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	68ba      	ldr	r2, [r7, #8]
 800e4da:	9202      	str	r2, [sp, #8]
 800e4dc:	9301      	str	r3, [sp, #4]
 800e4de:	2300      	movs	r3, #0
 800e4e0:	9300      	str	r3, [sp, #0]
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	460a      	mov	r2, r1
 800e4e6:	4920      	ldr	r1, [pc, #128]	; (800e568 <vTaskStartScheduler+0xb0>)
 800e4e8:	4820      	ldr	r0, [pc, #128]	; (800e56c <vTaskStartScheduler+0xb4>)
 800e4ea:	f7ff fe13 	bl	800e114 <xTaskCreateStatic>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	4b1f      	ldr	r3, [pc, #124]	; (800e570 <vTaskStartScheduler+0xb8>)
 800e4f2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e4f4:	4b1e      	ldr	r3, [pc, #120]	; (800e570 <vTaskStartScheduler+0xb8>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d002      	beq.n	800e502 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	617b      	str	r3, [r7, #20]
 800e500:	e001      	b.n	800e506 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e502:	2300      	movs	r3, #0
 800e504:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d102      	bne.n	800e512 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e50c:	f000 fd9a 	bl	800f044 <xTimerCreateTimerTask>
 800e510:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	2b01      	cmp	r3, #1
 800e516:	d115      	bne.n	800e544 <vTaskStartScheduler+0x8c>
 800e518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e51c:	f383 8811 	msr	BASEPRI, r3
 800e520:	f3bf 8f6f 	isb	sy
 800e524:	f3bf 8f4f 	dsb	sy
 800e528:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e52a:	4b12      	ldr	r3, [pc, #72]	; (800e574 <vTaskStartScheduler+0xbc>)
 800e52c:	f04f 32ff 	mov.w	r2, #4294967295
 800e530:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e532:	4b11      	ldr	r3, [pc, #68]	; (800e578 <vTaskStartScheduler+0xc0>)
 800e534:	2201      	movs	r2, #1
 800e536:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e538:	4b10      	ldr	r3, [pc, #64]	; (800e57c <vTaskStartScheduler+0xc4>)
 800e53a:	2200      	movs	r2, #0
 800e53c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e53e:	f001 f96f 	bl	800f820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e542:	e00d      	b.n	800e560 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e54a:	d109      	bne.n	800e560 <vTaskStartScheduler+0xa8>
 800e54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e550:	f383 8811 	msr	BASEPRI, r3
 800e554:	f3bf 8f6f 	isb	sy
 800e558:	f3bf 8f4f 	dsb	sy
 800e55c:	60fb      	str	r3, [r7, #12]
 800e55e:	e7fe      	b.n	800e55e <vTaskStartScheduler+0xa6>
}
 800e560:	bf00      	nop
 800e562:	3718      	adds	r7, #24
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}
 800e568:	080126c4 	.word	0x080126c4
 800e56c:	0800ecb5 	.word	0x0800ecb5
 800e570:	20002d2c 	.word	0x20002d2c
 800e574:	20002d28 	.word	0x20002d28
 800e578:	20002d14 	.word	0x20002d14
 800e57c:	20002d0c 	.word	0x20002d0c

0800e580 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e580:	b480      	push	{r7}
 800e582:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e584:	4b04      	ldr	r3, [pc, #16]	; (800e598 <vTaskSuspendAll+0x18>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	3301      	adds	r3, #1
 800e58a:	4a03      	ldr	r2, [pc, #12]	; (800e598 <vTaskSuspendAll+0x18>)
 800e58c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e58e:	bf00      	nop
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr
 800e598:	20002d30 	.word	0x20002d30

0800e59c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b084      	sub	sp, #16
 800e5a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e5aa:	4b41      	ldr	r3, [pc, #260]	; (800e6b0 <xTaskResumeAll+0x114>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d109      	bne.n	800e5c6 <xTaskResumeAll+0x2a>
 800e5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b6:	f383 8811 	msr	BASEPRI, r3
 800e5ba:	f3bf 8f6f 	isb	sy
 800e5be:	f3bf 8f4f 	dsb	sy
 800e5c2:	603b      	str	r3, [r7, #0]
 800e5c4:	e7fe      	b.n	800e5c4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e5c6:	f001 f9c9 	bl	800f95c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e5ca:	4b39      	ldr	r3, [pc, #228]	; (800e6b0 <xTaskResumeAll+0x114>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	3b01      	subs	r3, #1
 800e5d0:	4a37      	ldr	r2, [pc, #220]	; (800e6b0 <xTaskResumeAll+0x114>)
 800e5d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5d4:	4b36      	ldr	r3, [pc, #216]	; (800e6b0 <xTaskResumeAll+0x114>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d162      	bne.n	800e6a2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e5dc:	4b35      	ldr	r3, [pc, #212]	; (800e6b4 <xTaskResumeAll+0x118>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d05e      	beq.n	800e6a2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5e4:	e02f      	b.n	800e646 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5e6:	4b34      	ldr	r3, [pc, #208]	; (800e6b8 <xTaskResumeAll+0x11c>)
 800e5e8:	68db      	ldr	r3, [r3, #12]
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	3318      	adds	r3, #24
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7ff f890 	bl	800d718 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	3304      	adds	r3, #4
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7ff f88b 	bl	800d718 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e606:	4b2d      	ldr	r3, [pc, #180]	; (800e6bc <xTaskResumeAll+0x120>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d903      	bls.n	800e616 <xTaskResumeAll+0x7a>
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e612:	4a2a      	ldr	r2, [pc, #168]	; (800e6bc <xTaskResumeAll+0x120>)
 800e614:	6013      	str	r3, [r2, #0]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e61a:	4613      	mov	r3, r2
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	4413      	add	r3, r2
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	4a27      	ldr	r2, [pc, #156]	; (800e6c0 <xTaskResumeAll+0x124>)
 800e624:	441a      	add	r2, r3
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	3304      	adds	r3, #4
 800e62a:	4619      	mov	r1, r3
 800e62c:	4610      	mov	r0, r2
 800e62e:	f7ff f816 	bl	800d65e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e636:	4b23      	ldr	r3, [pc, #140]	; (800e6c4 <xTaskResumeAll+0x128>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d302      	bcc.n	800e646 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e640:	4b21      	ldr	r3, [pc, #132]	; (800e6c8 <xTaskResumeAll+0x12c>)
 800e642:	2201      	movs	r2, #1
 800e644:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e646:	4b1c      	ldr	r3, [pc, #112]	; (800e6b8 <xTaskResumeAll+0x11c>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d1cb      	bne.n	800e5e6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d001      	beq.n	800e658 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e654:	f000 fbe0 	bl	800ee18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e658:	4b1c      	ldr	r3, [pc, #112]	; (800e6cc <xTaskResumeAll+0x130>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d010      	beq.n	800e686 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e664:	f000 f846 	bl	800e6f4 <xTaskIncrementTick>
 800e668:	4603      	mov	r3, r0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d002      	beq.n	800e674 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e66e:	4b16      	ldr	r3, [pc, #88]	; (800e6c8 <xTaskResumeAll+0x12c>)
 800e670:	2201      	movs	r2, #1
 800e672:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	3b01      	subs	r3, #1
 800e678:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d1f1      	bne.n	800e664 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e680:	4b12      	ldr	r3, [pc, #72]	; (800e6cc <xTaskResumeAll+0x130>)
 800e682:	2200      	movs	r2, #0
 800e684:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e686:	4b10      	ldr	r3, [pc, #64]	; (800e6c8 <xTaskResumeAll+0x12c>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d009      	beq.n	800e6a2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e68e:	2301      	movs	r3, #1
 800e690:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e692:	4b0f      	ldr	r3, [pc, #60]	; (800e6d0 <xTaskResumeAll+0x134>)
 800e694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e698:	601a      	str	r2, [r3, #0]
 800e69a:	f3bf 8f4f 	dsb	sy
 800e69e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6a2:	f001 f989 	bl	800f9b8 <vPortExitCritical>

	return xAlreadyYielded;
 800e6a6:	68bb      	ldr	r3, [r7, #8]
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3710      	adds	r7, #16
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	20002d30 	.word	0x20002d30
 800e6b4:	20002d08 	.word	0x20002d08
 800e6b8:	20002cc8 	.word	0x20002cc8
 800e6bc:	20002d10 	.word	0x20002d10
 800e6c0:	20002838 	.word	0x20002838
 800e6c4:	20002834 	.word	0x20002834
 800e6c8:	20002d1c 	.word	0x20002d1c
 800e6cc:	20002d18 	.word	0x20002d18
 800e6d0:	e000ed04 	.word	0xe000ed04

0800e6d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b083      	sub	sp, #12
 800e6d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e6da:	4b05      	ldr	r3, [pc, #20]	; (800e6f0 <xTaskGetTickCount+0x1c>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e6e0:	687b      	ldr	r3, [r7, #4]
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	370c      	adds	r7, #12
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ec:	4770      	bx	lr
 800e6ee:	bf00      	nop
 800e6f0:	20002d0c 	.word	0x20002d0c

0800e6f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b086      	sub	sp, #24
 800e6f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6fe:	4b4e      	ldr	r3, [pc, #312]	; (800e838 <xTaskIncrementTick+0x144>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	2b00      	cmp	r3, #0
 800e704:	f040 8088 	bne.w	800e818 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e708:	4b4c      	ldr	r3, [pc, #304]	; (800e83c <xTaskIncrementTick+0x148>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	3301      	adds	r3, #1
 800e70e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e710:	4a4a      	ldr	r2, [pc, #296]	; (800e83c <xTaskIncrementTick+0x148>)
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d11f      	bne.n	800e75c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e71c:	4b48      	ldr	r3, [pc, #288]	; (800e840 <xTaskIncrementTick+0x14c>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d009      	beq.n	800e73a <xTaskIncrementTick+0x46>
 800e726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e72a:	f383 8811 	msr	BASEPRI, r3
 800e72e:	f3bf 8f6f 	isb	sy
 800e732:	f3bf 8f4f 	dsb	sy
 800e736:	603b      	str	r3, [r7, #0]
 800e738:	e7fe      	b.n	800e738 <xTaskIncrementTick+0x44>
 800e73a:	4b41      	ldr	r3, [pc, #260]	; (800e840 <xTaskIncrementTick+0x14c>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	60fb      	str	r3, [r7, #12]
 800e740:	4b40      	ldr	r3, [pc, #256]	; (800e844 <xTaskIncrementTick+0x150>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4a3e      	ldr	r2, [pc, #248]	; (800e840 <xTaskIncrementTick+0x14c>)
 800e746:	6013      	str	r3, [r2, #0]
 800e748:	4a3e      	ldr	r2, [pc, #248]	; (800e844 <xTaskIncrementTick+0x150>)
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	6013      	str	r3, [r2, #0]
 800e74e:	4b3e      	ldr	r3, [pc, #248]	; (800e848 <xTaskIncrementTick+0x154>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	3301      	adds	r3, #1
 800e754:	4a3c      	ldr	r2, [pc, #240]	; (800e848 <xTaskIncrementTick+0x154>)
 800e756:	6013      	str	r3, [r2, #0]
 800e758:	f000 fb5e 	bl	800ee18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e75c:	4b3b      	ldr	r3, [pc, #236]	; (800e84c <xTaskIncrementTick+0x158>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	693a      	ldr	r2, [r7, #16]
 800e762:	429a      	cmp	r2, r3
 800e764:	d349      	bcc.n	800e7fa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e766:	4b36      	ldr	r3, [pc, #216]	; (800e840 <xTaskIncrementTick+0x14c>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d104      	bne.n	800e77a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e770:	4b36      	ldr	r3, [pc, #216]	; (800e84c <xTaskIncrementTick+0x158>)
 800e772:	f04f 32ff 	mov.w	r2, #4294967295
 800e776:	601a      	str	r2, [r3, #0]
					break;
 800e778:	e03f      	b.n	800e7fa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e77a:	4b31      	ldr	r3, [pc, #196]	; (800e840 <xTaskIncrementTick+0x14c>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	68db      	ldr	r3, [r3, #12]
 800e782:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e78a:	693a      	ldr	r2, [r7, #16]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d203      	bcs.n	800e79a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e792:	4a2e      	ldr	r2, [pc, #184]	; (800e84c <xTaskIncrementTick+0x158>)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e798:	e02f      	b.n	800e7fa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	3304      	adds	r3, #4
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fe ffba 	bl	800d718 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d004      	beq.n	800e7b6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	3318      	adds	r3, #24
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fe ffb1 	bl	800d718 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ba:	4b25      	ldr	r3, [pc, #148]	; (800e850 <xTaskIncrementTick+0x15c>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d903      	bls.n	800e7ca <xTaskIncrementTick+0xd6>
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c6:	4a22      	ldr	r2, [pc, #136]	; (800e850 <xTaskIncrementTick+0x15c>)
 800e7c8:	6013      	str	r3, [r2, #0]
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	009b      	lsls	r3, r3, #2
 800e7d2:	4413      	add	r3, r2
 800e7d4:	009b      	lsls	r3, r3, #2
 800e7d6:	4a1f      	ldr	r2, [pc, #124]	; (800e854 <xTaskIncrementTick+0x160>)
 800e7d8:	441a      	add	r2, r3
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	3304      	adds	r3, #4
 800e7de:	4619      	mov	r1, r3
 800e7e0:	4610      	mov	r0, r2
 800e7e2:	f7fe ff3c 	bl	800d65e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ea:	4b1b      	ldr	r3, [pc, #108]	; (800e858 <xTaskIncrementTick+0x164>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d3b8      	bcc.n	800e766 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7f8:	e7b5      	b.n	800e766 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e7fa:	4b17      	ldr	r3, [pc, #92]	; (800e858 <xTaskIncrementTick+0x164>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e800:	4914      	ldr	r1, [pc, #80]	; (800e854 <xTaskIncrementTick+0x160>)
 800e802:	4613      	mov	r3, r2
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	4413      	add	r3, r2
 800e808:	009b      	lsls	r3, r3, #2
 800e80a:	440b      	add	r3, r1
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2b01      	cmp	r3, #1
 800e810:	d907      	bls.n	800e822 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800e812:	2301      	movs	r3, #1
 800e814:	617b      	str	r3, [r7, #20]
 800e816:	e004      	b.n	800e822 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e818:	4b10      	ldr	r3, [pc, #64]	; (800e85c <xTaskIncrementTick+0x168>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	3301      	adds	r3, #1
 800e81e:	4a0f      	ldr	r2, [pc, #60]	; (800e85c <xTaskIncrementTick+0x168>)
 800e820:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e822:	4b0f      	ldr	r3, [pc, #60]	; (800e860 <xTaskIncrementTick+0x16c>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d001      	beq.n	800e82e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800e82a:	2301      	movs	r3, #1
 800e82c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e82e:	697b      	ldr	r3, [r7, #20]
}
 800e830:	4618      	mov	r0, r3
 800e832:	3718      	adds	r7, #24
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}
 800e838:	20002d30 	.word	0x20002d30
 800e83c:	20002d0c 	.word	0x20002d0c
 800e840:	20002cc0 	.word	0x20002cc0
 800e844:	20002cc4 	.word	0x20002cc4
 800e848:	20002d20 	.word	0x20002d20
 800e84c:	20002d28 	.word	0x20002d28
 800e850:	20002d10 	.word	0x20002d10
 800e854:	20002838 	.word	0x20002838
 800e858:	20002834 	.word	0x20002834
 800e85c:	20002d18 	.word	0x20002d18
 800e860:	20002d1c 	.word	0x20002d1c

0800e864 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e864:	b480      	push	{r7}
 800e866:	b085      	sub	sp, #20
 800e868:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e86a:	4b27      	ldr	r3, [pc, #156]	; (800e908 <vTaskSwitchContext+0xa4>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d003      	beq.n	800e87a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e872:	4b26      	ldr	r3, [pc, #152]	; (800e90c <vTaskSwitchContext+0xa8>)
 800e874:	2201      	movs	r2, #1
 800e876:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e878:	e040      	b.n	800e8fc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800e87a:	4b24      	ldr	r3, [pc, #144]	; (800e90c <vTaskSwitchContext+0xa8>)
 800e87c:	2200      	movs	r2, #0
 800e87e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e880:	4b23      	ldr	r3, [pc, #140]	; (800e910 <vTaskSwitchContext+0xac>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	60fb      	str	r3, [r7, #12]
 800e886:	e00f      	b.n	800e8a8 <vTaskSwitchContext+0x44>
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d109      	bne.n	800e8a2 <vTaskSwitchContext+0x3e>
 800e88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e892:	f383 8811 	msr	BASEPRI, r3
 800e896:	f3bf 8f6f 	isb	sy
 800e89a:	f3bf 8f4f 	dsb	sy
 800e89e:	607b      	str	r3, [r7, #4]
 800e8a0:	e7fe      	b.n	800e8a0 <vTaskSwitchContext+0x3c>
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	3b01      	subs	r3, #1
 800e8a6:	60fb      	str	r3, [r7, #12]
 800e8a8:	491a      	ldr	r1, [pc, #104]	; (800e914 <vTaskSwitchContext+0xb0>)
 800e8aa:	68fa      	ldr	r2, [r7, #12]
 800e8ac:	4613      	mov	r3, r2
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	4413      	add	r3, r2
 800e8b2:	009b      	lsls	r3, r3, #2
 800e8b4:	440b      	add	r3, r1
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d0e5      	beq.n	800e888 <vTaskSwitchContext+0x24>
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	4613      	mov	r3, r2
 800e8c0:	009b      	lsls	r3, r3, #2
 800e8c2:	4413      	add	r3, r2
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	4a13      	ldr	r2, [pc, #76]	; (800e914 <vTaskSwitchContext+0xb0>)
 800e8c8:	4413      	add	r3, r2
 800e8ca:	60bb      	str	r3, [r7, #8]
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	685a      	ldr	r2, [r3, #4]
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	605a      	str	r2, [r3, #4]
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	685a      	ldr	r2, [r3, #4]
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	3308      	adds	r3, #8
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d104      	bne.n	800e8ec <vTaskSwitchContext+0x88>
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	685a      	ldr	r2, [r3, #4]
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	605a      	str	r2, [r3, #4]
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	68db      	ldr	r3, [r3, #12]
 800e8f2:	4a09      	ldr	r2, [pc, #36]	; (800e918 <vTaskSwitchContext+0xb4>)
 800e8f4:	6013      	str	r3, [r2, #0]
 800e8f6:	4a06      	ldr	r2, [pc, #24]	; (800e910 <vTaskSwitchContext+0xac>)
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6013      	str	r3, [r2, #0]
}
 800e8fc:	bf00      	nop
 800e8fe:	3714      	adds	r7, #20
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr
 800e908:	20002d30 	.word	0x20002d30
 800e90c:	20002d1c 	.word	0x20002d1c
 800e910:	20002d10 	.word	0x20002d10
 800e914:	20002838 	.word	0x20002838
 800e918:	20002834 	.word	0x20002834

0800e91c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b084      	sub	sp, #16
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d109      	bne.n	800e940 <vTaskPlaceOnEventList+0x24>
 800e92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e930:	f383 8811 	msr	BASEPRI, r3
 800e934:	f3bf 8f6f 	isb	sy
 800e938:	f3bf 8f4f 	dsb	sy
 800e93c:	60fb      	str	r3, [r7, #12]
 800e93e:	e7fe      	b.n	800e93e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e940:	4b07      	ldr	r3, [pc, #28]	; (800e960 <vTaskPlaceOnEventList+0x44>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	3318      	adds	r3, #24
 800e946:	4619      	mov	r1, r3
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f7fe feac 	bl	800d6a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e94e:	2101      	movs	r1, #1
 800e950:	6838      	ldr	r0, [r7, #0]
 800e952:	f000 fb23 	bl	800ef9c <prvAddCurrentTaskToDelayedList>
}
 800e956:	bf00      	nop
 800e958:	3710      	adds	r7, #16
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	20002834 	.word	0x20002834

0800e964 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b086      	sub	sp, #24
 800e968:	af00      	add	r7, sp, #0
 800e96a:	60f8      	str	r0, [r7, #12]
 800e96c:	60b9      	str	r1, [r7, #8]
 800e96e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d109      	bne.n	800e98a <vTaskPlaceOnUnorderedEventList+0x26>
 800e976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97a:	f383 8811 	msr	BASEPRI, r3
 800e97e:	f3bf 8f6f 	isb	sy
 800e982:	f3bf 8f4f 	dsb	sy
 800e986:	617b      	str	r3, [r7, #20]
 800e988:	e7fe      	b.n	800e988 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e98a:	4b11      	ldr	r3, [pc, #68]	; (800e9d0 <vTaskPlaceOnUnorderedEventList+0x6c>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d109      	bne.n	800e9a6 <vTaskPlaceOnUnorderedEventList+0x42>
 800e992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e996:	f383 8811 	msr	BASEPRI, r3
 800e99a:	f3bf 8f6f 	isb	sy
 800e99e:	f3bf 8f4f 	dsb	sy
 800e9a2:	613b      	str	r3, [r7, #16]
 800e9a4:	e7fe      	b.n	800e9a4 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e9a6:	4b0b      	ldr	r3, [pc, #44]	; (800e9d4 <vTaskPlaceOnUnorderedEventList+0x70>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	68ba      	ldr	r2, [r7, #8]
 800e9ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800e9b0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9b2:	4b08      	ldr	r3, [pc, #32]	; (800e9d4 <vTaskPlaceOnUnorderedEventList+0x70>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	3318      	adds	r3, #24
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	68f8      	ldr	r0, [r7, #12]
 800e9bc:	f7fe fe4f 	bl	800d65e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e9c0:	2101      	movs	r1, #1
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f000 faea 	bl	800ef9c <prvAddCurrentTaskToDelayedList>
}
 800e9c8:	bf00      	nop
 800e9ca:	3718      	adds	r7, #24
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	20002d30 	.word	0x20002d30
 800e9d4:	20002834 	.word	0x20002834

0800e9d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b086      	sub	sp, #24
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d109      	bne.n	800e9fe <vTaskPlaceOnEventListRestricted+0x26>
 800e9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ee:	f383 8811 	msr	BASEPRI, r3
 800e9f2:	f3bf 8f6f 	isb	sy
 800e9f6:	f3bf 8f4f 	dsb	sy
 800e9fa:	617b      	str	r3, [r7, #20]
 800e9fc:	e7fe      	b.n	800e9fc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9fe:	4b0a      	ldr	r3, [pc, #40]	; (800ea28 <vTaskPlaceOnEventListRestricted+0x50>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	3318      	adds	r3, #24
 800ea04:	4619      	mov	r1, r3
 800ea06:	68f8      	ldr	r0, [r7, #12]
 800ea08:	f7fe fe29 	bl	800d65e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d002      	beq.n	800ea18 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800ea12:	f04f 33ff 	mov.w	r3, #4294967295
 800ea16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ea18:	6879      	ldr	r1, [r7, #4]
 800ea1a:	68b8      	ldr	r0, [r7, #8]
 800ea1c:	f000 fabe 	bl	800ef9c <prvAddCurrentTaskToDelayedList>
	}
 800ea20:	bf00      	nop
 800ea22:	3718      	adds	r7, #24
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	20002834 	.word	0x20002834

0800ea2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b086      	sub	sp, #24
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d109      	bne.n	800ea56 <xTaskRemoveFromEventList+0x2a>
 800ea42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea46:	f383 8811 	msr	BASEPRI, r3
 800ea4a:	f3bf 8f6f 	isb	sy
 800ea4e:	f3bf 8f4f 	dsb	sy
 800ea52:	60fb      	str	r3, [r7, #12]
 800ea54:	e7fe      	b.n	800ea54 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	3318      	adds	r3, #24
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7fe fe5c 	bl	800d718 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea60:	4b1d      	ldr	r3, [pc, #116]	; (800ead8 <xTaskRemoveFromEventList+0xac>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d11d      	bne.n	800eaa4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	3304      	adds	r3, #4
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f7fe fe53 	bl	800d718 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea76:	4b19      	ldr	r3, [pc, #100]	; (800eadc <xTaskRemoveFromEventList+0xb0>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d903      	bls.n	800ea86 <xTaskRemoveFromEventList+0x5a>
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea82:	4a16      	ldr	r2, [pc, #88]	; (800eadc <xTaskRemoveFromEventList+0xb0>)
 800ea84:	6013      	str	r3, [r2, #0]
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	4413      	add	r3, r2
 800ea90:	009b      	lsls	r3, r3, #2
 800ea92:	4a13      	ldr	r2, [pc, #76]	; (800eae0 <xTaskRemoveFromEventList+0xb4>)
 800ea94:	441a      	add	r2, r3
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	3304      	adds	r3, #4
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	4610      	mov	r0, r2
 800ea9e:	f7fe fdde 	bl	800d65e <vListInsertEnd>
 800eaa2:	e005      	b.n	800eab0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	3318      	adds	r3, #24
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	480e      	ldr	r0, [pc, #56]	; (800eae4 <xTaskRemoveFromEventList+0xb8>)
 800eaac:	f7fe fdd7 	bl	800d65e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eab0:	693b      	ldr	r3, [r7, #16]
 800eab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab4:	4b0c      	ldr	r3, [pc, #48]	; (800eae8 <xTaskRemoveFromEventList+0xbc>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d905      	bls.n	800eaca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eabe:	2301      	movs	r3, #1
 800eac0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eac2:	4b0a      	ldr	r3, [pc, #40]	; (800eaec <xTaskRemoveFromEventList+0xc0>)
 800eac4:	2201      	movs	r2, #1
 800eac6:	601a      	str	r2, [r3, #0]
 800eac8:	e001      	b.n	800eace <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800eaca:	2300      	movs	r3, #0
 800eacc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eace:	697b      	ldr	r3, [r7, #20]
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3718      	adds	r7, #24
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	20002d30 	.word	0x20002d30
 800eadc:	20002d10 	.word	0x20002d10
 800eae0:	20002838 	.word	0x20002838
 800eae4:	20002cc8 	.word	0x20002cc8
 800eae8:	20002834 	.word	0x20002834
 800eaec:	20002d1c 	.word	0x20002d1c

0800eaf0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b086      	sub	sp, #24
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800eafa:	4b28      	ldr	r3, [pc, #160]	; (800eb9c <vTaskRemoveFromUnorderedEventList+0xac>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d109      	bne.n	800eb16 <vTaskRemoveFromUnorderedEventList+0x26>
 800eb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb06:	f383 8811 	msr	BASEPRI, r3
 800eb0a:	f3bf 8f6f 	isb	sy
 800eb0e:	f3bf 8f4f 	dsb	sy
 800eb12:	613b      	str	r3, [r7, #16]
 800eb14:	e7fe      	b.n	800eb14 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	68db      	ldr	r3, [r3, #12]
 800eb24:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d109      	bne.n	800eb40 <vTaskRemoveFromUnorderedEventList+0x50>
 800eb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb30:	f383 8811 	msr	BASEPRI, r3
 800eb34:	f3bf 8f6f 	isb	sy
 800eb38:	f3bf 8f4f 	dsb	sy
 800eb3c:	60fb      	str	r3, [r7, #12]
 800eb3e:	e7fe      	b.n	800eb3e <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7fe fde9 	bl	800d718 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	3304      	adds	r3, #4
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7fe fde4 	bl	800d718 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb54:	4b12      	ldr	r3, [pc, #72]	; (800eba0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d903      	bls.n	800eb64 <vTaskRemoveFromUnorderedEventList+0x74>
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb60:	4a0f      	ldr	r2, [pc, #60]	; (800eba0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800eb62:	6013      	str	r3, [r2, #0]
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb68:	4613      	mov	r3, r2
 800eb6a:	009b      	lsls	r3, r3, #2
 800eb6c:	4413      	add	r3, r2
 800eb6e:	009b      	lsls	r3, r3, #2
 800eb70:	4a0c      	ldr	r2, [pc, #48]	; (800eba4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800eb72:	441a      	add	r2, r3
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	3304      	adds	r3, #4
 800eb78:	4619      	mov	r1, r3
 800eb7a:	4610      	mov	r0, r2
 800eb7c:	f7fe fd6f 	bl	800d65e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb84:	4b08      	ldr	r3, [pc, #32]	; (800eba8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d902      	bls.n	800eb94 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800eb8e:	4b07      	ldr	r3, [pc, #28]	; (800ebac <vTaskRemoveFromUnorderedEventList+0xbc>)
 800eb90:	2201      	movs	r2, #1
 800eb92:	601a      	str	r2, [r3, #0]
	}
}
 800eb94:	bf00      	nop
 800eb96:	3718      	adds	r7, #24
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}
 800eb9c:	20002d30 	.word	0x20002d30
 800eba0:	20002d10 	.word	0x20002d10
 800eba4:	20002838 	.word	0x20002838
 800eba8:	20002834 	.word	0x20002834
 800ebac:	20002d1c 	.word	0x20002d1c

0800ebb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ebb8:	4b06      	ldr	r3, [pc, #24]	; (800ebd4 <vTaskInternalSetTimeOutState+0x24>)
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ebc0:	4b05      	ldr	r3, [pc, #20]	; (800ebd8 <vTaskInternalSetTimeOutState+0x28>)
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	605a      	str	r2, [r3, #4]
}
 800ebc8:	bf00      	nop
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr
 800ebd4:	20002d20 	.word	0x20002d20
 800ebd8:	20002d0c 	.word	0x20002d0c

0800ebdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b088      	sub	sp, #32
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d109      	bne.n	800ec00 <xTaskCheckForTimeOut+0x24>
 800ebec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf0:	f383 8811 	msr	BASEPRI, r3
 800ebf4:	f3bf 8f6f 	isb	sy
 800ebf8:	f3bf 8f4f 	dsb	sy
 800ebfc:	613b      	str	r3, [r7, #16]
 800ebfe:	e7fe      	b.n	800ebfe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d109      	bne.n	800ec1a <xTaskCheckForTimeOut+0x3e>
 800ec06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec0a:	f383 8811 	msr	BASEPRI, r3
 800ec0e:	f3bf 8f6f 	isb	sy
 800ec12:	f3bf 8f4f 	dsb	sy
 800ec16:	60fb      	str	r3, [r7, #12]
 800ec18:	e7fe      	b.n	800ec18 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800ec1a:	f000 fe9f 	bl	800f95c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ec1e:	4b1d      	ldr	r3, [pc, #116]	; (800ec94 <xTaskCheckForTimeOut+0xb8>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	69ba      	ldr	r2, [r7, #24]
 800ec2a:	1ad3      	subs	r3, r2, r3
 800ec2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec36:	d102      	bne.n	800ec3e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	61fb      	str	r3, [r7, #28]
 800ec3c:	e023      	b.n	800ec86 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	4b15      	ldr	r3, [pc, #84]	; (800ec98 <xTaskCheckForTimeOut+0xbc>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d007      	beq.n	800ec5a <xTaskCheckForTimeOut+0x7e>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	685b      	ldr	r3, [r3, #4]
 800ec4e:	69ba      	ldr	r2, [r7, #24]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d302      	bcc.n	800ec5a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ec54:	2301      	movs	r3, #1
 800ec56:	61fb      	str	r3, [r7, #28]
 800ec58:	e015      	b.n	800ec86 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	697a      	ldr	r2, [r7, #20]
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d20b      	bcs.n	800ec7c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	681a      	ldr	r2, [r3, #0]
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	1ad2      	subs	r2, r2, r3
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f7ff ff9d 	bl	800ebb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ec76:	2300      	movs	r3, #0
 800ec78:	61fb      	str	r3, [r7, #28]
 800ec7a:	e004      	b.n	800ec86 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ec82:	2301      	movs	r3, #1
 800ec84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ec86:	f000 fe97 	bl	800f9b8 <vPortExitCritical>

	return xReturn;
 800ec8a:	69fb      	ldr	r3, [r7, #28]
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3720      	adds	r7, #32
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	20002d0c 	.word	0x20002d0c
 800ec98:	20002d20 	.word	0x20002d20

0800ec9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eca0:	4b03      	ldr	r3, [pc, #12]	; (800ecb0 <vTaskMissedYield+0x14>)
 800eca2:	2201      	movs	r2, #1
 800eca4:	601a      	str	r2, [r3, #0]
}
 800eca6:	bf00      	nop
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr
 800ecb0:	20002d1c 	.word	0x20002d1c

0800ecb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ecbc:	f000 f852 	bl	800ed64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ecc0:	4b06      	ldr	r3, [pc, #24]	; (800ecdc <prvIdleTask+0x28>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	d9f9      	bls.n	800ecbc <prvIdleTask+0x8>
			{
				taskYIELD();
 800ecc8:	4b05      	ldr	r3, [pc, #20]	; (800ece0 <prvIdleTask+0x2c>)
 800ecca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecce:	601a      	str	r2, [r3, #0]
 800ecd0:	f3bf 8f4f 	dsb	sy
 800ecd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ecd8:	e7f0      	b.n	800ecbc <prvIdleTask+0x8>
 800ecda:	bf00      	nop
 800ecdc:	20002838 	.word	0x20002838
 800ece0:	e000ed04 	.word	0xe000ed04

0800ece4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ecea:	2300      	movs	r3, #0
 800ecec:	607b      	str	r3, [r7, #4]
 800ecee:	e00c      	b.n	800ed0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ecf0:	687a      	ldr	r2, [r7, #4]
 800ecf2:	4613      	mov	r3, r2
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	4413      	add	r3, r2
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	4a12      	ldr	r2, [pc, #72]	; (800ed44 <prvInitialiseTaskLists+0x60>)
 800ecfc:	4413      	add	r3, r2
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7fe fc80 	bl	800d604 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	3301      	adds	r3, #1
 800ed08:	607b      	str	r3, [r7, #4]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2b37      	cmp	r3, #55	; 0x37
 800ed0e:	d9ef      	bls.n	800ecf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ed10:	480d      	ldr	r0, [pc, #52]	; (800ed48 <prvInitialiseTaskLists+0x64>)
 800ed12:	f7fe fc77 	bl	800d604 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ed16:	480d      	ldr	r0, [pc, #52]	; (800ed4c <prvInitialiseTaskLists+0x68>)
 800ed18:	f7fe fc74 	bl	800d604 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ed1c:	480c      	ldr	r0, [pc, #48]	; (800ed50 <prvInitialiseTaskLists+0x6c>)
 800ed1e:	f7fe fc71 	bl	800d604 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ed22:	480c      	ldr	r0, [pc, #48]	; (800ed54 <prvInitialiseTaskLists+0x70>)
 800ed24:	f7fe fc6e 	bl	800d604 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ed28:	480b      	ldr	r0, [pc, #44]	; (800ed58 <prvInitialiseTaskLists+0x74>)
 800ed2a:	f7fe fc6b 	bl	800d604 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ed2e:	4b0b      	ldr	r3, [pc, #44]	; (800ed5c <prvInitialiseTaskLists+0x78>)
 800ed30:	4a05      	ldr	r2, [pc, #20]	; (800ed48 <prvInitialiseTaskLists+0x64>)
 800ed32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ed34:	4b0a      	ldr	r3, [pc, #40]	; (800ed60 <prvInitialiseTaskLists+0x7c>)
 800ed36:	4a05      	ldr	r2, [pc, #20]	; (800ed4c <prvInitialiseTaskLists+0x68>)
 800ed38:	601a      	str	r2, [r3, #0]
}
 800ed3a:	bf00      	nop
 800ed3c:	3708      	adds	r7, #8
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	20002838 	.word	0x20002838
 800ed48:	20002c98 	.word	0x20002c98
 800ed4c:	20002cac 	.word	0x20002cac
 800ed50:	20002cc8 	.word	0x20002cc8
 800ed54:	20002cdc 	.word	0x20002cdc
 800ed58:	20002cf4 	.word	0x20002cf4
 800ed5c:	20002cc0 	.word	0x20002cc0
 800ed60:	20002cc4 	.word	0x20002cc4

0800ed64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed6a:	e019      	b.n	800eda0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ed6c:	f000 fdf6 	bl	800f95c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed70:	4b0f      	ldr	r3, [pc, #60]	; (800edb0 <prvCheckTasksWaitingTermination+0x4c>)
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	3304      	adds	r3, #4
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7fe fccb 	bl	800d718 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ed82:	4b0c      	ldr	r3, [pc, #48]	; (800edb4 <prvCheckTasksWaitingTermination+0x50>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	3b01      	subs	r3, #1
 800ed88:	4a0a      	ldr	r2, [pc, #40]	; (800edb4 <prvCheckTasksWaitingTermination+0x50>)
 800ed8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ed8c:	4b0a      	ldr	r3, [pc, #40]	; (800edb8 <prvCheckTasksWaitingTermination+0x54>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	3b01      	subs	r3, #1
 800ed92:	4a09      	ldr	r2, [pc, #36]	; (800edb8 <prvCheckTasksWaitingTermination+0x54>)
 800ed94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ed96:	f000 fe0f 	bl	800f9b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f000 f80e 	bl	800edbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eda0:	4b05      	ldr	r3, [pc, #20]	; (800edb8 <prvCheckTasksWaitingTermination+0x54>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d1e1      	bne.n	800ed6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eda8:	bf00      	nop
 800edaa:	3708      	adds	r7, #8
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	20002cdc 	.word	0x20002cdc
 800edb4:	20002d08 	.word	0x20002d08
 800edb8:	20002cf0 	.word	0x20002cf0

0800edbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d108      	bne.n	800ede0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edd2:	4618      	mov	r0, r3
 800edd4:	f000 ff9e 	bl	800fd14 <vPortFree>
				vPortFree( pxTCB );
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f000 ff9b 	bl	800fd14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800edde:	e017      	b.n	800ee10 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d103      	bne.n	800edf2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f000 ff92 	bl	800fd14 <vPortFree>
	}
 800edf0:	e00e      	b.n	800ee10 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800edf8:	2b02      	cmp	r3, #2
 800edfa:	d009      	beq.n	800ee10 <prvDeleteTCB+0x54>
 800edfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee00:	f383 8811 	msr	BASEPRI, r3
 800ee04:	f3bf 8f6f 	isb	sy
 800ee08:	f3bf 8f4f 	dsb	sy
 800ee0c:	60fb      	str	r3, [r7, #12]
 800ee0e:	e7fe      	b.n	800ee0e <prvDeleteTCB+0x52>
	}
 800ee10:	bf00      	nop
 800ee12:	3710      	adds	r7, #16
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b083      	sub	sp, #12
 800ee1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee1e:	4b0c      	ldr	r3, [pc, #48]	; (800ee50 <prvResetNextTaskUnblockTime+0x38>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d104      	bne.n	800ee32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ee28:	4b0a      	ldr	r3, [pc, #40]	; (800ee54 <prvResetNextTaskUnblockTime+0x3c>)
 800ee2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ee30:	e008      	b.n	800ee44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee32:	4b07      	ldr	r3, [pc, #28]	; (800ee50 <prvResetNextTaskUnblockTime+0x38>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	685b      	ldr	r3, [r3, #4]
 800ee40:	4a04      	ldr	r2, [pc, #16]	; (800ee54 <prvResetNextTaskUnblockTime+0x3c>)
 800ee42:	6013      	str	r3, [r2, #0]
}
 800ee44:	bf00      	nop
 800ee46:	370c      	adds	r7, #12
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4e:	4770      	bx	lr
 800ee50:	20002cc0 	.word	0x20002cc0
 800ee54:	20002d28 	.word	0x20002d28

0800ee58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ee58:	b480      	push	{r7}
 800ee5a:	b083      	sub	sp, #12
 800ee5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ee5e:	4b0b      	ldr	r3, [pc, #44]	; (800ee8c <xTaskGetSchedulerState+0x34>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d102      	bne.n	800ee6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ee66:	2301      	movs	r3, #1
 800ee68:	607b      	str	r3, [r7, #4]
 800ee6a:	e008      	b.n	800ee7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee6c:	4b08      	ldr	r3, [pc, #32]	; (800ee90 <xTaskGetSchedulerState+0x38>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d102      	bne.n	800ee7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ee74:	2302      	movs	r3, #2
 800ee76:	607b      	str	r3, [r7, #4]
 800ee78:	e001      	b.n	800ee7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ee7e:	687b      	ldr	r3, [r7, #4]
	}
 800ee80:	4618      	mov	r0, r3
 800ee82:	370c      	adds	r7, #12
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr
 800ee8c:	20002d14 	.word	0x20002d14
 800ee90:	20002d30 	.word	0x20002d30

0800ee94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b086      	sub	sp, #24
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eea0:	2300      	movs	r3, #0
 800eea2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d054      	beq.n	800ef54 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eeaa:	4b2d      	ldr	r3, [pc, #180]	; (800ef60 <xTaskPriorityDisinherit+0xcc>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	693a      	ldr	r2, [r7, #16]
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d009      	beq.n	800eec8 <xTaskPriorityDisinherit+0x34>
 800eeb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb8:	f383 8811 	msr	BASEPRI, r3
 800eebc:	f3bf 8f6f 	isb	sy
 800eec0:	f3bf 8f4f 	dsb	sy
 800eec4:	60fb      	str	r3, [r7, #12]
 800eec6:	e7fe      	b.n	800eec6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d109      	bne.n	800eee4 <xTaskPriorityDisinherit+0x50>
 800eed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed4:	f383 8811 	msr	BASEPRI, r3
 800eed8:	f3bf 8f6f 	isb	sy
 800eedc:	f3bf 8f4f 	dsb	sy
 800eee0:	60bb      	str	r3, [r7, #8]
 800eee2:	e7fe      	b.n	800eee2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eee8:	1e5a      	subs	r2, r3, #1
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d02c      	beq.n	800ef54 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d128      	bne.n	800ef54 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	3304      	adds	r3, #4
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fe fc06 	bl	800d718 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ef0c:	693b      	ldr	r3, [r7, #16]
 800ef0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef24:	4b0f      	ldr	r3, [pc, #60]	; (800ef64 <xTaskPriorityDisinherit+0xd0>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d903      	bls.n	800ef34 <xTaskPriorityDisinherit+0xa0>
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef30:	4a0c      	ldr	r2, [pc, #48]	; (800ef64 <xTaskPriorityDisinherit+0xd0>)
 800ef32:	6013      	str	r3, [r2, #0]
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef38:	4613      	mov	r3, r2
 800ef3a:	009b      	lsls	r3, r3, #2
 800ef3c:	4413      	add	r3, r2
 800ef3e:	009b      	lsls	r3, r3, #2
 800ef40:	4a09      	ldr	r2, [pc, #36]	; (800ef68 <xTaskPriorityDisinherit+0xd4>)
 800ef42:	441a      	add	r2, r3
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	3304      	adds	r3, #4
 800ef48:	4619      	mov	r1, r3
 800ef4a:	4610      	mov	r0, r2
 800ef4c:	f7fe fb87 	bl	800d65e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ef50:	2301      	movs	r3, #1
 800ef52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef54:	697b      	ldr	r3, [r7, #20]
	}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3718      	adds	r7, #24
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
 800ef5e:	bf00      	nop
 800ef60:	20002834 	.word	0x20002834
 800ef64:	20002d10 	.word	0x20002d10
 800ef68:	20002838 	.word	0x20002838

0800ef6c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ef72:	4b09      	ldr	r3, [pc, #36]	; (800ef98 <uxTaskResetEventItemValue+0x2c>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	699b      	ldr	r3, [r3, #24]
 800ef78:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef7a:	4b07      	ldr	r3, [pc, #28]	; (800ef98 <uxTaskResetEventItemValue+0x2c>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef80:	4b05      	ldr	r3, [pc, #20]	; (800ef98 <uxTaskResetEventItemValue+0x2c>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ef88:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ef8a:	687b      	ldr	r3, [r7, #4]
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	370c      	adds	r7, #12
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr
 800ef98:	20002834 	.word	0x20002834

0800ef9c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800efa6:	4b21      	ldr	r3, [pc, #132]	; (800f02c <prvAddCurrentTaskToDelayedList+0x90>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efac:	4b20      	ldr	r3, [pc, #128]	; (800f030 <prvAddCurrentTaskToDelayedList+0x94>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	3304      	adds	r3, #4
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7fe fbb0 	bl	800d718 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efbe:	d10a      	bne.n	800efd6 <prvAddCurrentTaskToDelayedList+0x3a>
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d007      	beq.n	800efd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efc6:	4b1a      	ldr	r3, [pc, #104]	; (800f030 <prvAddCurrentTaskToDelayedList+0x94>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	3304      	adds	r3, #4
 800efcc:	4619      	mov	r1, r3
 800efce:	4819      	ldr	r0, [pc, #100]	; (800f034 <prvAddCurrentTaskToDelayedList+0x98>)
 800efd0:	f7fe fb45 	bl	800d65e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800efd4:	e026      	b.n	800f024 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800efd6:	68fa      	ldr	r2, [r7, #12]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	4413      	add	r3, r2
 800efdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800efde:	4b14      	ldr	r3, [pc, #80]	; (800f030 <prvAddCurrentTaskToDelayedList+0x94>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	68ba      	ldr	r2, [r7, #8]
 800efe4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800efe6:	68ba      	ldr	r2, [r7, #8]
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	429a      	cmp	r2, r3
 800efec:	d209      	bcs.n	800f002 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efee:	4b12      	ldr	r3, [pc, #72]	; (800f038 <prvAddCurrentTaskToDelayedList+0x9c>)
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	4b0f      	ldr	r3, [pc, #60]	; (800f030 <prvAddCurrentTaskToDelayedList+0x94>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	3304      	adds	r3, #4
 800eff8:	4619      	mov	r1, r3
 800effa:	4610      	mov	r0, r2
 800effc:	f7fe fb53 	bl	800d6a6 <vListInsert>
}
 800f000:	e010      	b.n	800f024 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f002:	4b0e      	ldr	r3, [pc, #56]	; (800f03c <prvAddCurrentTaskToDelayedList+0xa0>)
 800f004:	681a      	ldr	r2, [r3, #0]
 800f006:	4b0a      	ldr	r3, [pc, #40]	; (800f030 <prvAddCurrentTaskToDelayedList+0x94>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	3304      	adds	r3, #4
 800f00c:	4619      	mov	r1, r3
 800f00e:	4610      	mov	r0, r2
 800f010:	f7fe fb49 	bl	800d6a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f014:	4b0a      	ldr	r3, [pc, #40]	; (800f040 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	68ba      	ldr	r2, [r7, #8]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d202      	bcs.n	800f024 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f01e:	4a08      	ldr	r2, [pc, #32]	; (800f040 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	6013      	str	r3, [r2, #0]
}
 800f024:	bf00      	nop
 800f026:	3710      	adds	r7, #16
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	20002d0c 	.word	0x20002d0c
 800f030:	20002834 	.word	0x20002834
 800f034:	20002cf4 	.word	0x20002cf4
 800f038:	20002cc4 	.word	0x20002cc4
 800f03c:	20002cc0 	.word	0x20002cc0
 800f040:	20002d28 	.word	0x20002d28

0800f044 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b08a      	sub	sp, #40	; 0x28
 800f048:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f04a:	2300      	movs	r3, #0
 800f04c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f04e:	f000 faff 	bl	800f650 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f052:	4b1c      	ldr	r3, [pc, #112]	; (800f0c4 <xTimerCreateTimerTask+0x80>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d021      	beq.n	800f09e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f05a:	2300      	movs	r3, #0
 800f05c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f05e:	2300      	movs	r3, #0
 800f060:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f062:	1d3a      	adds	r2, r7, #4
 800f064:	f107 0108 	add.w	r1, r7, #8
 800f068:	f107 030c 	add.w	r3, r7, #12
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7fe f84f 	bl	800d110 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f072:	6879      	ldr	r1, [r7, #4]
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	68fa      	ldr	r2, [r7, #12]
 800f078:	9202      	str	r2, [sp, #8]
 800f07a:	9301      	str	r3, [sp, #4]
 800f07c:	2302      	movs	r3, #2
 800f07e:	9300      	str	r3, [sp, #0]
 800f080:	2300      	movs	r3, #0
 800f082:	460a      	mov	r2, r1
 800f084:	4910      	ldr	r1, [pc, #64]	; (800f0c8 <xTimerCreateTimerTask+0x84>)
 800f086:	4811      	ldr	r0, [pc, #68]	; (800f0cc <xTimerCreateTimerTask+0x88>)
 800f088:	f7ff f844 	bl	800e114 <xTaskCreateStatic>
 800f08c:	4602      	mov	r2, r0
 800f08e:	4b10      	ldr	r3, [pc, #64]	; (800f0d0 <xTimerCreateTimerTask+0x8c>)
 800f090:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f092:	4b0f      	ldr	r3, [pc, #60]	; (800f0d0 <xTimerCreateTimerTask+0x8c>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d001      	beq.n	800f09e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f09a:	2301      	movs	r3, #1
 800f09c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d109      	bne.n	800f0b8 <xTimerCreateTimerTask+0x74>
 800f0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a8:	f383 8811 	msr	BASEPRI, r3
 800f0ac:	f3bf 8f6f 	isb	sy
 800f0b0:	f3bf 8f4f 	dsb	sy
 800f0b4:	613b      	str	r3, [r7, #16]
 800f0b6:	e7fe      	b.n	800f0b6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800f0b8:	697b      	ldr	r3, [r7, #20]
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3718      	adds	r7, #24
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	20002d64 	.word	0x20002d64
 800f0c8:	080126cc 	.word	0x080126cc
 800f0cc:	0800f205 	.word	0x0800f205
 800f0d0:	20002d68 	.word	0x20002d68

0800f0d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b08a      	sub	sp, #40	; 0x28
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	607a      	str	r2, [r7, #4]
 800f0e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d109      	bne.n	800f100 <xTimerGenericCommand+0x2c>
 800f0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f0:	f383 8811 	msr	BASEPRI, r3
 800f0f4:	f3bf 8f6f 	isb	sy
 800f0f8:	f3bf 8f4f 	dsb	sy
 800f0fc:	623b      	str	r3, [r7, #32]
 800f0fe:	e7fe      	b.n	800f0fe <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f100:	4b19      	ldr	r3, [pc, #100]	; (800f168 <xTimerGenericCommand+0x94>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d02a      	beq.n	800f15e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	2b05      	cmp	r3, #5
 800f118:	dc18      	bgt.n	800f14c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f11a:	f7ff fe9d 	bl	800ee58 <xTaskGetSchedulerState>
 800f11e:	4603      	mov	r3, r0
 800f120:	2b02      	cmp	r3, #2
 800f122:	d109      	bne.n	800f138 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f124:	4b10      	ldr	r3, [pc, #64]	; (800f168 <xTimerGenericCommand+0x94>)
 800f126:	6818      	ldr	r0, [r3, #0]
 800f128:	f107 0110 	add.w	r1, r7, #16
 800f12c:	2300      	movs	r3, #0
 800f12e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f130:	f7fe fc1a 	bl	800d968 <xQueueGenericSend>
 800f134:	6278      	str	r0, [r7, #36]	; 0x24
 800f136:	e012      	b.n	800f15e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f138:	4b0b      	ldr	r3, [pc, #44]	; (800f168 <xTimerGenericCommand+0x94>)
 800f13a:	6818      	ldr	r0, [r3, #0]
 800f13c:	f107 0110 	add.w	r1, r7, #16
 800f140:	2300      	movs	r3, #0
 800f142:	2200      	movs	r2, #0
 800f144:	f7fe fc10 	bl	800d968 <xQueueGenericSend>
 800f148:	6278      	str	r0, [r7, #36]	; 0x24
 800f14a:	e008      	b.n	800f15e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f14c:	4b06      	ldr	r3, [pc, #24]	; (800f168 <xTimerGenericCommand+0x94>)
 800f14e:	6818      	ldr	r0, [r3, #0]
 800f150:	f107 0110 	add.w	r1, r7, #16
 800f154:	2300      	movs	r3, #0
 800f156:	683a      	ldr	r2, [r7, #0]
 800f158:	f7fe fd00 	bl	800db5c <xQueueGenericSendFromISR>
 800f15c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f160:	4618      	mov	r0, r3
 800f162:	3728      	adds	r7, #40	; 0x28
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}
 800f168:	20002d64 	.word	0x20002d64

0800f16c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b088      	sub	sp, #32
 800f170:	af02      	add	r7, sp, #8
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f176:	4b22      	ldr	r3, [pc, #136]	; (800f200 <prvProcessExpiredTimer+0x94>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	68db      	ldr	r3, [r3, #12]
 800f17c:	68db      	ldr	r3, [r3, #12]
 800f17e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	3304      	adds	r3, #4
 800f184:	4618      	mov	r0, r3
 800f186:	f7fe fac7 	bl	800d718 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f18a:	697b      	ldr	r3, [r7, #20]
 800f18c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f190:	f003 0304 	and.w	r3, r3, #4
 800f194:	2b00      	cmp	r3, #0
 800f196:	d021      	beq.n	800f1dc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	699a      	ldr	r2, [r3, #24]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	18d1      	adds	r1, r2, r3
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	683a      	ldr	r2, [r7, #0]
 800f1a4:	6978      	ldr	r0, [r7, #20]
 800f1a6:	f000 f8d1 	bl	800f34c <prvInsertTimerInActiveList>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d01e      	beq.n	800f1ee <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	9300      	str	r3, [sp, #0]
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	687a      	ldr	r2, [r7, #4]
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	6978      	ldr	r0, [r7, #20]
 800f1bc:	f7ff ff8a 	bl	800f0d4 <xTimerGenericCommand>
 800f1c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d112      	bne.n	800f1ee <prvProcessExpiredTimer+0x82>
 800f1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1cc:	f383 8811 	msr	BASEPRI, r3
 800f1d0:	f3bf 8f6f 	isb	sy
 800f1d4:	f3bf 8f4f 	dsb	sy
 800f1d8:	60fb      	str	r3, [r7, #12]
 800f1da:	e7fe      	b.n	800f1da <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1e2:	f023 0301 	bic.w	r3, r3, #1
 800f1e6:	b2da      	uxtb	r2, r3
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	6a1b      	ldr	r3, [r3, #32]
 800f1f2:	6978      	ldr	r0, [r7, #20]
 800f1f4:	4798      	blx	r3
}
 800f1f6:	bf00      	nop
 800f1f8:	3718      	adds	r7, #24
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	20002d5c 	.word	0x20002d5c

0800f204 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f20c:	f107 0308 	add.w	r3, r7, #8
 800f210:	4618      	mov	r0, r3
 800f212:	f000 f857 	bl	800f2c4 <prvGetNextExpireTime>
 800f216:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	4619      	mov	r1, r3
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f000 f803 	bl	800f228 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f222:	f000 f8d5 	bl	800f3d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f226:	e7f1      	b.n	800f20c <prvTimerTask+0x8>

0800f228 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f232:	f7ff f9a5 	bl	800e580 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f236:	f107 0308 	add.w	r3, r7, #8
 800f23a:	4618      	mov	r0, r3
 800f23c:	f000 f866 	bl	800f30c <prvSampleTimeNow>
 800f240:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d130      	bne.n	800f2aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d10a      	bne.n	800f264 <prvProcessTimerOrBlockTask+0x3c>
 800f24e:	687a      	ldr	r2, [r7, #4]
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	429a      	cmp	r2, r3
 800f254:	d806      	bhi.n	800f264 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f256:	f7ff f9a1 	bl	800e59c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f25a:	68f9      	ldr	r1, [r7, #12]
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f7ff ff85 	bl	800f16c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f262:	e024      	b.n	800f2ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d008      	beq.n	800f27c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f26a:	4b13      	ldr	r3, [pc, #76]	; (800f2b8 <prvProcessTimerOrBlockTask+0x90>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d101      	bne.n	800f278 <prvProcessTimerOrBlockTask+0x50>
 800f274:	2301      	movs	r3, #1
 800f276:	e000      	b.n	800f27a <prvProcessTimerOrBlockTask+0x52>
 800f278:	2300      	movs	r3, #0
 800f27a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f27c:	4b0f      	ldr	r3, [pc, #60]	; (800f2bc <prvProcessTimerOrBlockTask+0x94>)
 800f27e:	6818      	ldr	r0, [r3, #0]
 800f280:	687a      	ldr	r2, [r7, #4]
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	1ad3      	subs	r3, r2, r3
 800f286:	683a      	ldr	r2, [r7, #0]
 800f288:	4619      	mov	r1, r3
 800f28a:	f7fe ff0f 	bl	800e0ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f28e:	f7ff f985 	bl	800e59c <xTaskResumeAll>
 800f292:	4603      	mov	r3, r0
 800f294:	2b00      	cmp	r3, #0
 800f296:	d10a      	bne.n	800f2ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f298:	4b09      	ldr	r3, [pc, #36]	; (800f2c0 <prvProcessTimerOrBlockTask+0x98>)
 800f29a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f29e:	601a      	str	r2, [r3, #0]
 800f2a0:	f3bf 8f4f 	dsb	sy
 800f2a4:	f3bf 8f6f 	isb	sy
}
 800f2a8:	e001      	b.n	800f2ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f2aa:	f7ff f977 	bl	800e59c <xTaskResumeAll>
}
 800f2ae:	bf00      	nop
 800f2b0:	3710      	adds	r7, #16
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	20002d60 	.word	0x20002d60
 800f2bc:	20002d64 	.word	0x20002d64
 800f2c0:	e000ed04 	.word	0xe000ed04

0800f2c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b085      	sub	sp, #20
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f2cc:	4b0e      	ldr	r3, [pc, #56]	; (800f308 <prvGetNextExpireTime+0x44>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d101      	bne.n	800f2da <prvGetNextExpireTime+0x16>
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	e000      	b.n	800f2dc <prvGetNextExpireTime+0x18>
 800f2da:	2200      	movs	r2, #0
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d105      	bne.n	800f2f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f2e8:	4b07      	ldr	r3, [pc, #28]	; (800f308 <prvGetNextExpireTime+0x44>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	68db      	ldr	r3, [r3, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	60fb      	str	r3, [r7, #12]
 800f2f2:	e001      	b.n	800f2f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3714      	adds	r7, #20
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr
 800f306:	bf00      	nop
 800f308:	20002d5c 	.word	0x20002d5c

0800f30c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b084      	sub	sp, #16
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f314:	f7ff f9de 	bl	800e6d4 <xTaskGetTickCount>
 800f318:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f31a:	4b0b      	ldr	r3, [pc, #44]	; (800f348 <prvSampleTimeNow+0x3c>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	68fa      	ldr	r2, [r7, #12]
 800f320:	429a      	cmp	r2, r3
 800f322:	d205      	bcs.n	800f330 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f324:	f000 f930 	bl	800f588 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2201      	movs	r2, #1
 800f32c:	601a      	str	r2, [r3, #0]
 800f32e:	e002      	b.n	800f336 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2200      	movs	r2, #0
 800f334:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f336:	4a04      	ldr	r2, [pc, #16]	; (800f348 <prvSampleTimeNow+0x3c>)
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f33c:	68fb      	ldr	r3, [r7, #12]
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3710      	adds	r7, #16
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
 800f346:	bf00      	nop
 800f348:	20002d6c 	.word	0x20002d6c

0800f34c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b086      	sub	sp, #24
 800f350:	af00      	add	r7, sp, #0
 800f352:	60f8      	str	r0, [r7, #12]
 800f354:	60b9      	str	r1, [r7, #8]
 800f356:	607a      	str	r2, [r7, #4]
 800f358:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f35a:	2300      	movs	r3, #0
 800f35c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	68ba      	ldr	r2, [r7, #8]
 800f362:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	68fa      	ldr	r2, [r7, #12]
 800f368:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f36a:	68ba      	ldr	r2, [r7, #8]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d812      	bhi.n	800f398 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	1ad2      	subs	r2, r2, r3
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	699b      	ldr	r3, [r3, #24]
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d302      	bcc.n	800f386 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f380:	2301      	movs	r3, #1
 800f382:	617b      	str	r3, [r7, #20]
 800f384:	e01b      	b.n	800f3be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f386:	4b10      	ldr	r3, [pc, #64]	; (800f3c8 <prvInsertTimerInActiveList+0x7c>)
 800f388:	681a      	ldr	r2, [r3, #0]
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	3304      	adds	r3, #4
 800f38e:	4619      	mov	r1, r3
 800f390:	4610      	mov	r0, r2
 800f392:	f7fe f988 	bl	800d6a6 <vListInsert>
 800f396:	e012      	b.n	800f3be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d206      	bcs.n	800f3ae <prvInsertTimerInActiveList+0x62>
 800f3a0:	68ba      	ldr	r2, [r7, #8]
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d302      	bcc.n	800f3ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f3a8:	2301      	movs	r3, #1
 800f3aa:	617b      	str	r3, [r7, #20]
 800f3ac:	e007      	b.n	800f3be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f3ae:	4b07      	ldr	r3, [pc, #28]	; (800f3cc <prvInsertTimerInActiveList+0x80>)
 800f3b0:	681a      	ldr	r2, [r3, #0]
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	3304      	adds	r3, #4
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	4610      	mov	r0, r2
 800f3ba:	f7fe f974 	bl	800d6a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f3be:	697b      	ldr	r3, [r7, #20]
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3718      	adds	r7, #24
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	20002d60 	.word	0x20002d60
 800f3cc:	20002d5c 	.word	0x20002d5c

0800f3d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b08e      	sub	sp, #56	; 0x38
 800f3d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f3d6:	e0c6      	b.n	800f566 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	da17      	bge.n	800f40e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f3de:	1d3b      	adds	r3, r7, #4
 800f3e0:	3304      	adds	r3, #4
 800f3e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d109      	bne.n	800f3fe <prvProcessReceivedCommands+0x2e>
 800f3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ee:	f383 8811 	msr	BASEPRI, r3
 800f3f2:	f3bf 8f6f 	isb	sy
 800f3f6:	f3bf 8f4f 	dsb	sy
 800f3fa:	61fb      	str	r3, [r7, #28]
 800f3fc:	e7fe      	b.n	800f3fc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f404:	6850      	ldr	r0, [r2, #4]
 800f406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f408:	6892      	ldr	r2, [r2, #8]
 800f40a:	4611      	mov	r1, r2
 800f40c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2b00      	cmp	r3, #0
 800f412:	f2c0 80a7 	blt.w	800f564 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41c:	695b      	ldr	r3, [r3, #20]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d004      	beq.n	800f42c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f424:	3304      	adds	r3, #4
 800f426:	4618      	mov	r0, r3
 800f428:	f7fe f976 	bl	800d718 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f42c:	463b      	mov	r3, r7
 800f42e:	4618      	mov	r0, r3
 800f430:	f7ff ff6c 	bl	800f30c <prvSampleTimeNow>
 800f434:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2b09      	cmp	r3, #9
 800f43a:	f200 8094 	bhi.w	800f566 <prvProcessReceivedCommands+0x196>
 800f43e:	a201      	add	r2, pc, #4	; (adr r2, 800f444 <prvProcessReceivedCommands+0x74>)
 800f440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f444:	0800f46d 	.word	0x0800f46d
 800f448:	0800f46d 	.word	0x0800f46d
 800f44c:	0800f46d 	.word	0x0800f46d
 800f450:	0800f4df 	.word	0x0800f4df
 800f454:	0800f4f3 	.word	0x0800f4f3
 800f458:	0800f53b 	.word	0x0800f53b
 800f45c:	0800f46d 	.word	0x0800f46d
 800f460:	0800f46d 	.word	0x0800f46d
 800f464:	0800f4df 	.word	0x0800f4df
 800f468:	0800f4f3 	.word	0x0800f4f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f472:	f043 0301 	orr.w	r3, r3, #1
 800f476:	b2da      	uxtb	r2, r3
 800f478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f47e:	68ba      	ldr	r2, [r7, #8]
 800f480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f482:	699b      	ldr	r3, [r3, #24]
 800f484:	18d1      	adds	r1, r2, r3
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f48a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f48c:	f7ff ff5e 	bl	800f34c <prvInsertTimerInActiveList>
 800f490:	4603      	mov	r3, r0
 800f492:	2b00      	cmp	r3, #0
 800f494:	d067      	beq.n	800f566 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f498:	6a1b      	ldr	r3, [r3, #32]
 800f49a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f49c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4a4:	f003 0304 	and.w	r3, r3, #4
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d05c      	beq.n	800f566 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f4ac:	68ba      	ldr	r2, [r7, #8]
 800f4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b0:	699b      	ldr	r3, [r3, #24]
 800f4b2:	441a      	add	r2, r3
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	9300      	str	r3, [sp, #0]
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	2100      	movs	r1, #0
 800f4bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4be:	f7ff fe09 	bl	800f0d4 <xTimerGenericCommand>
 800f4c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f4c4:	6a3b      	ldr	r3, [r7, #32]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d14d      	bne.n	800f566 <prvProcessReceivedCommands+0x196>
 800f4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ce:	f383 8811 	msr	BASEPRI, r3
 800f4d2:	f3bf 8f6f 	isb	sy
 800f4d6:	f3bf 8f4f 	dsb	sy
 800f4da:	61bb      	str	r3, [r7, #24]
 800f4dc:	e7fe      	b.n	800f4dc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4e4:	f023 0301 	bic.w	r3, r3, #1
 800f4e8:	b2da      	uxtb	r2, r3
 800f4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f4f0:	e039      	b.n	800f566 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4f8:	f043 0301 	orr.w	r3, r3, #1
 800f4fc:	b2da      	uxtb	r2, r3
 800f4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f500:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f504:	68ba      	ldr	r2, [r7, #8]
 800f506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f508:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50c:	699b      	ldr	r3, [r3, #24]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d109      	bne.n	800f526 <prvProcessReceivedCommands+0x156>
 800f512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f516:	f383 8811 	msr	BASEPRI, r3
 800f51a:	f3bf 8f6f 	isb	sy
 800f51e:	f3bf 8f4f 	dsb	sy
 800f522:	617b      	str	r3, [r7, #20]
 800f524:	e7fe      	b.n	800f524 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f528:	699a      	ldr	r2, [r3, #24]
 800f52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52c:	18d1      	adds	r1, r2, r3
 800f52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f534:	f7ff ff0a 	bl	800f34c <prvInsertTimerInActiveList>
					break;
 800f538:	e015      	b.n	800f566 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f53c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f540:	f003 0302 	and.w	r3, r3, #2
 800f544:	2b00      	cmp	r3, #0
 800f546:	d103      	bne.n	800f550 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800f548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f54a:	f000 fbe3 	bl	800fd14 <vPortFree>
 800f54e:	e00a      	b.n	800f566 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f552:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f556:	f023 0301 	bic.w	r3, r3, #1
 800f55a:	b2da      	uxtb	r2, r3
 800f55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f562:	e000      	b.n	800f566 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f564:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f566:	4b07      	ldr	r3, [pc, #28]	; (800f584 <prvProcessReceivedCommands+0x1b4>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	1d39      	adds	r1, r7, #4
 800f56c:	2200      	movs	r2, #0
 800f56e:	4618      	mov	r0, r3
 800f570:	f7fe fb88 	bl	800dc84 <xQueueReceive>
 800f574:	4603      	mov	r3, r0
 800f576:	2b00      	cmp	r3, #0
 800f578:	f47f af2e 	bne.w	800f3d8 <prvProcessReceivedCommands+0x8>
	}
}
 800f57c:	bf00      	nop
 800f57e:	3730      	adds	r7, #48	; 0x30
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	20002d64 	.word	0x20002d64

0800f588 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b088      	sub	sp, #32
 800f58c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f58e:	e047      	b.n	800f620 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f590:	4b2d      	ldr	r3, [pc, #180]	; (800f648 <prvSwitchTimerLists+0xc0>)
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	68db      	ldr	r3, [r3, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f59a:	4b2b      	ldr	r3, [pc, #172]	; (800f648 <prvSwitchTimerLists+0xc0>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	68db      	ldr	r3, [r3, #12]
 800f5a0:	68db      	ldr	r3, [r3, #12]
 800f5a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	3304      	adds	r3, #4
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7fe f8b5 	bl	800d718 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	6a1b      	ldr	r3, [r3, #32]
 800f5b2:	68f8      	ldr	r0, [r7, #12]
 800f5b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5bc:	f003 0304 	and.w	r3, r3, #4
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d02d      	beq.n	800f620 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	699b      	ldr	r3, [r3, #24]
 800f5c8:	693a      	ldr	r2, [r7, #16]
 800f5ca:	4413      	add	r3, r2
 800f5cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f5ce:	68ba      	ldr	r2, [r7, #8]
 800f5d0:	693b      	ldr	r3, [r7, #16]
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d90e      	bls.n	800f5f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	68ba      	ldr	r2, [r7, #8]
 800f5da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	68fa      	ldr	r2, [r7, #12]
 800f5e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f5e2:	4b19      	ldr	r3, [pc, #100]	; (800f648 <prvSwitchTimerLists+0xc0>)
 800f5e4:	681a      	ldr	r2, [r3, #0]
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	3304      	adds	r3, #4
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	4610      	mov	r0, r2
 800f5ee:	f7fe f85a 	bl	800d6a6 <vListInsert>
 800f5f2:	e015      	b.n	800f620 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	9300      	str	r3, [sp, #0]
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	693a      	ldr	r2, [r7, #16]
 800f5fc:	2100      	movs	r1, #0
 800f5fe:	68f8      	ldr	r0, [r7, #12]
 800f600:	f7ff fd68 	bl	800f0d4 <xTimerGenericCommand>
 800f604:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d109      	bne.n	800f620 <prvSwitchTimerLists+0x98>
 800f60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f610:	f383 8811 	msr	BASEPRI, r3
 800f614:	f3bf 8f6f 	isb	sy
 800f618:	f3bf 8f4f 	dsb	sy
 800f61c:	603b      	str	r3, [r7, #0]
 800f61e:	e7fe      	b.n	800f61e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f620:	4b09      	ldr	r3, [pc, #36]	; (800f648 <prvSwitchTimerLists+0xc0>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d1b2      	bne.n	800f590 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f62a:	4b07      	ldr	r3, [pc, #28]	; (800f648 <prvSwitchTimerLists+0xc0>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f630:	4b06      	ldr	r3, [pc, #24]	; (800f64c <prvSwitchTimerLists+0xc4>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	4a04      	ldr	r2, [pc, #16]	; (800f648 <prvSwitchTimerLists+0xc0>)
 800f636:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f638:	4a04      	ldr	r2, [pc, #16]	; (800f64c <prvSwitchTimerLists+0xc4>)
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	6013      	str	r3, [r2, #0]
}
 800f63e:	bf00      	nop
 800f640:	3718      	adds	r7, #24
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}
 800f646:	bf00      	nop
 800f648:	20002d5c 	.word	0x20002d5c
 800f64c:	20002d60 	.word	0x20002d60

0800f650 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b082      	sub	sp, #8
 800f654:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f656:	f000 f981 	bl	800f95c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f65a:	4b15      	ldr	r3, [pc, #84]	; (800f6b0 <prvCheckForValidListAndQueue+0x60>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d120      	bne.n	800f6a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f662:	4814      	ldr	r0, [pc, #80]	; (800f6b4 <prvCheckForValidListAndQueue+0x64>)
 800f664:	f7fd ffce 	bl	800d604 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f668:	4813      	ldr	r0, [pc, #76]	; (800f6b8 <prvCheckForValidListAndQueue+0x68>)
 800f66a:	f7fd ffcb 	bl	800d604 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f66e:	4b13      	ldr	r3, [pc, #76]	; (800f6bc <prvCheckForValidListAndQueue+0x6c>)
 800f670:	4a10      	ldr	r2, [pc, #64]	; (800f6b4 <prvCheckForValidListAndQueue+0x64>)
 800f672:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f674:	4b12      	ldr	r3, [pc, #72]	; (800f6c0 <prvCheckForValidListAndQueue+0x70>)
 800f676:	4a10      	ldr	r2, [pc, #64]	; (800f6b8 <prvCheckForValidListAndQueue+0x68>)
 800f678:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f67a:	2300      	movs	r3, #0
 800f67c:	9300      	str	r3, [sp, #0]
 800f67e:	4b11      	ldr	r3, [pc, #68]	; (800f6c4 <prvCheckForValidListAndQueue+0x74>)
 800f680:	4a11      	ldr	r2, [pc, #68]	; (800f6c8 <prvCheckForValidListAndQueue+0x78>)
 800f682:	2110      	movs	r1, #16
 800f684:	200a      	movs	r0, #10
 800f686:	f7fe f8d9 	bl	800d83c <xQueueGenericCreateStatic>
 800f68a:	4602      	mov	r2, r0
 800f68c:	4b08      	ldr	r3, [pc, #32]	; (800f6b0 <prvCheckForValidListAndQueue+0x60>)
 800f68e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f690:	4b07      	ldr	r3, [pc, #28]	; (800f6b0 <prvCheckForValidListAndQueue+0x60>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d005      	beq.n	800f6a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f698:	4b05      	ldr	r3, [pc, #20]	; (800f6b0 <prvCheckForValidListAndQueue+0x60>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	490b      	ldr	r1, [pc, #44]	; (800f6cc <prvCheckForValidListAndQueue+0x7c>)
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7fe fcdc 	bl	800e05c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f6a4:	f000 f988 	bl	800f9b8 <vPortExitCritical>
}
 800f6a8:	bf00      	nop
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	20002d64 	.word	0x20002d64
 800f6b4:	20002d34 	.word	0x20002d34
 800f6b8:	20002d48 	.word	0x20002d48
 800f6bc:	20002d5c 	.word	0x20002d5c
 800f6c0:	20002d60 	.word	0x20002d60
 800f6c4:	20002e10 	.word	0x20002e10
 800f6c8:	20002d70 	.word	0x20002d70
 800f6cc:	080126d4 	.word	0x080126d4

0800f6d0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b08a      	sub	sp, #40	; 0x28
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	60f8      	str	r0, [r7, #12]
 800f6d8:	60b9      	str	r1, [r7, #8]
 800f6da:	607a      	str	r2, [r7, #4]
 800f6dc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800f6de:	f06f 0301 	mvn.w	r3, #1
 800f6e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f6f0:	4b06      	ldr	r3, [pc, #24]	; (800f70c <xTimerPendFunctionCallFromISR+0x3c>)
 800f6f2:	6818      	ldr	r0, [r3, #0]
 800f6f4:	f107 0114 	add.w	r1, r7, #20
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	683a      	ldr	r2, [r7, #0]
 800f6fc:	f7fe fa2e 	bl	800db5c <xQueueGenericSendFromISR>
 800f700:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800f702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f704:	4618      	mov	r0, r3
 800f706:	3728      	adds	r7, #40	; 0x28
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}
 800f70c:	20002d64 	.word	0x20002d64

0800f710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f710:	b480      	push	{r7}
 800f712:	b085      	sub	sp, #20
 800f714:	af00      	add	r7, sp, #0
 800f716:	60f8      	str	r0, [r7, #12]
 800f718:	60b9      	str	r1, [r7, #8]
 800f71a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	3b04      	subs	r3, #4
 800f720:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	3b04      	subs	r3, #4
 800f72e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	f023 0201 	bic.w	r2, r3, #1
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	3b04      	subs	r3, #4
 800f73e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f740:	4a0c      	ldr	r2, [pc, #48]	; (800f774 <pxPortInitialiseStack+0x64>)
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	3b14      	subs	r3, #20
 800f74a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f74c:	687a      	ldr	r2, [r7, #4]
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	3b04      	subs	r3, #4
 800f756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	f06f 0202 	mvn.w	r2, #2
 800f75e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	3b20      	subs	r3, #32
 800f764:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f766:	68fb      	ldr	r3, [r7, #12]
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3714      	adds	r7, #20
 800f76c:	46bd      	mov	sp, r7
 800f76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f772:	4770      	bx	lr
 800f774:	0800f779 	.word	0x0800f779

0800f778 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f778:	b480      	push	{r7}
 800f77a:	b085      	sub	sp, #20
 800f77c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f77e:	2300      	movs	r3, #0
 800f780:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f782:	4b11      	ldr	r3, [pc, #68]	; (800f7c8 <prvTaskExitError+0x50>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f78a:	d009      	beq.n	800f7a0 <prvTaskExitError+0x28>
 800f78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f790:	f383 8811 	msr	BASEPRI, r3
 800f794:	f3bf 8f6f 	isb	sy
 800f798:	f3bf 8f4f 	dsb	sy
 800f79c:	60fb      	str	r3, [r7, #12]
 800f79e:	e7fe      	b.n	800f79e <prvTaskExitError+0x26>
 800f7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a4:	f383 8811 	msr	BASEPRI, r3
 800f7a8:	f3bf 8f6f 	isb	sy
 800f7ac:	f3bf 8f4f 	dsb	sy
 800f7b0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f7b2:	bf00      	nop
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d0fc      	beq.n	800f7b4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f7ba:	bf00      	nop
 800f7bc:	3714      	adds	r7, #20
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c4:	4770      	bx	lr
 800f7c6:	bf00      	nop
 800f7c8:	200001bc 	.word	0x200001bc
 800f7cc:	00000000 	.word	0x00000000

0800f7d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f7d0:	4b07      	ldr	r3, [pc, #28]	; (800f7f0 <pxCurrentTCBConst2>)
 800f7d2:	6819      	ldr	r1, [r3, #0]
 800f7d4:	6808      	ldr	r0, [r1, #0]
 800f7d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7da:	f380 8809 	msr	PSP, r0
 800f7de:	f3bf 8f6f 	isb	sy
 800f7e2:	f04f 0000 	mov.w	r0, #0
 800f7e6:	f380 8811 	msr	BASEPRI, r0
 800f7ea:	4770      	bx	lr
 800f7ec:	f3af 8000 	nop.w

0800f7f0 <pxCurrentTCBConst2>:
 800f7f0:	20002834 	.word	0x20002834
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f7f4:	bf00      	nop
 800f7f6:	bf00      	nop

0800f7f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f7f8:	4808      	ldr	r0, [pc, #32]	; (800f81c <prvPortStartFirstTask+0x24>)
 800f7fa:	6800      	ldr	r0, [r0, #0]
 800f7fc:	6800      	ldr	r0, [r0, #0]
 800f7fe:	f380 8808 	msr	MSP, r0
 800f802:	f04f 0000 	mov.w	r0, #0
 800f806:	f380 8814 	msr	CONTROL, r0
 800f80a:	b662      	cpsie	i
 800f80c:	b661      	cpsie	f
 800f80e:	f3bf 8f4f 	dsb	sy
 800f812:	f3bf 8f6f 	isb	sy
 800f816:	df00      	svc	0
 800f818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f81a:	bf00      	nop
 800f81c:	e000ed08 	.word	0xe000ed08

0800f820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b086      	sub	sp, #24
 800f824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f826:	4b44      	ldr	r3, [pc, #272]	; (800f938 <xPortStartScheduler+0x118>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	4a44      	ldr	r2, [pc, #272]	; (800f93c <xPortStartScheduler+0x11c>)
 800f82c:	4293      	cmp	r3, r2
 800f82e:	d109      	bne.n	800f844 <xPortStartScheduler+0x24>
 800f830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f834:	f383 8811 	msr	BASEPRI, r3
 800f838:	f3bf 8f6f 	isb	sy
 800f83c:	f3bf 8f4f 	dsb	sy
 800f840:	613b      	str	r3, [r7, #16]
 800f842:	e7fe      	b.n	800f842 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f844:	4b3c      	ldr	r3, [pc, #240]	; (800f938 <xPortStartScheduler+0x118>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4a3d      	ldr	r2, [pc, #244]	; (800f940 <xPortStartScheduler+0x120>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d109      	bne.n	800f862 <xPortStartScheduler+0x42>
 800f84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f852:	f383 8811 	msr	BASEPRI, r3
 800f856:	f3bf 8f6f 	isb	sy
 800f85a:	f3bf 8f4f 	dsb	sy
 800f85e:	60fb      	str	r3, [r7, #12]
 800f860:	e7fe      	b.n	800f860 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f862:	4b38      	ldr	r3, [pc, #224]	; (800f944 <xPortStartScheduler+0x124>)
 800f864:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	781b      	ldrb	r3, [r3, #0]
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	22ff      	movs	r2, #255	; 0xff
 800f872:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	b2db      	uxtb	r3, r3
 800f87a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f87c:	78fb      	ldrb	r3, [r7, #3]
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f884:	b2da      	uxtb	r2, r3
 800f886:	4b30      	ldr	r3, [pc, #192]	; (800f948 <xPortStartScheduler+0x128>)
 800f888:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f88a:	4b30      	ldr	r3, [pc, #192]	; (800f94c <xPortStartScheduler+0x12c>)
 800f88c:	2207      	movs	r2, #7
 800f88e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f890:	e009      	b.n	800f8a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f892:	4b2e      	ldr	r3, [pc, #184]	; (800f94c <xPortStartScheduler+0x12c>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	3b01      	subs	r3, #1
 800f898:	4a2c      	ldr	r2, [pc, #176]	; (800f94c <xPortStartScheduler+0x12c>)
 800f89a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f89c:	78fb      	ldrb	r3, [r7, #3]
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	005b      	lsls	r3, r3, #1
 800f8a2:	b2db      	uxtb	r3, r3
 800f8a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f8a6:	78fb      	ldrb	r3, [r7, #3]
 800f8a8:	b2db      	uxtb	r3, r3
 800f8aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8ae:	2b80      	cmp	r3, #128	; 0x80
 800f8b0:	d0ef      	beq.n	800f892 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f8b2:	4b26      	ldr	r3, [pc, #152]	; (800f94c <xPortStartScheduler+0x12c>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f1c3 0307 	rsb	r3, r3, #7
 800f8ba:	2b04      	cmp	r3, #4
 800f8bc:	d009      	beq.n	800f8d2 <xPortStartScheduler+0xb2>
 800f8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c2:	f383 8811 	msr	BASEPRI, r3
 800f8c6:	f3bf 8f6f 	isb	sy
 800f8ca:	f3bf 8f4f 	dsb	sy
 800f8ce:	60bb      	str	r3, [r7, #8]
 800f8d0:	e7fe      	b.n	800f8d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f8d2:	4b1e      	ldr	r3, [pc, #120]	; (800f94c <xPortStartScheduler+0x12c>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	021b      	lsls	r3, r3, #8
 800f8d8:	4a1c      	ldr	r2, [pc, #112]	; (800f94c <xPortStartScheduler+0x12c>)
 800f8da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f8dc:	4b1b      	ldr	r3, [pc, #108]	; (800f94c <xPortStartScheduler+0x12c>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f8e4:	4a19      	ldr	r2, [pc, #100]	; (800f94c <xPortStartScheduler+0x12c>)
 800f8e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	b2da      	uxtb	r2, r3
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f8f0:	4b17      	ldr	r3, [pc, #92]	; (800f950 <xPortStartScheduler+0x130>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	4a16      	ldr	r2, [pc, #88]	; (800f950 <xPortStartScheduler+0x130>)
 800f8f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f8fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f8fc:	4b14      	ldr	r3, [pc, #80]	; (800f950 <xPortStartScheduler+0x130>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	4a13      	ldr	r2, [pc, #76]	; (800f950 <xPortStartScheduler+0x130>)
 800f902:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f906:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f908:	f000 f8d6 	bl	800fab8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f90c:	4b11      	ldr	r3, [pc, #68]	; (800f954 <xPortStartScheduler+0x134>)
 800f90e:	2200      	movs	r2, #0
 800f910:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f912:	f000 f8f5 	bl	800fb00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f916:	4b10      	ldr	r3, [pc, #64]	; (800f958 <xPortStartScheduler+0x138>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	4a0f      	ldr	r2, [pc, #60]	; (800f958 <xPortStartScheduler+0x138>)
 800f91c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f920:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f922:	f7ff ff69 	bl	800f7f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f926:	f7fe ff9d 	bl	800e864 <vTaskSwitchContext>
	prvTaskExitError();
 800f92a:	f7ff ff25 	bl	800f778 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f92e:	2300      	movs	r3, #0
}
 800f930:	4618      	mov	r0, r3
 800f932:	3718      	adds	r7, #24
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}
 800f938:	e000ed00 	.word	0xe000ed00
 800f93c:	410fc271 	.word	0x410fc271
 800f940:	410fc270 	.word	0x410fc270
 800f944:	e000e400 	.word	0xe000e400
 800f948:	20002e60 	.word	0x20002e60
 800f94c:	20002e64 	.word	0x20002e64
 800f950:	e000ed20 	.word	0xe000ed20
 800f954:	200001bc 	.word	0x200001bc
 800f958:	e000ef34 	.word	0xe000ef34

0800f95c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
 800f962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f966:	f383 8811 	msr	BASEPRI, r3
 800f96a:	f3bf 8f6f 	isb	sy
 800f96e:	f3bf 8f4f 	dsb	sy
 800f972:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f974:	4b0e      	ldr	r3, [pc, #56]	; (800f9b0 <vPortEnterCritical+0x54>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	3301      	adds	r3, #1
 800f97a:	4a0d      	ldr	r2, [pc, #52]	; (800f9b0 <vPortEnterCritical+0x54>)
 800f97c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f97e:	4b0c      	ldr	r3, [pc, #48]	; (800f9b0 <vPortEnterCritical+0x54>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2b01      	cmp	r3, #1
 800f984:	d10e      	bne.n	800f9a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f986:	4b0b      	ldr	r3, [pc, #44]	; (800f9b4 <vPortEnterCritical+0x58>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	b2db      	uxtb	r3, r3
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d009      	beq.n	800f9a4 <vPortEnterCritical+0x48>
 800f990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f994:	f383 8811 	msr	BASEPRI, r3
 800f998:	f3bf 8f6f 	isb	sy
 800f99c:	f3bf 8f4f 	dsb	sy
 800f9a0:	603b      	str	r3, [r7, #0]
 800f9a2:	e7fe      	b.n	800f9a2 <vPortEnterCritical+0x46>
	}
}
 800f9a4:	bf00      	nop
 800f9a6:	370c      	adds	r7, #12
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr
 800f9b0:	200001bc 	.word	0x200001bc
 800f9b4:	e000ed04 	.word	0xe000ed04

0800f9b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b083      	sub	sp, #12
 800f9bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f9be:	4b11      	ldr	r3, [pc, #68]	; (800fa04 <vPortExitCritical+0x4c>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d109      	bne.n	800f9da <vPortExitCritical+0x22>
 800f9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ca:	f383 8811 	msr	BASEPRI, r3
 800f9ce:	f3bf 8f6f 	isb	sy
 800f9d2:	f3bf 8f4f 	dsb	sy
 800f9d6:	607b      	str	r3, [r7, #4]
 800f9d8:	e7fe      	b.n	800f9d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800f9da:	4b0a      	ldr	r3, [pc, #40]	; (800fa04 <vPortExitCritical+0x4c>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	3b01      	subs	r3, #1
 800f9e0:	4a08      	ldr	r2, [pc, #32]	; (800fa04 <vPortExitCritical+0x4c>)
 800f9e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f9e4:	4b07      	ldr	r3, [pc, #28]	; (800fa04 <vPortExitCritical+0x4c>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d104      	bne.n	800f9f6 <vPortExitCritical+0x3e>
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f9f6:	bf00      	nop
 800f9f8:	370c      	adds	r7, #12
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa00:	4770      	bx	lr
 800fa02:	bf00      	nop
 800fa04:	200001bc 	.word	0x200001bc
	...

0800fa10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fa10:	f3ef 8009 	mrs	r0, PSP
 800fa14:	f3bf 8f6f 	isb	sy
 800fa18:	4b15      	ldr	r3, [pc, #84]	; (800fa70 <pxCurrentTCBConst>)
 800fa1a:	681a      	ldr	r2, [r3, #0]
 800fa1c:	f01e 0f10 	tst.w	lr, #16
 800fa20:	bf08      	it	eq
 800fa22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fa26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa2a:	6010      	str	r0, [r2, #0]
 800fa2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fa30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fa34:	f380 8811 	msr	BASEPRI, r0
 800fa38:	f3bf 8f4f 	dsb	sy
 800fa3c:	f3bf 8f6f 	isb	sy
 800fa40:	f7fe ff10 	bl	800e864 <vTaskSwitchContext>
 800fa44:	f04f 0000 	mov.w	r0, #0
 800fa48:	f380 8811 	msr	BASEPRI, r0
 800fa4c:	bc09      	pop	{r0, r3}
 800fa4e:	6819      	ldr	r1, [r3, #0]
 800fa50:	6808      	ldr	r0, [r1, #0]
 800fa52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa56:	f01e 0f10 	tst.w	lr, #16
 800fa5a:	bf08      	it	eq
 800fa5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fa60:	f380 8809 	msr	PSP, r0
 800fa64:	f3bf 8f6f 	isb	sy
 800fa68:	4770      	bx	lr
 800fa6a:	bf00      	nop
 800fa6c:	f3af 8000 	nop.w

0800fa70 <pxCurrentTCBConst>:
 800fa70:	20002834 	.word	0x20002834
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fa74:	bf00      	nop
 800fa76:	bf00      	nop

0800fa78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b082      	sub	sp, #8
 800fa7c:	af00      	add	r7, sp, #0
	__asm volatile
 800fa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa82:	f383 8811 	msr	BASEPRI, r3
 800fa86:	f3bf 8f6f 	isb	sy
 800fa8a:	f3bf 8f4f 	dsb	sy
 800fa8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fa90:	f7fe fe30 	bl	800e6f4 <xTaskIncrementTick>
 800fa94:	4603      	mov	r3, r0
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d003      	beq.n	800faa2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fa9a:	4b06      	ldr	r3, [pc, #24]	; (800fab4 <SysTick_Handler+0x3c>)
 800fa9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faa0:	601a      	str	r2, [r3, #0]
 800faa2:	2300      	movs	r3, #0
 800faa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800faac:	bf00      	nop
 800faae:	3708      	adds	r7, #8
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	e000ed04 	.word	0xe000ed04

0800fab8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fab8:	b480      	push	{r7}
 800faba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fabc:	4b0b      	ldr	r3, [pc, #44]	; (800faec <vPortSetupTimerInterrupt+0x34>)
 800fabe:	2200      	movs	r2, #0
 800fac0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fac2:	4b0b      	ldr	r3, [pc, #44]	; (800faf0 <vPortSetupTimerInterrupt+0x38>)
 800fac4:	2200      	movs	r2, #0
 800fac6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fac8:	4b0a      	ldr	r3, [pc, #40]	; (800faf4 <vPortSetupTimerInterrupt+0x3c>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	4a0a      	ldr	r2, [pc, #40]	; (800faf8 <vPortSetupTimerInterrupt+0x40>)
 800face:	fba2 2303 	umull	r2, r3, r2, r3
 800fad2:	099b      	lsrs	r3, r3, #6
 800fad4:	4a09      	ldr	r2, [pc, #36]	; (800fafc <vPortSetupTimerInterrupt+0x44>)
 800fad6:	3b01      	subs	r3, #1
 800fad8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fada:	4b04      	ldr	r3, [pc, #16]	; (800faec <vPortSetupTimerInterrupt+0x34>)
 800fadc:	2207      	movs	r2, #7
 800fade:	601a      	str	r2, [r3, #0]
}
 800fae0:	bf00      	nop
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr
 800faea:	bf00      	nop
 800faec:	e000e010 	.word	0xe000e010
 800faf0:	e000e018 	.word	0xe000e018
 800faf4:	20000020 	.word	0x20000020
 800faf8:	10624dd3 	.word	0x10624dd3
 800fafc:	e000e014 	.word	0xe000e014

0800fb00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fb00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fb10 <vPortEnableVFP+0x10>
 800fb04:	6801      	ldr	r1, [r0, #0]
 800fb06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fb0a:	6001      	str	r1, [r0, #0]
 800fb0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fb0e:	bf00      	nop
 800fb10:	e000ed88 	.word	0xe000ed88

0800fb14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fb14:	b480      	push	{r7}
 800fb16:	b085      	sub	sp, #20
 800fb18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fb1a:	f3ef 8305 	mrs	r3, IPSR
 800fb1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	2b0f      	cmp	r3, #15
 800fb24:	d913      	bls.n	800fb4e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fb26:	4a16      	ldr	r2, [pc, #88]	; (800fb80 <vPortValidateInterruptPriority+0x6c>)
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	4413      	add	r3, r2
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fb30:	4b14      	ldr	r3, [pc, #80]	; (800fb84 <vPortValidateInterruptPriority+0x70>)
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	7afa      	ldrb	r2, [r7, #11]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d209      	bcs.n	800fb4e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800fb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb3e:	f383 8811 	msr	BASEPRI, r3
 800fb42:	f3bf 8f6f 	isb	sy
 800fb46:	f3bf 8f4f 	dsb	sy
 800fb4a:	607b      	str	r3, [r7, #4]
 800fb4c:	e7fe      	b.n	800fb4c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fb4e:	4b0e      	ldr	r3, [pc, #56]	; (800fb88 <vPortValidateInterruptPriority+0x74>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fb56:	4b0d      	ldr	r3, [pc, #52]	; (800fb8c <vPortValidateInterruptPriority+0x78>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d909      	bls.n	800fb72 <vPortValidateInterruptPriority+0x5e>
 800fb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb62:	f383 8811 	msr	BASEPRI, r3
 800fb66:	f3bf 8f6f 	isb	sy
 800fb6a:	f3bf 8f4f 	dsb	sy
 800fb6e:	603b      	str	r3, [r7, #0]
 800fb70:	e7fe      	b.n	800fb70 <vPortValidateInterruptPriority+0x5c>
	}
 800fb72:	bf00      	nop
 800fb74:	3714      	adds	r7, #20
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop
 800fb80:	e000e3f0 	.word	0xe000e3f0
 800fb84:	20002e60 	.word	0x20002e60
 800fb88:	e000ed0c 	.word	0xe000ed0c
 800fb8c:	20002e64 	.word	0x20002e64

0800fb90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b08a      	sub	sp, #40	; 0x28
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fb9c:	f7fe fcf0 	bl	800e580 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fba0:	4b57      	ldr	r3, [pc, #348]	; (800fd00 <pvPortMalloc+0x170>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d101      	bne.n	800fbac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fba8:	f000 f90c 	bl	800fdc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fbac:	4b55      	ldr	r3, [pc, #340]	; (800fd04 <pvPortMalloc+0x174>)
 800fbae:	681a      	ldr	r2, [r3, #0]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	4013      	ands	r3, r2
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	f040 808c 	bne.w	800fcd2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d01c      	beq.n	800fbfa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800fbc0:	2208      	movs	r2, #8
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	4413      	add	r3, r2
 800fbc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f003 0307 	and.w	r3, r3, #7
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d013      	beq.n	800fbfa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f023 0307 	bic.w	r3, r3, #7
 800fbd8:	3308      	adds	r3, #8
 800fbda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f003 0307 	and.w	r3, r3, #7
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d009      	beq.n	800fbfa <pvPortMalloc+0x6a>
 800fbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbea:	f383 8811 	msr	BASEPRI, r3
 800fbee:	f3bf 8f6f 	isb	sy
 800fbf2:	f3bf 8f4f 	dsb	sy
 800fbf6:	617b      	str	r3, [r7, #20]
 800fbf8:	e7fe      	b.n	800fbf8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d068      	beq.n	800fcd2 <pvPortMalloc+0x142>
 800fc00:	4b41      	ldr	r3, [pc, #260]	; (800fd08 <pvPortMalloc+0x178>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	687a      	ldr	r2, [r7, #4]
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d863      	bhi.n	800fcd2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fc0a:	4b40      	ldr	r3, [pc, #256]	; (800fd0c <pvPortMalloc+0x17c>)
 800fc0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fc0e:	4b3f      	ldr	r3, [pc, #252]	; (800fd0c <pvPortMalloc+0x17c>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc14:	e004      	b.n	800fc20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800fc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc22:	685b      	ldr	r3, [r3, #4]
 800fc24:	687a      	ldr	r2, [r7, #4]
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d903      	bls.n	800fc32 <pvPortMalloc+0xa2>
 800fc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d1f1      	bne.n	800fc16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fc32:	4b33      	ldr	r3, [pc, #204]	; (800fd00 <pvPortMalloc+0x170>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d04a      	beq.n	800fcd2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fc3c:	6a3b      	ldr	r3, [r7, #32]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	2208      	movs	r2, #8
 800fc42:	4413      	add	r3, r2
 800fc44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc48:	681a      	ldr	r2, [r3, #0]
 800fc4a:	6a3b      	ldr	r3, [r7, #32]
 800fc4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc50:	685a      	ldr	r2, [r3, #4]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	1ad2      	subs	r2, r2, r3
 800fc56:	2308      	movs	r3, #8
 800fc58:	005b      	lsls	r3, r3, #1
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d91e      	bls.n	800fc9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fc5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	4413      	add	r3, r2
 800fc64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc66:	69bb      	ldr	r3, [r7, #24]
 800fc68:	f003 0307 	and.w	r3, r3, #7
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d009      	beq.n	800fc84 <pvPortMalloc+0xf4>
 800fc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc74:	f383 8811 	msr	BASEPRI, r3
 800fc78:	f3bf 8f6f 	isb	sy
 800fc7c:	f3bf 8f4f 	dsb	sy
 800fc80:	613b      	str	r3, [r7, #16]
 800fc82:	e7fe      	b.n	800fc82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc86:	685a      	ldr	r2, [r3, #4]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	1ad2      	subs	r2, r2, r3
 800fc8c:	69bb      	ldr	r3, [r7, #24]
 800fc8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc92:	687a      	ldr	r2, [r7, #4]
 800fc94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fc96:	69b8      	ldr	r0, [r7, #24]
 800fc98:	f000 f8f6 	bl	800fe88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fc9c:	4b1a      	ldr	r3, [pc, #104]	; (800fd08 <pvPortMalloc+0x178>)
 800fc9e:	681a      	ldr	r2, [r3, #0]
 800fca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca2:	685b      	ldr	r3, [r3, #4]
 800fca4:	1ad3      	subs	r3, r2, r3
 800fca6:	4a18      	ldr	r2, [pc, #96]	; (800fd08 <pvPortMalloc+0x178>)
 800fca8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fcaa:	4b17      	ldr	r3, [pc, #92]	; (800fd08 <pvPortMalloc+0x178>)
 800fcac:	681a      	ldr	r2, [r3, #0]
 800fcae:	4b18      	ldr	r3, [pc, #96]	; (800fd10 <pvPortMalloc+0x180>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d203      	bcs.n	800fcbe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fcb6:	4b14      	ldr	r3, [pc, #80]	; (800fd08 <pvPortMalloc+0x178>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	4a15      	ldr	r2, [pc, #84]	; (800fd10 <pvPortMalloc+0x180>)
 800fcbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc0:	685a      	ldr	r2, [r3, #4]
 800fcc2:	4b10      	ldr	r3, [pc, #64]	; (800fd04 <pvPortMalloc+0x174>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	431a      	orrs	r2, r3
 800fcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcce:	2200      	movs	r2, #0
 800fcd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fcd2:	f7fe fc63 	bl	800e59c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	f003 0307 	and.w	r3, r3, #7
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d009      	beq.n	800fcf4 <pvPortMalloc+0x164>
 800fce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce4:	f383 8811 	msr	BASEPRI, r3
 800fce8:	f3bf 8f6f 	isb	sy
 800fcec:	f3bf 8f4f 	dsb	sy
 800fcf0:	60fb      	str	r3, [r7, #12]
 800fcf2:	e7fe      	b.n	800fcf2 <pvPortMalloc+0x162>
	return pvReturn;
 800fcf4:	69fb      	ldr	r3, [r7, #28]
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3728      	adds	r7, #40	; 0x28
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	20006a70 	.word	0x20006a70
 800fd04:	20006a7c 	.word	0x20006a7c
 800fd08:	20006a74 	.word	0x20006a74
 800fd0c:	20006a68 	.word	0x20006a68
 800fd10:	20006a78 	.word	0x20006a78

0800fd14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b086      	sub	sp, #24
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d046      	beq.n	800fdb4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fd26:	2308      	movs	r3, #8
 800fd28:	425b      	negs	r3, r3
 800fd2a:	697a      	ldr	r2, [r7, #20]
 800fd2c:	4413      	add	r3, r2
 800fd2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	685a      	ldr	r2, [r3, #4]
 800fd38:	4b20      	ldr	r3, [pc, #128]	; (800fdbc <vPortFree+0xa8>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	4013      	ands	r3, r2
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d109      	bne.n	800fd56 <vPortFree+0x42>
 800fd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd46:	f383 8811 	msr	BASEPRI, r3
 800fd4a:	f3bf 8f6f 	isb	sy
 800fd4e:	f3bf 8f4f 	dsb	sy
 800fd52:	60fb      	str	r3, [r7, #12]
 800fd54:	e7fe      	b.n	800fd54 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d009      	beq.n	800fd72 <vPortFree+0x5e>
 800fd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd62:	f383 8811 	msr	BASEPRI, r3
 800fd66:	f3bf 8f6f 	isb	sy
 800fd6a:	f3bf 8f4f 	dsb	sy
 800fd6e:	60bb      	str	r3, [r7, #8]
 800fd70:	e7fe      	b.n	800fd70 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fd72:	693b      	ldr	r3, [r7, #16]
 800fd74:	685a      	ldr	r2, [r3, #4]
 800fd76:	4b11      	ldr	r3, [pc, #68]	; (800fdbc <vPortFree+0xa8>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4013      	ands	r3, r2
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d019      	beq.n	800fdb4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d115      	bne.n	800fdb4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	685a      	ldr	r2, [r3, #4]
 800fd8c:	4b0b      	ldr	r3, [pc, #44]	; (800fdbc <vPortFree+0xa8>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	43db      	mvns	r3, r3
 800fd92:	401a      	ands	r2, r3
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fd98:	f7fe fbf2 	bl	800e580 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	685a      	ldr	r2, [r3, #4]
 800fda0:	4b07      	ldr	r3, [pc, #28]	; (800fdc0 <vPortFree+0xac>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4413      	add	r3, r2
 800fda6:	4a06      	ldr	r2, [pc, #24]	; (800fdc0 <vPortFree+0xac>)
 800fda8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fdaa:	6938      	ldr	r0, [r7, #16]
 800fdac:	f000 f86c 	bl	800fe88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fdb0:	f7fe fbf4 	bl	800e59c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fdb4:	bf00      	nop
 800fdb6:	3718      	adds	r7, #24
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	20006a7c 	.word	0x20006a7c
 800fdc0:	20006a74 	.word	0x20006a74

0800fdc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b085      	sub	sp, #20
 800fdc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fdca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fdce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fdd0:	4b27      	ldr	r3, [pc, #156]	; (800fe70 <prvHeapInit+0xac>)
 800fdd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f003 0307 	and.w	r3, r3, #7
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d00c      	beq.n	800fdf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	3307      	adds	r3, #7
 800fde2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f023 0307 	bic.w	r3, r3, #7
 800fdea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fdec:	68ba      	ldr	r2, [r7, #8]
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	1ad3      	subs	r3, r2, r3
 800fdf2:	4a1f      	ldr	r2, [pc, #124]	; (800fe70 <prvHeapInit+0xac>)
 800fdf4:	4413      	add	r3, r2
 800fdf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fdfc:	4a1d      	ldr	r2, [pc, #116]	; (800fe74 <prvHeapInit+0xb0>)
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fe02:	4b1c      	ldr	r3, [pc, #112]	; (800fe74 <prvHeapInit+0xb0>)
 800fe04:	2200      	movs	r2, #0
 800fe06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	68ba      	ldr	r2, [r7, #8]
 800fe0c:	4413      	add	r3, r2
 800fe0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fe10:	2208      	movs	r2, #8
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	1a9b      	subs	r3, r3, r2
 800fe16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f023 0307 	bic.w	r3, r3, #7
 800fe1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	4a15      	ldr	r2, [pc, #84]	; (800fe78 <prvHeapInit+0xb4>)
 800fe24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fe26:	4b14      	ldr	r3, [pc, #80]	; (800fe78 <prvHeapInit+0xb4>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fe2e:	4b12      	ldr	r3, [pc, #72]	; (800fe78 <prvHeapInit+0xb4>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	2200      	movs	r2, #0
 800fe34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	68fa      	ldr	r2, [r7, #12]
 800fe3e:	1ad2      	subs	r2, r2, r3
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fe44:	4b0c      	ldr	r3, [pc, #48]	; (800fe78 <prvHeapInit+0xb4>)
 800fe46:	681a      	ldr	r2, [r3, #0]
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	685b      	ldr	r3, [r3, #4]
 800fe50:	4a0a      	ldr	r2, [pc, #40]	; (800fe7c <prvHeapInit+0xb8>)
 800fe52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	4a09      	ldr	r2, [pc, #36]	; (800fe80 <prvHeapInit+0xbc>)
 800fe5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fe5c:	4b09      	ldr	r3, [pc, #36]	; (800fe84 <prvHeapInit+0xc0>)
 800fe5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fe62:	601a      	str	r2, [r3, #0]
}
 800fe64:	bf00      	nop
 800fe66:	3714      	adds	r7, #20
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6e:	4770      	bx	lr
 800fe70:	20002e68 	.word	0x20002e68
 800fe74:	20006a68 	.word	0x20006a68
 800fe78:	20006a70 	.word	0x20006a70
 800fe7c:	20006a78 	.word	0x20006a78
 800fe80:	20006a74 	.word	0x20006a74
 800fe84:	20006a7c 	.word	0x20006a7c

0800fe88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b085      	sub	sp, #20
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fe90:	4b28      	ldr	r3, [pc, #160]	; (800ff34 <prvInsertBlockIntoFreeList+0xac>)
 800fe92:	60fb      	str	r3, [r7, #12]
 800fe94:	e002      	b.n	800fe9c <prvInsertBlockIntoFreeList+0x14>
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	60fb      	str	r3, [r7, #12]
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	687a      	ldr	r2, [r7, #4]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d8f7      	bhi.n	800fe96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	68ba      	ldr	r2, [r7, #8]
 800feb0:	4413      	add	r3, r2
 800feb2:	687a      	ldr	r2, [r7, #4]
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d108      	bne.n	800feca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	685a      	ldr	r2, [r3, #4]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	685b      	ldr	r3, [r3, #4]
 800fec0:	441a      	add	r2, r3
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	68ba      	ldr	r2, [r7, #8]
 800fed4:	441a      	add	r2, r3
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	429a      	cmp	r2, r3
 800fedc:	d118      	bne.n	800ff10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	681a      	ldr	r2, [r3, #0]
 800fee2:	4b15      	ldr	r3, [pc, #84]	; (800ff38 <prvInsertBlockIntoFreeList+0xb0>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d00d      	beq.n	800ff06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	685a      	ldr	r2, [r3, #4]
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	441a      	add	r2, r3
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	681a      	ldr	r2, [r3, #0]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	601a      	str	r2, [r3, #0]
 800ff04:	e008      	b.n	800ff18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ff06:	4b0c      	ldr	r3, [pc, #48]	; (800ff38 <prvInsertBlockIntoFreeList+0xb0>)
 800ff08:	681a      	ldr	r2, [r3, #0]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	601a      	str	r2, [r3, #0]
 800ff0e:	e003      	b.n	800ff18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	681a      	ldr	r2, [r3, #0]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ff18:	68fa      	ldr	r2, [r7, #12]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d002      	beq.n	800ff26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff26:	bf00      	nop
 800ff28:	3714      	adds	r7, #20
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff30:	4770      	bx	lr
 800ff32:	bf00      	nop
 800ff34:	20006a68 	.word	0x20006a68
 800ff38:	20006a70 	.word	0x20006a70

0800ff3c <initCompass>:


static uint32_t test = 0;

void initCompass(uint32_t cInit)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b083      	sub	sp, #12
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
	test = cInit;
 800ff44:	4a04      	ldr	r2, [pc, #16]	; (800ff58 <initCompass+0x1c>)
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6013      	str	r3, [r2, #0]
}
 800ff4a:	bf00      	nop
 800ff4c:	370c      	adds	r7, #12
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff54:	4770      	bx	lr
 800ff56:	bf00      	nop
 800ff58:	20006a80 	.word	0x20006a80

0800ff5c <SetCompassData>:

void SetCompassData()
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	af00      	add	r7, sp, #0
	//LIS2DW12_ACC_GetAxes();

}
 800ff60:	bf00      	nop
 800ff62:	46bd      	mov	sp, r7
 800ff64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff68:	4770      	bx	lr
	...

0800ff6c <__errno>:
 800ff6c:	4b01      	ldr	r3, [pc, #4]	; (800ff74 <__errno+0x8>)
 800ff6e:	6818      	ldr	r0, [r3, #0]
 800ff70:	4770      	bx	lr
 800ff72:	bf00      	nop
 800ff74:	200001c0 	.word	0x200001c0

0800ff78 <__libc_init_array>:
 800ff78:	b570      	push	{r4, r5, r6, lr}
 800ff7a:	4e0d      	ldr	r6, [pc, #52]	; (800ffb0 <__libc_init_array+0x38>)
 800ff7c:	4c0d      	ldr	r4, [pc, #52]	; (800ffb4 <__libc_init_array+0x3c>)
 800ff7e:	1ba4      	subs	r4, r4, r6
 800ff80:	10a4      	asrs	r4, r4, #2
 800ff82:	2500      	movs	r5, #0
 800ff84:	42a5      	cmp	r5, r4
 800ff86:	d109      	bne.n	800ff9c <__libc_init_array+0x24>
 800ff88:	4e0b      	ldr	r6, [pc, #44]	; (800ffb8 <__libc_init_array+0x40>)
 800ff8a:	4c0c      	ldr	r4, [pc, #48]	; (800ffbc <__libc_init_array+0x44>)
 800ff8c:	f002 f96e 	bl	801226c <_init>
 800ff90:	1ba4      	subs	r4, r4, r6
 800ff92:	10a4      	asrs	r4, r4, #2
 800ff94:	2500      	movs	r5, #0
 800ff96:	42a5      	cmp	r5, r4
 800ff98:	d105      	bne.n	800ffa6 <__libc_init_array+0x2e>
 800ff9a:	bd70      	pop	{r4, r5, r6, pc}
 800ff9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ffa0:	4798      	blx	r3
 800ffa2:	3501      	adds	r5, #1
 800ffa4:	e7ee      	b.n	800ff84 <__libc_init_array+0xc>
 800ffa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ffaa:	4798      	blx	r3
 800ffac:	3501      	adds	r5, #1
 800ffae:	e7f2      	b.n	800ff96 <__libc_init_array+0x1e>
 800ffb0:	080128a0 	.word	0x080128a0
 800ffb4:	080128a0 	.word	0x080128a0
 800ffb8:	080128a0 	.word	0x080128a0
 800ffbc:	080128a4 	.word	0x080128a4

0800ffc0 <memcpy>:
 800ffc0:	b510      	push	{r4, lr}
 800ffc2:	1e43      	subs	r3, r0, #1
 800ffc4:	440a      	add	r2, r1
 800ffc6:	4291      	cmp	r1, r2
 800ffc8:	d100      	bne.n	800ffcc <memcpy+0xc>
 800ffca:	bd10      	pop	{r4, pc}
 800ffcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffd4:	e7f7      	b.n	800ffc6 <memcpy+0x6>

0800ffd6 <memset>:
 800ffd6:	4402      	add	r2, r0
 800ffd8:	4603      	mov	r3, r0
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	d100      	bne.n	800ffe0 <memset+0xa>
 800ffde:	4770      	bx	lr
 800ffe0:	f803 1b01 	strb.w	r1, [r3], #1
 800ffe4:	e7f9      	b.n	800ffda <memset+0x4>
	...

0800ffe8 <iprintf>:
 800ffe8:	b40f      	push	{r0, r1, r2, r3}
 800ffea:	4b0a      	ldr	r3, [pc, #40]	; (8010014 <iprintf+0x2c>)
 800ffec:	b513      	push	{r0, r1, r4, lr}
 800ffee:	681c      	ldr	r4, [r3, #0]
 800fff0:	b124      	cbz	r4, 800fffc <iprintf+0x14>
 800fff2:	69a3      	ldr	r3, [r4, #24]
 800fff4:	b913      	cbnz	r3, 800fffc <iprintf+0x14>
 800fff6:	4620      	mov	r0, r4
 800fff8:	f000 f882 	bl	8010100 <__sinit>
 800fffc:	ab05      	add	r3, sp, #20
 800fffe:	9a04      	ldr	r2, [sp, #16]
 8010000:	68a1      	ldr	r1, [r4, #8]
 8010002:	9301      	str	r3, [sp, #4]
 8010004:	4620      	mov	r0, r4
 8010006:	f000 fadb 	bl	80105c0 <_vfiprintf_r>
 801000a:	b002      	add	sp, #8
 801000c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010010:	b004      	add	sp, #16
 8010012:	4770      	bx	lr
 8010014:	200001c0 	.word	0x200001c0

08010018 <sniprintf>:
 8010018:	b40c      	push	{r2, r3}
 801001a:	b530      	push	{r4, r5, lr}
 801001c:	4b17      	ldr	r3, [pc, #92]	; (801007c <sniprintf+0x64>)
 801001e:	1e0c      	subs	r4, r1, #0
 8010020:	b09d      	sub	sp, #116	; 0x74
 8010022:	681d      	ldr	r5, [r3, #0]
 8010024:	da08      	bge.n	8010038 <sniprintf+0x20>
 8010026:	238b      	movs	r3, #139	; 0x8b
 8010028:	602b      	str	r3, [r5, #0]
 801002a:	f04f 30ff 	mov.w	r0, #4294967295
 801002e:	b01d      	add	sp, #116	; 0x74
 8010030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010034:	b002      	add	sp, #8
 8010036:	4770      	bx	lr
 8010038:	f44f 7302 	mov.w	r3, #520	; 0x208
 801003c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010040:	bf14      	ite	ne
 8010042:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010046:	4623      	moveq	r3, r4
 8010048:	9304      	str	r3, [sp, #16]
 801004a:	9307      	str	r3, [sp, #28]
 801004c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010050:	9002      	str	r0, [sp, #8]
 8010052:	9006      	str	r0, [sp, #24]
 8010054:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010058:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801005a:	ab21      	add	r3, sp, #132	; 0x84
 801005c:	a902      	add	r1, sp, #8
 801005e:	4628      	mov	r0, r5
 8010060:	9301      	str	r3, [sp, #4]
 8010062:	f000 f98b 	bl	801037c <_svfiprintf_r>
 8010066:	1c43      	adds	r3, r0, #1
 8010068:	bfbc      	itt	lt
 801006a:	238b      	movlt	r3, #139	; 0x8b
 801006c:	602b      	strlt	r3, [r5, #0]
 801006e:	2c00      	cmp	r4, #0
 8010070:	d0dd      	beq.n	801002e <sniprintf+0x16>
 8010072:	9b02      	ldr	r3, [sp, #8]
 8010074:	2200      	movs	r2, #0
 8010076:	701a      	strb	r2, [r3, #0]
 8010078:	e7d9      	b.n	801002e <sniprintf+0x16>
 801007a:	bf00      	nop
 801007c:	200001c0 	.word	0x200001c0

08010080 <std>:
 8010080:	2300      	movs	r3, #0
 8010082:	b510      	push	{r4, lr}
 8010084:	4604      	mov	r4, r0
 8010086:	e9c0 3300 	strd	r3, r3, [r0]
 801008a:	6083      	str	r3, [r0, #8]
 801008c:	8181      	strh	r1, [r0, #12]
 801008e:	6643      	str	r3, [r0, #100]	; 0x64
 8010090:	81c2      	strh	r2, [r0, #14]
 8010092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010096:	6183      	str	r3, [r0, #24]
 8010098:	4619      	mov	r1, r3
 801009a:	2208      	movs	r2, #8
 801009c:	305c      	adds	r0, #92	; 0x5c
 801009e:	f7ff ff9a 	bl	800ffd6 <memset>
 80100a2:	4b05      	ldr	r3, [pc, #20]	; (80100b8 <std+0x38>)
 80100a4:	6263      	str	r3, [r4, #36]	; 0x24
 80100a6:	4b05      	ldr	r3, [pc, #20]	; (80100bc <std+0x3c>)
 80100a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80100aa:	4b05      	ldr	r3, [pc, #20]	; (80100c0 <std+0x40>)
 80100ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80100ae:	4b05      	ldr	r3, [pc, #20]	; (80100c4 <std+0x44>)
 80100b0:	6224      	str	r4, [r4, #32]
 80100b2:	6323      	str	r3, [r4, #48]	; 0x30
 80100b4:	bd10      	pop	{r4, pc}
 80100b6:	bf00      	nop
 80100b8:	08010b1d 	.word	0x08010b1d
 80100bc:	08010b3f 	.word	0x08010b3f
 80100c0:	08010b77 	.word	0x08010b77
 80100c4:	08010b9b 	.word	0x08010b9b

080100c8 <_cleanup_r>:
 80100c8:	4901      	ldr	r1, [pc, #4]	; (80100d0 <_cleanup_r+0x8>)
 80100ca:	f000 b885 	b.w	80101d8 <_fwalk_reent>
 80100ce:	bf00      	nop
 80100d0:	08010e75 	.word	0x08010e75

080100d4 <__sfmoreglue>:
 80100d4:	b570      	push	{r4, r5, r6, lr}
 80100d6:	1e4a      	subs	r2, r1, #1
 80100d8:	2568      	movs	r5, #104	; 0x68
 80100da:	4355      	muls	r5, r2
 80100dc:	460e      	mov	r6, r1
 80100de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80100e2:	f000 f897 	bl	8010214 <_malloc_r>
 80100e6:	4604      	mov	r4, r0
 80100e8:	b140      	cbz	r0, 80100fc <__sfmoreglue+0x28>
 80100ea:	2100      	movs	r1, #0
 80100ec:	e9c0 1600 	strd	r1, r6, [r0]
 80100f0:	300c      	adds	r0, #12
 80100f2:	60a0      	str	r0, [r4, #8]
 80100f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80100f8:	f7ff ff6d 	bl	800ffd6 <memset>
 80100fc:	4620      	mov	r0, r4
 80100fe:	bd70      	pop	{r4, r5, r6, pc}

08010100 <__sinit>:
 8010100:	6983      	ldr	r3, [r0, #24]
 8010102:	b510      	push	{r4, lr}
 8010104:	4604      	mov	r4, r0
 8010106:	bb33      	cbnz	r3, 8010156 <__sinit+0x56>
 8010108:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801010c:	6503      	str	r3, [r0, #80]	; 0x50
 801010e:	4b12      	ldr	r3, [pc, #72]	; (8010158 <__sinit+0x58>)
 8010110:	4a12      	ldr	r2, [pc, #72]	; (801015c <__sinit+0x5c>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	6282      	str	r2, [r0, #40]	; 0x28
 8010116:	4298      	cmp	r0, r3
 8010118:	bf04      	itt	eq
 801011a:	2301      	moveq	r3, #1
 801011c:	6183      	streq	r3, [r0, #24]
 801011e:	f000 f81f 	bl	8010160 <__sfp>
 8010122:	6060      	str	r0, [r4, #4]
 8010124:	4620      	mov	r0, r4
 8010126:	f000 f81b 	bl	8010160 <__sfp>
 801012a:	60a0      	str	r0, [r4, #8]
 801012c:	4620      	mov	r0, r4
 801012e:	f000 f817 	bl	8010160 <__sfp>
 8010132:	2200      	movs	r2, #0
 8010134:	60e0      	str	r0, [r4, #12]
 8010136:	2104      	movs	r1, #4
 8010138:	6860      	ldr	r0, [r4, #4]
 801013a:	f7ff ffa1 	bl	8010080 <std>
 801013e:	2201      	movs	r2, #1
 8010140:	2109      	movs	r1, #9
 8010142:	68a0      	ldr	r0, [r4, #8]
 8010144:	f7ff ff9c 	bl	8010080 <std>
 8010148:	2202      	movs	r2, #2
 801014a:	2112      	movs	r1, #18
 801014c:	68e0      	ldr	r0, [r4, #12]
 801014e:	f7ff ff97 	bl	8010080 <std>
 8010152:	2301      	movs	r3, #1
 8010154:	61a3      	str	r3, [r4, #24]
 8010156:	bd10      	pop	{r4, pc}
 8010158:	080127b8 	.word	0x080127b8
 801015c:	080100c9 	.word	0x080100c9

08010160 <__sfp>:
 8010160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010162:	4b1b      	ldr	r3, [pc, #108]	; (80101d0 <__sfp+0x70>)
 8010164:	681e      	ldr	r6, [r3, #0]
 8010166:	69b3      	ldr	r3, [r6, #24]
 8010168:	4607      	mov	r7, r0
 801016a:	b913      	cbnz	r3, 8010172 <__sfp+0x12>
 801016c:	4630      	mov	r0, r6
 801016e:	f7ff ffc7 	bl	8010100 <__sinit>
 8010172:	3648      	adds	r6, #72	; 0x48
 8010174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010178:	3b01      	subs	r3, #1
 801017a:	d503      	bpl.n	8010184 <__sfp+0x24>
 801017c:	6833      	ldr	r3, [r6, #0]
 801017e:	b133      	cbz	r3, 801018e <__sfp+0x2e>
 8010180:	6836      	ldr	r6, [r6, #0]
 8010182:	e7f7      	b.n	8010174 <__sfp+0x14>
 8010184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010188:	b16d      	cbz	r5, 80101a6 <__sfp+0x46>
 801018a:	3468      	adds	r4, #104	; 0x68
 801018c:	e7f4      	b.n	8010178 <__sfp+0x18>
 801018e:	2104      	movs	r1, #4
 8010190:	4638      	mov	r0, r7
 8010192:	f7ff ff9f 	bl	80100d4 <__sfmoreglue>
 8010196:	6030      	str	r0, [r6, #0]
 8010198:	2800      	cmp	r0, #0
 801019a:	d1f1      	bne.n	8010180 <__sfp+0x20>
 801019c:	230c      	movs	r3, #12
 801019e:	603b      	str	r3, [r7, #0]
 80101a0:	4604      	mov	r4, r0
 80101a2:	4620      	mov	r0, r4
 80101a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101a6:	4b0b      	ldr	r3, [pc, #44]	; (80101d4 <__sfp+0x74>)
 80101a8:	6665      	str	r5, [r4, #100]	; 0x64
 80101aa:	e9c4 5500 	strd	r5, r5, [r4]
 80101ae:	60a5      	str	r5, [r4, #8]
 80101b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80101b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80101b8:	2208      	movs	r2, #8
 80101ba:	4629      	mov	r1, r5
 80101bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80101c0:	f7ff ff09 	bl	800ffd6 <memset>
 80101c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80101c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80101cc:	e7e9      	b.n	80101a2 <__sfp+0x42>
 80101ce:	bf00      	nop
 80101d0:	080127b8 	.word	0x080127b8
 80101d4:	ffff0001 	.word	0xffff0001

080101d8 <_fwalk_reent>:
 80101d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101dc:	4680      	mov	r8, r0
 80101de:	4689      	mov	r9, r1
 80101e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80101e4:	2600      	movs	r6, #0
 80101e6:	b914      	cbnz	r4, 80101ee <_fwalk_reent+0x16>
 80101e8:	4630      	mov	r0, r6
 80101ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80101f2:	3f01      	subs	r7, #1
 80101f4:	d501      	bpl.n	80101fa <_fwalk_reent+0x22>
 80101f6:	6824      	ldr	r4, [r4, #0]
 80101f8:	e7f5      	b.n	80101e6 <_fwalk_reent+0xe>
 80101fa:	89ab      	ldrh	r3, [r5, #12]
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d907      	bls.n	8010210 <_fwalk_reent+0x38>
 8010200:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010204:	3301      	adds	r3, #1
 8010206:	d003      	beq.n	8010210 <_fwalk_reent+0x38>
 8010208:	4629      	mov	r1, r5
 801020a:	4640      	mov	r0, r8
 801020c:	47c8      	blx	r9
 801020e:	4306      	orrs	r6, r0
 8010210:	3568      	adds	r5, #104	; 0x68
 8010212:	e7ee      	b.n	80101f2 <_fwalk_reent+0x1a>

08010214 <_malloc_r>:
 8010214:	b570      	push	{r4, r5, r6, lr}
 8010216:	1ccd      	adds	r5, r1, #3
 8010218:	f025 0503 	bic.w	r5, r5, #3
 801021c:	3508      	adds	r5, #8
 801021e:	2d0c      	cmp	r5, #12
 8010220:	bf38      	it	cc
 8010222:	250c      	movcc	r5, #12
 8010224:	2d00      	cmp	r5, #0
 8010226:	4606      	mov	r6, r0
 8010228:	db01      	blt.n	801022e <_malloc_r+0x1a>
 801022a:	42a9      	cmp	r1, r5
 801022c:	d903      	bls.n	8010236 <_malloc_r+0x22>
 801022e:	230c      	movs	r3, #12
 8010230:	6033      	str	r3, [r6, #0]
 8010232:	2000      	movs	r0, #0
 8010234:	bd70      	pop	{r4, r5, r6, pc}
 8010236:	f000 fed6 	bl	8010fe6 <__malloc_lock>
 801023a:	4a21      	ldr	r2, [pc, #132]	; (80102c0 <_malloc_r+0xac>)
 801023c:	6814      	ldr	r4, [r2, #0]
 801023e:	4621      	mov	r1, r4
 8010240:	b991      	cbnz	r1, 8010268 <_malloc_r+0x54>
 8010242:	4c20      	ldr	r4, [pc, #128]	; (80102c4 <_malloc_r+0xb0>)
 8010244:	6823      	ldr	r3, [r4, #0]
 8010246:	b91b      	cbnz	r3, 8010250 <_malloc_r+0x3c>
 8010248:	4630      	mov	r0, r6
 801024a:	f000 fc57 	bl	8010afc <_sbrk_r>
 801024e:	6020      	str	r0, [r4, #0]
 8010250:	4629      	mov	r1, r5
 8010252:	4630      	mov	r0, r6
 8010254:	f000 fc52 	bl	8010afc <_sbrk_r>
 8010258:	1c43      	adds	r3, r0, #1
 801025a:	d124      	bne.n	80102a6 <_malloc_r+0x92>
 801025c:	230c      	movs	r3, #12
 801025e:	6033      	str	r3, [r6, #0]
 8010260:	4630      	mov	r0, r6
 8010262:	f000 fec1 	bl	8010fe8 <__malloc_unlock>
 8010266:	e7e4      	b.n	8010232 <_malloc_r+0x1e>
 8010268:	680b      	ldr	r3, [r1, #0]
 801026a:	1b5b      	subs	r3, r3, r5
 801026c:	d418      	bmi.n	80102a0 <_malloc_r+0x8c>
 801026e:	2b0b      	cmp	r3, #11
 8010270:	d90f      	bls.n	8010292 <_malloc_r+0x7e>
 8010272:	600b      	str	r3, [r1, #0]
 8010274:	50cd      	str	r5, [r1, r3]
 8010276:	18cc      	adds	r4, r1, r3
 8010278:	4630      	mov	r0, r6
 801027a:	f000 feb5 	bl	8010fe8 <__malloc_unlock>
 801027e:	f104 000b 	add.w	r0, r4, #11
 8010282:	1d23      	adds	r3, r4, #4
 8010284:	f020 0007 	bic.w	r0, r0, #7
 8010288:	1ac3      	subs	r3, r0, r3
 801028a:	d0d3      	beq.n	8010234 <_malloc_r+0x20>
 801028c:	425a      	negs	r2, r3
 801028e:	50e2      	str	r2, [r4, r3]
 8010290:	e7d0      	b.n	8010234 <_malloc_r+0x20>
 8010292:	428c      	cmp	r4, r1
 8010294:	684b      	ldr	r3, [r1, #4]
 8010296:	bf16      	itet	ne
 8010298:	6063      	strne	r3, [r4, #4]
 801029a:	6013      	streq	r3, [r2, #0]
 801029c:	460c      	movne	r4, r1
 801029e:	e7eb      	b.n	8010278 <_malloc_r+0x64>
 80102a0:	460c      	mov	r4, r1
 80102a2:	6849      	ldr	r1, [r1, #4]
 80102a4:	e7cc      	b.n	8010240 <_malloc_r+0x2c>
 80102a6:	1cc4      	adds	r4, r0, #3
 80102a8:	f024 0403 	bic.w	r4, r4, #3
 80102ac:	42a0      	cmp	r0, r4
 80102ae:	d005      	beq.n	80102bc <_malloc_r+0xa8>
 80102b0:	1a21      	subs	r1, r4, r0
 80102b2:	4630      	mov	r0, r6
 80102b4:	f000 fc22 	bl	8010afc <_sbrk_r>
 80102b8:	3001      	adds	r0, #1
 80102ba:	d0cf      	beq.n	801025c <_malloc_r+0x48>
 80102bc:	6025      	str	r5, [r4, #0]
 80102be:	e7db      	b.n	8010278 <_malloc_r+0x64>
 80102c0:	20006a84 	.word	0x20006a84
 80102c4:	20006a88 	.word	0x20006a88

080102c8 <__ssputs_r>:
 80102c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102cc:	688e      	ldr	r6, [r1, #8]
 80102ce:	429e      	cmp	r6, r3
 80102d0:	4682      	mov	sl, r0
 80102d2:	460c      	mov	r4, r1
 80102d4:	4690      	mov	r8, r2
 80102d6:	4699      	mov	r9, r3
 80102d8:	d837      	bhi.n	801034a <__ssputs_r+0x82>
 80102da:	898a      	ldrh	r2, [r1, #12]
 80102dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80102e0:	d031      	beq.n	8010346 <__ssputs_r+0x7e>
 80102e2:	6825      	ldr	r5, [r4, #0]
 80102e4:	6909      	ldr	r1, [r1, #16]
 80102e6:	1a6f      	subs	r7, r5, r1
 80102e8:	6965      	ldr	r5, [r4, #20]
 80102ea:	2302      	movs	r3, #2
 80102ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80102f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80102f4:	f109 0301 	add.w	r3, r9, #1
 80102f8:	443b      	add	r3, r7
 80102fa:	429d      	cmp	r5, r3
 80102fc:	bf38      	it	cc
 80102fe:	461d      	movcc	r5, r3
 8010300:	0553      	lsls	r3, r2, #21
 8010302:	d530      	bpl.n	8010366 <__ssputs_r+0x9e>
 8010304:	4629      	mov	r1, r5
 8010306:	f7ff ff85 	bl	8010214 <_malloc_r>
 801030a:	4606      	mov	r6, r0
 801030c:	b950      	cbnz	r0, 8010324 <__ssputs_r+0x5c>
 801030e:	230c      	movs	r3, #12
 8010310:	f8ca 3000 	str.w	r3, [sl]
 8010314:	89a3      	ldrh	r3, [r4, #12]
 8010316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801031a:	81a3      	strh	r3, [r4, #12]
 801031c:	f04f 30ff 	mov.w	r0, #4294967295
 8010320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010324:	463a      	mov	r2, r7
 8010326:	6921      	ldr	r1, [r4, #16]
 8010328:	f7ff fe4a 	bl	800ffc0 <memcpy>
 801032c:	89a3      	ldrh	r3, [r4, #12]
 801032e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010336:	81a3      	strh	r3, [r4, #12]
 8010338:	6126      	str	r6, [r4, #16]
 801033a:	6165      	str	r5, [r4, #20]
 801033c:	443e      	add	r6, r7
 801033e:	1bed      	subs	r5, r5, r7
 8010340:	6026      	str	r6, [r4, #0]
 8010342:	60a5      	str	r5, [r4, #8]
 8010344:	464e      	mov	r6, r9
 8010346:	454e      	cmp	r6, r9
 8010348:	d900      	bls.n	801034c <__ssputs_r+0x84>
 801034a:	464e      	mov	r6, r9
 801034c:	4632      	mov	r2, r6
 801034e:	4641      	mov	r1, r8
 8010350:	6820      	ldr	r0, [r4, #0]
 8010352:	f000 fe2f 	bl	8010fb4 <memmove>
 8010356:	68a3      	ldr	r3, [r4, #8]
 8010358:	1b9b      	subs	r3, r3, r6
 801035a:	60a3      	str	r3, [r4, #8]
 801035c:	6823      	ldr	r3, [r4, #0]
 801035e:	441e      	add	r6, r3
 8010360:	6026      	str	r6, [r4, #0]
 8010362:	2000      	movs	r0, #0
 8010364:	e7dc      	b.n	8010320 <__ssputs_r+0x58>
 8010366:	462a      	mov	r2, r5
 8010368:	f000 fe8e 	bl	8011088 <_realloc_r>
 801036c:	4606      	mov	r6, r0
 801036e:	2800      	cmp	r0, #0
 8010370:	d1e2      	bne.n	8010338 <__ssputs_r+0x70>
 8010372:	6921      	ldr	r1, [r4, #16]
 8010374:	4650      	mov	r0, sl
 8010376:	f000 fe39 	bl	8010fec <_free_r>
 801037a:	e7c8      	b.n	801030e <__ssputs_r+0x46>

0801037c <_svfiprintf_r>:
 801037c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010380:	461d      	mov	r5, r3
 8010382:	898b      	ldrh	r3, [r1, #12]
 8010384:	061f      	lsls	r7, r3, #24
 8010386:	b09d      	sub	sp, #116	; 0x74
 8010388:	4680      	mov	r8, r0
 801038a:	460c      	mov	r4, r1
 801038c:	4616      	mov	r6, r2
 801038e:	d50f      	bpl.n	80103b0 <_svfiprintf_r+0x34>
 8010390:	690b      	ldr	r3, [r1, #16]
 8010392:	b96b      	cbnz	r3, 80103b0 <_svfiprintf_r+0x34>
 8010394:	2140      	movs	r1, #64	; 0x40
 8010396:	f7ff ff3d 	bl	8010214 <_malloc_r>
 801039a:	6020      	str	r0, [r4, #0]
 801039c:	6120      	str	r0, [r4, #16]
 801039e:	b928      	cbnz	r0, 80103ac <_svfiprintf_r+0x30>
 80103a0:	230c      	movs	r3, #12
 80103a2:	f8c8 3000 	str.w	r3, [r8]
 80103a6:	f04f 30ff 	mov.w	r0, #4294967295
 80103aa:	e0c8      	b.n	801053e <_svfiprintf_r+0x1c2>
 80103ac:	2340      	movs	r3, #64	; 0x40
 80103ae:	6163      	str	r3, [r4, #20]
 80103b0:	2300      	movs	r3, #0
 80103b2:	9309      	str	r3, [sp, #36]	; 0x24
 80103b4:	2320      	movs	r3, #32
 80103b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103ba:	2330      	movs	r3, #48	; 0x30
 80103bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80103c0:	9503      	str	r5, [sp, #12]
 80103c2:	f04f 0b01 	mov.w	fp, #1
 80103c6:	4637      	mov	r7, r6
 80103c8:	463d      	mov	r5, r7
 80103ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80103ce:	b10b      	cbz	r3, 80103d4 <_svfiprintf_r+0x58>
 80103d0:	2b25      	cmp	r3, #37	; 0x25
 80103d2:	d13e      	bne.n	8010452 <_svfiprintf_r+0xd6>
 80103d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80103d8:	d00b      	beq.n	80103f2 <_svfiprintf_r+0x76>
 80103da:	4653      	mov	r3, sl
 80103dc:	4632      	mov	r2, r6
 80103de:	4621      	mov	r1, r4
 80103e0:	4640      	mov	r0, r8
 80103e2:	f7ff ff71 	bl	80102c8 <__ssputs_r>
 80103e6:	3001      	adds	r0, #1
 80103e8:	f000 80a4 	beq.w	8010534 <_svfiprintf_r+0x1b8>
 80103ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103ee:	4453      	add	r3, sl
 80103f0:	9309      	str	r3, [sp, #36]	; 0x24
 80103f2:	783b      	ldrb	r3, [r7, #0]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f000 809d 	beq.w	8010534 <_svfiprintf_r+0x1b8>
 80103fa:	2300      	movs	r3, #0
 80103fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010404:	9304      	str	r3, [sp, #16]
 8010406:	9307      	str	r3, [sp, #28]
 8010408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801040c:	931a      	str	r3, [sp, #104]	; 0x68
 801040e:	462f      	mov	r7, r5
 8010410:	2205      	movs	r2, #5
 8010412:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010416:	4850      	ldr	r0, [pc, #320]	; (8010558 <_svfiprintf_r+0x1dc>)
 8010418:	f7ef fee2 	bl	80001e0 <memchr>
 801041c:	9b04      	ldr	r3, [sp, #16]
 801041e:	b9d0      	cbnz	r0, 8010456 <_svfiprintf_r+0xda>
 8010420:	06d9      	lsls	r1, r3, #27
 8010422:	bf44      	itt	mi
 8010424:	2220      	movmi	r2, #32
 8010426:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801042a:	071a      	lsls	r2, r3, #28
 801042c:	bf44      	itt	mi
 801042e:	222b      	movmi	r2, #43	; 0x2b
 8010430:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010434:	782a      	ldrb	r2, [r5, #0]
 8010436:	2a2a      	cmp	r2, #42	; 0x2a
 8010438:	d015      	beq.n	8010466 <_svfiprintf_r+0xea>
 801043a:	9a07      	ldr	r2, [sp, #28]
 801043c:	462f      	mov	r7, r5
 801043e:	2000      	movs	r0, #0
 8010440:	250a      	movs	r5, #10
 8010442:	4639      	mov	r1, r7
 8010444:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010448:	3b30      	subs	r3, #48	; 0x30
 801044a:	2b09      	cmp	r3, #9
 801044c:	d94d      	bls.n	80104ea <_svfiprintf_r+0x16e>
 801044e:	b1b8      	cbz	r0, 8010480 <_svfiprintf_r+0x104>
 8010450:	e00f      	b.n	8010472 <_svfiprintf_r+0xf6>
 8010452:	462f      	mov	r7, r5
 8010454:	e7b8      	b.n	80103c8 <_svfiprintf_r+0x4c>
 8010456:	4a40      	ldr	r2, [pc, #256]	; (8010558 <_svfiprintf_r+0x1dc>)
 8010458:	1a80      	subs	r0, r0, r2
 801045a:	fa0b f000 	lsl.w	r0, fp, r0
 801045e:	4318      	orrs	r0, r3
 8010460:	9004      	str	r0, [sp, #16]
 8010462:	463d      	mov	r5, r7
 8010464:	e7d3      	b.n	801040e <_svfiprintf_r+0x92>
 8010466:	9a03      	ldr	r2, [sp, #12]
 8010468:	1d11      	adds	r1, r2, #4
 801046a:	6812      	ldr	r2, [r2, #0]
 801046c:	9103      	str	r1, [sp, #12]
 801046e:	2a00      	cmp	r2, #0
 8010470:	db01      	blt.n	8010476 <_svfiprintf_r+0xfa>
 8010472:	9207      	str	r2, [sp, #28]
 8010474:	e004      	b.n	8010480 <_svfiprintf_r+0x104>
 8010476:	4252      	negs	r2, r2
 8010478:	f043 0302 	orr.w	r3, r3, #2
 801047c:	9207      	str	r2, [sp, #28]
 801047e:	9304      	str	r3, [sp, #16]
 8010480:	783b      	ldrb	r3, [r7, #0]
 8010482:	2b2e      	cmp	r3, #46	; 0x2e
 8010484:	d10c      	bne.n	80104a0 <_svfiprintf_r+0x124>
 8010486:	787b      	ldrb	r3, [r7, #1]
 8010488:	2b2a      	cmp	r3, #42	; 0x2a
 801048a:	d133      	bne.n	80104f4 <_svfiprintf_r+0x178>
 801048c:	9b03      	ldr	r3, [sp, #12]
 801048e:	1d1a      	adds	r2, r3, #4
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	9203      	str	r2, [sp, #12]
 8010494:	2b00      	cmp	r3, #0
 8010496:	bfb8      	it	lt
 8010498:	f04f 33ff 	movlt.w	r3, #4294967295
 801049c:	3702      	adds	r7, #2
 801049e:	9305      	str	r3, [sp, #20]
 80104a0:	4d2e      	ldr	r5, [pc, #184]	; (801055c <_svfiprintf_r+0x1e0>)
 80104a2:	7839      	ldrb	r1, [r7, #0]
 80104a4:	2203      	movs	r2, #3
 80104a6:	4628      	mov	r0, r5
 80104a8:	f7ef fe9a 	bl	80001e0 <memchr>
 80104ac:	b138      	cbz	r0, 80104be <_svfiprintf_r+0x142>
 80104ae:	2340      	movs	r3, #64	; 0x40
 80104b0:	1b40      	subs	r0, r0, r5
 80104b2:	fa03 f000 	lsl.w	r0, r3, r0
 80104b6:	9b04      	ldr	r3, [sp, #16]
 80104b8:	4303      	orrs	r3, r0
 80104ba:	3701      	adds	r7, #1
 80104bc:	9304      	str	r3, [sp, #16]
 80104be:	7839      	ldrb	r1, [r7, #0]
 80104c0:	4827      	ldr	r0, [pc, #156]	; (8010560 <_svfiprintf_r+0x1e4>)
 80104c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80104c6:	2206      	movs	r2, #6
 80104c8:	1c7e      	adds	r6, r7, #1
 80104ca:	f7ef fe89 	bl	80001e0 <memchr>
 80104ce:	2800      	cmp	r0, #0
 80104d0:	d038      	beq.n	8010544 <_svfiprintf_r+0x1c8>
 80104d2:	4b24      	ldr	r3, [pc, #144]	; (8010564 <_svfiprintf_r+0x1e8>)
 80104d4:	bb13      	cbnz	r3, 801051c <_svfiprintf_r+0x1a0>
 80104d6:	9b03      	ldr	r3, [sp, #12]
 80104d8:	3307      	adds	r3, #7
 80104da:	f023 0307 	bic.w	r3, r3, #7
 80104de:	3308      	adds	r3, #8
 80104e0:	9303      	str	r3, [sp, #12]
 80104e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104e4:	444b      	add	r3, r9
 80104e6:	9309      	str	r3, [sp, #36]	; 0x24
 80104e8:	e76d      	b.n	80103c6 <_svfiprintf_r+0x4a>
 80104ea:	fb05 3202 	mla	r2, r5, r2, r3
 80104ee:	2001      	movs	r0, #1
 80104f0:	460f      	mov	r7, r1
 80104f2:	e7a6      	b.n	8010442 <_svfiprintf_r+0xc6>
 80104f4:	2300      	movs	r3, #0
 80104f6:	3701      	adds	r7, #1
 80104f8:	9305      	str	r3, [sp, #20]
 80104fa:	4619      	mov	r1, r3
 80104fc:	250a      	movs	r5, #10
 80104fe:	4638      	mov	r0, r7
 8010500:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010504:	3a30      	subs	r2, #48	; 0x30
 8010506:	2a09      	cmp	r2, #9
 8010508:	d903      	bls.n	8010512 <_svfiprintf_r+0x196>
 801050a:	2b00      	cmp	r3, #0
 801050c:	d0c8      	beq.n	80104a0 <_svfiprintf_r+0x124>
 801050e:	9105      	str	r1, [sp, #20]
 8010510:	e7c6      	b.n	80104a0 <_svfiprintf_r+0x124>
 8010512:	fb05 2101 	mla	r1, r5, r1, r2
 8010516:	2301      	movs	r3, #1
 8010518:	4607      	mov	r7, r0
 801051a:	e7f0      	b.n	80104fe <_svfiprintf_r+0x182>
 801051c:	ab03      	add	r3, sp, #12
 801051e:	9300      	str	r3, [sp, #0]
 8010520:	4622      	mov	r2, r4
 8010522:	4b11      	ldr	r3, [pc, #68]	; (8010568 <_svfiprintf_r+0x1ec>)
 8010524:	a904      	add	r1, sp, #16
 8010526:	4640      	mov	r0, r8
 8010528:	f3af 8000 	nop.w
 801052c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010530:	4681      	mov	r9, r0
 8010532:	d1d6      	bne.n	80104e2 <_svfiprintf_r+0x166>
 8010534:	89a3      	ldrh	r3, [r4, #12]
 8010536:	065b      	lsls	r3, r3, #25
 8010538:	f53f af35 	bmi.w	80103a6 <_svfiprintf_r+0x2a>
 801053c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801053e:	b01d      	add	sp, #116	; 0x74
 8010540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010544:	ab03      	add	r3, sp, #12
 8010546:	9300      	str	r3, [sp, #0]
 8010548:	4622      	mov	r2, r4
 801054a:	4b07      	ldr	r3, [pc, #28]	; (8010568 <_svfiprintf_r+0x1ec>)
 801054c:	a904      	add	r1, sp, #16
 801054e:	4640      	mov	r0, r8
 8010550:	f000 f9c2 	bl	80108d8 <_printf_i>
 8010554:	e7ea      	b.n	801052c <_svfiprintf_r+0x1b0>
 8010556:	bf00      	nop
 8010558:	0801281c 	.word	0x0801281c
 801055c:	08012822 	.word	0x08012822
 8010560:	08012826 	.word	0x08012826
 8010564:	00000000 	.word	0x00000000
 8010568:	080102c9 	.word	0x080102c9

0801056c <__sfputc_r>:
 801056c:	6893      	ldr	r3, [r2, #8]
 801056e:	3b01      	subs	r3, #1
 8010570:	2b00      	cmp	r3, #0
 8010572:	b410      	push	{r4}
 8010574:	6093      	str	r3, [r2, #8]
 8010576:	da08      	bge.n	801058a <__sfputc_r+0x1e>
 8010578:	6994      	ldr	r4, [r2, #24]
 801057a:	42a3      	cmp	r3, r4
 801057c:	db01      	blt.n	8010582 <__sfputc_r+0x16>
 801057e:	290a      	cmp	r1, #10
 8010580:	d103      	bne.n	801058a <__sfputc_r+0x1e>
 8010582:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010586:	f000 bb0d 	b.w	8010ba4 <__swbuf_r>
 801058a:	6813      	ldr	r3, [r2, #0]
 801058c:	1c58      	adds	r0, r3, #1
 801058e:	6010      	str	r0, [r2, #0]
 8010590:	7019      	strb	r1, [r3, #0]
 8010592:	4608      	mov	r0, r1
 8010594:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010598:	4770      	bx	lr

0801059a <__sfputs_r>:
 801059a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801059c:	4606      	mov	r6, r0
 801059e:	460f      	mov	r7, r1
 80105a0:	4614      	mov	r4, r2
 80105a2:	18d5      	adds	r5, r2, r3
 80105a4:	42ac      	cmp	r4, r5
 80105a6:	d101      	bne.n	80105ac <__sfputs_r+0x12>
 80105a8:	2000      	movs	r0, #0
 80105aa:	e007      	b.n	80105bc <__sfputs_r+0x22>
 80105ac:	463a      	mov	r2, r7
 80105ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105b2:	4630      	mov	r0, r6
 80105b4:	f7ff ffda 	bl	801056c <__sfputc_r>
 80105b8:	1c43      	adds	r3, r0, #1
 80105ba:	d1f3      	bne.n	80105a4 <__sfputs_r+0xa>
 80105bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080105c0 <_vfiprintf_r>:
 80105c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105c4:	460c      	mov	r4, r1
 80105c6:	b09d      	sub	sp, #116	; 0x74
 80105c8:	4617      	mov	r7, r2
 80105ca:	461d      	mov	r5, r3
 80105cc:	4606      	mov	r6, r0
 80105ce:	b118      	cbz	r0, 80105d8 <_vfiprintf_r+0x18>
 80105d0:	6983      	ldr	r3, [r0, #24]
 80105d2:	b90b      	cbnz	r3, 80105d8 <_vfiprintf_r+0x18>
 80105d4:	f7ff fd94 	bl	8010100 <__sinit>
 80105d8:	4b7c      	ldr	r3, [pc, #496]	; (80107cc <_vfiprintf_r+0x20c>)
 80105da:	429c      	cmp	r4, r3
 80105dc:	d158      	bne.n	8010690 <_vfiprintf_r+0xd0>
 80105de:	6874      	ldr	r4, [r6, #4]
 80105e0:	89a3      	ldrh	r3, [r4, #12]
 80105e2:	0718      	lsls	r0, r3, #28
 80105e4:	d55e      	bpl.n	80106a4 <_vfiprintf_r+0xe4>
 80105e6:	6923      	ldr	r3, [r4, #16]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d05b      	beq.n	80106a4 <_vfiprintf_r+0xe4>
 80105ec:	2300      	movs	r3, #0
 80105ee:	9309      	str	r3, [sp, #36]	; 0x24
 80105f0:	2320      	movs	r3, #32
 80105f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105f6:	2330      	movs	r3, #48	; 0x30
 80105f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105fc:	9503      	str	r5, [sp, #12]
 80105fe:	f04f 0b01 	mov.w	fp, #1
 8010602:	46b8      	mov	r8, r7
 8010604:	4645      	mov	r5, r8
 8010606:	f815 3b01 	ldrb.w	r3, [r5], #1
 801060a:	b10b      	cbz	r3, 8010610 <_vfiprintf_r+0x50>
 801060c:	2b25      	cmp	r3, #37	; 0x25
 801060e:	d154      	bne.n	80106ba <_vfiprintf_r+0xfa>
 8010610:	ebb8 0a07 	subs.w	sl, r8, r7
 8010614:	d00b      	beq.n	801062e <_vfiprintf_r+0x6e>
 8010616:	4653      	mov	r3, sl
 8010618:	463a      	mov	r2, r7
 801061a:	4621      	mov	r1, r4
 801061c:	4630      	mov	r0, r6
 801061e:	f7ff ffbc 	bl	801059a <__sfputs_r>
 8010622:	3001      	adds	r0, #1
 8010624:	f000 80c2 	beq.w	80107ac <_vfiprintf_r+0x1ec>
 8010628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801062a:	4453      	add	r3, sl
 801062c:	9309      	str	r3, [sp, #36]	; 0x24
 801062e:	f898 3000 	ldrb.w	r3, [r8]
 8010632:	2b00      	cmp	r3, #0
 8010634:	f000 80ba 	beq.w	80107ac <_vfiprintf_r+0x1ec>
 8010638:	2300      	movs	r3, #0
 801063a:	f04f 32ff 	mov.w	r2, #4294967295
 801063e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010642:	9304      	str	r3, [sp, #16]
 8010644:	9307      	str	r3, [sp, #28]
 8010646:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801064a:	931a      	str	r3, [sp, #104]	; 0x68
 801064c:	46a8      	mov	r8, r5
 801064e:	2205      	movs	r2, #5
 8010650:	f818 1b01 	ldrb.w	r1, [r8], #1
 8010654:	485e      	ldr	r0, [pc, #376]	; (80107d0 <_vfiprintf_r+0x210>)
 8010656:	f7ef fdc3 	bl	80001e0 <memchr>
 801065a:	9b04      	ldr	r3, [sp, #16]
 801065c:	bb78      	cbnz	r0, 80106be <_vfiprintf_r+0xfe>
 801065e:	06d9      	lsls	r1, r3, #27
 8010660:	bf44      	itt	mi
 8010662:	2220      	movmi	r2, #32
 8010664:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010668:	071a      	lsls	r2, r3, #28
 801066a:	bf44      	itt	mi
 801066c:	222b      	movmi	r2, #43	; 0x2b
 801066e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010672:	782a      	ldrb	r2, [r5, #0]
 8010674:	2a2a      	cmp	r2, #42	; 0x2a
 8010676:	d02a      	beq.n	80106ce <_vfiprintf_r+0x10e>
 8010678:	9a07      	ldr	r2, [sp, #28]
 801067a:	46a8      	mov	r8, r5
 801067c:	2000      	movs	r0, #0
 801067e:	250a      	movs	r5, #10
 8010680:	4641      	mov	r1, r8
 8010682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010686:	3b30      	subs	r3, #48	; 0x30
 8010688:	2b09      	cmp	r3, #9
 801068a:	d969      	bls.n	8010760 <_vfiprintf_r+0x1a0>
 801068c:	b360      	cbz	r0, 80106e8 <_vfiprintf_r+0x128>
 801068e:	e024      	b.n	80106da <_vfiprintf_r+0x11a>
 8010690:	4b50      	ldr	r3, [pc, #320]	; (80107d4 <_vfiprintf_r+0x214>)
 8010692:	429c      	cmp	r4, r3
 8010694:	d101      	bne.n	801069a <_vfiprintf_r+0xda>
 8010696:	68b4      	ldr	r4, [r6, #8]
 8010698:	e7a2      	b.n	80105e0 <_vfiprintf_r+0x20>
 801069a:	4b4f      	ldr	r3, [pc, #316]	; (80107d8 <_vfiprintf_r+0x218>)
 801069c:	429c      	cmp	r4, r3
 801069e:	bf08      	it	eq
 80106a0:	68f4      	ldreq	r4, [r6, #12]
 80106a2:	e79d      	b.n	80105e0 <_vfiprintf_r+0x20>
 80106a4:	4621      	mov	r1, r4
 80106a6:	4630      	mov	r0, r6
 80106a8:	f000 fae0 	bl	8010c6c <__swsetup_r>
 80106ac:	2800      	cmp	r0, #0
 80106ae:	d09d      	beq.n	80105ec <_vfiprintf_r+0x2c>
 80106b0:	f04f 30ff 	mov.w	r0, #4294967295
 80106b4:	b01d      	add	sp, #116	; 0x74
 80106b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ba:	46a8      	mov	r8, r5
 80106bc:	e7a2      	b.n	8010604 <_vfiprintf_r+0x44>
 80106be:	4a44      	ldr	r2, [pc, #272]	; (80107d0 <_vfiprintf_r+0x210>)
 80106c0:	1a80      	subs	r0, r0, r2
 80106c2:	fa0b f000 	lsl.w	r0, fp, r0
 80106c6:	4318      	orrs	r0, r3
 80106c8:	9004      	str	r0, [sp, #16]
 80106ca:	4645      	mov	r5, r8
 80106cc:	e7be      	b.n	801064c <_vfiprintf_r+0x8c>
 80106ce:	9a03      	ldr	r2, [sp, #12]
 80106d0:	1d11      	adds	r1, r2, #4
 80106d2:	6812      	ldr	r2, [r2, #0]
 80106d4:	9103      	str	r1, [sp, #12]
 80106d6:	2a00      	cmp	r2, #0
 80106d8:	db01      	blt.n	80106de <_vfiprintf_r+0x11e>
 80106da:	9207      	str	r2, [sp, #28]
 80106dc:	e004      	b.n	80106e8 <_vfiprintf_r+0x128>
 80106de:	4252      	negs	r2, r2
 80106e0:	f043 0302 	orr.w	r3, r3, #2
 80106e4:	9207      	str	r2, [sp, #28]
 80106e6:	9304      	str	r3, [sp, #16]
 80106e8:	f898 3000 	ldrb.w	r3, [r8]
 80106ec:	2b2e      	cmp	r3, #46	; 0x2e
 80106ee:	d10e      	bne.n	801070e <_vfiprintf_r+0x14e>
 80106f0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80106f4:	2b2a      	cmp	r3, #42	; 0x2a
 80106f6:	d138      	bne.n	801076a <_vfiprintf_r+0x1aa>
 80106f8:	9b03      	ldr	r3, [sp, #12]
 80106fa:	1d1a      	adds	r2, r3, #4
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	9203      	str	r2, [sp, #12]
 8010700:	2b00      	cmp	r3, #0
 8010702:	bfb8      	it	lt
 8010704:	f04f 33ff 	movlt.w	r3, #4294967295
 8010708:	f108 0802 	add.w	r8, r8, #2
 801070c:	9305      	str	r3, [sp, #20]
 801070e:	4d33      	ldr	r5, [pc, #204]	; (80107dc <_vfiprintf_r+0x21c>)
 8010710:	f898 1000 	ldrb.w	r1, [r8]
 8010714:	2203      	movs	r2, #3
 8010716:	4628      	mov	r0, r5
 8010718:	f7ef fd62 	bl	80001e0 <memchr>
 801071c:	b140      	cbz	r0, 8010730 <_vfiprintf_r+0x170>
 801071e:	2340      	movs	r3, #64	; 0x40
 8010720:	1b40      	subs	r0, r0, r5
 8010722:	fa03 f000 	lsl.w	r0, r3, r0
 8010726:	9b04      	ldr	r3, [sp, #16]
 8010728:	4303      	orrs	r3, r0
 801072a:	f108 0801 	add.w	r8, r8, #1
 801072e:	9304      	str	r3, [sp, #16]
 8010730:	f898 1000 	ldrb.w	r1, [r8]
 8010734:	482a      	ldr	r0, [pc, #168]	; (80107e0 <_vfiprintf_r+0x220>)
 8010736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801073a:	2206      	movs	r2, #6
 801073c:	f108 0701 	add.w	r7, r8, #1
 8010740:	f7ef fd4e 	bl	80001e0 <memchr>
 8010744:	2800      	cmp	r0, #0
 8010746:	d037      	beq.n	80107b8 <_vfiprintf_r+0x1f8>
 8010748:	4b26      	ldr	r3, [pc, #152]	; (80107e4 <_vfiprintf_r+0x224>)
 801074a:	bb1b      	cbnz	r3, 8010794 <_vfiprintf_r+0x1d4>
 801074c:	9b03      	ldr	r3, [sp, #12]
 801074e:	3307      	adds	r3, #7
 8010750:	f023 0307 	bic.w	r3, r3, #7
 8010754:	3308      	adds	r3, #8
 8010756:	9303      	str	r3, [sp, #12]
 8010758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801075a:	444b      	add	r3, r9
 801075c:	9309      	str	r3, [sp, #36]	; 0x24
 801075e:	e750      	b.n	8010602 <_vfiprintf_r+0x42>
 8010760:	fb05 3202 	mla	r2, r5, r2, r3
 8010764:	2001      	movs	r0, #1
 8010766:	4688      	mov	r8, r1
 8010768:	e78a      	b.n	8010680 <_vfiprintf_r+0xc0>
 801076a:	2300      	movs	r3, #0
 801076c:	f108 0801 	add.w	r8, r8, #1
 8010770:	9305      	str	r3, [sp, #20]
 8010772:	4619      	mov	r1, r3
 8010774:	250a      	movs	r5, #10
 8010776:	4640      	mov	r0, r8
 8010778:	f810 2b01 	ldrb.w	r2, [r0], #1
 801077c:	3a30      	subs	r2, #48	; 0x30
 801077e:	2a09      	cmp	r2, #9
 8010780:	d903      	bls.n	801078a <_vfiprintf_r+0x1ca>
 8010782:	2b00      	cmp	r3, #0
 8010784:	d0c3      	beq.n	801070e <_vfiprintf_r+0x14e>
 8010786:	9105      	str	r1, [sp, #20]
 8010788:	e7c1      	b.n	801070e <_vfiprintf_r+0x14e>
 801078a:	fb05 2101 	mla	r1, r5, r1, r2
 801078e:	2301      	movs	r3, #1
 8010790:	4680      	mov	r8, r0
 8010792:	e7f0      	b.n	8010776 <_vfiprintf_r+0x1b6>
 8010794:	ab03      	add	r3, sp, #12
 8010796:	9300      	str	r3, [sp, #0]
 8010798:	4622      	mov	r2, r4
 801079a:	4b13      	ldr	r3, [pc, #76]	; (80107e8 <_vfiprintf_r+0x228>)
 801079c:	a904      	add	r1, sp, #16
 801079e:	4630      	mov	r0, r6
 80107a0:	f3af 8000 	nop.w
 80107a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80107a8:	4681      	mov	r9, r0
 80107aa:	d1d5      	bne.n	8010758 <_vfiprintf_r+0x198>
 80107ac:	89a3      	ldrh	r3, [r4, #12]
 80107ae:	065b      	lsls	r3, r3, #25
 80107b0:	f53f af7e 	bmi.w	80106b0 <_vfiprintf_r+0xf0>
 80107b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107b6:	e77d      	b.n	80106b4 <_vfiprintf_r+0xf4>
 80107b8:	ab03      	add	r3, sp, #12
 80107ba:	9300      	str	r3, [sp, #0]
 80107bc:	4622      	mov	r2, r4
 80107be:	4b0a      	ldr	r3, [pc, #40]	; (80107e8 <_vfiprintf_r+0x228>)
 80107c0:	a904      	add	r1, sp, #16
 80107c2:	4630      	mov	r0, r6
 80107c4:	f000 f888 	bl	80108d8 <_printf_i>
 80107c8:	e7ec      	b.n	80107a4 <_vfiprintf_r+0x1e4>
 80107ca:	bf00      	nop
 80107cc:	080127dc 	.word	0x080127dc
 80107d0:	0801281c 	.word	0x0801281c
 80107d4:	080127fc 	.word	0x080127fc
 80107d8:	080127bc 	.word	0x080127bc
 80107dc:	08012822 	.word	0x08012822
 80107e0:	08012826 	.word	0x08012826
 80107e4:	00000000 	.word	0x00000000
 80107e8:	0801059b 	.word	0x0801059b

080107ec <_printf_common>:
 80107ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107f0:	4691      	mov	r9, r2
 80107f2:	461f      	mov	r7, r3
 80107f4:	688a      	ldr	r2, [r1, #8]
 80107f6:	690b      	ldr	r3, [r1, #16]
 80107f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80107fc:	4293      	cmp	r3, r2
 80107fe:	bfb8      	it	lt
 8010800:	4613      	movlt	r3, r2
 8010802:	f8c9 3000 	str.w	r3, [r9]
 8010806:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801080a:	4606      	mov	r6, r0
 801080c:	460c      	mov	r4, r1
 801080e:	b112      	cbz	r2, 8010816 <_printf_common+0x2a>
 8010810:	3301      	adds	r3, #1
 8010812:	f8c9 3000 	str.w	r3, [r9]
 8010816:	6823      	ldr	r3, [r4, #0]
 8010818:	0699      	lsls	r1, r3, #26
 801081a:	bf42      	ittt	mi
 801081c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010820:	3302      	addmi	r3, #2
 8010822:	f8c9 3000 	strmi.w	r3, [r9]
 8010826:	6825      	ldr	r5, [r4, #0]
 8010828:	f015 0506 	ands.w	r5, r5, #6
 801082c:	d107      	bne.n	801083e <_printf_common+0x52>
 801082e:	f104 0a19 	add.w	sl, r4, #25
 8010832:	68e3      	ldr	r3, [r4, #12]
 8010834:	f8d9 2000 	ldr.w	r2, [r9]
 8010838:	1a9b      	subs	r3, r3, r2
 801083a:	42ab      	cmp	r3, r5
 801083c:	dc28      	bgt.n	8010890 <_printf_common+0xa4>
 801083e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010842:	6822      	ldr	r2, [r4, #0]
 8010844:	3300      	adds	r3, #0
 8010846:	bf18      	it	ne
 8010848:	2301      	movne	r3, #1
 801084a:	0692      	lsls	r2, r2, #26
 801084c:	d42d      	bmi.n	80108aa <_printf_common+0xbe>
 801084e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010852:	4639      	mov	r1, r7
 8010854:	4630      	mov	r0, r6
 8010856:	47c0      	blx	r8
 8010858:	3001      	adds	r0, #1
 801085a:	d020      	beq.n	801089e <_printf_common+0xb2>
 801085c:	6823      	ldr	r3, [r4, #0]
 801085e:	68e5      	ldr	r5, [r4, #12]
 8010860:	f8d9 2000 	ldr.w	r2, [r9]
 8010864:	f003 0306 	and.w	r3, r3, #6
 8010868:	2b04      	cmp	r3, #4
 801086a:	bf08      	it	eq
 801086c:	1aad      	subeq	r5, r5, r2
 801086e:	68a3      	ldr	r3, [r4, #8]
 8010870:	6922      	ldr	r2, [r4, #16]
 8010872:	bf0c      	ite	eq
 8010874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010878:	2500      	movne	r5, #0
 801087a:	4293      	cmp	r3, r2
 801087c:	bfc4      	itt	gt
 801087e:	1a9b      	subgt	r3, r3, r2
 8010880:	18ed      	addgt	r5, r5, r3
 8010882:	f04f 0900 	mov.w	r9, #0
 8010886:	341a      	adds	r4, #26
 8010888:	454d      	cmp	r5, r9
 801088a:	d11a      	bne.n	80108c2 <_printf_common+0xd6>
 801088c:	2000      	movs	r0, #0
 801088e:	e008      	b.n	80108a2 <_printf_common+0xb6>
 8010890:	2301      	movs	r3, #1
 8010892:	4652      	mov	r2, sl
 8010894:	4639      	mov	r1, r7
 8010896:	4630      	mov	r0, r6
 8010898:	47c0      	blx	r8
 801089a:	3001      	adds	r0, #1
 801089c:	d103      	bne.n	80108a6 <_printf_common+0xba>
 801089e:	f04f 30ff 	mov.w	r0, #4294967295
 80108a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108a6:	3501      	adds	r5, #1
 80108a8:	e7c3      	b.n	8010832 <_printf_common+0x46>
 80108aa:	18e1      	adds	r1, r4, r3
 80108ac:	1c5a      	adds	r2, r3, #1
 80108ae:	2030      	movs	r0, #48	; 0x30
 80108b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80108b4:	4422      	add	r2, r4
 80108b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80108ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80108be:	3302      	adds	r3, #2
 80108c0:	e7c5      	b.n	801084e <_printf_common+0x62>
 80108c2:	2301      	movs	r3, #1
 80108c4:	4622      	mov	r2, r4
 80108c6:	4639      	mov	r1, r7
 80108c8:	4630      	mov	r0, r6
 80108ca:	47c0      	blx	r8
 80108cc:	3001      	adds	r0, #1
 80108ce:	d0e6      	beq.n	801089e <_printf_common+0xb2>
 80108d0:	f109 0901 	add.w	r9, r9, #1
 80108d4:	e7d8      	b.n	8010888 <_printf_common+0x9c>
	...

080108d8 <_printf_i>:
 80108d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80108e0:	460c      	mov	r4, r1
 80108e2:	7e09      	ldrb	r1, [r1, #24]
 80108e4:	b085      	sub	sp, #20
 80108e6:	296e      	cmp	r1, #110	; 0x6e
 80108e8:	4617      	mov	r7, r2
 80108ea:	4606      	mov	r6, r0
 80108ec:	4698      	mov	r8, r3
 80108ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80108f0:	f000 80b3 	beq.w	8010a5a <_printf_i+0x182>
 80108f4:	d822      	bhi.n	801093c <_printf_i+0x64>
 80108f6:	2963      	cmp	r1, #99	; 0x63
 80108f8:	d036      	beq.n	8010968 <_printf_i+0x90>
 80108fa:	d80a      	bhi.n	8010912 <_printf_i+0x3a>
 80108fc:	2900      	cmp	r1, #0
 80108fe:	f000 80b9 	beq.w	8010a74 <_printf_i+0x19c>
 8010902:	2958      	cmp	r1, #88	; 0x58
 8010904:	f000 8083 	beq.w	8010a0e <_printf_i+0x136>
 8010908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801090c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010910:	e032      	b.n	8010978 <_printf_i+0xa0>
 8010912:	2964      	cmp	r1, #100	; 0x64
 8010914:	d001      	beq.n	801091a <_printf_i+0x42>
 8010916:	2969      	cmp	r1, #105	; 0x69
 8010918:	d1f6      	bne.n	8010908 <_printf_i+0x30>
 801091a:	6820      	ldr	r0, [r4, #0]
 801091c:	6813      	ldr	r3, [r2, #0]
 801091e:	0605      	lsls	r5, r0, #24
 8010920:	f103 0104 	add.w	r1, r3, #4
 8010924:	d52a      	bpl.n	801097c <_printf_i+0xa4>
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	6011      	str	r1, [r2, #0]
 801092a:	2b00      	cmp	r3, #0
 801092c:	da03      	bge.n	8010936 <_printf_i+0x5e>
 801092e:	222d      	movs	r2, #45	; 0x2d
 8010930:	425b      	negs	r3, r3
 8010932:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010936:	486f      	ldr	r0, [pc, #444]	; (8010af4 <_printf_i+0x21c>)
 8010938:	220a      	movs	r2, #10
 801093a:	e039      	b.n	80109b0 <_printf_i+0xd8>
 801093c:	2973      	cmp	r1, #115	; 0x73
 801093e:	f000 809d 	beq.w	8010a7c <_printf_i+0x1a4>
 8010942:	d808      	bhi.n	8010956 <_printf_i+0x7e>
 8010944:	296f      	cmp	r1, #111	; 0x6f
 8010946:	d020      	beq.n	801098a <_printf_i+0xb2>
 8010948:	2970      	cmp	r1, #112	; 0x70
 801094a:	d1dd      	bne.n	8010908 <_printf_i+0x30>
 801094c:	6823      	ldr	r3, [r4, #0]
 801094e:	f043 0320 	orr.w	r3, r3, #32
 8010952:	6023      	str	r3, [r4, #0]
 8010954:	e003      	b.n	801095e <_printf_i+0x86>
 8010956:	2975      	cmp	r1, #117	; 0x75
 8010958:	d017      	beq.n	801098a <_printf_i+0xb2>
 801095a:	2978      	cmp	r1, #120	; 0x78
 801095c:	d1d4      	bne.n	8010908 <_printf_i+0x30>
 801095e:	2378      	movs	r3, #120	; 0x78
 8010960:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010964:	4864      	ldr	r0, [pc, #400]	; (8010af8 <_printf_i+0x220>)
 8010966:	e055      	b.n	8010a14 <_printf_i+0x13c>
 8010968:	6813      	ldr	r3, [r2, #0]
 801096a:	1d19      	adds	r1, r3, #4
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	6011      	str	r1, [r2, #0]
 8010970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010978:	2301      	movs	r3, #1
 801097a:	e08c      	b.n	8010a96 <_printf_i+0x1be>
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	6011      	str	r1, [r2, #0]
 8010980:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010984:	bf18      	it	ne
 8010986:	b21b      	sxthne	r3, r3
 8010988:	e7cf      	b.n	801092a <_printf_i+0x52>
 801098a:	6813      	ldr	r3, [r2, #0]
 801098c:	6825      	ldr	r5, [r4, #0]
 801098e:	1d18      	adds	r0, r3, #4
 8010990:	6010      	str	r0, [r2, #0]
 8010992:	0628      	lsls	r0, r5, #24
 8010994:	d501      	bpl.n	801099a <_printf_i+0xc2>
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	e002      	b.n	80109a0 <_printf_i+0xc8>
 801099a:	0668      	lsls	r0, r5, #25
 801099c:	d5fb      	bpl.n	8010996 <_printf_i+0xbe>
 801099e:	881b      	ldrh	r3, [r3, #0]
 80109a0:	4854      	ldr	r0, [pc, #336]	; (8010af4 <_printf_i+0x21c>)
 80109a2:	296f      	cmp	r1, #111	; 0x6f
 80109a4:	bf14      	ite	ne
 80109a6:	220a      	movne	r2, #10
 80109a8:	2208      	moveq	r2, #8
 80109aa:	2100      	movs	r1, #0
 80109ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80109b0:	6865      	ldr	r5, [r4, #4]
 80109b2:	60a5      	str	r5, [r4, #8]
 80109b4:	2d00      	cmp	r5, #0
 80109b6:	f2c0 8095 	blt.w	8010ae4 <_printf_i+0x20c>
 80109ba:	6821      	ldr	r1, [r4, #0]
 80109bc:	f021 0104 	bic.w	r1, r1, #4
 80109c0:	6021      	str	r1, [r4, #0]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d13d      	bne.n	8010a42 <_printf_i+0x16a>
 80109c6:	2d00      	cmp	r5, #0
 80109c8:	f040 808e 	bne.w	8010ae8 <_printf_i+0x210>
 80109cc:	4665      	mov	r5, ip
 80109ce:	2a08      	cmp	r2, #8
 80109d0:	d10b      	bne.n	80109ea <_printf_i+0x112>
 80109d2:	6823      	ldr	r3, [r4, #0]
 80109d4:	07db      	lsls	r3, r3, #31
 80109d6:	d508      	bpl.n	80109ea <_printf_i+0x112>
 80109d8:	6923      	ldr	r3, [r4, #16]
 80109da:	6862      	ldr	r2, [r4, #4]
 80109dc:	429a      	cmp	r2, r3
 80109de:	bfde      	ittt	le
 80109e0:	2330      	movle	r3, #48	; 0x30
 80109e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80109e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80109ea:	ebac 0305 	sub.w	r3, ip, r5
 80109ee:	6123      	str	r3, [r4, #16]
 80109f0:	f8cd 8000 	str.w	r8, [sp]
 80109f4:	463b      	mov	r3, r7
 80109f6:	aa03      	add	r2, sp, #12
 80109f8:	4621      	mov	r1, r4
 80109fa:	4630      	mov	r0, r6
 80109fc:	f7ff fef6 	bl	80107ec <_printf_common>
 8010a00:	3001      	adds	r0, #1
 8010a02:	d14d      	bne.n	8010aa0 <_printf_i+0x1c8>
 8010a04:	f04f 30ff 	mov.w	r0, #4294967295
 8010a08:	b005      	add	sp, #20
 8010a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a0e:	4839      	ldr	r0, [pc, #228]	; (8010af4 <_printf_i+0x21c>)
 8010a10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010a14:	6813      	ldr	r3, [r2, #0]
 8010a16:	6821      	ldr	r1, [r4, #0]
 8010a18:	1d1d      	adds	r5, r3, #4
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	6015      	str	r5, [r2, #0]
 8010a1e:	060a      	lsls	r2, r1, #24
 8010a20:	d50b      	bpl.n	8010a3a <_printf_i+0x162>
 8010a22:	07ca      	lsls	r2, r1, #31
 8010a24:	bf44      	itt	mi
 8010a26:	f041 0120 	orrmi.w	r1, r1, #32
 8010a2a:	6021      	strmi	r1, [r4, #0]
 8010a2c:	b91b      	cbnz	r3, 8010a36 <_printf_i+0x15e>
 8010a2e:	6822      	ldr	r2, [r4, #0]
 8010a30:	f022 0220 	bic.w	r2, r2, #32
 8010a34:	6022      	str	r2, [r4, #0]
 8010a36:	2210      	movs	r2, #16
 8010a38:	e7b7      	b.n	80109aa <_printf_i+0xd2>
 8010a3a:	064d      	lsls	r5, r1, #25
 8010a3c:	bf48      	it	mi
 8010a3e:	b29b      	uxthmi	r3, r3
 8010a40:	e7ef      	b.n	8010a22 <_printf_i+0x14a>
 8010a42:	4665      	mov	r5, ip
 8010a44:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a48:	fb02 3311 	mls	r3, r2, r1, r3
 8010a4c:	5cc3      	ldrb	r3, [r0, r3]
 8010a4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010a52:	460b      	mov	r3, r1
 8010a54:	2900      	cmp	r1, #0
 8010a56:	d1f5      	bne.n	8010a44 <_printf_i+0x16c>
 8010a58:	e7b9      	b.n	80109ce <_printf_i+0xf6>
 8010a5a:	6813      	ldr	r3, [r2, #0]
 8010a5c:	6825      	ldr	r5, [r4, #0]
 8010a5e:	6961      	ldr	r1, [r4, #20]
 8010a60:	1d18      	adds	r0, r3, #4
 8010a62:	6010      	str	r0, [r2, #0]
 8010a64:	0628      	lsls	r0, r5, #24
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	d501      	bpl.n	8010a6e <_printf_i+0x196>
 8010a6a:	6019      	str	r1, [r3, #0]
 8010a6c:	e002      	b.n	8010a74 <_printf_i+0x19c>
 8010a6e:	066a      	lsls	r2, r5, #25
 8010a70:	d5fb      	bpl.n	8010a6a <_printf_i+0x192>
 8010a72:	8019      	strh	r1, [r3, #0]
 8010a74:	2300      	movs	r3, #0
 8010a76:	6123      	str	r3, [r4, #16]
 8010a78:	4665      	mov	r5, ip
 8010a7a:	e7b9      	b.n	80109f0 <_printf_i+0x118>
 8010a7c:	6813      	ldr	r3, [r2, #0]
 8010a7e:	1d19      	adds	r1, r3, #4
 8010a80:	6011      	str	r1, [r2, #0]
 8010a82:	681d      	ldr	r5, [r3, #0]
 8010a84:	6862      	ldr	r2, [r4, #4]
 8010a86:	2100      	movs	r1, #0
 8010a88:	4628      	mov	r0, r5
 8010a8a:	f7ef fba9 	bl	80001e0 <memchr>
 8010a8e:	b108      	cbz	r0, 8010a94 <_printf_i+0x1bc>
 8010a90:	1b40      	subs	r0, r0, r5
 8010a92:	6060      	str	r0, [r4, #4]
 8010a94:	6863      	ldr	r3, [r4, #4]
 8010a96:	6123      	str	r3, [r4, #16]
 8010a98:	2300      	movs	r3, #0
 8010a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a9e:	e7a7      	b.n	80109f0 <_printf_i+0x118>
 8010aa0:	6923      	ldr	r3, [r4, #16]
 8010aa2:	462a      	mov	r2, r5
 8010aa4:	4639      	mov	r1, r7
 8010aa6:	4630      	mov	r0, r6
 8010aa8:	47c0      	blx	r8
 8010aaa:	3001      	adds	r0, #1
 8010aac:	d0aa      	beq.n	8010a04 <_printf_i+0x12c>
 8010aae:	6823      	ldr	r3, [r4, #0]
 8010ab0:	079b      	lsls	r3, r3, #30
 8010ab2:	d413      	bmi.n	8010adc <_printf_i+0x204>
 8010ab4:	68e0      	ldr	r0, [r4, #12]
 8010ab6:	9b03      	ldr	r3, [sp, #12]
 8010ab8:	4298      	cmp	r0, r3
 8010aba:	bfb8      	it	lt
 8010abc:	4618      	movlt	r0, r3
 8010abe:	e7a3      	b.n	8010a08 <_printf_i+0x130>
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	464a      	mov	r2, r9
 8010ac4:	4639      	mov	r1, r7
 8010ac6:	4630      	mov	r0, r6
 8010ac8:	47c0      	blx	r8
 8010aca:	3001      	adds	r0, #1
 8010acc:	d09a      	beq.n	8010a04 <_printf_i+0x12c>
 8010ace:	3501      	adds	r5, #1
 8010ad0:	68e3      	ldr	r3, [r4, #12]
 8010ad2:	9a03      	ldr	r2, [sp, #12]
 8010ad4:	1a9b      	subs	r3, r3, r2
 8010ad6:	42ab      	cmp	r3, r5
 8010ad8:	dcf2      	bgt.n	8010ac0 <_printf_i+0x1e8>
 8010ada:	e7eb      	b.n	8010ab4 <_printf_i+0x1dc>
 8010adc:	2500      	movs	r5, #0
 8010ade:	f104 0919 	add.w	r9, r4, #25
 8010ae2:	e7f5      	b.n	8010ad0 <_printf_i+0x1f8>
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d1ac      	bne.n	8010a42 <_printf_i+0x16a>
 8010ae8:	7803      	ldrb	r3, [r0, #0]
 8010aea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010aee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010af2:	e76c      	b.n	80109ce <_printf_i+0xf6>
 8010af4:	0801282d 	.word	0x0801282d
 8010af8:	0801283e 	.word	0x0801283e

08010afc <_sbrk_r>:
 8010afc:	b538      	push	{r3, r4, r5, lr}
 8010afe:	4c06      	ldr	r4, [pc, #24]	; (8010b18 <_sbrk_r+0x1c>)
 8010b00:	2300      	movs	r3, #0
 8010b02:	4605      	mov	r5, r0
 8010b04:	4608      	mov	r0, r1
 8010b06:	6023      	str	r3, [r4, #0]
 8010b08:	f7f0 ff0c 	bl	8001924 <_sbrk>
 8010b0c:	1c43      	adds	r3, r0, #1
 8010b0e:	d102      	bne.n	8010b16 <_sbrk_r+0x1a>
 8010b10:	6823      	ldr	r3, [r4, #0]
 8010b12:	b103      	cbz	r3, 8010b16 <_sbrk_r+0x1a>
 8010b14:	602b      	str	r3, [r5, #0]
 8010b16:	bd38      	pop	{r3, r4, r5, pc}
 8010b18:	20009528 	.word	0x20009528

08010b1c <__sread>:
 8010b1c:	b510      	push	{r4, lr}
 8010b1e:	460c      	mov	r4, r1
 8010b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b24:	f000 fad6 	bl	80110d4 <_read_r>
 8010b28:	2800      	cmp	r0, #0
 8010b2a:	bfab      	itete	ge
 8010b2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010b2e:	89a3      	ldrhlt	r3, [r4, #12]
 8010b30:	181b      	addge	r3, r3, r0
 8010b32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010b36:	bfac      	ite	ge
 8010b38:	6563      	strge	r3, [r4, #84]	; 0x54
 8010b3a:	81a3      	strhlt	r3, [r4, #12]
 8010b3c:	bd10      	pop	{r4, pc}

08010b3e <__swrite>:
 8010b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b42:	461f      	mov	r7, r3
 8010b44:	898b      	ldrh	r3, [r1, #12]
 8010b46:	05db      	lsls	r3, r3, #23
 8010b48:	4605      	mov	r5, r0
 8010b4a:	460c      	mov	r4, r1
 8010b4c:	4616      	mov	r6, r2
 8010b4e:	d505      	bpl.n	8010b5c <__swrite+0x1e>
 8010b50:	2302      	movs	r3, #2
 8010b52:	2200      	movs	r2, #0
 8010b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b58:	f000 f9b6 	bl	8010ec8 <_lseek_r>
 8010b5c:	89a3      	ldrh	r3, [r4, #12]
 8010b5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010b66:	81a3      	strh	r3, [r4, #12]
 8010b68:	4632      	mov	r2, r6
 8010b6a:	463b      	mov	r3, r7
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b72:	f000 b869 	b.w	8010c48 <_write_r>

08010b76 <__sseek>:
 8010b76:	b510      	push	{r4, lr}
 8010b78:	460c      	mov	r4, r1
 8010b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b7e:	f000 f9a3 	bl	8010ec8 <_lseek_r>
 8010b82:	1c43      	adds	r3, r0, #1
 8010b84:	89a3      	ldrh	r3, [r4, #12]
 8010b86:	bf15      	itete	ne
 8010b88:	6560      	strne	r0, [r4, #84]	; 0x54
 8010b8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010b8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010b92:	81a3      	strheq	r3, [r4, #12]
 8010b94:	bf18      	it	ne
 8010b96:	81a3      	strhne	r3, [r4, #12]
 8010b98:	bd10      	pop	{r4, pc}

08010b9a <__sclose>:
 8010b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b9e:	f000 b8d3 	b.w	8010d48 <_close_r>
	...

08010ba4 <__swbuf_r>:
 8010ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ba6:	460e      	mov	r6, r1
 8010ba8:	4614      	mov	r4, r2
 8010baa:	4605      	mov	r5, r0
 8010bac:	b118      	cbz	r0, 8010bb6 <__swbuf_r+0x12>
 8010bae:	6983      	ldr	r3, [r0, #24]
 8010bb0:	b90b      	cbnz	r3, 8010bb6 <__swbuf_r+0x12>
 8010bb2:	f7ff faa5 	bl	8010100 <__sinit>
 8010bb6:	4b21      	ldr	r3, [pc, #132]	; (8010c3c <__swbuf_r+0x98>)
 8010bb8:	429c      	cmp	r4, r3
 8010bba:	d12a      	bne.n	8010c12 <__swbuf_r+0x6e>
 8010bbc:	686c      	ldr	r4, [r5, #4]
 8010bbe:	69a3      	ldr	r3, [r4, #24]
 8010bc0:	60a3      	str	r3, [r4, #8]
 8010bc2:	89a3      	ldrh	r3, [r4, #12]
 8010bc4:	071a      	lsls	r2, r3, #28
 8010bc6:	d52e      	bpl.n	8010c26 <__swbuf_r+0x82>
 8010bc8:	6923      	ldr	r3, [r4, #16]
 8010bca:	b363      	cbz	r3, 8010c26 <__swbuf_r+0x82>
 8010bcc:	6923      	ldr	r3, [r4, #16]
 8010bce:	6820      	ldr	r0, [r4, #0]
 8010bd0:	1ac0      	subs	r0, r0, r3
 8010bd2:	6963      	ldr	r3, [r4, #20]
 8010bd4:	b2f6      	uxtb	r6, r6
 8010bd6:	4283      	cmp	r3, r0
 8010bd8:	4637      	mov	r7, r6
 8010bda:	dc04      	bgt.n	8010be6 <__swbuf_r+0x42>
 8010bdc:	4621      	mov	r1, r4
 8010bde:	4628      	mov	r0, r5
 8010be0:	f000 f948 	bl	8010e74 <_fflush_r>
 8010be4:	bb28      	cbnz	r0, 8010c32 <__swbuf_r+0x8e>
 8010be6:	68a3      	ldr	r3, [r4, #8]
 8010be8:	3b01      	subs	r3, #1
 8010bea:	60a3      	str	r3, [r4, #8]
 8010bec:	6823      	ldr	r3, [r4, #0]
 8010bee:	1c5a      	adds	r2, r3, #1
 8010bf0:	6022      	str	r2, [r4, #0]
 8010bf2:	701e      	strb	r6, [r3, #0]
 8010bf4:	6963      	ldr	r3, [r4, #20]
 8010bf6:	3001      	adds	r0, #1
 8010bf8:	4283      	cmp	r3, r0
 8010bfa:	d004      	beq.n	8010c06 <__swbuf_r+0x62>
 8010bfc:	89a3      	ldrh	r3, [r4, #12]
 8010bfe:	07db      	lsls	r3, r3, #31
 8010c00:	d519      	bpl.n	8010c36 <__swbuf_r+0x92>
 8010c02:	2e0a      	cmp	r6, #10
 8010c04:	d117      	bne.n	8010c36 <__swbuf_r+0x92>
 8010c06:	4621      	mov	r1, r4
 8010c08:	4628      	mov	r0, r5
 8010c0a:	f000 f933 	bl	8010e74 <_fflush_r>
 8010c0e:	b190      	cbz	r0, 8010c36 <__swbuf_r+0x92>
 8010c10:	e00f      	b.n	8010c32 <__swbuf_r+0x8e>
 8010c12:	4b0b      	ldr	r3, [pc, #44]	; (8010c40 <__swbuf_r+0x9c>)
 8010c14:	429c      	cmp	r4, r3
 8010c16:	d101      	bne.n	8010c1c <__swbuf_r+0x78>
 8010c18:	68ac      	ldr	r4, [r5, #8]
 8010c1a:	e7d0      	b.n	8010bbe <__swbuf_r+0x1a>
 8010c1c:	4b09      	ldr	r3, [pc, #36]	; (8010c44 <__swbuf_r+0xa0>)
 8010c1e:	429c      	cmp	r4, r3
 8010c20:	bf08      	it	eq
 8010c22:	68ec      	ldreq	r4, [r5, #12]
 8010c24:	e7cb      	b.n	8010bbe <__swbuf_r+0x1a>
 8010c26:	4621      	mov	r1, r4
 8010c28:	4628      	mov	r0, r5
 8010c2a:	f000 f81f 	bl	8010c6c <__swsetup_r>
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	d0cc      	beq.n	8010bcc <__swbuf_r+0x28>
 8010c32:	f04f 37ff 	mov.w	r7, #4294967295
 8010c36:	4638      	mov	r0, r7
 8010c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c3a:	bf00      	nop
 8010c3c:	080127dc 	.word	0x080127dc
 8010c40:	080127fc 	.word	0x080127fc
 8010c44:	080127bc 	.word	0x080127bc

08010c48 <_write_r>:
 8010c48:	b538      	push	{r3, r4, r5, lr}
 8010c4a:	4c07      	ldr	r4, [pc, #28]	; (8010c68 <_write_r+0x20>)
 8010c4c:	4605      	mov	r5, r0
 8010c4e:	4608      	mov	r0, r1
 8010c50:	4611      	mov	r1, r2
 8010c52:	2200      	movs	r2, #0
 8010c54:	6022      	str	r2, [r4, #0]
 8010c56:	461a      	mov	r2, r3
 8010c58:	f7f0 fe13 	bl	8001882 <_write>
 8010c5c:	1c43      	adds	r3, r0, #1
 8010c5e:	d102      	bne.n	8010c66 <_write_r+0x1e>
 8010c60:	6823      	ldr	r3, [r4, #0]
 8010c62:	b103      	cbz	r3, 8010c66 <_write_r+0x1e>
 8010c64:	602b      	str	r3, [r5, #0]
 8010c66:	bd38      	pop	{r3, r4, r5, pc}
 8010c68:	20009528 	.word	0x20009528

08010c6c <__swsetup_r>:
 8010c6c:	4b32      	ldr	r3, [pc, #200]	; (8010d38 <__swsetup_r+0xcc>)
 8010c6e:	b570      	push	{r4, r5, r6, lr}
 8010c70:	681d      	ldr	r5, [r3, #0]
 8010c72:	4606      	mov	r6, r0
 8010c74:	460c      	mov	r4, r1
 8010c76:	b125      	cbz	r5, 8010c82 <__swsetup_r+0x16>
 8010c78:	69ab      	ldr	r3, [r5, #24]
 8010c7a:	b913      	cbnz	r3, 8010c82 <__swsetup_r+0x16>
 8010c7c:	4628      	mov	r0, r5
 8010c7e:	f7ff fa3f 	bl	8010100 <__sinit>
 8010c82:	4b2e      	ldr	r3, [pc, #184]	; (8010d3c <__swsetup_r+0xd0>)
 8010c84:	429c      	cmp	r4, r3
 8010c86:	d10f      	bne.n	8010ca8 <__swsetup_r+0x3c>
 8010c88:	686c      	ldr	r4, [r5, #4]
 8010c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c8e:	b29a      	uxth	r2, r3
 8010c90:	0715      	lsls	r5, r2, #28
 8010c92:	d42c      	bmi.n	8010cee <__swsetup_r+0x82>
 8010c94:	06d0      	lsls	r0, r2, #27
 8010c96:	d411      	bmi.n	8010cbc <__swsetup_r+0x50>
 8010c98:	2209      	movs	r2, #9
 8010c9a:	6032      	str	r2, [r6, #0]
 8010c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ca0:	81a3      	strh	r3, [r4, #12]
 8010ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ca6:	e03e      	b.n	8010d26 <__swsetup_r+0xba>
 8010ca8:	4b25      	ldr	r3, [pc, #148]	; (8010d40 <__swsetup_r+0xd4>)
 8010caa:	429c      	cmp	r4, r3
 8010cac:	d101      	bne.n	8010cb2 <__swsetup_r+0x46>
 8010cae:	68ac      	ldr	r4, [r5, #8]
 8010cb0:	e7eb      	b.n	8010c8a <__swsetup_r+0x1e>
 8010cb2:	4b24      	ldr	r3, [pc, #144]	; (8010d44 <__swsetup_r+0xd8>)
 8010cb4:	429c      	cmp	r4, r3
 8010cb6:	bf08      	it	eq
 8010cb8:	68ec      	ldreq	r4, [r5, #12]
 8010cba:	e7e6      	b.n	8010c8a <__swsetup_r+0x1e>
 8010cbc:	0751      	lsls	r1, r2, #29
 8010cbe:	d512      	bpl.n	8010ce6 <__swsetup_r+0x7a>
 8010cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010cc2:	b141      	cbz	r1, 8010cd6 <__swsetup_r+0x6a>
 8010cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010cc8:	4299      	cmp	r1, r3
 8010cca:	d002      	beq.n	8010cd2 <__swsetup_r+0x66>
 8010ccc:	4630      	mov	r0, r6
 8010cce:	f000 f98d 	bl	8010fec <_free_r>
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	6363      	str	r3, [r4, #52]	; 0x34
 8010cd6:	89a3      	ldrh	r3, [r4, #12]
 8010cd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010cdc:	81a3      	strh	r3, [r4, #12]
 8010cde:	2300      	movs	r3, #0
 8010ce0:	6063      	str	r3, [r4, #4]
 8010ce2:	6923      	ldr	r3, [r4, #16]
 8010ce4:	6023      	str	r3, [r4, #0]
 8010ce6:	89a3      	ldrh	r3, [r4, #12]
 8010ce8:	f043 0308 	orr.w	r3, r3, #8
 8010cec:	81a3      	strh	r3, [r4, #12]
 8010cee:	6923      	ldr	r3, [r4, #16]
 8010cf0:	b94b      	cbnz	r3, 8010d06 <__swsetup_r+0x9a>
 8010cf2:	89a3      	ldrh	r3, [r4, #12]
 8010cf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010cfc:	d003      	beq.n	8010d06 <__swsetup_r+0x9a>
 8010cfe:	4621      	mov	r1, r4
 8010d00:	4630      	mov	r0, r6
 8010d02:	f000 f917 	bl	8010f34 <__smakebuf_r>
 8010d06:	89a2      	ldrh	r2, [r4, #12]
 8010d08:	f012 0301 	ands.w	r3, r2, #1
 8010d0c:	d00c      	beq.n	8010d28 <__swsetup_r+0xbc>
 8010d0e:	2300      	movs	r3, #0
 8010d10:	60a3      	str	r3, [r4, #8]
 8010d12:	6963      	ldr	r3, [r4, #20]
 8010d14:	425b      	negs	r3, r3
 8010d16:	61a3      	str	r3, [r4, #24]
 8010d18:	6923      	ldr	r3, [r4, #16]
 8010d1a:	b953      	cbnz	r3, 8010d32 <__swsetup_r+0xc6>
 8010d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010d24:	d1ba      	bne.n	8010c9c <__swsetup_r+0x30>
 8010d26:	bd70      	pop	{r4, r5, r6, pc}
 8010d28:	0792      	lsls	r2, r2, #30
 8010d2a:	bf58      	it	pl
 8010d2c:	6963      	ldrpl	r3, [r4, #20]
 8010d2e:	60a3      	str	r3, [r4, #8]
 8010d30:	e7f2      	b.n	8010d18 <__swsetup_r+0xac>
 8010d32:	2000      	movs	r0, #0
 8010d34:	e7f7      	b.n	8010d26 <__swsetup_r+0xba>
 8010d36:	bf00      	nop
 8010d38:	200001c0 	.word	0x200001c0
 8010d3c:	080127dc 	.word	0x080127dc
 8010d40:	080127fc 	.word	0x080127fc
 8010d44:	080127bc 	.word	0x080127bc

08010d48 <_close_r>:
 8010d48:	b538      	push	{r3, r4, r5, lr}
 8010d4a:	4c06      	ldr	r4, [pc, #24]	; (8010d64 <_close_r+0x1c>)
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	4605      	mov	r5, r0
 8010d50:	4608      	mov	r0, r1
 8010d52:	6023      	str	r3, [r4, #0]
 8010d54:	f7f0 fdb1 	bl	80018ba <_close>
 8010d58:	1c43      	adds	r3, r0, #1
 8010d5a:	d102      	bne.n	8010d62 <_close_r+0x1a>
 8010d5c:	6823      	ldr	r3, [r4, #0]
 8010d5e:	b103      	cbz	r3, 8010d62 <_close_r+0x1a>
 8010d60:	602b      	str	r3, [r5, #0]
 8010d62:	bd38      	pop	{r3, r4, r5, pc}
 8010d64:	20009528 	.word	0x20009528

08010d68 <__sflush_r>:
 8010d68:	898a      	ldrh	r2, [r1, #12]
 8010d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d6e:	4605      	mov	r5, r0
 8010d70:	0710      	lsls	r0, r2, #28
 8010d72:	460c      	mov	r4, r1
 8010d74:	d458      	bmi.n	8010e28 <__sflush_r+0xc0>
 8010d76:	684b      	ldr	r3, [r1, #4]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	dc05      	bgt.n	8010d88 <__sflush_r+0x20>
 8010d7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	dc02      	bgt.n	8010d88 <__sflush_r+0x20>
 8010d82:	2000      	movs	r0, #0
 8010d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d8a:	2e00      	cmp	r6, #0
 8010d8c:	d0f9      	beq.n	8010d82 <__sflush_r+0x1a>
 8010d8e:	2300      	movs	r3, #0
 8010d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010d94:	682f      	ldr	r7, [r5, #0]
 8010d96:	6a21      	ldr	r1, [r4, #32]
 8010d98:	602b      	str	r3, [r5, #0]
 8010d9a:	d032      	beq.n	8010e02 <__sflush_r+0x9a>
 8010d9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010d9e:	89a3      	ldrh	r3, [r4, #12]
 8010da0:	075a      	lsls	r2, r3, #29
 8010da2:	d505      	bpl.n	8010db0 <__sflush_r+0x48>
 8010da4:	6863      	ldr	r3, [r4, #4]
 8010da6:	1ac0      	subs	r0, r0, r3
 8010da8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010daa:	b10b      	cbz	r3, 8010db0 <__sflush_r+0x48>
 8010dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010dae:	1ac0      	subs	r0, r0, r3
 8010db0:	2300      	movs	r3, #0
 8010db2:	4602      	mov	r2, r0
 8010db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010db6:	6a21      	ldr	r1, [r4, #32]
 8010db8:	4628      	mov	r0, r5
 8010dba:	47b0      	blx	r6
 8010dbc:	1c43      	adds	r3, r0, #1
 8010dbe:	89a3      	ldrh	r3, [r4, #12]
 8010dc0:	d106      	bne.n	8010dd0 <__sflush_r+0x68>
 8010dc2:	6829      	ldr	r1, [r5, #0]
 8010dc4:	291d      	cmp	r1, #29
 8010dc6:	d848      	bhi.n	8010e5a <__sflush_r+0xf2>
 8010dc8:	4a29      	ldr	r2, [pc, #164]	; (8010e70 <__sflush_r+0x108>)
 8010dca:	40ca      	lsrs	r2, r1
 8010dcc:	07d6      	lsls	r6, r2, #31
 8010dce:	d544      	bpl.n	8010e5a <__sflush_r+0xf2>
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	6062      	str	r2, [r4, #4]
 8010dd4:	04d9      	lsls	r1, r3, #19
 8010dd6:	6922      	ldr	r2, [r4, #16]
 8010dd8:	6022      	str	r2, [r4, #0]
 8010dda:	d504      	bpl.n	8010de6 <__sflush_r+0x7e>
 8010ddc:	1c42      	adds	r2, r0, #1
 8010dde:	d101      	bne.n	8010de4 <__sflush_r+0x7c>
 8010de0:	682b      	ldr	r3, [r5, #0]
 8010de2:	b903      	cbnz	r3, 8010de6 <__sflush_r+0x7e>
 8010de4:	6560      	str	r0, [r4, #84]	; 0x54
 8010de6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010de8:	602f      	str	r7, [r5, #0]
 8010dea:	2900      	cmp	r1, #0
 8010dec:	d0c9      	beq.n	8010d82 <__sflush_r+0x1a>
 8010dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010df2:	4299      	cmp	r1, r3
 8010df4:	d002      	beq.n	8010dfc <__sflush_r+0x94>
 8010df6:	4628      	mov	r0, r5
 8010df8:	f000 f8f8 	bl	8010fec <_free_r>
 8010dfc:	2000      	movs	r0, #0
 8010dfe:	6360      	str	r0, [r4, #52]	; 0x34
 8010e00:	e7c0      	b.n	8010d84 <__sflush_r+0x1c>
 8010e02:	2301      	movs	r3, #1
 8010e04:	4628      	mov	r0, r5
 8010e06:	47b0      	blx	r6
 8010e08:	1c41      	adds	r1, r0, #1
 8010e0a:	d1c8      	bne.n	8010d9e <__sflush_r+0x36>
 8010e0c:	682b      	ldr	r3, [r5, #0]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d0c5      	beq.n	8010d9e <__sflush_r+0x36>
 8010e12:	2b1d      	cmp	r3, #29
 8010e14:	d001      	beq.n	8010e1a <__sflush_r+0xb2>
 8010e16:	2b16      	cmp	r3, #22
 8010e18:	d101      	bne.n	8010e1e <__sflush_r+0xb6>
 8010e1a:	602f      	str	r7, [r5, #0]
 8010e1c:	e7b1      	b.n	8010d82 <__sflush_r+0x1a>
 8010e1e:	89a3      	ldrh	r3, [r4, #12]
 8010e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e24:	81a3      	strh	r3, [r4, #12]
 8010e26:	e7ad      	b.n	8010d84 <__sflush_r+0x1c>
 8010e28:	690f      	ldr	r7, [r1, #16]
 8010e2a:	2f00      	cmp	r7, #0
 8010e2c:	d0a9      	beq.n	8010d82 <__sflush_r+0x1a>
 8010e2e:	0793      	lsls	r3, r2, #30
 8010e30:	680e      	ldr	r6, [r1, #0]
 8010e32:	bf08      	it	eq
 8010e34:	694b      	ldreq	r3, [r1, #20]
 8010e36:	600f      	str	r7, [r1, #0]
 8010e38:	bf18      	it	ne
 8010e3a:	2300      	movne	r3, #0
 8010e3c:	eba6 0807 	sub.w	r8, r6, r7
 8010e40:	608b      	str	r3, [r1, #8]
 8010e42:	f1b8 0f00 	cmp.w	r8, #0
 8010e46:	dd9c      	ble.n	8010d82 <__sflush_r+0x1a>
 8010e48:	4643      	mov	r3, r8
 8010e4a:	463a      	mov	r2, r7
 8010e4c:	6a21      	ldr	r1, [r4, #32]
 8010e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010e50:	4628      	mov	r0, r5
 8010e52:	47b0      	blx	r6
 8010e54:	2800      	cmp	r0, #0
 8010e56:	dc06      	bgt.n	8010e66 <__sflush_r+0xfe>
 8010e58:	89a3      	ldrh	r3, [r4, #12]
 8010e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e5e:	81a3      	strh	r3, [r4, #12]
 8010e60:	f04f 30ff 	mov.w	r0, #4294967295
 8010e64:	e78e      	b.n	8010d84 <__sflush_r+0x1c>
 8010e66:	4407      	add	r7, r0
 8010e68:	eba8 0800 	sub.w	r8, r8, r0
 8010e6c:	e7e9      	b.n	8010e42 <__sflush_r+0xda>
 8010e6e:	bf00      	nop
 8010e70:	20400001 	.word	0x20400001

08010e74 <_fflush_r>:
 8010e74:	b538      	push	{r3, r4, r5, lr}
 8010e76:	690b      	ldr	r3, [r1, #16]
 8010e78:	4605      	mov	r5, r0
 8010e7a:	460c      	mov	r4, r1
 8010e7c:	b1db      	cbz	r3, 8010eb6 <_fflush_r+0x42>
 8010e7e:	b118      	cbz	r0, 8010e88 <_fflush_r+0x14>
 8010e80:	6983      	ldr	r3, [r0, #24]
 8010e82:	b90b      	cbnz	r3, 8010e88 <_fflush_r+0x14>
 8010e84:	f7ff f93c 	bl	8010100 <__sinit>
 8010e88:	4b0c      	ldr	r3, [pc, #48]	; (8010ebc <_fflush_r+0x48>)
 8010e8a:	429c      	cmp	r4, r3
 8010e8c:	d109      	bne.n	8010ea2 <_fflush_r+0x2e>
 8010e8e:	686c      	ldr	r4, [r5, #4]
 8010e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e94:	b17b      	cbz	r3, 8010eb6 <_fflush_r+0x42>
 8010e96:	4621      	mov	r1, r4
 8010e98:	4628      	mov	r0, r5
 8010e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e9e:	f7ff bf63 	b.w	8010d68 <__sflush_r>
 8010ea2:	4b07      	ldr	r3, [pc, #28]	; (8010ec0 <_fflush_r+0x4c>)
 8010ea4:	429c      	cmp	r4, r3
 8010ea6:	d101      	bne.n	8010eac <_fflush_r+0x38>
 8010ea8:	68ac      	ldr	r4, [r5, #8]
 8010eaa:	e7f1      	b.n	8010e90 <_fflush_r+0x1c>
 8010eac:	4b05      	ldr	r3, [pc, #20]	; (8010ec4 <_fflush_r+0x50>)
 8010eae:	429c      	cmp	r4, r3
 8010eb0:	bf08      	it	eq
 8010eb2:	68ec      	ldreq	r4, [r5, #12]
 8010eb4:	e7ec      	b.n	8010e90 <_fflush_r+0x1c>
 8010eb6:	2000      	movs	r0, #0
 8010eb8:	bd38      	pop	{r3, r4, r5, pc}
 8010eba:	bf00      	nop
 8010ebc:	080127dc 	.word	0x080127dc
 8010ec0:	080127fc 	.word	0x080127fc
 8010ec4:	080127bc 	.word	0x080127bc

08010ec8 <_lseek_r>:
 8010ec8:	b538      	push	{r3, r4, r5, lr}
 8010eca:	4c07      	ldr	r4, [pc, #28]	; (8010ee8 <_lseek_r+0x20>)
 8010ecc:	4605      	mov	r5, r0
 8010ece:	4608      	mov	r0, r1
 8010ed0:	4611      	mov	r1, r2
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	6022      	str	r2, [r4, #0]
 8010ed6:	461a      	mov	r2, r3
 8010ed8:	f7f0 fd16 	bl	8001908 <_lseek>
 8010edc:	1c43      	adds	r3, r0, #1
 8010ede:	d102      	bne.n	8010ee6 <_lseek_r+0x1e>
 8010ee0:	6823      	ldr	r3, [r4, #0]
 8010ee2:	b103      	cbz	r3, 8010ee6 <_lseek_r+0x1e>
 8010ee4:	602b      	str	r3, [r5, #0]
 8010ee6:	bd38      	pop	{r3, r4, r5, pc}
 8010ee8:	20009528 	.word	0x20009528

08010eec <__swhatbuf_r>:
 8010eec:	b570      	push	{r4, r5, r6, lr}
 8010eee:	460e      	mov	r6, r1
 8010ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ef4:	2900      	cmp	r1, #0
 8010ef6:	b096      	sub	sp, #88	; 0x58
 8010ef8:	4614      	mov	r4, r2
 8010efa:	461d      	mov	r5, r3
 8010efc:	da07      	bge.n	8010f0e <__swhatbuf_r+0x22>
 8010efe:	2300      	movs	r3, #0
 8010f00:	602b      	str	r3, [r5, #0]
 8010f02:	89b3      	ldrh	r3, [r6, #12]
 8010f04:	061a      	lsls	r2, r3, #24
 8010f06:	d410      	bmi.n	8010f2a <__swhatbuf_r+0x3e>
 8010f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f0c:	e00e      	b.n	8010f2c <__swhatbuf_r+0x40>
 8010f0e:	466a      	mov	r2, sp
 8010f10:	f000 f8f2 	bl	80110f8 <_fstat_r>
 8010f14:	2800      	cmp	r0, #0
 8010f16:	dbf2      	blt.n	8010efe <__swhatbuf_r+0x12>
 8010f18:	9a01      	ldr	r2, [sp, #4]
 8010f1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010f1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010f22:	425a      	negs	r2, r3
 8010f24:	415a      	adcs	r2, r3
 8010f26:	602a      	str	r2, [r5, #0]
 8010f28:	e7ee      	b.n	8010f08 <__swhatbuf_r+0x1c>
 8010f2a:	2340      	movs	r3, #64	; 0x40
 8010f2c:	2000      	movs	r0, #0
 8010f2e:	6023      	str	r3, [r4, #0]
 8010f30:	b016      	add	sp, #88	; 0x58
 8010f32:	bd70      	pop	{r4, r5, r6, pc}

08010f34 <__smakebuf_r>:
 8010f34:	898b      	ldrh	r3, [r1, #12]
 8010f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010f38:	079d      	lsls	r5, r3, #30
 8010f3a:	4606      	mov	r6, r0
 8010f3c:	460c      	mov	r4, r1
 8010f3e:	d507      	bpl.n	8010f50 <__smakebuf_r+0x1c>
 8010f40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010f44:	6023      	str	r3, [r4, #0]
 8010f46:	6123      	str	r3, [r4, #16]
 8010f48:	2301      	movs	r3, #1
 8010f4a:	6163      	str	r3, [r4, #20]
 8010f4c:	b002      	add	sp, #8
 8010f4e:	bd70      	pop	{r4, r5, r6, pc}
 8010f50:	ab01      	add	r3, sp, #4
 8010f52:	466a      	mov	r2, sp
 8010f54:	f7ff ffca 	bl	8010eec <__swhatbuf_r>
 8010f58:	9900      	ldr	r1, [sp, #0]
 8010f5a:	4605      	mov	r5, r0
 8010f5c:	4630      	mov	r0, r6
 8010f5e:	f7ff f959 	bl	8010214 <_malloc_r>
 8010f62:	b948      	cbnz	r0, 8010f78 <__smakebuf_r+0x44>
 8010f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f68:	059a      	lsls	r2, r3, #22
 8010f6a:	d4ef      	bmi.n	8010f4c <__smakebuf_r+0x18>
 8010f6c:	f023 0303 	bic.w	r3, r3, #3
 8010f70:	f043 0302 	orr.w	r3, r3, #2
 8010f74:	81a3      	strh	r3, [r4, #12]
 8010f76:	e7e3      	b.n	8010f40 <__smakebuf_r+0xc>
 8010f78:	4b0d      	ldr	r3, [pc, #52]	; (8010fb0 <__smakebuf_r+0x7c>)
 8010f7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8010f7c:	89a3      	ldrh	r3, [r4, #12]
 8010f7e:	6020      	str	r0, [r4, #0]
 8010f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f84:	81a3      	strh	r3, [r4, #12]
 8010f86:	9b00      	ldr	r3, [sp, #0]
 8010f88:	6163      	str	r3, [r4, #20]
 8010f8a:	9b01      	ldr	r3, [sp, #4]
 8010f8c:	6120      	str	r0, [r4, #16]
 8010f8e:	b15b      	cbz	r3, 8010fa8 <__smakebuf_r+0x74>
 8010f90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f94:	4630      	mov	r0, r6
 8010f96:	f000 f8c1 	bl	801111c <_isatty_r>
 8010f9a:	b128      	cbz	r0, 8010fa8 <__smakebuf_r+0x74>
 8010f9c:	89a3      	ldrh	r3, [r4, #12]
 8010f9e:	f023 0303 	bic.w	r3, r3, #3
 8010fa2:	f043 0301 	orr.w	r3, r3, #1
 8010fa6:	81a3      	strh	r3, [r4, #12]
 8010fa8:	89a3      	ldrh	r3, [r4, #12]
 8010faa:	431d      	orrs	r5, r3
 8010fac:	81a5      	strh	r5, [r4, #12]
 8010fae:	e7cd      	b.n	8010f4c <__smakebuf_r+0x18>
 8010fb0:	080100c9 	.word	0x080100c9

08010fb4 <memmove>:
 8010fb4:	4288      	cmp	r0, r1
 8010fb6:	b510      	push	{r4, lr}
 8010fb8:	eb01 0302 	add.w	r3, r1, r2
 8010fbc:	d807      	bhi.n	8010fce <memmove+0x1a>
 8010fbe:	1e42      	subs	r2, r0, #1
 8010fc0:	4299      	cmp	r1, r3
 8010fc2:	d00a      	beq.n	8010fda <memmove+0x26>
 8010fc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fc8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010fcc:	e7f8      	b.n	8010fc0 <memmove+0xc>
 8010fce:	4283      	cmp	r3, r0
 8010fd0:	d9f5      	bls.n	8010fbe <memmove+0xa>
 8010fd2:	1881      	adds	r1, r0, r2
 8010fd4:	1ad2      	subs	r2, r2, r3
 8010fd6:	42d3      	cmn	r3, r2
 8010fd8:	d100      	bne.n	8010fdc <memmove+0x28>
 8010fda:	bd10      	pop	{r4, pc}
 8010fdc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010fe0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010fe4:	e7f7      	b.n	8010fd6 <memmove+0x22>

08010fe6 <__malloc_lock>:
 8010fe6:	4770      	bx	lr

08010fe8 <__malloc_unlock>:
 8010fe8:	4770      	bx	lr
	...

08010fec <_free_r>:
 8010fec:	b538      	push	{r3, r4, r5, lr}
 8010fee:	4605      	mov	r5, r0
 8010ff0:	2900      	cmp	r1, #0
 8010ff2:	d045      	beq.n	8011080 <_free_r+0x94>
 8010ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ff8:	1f0c      	subs	r4, r1, #4
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	bfb8      	it	lt
 8010ffe:	18e4      	addlt	r4, r4, r3
 8011000:	f7ff fff1 	bl	8010fe6 <__malloc_lock>
 8011004:	4a1f      	ldr	r2, [pc, #124]	; (8011084 <_free_r+0x98>)
 8011006:	6813      	ldr	r3, [r2, #0]
 8011008:	4610      	mov	r0, r2
 801100a:	b933      	cbnz	r3, 801101a <_free_r+0x2e>
 801100c:	6063      	str	r3, [r4, #4]
 801100e:	6014      	str	r4, [r2, #0]
 8011010:	4628      	mov	r0, r5
 8011012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011016:	f7ff bfe7 	b.w	8010fe8 <__malloc_unlock>
 801101a:	42a3      	cmp	r3, r4
 801101c:	d90c      	bls.n	8011038 <_free_r+0x4c>
 801101e:	6821      	ldr	r1, [r4, #0]
 8011020:	1862      	adds	r2, r4, r1
 8011022:	4293      	cmp	r3, r2
 8011024:	bf04      	itt	eq
 8011026:	681a      	ldreq	r2, [r3, #0]
 8011028:	685b      	ldreq	r3, [r3, #4]
 801102a:	6063      	str	r3, [r4, #4]
 801102c:	bf04      	itt	eq
 801102e:	1852      	addeq	r2, r2, r1
 8011030:	6022      	streq	r2, [r4, #0]
 8011032:	6004      	str	r4, [r0, #0]
 8011034:	e7ec      	b.n	8011010 <_free_r+0x24>
 8011036:	4613      	mov	r3, r2
 8011038:	685a      	ldr	r2, [r3, #4]
 801103a:	b10a      	cbz	r2, 8011040 <_free_r+0x54>
 801103c:	42a2      	cmp	r2, r4
 801103e:	d9fa      	bls.n	8011036 <_free_r+0x4a>
 8011040:	6819      	ldr	r1, [r3, #0]
 8011042:	1858      	adds	r0, r3, r1
 8011044:	42a0      	cmp	r0, r4
 8011046:	d10b      	bne.n	8011060 <_free_r+0x74>
 8011048:	6820      	ldr	r0, [r4, #0]
 801104a:	4401      	add	r1, r0
 801104c:	1858      	adds	r0, r3, r1
 801104e:	4282      	cmp	r2, r0
 8011050:	6019      	str	r1, [r3, #0]
 8011052:	d1dd      	bne.n	8011010 <_free_r+0x24>
 8011054:	6810      	ldr	r0, [r2, #0]
 8011056:	6852      	ldr	r2, [r2, #4]
 8011058:	605a      	str	r2, [r3, #4]
 801105a:	4401      	add	r1, r0
 801105c:	6019      	str	r1, [r3, #0]
 801105e:	e7d7      	b.n	8011010 <_free_r+0x24>
 8011060:	d902      	bls.n	8011068 <_free_r+0x7c>
 8011062:	230c      	movs	r3, #12
 8011064:	602b      	str	r3, [r5, #0]
 8011066:	e7d3      	b.n	8011010 <_free_r+0x24>
 8011068:	6820      	ldr	r0, [r4, #0]
 801106a:	1821      	adds	r1, r4, r0
 801106c:	428a      	cmp	r2, r1
 801106e:	bf04      	itt	eq
 8011070:	6811      	ldreq	r1, [r2, #0]
 8011072:	6852      	ldreq	r2, [r2, #4]
 8011074:	6062      	str	r2, [r4, #4]
 8011076:	bf04      	itt	eq
 8011078:	1809      	addeq	r1, r1, r0
 801107a:	6021      	streq	r1, [r4, #0]
 801107c:	605c      	str	r4, [r3, #4]
 801107e:	e7c7      	b.n	8011010 <_free_r+0x24>
 8011080:	bd38      	pop	{r3, r4, r5, pc}
 8011082:	bf00      	nop
 8011084:	20006a84 	.word	0x20006a84

08011088 <_realloc_r>:
 8011088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801108a:	4607      	mov	r7, r0
 801108c:	4614      	mov	r4, r2
 801108e:	460e      	mov	r6, r1
 8011090:	b921      	cbnz	r1, 801109c <_realloc_r+0x14>
 8011092:	4611      	mov	r1, r2
 8011094:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011098:	f7ff b8bc 	b.w	8010214 <_malloc_r>
 801109c:	b922      	cbnz	r2, 80110a8 <_realloc_r+0x20>
 801109e:	f7ff ffa5 	bl	8010fec <_free_r>
 80110a2:	4625      	mov	r5, r4
 80110a4:	4628      	mov	r0, r5
 80110a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110a8:	f000 f848 	bl	801113c <_malloc_usable_size_r>
 80110ac:	42a0      	cmp	r0, r4
 80110ae:	d20f      	bcs.n	80110d0 <_realloc_r+0x48>
 80110b0:	4621      	mov	r1, r4
 80110b2:	4638      	mov	r0, r7
 80110b4:	f7ff f8ae 	bl	8010214 <_malloc_r>
 80110b8:	4605      	mov	r5, r0
 80110ba:	2800      	cmp	r0, #0
 80110bc:	d0f2      	beq.n	80110a4 <_realloc_r+0x1c>
 80110be:	4631      	mov	r1, r6
 80110c0:	4622      	mov	r2, r4
 80110c2:	f7fe ff7d 	bl	800ffc0 <memcpy>
 80110c6:	4631      	mov	r1, r6
 80110c8:	4638      	mov	r0, r7
 80110ca:	f7ff ff8f 	bl	8010fec <_free_r>
 80110ce:	e7e9      	b.n	80110a4 <_realloc_r+0x1c>
 80110d0:	4635      	mov	r5, r6
 80110d2:	e7e7      	b.n	80110a4 <_realloc_r+0x1c>

080110d4 <_read_r>:
 80110d4:	b538      	push	{r3, r4, r5, lr}
 80110d6:	4c07      	ldr	r4, [pc, #28]	; (80110f4 <_read_r+0x20>)
 80110d8:	4605      	mov	r5, r0
 80110da:	4608      	mov	r0, r1
 80110dc:	4611      	mov	r1, r2
 80110de:	2200      	movs	r2, #0
 80110e0:	6022      	str	r2, [r4, #0]
 80110e2:	461a      	mov	r2, r3
 80110e4:	f7f0 fbb0 	bl	8001848 <_read>
 80110e8:	1c43      	adds	r3, r0, #1
 80110ea:	d102      	bne.n	80110f2 <_read_r+0x1e>
 80110ec:	6823      	ldr	r3, [r4, #0]
 80110ee:	b103      	cbz	r3, 80110f2 <_read_r+0x1e>
 80110f0:	602b      	str	r3, [r5, #0]
 80110f2:	bd38      	pop	{r3, r4, r5, pc}
 80110f4:	20009528 	.word	0x20009528

080110f8 <_fstat_r>:
 80110f8:	b538      	push	{r3, r4, r5, lr}
 80110fa:	4c07      	ldr	r4, [pc, #28]	; (8011118 <_fstat_r+0x20>)
 80110fc:	2300      	movs	r3, #0
 80110fe:	4605      	mov	r5, r0
 8011100:	4608      	mov	r0, r1
 8011102:	4611      	mov	r1, r2
 8011104:	6023      	str	r3, [r4, #0]
 8011106:	f7f0 fbe4 	bl	80018d2 <_fstat>
 801110a:	1c43      	adds	r3, r0, #1
 801110c:	d102      	bne.n	8011114 <_fstat_r+0x1c>
 801110e:	6823      	ldr	r3, [r4, #0]
 8011110:	b103      	cbz	r3, 8011114 <_fstat_r+0x1c>
 8011112:	602b      	str	r3, [r5, #0]
 8011114:	bd38      	pop	{r3, r4, r5, pc}
 8011116:	bf00      	nop
 8011118:	20009528 	.word	0x20009528

0801111c <_isatty_r>:
 801111c:	b538      	push	{r3, r4, r5, lr}
 801111e:	4c06      	ldr	r4, [pc, #24]	; (8011138 <_isatty_r+0x1c>)
 8011120:	2300      	movs	r3, #0
 8011122:	4605      	mov	r5, r0
 8011124:	4608      	mov	r0, r1
 8011126:	6023      	str	r3, [r4, #0]
 8011128:	f7f0 fbe3 	bl	80018f2 <_isatty>
 801112c:	1c43      	adds	r3, r0, #1
 801112e:	d102      	bne.n	8011136 <_isatty_r+0x1a>
 8011130:	6823      	ldr	r3, [r4, #0]
 8011132:	b103      	cbz	r3, 8011136 <_isatty_r+0x1a>
 8011134:	602b      	str	r3, [r5, #0]
 8011136:	bd38      	pop	{r3, r4, r5, pc}
 8011138:	20009528 	.word	0x20009528

0801113c <_malloc_usable_size_r>:
 801113c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011140:	1f18      	subs	r0, r3, #4
 8011142:	2b00      	cmp	r3, #0
 8011144:	bfbc      	itt	lt
 8011146:	580b      	ldrlt	r3, [r1, r0]
 8011148:	18c0      	addlt	r0, r0, r3
 801114a:	4770      	bx	lr

0801114c <trunc>:
 801114c:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8011150:	ec5c bb10 	vmov	fp, ip, d0
 8011154:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8011158:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 801115c:	2913      	cmp	r1, #19
 801115e:	4664      	mov	r4, ip
 8011160:	dc11      	bgt.n	8011186 <trunc+0x3a>
 8011162:	2900      	cmp	r1, #0
 8011164:	bfa7      	ittee	ge
 8011166:	4b15      	ldrge	r3, [pc, #84]	; (80111bc <trunc+0x70>)
 8011168:	fa43 f101 	asrge.w	r1, r3, r1
 801116c:	2200      	movlt	r2, #0
 801116e:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8011172:	bfa4      	itt	ge
 8011174:	2200      	movge	r2, #0
 8011176:	ea2c 0301 	bicge.w	r3, ip, r1
 801117a:	4693      	mov	fp, r2
 801117c:	469c      	mov	ip, r3
 801117e:	ec4c bb10 	vmov	d0, fp, ip
 8011182:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8011186:	2933      	cmp	r1, #51	; 0x33
 8011188:	dd0d      	ble.n	80111a6 <trunc+0x5a>
 801118a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801118e:	d1f6      	bne.n	801117e <trunc+0x32>
 8011190:	4663      	mov	r3, ip
 8011192:	ee10 2a10 	vmov	r2, s0
 8011196:	ee10 0a10 	vmov	r0, s0
 801119a:	4621      	mov	r1, r4
 801119c:	f7ef f876 	bl	800028c <__adddf3>
 80111a0:	4683      	mov	fp, r0
 80111a2:	468c      	mov	ip, r1
 80111a4:	e7eb      	b.n	801117e <trunc+0x32>
 80111a6:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 80111aa:	f04f 33ff 	mov.w	r3, #4294967295
 80111ae:	fa23 f000 	lsr.w	r0, r3, r0
 80111b2:	ea2b 0600 	bic.w	r6, fp, r0
 80111b6:	46b3      	mov	fp, r6
 80111b8:	46a4      	mov	ip, r4
 80111ba:	e7e0      	b.n	801117e <trunc+0x32>
 80111bc:	000fffff 	.word	0x000fffff

080111c0 <pow>:
 80111c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111c4:	ed2d 8b04 	vpush	{d8-d9}
 80111c8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801149c <pow+0x2dc>
 80111cc:	b08d      	sub	sp, #52	; 0x34
 80111ce:	ec57 6b10 	vmov	r6, r7, d0
 80111d2:	ec55 4b11 	vmov	r4, r5, d1
 80111d6:	f000 f963 	bl	80114a0 <__ieee754_pow>
 80111da:	f999 3000 	ldrsb.w	r3, [r9]
 80111de:	9300      	str	r3, [sp, #0]
 80111e0:	3301      	adds	r3, #1
 80111e2:	eeb0 8a40 	vmov.f32	s16, s0
 80111e6:	eef0 8a60 	vmov.f32	s17, s1
 80111ea:	46c8      	mov	r8, r9
 80111ec:	d05f      	beq.n	80112ae <pow+0xee>
 80111ee:	4622      	mov	r2, r4
 80111f0:	462b      	mov	r3, r5
 80111f2:	4620      	mov	r0, r4
 80111f4:	4629      	mov	r1, r5
 80111f6:	f7ef fc99 	bl	8000b2c <__aeabi_dcmpun>
 80111fa:	4683      	mov	fp, r0
 80111fc:	2800      	cmp	r0, #0
 80111fe:	d156      	bne.n	80112ae <pow+0xee>
 8011200:	4632      	mov	r2, r6
 8011202:	463b      	mov	r3, r7
 8011204:	4630      	mov	r0, r6
 8011206:	4639      	mov	r1, r7
 8011208:	f7ef fc90 	bl	8000b2c <__aeabi_dcmpun>
 801120c:	9001      	str	r0, [sp, #4]
 801120e:	b1e8      	cbz	r0, 801124c <pow+0x8c>
 8011210:	2200      	movs	r2, #0
 8011212:	2300      	movs	r3, #0
 8011214:	4620      	mov	r0, r4
 8011216:	4629      	mov	r1, r5
 8011218:	f7ef fc56 	bl	8000ac8 <__aeabi_dcmpeq>
 801121c:	2800      	cmp	r0, #0
 801121e:	d046      	beq.n	80112ae <pow+0xee>
 8011220:	2301      	movs	r3, #1
 8011222:	9302      	str	r3, [sp, #8]
 8011224:	4b96      	ldr	r3, [pc, #600]	; (8011480 <pow+0x2c0>)
 8011226:	9303      	str	r3, [sp, #12]
 8011228:	4b96      	ldr	r3, [pc, #600]	; (8011484 <pow+0x2c4>)
 801122a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801122e:	2200      	movs	r2, #0
 8011230:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011234:	9b00      	ldr	r3, [sp, #0]
 8011236:	2b02      	cmp	r3, #2
 8011238:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801123c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011240:	d033      	beq.n	80112aa <pow+0xea>
 8011242:	a802      	add	r0, sp, #8
 8011244:	f000 fefb 	bl	801203e <matherr>
 8011248:	bb48      	cbnz	r0, 801129e <pow+0xde>
 801124a:	e05d      	b.n	8011308 <pow+0x148>
 801124c:	f04f 0a00 	mov.w	sl, #0
 8011250:	f04f 0b00 	mov.w	fp, #0
 8011254:	4652      	mov	r2, sl
 8011256:	465b      	mov	r3, fp
 8011258:	4630      	mov	r0, r6
 801125a:	4639      	mov	r1, r7
 801125c:	f7ef fc34 	bl	8000ac8 <__aeabi_dcmpeq>
 8011260:	ec4b ab19 	vmov	d9, sl, fp
 8011264:	2800      	cmp	r0, #0
 8011266:	d054      	beq.n	8011312 <pow+0x152>
 8011268:	4652      	mov	r2, sl
 801126a:	465b      	mov	r3, fp
 801126c:	4620      	mov	r0, r4
 801126e:	4629      	mov	r1, r5
 8011270:	f7ef fc2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8011274:	4680      	mov	r8, r0
 8011276:	b318      	cbz	r0, 80112c0 <pow+0x100>
 8011278:	2301      	movs	r3, #1
 801127a:	9302      	str	r3, [sp, #8]
 801127c:	4b80      	ldr	r3, [pc, #512]	; (8011480 <pow+0x2c0>)
 801127e:	9303      	str	r3, [sp, #12]
 8011280:	9b01      	ldr	r3, [sp, #4]
 8011282:	930a      	str	r3, [sp, #40]	; 0x28
 8011284:	9b00      	ldr	r3, [sp, #0]
 8011286:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801128a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801128e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d0d5      	beq.n	8011242 <pow+0x82>
 8011296:	4b7b      	ldr	r3, [pc, #492]	; (8011484 <pow+0x2c4>)
 8011298:	2200      	movs	r2, #0
 801129a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801129e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112a0:	b11b      	cbz	r3, 80112aa <pow+0xea>
 80112a2:	f7fe fe63 	bl	800ff6c <__errno>
 80112a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112a8:	6003      	str	r3, [r0, #0]
 80112aa:	ed9d 8b08 	vldr	d8, [sp, #32]
 80112ae:	eeb0 0a48 	vmov.f32	s0, s16
 80112b2:	eef0 0a68 	vmov.f32	s1, s17
 80112b6:	b00d      	add	sp, #52	; 0x34
 80112b8:	ecbd 8b04 	vpop	{d8-d9}
 80112bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112c0:	ec45 4b10 	vmov	d0, r4, r5
 80112c4:	f000 feb3 	bl	801202e <finite>
 80112c8:	2800      	cmp	r0, #0
 80112ca:	d0f0      	beq.n	80112ae <pow+0xee>
 80112cc:	4652      	mov	r2, sl
 80112ce:	465b      	mov	r3, fp
 80112d0:	4620      	mov	r0, r4
 80112d2:	4629      	mov	r1, r5
 80112d4:	f7ef fc02 	bl	8000adc <__aeabi_dcmplt>
 80112d8:	2800      	cmp	r0, #0
 80112da:	d0e8      	beq.n	80112ae <pow+0xee>
 80112dc:	2301      	movs	r3, #1
 80112de:	9302      	str	r3, [sp, #8]
 80112e0:	4b67      	ldr	r3, [pc, #412]	; (8011480 <pow+0x2c0>)
 80112e2:	9303      	str	r3, [sp, #12]
 80112e4:	f999 3000 	ldrsb.w	r3, [r9]
 80112e8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80112ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80112f0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80112f4:	b913      	cbnz	r3, 80112fc <pow+0x13c>
 80112f6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80112fa:	e7a2      	b.n	8011242 <pow+0x82>
 80112fc:	4962      	ldr	r1, [pc, #392]	; (8011488 <pow+0x2c8>)
 80112fe:	2000      	movs	r0, #0
 8011300:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011304:	2b02      	cmp	r3, #2
 8011306:	d19c      	bne.n	8011242 <pow+0x82>
 8011308:	f7fe fe30 	bl	800ff6c <__errno>
 801130c:	2321      	movs	r3, #33	; 0x21
 801130e:	6003      	str	r3, [r0, #0]
 8011310:	e7c5      	b.n	801129e <pow+0xde>
 8011312:	eeb0 0a48 	vmov.f32	s0, s16
 8011316:	eef0 0a68 	vmov.f32	s1, s17
 801131a:	f000 fe88 	bl	801202e <finite>
 801131e:	9000      	str	r0, [sp, #0]
 8011320:	2800      	cmp	r0, #0
 8011322:	f040 8081 	bne.w	8011428 <pow+0x268>
 8011326:	ec47 6b10 	vmov	d0, r6, r7
 801132a:	f000 fe80 	bl	801202e <finite>
 801132e:	2800      	cmp	r0, #0
 8011330:	d07a      	beq.n	8011428 <pow+0x268>
 8011332:	ec45 4b10 	vmov	d0, r4, r5
 8011336:	f000 fe7a 	bl	801202e <finite>
 801133a:	2800      	cmp	r0, #0
 801133c:	d074      	beq.n	8011428 <pow+0x268>
 801133e:	ec53 2b18 	vmov	r2, r3, d8
 8011342:	ee18 0a10 	vmov	r0, s16
 8011346:	4619      	mov	r1, r3
 8011348:	f7ef fbf0 	bl	8000b2c <__aeabi_dcmpun>
 801134c:	f999 9000 	ldrsb.w	r9, [r9]
 8011350:	4b4b      	ldr	r3, [pc, #300]	; (8011480 <pow+0x2c0>)
 8011352:	b1b0      	cbz	r0, 8011382 <pow+0x1c2>
 8011354:	2201      	movs	r2, #1
 8011356:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801135a:	9b00      	ldr	r3, [sp, #0]
 801135c:	930a      	str	r3, [sp, #40]	; 0x28
 801135e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011362:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011366:	f1b9 0f00 	cmp.w	r9, #0
 801136a:	d0c4      	beq.n	80112f6 <pow+0x136>
 801136c:	4652      	mov	r2, sl
 801136e:	465b      	mov	r3, fp
 8011370:	4650      	mov	r0, sl
 8011372:	4659      	mov	r1, fp
 8011374:	f7ef fa6a 	bl	800084c <__aeabi_ddiv>
 8011378:	f1b9 0f02 	cmp.w	r9, #2
 801137c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011380:	e7c1      	b.n	8011306 <pow+0x146>
 8011382:	2203      	movs	r2, #3
 8011384:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011388:	900a      	str	r0, [sp, #40]	; 0x28
 801138a:	4629      	mov	r1, r5
 801138c:	4620      	mov	r0, r4
 801138e:	2200      	movs	r2, #0
 8011390:	4b3e      	ldr	r3, [pc, #248]	; (801148c <pow+0x2cc>)
 8011392:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011396:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801139a:	f7ef f92d 	bl	80005f8 <__aeabi_dmul>
 801139e:	4604      	mov	r4, r0
 80113a0:	460d      	mov	r5, r1
 80113a2:	f1b9 0f00 	cmp.w	r9, #0
 80113a6:	d124      	bne.n	80113f2 <pow+0x232>
 80113a8:	4b39      	ldr	r3, [pc, #228]	; (8011490 <pow+0x2d0>)
 80113aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80113ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80113b2:	4630      	mov	r0, r6
 80113b4:	4652      	mov	r2, sl
 80113b6:	465b      	mov	r3, fp
 80113b8:	4639      	mov	r1, r7
 80113ba:	f7ef fb8f 	bl	8000adc <__aeabi_dcmplt>
 80113be:	2800      	cmp	r0, #0
 80113c0:	d056      	beq.n	8011470 <pow+0x2b0>
 80113c2:	ec45 4b10 	vmov	d0, r4, r5
 80113c6:	f000 fe47 	bl	8012058 <rint>
 80113ca:	4622      	mov	r2, r4
 80113cc:	462b      	mov	r3, r5
 80113ce:	ec51 0b10 	vmov	r0, r1, d0
 80113d2:	f7ef fb79 	bl	8000ac8 <__aeabi_dcmpeq>
 80113d6:	b920      	cbnz	r0, 80113e2 <pow+0x222>
 80113d8:	4b2e      	ldr	r3, [pc, #184]	; (8011494 <pow+0x2d4>)
 80113da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80113de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80113e2:	f998 3000 	ldrsb.w	r3, [r8]
 80113e6:	2b02      	cmp	r3, #2
 80113e8:	d142      	bne.n	8011470 <pow+0x2b0>
 80113ea:	f7fe fdbf 	bl	800ff6c <__errno>
 80113ee:	2322      	movs	r3, #34	; 0x22
 80113f0:	e78d      	b.n	801130e <pow+0x14e>
 80113f2:	4b29      	ldr	r3, [pc, #164]	; (8011498 <pow+0x2d8>)
 80113f4:	2200      	movs	r2, #0
 80113f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80113fa:	4630      	mov	r0, r6
 80113fc:	4652      	mov	r2, sl
 80113fe:	465b      	mov	r3, fp
 8011400:	4639      	mov	r1, r7
 8011402:	f7ef fb6b 	bl	8000adc <__aeabi_dcmplt>
 8011406:	2800      	cmp	r0, #0
 8011408:	d0eb      	beq.n	80113e2 <pow+0x222>
 801140a:	ec45 4b10 	vmov	d0, r4, r5
 801140e:	f000 fe23 	bl	8012058 <rint>
 8011412:	4622      	mov	r2, r4
 8011414:	462b      	mov	r3, r5
 8011416:	ec51 0b10 	vmov	r0, r1, d0
 801141a:	f7ef fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 801141e:	2800      	cmp	r0, #0
 8011420:	d1df      	bne.n	80113e2 <pow+0x222>
 8011422:	2200      	movs	r2, #0
 8011424:	4b18      	ldr	r3, [pc, #96]	; (8011488 <pow+0x2c8>)
 8011426:	e7da      	b.n	80113de <pow+0x21e>
 8011428:	2200      	movs	r2, #0
 801142a:	2300      	movs	r3, #0
 801142c:	ec51 0b18 	vmov	r0, r1, d8
 8011430:	f7ef fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8011434:	2800      	cmp	r0, #0
 8011436:	f43f af3a 	beq.w	80112ae <pow+0xee>
 801143a:	ec47 6b10 	vmov	d0, r6, r7
 801143e:	f000 fdf6 	bl	801202e <finite>
 8011442:	2800      	cmp	r0, #0
 8011444:	f43f af33 	beq.w	80112ae <pow+0xee>
 8011448:	ec45 4b10 	vmov	d0, r4, r5
 801144c:	f000 fdef 	bl	801202e <finite>
 8011450:	2800      	cmp	r0, #0
 8011452:	f43f af2c 	beq.w	80112ae <pow+0xee>
 8011456:	2304      	movs	r3, #4
 8011458:	9302      	str	r3, [sp, #8]
 801145a:	4b09      	ldr	r3, [pc, #36]	; (8011480 <pow+0x2c0>)
 801145c:	9303      	str	r3, [sp, #12]
 801145e:	2300      	movs	r3, #0
 8011460:	930a      	str	r3, [sp, #40]	; 0x28
 8011462:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011466:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801146a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801146e:	e7b8      	b.n	80113e2 <pow+0x222>
 8011470:	a802      	add	r0, sp, #8
 8011472:	f000 fde4 	bl	801203e <matherr>
 8011476:	2800      	cmp	r0, #0
 8011478:	f47f af11 	bne.w	801129e <pow+0xde>
 801147c:	e7b5      	b.n	80113ea <pow+0x22a>
 801147e:	bf00      	nop
 8011480:	0801284f 	.word	0x0801284f
 8011484:	3ff00000 	.word	0x3ff00000
 8011488:	fff00000 	.word	0xfff00000
 801148c:	3fe00000 	.word	0x3fe00000
 8011490:	47efffff 	.word	0x47efffff
 8011494:	c7efffff 	.word	0xc7efffff
 8011498:	7ff00000 	.word	0x7ff00000
 801149c:	20000224 	.word	0x20000224

080114a0 <__ieee754_pow>:
 80114a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a4:	b091      	sub	sp, #68	; 0x44
 80114a6:	ed8d 1b00 	vstr	d1, [sp]
 80114aa:	e9dd 2900 	ldrd	r2, r9, [sp]
 80114ae:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80114b2:	ea58 0302 	orrs.w	r3, r8, r2
 80114b6:	ec57 6b10 	vmov	r6, r7, d0
 80114ba:	f000 84be 	beq.w	8011e3a <__ieee754_pow+0x99a>
 80114be:	4b7a      	ldr	r3, [pc, #488]	; (80116a8 <__ieee754_pow+0x208>)
 80114c0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80114c4:	429c      	cmp	r4, r3
 80114c6:	463d      	mov	r5, r7
 80114c8:	ee10 aa10 	vmov	sl, s0
 80114cc:	dc09      	bgt.n	80114e2 <__ieee754_pow+0x42>
 80114ce:	d103      	bne.n	80114d8 <__ieee754_pow+0x38>
 80114d0:	b93e      	cbnz	r6, 80114e2 <__ieee754_pow+0x42>
 80114d2:	45a0      	cmp	r8, r4
 80114d4:	dc0d      	bgt.n	80114f2 <__ieee754_pow+0x52>
 80114d6:	e001      	b.n	80114dc <__ieee754_pow+0x3c>
 80114d8:	4598      	cmp	r8, r3
 80114da:	dc02      	bgt.n	80114e2 <__ieee754_pow+0x42>
 80114dc:	4598      	cmp	r8, r3
 80114de:	d10e      	bne.n	80114fe <__ieee754_pow+0x5e>
 80114e0:	b16a      	cbz	r2, 80114fe <__ieee754_pow+0x5e>
 80114e2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80114e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80114ea:	ea54 030a 	orrs.w	r3, r4, sl
 80114ee:	f000 84a4 	beq.w	8011e3a <__ieee754_pow+0x99a>
 80114f2:	486e      	ldr	r0, [pc, #440]	; (80116ac <__ieee754_pow+0x20c>)
 80114f4:	b011      	add	sp, #68	; 0x44
 80114f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114fa:	f000 bda5 	b.w	8012048 <nan>
 80114fe:	2d00      	cmp	r5, #0
 8011500:	da53      	bge.n	80115aa <__ieee754_pow+0x10a>
 8011502:	4b6b      	ldr	r3, [pc, #428]	; (80116b0 <__ieee754_pow+0x210>)
 8011504:	4598      	cmp	r8, r3
 8011506:	dc4d      	bgt.n	80115a4 <__ieee754_pow+0x104>
 8011508:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801150c:	4598      	cmp	r8, r3
 801150e:	dd4c      	ble.n	80115aa <__ieee754_pow+0x10a>
 8011510:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011514:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011518:	2b14      	cmp	r3, #20
 801151a:	dd26      	ble.n	801156a <__ieee754_pow+0xca>
 801151c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011520:	fa22 f103 	lsr.w	r1, r2, r3
 8011524:	fa01 f303 	lsl.w	r3, r1, r3
 8011528:	4293      	cmp	r3, r2
 801152a:	d13e      	bne.n	80115aa <__ieee754_pow+0x10a>
 801152c:	f001 0101 	and.w	r1, r1, #1
 8011530:	f1c1 0b02 	rsb	fp, r1, #2
 8011534:	2a00      	cmp	r2, #0
 8011536:	d15b      	bne.n	80115f0 <__ieee754_pow+0x150>
 8011538:	4b5b      	ldr	r3, [pc, #364]	; (80116a8 <__ieee754_pow+0x208>)
 801153a:	4598      	cmp	r8, r3
 801153c:	d124      	bne.n	8011588 <__ieee754_pow+0xe8>
 801153e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011542:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011546:	ea53 030a 	orrs.w	r3, r3, sl
 801154a:	f000 8476 	beq.w	8011e3a <__ieee754_pow+0x99a>
 801154e:	4b59      	ldr	r3, [pc, #356]	; (80116b4 <__ieee754_pow+0x214>)
 8011550:	429c      	cmp	r4, r3
 8011552:	dd2d      	ble.n	80115b0 <__ieee754_pow+0x110>
 8011554:	f1b9 0f00 	cmp.w	r9, #0
 8011558:	f280 8473 	bge.w	8011e42 <__ieee754_pow+0x9a2>
 801155c:	2000      	movs	r0, #0
 801155e:	2100      	movs	r1, #0
 8011560:	ec41 0b10 	vmov	d0, r0, r1
 8011564:	b011      	add	sp, #68	; 0x44
 8011566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801156a:	2a00      	cmp	r2, #0
 801156c:	d13e      	bne.n	80115ec <__ieee754_pow+0x14c>
 801156e:	f1c3 0314 	rsb	r3, r3, #20
 8011572:	fa48 f103 	asr.w	r1, r8, r3
 8011576:	fa01 f303 	lsl.w	r3, r1, r3
 801157a:	4543      	cmp	r3, r8
 801157c:	f040 8469 	bne.w	8011e52 <__ieee754_pow+0x9b2>
 8011580:	f001 0101 	and.w	r1, r1, #1
 8011584:	f1c1 0b02 	rsb	fp, r1, #2
 8011588:	4b4b      	ldr	r3, [pc, #300]	; (80116b8 <__ieee754_pow+0x218>)
 801158a:	4598      	cmp	r8, r3
 801158c:	d118      	bne.n	80115c0 <__ieee754_pow+0x120>
 801158e:	f1b9 0f00 	cmp.w	r9, #0
 8011592:	f280 845a 	bge.w	8011e4a <__ieee754_pow+0x9aa>
 8011596:	4948      	ldr	r1, [pc, #288]	; (80116b8 <__ieee754_pow+0x218>)
 8011598:	4632      	mov	r2, r6
 801159a:	463b      	mov	r3, r7
 801159c:	2000      	movs	r0, #0
 801159e:	f7ef f955 	bl	800084c <__aeabi_ddiv>
 80115a2:	e7dd      	b.n	8011560 <__ieee754_pow+0xc0>
 80115a4:	f04f 0b02 	mov.w	fp, #2
 80115a8:	e7c4      	b.n	8011534 <__ieee754_pow+0x94>
 80115aa:	f04f 0b00 	mov.w	fp, #0
 80115ae:	e7c1      	b.n	8011534 <__ieee754_pow+0x94>
 80115b0:	f1b9 0f00 	cmp.w	r9, #0
 80115b4:	dad2      	bge.n	801155c <__ieee754_pow+0xbc>
 80115b6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80115ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80115be:	e7cf      	b.n	8011560 <__ieee754_pow+0xc0>
 80115c0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80115c4:	d106      	bne.n	80115d4 <__ieee754_pow+0x134>
 80115c6:	4632      	mov	r2, r6
 80115c8:	463b      	mov	r3, r7
 80115ca:	4610      	mov	r0, r2
 80115cc:	4619      	mov	r1, r3
 80115ce:	f7ef f813 	bl	80005f8 <__aeabi_dmul>
 80115d2:	e7c5      	b.n	8011560 <__ieee754_pow+0xc0>
 80115d4:	4b39      	ldr	r3, [pc, #228]	; (80116bc <__ieee754_pow+0x21c>)
 80115d6:	4599      	cmp	r9, r3
 80115d8:	d10a      	bne.n	80115f0 <__ieee754_pow+0x150>
 80115da:	2d00      	cmp	r5, #0
 80115dc:	db08      	blt.n	80115f0 <__ieee754_pow+0x150>
 80115de:	ec47 6b10 	vmov	d0, r6, r7
 80115e2:	b011      	add	sp, #68	; 0x44
 80115e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e8:	f000 bc68 	b.w	8011ebc <__ieee754_sqrt>
 80115ec:	f04f 0b00 	mov.w	fp, #0
 80115f0:	ec47 6b10 	vmov	d0, r6, r7
 80115f4:	f000 fd12 	bl	801201c <fabs>
 80115f8:	ec51 0b10 	vmov	r0, r1, d0
 80115fc:	f1ba 0f00 	cmp.w	sl, #0
 8011600:	d127      	bne.n	8011652 <__ieee754_pow+0x1b2>
 8011602:	b124      	cbz	r4, 801160e <__ieee754_pow+0x16e>
 8011604:	4b2c      	ldr	r3, [pc, #176]	; (80116b8 <__ieee754_pow+0x218>)
 8011606:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801160a:	429a      	cmp	r2, r3
 801160c:	d121      	bne.n	8011652 <__ieee754_pow+0x1b2>
 801160e:	f1b9 0f00 	cmp.w	r9, #0
 8011612:	da05      	bge.n	8011620 <__ieee754_pow+0x180>
 8011614:	4602      	mov	r2, r0
 8011616:	460b      	mov	r3, r1
 8011618:	2000      	movs	r0, #0
 801161a:	4927      	ldr	r1, [pc, #156]	; (80116b8 <__ieee754_pow+0x218>)
 801161c:	f7ef f916 	bl	800084c <__aeabi_ddiv>
 8011620:	2d00      	cmp	r5, #0
 8011622:	da9d      	bge.n	8011560 <__ieee754_pow+0xc0>
 8011624:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011628:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801162c:	ea54 030b 	orrs.w	r3, r4, fp
 8011630:	d108      	bne.n	8011644 <__ieee754_pow+0x1a4>
 8011632:	4602      	mov	r2, r0
 8011634:	460b      	mov	r3, r1
 8011636:	4610      	mov	r0, r2
 8011638:	4619      	mov	r1, r3
 801163a:	f7ee fe25 	bl	8000288 <__aeabi_dsub>
 801163e:	4602      	mov	r2, r0
 8011640:	460b      	mov	r3, r1
 8011642:	e7ac      	b.n	801159e <__ieee754_pow+0xfe>
 8011644:	f1bb 0f01 	cmp.w	fp, #1
 8011648:	d18a      	bne.n	8011560 <__ieee754_pow+0xc0>
 801164a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801164e:	4619      	mov	r1, r3
 8011650:	e786      	b.n	8011560 <__ieee754_pow+0xc0>
 8011652:	0fed      	lsrs	r5, r5, #31
 8011654:	1e6b      	subs	r3, r5, #1
 8011656:	930d      	str	r3, [sp, #52]	; 0x34
 8011658:	ea5b 0303 	orrs.w	r3, fp, r3
 801165c:	d102      	bne.n	8011664 <__ieee754_pow+0x1c4>
 801165e:	4632      	mov	r2, r6
 8011660:	463b      	mov	r3, r7
 8011662:	e7e8      	b.n	8011636 <__ieee754_pow+0x196>
 8011664:	4b16      	ldr	r3, [pc, #88]	; (80116c0 <__ieee754_pow+0x220>)
 8011666:	4598      	cmp	r8, r3
 8011668:	f340 80fe 	ble.w	8011868 <__ieee754_pow+0x3c8>
 801166c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011670:	4598      	cmp	r8, r3
 8011672:	dd0a      	ble.n	801168a <__ieee754_pow+0x1ea>
 8011674:	4b0f      	ldr	r3, [pc, #60]	; (80116b4 <__ieee754_pow+0x214>)
 8011676:	429c      	cmp	r4, r3
 8011678:	dc0d      	bgt.n	8011696 <__ieee754_pow+0x1f6>
 801167a:	f1b9 0f00 	cmp.w	r9, #0
 801167e:	f6bf af6d 	bge.w	801155c <__ieee754_pow+0xbc>
 8011682:	a307      	add	r3, pc, #28	; (adr r3, 80116a0 <__ieee754_pow+0x200>)
 8011684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011688:	e79f      	b.n	80115ca <__ieee754_pow+0x12a>
 801168a:	4b0e      	ldr	r3, [pc, #56]	; (80116c4 <__ieee754_pow+0x224>)
 801168c:	429c      	cmp	r4, r3
 801168e:	ddf4      	ble.n	801167a <__ieee754_pow+0x1da>
 8011690:	4b09      	ldr	r3, [pc, #36]	; (80116b8 <__ieee754_pow+0x218>)
 8011692:	429c      	cmp	r4, r3
 8011694:	dd18      	ble.n	80116c8 <__ieee754_pow+0x228>
 8011696:	f1b9 0f00 	cmp.w	r9, #0
 801169a:	dcf2      	bgt.n	8011682 <__ieee754_pow+0x1e2>
 801169c:	e75e      	b.n	801155c <__ieee754_pow+0xbc>
 801169e:	bf00      	nop
 80116a0:	8800759c 	.word	0x8800759c
 80116a4:	7e37e43c 	.word	0x7e37e43c
 80116a8:	7ff00000 	.word	0x7ff00000
 80116ac:	08012821 	.word	0x08012821
 80116b0:	433fffff 	.word	0x433fffff
 80116b4:	3fefffff 	.word	0x3fefffff
 80116b8:	3ff00000 	.word	0x3ff00000
 80116bc:	3fe00000 	.word	0x3fe00000
 80116c0:	41e00000 	.word	0x41e00000
 80116c4:	3feffffe 	.word	0x3feffffe
 80116c8:	2200      	movs	r2, #0
 80116ca:	4b63      	ldr	r3, [pc, #396]	; (8011858 <__ieee754_pow+0x3b8>)
 80116cc:	f7ee fddc 	bl	8000288 <__aeabi_dsub>
 80116d0:	a355      	add	r3, pc, #340	; (adr r3, 8011828 <__ieee754_pow+0x388>)
 80116d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d6:	4604      	mov	r4, r0
 80116d8:	460d      	mov	r5, r1
 80116da:	f7ee ff8d 	bl	80005f8 <__aeabi_dmul>
 80116de:	a354      	add	r3, pc, #336	; (adr r3, 8011830 <__ieee754_pow+0x390>)
 80116e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e4:	4606      	mov	r6, r0
 80116e6:	460f      	mov	r7, r1
 80116e8:	4620      	mov	r0, r4
 80116ea:	4629      	mov	r1, r5
 80116ec:	f7ee ff84 	bl	80005f8 <__aeabi_dmul>
 80116f0:	2200      	movs	r2, #0
 80116f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116f6:	4b59      	ldr	r3, [pc, #356]	; (801185c <__ieee754_pow+0x3bc>)
 80116f8:	4620      	mov	r0, r4
 80116fa:	4629      	mov	r1, r5
 80116fc:	f7ee ff7c 	bl	80005f8 <__aeabi_dmul>
 8011700:	4602      	mov	r2, r0
 8011702:	460b      	mov	r3, r1
 8011704:	a14c      	add	r1, pc, #304	; (adr r1, 8011838 <__ieee754_pow+0x398>)
 8011706:	e9d1 0100 	ldrd	r0, r1, [r1]
 801170a:	f7ee fdbd 	bl	8000288 <__aeabi_dsub>
 801170e:	4622      	mov	r2, r4
 8011710:	462b      	mov	r3, r5
 8011712:	f7ee ff71 	bl	80005f8 <__aeabi_dmul>
 8011716:	4602      	mov	r2, r0
 8011718:	460b      	mov	r3, r1
 801171a:	2000      	movs	r0, #0
 801171c:	4950      	ldr	r1, [pc, #320]	; (8011860 <__ieee754_pow+0x3c0>)
 801171e:	f7ee fdb3 	bl	8000288 <__aeabi_dsub>
 8011722:	4622      	mov	r2, r4
 8011724:	462b      	mov	r3, r5
 8011726:	4680      	mov	r8, r0
 8011728:	4689      	mov	r9, r1
 801172a:	4620      	mov	r0, r4
 801172c:	4629      	mov	r1, r5
 801172e:	f7ee ff63 	bl	80005f8 <__aeabi_dmul>
 8011732:	4602      	mov	r2, r0
 8011734:	460b      	mov	r3, r1
 8011736:	4640      	mov	r0, r8
 8011738:	4649      	mov	r1, r9
 801173a:	f7ee ff5d 	bl	80005f8 <__aeabi_dmul>
 801173e:	a340      	add	r3, pc, #256	; (adr r3, 8011840 <__ieee754_pow+0x3a0>)
 8011740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011744:	f7ee ff58 	bl	80005f8 <__aeabi_dmul>
 8011748:	4602      	mov	r2, r0
 801174a:	460b      	mov	r3, r1
 801174c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011750:	f7ee fd9a 	bl	8000288 <__aeabi_dsub>
 8011754:	4602      	mov	r2, r0
 8011756:	460b      	mov	r3, r1
 8011758:	4604      	mov	r4, r0
 801175a:	460d      	mov	r5, r1
 801175c:	4630      	mov	r0, r6
 801175e:	4639      	mov	r1, r7
 8011760:	f7ee fd94 	bl	800028c <__adddf3>
 8011764:	2000      	movs	r0, #0
 8011766:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801176a:	4632      	mov	r2, r6
 801176c:	463b      	mov	r3, r7
 801176e:	f7ee fd8b 	bl	8000288 <__aeabi_dsub>
 8011772:	4602      	mov	r2, r0
 8011774:	460b      	mov	r3, r1
 8011776:	4620      	mov	r0, r4
 8011778:	4629      	mov	r1, r5
 801177a:	f7ee fd85 	bl	8000288 <__aeabi_dsub>
 801177e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011780:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011784:	4313      	orrs	r3, r2
 8011786:	4606      	mov	r6, r0
 8011788:	460f      	mov	r7, r1
 801178a:	f040 81eb 	bne.w	8011b64 <__ieee754_pow+0x6c4>
 801178e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011848 <__ieee754_pow+0x3a8>
 8011792:	e9dd 4500 	ldrd	r4, r5, [sp]
 8011796:	2400      	movs	r4, #0
 8011798:	4622      	mov	r2, r4
 801179a:	462b      	mov	r3, r5
 801179c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80117a4:	f7ee fd70 	bl	8000288 <__aeabi_dsub>
 80117a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80117ac:	f7ee ff24 	bl	80005f8 <__aeabi_dmul>
 80117b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117b4:	4680      	mov	r8, r0
 80117b6:	4689      	mov	r9, r1
 80117b8:	4630      	mov	r0, r6
 80117ba:	4639      	mov	r1, r7
 80117bc:	f7ee ff1c 	bl	80005f8 <__aeabi_dmul>
 80117c0:	4602      	mov	r2, r0
 80117c2:	460b      	mov	r3, r1
 80117c4:	4640      	mov	r0, r8
 80117c6:	4649      	mov	r1, r9
 80117c8:	f7ee fd60 	bl	800028c <__adddf3>
 80117cc:	4622      	mov	r2, r4
 80117ce:	462b      	mov	r3, r5
 80117d0:	4680      	mov	r8, r0
 80117d2:	4689      	mov	r9, r1
 80117d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80117d8:	f7ee ff0e 	bl	80005f8 <__aeabi_dmul>
 80117dc:	460b      	mov	r3, r1
 80117de:	4604      	mov	r4, r0
 80117e0:	460d      	mov	r5, r1
 80117e2:	4602      	mov	r2, r0
 80117e4:	4649      	mov	r1, r9
 80117e6:	4640      	mov	r0, r8
 80117e8:	e9cd 4500 	strd	r4, r5, [sp]
 80117ec:	f7ee fd4e 	bl	800028c <__adddf3>
 80117f0:	4b1c      	ldr	r3, [pc, #112]	; (8011864 <__ieee754_pow+0x3c4>)
 80117f2:	4299      	cmp	r1, r3
 80117f4:	4606      	mov	r6, r0
 80117f6:	460f      	mov	r7, r1
 80117f8:	468b      	mov	fp, r1
 80117fa:	f340 82f7 	ble.w	8011dec <__ieee754_pow+0x94c>
 80117fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011802:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011806:	4303      	orrs	r3, r0
 8011808:	f000 81ea 	beq.w	8011be0 <__ieee754_pow+0x740>
 801180c:	a310      	add	r3, pc, #64	; (adr r3, 8011850 <__ieee754_pow+0x3b0>)
 801180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011816:	f7ee feef 	bl	80005f8 <__aeabi_dmul>
 801181a:	a30d      	add	r3, pc, #52	; (adr r3, 8011850 <__ieee754_pow+0x3b0>)
 801181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011820:	e6d5      	b.n	80115ce <__ieee754_pow+0x12e>
 8011822:	bf00      	nop
 8011824:	f3af 8000 	nop.w
 8011828:	60000000 	.word	0x60000000
 801182c:	3ff71547 	.word	0x3ff71547
 8011830:	f85ddf44 	.word	0xf85ddf44
 8011834:	3e54ae0b 	.word	0x3e54ae0b
 8011838:	55555555 	.word	0x55555555
 801183c:	3fd55555 	.word	0x3fd55555
 8011840:	652b82fe 	.word	0x652b82fe
 8011844:	3ff71547 	.word	0x3ff71547
 8011848:	00000000 	.word	0x00000000
 801184c:	bff00000 	.word	0xbff00000
 8011850:	8800759c 	.word	0x8800759c
 8011854:	7e37e43c 	.word	0x7e37e43c
 8011858:	3ff00000 	.word	0x3ff00000
 801185c:	3fd00000 	.word	0x3fd00000
 8011860:	3fe00000 	.word	0x3fe00000
 8011864:	408fffff 	.word	0x408fffff
 8011868:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801186c:	f04f 0200 	mov.w	r2, #0
 8011870:	da05      	bge.n	801187e <__ieee754_pow+0x3de>
 8011872:	4bd3      	ldr	r3, [pc, #844]	; (8011bc0 <__ieee754_pow+0x720>)
 8011874:	f7ee fec0 	bl	80005f8 <__aeabi_dmul>
 8011878:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801187c:	460c      	mov	r4, r1
 801187e:	1523      	asrs	r3, r4, #20
 8011880:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011884:	4413      	add	r3, r2
 8011886:	9309      	str	r3, [sp, #36]	; 0x24
 8011888:	4bce      	ldr	r3, [pc, #824]	; (8011bc4 <__ieee754_pow+0x724>)
 801188a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801188e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011892:	429c      	cmp	r4, r3
 8011894:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011898:	dd08      	ble.n	80118ac <__ieee754_pow+0x40c>
 801189a:	4bcb      	ldr	r3, [pc, #812]	; (8011bc8 <__ieee754_pow+0x728>)
 801189c:	429c      	cmp	r4, r3
 801189e:	f340 815e 	ble.w	8011b5e <__ieee754_pow+0x6be>
 80118a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118a4:	3301      	adds	r3, #1
 80118a6:	9309      	str	r3, [sp, #36]	; 0x24
 80118a8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80118ac:	f04f 0a00 	mov.w	sl, #0
 80118b0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80118b4:	930c      	str	r3, [sp, #48]	; 0x30
 80118b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80118b8:	4bc4      	ldr	r3, [pc, #784]	; (8011bcc <__ieee754_pow+0x72c>)
 80118ba:	4413      	add	r3, r2
 80118bc:	ed93 7b00 	vldr	d7, [r3]
 80118c0:	4629      	mov	r1, r5
 80118c2:	ec53 2b17 	vmov	r2, r3, d7
 80118c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80118ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80118ce:	f7ee fcdb 	bl	8000288 <__aeabi_dsub>
 80118d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80118d6:	4606      	mov	r6, r0
 80118d8:	460f      	mov	r7, r1
 80118da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80118de:	f7ee fcd5 	bl	800028c <__adddf3>
 80118e2:	4602      	mov	r2, r0
 80118e4:	460b      	mov	r3, r1
 80118e6:	2000      	movs	r0, #0
 80118e8:	49b9      	ldr	r1, [pc, #740]	; (8011bd0 <__ieee754_pow+0x730>)
 80118ea:	f7ee ffaf 	bl	800084c <__aeabi_ddiv>
 80118ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80118f2:	4602      	mov	r2, r0
 80118f4:	460b      	mov	r3, r1
 80118f6:	4630      	mov	r0, r6
 80118f8:	4639      	mov	r1, r7
 80118fa:	f7ee fe7d 	bl	80005f8 <__aeabi_dmul>
 80118fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011902:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011906:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801190a:	2300      	movs	r3, #0
 801190c:	9302      	str	r3, [sp, #8]
 801190e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011912:	106d      	asrs	r5, r5, #1
 8011914:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011918:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801191c:	2200      	movs	r2, #0
 801191e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8011922:	4640      	mov	r0, r8
 8011924:	4649      	mov	r1, r9
 8011926:	4614      	mov	r4, r2
 8011928:	461d      	mov	r5, r3
 801192a:	f7ee fe65 	bl	80005f8 <__aeabi_dmul>
 801192e:	4602      	mov	r2, r0
 8011930:	460b      	mov	r3, r1
 8011932:	4630      	mov	r0, r6
 8011934:	4639      	mov	r1, r7
 8011936:	f7ee fca7 	bl	8000288 <__aeabi_dsub>
 801193a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801193e:	4606      	mov	r6, r0
 8011940:	460f      	mov	r7, r1
 8011942:	4620      	mov	r0, r4
 8011944:	4629      	mov	r1, r5
 8011946:	f7ee fc9f 	bl	8000288 <__aeabi_dsub>
 801194a:	4602      	mov	r2, r0
 801194c:	460b      	mov	r3, r1
 801194e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011952:	f7ee fc99 	bl	8000288 <__aeabi_dsub>
 8011956:	4642      	mov	r2, r8
 8011958:	464b      	mov	r3, r9
 801195a:	f7ee fe4d 	bl	80005f8 <__aeabi_dmul>
 801195e:	4602      	mov	r2, r0
 8011960:	460b      	mov	r3, r1
 8011962:	4630      	mov	r0, r6
 8011964:	4639      	mov	r1, r7
 8011966:	f7ee fc8f 	bl	8000288 <__aeabi_dsub>
 801196a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801196e:	f7ee fe43 	bl	80005f8 <__aeabi_dmul>
 8011972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011976:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801197a:	4610      	mov	r0, r2
 801197c:	4619      	mov	r1, r3
 801197e:	f7ee fe3b 	bl	80005f8 <__aeabi_dmul>
 8011982:	a37b      	add	r3, pc, #492	; (adr r3, 8011b70 <__ieee754_pow+0x6d0>)
 8011984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011988:	4604      	mov	r4, r0
 801198a:	460d      	mov	r5, r1
 801198c:	f7ee fe34 	bl	80005f8 <__aeabi_dmul>
 8011990:	a379      	add	r3, pc, #484	; (adr r3, 8011b78 <__ieee754_pow+0x6d8>)
 8011992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011996:	f7ee fc79 	bl	800028c <__adddf3>
 801199a:	4622      	mov	r2, r4
 801199c:	462b      	mov	r3, r5
 801199e:	f7ee fe2b 	bl	80005f8 <__aeabi_dmul>
 80119a2:	a377      	add	r3, pc, #476	; (adr r3, 8011b80 <__ieee754_pow+0x6e0>)
 80119a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a8:	f7ee fc70 	bl	800028c <__adddf3>
 80119ac:	4622      	mov	r2, r4
 80119ae:	462b      	mov	r3, r5
 80119b0:	f7ee fe22 	bl	80005f8 <__aeabi_dmul>
 80119b4:	a374      	add	r3, pc, #464	; (adr r3, 8011b88 <__ieee754_pow+0x6e8>)
 80119b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ba:	f7ee fc67 	bl	800028c <__adddf3>
 80119be:	4622      	mov	r2, r4
 80119c0:	462b      	mov	r3, r5
 80119c2:	f7ee fe19 	bl	80005f8 <__aeabi_dmul>
 80119c6:	a372      	add	r3, pc, #456	; (adr r3, 8011b90 <__ieee754_pow+0x6f0>)
 80119c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119cc:	f7ee fc5e 	bl	800028c <__adddf3>
 80119d0:	4622      	mov	r2, r4
 80119d2:	462b      	mov	r3, r5
 80119d4:	f7ee fe10 	bl	80005f8 <__aeabi_dmul>
 80119d8:	a36f      	add	r3, pc, #444	; (adr r3, 8011b98 <__ieee754_pow+0x6f8>)
 80119da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119de:	f7ee fc55 	bl	800028c <__adddf3>
 80119e2:	4622      	mov	r2, r4
 80119e4:	4606      	mov	r6, r0
 80119e6:	460f      	mov	r7, r1
 80119e8:	462b      	mov	r3, r5
 80119ea:	4620      	mov	r0, r4
 80119ec:	4629      	mov	r1, r5
 80119ee:	f7ee fe03 	bl	80005f8 <__aeabi_dmul>
 80119f2:	4602      	mov	r2, r0
 80119f4:	460b      	mov	r3, r1
 80119f6:	4630      	mov	r0, r6
 80119f8:	4639      	mov	r1, r7
 80119fa:	f7ee fdfd 	bl	80005f8 <__aeabi_dmul>
 80119fe:	4642      	mov	r2, r8
 8011a00:	4604      	mov	r4, r0
 8011a02:	460d      	mov	r5, r1
 8011a04:	464b      	mov	r3, r9
 8011a06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011a0a:	f7ee fc3f 	bl	800028c <__adddf3>
 8011a0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011a12:	f7ee fdf1 	bl	80005f8 <__aeabi_dmul>
 8011a16:	4622      	mov	r2, r4
 8011a18:	462b      	mov	r3, r5
 8011a1a:	f7ee fc37 	bl	800028c <__adddf3>
 8011a1e:	4642      	mov	r2, r8
 8011a20:	4606      	mov	r6, r0
 8011a22:	460f      	mov	r7, r1
 8011a24:	464b      	mov	r3, r9
 8011a26:	4640      	mov	r0, r8
 8011a28:	4649      	mov	r1, r9
 8011a2a:	f7ee fde5 	bl	80005f8 <__aeabi_dmul>
 8011a2e:	2200      	movs	r2, #0
 8011a30:	4b68      	ldr	r3, [pc, #416]	; (8011bd4 <__ieee754_pow+0x734>)
 8011a32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011a36:	f7ee fc29 	bl	800028c <__adddf3>
 8011a3a:	4632      	mov	r2, r6
 8011a3c:	463b      	mov	r3, r7
 8011a3e:	f7ee fc25 	bl	800028c <__adddf3>
 8011a42:	9802      	ldr	r0, [sp, #8]
 8011a44:	460d      	mov	r5, r1
 8011a46:	4604      	mov	r4, r0
 8011a48:	4602      	mov	r2, r0
 8011a4a:	460b      	mov	r3, r1
 8011a4c:	4640      	mov	r0, r8
 8011a4e:	4649      	mov	r1, r9
 8011a50:	f7ee fdd2 	bl	80005f8 <__aeabi_dmul>
 8011a54:	2200      	movs	r2, #0
 8011a56:	4680      	mov	r8, r0
 8011a58:	4689      	mov	r9, r1
 8011a5a:	4b5e      	ldr	r3, [pc, #376]	; (8011bd4 <__ieee754_pow+0x734>)
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	4629      	mov	r1, r5
 8011a60:	f7ee fc12 	bl	8000288 <__aeabi_dsub>
 8011a64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011a68:	f7ee fc0e 	bl	8000288 <__aeabi_dsub>
 8011a6c:	4602      	mov	r2, r0
 8011a6e:	460b      	mov	r3, r1
 8011a70:	4630      	mov	r0, r6
 8011a72:	4639      	mov	r1, r7
 8011a74:	f7ee fc08 	bl	8000288 <__aeabi_dsub>
 8011a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a7c:	f7ee fdbc 	bl	80005f8 <__aeabi_dmul>
 8011a80:	4622      	mov	r2, r4
 8011a82:	4606      	mov	r6, r0
 8011a84:	460f      	mov	r7, r1
 8011a86:	462b      	mov	r3, r5
 8011a88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a8c:	f7ee fdb4 	bl	80005f8 <__aeabi_dmul>
 8011a90:	4602      	mov	r2, r0
 8011a92:	460b      	mov	r3, r1
 8011a94:	4630      	mov	r0, r6
 8011a96:	4639      	mov	r1, r7
 8011a98:	f7ee fbf8 	bl	800028c <__adddf3>
 8011a9c:	4606      	mov	r6, r0
 8011a9e:	460f      	mov	r7, r1
 8011aa0:	4602      	mov	r2, r0
 8011aa2:	460b      	mov	r3, r1
 8011aa4:	4640      	mov	r0, r8
 8011aa6:	4649      	mov	r1, r9
 8011aa8:	f7ee fbf0 	bl	800028c <__adddf3>
 8011aac:	9802      	ldr	r0, [sp, #8]
 8011aae:	a33c      	add	r3, pc, #240	; (adr r3, 8011ba0 <__ieee754_pow+0x700>)
 8011ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab4:	4604      	mov	r4, r0
 8011ab6:	460d      	mov	r5, r1
 8011ab8:	f7ee fd9e 	bl	80005f8 <__aeabi_dmul>
 8011abc:	4642      	mov	r2, r8
 8011abe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011ac2:	464b      	mov	r3, r9
 8011ac4:	4620      	mov	r0, r4
 8011ac6:	4629      	mov	r1, r5
 8011ac8:	f7ee fbde 	bl	8000288 <__aeabi_dsub>
 8011acc:	4602      	mov	r2, r0
 8011ace:	460b      	mov	r3, r1
 8011ad0:	4630      	mov	r0, r6
 8011ad2:	4639      	mov	r1, r7
 8011ad4:	f7ee fbd8 	bl	8000288 <__aeabi_dsub>
 8011ad8:	a333      	add	r3, pc, #204	; (adr r3, 8011ba8 <__ieee754_pow+0x708>)
 8011ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ade:	f7ee fd8b 	bl	80005f8 <__aeabi_dmul>
 8011ae2:	a333      	add	r3, pc, #204	; (adr r3, 8011bb0 <__ieee754_pow+0x710>)
 8011ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae8:	4606      	mov	r6, r0
 8011aea:	460f      	mov	r7, r1
 8011aec:	4620      	mov	r0, r4
 8011aee:	4629      	mov	r1, r5
 8011af0:	f7ee fd82 	bl	80005f8 <__aeabi_dmul>
 8011af4:	4602      	mov	r2, r0
 8011af6:	460b      	mov	r3, r1
 8011af8:	4630      	mov	r0, r6
 8011afa:	4639      	mov	r1, r7
 8011afc:	f7ee fbc6 	bl	800028c <__adddf3>
 8011b00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b02:	4b35      	ldr	r3, [pc, #212]	; (8011bd8 <__ieee754_pow+0x738>)
 8011b04:	4413      	add	r3, r2
 8011b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b0a:	f7ee fbbf 	bl	800028c <__adddf3>
 8011b0e:	4604      	mov	r4, r0
 8011b10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b12:	460d      	mov	r5, r1
 8011b14:	f7ee fd06 	bl	8000524 <__aeabi_i2d>
 8011b18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b1a:	4b30      	ldr	r3, [pc, #192]	; (8011bdc <__ieee754_pow+0x73c>)
 8011b1c:	4413      	add	r3, r2
 8011b1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011b22:	4606      	mov	r6, r0
 8011b24:	460f      	mov	r7, r1
 8011b26:	4622      	mov	r2, r4
 8011b28:	462b      	mov	r3, r5
 8011b2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011b2e:	f7ee fbad 	bl	800028c <__adddf3>
 8011b32:	4642      	mov	r2, r8
 8011b34:	464b      	mov	r3, r9
 8011b36:	f7ee fba9 	bl	800028c <__adddf3>
 8011b3a:	4632      	mov	r2, r6
 8011b3c:	463b      	mov	r3, r7
 8011b3e:	f7ee fba5 	bl	800028c <__adddf3>
 8011b42:	9802      	ldr	r0, [sp, #8]
 8011b44:	4632      	mov	r2, r6
 8011b46:	463b      	mov	r3, r7
 8011b48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011b4c:	f7ee fb9c 	bl	8000288 <__aeabi_dsub>
 8011b50:	4642      	mov	r2, r8
 8011b52:	464b      	mov	r3, r9
 8011b54:	f7ee fb98 	bl	8000288 <__aeabi_dsub>
 8011b58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b5c:	e607      	b.n	801176e <__ieee754_pow+0x2ce>
 8011b5e:	f04f 0a01 	mov.w	sl, #1
 8011b62:	e6a5      	b.n	80118b0 <__ieee754_pow+0x410>
 8011b64:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011bb8 <__ieee754_pow+0x718>
 8011b68:	e613      	b.n	8011792 <__ieee754_pow+0x2f2>
 8011b6a:	bf00      	nop
 8011b6c:	f3af 8000 	nop.w
 8011b70:	4a454eef 	.word	0x4a454eef
 8011b74:	3fca7e28 	.word	0x3fca7e28
 8011b78:	93c9db65 	.word	0x93c9db65
 8011b7c:	3fcd864a 	.word	0x3fcd864a
 8011b80:	a91d4101 	.word	0xa91d4101
 8011b84:	3fd17460 	.word	0x3fd17460
 8011b88:	518f264d 	.word	0x518f264d
 8011b8c:	3fd55555 	.word	0x3fd55555
 8011b90:	db6fabff 	.word	0xdb6fabff
 8011b94:	3fdb6db6 	.word	0x3fdb6db6
 8011b98:	33333303 	.word	0x33333303
 8011b9c:	3fe33333 	.word	0x3fe33333
 8011ba0:	e0000000 	.word	0xe0000000
 8011ba4:	3feec709 	.word	0x3feec709
 8011ba8:	dc3a03fd 	.word	0xdc3a03fd
 8011bac:	3feec709 	.word	0x3feec709
 8011bb0:	145b01f5 	.word	0x145b01f5
 8011bb4:	be3e2fe0 	.word	0xbe3e2fe0
 8011bb8:	00000000 	.word	0x00000000
 8011bbc:	3ff00000 	.word	0x3ff00000
 8011bc0:	43400000 	.word	0x43400000
 8011bc4:	0003988e 	.word	0x0003988e
 8011bc8:	000bb679 	.word	0x000bb679
 8011bcc:	08012858 	.word	0x08012858
 8011bd0:	3ff00000 	.word	0x3ff00000
 8011bd4:	40080000 	.word	0x40080000
 8011bd8:	08012878 	.word	0x08012878
 8011bdc:	08012868 	.word	0x08012868
 8011be0:	a3b4      	add	r3, pc, #720	; (adr r3, 8011eb4 <__ieee754_pow+0xa14>)
 8011be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be6:	4640      	mov	r0, r8
 8011be8:	4649      	mov	r1, r9
 8011bea:	f7ee fb4f 	bl	800028c <__adddf3>
 8011bee:	4622      	mov	r2, r4
 8011bf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011bf4:	462b      	mov	r3, r5
 8011bf6:	4630      	mov	r0, r6
 8011bf8:	4639      	mov	r1, r7
 8011bfa:	f7ee fb45 	bl	8000288 <__aeabi_dsub>
 8011bfe:	4602      	mov	r2, r0
 8011c00:	460b      	mov	r3, r1
 8011c02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c06:	f7ee ff87 	bl	8000b18 <__aeabi_dcmpgt>
 8011c0a:	2800      	cmp	r0, #0
 8011c0c:	f47f adfe 	bne.w	801180c <__ieee754_pow+0x36c>
 8011c10:	4aa3      	ldr	r2, [pc, #652]	; (8011ea0 <__ieee754_pow+0xa00>)
 8011c12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011c16:	4293      	cmp	r3, r2
 8011c18:	f340 810a 	ble.w	8011e30 <__ieee754_pow+0x990>
 8011c1c:	151b      	asrs	r3, r3, #20
 8011c1e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011c22:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011c26:	fa4a f303 	asr.w	r3, sl, r3
 8011c2a:	445b      	add	r3, fp
 8011c2c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011c30:	4e9c      	ldr	r6, [pc, #624]	; (8011ea4 <__ieee754_pow+0xa04>)
 8011c32:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011c36:	4116      	asrs	r6, r2
 8011c38:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011c3c:	2000      	movs	r0, #0
 8011c3e:	ea23 0106 	bic.w	r1, r3, r6
 8011c42:	f1c2 0214 	rsb	r2, r2, #20
 8011c46:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011c4a:	fa4a fa02 	asr.w	sl, sl, r2
 8011c4e:	f1bb 0f00 	cmp.w	fp, #0
 8011c52:	4602      	mov	r2, r0
 8011c54:	460b      	mov	r3, r1
 8011c56:	4620      	mov	r0, r4
 8011c58:	4629      	mov	r1, r5
 8011c5a:	bfb8      	it	lt
 8011c5c:	f1ca 0a00 	rsblt	sl, sl, #0
 8011c60:	f7ee fb12 	bl	8000288 <__aeabi_dsub>
 8011c64:	e9cd 0100 	strd	r0, r1, [sp]
 8011c68:	4642      	mov	r2, r8
 8011c6a:	464b      	mov	r3, r9
 8011c6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c70:	f7ee fb0c 	bl	800028c <__adddf3>
 8011c74:	2000      	movs	r0, #0
 8011c76:	a378      	add	r3, pc, #480	; (adr r3, 8011e58 <__ieee754_pow+0x9b8>)
 8011c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c7c:	4604      	mov	r4, r0
 8011c7e:	460d      	mov	r5, r1
 8011c80:	f7ee fcba 	bl	80005f8 <__aeabi_dmul>
 8011c84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c88:	4606      	mov	r6, r0
 8011c8a:	460f      	mov	r7, r1
 8011c8c:	4620      	mov	r0, r4
 8011c8e:	4629      	mov	r1, r5
 8011c90:	f7ee fafa 	bl	8000288 <__aeabi_dsub>
 8011c94:	4602      	mov	r2, r0
 8011c96:	460b      	mov	r3, r1
 8011c98:	4640      	mov	r0, r8
 8011c9a:	4649      	mov	r1, r9
 8011c9c:	f7ee faf4 	bl	8000288 <__aeabi_dsub>
 8011ca0:	a36f      	add	r3, pc, #444	; (adr r3, 8011e60 <__ieee754_pow+0x9c0>)
 8011ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca6:	f7ee fca7 	bl	80005f8 <__aeabi_dmul>
 8011caa:	a36f      	add	r3, pc, #444	; (adr r3, 8011e68 <__ieee754_pow+0x9c8>)
 8011cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb0:	4680      	mov	r8, r0
 8011cb2:	4689      	mov	r9, r1
 8011cb4:	4620      	mov	r0, r4
 8011cb6:	4629      	mov	r1, r5
 8011cb8:	f7ee fc9e 	bl	80005f8 <__aeabi_dmul>
 8011cbc:	4602      	mov	r2, r0
 8011cbe:	460b      	mov	r3, r1
 8011cc0:	4640      	mov	r0, r8
 8011cc2:	4649      	mov	r1, r9
 8011cc4:	f7ee fae2 	bl	800028c <__adddf3>
 8011cc8:	4604      	mov	r4, r0
 8011cca:	460d      	mov	r5, r1
 8011ccc:	4602      	mov	r2, r0
 8011cce:	460b      	mov	r3, r1
 8011cd0:	4630      	mov	r0, r6
 8011cd2:	4639      	mov	r1, r7
 8011cd4:	f7ee fada 	bl	800028c <__adddf3>
 8011cd8:	4632      	mov	r2, r6
 8011cda:	463b      	mov	r3, r7
 8011cdc:	4680      	mov	r8, r0
 8011cde:	4689      	mov	r9, r1
 8011ce0:	f7ee fad2 	bl	8000288 <__aeabi_dsub>
 8011ce4:	4602      	mov	r2, r0
 8011ce6:	460b      	mov	r3, r1
 8011ce8:	4620      	mov	r0, r4
 8011cea:	4629      	mov	r1, r5
 8011cec:	f7ee facc 	bl	8000288 <__aeabi_dsub>
 8011cf0:	4642      	mov	r2, r8
 8011cf2:	4606      	mov	r6, r0
 8011cf4:	460f      	mov	r7, r1
 8011cf6:	464b      	mov	r3, r9
 8011cf8:	4640      	mov	r0, r8
 8011cfa:	4649      	mov	r1, r9
 8011cfc:	f7ee fc7c 	bl	80005f8 <__aeabi_dmul>
 8011d00:	a35b      	add	r3, pc, #364	; (adr r3, 8011e70 <__ieee754_pow+0x9d0>)
 8011d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d06:	4604      	mov	r4, r0
 8011d08:	460d      	mov	r5, r1
 8011d0a:	f7ee fc75 	bl	80005f8 <__aeabi_dmul>
 8011d0e:	a35a      	add	r3, pc, #360	; (adr r3, 8011e78 <__ieee754_pow+0x9d8>)
 8011d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d14:	f7ee fab8 	bl	8000288 <__aeabi_dsub>
 8011d18:	4622      	mov	r2, r4
 8011d1a:	462b      	mov	r3, r5
 8011d1c:	f7ee fc6c 	bl	80005f8 <__aeabi_dmul>
 8011d20:	a357      	add	r3, pc, #348	; (adr r3, 8011e80 <__ieee754_pow+0x9e0>)
 8011d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d26:	f7ee fab1 	bl	800028c <__adddf3>
 8011d2a:	4622      	mov	r2, r4
 8011d2c:	462b      	mov	r3, r5
 8011d2e:	f7ee fc63 	bl	80005f8 <__aeabi_dmul>
 8011d32:	a355      	add	r3, pc, #340	; (adr r3, 8011e88 <__ieee754_pow+0x9e8>)
 8011d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d38:	f7ee faa6 	bl	8000288 <__aeabi_dsub>
 8011d3c:	4622      	mov	r2, r4
 8011d3e:	462b      	mov	r3, r5
 8011d40:	f7ee fc5a 	bl	80005f8 <__aeabi_dmul>
 8011d44:	a352      	add	r3, pc, #328	; (adr r3, 8011e90 <__ieee754_pow+0x9f0>)
 8011d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d4a:	f7ee fa9f 	bl	800028c <__adddf3>
 8011d4e:	4622      	mov	r2, r4
 8011d50:	462b      	mov	r3, r5
 8011d52:	f7ee fc51 	bl	80005f8 <__aeabi_dmul>
 8011d56:	4602      	mov	r2, r0
 8011d58:	460b      	mov	r3, r1
 8011d5a:	4640      	mov	r0, r8
 8011d5c:	4649      	mov	r1, r9
 8011d5e:	f7ee fa93 	bl	8000288 <__aeabi_dsub>
 8011d62:	4604      	mov	r4, r0
 8011d64:	460d      	mov	r5, r1
 8011d66:	4602      	mov	r2, r0
 8011d68:	460b      	mov	r3, r1
 8011d6a:	4640      	mov	r0, r8
 8011d6c:	4649      	mov	r1, r9
 8011d6e:	f7ee fc43 	bl	80005f8 <__aeabi_dmul>
 8011d72:	2200      	movs	r2, #0
 8011d74:	e9cd 0100 	strd	r0, r1, [sp]
 8011d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	4629      	mov	r1, r5
 8011d80:	f7ee fa82 	bl	8000288 <__aeabi_dsub>
 8011d84:	4602      	mov	r2, r0
 8011d86:	460b      	mov	r3, r1
 8011d88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d8c:	f7ee fd5e 	bl	800084c <__aeabi_ddiv>
 8011d90:	4632      	mov	r2, r6
 8011d92:	4604      	mov	r4, r0
 8011d94:	460d      	mov	r5, r1
 8011d96:	463b      	mov	r3, r7
 8011d98:	4640      	mov	r0, r8
 8011d9a:	4649      	mov	r1, r9
 8011d9c:	f7ee fc2c 	bl	80005f8 <__aeabi_dmul>
 8011da0:	4632      	mov	r2, r6
 8011da2:	463b      	mov	r3, r7
 8011da4:	f7ee fa72 	bl	800028c <__adddf3>
 8011da8:	4602      	mov	r2, r0
 8011daa:	460b      	mov	r3, r1
 8011dac:	4620      	mov	r0, r4
 8011dae:	4629      	mov	r1, r5
 8011db0:	f7ee fa6a 	bl	8000288 <__aeabi_dsub>
 8011db4:	4642      	mov	r2, r8
 8011db6:	464b      	mov	r3, r9
 8011db8:	f7ee fa66 	bl	8000288 <__aeabi_dsub>
 8011dbc:	4602      	mov	r2, r0
 8011dbe:	460b      	mov	r3, r1
 8011dc0:	2000      	movs	r0, #0
 8011dc2:	4939      	ldr	r1, [pc, #228]	; (8011ea8 <__ieee754_pow+0xa08>)
 8011dc4:	f7ee fa60 	bl	8000288 <__aeabi_dsub>
 8011dc8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8011dcc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011dd0:	4602      	mov	r2, r0
 8011dd2:	460b      	mov	r3, r1
 8011dd4:	da2f      	bge.n	8011e36 <__ieee754_pow+0x996>
 8011dd6:	4650      	mov	r0, sl
 8011dd8:	ec43 2b10 	vmov	d0, r2, r3
 8011ddc:	f000 f9c0 	bl	8012160 <scalbn>
 8011de0:	ec51 0b10 	vmov	r0, r1, d0
 8011de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011de8:	f7ff bbf1 	b.w	80115ce <__ieee754_pow+0x12e>
 8011dec:	4b2f      	ldr	r3, [pc, #188]	; (8011eac <__ieee754_pow+0xa0c>)
 8011dee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011df2:	429e      	cmp	r6, r3
 8011df4:	f77f af0c 	ble.w	8011c10 <__ieee754_pow+0x770>
 8011df8:	4b2d      	ldr	r3, [pc, #180]	; (8011eb0 <__ieee754_pow+0xa10>)
 8011dfa:	440b      	add	r3, r1
 8011dfc:	4303      	orrs	r3, r0
 8011dfe:	d00b      	beq.n	8011e18 <__ieee754_pow+0x978>
 8011e00:	a325      	add	r3, pc, #148	; (adr r3, 8011e98 <__ieee754_pow+0x9f8>)
 8011e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e0a:	f7ee fbf5 	bl	80005f8 <__aeabi_dmul>
 8011e0e:	a322      	add	r3, pc, #136	; (adr r3, 8011e98 <__ieee754_pow+0x9f8>)
 8011e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e14:	f7ff bbdb 	b.w	80115ce <__ieee754_pow+0x12e>
 8011e18:	4622      	mov	r2, r4
 8011e1a:	462b      	mov	r3, r5
 8011e1c:	f7ee fa34 	bl	8000288 <__aeabi_dsub>
 8011e20:	4642      	mov	r2, r8
 8011e22:	464b      	mov	r3, r9
 8011e24:	f7ee fe6e 	bl	8000b04 <__aeabi_dcmpge>
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	f43f aef1 	beq.w	8011c10 <__ieee754_pow+0x770>
 8011e2e:	e7e7      	b.n	8011e00 <__ieee754_pow+0x960>
 8011e30:	f04f 0a00 	mov.w	sl, #0
 8011e34:	e718      	b.n	8011c68 <__ieee754_pow+0x7c8>
 8011e36:	4621      	mov	r1, r4
 8011e38:	e7d4      	b.n	8011de4 <__ieee754_pow+0x944>
 8011e3a:	2000      	movs	r0, #0
 8011e3c:	491a      	ldr	r1, [pc, #104]	; (8011ea8 <__ieee754_pow+0xa08>)
 8011e3e:	f7ff bb8f 	b.w	8011560 <__ieee754_pow+0xc0>
 8011e42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e46:	f7ff bb8b 	b.w	8011560 <__ieee754_pow+0xc0>
 8011e4a:	4630      	mov	r0, r6
 8011e4c:	4639      	mov	r1, r7
 8011e4e:	f7ff bb87 	b.w	8011560 <__ieee754_pow+0xc0>
 8011e52:	4693      	mov	fp, r2
 8011e54:	f7ff bb98 	b.w	8011588 <__ieee754_pow+0xe8>
 8011e58:	00000000 	.word	0x00000000
 8011e5c:	3fe62e43 	.word	0x3fe62e43
 8011e60:	fefa39ef 	.word	0xfefa39ef
 8011e64:	3fe62e42 	.word	0x3fe62e42
 8011e68:	0ca86c39 	.word	0x0ca86c39
 8011e6c:	be205c61 	.word	0xbe205c61
 8011e70:	72bea4d0 	.word	0x72bea4d0
 8011e74:	3e663769 	.word	0x3e663769
 8011e78:	c5d26bf1 	.word	0xc5d26bf1
 8011e7c:	3ebbbd41 	.word	0x3ebbbd41
 8011e80:	af25de2c 	.word	0xaf25de2c
 8011e84:	3f11566a 	.word	0x3f11566a
 8011e88:	16bebd93 	.word	0x16bebd93
 8011e8c:	3f66c16c 	.word	0x3f66c16c
 8011e90:	5555553e 	.word	0x5555553e
 8011e94:	3fc55555 	.word	0x3fc55555
 8011e98:	c2f8f359 	.word	0xc2f8f359
 8011e9c:	01a56e1f 	.word	0x01a56e1f
 8011ea0:	3fe00000 	.word	0x3fe00000
 8011ea4:	000fffff 	.word	0x000fffff
 8011ea8:	3ff00000 	.word	0x3ff00000
 8011eac:	4090cbff 	.word	0x4090cbff
 8011eb0:	3f6f3400 	.word	0x3f6f3400
 8011eb4:	652b82fe 	.word	0x652b82fe
 8011eb8:	3c971547 	.word	0x3c971547

08011ebc <__ieee754_sqrt>:
 8011ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ec0:	4955      	ldr	r1, [pc, #340]	; (8012018 <__ieee754_sqrt+0x15c>)
 8011ec2:	ec55 4b10 	vmov	r4, r5, d0
 8011ec6:	43a9      	bics	r1, r5
 8011ec8:	462b      	mov	r3, r5
 8011eca:	462a      	mov	r2, r5
 8011ecc:	d112      	bne.n	8011ef4 <__ieee754_sqrt+0x38>
 8011ece:	ee10 2a10 	vmov	r2, s0
 8011ed2:	ee10 0a10 	vmov	r0, s0
 8011ed6:	4629      	mov	r1, r5
 8011ed8:	f7ee fb8e 	bl	80005f8 <__aeabi_dmul>
 8011edc:	4602      	mov	r2, r0
 8011ede:	460b      	mov	r3, r1
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	4629      	mov	r1, r5
 8011ee4:	f7ee f9d2 	bl	800028c <__adddf3>
 8011ee8:	4604      	mov	r4, r0
 8011eea:	460d      	mov	r5, r1
 8011eec:	ec45 4b10 	vmov	d0, r4, r5
 8011ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ef4:	2d00      	cmp	r5, #0
 8011ef6:	ee10 0a10 	vmov	r0, s0
 8011efa:	4621      	mov	r1, r4
 8011efc:	dc0f      	bgt.n	8011f1e <__ieee754_sqrt+0x62>
 8011efe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011f02:	4330      	orrs	r0, r6
 8011f04:	d0f2      	beq.n	8011eec <__ieee754_sqrt+0x30>
 8011f06:	b155      	cbz	r5, 8011f1e <__ieee754_sqrt+0x62>
 8011f08:	ee10 2a10 	vmov	r2, s0
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	4629      	mov	r1, r5
 8011f10:	f7ee f9ba 	bl	8000288 <__aeabi_dsub>
 8011f14:	4602      	mov	r2, r0
 8011f16:	460b      	mov	r3, r1
 8011f18:	f7ee fc98 	bl	800084c <__aeabi_ddiv>
 8011f1c:	e7e4      	b.n	8011ee8 <__ieee754_sqrt+0x2c>
 8011f1e:	151b      	asrs	r3, r3, #20
 8011f20:	d073      	beq.n	801200a <__ieee754_sqrt+0x14e>
 8011f22:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011f26:	07dd      	lsls	r5, r3, #31
 8011f28:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011f2c:	bf48      	it	mi
 8011f2e:	0fc8      	lsrmi	r0, r1, #31
 8011f30:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011f34:	bf44      	itt	mi
 8011f36:	0049      	lslmi	r1, r1, #1
 8011f38:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8011f3c:	2500      	movs	r5, #0
 8011f3e:	1058      	asrs	r0, r3, #1
 8011f40:	0fcb      	lsrs	r3, r1, #31
 8011f42:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011f46:	0049      	lsls	r1, r1, #1
 8011f48:	2316      	movs	r3, #22
 8011f4a:	462c      	mov	r4, r5
 8011f4c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011f50:	19a7      	adds	r7, r4, r6
 8011f52:	4297      	cmp	r7, r2
 8011f54:	bfde      	ittt	le
 8011f56:	19bc      	addle	r4, r7, r6
 8011f58:	1bd2      	suble	r2, r2, r7
 8011f5a:	19ad      	addle	r5, r5, r6
 8011f5c:	0fcf      	lsrs	r7, r1, #31
 8011f5e:	3b01      	subs	r3, #1
 8011f60:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8011f64:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011f68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011f6c:	d1f0      	bne.n	8011f50 <__ieee754_sqrt+0x94>
 8011f6e:	f04f 0c20 	mov.w	ip, #32
 8011f72:	469e      	mov	lr, r3
 8011f74:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011f78:	42a2      	cmp	r2, r4
 8011f7a:	eb06 070e 	add.w	r7, r6, lr
 8011f7e:	dc02      	bgt.n	8011f86 <__ieee754_sqrt+0xca>
 8011f80:	d112      	bne.n	8011fa8 <__ieee754_sqrt+0xec>
 8011f82:	428f      	cmp	r7, r1
 8011f84:	d810      	bhi.n	8011fa8 <__ieee754_sqrt+0xec>
 8011f86:	2f00      	cmp	r7, #0
 8011f88:	eb07 0e06 	add.w	lr, r7, r6
 8011f8c:	da42      	bge.n	8012014 <__ieee754_sqrt+0x158>
 8011f8e:	f1be 0f00 	cmp.w	lr, #0
 8011f92:	db3f      	blt.n	8012014 <__ieee754_sqrt+0x158>
 8011f94:	f104 0801 	add.w	r8, r4, #1
 8011f98:	1b12      	subs	r2, r2, r4
 8011f9a:	428f      	cmp	r7, r1
 8011f9c:	bf88      	it	hi
 8011f9e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011fa2:	1bc9      	subs	r1, r1, r7
 8011fa4:	4433      	add	r3, r6
 8011fa6:	4644      	mov	r4, r8
 8011fa8:	0052      	lsls	r2, r2, #1
 8011faa:	f1bc 0c01 	subs.w	ip, ip, #1
 8011fae:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8011fb2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011fb6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011fba:	d1dd      	bne.n	8011f78 <__ieee754_sqrt+0xbc>
 8011fbc:	430a      	orrs	r2, r1
 8011fbe:	d006      	beq.n	8011fce <__ieee754_sqrt+0x112>
 8011fc0:	1c5c      	adds	r4, r3, #1
 8011fc2:	bf13      	iteet	ne
 8011fc4:	3301      	addne	r3, #1
 8011fc6:	3501      	addeq	r5, #1
 8011fc8:	4663      	moveq	r3, ip
 8011fca:	f023 0301 	bicne.w	r3, r3, #1
 8011fce:	106a      	asrs	r2, r5, #1
 8011fd0:	085b      	lsrs	r3, r3, #1
 8011fd2:	07e9      	lsls	r1, r5, #31
 8011fd4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011fd8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011fdc:	bf48      	it	mi
 8011fde:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011fe2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8011fe6:	461c      	mov	r4, r3
 8011fe8:	e780      	b.n	8011eec <__ieee754_sqrt+0x30>
 8011fea:	0aca      	lsrs	r2, r1, #11
 8011fec:	3815      	subs	r0, #21
 8011fee:	0549      	lsls	r1, r1, #21
 8011ff0:	2a00      	cmp	r2, #0
 8011ff2:	d0fa      	beq.n	8011fea <__ieee754_sqrt+0x12e>
 8011ff4:	02d6      	lsls	r6, r2, #11
 8011ff6:	d50a      	bpl.n	801200e <__ieee754_sqrt+0x152>
 8011ff8:	f1c3 0420 	rsb	r4, r3, #32
 8011ffc:	fa21 f404 	lsr.w	r4, r1, r4
 8012000:	1e5d      	subs	r5, r3, #1
 8012002:	4099      	lsls	r1, r3
 8012004:	4322      	orrs	r2, r4
 8012006:	1b43      	subs	r3, r0, r5
 8012008:	e78b      	b.n	8011f22 <__ieee754_sqrt+0x66>
 801200a:	4618      	mov	r0, r3
 801200c:	e7f0      	b.n	8011ff0 <__ieee754_sqrt+0x134>
 801200e:	0052      	lsls	r2, r2, #1
 8012010:	3301      	adds	r3, #1
 8012012:	e7ef      	b.n	8011ff4 <__ieee754_sqrt+0x138>
 8012014:	46a0      	mov	r8, r4
 8012016:	e7bf      	b.n	8011f98 <__ieee754_sqrt+0xdc>
 8012018:	7ff00000 	.word	0x7ff00000

0801201c <fabs>:
 801201c:	ec51 0b10 	vmov	r0, r1, d0
 8012020:	ee10 2a10 	vmov	r2, s0
 8012024:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012028:	ec43 2b10 	vmov	d0, r2, r3
 801202c:	4770      	bx	lr

0801202e <finite>:
 801202e:	ee10 3a90 	vmov	r3, s1
 8012032:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8012036:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801203a:	0fc0      	lsrs	r0, r0, #31
 801203c:	4770      	bx	lr

0801203e <matherr>:
 801203e:	2000      	movs	r0, #0
 8012040:	4770      	bx	lr
 8012042:	0000      	movs	r0, r0
 8012044:	0000      	movs	r0, r0
	...

08012048 <nan>:
 8012048:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012050 <nan+0x8>
 801204c:	4770      	bx	lr
 801204e:	bf00      	nop
 8012050:	00000000 	.word	0x00000000
 8012054:	7ff80000 	.word	0x7ff80000

08012058 <rint>:
 8012058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801205a:	ec51 0b10 	vmov	r0, r1, d0
 801205e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012062:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012066:	2e13      	cmp	r6, #19
 8012068:	460b      	mov	r3, r1
 801206a:	ee10 4a10 	vmov	r4, s0
 801206e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012072:	dc56      	bgt.n	8012122 <rint+0xca>
 8012074:	2e00      	cmp	r6, #0
 8012076:	da2b      	bge.n	80120d0 <rint+0x78>
 8012078:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801207c:	4302      	orrs	r2, r0
 801207e:	d023      	beq.n	80120c8 <rint+0x70>
 8012080:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012084:	4302      	orrs	r2, r0
 8012086:	4254      	negs	r4, r2
 8012088:	4314      	orrs	r4, r2
 801208a:	0c4b      	lsrs	r3, r1, #17
 801208c:	0b24      	lsrs	r4, r4, #12
 801208e:	045b      	lsls	r3, r3, #17
 8012090:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012094:	ea44 0103 	orr.w	r1, r4, r3
 8012098:	460b      	mov	r3, r1
 801209a:	492f      	ldr	r1, [pc, #188]	; (8012158 <rint+0x100>)
 801209c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80120a0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80120a4:	4602      	mov	r2, r0
 80120a6:	4639      	mov	r1, r7
 80120a8:	4630      	mov	r0, r6
 80120aa:	f7ee f8ef 	bl	800028c <__adddf3>
 80120ae:	e9cd 0100 	strd	r0, r1, [sp]
 80120b2:	463b      	mov	r3, r7
 80120b4:	4632      	mov	r2, r6
 80120b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80120ba:	f7ee f8e5 	bl	8000288 <__aeabi_dsub>
 80120be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80120c2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80120c6:	4639      	mov	r1, r7
 80120c8:	ec41 0b10 	vmov	d0, r0, r1
 80120cc:	b003      	add	sp, #12
 80120ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120d0:	4a22      	ldr	r2, [pc, #136]	; (801215c <rint+0x104>)
 80120d2:	4132      	asrs	r2, r6
 80120d4:	ea01 0702 	and.w	r7, r1, r2
 80120d8:	4307      	orrs	r7, r0
 80120da:	d0f5      	beq.n	80120c8 <rint+0x70>
 80120dc:	0852      	lsrs	r2, r2, #1
 80120de:	4011      	ands	r1, r2
 80120e0:	430c      	orrs	r4, r1
 80120e2:	d00b      	beq.n	80120fc <rint+0xa4>
 80120e4:	ea23 0202 	bic.w	r2, r3, r2
 80120e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80120ec:	2e13      	cmp	r6, #19
 80120ee:	fa43 f306 	asr.w	r3, r3, r6
 80120f2:	bf0c      	ite	eq
 80120f4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80120f8:	2400      	movne	r4, #0
 80120fa:	4313      	orrs	r3, r2
 80120fc:	4916      	ldr	r1, [pc, #88]	; (8012158 <rint+0x100>)
 80120fe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012102:	4622      	mov	r2, r4
 8012104:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012108:	4620      	mov	r0, r4
 801210a:	4629      	mov	r1, r5
 801210c:	f7ee f8be 	bl	800028c <__adddf3>
 8012110:	e9cd 0100 	strd	r0, r1, [sp]
 8012114:	4622      	mov	r2, r4
 8012116:	462b      	mov	r3, r5
 8012118:	e9dd 0100 	ldrd	r0, r1, [sp]
 801211c:	f7ee f8b4 	bl	8000288 <__aeabi_dsub>
 8012120:	e7d2      	b.n	80120c8 <rint+0x70>
 8012122:	2e33      	cmp	r6, #51	; 0x33
 8012124:	dd07      	ble.n	8012136 <rint+0xde>
 8012126:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801212a:	d1cd      	bne.n	80120c8 <rint+0x70>
 801212c:	ee10 2a10 	vmov	r2, s0
 8012130:	f7ee f8ac 	bl	800028c <__adddf3>
 8012134:	e7c8      	b.n	80120c8 <rint+0x70>
 8012136:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801213a:	f04f 32ff 	mov.w	r2, #4294967295
 801213e:	40f2      	lsrs	r2, r6
 8012140:	4210      	tst	r0, r2
 8012142:	d0c1      	beq.n	80120c8 <rint+0x70>
 8012144:	0852      	lsrs	r2, r2, #1
 8012146:	4210      	tst	r0, r2
 8012148:	bf1f      	itttt	ne
 801214a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801214e:	ea20 0202 	bicne.w	r2, r0, r2
 8012152:	4134      	asrne	r4, r6
 8012154:	4314      	orrne	r4, r2
 8012156:	e7d1      	b.n	80120fc <rint+0xa4>
 8012158:	08012888 	.word	0x08012888
 801215c:	000fffff 	.word	0x000fffff

08012160 <scalbn>:
 8012160:	b570      	push	{r4, r5, r6, lr}
 8012162:	ec55 4b10 	vmov	r4, r5, d0
 8012166:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801216a:	4606      	mov	r6, r0
 801216c:	462b      	mov	r3, r5
 801216e:	b9aa      	cbnz	r2, 801219c <scalbn+0x3c>
 8012170:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012174:	4323      	orrs	r3, r4
 8012176:	d03b      	beq.n	80121f0 <scalbn+0x90>
 8012178:	4b31      	ldr	r3, [pc, #196]	; (8012240 <scalbn+0xe0>)
 801217a:	4629      	mov	r1, r5
 801217c:	2200      	movs	r2, #0
 801217e:	ee10 0a10 	vmov	r0, s0
 8012182:	f7ee fa39 	bl	80005f8 <__aeabi_dmul>
 8012186:	4b2f      	ldr	r3, [pc, #188]	; (8012244 <scalbn+0xe4>)
 8012188:	429e      	cmp	r6, r3
 801218a:	4604      	mov	r4, r0
 801218c:	460d      	mov	r5, r1
 801218e:	da12      	bge.n	80121b6 <scalbn+0x56>
 8012190:	a327      	add	r3, pc, #156	; (adr r3, 8012230 <scalbn+0xd0>)
 8012192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012196:	f7ee fa2f 	bl	80005f8 <__aeabi_dmul>
 801219a:	e009      	b.n	80121b0 <scalbn+0x50>
 801219c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80121a0:	428a      	cmp	r2, r1
 80121a2:	d10c      	bne.n	80121be <scalbn+0x5e>
 80121a4:	ee10 2a10 	vmov	r2, s0
 80121a8:	4620      	mov	r0, r4
 80121aa:	4629      	mov	r1, r5
 80121ac:	f7ee f86e 	bl	800028c <__adddf3>
 80121b0:	4604      	mov	r4, r0
 80121b2:	460d      	mov	r5, r1
 80121b4:	e01c      	b.n	80121f0 <scalbn+0x90>
 80121b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80121ba:	460b      	mov	r3, r1
 80121bc:	3a36      	subs	r2, #54	; 0x36
 80121be:	4432      	add	r2, r6
 80121c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80121c4:	428a      	cmp	r2, r1
 80121c6:	dd0b      	ble.n	80121e0 <scalbn+0x80>
 80121c8:	ec45 4b11 	vmov	d1, r4, r5
 80121cc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012238 <scalbn+0xd8>
 80121d0:	f000 f83c 	bl	801224c <copysign>
 80121d4:	a318      	add	r3, pc, #96	; (adr r3, 8012238 <scalbn+0xd8>)
 80121d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121da:	ec51 0b10 	vmov	r0, r1, d0
 80121de:	e7da      	b.n	8012196 <scalbn+0x36>
 80121e0:	2a00      	cmp	r2, #0
 80121e2:	dd08      	ble.n	80121f6 <scalbn+0x96>
 80121e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80121e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80121ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80121f0:	ec45 4b10 	vmov	d0, r4, r5
 80121f4:	bd70      	pop	{r4, r5, r6, pc}
 80121f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80121fa:	da0d      	bge.n	8012218 <scalbn+0xb8>
 80121fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012200:	429e      	cmp	r6, r3
 8012202:	ec45 4b11 	vmov	d1, r4, r5
 8012206:	dce1      	bgt.n	80121cc <scalbn+0x6c>
 8012208:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012230 <scalbn+0xd0>
 801220c:	f000 f81e 	bl	801224c <copysign>
 8012210:	a307      	add	r3, pc, #28	; (adr r3, 8012230 <scalbn+0xd0>)
 8012212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012216:	e7e0      	b.n	80121da <scalbn+0x7a>
 8012218:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801221c:	3236      	adds	r2, #54	; 0x36
 801221e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012222:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012226:	4620      	mov	r0, r4
 8012228:	4629      	mov	r1, r5
 801222a:	2200      	movs	r2, #0
 801222c:	4b06      	ldr	r3, [pc, #24]	; (8012248 <scalbn+0xe8>)
 801222e:	e7b2      	b.n	8012196 <scalbn+0x36>
 8012230:	c2f8f359 	.word	0xc2f8f359
 8012234:	01a56e1f 	.word	0x01a56e1f
 8012238:	8800759c 	.word	0x8800759c
 801223c:	7e37e43c 	.word	0x7e37e43c
 8012240:	43500000 	.word	0x43500000
 8012244:	ffff3cb0 	.word	0xffff3cb0
 8012248:	3c900000 	.word	0x3c900000

0801224c <copysign>:
 801224c:	ec51 0b10 	vmov	r0, r1, d0
 8012250:	ee11 0a90 	vmov	r0, s3
 8012254:	ee10 2a10 	vmov	r2, s0
 8012258:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801225c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012260:	ea41 0300 	orr.w	r3, r1, r0
 8012264:	ec43 2b10 	vmov	d0, r2, r3
 8012268:	4770      	bx	lr
	...

0801226c <_init>:
 801226c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801226e:	bf00      	nop
 8012270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012272:	bc08      	pop	{r3}
 8012274:	469e      	mov	lr, r3
 8012276:	4770      	bx	lr

08012278 <_fini>:
 8012278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801227a:	bf00      	nop
 801227c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801227e:	bc08      	pop	{r3}
 8012280:	469e      	mov	lr, r3
 8012282:	4770      	bx	lr
