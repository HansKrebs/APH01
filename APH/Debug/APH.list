
APH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a34c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800a4ec  0800a4ec  0001a4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6d4  0800a6d4  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6d4  0800a6d4  0001a6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6dc  0800a6dc  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6dc  0800a6dc  0001a6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6e0  0800a6e0  0001a6e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800a6e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000909c  20000104  0800a7e8  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200091a0  0800a7e8  000291a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d61d  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000051ee  00000000  00000000  0004d751  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020e8  00000000  00000000  00052940  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ec8  00000000  00000000  00054a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bad7  00000000  00000000  000568f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000192ba  00000000  00000000  000723c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009f5e4  00000000  00000000  0008b681  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012ac65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090bc  00000000  00000000  0012ace0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a4d4 	.word	0x0800a4d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	0800a4d4 	.word	0x0800a4d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Set_Output>:




void Set_Output(GPIO_DebugPins dp, GPIO_PinState st)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	460a      	mov	r2, r1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(dpArray[dp].PORT, dpArray[dp].PIN, st);
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	4a08      	ldr	r2, [pc, #32]	; (80005b4 <Set_Output+0x34>)
 8000594:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <Set_Output+0x34>)
 800059c:	00db      	lsls	r3, r3, #3
 800059e:	4413      	add	r3, r2
 80005a0:	889b      	ldrh	r3, [r3, #4]
 80005a2:	79ba      	ldrb	r2, [r7, #6]
 80005a4:	4619      	mov	r1, r3
 80005a6:	f003 f97d 	bl	80038a4 <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000000 	.word	0x20000000

080005b8 <initFastTask>:
/* Private variables ---------------------------------------------------------*/

static osEventFlagsId_t ntFlag = NULL;

void initFastTask(osEventFlagsId_t normTaskEventHandle)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	ntFlag = normTaskEventHandle;
 80005c0:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <initFastTask+0x1c>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6013      	str	r3, [r2, #0]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000120 	.word	0x20000120

080005d8 <StartFastTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFastTask */
void StartFastTask(void *argument)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFastTask */
  uint32_t cnt = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  uint32_t loop = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
  uint32_t test = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]

  while (ntFlag == NULL)
 80005ec:	e002      	b.n	80005f4 <StartFastTask+0x1c>
  {
	  osDelay(1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f005 fe04 	bl	80061fc <osDelay>
  while (ntFlag == NULL)
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <StartFastTask+0x98>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d0f8      	beq.n	80005ee <StartFastTask+0x16>
  }
 /* Infinite loop */

  for(;;)
  {
  	Set_Output(OUT_TEST_1, 1);
 80005fc:	2101      	movs	r1, #1
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff ffbe 	bl	8000580 <Set_Output>
  	for(loop = 0; loop < 2000; loop++)
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	e005      	b.n	8000616 <StartFastTask+0x3e>
  	{
  		test = test + 3;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	3303      	adds	r3, #3
 800060e:	60fb      	str	r3, [r7, #12]
  	for(loop = 0; loop < 2000; loop++)
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	3301      	adds	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800061c:	d3f5      	bcc.n	800060a <StartFastTask+0x32>
  	}
  	if(test > 3000)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000624:	4293      	cmp	r3, r2
 8000626:	d902      	bls.n	800062e <StartFastTask+0x56>
  		test = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e001      	b.n	8000632 <StartFastTask+0x5a>
  	else
  		test = 7;
 800062e:	2307      	movs	r3, #7
 8000630:	60fb      	str	r3, [r7, #12]
  	Set_Output(OUT_TEST_1, 0);
 8000632:	2100      	movs	r1, #0
 8000634:	2000      	movs	r0, #0
 8000636:	f7ff ffa3 	bl	8000580 <Set_Output>

  	Set_Output(OUT_TEST_2, 1);
 800063a:	2101      	movs	r1, #1
 800063c:	2001      	movs	r0, #1
 800063e:	f7ff ff9f 	bl	8000580 <Set_Output>
    osDelay(1);
 8000642:	2001      	movs	r0, #1
 8000644:	f005 fdda 	bl	80061fc <osDelay>
  	Set_Output(OUT_TEST_2, 0);
 8000648:	2100      	movs	r1, #0
 800064a:	2001      	movs	r0, #1
 800064c:	f7ff ff98 	bl	8000580 <Set_Output>
    cnt++;
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	3301      	adds	r3, #1
 8000654:	617b      	str	r3, [r7, #20]
    if (cnt >= 10)
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	2b09      	cmp	r3, #9
 800065a:	d9cf      	bls.n	80005fc <StartFastTask+0x24>
    {
    	cnt = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
    	osEventFlagsSet(ntFlag,1);
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <StartFastTask+0x98>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2101      	movs	r1, #1
 8000666:	4618      	mov	r0, r3
 8000668:	f005 fe48 	bl	80062fc <osEventFlagsSet>
  	Set_Output(OUT_TEST_1, 1);
 800066c:	e7c6      	b.n	80005fc <StartFastTask+0x24>
 800066e:	bf00      	nop
 8000670:	20000120 	.word	0x20000120

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f002 fd8c 	bl	8003194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067c:	f000 f868 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000680:	f000 f8d2 	bl	8000828 <MX_GPIO_Init>
//  MX_MEMS_Init();
  /* USER CODE BEGIN 2 */
  position_Init();
 8000684:	f008 fe91 	bl	80093aa <position_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000688:	f005 fca8 	bl	8005fdc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800068c:	4a20      	ldr	r2, [pc, #128]	; (8000710 <main+0x9c>)
 800068e:	2100      	movs	r1, #0
 8000690:	4820      	ldr	r0, [pc, #128]	; (8000714 <main+0xa0>)
 8000692:	f005 fd0d 	bl	80060b0 <osThreadNew>
 8000696:	4602      	mov	r2, r0
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <main+0xa4>)
 800069a:	601a      	str	r2, [r3, #0]

  /* creation of fastTask */
  fastTaskHandle = osThreadNew(StartFastTask, NULL, &fastTask_attributes);
 800069c:	4a1f      	ldr	r2, [pc, #124]	; (800071c <main+0xa8>)
 800069e:	2100      	movs	r1, #0
 80006a0:	481f      	ldr	r0, [pc, #124]	; (8000720 <main+0xac>)
 80006a2:	f005 fd05 	bl	80060b0 <osThreadNew>
 80006a6:	4602      	mov	r2, r0
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <main+0xb0>)
 80006aa:	601a      	str	r2, [r3, #0]

  /* creation of normalTask */
  normalTaskHandle = osThreadNew(StartNormalTask, NULL, &normalTask_attributes);
 80006ac:	4a1e      	ldr	r2, [pc, #120]	; (8000728 <main+0xb4>)
 80006ae:	2100      	movs	r1, #0
 80006b0:	481e      	ldr	r0, [pc, #120]	; (800072c <main+0xb8>)
 80006b2:	f005 fcfd 	bl	80060b0 <osThreadNew>
 80006b6:	4602      	mov	r2, r0
 80006b8:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <main+0xbc>)
 80006ba:	601a      	str	r2, [r3, #0]

  /* creation of slowTask */
  slowTaskHandle = osThreadNew(StartSlowTask, NULL, &slowTask_attributes);
 80006bc:	4a1d      	ldr	r2, [pc, #116]	; (8000734 <main+0xc0>)
 80006be:	2100      	movs	r1, #0
 80006c0:	481d      	ldr	r0, [pc, #116]	; (8000738 <main+0xc4>)
 80006c2:	f005 fcf5 	bl	80060b0 <osThreadNew>
 80006c6:	4602      	mov	r2, r0
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <main+0xc8>)
 80006ca:	601a      	str	r2, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of normTaskEvent */
  normTaskEventHandle = osEventFlagsNew(&normTaskEvent_attributes);
 80006cc:	481c      	ldr	r0, [pc, #112]	; (8000740 <main+0xcc>)
 80006ce:	f005 fdc3 	bl	8006258 <osEventFlagsNew>
 80006d2:	4602      	mov	r2, r0
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <main+0xd0>)
 80006d6:	601a      	str	r2, [r3, #0]

  /* creation of slowTaskEvent */
  slowTaskEventHandle = osEventFlagsNew(&slowTaskEvent_attributes);
 80006d8:	481b      	ldr	r0, [pc, #108]	; (8000748 <main+0xd4>)
 80006da:	f005 fdbd 	bl	8006258 <osEventFlagsNew>
 80006de:	4602      	mov	r2, r0
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <main+0xd8>)
 80006e2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  initFastTask(normTaskEventHandle);
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <main+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff65 	bl	80005b8 <initFastTask>
  initSlowTask(slowTaskEventHandle);
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <main+0xd8>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 f968 	bl	80009c8 <initSlowTask>
  initNormalTask(normTaskEventHandle ,slowTaskEventHandle);
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <main+0xd0>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <main+0xd8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	4610      	mov	r0, r2
 8000704:	f000 f90e 	bl	8000924 <initNormalTask>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000708:	f005 fc9c 	bl	8006044 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070c:	e7fe      	b.n	800070c <main+0x98>
 800070e:	bf00      	nop
 8000710:	0800a574 	.word	0x0800a574
 8000714:	080008e9 	.word	0x080008e9
 8000718:	20006710 	.word	0x20006710
 800071c:	0800a598 	.word	0x0800a598
 8000720:	080005d9 	.word	0x080005d9
 8000724:	20008054 	.word	0x20008054
 8000728:	0800a5bc 	.word	0x0800a5bc
 800072c:	08000951 	.word	0x08000951
 8000730:	20007f90 	.word	0x20007f90
 8000734:	0800a5e0 	.word	0x0800a5e0
 8000738:	080009e9 	.word	0x080009e9
 800073c:	20007f98 	.word	0x20007f98
 8000740:	0800a604 	.word	0x0800a604
 8000744:	20007f94 	.word	0x20007f94
 8000748:	0800a614 	.word	0x0800a614
 800074c:	20008058 	.word	0x20008058

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	; 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	2230      	movs	r2, #48	; 0x30
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f008 ffcb 	bl	80096fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <SystemClock_Config+0xd0>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	4a28      	ldr	r2, [pc, #160]	; (8000820 <SystemClock_Config+0xd0>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	; 0x40
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <SystemClock_Config+0xd0>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b23      	ldr	r3, [pc, #140]	; (8000824 <SystemClock_Config+0xd4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800079c:	4a21      	ldr	r2, [pc, #132]	; (8000824 <SystemClock_Config+0xd4>)
 800079e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <SystemClock_Config+0xd4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b0:	2302      	movs	r3, #2
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b8:	2310      	movs	r3, #16
 80007ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007bc:	2302      	movs	r3, #2
 80007be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c0:	2300      	movs	r3, #0
 80007c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007c4:	2310      	movs	r3, #16
 80007c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ce:	2304      	movs	r3, #4
 80007d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007d2:	2307      	movs	r3, #7
 80007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	4618      	mov	r0, r3
 80007dc:	f004 f88e 	bl	80048fc <HAL_RCC_OscConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007e6:	f000 f899 	bl	800091c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	230f      	movs	r3, #15
 80007ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ee:	2302      	movs	r3, #2
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	2102      	movs	r1, #2
 8000806:	4618      	mov	r0, r3
 8000808:	f004 fae8 	bl	8004ddc <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000812:	f000 f883 	bl	800091c <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3750      	adds	r7, #80	; 0x50
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <MX_GPIO_Init+0xb8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a26      	ldr	r2, [pc, #152]	; (80008e0 <MX_GPIO_Init+0xb8>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <MX_GPIO_Init+0xb8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <MX_GPIO_Init+0xb8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a1f      	ldr	r2, [pc, #124]	; (80008e0 <MX_GPIO_Init+0xb8>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_GPIO_Init+0xb8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_GPIO_Init+0xb8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a18      	ldr	r2, [pc, #96]	; (80008e0 <MX_GPIO_Init+0xb8>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_GPIO_Init+0xb8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_GPIO_Init+0xb8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <MX_GPIO_Init+0xb8>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_GPIO_Init+0xb8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_TEST_1_Pin|OUT_TEST_2_Pin|OUT_TEST_3_Pin|OUT_TEST_4_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 7158 	mov.w	r1, #864	; 0x360
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <MX_GPIO_Init+0xbc>)
 80008b6:	f002 fff5 	bl	80038a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT_TEST_1_Pin OUT_TEST_2_Pin OUT_TEST_3_Pin OUT_TEST_4_Pin */
  GPIO_InitStruct.Pin = OUT_TEST_1_Pin|OUT_TEST_2_Pin|OUT_TEST_3_Pin|OUT_TEST_4_Pin;
 80008ba:	f44f 7358 	mov.w	r3, #864	; 0x360
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_GPIO_Init+0xbc>)
 80008d4:	f002 fd82 	bl	80033dc <HAL_GPIO_Init>

}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020800 	.word	0x40020800

080008e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f005 fc83 	bl	80061fc <osDelay>
 80008f6:	e7fb      	b.n	80008f0 <StartDefaultTask+0x8>

080008f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d101      	bne.n	800090e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800090a:	f002 fc65 	bl	80031d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40014400 	.word	0x40014400

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000922:	e7fe      	b.n	8000922 <Error_Handler+0x6>

08000924 <initNormalTask>:
static osEventFlagsId_t ntFlag = NULL;
static osEventFlagsId_t stFlag = NULL;


void initNormalTask(osEventFlagsId_t normTaskEventHandle, osEventFlagsId_t slowTaskEventHandle)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
	ntFlag = normTaskEventHandle;
 800092e:	4a06      	ldr	r2, [pc, #24]	; (8000948 <initNormalTask+0x24>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6013      	str	r3, [r2, #0]
	stFlag = slowTaskEventHandle;
 8000934:	4a05      	ldr	r2, [pc, #20]	; (800094c <initNormalTask+0x28>)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	6013      	str	r3, [r2, #0]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000124 	.word	0x20000124
 800094c:	20000128 	.word	0x20000128

08000950 <StartNormalTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartNormalTask */
void StartNormalTask(void *argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	uint32_t cnt;
	uint32_t blink;



    while ((ntFlag == NULL) || (stFlag == NULL))
 8000958:	e002      	b.n	8000960 <StartNormalTask+0x10>
	{
    	osDelay(1);
 800095a:	2001      	movs	r0, #1
 800095c:	f005 fc4e 	bl	80061fc <osDelay>
    while ((ntFlag == NULL) || (stFlag == NULL))
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <StartNormalTask+0x70>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d0f8      	beq.n	800095a <StartNormalTask+0xa>
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <StartNormalTask+0x74>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d0f4      	beq.n	800095a <StartNormalTask+0xa>


  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait (ntFlag,1, 0, 15);
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <StartNormalTask+0x70>)
 8000972:	6818      	ldr	r0, [r3, #0]
 8000974:	230f      	movs	r3, #15
 8000976:	2200      	movs	r2, #0
 8000978:	2101      	movs	r1, #1
 800097a:	f005 fd5b 	bl	8006434 <osEventFlagsWait>
	  osEventFlagsClear(ntFlag,1);
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <StartNormalTask+0x70>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2101      	movs	r1, #1
 8000984:	4618      	mov	r0, r3
 8000986:	f005 fd11 	bl	80063ac <osEventFlagsClear>
	  cnt++;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	3301      	adds	r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
	  blink++;
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	3301      	adds	r3, #1
 8000994:	60bb      	str	r3, [r7, #8]
	  Set_Output(OUT_TEST_3,blink & 1);
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	4619      	mov	r1, r3
 80009a2:	2002      	movs	r0, #2
 80009a4:	f7ff fdec 	bl	8000580 <Set_Output>
	  if(cnt >= 10)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2b09      	cmp	r3, #9
 80009ac:	d9e0      	bls.n	8000970 <StartNormalTask+0x20>
	  {
		  cnt = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
		  osEventFlagsSet(stFlag,1);
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <StartNormalTask+0x74>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2101      	movs	r1, #1
 80009b8:	4618      	mov	r0, r3
 80009ba:	f005 fc9f 	bl	80062fc <osEventFlagsSet>
	  osEventFlagsWait (ntFlag,1, 0, 15);
 80009be:	e7d7      	b.n	8000970 <StartNormalTask+0x20>
 80009c0:	20000124 	.word	0x20000124
 80009c4:	20000128 	.word	0x20000128

080009c8 <initSlowTask>:
/* Private variables ---------------------------------------------------------*/
static osEventFlagsId_t stFlag = NULL;


void initSlowTask(osEventFlagsId_t slowTaskEventHandle)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	stFlag = slowTaskEventHandle;
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <initSlowTask+0x1c>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	2000012c 	.word	0x2000012c

080009e8 <StartSlowTask>:

void StartSlowTask(void *argument)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

	uint32_t cnt;
	uint32_t blink;
	//TaskHandle_t stHandle = xTaskGetHandle( "slowTask" );

	while (stFlag == NULL)
 80009f0:	e002      	b.n	80009f8 <StartSlowTask+0x10>
    {
	  osDelay(1);
 80009f2:	2001      	movs	r0, #1
 80009f4:	f005 fc02 	bl	80061fc <osDelay>
	while (stFlag == NULL)
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <StartSlowTask+0x80>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0f8      	beq.n	80009f2 <StartSlowTask+0xa>
	}

	initCompass(57); //TODO
 8000a00:	2039      	movs	r0, #57	; 0x39
 8000a02:	f008 fcbb 	bl	800937c <initCompass>


  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait (stFlag,1, 0, 150);
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <StartSlowTask+0x80>)
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	2396      	movs	r3, #150	; 0x96
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2101      	movs	r1, #1
 8000a10:	f005 fd10 	bl	8006434 <osEventFlagsWait>
	  osEventFlagsClear(stFlag,1);
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <StartSlowTask+0x80>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f005 fcc6 	bl	80063ac <osEventFlagsClear>
	  if(blink & 8)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d003      	beq.n	8000a32 <StartSlowTask+0x4a>
	  {
		  BSP_LED_On(LED_GREEN);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f002 fac4 	bl	8002fb8 <BSP_LED_On>
 8000a30:	e002      	b.n	8000a38 <StartSlowTask+0x50>
	  }
	  else
	  {
		  BSP_LED_Off(LED_GREEN);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f002 fad6 	bl	8002fe4 <BSP_LED_Off>
	  }
	  //Set_Output(OUT_TEST_4,blink & 1);
	  cnt++;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	60fb      	str	r3, [r7, #12]
	  blink++;
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	3301      	adds	r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
	  if(cnt >= 10)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2b09      	cmp	r3, #9
 8000a48:	d9dd      	bls.n	8000a06 <StartSlowTask+0x1e>
	  {
		  Set_Output(OUT_TEST_4, 1);
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f7ff fd97 	bl	8000580 <Set_Output>
//		  printf("\n\n\n\rHallo\n\n\r");
		  cnt= 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
		  SetCompassData();
 8000a56:	f008 fca1 	bl	800939c <SetCompassData>
		  PositionProcess();
 8000a5a:	f008 fcad 	bl	80093b8 <PositionProcess>
//		  MX_MEMS_Process();
		  Set_Output(OUT_TEST_4, 0);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2003      	movs	r0, #3
 8000a62:	f7ff fd8d 	bl	8000580 <Set_Output>
	  osEventFlagsWait (stFlag,1, 0, 150);
 8000a66:	e7ce      	b.n	8000a06 <StartSlowTask+0x1e>
 8000a68:	2000012c 	.word	0x2000012c

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_MspInit+0x54>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	210f      	movs	r1, #15
 8000aae:	f06f 0001 	mvn.w	r0, #1
 8000ab2:	f002 fc69 	bl	8003388 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	; 0x30
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	2019      	movs	r0, #25
 8000ada:	f002 fc55 	bl	8003388 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ade:	2019      	movs	r0, #25
 8000ae0:	f002 fc6e 	bl	80033c0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <HAL_InitTick+0xa0>)
 8000aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aec:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <HAL_InitTick+0xa0>)
 8000aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af2:	6453      	str	r3, [r2, #68]	; 0x44
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <HAL_InitTick+0xa0>)
 8000af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b00:	f107 0210 	add.w	r2, r7, #16
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f004 fb58 	bl	80051c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b10:	f004 fb42 	bl	8005198 <HAL_RCC_GetPCLK2Freq>
 8000b14:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b18:	4a13      	ldr	r2, [pc, #76]	; (8000b68 <HAL_InitTick+0xa4>)
 8000b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1e:	0c9b      	lsrs	r3, r3, #18
 8000b20:	3b01      	subs	r3, #1
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <HAL_InitTick+0xac>)
 8000b28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b30:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b36:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000b44:	4809      	ldr	r0, [pc, #36]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b46:	f004 fb6d 	bl	8005224 <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d104      	bne.n	8000b5a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b52:	f004 fb9c 	bl	800528e <HAL_TIM_Base_Start_IT>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3730      	adds	r7, #48	; 0x30
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	431bde83 	.word	0x431bde83
 8000b6c:	2000907c 	.word	0x2000907c
 8000b70:	40014400 	.word	0x40014400

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ba6:	f004 fb96 	bl	80052d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000907c 	.word	0x2000907c

08000bb4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <BSP_I2C1_Init+0x58>)
 8000bc0:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <BSP_I2C1_Init+0x5c>)
 8000bc2:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <BSP_I2C1_Init+0x60>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	1c5a      	adds	r2, r3, #1
 8000bca:	4912      	ldr	r1, [pc, #72]	; (8000c14 <BSP_I2C1_Init+0x60>)
 8000bcc:	600a      	str	r2, [r1, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d117      	bne.n	8000c02 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000bd2:	480e      	ldr	r0, [pc, #56]	; (8000c0c <BSP_I2C1_Init+0x58>)
 8000bd4:	f003 fb1c 	bl	8004210 <HAL_I2C_GetState>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d111      	bne.n	8000c02 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000bde:	480b      	ldr	r0, [pc, #44]	; (8000c0c <BSP_I2C1_Init+0x58>)
 8000be0:	f000 f8e2 	bl	8000da8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d10b      	bne.n	8000c02 <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000bea:	4808      	ldr	r0, [pc, #32]	; (8000c0c <BSP_I2C1_Init+0x58>)
 8000bec:	f000 f8a8 	bl	8000d40 <MX_I2C1_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8000bf6:	f06f 0307 	mvn.w	r3, #7
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	e001      	b.n	8000c02 <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000c02:	687b      	ldr	r3, [r7, #4]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200090bc 	.word	0x200090bc
 8000c10:	40005400 	.word	0x40005400
 8000c14:	20000130 	.word	0x20000130

08000c18 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <BSP_I2C1_DeInit+0x48>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d014      	beq.n	8000c54 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <BSP_I2C1_DeInit+0x48>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <BSP_I2C1_DeInit+0x48>)
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <BSP_I2C1_DeInit+0x48>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d10b      	bne.n	8000c54 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000c3c:	4809      	ldr	r0, [pc, #36]	; (8000c64 <BSP_I2C1_DeInit+0x4c>)
 8000c3e:	f000 f8fd 	bl	8000e3c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000c42:	4808      	ldr	r0, [pc, #32]	; (8000c64 <BSP_I2C1_DeInit+0x4c>)
 8000c44:	f002 ff80 	bl	8003b48 <HAL_I2C_DeInit>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000c4e:	f06f 0307 	mvn.w	r3, #7
 8000c52:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000c54:	687b      	ldr	r3, [r7, #4]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000130 	.word	0x20000130
 8000c64:	200090bc 	.word	0x200090bc

08000c68 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af04      	add	r7, sp, #16
 8000c6e:	60ba      	str	r2, [r7, #8]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4603      	mov	r3, r0
 8000c74:	81fb      	strh	r3, [r7, #14]
 8000c76:	460b      	mov	r3, r1
 8000c78:	81bb      	strh	r3, [r7, #12]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000c82:	89ba      	ldrh	r2, [r7, #12]
 8000c84:	89f9      	ldrh	r1, [r7, #14]
 8000c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2301      	movs	r3, #1
 8000c96:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <BSP_I2C1_WriteReg+0x60>)
 8000c98:	f002 ff9a 	bl	8003bd0 <HAL_I2C_Mem_Write>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00c      	beq.n	8000cbc <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000ca2:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <BSP_I2C1_WriteReg+0x60>)
 8000ca4:	f003 fac2 	bl	800422c <HAL_I2C_GetError>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	d103      	bne.n	8000cb6 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000cae:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e002      	b.n	8000cbc <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000cb6:	f06f 0303 	mvn.w	r3, #3
 8000cba:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000cbc:	697b      	ldr	r3, [r7, #20]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200090bc 	.word	0x200090bc

08000ccc <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af04      	add	r7, sp, #16
 8000cd2:	60ba      	str	r2, [r7, #8]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	81fb      	strh	r3, [r7, #14]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	81bb      	strh	r3, [r7, #12]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000ce6:	89ba      	ldrh	r2, [r7, #12]
 8000ce8:	89f9      	ldrh	r1, [r7, #14]
 8000cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cee:	9302      	str	r3, [sp, #8]
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	480c      	ldr	r0, [pc, #48]	; (8000d2c <BSP_I2C1_ReadReg+0x60>)
 8000cfc:	f003 f862 	bl	8003dc4 <HAL_I2C_Mem_Read>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00c      	beq.n	8000d20 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000d06:	4809      	ldr	r0, [pc, #36]	; (8000d2c <BSP_I2C1_ReadReg+0x60>)
 8000d08:	f003 fa90 	bl	800422c <HAL_I2C_GetError>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	d103      	bne.n	8000d1a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000d12:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	e002      	b.n	8000d20 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000d1a:	f06f 0303 	mvn.w	r3, #3
 8000d1e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d20:	697b      	ldr	r3, [r7, #20]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200090bc 	.word	0x200090bc

08000d30 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000d34:	f002 fa64 	bl	8003200 <HAL_GetTick>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <MX_I2C1_Init+0x60>)
 8000d50:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <MX_I2C1_Init+0x64>)
 8000d56:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d6a:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f002 fda7 	bl	80038d8 <HAL_I2C_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40005400 	.word	0x40005400
 8000da4:	000186a0 	.word	0x000186a0

08000da8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <I2C1_MspInit+0x8c>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	4a1e      	ldr	r2, [pc, #120]	; (8000e34 <I2C1_MspInit+0x8c>)
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <I2C1_MspInit+0x8c>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd2:	2312      	movs	r3, #18
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000dde:	2304      	movs	r3, #4
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4813      	ldr	r0, [pc, #76]	; (8000e38 <I2C1_MspInit+0x90>)
 8000dea:	f002 faf7 	bl	80033dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df4:	2312      	movs	r3, #18
 8000df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000e00:	2304      	movs	r3, #4
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480b      	ldr	r0, [pc, #44]	; (8000e38 <I2C1_MspInit+0x90>)
 8000e0c:	f002 fae6 	bl	80033dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <I2C1_MspInit+0x8c>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <I2C1_MspInit+0x8c>)
 8000e1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <I2C1_MspInit+0x8c>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020400 	.word	0x40020400

08000e3c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <I2C1_MspDeInit+0x30>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <I2C1_MspDeInit+0x30>)
 8000e4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e4e:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000e50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e54:	4806      	ldr	r0, [pc, #24]	; (8000e70 <I2C1_MspDeInit+0x34>)
 8000e56:	f002 fc43 	bl	80036e0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000e5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5e:	4804      	ldr	r0, [pc, #16]	; (8000e70 <I2C1_MspDeInit+0x34>)
 8000e60:	f002 fc3e 	bl	80036e0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020400 	.word	0x40020400

08000e74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	e00a      	b.n	8000e9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e86:	f3af 8000 	nop.w
 8000e8a:	4601      	mov	r1, r0
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	60ba      	str	r2, [r7, #8]
 8000e92:	b2ca      	uxtb	r2, r1
 8000e94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	dbf0      	blt.n	8000e86 <_read+0x12>
	}

return len;
 8000ea4:	687b      	ldr	r3, [r7, #4]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60f8      	str	r0, [r7, #12]
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	e009      	b.n	8000ed4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	60ba      	str	r2, [r7, #8]
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f002 f903 	bl	80030d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbf1      	blt.n	8000ec0 <_write+0x12>
	}
	return len;
 8000edc:	687b      	ldr	r3, [r7, #4]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <_close>:

int _close(int file)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
	return -1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f0e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <_isatty>:

int _isatty(int file)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
	return 1;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f58:	4a14      	ldr	r2, [pc, #80]	; (8000fac <_sbrk+0x5c>)
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <_sbrk+0x60>)
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <_sbrk+0x64>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <_sbrk+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d207      	bcs.n	8000f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f80:	f008 fb86 	bl	8009690 <__errno>
 8000f84:	4602      	mov	r2, r0
 8000f86:	230c      	movs	r3, #12
 8000f88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	e009      	b.n	8000fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <_sbrk+0x64>)
 8000fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20018000 	.word	0x20018000
 8000fb0:	00000400 	.word	0x00000400
 8000fb4:	20000134 	.word	0x20000134
 8000fb8:	200091a0 	.word	0x200091a0

08000fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <SystemInit+0x28>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc6:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <SystemInit+0x28>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SystemInit+0x28>)
 8000fd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fd6:	609a      	str	r2, [r3, #8]
#endif
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001020 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fee:	e003      	b.n	8000ff8 <LoopCopyDataInit>

08000ff0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ff2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ff4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ff6:	3104      	adds	r1, #4

08000ff8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ff8:	480b      	ldr	r0, [pc, #44]	; (8001028 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ffc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ffe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001000:	d3f6      	bcc.n	8000ff0 <CopyDataInit>
  ldr  r2, =_sbss
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001004:	e002      	b.n	800100c <LoopFillZerobss>

08001006 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001006:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001008:	f842 3b04 	str.w	r3, [r2], #4

0800100c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800100e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001010:	d3f9      	bcc.n	8001006 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001012:	f7ff ffd3 	bl	8000fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001016:	f008 fb41 	bl	800969c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff fb2b 	bl	8000674 <main>
  bx  lr    
 800101e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001020:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001024:	0800a6e4 	.word	0x0800a6e4
  ldr  r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800102c:	20000104 	.word	0x20000104
  ldr  r2, =_sbss
 8001030:	20000104 	.word	0x20000104
  ldr  r3, = _ebss
 8001034:	200091a0 	.word	0x200091a0

08001038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC_IRQHandler>
	...

0800103c <LIS2DW12_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d103      	bne.n	8001058 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	e04d      	b.n	80010f4 <LIS2DW12_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	7b1a      	ldrb	r2, [r3, #12]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	695a      	ldr	r2, [r3, #20]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	699a      	ldr	r2, [r3, #24]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <LIS2DW12_RegisterBusIO+0xc4>)
 8001094:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a1a      	ldr	r2, [pc, #104]	; (8001104 <LIS2DW12_RegisterBusIO+0xc8>)
 800109a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d103      	bne.n	80010b2 <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	e020      	b.n	80010f4 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4798      	blx	r3
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <LIS2DW12_RegisterBusIO+0x8a>
    {
      ret = LIS2DW12_ERROR;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	e016      	b.n	80010f4 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d112      	bne.n	80010f4 <LIS2DW12_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10d      	bne.n	80010f4 <LIS2DW12_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 80010d8:	2305      	movs	r3, #5
 80010da:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 80010dc:	7afb      	ldrb	r3, [r7, #11]
 80010de:	461a      	mov	r2, r3
 80010e0:	2121      	movs	r1, #33	; 0x21
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 fd87 	bl	8001bf6 <LIS2DW12_Write_Reg>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <LIS2DW12_RegisterBusIO+0xb8>
          {
            ret = LIS2DW12_ERROR;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80010f4:	68fb      	ldr	r3, [r7, #12]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	08001f89 	.word	0x08001f89
 8001104:	08001fbf 	.word	0x08001fbf

08001108 <LIS2DW12_Init>:
 * @brief  Initialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	331c      	adds	r3, #28
 8001114:	2101      	movs	r1, #1
 8001116:	4618      	mov	r0, r3
 8001118:	f001 fa94 	bl	8002644 <lis2dw12_auto_increment_set>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d002      	beq.n	8001128 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	e04b      	b.n	80011c0 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	331c      	adds	r3, #28
 800112c:	2101      	movs	r1, #1
 800112e:	4618      	mov	r0, r3
 8001130:	f001 f9a8 	bl	8002484 <lis2dw12_block_data_update_set>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	e03f      	b.n	80011c0 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	331c      	adds	r3, #28
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f001 faa2 	bl	8002690 <lis2dw12_fifo_mode_set>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	e033      	b.n	80011c0 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	331c      	adds	r3, #28
 800115c:	2104      	movs	r1, #4
 800115e:	4618      	mov	r0, r3
 8001160:	f000 ff78 	bl	8002054 <lis2dw12_power_mode_set>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d002      	beq.n	8001170 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	e027      	b.n	80011c0 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a15      	ldr	r2, [pc, #84]	; (80011c8 <LIS2DW12_Init+0xc0>)
 8001174:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	331c      	adds	r3, #28
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f001 f869 	bl	8002264 <lis2dw12_data_rate_set>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
 800119c:	e010      	b.n	80011c0 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	331c      	adds	r3, #28
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 f993 	bl	80024d0 <lis2dw12_full_scale_set>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	e004      	b.n	80011c0 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	42c80000 	.word	0x42c80000

080011cc <LIS2DW12_DeInit>:
 * @brief  Deinitialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f888 	bl	80012ea <LIS2DW12_ACC_Disable>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	e010      	b.n	8001208 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <LIS2DW12_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	331c      	adds	r3, #28
 800121e:	6839      	ldr	r1, [r7, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f001 f9fe 	bl	8002622 <lis2dw12_device_id_get>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	e000      	b.n	8001234 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <LIS2DW12_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2DW12 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2200      	movs	r2, #0
 8001250:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2200      	movs	r2, #0
 8001256:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	2200      	movs	r2, #0
 800125c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2210      	movs	r2, #16
 8001268:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <LIS2DW12_GetCapabilities+0x58>)
 800127c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	44c80000 	.word	0x44c80000

08001298 <LIS2DW12_ACC_Enable>:
 * @brief  Enable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d101      	bne.n	80012ae <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e019      	b.n	80012e2 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode, pObj->acc_low_noise) != LIS2DW12_OK)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80012c0:	461a      	mov	r2, r3
 80012c2:	eeb0 0a67 	vmov.f32	s0, s15
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 fcb0 	bl	8001c2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <LIS2DW12_ACC_Enable+0x40>
  {
    return LIS2DW12_ERROR;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	e004      	b.n	80012e2 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <LIS2DW12_ACC_Disable>:
 * @brief  Disable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e010      	b.n	8001322 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	331c      	adds	r3, #28
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f000 ffac 	bl	8002264 <lis2dw12_data_rate_set>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	e004      	b.n	8001322 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <LIS2DW12_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	331c      	adds	r3, #28
 800133e:	f107 020b 	add.w	r2, r7, #11
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f001 f8e9 	bl	800251c <lis2dw12_full_scale_get>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8001350:	f04f 33ff 	mov.w	r3, #4294967295
 8001354:	e0a0      	b.n	8001498 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	331c      	adds	r3, #28
 800135a:	f107 020a 	add.w	r2, r7, #10
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fec5 	bl	80020f0 <lis2dw12_power_mode_get>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	e092      	b.n	8001498 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch(mode)
 8001372:	7abb      	ldrb	r3, [r7, #10]
 8001374:	2b1b      	cmp	r3, #27
 8001376:	f200 8087 	bhi.w	8001488 <LIS2DW12_ACC_GetSensitivity+0x15c>
 800137a:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <LIS2DW12_ACC_GetSensitivity+0x54>)
 800137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001380:	080013f1 	.word	0x080013f1
 8001384:	0800143d 	.word	0x0800143d
 8001388:	0800143d 	.word	0x0800143d
 800138c:	0800143d 	.word	0x0800143d
 8001390:	0800143d 	.word	0x0800143d
 8001394:	08001489 	.word	0x08001489
 8001398:	08001489 	.word	0x08001489
 800139c:	08001489 	.word	0x08001489
 80013a0:	080013f1 	.word	0x080013f1
 80013a4:	0800143d 	.word	0x0800143d
 80013a8:	0800143d 	.word	0x0800143d
 80013ac:	0800143d 	.word	0x0800143d
 80013b0:	08001489 	.word	0x08001489
 80013b4:	08001489 	.word	0x08001489
 80013b8:	08001489 	.word	0x08001489
 80013bc:	08001489 	.word	0x08001489
 80013c0:	080013f1 	.word	0x080013f1
 80013c4:	0800143d 	.word	0x0800143d
 80013c8:	0800143d 	.word	0x0800143d
 80013cc:	0800143d 	.word	0x0800143d
 80013d0:	0800143d 	.word	0x0800143d
 80013d4:	08001489 	.word	0x08001489
 80013d8:	08001489 	.word	0x08001489
 80013dc:	08001489 	.word	0x08001489
 80013e0:	080013f1 	.word	0x080013f1
 80013e4:	0800143d 	.word	0x0800143d
 80013e8:	0800143d 	.word	0x0800143d
 80013ec:	0800143d 	.word	0x0800143d
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 80013f0:	7afb      	ldrb	r3, [r7, #11]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d81a      	bhi.n	800142c <LIS2DW12_ACC_GetSensitivity+0x100>
 80013f6:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <LIS2DW12_ACC_GetSensitivity+0xd0>)
 80013f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fc:	0800140d 	.word	0x0800140d
 8001400:	08001415 	.word	0x08001415
 8001404:	0800141d 	.word	0x0800141d
 8001408:	08001425 	.word	0x08001425
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	4a24      	ldr	r2, [pc, #144]	; (80014a0 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8001410:	601a      	str	r2, [r3, #0]
           break;
 8001412:	e012      	b.n	800143a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	4a23      	ldr	r2, [pc, #140]	; (80014a4 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8001418:	601a      	str	r2, [r3, #0]
          break;
 800141a:	e00e      	b.n	800143a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8001420:	601a      	str	r2, [r3, #0]
           break;
 8001422:	e00a      	b.n	800143a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	4a21      	ldr	r2, [pc, #132]	; (80014ac <LIS2DW12_ACC_GetSensitivity+0x180>)
 8001428:	601a      	str	r2, [r3, #0]
          break;
 800142a:	e006      	b.n	800143a <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	4a20      	ldr	r2, [pc, #128]	; (80014b0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001430:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	60fb      	str	r3, [r7, #12]
          break;
 8001438:	bf00      	nop
      }
      break;
 800143a:	e02c      	b.n	8001496 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 800143c:	7afb      	ldrb	r3, [r7, #11]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d81a      	bhi.n	8001478 <LIS2DW12_ACC_GetSensitivity+0x14c>
 8001442:	a201      	add	r2, pc, #4	; (adr r2, 8001448 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8001444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001448:	08001459 	.word	0x08001459
 800144c:	08001461 	.word	0x08001461
 8001450:	08001469 	.word	0x08001469
 8001454:	08001471 	.word	0x08001471
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <LIS2DW12_ACC_GetSensitivity+0x188>)
 800145c:	601a      	str	r2, [r3, #0]
           break;
 800145e:	e012      	b.n	8001486 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4a15      	ldr	r2, [pc, #84]	; (80014b8 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8001464:	601a      	str	r2, [r3, #0]
          break;
 8001466:	e00e      	b.n	8001486 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <LIS2DW12_ACC_GetSensitivity+0x174>)
 800146c:	601a      	str	r2, [r3, #0]
           break;
 800146e:	e00a      	b.n	8001486 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8001474:	601a      	str	r2, [r3, #0]
          break;
 8001476:	e006      	b.n	8001486 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 800147c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	60fb      	str	r3, [r7, #12]
          break;
 8001484:	bf00      	nop
      }
      break;
 8001486:	e006      	b.n	8001496 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 800148c:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	60fb      	str	r3, [r7, #12]
      break;
 8001494:	bf00      	nop
  }

  return ret;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	3f79db23 	.word	0x3f79db23
 80014a4:	3ff9db23 	.word	0x3ff9db23
 80014a8:	4079db23 	.word	0x4079db23
 80014ac:	40f9db23 	.word	0x40f9db23
 80014b0:	bf800000 	.word	0xbf800000
 80014b4:	3e79db23 	.word	0x3e79db23
 80014b8:	3ef9db23 	.word	0x3ef9db23

080014bc <LIS2DW12_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	331c      	adds	r3, #28
 80014ce:	f107 020b 	add.w	r2, r7, #11
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 ff0b 	bl	80022f0 <lis2dw12_data_rate_get>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295
 80014e4:	e1d4      	b.n	8001890 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	331c      	adds	r3, #28
 80014ea:	f107 020a 	add.w	r2, r7, #10
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 fdfd 	bl	80020f0 <lis2dw12_power_mode_get>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d002      	beq.n	8001502 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001500:	e1c6      	b.n	8001890 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 8001502:	7afb      	ldrb	r3, [r7, #11]
 8001504:	2b32      	cmp	r3, #50	; 0x32
 8001506:	f200 81bb 	bhi.w	8001880 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 800150a:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 800150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001510:	080015dd 	.word	0x080015dd
 8001514:	080015e7 	.word	0x080015e7
 8001518:	08001685 	.word	0x08001685
 800151c:	0800168d 	.word	0x0800168d
 8001520:	08001695 	.word	0x08001695
 8001524:	0800169d 	.word	0x0800169d
 8001528:	080016a5 	.word	0x080016a5
 800152c:	080016ad 	.word	0x080016ad
 8001530:	08001749 	.word	0x08001749
 8001534:	080017e5 	.word	0x080017e5
 8001538:	08001881 	.word	0x08001881
 800153c:	08001881 	.word	0x08001881
 8001540:	08001881 	.word	0x08001881
 8001544:	08001881 	.word	0x08001881
 8001548:	08001881 	.word	0x08001881
 800154c:	08001881 	.word	0x08001881
 8001550:	08001881 	.word	0x08001881
 8001554:	08001881 	.word	0x08001881
 8001558:	080015dd 	.word	0x080015dd
 800155c:	08001881 	.word	0x08001881
 8001560:	08001881 	.word	0x08001881
 8001564:	08001881 	.word	0x08001881
 8001568:	08001881 	.word	0x08001881
 800156c:	08001881 	.word	0x08001881
 8001570:	08001881 	.word	0x08001881
 8001574:	08001881 	.word	0x08001881
 8001578:	08001881 	.word	0x08001881
 800157c:	08001881 	.word	0x08001881
 8001580:	08001881 	.word	0x08001881
 8001584:	08001881 	.word	0x08001881
 8001588:	08001881 	.word	0x08001881
 800158c:	08001881 	.word	0x08001881
 8001590:	08001881 	.word	0x08001881
 8001594:	08001881 	.word	0x08001881
 8001598:	08001881 	.word	0x08001881
 800159c:	08001881 	.word	0x08001881
 80015a0:	08001881 	.word	0x08001881
 80015a4:	08001881 	.word	0x08001881
 80015a8:	08001881 	.word	0x08001881
 80015ac:	08001881 	.word	0x08001881
 80015b0:	08001881 	.word	0x08001881
 80015b4:	08001881 	.word	0x08001881
 80015b8:	08001881 	.word	0x08001881
 80015bc:	08001881 	.word	0x08001881
 80015c0:	08001881 	.word	0x08001881
 80015c4:	08001881 	.word	0x08001881
 80015c8:	08001881 	.word	0x08001881
 80015cc:	08001881 	.word	0x08001881
 80015d0:	08001881 	.word	0x08001881
 80015d4:	08001881 	.word	0x08001881
 80015d8:	080015dd 	.word	0x080015dd
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
      break;
 80015e4:	e153      	b.n	800188e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 80015e6:	7abb      	ldrb	r3, [r7, #10]
 80015e8:	2b1b      	cmp	r3, #27
 80015ea:	d843      	bhi.n	8001674 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 80015ec:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 80015ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f2:	bf00      	nop
 80015f4:	0800166d 	.word	0x0800166d
 80015f8:	0800166d 	.word	0x0800166d
 80015fc:	0800166d 	.word	0x0800166d
 8001600:	0800166d 	.word	0x0800166d
 8001604:	08001665 	.word	0x08001665
 8001608:	08001675 	.word	0x08001675
 800160c:	08001675 	.word	0x08001675
 8001610:	08001675 	.word	0x08001675
 8001614:	0800166d 	.word	0x0800166d
 8001618:	0800166d 	.word	0x0800166d
 800161c:	0800166d 	.word	0x0800166d
 8001620:	0800166d 	.word	0x0800166d
 8001624:	08001675 	.word	0x08001675
 8001628:	08001675 	.word	0x08001675
 800162c:	08001675 	.word	0x08001675
 8001630:	08001675 	.word	0x08001675
 8001634:	0800166d 	.word	0x0800166d
 8001638:	0800166d 	.word	0x0800166d
 800163c:	0800166d 	.word	0x0800166d
 8001640:	0800166d 	.word	0x0800166d
 8001644:	08001665 	.word	0x08001665
 8001648:	08001675 	.word	0x08001675
 800164c:	08001675 	.word	0x08001675
 8001650:	08001675 	.word	0x08001675
 8001654:	0800166d 	.word	0x0800166d
 8001658:	0800166d 	.word	0x0800166d
 800165c:	0800166d 	.word	0x0800166d
 8001660:	0800166d 	.word	0x0800166d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4a8c      	ldr	r2, [pc, #560]	; (8001898 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8001668:	601a      	str	r2, [r3, #0]
           break;
 800166a:	e00a      	b.n	8001682 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	4a8b      	ldr	r2, [pc, #556]	; (800189c <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8001670:	601a      	str	r2, [r3, #0]
          break;
 8001672:	e006      	b.n	8001682 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	4a8a      	ldr	r2, [pc, #552]	; (80018a0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001678:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	60fb      	str	r3, [r7, #12]
          break;
 8001680:	bf00      	nop
      }
      break;
 8001682:	e104      	b.n	800188e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	4a84      	ldr	r2, [pc, #528]	; (8001898 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8001688:	601a      	str	r2, [r3, #0]
      break;
 800168a:	e100      	b.n	800188e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	4a85      	ldr	r2, [pc, #532]	; (80018a4 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 8001690:	601a      	str	r2, [r3, #0]
      break;
 8001692:	e0fc      	b.n	800188e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	4a84      	ldr	r2, [pc, #528]	; (80018a8 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 8001698:	601a      	str	r2, [r3, #0]
      break;
 800169a:	e0f8      	b.n	800188e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	4a83      	ldr	r2, [pc, #524]	; (80018ac <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 80016a0:	601a      	str	r2, [r3, #0]
      break;
 80016a2:	e0f4      	b.n	800188e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	4a82      	ldr	r2, [pc, #520]	; (80018b0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80016a8:	601a      	str	r2, [r3, #0]
      break;
 80016aa:	e0f0      	b.n	800188e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 80016ac:	7abb      	ldrb	r3, [r7, #10]
 80016ae:	2b1b      	cmp	r3, #27
 80016b0:	d842      	bhi.n	8001738 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 80016b2:	a201      	add	r2, pc, #4	; (adr r2, 80016b8 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 80016b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b8:	08001731 	.word	0x08001731
 80016bc:	08001731 	.word	0x08001731
 80016c0:	08001731 	.word	0x08001731
 80016c4:	08001731 	.word	0x08001731
 80016c8:	08001729 	.word	0x08001729
 80016cc:	08001739 	.word	0x08001739
 80016d0:	08001739 	.word	0x08001739
 80016d4:	08001739 	.word	0x08001739
 80016d8:	08001731 	.word	0x08001731
 80016dc:	08001731 	.word	0x08001731
 80016e0:	08001731 	.word	0x08001731
 80016e4:	08001731 	.word	0x08001731
 80016e8:	08001739 	.word	0x08001739
 80016ec:	08001739 	.word	0x08001739
 80016f0:	08001739 	.word	0x08001739
 80016f4:	08001739 	.word	0x08001739
 80016f8:	08001731 	.word	0x08001731
 80016fc:	08001731 	.word	0x08001731
 8001700:	08001731 	.word	0x08001731
 8001704:	08001731 	.word	0x08001731
 8001708:	08001729 	.word	0x08001729
 800170c:	08001739 	.word	0x08001739
 8001710:	08001739 	.word	0x08001739
 8001714:	08001739 	.word	0x08001739
 8001718:	08001731 	.word	0x08001731
 800171c:	08001731 	.word	0x08001731
 8001720:	08001731 	.word	0x08001731
 8001724:	08001731 	.word	0x08001731
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	4a62      	ldr	r2, [pc, #392]	; (80018b4 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 800172c:	601a      	str	r2, [r3, #0]
           break;
 800172e:	e00a      	b.n	8001746 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	4a5f      	ldr	r2, [pc, #380]	; (80018b0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8001734:	601a      	str	r2, [r3, #0]
          break;
 8001736:	e006      	b.n	8001746 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	4a59      	ldr	r2, [pc, #356]	; (80018a0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 800173c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	60fb      	str	r3, [r7, #12]
          break;
 8001744:	bf00      	nop
      }
      break;
 8001746:	e0a2      	b.n	800188e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8001748:	7abb      	ldrb	r3, [r7, #10]
 800174a:	2b1b      	cmp	r3, #27
 800174c:	d842      	bhi.n	80017d4 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 800174e:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8001750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001754:	080017cd 	.word	0x080017cd
 8001758:	080017cd 	.word	0x080017cd
 800175c:	080017cd 	.word	0x080017cd
 8001760:	080017cd 	.word	0x080017cd
 8001764:	080017c5 	.word	0x080017c5
 8001768:	080017d5 	.word	0x080017d5
 800176c:	080017d5 	.word	0x080017d5
 8001770:	080017d5 	.word	0x080017d5
 8001774:	080017cd 	.word	0x080017cd
 8001778:	080017cd 	.word	0x080017cd
 800177c:	080017cd 	.word	0x080017cd
 8001780:	080017cd 	.word	0x080017cd
 8001784:	080017d5 	.word	0x080017d5
 8001788:	080017d5 	.word	0x080017d5
 800178c:	080017d5 	.word	0x080017d5
 8001790:	080017d5 	.word	0x080017d5
 8001794:	080017cd 	.word	0x080017cd
 8001798:	080017cd 	.word	0x080017cd
 800179c:	080017cd 	.word	0x080017cd
 80017a0:	080017cd 	.word	0x080017cd
 80017a4:	080017c5 	.word	0x080017c5
 80017a8:	080017d5 	.word	0x080017d5
 80017ac:	080017d5 	.word	0x080017d5
 80017b0:	080017d5 	.word	0x080017d5
 80017b4:	080017cd 	.word	0x080017cd
 80017b8:	080017cd 	.word	0x080017cd
 80017bc:	080017cd 	.word	0x080017cd
 80017c0:	080017cd 	.word	0x080017cd
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	4a3c      	ldr	r2, [pc, #240]	; (80018b8 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 80017c8:	601a      	str	r2, [r3, #0]
           break;
 80017ca:	e00a      	b.n	80017e2 <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	4a38      	ldr	r2, [pc, #224]	; (80018b0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80017d0:	601a      	str	r2, [r3, #0]
          break;
 80017d2:	e006      	b.n	80017e2 <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	4a32      	ldr	r2, [pc, #200]	; (80018a0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80017d8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	60fb      	str	r3, [r7, #12]
          break;
 80017e0:	bf00      	nop
      }
      break;
 80017e2:	e054      	b.n	800188e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 80017e4:	7abb      	ldrb	r3, [r7, #10]
 80017e6:	2b1b      	cmp	r3, #27
 80017e8:	d842      	bhi.n	8001870 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 80017ea:	a201      	add	r2, pc, #4	; (adr r2, 80017f0 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 80017ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f0:	08001869 	.word	0x08001869
 80017f4:	08001869 	.word	0x08001869
 80017f8:	08001869 	.word	0x08001869
 80017fc:	08001869 	.word	0x08001869
 8001800:	08001861 	.word	0x08001861
 8001804:	08001871 	.word	0x08001871
 8001808:	08001871 	.word	0x08001871
 800180c:	08001871 	.word	0x08001871
 8001810:	08001869 	.word	0x08001869
 8001814:	08001869 	.word	0x08001869
 8001818:	08001869 	.word	0x08001869
 800181c:	08001869 	.word	0x08001869
 8001820:	08001871 	.word	0x08001871
 8001824:	08001871 	.word	0x08001871
 8001828:	08001871 	.word	0x08001871
 800182c:	08001871 	.word	0x08001871
 8001830:	08001869 	.word	0x08001869
 8001834:	08001869 	.word	0x08001869
 8001838:	08001869 	.word	0x08001869
 800183c:	08001869 	.word	0x08001869
 8001840:	08001861 	.word	0x08001861
 8001844:	08001871 	.word	0x08001871
 8001848:	08001871 	.word	0x08001871
 800184c:	08001871 	.word	0x08001871
 8001850:	08001869 	.word	0x08001869
 8001854:	08001869 	.word	0x08001869
 8001858:	08001869 	.word	0x08001869
 800185c:	08001869 	.word	0x08001869
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	4a16      	ldr	r2, [pc, #88]	; (80018bc <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8001864:	601a      	str	r2, [r3, #0]
           break;
 8001866:	e00a      	b.n	800187e <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	4a11      	ldr	r2, [pc, #68]	; (80018b0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 800186c:	601a      	str	r2, [r3, #0]
          break;
 800186e:	e006      	b.n	800187e <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001874:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	60fb      	str	r3, [r7, #12]
          break;
 800187c:	bf00      	nop
      }
      break;
 800187e:	e006      	b.n	800188e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001884:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	60fb      	str	r3, [r7, #12]
      break;
 800188c:	bf00      	nop
  }

  return ret;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	41480000 	.word	0x41480000
 800189c:	3fcccccd 	.word	0x3fcccccd
 80018a0:	bf800000 	.word	0xbf800000
 80018a4:	41c80000 	.word	0x41c80000
 80018a8:	42480000 	.word	0x42480000
 80018ac:	42c80000 	.word	0x42c80000
 80018b0:	43480000 	.word	0x43480000
 80018b4:	43c80000 	.word	0x43c80000
 80018b8:	44480000 	.word	0x44480000
 80018bc:	44c80000 	.word	0x44c80000

080018c0 <LIS2DW12_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2100      	movs	r1, #0
 80018d0:	ed97 0a00 	vldr	s0, [r7]
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f805 	bl	80018e4 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 80018da:	4603      	mov	r3, r0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80018f0:	460b      	mov	r3, r1
 80018f2:	71fb      	strb	r3, [r7, #7]
 80018f4:	4613      	mov	r3, r2
 80018f6:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d109      	bne.n	8001916 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8001902:	79ba      	ldrb	r2, [r7, #6]
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	4619      	mov	r1, r3
 8001908:	ed97 0a02 	vldr	s0, [r7, #8]
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 f98d 	bl	8001c2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001912:	4603      	mov	r3, r0
 8001914:	e008      	b.n	8001928 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8001916:	79ba      	ldrb	r2, [r7, #6]
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	4619      	mov	r1, r3
 800191c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 fa9f 	bl	8001e64 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8001926:	4603      	mov	r3, r0
  }
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <LIS2DW12_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	331c      	adds	r3, #28
 8001942:	f107 020b 	add.w	r2, r7, #11
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fde7 	bl	800251c <lis2dw12_full_scale_get>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8001954:	f04f 33ff 	mov.w	r3, #4294967295
 8001958:	e027      	b.n	80019aa <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800195a:	7afb      	ldrb	r3, [r7, #11]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d81b      	bhi.n	8001998 <LIS2DW12_ACC_GetFullScale+0x68>
 8001960:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <LIS2DW12_ACC_GetFullScale+0x38>)
 8001962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001966:	bf00      	nop
 8001968:	08001979 	.word	0x08001979
 800196c:	08001981 	.word	0x08001981
 8001970:	08001989 	.word	0x08001989
 8001974:	08001991 	.word	0x08001991
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2202      	movs	r2, #2
 800197c:	601a      	str	r2, [r3, #0]
      break;
 800197e:	e013      	b.n	80019a8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	2204      	movs	r2, #4
 8001984:	601a      	str	r2, [r3, #0]
      break;
 8001986:	e00f      	b.n	80019a8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2208      	movs	r2, #8
 800198c:	601a      	str	r2, [r3, #0]
      break;
 800198e:	e00b      	b.n	80019a8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2210      	movs	r2, #16
 8001994:	601a      	str	r2, [r3, #0]
      break;
 8001996:	e007      	b.n	80019a8 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	f04f 32ff 	mov.w	r2, #4294967295
 800199e:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
 80019a4:	60fb      	str	r3, [r7, #12]
      break;
 80019a6:	bf00      	nop
  }

  return ret;
 80019a8:	68fb      	ldr	r3, [r7, #12]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop

080019b4 <LIS2DW12_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
         : (FullScale <= 4) ? LIS2DW12_4g
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	dd0b      	ble.n	80019dc <LIS2DW12_ACC_SetFullScale+0x28>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	dd06      	ble.n	80019d8 <LIS2DW12_ACC_SetFullScale+0x24>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	dc01      	bgt.n	80019d4 <LIS2DW12_ACC_SetFullScale+0x20>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e004      	b.n	80019de <LIS2DW12_ACC_SetFullScale+0x2a>
 80019d4:	2303      	movs	r3, #3
 80019d6:	e002      	b.n	80019de <LIS2DW12_ACC_SetFullScale+0x2a>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <LIS2DW12_ACC_SetFullScale+0x2a>
 80019dc:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 80019de:	73fb      	strb	r3, [r7, #15]
         : (FullScale <= 8) ? LIS2DW12_8g
         :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	331c      	adds	r3, #28
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fd71 	bl	80024d0 <lis2dw12_full_scale_set>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
 80019f8:	e000      	b.n	80019fc <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <LIS2DW12_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	331c      	adds	r3, #28
 8001a16:	f107 020b 	add.w	r2, r7, #11
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fb67 	bl	80020f0 <lis2dw12_power_mode_get>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2c:	e089      	b.n	8001b42 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	331c      	adds	r3, #28
 8001a32:	f107 020c 	add.w	r2, r7, #12
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 fda7 	bl	800258c <lis2dw12_acceleration_raw_get>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8001a44:	f04f 33ff 	mov.w	r3, #4294967295
 8001a48:	e07b      	b.n	8001b42 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch(mode)
 8001a4a:	7afb      	ldrb	r3, [r7, #11]
 8001a4c:	2b1b      	cmp	r3, #27
 8001a4e:	d873      	bhi.n	8001b38 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8001a50:	a201      	add	r2, pc, #4	; (adr r2, 8001a58 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8001a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a56:	bf00      	nop
 8001a58:	08001ac9 	.word	0x08001ac9
 8001a5c:	08001b01 	.word	0x08001b01
 8001a60:	08001b01 	.word	0x08001b01
 8001a64:	08001b01 	.word	0x08001b01
 8001a68:	08001b01 	.word	0x08001b01
 8001a6c:	08001b39 	.word	0x08001b39
 8001a70:	08001b39 	.word	0x08001b39
 8001a74:	08001b39 	.word	0x08001b39
 8001a78:	08001ac9 	.word	0x08001ac9
 8001a7c:	08001b01 	.word	0x08001b01
 8001a80:	08001b01 	.word	0x08001b01
 8001a84:	08001b01 	.word	0x08001b01
 8001a88:	08001b39 	.word	0x08001b39
 8001a8c:	08001b39 	.word	0x08001b39
 8001a90:	08001b39 	.word	0x08001b39
 8001a94:	08001b39 	.word	0x08001b39
 8001a98:	08001ac9 	.word	0x08001ac9
 8001a9c:	08001b01 	.word	0x08001b01
 8001aa0:	08001b01 	.word	0x08001b01
 8001aa4:	08001b01 	.word	0x08001b01
 8001aa8:	08001b01 	.word	0x08001b01
 8001aac:	08001b39 	.word	0x08001b39
 8001ab0:	08001b39 	.word	0x08001b39
 8001ab4:	08001b39 	.word	0x08001b39
 8001ab8:	08001ac9 	.word	0x08001ac9
 8001abc:	08001b01 	.word	0x08001b01
 8001ac0:	08001b01 	.word	0x08001b01
 8001ac4:	08001b01 	.word	0x08001b01
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8001ac8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	da00      	bge.n	8001ad2 <LIS2DW12_ACC_GetAxesRaw+0xce>
 8001ad0:	330f      	adds	r3, #15
 8001ad2:	111b      	asrs	r3, r3, #4
 8001ad4:	b21a      	sxth	r2, r3
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8001ada:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	da00      	bge.n	8001ae4 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8001ae2:	330f      	adds	r3, #15
 8001ae4:	111b      	asrs	r3, r3, #4
 8001ae6:	b21a      	sxth	r2, r3
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8001aec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	da00      	bge.n	8001af6 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8001af4:	330f      	adds	r3, #15
 8001af6:	111b      	asrs	r3, r3, #4
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	809a      	strh	r2, [r3, #4]
      break;
 8001afe:	e01f      	b.n	8001b40 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8001b00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	da00      	bge.n	8001b0a <LIS2DW12_ACC_GetAxesRaw+0x106>
 8001b08:	3303      	adds	r3, #3
 8001b0a:	109b      	asrs	r3, r3, #2
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8001b12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	da00      	bge.n	8001b1c <LIS2DW12_ACC_GetAxesRaw+0x118>
 8001b1a:	3303      	adds	r3, #3
 8001b1c:	109b      	asrs	r3, r3, #2
 8001b1e:	b21a      	sxth	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8001b24:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	da00      	bge.n	8001b2e <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8001b2c:	3303      	adds	r3, #3
 8001b2e:	109b      	asrs	r3, r3, #2
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	809a      	strh	r2, [r3, #4]
      break;
 8001b36:	e003      	b.n	8001b40 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3c:	617b      	str	r3, [r7, #20]
      break;
 8001b3e:	bf00      	nop
  }

  return ret;
 8001b40:	697b      	ldr	r3, [r7, #20]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop

08001b4c <LIS2DW12_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ff4e 	bl	8001a04 <LIS2DW12_ACC_GetAxesRaw>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e03c      	b.n	8001bee <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fbd6 	bl	800132c <LIS2DW12_ACC_GetSensitivity>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	e030      	b.n	8001bee <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8001b8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b90:	ee07 3a90 	vmov	s15, r3
 8001b94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b98:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba4:	ee17 2a90 	vmov	r2, s15
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001bac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bb0:	ee07 3a90 	vmov	s15, r3
 8001bb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc4:	ee17 2a90 	vmov	r2, s15
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8001bcc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bd0:	ee07 3a90 	vmov	s15, r3
 8001bd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be4:	ee17 2a90 	vmov	r2, s15
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <LIS2DW12_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	70fb      	strb	r3, [r7, #3]
 8001c02:	4613      	mov	r3, r2
 8001c04:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f103 001c 	add.w	r0, r3, #28
 8001c0c:	1cba      	adds	r2, r7, #2
 8001c0e:	78f9      	ldrb	r1, [r7, #3]
 8001c10:	2301      	movs	r3, #1
 8001c12:	f000 fa07 	bl	8002024 <lis2dw12_write_reg>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c20:	e000      	b.n	8001c24 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	71fb      	strb	r3, [r7, #7]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d80b      	bhi.n	8001c60 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8001c48:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8001c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4e:	bf00      	nop
 8001c50:	08001c8d 	.word	0x08001c8d
 8001c54:	08001cb9 	.word	0x08001cb9
 8001c58:	08001ce5 	.word	0x08001ce5
 8001c5c:	08001d11 	.word	0x08001d11
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8001c60:	79bb      	ldrb	r3, [r7, #6]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d002      	beq.n	8001c6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8001c66:	2304      	movs	r3, #4
 8001c68:	75fb      	strb	r3, [r7, #23]
          break;
 8001c6a:	e002      	b.n	8001c72 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001c6c:	2314      	movs	r3, #20
 8001c6e:	75fb      	strb	r3, [r7, #23]
          break;
 8001c70:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if(Odr < 12.5f)
 8001c72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c76:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001c7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c82:	d400      	bmi.n	8001c86 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8001c84:	e05a      	b.n	8001d3c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8001c86:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8001c88:	60bb      	str	r3, [r7, #8]
      break;
 8001c8a:	e057      	b.n	8001d3c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8001c8c:	79bb      	ldrb	r3, [r7, #6]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d002      	beq.n	8001c98 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8001c92:	2303      	movs	r3, #3
 8001c94:	75fb      	strb	r3, [r7, #23]
          break;
 8001c96:	e002      	b.n	8001c9e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8001c98:	2313      	movs	r3, #19
 8001c9a:	75fb      	strb	r3, [r7, #23]
          break;
 8001c9c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001c9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ca2:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001e48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001ca6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	dc00      	bgt.n	8001cb2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8001cb0:	e044      	b.n	8001d3c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001cb2:	4b66      	ldr	r3, [pc, #408]	; (8001e4c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001cb4:	60bb      	str	r3, [r7, #8]
      break;
 8001cb6:	e041      	b.n	8001d3c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8001cb8:	79bb      	ldrb	r3, [r7, #6]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d002      	beq.n	8001cc4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	75fb      	strb	r3, [r7, #23]
          break;
 8001cc2:	e002      	b.n	8001cca <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8001cc4:	2312      	movs	r3, #18
 8001cc6:	75fb      	strb	r3, [r7, #23]
          break;
 8001cc8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001cca:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cce:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001e48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001cd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cda:	dc00      	bgt.n	8001cde <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8001cdc:	e02e      	b.n	8001d3c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001cde:	4b5b      	ldr	r3, [pc, #364]	; (8001e4c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001ce0:	60bb      	str	r3, [r7, #8]
      break;
 8001ce2:	e02b      	b.n	8001d3c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8001ce4:	79bb      	ldrb	r3, [r7, #6]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d002      	beq.n	8001cf0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8001cea:	2301      	movs	r3, #1
 8001cec:	75fb      	strb	r3, [r7, #23]
          break;
 8001cee:	e002      	b.n	8001cf6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8001cf0:	2311      	movs	r3, #17
 8001cf2:	75fb      	strb	r3, [r7, #23]
          break;
 8001cf4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001cf6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cfa:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001e48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d06:	dc00      	bgt.n	8001d0a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8001d08:	e018      	b.n	8001d3c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001d0a:	4b50      	ldr	r3, [pc, #320]	; (8001e4c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001d0c:	60bb      	str	r3, [r7, #8]
      break;
 8001d0e:	e015      	b.n	8001d3c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8001d10:	79bb      	ldrb	r3, [r7, #6]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d002      	beq.n	8001d1c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8001d16:	2300      	movs	r3, #0
 8001d18:	75fb      	strb	r3, [r7, #23]
          break;
 8001d1a:	e002      	b.n	8001d22 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	75fb      	strb	r3, [r7, #23]
          break;
 8001d20:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001d22:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d26:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001e48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d32:	dc00      	bgt.n	8001d36 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8001d34:	e001      	b.n	8001d3a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8001d36:	4b45      	ldr	r3, [pc, #276]	; (8001e4c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001d38:	60bb      	str	r3, [r7, #8]
      break;
 8001d3a:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8001d3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d40:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001e50 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8001d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4c:	d801      	bhi.n	8001d52 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e04d      	b.n	8001dee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d52:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d56:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	d801      	bhi.n	8001d68 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e042      	b.n	8001dee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d68:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d6c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d78:	d801      	bhi.n	8001d7e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e037      	b.n	8001dee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d82:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001e54 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8001d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8e:	d801      	bhi.n	8001d94 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8001d90:	2304      	movs	r3, #4
 8001d92:	e02c      	b.n	8001dee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d94:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d98:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001e58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8001d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da4:	d801      	bhi.n	8001daa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8001da6:	2305      	movs	r3, #5
 8001da8:	e021      	b.n	8001dee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001daa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dae:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001e48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	d801      	bhi.n	8001dc0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8001dbc:	2306      	movs	r3, #6
 8001dbe:	e016      	b.n	8001dee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001dc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dc4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001e5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8001dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd0:	d801      	bhi.n	8001dd6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8001dd2:	2307      	movs	r3, #7
 8001dd4:	e00b      	b.n	8001dee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001dd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dda:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001e60 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8001dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de6:	d801      	bhi.n	8001dec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8001de8:	2308      	movs	r3, #8
 8001dea:	e000      	b.n	8001dee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001dec:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8001dee:	75bb      	strb	r3, [r7, #22]
          : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
          : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
          :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	331c      	adds	r3, #28
 8001df4:	7dba      	ldrb	r2, [r7, #22]
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fa33 	bl	8002264 <lis2dw12_data_rate_set>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8001e04:	f04f 33ff 	mov.w	r3, #4294967295
 8001e08:	e018      	b.n	8001e3c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	331c      	adds	r3, #28
 8001e0e:	7dfa      	ldrb	r2, [r7, #23]
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f91e 	bl	8002054 <lis2dw12_power_mode_set>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	e00b      	b.n	8001e3c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	79fa      	ldrb	r2, [r7, #7]
 8001e2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	79ba      	ldrb	r2, [r7, #6]
 8001e36:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	41480000 	.word	0x41480000
 8001e48:	43480000 	.word	0x43480000
 8001e4c:	43480000 	.word	0x43480000
 8001e50:	3fcccccd 	.word	0x3fcccccd
 8001e54:	42480000 	.word	0x42480000
 8001e58:	42c80000 	.word	0x42c80000
 8001e5c:	43c80000 	.word	0x43c80000
 8001e60:	44480000 	.word	0x44480000

08001e64 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e70:	460b      	mov	r3, r1
 8001e72:	71fb      	strb	r3, [r7, #7]
 8001e74:	4613      	mov	r3, r2
 8001e76:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	79fa      	ldrb	r2, [r7, #7]
 8001e7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	79ba      	ldrb	r2, [r7, #6]
 8001e84:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                : (Odr <=   12.5f) ?   12.5f
 8001e88:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e8c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001f4c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e98:	d801      	bhi.n	8001e9e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8001e9c:	e04d      	b.n	8001f3a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   25.0f) ?   25.0f
 8001e9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ea2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eae:	d801      	bhi.n	8001eb4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8001eb0:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8001eb2:	e042      	b.n	8001f3a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   50.0f) ?   50.0f
 8001eb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eb8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec4:	d801      	bhi.n	8001eca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8001ec8:	e037      	b.n	8001f3a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  100.0f) ?  100.0f
 8001eca:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ece:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001f5c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eda:	d801      	bhi.n	8001ee0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8001edc:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8001ede:	e02c      	b.n	8001f3a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  200.0f) ?  200.0f
 8001ee0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ee4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001f64 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef0:	d801      	bhi.n	8001ef6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8001ef4:	e021      	b.n	8001f3a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  400.0f) ?  400.0f
 8001ef6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001efa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001f6c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8001efe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f06:	d801      	bhi.n	8001f0c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8001f0a:	e016      	b.n	8001f3a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  800.0f) ?  800.0f
 8001f0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f10:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001f74 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8001f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	d801      	bhi.n	8001f22 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8001f1e:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8001f20:	e00b      	b.n	8001f3a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                :                    1600.0f;
 8001f22:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f26:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001f7c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8001f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f32:	d801      	bhi.n	8001f38 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8001f36:	e000      	b.n	8001f3a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	3fcccccd 	.word	0x3fcccccd
 8001f50:	3fcccccd 	.word	0x3fcccccd
 8001f54:	41480000 	.word	0x41480000
 8001f58:	41c80000 	.word	0x41c80000
 8001f5c:	42480000 	.word	0x42480000
 8001f60:	42480000 	.word	0x42480000
 8001f64:	42c80000 	.word	0x42c80000
 8001f68:	42c80000 	.word	0x42c80000
 8001f6c:	43480000 	.word	0x43480000
 8001f70:	43480000 	.word	0x43480000
 8001f74:	43c80000 	.word	0x43c80000
 8001f78:	43c80000 	.word	0x43c80000
 8001f7c:	44480000 	.word	0x44480000
 8001f80:	44480000 	.word	0x44480000
 8001f84:	44c80000 	.word	0x44c80000

08001f88 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	461a      	mov	r2, r3
 8001f94:	460b      	mov	r3, r1
 8001f96:	72fb      	strb	r3, [r7, #11]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	695c      	ldr	r4, [r3, #20]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	7b1b      	ldrb	r3, [r3, #12]
 8001fa8:	b298      	uxth	r0, r3
 8001faa:	7afb      	ldrb	r3, [r7, #11]
 8001fac:	b299      	uxth	r1, r3
 8001fae:	893b      	ldrh	r3, [r7, #8]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	47a0      	blx	r4
 8001fb4:	4603      	mov	r3, r0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd90      	pop	{r4, r7, pc}

08001fbe <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001fbe:	b590      	push	{r4, r7, lr}
 8001fc0:	b087      	sub	sp, #28
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	460b      	mov	r3, r1
 8001fcc:	72fb      	strb	r3, [r7, #11]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	691c      	ldr	r4, [r3, #16]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	7b1b      	ldrb	r3, [r3, #12]
 8001fde:	b298      	uxth	r0, r3
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
 8001fe2:	b299      	uxth	r1, r3
 8001fe4:	893b      	ldrh	r3, [r7, #8]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	47a0      	blx	r4
 8001fea:	4603      	mov	r3, r0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	371c      	adds	r7, #28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd90      	pop	{r4, r7, pc}

08001ff4 <lis2dw12_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8001ff4:	b590      	push	{r4, r7, lr}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	461a      	mov	r2, r3
 8002000:	460b      	mov	r3, r1
 8002002:	72fb      	strb	r3, [r7, #11]
 8002004:	4613      	mov	r3, r2
 8002006:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685c      	ldr	r4, [r3, #4]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6898      	ldr	r0, [r3, #8]
 8002010:	893b      	ldrh	r3, [r7, #8]
 8002012:	7af9      	ldrb	r1, [r7, #11]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	47a0      	blx	r4
 8002018:	6178      	str	r0, [r7, #20]
  return ret;
 800201a:	697b      	ldr	r3, [r7, #20]
}
 800201c:	4618      	mov	r0, r3
 800201e:	371c      	adds	r7, #28
 8002020:	46bd      	mov	sp, r7
 8002022:	bd90      	pop	{r4, r7, pc}

08002024 <lis2dw12_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	461a      	mov	r2, r3
 8002030:	460b      	mov	r3, r1
 8002032:	72fb      	strb	r3, [r7, #11]
 8002034:	4613      	mov	r3, r2
 8002036:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681c      	ldr	r4, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6898      	ldr	r0, [r3, #8]
 8002040:	893b      	ldrh	r3, [r7, #8]
 8002042:	7af9      	ldrb	r1, [r7, #11]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	47a0      	blx	r4
 8002048:	6178      	str	r0, [r7, #20]
  return ret;
 800204a:	697b      	ldr	r3, [r7, #20]
}
 800204c:	4618      	mov	r0, r3
 800204e:	371c      	adds	r7, #28
 8002050:	46bd      	mov	sp, r7
 8002052:	bd90      	pop	{r4, r7, pc}

08002054 <lis2dw12_power_mode_set>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx, lis2dw12_mode_t val)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002060:	f107 0210 	add.w	r2, r7, #16
 8002064:	2301      	movs	r3, #1
 8002066:	2120      	movs	r1, #32
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ffc3 	bl	8001ff4 <lis2dw12_read_reg>
 800206e:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d118      	bne.n	80020a8 <lis2dw12_power_mode_set+0x54>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	b2da      	uxtb	r2, r3
 8002080:	7c3b      	ldrb	r3, [r7, #16]
 8002082:	f362 0383 	bfi	r3, r2, #2, #2
 8002086:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	b2da      	uxtb	r2, r3
 8002090:	7c3b      	ldrb	r3, [r7, #16]
 8002092:	f362 0301 	bfi	r3, r2, #0, #2
 8002096:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002098:	f107 0210 	add.w	r2, r7, #16
 800209c:	2301      	movs	r3, #1
 800209e:	2120      	movs	r1, #32
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ffbf 	bl	8002024 <lis2dw12_write_reg>
 80020a6:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d107      	bne.n	80020be <lis2dw12_power_mode_set+0x6a>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 80020ae:	f107 020c 	add.w	r2, r7, #12
 80020b2:	2301      	movs	r3, #1
 80020b4:	2125      	movs	r1, #37	; 0x25
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ff9c 	bl	8001ff4 <lis2dw12_read_reg>
 80020bc:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d110      	bne.n	80020e6 <lis2dw12_power_mode_set+0x92>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	7b3b      	ldrb	r3, [r7, #12]
 80020d0:	f362 0382 	bfi	r3, r2, #2, #1
 80020d4:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 80020d6:	f107 020c 	add.w	r2, r7, #12
 80020da:	2301      	movs	r3, #1
 80020dc:	2125      	movs	r1, #37	; 0x25
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ffa0 	bl	8002024 <lis2dw12_write_reg>
 80020e4:	6178      	str	r0, [r7, #20]
  }
  return ret;
 80020e6:	697b      	ldr	r3, [r7, #20]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <lis2dw12_power_mode_get>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx, lis2dw12_mode_t *val)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 80020fa:	f107 0210 	add.w	r2, r7, #16
 80020fe:	2301      	movs	r3, #1
 8002100:	2120      	movs	r1, #32
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ff76 	bl	8001ff4 <lis2dw12_read_reg>
 8002108:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f040 80a3 	bne.w	8002258 <lis2dw12_power_mode_get+0x168>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8002112:	f107 020c 	add.w	r2, r7, #12
 8002116:	2301      	movs	r3, #1
 8002118:	2125      	movs	r1, #37	; 0x25
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ff6a 	bl	8001ff4 <lis2dw12_read_reg>
 8002120:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002122:	7b3b      	ldrb	r3, [r7, #12]
 8002124:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	011a      	lsls	r2, r3, #4
 800212c:	7c3b      	ldrb	r3, [r7, #16]
 800212e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002132:	b2db      	uxtb	r3, r3
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
            ctrl1.lp_mode)) {
 8002138:	7c3a      	ldrb	r2, [r7, #16]
 800213a:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800213e:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002140:	4413      	add	r3, r2
 8002142:	2b1b      	cmp	r3, #27
 8002144:	f200 8084 	bhi.w	8002250 <lis2dw12_power_mode_get+0x160>
 8002148:	a201      	add	r2, pc, #4	; (adr r2, 8002150 <lis2dw12_power_mode_get+0x60>)
 800214a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214e:	bf00      	nop
 8002150:	080021e1 	.word	0x080021e1
 8002154:	080021d9 	.word	0x080021d9
 8002158:	080021d1 	.word	0x080021d1
 800215c:	080021c9 	.word	0x080021c9
 8002160:	080021c1 	.word	0x080021c1
 8002164:	08002251 	.word	0x08002251
 8002168:	08002251 	.word	0x08002251
 800216c:	08002251 	.word	0x08002251
 8002170:	08002201 	.word	0x08002201
 8002174:	080021f9 	.word	0x080021f9
 8002178:	080021f1 	.word	0x080021f1
 800217c:	080021e9 	.word	0x080021e9
 8002180:	08002251 	.word	0x08002251
 8002184:	08002251 	.word	0x08002251
 8002188:	08002251 	.word	0x08002251
 800218c:	08002251 	.word	0x08002251
 8002190:	08002229 	.word	0x08002229
 8002194:	08002221 	.word	0x08002221
 8002198:	08002219 	.word	0x08002219
 800219c:	08002211 	.word	0x08002211
 80021a0:	08002209 	.word	0x08002209
 80021a4:	08002251 	.word	0x08002251
 80021a8:	08002251 	.word	0x08002251
 80021ac:	08002251 	.word	0x08002251
 80021b0:	08002249 	.word	0x08002249
 80021b4:	08002241 	.word	0x08002241
 80021b8:	08002239 	.word	0x08002239
 80021bc:	08002231 	.word	0x08002231
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2204      	movs	r2, #4
 80021c4:	701a      	strb	r2, [r3, #0]
        break;
 80021c6:	e048      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2203      	movs	r2, #3
 80021cc:	701a      	strb	r2, [r3, #0]
        break;
 80021ce:	e044      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	2202      	movs	r2, #2
 80021d4:	701a      	strb	r2, [r3, #0]
        break;
 80021d6:	e040      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
        break;
 80021de:	e03c      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
        break;
 80021e6:	e038      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	220b      	movs	r2, #11
 80021ec:	701a      	strb	r2, [r3, #0]
        break;
 80021ee:	e034      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	220a      	movs	r2, #10
 80021f4:	701a      	strb	r2, [r3, #0]
        break;
 80021f6:	e030      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2209      	movs	r2, #9
 80021fc:	701a      	strb	r2, [r3, #0]
        break;
 80021fe:	e02c      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	2208      	movs	r2, #8
 8002204:	701a      	strb	r2, [r3, #0]
        break;
 8002206:	e028      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2214      	movs	r2, #20
 800220c:	701a      	strb	r2, [r3, #0]
        break;
 800220e:	e024      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2213      	movs	r2, #19
 8002214:	701a      	strb	r2, [r3, #0]
        break;
 8002216:	e020      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2212      	movs	r2, #18
 800221c:	701a      	strb	r2, [r3, #0]
        break;
 800221e:	e01c      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2211      	movs	r2, #17
 8002224:	701a      	strb	r2, [r3, #0]
        break;
 8002226:	e018      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2210      	movs	r2, #16
 800222c:	701a      	strb	r2, [r3, #0]
        break;
 800222e:	e014      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	221b      	movs	r2, #27
 8002234:	701a      	strb	r2, [r3, #0]
        break;
 8002236:	e010      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	221a      	movs	r2, #26
 800223c:	701a      	strb	r2, [r3, #0]
        break;
 800223e:	e00c      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2219      	movs	r2, #25
 8002244:	701a      	strb	r2, [r3, #0]
        break;
 8002246:	e008      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	2218      	movs	r2, #24
 800224c:	701a      	strb	r2, [r3, #0]
        break;
 800224e:	e004      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2204      	movs	r2, #4
 8002254:	701a      	strb	r2, [r3, #0]
        break;
 8002256:	e000      	b.n	800225a <lis2dw12_power_mode_get+0x16a>
    }
  }
 8002258:	bf00      	nop
  return ret;
 800225a:	697b      	ldr	r3, [r7, #20]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002270:	f107 0210 	add.w	r2, r7, #16
 8002274:	2301      	movs	r3, #1
 8002276:	2120      	movs	r1, #32
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff febb 	bl	8001ff4 <lis2dw12_read_reg>
 800227e:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10f      	bne.n	80022a6 <lis2dw12_data_rate_set+0x42>
    ctrl1.odr = (uint8_t) val;
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	b2da      	uxtb	r2, r3
 800228e:	7c3b      	ldrb	r3, [r7, #16]
 8002290:	f362 1307 	bfi	r3, r2, #4, #4
 8002294:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002296:	f107 0210 	add.w	r2, r7, #16
 800229a:	2301      	movs	r3, #1
 800229c:	2120      	movs	r1, #32
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff fec0 	bl	8002024 <lis2dw12_write_reg>
 80022a4:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d107      	bne.n	80022bc <lis2dw12_data_rate_set+0x58>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 80022ac:	f107 020c 	add.w	r2, r7, #12
 80022b0:	2301      	movs	r3, #1
 80022b2:	2122      	movs	r1, #34	; 0x22
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff fe9d 	bl	8001ff4 <lis2dw12_read_reg>
 80022ba:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d110      	bne.n	80022e4 <lis2dw12_data_rate_set+0x80>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	7b3b      	ldrb	r3, [r7, #12]
 80022ce:	f362 0301 	bfi	r3, r2, #0, #2
 80022d2:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 80022d4:	f107 020c 	add.w	r2, r7, #12
 80022d8:	2301      	movs	r3, #1
 80022da:	2122      	movs	r1, #34	; 0x22
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff fea1 	bl	8002024 <lis2dw12_write_reg>
 80022e2:	6178      	str	r0, [r7, #20]
  }
  return ret;
 80022e4:	697b      	ldr	r3, [r7, #20]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 80022fa:	f107 0210 	add.w	r2, r7, #16
 80022fe:	2301      	movs	r3, #1
 8002300:	2120      	movs	r1, #32
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff fe76 	bl	8001ff4 <lis2dw12_read_reg>
 8002308:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2b00      	cmp	r3, #0
 800230e:	f040 80b3 	bne.w	8002478 <lis2dw12_data_rate_get+0x188>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8002312:	f107 020c 	add.w	r2, r7, #12
 8002316:	2301      	movs	r3, #1
 8002318:	2122      	movs	r1, #34	; 0x22
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff fe6a 	bl	8001ff4 <lis2dw12_read_reg>
 8002320:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr) {
 8002322:	7b3b      	ldrb	r3, [r7, #12]
 8002324:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002328:	b2db      	uxtb	r3, r3
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	7c3a      	ldrb	r2, [r7, #16]
 800232e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	4413      	add	r3, r2
 8002336:	2b32      	cmp	r3, #50	; 0x32
 8002338:	f200 809a 	bhi.w	8002470 <lis2dw12_data_rate_get+0x180>
 800233c:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <lis2dw12_data_rate_get+0x54>)
 800233e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002342:	bf00      	nop
 8002344:	08002411 	.word	0x08002411
 8002348:	08002419 	.word	0x08002419
 800234c:	08002421 	.word	0x08002421
 8002350:	08002429 	.word	0x08002429
 8002354:	08002431 	.word	0x08002431
 8002358:	08002439 	.word	0x08002439
 800235c:	08002441 	.word	0x08002441
 8002360:	08002449 	.word	0x08002449
 8002364:	08002451 	.word	0x08002451
 8002368:	08002459 	.word	0x08002459
 800236c:	08002471 	.word	0x08002471
 8002370:	08002471 	.word	0x08002471
 8002374:	08002471 	.word	0x08002471
 8002378:	08002471 	.word	0x08002471
 800237c:	08002471 	.word	0x08002471
 8002380:	08002471 	.word	0x08002471
 8002384:	08002471 	.word	0x08002471
 8002388:	08002471 	.word	0x08002471
 800238c:	08002469 	.word	0x08002469
 8002390:	08002471 	.word	0x08002471
 8002394:	08002471 	.word	0x08002471
 8002398:	08002471 	.word	0x08002471
 800239c:	08002471 	.word	0x08002471
 80023a0:	08002471 	.word	0x08002471
 80023a4:	08002471 	.word	0x08002471
 80023a8:	08002471 	.word	0x08002471
 80023ac:	08002471 	.word	0x08002471
 80023b0:	08002471 	.word	0x08002471
 80023b4:	08002471 	.word	0x08002471
 80023b8:	08002471 	.word	0x08002471
 80023bc:	08002471 	.word	0x08002471
 80023c0:	08002471 	.word	0x08002471
 80023c4:	08002471 	.word	0x08002471
 80023c8:	08002471 	.word	0x08002471
 80023cc:	08002471 	.word	0x08002471
 80023d0:	08002471 	.word	0x08002471
 80023d4:	08002471 	.word	0x08002471
 80023d8:	08002471 	.word	0x08002471
 80023dc:	08002471 	.word	0x08002471
 80023e0:	08002471 	.word	0x08002471
 80023e4:	08002471 	.word	0x08002471
 80023e8:	08002471 	.word	0x08002471
 80023ec:	08002471 	.word	0x08002471
 80023f0:	08002471 	.word	0x08002471
 80023f4:	08002471 	.word	0x08002471
 80023f8:	08002471 	.word	0x08002471
 80023fc:	08002471 	.word	0x08002471
 8002400:	08002471 	.word	0x08002471
 8002404:	08002471 	.word	0x08002471
 8002408:	08002471 	.word	0x08002471
 800240c:	08002461 	.word	0x08002461
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
        break;
 8002416:	e030      	b.n	800247a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	2201      	movs	r2, #1
 800241c:	701a      	strb	r2, [r3, #0]
        break;
 800241e:	e02c      	b.n	800247a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2202      	movs	r2, #2
 8002424:	701a      	strb	r2, [r3, #0]
        break;
 8002426:	e028      	b.n	800247a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2203      	movs	r2, #3
 800242c:	701a      	strb	r2, [r3, #0]
        break;
 800242e:	e024      	b.n	800247a <lis2dw12_data_rate_get+0x18a>
       case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	2204      	movs	r2, #4
 8002434:	701a      	strb	r2, [r3, #0]
        break;
 8002436:	e020      	b.n	800247a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2205      	movs	r2, #5
 800243c:	701a      	strb	r2, [r3, #0]
        break;
 800243e:	e01c      	b.n	800247a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	2206      	movs	r2, #6
 8002444:	701a      	strb	r2, [r3, #0]
        break;
 8002446:	e018      	b.n	800247a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	2207      	movs	r2, #7
 800244c:	701a      	strb	r2, [r3, #0]
        break;
 800244e:	e014      	b.n	800247a <lis2dw12_data_rate_get+0x18a>
       case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2208      	movs	r2, #8
 8002454:	701a      	strb	r2, [r3, #0]
        break;
 8002456:	e010      	b.n	800247a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2209      	movs	r2, #9
 800245c:	701a      	strb	r2, [r3, #0]
        break;
 800245e:	e00c      	b.n	800247a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2232      	movs	r2, #50	; 0x32
 8002464:	701a      	strb	r2, [r3, #0]
        break;
 8002466:	e008      	b.n	800247a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2212      	movs	r2, #18
 800246c:	701a      	strb	r2, [r3, #0]
        break;
 800246e:	e004      	b.n	800247a <lis2dw12_data_rate_get+0x18a>
      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
        break;
 8002476:	e000      	b.n	800247a <lis2dw12_data_rate_get+0x18a>
    }
  }
 8002478:	bf00      	nop
  return ret;
 800247a:	697b      	ldr	r3, [r7, #20]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8002490:	f107 0208 	add.w	r2, r7, #8
 8002494:	2301      	movs	r3, #1
 8002496:	2121      	movs	r1, #33	; 0x21
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff fdab 	bl	8001ff4 <lis2dw12_read_reg>
 800249e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10f      	bne.n	80024c6 <lis2dw12_block_data_update_set+0x42>
    reg.bdu = val;
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	7a3b      	ldrb	r3, [r7, #8]
 80024b0:	f362 03c3 	bfi	r3, r2, #3, #1
 80024b4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 80024b6:	f107 0208 	add.w	r2, r7, #8
 80024ba:	2301      	movs	r3, #1
 80024bc:	2121      	movs	r1, #33	; 0x21
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff fdb0 	bl	8002024 <lis2dw12_write_reg>
 80024c4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80024c6:	68fb      	ldr	r3, [r7, #12]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 80024dc:	f107 0208 	add.w	r2, r7, #8
 80024e0:	2301      	movs	r3, #1
 80024e2:	2125      	movs	r1, #37	; 0x25
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff fd85 	bl	8001ff4 <lis2dw12_read_reg>
 80024ea:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10f      	bne.n	8002512 <lis2dw12_full_scale_set+0x42>
    reg.fs = (uint8_t) val;
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	7a3b      	ldrb	r3, [r7, #8]
 80024fc:	f362 1305 	bfi	r3, r2, #4, #2
 8002500:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8002502:	f107 0208 	add.w	r2, r7, #8
 8002506:	2301      	movs	r3, #1
 8002508:	2125      	movs	r1, #37	; 0x25
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff fd8a 	bl	8002024 <lis2dw12_write_reg>
 8002510:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002512:	68fb      	ldr	r3, [r7, #12]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8002526:	f107 0208 	add.w	r2, r7, #8
 800252a:	2301      	movs	r3, #1
 800252c:	2125      	movs	r1, #37	; 0x25
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff fd60 	bl	8001ff4 <lis2dw12_read_reg>
 8002534:	60f8      	str	r0, [r7, #12]

  switch (reg.fs) {
 8002536:	7a3b      	ldrb	r3, [r7, #8]
 8002538:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b03      	cmp	r3, #3
 8002540:	d81a      	bhi.n	8002578 <lis2dw12_full_scale_get+0x5c>
 8002542:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <lis2dw12_full_scale_get+0x2c>)
 8002544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002548:	08002559 	.word	0x08002559
 800254c:	08002561 	.word	0x08002561
 8002550:	08002569 	.word	0x08002569
 8002554:	08002571 	.word	0x08002571
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
      break;
 800255e:	e00f      	b.n	8002580 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
      break;
 8002566:	e00b      	b.n	8002580 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2202      	movs	r2, #2
 800256c:	701a      	strb	r2, [r3, #0]
      break;
 800256e:	e007      	b.n	8002580 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2203      	movs	r2, #3
 8002574:	701a      	strb	r2, [r3, #0]
      break;
 8002576:	e003      	b.n	8002580 <lis2dw12_full_scale_get+0x64>
    default:
      *val = LIS2DW12_2g;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
      break;
 800257e:	bf00      	nop
  }
  return ret;
 8002580:	68fb      	ldr	r3, [r7, #12]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop

0800258c <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8002596:	f107 020c 	add.w	r2, r7, #12
 800259a:	2306      	movs	r3, #6
 800259c:	2128      	movs	r1, #40	; 0x28
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fd28 	bl	8001ff4 <lis2dw12_read_reg>
 80025a4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80025a6:	7b7b      	ldrb	r3, [r7, #13]
 80025a8:	b21a      	sxth	r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	7b3b      	ldrb	r3, [r7, #12]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	4413      	add	r3, r2
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	b21a      	sxth	r2, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80025c8:	7bfa      	ldrb	r2, [r7, #15]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	3302      	adds	r3, #2
 80025ce:	b212      	sxth	r2, r2
 80025d0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	3302      	adds	r3, #2
 80025d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	b29a      	uxth	r2, r3
 80025e0:	7bbb      	ldrb	r3, [r7, #14]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	3302      	adds	r3, #2
 80025ec:	b212      	sxth	r2, r2
 80025ee:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80025f0:	7c7a      	ldrb	r2, [r7, #17]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	3304      	adds	r3, #4
 80025f6:	b212      	sxth	r2, r2
 80025f8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	3304      	adds	r3, #4
 80025fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002602:	b29b      	uxth	r3, r3
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	b29a      	uxth	r2, r3
 8002608:	7c3b      	ldrb	r3, [r7, #16]
 800260a:	b29b      	uxth	r3, r3
 800260c:	4413      	add	r3, r2
 800260e:	b29a      	uxth	r2, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	3304      	adds	r3, #4
 8002614:	b212      	sxth	r2, r2
 8002616:	801a      	strh	r2, [r3, #0]

  return ret;
 8002618:	697b      	ldr	r3, [r7, #20]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 800262c:	2301      	movs	r3, #1
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	210f      	movs	r1, #15
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fcde 	bl	8001ff4 <lis2dw12_read_reg>
 8002638:	60f8      	str	r0, [r7, #12]
  return ret;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8002650:	f107 0208 	add.w	r2, r7, #8
 8002654:	2301      	movs	r3, #1
 8002656:	2121      	movs	r1, #33	; 0x21
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff fccb 	bl	8001ff4 <lis2dw12_read_reg>
 800265e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10f      	bne.n	8002686 <lis2dw12_auto_increment_set+0x42>
    reg.if_add_inc = val;
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	b2da      	uxtb	r2, r3
 800266e:	7a3b      	ldrb	r3, [r7, #8]
 8002670:	f362 0382 	bfi	r3, r2, #2, #1
 8002674:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8002676:	f107 0208 	add.w	r2, r7, #8
 800267a:	2301      	movs	r3, #1
 800267c:	2121      	movs	r1, #33	; 0x21
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff fcd0 	bl	8002024 <lis2dw12_write_reg>
 8002684:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <lis2dw12_fifo_mode_set>:
  * @param  val      change the values of fmode in reg FIFO_CTRL
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx, lis2dw12_fmode_t val)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 800269c:	f107 0208 	add.w	r2, r7, #8
 80026a0:	2301      	movs	r3, #1
 80026a2:	212e      	movs	r1, #46	; 0x2e
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff fca5 	bl	8001ff4 <lis2dw12_read_reg>
 80026aa:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <lis2dw12_fifo_mode_set+0x42>
    reg.fmode = (uint8_t) val;
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	7a3b      	ldrb	r3, [r7, #8]
 80026bc:	f362 1347 	bfi	r3, r2, #5, #3
 80026c0:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 80026c2:	f107 0208 	add.w	r2, r7, #8
 80026c6:	2301      	movs	r3, #1
 80026c8:	212e      	movs	r1, #46	; 0x2e
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fcaa 	bl	8002024 <lis2dw12_write_reg>
 80026d0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80026d2:	68fb      	ldr	r3, [r7, #12]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <LIS2MDL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d103      	bne.n	80026f8 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80026f0:	f04f 33ff 	mov.w	r3, #4294967295
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	e05d      	b.n	80027b4 <LIS2MDL_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	7b1a      	ldrb	r2, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	695a      	ldr	r2, [r3, #20]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	699a      	ldr	r2, [r3, #24]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a23      	ldr	r2, [pc, #140]	; (80027c0 <LIS2MDL_RegisterBusIO+0xe4>)
 8002734:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <LIS2MDL_RegisterBusIO+0xe8>)
 800273a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d103      	bne.n	8002752 <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e030      	b.n	80027b4 <LIS2MDL_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4798      	blx	r3
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <LIS2MDL_RegisterBusIO+0x8a>
    {
      ret = LIS2MDL_ERROR;
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e026      	b.n	80027b4 <LIS2MDL_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d022      	beq.n	80027b4 <LIS2MDL_RegisterBusIO+0xd8>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002774:	2b00      	cmp	r3, #0
 8002776:	d11d      	bne.n	80027b4 <LIS2MDL_RegisterBusIO+0xd8>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d10d      	bne.n	800279c <LIS2MDL_RegisterBusIO+0xc0>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8002780:	2334      	movs	r3, #52	; 0x34
 8002782:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8002784:	7afb      	ldrb	r3, [r7, #11]
 8002786:	461a      	mov	r2, r3
 8002788:	2162      	movs	r1, #98	; 0x62
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fa15 	bl	8002bba <LIS2MDL_Write_Reg>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00e      	beq.n	80027b4 <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295
 800279a:	e00c      	b.n	80027b6 <LIS2MDL_RegisterBusIO+0xda>
            }
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	331c      	adds	r3, #28
 80027a0:	2101      	movs	r1, #1
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fbe2 	bl	8002f6c <lis2mdl_i2c_interface_set>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	e000      	b.n	80027b6 <LIS2MDL_RegisterBusIO+0xda>
        }
      }
    }
  }

  return ret;
 80027b4:	68fb      	ldr	r3, [r7, #12]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	08002bf1 	.word	0x08002bf1
 80027c4:	08002c53 	.word	0x08002c53

080027c8 <LIS2MDL_Init>:
 * @brief  Initialize the LIS2MDL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	331c      	adds	r3, #28
 80027d4:	2101      	movs	r1, #1
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 fb20 	bl	8002e1c <lis2mdl_block_data_update_set>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <LIS2MDL_Init+0x20>
  {
    return LIS2MDL_ERROR;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	e028      	b.n	800283a <LIS2MDL_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	331c      	adds	r3, #28
 80027ec:	2102      	movs	r1, #2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fa90 	bl	8002d14 <lis2mdl_operating_mode_set>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <LIS2MDL_Init+0x38>
  {
    return LIS2MDL_ERROR;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295
 80027fe:	e01c      	b.n	800283a <LIS2MDL_Init+0x72>
  }

  /* Output data rate selection */
  if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	331c      	adds	r3, #28
 8002804:	2103      	movs	r1, #3
 8002806:	4618      	mov	r0, r3
 8002808:	f000 faaa 	bl	8002d60 <lis2mdl_data_rate_set>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <LIS2MDL_Init+0x50>
  {
    return LIS2MDL_ERROR;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e010      	b.n	800283a <LIS2MDL_Init+0x72>
  }

  /* Self Test disabled. */
  if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	331c      	adds	r3, #28
 800281c:	2100      	movs	r1, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fb7e 	bl	8002f20 <lis2mdl_self_test_set>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <LIS2MDL_Init+0x68>
  {
    return LIS2MDL_ERROR;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
 800282e:	e004      	b.n	800283a <LIS2MDL_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <LIS2MDL_DeInit>:
 * @brief  Deinitialize the LIS2MDL magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f874 	bl	8002938 <LIS2MDL_MAG_Disable>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
 800285a:	e004      	b.n	8002866 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <LIS2MDL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
  if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	331c      	adds	r3, #28
 800287c:	6839      	ldr	r1, [r7, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fb3d 	bl	8002efe <lis2mdl_device_id_get>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <LIS2MDL_ReadID+0x22>
  {
    return LIS2MDL_ERROR;
 800288a:	f04f 33ff 	mov.w	r3, #4294967295
 800288e:	e000      	b.n	8002892 <LIS2MDL_ReadID+0x24>
  }

  return LIS2MDL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <LIS2MDL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2200      	movs	r2, #0
 80028b0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2201      	movs	r2, #1
 80028b6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	2200      	movs	r2, #0
 80028bc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2200      	movs	r2, #0
 80028c2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2232      	movs	r2, #50	; 0x32
 80028ce:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <LIS2MDL_GetCapabilities+0x58>)
 80028e4:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	42c80000 	.word	0x42c80000

080028f8 <LIS2MDL_MAG_Enable>:
 * @brief Enable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e010      	b.n	8002930 <LIS2MDL_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	331c      	adds	r3, #28
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f000 f9fd 	bl	8002d14 <lis2mdl_operating_mode_set>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <LIS2MDL_MAG_Enable+0x2e>
  {
    return LIS2MDL_ERROR;
 8002920:	f04f 33ff 	mov.w	r3, #4294967295
 8002924:	e004      	b.n	8002930 <LIS2MDL_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <LIS2MDL_MAG_Disable>:
 * @brief Disable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	e010      	b.n	8002970 <LIS2MDL_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	331c      	adds	r3, #28
 8002952:	2102      	movs	r1, #2
 8002954:	4618      	mov	r0, r3
 8002956:	f000 f9dd 	bl	8002d14 <lis2mdl_operating_mode_set>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <LIS2MDL_MAG_Disable+0x2e>
  {
    return LIS2MDL_ERROR;
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
 8002964:	e004      	b.n	8002970 <LIS2MDL_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <LIS2MDL_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002988:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LIS2MDL_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	331c      	adds	r3, #28
 80029aa:	f107 020b 	add.w	r2, r7, #11
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 f9fb 	bl	8002dac <lis2mdl_data_rate_get>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80029bc:	f04f 33ff 	mov.w	r3, #4294967295
 80029c0:	e023      	b.n	8002a0a <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80029c2:	7afb      	ldrb	r3, [r7, #11]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d81b      	bhi.n	8002a00 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80029c8:	a201      	add	r2, pc, #4	; (adr r2, 80029d0 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80029ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ce:	bf00      	nop
 80029d0:	080029e1 	.word	0x080029e1
 80029d4:	080029e9 	.word	0x080029e9
 80029d8:	080029f1 	.word	0x080029f1
 80029dc:	080029f9 	.word	0x080029f9
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	4a0c      	ldr	r2, [pc, #48]	; (8002a14 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80029e4:	601a      	str	r2, [r3, #0]
      break;
 80029e6:	e00f      	b.n	8002a08 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4a0b      	ldr	r2, [pc, #44]	; (8002a18 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80029ec:	601a      	str	r2, [r3, #0]
      break;
 80029ee:	e00b      	b.n	8002a08 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80029f4:	601a      	str	r2, [r3, #0]
      break;
 80029f6:	e007      	b.n	8002a08 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4a09      	ldr	r2, [pc, #36]	; (8002a20 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80029fc:	601a      	str	r2, [r3, #0]
      break;
 80029fe:	e003      	b.n	8002a08 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8002a00:	f04f 33ff 	mov.w	r3, #4294967295
 8002a04:	60fb      	str	r3, [r7, #12]
      break;
 8002a06:	bf00      	nop
  }

  return ret;
 8002a08:	68fb      	ldr	r3, [r7, #12]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	41200000 	.word	0x41200000
 8002a18:	41a00000 	.word	0x41a00000
 8002a1c:	42480000 	.word	0x42480000
 8002a20:	42c80000 	.word	0x42c80000

08002a24 <LIS2MDL_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8002a30:	edd7 7a00 	vldr	s15, [r7]
 8002a34:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a40:	d801      	bhi.n	8002a46 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8002a42:	2300      	movs	r3, #0
 8002a44:	e016      	b.n	8002a74 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002a46:	edd7 7a00 	vldr	s15, [r7]
 8002a4a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a56:	d801      	bhi.n	8002a5c <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e00b      	b.n	8002a74 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002a5c:	edd7 7a00 	vldr	s15, [r7]
 8002a60:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002a9c <LIS2MDL_MAG_SetOutputDataRate+0x78>
 8002a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6c:	d801      	bhi.n	8002a72 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e000      	b.n	8002a74 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002a72:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8002a74:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	331c      	adds	r3, #28
 8002a7a:	7bfa      	ldrb	r2, [r7, #15]
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 f96e 	bl	8002d60 <lis2mdl_data_rate_set>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <LIS2MDL_MAG_SetOutputDataRate+0x6c>
  {
    return LIS2MDL_ERROR;
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8e:	e000      	b.n	8002a92 <LIS2MDL_MAG_SetOutputDataRate+0x6e>
  }

  return LIS2MDL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	42480000 	.word	0x42480000

08002aa0 <LIS2MDL_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2232      	movs	r2, #50	; 0x32
 8002aae:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <LIS2MDL_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LIS2MDL_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	331c      	adds	r3, #28
 8002ae4:	f107 0208 	add.w	r2, r7, #8
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f9bc 	bl	8002e68 <lis2mdl_magnetic_raw_get>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295
 8002afa:	e00c      	b.n	8002b16 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002afc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002b04:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002b0c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <LIS2MDL_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	331c      	adds	r3, #28
 8002b2c:	f107 0210 	add.w	r2, r7, #16
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f998 	bl	8002e68 <lis2mdl_magnetic_raw_get>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <LIS2MDL_MAG_GetAxes+0x26>
  {
    return LIS2MDL_ERROR;
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	e036      	b.n	8002bb2 <LIS2MDL_MAG_GetAxes+0x94>
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8002b44:	f107 030c 	add.w	r3, r7, #12
 8002b48:	4619      	mov	r1, r3
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ff14 	bl	8002978 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002b50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b54:	ee07 3a90 	vmov	s15, r3
 8002b58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b68:	ee17 2a90 	vmov	r2, s15
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002b70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b74:	ee07 3a90 	vmov	s15, r3
 8002b78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b88:	ee17 2a90 	vmov	r2, s15
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002b90:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b94:	ee07 3a90 	vmov	s15, r3
 8002b98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ba8:	ee17 2a90 	vmov	r2, s15
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <LIS2MDL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	70fb      	strb	r3, [r7, #3]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	70bb      	strb	r3, [r7, #2]
  if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f103 001c 	add.w	r0, r3, #28
 8002bd0:	1cba      	adds	r2, r7, #2
 8002bd2:	78f9      	ldrb	r1, [r7, #3]
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	f000 f885 	bl	8002ce4 <lis2mdl_write_reg>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <LIS2MDL_Write_Reg+0x2c>
  {
    return LIS2MDL_ERROR;
 8002be0:	f04f 33ff 	mov.w	r3, #4294967295
 8002be4:	e000      	b.n	8002be8 <LIS2MDL_Write_Reg+0x2e>
  }

  return LIS2MDL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	72fb      	strb	r3, [r7, #11]
 8002c00:	4613      	mov	r3, r2
 8002c02:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10e      	bne.n	8002c2e <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	695c      	ldr	r4, [r3, #20]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	7b1b      	ldrb	r3, [r3, #12]
 8002c18:	b298      	uxth	r0, r3
 8002c1a:	7afb      	ldrb	r3, [r7, #11]
 8002c1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	b299      	uxth	r1, r3
 8002c24:	893b      	ldrh	r3, [r7, #8]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	47a0      	blx	r4
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	e00d      	b.n	8002c4a <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	695c      	ldr	r4, [r3, #20]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	7b1b      	ldrb	r3, [r3, #12]
 8002c36:	b298      	uxth	r0, r3
 8002c38:	7afb      	ldrb	r3, [r7, #11]
 8002c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	b299      	uxth	r1, r3
 8002c42:	893b      	ldrh	r3, [r7, #8]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	47a0      	blx	r4
 8002c48:	4603      	mov	r3, r0
  }
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd90      	pop	{r4, r7, pc}

08002c52 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c52:	b590      	push	{r4, r7, lr}
 8002c54:	b087      	sub	sp, #28
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	460b      	mov	r3, r1
 8002c60:	72fb      	strb	r3, [r7, #11]
 8002c62:	4613      	mov	r3, r2
 8002c64:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10e      	bne.n	8002c90 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	691c      	ldr	r4, [r3, #16]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	7b1b      	ldrb	r3, [r3, #12]
 8002c7a:	b298      	uxth	r0, r3
 8002c7c:	7afb      	ldrb	r3, [r7, #11]
 8002c7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	b299      	uxth	r1, r3
 8002c86:	893b      	ldrh	r3, [r7, #8]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	47a0      	blx	r4
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	e00d      	b.n	8002cac <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	691c      	ldr	r4, [r3, #16]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	7b1b      	ldrb	r3, [r3, #12]
 8002c98:	b298      	uxth	r0, r3
 8002c9a:	7afb      	ldrb	r3, [r7, #11]
 8002c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	b299      	uxth	r1, r3
 8002ca4:	893b      	ldrh	r3, [r7, #8]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	47a0      	blx	r4
 8002caa:	4603      	mov	r3, r0
  }
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd90      	pop	{r4, r7, pc}

08002cb4 <lis2mdl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	72fb      	strb	r3, [r7, #11]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	685c      	ldr	r4, [r3, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6898      	ldr	r0, [r3, #8]
 8002cd0:	893b      	ldrh	r3, [r7, #8]
 8002cd2:	7af9      	ldrb	r1, [r7, #11]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	47a0      	blx	r4
 8002cd8:	6178      	str	r0, [r7, #20]
  return ret;
 8002cda:	697b      	ldr	r3, [r7, #20]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd90      	pop	{r4, r7, pc}

08002ce4 <lis2mdl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	72fb      	strb	r3, [r7, #11]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681c      	ldr	r4, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6898      	ldr	r0, [r3, #8]
 8002d00:	893b      	ldrh	r3, [r7, #8]
 8002d02:	7af9      	ldrb	r1, [r7, #11]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	47a0      	blx	r4
 8002d08:	6178      	str	r0, [r7, #20]
  return ret;
 8002d0a:	697b      	ldr	r3, [r7, #20]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd90      	pop	{r4, r7, pc}

08002d14 <lis2mdl_operating_mode_set>:
  * @param  val    change the values of md in reg CFG_REG_A
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx, lis2mdl_md_t val)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8002d20:	f107 0208 	add.w	r2, r7, #8
 8002d24:	2301      	movs	r3, #1
 8002d26:	2160      	movs	r1, #96	; 0x60
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ffc3 	bl	8002cb4 <lis2mdl_read_reg>
 8002d2e:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10f      	bne.n	8002d56 <lis2mdl_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	7a3b      	ldrb	r3, [r7, #8]
 8002d40:	f362 0301 	bfi	r3, r2, #0, #2
 8002d44:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8002d46:	f107 0208 	add.w	r2, r7, #8
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	2160      	movs	r1, #96	; 0x60
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff ffc8 	bl	8002ce4 <lis2mdl_write_reg>
 8002d54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d56:	68fb      	ldr	r3, [r7, #12]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8002d6c:	f107 0208 	add.w	r2, r7, #8
 8002d70:	2301      	movs	r3, #1
 8002d72:	2160      	movs	r1, #96	; 0x60
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff ff9d 	bl	8002cb4 <lis2mdl_read_reg>
 8002d7a:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10f      	bne.n	8002da2 <lis2mdl_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	7a3b      	ldrb	r3, [r7, #8]
 8002d8c:	f362 0383 	bfi	r3, r2, #2, #2
 8002d90:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8002d92:	f107 0208 	add.w	r2, r7, #8
 8002d96:	2301      	movs	r3, #1
 8002d98:	2160      	movs	r1, #96	; 0x60
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ffa2 	bl	8002ce4 <lis2mdl_write_reg>
 8002da0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002da2:	68fb      	ldr	r3, [r7, #12]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8002db6:	f107 0208 	add.w	r2, r7, #8
 8002dba:	2301      	movs	r3, #1
 8002dbc:	2160      	movs	r1, #96	; 0x60
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff ff78 	bl	8002cb4 <lis2mdl_read_reg>
 8002dc4:	60f8      	str	r0, [r7, #12]
  switch (reg.odr){
 8002dc6:	7a3b      	ldrb	r3, [r7, #8]
 8002dc8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d81a      	bhi.n	8002e08 <lis2mdl_data_rate_get+0x5c>
 8002dd2:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <lis2mdl_data_rate_get+0x2c>)
 8002dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd8:	08002de9 	.word	0x08002de9
 8002ddc:	08002df1 	.word	0x08002df1
 8002de0:	08002df9 	.word	0x08002df9
 8002de4:	08002e01 	.word	0x08002e01
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
      break;
 8002dee:	e00f      	b.n	8002e10 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2201      	movs	r2, #1
 8002df4:	701a      	strb	r2, [r3, #0]
      break;
 8002df6:	e00b      	b.n	8002e10 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	701a      	strb	r2, [r3, #0]
      break;
 8002dfe:	e007      	b.n	8002e10 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2203      	movs	r2, #3
 8002e04:	701a      	strb	r2, [r3, #0]
      break;
 8002e06:	e003      	b.n	8002e10 <lis2mdl_data_rate_get+0x64>
    default:
      *val = LIS2MDL_ODR_10Hz;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
      break;
 8002e0e:	bf00      	nop
  }
  return ret;
 8002e10:	68fb      	ldr	r3, [r7, #12]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop

08002e1c <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8002e28:	f107 0208 	add.w	r2, r7, #8
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	2162      	movs	r1, #98	; 0x62
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff ff3f 	bl	8002cb4 <lis2mdl_read_reg>
 8002e36:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10f      	bne.n	8002e5e <lis2mdl_block_data_update_set+0x42>
    reg.bdu = val;
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	7a3b      	ldrb	r3, [r7, #8]
 8002e48:	f362 1304 	bfi	r3, r2, #4, #1
 8002e4c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8002e4e:	f107 0208 	add.w	r2, r7, #8
 8002e52:	2301      	movs	r3, #1
 8002e54:	2162      	movs	r1, #98	; 0x62
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff ff44 	bl	8002ce4 <lis2mdl_write_reg>
 8002e5c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8002e72:	f107 020c 	add.w	r2, r7, #12
 8002e76:	2306      	movs	r3, #6
 8002e78:	2168      	movs	r1, #104	; 0x68
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ff1a 	bl	8002cb4 <lis2mdl_read_reg>
 8002e80:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002e82:	7b7b      	ldrb	r3, [r7, #13]
 8002e84:	b21a      	sxth	r2, r3
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	7b3b      	ldrb	r3, [r7, #12]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	b21a      	sxth	r2, r3
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002ea4:	7bfa      	ldrb	r2, [r7, #15]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	b212      	sxth	r2, r2
 8002eac:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	7bbb      	ldrb	r3, [r7, #14]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	b212      	sxth	r2, r2
 8002eca:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002ecc:	7c7a      	ldrb	r2, [r7, #17]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	b212      	sxth	r2, r2
 8002ed4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	7c3b      	ldrb	r3, [r7, #16]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	3304      	adds	r3, #4
 8002ef0:	b212      	sxth	r2, r2
 8002ef2:	801a      	strh	r2, [r3, #0]

  return ret;
 8002ef4:	697b      	ldr	r3, [r7, #20]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8002f08:	2301      	movs	r3, #1
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	214f      	movs	r1, #79	; 0x4f
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff fed0 	bl	8002cb4 <lis2mdl_read_reg>
 8002f14:	60f8      	str	r0, [r7, #12]
  return ret;
 8002f16:	68fb      	ldr	r3, [r7, #12]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8002f2c:	f107 0208 	add.w	r2, r7, #8
 8002f30:	2301      	movs	r3, #1
 8002f32:	2162      	movs	r1, #98	; 0x62
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff febd 	bl	8002cb4 <lis2mdl_read_reg>
 8002f3a:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10f      	bne.n	8002f62 <lis2mdl_self_test_set+0x42>
    reg.self_test = val;
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	7a3b      	ldrb	r3, [r7, #8]
 8002f4c:	f362 0341 	bfi	r3, r2, #1, #1
 8002f50:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8002f52:	f107 0208 	add.w	r2, r7, #8
 8002f56:	2301      	movs	r3, #1
 8002f58:	2162      	movs	r1, #98	; 0x62
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff fec2 	bl	8002ce4 <lis2mdl_write_reg>
 8002f60:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002f62:	68fb      	ldr	r3, [r7, #12]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <lis2mdl_i2c_interface_set>:
  * @param  val   change the values of i2c_dis in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx, lis2mdl_i2c_dis_t val)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8002f78:	f107 0208 	add.w	r2, r7, #8
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	2162      	movs	r1, #98	; 0x62
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff fe97 	bl	8002cb4 <lis2mdl_read_reg>
 8002f86:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10f      	bne.n	8002fae <lis2mdl_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	7a3b      	ldrb	r3, [r7, #8]
 8002f98:	f362 1345 	bfi	r3, r2, #5, #1
 8002f9c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8002f9e:	f107 0208 	add.w	r2, r7, #8
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	2162      	movs	r1, #98	; 0x62
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff fe9c 	bl	8002ce4 <lis2mdl_write_reg>
 8002fac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002fae:	68fb      	ldr	r3, [r7, #12]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	4a06      	ldr	r2, [pc, #24]	; (8002fe0 <BSP_LED_On+0x28>)
 8002fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fca:	2120      	movs	r1, #32
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fc68 	bl	80038a4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	2000008c 	.word	0x2000008c

08002fe4 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	4a06      	ldr	r2, [pc, #24]	; (800300c <BSP_LED_Off+0x28>)
 8002ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff6:	2120      	movs	r1, #32
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fc52 	bl	80038a4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	2000008c 	.word	0x2000008c

08003010 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d903      	bls.n	800302c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003024:	f06f 0301 	mvn.w	r3, #1
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	e01c      	b.n	8003066 <BSP_COM_Init+0x56>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800302c:	79fa      	ldrb	r2, [r7, #7]
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	490f      	ldr	r1, [pc, #60]	; (8003070 <BSP_COM_Init+0x60>)
 8003032:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003036:	490f      	ldr	r1, [pc, #60]	; (8003074 <BSP_COM_Init+0x64>)
 8003038:	019b      	lsls	r3, r3, #6
 800303a:	440b      	add	r3, r1
 800303c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	019b      	lsls	r3, r3, #6
 8003042:	4a0c      	ldr	r2, [pc, #48]	; (8003074 <BSP_COM_Init+0x64>)
 8003044:	4413      	add	r3, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f85c 	bl	8003104 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	019b      	lsls	r3, r3, #6
 8003050:	4a08      	ldr	r2, [pc, #32]	; (8003074 <BSP_COM_Init+0x64>)
 8003052:	4413      	add	r3, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f000 f80f 	bl	8003078 <MX_USART2_UART_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <BSP_COM_Init+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003060:	f06f 0303 	mvn.w	r3, #3
 8003064:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003066:	68fb      	ldr	r3, [r7, #12]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20000090 	.word	0x20000090
 8003074:	20009110 	.word	0x20009110

08003078 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a12      	ldr	r2, [pc, #72]	; (80030d0 <MX_USART2_UART_Init+0x58>)
 8003088:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003090:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	220c      	movs	r2, #12
 80030a8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f002 fad2 	bl	8005660 <HAL_UART_Init>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40004400 	.word	0x40004400

080030d4 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) /* For IAR and MDK-ARM */
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80030dc:	4b07      	ldr	r3, [pc, #28]	; (80030fc <__io_putchar+0x28>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	019b      	lsls	r3, r3, #6
 80030e2:	4a07      	ldr	r2, [pc, #28]	; (8003100 <__io_putchar+0x2c>)
 80030e4:	1898      	adds	r0, r3, r2
 80030e6:	1d39      	adds	r1, r7, #4
 80030e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030ec:	2201      	movs	r2, #1
 80030ee:	f002 fb0e 	bl	800570e <HAL_UART_Transmit>
  return ch;
 80030f2:	687b      	ldr	r3, [r7, #4]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000138 	.word	0x20000138
 8003100:	20009110 	.word	0x20009110

08003104 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08a      	sub	sp, #40	; 0x28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	4b1e      	ldr	r3, [pc, #120]	; (800318c <USART2_MspInit+0x88>)
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	4a1d      	ldr	r2, [pc, #116]	; (800318c <USART2_MspInit+0x88>)
 8003116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800311a:	6413      	str	r3, [r2, #64]	; 0x40
 800311c:	4b1b      	ldr	r3, [pc, #108]	; (800318c <USART2_MspInit+0x88>)
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	4b17      	ldr	r3, [pc, #92]	; (800318c <USART2_MspInit+0x88>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	4a16      	ldr	r2, [pc, #88]	; (800318c <USART2_MspInit+0x88>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	6313      	str	r3, [r2, #48]	; 0x30
 8003138:	4b14      	ldr	r3, [pc, #80]	; (800318c <USART2_MspInit+0x88>)
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8003144:	2304      	movs	r3, #4
 8003146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003148:	2302      	movs	r3, #2
 800314a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	2300      	movs	r3, #0
 800314e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003150:	2300      	movs	r3, #0
 8003152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8003154:	2307      	movs	r3, #7
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	4619      	mov	r1, r3
 800315e:	480c      	ldr	r0, [pc, #48]	; (8003190 <USART2_MspInit+0x8c>)
 8003160:	f000 f93c 	bl	80033dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8003164:	2308      	movs	r3, #8
 8003166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003168:	2302      	movs	r3, #2
 800316a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003170:	2300      	movs	r3, #0
 8003172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8003174:	2307      	movs	r3, #7
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	4619      	mov	r1, r3
 800317e:	4804      	ldr	r0, [pc, #16]	; (8003190 <USART2_MspInit+0x8c>)
 8003180:	f000 f92c 	bl	80033dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8003184:	bf00      	nop
 8003186:	3728      	adds	r7, #40	; 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40023800 	.word	0x40023800
 8003190:	40020000 	.word	0x40020000

08003194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003198:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <HAL_Init+0x40>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a0d      	ldr	r2, [pc, #52]	; (80031d4 <HAL_Init+0x40>)
 800319e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_Init+0x40>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <HAL_Init+0x40>)
 80031aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_Init+0x40>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a07      	ldr	r2, [pc, #28]	; (80031d4 <HAL_Init+0x40>)
 80031b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031bc:	2003      	movs	r0, #3
 80031be:	f000 f8d8 	bl	8003372 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031c2:	2000      	movs	r0, #0
 80031c4:	f7fd fc7e 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031c8:	f7fd fc50 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023c00 	.word	0x40023c00

080031d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_IncTick+0x20>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_IncTick+0x24>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4413      	add	r3, r2
 80031e8:	4a04      	ldr	r2, [pc, #16]	; (80031fc <HAL_IncTick+0x24>)
 80031ea:	6013      	str	r3, [r2, #0]
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000098 	.word	0x20000098
 80031fc:	20009150 	.word	0x20009150

08003200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return uwTick;
 8003204:	4b03      	ldr	r3, [pc, #12]	; (8003214 <HAL_GetTick+0x14>)
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20009150 	.word	0x20009150

08003218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <__NVIC_SetPriorityGrouping+0x44>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003234:	4013      	ands	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324a:	4a04      	ldr	r2, [pc, #16]	; (800325c <__NVIC_SetPriorityGrouping+0x44>)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	60d3      	str	r3, [r2, #12]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <__NVIC_GetPriorityGrouping+0x18>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	f003 0307 	and.w	r3, r3, #7
}
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	2b00      	cmp	r3, #0
 800328c:	db0b      	blt.n	80032a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	f003 021f 	and.w	r2, r3, #31
 8003294:	4907      	ldr	r1, [pc, #28]	; (80032b4 <__NVIC_EnableIRQ+0x38>)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	2001      	movs	r0, #1
 800329e:	fa00 f202 	lsl.w	r2, r0, r2
 80032a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000e100 	.word	0xe000e100

080032b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	6039      	str	r1, [r7, #0]
 80032c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	db0a      	blt.n	80032e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	490c      	ldr	r1, [pc, #48]	; (8003304 <__NVIC_SetPriority+0x4c>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	0112      	lsls	r2, r2, #4
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	440b      	add	r3, r1
 80032dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e0:	e00a      	b.n	80032f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4908      	ldr	r1, [pc, #32]	; (8003308 <__NVIC_SetPriority+0x50>)
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	3b04      	subs	r3, #4
 80032f0:	0112      	lsls	r2, r2, #4
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	440b      	add	r3, r1
 80032f6:	761a      	strb	r2, [r3, #24]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000e100 	.word	0xe000e100
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	; 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f1c3 0307 	rsb	r3, r3, #7
 8003326:	2b04      	cmp	r3, #4
 8003328:	bf28      	it	cs
 800332a:	2304      	movcs	r3, #4
 800332c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3304      	adds	r3, #4
 8003332:	2b06      	cmp	r3, #6
 8003334:	d902      	bls.n	800333c <NVIC_EncodePriority+0x30>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3b03      	subs	r3, #3
 800333a:	e000      	b.n	800333e <NVIC_EncodePriority+0x32>
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003340:	f04f 32ff 	mov.w	r2, #4294967295
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	401a      	ands	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003354:	f04f 31ff 	mov.w	r1, #4294967295
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	43d9      	mvns	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	4313      	orrs	r3, r2
         );
}
 8003366:	4618      	mov	r0, r3
 8003368:	3724      	adds	r7, #36	; 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff ff4c 	bl	8003218 <__NVIC_SetPriorityGrouping>
}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800339a:	f7ff ff61 	bl	8003260 <__NVIC_GetPriorityGrouping>
 800339e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	6978      	ldr	r0, [r7, #20]
 80033a6:	f7ff ffb1 	bl	800330c <NVIC_EncodePriority>
 80033aa:	4602      	mov	r2, r0
 80033ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b0:	4611      	mov	r1, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ff80 	bl	80032b8 <__NVIC_SetPriority>
}
 80033b8:	bf00      	nop
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff ff54 	bl	800327c <__NVIC_EnableIRQ>
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033dc:	b480      	push	{r7}
 80033de:	b089      	sub	sp, #36	; 0x24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f2:	2300      	movs	r3, #0
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	e159      	b.n	80036ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033f8:	2201      	movs	r2, #1
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4013      	ands	r3, r2
 800340a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	429a      	cmp	r2, r3
 8003412:	f040 8148 	bne.w	80036a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d00b      	beq.n	8003436 <HAL_GPIO_Init+0x5a>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d007      	beq.n	8003436 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800342a:	2b11      	cmp	r3, #17
 800342c:	d003      	beq.n	8003436 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b12      	cmp	r3, #18
 8003434:	d130      	bne.n	8003498 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	2203      	movs	r2, #3
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4313      	orrs	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800346c:	2201      	movs	r2, #1
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f003 0201 	and.w	r2, r3, #1
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	2203      	movs	r2, #3
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d003      	beq.n	80034d8 <HAL_GPIO_Init+0xfc>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b12      	cmp	r3, #18
 80034d6:	d123      	bne.n	8003520 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	08da      	lsrs	r2, r3, #3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3208      	adds	r2, #8
 80034e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	220f      	movs	r2, #15
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	08da      	lsrs	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3208      	adds	r2, #8
 800351a:	69b9      	ldr	r1, [r7, #24]
 800351c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	2203      	movs	r2, #3
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0203 	and.w	r2, r3, #3
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80a2 	beq.w	80036a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	4b56      	ldr	r3, [pc, #344]	; (80036c0 <HAL_GPIO_Init+0x2e4>)
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	4a55      	ldr	r2, [pc, #340]	; (80036c0 <HAL_GPIO_Init+0x2e4>)
 800356c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003570:	6453      	str	r3, [r2, #68]	; 0x44
 8003572:	4b53      	ldr	r3, [pc, #332]	; (80036c0 <HAL_GPIO_Init+0x2e4>)
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800357e:	4a51      	ldr	r2, [pc, #324]	; (80036c4 <HAL_GPIO_Init+0x2e8>)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	089b      	lsrs	r3, r3, #2
 8003584:	3302      	adds	r3, #2
 8003586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	220f      	movs	r2, #15
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4013      	ands	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a48      	ldr	r2, [pc, #288]	; (80036c8 <HAL_GPIO_Init+0x2ec>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d019      	beq.n	80035de <HAL_GPIO_Init+0x202>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a47      	ldr	r2, [pc, #284]	; (80036cc <HAL_GPIO_Init+0x2f0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <HAL_GPIO_Init+0x1fe>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a46      	ldr	r2, [pc, #280]	; (80036d0 <HAL_GPIO_Init+0x2f4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00d      	beq.n	80035d6 <HAL_GPIO_Init+0x1fa>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a45      	ldr	r2, [pc, #276]	; (80036d4 <HAL_GPIO_Init+0x2f8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d007      	beq.n	80035d2 <HAL_GPIO_Init+0x1f6>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a44      	ldr	r2, [pc, #272]	; (80036d8 <HAL_GPIO_Init+0x2fc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d101      	bne.n	80035ce <HAL_GPIO_Init+0x1f2>
 80035ca:	2304      	movs	r3, #4
 80035cc:	e008      	b.n	80035e0 <HAL_GPIO_Init+0x204>
 80035ce:	2307      	movs	r3, #7
 80035d0:	e006      	b.n	80035e0 <HAL_GPIO_Init+0x204>
 80035d2:	2303      	movs	r3, #3
 80035d4:	e004      	b.n	80035e0 <HAL_GPIO_Init+0x204>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e002      	b.n	80035e0 <HAL_GPIO_Init+0x204>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <HAL_GPIO_Init+0x204>
 80035de:	2300      	movs	r3, #0
 80035e0:	69fa      	ldr	r2, [r7, #28]
 80035e2:	f002 0203 	and.w	r2, r2, #3
 80035e6:	0092      	lsls	r2, r2, #2
 80035e8:	4093      	lsls	r3, r2
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035f0:	4934      	ldr	r1, [pc, #208]	; (80036c4 <HAL_GPIO_Init+0x2e8>)
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	089b      	lsrs	r3, r3, #2
 80035f6:	3302      	adds	r3, #2
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035fe:	4b37      	ldr	r3, [pc, #220]	; (80036dc <HAL_GPIO_Init+0x300>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	43db      	mvns	r3, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4013      	ands	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003622:	4a2e      	ldr	r2, [pc, #184]	; (80036dc <HAL_GPIO_Init+0x300>)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003628:	4b2c      	ldr	r3, [pc, #176]	; (80036dc <HAL_GPIO_Init+0x300>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800364c:	4a23      	ldr	r2, [pc, #140]	; (80036dc <HAL_GPIO_Init+0x300>)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003652:	4b22      	ldr	r3, [pc, #136]	; (80036dc <HAL_GPIO_Init+0x300>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003676:	4a19      	ldr	r2, [pc, #100]	; (80036dc <HAL_GPIO_Init+0x300>)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800367c:	4b17      	ldr	r3, [pc, #92]	; (80036dc <HAL_GPIO_Init+0x300>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036a0:	4a0e      	ldr	r2, [pc, #56]	; (80036dc <HAL_GPIO_Init+0x300>)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3301      	adds	r3, #1
 80036aa:	61fb      	str	r3, [r7, #28]
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	2b0f      	cmp	r3, #15
 80036b0:	f67f aea2 	bls.w	80033f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036b4:	bf00      	nop
 80036b6:	3724      	adds	r7, #36	; 0x24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40013800 	.word	0x40013800
 80036c8:	40020000 	.word	0x40020000
 80036cc:	40020400 	.word	0x40020400
 80036d0:	40020800 	.word	0x40020800
 80036d4:	40020c00 	.word	0x40020c00
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40013c00 	.word	0x40013c00

080036e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	e0bb      	b.n	8003874 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036fc:	2201      	movs	r2, #1
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4013      	ands	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	429a      	cmp	r2, r3
 8003714:	f040 80ab 	bne.w	800386e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003718:	4a5b      	ldr	r2, [pc, #364]	; (8003888 <HAL_GPIO_DeInit+0x1a8>)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	3302      	adds	r3, #2
 8003720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003724:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	220f      	movs	r2, #15
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	4013      	ands	r3, r2
 8003738:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a53      	ldr	r2, [pc, #332]	; (800388c <HAL_GPIO_DeInit+0x1ac>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d019      	beq.n	8003776 <HAL_GPIO_DeInit+0x96>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a52      	ldr	r2, [pc, #328]	; (8003890 <HAL_GPIO_DeInit+0x1b0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d013      	beq.n	8003772 <HAL_GPIO_DeInit+0x92>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a51      	ldr	r2, [pc, #324]	; (8003894 <HAL_GPIO_DeInit+0x1b4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00d      	beq.n	800376e <HAL_GPIO_DeInit+0x8e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a50      	ldr	r2, [pc, #320]	; (8003898 <HAL_GPIO_DeInit+0x1b8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d007      	beq.n	800376a <HAL_GPIO_DeInit+0x8a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a4f      	ldr	r2, [pc, #316]	; (800389c <HAL_GPIO_DeInit+0x1bc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d101      	bne.n	8003766 <HAL_GPIO_DeInit+0x86>
 8003762:	2304      	movs	r3, #4
 8003764:	e008      	b.n	8003778 <HAL_GPIO_DeInit+0x98>
 8003766:	2307      	movs	r3, #7
 8003768:	e006      	b.n	8003778 <HAL_GPIO_DeInit+0x98>
 800376a:	2303      	movs	r3, #3
 800376c:	e004      	b.n	8003778 <HAL_GPIO_DeInit+0x98>
 800376e:	2302      	movs	r3, #2
 8003770:	e002      	b.n	8003778 <HAL_GPIO_DeInit+0x98>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <HAL_GPIO_DeInit+0x98>
 8003776:	2300      	movs	r3, #0
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	f002 0203 	and.w	r2, r2, #3
 800377e:	0092      	lsls	r2, r2, #2
 8003780:	4093      	lsls	r3, r2
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	429a      	cmp	r2, r3
 8003786:	d132      	bne.n	80037ee <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003788:	4b45      	ldr	r3, [pc, #276]	; (80038a0 <HAL_GPIO_DeInit+0x1c0>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	43db      	mvns	r3, r3
 8003790:	4943      	ldr	r1, [pc, #268]	; (80038a0 <HAL_GPIO_DeInit+0x1c0>)
 8003792:	4013      	ands	r3, r2
 8003794:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003796:	4b42      	ldr	r3, [pc, #264]	; (80038a0 <HAL_GPIO_DeInit+0x1c0>)
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	43db      	mvns	r3, r3
 800379e:	4940      	ldr	r1, [pc, #256]	; (80038a0 <HAL_GPIO_DeInit+0x1c0>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80037a4:	4b3e      	ldr	r3, [pc, #248]	; (80038a0 <HAL_GPIO_DeInit+0x1c0>)
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	43db      	mvns	r3, r3
 80037ac:	493c      	ldr	r1, [pc, #240]	; (80038a0 <HAL_GPIO_DeInit+0x1c0>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80037b2:	4b3b      	ldr	r3, [pc, #236]	; (80038a0 <HAL_GPIO_DeInit+0x1c0>)
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	4939      	ldr	r1, [pc, #228]	; (80038a0 <HAL_GPIO_DeInit+0x1c0>)
 80037bc:	4013      	ands	r3, r2
 80037be:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	220f      	movs	r2, #15
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80037d0:	4a2d      	ldr	r2, [pc, #180]	; (8003888 <HAL_GPIO_DeInit+0x1a8>)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	089b      	lsrs	r3, r3, #2
 80037d6:	3302      	adds	r3, #2
 80037d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	43da      	mvns	r2, r3
 80037e0:	4829      	ldr	r0, [pc, #164]	; (8003888 <HAL_GPIO_DeInit+0x1a8>)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	089b      	lsrs	r3, r3, #2
 80037e6:	400a      	ands	r2, r1
 80037e8:	3302      	adds	r3, #2
 80037ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	2103      	movs	r1, #3
 80037f8:	fa01 f303 	lsl.w	r3, r1, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	401a      	ands	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	08da      	lsrs	r2, r3, #3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3208      	adds	r2, #8
 800380c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	220f      	movs	r2, #15
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	08d2      	lsrs	r2, r2, #3
 8003824:	4019      	ands	r1, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3208      	adds	r2, #8
 800382a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	2103      	movs	r1, #3
 8003838:	fa01 f303 	lsl.w	r3, r1, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	401a      	ands	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	2101      	movs	r1, #1
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	fa01 f303 	lsl.w	r3, r1, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	401a      	ands	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	2103      	movs	r1, #3
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	43db      	mvns	r3, r3
 8003868:	401a      	ands	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	3301      	adds	r3, #1
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2b0f      	cmp	r3, #15
 8003878:	f67f af40 	bls.w	80036fc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800387c:	bf00      	nop
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	40013800 	.word	0x40013800
 800388c:	40020000 	.word	0x40020000
 8003890:	40020400 	.word	0x40020400
 8003894:	40020800 	.word	0x40020800
 8003898:	40020c00 	.word	0x40020c00
 800389c:	40021000 	.word	0x40021000
 80038a0:	40013c00 	.word	0x40013c00

080038a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	807b      	strh	r3, [r7, #2]
 80038b0:	4613      	mov	r3, r2
 80038b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038b4:	787b      	ldrb	r3, [r7, #1]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038c0:	e003      	b.n	80038ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038c2:	887b      	ldrh	r3, [r7, #2]
 80038c4:	041a      	lsls	r2, r3, #16
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	619a      	str	r2, [r3, #24]
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e11f      	b.n	8003b2a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f951 	bl	8003ba6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2224      	movs	r2, #36	; 0x24
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800392a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800393a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800393c:	f001 fc18 	bl	8005170 <HAL_RCC_GetPCLK1Freq>
 8003940:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	4a7b      	ldr	r2, [pc, #492]	; (8003b34 <HAL_I2C_Init+0x25c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d807      	bhi.n	800395c <HAL_I2C_Init+0x84>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4a7a      	ldr	r2, [pc, #488]	; (8003b38 <HAL_I2C_Init+0x260>)
 8003950:	4293      	cmp	r3, r2
 8003952:	bf94      	ite	ls
 8003954:	2301      	movls	r3, #1
 8003956:	2300      	movhi	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	e006      	b.n	800396a <HAL_I2C_Init+0x92>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a77      	ldr	r2, [pc, #476]	; (8003b3c <HAL_I2C_Init+0x264>)
 8003960:	4293      	cmp	r3, r2
 8003962:	bf94      	ite	ls
 8003964:	2301      	movls	r3, #1
 8003966:	2300      	movhi	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e0db      	b.n	8003b2a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4a72      	ldr	r2, [pc, #456]	; (8003b40 <HAL_I2C_Init+0x268>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	0c9b      	lsrs	r3, r3, #18
 800397c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4a64      	ldr	r2, [pc, #400]	; (8003b34 <HAL_I2C_Init+0x25c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d802      	bhi.n	80039ac <HAL_I2C_Init+0xd4>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	3301      	adds	r3, #1
 80039aa:	e009      	b.n	80039c0 <HAL_I2C_Init+0xe8>
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
 80039b6:	4a63      	ldr	r2, [pc, #396]	; (8003b44 <HAL_I2C_Init+0x26c>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	099b      	lsrs	r3, r3, #6
 80039be:	3301      	adds	r3, #1
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	430b      	orrs	r3, r1
 80039c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4956      	ldr	r1, [pc, #344]	; (8003b34 <HAL_I2C_Init+0x25c>)
 80039dc:	428b      	cmp	r3, r1
 80039de:	d80d      	bhi.n	80039fc <HAL_I2C_Init+0x124>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1e59      	subs	r1, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ee:	3301      	adds	r3, #1
 80039f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	bf38      	it	cc
 80039f8:	2304      	movcc	r3, #4
 80039fa:	e04f      	b.n	8003a9c <HAL_I2C_Init+0x1c4>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d111      	bne.n	8003a28 <HAL_I2C_Init+0x150>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1e58      	subs	r0, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	440b      	add	r3, r1
 8003a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a16:	3301      	adds	r3, #1
 8003a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf0c      	ite	eq
 8003a20:	2301      	moveq	r3, #1
 8003a22:	2300      	movne	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	e012      	b.n	8003a4e <HAL_I2C_Init+0x176>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1e58      	subs	r0, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	0099      	lsls	r1, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Init+0x17e>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e022      	b.n	8003a9c <HAL_I2C_Init+0x1c4>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10e      	bne.n	8003a7c <HAL_I2C_Init+0x1a4>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1e58      	subs	r0, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	460b      	mov	r3, r1
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	440b      	add	r3, r1
 8003a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a70:	3301      	adds	r3, #1
 8003a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a7a:	e00f      	b.n	8003a9c <HAL_I2C_Init+0x1c4>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1e58      	subs	r0, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6859      	ldr	r1, [r3, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	0099      	lsls	r1, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a92:	3301      	adds	r3, #1
 8003a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	6809      	ldr	r1, [r1, #0]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69da      	ldr	r2, [r3, #28]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003aca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6911      	ldr	r1, [r2, #16]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68d2      	ldr	r2, [r2, #12]
 8003ad6:	4311      	orrs	r1, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	000186a0 	.word	0x000186a0
 8003b38:	001e847f 	.word	0x001e847f
 8003b3c:	003d08ff 	.word	0x003d08ff
 8003b40:	431bde83 	.word	0x431bde83
 8003b44:	10624dd3 	.word	0x10624dd3

08003b48 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e021      	b.n	8003b9e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2224      	movs	r2, #36	; 0x24
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f821 	bl	8003bba <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
	...

08003bd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	4608      	mov	r0, r1
 8003bda:	4611      	mov	r1, r2
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4603      	mov	r3, r0
 8003be0:	817b      	strh	r3, [r7, #10]
 8003be2:	460b      	mov	r3, r1
 8003be4:	813b      	strh	r3, [r7, #8]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bea:	f7ff fb09 	bl	8003200 <HAL_GetTick>
 8003bee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	f040 80d9 	bne.w	8003db0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	2319      	movs	r3, #25
 8003c04:	2201      	movs	r2, #1
 8003c06:	496d      	ldr	r1, [pc, #436]	; (8003dbc <HAL_I2C_Mem_Write+0x1ec>)
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 fc99 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
 8003c16:	e0cc      	b.n	8003db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <HAL_I2C_Mem_Write+0x56>
 8003c22:	2302      	movs	r3, #2
 8003c24:	e0c5      	b.n	8003db2 <HAL_I2C_Mem_Write+0x1e2>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d007      	beq.n	8003c4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2221      	movs	r2, #33	; 0x21
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2240      	movs	r2, #64	; 0x40
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a3a      	ldr	r2, [r7, #32]
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4a4d      	ldr	r2, [pc, #308]	; (8003dc0 <HAL_I2C_Mem_Write+0x1f0>)
 8003c8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c8e:	88f8      	ldrh	r0, [r7, #6]
 8003c90:	893a      	ldrh	r2, [r7, #8]
 8003c92:	8979      	ldrh	r1, [r7, #10]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 fad0 	bl	8004244 <I2C_RequestMemoryWrite>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d052      	beq.n	8003d50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e081      	b.n	8003db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fd1a 	bl	80046ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00d      	beq.n	8003cda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d107      	bne.n	8003cd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e06b      	b.n	8003db2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	781a      	ldrb	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d11b      	bne.n	8003d50 <HAL_I2C_Mem_Write+0x180>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d017      	beq.n	8003d50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	781a      	ldrb	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1aa      	bne.n	8003cae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fd06 	bl	800476e <I2C_WaitOnBTFFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00d      	beq.n	8003d84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d107      	bne.n	8003d80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e016      	b.n	8003db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	e000      	b.n	8003db2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003db0:	2302      	movs	r3, #2
  }
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	00100002 	.word	0x00100002
 8003dc0:	ffff0000 	.word	0xffff0000

08003dc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08c      	sub	sp, #48	; 0x30
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	4608      	mov	r0, r1
 8003dce:	4611      	mov	r1, r2
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	817b      	strh	r3, [r7, #10]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	813b      	strh	r3, [r7, #8]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dde:	f7ff fa0f 	bl	8003200 <HAL_GetTick>
 8003de2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	f040 8208 	bne.w	8004202 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	2319      	movs	r3, #25
 8003df8:	2201      	movs	r2, #1
 8003dfa:	497b      	ldr	r1, [pc, #492]	; (8003fe8 <HAL_I2C_Mem_Read+0x224>)
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fb9f 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e1fb      	b.n	8004204 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_I2C_Mem_Read+0x56>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e1f4      	b.n	8004204 <HAL_I2C_Mem_Read+0x440>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d007      	beq.n	8003e40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2222      	movs	r2, #34	; 0x22
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2240      	movs	r2, #64	; 0x40
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4a5b      	ldr	r2, [pc, #364]	; (8003fec <HAL_I2C_Mem_Read+0x228>)
 8003e80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e82:	88f8      	ldrh	r0, [r7, #6]
 8003e84:	893a      	ldrh	r2, [r7, #8]
 8003e86:	8979      	ldrh	r1, [r7, #10]
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	9301      	str	r3, [sp, #4]
 8003e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	4603      	mov	r3, r0
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fa6c 	bl	8004370 <I2C_RequestMemoryRead>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e1b0      	b.n	8004204 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d113      	bne.n	8003ed2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	623b      	str	r3, [r7, #32]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	623b      	str	r3, [r7, #32]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	623b      	str	r3, [r7, #32]
 8003ebe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	e184      	b.n	80041dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d11b      	bne.n	8003f12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ee8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	e164      	b.n	80041dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d11b      	bne.n	8003f52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	e144      	b.n	80041dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f68:	e138      	b.n	80041dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	f200 80f1 	bhi.w	8004156 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d123      	bne.n	8003fc4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fc35 	bl	80047f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e139      	b.n	8004204 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fc2:	e10b      	b.n	80041dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d14e      	bne.n	800406a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	4906      	ldr	r1, [pc, #24]	; (8003ff0 <HAL_I2C_Mem_Read+0x22c>)
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 fab2 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d008      	beq.n	8003ff4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e10e      	b.n	8004204 <HAL_I2C_Mem_Read+0x440>
 8003fe6:	bf00      	nop
 8003fe8:	00100002 	.word	0x00100002
 8003fec:	ffff0000 	.word	0xffff0000
 8003ff0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004068:	e0b8      	b.n	80041dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004070:	2200      	movs	r2, #0
 8004072:	4966      	ldr	r1, [pc, #408]	; (800420c <HAL_I2C_Mem_Read+0x448>)
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fa63 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0bf      	b.n	8004204 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040cc:	2200      	movs	r2, #0
 80040ce:	494f      	ldr	r1, [pc, #316]	; (800420c <HAL_I2C_Mem_Read+0x448>)
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fa35 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e091      	b.n	8004204 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004154:	e042      	b.n	80041dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004158:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 fb48 	bl	80047f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e04c      	b.n	8004204 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d118      	bne.n	80041dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f47f aec2 	bne.w	8003f6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	e000      	b.n	8004204 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004202:	2302      	movs	r3, #2
  }
}
 8004204:	4618      	mov	r0, r3
 8004206:	3728      	adds	r7, #40	; 0x28
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	00010004 	.word	0x00010004

08004210 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421e:	b2db      	uxtb	r3, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	4608      	mov	r0, r1
 800424e:	4611      	mov	r1, r2
 8004250:	461a      	mov	r2, r3
 8004252:	4603      	mov	r3, r0
 8004254:	817b      	strh	r3, [r7, #10]
 8004256:	460b      	mov	r3, r1
 8004258:	813b      	strh	r3, [r7, #8]
 800425a:	4613      	mov	r3, r2
 800425c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800426c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	2200      	movs	r2, #0
 8004276:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f960 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00d      	beq.n	80042a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004294:	d103      	bne.n	800429e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800429c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e05f      	b.n	8004362 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042a2:	897b      	ldrh	r3, [r7, #10]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	6a3a      	ldr	r2, [r7, #32]
 80042b6:	492d      	ldr	r1, [pc, #180]	; (800436c <I2C_RequestMemoryWrite+0x128>)
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f998 	bl	80045ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e04c      	b.n	8004362 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e0:	6a39      	ldr	r1, [r7, #32]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 fa02 	bl	80046ec <I2C_WaitOnTXEFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00d      	beq.n	800430a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d107      	bne.n	8004306 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004304:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e02b      	b.n	8004362 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d105      	bne.n	800431c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004310:	893b      	ldrh	r3, [r7, #8]
 8004312:	b2da      	uxtb	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	611a      	str	r2, [r3, #16]
 800431a:	e021      	b.n	8004360 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800431c:	893b      	ldrh	r3, [r7, #8]
 800431e:	0a1b      	lsrs	r3, r3, #8
 8004320:	b29b      	uxth	r3, r3
 8004322:	b2da      	uxtb	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800432a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432c:	6a39      	ldr	r1, [r7, #32]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f9dc 	bl	80046ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	2b04      	cmp	r3, #4
 8004340:	d107      	bne.n	8004352 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004350:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e005      	b.n	8004362 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004356:	893b      	ldrh	r3, [r7, #8]
 8004358:	b2da      	uxtb	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	00010002 	.word	0x00010002

08004370 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	4608      	mov	r0, r1
 800437a:	4611      	mov	r1, r2
 800437c:	461a      	mov	r2, r3
 800437e:	4603      	mov	r3, r0
 8004380:	817b      	strh	r3, [r7, #10]
 8004382:	460b      	mov	r3, r1
 8004384:	813b      	strh	r3, [r7, #8]
 8004386:	4613      	mov	r3, r2
 8004388:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004398:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f8c2 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00d      	beq.n	80043de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d0:	d103      	bne.n	80043da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e0aa      	b.n	8004534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043de:	897b      	ldrh	r3, [r7, #10]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	6a3a      	ldr	r2, [r7, #32]
 80043f2:	4952      	ldr	r1, [pc, #328]	; (800453c <I2C_RequestMemoryRead+0x1cc>)
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f8fa 	bl	80045ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e097      	b.n	8004534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800441a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441c:	6a39      	ldr	r1, [r7, #32]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f964 	bl	80046ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	2b04      	cmp	r3, #4
 8004430:	d107      	bne.n	8004442 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004440:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e076      	b.n	8004534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d105      	bne.n	8004458 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800444c:	893b      	ldrh	r3, [r7, #8]
 800444e:	b2da      	uxtb	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	611a      	str	r2, [r3, #16]
 8004456:	e021      	b.n	800449c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004458:	893b      	ldrh	r3, [r7, #8]
 800445a:	0a1b      	lsrs	r3, r3, #8
 800445c:	b29b      	uxth	r3, r3
 800445e:	b2da      	uxtb	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004468:	6a39      	ldr	r1, [r7, #32]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f93e 	bl	80046ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00d      	beq.n	8004492 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	2b04      	cmp	r3, #4
 800447c:	d107      	bne.n	800448e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800448c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e050      	b.n	8004534 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004492:	893b      	ldrh	r3, [r7, #8]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800449c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449e:	6a39      	ldr	r1, [r7, #32]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f923 	bl	80046ec <I2C_WaitOnTXEFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00d      	beq.n	80044c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d107      	bne.n	80044c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e035      	b.n	8004534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	2200      	movs	r2, #0
 80044e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f82b 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00d      	beq.n	800450c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fe:	d103      	bne.n	8004508 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004506:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e013      	b.n	8004534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800450c:	897b      	ldrh	r3, [r7, #10]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	b2da      	uxtb	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	6a3a      	ldr	r2, [r7, #32]
 8004520:	4906      	ldr	r1, [pc, #24]	; (800453c <I2C_RequestMemoryRead+0x1cc>)
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f863 	bl	80045ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	00010002 	.word	0x00010002

08004540 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004550:	e025      	b.n	800459e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d021      	beq.n	800459e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455a:	f7fe fe51 	bl	8003200 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <I2C_WaitOnFlagUntilTimeout+0x30>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d116      	bne.n	800459e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f043 0220 	orr.w	r2, r3, #32
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e023      	b.n	80045e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	0c1b      	lsrs	r3, r3, #16
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d10d      	bne.n	80045c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	43da      	mvns	r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4013      	ands	r3, r2
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bf0c      	ite	eq
 80045ba:	2301      	moveq	r3, #1
 80045bc:	2300      	movne	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	e00c      	b.n	80045de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	43da      	mvns	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4013      	ands	r3, r2
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	bf0c      	ite	eq
 80045d6:	2301      	moveq	r3, #1
 80045d8:	2300      	movne	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d0b6      	beq.n	8004552 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
 80045fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045fc:	e051      	b.n	80046a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800460c:	d123      	bne.n	8004656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800461c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004626:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f043 0204 	orr.w	r2, r3, #4
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e046      	b.n	80046e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d021      	beq.n	80046a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465e:	f7fe fdcf 	bl	8003200 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	429a      	cmp	r2, r3
 800466c:	d302      	bcc.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d116      	bne.n	80046a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f043 0220 	orr.w	r2, r3, #32
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e020      	b.n	80046e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	0c1b      	lsrs	r3, r3, #16
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d10c      	bne.n	80046c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	43da      	mvns	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4013      	ands	r3, r2
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bf14      	ite	ne
 80046be:	2301      	movne	r3, #1
 80046c0:	2300      	moveq	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	e00b      	b.n	80046de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	43da      	mvns	r2, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4013      	ands	r3, r2
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	bf14      	ite	ne
 80046d8:	2301      	movne	r3, #1
 80046da:	2300      	moveq	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d18d      	bne.n	80045fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046f8:	e02d      	b.n	8004756 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f8ce 	bl	800489c <I2C_IsAcknowledgeFailed>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e02d      	b.n	8004766 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d021      	beq.n	8004756 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004712:	f7fe fd75 	bl	8003200 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	429a      	cmp	r2, r3
 8004720:	d302      	bcc.n	8004728 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d116      	bne.n	8004756 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f043 0220 	orr.w	r2, r3, #32
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e007      	b.n	8004766 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004760:	2b80      	cmp	r3, #128	; 0x80
 8004762:	d1ca      	bne.n	80046fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800477a:	e02d      	b.n	80047d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f88d 	bl	800489c <I2C_IsAcknowledgeFailed>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e02d      	b.n	80047e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004792:	d021      	beq.n	80047d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004794:	f7fe fd34 	bl	8003200 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d302      	bcc.n	80047aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d116      	bne.n	80047d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e007      	b.n	80047e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d1ca      	bne.n	800477c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047fc:	e042      	b.n	8004884 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b10      	cmp	r3, #16
 800480a:	d119      	bne.n	8004840 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0210 	mvn.w	r2, #16
 8004814:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e029      	b.n	8004894 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004840:	f7fe fcde 	bl	8003200 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	429a      	cmp	r2, r3
 800484e:	d302      	bcc.n	8004856 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d116      	bne.n	8004884 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	f043 0220 	orr.w	r2, r3, #32
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e007      	b.n	8004894 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488e:	2b40      	cmp	r3, #64	; 0x40
 8004890:	d1b5      	bne.n	80047fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b2:	d11b      	bne.n	80048ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	f043 0204 	orr.w	r2, r3, #4
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e25b      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d075      	beq.n	8004a06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800491a:	4ba3      	ldr	r3, [pc, #652]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b04      	cmp	r3, #4
 8004924:	d00c      	beq.n	8004940 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004926:	4ba0      	ldr	r3, [pc, #640]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800492e:	2b08      	cmp	r3, #8
 8004930:	d112      	bne.n	8004958 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004932:	4b9d      	ldr	r3, [pc, #628]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800493e:	d10b      	bne.n	8004958 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004940:	4b99      	ldr	r3, [pc, #612]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d05b      	beq.n	8004a04 <HAL_RCC_OscConfig+0x108>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d157      	bne.n	8004a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e236      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004960:	d106      	bne.n	8004970 <HAL_RCC_OscConfig+0x74>
 8004962:	4b91      	ldr	r3, [pc, #580]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a90      	ldr	r2, [pc, #576]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	e01d      	b.n	80049ac <HAL_RCC_OscConfig+0xb0>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004978:	d10c      	bne.n	8004994 <HAL_RCC_OscConfig+0x98>
 800497a:	4b8b      	ldr	r3, [pc, #556]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a8a      	ldr	r2, [pc, #552]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	4b88      	ldr	r3, [pc, #544]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a87      	ldr	r2, [pc, #540]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 800498c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	e00b      	b.n	80049ac <HAL_RCC_OscConfig+0xb0>
 8004994:	4b84      	ldr	r3, [pc, #528]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a83      	ldr	r2, [pc, #524]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 800499a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	4b81      	ldr	r3, [pc, #516]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a80      	ldr	r2, [pc, #512]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 80049a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d013      	beq.n	80049dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b4:	f7fe fc24 	bl	8003200 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049bc:	f7fe fc20 	bl	8003200 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b64      	cmp	r3, #100	; 0x64
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e1fb      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ce:	4b76      	ldr	r3, [pc, #472]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0xc0>
 80049da:	e014      	b.n	8004a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049dc:	f7fe fc10 	bl	8003200 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e4:	f7fe fc0c 	bl	8003200 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b64      	cmp	r3, #100	; 0x64
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e1e7      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f6:	4b6c      	ldr	r3, [pc, #432]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0xe8>
 8004a02:	e000      	b.n	8004a06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d063      	beq.n	8004ada <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a12:	4b65      	ldr	r3, [pc, #404]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 030c 	and.w	r3, r3, #12
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a1e:	4b62      	ldr	r3, [pc, #392]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d11c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a2a:	4b5f      	ldr	r3, [pc, #380]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d116      	bne.n	8004a64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a36:	4b5c      	ldr	r3, [pc, #368]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <HAL_RCC_OscConfig+0x152>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d001      	beq.n	8004a4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e1bb      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a4e:	4b56      	ldr	r3, [pc, #344]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4952      	ldr	r1, [pc, #328]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a62:	e03a      	b.n	8004ada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d020      	beq.n	8004aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a6c:	4b4f      	ldr	r3, [pc, #316]	; (8004bac <HAL_RCC_OscConfig+0x2b0>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a72:	f7fe fbc5 	bl	8003200 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a7a:	f7fe fbc1 	bl	8003200 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e19c      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8c:	4b46      	ldr	r3, [pc, #280]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a98:	4b43      	ldr	r3, [pc, #268]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	4940      	ldr	r1, [pc, #256]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	600b      	str	r3, [r1, #0]
 8004aac:	e015      	b.n	8004ada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aae:	4b3f      	ldr	r3, [pc, #252]	; (8004bac <HAL_RCC_OscConfig+0x2b0>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fe fba4 	bl	8003200 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004abc:	f7fe fba0 	bl	8003200 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e17b      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ace:	4b36      	ldr	r3, [pc, #216]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d030      	beq.n	8004b48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d016      	beq.n	8004b1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aee:	4b30      	ldr	r3, [pc, #192]	; (8004bb0 <HAL_RCC_OscConfig+0x2b4>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fe fb84 	bl	8003200 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004afc:	f7fe fb80 	bl	8003200 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e15b      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b0e:	4b26      	ldr	r3, [pc, #152]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f0      	beq.n	8004afc <HAL_RCC_OscConfig+0x200>
 8004b1a:	e015      	b.n	8004b48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b1c:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <HAL_RCC_OscConfig+0x2b4>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b22:	f7fe fb6d 	bl	8003200 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b2a:	f7fe fb69 	bl	8003200 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e144      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f0      	bne.n	8004b2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 80a0 	beq.w	8004c96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b56:	2300      	movs	r3, #0
 8004b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b5a:	4b13      	ldr	r3, [pc, #76]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10f      	bne.n	8004b86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b66:	2300      	movs	r3, #0
 8004b68:	60bb      	str	r3, [r7, #8]
 8004b6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b74:	6413      	str	r3, [r2, #64]	; 0x40
 8004b76:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	60bb      	str	r3, [r7, #8]
 8004b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b82:	2301      	movs	r3, #1
 8004b84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_RCC_OscConfig+0x2b8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d121      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b92:	4b08      	ldr	r3, [pc, #32]	; (8004bb4 <HAL_RCC_OscConfig+0x2b8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a07      	ldr	r2, [pc, #28]	; (8004bb4 <HAL_RCC_OscConfig+0x2b8>)
 8004b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b9e:	f7fe fb2f 	bl	8003200 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba4:	e011      	b.n	8004bca <HAL_RCC_OscConfig+0x2ce>
 8004ba6:	bf00      	nop
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	42470000 	.word	0x42470000
 8004bb0:	42470e80 	.word	0x42470e80
 8004bb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb8:	f7fe fb22 	bl	8003200 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e0fd      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bca:	4b81      	ldr	r3, [pc, #516]	; (8004dd0 <HAL_RCC_OscConfig+0x4d4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d106      	bne.n	8004bec <HAL_RCC_OscConfig+0x2f0>
 8004bde:	4b7d      	ldr	r3, [pc, #500]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	4a7c      	ldr	r2, [pc, #496]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bea:	e01c      	b.n	8004c26 <HAL_RCC_OscConfig+0x32a>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b05      	cmp	r3, #5
 8004bf2:	d10c      	bne.n	8004c0e <HAL_RCC_OscConfig+0x312>
 8004bf4:	4b77      	ldr	r3, [pc, #476]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf8:	4a76      	ldr	r2, [pc, #472]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004bfa:	f043 0304 	orr.w	r3, r3, #4
 8004bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004c00:	4b74      	ldr	r3, [pc, #464]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c04:	4a73      	ldr	r2, [pc, #460]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c0c:	e00b      	b.n	8004c26 <HAL_RCC_OscConfig+0x32a>
 8004c0e:	4b71      	ldr	r3, [pc, #452]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	4a70      	ldr	r2, [pc, #448]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1a:	4b6e      	ldr	r3, [pc, #440]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1e:	4a6d      	ldr	r2, [pc, #436]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004c20:	f023 0304 	bic.w	r3, r3, #4
 8004c24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d015      	beq.n	8004c5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2e:	f7fe fae7 	bl	8003200 <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c34:	e00a      	b.n	8004c4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c36:	f7fe fae3 	bl	8003200 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e0bc      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4c:	4b61      	ldr	r3, [pc, #388]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0ee      	beq.n	8004c36 <HAL_RCC_OscConfig+0x33a>
 8004c58:	e014      	b.n	8004c84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c5a:	f7fe fad1 	bl	8003200 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c60:	e00a      	b.n	8004c78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c62:	f7fe facd 	bl	8003200 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e0a6      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c78:	4b56      	ldr	r3, [pc, #344]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1ee      	bne.n	8004c62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d105      	bne.n	8004c96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c8a:	4b52      	ldr	r3, [pc, #328]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	4a51      	ldr	r2, [pc, #324]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8092 	beq.w	8004dc4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ca0:	4b4c      	ldr	r3, [pc, #304]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 030c 	and.w	r3, r3, #12
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d05c      	beq.n	8004d66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d141      	bne.n	8004d38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb4:	4b48      	ldr	r3, [pc, #288]	; (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cba:	f7fe faa1 	bl	8003200 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc2:	f7fe fa9d 	bl	8003200 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e078      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd4:	4b3f      	ldr	r3, [pc, #252]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1f0      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69da      	ldr	r2, [r3, #28]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	019b      	lsls	r3, r3, #6
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	085b      	lsrs	r3, r3, #1
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	4933      	ldr	r1, [pc, #204]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d0a:	4b33      	ldr	r3, [pc, #204]	; (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7fe fa76 	bl	8003200 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d18:	f7fe fa72 	bl	8003200 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e04d      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2a:	4b2a      	ldr	r3, [pc, #168]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0x41c>
 8004d36:	e045      	b.n	8004dc4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d38:	4b27      	ldr	r3, [pc, #156]	; (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3e:	f7fe fa5f 	bl	8003200 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d46:	f7fe fa5b 	bl	8003200 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e036      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d58:	4b1e      	ldr	r3, [pc, #120]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1f0      	bne.n	8004d46 <HAL_RCC_OscConfig+0x44a>
 8004d64:	e02e      	b.n	8004dc4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e029      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d72:	4b18      	ldr	r3, [pc, #96]	; (8004dd4 <HAL_RCC_OscConfig+0x4d8>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d11c      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d115      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d10d      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d106      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d001      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40007000 	.word	0x40007000
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	42470060 	.word	0x42470060

08004ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0cc      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004df0:	4b68      	ldr	r3, [pc, #416]	; (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d90c      	bls.n	8004e18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfe:	4b65      	ldr	r3, [pc, #404]	; (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e06:	4b63      	ldr	r3, [pc, #396]	; (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0b8      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d020      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d005      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e30:	4b59      	ldr	r3, [pc, #356]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	4a58      	ldr	r2, [pc, #352]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d005      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e48:	4b53      	ldr	r3, [pc, #332]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	4a52      	ldr	r2, [pc, #328]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e54:	4b50      	ldr	r3, [pc, #320]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	494d      	ldr	r1, [pc, #308]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d044      	beq.n	8004efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d107      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7a:	4b47      	ldr	r3, [pc, #284]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d119      	bne.n	8004eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e07f      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d003      	beq.n	8004e9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d107      	bne.n	8004eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e9a:	4b3f      	ldr	r3, [pc, #252]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d109      	bne.n	8004eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e06f      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eaa:	4b3b      	ldr	r3, [pc, #236]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e067      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eba:	4b37      	ldr	r3, [pc, #220]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f023 0203 	bic.w	r2, r3, #3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4934      	ldr	r1, [pc, #208]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ecc:	f7fe f998 	bl	8003200 <HAL_GetTick>
 8004ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed2:	e00a      	b.n	8004eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed4:	f7fe f994 	bl	8003200 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e04f      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eea:	4b2b      	ldr	r3, [pc, #172]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 020c 	and.w	r2, r3, #12
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d1eb      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004efc:	4b25      	ldr	r3, [pc, #148]	; (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d20c      	bcs.n	8004f24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0a:	4b22      	ldr	r3, [pc, #136]	; (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f12:	4b20      	ldr	r3, [pc, #128]	; (8004f94 <HAL_RCC_ClockConfig+0x1b8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d001      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e032      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f30:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4916      	ldr	r1, [pc, #88]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f4e:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	490e      	ldr	r1, [pc, #56]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f62:	f000 f821 	bl	8004fa8 <HAL_RCC_GetSysClockFreq>
 8004f66:	4601      	mov	r1, r0
 8004f68:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	091b      	lsrs	r3, r3, #4
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	4a0a      	ldr	r2, [pc, #40]	; (8004f9c <HAL_RCC_ClockConfig+0x1c0>)
 8004f74:	5cd3      	ldrb	r3, [r2, r3]
 8004f76:	fa21 f303 	lsr.w	r3, r1, r3
 8004f7a:	4a09      	ldr	r2, [pc, #36]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f7e:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fb fd9e 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40023c00 	.word	0x40023c00
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	0800a624 	.word	0x0800a624
 8004fa0:	20000020 	.word	0x20000020
 8004fa4:	20000094 	.word	0x20000094

08004fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	607b      	str	r3, [r7, #4]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fbe:	4b63      	ldr	r3, [pc, #396]	; (800514c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d007      	beq.n	8004fda <HAL_RCC_GetSysClockFreq+0x32>
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d008      	beq.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x38>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f040 80b4 	bne.w	800513c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fd4:	4b5e      	ldr	r3, [pc, #376]	; (8005150 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004fd6:	60bb      	str	r3, [r7, #8]
       break;
 8004fd8:	e0b3      	b.n	8005142 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fda:	4b5e      	ldr	r3, [pc, #376]	; (8005154 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004fdc:	60bb      	str	r3, [r7, #8]
      break;
 8004fde:	e0b0      	b.n	8005142 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fe0:	4b5a      	ldr	r3, [pc, #360]	; (800514c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fe8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fea:	4b58      	ldr	r3, [pc, #352]	; (800514c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d04a      	beq.n	800508c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ff6:	4b55      	ldr	r3, [pc, #340]	; (800514c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	099b      	lsrs	r3, r3, #6
 8004ffc:	f04f 0400 	mov.w	r4, #0
 8005000:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	ea03 0501 	and.w	r5, r3, r1
 800500c:	ea04 0602 	and.w	r6, r4, r2
 8005010:	4629      	mov	r1, r5
 8005012:	4632      	mov	r2, r6
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	f04f 0400 	mov.w	r4, #0
 800501c:	0154      	lsls	r4, r2, #5
 800501e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005022:	014b      	lsls	r3, r1, #5
 8005024:	4619      	mov	r1, r3
 8005026:	4622      	mov	r2, r4
 8005028:	1b49      	subs	r1, r1, r5
 800502a:	eb62 0206 	sbc.w	r2, r2, r6
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	f04f 0400 	mov.w	r4, #0
 8005036:	0194      	lsls	r4, r2, #6
 8005038:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800503c:	018b      	lsls	r3, r1, #6
 800503e:	1a5b      	subs	r3, r3, r1
 8005040:	eb64 0402 	sbc.w	r4, r4, r2
 8005044:	f04f 0100 	mov.w	r1, #0
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	00e2      	lsls	r2, r4, #3
 800504e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005052:	00d9      	lsls	r1, r3, #3
 8005054:	460b      	mov	r3, r1
 8005056:	4614      	mov	r4, r2
 8005058:	195b      	adds	r3, r3, r5
 800505a:	eb44 0406 	adc.w	r4, r4, r6
 800505e:	f04f 0100 	mov.w	r1, #0
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	0262      	lsls	r2, r4, #9
 8005068:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800506c:	0259      	lsls	r1, r3, #9
 800506e:	460b      	mov	r3, r1
 8005070:	4614      	mov	r4, r2
 8005072:	4618      	mov	r0, r3
 8005074:	4621      	mov	r1, r4
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f04f 0400 	mov.w	r4, #0
 800507c:	461a      	mov	r2, r3
 800507e:	4623      	mov	r3, r4
 8005080:	f7fb f8fe 	bl	8000280 <__aeabi_uldivmod>
 8005084:	4603      	mov	r3, r0
 8005086:	460c      	mov	r4, r1
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	e049      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800508c:	4b2f      	ldr	r3, [pc, #188]	; (800514c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	099b      	lsrs	r3, r3, #6
 8005092:	f04f 0400 	mov.w	r4, #0
 8005096:	f240 11ff 	movw	r1, #511	; 0x1ff
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	ea03 0501 	and.w	r5, r3, r1
 80050a2:	ea04 0602 	and.w	r6, r4, r2
 80050a6:	4629      	mov	r1, r5
 80050a8:	4632      	mov	r2, r6
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	f04f 0400 	mov.w	r4, #0
 80050b2:	0154      	lsls	r4, r2, #5
 80050b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050b8:	014b      	lsls	r3, r1, #5
 80050ba:	4619      	mov	r1, r3
 80050bc:	4622      	mov	r2, r4
 80050be:	1b49      	subs	r1, r1, r5
 80050c0:	eb62 0206 	sbc.w	r2, r2, r6
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	f04f 0400 	mov.w	r4, #0
 80050cc:	0194      	lsls	r4, r2, #6
 80050ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80050d2:	018b      	lsls	r3, r1, #6
 80050d4:	1a5b      	subs	r3, r3, r1
 80050d6:	eb64 0402 	sbc.w	r4, r4, r2
 80050da:	f04f 0100 	mov.w	r1, #0
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	00e2      	lsls	r2, r4, #3
 80050e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050e8:	00d9      	lsls	r1, r3, #3
 80050ea:	460b      	mov	r3, r1
 80050ec:	4614      	mov	r4, r2
 80050ee:	195b      	adds	r3, r3, r5
 80050f0:	eb44 0406 	adc.w	r4, r4, r6
 80050f4:	f04f 0100 	mov.w	r1, #0
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	02a2      	lsls	r2, r4, #10
 80050fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005102:	0299      	lsls	r1, r3, #10
 8005104:	460b      	mov	r3, r1
 8005106:	4614      	mov	r4, r2
 8005108:	4618      	mov	r0, r3
 800510a:	4621      	mov	r1, r4
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f04f 0400 	mov.w	r4, #0
 8005112:	461a      	mov	r2, r3
 8005114:	4623      	mov	r3, r4
 8005116:	f7fb f8b3 	bl	8000280 <__aeabi_uldivmod>
 800511a:	4603      	mov	r3, r0
 800511c:	460c      	mov	r4, r1
 800511e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005120:	4b0a      	ldr	r3, [pc, #40]	; (800514c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	0c1b      	lsrs	r3, r3, #16
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	3301      	adds	r3, #1
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	fbb2 f3f3 	udiv	r3, r2, r3
 8005138:	60bb      	str	r3, [r7, #8]
      break;
 800513a:	e002      	b.n	8005142 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800513c:	4b04      	ldr	r3, [pc, #16]	; (8005150 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800513e:	60bb      	str	r3, [r7, #8]
      break;
 8005140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005142:	68bb      	ldr	r3, [r7, #8]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800514c:	40023800 	.word	0x40023800
 8005150:	00f42400 	.word	0x00f42400
 8005154:	007a1200 	.word	0x007a1200

08005158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800515c:	4b03      	ldr	r3, [pc, #12]	; (800516c <HAL_RCC_GetHCLKFreq+0x14>)
 800515e:	681b      	ldr	r3, [r3, #0]
}
 8005160:	4618      	mov	r0, r3
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	20000020 	.word	0x20000020

08005170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005174:	f7ff fff0 	bl	8005158 <HAL_RCC_GetHCLKFreq>
 8005178:	4601      	mov	r1, r0
 800517a:	4b05      	ldr	r3, [pc, #20]	; (8005190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	0a9b      	lsrs	r3, r3, #10
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	4a03      	ldr	r2, [pc, #12]	; (8005194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005186:	5cd3      	ldrb	r3, [r2, r3]
 8005188:	fa21 f303 	lsr.w	r3, r1, r3
}
 800518c:	4618      	mov	r0, r3
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40023800 	.word	0x40023800
 8005194:	0800a634 	.word	0x0800a634

08005198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800519c:	f7ff ffdc 	bl	8005158 <HAL_RCC_GetHCLKFreq>
 80051a0:	4601      	mov	r1, r0
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	0b5b      	lsrs	r3, r3, #13
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	4a03      	ldr	r2, [pc, #12]	; (80051bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ae:	5cd3      	ldrb	r3, [r2, r3]
 80051b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40023800 	.word	0x40023800
 80051bc:	0800a634 	.word	0x0800a634

080051c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	220f      	movs	r2, #15
 80051ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051d0:	4b12      	ldr	r3, [pc, #72]	; (800521c <HAL_RCC_GetClockConfig+0x5c>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 0203 	and.w	r2, r3, #3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051dc:	4b0f      	ldr	r3, [pc, #60]	; (800521c <HAL_RCC_GetClockConfig+0x5c>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051e8:	4b0c      	ldr	r3, [pc, #48]	; (800521c <HAL_RCC_GetClockConfig+0x5c>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80051f4:	4b09      	ldr	r3, [pc, #36]	; (800521c <HAL_RCC_GetClockConfig+0x5c>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	08db      	lsrs	r3, r3, #3
 80051fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005202:	4b07      	ldr	r3, [pc, #28]	; (8005220 <HAL_RCC_GetClockConfig+0x60>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 020f 	and.w	r2, r3, #15
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	601a      	str	r2, [r3, #0]
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40023800 	.word	0x40023800
 8005220:	40023c00 	.word	0x40023c00

08005224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e01d      	b.n	8005272 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f815 	bl	800527a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3304      	adds	r3, #4
 8005260:	4619      	mov	r1, r3
 8005262:	4610      	mov	r0, r2
 8005264:	f000 f968 	bl	8005538 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b06      	cmp	r3, #6
 80052b6:	d007      	beq.n	80052c8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d122      	bne.n	8005332 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d11b      	bne.n	8005332 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f06f 0202 	mvn.w	r2, #2
 8005302:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f8ee 	bl	80054fa <HAL_TIM_IC_CaptureCallback>
 800531e:	e005      	b.n	800532c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f8e0 	bl	80054e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f8f1 	bl	800550e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b04      	cmp	r3, #4
 800533e:	d122      	bne.n	8005386 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b04      	cmp	r3, #4
 800534c:	d11b      	bne.n	8005386 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f06f 0204 	mvn.w	r2, #4
 8005356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f8c4 	bl	80054fa <HAL_TIM_IC_CaptureCallback>
 8005372:	e005      	b.n	8005380 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f8b6 	bl	80054e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f8c7 	bl	800550e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b08      	cmp	r3, #8
 8005392:	d122      	bne.n	80053da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d11b      	bne.n	80053da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f06f 0208 	mvn.w	r2, #8
 80053aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2204      	movs	r2, #4
 80053b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f89a 	bl	80054fa <HAL_TIM_IC_CaptureCallback>
 80053c6:	e005      	b.n	80053d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f88c 	bl	80054e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f89d 	bl	800550e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d122      	bne.n	800542e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b10      	cmp	r3, #16
 80053f4:	d11b      	bne.n	800542e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f06f 0210 	mvn.w	r2, #16
 80053fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2208      	movs	r2, #8
 8005404:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f870 	bl	80054fa <HAL_TIM_IC_CaptureCallback>
 800541a:	e005      	b.n	8005428 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f862 	bl	80054e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f873 	bl	800550e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b01      	cmp	r3, #1
 800543a:	d10e      	bne.n	800545a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b01      	cmp	r3, #1
 8005448:	d107      	bne.n	800545a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f06f 0201 	mvn.w	r2, #1
 8005452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7fb fa4f 	bl	80008f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005464:	2b80      	cmp	r3, #128	; 0x80
 8005466:	d10e      	bne.n	8005486 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b80      	cmp	r3, #128	; 0x80
 8005474:	d107      	bne.n	8005486 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800547e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f8e3 	bl	800564c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005490:	2b40      	cmp	r3, #64	; 0x40
 8005492:	d10e      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549e:	2b40      	cmp	r3, #64	; 0x40
 80054a0:	d107      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f838 	bl	8005522 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d10e      	bne.n	80054de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	d107      	bne.n	80054de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f06f 0220 	mvn.w	r2, #32
 80054d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f8ad 	bl	8005638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
	...

08005538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a34      	ldr	r2, [pc, #208]	; (800561c <TIM_Base_SetConfig+0xe4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00f      	beq.n	8005570 <TIM_Base_SetConfig+0x38>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005556:	d00b      	beq.n	8005570 <TIM_Base_SetConfig+0x38>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a31      	ldr	r2, [pc, #196]	; (8005620 <TIM_Base_SetConfig+0xe8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d007      	beq.n	8005570 <TIM_Base_SetConfig+0x38>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a30      	ldr	r2, [pc, #192]	; (8005624 <TIM_Base_SetConfig+0xec>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d003      	beq.n	8005570 <TIM_Base_SetConfig+0x38>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a2f      	ldr	r2, [pc, #188]	; (8005628 <TIM_Base_SetConfig+0xf0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d108      	bne.n	8005582 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a25      	ldr	r2, [pc, #148]	; (800561c <TIM_Base_SetConfig+0xe4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d01b      	beq.n	80055c2 <TIM_Base_SetConfig+0x8a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005590:	d017      	beq.n	80055c2 <TIM_Base_SetConfig+0x8a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a22      	ldr	r2, [pc, #136]	; (8005620 <TIM_Base_SetConfig+0xe8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d013      	beq.n	80055c2 <TIM_Base_SetConfig+0x8a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a21      	ldr	r2, [pc, #132]	; (8005624 <TIM_Base_SetConfig+0xec>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00f      	beq.n	80055c2 <TIM_Base_SetConfig+0x8a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a20      	ldr	r2, [pc, #128]	; (8005628 <TIM_Base_SetConfig+0xf0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00b      	beq.n	80055c2 <TIM_Base_SetConfig+0x8a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a1f      	ldr	r2, [pc, #124]	; (800562c <TIM_Base_SetConfig+0xf4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d007      	beq.n	80055c2 <TIM_Base_SetConfig+0x8a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a1e      	ldr	r2, [pc, #120]	; (8005630 <TIM_Base_SetConfig+0xf8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_Base_SetConfig+0x8a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a1d      	ldr	r2, [pc, #116]	; (8005634 <TIM_Base_SetConfig+0xfc>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d108      	bne.n	80055d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a08      	ldr	r2, [pc, #32]	; (800561c <TIM_Base_SetConfig+0xe4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d103      	bne.n	8005608 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	615a      	str	r2, [r3, #20]
}
 800560e:	bf00      	nop
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40010000 	.word	0x40010000
 8005620:	40000400 	.word	0x40000400
 8005624:	40000800 	.word	0x40000800
 8005628:	40000c00 	.word	0x40000c00
 800562c:	40014000 	.word	0x40014000
 8005630:	40014400 	.word	0x40014400
 8005634:	40014800 	.word	0x40014800

08005638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e03f      	b.n	80056f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f837 	bl	80056fa <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2224      	movs	r2, #36	; 0x24
 8005690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f915 	bl	80058d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695a      	ldr	r2, [r3, #20]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b088      	sub	sp, #32
 8005712:	af02      	add	r7, sp, #8
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	603b      	str	r3, [r7, #0]
 800571a:	4613      	mov	r3, r2
 800571c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b20      	cmp	r3, #32
 800572c:	f040 8083 	bne.w	8005836 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <HAL_UART_Transmit+0x2e>
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e07b      	b.n	8005838 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <HAL_UART_Transmit+0x40>
 800574a:	2302      	movs	r3, #2
 800574c:	e074      	b.n	8005838 <HAL_UART_Transmit+0x12a>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2221      	movs	r2, #33	; 0x21
 8005760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005764:	f7fd fd4c 	bl	8003200 <HAL_GetTick>
 8005768:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	88fa      	ldrh	r2, [r7, #6]
 800576e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	88fa      	ldrh	r2, [r7, #6]
 8005774:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800577e:	e042      	b.n	8005806 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005796:	d122      	bne.n	80057de <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2200      	movs	r2, #0
 80057a0:	2180      	movs	r1, #128	; 0x80
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 f84c 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e042      	b.n	8005838 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d103      	bne.n	80057d6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	3302      	adds	r3, #2
 80057d2:	60bb      	str	r3, [r7, #8]
 80057d4:	e017      	b.n	8005806 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	3301      	adds	r3, #1
 80057da:	60bb      	str	r3, [r7, #8]
 80057dc:	e013      	b.n	8005806 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2200      	movs	r2, #0
 80057e6:	2180      	movs	r1, #128	; 0x80
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f829 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e01f      	b.n	8005838 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	60ba      	str	r2, [r7, #8]
 80057fe:	781a      	ldrb	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1b7      	bne.n	8005780 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2200      	movs	r2, #0
 8005818:	2140      	movs	r1, #64	; 0x40
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f810 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e006      	b.n	8005838 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	e000      	b.n	8005838 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005836:	2302      	movs	r3, #2
  }
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	4613      	mov	r3, r2
 800584e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005850:	e02c      	b.n	80058ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d028      	beq.n	80058ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <UART_WaitOnFlagUntilTimeout+0x30>
 8005860:	f7fd fcce 	bl	8003200 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	429a      	cmp	r2, r3
 800586e:	d21d      	bcs.n	80058ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800587e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695a      	ldr	r2, [r3, #20]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0201 	bic.w	r2, r2, #1
 800588e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e00f      	b.n	80058cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	4013      	ands	r3, r2
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	bf0c      	ite	eq
 80058bc:	2301      	moveq	r3, #1
 80058be:	2300      	movne	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	461a      	mov	r2, r3
 80058c4:	79fb      	ldrb	r3, [r7, #7]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d0c3      	beq.n	8005852 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d8:	b085      	sub	sp, #20
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	4313      	orrs	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005916:	f023 030c 	bic.w	r3, r3, #12
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6812      	ldr	r2, [r2, #0]
 800591e:	68f9      	ldr	r1, [r7, #12]
 8005920:	430b      	orrs	r3, r1
 8005922:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005942:	f040 818b 	bne.w	8005c5c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4ac1      	ldr	r2, [pc, #772]	; (8005c50 <UART_SetConfig+0x37c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d005      	beq.n	800595c <UART_SetConfig+0x88>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4abf      	ldr	r2, [pc, #764]	; (8005c54 <UART_SetConfig+0x380>)
 8005956:	4293      	cmp	r3, r2
 8005958:	f040 80bd 	bne.w	8005ad6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800595c:	f7ff fc1c 	bl	8005198 <HAL_RCC_GetPCLK2Freq>
 8005960:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	461d      	mov	r5, r3
 8005966:	f04f 0600 	mov.w	r6, #0
 800596a:	46a8      	mov	r8, r5
 800596c:	46b1      	mov	r9, r6
 800596e:	eb18 0308 	adds.w	r3, r8, r8
 8005972:	eb49 0409 	adc.w	r4, r9, r9
 8005976:	4698      	mov	r8, r3
 8005978:	46a1      	mov	r9, r4
 800597a:	eb18 0805 	adds.w	r8, r8, r5
 800597e:	eb49 0906 	adc.w	r9, r9, r6
 8005982:	f04f 0100 	mov.w	r1, #0
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800598e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005992:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005996:	4688      	mov	r8, r1
 8005998:	4691      	mov	r9, r2
 800599a:	eb18 0005 	adds.w	r0, r8, r5
 800599e:	eb49 0106 	adc.w	r1, r9, r6
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	461d      	mov	r5, r3
 80059a8:	f04f 0600 	mov.w	r6, #0
 80059ac:	196b      	adds	r3, r5, r5
 80059ae:	eb46 0406 	adc.w	r4, r6, r6
 80059b2:	461a      	mov	r2, r3
 80059b4:	4623      	mov	r3, r4
 80059b6:	f7fa fc63 	bl	8000280 <__aeabi_uldivmod>
 80059ba:	4603      	mov	r3, r0
 80059bc:	460c      	mov	r4, r1
 80059be:	461a      	mov	r2, r3
 80059c0:	4ba5      	ldr	r3, [pc, #660]	; (8005c58 <UART_SetConfig+0x384>)
 80059c2:	fba3 2302 	umull	r2, r3, r3, r2
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	461d      	mov	r5, r3
 80059d0:	f04f 0600 	mov.w	r6, #0
 80059d4:	46a9      	mov	r9, r5
 80059d6:	46b2      	mov	sl, r6
 80059d8:	eb19 0309 	adds.w	r3, r9, r9
 80059dc:	eb4a 040a 	adc.w	r4, sl, sl
 80059e0:	4699      	mov	r9, r3
 80059e2:	46a2      	mov	sl, r4
 80059e4:	eb19 0905 	adds.w	r9, r9, r5
 80059e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80059ec:	f04f 0100 	mov.w	r1, #0
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a00:	4689      	mov	r9, r1
 8005a02:	4692      	mov	sl, r2
 8005a04:	eb19 0005 	adds.w	r0, r9, r5
 8005a08:	eb4a 0106 	adc.w	r1, sl, r6
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	461d      	mov	r5, r3
 8005a12:	f04f 0600 	mov.w	r6, #0
 8005a16:	196b      	adds	r3, r5, r5
 8005a18:	eb46 0406 	adc.w	r4, r6, r6
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4623      	mov	r3, r4
 8005a20:	f7fa fc2e 	bl	8000280 <__aeabi_uldivmod>
 8005a24:	4603      	mov	r3, r0
 8005a26:	460c      	mov	r4, r1
 8005a28:	461a      	mov	r2, r3
 8005a2a:	4b8b      	ldr	r3, [pc, #556]	; (8005c58 <UART_SetConfig+0x384>)
 8005a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	2164      	movs	r1, #100	; 0x64
 8005a34:	fb01 f303 	mul.w	r3, r1, r3
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	3332      	adds	r3, #50	; 0x32
 8005a3e:	4a86      	ldr	r2, [pc, #536]	; (8005c58 <UART_SetConfig+0x384>)
 8005a40:	fba2 2303 	umull	r2, r3, r2, r3
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a4c:	4498      	add	r8, r3
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	461d      	mov	r5, r3
 8005a52:	f04f 0600 	mov.w	r6, #0
 8005a56:	46a9      	mov	r9, r5
 8005a58:	46b2      	mov	sl, r6
 8005a5a:	eb19 0309 	adds.w	r3, r9, r9
 8005a5e:	eb4a 040a 	adc.w	r4, sl, sl
 8005a62:	4699      	mov	r9, r3
 8005a64:	46a2      	mov	sl, r4
 8005a66:	eb19 0905 	adds.w	r9, r9, r5
 8005a6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a6e:	f04f 0100 	mov.w	r1, #0
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a82:	4689      	mov	r9, r1
 8005a84:	4692      	mov	sl, r2
 8005a86:	eb19 0005 	adds.w	r0, r9, r5
 8005a8a:	eb4a 0106 	adc.w	r1, sl, r6
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	461d      	mov	r5, r3
 8005a94:	f04f 0600 	mov.w	r6, #0
 8005a98:	196b      	adds	r3, r5, r5
 8005a9a:	eb46 0406 	adc.w	r4, r6, r6
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	4623      	mov	r3, r4
 8005aa2:	f7fa fbed 	bl	8000280 <__aeabi_uldivmod>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	460c      	mov	r4, r1
 8005aaa:	461a      	mov	r2, r3
 8005aac:	4b6a      	ldr	r3, [pc, #424]	; (8005c58 <UART_SetConfig+0x384>)
 8005aae:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab2:	095b      	lsrs	r3, r3, #5
 8005ab4:	2164      	movs	r1, #100	; 0x64
 8005ab6:	fb01 f303 	mul.w	r3, r1, r3
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	3332      	adds	r3, #50	; 0x32
 8005ac0:	4a65      	ldr	r2, [pc, #404]	; (8005c58 <UART_SetConfig+0x384>)
 8005ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	f003 0207 	and.w	r2, r3, #7
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4442      	add	r2, r8
 8005ad2:	609a      	str	r2, [r3, #8]
 8005ad4:	e26f      	b.n	8005fb6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ad6:	f7ff fb4b 	bl	8005170 <HAL_RCC_GetPCLK1Freq>
 8005ada:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	461d      	mov	r5, r3
 8005ae0:	f04f 0600 	mov.w	r6, #0
 8005ae4:	46a8      	mov	r8, r5
 8005ae6:	46b1      	mov	r9, r6
 8005ae8:	eb18 0308 	adds.w	r3, r8, r8
 8005aec:	eb49 0409 	adc.w	r4, r9, r9
 8005af0:	4698      	mov	r8, r3
 8005af2:	46a1      	mov	r9, r4
 8005af4:	eb18 0805 	adds.w	r8, r8, r5
 8005af8:	eb49 0906 	adc.w	r9, r9, r6
 8005afc:	f04f 0100 	mov.w	r1, #0
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b08:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b0c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b10:	4688      	mov	r8, r1
 8005b12:	4691      	mov	r9, r2
 8005b14:	eb18 0005 	adds.w	r0, r8, r5
 8005b18:	eb49 0106 	adc.w	r1, r9, r6
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	461d      	mov	r5, r3
 8005b22:	f04f 0600 	mov.w	r6, #0
 8005b26:	196b      	adds	r3, r5, r5
 8005b28:	eb46 0406 	adc.w	r4, r6, r6
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4623      	mov	r3, r4
 8005b30:	f7fa fba6 	bl	8000280 <__aeabi_uldivmod>
 8005b34:	4603      	mov	r3, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4b47      	ldr	r3, [pc, #284]	; (8005c58 <UART_SetConfig+0x384>)
 8005b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	461d      	mov	r5, r3
 8005b4a:	f04f 0600 	mov.w	r6, #0
 8005b4e:	46a9      	mov	r9, r5
 8005b50:	46b2      	mov	sl, r6
 8005b52:	eb19 0309 	adds.w	r3, r9, r9
 8005b56:	eb4a 040a 	adc.w	r4, sl, sl
 8005b5a:	4699      	mov	r9, r3
 8005b5c:	46a2      	mov	sl, r4
 8005b5e:	eb19 0905 	adds.w	r9, r9, r5
 8005b62:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b66:	f04f 0100 	mov.w	r1, #0
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b7a:	4689      	mov	r9, r1
 8005b7c:	4692      	mov	sl, r2
 8005b7e:	eb19 0005 	adds.w	r0, r9, r5
 8005b82:	eb4a 0106 	adc.w	r1, sl, r6
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	461d      	mov	r5, r3
 8005b8c:	f04f 0600 	mov.w	r6, #0
 8005b90:	196b      	adds	r3, r5, r5
 8005b92:	eb46 0406 	adc.w	r4, r6, r6
 8005b96:	461a      	mov	r2, r3
 8005b98:	4623      	mov	r3, r4
 8005b9a:	f7fa fb71 	bl	8000280 <__aeabi_uldivmod>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	4b2c      	ldr	r3, [pc, #176]	; (8005c58 <UART_SetConfig+0x384>)
 8005ba6:	fba3 1302 	umull	r1, r3, r3, r2
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	2164      	movs	r1, #100	; 0x64
 8005bae:	fb01 f303 	mul.w	r3, r1, r3
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	3332      	adds	r3, #50	; 0x32
 8005bb8:	4a27      	ldr	r2, [pc, #156]	; (8005c58 <UART_SetConfig+0x384>)
 8005bba:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bc6:	4498      	add	r8, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	461d      	mov	r5, r3
 8005bcc:	f04f 0600 	mov.w	r6, #0
 8005bd0:	46a9      	mov	r9, r5
 8005bd2:	46b2      	mov	sl, r6
 8005bd4:	eb19 0309 	adds.w	r3, r9, r9
 8005bd8:	eb4a 040a 	adc.w	r4, sl, sl
 8005bdc:	4699      	mov	r9, r3
 8005bde:	46a2      	mov	sl, r4
 8005be0:	eb19 0905 	adds.w	r9, r9, r5
 8005be4:	eb4a 0a06 	adc.w	sl, sl, r6
 8005be8:	f04f 0100 	mov.w	r1, #0
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bfc:	4689      	mov	r9, r1
 8005bfe:	4692      	mov	sl, r2
 8005c00:	eb19 0005 	adds.w	r0, r9, r5
 8005c04:	eb4a 0106 	adc.w	r1, sl, r6
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	461d      	mov	r5, r3
 8005c0e:	f04f 0600 	mov.w	r6, #0
 8005c12:	196b      	adds	r3, r5, r5
 8005c14:	eb46 0406 	adc.w	r4, r6, r6
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4623      	mov	r3, r4
 8005c1c:	f7fa fb30 	bl	8000280 <__aeabi_uldivmod>
 8005c20:	4603      	mov	r3, r0
 8005c22:	460c      	mov	r4, r1
 8005c24:	461a      	mov	r2, r3
 8005c26:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <UART_SetConfig+0x384>)
 8005c28:	fba3 1302 	umull	r1, r3, r3, r2
 8005c2c:	095b      	lsrs	r3, r3, #5
 8005c2e:	2164      	movs	r1, #100	; 0x64
 8005c30:	fb01 f303 	mul.w	r3, r1, r3
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	3332      	adds	r3, #50	; 0x32
 8005c3a:	4a07      	ldr	r2, [pc, #28]	; (8005c58 <UART_SetConfig+0x384>)
 8005c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c40:	095b      	lsrs	r3, r3, #5
 8005c42:	f003 0207 	and.w	r2, r3, #7
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4442      	add	r2, r8
 8005c4c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005c4e:	e1b2      	b.n	8005fb6 <UART_SetConfig+0x6e2>
 8005c50:	40011000 	.word	0x40011000
 8005c54:	40011400 	.word	0x40011400
 8005c58:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4ad7      	ldr	r2, [pc, #860]	; (8005fc0 <UART_SetConfig+0x6ec>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d005      	beq.n	8005c72 <UART_SetConfig+0x39e>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4ad6      	ldr	r2, [pc, #856]	; (8005fc4 <UART_SetConfig+0x6f0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	f040 80d1 	bne.w	8005e14 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c72:	f7ff fa91 	bl	8005198 <HAL_RCC_GetPCLK2Freq>
 8005c76:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	469a      	mov	sl, r3
 8005c7c:	f04f 0b00 	mov.w	fp, #0
 8005c80:	46d0      	mov	r8, sl
 8005c82:	46d9      	mov	r9, fp
 8005c84:	eb18 0308 	adds.w	r3, r8, r8
 8005c88:	eb49 0409 	adc.w	r4, r9, r9
 8005c8c:	4698      	mov	r8, r3
 8005c8e:	46a1      	mov	r9, r4
 8005c90:	eb18 080a 	adds.w	r8, r8, sl
 8005c94:	eb49 090b 	adc.w	r9, r9, fp
 8005c98:	f04f 0100 	mov.w	r1, #0
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ca4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ca8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cac:	4688      	mov	r8, r1
 8005cae:	4691      	mov	r9, r2
 8005cb0:	eb1a 0508 	adds.w	r5, sl, r8
 8005cb4:	eb4b 0609 	adc.w	r6, fp, r9
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	f04f 0400 	mov.w	r4, #0
 8005cca:	0094      	lsls	r4, r2, #2
 8005ccc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cd0:	008b      	lsls	r3, r1, #2
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	4623      	mov	r3, r4
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	4631      	mov	r1, r6
 8005cda:	f7fa fad1 	bl	8000280 <__aeabi_uldivmod>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	4bb8      	ldr	r3, [pc, #736]	; (8005fc8 <UART_SetConfig+0x6f4>)
 8005ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	469b      	mov	fp, r3
 8005cf4:	f04f 0c00 	mov.w	ip, #0
 8005cf8:	46d9      	mov	r9, fp
 8005cfa:	46e2      	mov	sl, ip
 8005cfc:	eb19 0309 	adds.w	r3, r9, r9
 8005d00:	eb4a 040a 	adc.w	r4, sl, sl
 8005d04:	4699      	mov	r9, r3
 8005d06:	46a2      	mov	sl, r4
 8005d08:	eb19 090b 	adds.w	r9, r9, fp
 8005d0c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d10:	f04f 0100 	mov.w	r1, #0
 8005d14:	f04f 0200 	mov.w	r2, #0
 8005d18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d24:	4689      	mov	r9, r1
 8005d26:	4692      	mov	sl, r2
 8005d28:	eb1b 0509 	adds.w	r5, fp, r9
 8005d2c:	eb4c 060a 	adc.w	r6, ip, sl
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	4619      	mov	r1, r3
 8005d36:	f04f 0200 	mov.w	r2, #0
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	f04f 0400 	mov.w	r4, #0
 8005d42:	0094      	lsls	r4, r2, #2
 8005d44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d48:	008b      	lsls	r3, r1, #2
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	4623      	mov	r3, r4
 8005d4e:	4628      	mov	r0, r5
 8005d50:	4631      	mov	r1, r6
 8005d52:	f7fa fa95 	bl	8000280 <__aeabi_uldivmod>
 8005d56:	4603      	mov	r3, r0
 8005d58:	460c      	mov	r4, r1
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	4b9a      	ldr	r3, [pc, #616]	; (8005fc8 <UART_SetConfig+0x6f4>)
 8005d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	2164      	movs	r1, #100	; 0x64
 8005d66:	fb01 f303 	mul.w	r3, r1, r3
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	011b      	lsls	r3, r3, #4
 8005d6e:	3332      	adds	r3, #50	; 0x32
 8005d70:	4a95      	ldr	r2, [pc, #596]	; (8005fc8 <UART_SetConfig+0x6f4>)
 8005d72:	fba2 2303 	umull	r2, r3, r2, r3
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d7c:	4498      	add	r8, r3
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	469b      	mov	fp, r3
 8005d82:	f04f 0c00 	mov.w	ip, #0
 8005d86:	46d9      	mov	r9, fp
 8005d88:	46e2      	mov	sl, ip
 8005d8a:	eb19 0309 	adds.w	r3, r9, r9
 8005d8e:	eb4a 040a 	adc.w	r4, sl, sl
 8005d92:	4699      	mov	r9, r3
 8005d94:	46a2      	mov	sl, r4
 8005d96:	eb19 090b 	adds.w	r9, r9, fp
 8005d9a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d9e:	f04f 0100 	mov.w	r1, #0
 8005da2:	f04f 0200 	mov.w	r2, #0
 8005da6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005daa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005db2:	4689      	mov	r9, r1
 8005db4:	4692      	mov	sl, r2
 8005db6:	eb1b 0509 	adds.w	r5, fp, r9
 8005dba:	eb4c 060a 	adc.w	r6, ip, sl
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	f04f 0400 	mov.w	r4, #0
 8005dd0:	0094      	lsls	r4, r2, #2
 8005dd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dd6:	008b      	lsls	r3, r1, #2
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4623      	mov	r3, r4
 8005ddc:	4628      	mov	r0, r5
 8005dde:	4631      	mov	r1, r6
 8005de0:	f7fa fa4e 	bl	8000280 <__aeabi_uldivmod>
 8005de4:	4603      	mov	r3, r0
 8005de6:	460c      	mov	r4, r1
 8005de8:	461a      	mov	r2, r3
 8005dea:	4b77      	ldr	r3, [pc, #476]	; (8005fc8 <UART_SetConfig+0x6f4>)
 8005dec:	fba3 1302 	umull	r1, r3, r3, r2
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	2164      	movs	r1, #100	; 0x64
 8005df4:	fb01 f303 	mul.w	r3, r1, r3
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	3332      	adds	r3, #50	; 0x32
 8005dfe:	4a72      	ldr	r2, [pc, #456]	; (8005fc8 <UART_SetConfig+0x6f4>)
 8005e00:	fba2 2303 	umull	r2, r3, r2, r3
 8005e04:	095b      	lsrs	r3, r3, #5
 8005e06:	f003 020f 	and.w	r2, r3, #15
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4442      	add	r2, r8
 8005e10:	609a      	str	r2, [r3, #8]
 8005e12:	e0d0      	b.n	8005fb6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e14:	f7ff f9ac 	bl	8005170 <HAL_RCC_GetPCLK1Freq>
 8005e18:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	469a      	mov	sl, r3
 8005e1e:	f04f 0b00 	mov.w	fp, #0
 8005e22:	46d0      	mov	r8, sl
 8005e24:	46d9      	mov	r9, fp
 8005e26:	eb18 0308 	adds.w	r3, r8, r8
 8005e2a:	eb49 0409 	adc.w	r4, r9, r9
 8005e2e:	4698      	mov	r8, r3
 8005e30:	46a1      	mov	r9, r4
 8005e32:	eb18 080a 	adds.w	r8, r8, sl
 8005e36:	eb49 090b 	adc.w	r9, r9, fp
 8005e3a:	f04f 0100 	mov.w	r1, #0
 8005e3e:	f04f 0200 	mov.w	r2, #0
 8005e42:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e46:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e4a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e4e:	4688      	mov	r8, r1
 8005e50:	4691      	mov	r9, r2
 8005e52:	eb1a 0508 	adds.w	r5, sl, r8
 8005e56:	eb4b 0609 	adc.w	r6, fp, r9
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	f04f 0400 	mov.w	r4, #0
 8005e6c:	0094      	lsls	r4, r2, #2
 8005e6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e72:	008b      	lsls	r3, r1, #2
 8005e74:	461a      	mov	r2, r3
 8005e76:	4623      	mov	r3, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	4631      	mov	r1, r6
 8005e7c:	f7fa fa00 	bl	8000280 <__aeabi_uldivmod>
 8005e80:	4603      	mov	r3, r0
 8005e82:	460c      	mov	r4, r1
 8005e84:	461a      	mov	r2, r3
 8005e86:	4b50      	ldr	r3, [pc, #320]	; (8005fc8 <UART_SetConfig+0x6f4>)
 8005e88:	fba3 2302 	umull	r2, r3, r3, r2
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	469b      	mov	fp, r3
 8005e96:	f04f 0c00 	mov.w	ip, #0
 8005e9a:	46d9      	mov	r9, fp
 8005e9c:	46e2      	mov	sl, ip
 8005e9e:	eb19 0309 	adds.w	r3, r9, r9
 8005ea2:	eb4a 040a 	adc.w	r4, sl, sl
 8005ea6:	4699      	mov	r9, r3
 8005ea8:	46a2      	mov	sl, r4
 8005eaa:	eb19 090b 	adds.w	r9, r9, fp
 8005eae:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005eb2:	f04f 0100 	mov.w	r1, #0
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ebe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ec2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ec6:	4689      	mov	r9, r1
 8005ec8:	4692      	mov	sl, r2
 8005eca:	eb1b 0509 	adds.w	r5, fp, r9
 8005ece:	eb4c 060a 	adc.w	r6, ip, sl
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	f04f 0300 	mov.w	r3, #0
 8005ee0:	f04f 0400 	mov.w	r4, #0
 8005ee4:	0094      	lsls	r4, r2, #2
 8005ee6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005eea:	008b      	lsls	r3, r1, #2
 8005eec:	461a      	mov	r2, r3
 8005eee:	4623      	mov	r3, r4
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	f7fa f9c4 	bl	8000280 <__aeabi_uldivmod>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	460c      	mov	r4, r1
 8005efc:	461a      	mov	r2, r3
 8005efe:	4b32      	ldr	r3, [pc, #200]	; (8005fc8 <UART_SetConfig+0x6f4>)
 8005f00:	fba3 1302 	umull	r1, r3, r3, r2
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	2164      	movs	r1, #100	; 0x64
 8005f08:	fb01 f303 	mul.w	r3, r1, r3
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	3332      	adds	r3, #50	; 0x32
 8005f12:	4a2d      	ldr	r2, [pc, #180]	; (8005fc8 <UART_SetConfig+0x6f4>)
 8005f14:	fba2 2303 	umull	r2, r3, r2, r3
 8005f18:	095b      	lsrs	r3, r3, #5
 8005f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f1e:	4498      	add	r8, r3
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	469b      	mov	fp, r3
 8005f24:	f04f 0c00 	mov.w	ip, #0
 8005f28:	46d9      	mov	r9, fp
 8005f2a:	46e2      	mov	sl, ip
 8005f2c:	eb19 0309 	adds.w	r3, r9, r9
 8005f30:	eb4a 040a 	adc.w	r4, sl, sl
 8005f34:	4699      	mov	r9, r3
 8005f36:	46a2      	mov	sl, r4
 8005f38:	eb19 090b 	adds.w	r9, r9, fp
 8005f3c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f40:	f04f 0100 	mov.w	r1, #0
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f54:	4689      	mov	r9, r1
 8005f56:	4692      	mov	sl, r2
 8005f58:	eb1b 0509 	adds.w	r5, fp, r9
 8005f5c:	eb4c 060a 	adc.w	r6, ip, sl
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	4619      	mov	r1, r3
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	f04f 0400 	mov.w	r4, #0
 8005f72:	0094      	lsls	r4, r2, #2
 8005f74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f78:	008b      	lsls	r3, r1, #2
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	4623      	mov	r3, r4
 8005f7e:	4628      	mov	r0, r5
 8005f80:	4631      	mov	r1, r6
 8005f82:	f7fa f97d 	bl	8000280 <__aeabi_uldivmod>
 8005f86:	4603      	mov	r3, r0
 8005f88:	460c      	mov	r4, r1
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	4b0e      	ldr	r3, [pc, #56]	; (8005fc8 <UART_SetConfig+0x6f4>)
 8005f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	2164      	movs	r1, #100	; 0x64
 8005f96:	fb01 f303 	mul.w	r3, r1, r3
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	011b      	lsls	r3, r3, #4
 8005f9e:	3332      	adds	r3, #50	; 0x32
 8005fa0:	4a09      	ldr	r2, [pc, #36]	; (8005fc8 <UART_SetConfig+0x6f4>)
 8005fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	f003 020f 	and.w	r2, r3, #15
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4442      	add	r2, r8
 8005fb2:	609a      	str	r2, [r3, #8]
}
 8005fb4:	e7ff      	b.n	8005fb6 <UART_SetConfig+0x6e2>
 8005fb6:	bf00      	nop
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc0:	40011000 	.word	0x40011000
 8005fc4:	40011400 	.word	0x40011400
 8005fc8:	51eb851f 	.word	0x51eb851f

08005fcc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005fd0:	bf00      	nop
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
	...

08005fdc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fe2:	f3ef 8305 	mrs	r3, IPSR
 8005fe6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10f      	bne.n	800600e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fee:	f3ef 8310 	mrs	r3, PRIMASK
 8005ff2:	607b      	str	r3, [r7, #4]
  return(result);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d105      	bne.n	8006006 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ffa:	f3ef 8311 	mrs	r3, BASEPRI
 8005ffe:	603b      	str	r3, [r7, #0]
  return(result);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d007      	beq.n	8006016 <osKernelInitialize+0x3a>
 8006006:	4b0e      	ldr	r3, [pc, #56]	; (8006040 <osKernelInitialize+0x64>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b02      	cmp	r3, #2
 800600c:	d103      	bne.n	8006016 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800600e:	f06f 0305 	mvn.w	r3, #5
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	e00c      	b.n	8006030 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006016:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <osKernelInitialize+0x64>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d105      	bne.n	800602a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800601e:	4b08      	ldr	r3, [pc, #32]	; (8006040 <osKernelInitialize+0x64>)
 8006020:	2201      	movs	r2, #1
 8006022:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	e002      	b.n	8006030 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800602a:	f04f 33ff 	mov.w	r3, #4294967295
 800602e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006030:	68fb      	ldr	r3, [r7, #12]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	2000013c 	.word	0x2000013c

08006044 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800604a:	f3ef 8305 	mrs	r3, IPSR
 800604e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006050:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10f      	bne.n	8006076 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006056:	f3ef 8310 	mrs	r3, PRIMASK
 800605a:	607b      	str	r3, [r7, #4]
  return(result);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d105      	bne.n	800606e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006062:	f3ef 8311 	mrs	r3, BASEPRI
 8006066:	603b      	str	r3, [r7, #0]
  return(result);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d007      	beq.n	800607e <osKernelStart+0x3a>
 800606e:	4b0f      	ldr	r3, [pc, #60]	; (80060ac <osKernelStart+0x68>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d103      	bne.n	800607e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006076:	f06f 0305 	mvn.w	r3, #5
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	e010      	b.n	80060a0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800607e:	4b0b      	ldr	r3, [pc, #44]	; (80060ac <osKernelStart+0x68>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d109      	bne.n	800609a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006086:	f7ff ffa1 	bl	8005fcc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800608a:	4b08      	ldr	r3, [pc, #32]	; (80060ac <osKernelStart+0x68>)
 800608c:	2202      	movs	r2, #2
 800608e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006090:	f001 fc34 	bl	80078fc <vTaskStartScheduler>
      stat = osOK;
 8006094:	2300      	movs	r3, #0
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	e002      	b.n	80060a0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800609a:	f04f 33ff 	mov.w	r3, #4294967295
 800609e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80060a0:	68fb      	ldr	r3, [r7, #12]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	2000013c 	.word	0x2000013c

080060b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b090      	sub	sp, #64	; 0x40
 80060b4:	af04      	add	r7, sp, #16
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80060bc:	2300      	movs	r3, #0
 80060be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060c0:	f3ef 8305 	mrs	r3, IPSR
 80060c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80060c6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f040 808f 	bne.w	80061ec <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ce:	f3ef 8310 	mrs	r3, PRIMASK
 80060d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d105      	bne.n	80060e6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060da:	f3ef 8311 	mrs	r3, BASEPRI
 80060de:	617b      	str	r3, [r7, #20]
  return(result);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <osThreadNew+0x3e>
 80060e6:	4b44      	ldr	r3, [pc, #272]	; (80061f8 <osThreadNew+0x148>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d07e      	beq.n	80061ec <osThreadNew+0x13c>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d07b      	beq.n	80061ec <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80060f4:	2380      	movs	r3, #128	; 0x80
 80060f6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80060f8:	2318      	movs	r3, #24
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006100:	f04f 33ff 	mov.w	r3, #4294967295
 8006104:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d045      	beq.n	8006198 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <osThreadNew+0x6a>
        name = attr->name;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	2b00      	cmp	r3, #0
 800612c:	d008      	beq.n	8006140 <osThreadNew+0x90>
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	2b38      	cmp	r3, #56	; 0x38
 8006132:	d805      	bhi.n	8006140 <osThreadNew+0x90>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <osThreadNew+0x94>
        return (NULL);
 8006140:	2300      	movs	r3, #0
 8006142:	e054      	b.n	80061ee <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	089b      	lsrs	r3, r3, #2
 8006152:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00e      	beq.n	800617a <osThreadNew+0xca>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	2b5b      	cmp	r3, #91	; 0x5b
 8006162:	d90a      	bls.n	800617a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006168:	2b00      	cmp	r3, #0
 800616a:	d006      	beq.n	800617a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <osThreadNew+0xca>
        mem = 1;
 8006174:	2301      	movs	r3, #1
 8006176:	623b      	str	r3, [r7, #32]
 8006178:	e010      	b.n	800619c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10c      	bne.n	800619c <osThreadNew+0xec>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d108      	bne.n	800619c <osThreadNew+0xec>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d104      	bne.n	800619c <osThreadNew+0xec>
          mem = 0;
 8006192:	2300      	movs	r3, #0
 8006194:	623b      	str	r3, [r7, #32]
 8006196:	e001      	b.n	800619c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d110      	bne.n	80061c4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061aa:	9202      	str	r2, [sp, #8]
 80061ac:	9301      	str	r3, [sp, #4]
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f001 f9cd 	bl	8007558 <xTaskCreateStatic>
 80061be:	4603      	mov	r3, r0
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	e013      	b.n	80061ec <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d110      	bne.n	80061ec <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	f107 0310 	add.w	r3, r7, #16
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f001 fa15 	bl	800760c <xTaskCreate>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d001      	beq.n	80061ec <osThreadNew+0x13c>
          hTask = NULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80061ec:	693b      	ldr	r3, [r7, #16]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3730      	adds	r7, #48	; 0x30
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	2000013c 	.word	0x2000013c

080061fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006204:	f3ef 8305 	mrs	r3, IPSR
 8006208:	613b      	str	r3, [r7, #16]
  return(result);
 800620a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10f      	bne.n	8006230 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006210:	f3ef 8310 	mrs	r3, PRIMASK
 8006214:	60fb      	str	r3, [r7, #12]
  return(result);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d105      	bne.n	8006228 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800621c:	f3ef 8311 	mrs	r3, BASEPRI
 8006220:	60bb      	str	r3, [r7, #8]
  return(result);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d007      	beq.n	8006238 <osDelay+0x3c>
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <osDelay+0x58>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b02      	cmp	r3, #2
 800622e:	d103      	bne.n	8006238 <osDelay+0x3c>
    stat = osErrorISR;
 8006230:	f06f 0305 	mvn.w	r3, #5
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	e007      	b.n	8006248 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006238:	2300      	movs	r3, #0
 800623a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f001 fb26 	bl	8007894 <vTaskDelay>
    }
  }

  return (stat);
 8006248:	697b      	ldr	r3, [r7, #20]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	2000013c 	.word	0x2000013c

08006258 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006260:	2300      	movs	r3, #0
 8006262:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006264:	f3ef 8305 	mrs	r3, IPSR
 8006268:	617b      	str	r3, [r7, #20]
  return(result);
 800626a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 800626c:	2b00      	cmp	r3, #0
 800626e:	d13d      	bne.n	80062ec <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006270:	f3ef 8310 	mrs	r3, PRIMASK
 8006274:	613b      	str	r3, [r7, #16]
  return(result);
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d105      	bne.n	8006288 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800627c:	f3ef 8311 	mrs	r3, BASEPRI
 8006280:	60fb      	str	r3, [r7, #12]
  return(result);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <osEventFlagsNew+0x38>
 8006288:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <osEventFlagsNew+0xa0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b02      	cmp	r3, #2
 800628e:	d02d      	beq.n	80062ec <osEventFlagsNew+0x94>
    mem = -1;
 8006290:	f04f 33ff 	mov.w	r3, #4294967295
 8006294:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d015      	beq.n	80062c8 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d006      	beq.n	80062b2 <osEventFlagsNew+0x5a>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	2b1f      	cmp	r3, #31
 80062aa:	d902      	bls.n	80062b2 <osEventFlagsNew+0x5a>
        mem = 1;
 80062ac:	2301      	movs	r3, #1
 80062ae:	61bb      	str	r3, [r7, #24]
 80062b0:	e00c      	b.n	80062cc <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d108      	bne.n	80062cc <osEventFlagsNew+0x74>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d104      	bne.n	80062cc <osEventFlagsNew+0x74>
          mem = 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	61bb      	str	r3, [r7, #24]
 80062c6:	e001      	b.n	80062cc <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80062c8:	2300      	movs	r3, #0
 80062ca:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d106      	bne.n	80062e0 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 f956 	bl	8006588 <xEventGroupCreateStatic>
 80062dc:	61f8      	str	r0, [r7, #28]
 80062de:	e005      	b.n	80062ec <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d102      	bne.n	80062ec <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 80062e6:	f000 f984 	bl	80065f2 <xEventGroupCreate>
 80062ea:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80062ec:	69fb      	ldr	r3, [r7, #28]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3720      	adds	r7, #32
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	2000013c 	.word	0x2000013c

080062fc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b088      	sub	sp, #32
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d004      	beq.n	800631a <osEventFlagsSet+0x1e>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800631a:	f06f 0303 	mvn.w	r3, #3
 800631e:	61fb      	str	r3, [r7, #28]
 8006320:	e03a      	b.n	8006398 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006322:	f3ef 8305 	mrs	r3, IPSR
 8006326:	617b      	str	r3, [r7, #20]
  return(result);
 8006328:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10f      	bne.n	800634e <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800632e:	f3ef 8310 	mrs	r3, PRIMASK
 8006332:	613b      	str	r3, [r7, #16]
  return(result);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d105      	bne.n	8006346 <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800633a:	f3ef 8311 	mrs	r3, BASEPRI
 800633e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d021      	beq.n	800638a <osEventFlagsSet+0x8e>
 8006346:	4b17      	ldr	r3, [pc, #92]	; (80063a4 <osEventFlagsSet+0xa8>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b02      	cmp	r3, #2
 800634c:	d11d      	bne.n	800638a <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 800634e:	2300      	movs	r3, #0
 8006350:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8006352:	f107 0308 	add.w	r3, r7, #8
 8006356:	461a      	mov	r2, r3
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	69b8      	ldr	r0, [r7, #24]
 800635c:	f000 fb60 	bl	8006a20 <xEventGroupSetBitsFromISR>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d103      	bne.n	800636e <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8006366:	f06f 0302 	mvn.w	r3, #2
 800636a:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800636c:	e013      	b.n	8006396 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00e      	beq.n	8006396 <osEventFlagsSet+0x9a>
 8006378:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <osEventFlagsSet+0xac>)
 800637a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8006388:	e005      	b.n	8006396 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	69b8      	ldr	r0, [r7, #24]
 800638e:	f000 fa82 	bl	8006896 <xEventGroupSetBits>
 8006392:	61f8      	str	r0, [r7, #28]
 8006394:	e000      	b.n	8006398 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8006396:	bf00      	nop
  }

  return (rflags);
 8006398:	69fb      	ldr	r3, [r7, #28]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3720      	adds	r7, #32
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	2000013c 	.word	0x2000013c
 80063a8:	e000ed04 	.word	0xe000ed04

080063ac <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d004      	beq.n	80063ca <osEventFlagsClear+0x1e>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80063ca:	f06f 0303 	mvn.w	r3, #3
 80063ce:	61fb      	str	r3, [r7, #28]
 80063d0:	e029      	b.n	8006426 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063d2:	f3ef 8305 	mrs	r3, IPSR
 80063d6:	617b      	str	r3, [r7, #20]
  return(result);
 80063d8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10f      	bne.n	80063fe <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063de:	f3ef 8310 	mrs	r3, PRIMASK
 80063e2:	613b      	str	r3, [r7, #16]
  return(result);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d105      	bne.n	80063f6 <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063ea:	f3ef 8311 	mrs	r3, BASEPRI
 80063ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d012      	beq.n	800641c <osEventFlagsClear+0x70>
 80063f6:	4b0e      	ldr	r3, [pc, #56]	; (8006430 <osEventFlagsClear+0x84>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d10e      	bne.n	800641c <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80063fe:	69b8      	ldr	r0, [r7, #24]
 8006400:	f000 fa26 	bl	8006850 <xEventGroupGetBitsFromISR>
 8006404:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	69b8      	ldr	r0, [r7, #24]
 800640a:	f000 fa0d 	bl	8006828 <xEventGroupClearBitsFromISR>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d108      	bne.n	8006426 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 8006414:	f06f 0302 	mvn.w	r3, #2
 8006418:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800641a:	e004      	b.n	8006426 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	69b8      	ldr	r0, [r7, #24]
 8006420:	f000 f9cc 	bl	80067bc <xEventGroupClearBits>
 8006424:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8006426:	69fb      	ldr	r3, [r7, #28]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3720      	adds	r7, #32
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	2000013c 	.word	0x2000013c

08006434 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8006434:	b580      	push	{r7, lr}
 8006436:	b08e      	sub	sp, #56	; 0x38
 8006438:	af02      	add	r7, sp, #8
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d004      	beq.n	8006456 <osEventFlagsWait+0x22>
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8006456:	f06f 0303 	mvn.w	r3, #3
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
 800645c:	e059      	b.n	8006512 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800645e:	f3ef 8305 	mrs	r3, IPSR
 8006462:	61fb      	str	r3, [r7, #28]
  return(result);
 8006464:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10f      	bne.n	800648a <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800646a:	f3ef 8310 	mrs	r3, PRIMASK
 800646e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d105      	bne.n	8006482 <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006476:	f3ef 8311 	mrs	r3, BASEPRI
 800647a:	617b      	str	r3, [r7, #20]
  return(result);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d007      	beq.n	8006492 <osEventFlagsWait+0x5e>
 8006482:	4b26      	ldr	r3, [pc, #152]	; (800651c <osEventFlagsWait+0xe8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b02      	cmp	r3, #2
 8006488:	d103      	bne.n	8006492 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 800648a:	f06f 0305 	mvn.w	r3, #5
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
 8006490:	e03f      	b.n	8006512 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 800649c:	2301      	movs	r3, #1
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a0:	e001      	b.n	80064a6 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b4:	e001      	b.n	80064ba <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 80064b6:	2301      	movs	r3, #1
 80064b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	6a38      	ldr	r0, [r7, #32]
 80064c6:	f000 f8af 	bl	8006628 <xEventGroupWaitBits>
 80064ca:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00e      	beq.n	80064f4 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	429a      	cmp	r2, r3
 80064dc:	d019      	beq.n	8006512 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 80064e4:	f06f 0301 	mvn.w	r3, #1
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ea:	e012      	b.n	8006512 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80064ec:	f06f 0302 	mvn.w	r3, #2
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
 80064f2:	e00e      	b.n	8006512 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	4013      	ands	r3, r2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d109      	bne.n	8006512 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8006504:	f06f 0301 	mvn.w	r3, #1
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
 800650a:	e002      	b.n	8006512 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800650c:	f06f 0302 	mvn.w	r3, #2
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006514:	4618      	mov	r0, r3
 8006516:	3730      	adds	r7, #48	; 0x30
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	2000013c 	.word	0x2000013c

08006520 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4a07      	ldr	r2, [pc, #28]	; (800654c <vApplicationGetIdleTaskMemory+0x2c>)
 8006530:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	4a06      	ldr	r2, [pc, #24]	; (8006550 <vApplicationGetIdleTaskMemory+0x30>)
 8006536:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2280      	movs	r2, #128	; 0x80
 800653c:	601a      	str	r2, [r3, #0]
}
 800653e:	bf00      	nop
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	20000140 	.word	0x20000140
 8006550:	2000019c 	.word	0x2000019c

08006554 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4a07      	ldr	r2, [pc, #28]	; (8006580 <vApplicationGetTimerTaskMemory+0x2c>)
 8006564:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	4a06      	ldr	r2, [pc, #24]	; (8006584 <vApplicationGetTimerTaskMemory+0x30>)
 800656a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006572:	601a      	str	r2, [r3, #0]
}
 8006574:	bf00      	nop
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	2000039c 	.word	0x2000039c
 8006584:	200003f8 	.word	0x200003f8

08006588 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d109      	bne.n	80065aa <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	613b      	str	r3, [r7, #16]
 80065a8:	e7fe      	b.n	80065a8 <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80065aa:	2320      	movs	r3, #32
 80065ac:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d009      	beq.n	80065c8 <xEventGroupCreateStatic+0x40>
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	e7fe      	b.n	80065c6 <xEventGroupCreateStatic+0x3e>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	3304      	adds	r3, #4
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 fa33 	bl	8006a48 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2201      	movs	r2, #1
 80065e6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80065e8:	697b      	ldr	r3, [r7, #20]
	}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80065f8:	2020      	movs	r0, #32
 80065fa:	f002 fce9 	bl	8008fd0 <pvPortMalloc>
 80065fe:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3304      	adds	r3, #4
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fa19 	bl	8006a48 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800661c:	687b      	ldr	r3, [r7, #4]
	}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b090      	sub	sp, #64	; 0x40
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800663a:	2300      	movs	r3, #0
 800663c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800663e:	2300      	movs	r3, #0
 8006640:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d109      	bne.n	800665c <xEventGroupWaitBits+0x34>
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	623b      	str	r3, [r7, #32]
 800665a:	e7fe      	b.n	800665a <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d009      	beq.n	800667a <xEventGroupWaitBits+0x52>
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	61fb      	str	r3, [r7, #28]
 8006678:	e7fe      	b.n	8006678 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d109      	bne.n	8006694 <xEventGroupWaitBits+0x6c>
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	e7fe      	b.n	8006692 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006694:	f001 fe02 	bl	800829c <xTaskGetSchedulerState>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d102      	bne.n	80066a4 <xEventGroupWaitBits+0x7c>
 800669e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <xEventGroupWaitBits+0x80>
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <xEventGroupWaitBits+0x82>
 80066a8:	2300      	movs	r3, #0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d109      	bne.n	80066c2 <xEventGroupWaitBits+0x9a>
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	617b      	str	r3, [r7, #20]
 80066c0:	e7fe      	b.n	80066c0 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 80066c2:	f001 f97f 	bl	80079c4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80066c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	68b9      	ldr	r1, [r7, #8]
 80066d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066d2:	f000 f983 	bl	80069dc <prvTestWaitCondition>
 80066d6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00e      	beq.n	80066fc <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80066e2:	2300      	movs	r3, #0
 80066e4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d028      	beq.n	800673e <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80066ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	43db      	mvns	r3, r3
 80066f4:	401a      	ands	r2, r3
 80066f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	e020      	b.n	800673e <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80066fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d104      	bne.n	800670c <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8006706:	2301      	movs	r3, #1
 8006708:	633b      	str	r3, [r7, #48]	; 0x30
 800670a:	e018      	b.n	800673e <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006718:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006726:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672a:	1d18      	adds	r0, r3, #4
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006730:	4313      	orrs	r3, r2
 8006732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006734:	4619      	mov	r1, r3
 8006736:	f001 fb37 	bl	8007da8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800673e:	f001 f94f 	bl	80079e0 <xTaskResumeAll>
 8006742:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006746:	2b00      	cmp	r3, #0
 8006748:	d031      	beq.n	80067ae <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	2b00      	cmp	r3, #0
 800674e:	d107      	bne.n	8006760 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8006750:	4b19      	ldr	r3, [pc, #100]	; (80067b8 <xEventGroupWaitBits+0x190>)
 8006752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006760:	f001 fe26 	bl	80083b0 <uxTaskResetEventItemValue>
 8006764:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d11a      	bne.n	80067a6 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8006770:	f002 fb14 	bl	8008d9c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006780:	f000 f92c 	bl	80069dc <prvTestWaitCondition>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d009      	beq.n	800679e <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d006      	beq.n	800679e <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	43db      	mvns	r3, r3
 8006798:	401a      	ands	r2, r3
 800679a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800679e:	2301      	movs	r3, #1
 80067a0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80067a2:	f002 fb29 	bl	8008df8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80067a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80067ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80067ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3740      	adds	r7, #64	; 0x40
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	e000ed04 	.word	0xe000ed04

080067bc <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d109      	bne.n	80067e4 <xEventGroupClearBits+0x28>
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	e7fe      	b.n	80067e2 <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d009      	beq.n	8006802 <xEventGroupClearBits+0x46>
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	60bb      	str	r3, [r7, #8]
 8006800:	e7fe      	b.n	8006800 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 8006802:	f002 facb 	bl	8008d9c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	43db      	mvns	r3, r3
 8006814:	401a      	ands	r2, r3
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800681a:	f002 faed 	bl	8008df8 <vPortExitCritical>

	return uxReturn;
 800681e:	693b      	ldr	r3, [r7, #16]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8006832:	2300      	movs	r3, #0
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	6879      	ldr	r1, [r7, #4]
 8006838:	4804      	ldr	r0, [pc, #16]	; (800684c <xEventGroupClearBitsFromISR+0x24>)
 800683a:	f002 f96b 	bl	8008b14 <xTimerPendFunctionCallFromISR>
 800683e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8006840:	68fb      	ldr	r3, [r7, #12]
	}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	080069c3 	.word	0x080069c3

08006850 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8006850:	b480      	push	{r7}
 8006852:	b089      	sub	sp, #36	; 0x24
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800685c:	f3ef 8211 	mrs	r2, BASEPRI
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	60fa      	str	r2, [r7, #12]
 8006872:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006874:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006876:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f383 8811 	msr	BASEPRI, r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8006888:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800688a:	4618      	mov	r0, r3
 800688c:	3724      	adds	r7, #36	; 0x24
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b08e      	sub	sp, #56	; 0x38
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80068a0:	2300      	movs	r3, #0
 80068a2:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80068a8:	2300      	movs	r3, #0
 80068aa:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <xEventGroupSetBits+0x30>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	e7fe      	b.n	80068c4 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d009      	beq.n	80068e4 <xEventGroupSetBits+0x4e>
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	e7fe      	b.n	80068e2 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80068e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e6:	3304      	adds	r3, #4
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	3308      	adds	r3, #8
 80068ee:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80068f0:	f001 f868 	bl	80079c4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	431a      	orrs	r2, r3
 8006902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006904:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006906:	e03c      	b.n	8006982 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800690e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006914:	2300      	movs	r3, #0
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800691e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006926:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d108      	bne.n	8006944 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	4013      	ands	r3, r2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 800693e:	2301      	movs	r3, #1
 8006940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006942:	e008      	b.n	8006956 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	4013      	ands	r3, r2
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	429a      	cmp	r2, r3
 8006950:	d101      	bne.n	8006956 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006952:	2301      	movs	r3, #1
 8006954:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	2b00      	cmp	r3, #0
 800695a:	d010      	beq.n	800697e <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	4313      	orrs	r3, r2
 800696c:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006976:	4619      	mov	r1, r3
 8006978:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800697a:	f001 fadb 	bl	8007f34 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	429a      	cmp	r2, r3
 8006988:	d1be      	bne.n	8006908 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	43db      	mvns	r3, r3
 8006992:	401a      	ands	r2, r3
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006998:	f001 f822 	bl	80079e0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	681b      	ldr	r3, [r3, #0]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3738      	adds	r7, #56	; 0x38
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff ff6e 	bl	8006896 <xEventGroupSetBits>
}
 80069ba:	bf00      	nop
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff fef4 	bl	80067bc <xEventGroupClearBits>
}
 80069d4:	bf00      	nop
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80069e8:	2300      	movs	r3, #0
 80069ea:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d107      	bne.n	8006a02 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	4013      	ands	r3, r2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00a      	beq.n	8006a12 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80069fc:	2301      	movs	r3, #1
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	e007      	b.n	8006a12 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4013      	ands	r3, r2
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d101      	bne.n	8006a12 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006a12:	697b      	ldr	r3, [r7, #20]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	371c      	adds	r7, #28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	68f9      	ldr	r1, [r7, #12]
 8006a32:	4804      	ldr	r0, [pc, #16]	; (8006a44 <xEventGroupSetBitsFromISR+0x24>)
 8006a34:	f002 f86e 	bl	8008b14 <xTimerPendFunctionCallFromISR>
 8006a38:	6178      	str	r0, [r7, #20]

		return xReturn;
 8006a3a:	697b      	ldr	r3, [r7, #20]
	}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	080069a9 	.word	0x080069a9

08006a48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f103 0208 	add.w	r2, r3, #8
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f103 0208 	add.w	r2, r3, #8
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f103 0208 	add.w	r2, r3, #8
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b085      	sub	sp, #20
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	601a      	str	r2, [r3, #0]
}
 8006ade:	bf00      	nop
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006aea:	b480      	push	{r7}
 8006aec:	b085      	sub	sp, #20
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b00:	d103      	bne.n	8006b0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	e00c      	b.n	8006b24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	e002      	b.n	8006b18 <vListInsert+0x2e>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d2f6      	bcs.n	8006b12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	601a      	str	r2, [r3, #0]
}
 8006b50:	bf00      	nop
 8006b52:	3714      	adds	r7, #20
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6892      	ldr	r2, [r2, #8]
 8006b72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6852      	ldr	r2, [r2, #4]
 8006b7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d103      	bne.n	8006b90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	1e5a      	subs	r2, r3, #1
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d109      	bne.n	8006bd8 <xQueueGenericReset+0x28>
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	60bb      	str	r3, [r7, #8]
 8006bd6:	e7fe      	b.n	8006bd6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006bd8:	f002 f8e0 	bl	8008d9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be4:	68f9      	ldr	r1, [r7, #12]
 8006be6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006be8:	fb01 f303 	mul.w	r3, r1, r3
 8006bec:	441a      	add	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	68f9      	ldr	r1, [r7, #12]
 8006c0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c0e:	fb01 f303 	mul.w	r3, r1, r3
 8006c12:	441a      	add	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	22ff      	movs	r2, #255	; 0xff
 8006c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	22ff      	movs	r2, #255	; 0xff
 8006c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d114      	bne.n	8006c58 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01a      	beq.n	8006c6c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3310      	adds	r3, #16
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f001 f918 	bl	8007e70 <xTaskRemoveFromEventList>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d012      	beq.n	8006c6c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c46:	4b0d      	ldr	r3, [pc, #52]	; (8006c7c <xQueueGenericReset+0xcc>)
 8006c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	e009      	b.n	8006c6c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3310      	adds	r3, #16
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7ff fef3 	bl	8006a48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3324      	adds	r3, #36	; 0x24
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7ff feee 	bl	8006a48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c6c:	f002 f8c4 	bl	8008df8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c70:	2301      	movs	r3, #1
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	e000ed04 	.word	0xe000ed04

08006c80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08e      	sub	sp, #56	; 0x38
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
 8006c8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d109      	bne.n	8006ca8 <xQueueGenericCreateStatic+0x28>
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ca6:	e7fe      	b.n	8006ca6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <xQueueGenericCreateStatic+0x42>
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc0:	e7fe      	b.n	8006cc0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <xQueueGenericCreateStatic+0x4e>
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <xQueueGenericCreateStatic+0x52>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <xQueueGenericCreateStatic+0x54>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d109      	bne.n	8006cec <xQueueGenericCreateStatic+0x6c>
 8006cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	623b      	str	r3, [r7, #32]
 8006cea:	e7fe      	b.n	8006cea <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d102      	bne.n	8006cf8 <xQueueGenericCreateStatic+0x78>
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <xQueueGenericCreateStatic+0x7c>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e000      	b.n	8006cfe <xQueueGenericCreateStatic+0x7e>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d109      	bne.n	8006d16 <xQueueGenericCreateStatic+0x96>
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	61fb      	str	r3, [r7, #28]
 8006d14:	e7fe      	b.n	8006d14 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d16:	2350      	movs	r3, #80	; 0x50
 8006d18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b50      	cmp	r3, #80	; 0x50
 8006d1e:	d009      	beq.n	8006d34 <xQueueGenericCreateStatic+0xb4>
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	61bb      	str	r3, [r7, #24]
 8006d32:	e7fe      	b.n	8006d32 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d34:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00d      	beq.n	8006d5c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d48:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	4613      	mov	r3, r2
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	68b9      	ldr	r1, [r7, #8]
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 f805 	bl	8006d66 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3730      	adds	r7, #48	; 0x30
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b084      	sub	sp, #16
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]
 8006d72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d103      	bne.n	8006d82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	e002      	b.n	8006d88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d94:	2101      	movs	r1, #1
 8006d96:	69b8      	ldr	r0, [r7, #24]
 8006d98:	f7ff ff0a 	bl	8006bb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	78fa      	ldrb	r2, [r7, #3]
 8006da0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006da4:	bf00      	nop
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08e      	sub	sp, #56	; 0x38
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
 8006db8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d109      	bne.n	8006ddc <xQueueGenericSend+0x30>
 8006dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dda:	e7fe      	b.n	8006dda <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d103      	bne.n	8006dea <xQueueGenericSend+0x3e>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <xQueueGenericSend+0x42>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e000      	b.n	8006df0 <xQueueGenericSend+0x44>
 8006dee:	2300      	movs	r3, #0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d109      	bne.n	8006e08 <xQueueGenericSend+0x5c>
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	627b      	str	r3, [r7, #36]	; 0x24
 8006e06:	e7fe      	b.n	8006e06 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d103      	bne.n	8006e16 <xQueueGenericSend+0x6a>
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d101      	bne.n	8006e1a <xQueueGenericSend+0x6e>
 8006e16:	2301      	movs	r3, #1
 8006e18:	e000      	b.n	8006e1c <xQueueGenericSend+0x70>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d109      	bne.n	8006e34 <xQueueGenericSend+0x88>
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	623b      	str	r3, [r7, #32]
 8006e32:	e7fe      	b.n	8006e32 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e34:	f001 fa32 	bl	800829c <xTaskGetSchedulerState>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d102      	bne.n	8006e44 <xQueueGenericSend+0x98>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <xQueueGenericSend+0x9c>
 8006e44:	2301      	movs	r3, #1
 8006e46:	e000      	b.n	8006e4a <xQueueGenericSend+0x9e>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d109      	bne.n	8006e62 <xQueueGenericSend+0xb6>
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	e7fe      	b.n	8006e60 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e62:	f001 ff9b 	bl	8008d9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d302      	bcc.n	8006e78 <xQueueGenericSend+0xcc>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d129      	bne.n	8006ecc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	68b9      	ldr	r1, [r7, #8]
 8006e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e7e:	f000 f9ff 	bl	8007280 <prvCopyDataToQueue>
 8006e82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d010      	beq.n	8006eae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	3324      	adds	r3, #36	; 0x24
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 ffed 	bl	8007e70 <xTaskRemoveFromEventList>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d013      	beq.n	8006ec4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e9c:	4b3f      	ldr	r3, [pc, #252]	; (8006f9c <xQueueGenericSend+0x1f0>)
 8006e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	e00a      	b.n	8006ec4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d007      	beq.n	8006ec4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006eb4:	4b39      	ldr	r3, [pc, #228]	; (8006f9c <xQueueGenericSend+0x1f0>)
 8006eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ec4:	f001 ff98 	bl	8008df8 <vPortExitCritical>
				return pdPASS;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e063      	b.n	8006f94 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d103      	bne.n	8006eda <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ed2:	f001 ff91 	bl	8008df8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e05c      	b.n	8006f94 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d106      	bne.n	8006eee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ee0:	f107 0314 	add.w	r3, r7, #20
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f001 f885 	bl	8007ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006eea:	2301      	movs	r3, #1
 8006eec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006eee:	f001 ff83 	bl	8008df8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ef2:	f000 fd67 	bl	80079c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ef6:	f001 ff51 	bl	8008d9c <vPortEnterCritical>
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f00:	b25b      	sxtb	r3, r3
 8006f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f06:	d103      	bne.n	8006f10 <xQueueGenericSend+0x164>
 8006f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f16:	b25b      	sxtb	r3, r3
 8006f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1c:	d103      	bne.n	8006f26 <xQueueGenericSend+0x17a>
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f26:	f001 ff67 	bl	8008df8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f2a:	1d3a      	adds	r2, r7, #4
 8006f2c:	f107 0314 	add.w	r3, r7, #20
 8006f30:	4611      	mov	r1, r2
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 f874 	bl	8008020 <xTaskCheckForTimeOut>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d124      	bne.n	8006f88 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f40:	f000 fa96 	bl	8007470 <prvIsQueueFull>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d018      	beq.n	8006f7c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	3310      	adds	r3, #16
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	4611      	mov	r1, r2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 ff04 	bl	8007d60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f5a:	f000 fa21 	bl	80073a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f5e:	f000 fd3f 	bl	80079e0 <xTaskResumeAll>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f47f af7c 	bne.w	8006e62 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006f6a:	4b0c      	ldr	r3, [pc, #48]	; (8006f9c <xQueueGenericSend+0x1f0>)
 8006f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	e772      	b.n	8006e62 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f7e:	f000 fa0f 	bl	80073a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f82:	f000 fd2d 	bl	80079e0 <xTaskResumeAll>
 8006f86:	e76c      	b.n	8006e62 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f8a:	f000 fa09 	bl	80073a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f8e:	f000 fd27 	bl	80079e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3738      	adds	r7, #56	; 0x38
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	e000ed04 	.word	0xe000ed04

08006fa0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08e      	sub	sp, #56	; 0x38
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d109      	bne.n	8006fcc <xQueueGenericSendFromISR+0x2c>
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fca:	e7fe      	b.n	8006fca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d103      	bne.n	8006fda <xQueueGenericSendFromISR+0x3a>
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <xQueueGenericSendFromISR+0x3e>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e000      	b.n	8006fe0 <xQueueGenericSendFromISR+0x40>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d109      	bne.n	8006ff8 <xQueueGenericSendFromISR+0x58>
 8006fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	623b      	str	r3, [r7, #32]
 8006ff6:	e7fe      	b.n	8006ff6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d103      	bne.n	8007006 <xQueueGenericSendFromISR+0x66>
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007002:	2b01      	cmp	r3, #1
 8007004:	d101      	bne.n	800700a <xQueueGenericSendFromISR+0x6a>
 8007006:	2301      	movs	r3, #1
 8007008:	e000      	b.n	800700c <xQueueGenericSendFromISR+0x6c>
 800700a:	2300      	movs	r3, #0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d109      	bne.n	8007024 <xQueueGenericSendFromISR+0x84>
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	61fb      	str	r3, [r7, #28]
 8007022:	e7fe      	b.n	8007022 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007024:	f001 ff96 	bl	8008f54 <vPortValidateInterruptPriority>
	__asm volatile
 8007028:	f3ef 8211 	mrs	r2, BASEPRI
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	61ba      	str	r2, [r7, #24]
 800703e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007040:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007042:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704c:	429a      	cmp	r2, r3
 800704e:	d302      	bcc.n	8007056 <xQueueGenericSendFromISR+0xb6>
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	2b02      	cmp	r3, #2
 8007054:	d12c      	bne.n	80070b0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800705c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	68b9      	ldr	r1, [r7, #8]
 8007064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007066:	f000 f90b 	bl	8007280 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800706a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007072:	d112      	bne.n	800709a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	2b00      	cmp	r3, #0
 800707a:	d016      	beq.n	80070aa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	3324      	adds	r3, #36	; 0x24
 8007080:	4618      	mov	r0, r3
 8007082:	f000 fef5 	bl	8007e70 <xTaskRemoveFromEventList>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00e      	beq.n	80070aa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00b      	beq.n	80070aa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	e007      	b.n	80070aa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800709a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800709e:	3301      	adds	r3, #1
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	b25a      	sxtb	r2, r3
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80070aa:	2301      	movs	r3, #1
 80070ac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80070ae:	e001      	b.n	80070b4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80070b0:	2300      	movs	r3, #0
 80070b2:	637b      	str	r3, [r7, #52]	; 0x34
 80070b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b6:	613b      	str	r3, [r7, #16]
	__asm volatile
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3738      	adds	r7, #56	; 0x38
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08c      	sub	sp, #48	; 0x30
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80070d4:	2300      	movs	r3, #0
 80070d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d109      	bne.n	80070f6 <xQueueReceive+0x2e>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	623b      	str	r3, [r7, #32]
 80070f4:	e7fe      	b.n	80070f4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d103      	bne.n	8007104 <xQueueReceive+0x3c>
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <xQueueReceive+0x40>
 8007104:	2301      	movs	r3, #1
 8007106:	e000      	b.n	800710a <xQueueReceive+0x42>
 8007108:	2300      	movs	r3, #0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <xQueueReceive+0x5a>
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	61fb      	str	r3, [r7, #28]
 8007120:	e7fe      	b.n	8007120 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007122:	f001 f8bb 	bl	800829c <xTaskGetSchedulerState>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d102      	bne.n	8007132 <xQueueReceive+0x6a>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <xQueueReceive+0x6e>
 8007132:	2301      	movs	r3, #1
 8007134:	e000      	b.n	8007138 <xQueueReceive+0x70>
 8007136:	2300      	movs	r3, #0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d109      	bne.n	8007150 <xQueueReceive+0x88>
 800713c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	61bb      	str	r3, [r7, #24]
 800714e:	e7fe      	b.n	800714e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007150:	f001 fe24 	bl	8008d9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007158:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	2b00      	cmp	r3, #0
 800715e:	d01f      	beq.n	80071a0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007164:	f000 f8f6 	bl	8007354 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	1e5a      	subs	r2, r3, #1
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00f      	beq.n	8007198 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	3310      	adds	r3, #16
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fe77 	bl	8007e70 <xTaskRemoveFromEventList>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d007      	beq.n	8007198 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007188:	4b3c      	ldr	r3, [pc, #240]	; (800727c <xQueueReceive+0x1b4>)
 800718a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007198:	f001 fe2e 	bl	8008df8 <vPortExitCritical>
				return pdPASS;
 800719c:	2301      	movs	r3, #1
 800719e:	e069      	b.n	8007274 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d103      	bne.n	80071ae <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071a6:	f001 fe27 	bl	8008df8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071aa:	2300      	movs	r3, #0
 80071ac:	e062      	b.n	8007274 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d106      	bne.n	80071c2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071b4:	f107 0310 	add.w	r3, r7, #16
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 ff1b 	bl	8007ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071be:	2301      	movs	r3, #1
 80071c0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071c2:	f001 fe19 	bl	8008df8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071c6:	f000 fbfd 	bl	80079c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071ca:	f001 fde7 	bl	8008d9c <vPortEnterCritical>
 80071ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071d4:	b25b      	sxtb	r3, r3
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071da:	d103      	bne.n	80071e4 <xQueueReceive+0x11c>
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071ea:	b25b      	sxtb	r3, r3
 80071ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f0:	d103      	bne.n	80071fa <xQueueReceive+0x132>
 80071f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071fa:	f001 fdfd 	bl	8008df8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071fe:	1d3a      	adds	r2, r7, #4
 8007200:	f107 0310 	add.w	r3, r7, #16
 8007204:	4611      	mov	r1, r2
 8007206:	4618      	mov	r0, r3
 8007208:	f000 ff0a 	bl	8008020 <xTaskCheckForTimeOut>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d123      	bne.n	800725a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007214:	f000 f916 	bl	8007444 <prvIsQueueEmpty>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d017      	beq.n	800724e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800721e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007220:	3324      	adds	r3, #36	; 0x24
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	4611      	mov	r1, r2
 8007226:	4618      	mov	r0, r3
 8007228:	f000 fd9a 	bl	8007d60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800722c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800722e:	f000 f8b7 	bl	80073a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007232:	f000 fbd5 	bl	80079e0 <xTaskResumeAll>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d189      	bne.n	8007150 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800723c:	4b0f      	ldr	r3, [pc, #60]	; (800727c <xQueueReceive+0x1b4>)
 800723e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	e780      	b.n	8007150 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800724e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007250:	f000 f8a6 	bl	80073a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007254:	f000 fbc4 	bl	80079e0 <xTaskResumeAll>
 8007258:	e77a      	b.n	8007150 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800725a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800725c:	f000 f8a0 	bl	80073a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007260:	f000 fbbe 	bl	80079e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007266:	f000 f8ed 	bl	8007444 <prvIsQueueEmpty>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	f43f af6f 	beq.w	8007150 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007272:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007274:	4618      	mov	r0, r3
 8007276:	3730      	adds	r7, #48	; 0x30
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	e000ed04 	.word	0xe000ed04

08007280 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800728c:	2300      	movs	r3, #0
 800728e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007294:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10d      	bne.n	80072ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d14d      	bne.n	8007342 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 f814 	bl	80082d8 <xTaskPriorityDisinherit>
 80072b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	609a      	str	r2, [r3, #8]
 80072b8:	e043      	b.n	8007342 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d119      	bne.n	80072f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6858      	ldr	r0, [r3, #4]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c8:	461a      	mov	r2, r3
 80072ca:	68b9      	ldr	r1, [r7, #8]
 80072cc:	f002 fa0a 	bl	80096e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d8:	441a      	add	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d32b      	bcc.n	8007342 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	605a      	str	r2, [r3, #4]
 80072f2:	e026      	b.n	8007342 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	68d8      	ldr	r0, [r3, #12]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fc:	461a      	mov	r2, r3
 80072fe:	68b9      	ldr	r1, [r7, #8]
 8007300:	f002 f9f0 	bl	80096e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	68da      	ldr	r2, [r3, #12]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730c:	425b      	negs	r3, r3
 800730e:	441a      	add	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	68da      	ldr	r2, [r3, #12]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	429a      	cmp	r2, r3
 800731e:	d207      	bcs.n	8007330 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	689a      	ldr	r2, [r3, #8]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007328:	425b      	negs	r3, r3
 800732a:	441a      	add	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d105      	bne.n	8007342 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	3b01      	subs	r3, #1
 8007340:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800734a:	697b      	ldr	r3, [r7, #20]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	2b00      	cmp	r3, #0
 8007364:	d018      	beq.n	8007398 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68da      	ldr	r2, [r3, #12]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	441a      	add	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68da      	ldr	r2, [r3, #12]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	429a      	cmp	r2, r3
 800737e:	d303      	bcc.n	8007388 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68d9      	ldr	r1, [r3, #12]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	461a      	mov	r2, r3
 8007392:	6838      	ldr	r0, [r7, #0]
 8007394:	f002 f9a6 	bl	80096e4 <memcpy>
	}
}
 8007398:	bf00      	nop
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80073a8:	f001 fcf8 	bl	8008d9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073b4:	e011      	b.n	80073da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d012      	beq.n	80073e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3324      	adds	r3, #36	; 0x24
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fd54 	bl	8007e70 <xTaskRemoveFromEventList>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073ce:	f000 fe87 	bl	80080e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	dce9      	bgt.n	80073b6 <prvUnlockQueue+0x16>
 80073e2:	e000      	b.n	80073e6 <prvUnlockQueue+0x46>
					break;
 80073e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	22ff      	movs	r2, #255	; 0xff
 80073ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80073ee:	f001 fd03 	bl	8008df8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073f2:	f001 fcd3 	bl	8008d9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073fe:	e011      	b.n	8007424 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d012      	beq.n	800742e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3310      	adds	r3, #16
 800740c:	4618      	mov	r0, r3
 800740e:	f000 fd2f 	bl	8007e70 <xTaskRemoveFromEventList>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007418:	f000 fe62 	bl	80080e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800741c:	7bbb      	ldrb	r3, [r7, #14]
 800741e:	3b01      	subs	r3, #1
 8007420:	b2db      	uxtb	r3, r3
 8007422:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007424:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007428:	2b00      	cmp	r3, #0
 800742a:	dce9      	bgt.n	8007400 <prvUnlockQueue+0x60>
 800742c:	e000      	b.n	8007430 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800742e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	22ff      	movs	r2, #255	; 0xff
 8007434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007438:	f001 fcde 	bl	8008df8 <vPortExitCritical>
}
 800743c:	bf00      	nop
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800744c:	f001 fca6 	bl	8008d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007454:	2b00      	cmp	r3, #0
 8007456:	d102      	bne.n	800745e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007458:	2301      	movs	r3, #1
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	e001      	b.n	8007462 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007462:	f001 fcc9 	bl	8008df8 <vPortExitCritical>

	return xReturn;
 8007466:	68fb      	ldr	r3, [r7, #12]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007478:	f001 fc90 	bl	8008d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007484:	429a      	cmp	r2, r3
 8007486:	d102      	bne.n	800748e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007488:	2301      	movs	r3, #1
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	e001      	b.n	8007492 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007492:	f001 fcb1 	bl	8008df8 <vPortExitCritical>

	return xReturn;
 8007496:	68fb      	ldr	r3, [r7, #12]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]
 80074ae:	e014      	b.n	80074da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80074b0:	4a0e      	ldr	r2, [pc, #56]	; (80074ec <vQueueAddToRegistry+0x4c>)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10b      	bne.n	80074d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80074bc:	490b      	ldr	r1, [pc, #44]	; (80074ec <vQueueAddToRegistry+0x4c>)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80074c6:	4a09      	ldr	r2, [pc, #36]	; (80074ec <vQueueAddToRegistry+0x4c>)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	4413      	add	r3, r2
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80074d2:	e005      	b.n	80074e0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	3301      	adds	r3, #1
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b07      	cmp	r3, #7
 80074de:	d9e7      	bls.n	80074b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80074e0:	bf00      	nop
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	20009154 	.word	0x20009154

080074f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007500:	f001 fc4c 	bl	8008d9c <vPortEnterCritical>
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800750a:	b25b      	sxtb	r3, r3
 800750c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007510:	d103      	bne.n	800751a <vQueueWaitForMessageRestricted+0x2a>
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007520:	b25b      	sxtb	r3, r3
 8007522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007526:	d103      	bne.n	8007530 <vQueueWaitForMessageRestricted+0x40>
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007530:	f001 fc62 	bl	8008df8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007538:	2b00      	cmp	r3, #0
 800753a:	d106      	bne.n	800754a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	3324      	adds	r3, #36	; 0x24
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	68b9      	ldr	r1, [r7, #8]
 8007544:	4618      	mov	r0, r3
 8007546:	f000 fc69 	bl	8007e1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800754a:	6978      	ldr	r0, [r7, #20]
 800754c:	f7ff ff28 	bl	80073a0 <prvUnlockQueue>
	}
 8007550:	bf00      	nop
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08e      	sub	sp, #56	; 0x38
 800755c:	af04      	add	r7, sp, #16
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007568:	2b00      	cmp	r3, #0
 800756a:	d109      	bne.n	8007580 <xTaskCreateStatic+0x28>
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	623b      	str	r3, [r7, #32]
 800757e:	e7fe      	b.n	800757e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007582:	2b00      	cmp	r3, #0
 8007584:	d109      	bne.n	800759a <xTaskCreateStatic+0x42>
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	61fb      	str	r3, [r7, #28]
 8007598:	e7fe      	b.n	8007598 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800759a:	235c      	movs	r3, #92	; 0x5c
 800759c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	2b5c      	cmp	r3, #92	; 0x5c
 80075a2:	d009      	beq.n	80075b8 <xTaskCreateStatic+0x60>
 80075a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	61bb      	str	r3, [r7, #24]
 80075b6:	e7fe      	b.n	80075b6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80075b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d01e      	beq.n	80075fe <xTaskCreateStatic+0xa6>
 80075c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d01b      	beq.n	80075fe <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075d8:	2300      	movs	r3, #0
 80075da:	9303      	str	r3, [sp, #12]
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	9302      	str	r3, [sp, #8]
 80075e0:	f107 0314 	add.w	r3, r7, #20
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	68b9      	ldr	r1, [r7, #8]
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 f850 	bl	8007696 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075f8:	f000 f8dc 	bl	80077b4 <prvAddNewTaskToReadyList>
 80075fc:	e001      	b.n	8007602 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007602:	697b      	ldr	r3, [r7, #20]
	}
 8007604:	4618      	mov	r0, r3
 8007606:	3728      	adds	r7, #40	; 0x28
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08c      	sub	sp, #48	; 0x30
 8007610:	af04      	add	r7, sp, #16
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	4613      	mov	r3, r2
 800761a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800761c:	88fb      	ldrh	r3, [r7, #6]
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4618      	mov	r0, r3
 8007622:	f001 fcd5 	bl	8008fd0 <pvPortMalloc>
 8007626:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00e      	beq.n	800764c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800762e:	205c      	movs	r0, #92	; 0x5c
 8007630:	f001 fcce 	bl	8008fd0 <pvPortMalloc>
 8007634:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	631a      	str	r2, [r3, #48]	; 0x30
 8007642:	e005      	b.n	8007650 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007644:	6978      	ldr	r0, [r7, #20]
 8007646:	f001 fd85 	bl	8009154 <vPortFree>
 800764a:	e001      	b.n	8007650 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800764c:	2300      	movs	r3, #0
 800764e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d017      	beq.n	8007686 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800765e:	88fa      	ldrh	r2, [r7, #6]
 8007660:	2300      	movs	r3, #0
 8007662:	9303      	str	r3, [sp, #12]
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	9302      	str	r3, [sp, #8]
 8007668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	68b9      	ldr	r1, [r7, #8]
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 f80e 	bl	8007696 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800767a:	69f8      	ldr	r0, [r7, #28]
 800767c:	f000 f89a 	bl	80077b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007680:	2301      	movs	r3, #1
 8007682:	61bb      	str	r3, [r7, #24]
 8007684:	e002      	b.n	800768c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007686:	f04f 33ff 	mov.w	r3, #4294967295
 800768a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800768c:	69bb      	ldr	r3, [r7, #24]
	}
 800768e:	4618      	mov	r0, r3
 8007690:	3720      	adds	r7, #32
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b088      	sub	sp, #32
 800769a:	af00      	add	r7, sp, #0
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	607a      	str	r2, [r7, #4]
 80076a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80076a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	461a      	mov	r2, r3
 80076ae:	21a5      	movs	r1, #165	; 0xa5
 80076b0:	f002 f823 	bl	80096fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076be:	3b01      	subs	r3, #1
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	f023 0307 	bic.w	r3, r3, #7
 80076cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	f003 0307 	and.w	r3, r3, #7
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d009      	beq.n	80076ec <prvInitialiseNewTask+0x56>
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	617b      	str	r3, [r7, #20]
 80076ea:	e7fe      	b.n	80076ea <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d01f      	beq.n	8007732 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076f2:	2300      	movs	r3, #0
 80076f4:	61fb      	str	r3, [r7, #28]
 80076f6:	e012      	b.n	800771e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	4413      	add	r3, r2
 80076fe:	7819      	ldrb	r1, [r3, #0]
 8007700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	4413      	add	r3, r2
 8007706:	3334      	adds	r3, #52	; 0x34
 8007708:	460a      	mov	r2, r1
 800770a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	4413      	add	r3, r2
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d006      	beq.n	8007726 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	3301      	adds	r3, #1
 800771c:	61fb      	str	r3, [r7, #28]
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	2b0f      	cmp	r3, #15
 8007722:	d9e9      	bls.n	80076f8 <prvInitialiseNewTask+0x62>
 8007724:	e000      	b.n	8007728 <prvInitialiseNewTask+0x92>
			{
				break;
 8007726:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007730:	e003      	b.n	800773a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	2b37      	cmp	r3, #55	; 0x37
 800773e:	d901      	bls.n	8007744 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007740:	2337      	movs	r3, #55	; 0x37
 8007742:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007748:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800774a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800774e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007752:	2200      	movs	r2, #0
 8007754:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	3304      	adds	r3, #4
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff f994 	bl	8006a88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007762:	3318      	adds	r3, #24
 8007764:	4618      	mov	r0, r3
 8007766:	f7ff f98f 	bl	8006a88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800776e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800777e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007782:	2200      	movs	r2, #0
 8007784:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	68f9      	ldr	r1, [r7, #12]
 8007792:	69b8      	ldr	r0, [r7, #24]
 8007794:	f001 f9de 	bl	8008b54 <pxPortInitialiseStack>
 8007798:	4602      	mov	r2, r0
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077aa:	bf00      	nop
 80077ac:	3720      	adds	r7, #32
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077bc:	f001 faee 	bl	8008d9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077c0:	4b2d      	ldr	r3, [pc, #180]	; (8007878 <prvAddNewTaskToReadyList+0xc4>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3301      	adds	r3, #1
 80077c6:	4a2c      	ldr	r2, [pc, #176]	; (8007878 <prvAddNewTaskToReadyList+0xc4>)
 80077c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077ca:	4b2c      	ldr	r3, [pc, #176]	; (800787c <prvAddNewTaskToReadyList+0xc8>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d109      	bne.n	80077e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077d2:	4a2a      	ldr	r2, [pc, #168]	; (800787c <prvAddNewTaskToReadyList+0xc8>)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077d8:	4b27      	ldr	r3, [pc, #156]	; (8007878 <prvAddNewTaskToReadyList+0xc4>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d110      	bne.n	8007802 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077e0:	f000 fca2 	bl	8008128 <prvInitialiseTaskLists>
 80077e4:	e00d      	b.n	8007802 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077e6:	4b26      	ldr	r3, [pc, #152]	; (8007880 <prvAddNewTaskToReadyList+0xcc>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d109      	bne.n	8007802 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077ee:	4b23      	ldr	r3, [pc, #140]	; (800787c <prvAddNewTaskToReadyList+0xc8>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d802      	bhi.n	8007802 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077fc:	4a1f      	ldr	r2, [pc, #124]	; (800787c <prvAddNewTaskToReadyList+0xc8>)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007802:	4b20      	ldr	r3, [pc, #128]	; (8007884 <prvAddNewTaskToReadyList+0xd0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3301      	adds	r3, #1
 8007808:	4a1e      	ldr	r2, [pc, #120]	; (8007884 <prvAddNewTaskToReadyList+0xd0>)
 800780a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800780c:	4b1d      	ldr	r3, [pc, #116]	; (8007884 <prvAddNewTaskToReadyList+0xd0>)
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007818:	4b1b      	ldr	r3, [pc, #108]	; (8007888 <prvAddNewTaskToReadyList+0xd4>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	429a      	cmp	r2, r3
 800781e:	d903      	bls.n	8007828 <prvAddNewTaskToReadyList+0x74>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	4a18      	ldr	r2, [pc, #96]	; (8007888 <prvAddNewTaskToReadyList+0xd4>)
 8007826:	6013      	str	r3, [r2, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782c:	4613      	mov	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4a15      	ldr	r2, [pc, #84]	; (800788c <prvAddNewTaskToReadyList+0xd8>)
 8007836:	441a      	add	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	3304      	adds	r3, #4
 800783c:	4619      	mov	r1, r3
 800783e:	4610      	mov	r0, r2
 8007840:	f7ff f92f 	bl	8006aa2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007844:	f001 fad8 	bl	8008df8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007848:	4b0d      	ldr	r3, [pc, #52]	; (8007880 <prvAddNewTaskToReadyList+0xcc>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00e      	beq.n	800786e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007850:	4b0a      	ldr	r3, [pc, #40]	; (800787c <prvAddNewTaskToReadyList+0xc8>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785a:	429a      	cmp	r2, r3
 800785c:	d207      	bcs.n	800786e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800785e:	4b0c      	ldr	r3, [pc, #48]	; (8007890 <prvAddNewTaskToReadyList+0xdc>)
 8007860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800786e:	bf00      	nop
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	200028cc 	.word	0x200028cc
 800787c:	200023f8 	.word	0x200023f8
 8007880:	200028d8 	.word	0x200028d8
 8007884:	200028e8 	.word	0x200028e8
 8007888:	200028d4 	.word	0x200028d4
 800788c:	200023fc 	.word	0x200023fc
 8007890:	e000ed04 	.word	0xe000ed04

08007894 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800789c:	2300      	movs	r3, #0
 800789e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d016      	beq.n	80078d4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80078a6:	4b13      	ldr	r3, [pc, #76]	; (80078f4 <vTaskDelay+0x60>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d009      	beq.n	80078c2 <vTaskDelay+0x2e>
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	60bb      	str	r3, [r7, #8]
 80078c0:	e7fe      	b.n	80078c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80078c2:	f000 f87f 	bl	80079c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078c6:	2100      	movs	r1, #0
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fd89 	bl	80083e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078ce:	f000 f887 	bl	80079e0 <xTaskResumeAll>
 80078d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d107      	bne.n	80078ea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80078da:	4b07      	ldr	r3, [pc, #28]	; (80078f8 <vTaskDelay+0x64>)
 80078dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078ea:	bf00      	nop
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	200028f4 	.word	0x200028f4
 80078f8:	e000ed04 	.word	0xe000ed04

080078fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08a      	sub	sp, #40	; 0x28
 8007900:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007902:	2300      	movs	r3, #0
 8007904:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007906:	2300      	movs	r3, #0
 8007908:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800790a:	463a      	mov	r2, r7
 800790c:	1d39      	adds	r1, r7, #4
 800790e:	f107 0308 	add.w	r3, r7, #8
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fe04 	bl	8006520 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	9202      	str	r2, [sp, #8]
 8007920:	9301      	str	r3, [sp, #4]
 8007922:	2300      	movs	r3, #0
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	2300      	movs	r3, #0
 8007928:	460a      	mov	r2, r1
 800792a:	4920      	ldr	r1, [pc, #128]	; (80079ac <vTaskStartScheduler+0xb0>)
 800792c:	4820      	ldr	r0, [pc, #128]	; (80079b0 <vTaskStartScheduler+0xb4>)
 800792e:	f7ff fe13 	bl	8007558 <xTaskCreateStatic>
 8007932:	4602      	mov	r2, r0
 8007934:	4b1f      	ldr	r3, [pc, #124]	; (80079b4 <vTaskStartScheduler+0xb8>)
 8007936:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007938:	4b1e      	ldr	r3, [pc, #120]	; (80079b4 <vTaskStartScheduler+0xb8>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d002      	beq.n	8007946 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007940:	2301      	movs	r3, #1
 8007942:	617b      	str	r3, [r7, #20]
 8007944:	e001      	b.n	800794a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007946:	2300      	movs	r3, #0
 8007948:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d102      	bne.n	8007956 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007950:	f000 fd9a 	bl	8008488 <xTimerCreateTimerTask>
 8007954:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d115      	bne.n	8007988 <vTaskStartScheduler+0x8c>
 800795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800796e:	4b12      	ldr	r3, [pc, #72]	; (80079b8 <vTaskStartScheduler+0xbc>)
 8007970:	f04f 32ff 	mov.w	r2, #4294967295
 8007974:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007976:	4b11      	ldr	r3, [pc, #68]	; (80079bc <vTaskStartScheduler+0xc0>)
 8007978:	2201      	movs	r2, #1
 800797a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800797c:	4b10      	ldr	r3, [pc, #64]	; (80079c0 <vTaskStartScheduler+0xc4>)
 800797e:	2200      	movs	r2, #0
 8007980:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007982:	f001 f96d 	bl	8008c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007986:	e00d      	b.n	80079a4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798e:	d109      	bne.n	80079a4 <vTaskStartScheduler+0xa8>
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	60fb      	str	r3, [r7, #12]
 80079a2:	e7fe      	b.n	80079a2 <vTaskStartScheduler+0xa6>
}
 80079a4:	bf00      	nop
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	0800a53c 	.word	0x0800a53c
 80079b0:	080080f9 	.word	0x080080f9
 80079b4:	200028f0 	.word	0x200028f0
 80079b8:	200028ec 	.word	0x200028ec
 80079bc:	200028d8 	.word	0x200028d8
 80079c0:	200028d0 	.word	0x200028d0

080079c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079c4:	b480      	push	{r7}
 80079c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80079c8:	4b04      	ldr	r3, [pc, #16]	; (80079dc <vTaskSuspendAll+0x18>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3301      	adds	r3, #1
 80079ce:	4a03      	ldr	r2, [pc, #12]	; (80079dc <vTaskSuspendAll+0x18>)
 80079d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80079d2:	bf00      	nop
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	200028f4 	.word	0x200028f4

080079e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079ee:	4b41      	ldr	r3, [pc, #260]	; (8007af4 <xTaskResumeAll+0x114>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <xTaskResumeAll+0x2a>
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	603b      	str	r3, [r7, #0]
 8007a08:	e7fe      	b.n	8007a08 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a0a:	f001 f9c7 	bl	8008d9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a0e:	4b39      	ldr	r3, [pc, #228]	; (8007af4 <xTaskResumeAll+0x114>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3b01      	subs	r3, #1
 8007a14:	4a37      	ldr	r2, [pc, #220]	; (8007af4 <xTaskResumeAll+0x114>)
 8007a16:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a18:	4b36      	ldr	r3, [pc, #216]	; (8007af4 <xTaskResumeAll+0x114>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d162      	bne.n	8007ae6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a20:	4b35      	ldr	r3, [pc, #212]	; (8007af8 <xTaskResumeAll+0x118>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d05e      	beq.n	8007ae6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a28:	e02f      	b.n	8007a8a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a2a:	4b34      	ldr	r3, [pc, #208]	; (8007afc <xTaskResumeAll+0x11c>)
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3318      	adds	r3, #24
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff f890 	bl	8006b5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3304      	adds	r3, #4
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff f88b 	bl	8006b5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4a:	4b2d      	ldr	r3, [pc, #180]	; (8007b00 <xTaskResumeAll+0x120>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d903      	bls.n	8007a5a <xTaskResumeAll+0x7a>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a56:	4a2a      	ldr	r2, [pc, #168]	; (8007b00 <xTaskResumeAll+0x120>)
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4a27      	ldr	r2, [pc, #156]	; (8007b04 <xTaskResumeAll+0x124>)
 8007a68:	441a      	add	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	4619      	mov	r1, r3
 8007a70:	4610      	mov	r0, r2
 8007a72:	f7ff f816 	bl	8006aa2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7a:	4b23      	ldr	r3, [pc, #140]	; (8007b08 <xTaskResumeAll+0x128>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d302      	bcc.n	8007a8a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007a84:	4b21      	ldr	r3, [pc, #132]	; (8007b0c <xTaskResumeAll+0x12c>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a8a:	4b1c      	ldr	r3, [pc, #112]	; (8007afc <xTaskResumeAll+0x11c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1cb      	bne.n	8007a2a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a98:	f000 fbe0 	bl	800825c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007a9c:	4b1c      	ldr	r3, [pc, #112]	; (8007b10 <xTaskResumeAll+0x130>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d010      	beq.n	8007aca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007aa8:	f000 f846 	bl	8007b38 <xTaskIncrementTick>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007ab2:	4b16      	ldr	r3, [pc, #88]	; (8007b0c <xTaskResumeAll+0x12c>)
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1f1      	bne.n	8007aa8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007ac4:	4b12      	ldr	r3, [pc, #72]	; (8007b10 <xTaskResumeAll+0x130>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007aca:	4b10      	ldr	r3, [pc, #64]	; (8007b0c <xTaskResumeAll+0x12c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d009      	beq.n	8007ae6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ad6:	4b0f      	ldr	r3, [pc, #60]	; (8007b14 <xTaskResumeAll+0x134>)
 8007ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ae6:	f001 f987 	bl	8008df8 <vPortExitCritical>

	return xAlreadyYielded;
 8007aea:	68bb      	ldr	r3, [r7, #8]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	200028f4 	.word	0x200028f4
 8007af8:	200028cc 	.word	0x200028cc
 8007afc:	2000288c 	.word	0x2000288c
 8007b00:	200028d4 	.word	0x200028d4
 8007b04:	200023fc 	.word	0x200023fc
 8007b08:	200023f8 	.word	0x200023f8
 8007b0c:	200028e0 	.word	0x200028e0
 8007b10:	200028dc 	.word	0x200028dc
 8007b14:	e000ed04 	.word	0xe000ed04

08007b18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b1e:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <xTaskGetTickCount+0x1c>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b24:	687b      	ldr	r3, [r7, #4]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	200028d0 	.word	0x200028d0

08007b38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b42:	4b4e      	ldr	r3, [pc, #312]	; (8007c7c <xTaskIncrementTick+0x144>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f040 8088 	bne.w	8007c5c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b4c:	4b4c      	ldr	r3, [pc, #304]	; (8007c80 <xTaskIncrementTick+0x148>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	3301      	adds	r3, #1
 8007b52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b54:	4a4a      	ldr	r2, [pc, #296]	; (8007c80 <xTaskIncrementTick+0x148>)
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d11f      	bne.n	8007ba0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b60:	4b48      	ldr	r3, [pc, #288]	; (8007c84 <xTaskIncrementTick+0x14c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d009      	beq.n	8007b7e <xTaskIncrementTick+0x46>
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	603b      	str	r3, [r7, #0]
 8007b7c:	e7fe      	b.n	8007b7c <xTaskIncrementTick+0x44>
 8007b7e:	4b41      	ldr	r3, [pc, #260]	; (8007c84 <xTaskIncrementTick+0x14c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	4b40      	ldr	r3, [pc, #256]	; (8007c88 <xTaskIncrementTick+0x150>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a3e      	ldr	r2, [pc, #248]	; (8007c84 <xTaskIncrementTick+0x14c>)
 8007b8a:	6013      	str	r3, [r2, #0]
 8007b8c:	4a3e      	ldr	r2, [pc, #248]	; (8007c88 <xTaskIncrementTick+0x150>)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	4b3e      	ldr	r3, [pc, #248]	; (8007c8c <xTaskIncrementTick+0x154>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3301      	adds	r3, #1
 8007b98:	4a3c      	ldr	r2, [pc, #240]	; (8007c8c <xTaskIncrementTick+0x154>)
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	f000 fb5e 	bl	800825c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ba0:	4b3b      	ldr	r3, [pc, #236]	; (8007c90 <xTaskIncrementTick+0x158>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d349      	bcc.n	8007c3e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007baa:	4b36      	ldr	r3, [pc, #216]	; (8007c84 <xTaskIncrementTick+0x14c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d104      	bne.n	8007bbe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bb4:	4b36      	ldr	r3, [pc, #216]	; (8007c90 <xTaskIncrementTick+0x158>)
 8007bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bba:	601a      	str	r2, [r3, #0]
					break;
 8007bbc:	e03f      	b.n	8007c3e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bbe:	4b31      	ldr	r3, [pc, #196]	; (8007c84 <xTaskIncrementTick+0x14c>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d203      	bcs.n	8007bde <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bd6:	4a2e      	ldr	r2, [pc, #184]	; (8007c90 <xTaskIncrementTick+0x158>)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bdc:	e02f      	b.n	8007c3e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	3304      	adds	r3, #4
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fe ffba 	bl	8006b5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	3318      	adds	r3, #24
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fe ffb1 	bl	8006b5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bfe:	4b25      	ldr	r3, [pc, #148]	; (8007c94 <xTaskIncrementTick+0x15c>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d903      	bls.n	8007c0e <xTaskIncrementTick+0xd6>
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0a:	4a22      	ldr	r2, [pc, #136]	; (8007c94 <xTaskIncrementTick+0x15c>)
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4a1f      	ldr	r2, [pc, #124]	; (8007c98 <xTaskIncrementTick+0x160>)
 8007c1c:	441a      	add	r2, r3
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	3304      	adds	r3, #4
 8007c22:	4619      	mov	r1, r3
 8007c24:	4610      	mov	r0, r2
 8007c26:	f7fe ff3c 	bl	8006aa2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2e:	4b1b      	ldr	r3, [pc, #108]	; (8007c9c <xTaskIncrementTick+0x164>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d3b8      	bcc.n	8007baa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c3c:	e7b5      	b.n	8007baa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c3e:	4b17      	ldr	r3, [pc, #92]	; (8007c9c <xTaskIncrementTick+0x164>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c44:	4914      	ldr	r1, [pc, #80]	; (8007c98 <xTaskIncrementTick+0x160>)
 8007c46:	4613      	mov	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	440b      	add	r3, r1
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d907      	bls.n	8007c66 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8007c56:	2301      	movs	r3, #1
 8007c58:	617b      	str	r3, [r7, #20]
 8007c5a:	e004      	b.n	8007c66 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007c5c:	4b10      	ldr	r3, [pc, #64]	; (8007ca0 <xTaskIncrementTick+0x168>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3301      	adds	r3, #1
 8007c62:	4a0f      	ldr	r2, [pc, #60]	; (8007ca0 <xTaskIncrementTick+0x168>)
 8007c64:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007c66:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <xTaskIncrementTick+0x16c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007c72:	697b      	ldr	r3, [r7, #20]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3718      	adds	r7, #24
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	200028f4 	.word	0x200028f4
 8007c80:	200028d0 	.word	0x200028d0
 8007c84:	20002884 	.word	0x20002884
 8007c88:	20002888 	.word	0x20002888
 8007c8c:	200028e4 	.word	0x200028e4
 8007c90:	200028ec 	.word	0x200028ec
 8007c94:	200028d4 	.word	0x200028d4
 8007c98:	200023fc 	.word	0x200023fc
 8007c9c:	200023f8 	.word	0x200023f8
 8007ca0:	200028dc 	.word	0x200028dc
 8007ca4:	200028e0 	.word	0x200028e0

08007ca8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007cae:	4b27      	ldr	r3, [pc, #156]	; (8007d4c <vTaskSwitchContext+0xa4>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cb6:	4b26      	ldr	r3, [pc, #152]	; (8007d50 <vTaskSwitchContext+0xa8>)
 8007cb8:	2201      	movs	r2, #1
 8007cba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cbc:	e040      	b.n	8007d40 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007cbe:	4b24      	ldr	r3, [pc, #144]	; (8007d50 <vTaskSwitchContext+0xa8>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cc4:	4b23      	ldr	r3, [pc, #140]	; (8007d54 <vTaskSwitchContext+0xac>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60fb      	str	r3, [r7, #12]
 8007cca:	e00f      	b.n	8007cec <vTaskSwitchContext+0x44>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d109      	bne.n	8007ce6 <vTaskSwitchContext+0x3e>
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	607b      	str	r3, [r7, #4]
 8007ce4:	e7fe      	b.n	8007ce4 <vTaskSwitchContext+0x3c>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	491a      	ldr	r1, [pc, #104]	; (8007d58 <vTaskSwitchContext+0xb0>)
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d0e5      	beq.n	8007ccc <vTaskSwitchContext+0x24>
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4613      	mov	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4a13      	ldr	r2, [pc, #76]	; (8007d58 <vTaskSwitchContext+0xb0>)
 8007d0c:	4413      	add	r3, r2
 8007d0e:	60bb      	str	r3, [r7, #8]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	605a      	str	r2, [r3, #4]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	3308      	adds	r3, #8
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d104      	bne.n	8007d30 <vTaskSwitchContext+0x88>
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	605a      	str	r2, [r3, #4]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	4a09      	ldr	r2, [pc, #36]	; (8007d5c <vTaskSwitchContext+0xb4>)
 8007d38:	6013      	str	r3, [r2, #0]
 8007d3a:	4a06      	ldr	r2, [pc, #24]	; (8007d54 <vTaskSwitchContext+0xac>)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6013      	str	r3, [r2, #0]
}
 8007d40:	bf00      	nop
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	200028f4 	.word	0x200028f4
 8007d50:	200028e0 	.word	0x200028e0
 8007d54:	200028d4 	.word	0x200028d4
 8007d58:	200023fc 	.word	0x200023fc
 8007d5c:	200023f8 	.word	0x200023f8

08007d60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <vTaskPlaceOnEventList+0x24>
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	60fb      	str	r3, [r7, #12]
 8007d82:	e7fe      	b.n	8007d82 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d84:	4b07      	ldr	r3, [pc, #28]	; (8007da4 <vTaskPlaceOnEventList+0x44>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3318      	adds	r3, #24
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7fe feac 	bl	8006aea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d92:	2101      	movs	r1, #1
 8007d94:	6838      	ldr	r0, [r7, #0]
 8007d96:	f000 fb23 	bl	80083e0 <prvAddCurrentTaskToDelayedList>
}
 8007d9a:	bf00      	nop
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	200023f8 	.word	0x200023f8

08007da8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d109      	bne.n	8007dce <vTaskPlaceOnUnorderedEventList+0x26>
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	e7fe      	b.n	8007dcc <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007dce:	4b11      	ldr	r3, [pc, #68]	; (8007e14 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d109      	bne.n	8007dea <vTaskPlaceOnUnorderedEventList+0x42>
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	613b      	str	r3, [r7, #16]
 8007de8:	e7fe      	b.n	8007de8 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007dea:	4b0b      	ldr	r3, [pc, #44]	; (8007e18 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007df4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007df6:	4b08      	ldr	r3, [pc, #32]	; (8007e18 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3318      	adds	r3, #24
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f7fe fe4f 	bl	8006aa2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e04:	2101      	movs	r1, #1
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 faea 	bl	80083e0 <prvAddCurrentTaskToDelayedList>
}
 8007e0c:	bf00      	nop
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	200028f4 	.word	0x200028f4
 8007e18:	200023f8 	.word	0x200023f8

08007e1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d109      	bne.n	8007e42 <vTaskPlaceOnEventListRestricted+0x26>
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	617b      	str	r3, [r7, #20]
 8007e40:	e7fe      	b.n	8007e40 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e42:	4b0a      	ldr	r3, [pc, #40]	; (8007e6c <vTaskPlaceOnEventListRestricted+0x50>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3318      	adds	r3, #24
 8007e48:	4619      	mov	r1, r3
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f7fe fe29 	bl	8006aa2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007e56:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e5c:	6879      	ldr	r1, [r7, #4]
 8007e5e:	68b8      	ldr	r0, [r7, #8]
 8007e60:	f000 fabe 	bl	80083e0 <prvAddCurrentTaskToDelayedList>
	}
 8007e64:	bf00      	nop
 8007e66:	3718      	adds	r7, #24
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	200023f8 	.word	0x200023f8

08007e70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d109      	bne.n	8007e9a <xTaskRemoveFromEventList+0x2a>
 8007e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	e7fe      	b.n	8007e98 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	3318      	adds	r3, #24
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fe fe5c 	bl	8006b5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ea4:	4b1d      	ldr	r3, [pc, #116]	; (8007f1c <xTaskRemoveFromEventList+0xac>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d11d      	bne.n	8007ee8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fe fe53 	bl	8006b5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eba:	4b19      	ldr	r3, [pc, #100]	; (8007f20 <xTaskRemoveFromEventList+0xb0>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d903      	bls.n	8007eca <xTaskRemoveFromEventList+0x5a>
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec6:	4a16      	ldr	r2, [pc, #88]	; (8007f20 <xTaskRemoveFromEventList+0xb0>)
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ece:	4613      	mov	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4a13      	ldr	r2, [pc, #76]	; (8007f24 <xTaskRemoveFromEventList+0xb4>)
 8007ed8:	441a      	add	r2, r3
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	3304      	adds	r3, #4
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	f7fe fdde 	bl	8006aa2 <vListInsertEnd>
 8007ee6:	e005      	b.n	8007ef4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	3318      	adds	r3, #24
 8007eec:	4619      	mov	r1, r3
 8007eee:	480e      	ldr	r0, [pc, #56]	; (8007f28 <xTaskRemoveFromEventList+0xb8>)
 8007ef0:	f7fe fdd7 	bl	8006aa2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef8:	4b0c      	ldr	r3, [pc, #48]	; (8007f2c <xTaskRemoveFromEventList+0xbc>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d905      	bls.n	8007f0e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f02:	2301      	movs	r3, #1
 8007f04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007f06:	4b0a      	ldr	r3, [pc, #40]	; (8007f30 <xTaskRemoveFromEventList+0xc0>)
 8007f08:	2201      	movs	r2, #1
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	e001      	b.n	8007f12 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007f12:	697b      	ldr	r3, [r7, #20]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3718      	adds	r7, #24
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	200028f4 	.word	0x200028f4
 8007f20:	200028d4 	.word	0x200028d4
 8007f24:	200023fc 	.word	0x200023fc
 8007f28:	2000288c 	.word	0x2000288c
 8007f2c:	200023f8 	.word	0x200023f8
 8007f30:	200028e0 	.word	0x200028e0

08007f34 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007f3e:	4b28      	ldr	r3, [pc, #160]	; (8007fe0 <vTaskRemoveFromUnorderedEventList+0xac>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d109      	bne.n	8007f5a <vTaskRemoveFromUnorderedEventList+0x26>
 8007f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4a:	f383 8811 	msr	BASEPRI, r3
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f3bf 8f4f 	dsb	sy
 8007f56:	613b      	str	r3, [r7, #16]
 8007f58:	e7fe      	b.n	8007f58 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d109      	bne.n	8007f84 <vTaskRemoveFromUnorderedEventList+0x50>
 8007f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	e7fe      	b.n	8007f82 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7fe fde9 	bl	8006b5c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fe fde4 	bl	8006b5c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f98:	4b12      	ldr	r3, [pc, #72]	; (8007fe4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d903      	bls.n	8007fa8 <vTaskRemoveFromUnorderedEventList+0x74>
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa4:	4a0f      	ldr	r2, [pc, #60]	; (8007fe4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007fa6:	6013      	str	r3, [r2, #0]
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fac:	4613      	mov	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4a0c      	ldr	r2, [pc, #48]	; (8007fe8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007fb6:	441a      	add	r2, r3
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	3304      	adds	r3, #4
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	f7fe fd6f 	bl	8006aa2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc8:	4b08      	ldr	r3, [pc, #32]	; (8007fec <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d902      	bls.n	8007fd8 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007fd2:	4b07      	ldr	r3, [pc, #28]	; (8007ff0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	601a      	str	r2, [r3, #0]
	}
}
 8007fd8:	bf00      	nop
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	200028f4 	.word	0x200028f4
 8007fe4:	200028d4 	.word	0x200028d4
 8007fe8:	200023fc 	.word	0x200023fc
 8007fec:	200023f8 	.word	0x200023f8
 8007ff0:	200028e0 	.word	0x200028e0

08007ff4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ffc:	4b06      	ldr	r3, [pc, #24]	; (8008018 <vTaskInternalSetTimeOutState+0x24>)
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008004:	4b05      	ldr	r3, [pc, #20]	; (800801c <vTaskInternalSetTimeOutState+0x28>)
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	605a      	str	r2, [r3, #4]
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	200028e4 	.word	0x200028e4
 800801c:	200028d0 	.word	0x200028d0

08008020 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b088      	sub	sp, #32
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d109      	bne.n	8008044 <xTaskCheckForTimeOut+0x24>
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	613b      	str	r3, [r7, #16]
 8008042:	e7fe      	b.n	8008042 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d109      	bne.n	800805e <xTaskCheckForTimeOut+0x3e>
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	e7fe      	b.n	800805c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800805e:	f000 fe9d 	bl	8008d9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008062:	4b1d      	ldr	r3, [pc, #116]	; (80080d8 <xTaskCheckForTimeOut+0xb8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807a:	d102      	bne.n	8008082 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800807c:	2300      	movs	r3, #0
 800807e:	61fb      	str	r3, [r7, #28]
 8008080:	e023      	b.n	80080ca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	4b15      	ldr	r3, [pc, #84]	; (80080dc <xTaskCheckForTimeOut+0xbc>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	429a      	cmp	r2, r3
 800808c:	d007      	beq.n	800809e <xTaskCheckForTimeOut+0x7e>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	429a      	cmp	r2, r3
 8008096:	d302      	bcc.n	800809e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008098:	2301      	movs	r3, #1
 800809a:	61fb      	str	r3, [r7, #28]
 800809c:	e015      	b.n	80080ca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d20b      	bcs.n	80080c0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	1ad2      	subs	r2, r2, r3
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7ff ff9d 	bl	8007ff4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080ba:	2300      	movs	r3, #0
 80080bc:	61fb      	str	r3, [r7, #28]
 80080be:	e004      	b.n	80080ca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080c6:	2301      	movs	r3, #1
 80080c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080ca:	f000 fe95 	bl	8008df8 <vPortExitCritical>

	return xReturn;
 80080ce:	69fb      	ldr	r3, [r7, #28]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3720      	adds	r7, #32
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	200028d0 	.word	0x200028d0
 80080dc:	200028e4 	.word	0x200028e4

080080e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80080e0:	b480      	push	{r7}
 80080e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80080e4:	4b03      	ldr	r3, [pc, #12]	; (80080f4 <vTaskMissedYield+0x14>)
 80080e6:	2201      	movs	r2, #1
 80080e8:	601a      	str	r2, [r3, #0]
}
 80080ea:	bf00      	nop
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	200028e0 	.word	0x200028e0

080080f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008100:	f000 f852 	bl	80081a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008104:	4b06      	ldr	r3, [pc, #24]	; (8008120 <prvIdleTask+0x28>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d9f9      	bls.n	8008100 <prvIdleTask+0x8>
			{
				taskYIELD();
 800810c:	4b05      	ldr	r3, [pc, #20]	; (8008124 <prvIdleTask+0x2c>)
 800810e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800811c:	e7f0      	b.n	8008100 <prvIdleTask+0x8>
 800811e:	bf00      	nop
 8008120:	200023fc 	.word	0x200023fc
 8008124:	e000ed04 	.word	0xe000ed04

08008128 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800812e:	2300      	movs	r3, #0
 8008130:	607b      	str	r3, [r7, #4]
 8008132:	e00c      	b.n	800814e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	4613      	mov	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4a12      	ldr	r2, [pc, #72]	; (8008188 <prvInitialiseTaskLists+0x60>)
 8008140:	4413      	add	r3, r2
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fc80 	bl	8006a48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3301      	adds	r3, #1
 800814c:	607b      	str	r3, [r7, #4]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b37      	cmp	r3, #55	; 0x37
 8008152:	d9ef      	bls.n	8008134 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008154:	480d      	ldr	r0, [pc, #52]	; (800818c <prvInitialiseTaskLists+0x64>)
 8008156:	f7fe fc77 	bl	8006a48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800815a:	480d      	ldr	r0, [pc, #52]	; (8008190 <prvInitialiseTaskLists+0x68>)
 800815c:	f7fe fc74 	bl	8006a48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008160:	480c      	ldr	r0, [pc, #48]	; (8008194 <prvInitialiseTaskLists+0x6c>)
 8008162:	f7fe fc71 	bl	8006a48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008166:	480c      	ldr	r0, [pc, #48]	; (8008198 <prvInitialiseTaskLists+0x70>)
 8008168:	f7fe fc6e 	bl	8006a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800816c:	480b      	ldr	r0, [pc, #44]	; (800819c <prvInitialiseTaskLists+0x74>)
 800816e:	f7fe fc6b 	bl	8006a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008172:	4b0b      	ldr	r3, [pc, #44]	; (80081a0 <prvInitialiseTaskLists+0x78>)
 8008174:	4a05      	ldr	r2, [pc, #20]	; (800818c <prvInitialiseTaskLists+0x64>)
 8008176:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008178:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <prvInitialiseTaskLists+0x7c>)
 800817a:	4a05      	ldr	r2, [pc, #20]	; (8008190 <prvInitialiseTaskLists+0x68>)
 800817c:	601a      	str	r2, [r3, #0]
}
 800817e:	bf00      	nop
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	200023fc 	.word	0x200023fc
 800818c:	2000285c 	.word	0x2000285c
 8008190:	20002870 	.word	0x20002870
 8008194:	2000288c 	.word	0x2000288c
 8008198:	200028a0 	.word	0x200028a0
 800819c:	200028b8 	.word	0x200028b8
 80081a0:	20002884 	.word	0x20002884
 80081a4:	20002888 	.word	0x20002888

080081a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081ae:	e019      	b.n	80081e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081b0:	f000 fdf4 	bl	8008d9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081b4:	4b0f      	ldr	r3, [pc, #60]	; (80081f4 <prvCheckTasksWaitingTermination+0x4c>)
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	3304      	adds	r3, #4
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe fccb 	bl	8006b5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081c6:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <prvCheckTasksWaitingTermination+0x50>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	4a0a      	ldr	r2, [pc, #40]	; (80081f8 <prvCheckTasksWaitingTermination+0x50>)
 80081ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081d0:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <prvCheckTasksWaitingTermination+0x54>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3b01      	subs	r3, #1
 80081d6:	4a09      	ldr	r2, [pc, #36]	; (80081fc <prvCheckTasksWaitingTermination+0x54>)
 80081d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081da:	f000 fe0d 	bl	8008df8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f80e 	bl	8008200 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081e4:	4b05      	ldr	r3, [pc, #20]	; (80081fc <prvCheckTasksWaitingTermination+0x54>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1e1      	bne.n	80081b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081ec:	bf00      	nop
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	200028a0 	.word	0x200028a0
 80081f8:	200028cc 	.word	0x200028cc
 80081fc:	200028b4 	.word	0x200028b4

08008200 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800820e:	2b00      	cmp	r3, #0
 8008210:	d108      	bne.n	8008224 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008216:	4618      	mov	r0, r3
 8008218:	f000 ff9c 	bl	8009154 <vPortFree>
				vPortFree( pxTCB );
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 ff99 	bl	8009154 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008222:	e017      	b.n	8008254 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800822a:	2b01      	cmp	r3, #1
 800822c:	d103      	bne.n	8008236 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 ff90 	bl	8009154 <vPortFree>
	}
 8008234:	e00e      	b.n	8008254 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800823c:	2b02      	cmp	r3, #2
 800823e:	d009      	beq.n	8008254 <prvDeleteTCB+0x54>
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	60fb      	str	r3, [r7, #12]
 8008252:	e7fe      	b.n	8008252 <prvDeleteTCB+0x52>
	}
 8008254:	bf00      	nop
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008262:	4b0c      	ldr	r3, [pc, #48]	; (8008294 <prvResetNextTaskUnblockTime+0x38>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d104      	bne.n	8008276 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800826c:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <prvResetNextTaskUnblockTime+0x3c>)
 800826e:	f04f 32ff 	mov.w	r2, #4294967295
 8008272:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008274:	e008      	b.n	8008288 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008276:	4b07      	ldr	r3, [pc, #28]	; (8008294 <prvResetNextTaskUnblockTime+0x38>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	4a04      	ldr	r2, [pc, #16]	; (8008298 <prvResetNextTaskUnblockTime+0x3c>)
 8008286:	6013      	str	r3, [r2, #0]
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	20002884 	.word	0x20002884
 8008298:	200028ec 	.word	0x200028ec

0800829c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082a2:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <xTaskGetSchedulerState+0x34>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d102      	bne.n	80082b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082aa:	2301      	movs	r3, #1
 80082ac:	607b      	str	r3, [r7, #4]
 80082ae:	e008      	b.n	80082c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082b0:	4b08      	ldr	r3, [pc, #32]	; (80082d4 <xTaskGetSchedulerState+0x38>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d102      	bne.n	80082be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082b8:	2302      	movs	r3, #2
 80082ba:	607b      	str	r3, [r7, #4]
 80082bc:	e001      	b.n	80082c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082be:	2300      	movs	r3, #0
 80082c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082c2:	687b      	ldr	r3, [r7, #4]
	}
 80082c4:	4618      	mov	r0, r3
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	200028d8 	.word	0x200028d8
 80082d4:	200028f4 	.word	0x200028f4

080082d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082e4:	2300      	movs	r3, #0
 80082e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d054      	beq.n	8008398 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80082ee:	4b2d      	ldr	r3, [pc, #180]	; (80083a4 <xTaskPriorityDisinherit+0xcc>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d009      	beq.n	800830c <xTaskPriorityDisinherit+0x34>
 80082f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fc:	f383 8811 	msr	BASEPRI, r3
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	60fb      	str	r3, [r7, #12]
 800830a:	e7fe      	b.n	800830a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008310:	2b00      	cmp	r3, #0
 8008312:	d109      	bne.n	8008328 <xTaskPriorityDisinherit+0x50>
 8008314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	60bb      	str	r3, [r7, #8]
 8008326:	e7fe      	b.n	8008326 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800832c:	1e5a      	subs	r2, r3, #1
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800833a:	429a      	cmp	r2, r3
 800833c:	d02c      	beq.n	8008398 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008342:	2b00      	cmp	r3, #0
 8008344:	d128      	bne.n	8008398 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	3304      	adds	r3, #4
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe fc06 	bl	8006b5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008368:	4b0f      	ldr	r3, [pc, #60]	; (80083a8 <xTaskPriorityDisinherit+0xd0>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	429a      	cmp	r2, r3
 800836e:	d903      	bls.n	8008378 <xTaskPriorityDisinherit+0xa0>
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008374:	4a0c      	ldr	r2, [pc, #48]	; (80083a8 <xTaskPriorityDisinherit+0xd0>)
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800837c:	4613      	mov	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4a09      	ldr	r2, [pc, #36]	; (80083ac <xTaskPriorityDisinherit+0xd4>)
 8008386:	441a      	add	r2, r3
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	3304      	adds	r3, #4
 800838c:	4619      	mov	r1, r3
 800838e:	4610      	mov	r0, r2
 8008390:	f7fe fb87 	bl	8006aa2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008394:	2301      	movs	r3, #1
 8008396:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008398:	697b      	ldr	r3, [r7, #20]
	}
 800839a:	4618      	mov	r0, r3
 800839c:	3718      	adds	r7, #24
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	200023f8 	.word	0x200023f8
 80083a8:	200028d4 	.word	0x200028d4
 80083ac:	200023fc 	.word	0x200023fc

080083b0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80083b6:	4b09      	ldr	r3, [pc, #36]	; (80083dc <uxTaskResetEventItemValue+0x2c>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083be:	4b07      	ldr	r3, [pc, #28]	; (80083dc <uxTaskResetEventItemValue+0x2c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c4:	4b05      	ldr	r3, [pc, #20]	; (80083dc <uxTaskResetEventItemValue+0x2c>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80083cc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80083ce:	687b      	ldr	r3, [r7, #4]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	200023f8 	.word	0x200023f8

080083e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083ea:	4b21      	ldr	r3, [pc, #132]	; (8008470 <prvAddCurrentTaskToDelayedList+0x90>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083f0:	4b20      	ldr	r3, [pc, #128]	; (8008474 <prvAddCurrentTaskToDelayedList+0x94>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3304      	adds	r3, #4
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fe fbb0 	bl	8006b5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008402:	d10a      	bne.n	800841a <prvAddCurrentTaskToDelayedList+0x3a>
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d007      	beq.n	800841a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800840a:	4b1a      	ldr	r3, [pc, #104]	; (8008474 <prvAddCurrentTaskToDelayedList+0x94>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3304      	adds	r3, #4
 8008410:	4619      	mov	r1, r3
 8008412:	4819      	ldr	r0, [pc, #100]	; (8008478 <prvAddCurrentTaskToDelayedList+0x98>)
 8008414:	f7fe fb45 	bl	8006aa2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008418:	e026      	b.n	8008468 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4413      	add	r3, r2
 8008420:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008422:	4b14      	ldr	r3, [pc, #80]	; (8008474 <prvAddCurrentTaskToDelayedList+0x94>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	429a      	cmp	r2, r3
 8008430:	d209      	bcs.n	8008446 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008432:	4b12      	ldr	r3, [pc, #72]	; (800847c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	4b0f      	ldr	r3, [pc, #60]	; (8008474 <prvAddCurrentTaskToDelayedList+0x94>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3304      	adds	r3, #4
 800843c:	4619      	mov	r1, r3
 800843e:	4610      	mov	r0, r2
 8008440:	f7fe fb53 	bl	8006aea <vListInsert>
}
 8008444:	e010      	b.n	8008468 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008446:	4b0e      	ldr	r3, [pc, #56]	; (8008480 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	4b0a      	ldr	r3, [pc, #40]	; (8008474 <prvAddCurrentTaskToDelayedList+0x94>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3304      	adds	r3, #4
 8008450:	4619      	mov	r1, r3
 8008452:	4610      	mov	r0, r2
 8008454:	f7fe fb49 	bl	8006aea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008458:	4b0a      	ldr	r3, [pc, #40]	; (8008484 <prvAddCurrentTaskToDelayedList+0xa4>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	429a      	cmp	r2, r3
 8008460:	d202      	bcs.n	8008468 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008462:	4a08      	ldr	r2, [pc, #32]	; (8008484 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	6013      	str	r3, [r2, #0]
}
 8008468:	bf00      	nop
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	200028d0 	.word	0x200028d0
 8008474:	200023f8 	.word	0x200023f8
 8008478:	200028b8 	.word	0x200028b8
 800847c:	20002888 	.word	0x20002888
 8008480:	20002884 	.word	0x20002884
 8008484:	200028ec 	.word	0x200028ec

08008488 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b08a      	sub	sp, #40	; 0x28
 800848c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800848e:	2300      	movs	r3, #0
 8008490:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008492:	f000 faff 	bl	8008a94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008496:	4b1c      	ldr	r3, [pc, #112]	; (8008508 <xTimerCreateTimerTask+0x80>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d021      	beq.n	80084e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800849e:	2300      	movs	r3, #0
 80084a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80084a2:	2300      	movs	r3, #0
 80084a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80084a6:	1d3a      	adds	r2, r7, #4
 80084a8:	f107 0108 	add.w	r1, r7, #8
 80084ac:	f107 030c 	add.w	r3, r7, #12
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fe f84f 	bl	8006554 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80084b6:	6879      	ldr	r1, [r7, #4]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	9202      	str	r2, [sp, #8]
 80084be:	9301      	str	r3, [sp, #4]
 80084c0:	2302      	movs	r3, #2
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	2300      	movs	r3, #0
 80084c6:	460a      	mov	r2, r1
 80084c8:	4910      	ldr	r1, [pc, #64]	; (800850c <xTimerCreateTimerTask+0x84>)
 80084ca:	4811      	ldr	r0, [pc, #68]	; (8008510 <xTimerCreateTimerTask+0x88>)
 80084cc:	f7ff f844 	bl	8007558 <xTaskCreateStatic>
 80084d0:	4602      	mov	r2, r0
 80084d2:	4b10      	ldr	r3, [pc, #64]	; (8008514 <xTimerCreateTimerTask+0x8c>)
 80084d4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084d6:	4b0f      	ldr	r3, [pc, #60]	; (8008514 <xTimerCreateTimerTask+0x8c>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80084de:	2301      	movs	r3, #1
 80084e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d109      	bne.n	80084fc <xTimerCreateTimerTask+0x74>
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	613b      	str	r3, [r7, #16]
 80084fa:	e7fe      	b.n	80084fa <xTimerCreateTimerTask+0x72>
	return xReturn;
 80084fc:	697b      	ldr	r3, [r7, #20]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20002928 	.word	0x20002928
 800850c:	0800a544 	.word	0x0800a544
 8008510:	08008649 	.word	0x08008649
 8008514:	2000292c 	.word	0x2000292c

08008518 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b08a      	sub	sp, #40	; 0x28
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008526:	2300      	movs	r3, #0
 8008528:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d109      	bne.n	8008544 <xTimerGenericCommand+0x2c>
 8008530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	623b      	str	r3, [r7, #32]
 8008542:	e7fe      	b.n	8008542 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008544:	4b19      	ldr	r3, [pc, #100]	; (80085ac <xTimerGenericCommand+0x94>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d02a      	beq.n	80085a2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2b05      	cmp	r3, #5
 800855c:	dc18      	bgt.n	8008590 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800855e:	f7ff fe9d 	bl	800829c <xTaskGetSchedulerState>
 8008562:	4603      	mov	r3, r0
 8008564:	2b02      	cmp	r3, #2
 8008566:	d109      	bne.n	800857c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008568:	4b10      	ldr	r3, [pc, #64]	; (80085ac <xTimerGenericCommand+0x94>)
 800856a:	6818      	ldr	r0, [r3, #0]
 800856c:	f107 0110 	add.w	r1, r7, #16
 8008570:	2300      	movs	r3, #0
 8008572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008574:	f7fe fc1a 	bl	8006dac <xQueueGenericSend>
 8008578:	6278      	str	r0, [r7, #36]	; 0x24
 800857a:	e012      	b.n	80085a2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800857c:	4b0b      	ldr	r3, [pc, #44]	; (80085ac <xTimerGenericCommand+0x94>)
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	f107 0110 	add.w	r1, r7, #16
 8008584:	2300      	movs	r3, #0
 8008586:	2200      	movs	r2, #0
 8008588:	f7fe fc10 	bl	8006dac <xQueueGenericSend>
 800858c:	6278      	str	r0, [r7, #36]	; 0x24
 800858e:	e008      	b.n	80085a2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008590:	4b06      	ldr	r3, [pc, #24]	; (80085ac <xTimerGenericCommand+0x94>)
 8008592:	6818      	ldr	r0, [r3, #0]
 8008594:	f107 0110 	add.w	r1, r7, #16
 8008598:	2300      	movs	r3, #0
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	f7fe fd00 	bl	8006fa0 <xQueueGenericSendFromISR>
 80085a0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3728      	adds	r7, #40	; 0x28
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	20002928 	.word	0x20002928

080085b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af02      	add	r7, sp, #8
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ba:	4b22      	ldr	r3, [pc, #136]	; (8008644 <prvProcessExpiredTimer+0x94>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	3304      	adds	r3, #4
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fe fac7 	bl	8006b5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d021      	beq.n	8008620 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	699a      	ldr	r2, [r3, #24]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	18d1      	adds	r1, r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	6978      	ldr	r0, [r7, #20]
 80085ea:	f000 f8d1 	bl	8008790 <prvInsertTimerInActiveList>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d01e      	beq.n	8008632 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085f4:	2300      	movs	r3, #0
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	2300      	movs	r3, #0
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	2100      	movs	r1, #0
 80085fe:	6978      	ldr	r0, [r7, #20]
 8008600:	f7ff ff8a 	bl	8008518 <xTimerGenericCommand>
 8008604:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d112      	bne.n	8008632 <prvProcessExpiredTimer+0x82>
 800860c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008610:	f383 8811 	msr	BASEPRI, r3
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	e7fe      	b.n	800861e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008626:	f023 0301 	bic.w	r3, r3, #1
 800862a:	b2da      	uxtb	r2, r3
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	6978      	ldr	r0, [r7, #20]
 8008638:	4798      	blx	r3
}
 800863a:	bf00      	nop
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20002920 	.word	0x20002920

08008648 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008650:	f107 0308 	add.w	r3, r7, #8
 8008654:	4618      	mov	r0, r3
 8008656:	f000 f857 	bl	8008708 <prvGetNextExpireTime>
 800865a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	4619      	mov	r1, r3
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 f803 	bl	800866c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008666:	f000 f8d5 	bl	8008814 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800866a:	e7f1      	b.n	8008650 <prvTimerTask+0x8>

0800866c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008676:	f7ff f9a5 	bl	80079c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800867a:	f107 0308 	add.w	r3, r7, #8
 800867e:	4618      	mov	r0, r3
 8008680:	f000 f866 	bl	8008750 <prvSampleTimeNow>
 8008684:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d130      	bne.n	80086ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10a      	bne.n	80086a8 <prvProcessTimerOrBlockTask+0x3c>
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	429a      	cmp	r2, r3
 8008698:	d806      	bhi.n	80086a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800869a:	f7ff f9a1 	bl	80079e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800869e:	68f9      	ldr	r1, [r7, #12]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff ff85 	bl	80085b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80086a6:	e024      	b.n	80086f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d008      	beq.n	80086c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80086ae:	4b13      	ldr	r3, [pc, #76]	; (80086fc <prvProcessTimerOrBlockTask+0x90>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <prvProcessTimerOrBlockTask+0x50>
 80086b8:	2301      	movs	r3, #1
 80086ba:	e000      	b.n	80086be <prvProcessTimerOrBlockTask+0x52>
 80086bc:	2300      	movs	r3, #0
 80086be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086c0:	4b0f      	ldr	r3, [pc, #60]	; (8008700 <prvProcessTimerOrBlockTask+0x94>)
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	4619      	mov	r1, r3
 80086ce:	f7fe ff0f 	bl	80074f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086d2:	f7ff f985 	bl	80079e0 <xTaskResumeAll>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10a      	bne.n	80086f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80086dc:	4b09      	ldr	r3, [pc, #36]	; (8008704 <prvProcessTimerOrBlockTask+0x98>)
 80086de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	f3bf 8f6f 	isb	sy
}
 80086ec:	e001      	b.n	80086f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80086ee:	f7ff f977 	bl	80079e0 <xTaskResumeAll>
}
 80086f2:	bf00      	nop
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20002924 	.word	0x20002924
 8008700:	20002928 	.word	0x20002928
 8008704:	e000ed04 	.word	0xe000ed04

08008708 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008710:	4b0e      	ldr	r3, [pc, #56]	; (800874c <prvGetNextExpireTime+0x44>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d101      	bne.n	800871e <prvGetNextExpireTime+0x16>
 800871a:	2201      	movs	r2, #1
 800871c:	e000      	b.n	8008720 <prvGetNextExpireTime+0x18>
 800871e:	2200      	movs	r2, #0
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d105      	bne.n	8008738 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800872c:	4b07      	ldr	r3, [pc, #28]	; (800874c <prvGetNextExpireTime+0x44>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	60fb      	str	r3, [r7, #12]
 8008736:	e001      	b.n	800873c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008738:	2300      	movs	r3, #0
 800873a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800873c:	68fb      	ldr	r3, [r7, #12]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3714      	adds	r7, #20
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	20002920 	.word	0x20002920

08008750 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008758:	f7ff f9de 	bl	8007b18 <xTaskGetTickCount>
 800875c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800875e:	4b0b      	ldr	r3, [pc, #44]	; (800878c <prvSampleTimeNow+0x3c>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	429a      	cmp	r2, r3
 8008766:	d205      	bcs.n	8008774 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008768:	f000 f930 	bl	80089cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	e002      	b.n	800877a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800877a:	4a04      	ldr	r2, [pc, #16]	; (800878c <prvSampleTimeNow+0x3c>)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008780:	68fb      	ldr	r3, [r7, #12]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	20002930 	.word	0x20002930

08008790 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
 800879c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800879e:	2300      	movs	r3, #0
 80087a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d812      	bhi.n	80087dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	1ad2      	subs	r2, r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d302      	bcc.n	80087ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087c4:	2301      	movs	r3, #1
 80087c6:	617b      	str	r3, [r7, #20]
 80087c8:	e01b      	b.n	8008802 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087ca:	4b10      	ldr	r3, [pc, #64]	; (800880c <prvInsertTimerInActiveList+0x7c>)
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3304      	adds	r3, #4
 80087d2:	4619      	mov	r1, r3
 80087d4:	4610      	mov	r0, r2
 80087d6:	f7fe f988 	bl	8006aea <vListInsert>
 80087da:	e012      	b.n	8008802 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d206      	bcs.n	80087f2 <prvInsertTimerInActiveList+0x62>
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d302      	bcc.n	80087f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087ec:	2301      	movs	r3, #1
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	e007      	b.n	8008802 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087f2:	4b07      	ldr	r3, [pc, #28]	; (8008810 <prvInsertTimerInActiveList+0x80>)
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3304      	adds	r3, #4
 80087fa:	4619      	mov	r1, r3
 80087fc:	4610      	mov	r0, r2
 80087fe:	f7fe f974 	bl	8006aea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008802:	697b      	ldr	r3, [r7, #20]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	20002924 	.word	0x20002924
 8008810:	20002920 	.word	0x20002920

08008814 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b08e      	sub	sp, #56	; 0x38
 8008818:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800881a:	e0c6      	b.n	80089aa <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	da17      	bge.n	8008852 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008822:	1d3b      	adds	r3, r7, #4
 8008824:	3304      	adds	r3, #4
 8008826:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882a:	2b00      	cmp	r3, #0
 800882c:	d109      	bne.n	8008842 <prvProcessReceivedCommands+0x2e>
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	61fb      	str	r3, [r7, #28]
 8008840:	e7fe      	b.n	8008840 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008848:	6850      	ldr	r0, [r2, #4]
 800884a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800884c:	6892      	ldr	r2, [r2, #8]
 800884e:	4611      	mov	r1, r2
 8008850:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f2c0 80a7 	blt.w	80089a8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d004      	beq.n	8008870 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008868:	3304      	adds	r3, #4
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe f976 	bl	8006b5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008870:	463b      	mov	r3, r7
 8008872:	4618      	mov	r0, r3
 8008874:	f7ff ff6c 	bl	8008750 <prvSampleTimeNow>
 8008878:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b09      	cmp	r3, #9
 800887e:	f200 8094 	bhi.w	80089aa <prvProcessReceivedCommands+0x196>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <prvProcessReceivedCommands+0x74>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088b1 	.word	0x080088b1
 800888c:	080088b1 	.word	0x080088b1
 8008890:	080088b1 	.word	0x080088b1
 8008894:	08008923 	.word	0x08008923
 8008898:	08008937 	.word	0x08008937
 800889c:	0800897f 	.word	0x0800897f
 80088a0:	080088b1 	.word	0x080088b1
 80088a4:	080088b1 	.word	0x080088b1
 80088a8:	08008923 	.word	0x08008923
 80088ac:	08008937 	.word	0x08008937
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088b6:	f043 0301 	orr.w	r3, r3, #1
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	18d1      	adds	r1, r2, r3
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088d0:	f7ff ff5e 	bl	8008790 <prvInsertTimerInActiveList>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d067      	beq.n	80089aa <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d05c      	beq.n	80089aa <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	441a      	add	r2, r3
 80088f8:	2300      	movs	r3, #0
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	2300      	movs	r3, #0
 80088fe:	2100      	movs	r1, #0
 8008900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008902:	f7ff fe09 	bl	8008518 <xTimerGenericCommand>
 8008906:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008908:	6a3b      	ldr	r3, [r7, #32]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d14d      	bne.n	80089aa <prvProcessReceivedCommands+0x196>
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	61bb      	str	r3, [r7, #24]
 8008920:	e7fe      	b.n	8008920 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008928:	f023 0301 	bic.w	r3, r3, #1
 800892c:	b2da      	uxtb	r2, r3
 800892e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008930:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008934:	e039      	b.n	80089aa <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800893c:	f043 0301 	orr.w	r3, r3, #1
 8008940:	b2da      	uxtb	r2, r3
 8008942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008944:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800894e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d109      	bne.n	800896a <prvProcessReceivedCommands+0x156>
 8008956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895a:	f383 8811 	msr	BASEPRI, r3
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	e7fe      	b.n	8008968 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800896a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896c:	699a      	ldr	r2, [r3, #24]
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	18d1      	adds	r1, r2, r3
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008978:	f7ff ff0a 	bl	8008790 <prvInsertTimerInActiveList>
					break;
 800897c:	e015      	b.n	80089aa <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800897e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008984:	f003 0302 	and.w	r3, r3, #2
 8008988:	2b00      	cmp	r3, #0
 800898a:	d103      	bne.n	8008994 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800898c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800898e:	f000 fbe1 	bl	8009154 <vPortFree>
 8008992:	e00a      	b.n	80089aa <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008996:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800899a:	f023 0301 	bic.w	r3, r3, #1
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80089a6:	e000      	b.n	80089aa <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80089a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089aa:	4b07      	ldr	r3, [pc, #28]	; (80089c8 <prvProcessReceivedCommands+0x1b4>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	1d39      	adds	r1, r7, #4
 80089b0:	2200      	movs	r2, #0
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe fb88 	bl	80070c8 <xQueueReceive>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f47f af2e 	bne.w	800881c <prvProcessReceivedCommands+0x8>
	}
}
 80089c0:	bf00      	nop
 80089c2:	3730      	adds	r7, #48	; 0x30
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	20002928 	.word	0x20002928

080089cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b088      	sub	sp, #32
 80089d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089d2:	e047      	b.n	8008a64 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089d4:	4b2d      	ldr	r3, [pc, #180]	; (8008a8c <prvSwitchTimerLists+0xc0>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089de:	4b2b      	ldr	r3, [pc, #172]	; (8008a8c <prvSwitchTimerLists+0xc0>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	3304      	adds	r3, #4
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7fe f8b5 	bl	8006b5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a00:	f003 0304 	and.w	r3, r3, #4
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d02d      	beq.n	8008a64 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	4413      	add	r3, r2
 8008a10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d90e      	bls.n	8008a38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a26:	4b19      	ldr	r3, [pc, #100]	; (8008a8c <prvSwitchTimerLists+0xc0>)
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3304      	adds	r3, #4
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4610      	mov	r0, r2
 8008a32:	f7fe f85a 	bl	8006aea <vListInsert>
 8008a36:	e015      	b.n	8008a64 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a38:	2300      	movs	r3, #0
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	2100      	movs	r1, #0
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f7ff fd68 	bl	8008518 <xTimerGenericCommand>
 8008a48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d109      	bne.n	8008a64 <prvSwitchTimerLists+0x98>
 8008a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	603b      	str	r3, [r7, #0]
 8008a62:	e7fe      	b.n	8008a62 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a64:	4b09      	ldr	r3, [pc, #36]	; (8008a8c <prvSwitchTimerLists+0xc0>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1b2      	bne.n	80089d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a6e:	4b07      	ldr	r3, [pc, #28]	; (8008a8c <prvSwitchTimerLists+0xc0>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a74:	4b06      	ldr	r3, [pc, #24]	; (8008a90 <prvSwitchTimerLists+0xc4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a04      	ldr	r2, [pc, #16]	; (8008a8c <prvSwitchTimerLists+0xc0>)
 8008a7a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a7c:	4a04      	ldr	r2, [pc, #16]	; (8008a90 <prvSwitchTimerLists+0xc4>)
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	6013      	str	r3, [r2, #0]
}
 8008a82:	bf00      	nop
 8008a84:	3718      	adds	r7, #24
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20002920 	.word	0x20002920
 8008a90:	20002924 	.word	0x20002924

08008a94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a9a:	f000 f97f 	bl	8008d9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a9e:	4b15      	ldr	r3, [pc, #84]	; (8008af4 <prvCheckForValidListAndQueue+0x60>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d120      	bne.n	8008ae8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008aa6:	4814      	ldr	r0, [pc, #80]	; (8008af8 <prvCheckForValidListAndQueue+0x64>)
 8008aa8:	f7fd ffce 	bl	8006a48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008aac:	4813      	ldr	r0, [pc, #76]	; (8008afc <prvCheckForValidListAndQueue+0x68>)
 8008aae:	f7fd ffcb 	bl	8006a48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008ab2:	4b13      	ldr	r3, [pc, #76]	; (8008b00 <prvCheckForValidListAndQueue+0x6c>)
 8008ab4:	4a10      	ldr	r2, [pc, #64]	; (8008af8 <prvCheckForValidListAndQueue+0x64>)
 8008ab6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ab8:	4b12      	ldr	r3, [pc, #72]	; (8008b04 <prvCheckForValidListAndQueue+0x70>)
 8008aba:	4a10      	ldr	r2, [pc, #64]	; (8008afc <prvCheckForValidListAndQueue+0x68>)
 8008abc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008abe:	2300      	movs	r3, #0
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	4b11      	ldr	r3, [pc, #68]	; (8008b08 <prvCheckForValidListAndQueue+0x74>)
 8008ac4:	4a11      	ldr	r2, [pc, #68]	; (8008b0c <prvCheckForValidListAndQueue+0x78>)
 8008ac6:	2110      	movs	r1, #16
 8008ac8:	200a      	movs	r0, #10
 8008aca:	f7fe f8d9 	bl	8006c80 <xQueueGenericCreateStatic>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	4b08      	ldr	r3, [pc, #32]	; (8008af4 <prvCheckForValidListAndQueue+0x60>)
 8008ad2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008ad4:	4b07      	ldr	r3, [pc, #28]	; (8008af4 <prvCheckForValidListAndQueue+0x60>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d005      	beq.n	8008ae8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008adc:	4b05      	ldr	r3, [pc, #20]	; (8008af4 <prvCheckForValidListAndQueue+0x60>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	490b      	ldr	r1, [pc, #44]	; (8008b10 <prvCheckForValidListAndQueue+0x7c>)
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fe fcdc 	bl	80074a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ae8:	f000 f986 	bl	8008df8 <vPortExitCritical>
}
 8008aec:	bf00      	nop
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20002928 	.word	0x20002928
 8008af8:	200028f8 	.word	0x200028f8
 8008afc:	2000290c 	.word	0x2000290c
 8008b00:	20002920 	.word	0x20002920
 8008b04:	20002924 	.word	0x20002924
 8008b08:	200029d4 	.word	0x200029d4
 8008b0c:	20002934 	.word	0x20002934
 8008b10:	0800a54c 	.word	0x0800a54c

08008b14 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b08a      	sub	sp, #40	; 0x28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
 8008b20:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008b22:	f06f 0301 	mvn.w	r3, #1
 8008b26:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b34:	4b06      	ldr	r3, [pc, #24]	; (8008b50 <xTimerPendFunctionCallFromISR+0x3c>)
 8008b36:	6818      	ldr	r0, [r3, #0]
 8008b38:	f107 0114 	add.w	r1, r7, #20
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	f7fe fa2e 	bl	8006fa0 <xQueueGenericSendFromISR>
 8008b44:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3728      	adds	r7, #40	; 0x28
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	20002928 	.word	0x20002928

08008b54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3b04      	subs	r3, #4
 8008b64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3b04      	subs	r3, #4
 8008b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	f023 0201 	bic.w	r2, r3, #1
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3b04      	subs	r3, #4
 8008b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b84:	4a0c      	ldr	r2, [pc, #48]	; (8008bb8 <pxPortInitialiseStack+0x64>)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	3b14      	subs	r3, #20
 8008b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3b04      	subs	r3, #4
 8008b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f06f 0202 	mvn.w	r2, #2
 8008ba2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3b20      	subs	r3, #32
 8008ba8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008baa:	68fb      	ldr	r3, [r7, #12]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	08008bbd 	.word	0x08008bbd

08008bbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008bc6:	4b11      	ldr	r3, [pc, #68]	; (8008c0c <prvTaskExitError+0x50>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bce:	d009      	beq.n	8008be4 <prvTaskExitError+0x28>
 8008bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	60fb      	str	r3, [r7, #12]
 8008be2:	e7fe      	b.n	8008be2 <prvTaskExitError+0x26>
 8008be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008bf6:	bf00      	nop
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0fc      	beq.n	8008bf8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008bfe:	bf00      	nop
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	2000009c 	.word	0x2000009c

08008c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c10:	4b07      	ldr	r3, [pc, #28]	; (8008c30 <pxCurrentTCBConst2>)
 8008c12:	6819      	ldr	r1, [r3, #0]
 8008c14:	6808      	ldr	r0, [r1, #0]
 8008c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1a:	f380 8809 	msr	PSP, r0
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f04f 0000 	mov.w	r0, #0
 8008c26:	f380 8811 	msr	BASEPRI, r0
 8008c2a:	4770      	bx	lr
 8008c2c:	f3af 8000 	nop.w

08008c30 <pxCurrentTCBConst2>:
 8008c30:	200023f8 	.word	0x200023f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop

08008c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c38:	4808      	ldr	r0, [pc, #32]	; (8008c5c <prvPortStartFirstTask+0x24>)
 8008c3a:	6800      	ldr	r0, [r0, #0]
 8008c3c:	6800      	ldr	r0, [r0, #0]
 8008c3e:	f380 8808 	msr	MSP, r0
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	f380 8814 	msr	CONTROL, r0
 8008c4a:	b662      	cpsie	i
 8008c4c:	b661      	cpsie	f
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	df00      	svc	0
 8008c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c5a:	bf00      	nop
 8008c5c:	e000ed08 	.word	0xe000ed08

08008c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c66:	4b44      	ldr	r3, [pc, #272]	; (8008d78 <xPortStartScheduler+0x118>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a44      	ldr	r2, [pc, #272]	; (8008d7c <xPortStartScheduler+0x11c>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d109      	bne.n	8008c84 <xPortStartScheduler+0x24>
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	613b      	str	r3, [r7, #16]
 8008c82:	e7fe      	b.n	8008c82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c84:	4b3c      	ldr	r3, [pc, #240]	; (8008d78 <xPortStartScheduler+0x118>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a3d      	ldr	r2, [pc, #244]	; (8008d80 <xPortStartScheduler+0x120>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d109      	bne.n	8008ca2 <xPortStartScheduler+0x42>
 8008c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	e7fe      	b.n	8008ca0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ca2:	4b38      	ldr	r3, [pc, #224]	; (8008d84 <xPortStartScheduler+0x124>)
 8008ca4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	22ff      	movs	r2, #255	; 0xff
 8008cb2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008cbc:	78fb      	ldrb	r3, [r7, #3]
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008cc4:	b2da      	uxtb	r2, r3
 8008cc6:	4b30      	ldr	r3, [pc, #192]	; (8008d88 <xPortStartScheduler+0x128>)
 8008cc8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008cca:	4b30      	ldr	r3, [pc, #192]	; (8008d8c <xPortStartScheduler+0x12c>)
 8008ccc:	2207      	movs	r2, #7
 8008cce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cd0:	e009      	b.n	8008ce6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008cd2:	4b2e      	ldr	r3, [pc, #184]	; (8008d8c <xPortStartScheduler+0x12c>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	4a2c      	ldr	r2, [pc, #176]	; (8008d8c <xPortStartScheduler+0x12c>)
 8008cda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008cdc:	78fb      	ldrb	r3, [r7, #3]
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	005b      	lsls	r3, r3, #1
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ce6:	78fb      	ldrb	r3, [r7, #3]
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cee:	2b80      	cmp	r3, #128	; 0x80
 8008cf0:	d0ef      	beq.n	8008cd2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cf2:	4b26      	ldr	r3, [pc, #152]	; (8008d8c <xPortStartScheduler+0x12c>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f1c3 0307 	rsb	r3, r3, #7
 8008cfa:	2b04      	cmp	r3, #4
 8008cfc:	d009      	beq.n	8008d12 <xPortStartScheduler+0xb2>
 8008cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d02:	f383 8811 	msr	BASEPRI, r3
 8008d06:	f3bf 8f6f 	isb	sy
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	60bb      	str	r3, [r7, #8]
 8008d10:	e7fe      	b.n	8008d10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d12:	4b1e      	ldr	r3, [pc, #120]	; (8008d8c <xPortStartScheduler+0x12c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	021b      	lsls	r3, r3, #8
 8008d18:	4a1c      	ldr	r2, [pc, #112]	; (8008d8c <xPortStartScheduler+0x12c>)
 8008d1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d1c:	4b1b      	ldr	r3, [pc, #108]	; (8008d8c <xPortStartScheduler+0x12c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d24:	4a19      	ldr	r2, [pc, #100]	; (8008d8c <xPortStartScheduler+0x12c>)
 8008d26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d30:	4b17      	ldr	r3, [pc, #92]	; (8008d90 <xPortStartScheduler+0x130>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a16      	ldr	r2, [pc, #88]	; (8008d90 <xPortStartScheduler+0x130>)
 8008d36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d3c:	4b14      	ldr	r3, [pc, #80]	; (8008d90 <xPortStartScheduler+0x130>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a13      	ldr	r2, [pc, #76]	; (8008d90 <xPortStartScheduler+0x130>)
 8008d42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d48:	f000 f8d6 	bl	8008ef8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d4c:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <xPortStartScheduler+0x134>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d52:	f000 f8f5 	bl	8008f40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d56:	4b10      	ldr	r3, [pc, #64]	; (8008d98 <xPortStartScheduler+0x138>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a0f      	ldr	r2, [pc, #60]	; (8008d98 <xPortStartScheduler+0x138>)
 8008d5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d62:	f7ff ff69 	bl	8008c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d66:	f7fe ff9f 	bl	8007ca8 <vTaskSwitchContext>
	prvTaskExitError();
 8008d6a:	f7ff ff27 	bl	8008bbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3718      	adds	r7, #24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	e000ed00 	.word	0xe000ed00
 8008d7c:	410fc271 	.word	0x410fc271
 8008d80:	410fc270 	.word	0x410fc270
 8008d84:	e000e400 	.word	0xe000e400
 8008d88:	20002a24 	.word	0x20002a24
 8008d8c:	20002a28 	.word	0x20002a28
 8008d90:	e000ed20 	.word	0xe000ed20
 8008d94:	2000009c 	.word	0x2000009c
 8008d98:	e000ef34 	.word	0xe000ef34

08008d9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008db4:	4b0e      	ldr	r3, [pc, #56]	; (8008df0 <vPortEnterCritical+0x54>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3301      	adds	r3, #1
 8008dba:	4a0d      	ldr	r2, [pc, #52]	; (8008df0 <vPortEnterCritical+0x54>)
 8008dbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008dbe:	4b0c      	ldr	r3, [pc, #48]	; (8008df0 <vPortEnterCritical+0x54>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d10e      	bne.n	8008de4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008dc6:	4b0b      	ldr	r3, [pc, #44]	; (8008df4 <vPortEnterCritical+0x58>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d009      	beq.n	8008de4 <vPortEnterCritical+0x48>
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	603b      	str	r3, [r7, #0]
 8008de2:	e7fe      	b.n	8008de2 <vPortEnterCritical+0x46>
	}
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	2000009c 	.word	0x2000009c
 8008df4:	e000ed04 	.word	0xe000ed04

08008df8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008dfe:	4b11      	ldr	r3, [pc, #68]	; (8008e44 <vPortExitCritical+0x4c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d109      	bne.n	8008e1a <vPortExitCritical+0x22>
 8008e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0a:	f383 8811 	msr	BASEPRI, r3
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	607b      	str	r3, [r7, #4]
 8008e18:	e7fe      	b.n	8008e18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008e1a:	4b0a      	ldr	r3, [pc, #40]	; (8008e44 <vPortExitCritical+0x4c>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	4a08      	ldr	r2, [pc, #32]	; (8008e44 <vPortExitCritical+0x4c>)
 8008e22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e24:	4b07      	ldr	r3, [pc, #28]	; (8008e44 <vPortExitCritical+0x4c>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d104      	bne.n	8008e36 <vPortExitCritical+0x3e>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e36:	bf00      	nop
 8008e38:	370c      	adds	r7, #12
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	2000009c 	.word	0x2000009c
	...

08008e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e50:	f3ef 8009 	mrs	r0, PSP
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	4b15      	ldr	r3, [pc, #84]	; (8008eb0 <pxCurrentTCBConst>)
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	f01e 0f10 	tst.w	lr, #16
 8008e60:	bf08      	it	eq
 8008e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6a:	6010      	str	r0, [r2, #0]
 8008e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e74:	f380 8811 	msr	BASEPRI, r0
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f7fe ff12 	bl	8007ca8 <vTaskSwitchContext>
 8008e84:	f04f 0000 	mov.w	r0, #0
 8008e88:	f380 8811 	msr	BASEPRI, r0
 8008e8c:	bc09      	pop	{r0, r3}
 8008e8e:	6819      	ldr	r1, [r3, #0]
 8008e90:	6808      	ldr	r0, [r1, #0]
 8008e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e96:	f01e 0f10 	tst.w	lr, #16
 8008e9a:	bf08      	it	eq
 8008e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ea0:	f380 8809 	msr	PSP, r0
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	f3af 8000 	nop.w

08008eb0 <pxCurrentTCBConst>:
 8008eb0:	200023f8 	.word	0x200023f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop

08008eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ed0:	f7fe fe32 	bl	8007b38 <xTaskIncrementTick>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008eda:	4b06      	ldr	r3, [pc, #24]	; (8008ef4 <SysTick_Handler+0x3c>)
 8008edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ee0:	601a      	str	r2, [r3, #0]
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008eec:	bf00      	nop
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	e000ed04 	.word	0xe000ed04

08008ef8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ef8:	b480      	push	{r7}
 8008efa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008efc:	4b0b      	ldr	r3, [pc, #44]	; (8008f2c <vPortSetupTimerInterrupt+0x34>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f02:	4b0b      	ldr	r3, [pc, #44]	; (8008f30 <vPortSetupTimerInterrupt+0x38>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f08:	4b0a      	ldr	r3, [pc, #40]	; (8008f34 <vPortSetupTimerInterrupt+0x3c>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a0a      	ldr	r2, [pc, #40]	; (8008f38 <vPortSetupTimerInterrupt+0x40>)
 8008f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f12:	099b      	lsrs	r3, r3, #6
 8008f14:	4a09      	ldr	r2, [pc, #36]	; (8008f3c <vPortSetupTimerInterrupt+0x44>)
 8008f16:	3b01      	subs	r3, #1
 8008f18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f1a:	4b04      	ldr	r3, [pc, #16]	; (8008f2c <vPortSetupTimerInterrupt+0x34>)
 8008f1c:	2207      	movs	r2, #7
 8008f1e:	601a      	str	r2, [r3, #0]
}
 8008f20:	bf00      	nop
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	e000e010 	.word	0xe000e010
 8008f30:	e000e018 	.word	0xe000e018
 8008f34:	20000020 	.word	0x20000020
 8008f38:	10624dd3 	.word	0x10624dd3
 8008f3c:	e000e014 	.word	0xe000e014

08008f40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f50 <vPortEnableVFP+0x10>
 8008f44:	6801      	ldr	r1, [r0, #0]
 8008f46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f4a:	6001      	str	r1, [r0, #0]
 8008f4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f4e:	bf00      	nop
 8008f50:	e000ed88 	.word	0xe000ed88

08008f54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f5a:	f3ef 8305 	mrs	r3, IPSR
 8008f5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2b0f      	cmp	r3, #15
 8008f64:	d913      	bls.n	8008f8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f66:	4a16      	ldr	r2, [pc, #88]	; (8008fc0 <vPortValidateInterruptPriority+0x6c>)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f70:	4b14      	ldr	r3, [pc, #80]	; (8008fc4 <vPortValidateInterruptPriority+0x70>)
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	7afa      	ldrb	r2, [r7, #11]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d209      	bcs.n	8008f8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	607b      	str	r3, [r7, #4]
 8008f8c:	e7fe      	b.n	8008f8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f8e:	4b0e      	ldr	r3, [pc, #56]	; (8008fc8 <vPortValidateInterruptPriority+0x74>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f96:	4b0d      	ldr	r3, [pc, #52]	; (8008fcc <vPortValidateInterruptPriority+0x78>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d909      	bls.n	8008fb2 <vPortValidateInterruptPriority+0x5e>
 8008f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	603b      	str	r3, [r7, #0]
 8008fb0:	e7fe      	b.n	8008fb0 <vPortValidateInterruptPriority+0x5c>
	}
 8008fb2:	bf00      	nop
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	e000e3f0 	.word	0xe000e3f0
 8008fc4:	20002a24 	.word	0x20002a24
 8008fc8:	e000ed0c 	.word	0xe000ed0c
 8008fcc:	20002a28 	.word	0x20002a28

08008fd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b08a      	sub	sp, #40	; 0x28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008fdc:	f7fe fcf2 	bl	80079c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008fe0:	4b57      	ldr	r3, [pc, #348]	; (8009140 <pvPortMalloc+0x170>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008fe8:	f000 f90c 	bl	8009204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008fec:	4b55      	ldr	r3, [pc, #340]	; (8009144 <pvPortMalloc+0x174>)
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f040 808c 	bne.w	8009112 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d01c      	beq.n	800903a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009000:	2208      	movs	r2, #8
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4413      	add	r3, r2
 8009006:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f003 0307 	and.w	r3, r3, #7
 800900e:	2b00      	cmp	r3, #0
 8009010:	d013      	beq.n	800903a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f023 0307 	bic.w	r3, r3, #7
 8009018:	3308      	adds	r3, #8
 800901a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f003 0307 	and.w	r3, r3, #7
 8009022:	2b00      	cmp	r3, #0
 8009024:	d009      	beq.n	800903a <pvPortMalloc+0x6a>
 8009026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902a:	f383 8811 	msr	BASEPRI, r3
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	f3bf 8f4f 	dsb	sy
 8009036:	617b      	str	r3, [r7, #20]
 8009038:	e7fe      	b.n	8009038 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d068      	beq.n	8009112 <pvPortMalloc+0x142>
 8009040:	4b41      	ldr	r3, [pc, #260]	; (8009148 <pvPortMalloc+0x178>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	429a      	cmp	r2, r3
 8009048:	d863      	bhi.n	8009112 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800904a:	4b40      	ldr	r3, [pc, #256]	; (800914c <pvPortMalloc+0x17c>)
 800904c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800904e:	4b3f      	ldr	r3, [pc, #252]	; (800914c <pvPortMalloc+0x17c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009054:	e004      	b.n	8009060 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009058:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	429a      	cmp	r2, r3
 8009068:	d903      	bls.n	8009072 <pvPortMalloc+0xa2>
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1f1      	bne.n	8009056 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009072:	4b33      	ldr	r3, [pc, #204]	; (8009140 <pvPortMalloc+0x170>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009078:	429a      	cmp	r2, r3
 800907a:	d04a      	beq.n	8009112 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2208      	movs	r2, #8
 8009082:	4413      	add	r3, r2
 8009084:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	6a3b      	ldr	r3, [r7, #32]
 800908c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	1ad2      	subs	r2, r2, r3
 8009096:	2308      	movs	r3, #8
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	429a      	cmp	r2, r3
 800909c:	d91e      	bls.n	80090dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800909e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4413      	add	r3, r2
 80090a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	f003 0307 	and.w	r3, r3, #7
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d009      	beq.n	80090c4 <pvPortMalloc+0xf4>
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	613b      	str	r3, [r7, #16]
 80090c2:	e7fe      	b.n	80090c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	1ad2      	subs	r2, r2, r3
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090d6:	69b8      	ldr	r0, [r7, #24]
 80090d8:	f000 f8f6 	bl	80092c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090dc:	4b1a      	ldr	r3, [pc, #104]	; (8009148 <pvPortMalloc+0x178>)
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	4a18      	ldr	r2, [pc, #96]	; (8009148 <pvPortMalloc+0x178>)
 80090e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090ea:	4b17      	ldr	r3, [pc, #92]	; (8009148 <pvPortMalloc+0x178>)
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	4b18      	ldr	r3, [pc, #96]	; (8009150 <pvPortMalloc+0x180>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d203      	bcs.n	80090fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090f6:	4b14      	ldr	r3, [pc, #80]	; (8009148 <pvPortMalloc+0x178>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a15      	ldr	r2, [pc, #84]	; (8009150 <pvPortMalloc+0x180>)
 80090fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	685a      	ldr	r2, [r3, #4]
 8009102:	4b10      	ldr	r3, [pc, #64]	; (8009144 <pvPortMalloc+0x174>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	431a      	orrs	r2, r3
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910e:	2200      	movs	r2, #0
 8009110:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009112:	f7fe fc65 	bl	80079e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	f003 0307 	and.w	r3, r3, #7
 800911c:	2b00      	cmp	r3, #0
 800911e:	d009      	beq.n	8009134 <pvPortMalloc+0x164>
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	60fb      	str	r3, [r7, #12]
 8009132:	e7fe      	b.n	8009132 <pvPortMalloc+0x162>
	return pvReturn;
 8009134:	69fb      	ldr	r3, [r7, #28]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3728      	adds	r7, #40	; 0x28
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	20006634 	.word	0x20006634
 8009144:	20006640 	.word	0x20006640
 8009148:	20006638 	.word	0x20006638
 800914c:	2000662c 	.word	0x2000662c
 8009150:	2000663c 	.word	0x2000663c

08009154 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d046      	beq.n	80091f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009166:	2308      	movs	r3, #8
 8009168:	425b      	negs	r3, r3
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	4413      	add	r3, r2
 800916e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	4b20      	ldr	r3, [pc, #128]	; (80091fc <vPortFree+0xa8>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4013      	ands	r3, r2
 800917e:	2b00      	cmp	r3, #0
 8009180:	d109      	bne.n	8009196 <vPortFree+0x42>
 8009182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	60fb      	str	r3, [r7, #12]
 8009194:	e7fe      	b.n	8009194 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d009      	beq.n	80091b2 <vPortFree+0x5e>
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	60bb      	str	r3, [r7, #8]
 80091b0:	e7fe      	b.n	80091b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	685a      	ldr	r2, [r3, #4]
 80091b6:	4b11      	ldr	r3, [pc, #68]	; (80091fc <vPortFree+0xa8>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4013      	ands	r3, r2
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d019      	beq.n	80091f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d115      	bne.n	80091f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	4b0b      	ldr	r3, [pc, #44]	; (80091fc <vPortFree+0xa8>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	43db      	mvns	r3, r3
 80091d2:	401a      	ands	r2, r3
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80091d8:	f7fe fbf4 	bl	80079c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	685a      	ldr	r2, [r3, #4]
 80091e0:	4b07      	ldr	r3, [pc, #28]	; (8009200 <vPortFree+0xac>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4413      	add	r3, r2
 80091e6:	4a06      	ldr	r2, [pc, #24]	; (8009200 <vPortFree+0xac>)
 80091e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091ea:	6938      	ldr	r0, [r7, #16]
 80091ec:	f000 f86c 	bl	80092c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80091f0:	f7fe fbf6 	bl	80079e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091f4:	bf00      	nop
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	20006640 	.word	0x20006640
 8009200:	20006638 	.word	0x20006638

08009204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800920a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800920e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009210:	4b27      	ldr	r3, [pc, #156]	; (80092b0 <prvHeapInit+0xac>)
 8009212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f003 0307 	and.w	r3, r3, #7
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00c      	beq.n	8009238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3307      	adds	r3, #7
 8009222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0307 	bic.w	r3, r3, #7
 800922a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	4a1f      	ldr	r2, [pc, #124]	; (80092b0 <prvHeapInit+0xac>)
 8009234:	4413      	add	r3, r2
 8009236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800923c:	4a1d      	ldr	r2, [pc, #116]	; (80092b4 <prvHeapInit+0xb0>)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009242:	4b1c      	ldr	r3, [pc, #112]	; (80092b4 <prvHeapInit+0xb0>)
 8009244:	2200      	movs	r2, #0
 8009246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	4413      	add	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009250:	2208      	movs	r2, #8
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	1a9b      	subs	r3, r3, r2
 8009256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f023 0307 	bic.w	r3, r3, #7
 800925e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	4a15      	ldr	r2, [pc, #84]	; (80092b8 <prvHeapInit+0xb4>)
 8009264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009266:	4b14      	ldr	r3, [pc, #80]	; (80092b8 <prvHeapInit+0xb4>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2200      	movs	r2, #0
 800926c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800926e:	4b12      	ldr	r3, [pc, #72]	; (80092b8 <prvHeapInit+0xb4>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2200      	movs	r2, #0
 8009274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	1ad2      	subs	r2, r2, r3
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009284:	4b0c      	ldr	r3, [pc, #48]	; (80092b8 <prvHeapInit+0xb4>)
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	4a0a      	ldr	r2, [pc, #40]	; (80092bc <prvHeapInit+0xb8>)
 8009292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	4a09      	ldr	r2, [pc, #36]	; (80092c0 <prvHeapInit+0xbc>)
 800929a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800929c:	4b09      	ldr	r3, [pc, #36]	; (80092c4 <prvHeapInit+0xc0>)
 800929e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80092a2:	601a      	str	r2, [r3, #0]
}
 80092a4:	bf00      	nop
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	20002a2c 	.word	0x20002a2c
 80092b4:	2000662c 	.word	0x2000662c
 80092b8:	20006634 	.word	0x20006634
 80092bc:	2000663c 	.word	0x2000663c
 80092c0:	20006638 	.word	0x20006638
 80092c4:	20006640 	.word	0x20006640

080092c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092d0:	4b28      	ldr	r3, [pc, #160]	; (8009374 <prvInsertBlockIntoFreeList+0xac>)
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	e002      	b.n	80092dc <prvInsertBlockIntoFreeList+0x14>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d8f7      	bhi.n	80092d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	4413      	add	r3, r2
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d108      	bne.n	800930a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	441a      	add	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	441a      	add	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	429a      	cmp	r2, r3
 800931c:	d118      	bne.n	8009350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	4b15      	ldr	r3, [pc, #84]	; (8009378 <prvInsertBlockIntoFreeList+0xb0>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d00d      	beq.n	8009346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	441a      	add	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	e008      	b.n	8009358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009346:	4b0c      	ldr	r3, [pc, #48]	; (8009378 <prvInsertBlockIntoFreeList+0xb0>)
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	e003      	b.n	8009358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	429a      	cmp	r2, r3
 800935e:	d002      	beq.n	8009366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009366:	bf00      	nop
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	2000662c 	.word	0x2000662c
 8009378:	20006634 	.word	0x20006634

0800937c <initCompass>:


static uint32_t test = 0;

void initCompass(uint32_t cInit)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
	test = cInit;
 8009384:	4a04      	ldr	r2, [pc, #16]	; (8009398 <initCompass+0x1c>)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6013      	str	r3, [r2, #0]
}
 800938a:	bf00      	nop
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	20006644 	.word	0x20006644

0800939c <SetCompassData>:

void SetCompassData()
{
 800939c:	b480      	push	{r7}
 800939e:	af00      	add	r7, sp, #0
	//LIS2DW12_ACC_GetAxes();

}
 80093a0:	bf00      	nop
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <position_Init>:
static void motionSensor_Init(void);



void position_Init(void)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	af00      	add	r7, sp, #0
	motionSensor_Init();
 80093ae:	f000 f80d 	bl	80093cc <motionSensor_Init>
}
 80093b2:	bf00      	nop
 80093b4:	bd80      	pop	{r7, pc}
	...

080093b8 <PositionProcess>:

void PositionProcess(void)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	af00      	add	r7, sp, #0
	printf("\n\n\n\rHallo PositionProcess\n\n\r");
 80093bc:	4802      	ldr	r0, [pc, #8]	; (80093c8 <PositionProcess+0x10>)
 80093be:	f000 f9a5 	bl	800970c <iprintf>
}
 80093c2:	bf00      	nop
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	0800a554 	.word	0x0800a554

080093cc <motionSensor_Init>:
/**
  * @brief  Initialize the accelerometer and  magnetometer
  * @retval None
  */
static void motionSensor_Init(void)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0
//  displayFloatToInt_t out_value_odr;
//  int i;

	  /* Initialize Virtual COM Port */
	  BSP_COM_Init(COM1);
 80093d0:	2000      	movs	r0, #0
 80093d2:	f7f9 fe1d 	bl	8003010 <BSP_COM_Init>


	POS_MOTION_SENSOR_Init();
 80093d6:	f000 f80b 	bl	80093f0 <POS_MOTION_SENSOR_Init>
      break;
#endif


//	LIS2DW12_Init(&accObj);
	LIS2DW12_GetCapabilities(&accObj, &accCap);
 80093da:	4903      	ldr	r1, [pc, #12]	; (80093e8 <motionSensor_Init+0x1c>)
 80093dc:	4803      	ldr	r0, [pc, #12]	; (80093ec <motionSensor_Init+0x20>)
 80093de:	f7f7 ff2d 	bl	800123c <LIS2DW12_GetCapabilities>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
    printf("%s", dataOut);
  }
  */
}
 80093e2:	bf00      	nop
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	2000667c 	.word	0x2000667c
 80093ec:	20006648 	.word	0x20006648

080093f0 <POS_MOTION_SENSOR_Init>:
/**
 * @brief  Initializes the motion sensors
 * @retval BSP status
 */
int32_t POS_MOTION_SENSOR_Init(void)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80093f6:	2300      	movs	r3, #0
 80093f8:	607b      	str	r3, [r7, #4]

  ret = LIS2DW12_0_Probe(ACC_LIS2DW12);
 80093fa:	2000      	movs	r0, #0
 80093fc:	f000 f874 	bl	80094e8 <LIS2DW12_0_Probe>
 8009400:	6078      	str	r0, [r7, #4]
  ret = LIS2MDL_0_Probe(MAG_LIS2MDL);
 8009402:	2001      	movs	r0, #1
 8009404:	f000 f8da 	bl	80095bc <LIS2MDL_0_Probe>
 8009408:	6078      	str	r0, [r7, #4]

// nur test a
  uint8_t Id1,Id2;
  ret = POS_MOTION_SENSOR_ReadID(ACC_LIS2DW12, &Id1);
 800940a:	1cfb      	adds	r3, r7, #3
 800940c:	4619      	mov	r1, r3
 800940e:	2000      	movs	r0, #0
 8009410:	f000 f814 	bl	800943c <POS_MOTION_SENSOR_ReadID>
 8009414:	6078      	str	r0, [r7, #4]
  ret = POS_MOTION_SENSOR_ReadID(MAG_LIS2MDL, &Id2);
 8009416:	1cbb      	adds	r3, r7, #2
 8009418:	4619      	mov	r1, r3
 800941a:	2001      	movs	r0, #1
 800941c:	f000 f80e 	bl	800943c <POS_MOTION_SENSOR_ReadID>
 8009420:	6078      	str	r0, [r7, #4]


  ret = POS_MOTION_SENSOR_Enable(ACC_LIS2DW12);
 8009422:	2000      	movs	r0, #0
 8009424:	f000 f836 	bl	8009494 <POS_MOTION_SENSOR_Enable>
 8009428:	6078      	str	r0, [r7, #4]
  ret = POS_MOTION_SENSOR_Enable(MAG_LIS2MDL);
 800942a:	2001      	movs	r0, #1
 800942c:	f000 f832 	bl	8009494 <POS_MOTION_SENSOR_Enable>
 8009430:	6078      	str	r0, [r7, #4]

// nur test e

  return ret;
 8009432:	687b      	ldr	r3, [r7, #4]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <POS_MOTION_SENSOR_ReadID>:
 * @param  sensor Motion sensor instance
 * @param  Id WHOAMI value
 * @retval BSP status
 */
int32_t POS_MOTION_SENSOR_ReadID(POS_MOTION_SENSORS sensor, uint8_t *Id)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	6039      	str	r1, [r7, #0]
 8009446:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if (sensor >= POS_MOTION_SENSORS_MAX)
 8009448:	79fb      	ldrb	r3, [r7, #7]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d903      	bls.n	8009456 <POS_MOTION_SENSOR_ReadID+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800944e:	f06f 0301 	mvn.w	r3, #1
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	e014      	b.n	8009480 <POS_MOTION_SENSOR_ReadID+0x44>
  }
  else if (PosMotionDrv[sensor]->ReadID(PosMotionCompObj[sensor], Id) != BSP_ERROR_NONE)
 8009456:	79fb      	ldrb	r3, [r7, #7]
 8009458:	4a0c      	ldr	r2, [pc, #48]	; (800948c <POS_MOTION_SENSOR_ReadID+0x50>)
 800945a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	79fa      	ldrb	r2, [r7, #7]
 8009462:	490b      	ldr	r1, [pc, #44]	; (8009490 <POS_MOTION_SENSOR_ReadID+0x54>)
 8009464:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	4610      	mov	r0, r2
 800946c:	4798      	blx	r3
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d003      	beq.n	800947c <POS_MOTION_SENSOR_ReadID+0x40>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009474:	f06f 0306 	mvn.w	r3, #6
 8009478:	60fb      	str	r3, [r7, #12]
 800947a:	e001      	b.n	8009480 <POS_MOTION_SENSOR_ReadID+0x44>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800947c:	2300      	movs	r3, #0
 800947e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009480:	68fb      	ldr	r3, [r7, #12]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	200066a0 	.word	0x200066a0
 8009490:	20009194 	.word	0x20009194

08009494 <POS_MOTION_SENSOR_Enable>:
 * @brief  Enable Motion sensor
 * @param  Sensor Motion sensor instance
 * @retval BSP status
 */
int32_t POS_MOTION_SENSOR_Enable(POS_MOTION_SENSORS sensor)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	4603      	mov	r3, r0
 800949c:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if (sensor >= POS_MOTION_SENSORS_MAX)
 800949e:	79fb      	ldrb	r3, [r7, #7]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d903      	bls.n	80094ac <POS_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80094a4:	f06f 0301 	mvn.w	r3, #1
 80094a8:	60fb      	str	r3, [r7, #12]
 80094aa:	e013      	b.n	80094d4 <POS_MOTION_SENSOR_Enable+0x40>
  }
  else if (PosMotionFuncDrv[sensor]->Enable(PosMotionCompObj[sensor]) != BSP_ERROR_NONE)
 80094ac:	79fb      	ldrb	r3, [r7, #7]
 80094ae:	4a0c      	ldr	r2, [pc, #48]	; (80094e0 <POS_MOTION_SENSOR_Enable+0x4c>)
 80094b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	79fa      	ldrb	r2, [r7, #7]
 80094b8:	490a      	ldr	r1, [pc, #40]	; (80094e4 <POS_MOTION_SENSOR_Enable+0x50>)
 80094ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80094be:	4610      	mov	r0, r2
 80094c0:	4798      	blx	r3
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d003      	beq.n	80094d0 <POS_MOTION_SENSOR_Enable+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80094c8:	f06f 0304 	mvn.w	r3, #4
 80094cc:	60fb      	str	r3, [r7, #12]
 80094ce:	e001      	b.n	80094d4 <POS_MOTION_SENSOR_Enable+0x40>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80094d0:	2300      	movs	r3, #0
 80094d2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80094d4:	68fb      	ldr	r3, [r7, #12]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20006698 	.word	0x20006698
 80094e4:	20009194 	.word	0x20009194

080094e8 <LIS2DW12_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2DW12_0_Probe(POS_MOTION_SENSORS sensor)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b08c      	sub	sp, #48	; 0x30
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	4603      	mov	r3, r0
 80094f0:	71fb      	strb	r3, [r7, #7]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  int32_t ret = BSP_ERROR_NONE;
 80094f2:	2300      	movs	r3, #0
 80094f4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 80094f6:	2300      	movs	r3, #0
 80094f8:	61bb      	str	r3, [r7, #24]
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 80094fa:	2333      	movs	r3, #51	; 0x33
 80094fc:	773b      	strb	r3, [r7, #28]
  io_ctx.Init        = POS_I2C_Init;
 80094fe:	4b24      	ldr	r3, [pc, #144]	; (8009590 <LIS2DW12_0_Probe+0xa8>)
 8009500:	613b      	str	r3, [r7, #16]
  io_ctx.DeInit      = POS_I2C_DeInit;
 8009502:	4b24      	ldr	r3, [pc, #144]	; (8009594 <LIS2DW12_0_Probe+0xac>)
 8009504:	617b      	str	r3, [r7, #20]
  io_ctx.ReadReg     = POS_I2C_ReadReg;
 8009506:	4b24      	ldr	r3, [pc, #144]	; (8009598 <LIS2DW12_0_Probe+0xb0>)
 8009508:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.WriteReg    = POS_I2C_WriteReg;
 800950a:	4b24      	ldr	r3, [pc, #144]	; (800959c <LIS2DW12_0_Probe+0xb4>)
 800950c:	623b      	str	r3, [r7, #32]
  io_ctx.GetTick     = POS_GetTick;
 800950e:	4b24      	ldr	r3, [pc, #144]	; (80095a0 <LIS2DW12_0_Probe+0xb8>)
 8009510:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8009512:	f107 0310 	add.w	r3, r7, #16
 8009516:	4619      	mov	r1, r3
 8009518:	4822      	ldr	r0, [pc, #136]	; (80095a4 <LIS2DW12_0_Probe+0xbc>)
 800951a:	f7f7 fd8f 	bl	800103c <LIS2DW12_RegisterBusIO>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d003      	beq.n	800952c <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009524:	f06f 0306 	mvn.w	r3, #6
 8009528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800952a:	e02c      	b.n	8009586 <LIS2DW12_0_Probe+0x9e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800952c:	f107 030f 	add.w	r3, r7, #15
 8009530:	4619      	mov	r1, r3
 8009532:	481c      	ldr	r0, [pc, #112]	; (80095a4 <LIS2DW12_0_Probe+0xbc>)
 8009534:	f7f7 fe6c 	bl	8001210 <LIS2DW12_ReadID>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d003      	beq.n	8009546 <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800953e:	f06f 0306 	mvn.w	r3, #6
 8009542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009544:	e01f      	b.n	8009586 <LIS2DW12_0_Probe+0x9e>
  }
  else if (id != LIS2DW12_ID)
 8009546:	7bfb      	ldrb	r3, [r7, #15]
 8009548:	2b44      	cmp	r3, #68	; 0x44
 800954a:	d003      	beq.n	8009554 <LIS2DW12_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800954c:	f06f 0306 	mvn.w	r3, #6
 8009550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009552:	e018      	b.n	8009586 <LIS2DW12_0_Probe+0x9e>
  }
  else
  {
    PosMotionCompObj[ACC_LIS2DW12] = &lis2dw12_obj_0;
 8009554:	4b14      	ldr	r3, [pc, #80]	; (80095a8 <LIS2DW12_0_Probe+0xc0>)
 8009556:	4a13      	ldr	r2, [pc, #76]	; (80095a4 <LIS2DW12_0_Probe+0xbc>)
 8009558:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionDrv[ACC_LIS2DW12] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800955a:	4b14      	ldr	r3, [pc, #80]	; (80095ac <LIS2DW12_0_Probe+0xc4>)
 800955c:	4a14      	ldr	r2, [pc, #80]	; (80095b0 <LIS2DW12_0_Probe+0xc8>)
 800955e:	601a      	str	r2, [r3, #0]

	/* The second cast (void *) is added to bypass Misra R11.3 rule */
	PosMotionFuncDrv[ACC_LIS2DW12] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2DW12_ACC_Driver;
 8009560:	4b14      	ldr	r3, [pc, #80]	; (80095b4 <LIS2DW12_0_Probe+0xcc>)
 8009562:	4a15      	ldr	r2, [pc, #84]	; (80095b8 <LIS2DW12_0_Probe+0xd0>)
 8009564:	601a      	str	r2, [r3, #0]

	if (PosMotionDrv[ACC_LIS2DW12]->Init(PosMotionCompObj[ACC_LIS2DW12]) != LIS2DW12_OK)
 8009566:	4b11      	ldr	r3, [pc, #68]	; (80095ac <LIS2DW12_0_Probe+0xc4>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a0e      	ldr	r2, [pc, #56]	; (80095a8 <LIS2DW12_0_Probe+0xc0>)
 800956e:	6812      	ldr	r2, [r2, #0]
 8009570:	4610      	mov	r0, r2
 8009572:	4798      	blx	r3
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d003      	beq.n	8009582 <LIS2DW12_0_Probe+0x9a>
	{
	ret = BSP_ERROR_COMPONENT_FAILURE;
 800957a:	f06f 0304 	mvn.w	r3, #4
 800957e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009580:	e001      	b.n	8009586 <LIS2DW12_0_Probe+0x9e>
	}
	else
	{
	ret = BSP_ERROR_NONE;
 8009582:	2300      	movs	r3, #0
 8009584:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
  }
  return ret;
 8009586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009588:	4618      	mov	r0, r3
 800958a:	3730      	adds	r7, #48	; 0x30
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	08000bb5 	.word	0x08000bb5
 8009594:	08000c19 	.word	0x08000c19
 8009598:	08000ccd 	.word	0x08000ccd
 800959c:	08000c69 	.word	0x08000c69
 80095a0:	08000d31 	.word	0x08000d31
 80095a4:	200066a8 	.word	0x200066a8
 80095a8:	20009194 	.word	0x20009194
 80095ac:	200066a0 	.word	0x200066a0
 80095b0:	20000024 	.word	0x20000024
 80095b4:	20006698 	.word	0x20006698
 80095b8:	20000034 	.word	0x20000034

080095bc <LIS2MDL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2MDL_0_Probe(POS_MOTION_SENSORS sensor)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b08c      	sub	sp, #48	; 0x30
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	4603      	mov	r3, r0
 80095c4:	71fb      	strb	r3, [r7, #7]

  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  int32_t                 ret = BSP_ERROR_NONE;
 80095c6:	2300      	movs	r3, #0
 80095c8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the magneto driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 80095ca:	2300      	movs	r3, #0
 80095cc:	61bb      	str	r3, [r7, #24]
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 80095ce:	233d      	movs	r3, #61	; 0x3d
 80095d0:	773b      	strb	r3, [r7, #28]
  io_ctx.Init        = POS_I2C_Init;
 80095d2:	4b24      	ldr	r3, [pc, #144]	; (8009664 <LIS2MDL_0_Probe+0xa8>)
 80095d4:	613b      	str	r3, [r7, #16]
  io_ctx.DeInit      = POS_I2C_DeInit;
 80095d6:	4b24      	ldr	r3, [pc, #144]	; (8009668 <LIS2MDL_0_Probe+0xac>)
 80095d8:	617b      	str	r3, [r7, #20]
  io_ctx.ReadReg     = POS_I2C_ReadReg;
 80095da:	4b24      	ldr	r3, [pc, #144]	; (800966c <LIS2MDL_0_Probe+0xb0>)
 80095dc:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.WriteReg    = POS_I2C_WriteReg;
 80095de:	4b24      	ldr	r3, [pc, #144]	; (8009670 <LIS2MDL_0_Probe+0xb4>)
 80095e0:	623b      	str	r3, [r7, #32]
  io_ctx.GetTick     = POS_GetTick;
 80095e2:	4b24      	ldr	r3, [pc, #144]	; (8009674 <LIS2MDL_0_Probe+0xb8>)
 80095e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 80095e6:	f107 0310 	add.w	r3, r7, #16
 80095ea:	4619      	mov	r1, r3
 80095ec:	4822      	ldr	r0, [pc, #136]	; (8009678 <LIS2MDL_0_Probe+0xbc>)
 80095ee:	f7f9 f875 	bl	80026dc <LIS2MDL_RegisterBusIO>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d003      	beq.n	8009600 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80095f8:	f06f 0306 	mvn.w	r3, #6
 80095fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095fe:	e02c      	b.n	800965a <LIS2MDL_0_Probe+0x9e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8009600:	f107 030f 	add.w	r3, r7, #15
 8009604:	4619      	mov	r1, r3
 8009606:	481c      	ldr	r0, [pc, #112]	; (8009678 <LIS2MDL_0_Probe+0xbc>)
 8009608:	f7f9 f931 	bl	800286e <LIS2MDL_ReadID>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009612:	f06f 0306 	mvn.w	r3, #6
 8009616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009618:	e01f      	b.n	800965a <LIS2MDL_0_Probe+0x9e>
  }
  else if (id != LIS2MDL_ID)
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	2b40      	cmp	r3, #64	; 0x40
 800961e:	d003      	beq.n	8009628 <LIS2MDL_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009620:	f06f 0306 	mvn.w	r3, #6
 8009624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009626:	e018      	b.n	800965a <LIS2MDL_0_Probe+0x9e>
  }
  else
  {

    PosMotionCompObj[MAG_LIS2MDL] = &lis2mdl_obj_0;
 8009628:	4b14      	ldr	r3, [pc, #80]	; (800967c <LIS2MDL_0_Probe+0xc0>)
 800962a:	4a13      	ldr	r2, [pc, #76]	; (8009678 <LIS2MDL_0_Probe+0xbc>)
 800962c:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionDrv[MAG_LIS2MDL] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800962e:	4b14      	ldr	r3, [pc, #80]	; (8009680 <LIS2MDL_0_Probe+0xc4>)
 8009630:	4a14      	ldr	r2, [pc, #80]	; (8009684 <LIS2MDL_0_Probe+0xc8>)
 8009632:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionFuncDrv[MAG_LIS2MDL] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2MDL_MAG_Driver;
 8009634:	4b14      	ldr	r3, [pc, #80]	; (8009688 <LIS2MDL_0_Probe+0xcc>)
 8009636:	4a15      	ldr	r2, [pc, #84]	; (800968c <LIS2MDL_0_Probe+0xd0>)
 8009638:	605a      	str	r2, [r3, #4]

    if (PosMotionDrv[MAG_LIS2MDL]->Init(PosMotionCompObj[MAG_LIS2MDL]) != LIS2MDL_OK)
 800963a:	4b11      	ldr	r3, [pc, #68]	; (8009680 <LIS2MDL_0_Probe+0xc4>)
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a0e      	ldr	r2, [pc, #56]	; (800967c <LIS2MDL_0_Probe+0xc0>)
 8009642:	6852      	ldr	r2, [r2, #4]
 8009644:	4610      	mov	r0, r2
 8009646:	4798      	blx	r3
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d003      	beq.n	8009656 <LIS2MDL_0_Probe+0x9a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800964e:	f06f 0304 	mvn.w	r3, #4
 8009652:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009654:	e001      	b.n	800965a <LIS2MDL_0_Probe+0x9e>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8009656:	2300      	movs	r3, #0
 8009658:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  return ret;
 800965a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800965c:	4618      	mov	r0, r3
 800965e:	3730      	adds	r7, #48	; 0x30
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	08000bb5 	.word	0x08000bb5
 8009668:	08000c19 	.word	0x08000c19
 800966c:	08000ccd 	.word	0x08000ccd
 8009670:	08000c69 	.word	0x08000c69
 8009674:	08000d31 	.word	0x08000d31
 8009678:	200066dc 	.word	0x200066dc
 800967c:	20009194 	.word	0x20009194
 8009680:	200066a0 	.word	0x200066a0
 8009684:	20000058 	.word	0x20000058
 8009688:	20006698 	.word	0x20006698
 800968c:	20000068 	.word	0x20000068

08009690 <__errno>:
 8009690:	4b01      	ldr	r3, [pc, #4]	; (8009698 <__errno+0x8>)
 8009692:	6818      	ldr	r0, [r3, #0]
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	200000a0 	.word	0x200000a0

0800969c <__libc_init_array>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	4e0d      	ldr	r6, [pc, #52]	; (80096d4 <__libc_init_array+0x38>)
 80096a0:	4c0d      	ldr	r4, [pc, #52]	; (80096d8 <__libc_init_array+0x3c>)
 80096a2:	1ba4      	subs	r4, r4, r6
 80096a4:	10a4      	asrs	r4, r4, #2
 80096a6:	2500      	movs	r5, #0
 80096a8:	42a5      	cmp	r5, r4
 80096aa:	d109      	bne.n	80096c0 <__libc_init_array+0x24>
 80096ac:	4e0b      	ldr	r6, [pc, #44]	; (80096dc <__libc_init_array+0x40>)
 80096ae:	4c0c      	ldr	r4, [pc, #48]	; (80096e0 <__libc_init_array+0x44>)
 80096b0:	f000 ff10 	bl	800a4d4 <_init>
 80096b4:	1ba4      	subs	r4, r4, r6
 80096b6:	10a4      	asrs	r4, r4, #2
 80096b8:	2500      	movs	r5, #0
 80096ba:	42a5      	cmp	r5, r4
 80096bc:	d105      	bne.n	80096ca <__libc_init_array+0x2e>
 80096be:	bd70      	pop	{r4, r5, r6, pc}
 80096c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096c4:	4798      	blx	r3
 80096c6:	3501      	adds	r5, #1
 80096c8:	e7ee      	b.n	80096a8 <__libc_init_array+0xc>
 80096ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096ce:	4798      	blx	r3
 80096d0:	3501      	adds	r5, #1
 80096d2:	e7f2      	b.n	80096ba <__libc_init_array+0x1e>
 80096d4:	0800a6dc 	.word	0x0800a6dc
 80096d8:	0800a6dc 	.word	0x0800a6dc
 80096dc:	0800a6dc 	.word	0x0800a6dc
 80096e0:	0800a6e0 	.word	0x0800a6e0

080096e4 <memcpy>:
 80096e4:	b510      	push	{r4, lr}
 80096e6:	1e43      	subs	r3, r0, #1
 80096e8:	440a      	add	r2, r1
 80096ea:	4291      	cmp	r1, r2
 80096ec:	d100      	bne.n	80096f0 <memcpy+0xc>
 80096ee:	bd10      	pop	{r4, pc}
 80096f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096f8:	e7f7      	b.n	80096ea <memcpy+0x6>

080096fa <memset>:
 80096fa:	4402      	add	r2, r0
 80096fc:	4603      	mov	r3, r0
 80096fe:	4293      	cmp	r3, r2
 8009700:	d100      	bne.n	8009704 <memset+0xa>
 8009702:	4770      	bx	lr
 8009704:	f803 1b01 	strb.w	r1, [r3], #1
 8009708:	e7f9      	b.n	80096fe <memset+0x4>
	...

0800970c <iprintf>:
 800970c:	b40f      	push	{r0, r1, r2, r3}
 800970e:	4b0a      	ldr	r3, [pc, #40]	; (8009738 <iprintf+0x2c>)
 8009710:	b513      	push	{r0, r1, r4, lr}
 8009712:	681c      	ldr	r4, [r3, #0]
 8009714:	b124      	cbz	r4, 8009720 <iprintf+0x14>
 8009716:	69a3      	ldr	r3, [r4, #24]
 8009718:	b913      	cbnz	r3, 8009720 <iprintf+0x14>
 800971a:	4620      	mov	r0, r4
 800971c:	f000 f84e 	bl	80097bc <__sinit>
 8009720:	ab05      	add	r3, sp, #20
 8009722:	9a04      	ldr	r2, [sp, #16]
 8009724:	68a1      	ldr	r1, [r4, #8]
 8009726:	9301      	str	r3, [sp, #4]
 8009728:	4620      	mov	r0, r4
 800972a:	f000 f955 	bl	80099d8 <_vfiprintf_r>
 800972e:	b002      	add	sp, #8
 8009730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009734:	b004      	add	sp, #16
 8009736:	4770      	bx	lr
 8009738:	200000a0 	.word	0x200000a0

0800973c <std>:
 800973c:	2300      	movs	r3, #0
 800973e:	b510      	push	{r4, lr}
 8009740:	4604      	mov	r4, r0
 8009742:	e9c0 3300 	strd	r3, r3, [r0]
 8009746:	6083      	str	r3, [r0, #8]
 8009748:	8181      	strh	r1, [r0, #12]
 800974a:	6643      	str	r3, [r0, #100]	; 0x64
 800974c:	81c2      	strh	r2, [r0, #14]
 800974e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009752:	6183      	str	r3, [r0, #24]
 8009754:	4619      	mov	r1, r3
 8009756:	2208      	movs	r2, #8
 8009758:	305c      	adds	r0, #92	; 0x5c
 800975a:	f7ff ffce 	bl	80096fa <memset>
 800975e:	4b05      	ldr	r3, [pc, #20]	; (8009774 <std+0x38>)
 8009760:	6263      	str	r3, [r4, #36]	; 0x24
 8009762:	4b05      	ldr	r3, [pc, #20]	; (8009778 <std+0x3c>)
 8009764:	62a3      	str	r3, [r4, #40]	; 0x28
 8009766:	4b05      	ldr	r3, [pc, #20]	; (800977c <std+0x40>)
 8009768:	62e3      	str	r3, [r4, #44]	; 0x2c
 800976a:	4b05      	ldr	r3, [pc, #20]	; (8009780 <std+0x44>)
 800976c:	6224      	str	r4, [r4, #32]
 800976e:	6323      	str	r3, [r4, #48]	; 0x30
 8009770:	bd10      	pop	{r4, pc}
 8009772:	bf00      	nop
 8009774:	08009f35 	.word	0x08009f35
 8009778:	08009f57 	.word	0x08009f57
 800977c:	08009f8f 	.word	0x08009f8f
 8009780:	08009fb3 	.word	0x08009fb3

08009784 <_cleanup_r>:
 8009784:	4901      	ldr	r1, [pc, #4]	; (800978c <_cleanup_r+0x8>)
 8009786:	f000 b885 	b.w	8009894 <_fwalk_reent>
 800978a:	bf00      	nop
 800978c:	0800a28d 	.word	0x0800a28d

08009790 <__sfmoreglue>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	1e4a      	subs	r2, r1, #1
 8009794:	2568      	movs	r5, #104	; 0x68
 8009796:	4355      	muls	r5, r2
 8009798:	460e      	mov	r6, r1
 800979a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800979e:	f000 f897 	bl	80098d0 <_malloc_r>
 80097a2:	4604      	mov	r4, r0
 80097a4:	b140      	cbz	r0, 80097b8 <__sfmoreglue+0x28>
 80097a6:	2100      	movs	r1, #0
 80097a8:	e9c0 1600 	strd	r1, r6, [r0]
 80097ac:	300c      	adds	r0, #12
 80097ae:	60a0      	str	r0, [r4, #8]
 80097b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097b4:	f7ff ffa1 	bl	80096fa <memset>
 80097b8:	4620      	mov	r0, r4
 80097ba:	bd70      	pop	{r4, r5, r6, pc}

080097bc <__sinit>:
 80097bc:	6983      	ldr	r3, [r0, #24]
 80097be:	b510      	push	{r4, lr}
 80097c0:	4604      	mov	r4, r0
 80097c2:	bb33      	cbnz	r3, 8009812 <__sinit+0x56>
 80097c4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80097c8:	6503      	str	r3, [r0, #80]	; 0x50
 80097ca:	4b12      	ldr	r3, [pc, #72]	; (8009814 <__sinit+0x58>)
 80097cc:	4a12      	ldr	r2, [pc, #72]	; (8009818 <__sinit+0x5c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6282      	str	r2, [r0, #40]	; 0x28
 80097d2:	4298      	cmp	r0, r3
 80097d4:	bf04      	itt	eq
 80097d6:	2301      	moveq	r3, #1
 80097d8:	6183      	streq	r3, [r0, #24]
 80097da:	f000 f81f 	bl	800981c <__sfp>
 80097de:	6060      	str	r0, [r4, #4]
 80097e0:	4620      	mov	r0, r4
 80097e2:	f000 f81b 	bl	800981c <__sfp>
 80097e6:	60a0      	str	r0, [r4, #8]
 80097e8:	4620      	mov	r0, r4
 80097ea:	f000 f817 	bl	800981c <__sfp>
 80097ee:	2200      	movs	r2, #0
 80097f0:	60e0      	str	r0, [r4, #12]
 80097f2:	2104      	movs	r1, #4
 80097f4:	6860      	ldr	r0, [r4, #4]
 80097f6:	f7ff ffa1 	bl	800973c <std>
 80097fa:	2201      	movs	r2, #1
 80097fc:	2109      	movs	r1, #9
 80097fe:	68a0      	ldr	r0, [r4, #8]
 8009800:	f7ff ff9c 	bl	800973c <std>
 8009804:	2202      	movs	r2, #2
 8009806:	2112      	movs	r1, #18
 8009808:	68e0      	ldr	r0, [r4, #12]
 800980a:	f7ff ff97 	bl	800973c <std>
 800980e:	2301      	movs	r3, #1
 8009810:	61a3      	str	r3, [r4, #24]
 8009812:	bd10      	pop	{r4, pc}
 8009814:	0800a63c 	.word	0x0800a63c
 8009818:	08009785 	.word	0x08009785

0800981c <__sfp>:
 800981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981e:	4b1b      	ldr	r3, [pc, #108]	; (800988c <__sfp+0x70>)
 8009820:	681e      	ldr	r6, [r3, #0]
 8009822:	69b3      	ldr	r3, [r6, #24]
 8009824:	4607      	mov	r7, r0
 8009826:	b913      	cbnz	r3, 800982e <__sfp+0x12>
 8009828:	4630      	mov	r0, r6
 800982a:	f7ff ffc7 	bl	80097bc <__sinit>
 800982e:	3648      	adds	r6, #72	; 0x48
 8009830:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009834:	3b01      	subs	r3, #1
 8009836:	d503      	bpl.n	8009840 <__sfp+0x24>
 8009838:	6833      	ldr	r3, [r6, #0]
 800983a:	b133      	cbz	r3, 800984a <__sfp+0x2e>
 800983c:	6836      	ldr	r6, [r6, #0]
 800983e:	e7f7      	b.n	8009830 <__sfp+0x14>
 8009840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009844:	b16d      	cbz	r5, 8009862 <__sfp+0x46>
 8009846:	3468      	adds	r4, #104	; 0x68
 8009848:	e7f4      	b.n	8009834 <__sfp+0x18>
 800984a:	2104      	movs	r1, #4
 800984c:	4638      	mov	r0, r7
 800984e:	f7ff ff9f 	bl	8009790 <__sfmoreglue>
 8009852:	6030      	str	r0, [r6, #0]
 8009854:	2800      	cmp	r0, #0
 8009856:	d1f1      	bne.n	800983c <__sfp+0x20>
 8009858:	230c      	movs	r3, #12
 800985a:	603b      	str	r3, [r7, #0]
 800985c:	4604      	mov	r4, r0
 800985e:	4620      	mov	r0, r4
 8009860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009862:	4b0b      	ldr	r3, [pc, #44]	; (8009890 <__sfp+0x74>)
 8009864:	6665      	str	r5, [r4, #100]	; 0x64
 8009866:	e9c4 5500 	strd	r5, r5, [r4]
 800986a:	60a5      	str	r5, [r4, #8]
 800986c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009870:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009874:	2208      	movs	r2, #8
 8009876:	4629      	mov	r1, r5
 8009878:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800987c:	f7ff ff3d 	bl	80096fa <memset>
 8009880:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009884:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009888:	e7e9      	b.n	800985e <__sfp+0x42>
 800988a:	bf00      	nop
 800988c:	0800a63c 	.word	0x0800a63c
 8009890:	ffff0001 	.word	0xffff0001

08009894 <_fwalk_reent>:
 8009894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009898:	4680      	mov	r8, r0
 800989a:	4689      	mov	r9, r1
 800989c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80098a0:	2600      	movs	r6, #0
 80098a2:	b914      	cbnz	r4, 80098aa <_fwalk_reent+0x16>
 80098a4:	4630      	mov	r0, r6
 80098a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80098ae:	3f01      	subs	r7, #1
 80098b0:	d501      	bpl.n	80098b6 <_fwalk_reent+0x22>
 80098b2:	6824      	ldr	r4, [r4, #0]
 80098b4:	e7f5      	b.n	80098a2 <_fwalk_reent+0xe>
 80098b6:	89ab      	ldrh	r3, [r5, #12]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d907      	bls.n	80098cc <_fwalk_reent+0x38>
 80098bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098c0:	3301      	adds	r3, #1
 80098c2:	d003      	beq.n	80098cc <_fwalk_reent+0x38>
 80098c4:	4629      	mov	r1, r5
 80098c6:	4640      	mov	r0, r8
 80098c8:	47c8      	blx	r9
 80098ca:	4306      	orrs	r6, r0
 80098cc:	3568      	adds	r5, #104	; 0x68
 80098ce:	e7ee      	b.n	80098ae <_fwalk_reent+0x1a>

080098d0 <_malloc_r>:
 80098d0:	b570      	push	{r4, r5, r6, lr}
 80098d2:	1ccd      	adds	r5, r1, #3
 80098d4:	f025 0503 	bic.w	r5, r5, #3
 80098d8:	3508      	adds	r5, #8
 80098da:	2d0c      	cmp	r5, #12
 80098dc:	bf38      	it	cc
 80098de:	250c      	movcc	r5, #12
 80098e0:	2d00      	cmp	r5, #0
 80098e2:	4606      	mov	r6, r0
 80098e4:	db01      	blt.n	80098ea <_malloc_r+0x1a>
 80098e6:	42a9      	cmp	r1, r5
 80098e8:	d903      	bls.n	80098f2 <_malloc_r+0x22>
 80098ea:	230c      	movs	r3, #12
 80098ec:	6033      	str	r3, [r6, #0]
 80098ee:	2000      	movs	r0, #0
 80098f0:	bd70      	pop	{r4, r5, r6, pc}
 80098f2:	f000 fd6b 	bl	800a3cc <__malloc_lock>
 80098f6:	4a21      	ldr	r2, [pc, #132]	; (800997c <_malloc_r+0xac>)
 80098f8:	6814      	ldr	r4, [r2, #0]
 80098fa:	4621      	mov	r1, r4
 80098fc:	b991      	cbnz	r1, 8009924 <_malloc_r+0x54>
 80098fe:	4c20      	ldr	r4, [pc, #128]	; (8009980 <_malloc_r+0xb0>)
 8009900:	6823      	ldr	r3, [r4, #0]
 8009902:	b91b      	cbnz	r3, 800990c <_malloc_r+0x3c>
 8009904:	4630      	mov	r0, r6
 8009906:	f000 fb05 	bl	8009f14 <_sbrk_r>
 800990a:	6020      	str	r0, [r4, #0]
 800990c:	4629      	mov	r1, r5
 800990e:	4630      	mov	r0, r6
 8009910:	f000 fb00 	bl	8009f14 <_sbrk_r>
 8009914:	1c43      	adds	r3, r0, #1
 8009916:	d124      	bne.n	8009962 <_malloc_r+0x92>
 8009918:	230c      	movs	r3, #12
 800991a:	6033      	str	r3, [r6, #0]
 800991c:	4630      	mov	r0, r6
 800991e:	f000 fd56 	bl	800a3ce <__malloc_unlock>
 8009922:	e7e4      	b.n	80098ee <_malloc_r+0x1e>
 8009924:	680b      	ldr	r3, [r1, #0]
 8009926:	1b5b      	subs	r3, r3, r5
 8009928:	d418      	bmi.n	800995c <_malloc_r+0x8c>
 800992a:	2b0b      	cmp	r3, #11
 800992c:	d90f      	bls.n	800994e <_malloc_r+0x7e>
 800992e:	600b      	str	r3, [r1, #0]
 8009930:	50cd      	str	r5, [r1, r3]
 8009932:	18cc      	adds	r4, r1, r3
 8009934:	4630      	mov	r0, r6
 8009936:	f000 fd4a 	bl	800a3ce <__malloc_unlock>
 800993a:	f104 000b 	add.w	r0, r4, #11
 800993e:	1d23      	adds	r3, r4, #4
 8009940:	f020 0007 	bic.w	r0, r0, #7
 8009944:	1ac3      	subs	r3, r0, r3
 8009946:	d0d3      	beq.n	80098f0 <_malloc_r+0x20>
 8009948:	425a      	negs	r2, r3
 800994a:	50e2      	str	r2, [r4, r3]
 800994c:	e7d0      	b.n	80098f0 <_malloc_r+0x20>
 800994e:	428c      	cmp	r4, r1
 8009950:	684b      	ldr	r3, [r1, #4]
 8009952:	bf16      	itet	ne
 8009954:	6063      	strne	r3, [r4, #4]
 8009956:	6013      	streq	r3, [r2, #0]
 8009958:	460c      	movne	r4, r1
 800995a:	e7eb      	b.n	8009934 <_malloc_r+0x64>
 800995c:	460c      	mov	r4, r1
 800995e:	6849      	ldr	r1, [r1, #4]
 8009960:	e7cc      	b.n	80098fc <_malloc_r+0x2c>
 8009962:	1cc4      	adds	r4, r0, #3
 8009964:	f024 0403 	bic.w	r4, r4, #3
 8009968:	42a0      	cmp	r0, r4
 800996a:	d005      	beq.n	8009978 <_malloc_r+0xa8>
 800996c:	1a21      	subs	r1, r4, r0
 800996e:	4630      	mov	r0, r6
 8009970:	f000 fad0 	bl	8009f14 <_sbrk_r>
 8009974:	3001      	adds	r0, #1
 8009976:	d0cf      	beq.n	8009918 <_malloc_r+0x48>
 8009978:	6025      	str	r5, [r4, #0]
 800997a:	e7db      	b.n	8009934 <_malloc_r+0x64>
 800997c:	20006708 	.word	0x20006708
 8009980:	2000670c 	.word	0x2000670c

08009984 <__sfputc_r>:
 8009984:	6893      	ldr	r3, [r2, #8]
 8009986:	3b01      	subs	r3, #1
 8009988:	2b00      	cmp	r3, #0
 800998a:	b410      	push	{r4}
 800998c:	6093      	str	r3, [r2, #8]
 800998e:	da08      	bge.n	80099a2 <__sfputc_r+0x1e>
 8009990:	6994      	ldr	r4, [r2, #24]
 8009992:	42a3      	cmp	r3, r4
 8009994:	db01      	blt.n	800999a <__sfputc_r+0x16>
 8009996:	290a      	cmp	r1, #10
 8009998:	d103      	bne.n	80099a2 <__sfputc_r+0x1e>
 800999a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800999e:	f000 bb0d 	b.w	8009fbc <__swbuf_r>
 80099a2:	6813      	ldr	r3, [r2, #0]
 80099a4:	1c58      	adds	r0, r3, #1
 80099a6:	6010      	str	r0, [r2, #0]
 80099a8:	7019      	strb	r1, [r3, #0]
 80099aa:	4608      	mov	r0, r1
 80099ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <__sfputs_r>:
 80099b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b4:	4606      	mov	r6, r0
 80099b6:	460f      	mov	r7, r1
 80099b8:	4614      	mov	r4, r2
 80099ba:	18d5      	adds	r5, r2, r3
 80099bc:	42ac      	cmp	r4, r5
 80099be:	d101      	bne.n	80099c4 <__sfputs_r+0x12>
 80099c0:	2000      	movs	r0, #0
 80099c2:	e007      	b.n	80099d4 <__sfputs_r+0x22>
 80099c4:	463a      	mov	r2, r7
 80099c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ca:	4630      	mov	r0, r6
 80099cc:	f7ff ffda 	bl	8009984 <__sfputc_r>
 80099d0:	1c43      	adds	r3, r0, #1
 80099d2:	d1f3      	bne.n	80099bc <__sfputs_r+0xa>
 80099d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099d8 <_vfiprintf_r>:
 80099d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099dc:	460c      	mov	r4, r1
 80099de:	b09d      	sub	sp, #116	; 0x74
 80099e0:	4617      	mov	r7, r2
 80099e2:	461d      	mov	r5, r3
 80099e4:	4606      	mov	r6, r0
 80099e6:	b118      	cbz	r0, 80099f0 <_vfiprintf_r+0x18>
 80099e8:	6983      	ldr	r3, [r0, #24]
 80099ea:	b90b      	cbnz	r3, 80099f0 <_vfiprintf_r+0x18>
 80099ec:	f7ff fee6 	bl	80097bc <__sinit>
 80099f0:	4b7c      	ldr	r3, [pc, #496]	; (8009be4 <_vfiprintf_r+0x20c>)
 80099f2:	429c      	cmp	r4, r3
 80099f4:	d158      	bne.n	8009aa8 <_vfiprintf_r+0xd0>
 80099f6:	6874      	ldr	r4, [r6, #4]
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	0718      	lsls	r0, r3, #28
 80099fc:	d55e      	bpl.n	8009abc <_vfiprintf_r+0xe4>
 80099fe:	6923      	ldr	r3, [r4, #16]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d05b      	beq.n	8009abc <_vfiprintf_r+0xe4>
 8009a04:	2300      	movs	r3, #0
 8009a06:	9309      	str	r3, [sp, #36]	; 0x24
 8009a08:	2320      	movs	r3, #32
 8009a0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a0e:	2330      	movs	r3, #48	; 0x30
 8009a10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a14:	9503      	str	r5, [sp, #12]
 8009a16:	f04f 0b01 	mov.w	fp, #1
 8009a1a:	46b8      	mov	r8, r7
 8009a1c:	4645      	mov	r5, r8
 8009a1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009a22:	b10b      	cbz	r3, 8009a28 <_vfiprintf_r+0x50>
 8009a24:	2b25      	cmp	r3, #37	; 0x25
 8009a26:	d154      	bne.n	8009ad2 <_vfiprintf_r+0xfa>
 8009a28:	ebb8 0a07 	subs.w	sl, r8, r7
 8009a2c:	d00b      	beq.n	8009a46 <_vfiprintf_r+0x6e>
 8009a2e:	4653      	mov	r3, sl
 8009a30:	463a      	mov	r2, r7
 8009a32:	4621      	mov	r1, r4
 8009a34:	4630      	mov	r0, r6
 8009a36:	f7ff ffbc 	bl	80099b2 <__sfputs_r>
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	f000 80c2 	beq.w	8009bc4 <_vfiprintf_r+0x1ec>
 8009a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a42:	4453      	add	r3, sl
 8009a44:	9309      	str	r3, [sp, #36]	; 0x24
 8009a46:	f898 3000 	ldrb.w	r3, [r8]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 80ba 	beq.w	8009bc4 <_vfiprintf_r+0x1ec>
 8009a50:	2300      	movs	r3, #0
 8009a52:	f04f 32ff 	mov.w	r2, #4294967295
 8009a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a5a:	9304      	str	r3, [sp, #16]
 8009a5c:	9307      	str	r3, [sp, #28]
 8009a5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a62:	931a      	str	r3, [sp, #104]	; 0x68
 8009a64:	46a8      	mov	r8, r5
 8009a66:	2205      	movs	r2, #5
 8009a68:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009a6c:	485e      	ldr	r0, [pc, #376]	; (8009be8 <_vfiprintf_r+0x210>)
 8009a6e:	f7f6 fbb7 	bl	80001e0 <memchr>
 8009a72:	9b04      	ldr	r3, [sp, #16]
 8009a74:	bb78      	cbnz	r0, 8009ad6 <_vfiprintf_r+0xfe>
 8009a76:	06d9      	lsls	r1, r3, #27
 8009a78:	bf44      	itt	mi
 8009a7a:	2220      	movmi	r2, #32
 8009a7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a80:	071a      	lsls	r2, r3, #28
 8009a82:	bf44      	itt	mi
 8009a84:	222b      	movmi	r2, #43	; 0x2b
 8009a86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a8a:	782a      	ldrb	r2, [r5, #0]
 8009a8c:	2a2a      	cmp	r2, #42	; 0x2a
 8009a8e:	d02a      	beq.n	8009ae6 <_vfiprintf_r+0x10e>
 8009a90:	9a07      	ldr	r2, [sp, #28]
 8009a92:	46a8      	mov	r8, r5
 8009a94:	2000      	movs	r0, #0
 8009a96:	250a      	movs	r5, #10
 8009a98:	4641      	mov	r1, r8
 8009a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a9e:	3b30      	subs	r3, #48	; 0x30
 8009aa0:	2b09      	cmp	r3, #9
 8009aa2:	d969      	bls.n	8009b78 <_vfiprintf_r+0x1a0>
 8009aa4:	b360      	cbz	r0, 8009b00 <_vfiprintf_r+0x128>
 8009aa6:	e024      	b.n	8009af2 <_vfiprintf_r+0x11a>
 8009aa8:	4b50      	ldr	r3, [pc, #320]	; (8009bec <_vfiprintf_r+0x214>)
 8009aaa:	429c      	cmp	r4, r3
 8009aac:	d101      	bne.n	8009ab2 <_vfiprintf_r+0xda>
 8009aae:	68b4      	ldr	r4, [r6, #8]
 8009ab0:	e7a2      	b.n	80099f8 <_vfiprintf_r+0x20>
 8009ab2:	4b4f      	ldr	r3, [pc, #316]	; (8009bf0 <_vfiprintf_r+0x218>)
 8009ab4:	429c      	cmp	r4, r3
 8009ab6:	bf08      	it	eq
 8009ab8:	68f4      	ldreq	r4, [r6, #12]
 8009aba:	e79d      	b.n	80099f8 <_vfiprintf_r+0x20>
 8009abc:	4621      	mov	r1, r4
 8009abe:	4630      	mov	r0, r6
 8009ac0:	f000 fae0 	bl	800a084 <__swsetup_r>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d09d      	beq.n	8009a04 <_vfiprintf_r+0x2c>
 8009ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8009acc:	b01d      	add	sp, #116	; 0x74
 8009ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad2:	46a8      	mov	r8, r5
 8009ad4:	e7a2      	b.n	8009a1c <_vfiprintf_r+0x44>
 8009ad6:	4a44      	ldr	r2, [pc, #272]	; (8009be8 <_vfiprintf_r+0x210>)
 8009ad8:	1a80      	subs	r0, r0, r2
 8009ada:	fa0b f000 	lsl.w	r0, fp, r0
 8009ade:	4318      	orrs	r0, r3
 8009ae0:	9004      	str	r0, [sp, #16]
 8009ae2:	4645      	mov	r5, r8
 8009ae4:	e7be      	b.n	8009a64 <_vfiprintf_r+0x8c>
 8009ae6:	9a03      	ldr	r2, [sp, #12]
 8009ae8:	1d11      	adds	r1, r2, #4
 8009aea:	6812      	ldr	r2, [r2, #0]
 8009aec:	9103      	str	r1, [sp, #12]
 8009aee:	2a00      	cmp	r2, #0
 8009af0:	db01      	blt.n	8009af6 <_vfiprintf_r+0x11e>
 8009af2:	9207      	str	r2, [sp, #28]
 8009af4:	e004      	b.n	8009b00 <_vfiprintf_r+0x128>
 8009af6:	4252      	negs	r2, r2
 8009af8:	f043 0302 	orr.w	r3, r3, #2
 8009afc:	9207      	str	r2, [sp, #28]
 8009afe:	9304      	str	r3, [sp, #16]
 8009b00:	f898 3000 	ldrb.w	r3, [r8]
 8009b04:	2b2e      	cmp	r3, #46	; 0x2e
 8009b06:	d10e      	bne.n	8009b26 <_vfiprintf_r+0x14e>
 8009b08:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b0e:	d138      	bne.n	8009b82 <_vfiprintf_r+0x1aa>
 8009b10:	9b03      	ldr	r3, [sp, #12]
 8009b12:	1d1a      	adds	r2, r3, #4
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	9203      	str	r2, [sp, #12]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	bfb8      	it	lt
 8009b1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b20:	f108 0802 	add.w	r8, r8, #2
 8009b24:	9305      	str	r3, [sp, #20]
 8009b26:	4d33      	ldr	r5, [pc, #204]	; (8009bf4 <_vfiprintf_r+0x21c>)
 8009b28:	f898 1000 	ldrb.w	r1, [r8]
 8009b2c:	2203      	movs	r2, #3
 8009b2e:	4628      	mov	r0, r5
 8009b30:	f7f6 fb56 	bl	80001e0 <memchr>
 8009b34:	b140      	cbz	r0, 8009b48 <_vfiprintf_r+0x170>
 8009b36:	2340      	movs	r3, #64	; 0x40
 8009b38:	1b40      	subs	r0, r0, r5
 8009b3a:	fa03 f000 	lsl.w	r0, r3, r0
 8009b3e:	9b04      	ldr	r3, [sp, #16]
 8009b40:	4303      	orrs	r3, r0
 8009b42:	f108 0801 	add.w	r8, r8, #1
 8009b46:	9304      	str	r3, [sp, #16]
 8009b48:	f898 1000 	ldrb.w	r1, [r8]
 8009b4c:	482a      	ldr	r0, [pc, #168]	; (8009bf8 <_vfiprintf_r+0x220>)
 8009b4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b52:	2206      	movs	r2, #6
 8009b54:	f108 0701 	add.w	r7, r8, #1
 8009b58:	f7f6 fb42 	bl	80001e0 <memchr>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	d037      	beq.n	8009bd0 <_vfiprintf_r+0x1f8>
 8009b60:	4b26      	ldr	r3, [pc, #152]	; (8009bfc <_vfiprintf_r+0x224>)
 8009b62:	bb1b      	cbnz	r3, 8009bac <_vfiprintf_r+0x1d4>
 8009b64:	9b03      	ldr	r3, [sp, #12]
 8009b66:	3307      	adds	r3, #7
 8009b68:	f023 0307 	bic.w	r3, r3, #7
 8009b6c:	3308      	adds	r3, #8
 8009b6e:	9303      	str	r3, [sp, #12]
 8009b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b72:	444b      	add	r3, r9
 8009b74:	9309      	str	r3, [sp, #36]	; 0x24
 8009b76:	e750      	b.n	8009a1a <_vfiprintf_r+0x42>
 8009b78:	fb05 3202 	mla	r2, r5, r2, r3
 8009b7c:	2001      	movs	r0, #1
 8009b7e:	4688      	mov	r8, r1
 8009b80:	e78a      	b.n	8009a98 <_vfiprintf_r+0xc0>
 8009b82:	2300      	movs	r3, #0
 8009b84:	f108 0801 	add.w	r8, r8, #1
 8009b88:	9305      	str	r3, [sp, #20]
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	250a      	movs	r5, #10
 8009b8e:	4640      	mov	r0, r8
 8009b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b94:	3a30      	subs	r2, #48	; 0x30
 8009b96:	2a09      	cmp	r2, #9
 8009b98:	d903      	bls.n	8009ba2 <_vfiprintf_r+0x1ca>
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0c3      	beq.n	8009b26 <_vfiprintf_r+0x14e>
 8009b9e:	9105      	str	r1, [sp, #20]
 8009ba0:	e7c1      	b.n	8009b26 <_vfiprintf_r+0x14e>
 8009ba2:	fb05 2101 	mla	r1, r5, r1, r2
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4680      	mov	r8, r0
 8009baa:	e7f0      	b.n	8009b8e <_vfiprintf_r+0x1b6>
 8009bac:	ab03      	add	r3, sp, #12
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	4b13      	ldr	r3, [pc, #76]	; (8009c00 <_vfiprintf_r+0x228>)
 8009bb4:	a904      	add	r1, sp, #16
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	f3af 8000 	nop.w
 8009bbc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009bc0:	4681      	mov	r9, r0
 8009bc2:	d1d5      	bne.n	8009b70 <_vfiprintf_r+0x198>
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	065b      	lsls	r3, r3, #25
 8009bc8:	f53f af7e 	bmi.w	8009ac8 <_vfiprintf_r+0xf0>
 8009bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bce:	e77d      	b.n	8009acc <_vfiprintf_r+0xf4>
 8009bd0:	ab03      	add	r3, sp, #12
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	4622      	mov	r2, r4
 8009bd6:	4b0a      	ldr	r3, [pc, #40]	; (8009c00 <_vfiprintf_r+0x228>)
 8009bd8:	a904      	add	r1, sp, #16
 8009bda:	4630      	mov	r0, r6
 8009bdc:	f000 f888 	bl	8009cf0 <_printf_i>
 8009be0:	e7ec      	b.n	8009bbc <_vfiprintf_r+0x1e4>
 8009be2:	bf00      	nop
 8009be4:	0800a660 	.word	0x0800a660
 8009be8:	0800a6a0 	.word	0x0800a6a0
 8009bec:	0800a680 	.word	0x0800a680
 8009bf0:	0800a640 	.word	0x0800a640
 8009bf4:	0800a6a6 	.word	0x0800a6a6
 8009bf8:	0800a6aa 	.word	0x0800a6aa
 8009bfc:	00000000 	.word	0x00000000
 8009c00:	080099b3 	.word	0x080099b3

08009c04 <_printf_common>:
 8009c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c08:	4691      	mov	r9, r2
 8009c0a:	461f      	mov	r7, r3
 8009c0c:	688a      	ldr	r2, [r1, #8]
 8009c0e:	690b      	ldr	r3, [r1, #16]
 8009c10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c14:	4293      	cmp	r3, r2
 8009c16:	bfb8      	it	lt
 8009c18:	4613      	movlt	r3, r2
 8009c1a:	f8c9 3000 	str.w	r3, [r9]
 8009c1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c22:	4606      	mov	r6, r0
 8009c24:	460c      	mov	r4, r1
 8009c26:	b112      	cbz	r2, 8009c2e <_printf_common+0x2a>
 8009c28:	3301      	adds	r3, #1
 8009c2a:	f8c9 3000 	str.w	r3, [r9]
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	0699      	lsls	r1, r3, #26
 8009c32:	bf42      	ittt	mi
 8009c34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009c38:	3302      	addmi	r3, #2
 8009c3a:	f8c9 3000 	strmi.w	r3, [r9]
 8009c3e:	6825      	ldr	r5, [r4, #0]
 8009c40:	f015 0506 	ands.w	r5, r5, #6
 8009c44:	d107      	bne.n	8009c56 <_printf_common+0x52>
 8009c46:	f104 0a19 	add.w	sl, r4, #25
 8009c4a:	68e3      	ldr	r3, [r4, #12]
 8009c4c:	f8d9 2000 	ldr.w	r2, [r9]
 8009c50:	1a9b      	subs	r3, r3, r2
 8009c52:	42ab      	cmp	r3, r5
 8009c54:	dc28      	bgt.n	8009ca8 <_printf_common+0xa4>
 8009c56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009c5a:	6822      	ldr	r2, [r4, #0]
 8009c5c:	3300      	adds	r3, #0
 8009c5e:	bf18      	it	ne
 8009c60:	2301      	movne	r3, #1
 8009c62:	0692      	lsls	r2, r2, #26
 8009c64:	d42d      	bmi.n	8009cc2 <_printf_common+0xbe>
 8009c66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c6a:	4639      	mov	r1, r7
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	47c0      	blx	r8
 8009c70:	3001      	adds	r0, #1
 8009c72:	d020      	beq.n	8009cb6 <_printf_common+0xb2>
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	68e5      	ldr	r5, [r4, #12]
 8009c78:	f8d9 2000 	ldr.w	r2, [r9]
 8009c7c:	f003 0306 	and.w	r3, r3, #6
 8009c80:	2b04      	cmp	r3, #4
 8009c82:	bf08      	it	eq
 8009c84:	1aad      	subeq	r5, r5, r2
 8009c86:	68a3      	ldr	r3, [r4, #8]
 8009c88:	6922      	ldr	r2, [r4, #16]
 8009c8a:	bf0c      	ite	eq
 8009c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c90:	2500      	movne	r5, #0
 8009c92:	4293      	cmp	r3, r2
 8009c94:	bfc4      	itt	gt
 8009c96:	1a9b      	subgt	r3, r3, r2
 8009c98:	18ed      	addgt	r5, r5, r3
 8009c9a:	f04f 0900 	mov.w	r9, #0
 8009c9e:	341a      	adds	r4, #26
 8009ca0:	454d      	cmp	r5, r9
 8009ca2:	d11a      	bne.n	8009cda <_printf_common+0xd6>
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	e008      	b.n	8009cba <_printf_common+0xb6>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	4652      	mov	r2, sl
 8009cac:	4639      	mov	r1, r7
 8009cae:	4630      	mov	r0, r6
 8009cb0:	47c0      	blx	r8
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	d103      	bne.n	8009cbe <_printf_common+0xba>
 8009cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cbe:	3501      	adds	r5, #1
 8009cc0:	e7c3      	b.n	8009c4a <_printf_common+0x46>
 8009cc2:	18e1      	adds	r1, r4, r3
 8009cc4:	1c5a      	adds	r2, r3, #1
 8009cc6:	2030      	movs	r0, #48	; 0x30
 8009cc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ccc:	4422      	add	r2, r4
 8009cce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cd6:	3302      	adds	r3, #2
 8009cd8:	e7c5      	b.n	8009c66 <_printf_common+0x62>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	4622      	mov	r2, r4
 8009cde:	4639      	mov	r1, r7
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	47c0      	blx	r8
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d0e6      	beq.n	8009cb6 <_printf_common+0xb2>
 8009ce8:	f109 0901 	add.w	r9, r9, #1
 8009cec:	e7d8      	b.n	8009ca0 <_printf_common+0x9c>
	...

08009cf0 <_printf_i>:
 8009cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cf4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	7e09      	ldrb	r1, [r1, #24]
 8009cfc:	b085      	sub	sp, #20
 8009cfe:	296e      	cmp	r1, #110	; 0x6e
 8009d00:	4617      	mov	r7, r2
 8009d02:	4606      	mov	r6, r0
 8009d04:	4698      	mov	r8, r3
 8009d06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d08:	f000 80b3 	beq.w	8009e72 <_printf_i+0x182>
 8009d0c:	d822      	bhi.n	8009d54 <_printf_i+0x64>
 8009d0e:	2963      	cmp	r1, #99	; 0x63
 8009d10:	d036      	beq.n	8009d80 <_printf_i+0x90>
 8009d12:	d80a      	bhi.n	8009d2a <_printf_i+0x3a>
 8009d14:	2900      	cmp	r1, #0
 8009d16:	f000 80b9 	beq.w	8009e8c <_printf_i+0x19c>
 8009d1a:	2958      	cmp	r1, #88	; 0x58
 8009d1c:	f000 8083 	beq.w	8009e26 <_printf_i+0x136>
 8009d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009d28:	e032      	b.n	8009d90 <_printf_i+0xa0>
 8009d2a:	2964      	cmp	r1, #100	; 0x64
 8009d2c:	d001      	beq.n	8009d32 <_printf_i+0x42>
 8009d2e:	2969      	cmp	r1, #105	; 0x69
 8009d30:	d1f6      	bne.n	8009d20 <_printf_i+0x30>
 8009d32:	6820      	ldr	r0, [r4, #0]
 8009d34:	6813      	ldr	r3, [r2, #0]
 8009d36:	0605      	lsls	r5, r0, #24
 8009d38:	f103 0104 	add.w	r1, r3, #4
 8009d3c:	d52a      	bpl.n	8009d94 <_printf_i+0xa4>
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	6011      	str	r1, [r2, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	da03      	bge.n	8009d4e <_printf_i+0x5e>
 8009d46:	222d      	movs	r2, #45	; 0x2d
 8009d48:	425b      	negs	r3, r3
 8009d4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009d4e:	486f      	ldr	r0, [pc, #444]	; (8009f0c <_printf_i+0x21c>)
 8009d50:	220a      	movs	r2, #10
 8009d52:	e039      	b.n	8009dc8 <_printf_i+0xd8>
 8009d54:	2973      	cmp	r1, #115	; 0x73
 8009d56:	f000 809d 	beq.w	8009e94 <_printf_i+0x1a4>
 8009d5a:	d808      	bhi.n	8009d6e <_printf_i+0x7e>
 8009d5c:	296f      	cmp	r1, #111	; 0x6f
 8009d5e:	d020      	beq.n	8009da2 <_printf_i+0xb2>
 8009d60:	2970      	cmp	r1, #112	; 0x70
 8009d62:	d1dd      	bne.n	8009d20 <_printf_i+0x30>
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	f043 0320 	orr.w	r3, r3, #32
 8009d6a:	6023      	str	r3, [r4, #0]
 8009d6c:	e003      	b.n	8009d76 <_printf_i+0x86>
 8009d6e:	2975      	cmp	r1, #117	; 0x75
 8009d70:	d017      	beq.n	8009da2 <_printf_i+0xb2>
 8009d72:	2978      	cmp	r1, #120	; 0x78
 8009d74:	d1d4      	bne.n	8009d20 <_printf_i+0x30>
 8009d76:	2378      	movs	r3, #120	; 0x78
 8009d78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d7c:	4864      	ldr	r0, [pc, #400]	; (8009f10 <_printf_i+0x220>)
 8009d7e:	e055      	b.n	8009e2c <_printf_i+0x13c>
 8009d80:	6813      	ldr	r3, [r2, #0]
 8009d82:	1d19      	adds	r1, r3, #4
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6011      	str	r1, [r2, #0]
 8009d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d90:	2301      	movs	r3, #1
 8009d92:	e08c      	b.n	8009eae <_printf_i+0x1be>
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6011      	str	r1, [r2, #0]
 8009d98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d9c:	bf18      	it	ne
 8009d9e:	b21b      	sxthne	r3, r3
 8009da0:	e7cf      	b.n	8009d42 <_printf_i+0x52>
 8009da2:	6813      	ldr	r3, [r2, #0]
 8009da4:	6825      	ldr	r5, [r4, #0]
 8009da6:	1d18      	adds	r0, r3, #4
 8009da8:	6010      	str	r0, [r2, #0]
 8009daa:	0628      	lsls	r0, r5, #24
 8009dac:	d501      	bpl.n	8009db2 <_printf_i+0xc2>
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	e002      	b.n	8009db8 <_printf_i+0xc8>
 8009db2:	0668      	lsls	r0, r5, #25
 8009db4:	d5fb      	bpl.n	8009dae <_printf_i+0xbe>
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	4854      	ldr	r0, [pc, #336]	; (8009f0c <_printf_i+0x21c>)
 8009dba:	296f      	cmp	r1, #111	; 0x6f
 8009dbc:	bf14      	ite	ne
 8009dbe:	220a      	movne	r2, #10
 8009dc0:	2208      	moveq	r2, #8
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dc8:	6865      	ldr	r5, [r4, #4]
 8009dca:	60a5      	str	r5, [r4, #8]
 8009dcc:	2d00      	cmp	r5, #0
 8009dce:	f2c0 8095 	blt.w	8009efc <_printf_i+0x20c>
 8009dd2:	6821      	ldr	r1, [r4, #0]
 8009dd4:	f021 0104 	bic.w	r1, r1, #4
 8009dd8:	6021      	str	r1, [r4, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d13d      	bne.n	8009e5a <_printf_i+0x16a>
 8009dde:	2d00      	cmp	r5, #0
 8009de0:	f040 808e 	bne.w	8009f00 <_printf_i+0x210>
 8009de4:	4665      	mov	r5, ip
 8009de6:	2a08      	cmp	r2, #8
 8009de8:	d10b      	bne.n	8009e02 <_printf_i+0x112>
 8009dea:	6823      	ldr	r3, [r4, #0]
 8009dec:	07db      	lsls	r3, r3, #31
 8009dee:	d508      	bpl.n	8009e02 <_printf_i+0x112>
 8009df0:	6923      	ldr	r3, [r4, #16]
 8009df2:	6862      	ldr	r2, [r4, #4]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	bfde      	ittt	le
 8009df8:	2330      	movle	r3, #48	; 0x30
 8009dfa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dfe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e02:	ebac 0305 	sub.w	r3, ip, r5
 8009e06:	6123      	str	r3, [r4, #16]
 8009e08:	f8cd 8000 	str.w	r8, [sp]
 8009e0c:	463b      	mov	r3, r7
 8009e0e:	aa03      	add	r2, sp, #12
 8009e10:	4621      	mov	r1, r4
 8009e12:	4630      	mov	r0, r6
 8009e14:	f7ff fef6 	bl	8009c04 <_printf_common>
 8009e18:	3001      	adds	r0, #1
 8009e1a:	d14d      	bne.n	8009eb8 <_printf_i+0x1c8>
 8009e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e20:	b005      	add	sp, #20
 8009e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e26:	4839      	ldr	r0, [pc, #228]	; (8009f0c <_printf_i+0x21c>)
 8009e28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009e2c:	6813      	ldr	r3, [r2, #0]
 8009e2e:	6821      	ldr	r1, [r4, #0]
 8009e30:	1d1d      	adds	r5, r3, #4
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6015      	str	r5, [r2, #0]
 8009e36:	060a      	lsls	r2, r1, #24
 8009e38:	d50b      	bpl.n	8009e52 <_printf_i+0x162>
 8009e3a:	07ca      	lsls	r2, r1, #31
 8009e3c:	bf44      	itt	mi
 8009e3e:	f041 0120 	orrmi.w	r1, r1, #32
 8009e42:	6021      	strmi	r1, [r4, #0]
 8009e44:	b91b      	cbnz	r3, 8009e4e <_printf_i+0x15e>
 8009e46:	6822      	ldr	r2, [r4, #0]
 8009e48:	f022 0220 	bic.w	r2, r2, #32
 8009e4c:	6022      	str	r2, [r4, #0]
 8009e4e:	2210      	movs	r2, #16
 8009e50:	e7b7      	b.n	8009dc2 <_printf_i+0xd2>
 8009e52:	064d      	lsls	r5, r1, #25
 8009e54:	bf48      	it	mi
 8009e56:	b29b      	uxthmi	r3, r3
 8009e58:	e7ef      	b.n	8009e3a <_printf_i+0x14a>
 8009e5a:	4665      	mov	r5, ip
 8009e5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e60:	fb02 3311 	mls	r3, r2, r1, r3
 8009e64:	5cc3      	ldrb	r3, [r0, r3]
 8009e66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	2900      	cmp	r1, #0
 8009e6e:	d1f5      	bne.n	8009e5c <_printf_i+0x16c>
 8009e70:	e7b9      	b.n	8009de6 <_printf_i+0xf6>
 8009e72:	6813      	ldr	r3, [r2, #0]
 8009e74:	6825      	ldr	r5, [r4, #0]
 8009e76:	6961      	ldr	r1, [r4, #20]
 8009e78:	1d18      	adds	r0, r3, #4
 8009e7a:	6010      	str	r0, [r2, #0]
 8009e7c:	0628      	lsls	r0, r5, #24
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	d501      	bpl.n	8009e86 <_printf_i+0x196>
 8009e82:	6019      	str	r1, [r3, #0]
 8009e84:	e002      	b.n	8009e8c <_printf_i+0x19c>
 8009e86:	066a      	lsls	r2, r5, #25
 8009e88:	d5fb      	bpl.n	8009e82 <_printf_i+0x192>
 8009e8a:	8019      	strh	r1, [r3, #0]
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	6123      	str	r3, [r4, #16]
 8009e90:	4665      	mov	r5, ip
 8009e92:	e7b9      	b.n	8009e08 <_printf_i+0x118>
 8009e94:	6813      	ldr	r3, [r2, #0]
 8009e96:	1d19      	adds	r1, r3, #4
 8009e98:	6011      	str	r1, [r2, #0]
 8009e9a:	681d      	ldr	r5, [r3, #0]
 8009e9c:	6862      	ldr	r2, [r4, #4]
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	f7f6 f99d 	bl	80001e0 <memchr>
 8009ea6:	b108      	cbz	r0, 8009eac <_printf_i+0x1bc>
 8009ea8:	1b40      	subs	r0, r0, r5
 8009eaa:	6060      	str	r0, [r4, #4]
 8009eac:	6863      	ldr	r3, [r4, #4]
 8009eae:	6123      	str	r3, [r4, #16]
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eb6:	e7a7      	b.n	8009e08 <_printf_i+0x118>
 8009eb8:	6923      	ldr	r3, [r4, #16]
 8009eba:	462a      	mov	r2, r5
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	47c0      	blx	r8
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	d0aa      	beq.n	8009e1c <_printf_i+0x12c>
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	079b      	lsls	r3, r3, #30
 8009eca:	d413      	bmi.n	8009ef4 <_printf_i+0x204>
 8009ecc:	68e0      	ldr	r0, [r4, #12]
 8009ece:	9b03      	ldr	r3, [sp, #12]
 8009ed0:	4298      	cmp	r0, r3
 8009ed2:	bfb8      	it	lt
 8009ed4:	4618      	movlt	r0, r3
 8009ed6:	e7a3      	b.n	8009e20 <_printf_i+0x130>
 8009ed8:	2301      	movs	r3, #1
 8009eda:	464a      	mov	r2, r9
 8009edc:	4639      	mov	r1, r7
 8009ede:	4630      	mov	r0, r6
 8009ee0:	47c0      	blx	r8
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	d09a      	beq.n	8009e1c <_printf_i+0x12c>
 8009ee6:	3501      	adds	r5, #1
 8009ee8:	68e3      	ldr	r3, [r4, #12]
 8009eea:	9a03      	ldr	r2, [sp, #12]
 8009eec:	1a9b      	subs	r3, r3, r2
 8009eee:	42ab      	cmp	r3, r5
 8009ef0:	dcf2      	bgt.n	8009ed8 <_printf_i+0x1e8>
 8009ef2:	e7eb      	b.n	8009ecc <_printf_i+0x1dc>
 8009ef4:	2500      	movs	r5, #0
 8009ef6:	f104 0919 	add.w	r9, r4, #25
 8009efa:	e7f5      	b.n	8009ee8 <_printf_i+0x1f8>
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1ac      	bne.n	8009e5a <_printf_i+0x16a>
 8009f00:	7803      	ldrb	r3, [r0, #0]
 8009f02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f0a:	e76c      	b.n	8009de6 <_printf_i+0xf6>
 8009f0c:	0800a6b1 	.word	0x0800a6b1
 8009f10:	0800a6c2 	.word	0x0800a6c2

08009f14 <_sbrk_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4c06      	ldr	r4, [pc, #24]	; (8009f30 <_sbrk_r+0x1c>)
 8009f18:	2300      	movs	r3, #0
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	6023      	str	r3, [r4, #0]
 8009f20:	f7f7 f816 	bl	8000f50 <_sbrk>
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	d102      	bne.n	8009f2e <_sbrk_r+0x1a>
 8009f28:	6823      	ldr	r3, [r4, #0]
 8009f2a:	b103      	cbz	r3, 8009f2e <_sbrk_r+0x1a>
 8009f2c:	602b      	str	r3, [r5, #0]
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
 8009f30:	2000919c 	.word	0x2000919c

08009f34 <__sread>:
 8009f34:	b510      	push	{r4, lr}
 8009f36:	460c      	mov	r4, r1
 8009f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f3c:	f000 fa96 	bl	800a46c <_read_r>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	bfab      	itete	ge
 8009f44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f46:	89a3      	ldrhlt	r3, [r4, #12]
 8009f48:	181b      	addge	r3, r3, r0
 8009f4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f4e:	bfac      	ite	ge
 8009f50:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f52:	81a3      	strhlt	r3, [r4, #12]
 8009f54:	bd10      	pop	{r4, pc}

08009f56 <__swrite>:
 8009f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5a:	461f      	mov	r7, r3
 8009f5c:	898b      	ldrh	r3, [r1, #12]
 8009f5e:	05db      	lsls	r3, r3, #23
 8009f60:	4605      	mov	r5, r0
 8009f62:	460c      	mov	r4, r1
 8009f64:	4616      	mov	r6, r2
 8009f66:	d505      	bpl.n	8009f74 <__swrite+0x1e>
 8009f68:	2302      	movs	r3, #2
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f70:	f000 f9b6 	bl	800a2e0 <_lseek_r>
 8009f74:	89a3      	ldrh	r3, [r4, #12]
 8009f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f7e:	81a3      	strh	r3, [r4, #12]
 8009f80:	4632      	mov	r2, r6
 8009f82:	463b      	mov	r3, r7
 8009f84:	4628      	mov	r0, r5
 8009f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f8a:	f000 b869 	b.w	800a060 <_write_r>

08009f8e <__sseek>:
 8009f8e:	b510      	push	{r4, lr}
 8009f90:	460c      	mov	r4, r1
 8009f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f96:	f000 f9a3 	bl	800a2e0 <_lseek_r>
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	89a3      	ldrh	r3, [r4, #12]
 8009f9e:	bf15      	itete	ne
 8009fa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009fa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009fa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009faa:	81a3      	strheq	r3, [r4, #12]
 8009fac:	bf18      	it	ne
 8009fae:	81a3      	strhne	r3, [r4, #12]
 8009fb0:	bd10      	pop	{r4, pc}

08009fb2 <__sclose>:
 8009fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb6:	f000 b8d3 	b.w	800a160 <_close_r>
	...

08009fbc <__swbuf_r>:
 8009fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fbe:	460e      	mov	r6, r1
 8009fc0:	4614      	mov	r4, r2
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	b118      	cbz	r0, 8009fce <__swbuf_r+0x12>
 8009fc6:	6983      	ldr	r3, [r0, #24]
 8009fc8:	b90b      	cbnz	r3, 8009fce <__swbuf_r+0x12>
 8009fca:	f7ff fbf7 	bl	80097bc <__sinit>
 8009fce:	4b21      	ldr	r3, [pc, #132]	; (800a054 <__swbuf_r+0x98>)
 8009fd0:	429c      	cmp	r4, r3
 8009fd2:	d12a      	bne.n	800a02a <__swbuf_r+0x6e>
 8009fd4:	686c      	ldr	r4, [r5, #4]
 8009fd6:	69a3      	ldr	r3, [r4, #24]
 8009fd8:	60a3      	str	r3, [r4, #8]
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	071a      	lsls	r2, r3, #28
 8009fde:	d52e      	bpl.n	800a03e <__swbuf_r+0x82>
 8009fe0:	6923      	ldr	r3, [r4, #16]
 8009fe2:	b363      	cbz	r3, 800a03e <__swbuf_r+0x82>
 8009fe4:	6923      	ldr	r3, [r4, #16]
 8009fe6:	6820      	ldr	r0, [r4, #0]
 8009fe8:	1ac0      	subs	r0, r0, r3
 8009fea:	6963      	ldr	r3, [r4, #20]
 8009fec:	b2f6      	uxtb	r6, r6
 8009fee:	4283      	cmp	r3, r0
 8009ff0:	4637      	mov	r7, r6
 8009ff2:	dc04      	bgt.n	8009ffe <__swbuf_r+0x42>
 8009ff4:	4621      	mov	r1, r4
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	f000 f948 	bl	800a28c <_fflush_r>
 8009ffc:	bb28      	cbnz	r0, 800a04a <__swbuf_r+0x8e>
 8009ffe:	68a3      	ldr	r3, [r4, #8]
 800a000:	3b01      	subs	r3, #1
 800a002:	60a3      	str	r3, [r4, #8]
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	1c5a      	adds	r2, r3, #1
 800a008:	6022      	str	r2, [r4, #0]
 800a00a:	701e      	strb	r6, [r3, #0]
 800a00c:	6963      	ldr	r3, [r4, #20]
 800a00e:	3001      	adds	r0, #1
 800a010:	4283      	cmp	r3, r0
 800a012:	d004      	beq.n	800a01e <__swbuf_r+0x62>
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	07db      	lsls	r3, r3, #31
 800a018:	d519      	bpl.n	800a04e <__swbuf_r+0x92>
 800a01a:	2e0a      	cmp	r6, #10
 800a01c:	d117      	bne.n	800a04e <__swbuf_r+0x92>
 800a01e:	4621      	mov	r1, r4
 800a020:	4628      	mov	r0, r5
 800a022:	f000 f933 	bl	800a28c <_fflush_r>
 800a026:	b190      	cbz	r0, 800a04e <__swbuf_r+0x92>
 800a028:	e00f      	b.n	800a04a <__swbuf_r+0x8e>
 800a02a:	4b0b      	ldr	r3, [pc, #44]	; (800a058 <__swbuf_r+0x9c>)
 800a02c:	429c      	cmp	r4, r3
 800a02e:	d101      	bne.n	800a034 <__swbuf_r+0x78>
 800a030:	68ac      	ldr	r4, [r5, #8]
 800a032:	e7d0      	b.n	8009fd6 <__swbuf_r+0x1a>
 800a034:	4b09      	ldr	r3, [pc, #36]	; (800a05c <__swbuf_r+0xa0>)
 800a036:	429c      	cmp	r4, r3
 800a038:	bf08      	it	eq
 800a03a:	68ec      	ldreq	r4, [r5, #12]
 800a03c:	e7cb      	b.n	8009fd6 <__swbuf_r+0x1a>
 800a03e:	4621      	mov	r1, r4
 800a040:	4628      	mov	r0, r5
 800a042:	f000 f81f 	bl	800a084 <__swsetup_r>
 800a046:	2800      	cmp	r0, #0
 800a048:	d0cc      	beq.n	8009fe4 <__swbuf_r+0x28>
 800a04a:	f04f 37ff 	mov.w	r7, #4294967295
 800a04e:	4638      	mov	r0, r7
 800a050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a052:	bf00      	nop
 800a054:	0800a660 	.word	0x0800a660
 800a058:	0800a680 	.word	0x0800a680
 800a05c:	0800a640 	.word	0x0800a640

0800a060 <_write_r>:
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	4c07      	ldr	r4, [pc, #28]	; (800a080 <_write_r+0x20>)
 800a064:	4605      	mov	r5, r0
 800a066:	4608      	mov	r0, r1
 800a068:	4611      	mov	r1, r2
 800a06a:	2200      	movs	r2, #0
 800a06c:	6022      	str	r2, [r4, #0]
 800a06e:	461a      	mov	r2, r3
 800a070:	f7f6 ff1d 	bl	8000eae <_write>
 800a074:	1c43      	adds	r3, r0, #1
 800a076:	d102      	bne.n	800a07e <_write_r+0x1e>
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	b103      	cbz	r3, 800a07e <_write_r+0x1e>
 800a07c:	602b      	str	r3, [r5, #0]
 800a07e:	bd38      	pop	{r3, r4, r5, pc}
 800a080:	2000919c 	.word	0x2000919c

0800a084 <__swsetup_r>:
 800a084:	4b32      	ldr	r3, [pc, #200]	; (800a150 <__swsetup_r+0xcc>)
 800a086:	b570      	push	{r4, r5, r6, lr}
 800a088:	681d      	ldr	r5, [r3, #0]
 800a08a:	4606      	mov	r6, r0
 800a08c:	460c      	mov	r4, r1
 800a08e:	b125      	cbz	r5, 800a09a <__swsetup_r+0x16>
 800a090:	69ab      	ldr	r3, [r5, #24]
 800a092:	b913      	cbnz	r3, 800a09a <__swsetup_r+0x16>
 800a094:	4628      	mov	r0, r5
 800a096:	f7ff fb91 	bl	80097bc <__sinit>
 800a09a:	4b2e      	ldr	r3, [pc, #184]	; (800a154 <__swsetup_r+0xd0>)
 800a09c:	429c      	cmp	r4, r3
 800a09e:	d10f      	bne.n	800a0c0 <__swsetup_r+0x3c>
 800a0a0:	686c      	ldr	r4, [r5, #4]
 800a0a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	0715      	lsls	r5, r2, #28
 800a0aa:	d42c      	bmi.n	800a106 <__swsetup_r+0x82>
 800a0ac:	06d0      	lsls	r0, r2, #27
 800a0ae:	d411      	bmi.n	800a0d4 <__swsetup_r+0x50>
 800a0b0:	2209      	movs	r2, #9
 800a0b2:	6032      	str	r2, [r6, #0]
 800a0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b8:	81a3      	strh	r3, [r4, #12]
 800a0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a0be:	e03e      	b.n	800a13e <__swsetup_r+0xba>
 800a0c0:	4b25      	ldr	r3, [pc, #148]	; (800a158 <__swsetup_r+0xd4>)
 800a0c2:	429c      	cmp	r4, r3
 800a0c4:	d101      	bne.n	800a0ca <__swsetup_r+0x46>
 800a0c6:	68ac      	ldr	r4, [r5, #8]
 800a0c8:	e7eb      	b.n	800a0a2 <__swsetup_r+0x1e>
 800a0ca:	4b24      	ldr	r3, [pc, #144]	; (800a15c <__swsetup_r+0xd8>)
 800a0cc:	429c      	cmp	r4, r3
 800a0ce:	bf08      	it	eq
 800a0d0:	68ec      	ldreq	r4, [r5, #12]
 800a0d2:	e7e6      	b.n	800a0a2 <__swsetup_r+0x1e>
 800a0d4:	0751      	lsls	r1, r2, #29
 800a0d6:	d512      	bpl.n	800a0fe <__swsetup_r+0x7a>
 800a0d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0da:	b141      	cbz	r1, 800a0ee <__swsetup_r+0x6a>
 800a0dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0e0:	4299      	cmp	r1, r3
 800a0e2:	d002      	beq.n	800a0ea <__swsetup_r+0x66>
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	f000 f973 	bl	800a3d0 <_free_r>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	6363      	str	r3, [r4, #52]	; 0x34
 800a0ee:	89a3      	ldrh	r3, [r4, #12]
 800a0f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0f4:	81a3      	strh	r3, [r4, #12]
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	6063      	str	r3, [r4, #4]
 800a0fa:	6923      	ldr	r3, [r4, #16]
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	89a3      	ldrh	r3, [r4, #12]
 800a100:	f043 0308 	orr.w	r3, r3, #8
 800a104:	81a3      	strh	r3, [r4, #12]
 800a106:	6923      	ldr	r3, [r4, #16]
 800a108:	b94b      	cbnz	r3, 800a11e <__swsetup_r+0x9a>
 800a10a:	89a3      	ldrh	r3, [r4, #12]
 800a10c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a114:	d003      	beq.n	800a11e <__swsetup_r+0x9a>
 800a116:	4621      	mov	r1, r4
 800a118:	4630      	mov	r0, r6
 800a11a:	f000 f917 	bl	800a34c <__smakebuf_r>
 800a11e:	89a2      	ldrh	r2, [r4, #12]
 800a120:	f012 0301 	ands.w	r3, r2, #1
 800a124:	d00c      	beq.n	800a140 <__swsetup_r+0xbc>
 800a126:	2300      	movs	r3, #0
 800a128:	60a3      	str	r3, [r4, #8]
 800a12a:	6963      	ldr	r3, [r4, #20]
 800a12c:	425b      	negs	r3, r3
 800a12e:	61a3      	str	r3, [r4, #24]
 800a130:	6923      	ldr	r3, [r4, #16]
 800a132:	b953      	cbnz	r3, 800a14a <__swsetup_r+0xc6>
 800a134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a138:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a13c:	d1ba      	bne.n	800a0b4 <__swsetup_r+0x30>
 800a13e:	bd70      	pop	{r4, r5, r6, pc}
 800a140:	0792      	lsls	r2, r2, #30
 800a142:	bf58      	it	pl
 800a144:	6963      	ldrpl	r3, [r4, #20]
 800a146:	60a3      	str	r3, [r4, #8]
 800a148:	e7f2      	b.n	800a130 <__swsetup_r+0xac>
 800a14a:	2000      	movs	r0, #0
 800a14c:	e7f7      	b.n	800a13e <__swsetup_r+0xba>
 800a14e:	bf00      	nop
 800a150:	200000a0 	.word	0x200000a0
 800a154:	0800a660 	.word	0x0800a660
 800a158:	0800a680 	.word	0x0800a680
 800a15c:	0800a640 	.word	0x0800a640

0800a160 <_close_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	4c06      	ldr	r4, [pc, #24]	; (800a17c <_close_r+0x1c>)
 800a164:	2300      	movs	r3, #0
 800a166:	4605      	mov	r5, r0
 800a168:	4608      	mov	r0, r1
 800a16a:	6023      	str	r3, [r4, #0]
 800a16c:	f7f6 febb 	bl	8000ee6 <_close>
 800a170:	1c43      	adds	r3, r0, #1
 800a172:	d102      	bne.n	800a17a <_close_r+0x1a>
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	b103      	cbz	r3, 800a17a <_close_r+0x1a>
 800a178:	602b      	str	r3, [r5, #0]
 800a17a:	bd38      	pop	{r3, r4, r5, pc}
 800a17c:	2000919c 	.word	0x2000919c

0800a180 <__sflush_r>:
 800a180:	898a      	ldrh	r2, [r1, #12]
 800a182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a186:	4605      	mov	r5, r0
 800a188:	0710      	lsls	r0, r2, #28
 800a18a:	460c      	mov	r4, r1
 800a18c:	d458      	bmi.n	800a240 <__sflush_r+0xc0>
 800a18e:	684b      	ldr	r3, [r1, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	dc05      	bgt.n	800a1a0 <__sflush_r+0x20>
 800a194:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a196:	2b00      	cmp	r3, #0
 800a198:	dc02      	bgt.n	800a1a0 <__sflush_r+0x20>
 800a19a:	2000      	movs	r0, #0
 800a19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1a2:	2e00      	cmp	r6, #0
 800a1a4:	d0f9      	beq.n	800a19a <__sflush_r+0x1a>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1ac:	682f      	ldr	r7, [r5, #0]
 800a1ae:	6a21      	ldr	r1, [r4, #32]
 800a1b0:	602b      	str	r3, [r5, #0]
 800a1b2:	d032      	beq.n	800a21a <__sflush_r+0x9a>
 800a1b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	075a      	lsls	r2, r3, #29
 800a1ba:	d505      	bpl.n	800a1c8 <__sflush_r+0x48>
 800a1bc:	6863      	ldr	r3, [r4, #4]
 800a1be:	1ac0      	subs	r0, r0, r3
 800a1c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1c2:	b10b      	cbz	r3, 800a1c8 <__sflush_r+0x48>
 800a1c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1c6:	1ac0      	subs	r0, r0, r3
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1ce:	6a21      	ldr	r1, [r4, #32]
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	47b0      	blx	r6
 800a1d4:	1c43      	adds	r3, r0, #1
 800a1d6:	89a3      	ldrh	r3, [r4, #12]
 800a1d8:	d106      	bne.n	800a1e8 <__sflush_r+0x68>
 800a1da:	6829      	ldr	r1, [r5, #0]
 800a1dc:	291d      	cmp	r1, #29
 800a1de:	d848      	bhi.n	800a272 <__sflush_r+0xf2>
 800a1e0:	4a29      	ldr	r2, [pc, #164]	; (800a288 <__sflush_r+0x108>)
 800a1e2:	40ca      	lsrs	r2, r1
 800a1e4:	07d6      	lsls	r6, r2, #31
 800a1e6:	d544      	bpl.n	800a272 <__sflush_r+0xf2>
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	6062      	str	r2, [r4, #4]
 800a1ec:	04d9      	lsls	r1, r3, #19
 800a1ee:	6922      	ldr	r2, [r4, #16]
 800a1f0:	6022      	str	r2, [r4, #0]
 800a1f2:	d504      	bpl.n	800a1fe <__sflush_r+0x7e>
 800a1f4:	1c42      	adds	r2, r0, #1
 800a1f6:	d101      	bne.n	800a1fc <__sflush_r+0x7c>
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	b903      	cbnz	r3, 800a1fe <__sflush_r+0x7e>
 800a1fc:	6560      	str	r0, [r4, #84]	; 0x54
 800a1fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a200:	602f      	str	r7, [r5, #0]
 800a202:	2900      	cmp	r1, #0
 800a204:	d0c9      	beq.n	800a19a <__sflush_r+0x1a>
 800a206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a20a:	4299      	cmp	r1, r3
 800a20c:	d002      	beq.n	800a214 <__sflush_r+0x94>
 800a20e:	4628      	mov	r0, r5
 800a210:	f000 f8de 	bl	800a3d0 <_free_r>
 800a214:	2000      	movs	r0, #0
 800a216:	6360      	str	r0, [r4, #52]	; 0x34
 800a218:	e7c0      	b.n	800a19c <__sflush_r+0x1c>
 800a21a:	2301      	movs	r3, #1
 800a21c:	4628      	mov	r0, r5
 800a21e:	47b0      	blx	r6
 800a220:	1c41      	adds	r1, r0, #1
 800a222:	d1c8      	bne.n	800a1b6 <__sflush_r+0x36>
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d0c5      	beq.n	800a1b6 <__sflush_r+0x36>
 800a22a:	2b1d      	cmp	r3, #29
 800a22c:	d001      	beq.n	800a232 <__sflush_r+0xb2>
 800a22e:	2b16      	cmp	r3, #22
 800a230:	d101      	bne.n	800a236 <__sflush_r+0xb6>
 800a232:	602f      	str	r7, [r5, #0]
 800a234:	e7b1      	b.n	800a19a <__sflush_r+0x1a>
 800a236:	89a3      	ldrh	r3, [r4, #12]
 800a238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a23c:	81a3      	strh	r3, [r4, #12]
 800a23e:	e7ad      	b.n	800a19c <__sflush_r+0x1c>
 800a240:	690f      	ldr	r7, [r1, #16]
 800a242:	2f00      	cmp	r7, #0
 800a244:	d0a9      	beq.n	800a19a <__sflush_r+0x1a>
 800a246:	0793      	lsls	r3, r2, #30
 800a248:	680e      	ldr	r6, [r1, #0]
 800a24a:	bf08      	it	eq
 800a24c:	694b      	ldreq	r3, [r1, #20]
 800a24e:	600f      	str	r7, [r1, #0]
 800a250:	bf18      	it	ne
 800a252:	2300      	movne	r3, #0
 800a254:	eba6 0807 	sub.w	r8, r6, r7
 800a258:	608b      	str	r3, [r1, #8]
 800a25a:	f1b8 0f00 	cmp.w	r8, #0
 800a25e:	dd9c      	ble.n	800a19a <__sflush_r+0x1a>
 800a260:	4643      	mov	r3, r8
 800a262:	463a      	mov	r2, r7
 800a264:	6a21      	ldr	r1, [r4, #32]
 800a266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a268:	4628      	mov	r0, r5
 800a26a:	47b0      	blx	r6
 800a26c:	2800      	cmp	r0, #0
 800a26e:	dc06      	bgt.n	800a27e <__sflush_r+0xfe>
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a276:	81a3      	strh	r3, [r4, #12]
 800a278:	f04f 30ff 	mov.w	r0, #4294967295
 800a27c:	e78e      	b.n	800a19c <__sflush_r+0x1c>
 800a27e:	4407      	add	r7, r0
 800a280:	eba8 0800 	sub.w	r8, r8, r0
 800a284:	e7e9      	b.n	800a25a <__sflush_r+0xda>
 800a286:	bf00      	nop
 800a288:	20400001 	.word	0x20400001

0800a28c <_fflush_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	690b      	ldr	r3, [r1, #16]
 800a290:	4605      	mov	r5, r0
 800a292:	460c      	mov	r4, r1
 800a294:	b1db      	cbz	r3, 800a2ce <_fflush_r+0x42>
 800a296:	b118      	cbz	r0, 800a2a0 <_fflush_r+0x14>
 800a298:	6983      	ldr	r3, [r0, #24]
 800a29a:	b90b      	cbnz	r3, 800a2a0 <_fflush_r+0x14>
 800a29c:	f7ff fa8e 	bl	80097bc <__sinit>
 800a2a0:	4b0c      	ldr	r3, [pc, #48]	; (800a2d4 <_fflush_r+0x48>)
 800a2a2:	429c      	cmp	r4, r3
 800a2a4:	d109      	bne.n	800a2ba <_fflush_r+0x2e>
 800a2a6:	686c      	ldr	r4, [r5, #4]
 800a2a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ac:	b17b      	cbz	r3, 800a2ce <_fflush_r+0x42>
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2b6:	f7ff bf63 	b.w	800a180 <__sflush_r>
 800a2ba:	4b07      	ldr	r3, [pc, #28]	; (800a2d8 <_fflush_r+0x4c>)
 800a2bc:	429c      	cmp	r4, r3
 800a2be:	d101      	bne.n	800a2c4 <_fflush_r+0x38>
 800a2c0:	68ac      	ldr	r4, [r5, #8]
 800a2c2:	e7f1      	b.n	800a2a8 <_fflush_r+0x1c>
 800a2c4:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <_fflush_r+0x50>)
 800a2c6:	429c      	cmp	r4, r3
 800a2c8:	bf08      	it	eq
 800a2ca:	68ec      	ldreq	r4, [r5, #12]
 800a2cc:	e7ec      	b.n	800a2a8 <_fflush_r+0x1c>
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	bd38      	pop	{r3, r4, r5, pc}
 800a2d2:	bf00      	nop
 800a2d4:	0800a660 	.word	0x0800a660
 800a2d8:	0800a680 	.word	0x0800a680
 800a2dc:	0800a640 	.word	0x0800a640

0800a2e0 <_lseek_r>:
 800a2e0:	b538      	push	{r3, r4, r5, lr}
 800a2e2:	4c07      	ldr	r4, [pc, #28]	; (800a300 <_lseek_r+0x20>)
 800a2e4:	4605      	mov	r5, r0
 800a2e6:	4608      	mov	r0, r1
 800a2e8:	4611      	mov	r1, r2
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	6022      	str	r2, [r4, #0]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	f7f6 fe20 	bl	8000f34 <_lseek>
 800a2f4:	1c43      	adds	r3, r0, #1
 800a2f6:	d102      	bne.n	800a2fe <_lseek_r+0x1e>
 800a2f8:	6823      	ldr	r3, [r4, #0]
 800a2fa:	b103      	cbz	r3, 800a2fe <_lseek_r+0x1e>
 800a2fc:	602b      	str	r3, [r5, #0]
 800a2fe:	bd38      	pop	{r3, r4, r5, pc}
 800a300:	2000919c 	.word	0x2000919c

0800a304 <__swhatbuf_r>:
 800a304:	b570      	push	{r4, r5, r6, lr}
 800a306:	460e      	mov	r6, r1
 800a308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a30c:	2900      	cmp	r1, #0
 800a30e:	b096      	sub	sp, #88	; 0x58
 800a310:	4614      	mov	r4, r2
 800a312:	461d      	mov	r5, r3
 800a314:	da07      	bge.n	800a326 <__swhatbuf_r+0x22>
 800a316:	2300      	movs	r3, #0
 800a318:	602b      	str	r3, [r5, #0]
 800a31a:	89b3      	ldrh	r3, [r6, #12]
 800a31c:	061a      	lsls	r2, r3, #24
 800a31e:	d410      	bmi.n	800a342 <__swhatbuf_r+0x3e>
 800a320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a324:	e00e      	b.n	800a344 <__swhatbuf_r+0x40>
 800a326:	466a      	mov	r2, sp
 800a328:	f000 f8b2 	bl	800a490 <_fstat_r>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	dbf2      	blt.n	800a316 <__swhatbuf_r+0x12>
 800a330:	9a01      	ldr	r2, [sp, #4]
 800a332:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a336:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a33a:	425a      	negs	r2, r3
 800a33c:	415a      	adcs	r2, r3
 800a33e:	602a      	str	r2, [r5, #0]
 800a340:	e7ee      	b.n	800a320 <__swhatbuf_r+0x1c>
 800a342:	2340      	movs	r3, #64	; 0x40
 800a344:	2000      	movs	r0, #0
 800a346:	6023      	str	r3, [r4, #0]
 800a348:	b016      	add	sp, #88	; 0x58
 800a34a:	bd70      	pop	{r4, r5, r6, pc}

0800a34c <__smakebuf_r>:
 800a34c:	898b      	ldrh	r3, [r1, #12]
 800a34e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a350:	079d      	lsls	r5, r3, #30
 800a352:	4606      	mov	r6, r0
 800a354:	460c      	mov	r4, r1
 800a356:	d507      	bpl.n	800a368 <__smakebuf_r+0x1c>
 800a358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	6123      	str	r3, [r4, #16]
 800a360:	2301      	movs	r3, #1
 800a362:	6163      	str	r3, [r4, #20]
 800a364:	b002      	add	sp, #8
 800a366:	bd70      	pop	{r4, r5, r6, pc}
 800a368:	ab01      	add	r3, sp, #4
 800a36a:	466a      	mov	r2, sp
 800a36c:	f7ff ffca 	bl	800a304 <__swhatbuf_r>
 800a370:	9900      	ldr	r1, [sp, #0]
 800a372:	4605      	mov	r5, r0
 800a374:	4630      	mov	r0, r6
 800a376:	f7ff faab 	bl	80098d0 <_malloc_r>
 800a37a:	b948      	cbnz	r0, 800a390 <__smakebuf_r+0x44>
 800a37c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a380:	059a      	lsls	r2, r3, #22
 800a382:	d4ef      	bmi.n	800a364 <__smakebuf_r+0x18>
 800a384:	f023 0303 	bic.w	r3, r3, #3
 800a388:	f043 0302 	orr.w	r3, r3, #2
 800a38c:	81a3      	strh	r3, [r4, #12]
 800a38e:	e7e3      	b.n	800a358 <__smakebuf_r+0xc>
 800a390:	4b0d      	ldr	r3, [pc, #52]	; (800a3c8 <__smakebuf_r+0x7c>)
 800a392:	62b3      	str	r3, [r6, #40]	; 0x28
 800a394:	89a3      	ldrh	r3, [r4, #12]
 800a396:	6020      	str	r0, [r4, #0]
 800a398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a39c:	81a3      	strh	r3, [r4, #12]
 800a39e:	9b00      	ldr	r3, [sp, #0]
 800a3a0:	6163      	str	r3, [r4, #20]
 800a3a2:	9b01      	ldr	r3, [sp, #4]
 800a3a4:	6120      	str	r0, [r4, #16]
 800a3a6:	b15b      	cbz	r3, 800a3c0 <__smakebuf_r+0x74>
 800a3a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	f000 f881 	bl	800a4b4 <_isatty_r>
 800a3b2:	b128      	cbz	r0, 800a3c0 <__smakebuf_r+0x74>
 800a3b4:	89a3      	ldrh	r3, [r4, #12]
 800a3b6:	f023 0303 	bic.w	r3, r3, #3
 800a3ba:	f043 0301 	orr.w	r3, r3, #1
 800a3be:	81a3      	strh	r3, [r4, #12]
 800a3c0:	89a3      	ldrh	r3, [r4, #12]
 800a3c2:	431d      	orrs	r5, r3
 800a3c4:	81a5      	strh	r5, [r4, #12]
 800a3c6:	e7cd      	b.n	800a364 <__smakebuf_r+0x18>
 800a3c8:	08009785 	.word	0x08009785

0800a3cc <__malloc_lock>:
 800a3cc:	4770      	bx	lr

0800a3ce <__malloc_unlock>:
 800a3ce:	4770      	bx	lr

0800a3d0 <_free_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4605      	mov	r5, r0
 800a3d4:	2900      	cmp	r1, #0
 800a3d6:	d045      	beq.n	800a464 <_free_r+0x94>
 800a3d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3dc:	1f0c      	subs	r4, r1, #4
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	bfb8      	it	lt
 800a3e2:	18e4      	addlt	r4, r4, r3
 800a3e4:	f7ff fff2 	bl	800a3cc <__malloc_lock>
 800a3e8:	4a1f      	ldr	r2, [pc, #124]	; (800a468 <_free_r+0x98>)
 800a3ea:	6813      	ldr	r3, [r2, #0]
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	b933      	cbnz	r3, 800a3fe <_free_r+0x2e>
 800a3f0:	6063      	str	r3, [r4, #4]
 800a3f2:	6014      	str	r4, [r2, #0]
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3fa:	f7ff bfe8 	b.w	800a3ce <__malloc_unlock>
 800a3fe:	42a3      	cmp	r3, r4
 800a400:	d90c      	bls.n	800a41c <_free_r+0x4c>
 800a402:	6821      	ldr	r1, [r4, #0]
 800a404:	1862      	adds	r2, r4, r1
 800a406:	4293      	cmp	r3, r2
 800a408:	bf04      	itt	eq
 800a40a:	681a      	ldreq	r2, [r3, #0]
 800a40c:	685b      	ldreq	r3, [r3, #4]
 800a40e:	6063      	str	r3, [r4, #4]
 800a410:	bf04      	itt	eq
 800a412:	1852      	addeq	r2, r2, r1
 800a414:	6022      	streq	r2, [r4, #0]
 800a416:	6004      	str	r4, [r0, #0]
 800a418:	e7ec      	b.n	800a3f4 <_free_r+0x24>
 800a41a:	4613      	mov	r3, r2
 800a41c:	685a      	ldr	r2, [r3, #4]
 800a41e:	b10a      	cbz	r2, 800a424 <_free_r+0x54>
 800a420:	42a2      	cmp	r2, r4
 800a422:	d9fa      	bls.n	800a41a <_free_r+0x4a>
 800a424:	6819      	ldr	r1, [r3, #0]
 800a426:	1858      	adds	r0, r3, r1
 800a428:	42a0      	cmp	r0, r4
 800a42a:	d10b      	bne.n	800a444 <_free_r+0x74>
 800a42c:	6820      	ldr	r0, [r4, #0]
 800a42e:	4401      	add	r1, r0
 800a430:	1858      	adds	r0, r3, r1
 800a432:	4282      	cmp	r2, r0
 800a434:	6019      	str	r1, [r3, #0]
 800a436:	d1dd      	bne.n	800a3f4 <_free_r+0x24>
 800a438:	6810      	ldr	r0, [r2, #0]
 800a43a:	6852      	ldr	r2, [r2, #4]
 800a43c:	605a      	str	r2, [r3, #4]
 800a43e:	4401      	add	r1, r0
 800a440:	6019      	str	r1, [r3, #0]
 800a442:	e7d7      	b.n	800a3f4 <_free_r+0x24>
 800a444:	d902      	bls.n	800a44c <_free_r+0x7c>
 800a446:	230c      	movs	r3, #12
 800a448:	602b      	str	r3, [r5, #0]
 800a44a:	e7d3      	b.n	800a3f4 <_free_r+0x24>
 800a44c:	6820      	ldr	r0, [r4, #0]
 800a44e:	1821      	adds	r1, r4, r0
 800a450:	428a      	cmp	r2, r1
 800a452:	bf04      	itt	eq
 800a454:	6811      	ldreq	r1, [r2, #0]
 800a456:	6852      	ldreq	r2, [r2, #4]
 800a458:	6062      	str	r2, [r4, #4]
 800a45a:	bf04      	itt	eq
 800a45c:	1809      	addeq	r1, r1, r0
 800a45e:	6021      	streq	r1, [r4, #0]
 800a460:	605c      	str	r4, [r3, #4]
 800a462:	e7c7      	b.n	800a3f4 <_free_r+0x24>
 800a464:	bd38      	pop	{r3, r4, r5, pc}
 800a466:	bf00      	nop
 800a468:	20006708 	.word	0x20006708

0800a46c <_read_r>:
 800a46c:	b538      	push	{r3, r4, r5, lr}
 800a46e:	4c07      	ldr	r4, [pc, #28]	; (800a48c <_read_r+0x20>)
 800a470:	4605      	mov	r5, r0
 800a472:	4608      	mov	r0, r1
 800a474:	4611      	mov	r1, r2
 800a476:	2200      	movs	r2, #0
 800a478:	6022      	str	r2, [r4, #0]
 800a47a:	461a      	mov	r2, r3
 800a47c:	f7f6 fcfa 	bl	8000e74 <_read>
 800a480:	1c43      	adds	r3, r0, #1
 800a482:	d102      	bne.n	800a48a <_read_r+0x1e>
 800a484:	6823      	ldr	r3, [r4, #0]
 800a486:	b103      	cbz	r3, 800a48a <_read_r+0x1e>
 800a488:	602b      	str	r3, [r5, #0]
 800a48a:	bd38      	pop	{r3, r4, r5, pc}
 800a48c:	2000919c 	.word	0x2000919c

0800a490 <_fstat_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4c07      	ldr	r4, [pc, #28]	; (800a4b0 <_fstat_r+0x20>)
 800a494:	2300      	movs	r3, #0
 800a496:	4605      	mov	r5, r0
 800a498:	4608      	mov	r0, r1
 800a49a:	4611      	mov	r1, r2
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	f7f6 fd2e 	bl	8000efe <_fstat>
 800a4a2:	1c43      	adds	r3, r0, #1
 800a4a4:	d102      	bne.n	800a4ac <_fstat_r+0x1c>
 800a4a6:	6823      	ldr	r3, [r4, #0]
 800a4a8:	b103      	cbz	r3, 800a4ac <_fstat_r+0x1c>
 800a4aa:	602b      	str	r3, [r5, #0]
 800a4ac:	bd38      	pop	{r3, r4, r5, pc}
 800a4ae:	bf00      	nop
 800a4b0:	2000919c 	.word	0x2000919c

0800a4b4 <_isatty_r>:
 800a4b4:	b538      	push	{r3, r4, r5, lr}
 800a4b6:	4c06      	ldr	r4, [pc, #24]	; (800a4d0 <_isatty_r+0x1c>)
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	4605      	mov	r5, r0
 800a4bc:	4608      	mov	r0, r1
 800a4be:	6023      	str	r3, [r4, #0]
 800a4c0:	f7f6 fd2d 	bl	8000f1e <_isatty>
 800a4c4:	1c43      	adds	r3, r0, #1
 800a4c6:	d102      	bne.n	800a4ce <_isatty_r+0x1a>
 800a4c8:	6823      	ldr	r3, [r4, #0]
 800a4ca:	b103      	cbz	r3, 800a4ce <_isatty_r+0x1a>
 800a4cc:	602b      	str	r3, [r5, #0]
 800a4ce:	bd38      	pop	{r3, r4, r5, pc}
 800a4d0:	2000919c 	.word	0x2000919c

0800a4d4 <_init>:
 800a4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d6:	bf00      	nop
 800a4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4da:	bc08      	pop	{r3}
 800a4dc:	469e      	mov	lr, r3
 800a4de:	4770      	bx	lr

0800a4e0 <_fini>:
 800a4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e2:	bf00      	nop
 800a4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4e6:	bc08      	pop	{r3}
 800a4e8:	469e      	mov	lr, r3
 800a4ea:	4770      	bx	lr
