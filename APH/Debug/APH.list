
APH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c368  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010a0  0801c508  0801c508  0002c508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d5a8  0801d5a8  000315a0  2**0
                  CONTENTS
  4 .ARM          00000008  0801d5a8  0801d5a8  0002d5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d5b0  0801d5b0  000315a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d5b0  0801d5b0  0002d5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d5b4  0801d5b4  0002d5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000015a0  20000000  0801d5b8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b210  200015a0  0801eb58  000315a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000c7b0  0801eb58  0003c7b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000315a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00059495  00000000  00000000  000315d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007eb4  00000000  00000000  0008aa65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000039d8  00000000  00000000  00092920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003730  00000000  00000000  000962f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f305  00000000  00000000  00099a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003390c  00000000  00000000  000b8d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae734  00000000  00000000  000ec639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0019ad6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010f88  00000000  00000000  0019ae3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200015a0 	.word	0x200015a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801c4f0 	.word	0x0801c4f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200015a4 	.word	0x200015a4
 80001dc:	0801c4f0 	.word	0x0801c4f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <Set_Output>:




void Set_Output(GPIO_DebugPins dp, GPIO_PinState st)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	460a      	mov	r2, r1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(dpArray[dp].PORT, dpArray[dp].PIN, st);
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <Set_Output+0x34>)
 8000f64:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <Set_Output+0x34>)
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	4413      	add	r3, r2
 8000f70:	889b      	ldrh	r3, [r3, #4]
 8000f72:	79ba      	ldrb	r2, [r7, #6]
 8000f74:	4619      	mov	r1, r3
 8000f76:	f008 fa83 	bl	8009480 <HAL_GPIO_WritePin>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20001208 	.word	0x20001208

08000f88 <initFastTask>:
/* Private variables ---------------------------------------------------------*/

static osEventFlagsId_t ntFlag = NULL;

void initFastTask(osEventFlagsId_t normTaskEventHandle)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	ntFlag = normTaskEventHandle;
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <initFastTask+0x1c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20002a74 	.word	0x20002a74

08000fa8 <StartFastTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFastTask */
void StartFastTask(void *argument)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFastTask */
  uint32_t cnt = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  uint32_t loop = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  uint32_t test = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]

  while (ntFlag == NULL)
 8000fbc:	e002      	b.n	8000fc4 <StartFastTask+0x1c>
  {
	  osDelay(1);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f00b f82c 	bl	800c01c <osDelay>
  while (ntFlag == NULL)
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <StartFastTask+0x98>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f8      	beq.n	8000fbe <StartFastTask+0x16>
  }
 /* Infinite loop */

  for(;;)
  {
  	Set_Output(OUT_TEST_1, 1);
 8000fcc:	2101      	movs	r1, #1
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f7ff ffbe 	bl	8000f50 <Set_Output>
  	for(loop = 0; loop < 2000; loop++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	e005      	b.n	8000fe6 <StartFastTask+0x3e>
  	{
  		test = test + 3;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3303      	adds	r3, #3
 8000fde:	60fb      	str	r3, [r7, #12]
  	for(loop = 0; loop < 2000; loop++)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fec:	d3f5      	bcc.n	8000fda <StartFastTask+0x32>
  	}
  	if(test > 3000)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d902      	bls.n	8000ffe <StartFastTask+0x56>
  		test = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e001      	b.n	8001002 <StartFastTask+0x5a>
  	else
  		test = 7;
 8000ffe:	2307      	movs	r3, #7
 8001000:	60fb      	str	r3, [r7, #12]
  	Set_Output(OUT_TEST_1, 0);
 8001002:	2100      	movs	r1, #0
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff ffa3 	bl	8000f50 <Set_Output>

  	Set_Output(OUT_TEST_2, 1);
 800100a:	2101      	movs	r1, #1
 800100c:	2001      	movs	r0, #1
 800100e:	f7ff ff9f 	bl	8000f50 <Set_Output>
    osDelay(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f00b f802 	bl	800c01c <osDelay>
  	Set_Output(OUT_TEST_2, 0);
 8001018:	2100      	movs	r1, #0
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff ff98 	bl	8000f50 <Set_Output>
    cnt++;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
    if (cnt >= 10)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	2b09      	cmp	r3, #9
 800102a:	d9cf      	bls.n	8000fcc <StartFastTask+0x24>
    {
    	cnt = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
    	osEventFlagsSet(ntFlag,1);
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <StartFastTask+0x98>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2101      	movs	r1, #1
 8001036:	4618      	mov	r0, r3
 8001038:	f00b f84a 	bl	800c0d0 <osEventFlagsSet>
  	Set_Output(OUT_TEST_1, 1);
 800103c:	e7c6      	b.n	8000fcc <StartFastTask+0x24>
 800103e:	bf00      	nop
 8001040:	20002a74 	.word	0x20002a74

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001048:	f007 fe2c 	bl	8008ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104c:	f000 f86c 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001050:	f000 f8ea 	bl	8001228 <MX_GPIO_Init>
  MX_CRC_Init();
 8001054:	f000 f8d4 	bl	8001200 <MX_CRC_Init>
  MX_MEMS_Init();
 8001058:	f00a fc6c 	bl	800b934 <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */
  position_Init();
 800105c:	f00e fc20 	bl	800f8a0 <position_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001060:	f00a ff00 	bl	800be64 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001064:	4a20      	ldr	r2, [pc, #128]	; (80010e8 <main+0xa4>)
 8001066:	2100      	movs	r1, #0
 8001068:	4820      	ldr	r0, [pc, #128]	; (80010ec <main+0xa8>)
 800106a:	f00a ff45 	bl	800bef8 <osThreadNew>
 800106e:	4603      	mov	r3, r0
 8001070:	4a1f      	ldr	r2, [pc, #124]	; (80010f0 <main+0xac>)
 8001072:	6013      	str	r3, [r2, #0]

  /* creation of fastTask */
  fastTaskHandle = osThreadNew(StartFastTask, NULL, &fastTask_attributes);
 8001074:	4a1f      	ldr	r2, [pc, #124]	; (80010f4 <main+0xb0>)
 8001076:	2100      	movs	r1, #0
 8001078:	481f      	ldr	r0, [pc, #124]	; (80010f8 <main+0xb4>)
 800107a:	f00a ff3d 	bl	800bef8 <osThreadNew>
 800107e:	4603      	mov	r3, r0
 8001080:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <main+0xb8>)
 8001082:	6013      	str	r3, [r2, #0]

  /* creation of normalTask */
  normalTaskHandle = osThreadNew(StartNormalTask, NULL, &normalTask_attributes);
 8001084:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <main+0xbc>)
 8001086:	2100      	movs	r1, #0
 8001088:	481e      	ldr	r0, [pc, #120]	; (8001104 <main+0xc0>)
 800108a:	f00a ff35 	bl	800bef8 <osThreadNew>
 800108e:	4603      	mov	r3, r0
 8001090:	4a1d      	ldr	r2, [pc, #116]	; (8001108 <main+0xc4>)
 8001092:	6013      	str	r3, [r2, #0]

  /* creation of slowTask */
  slowTaskHandle = osThreadNew(StartSlowTask, NULL, &slowTask_attributes);
 8001094:	4a1d      	ldr	r2, [pc, #116]	; (800110c <main+0xc8>)
 8001096:	2100      	movs	r1, #0
 8001098:	481d      	ldr	r0, [pc, #116]	; (8001110 <main+0xcc>)
 800109a:	f00a ff2d 	bl	800bef8 <osThreadNew>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <main+0xd0>)
 80010a2:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of normTaskEvent */
  normTaskEventHandle = osEventFlagsNew(&normTaskEvent_attributes);
 80010a4:	481c      	ldr	r0, [pc, #112]	; (8001118 <main+0xd4>)
 80010a6:	f00a ffd4 	bl	800c052 <osEventFlagsNew>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a1b      	ldr	r2, [pc, #108]	; (800111c <main+0xd8>)
 80010ae:	6013      	str	r3, [r2, #0]

  /* creation of slowTaskEvent */
  slowTaskEventHandle = osEventFlagsNew(&slowTaskEvent_attributes);
 80010b0:	481b      	ldr	r0, [pc, #108]	; (8001120 <main+0xdc>)
 80010b2:	f00a ffce 	bl	800c052 <osEventFlagsNew>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a1a      	ldr	r2, [pc, #104]	; (8001124 <main+0xe0>)
 80010ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  initFastTask(normTaskEventHandle);
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <main+0xd8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff61 	bl	8000f88 <initFastTask>
  initSlowTask(slowTaskEventHandle);
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <main+0xe0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f97e 	bl	80013cc <initSlowTask>
  initNormalTask(normTaskEventHandle ,slowTaskEventHandle);
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <main+0xd8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a13      	ldr	r2, [pc, #76]	; (8001124 <main+0xe0>)
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f924 	bl	8001328 <initNormalTask>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010e0:	f00a fee4 	bl	800beac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <main+0xa0>
 80010e6:	bf00      	nop
 80010e8:	0801cc68 	.word	0x0801cc68
 80010ec:	080012e9 	.word	0x080012e9
 80010f0:	2000945c 	.word	0x2000945c
 80010f4:	0801cc8c 	.word	0x0801cc8c
 80010f8:	08000fa9 	.word	0x08000fa9
 80010fc:	2000ada8 	.word	0x2000ada8
 8001100:	0801ccb0 	.word	0x0801ccb0
 8001104:	08001355 	.word	0x08001355
 8001108:	2000ace4 	.word	0x2000ace4
 800110c:	0801ccd4 	.word	0x0801ccd4
 8001110:	080013ed 	.word	0x080013ed
 8001114:	2000acec 	.word	0x2000acec
 8001118:	0801ccf8 	.word	0x0801ccf8
 800111c:	2000ace8 	.word	0x2000ace8
 8001120:	0801cd08 	.word	0x0801cd08
 8001124:	2000adac 	.word	0x2000adac

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	; 0x50
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	2230      	movs	r2, #48	; 0x30
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f015 ff62 	bl	8017000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <SystemClock_Config+0xd0>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <SystemClock_Config+0xd0>)
 8001156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115a:	6413      	str	r3, [r2, #64]	; 0x40
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <SystemClock_Config+0xd0>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <SystemClock_Config+0xd4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001174:	4a21      	ldr	r2, [pc, #132]	; (80011fc <SystemClock_Config+0xd4>)
 8001176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <SystemClock_Config+0xd4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001188:	2302      	movs	r3, #2
 800118a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800118c:	2301      	movs	r3, #1
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001190:	2310      	movs	r3, #16
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001194:	2302      	movs	r3, #2
 8001196:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001198:	2300      	movs	r3, #0
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800119c:	2310      	movs	r3, #16
 800119e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011a6:	2304      	movs	r3, #4
 80011a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011aa:	2307      	movs	r3, #7
 80011ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	4618      	mov	r0, r3
 80011b4:	f009 f99c 	bl	800a4f0 <HAL_RCC_OscConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011be:	f000 f8ad 	bl	800131c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c2:	230f      	movs	r3, #15
 80011c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c6:	2302      	movs	r3, #2
 80011c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2102      	movs	r1, #2
 80011de:	4618      	mov	r0, r3
 80011e0:	f009 fbfe 	bl	800a9e0 <HAL_RCC_ClockConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011ea:	f000 f897 	bl	800131c <Error_Handler>
  }
}
 80011ee:	bf00      	nop
 80011f0:	3750      	adds	r7, #80	; 0x50
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40007000 	.word	0x40007000

08001200 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_CRC_Init+0x20>)
 8001206:	4a07      	ldr	r2, [pc, #28]	; (8001224 <MX_CRC_Init+0x24>)
 8001208:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_CRC_Init+0x20>)
 800120c:	f007 fe6e 	bl	8008eec <HAL_CRC_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001216:	f000 f881 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20009c80 	.word	0x20009c80
 8001224:	40023000 	.word	0x40023000

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <MX_GPIO_Init+0xb8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <MX_GPIO_Init+0xb8>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <MX_GPIO_Init+0xb8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <MX_GPIO_Init+0xb8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a1f      	ldr	r2, [pc, #124]	; (80012e0 <MX_GPIO_Init+0xb8>)
 8001264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <MX_GPIO_Init+0xb8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_GPIO_Init+0xb8>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a18      	ldr	r2, [pc, #96]	; (80012e0 <MX_GPIO_Init+0xb8>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_GPIO_Init+0xb8>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_GPIO_Init+0xb8>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <MX_GPIO_Init+0xb8>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_GPIO_Init+0xb8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_TEST_1_Pin|OUT_TEST_2_Pin|OUT_TEST_3_Pin|OUT_TEST_4_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 7158 	mov.w	r1, #864	; 0x360
 80012b4:	480b      	ldr	r0, [pc, #44]	; (80012e4 <MX_GPIO_Init+0xbc>)
 80012b6:	f008 f8e3 	bl	8009480 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT_TEST_1_Pin OUT_TEST_2_Pin OUT_TEST_3_Pin OUT_TEST_4_Pin */
  GPIO_InitStruct.Pin = OUT_TEST_1_Pin|OUT_TEST_2_Pin|OUT_TEST_3_Pin|OUT_TEST_4_Pin;
 80012ba:	f44f 7358 	mov.w	r3, #864	; 0x360
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	4804      	ldr	r0, [pc, #16]	; (80012e4 <MX_GPIO_Init+0xbc>)
 80012d4:	f007 fe54 	bl	8008f80 <HAL_GPIO_Init>

}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020800 	.word	0x40020800

080012e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012f0:	2001      	movs	r0, #1
 80012f2:	f00a fe93 	bl	800c01c <osDelay>
 80012f6:	e7fb      	b.n	80012f0 <StartDefaultTask+0x8>

080012f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a04      	ldr	r2, [pc, #16]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800130a:	f007 fced 	bl	8008ce8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40014400 	.word	0x40014400

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	e7fe      	b.n	8001324 <Error_Handler+0x8>
	...

08001328 <initNormalTask>:
static osEventFlagsId_t ntFlag = NULL;
static osEventFlagsId_t stFlag = NULL;


void initNormalTask(osEventFlagsId_t normTaskEventHandle, osEventFlagsId_t slowTaskEventHandle)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
	ntFlag = normTaskEventHandle;
 8001332:	4a06      	ldr	r2, [pc, #24]	; (800134c <initNormalTask+0x24>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6013      	str	r3, [r2, #0]
	stFlag = slowTaskEventHandle;
 8001338:	4a05      	ldr	r2, [pc, #20]	; (8001350 <initNormalTask+0x28>)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	6013      	str	r3, [r2, #0]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20002a78 	.word	0x20002a78
 8001350:	20002a7c 	.word	0x20002a7c

08001354 <StartNormalTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartNormalTask */
void StartNormalTask(void *argument)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	uint32_t cnt;
	uint32_t blink;



    while ((ntFlag == NULL) || (stFlag == NULL))
 800135c:	e002      	b.n	8001364 <StartNormalTask+0x10>
	{
    	osDelay(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f00a fe5c 	bl	800c01c <osDelay>
    while ((ntFlag == NULL) || (stFlag == NULL))
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <StartNormalTask+0x70>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f8      	beq.n	800135e <StartNormalTask+0xa>
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <StartNormalTask+0x74>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f4      	beq.n	800135e <StartNormalTask+0xa>


  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait (ntFlag,1, 0, 15);
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <StartNormalTask+0x70>)
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	230f      	movs	r3, #15
 800137a:	2200      	movs	r2, #0
 800137c:	2101      	movs	r1, #1
 800137e:	f00a ff1d 	bl	800c1bc <osEventFlagsWait>
	  osEventFlagsClear(ntFlag,1);
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <StartNormalTask+0x70>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2101      	movs	r1, #1
 8001388:	4618      	mov	r0, r3
 800138a:	f00a fee5 	bl	800c158 <osEventFlagsClear>
	  cnt++;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	3301      	adds	r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
	  blink++;
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	3301      	adds	r3, #1
 8001398:	60bb      	str	r3, [r7, #8]
	  Set_Output(OUT_TEST_3,blink & 1);
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fdd2 	bl	8000f50 <Set_Output>
	  if(cnt >= 10)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b09      	cmp	r3, #9
 80013b0:	d9e0      	bls.n	8001374 <StartNormalTask+0x20>
	  {
		  cnt = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
		  osEventFlagsSet(stFlag,1);
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <StartNormalTask+0x74>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2101      	movs	r1, #1
 80013bc:	4618      	mov	r0, r3
 80013be:	f00a fe87 	bl	800c0d0 <osEventFlagsSet>
	  osEventFlagsWait (ntFlag,1, 0, 15);
 80013c2:	e7d7      	b.n	8001374 <StartNormalTask+0x20>
 80013c4:	20002a78 	.word	0x20002a78
 80013c8:	20002a7c 	.word	0x20002a7c

080013cc <initSlowTask>:
/* Private variables ---------------------------------------------------------*/
static osEventFlagsId_t stFlag = NULL;


void initSlowTask(osEventFlagsId_t slowTaskEventHandle)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	stFlag = slowTaskEventHandle;
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <initSlowTask+0x1c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20002a80 	.word	0x20002a80

080013ec <StartSlowTask>:

void StartSlowTask(void *argument)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

	uint32_t cnt;
	uint32_t blink;
	//TaskHandle_t stHandle = xTaskGetHandle( "slowTask" );

	while (stFlag == NULL)
 80013f4:	e002      	b.n	80013fc <StartSlowTask+0x10>
    {
	  osDelay(1);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f00a fe10 	bl	800c01c <osDelay>
	while (stFlag == NULL)
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <StartSlowTask+0x78>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f8      	beq.n	80013f6 <StartSlowTask+0xa>


  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait (stFlag,1, 0, 150);
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <StartSlowTask+0x78>)
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	2396      	movs	r3, #150	; 0x96
 800140a:	2200      	movs	r2, #0
 800140c:	2101      	movs	r1, #1
 800140e:	f00a fed5 	bl	800c1bc <osEventFlagsWait>
	  osEventFlagsClear(stFlag,1);
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <StartSlowTask+0x78>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2101      	movs	r1, #1
 8001418:	4618      	mov	r0, r3
 800141a:	f00a fe9d 	bl	800c158 <osEventFlagsClear>
	  if(blink & 8)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <StartSlowTask+0x44>
	  {
		  BSP_LED_On(LED_GREEN);
 8001428:	2000      	movs	r0, #0
 800142a:	f007 fa47 	bl	80088bc <BSP_LED_On>
 800142e:	e002      	b.n	8001436 <StartSlowTask+0x4a>
	  }
	  else
	  {
		  BSP_LED_Off(LED_GREEN);
 8001430:	2000      	movs	r0, #0
 8001432:	f007 fa59 	bl	80088e8 <BSP_LED_Off>
	  }
	  //Set_Output(OUT_TEST_4,blink & 1);
	  cnt++;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3301      	adds	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
	  blink++;
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	3301      	adds	r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
	  Set_Output(OUT_TEST_4, 1);
 8001442:	2101      	movs	r1, #1
 8001444:	2003      	movs	r0, #3
 8001446:	f7ff fd83 	bl	8000f50 <Set_Output>
	  PositionProcess();
 800144a:	f00e fa31 	bl	800f8b0 <PositionProcess>
	  Set_Output(OUT_TEST_4, 0);
 800144e:	2100      	movs	r1, #0
 8001450:	2003      	movs	r0, #3
 8001452:	f7ff fd7d 	bl	8000f50 <Set_Output>
	  if(cnt >= 10)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2b09      	cmp	r3, #9
 800145a:	d9d3      	bls.n	8001404 <StartSlowTask+0x18>
	  {
//		  Set_Output(OUT_TEST_4, 1);
////		  printf("\n\n\n\rHallo\n\n\r");
		  cnt= 0;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
	  osEventFlagsWait (stFlag,1, 0, 150);
 8001460:	e7d0      	b.n	8001404 <StartSlowTask+0x18>
 8001462:	bf00      	nop
 8001464:	20002a80 	.word	0x20002a80

08001468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_MspInit+0x54>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_MspInit+0x54>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_MspInit+0x54>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_MspInit+0x54>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <HAL_MspInit+0x54>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_MspInit+0x54>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	210f      	movs	r1, #15
 80014aa:	f06f 0001 	mvn.w	r0, #1
 80014ae:	f007 fcf3 	bl	8008e98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800

080014c0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <HAL_CRC_MspInit+0x3c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d10d      	bne.n	80014ee <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_CRC_MspInit+0x40>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a09      	ldr	r2, [pc, #36]	; (8001500 <HAL_CRC_MspInit+0x40>)
 80014dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_CRC_MspInit+0x40>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023000 	.word	0x40023000
 8001500:	40023800 	.word	0x40023800

08001504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	; 0x30
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001514:	2200      	movs	r2, #0
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	2019      	movs	r0, #25
 800151a:	f007 fcbd 	bl	8008e98 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800151e:	2019      	movs	r0, #25
 8001520:	f007 fcd6 	bl	8008ed0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <HAL_InitTick+0xa0>)
 800152a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152c:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <HAL_InitTick+0xa0>)
 800152e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001532:	6453      	str	r3, [r2, #68]	; 0x44
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_InitTick+0xa0>)
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001540:	f107 0210 	add.w	r2, r7, #16
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f009 fc44 	bl	800add8 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001550:	f009 fc2e 	bl	800adb0 <HAL_RCC_GetPCLK2Freq>
 8001554:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001558:	4a13      	ldr	r2, [pc, #76]	; (80015a8 <HAL_InitTick+0xa4>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	0c9b      	lsrs	r3, r3, #18
 8001560:	3b01      	subs	r3, #1
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_InitTick+0xa8>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <HAL_InitTick+0xac>)
 8001568:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_InitTick+0xa8>)
 800156c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001570:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_InitTick+0xa8>)
 8001574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001576:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_InitTick+0xa8>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_InitTick+0xa8>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001584:	4809      	ldr	r0, [pc, #36]	; (80015ac <HAL_InitTick+0xa8>)
 8001586:	f009 fc59 	bl	800ae3c <HAL_TIM_Base_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d104      	bne.n	800159a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <HAL_InitTick+0xa8>)
 8001592:	f009 fcad 	bl	800aef0 <HAL_TIM_Base_Start_IT>
 8001596:	4603      	mov	r3, r0
 8001598:	e000      	b.n	800159c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3730      	adds	r7, #48	; 0x30
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	431bde83 	.word	0x431bde83
 80015ac:	2000bdd0 	.word	0x2000bdd0
 80015b0:	40014400 	.word	0x40014400

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <NMI_Handler+0x4>

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80015e6:	f009 fce5 	bl	800afb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000bdd0 	.word	0x2000bdd0

080015f4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <BSP_I2C1_Init+0x58>)
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <BSP_I2C1_Init+0x5c>)
 8001602:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <BSP_I2C1_Init+0x60>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	4912      	ldr	r1, [pc, #72]	; (8001654 <BSP_I2C1_Init+0x60>)
 800160c:	600a      	str	r2, [r1, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d117      	bne.n	8001642 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001612:	480e      	ldr	r0, [pc, #56]	; (800164c <BSP_I2C1_Init+0x58>)
 8001614:	f008 fbf6 	bl	8009e04 <HAL_I2C_GetState>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d111      	bne.n	8001642 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800161e:	480b      	ldr	r0, [pc, #44]	; (800164c <BSP_I2C1_Init+0x58>)
 8001620:	f000 f8e2 	bl	80017e8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10b      	bne.n	8001642 <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800162a:	4808      	ldr	r0, [pc, #32]	; (800164c <BSP_I2C1_Init+0x58>)
 800162c:	f000 f8a8 	bl	8001780 <MX_I2C1_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8001636:	f06f 0307 	mvn.w	r3, #7
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	e001      	b.n	8001642 <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001642:	687b      	ldr	r3, [r7, #4]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2000be18 	.word	0x2000be18
 8001650:	40005400 	.word	0x40005400
 8001654:	20002a84 	.word	0x20002a84

08001658 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <BSP_I2C1_DeInit+0x48>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d014      	beq.n	8001694 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <BSP_I2C1_DeInit+0x48>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3b01      	subs	r3, #1
 8001670:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <BSP_I2C1_DeInit+0x48>)
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <BSP_I2C1_DeInit+0x48>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10b      	bne.n	8001694 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800167c:	4809      	ldr	r0, [pc, #36]	; (80016a4 <BSP_I2C1_DeInit+0x4c>)
 800167e:	f000 f8fd 	bl	800187c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001682:	4808      	ldr	r0, [pc, #32]	; (80016a4 <BSP_I2C1_DeInit+0x4c>)
 8001684:	f008 f85a 	bl	800973c <HAL_I2C_DeInit>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800168e:	f06f 0307 	mvn.w	r3, #7
 8001692:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001694:	687b      	ldr	r3, [r7, #4]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20002a84 	.word	0x20002a84
 80016a4:	2000be18 	.word	0x2000be18

080016a8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af04      	add	r7, sp, #16
 80016ae:	60ba      	str	r2, [r7, #8]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4603      	mov	r3, r0
 80016b4:	81fb      	strh	r3, [r7, #14]
 80016b6:	460b      	mov	r3, r1
 80016b8:	81bb      	strh	r3, [r7, #12]
 80016ba:	4613      	mov	r3, r2
 80016bc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80016c2:	89ba      	ldrh	r2, [r7, #12]
 80016c4:	89f9      	ldrh	r1, [r7, #14]
 80016c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ca:	9302      	str	r3, [sp, #8]
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2301      	movs	r3, #1
 80016d6:	480c      	ldr	r0, [pc, #48]	; (8001708 <BSP_I2C1_WriteReg+0x60>)
 80016d8:	f008 f874 	bl	80097c4 <HAL_I2C_Mem_Write>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00c      	beq.n	80016fc <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80016e2:	4809      	ldr	r0, [pc, #36]	; (8001708 <BSP_I2C1_WriteReg+0x60>)
 80016e4:	f008 fb9c 	bl	8009e20 <HAL_I2C_GetError>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d103      	bne.n	80016f6 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80016ee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e002      	b.n	80016fc <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80016f6:	f06f 0303 	mvn.w	r3, #3
 80016fa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80016fc:	697b      	ldr	r3, [r7, #20]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000be18 	.word	0x2000be18

0800170c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af04      	add	r7, sp, #16
 8001712:	60ba      	str	r2, [r7, #8]
 8001714:	461a      	mov	r2, r3
 8001716:	4603      	mov	r3, r0
 8001718:	81fb      	strh	r3, [r7, #14]
 800171a:	460b      	mov	r3, r1
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	4613      	mov	r3, r2
 8001720:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001726:	89ba      	ldrh	r2, [r7, #12]
 8001728:	89f9      	ldrh	r1, [r7, #14]
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2301      	movs	r3, #1
 800173a:	480c      	ldr	r0, [pc, #48]	; (800176c <BSP_I2C1_ReadReg+0x60>)
 800173c:	f008 f93c 	bl	80099b8 <HAL_I2C_Mem_Read>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001746:	4809      	ldr	r0, [pc, #36]	; (800176c <BSP_I2C1_ReadReg+0x60>)
 8001748:	f008 fb6a 	bl	8009e20 <HAL_I2C_GetError>
 800174c:	4603      	mov	r3, r0
 800174e:	2b04      	cmp	r3, #4
 8001750:	d103      	bne.n	800175a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001752:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e002      	b.n	8001760 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800175a:	f06f 0303 	mvn.w	r3, #3
 800175e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001760:	697b      	ldr	r3, [r7, #20]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000be18 	.word	0x2000be18

08001770 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001774:	f007 facc 	bl	8008d10 <HAL_GetTick>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <MX_I2C1_Init+0x60>)
 8001790:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <MX_I2C1_Init+0x64>)
 8001796:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017aa:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f007 fe75 	bl	80094b4 <HAL_I2C_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40005400 	.word	0x40005400
 80017e4:	000186a0 	.word	0x000186a0

080017e8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <I2C1_MspInit+0x8c>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	4a1e      	ldr	r2, [pc, #120]	; (8001874 <I2C1_MspInit+0x8c>)
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <I2C1_MspInit+0x8c>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800180c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001812:	2312      	movs	r3, #18
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001816:	2301      	movs	r3, #1
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800181e:	2304      	movs	r3, #4
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4813      	ldr	r0, [pc, #76]	; (8001878 <I2C1_MspInit+0x90>)
 800182a:	f007 fba9 	bl	8008f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800182e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001834:	2312      	movs	r3, #18
 8001836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001838:	2301      	movs	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001840:	2304      	movs	r3, #4
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	480b      	ldr	r0, [pc, #44]	; (8001878 <I2C1_MspInit+0x90>)
 800184c:	f007 fb98 	bl	8008f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <I2C1_MspInit+0x8c>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <I2C1_MspInit+0x8c>)
 800185a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800185e:	6413      	str	r3, [r2, #64]	; 0x40
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <I2C1_MspInit+0x8c>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800186c:	bf00      	nop
 800186e:	3728      	adds	r7, #40	; 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	40020400 	.word	0x40020400

0800187c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <I2C1_MspDeInit+0x30>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	4a08      	ldr	r2, [pc, #32]	; (80018ac <I2C1_MspDeInit+0x30>)
 800188a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800188e:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001894:	4806      	ldr	r0, [pc, #24]	; (80018b0 <I2C1_MspDeInit+0x34>)
 8001896:	f007 fcf7 	bl	8009288 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800189a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800189e:	4804      	ldr	r0, [pc, #16]	; (80018b0 <I2C1_MspDeInit+0x34>)
 80018a0:	f007 fcf2 	bl	8009288 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020400 	.word	0x40020400

080018b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
	return 1;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_kill>:

int _kill(int pid, int sig)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018ce:	f015 fb5f 	bl	8016f90 <__errno>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2216      	movs	r2, #22
 80018d6:	601a      	str	r2, [r3, #0]
	return -1;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_exit>:

void _exit (int status)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ffe7 	bl	80018c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018f6:	e7fe      	b.n	80018f6 <_exit+0x12>

080018f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e00a      	b.n	8001920 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800190a:	f3af 8000 	nop.w
 800190e:	4601      	mov	r1, r0
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	60ba      	str	r2, [r7, #8]
 8001916:	b2ca      	uxtb	r2, r1
 8001918:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	dbf0      	blt.n	800190a <_read+0x12>
	}

return len;
 8001928:	687b      	ldr	r3, [r7, #4]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e009      	b.n	8001958 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	60ba      	str	r2, [r7, #8]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f007 f945 	bl	8008bdc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	dbf1      	blt.n	8001944 <_write+0x12>
	}
	return len;
 8001960:	687b      	ldr	r3, [r7, #4]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_close>:

int _close(int file)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
	return -1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001992:	605a      	str	r2, [r3, #4]
	return 0;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <_isatty>:

int _isatty(int file)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
	return 1;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
	return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019dc:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <_sbrk+0x5c>)
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <_sbrk+0x60>)
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <_sbrk+0x64>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <_sbrk+0x68>)
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d207      	bcs.n	8001a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a04:	f015 fac4 	bl	8016f90 <__errno>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	e009      	b.n	8001a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <_sbrk+0x64>)
 8001a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20018000 	.word	0x20018000
 8001a34:	00000400 	.word	0x00000400
 8001a38:	20002a88 	.word	0x20002a88
 8001a3c:	2000c7b0 	.word	0x2000c7b0

08001a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <SystemInit+0x28>)
 8001a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4a:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <SystemInit+0x28>)
 8001a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SystemInit+0x28>)
 8001a56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a5a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a72:	e003      	b.n	8001a7c <LoopCopyDataInit>

08001a74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a7a:	3104      	adds	r1, #4

08001a7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a7c:	480b      	ldr	r0, [pc, #44]	; (8001aac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a84:	d3f6      	bcc.n	8001a74 <CopyDataInit>
  ldr  r2, =_sbss
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a88:	e002      	b.n	8001a90 <LoopFillZerobss>

08001a8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a8c:	f842 3b04 	str.w	r3, [r2], #4

08001a90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a94:	d3f9      	bcc.n	8001a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a96:	f7ff ffd3 	bl	8001a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f015 fa7f 	bl	8016f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9e:	f7ff fad1 	bl	8001044 <main>
  bx  lr    
 8001aa2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aa4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001aa8:	0801d5b8 	.word	0x0801d5b8
  ldr  r0, =_sdata
 8001aac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ab0:	200015a0 	.word	0x200015a0
  ldr  r2, =_sbss
 8001ab4:	200015a0 	.word	0x200015a0
  ldr  r3, = _ebss
 8001ab8:	2000c7b0 	.word	0x2000c7b0

08001abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC_IRQHandler>
	...

08001ac0 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d103      	bne.n	8001ad8 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	e030      	b.n	8001b3a <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	7b1a      	ldrb	r2, [r3, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	699a      	ldr	r2, [r3, #24]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <HTS221_RegisterBusIO+0x84>)
 8001b14:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <HTS221_RegisterBusIO+0x88>)
 8001b1a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4798      	blx	r3
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	e002      	b.n	8001b3a <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295
 8001b38:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	08002177 	.word	0x08002177
 8001b48:	080021d9 	.word	0x080021d9

08001b4c <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d108      	bne.n	8001b70 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 faa4 	bl	80020ac <HTS221_Initialize>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e004      	b.n	8001b7a <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d111      	bne.n	8001bb8 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f878 	bl	8001c8a <HTS221_HUM_Disable>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba4:	e00d      	b.n	8001bc2 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f95f 	bl	8001e6a <HTS221_TEMP_Disable>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	e004      	b.n	8001bc2 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	331c      	adds	r3, #28
 8001bd8:	6839      	ldr	r1, [r7, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 fc28 	bl	8002430 <hts221_device_id_get>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	e000      	b.n	8001bee <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2200      	movs	r2, #0
 8001c18:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HTS221_GetCapabilities+0x44>)
 8001c1e:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4a06      	ldr	r2, [pc, #24]	; (8001c3c <HTS221_GetCapabilities+0x44>)
 8001c24:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	41480000 	.word	0x41480000

08001c40 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e015      	b.n	8001c82 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10b      	bne.n	8001c78 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	331c      	adds	r3, #28
 8001c64:	2101      	movs	r1, #1
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 fbf3 	bl	8002452 <hts221_power_on_set>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	e004      	b.n	8001c82 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e015      	b.n	8001ccc <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10b      	bne.n	8001cc2 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	331c      	adds	r3, #28
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fbce 	bl	8002452 <hts221_power_on_set>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc0:	e004      	b.n	8001ccc <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001cde:	6839      	ldr	r1, [r7, #0]
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f96f 	bl	8001fc4 <HTS221_GetOutputDataRate>
 8001ce6:	4603      	mov	r3, r0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001cfc:	ed97 0a00 	vldr	s0, [r7]
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f9a3 	bl	800204c <HTS221_SetOutputDataRate>
 8001d06:	4603      	mov	r3, r0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	331c      	adds	r3, #28
 8001d1e:	f107 020c 	add.w	r2, r7, #12
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 fc58 	bl	80025da <hts221_hum_adc_point_0_get>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
 8001d34:	e06b      	b.n	8001e0e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f103 021c 	add.w	r2, r3, #28
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	3304      	adds	r3, #4
 8001d42:	4619      	mov	r1, r3
 8001d44:	4610      	mov	r0, r2
 8001d46:	f000 fbaa 	bl	800249e <hts221_hum_rh_point_0_get>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295
 8001d54:	e05b      	b.n	8001e0e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f103 021c 	add.w	r2, r3, #28
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	3308      	adds	r3, #8
 8001d62:	4619      	mov	r1, r3
 8001d64:	4610      	mov	r0, r2
 8001d66:	f000 fc5c 	bl	8002622 <hts221_hum_adc_point_1_get>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
 8001d74:	e04b      	b.n	8001e0e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f103 021c 	add.w	r2, r3, #28
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	330c      	adds	r3, #12
 8001d82:	4619      	mov	r1, r3
 8001d84:	4610      	mov	r0, r2
 8001d86:	f000 fba8 	bl	80024da <hts221_hum_rh_point_1_get>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295
 8001d94:	e03b      	b.n	8001e0e <HTS221_HUM_GetHumidity+0xfe>
 8001d96:	2300      	movs	r3, #0
 8001d98:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	331c      	adds	r3, #28
 8001d9e:	f107 021c 	add.w	r2, r7, #28
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 fafd 	bl	80023a4 <hts221_humidity_raw_get>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
 8001db4:	e02b      	b.n	8001e0e <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001db6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f99a 	bl	8002104 <Linear_Interpolation>
 8001dd0:	eef0 7a40 	vmov.f32	s15, s0
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	edd3 7a00 	vldr	s15, [r3]
 8001de0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de8:	d503      	bpl.n	8001df2 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	edd3 7a00 	vldr	s15, [r3]
 8001df8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001e18 <HTS221_HUM_GetHumidity+0x108>
 8001dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e04:	dd02      	ble.n	8001e0c <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <HTS221_HUM_GetHumidity+0x10c>)
 8001e0a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3720      	adds	r7, #32
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	42c80000 	.word	0x42c80000
 8001e1c:	42c80000 	.word	0x42c80000

08001e20 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e015      	b.n	8001e62 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10b      	bne.n	8001e58 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	331c      	adds	r3, #28
 8001e44:	2101      	movs	r1, #1
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fb03 	bl	8002452 <hts221_power_on_set>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	e004      	b.n	8001e62 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e015      	b.n	8001eac <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10b      	bne.n	8001ea2 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	331c      	adds	r3, #28
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 fade 	bl	8002452 <hts221_power_on_set>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea0:	e004      	b.n	8001eac <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001ebe:	6839      	ldr	r1, [r7, #0]
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f87f 	bl	8001fc4 <HTS221_GetOutputDataRate>
 8001ec6:	4603      	mov	r3, r0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001edc:	ed97 0a00 	vldr	s0, [r7]
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f8b3 	bl	800204c <HTS221_SetOutputDataRate>
 8001ee6:	4603      	mov	r3, r0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	331c      	adds	r3, #28
 8001efe:	f107 020c 	add.w	r2, r7, #12
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 fbb0 	bl	800266a <hts221_temp_adc_point_0_get>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295
 8001f14:	e052      	b.n	8001fbc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f103 021c 	add.w	r2, r3, #28
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	3304      	adds	r3, #4
 8001f22:	4619      	mov	r1, r3
 8001f24:	4610      	mov	r0, r2
 8001f26:	f000 faf6 	bl	8002516 <hts221_temp_deg_point_0_get>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295
 8001f34:	e042      	b.n	8001fbc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f103 021c 	add.w	r2, r3, #28
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	3308      	adds	r3, #8
 8001f42:	4619      	mov	r1, r3
 8001f44:	4610      	mov	r0, r2
 8001f46:	f000 fbb4 	bl	80026b2 <hts221_temp_adc_point_1_get>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d002      	beq.n	8001f56 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8001f50:	f04f 33ff 	mov.w	r3, #4294967295
 8001f54:	e032      	b.n	8001fbc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f103 021c 	add.w	r2, r3, #28
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	330c      	adds	r3, #12
 8001f62:	4619      	mov	r1, r3
 8001f64:	4610      	mov	r0, r2
 8001f66:	f000 fb07 	bl	8002578 <hts221_temp_deg_point_1_get>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
 8001f74:	e022      	b.n	8001fbc <HTS221_TEMP_GetTemperature+0xcc>
 8001f76:	2300      	movs	r3, #0
 8001f78:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	331c      	adds	r3, #28
 8001f7e:	f107 021c 	add.w	r2, r7, #28
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 fa30 	bl	80023ea <hts221_temperature_raw_get>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8001f90:	f04f 33ff 	mov.w	r3, #4294967295
 8001f94:	e012      	b.n	8001fbc <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001f96:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa2:	f107 030c 	add.w	r3, r7, #12
 8001fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f8aa 	bl	8002104 <Linear_Interpolation>
 8001fb0:	eef0 7a40 	vmov.f32	s15, s0
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	331c      	adds	r3, #28
 8001fd6:	f107 020b 	add.w	r2, r7, #11
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 f983 	bl	80022e8 <hts221_data_rate_get>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fec:	e025      	b.n	800203a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8001fee:	7afb      	ldrb	r3, [r7, #11]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d81d      	bhi.n	8002030 <HTS221_GetOutputDataRate+0x6c>
 8001ff4:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <HTS221_GetOutputDataRate+0x38>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	0800200d 	.word	0x0800200d
 8002000:	08002017 	.word	0x08002017
 8002004:	08002021 	.word	0x08002021
 8002008:	08002029 	.word	0x08002029
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
      break;
 8002014:	e010      	b.n	8002038 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800201c:	601a      	str	r2, [r3, #0]
      break;
 800201e:	e00b      	b.n	8002038 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4a08      	ldr	r2, [pc, #32]	; (8002044 <HTS221_GetOutputDataRate+0x80>)
 8002024:	601a      	str	r2, [r3, #0]
      break;
 8002026:	e007      	b.n	8002038 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	4a07      	ldr	r2, [pc, #28]	; (8002048 <HTS221_GetOutputDataRate+0x84>)
 800202c:	601a      	str	r2, [r3, #0]
      break;
 800202e:	e003      	b.n	8002038 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8002030:	f04f 33ff 	mov.w	r3, #4294967295
 8002034:	60fb      	str	r3, [r7, #12]
      break;
 8002036:	bf00      	nop
  }

  return ret;
 8002038:	68fb      	ldr	r3, [r7, #12]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40e00000 	.word	0x40e00000
 8002048:	41480000 	.word	0x41480000

0800204c <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002058:	edd7 7a00 	vldr	s15, [r7]
 800205c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002068:	d801      	bhi.n	800206e <HTS221_SetOutputDataRate+0x22>
 800206a:	2301      	movs	r3, #1
 800206c:	e00b      	b.n	8002086 <HTS221_SetOutputDataRate+0x3a>
 800206e:	edd7 7a00 	vldr	s15, [r7]
 8002072:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800207a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207e:	d801      	bhi.n	8002084 <HTS221_SetOutputDataRate+0x38>
 8002080:	2302      	movs	r3, #2
 8002082:	e000      	b.n	8002086 <HTS221_SetOutputDataRate+0x3a>
 8002084:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8002086:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	331c      	adds	r3, #28
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f000 f902 	bl	800229a <hts221_data_rate_set>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 800209c:	f04f 33ff 	mov.w	r3, #4294967295
 80020a0:	e000      	b.n	80020a4 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	331c      	adds	r3, #28
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 f9c9 	bl	8002452 <hts221_power_on_set>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	e017      	b.n	80020fc <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	331c      	adds	r3, #28
 80020d0:	2101      	movs	r1, #1
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 f940 	bl	8002358 <hts221_block_data_update_set>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	e00b      	b.n	80020fc <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80020e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ffaf 	bl	800204c <HTS221_SetOutputDataRate>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80020f4:	f04f 33ff 	mov.w	r3, #4294967295
 80020f8:	e000      	b.n	80020fc <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	ed93 7a03 	vldr	s14, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	edd3 7a01 	vldr	s15, [r3, #4]
 800211c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002120:	edd7 7a00 	vldr	s15, [r7]
 8002124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	edd3 6a02 	vldr	s13, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	edd3 7a01 	vldr	s15, [r3, #4]
 8002134:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	ed93 6a00 	vldr	s12, [r3]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	edd3 7a03 	vldr	s15, [r3, #12]
 8002144:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002148:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800214c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	edd3 6a02 	vldr	s13, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	edd3 7a00 	vldr	s15, [r3]
 800215c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002160:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002164:	eef0 7a66 	vmov.f32	s15, s13
}
 8002168:	eeb0 0a67 	vmov.f32	s0, s15
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002176:	b590      	push	{r4, r7, lr}
 8002178:	b087      	sub	sp, #28
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	461a      	mov	r2, r3
 8002182:	460b      	mov	r3, r1
 8002184:	72fb      	strb	r3, [r7, #11]
 8002186:	4613      	mov	r3, r2
 8002188:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10e      	bne.n	80021b4 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	695c      	ldr	r4, [r3, #20]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	7b1b      	ldrb	r3, [r3, #12]
 800219e:	b298      	uxth	r0, r3
 80021a0:	7afb      	ldrb	r3, [r7, #11]
 80021a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	b299      	uxth	r1, r3
 80021aa:	893b      	ldrh	r3, [r7, #8]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	47a0      	blx	r4
 80021b0:	4603      	mov	r3, r0
 80021b2:	e00d      	b.n	80021d0 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	695c      	ldr	r4, [r3, #20]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	7b1b      	ldrb	r3, [r3, #12]
 80021bc:	b298      	uxth	r0, r3
 80021be:	7afb      	ldrb	r3, [r7, #11]
 80021c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	b299      	uxth	r1, r3
 80021c8:	893b      	ldrh	r3, [r7, #8]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	47a0      	blx	r4
 80021ce:	4603      	mov	r3, r0
  }
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd90      	pop	{r4, r7, pc}

080021d8 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	461a      	mov	r2, r3
 80021e4:	460b      	mov	r3, r1
 80021e6:	72fb      	strb	r3, [r7, #11]
 80021e8:	4613      	mov	r3, r2
 80021ea:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10e      	bne.n	8002216 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	691c      	ldr	r4, [r3, #16]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	7b1b      	ldrb	r3, [r3, #12]
 8002200:	b298      	uxth	r0, r3
 8002202:	7afb      	ldrb	r3, [r7, #11]
 8002204:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002208:	b2db      	uxtb	r3, r3
 800220a:	b299      	uxth	r1, r3
 800220c:	893b      	ldrh	r3, [r7, #8]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	47a0      	blx	r4
 8002212:	4603      	mov	r3, r0
 8002214:	e00d      	b.n	8002232 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	691c      	ldr	r4, [r3, #16]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	7b1b      	ldrb	r3, [r3, #12]
 800221e:	b298      	uxth	r0, r3
 8002220:	7afb      	ldrb	r3, [r7, #11]
 8002222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002226:	b2db      	uxtb	r3, r3
 8002228:	b299      	uxth	r1, r3
 800222a:	893b      	ldrh	r3, [r7, #8]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	47a0      	blx	r4
 8002230:	4603      	mov	r3, r0
  }
}
 8002232:	4618      	mov	r0, r3
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd90      	pop	{r4, r7, pc}

0800223a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 800223a:	b590      	push	{r4, r7, lr}
 800223c:	b087      	sub	sp, #28
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	461a      	mov	r2, r3
 8002246:	460b      	mov	r3, r1
 8002248:	72fb      	strb	r3, [r7, #11]
 800224a:	4613      	mov	r3, r2
 800224c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	685c      	ldr	r4, [r3, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6898      	ldr	r0, [r3, #8]
 8002256:	893b      	ldrh	r3, [r7, #8]
 8002258:	7af9      	ldrb	r1, [r7, #11]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	47a0      	blx	r4
 800225e:	6178      	str	r0, [r7, #20]
  return ret;
 8002260:	697b      	ldr	r3, [r7, #20]
}
 8002262:	4618      	mov	r0, r3
 8002264:	371c      	adds	r7, #28
 8002266:	46bd      	mov	sp, r7
 8002268:	bd90      	pop	{r4, r7, pc}

0800226a <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800226a:	b590      	push	{r4, r7, lr}
 800226c:	b087      	sub	sp, #28
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	461a      	mov	r2, r3
 8002276:	460b      	mov	r3, r1
 8002278:	72fb      	strb	r3, [r7, #11]
 800227a:	4613      	mov	r3, r2
 800227c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681c      	ldr	r4, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6898      	ldr	r0, [r3, #8]
 8002286:	893b      	ldrh	r3, [r7, #8]
 8002288:	7af9      	ldrb	r1, [r7, #11]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	47a0      	blx	r4
 800228e:	6178      	str	r0, [r7, #20]
  return ret;
 8002290:	697b      	ldr	r3, [r7, #20]
}
 8002292:	4618      	mov	r0, r3
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	bd90      	pop	{r4, r7, pc}

0800229a <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80022a6:	f107 0208 	add.w	r2, r7, #8
 80022aa:	2301      	movs	r3, #1
 80022ac:	2120      	movs	r1, #32
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ffc3 	bl	800223a <hts221_read_reg>
 80022b4:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10f      	bne.n	80022dc <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	7a3b      	ldrb	r3, [r7, #8]
 80022c6:	f362 0301 	bfi	r3, r2, #0, #2
 80022ca:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80022cc:	f107 0208 	add.w	r2, r7, #8
 80022d0:	2301      	movs	r3, #1
 80022d2:	2120      	movs	r1, #32
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ffc8 	bl	800226a <hts221_write_reg>
 80022da:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80022dc:	68fb      	ldr	r3, [r7, #12]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80022f2:	f107 0208 	add.w	r2, r7, #8
 80022f6:	2301      	movs	r3, #1
 80022f8:	2120      	movs	r1, #32
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff ff9d 	bl	800223a <hts221_read_reg>
 8002300:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8002302:	7a3b      	ldrb	r3, [r7, #8]
 8002304:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b03      	cmp	r3, #3
 800230c:	d81a      	bhi.n	8002344 <hts221_data_rate_get+0x5c>
 800230e:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <hts221_data_rate_get+0x2c>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002325 	.word	0x08002325
 8002318:	0800232d 	.word	0x0800232d
 800231c:	08002335 	.word	0x08002335
 8002320:	0800233d 	.word	0x0800233d
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
      break;
 800232a:	e00f      	b.n	800234c <hts221_data_rate_get+0x64>
    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
      break;
 8002332:	e00b      	b.n	800234c <hts221_data_rate_get+0x64>
    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2202      	movs	r2, #2
 8002338:	701a      	strb	r2, [r3, #0]
      break;
 800233a:	e007      	b.n	800234c <hts221_data_rate_get+0x64>
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
      break;
 8002342:	e003      	b.n	800234c <hts221_data_rate_get+0x64>
    default:
      *val = HTS221_ODR_ND;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	2204      	movs	r2, #4
 8002348:	701a      	strb	r2, [r3, #0]
      break;
 800234a:	bf00      	nop
  }

  return ret;
 800234c:	68fb      	ldr	r3, [r7, #12]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop

08002358 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8002364:	f107 0208 	add.w	r2, r7, #8
 8002368:	2301      	movs	r3, #1
 800236a:	2120      	movs	r1, #32
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ff64 	bl	800223a <hts221_read_reg>
 8002372:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10f      	bne.n	800239a <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	b2da      	uxtb	r2, r3
 8002382:	7a3b      	ldrb	r3, [r7, #8]
 8002384:	f362 0382 	bfi	r3, r2, #2, #1
 8002388:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800238a:	f107 0208 	add.w	r2, r7, #8
 800238e:	2301      	movs	r3, #1
 8002390:	2120      	movs	r1, #32
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ff69 	bl	800226a <hts221_write_reg>
 8002398:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800239a:	68fb      	ldr	r3, [r7, #12]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80023ae:	f107 0208 	add.w	r2, r7, #8
 80023b2:	2302      	movs	r3, #2
 80023b4:	2128      	movs	r1, #40	; 0x28
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ff3f 	bl	800223a <hts221_read_reg>
 80023bc:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80023be:	7a7b      	ldrb	r3, [r7, #9]
 80023c0:	b21a      	sxth	r2, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	7a3b      	ldrb	r3, [r7, #8]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	b29b      	uxth	r3, r3
 80023da:	b21a      	sxth	r2, r3
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	801a      	strh	r2, [r3, #0]

  return ret;
 80023e0:	68fb      	ldr	r3, [r7, #12]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80023f4:	f107 0208 	add.w	r2, r7, #8
 80023f8:	2302      	movs	r3, #2
 80023fa:	212a      	movs	r1, #42	; 0x2a
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff1c 	bl	800223a <hts221_read_reg>
 8002402:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002404:	7a7b      	ldrb	r3, [r7, #9]
 8002406:	b21a      	sxth	r2, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002412:	b29b      	uxth	r3, r3
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	b29a      	uxth	r2, r3
 8002418:	7a3b      	ldrb	r3, [r7, #8]
 800241a:	b29b      	uxth	r3, r3
 800241c:	4413      	add	r3, r2
 800241e:	b29b      	uxth	r3, r3
 8002420:	b21a      	sxth	r2, r3
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	801a      	strh	r2, [r3, #0]

  return ret;
 8002426:	68fb      	ldr	r3, [r7, #12]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800243a:	2301      	movs	r3, #1
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	210f      	movs	r1, #15
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff fefa 	bl	800223a <hts221_read_reg>
 8002446:	60f8      	str	r0, [r7, #12]
  return ret;
 8002448:	68fb      	ldr	r3, [r7, #12]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800245e:	f107 0208 	add.w	r2, r7, #8
 8002462:	2301      	movs	r3, #1
 8002464:	2120      	movs	r1, #32
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff fee7 	bl	800223a <hts221_read_reg>
 800246c:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10f      	bne.n	8002494 <hts221_power_on_set+0x42>
    reg.pd = val;
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	b2da      	uxtb	r2, r3
 800247c:	7a3b      	ldrb	r3, [r7, #8]
 800247e:	f362 13c7 	bfi	r3, r2, #7, #1
 8002482:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8002484:	f107 0208 	add.w	r2, r7, #8
 8002488:	2301      	movs	r3, #1
 800248a:	2120      	movs	r1, #32
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff feec 	bl	800226a <hts221_write_reg>
 8002492:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002494:	68fb      	ldr	r3, [r7, #12]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80024a8:	f107 020b 	add.w	r2, r7, #11
 80024ac:	2301      	movs	r3, #1
 80024ae:	2130      	movs	r1, #48	; 0x30
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fec2 	bl	800223a <hts221_read_reg>
 80024b6:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80024b8:	7afb      	ldrb	r3, [r7, #11]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80024c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80024d0:	68fb      	ldr	r3, [r7, #12]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80024e4:	f107 020b 	add.w	r2, r7, #11
 80024e8:	2301      	movs	r3, #1
 80024ea:	2131      	movs	r1, #49	; 0x31
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff fea4 	bl	800223a <hts221_read_reg>
 80024f2:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80024f4:	7afb      	ldrb	r3, [r7, #11]
 80024f6:	ee07 3a90 	vmov	s15, r3
 80024fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002502:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800250c:	68fb      	ldr	r3, [r7, #12]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8002520:	f107 020f 	add.w	r2, r7, #15
 8002524:	2301      	movs	r3, #1
 8002526:	2132      	movs	r1, #50	; 0x32
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff fe86 	bl	800223a <hts221_read_reg>
 800252e:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d11b      	bne.n	800256e <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8002536:	f107 0210 	add.w	r2, r7, #16
 800253a:	2301      	movs	r3, #1
 800253c:	2135      	movs	r1, #53	; 0x35
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff fe7b 	bl	800223a <hts221_read_reg>
 8002544:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8002546:	7c3b      	ldrb	r3, [r7, #16]
 8002548:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800254c:	b2db      	uxtb	r3, r3
 800254e:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	4413      	add	r3, r2
 8002558:	ee07 3a90 	vmov	s15, r3
 800255c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002560:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002564:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 800256e:	697b      	ldr	r3, [r7, #20]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8002582:	f107 020f 	add.w	r2, r7, #15
 8002586:	2301      	movs	r3, #1
 8002588:	2133      	movs	r1, #51	; 0x33
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff fe55 	bl	800223a <hts221_read_reg>
 8002590:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d11b      	bne.n	80025d0 <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8002598:	f107 0210 	add.w	r2, r7, #16
 800259c:	2301      	movs	r3, #1
 800259e:	2135      	movs	r1, #53	; 0x35
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff fe4a 	bl	800223a <hts221_read_reg>
 80025a6:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80025a8:	7c3b      	ldrb	r3, [r7, #16]
 80025aa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	4413      	add	r3, r2
 80025ba:	ee07 3a90 	vmov	s15, r3
 80025be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025c2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80025c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80025d0:	697b      	ldr	r3, [r7, #20]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80025e4:	f107 0208 	add.w	r2, r7, #8
 80025e8:	2302      	movs	r3, #2
 80025ea:	2136      	movs	r1, #54	; 0x36
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff fe24 	bl	800223a <hts221_read_reg>
 80025f2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80025f4:	7a7b      	ldrb	r3, [r7, #9]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	7a3b      	ldrb	r3, [r7, #8]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	4413      	add	r3, r2
 8002602:	b29b      	uxth	r3, r3
 8002604:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002606:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8002618:	68fb      	ldr	r3, [r7, #12]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 800262c:	f107 0208 	add.w	r2, r7, #8
 8002630:	2302      	movs	r3, #2
 8002632:	213a      	movs	r1, #58	; 0x3a
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff fe00 	bl	800223a <hts221_read_reg>
 800263a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800263c:	7a7b      	ldrb	r3, [r7, #9]
 800263e:	b29b      	uxth	r3, r3
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	b29a      	uxth	r2, r3
 8002644:	7a3b      	ldrb	r3, [r7, #8]
 8002646:	b29b      	uxth	r3, r3
 8002648:	4413      	add	r3, r2
 800264a:	b29b      	uxth	r3, r3
 800264c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800264e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002652:	ee07 3a90 	vmov	s15, r3
 8002656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8002660:	68fb      	ldr	r3, [r7, #12]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8002674:	f107 0208 	add.w	r2, r7, #8
 8002678:	2302      	movs	r3, #2
 800267a:	213c      	movs	r1, #60	; 0x3c
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fddc 	bl	800223a <hts221_read_reg>
 8002682:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002684:	7a7b      	ldrb	r3, [r7, #9]
 8002686:	b29b      	uxth	r3, r3
 8002688:	021b      	lsls	r3, r3, #8
 800268a:	b29a      	uxth	r2, r3
 800268c:	7a3b      	ldrb	r3, [r7, #8]
 800268e:	b29b      	uxth	r3, r3
 8002690:	4413      	add	r3, r2
 8002692:	b29b      	uxth	r3, r3
 8002694:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002696:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80026a8:	68fb      	ldr	r3, [r7, #12]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80026bc:	f107 0208 	add.w	r2, r7, #8
 80026c0:	2302      	movs	r3, #2
 80026c2:	213e      	movs	r1, #62	; 0x3e
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff fdb8 	bl	800223a <hts221_read_reg>
 80026ca:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80026cc:	7a7b      	ldrb	r3, [r7, #9]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	7a3b      	ldrb	r3, [r7, #8]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	4413      	add	r3, r2
 80026da:	b29b      	uxth	r3, r3
 80026dc:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80026de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80026f0:	68fb      	ldr	r3, [r7, #12]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <LIS2DW12_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d103      	bne.n	8002718 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8002710:	f04f 33ff 	mov.w	r3, #4294967295
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e04d      	b.n	80027b4 <LIS2DW12_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	7b1a      	ldrb	r2, [r3, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	699a      	ldr	r2, [r3, #24]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a1b      	ldr	r2, [pc, #108]	; (80027c0 <LIS2DW12_RegisterBusIO+0xc4>)
 8002754:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <LIS2DW12_RegisterBusIO+0xc8>)
 800275a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d103      	bne.n	8002772 <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	e020      	b.n	80027b4 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4798      	blx	r3
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <LIS2DW12_RegisterBusIO+0x8a>
    {
      ret = LIS2DW12_ERROR;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	e016      	b.n	80027b4 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d112      	bne.n	80027b4 <LIS2DW12_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10d      	bne.n	80027b4 <LIS2DW12_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8002798:	2305      	movs	r3, #5
 800279a:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 800279c:	7afb      	ldrb	r3, [r7, #11]
 800279e:	461a      	mov	r2, r3
 80027a0:	2121      	movs	r1, #33	; 0x21
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fd87 	bl	80032b6 <LIS2DW12_Write_Reg>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <LIS2DW12_RegisterBusIO+0xb8>
          {
            ret = LIS2DW12_ERROR;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80027b4:	68fb      	ldr	r3, [r7, #12]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	08003649 	.word	0x08003649
 80027c4:	0800367f 	.word	0x0800367f

080027c8 <LIS2DW12_Init>:
 * @brief  Initialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	331c      	adds	r3, #28
 80027d4:	2101      	movs	r1, #1
 80027d6:	4618      	mov	r0, r3
 80027d8:	f001 fa94 	bl	8003d04 <lis2dw12_auto_increment_set>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	e04b      	b.n	8002880 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	331c      	adds	r3, #28
 80027ec:	2101      	movs	r1, #1
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 f9a8 	bl	8003b44 <lis2dw12_block_data_update_set>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295
 80027fe:	e03f      	b.n	8002880 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	331c      	adds	r3, #28
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f001 faa2 	bl	8003d50 <lis2dw12_fifo_mode_set>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e033      	b.n	8002880 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	331c      	adds	r3, #28
 800281c:	2104      	movs	r1, #4
 800281e:	4618      	mov	r0, r3
 8002820:	f000 ff78 	bl	8003714 <lis2dw12_power_mode_set>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
 800282e:	e027      	b.n	8002880 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a15      	ldr	r2, [pc, #84]	; (8002888 <LIS2DW12_Init+0xc0>)
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	331c      	adds	r3, #28
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f001 f869 	bl	8003924 <lis2dw12_data_rate_set>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
 800285c:	e010      	b.n	8002880 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	331c      	adds	r3, #28
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f001 f993 	bl	8003b90 <lis2dw12_full_scale_set>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8002870:	f04f 33ff 	mov.w	r3, #4294967295
 8002874:	e004      	b.n	8002880 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	42c80000 	.word	0x42c80000

0800288c <LIS2DW12_DeInit>:
 * @brief  Deinitialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f888 	bl	80029aa <LIS2DW12_ACC_Disable>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
 80028a4:	e010      	b.n	80028c8 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <LIS2DW12_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	331c      	adds	r3, #28
 80028de:	6839      	ldr	r1, [r7, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 f9fe 	bl	8003ce2 <lis2dw12_device_id_get>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295
 80028f0:	e000      	b.n	80028f4 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <LIS2DW12_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2DW12 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2200      	movs	r2, #0
 8002916:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2200      	movs	r2, #0
 800291c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2200      	movs	r2, #0
 8002922:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2210      	movs	r2, #16
 8002928:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2200      	movs	r2, #0
 800292e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	4a06      	ldr	r2, [pc, #24]	; (8002954 <LIS2DW12_GetCapabilities+0x58>)
 800293c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	44c80000 	.word	0x44c80000

08002958 <LIS2DW12_ACC_Enable>:
 * @brief  Enable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e019      	b.n	80029a2 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode, pObj->acc_low_noise) != LIS2DW12_OK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002980:	461a      	mov	r2, r3
 8002982:	eeb0 0a67 	vmov.f32	s0, s15
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fcb0 	bl	80032ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <LIS2DW12_ACC_Enable+0x40>
  {
    return LIS2DW12_ERROR;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	e004      	b.n	80029a2 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <LIS2DW12_ACC_Disable>:
 * @brief  Disable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	e010      	b.n	80029e2 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	331c      	adds	r3, #28
 80029c4:	2100      	movs	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 ffac 	bl	8003924 <lis2dw12_data_rate_set>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	e004      	b.n	80029e2 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <LIS2DW12_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	331c      	adds	r3, #28
 80029fe:	f107 020b 	add.w	r2, r7, #11
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f001 f8e9 	bl	8003bdc <lis2dw12_full_scale_get>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8002a10:	f04f 33ff 	mov.w	r3, #4294967295
 8002a14:	e0a0      	b.n	8002b58 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	331c      	adds	r3, #28
 8002a1a:	f107 020a 	add.w	r2, r7, #10
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fec5 	bl	80037b0 <lis2dw12_power_mode_get>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8002a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a30:	e092      	b.n	8002b58 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch(mode)
 8002a32:	7abb      	ldrb	r3, [r7, #10]
 8002a34:	2b1b      	cmp	r3, #27
 8002a36:	f200 8087 	bhi.w	8002b48 <LIS2DW12_ACC_GetSensitivity+0x15c>
 8002a3a:	a201      	add	r2, pc, #4	; (adr r2, 8002a40 <LIS2DW12_ACC_GetSensitivity+0x54>)
 8002a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a40:	08002ab1 	.word	0x08002ab1
 8002a44:	08002afd 	.word	0x08002afd
 8002a48:	08002afd 	.word	0x08002afd
 8002a4c:	08002afd 	.word	0x08002afd
 8002a50:	08002afd 	.word	0x08002afd
 8002a54:	08002b49 	.word	0x08002b49
 8002a58:	08002b49 	.word	0x08002b49
 8002a5c:	08002b49 	.word	0x08002b49
 8002a60:	08002ab1 	.word	0x08002ab1
 8002a64:	08002afd 	.word	0x08002afd
 8002a68:	08002afd 	.word	0x08002afd
 8002a6c:	08002afd 	.word	0x08002afd
 8002a70:	08002b49 	.word	0x08002b49
 8002a74:	08002b49 	.word	0x08002b49
 8002a78:	08002b49 	.word	0x08002b49
 8002a7c:	08002b49 	.word	0x08002b49
 8002a80:	08002ab1 	.word	0x08002ab1
 8002a84:	08002afd 	.word	0x08002afd
 8002a88:	08002afd 	.word	0x08002afd
 8002a8c:	08002afd 	.word	0x08002afd
 8002a90:	08002afd 	.word	0x08002afd
 8002a94:	08002b49 	.word	0x08002b49
 8002a98:	08002b49 	.word	0x08002b49
 8002a9c:	08002b49 	.word	0x08002b49
 8002aa0:	08002ab1 	.word	0x08002ab1
 8002aa4:	08002afd 	.word	0x08002afd
 8002aa8:	08002afd 	.word	0x08002afd
 8002aac:	08002afd 	.word	0x08002afd
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8002ab0:	7afb      	ldrb	r3, [r7, #11]
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d81a      	bhi.n	8002aec <LIS2DW12_ACC_GetSensitivity+0x100>
 8002ab6:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08002acd 	.word	0x08002acd
 8002ac0:	08002ad5 	.word	0x08002ad5
 8002ac4:	08002add 	.word	0x08002add
 8002ac8:	08002ae5 	.word	0x08002ae5
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	4a24      	ldr	r2, [pc, #144]	; (8002b60 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002ad0:	601a      	str	r2, [r3, #0]
           break;
 8002ad2:	e012      	b.n	8002afa <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8002ad8:	601a      	str	r2, [r3, #0]
          break;
 8002ada:	e00e      	b.n	8002afa <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	4a22      	ldr	r2, [pc, #136]	; (8002b68 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8002ae0:	601a      	str	r2, [r3, #0]
           break;
 8002ae2:	e00a      	b.n	8002afa <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4a21      	ldr	r2, [pc, #132]	; (8002b6c <LIS2DW12_ACC_GetSensitivity+0x180>)
 8002ae8:	601a      	str	r2, [r3, #0]
          break;
 8002aea:	e006      	b.n	8002afa <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	4a20      	ldr	r2, [pc, #128]	; (8002b70 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002af0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002af2:	f04f 33ff 	mov.w	r3, #4294967295
 8002af6:	60fb      	str	r3, [r7, #12]
          break;
 8002af8:	bf00      	nop
      }
      break;
 8002afa:	e02c      	b.n	8002b56 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8002afc:	7afb      	ldrb	r3, [r7, #11]
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d81a      	bhi.n	8002b38 <LIS2DW12_ACC_GetSensitivity+0x14c>
 8002b02:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8002b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002b21 	.word	0x08002b21
 8002b10:	08002b29 	.word	0x08002b29
 8002b14:	08002b31 	.word	0x08002b31
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <LIS2DW12_ACC_GetSensitivity+0x188>)
 8002b1c:	601a      	str	r2, [r3, #0]
           break;
 8002b1e:	e012      	b.n	8002b46 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	4a15      	ldr	r2, [pc, #84]	; (8002b78 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8002b24:	601a      	str	r2, [r3, #0]
          break;
 8002b26:	e00e      	b.n	8002b46 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	4a0d      	ldr	r2, [pc, #52]	; (8002b60 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002b2c:	601a      	str	r2, [r3, #0]
           break;
 8002b2e:	e00a      	b.n	8002b46 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8002b34:	601a      	str	r2, [r3, #0]
          break;
 8002b36:	e006      	b.n	8002b46 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	4a0d      	ldr	r2, [pc, #52]	; (8002b70 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002b3c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	60fb      	str	r3, [r7, #12]
          break;
 8002b44:	bf00      	nop
      }
      break;
 8002b46:	e006      	b.n	8002b56 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4a09      	ldr	r2, [pc, #36]	; (8002b70 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002b4c:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b52:	60fb      	str	r3, [r7, #12]
      break;
 8002b54:	bf00      	nop
  }

  return ret;
 8002b56:	68fb      	ldr	r3, [r7, #12]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	3f79db23 	.word	0x3f79db23
 8002b64:	3ff9db23 	.word	0x3ff9db23
 8002b68:	4079db23 	.word	0x4079db23
 8002b6c:	40f9db23 	.word	0x40f9db23
 8002b70:	bf800000 	.word	0xbf800000
 8002b74:	3e79db23 	.word	0x3e79db23
 8002b78:	3ef9db23 	.word	0x3ef9db23

08002b7c <LIS2DW12_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	331c      	adds	r3, #28
 8002b8e:	f107 020b 	add.w	r2, r7, #11
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 ff0b 	bl	80039b0 <lis2dw12_data_rate_get>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8002ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba4:	e1d4      	b.n	8002f50 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	331c      	adds	r3, #28
 8002baa:	f107 020a 	add.w	r2, r7, #10
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 fdfd 	bl	80037b0 <lis2dw12_power_mode_get>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8002bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc0:	e1c6      	b.n	8002f50 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 8002bc2:	7afb      	ldrb	r3, [r7, #11]
 8002bc4:	2b32      	cmp	r3, #50	; 0x32
 8002bc6:	f200 81bb 	bhi.w	8002f40 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 8002bca:	a201      	add	r2, pc, #4	; (adr r2, 8002bd0 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8002bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd0:	08002c9d 	.word	0x08002c9d
 8002bd4:	08002ca7 	.word	0x08002ca7
 8002bd8:	08002d45 	.word	0x08002d45
 8002bdc:	08002d4d 	.word	0x08002d4d
 8002be0:	08002d55 	.word	0x08002d55
 8002be4:	08002d5d 	.word	0x08002d5d
 8002be8:	08002d65 	.word	0x08002d65
 8002bec:	08002d6d 	.word	0x08002d6d
 8002bf0:	08002e09 	.word	0x08002e09
 8002bf4:	08002ea5 	.word	0x08002ea5
 8002bf8:	08002f41 	.word	0x08002f41
 8002bfc:	08002f41 	.word	0x08002f41
 8002c00:	08002f41 	.word	0x08002f41
 8002c04:	08002f41 	.word	0x08002f41
 8002c08:	08002f41 	.word	0x08002f41
 8002c0c:	08002f41 	.word	0x08002f41
 8002c10:	08002f41 	.word	0x08002f41
 8002c14:	08002f41 	.word	0x08002f41
 8002c18:	08002c9d 	.word	0x08002c9d
 8002c1c:	08002f41 	.word	0x08002f41
 8002c20:	08002f41 	.word	0x08002f41
 8002c24:	08002f41 	.word	0x08002f41
 8002c28:	08002f41 	.word	0x08002f41
 8002c2c:	08002f41 	.word	0x08002f41
 8002c30:	08002f41 	.word	0x08002f41
 8002c34:	08002f41 	.word	0x08002f41
 8002c38:	08002f41 	.word	0x08002f41
 8002c3c:	08002f41 	.word	0x08002f41
 8002c40:	08002f41 	.word	0x08002f41
 8002c44:	08002f41 	.word	0x08002f41
 8002c48:	08002f41 	.word	0x08002f41
 8002c4c:	08002f41 	.word	0x08002f41
 8002c50:	08002f41 	.word	0x08002f41
 8002c54:	08002f41 	.word	0x08002f41
 8002c58:	08002f41 	.word	0x08002f41
 8002c5c:	08002f41 	.word	0x08002f41
 8002c60:	08002f41 	.word	0x08002f41
 8002c64:	08002f41 	.word	0x08002f41
 8002c68:	08002f41 	.word	0x08002f41
 8002c6c:	08002f41 	.word	0x08002f41
 8002c70:	08002f41 	.word	0x08002f41
 8002c74:	08002f41 	.word	0x08002f41
 8002c78:	08002f41 	.word	0x08002f41
 8002c7c:	08002f41 	.word	0x08002f41
 8002c80:	08002f41 	.word	0x08002f41
 8002c84:	08002f41 	.word	0x08002f41
 8002c88:	08002f41 	.word	0x08002f41
 8002c8c:	08002f41 	.word	0x08002f41
 8002c90:	08002f41 	.word	0x08002f41
 8002c94:	08002f41 	.word	0x08002f41
 8002c98:	08002c9d 	.word	0x08002c9d
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
      break;
 8002ca4:	e153      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8002ca6:	7abb      	ldrb	r3, [r7, #10]
 8002ca8:	2b1b      	cmp	r3, #27
 8002caa:	d843      	bhi.n	8002d34 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 8002cac:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 8002cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb2:	bf00      	nop
 8002cb4:	08002d2d 	.word	0x08002d2d
 8002cb8:	08002d2d 	.word	0x08002d2d
 8002cbc:	08002d2d 	.word	0x08002d2d
 8002cc0:	08002d2d 	.word	0x08002d2d
 8002cc4:	08002d25 	.word	0x08002d25
 8002cc8:	08002d35 	.word	0x08002d35
 8002ccc:	08002d35 	.word	0x08002d35
 8002cd0:	08002d35 	.word	0x08002d35
 8002cd4:	08002d2d 	.word	0x08002d2d
 8002cd8:	08002d2d 	.word	0x08002d2d
 8002cdc:	08002d2d 	.word	0x08002d2d
 8002ce0:	08002d2d 	.word	0x08002d2d
 8002ce4:	08002d35 	.word	0x08002d35
 8002ce8:	08002d35 	.word	0x08002d35
 8002cec:	08002d35 	.word	0x08002d35
 8002cf0:	08002d35 	.word	0x08002d35
 8002cf4:	08002d2d 	.word	0x08002d2d
 8002cf8:	08002d2d 	.word	0x08002d2d
 8002cfc:	08002d2d 	.word	0x08002d2d
 8002d00:	08002d2d 	.word	0x08002d2d
 8002d04:	08002d25 	.word	0x08002d25
 8002d08:	08002d35 	.word	0x08002d35
 8002d0c:	08002d35 	.word	0x08002d35
 8002d10:	08002d35 	.word	0x08002d35
 8002d14:	08002d2d 	.word	0x08002d2d
 8002d18:	08002d2d 	.word	0x08002d2d
 8002d1c:	08002d2d 	.word	0x08002d2d
 8002d20:	08002d2d 	.word	0x08002d2d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	4a8c      	ldr	r2, [pc, #560]	; (8002f58 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002d28:	601a      	str	r2, [r3, #0]
           break;
 8002d2a:	e00a      	b.n	8002d42 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4a8b      	ldr	r2, [pc, #556]	; (8002f5c <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8002d30:	601a      	str	r2, [r3, #0]
          break;
 8002d32:	e006      	b.n	8002d42 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	4a8a      	ldr	r2, [pc, #552]	; (8002f60 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002d38:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3e:	60fb      	str	r3, [r7, #12]
          break;
 8002d40:	bf00      	nop
      }
      break;
 8002d42:	e104      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	4a84      	ldr	r2, [pc, #528]	; (8002f58 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002d48:	601a      	str	r2, [r3, #0]
      break;
 8002d4a:	e100      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4a85      	ldr	r2, [pc, #532]	; (8002f64 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 8002d50:	601a      	str	r2, [r3, #0]
      break;
 8002d52:	e0fc      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	4a84      	ldr	r2, [pc, #528]	; (8002f68 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 8002d58:	601a      	str	r2, [r3, #0]
      break;
 8002d5a:	e0f8      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	4a83      	ldr	r2, [pc, #524]	; (8002f6c <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 8002d60:	601a      	str	r2, [r3, #0]
      break;
 8002d62:	e0f4      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4a82      	ldr	r2, [pc, #520]	; (8002f70 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002d68:	601a      	str	r2, [r3, #0]
      break;
 8002d6a:	e0f0      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8002d6c:	7abb      	ldrb	r3, [r7, #10]
 8002d6e:	2b1b      	cmp	r3, #27
 8002d70:	d842      	bhi.n	8002df8 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 8002d72:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002df1 	.word	0x08002df1
 8002d7c:	08002df1 	.word	0x08002df1
 8002d80:	08002df1 	.word	0x08002df1
 8002d84:	08002df1 	.word	0x08002df1
 8002d88:	08002de9 	.word	0x08002de9
 8002d8c:	08002df9 	.word	0x08002df9
 8002d90:	08002df9 	.word	0x08002df9
 8002d94:	08002df9 	.word	0x08002df9
 8002d98:	08002df1 	.word	0x08002df1
 8002d9c:	08002df1 	.word	0x08002df1
 8002da0:	08002df1 	.word	0x08002df1
 8002da4:	08002df1 	.word	0x08002df1
 8002da8:	08002df9 	.word	0x08002df9
 8002dac:	08002df9 	.word	0x08002df9
 8002db0:	08002df9 	.word	0x08002df9
 8002db4:	08002df9 	.word	0x08002df9
 8002db8:	08002df1 	.word	0x08002df1
 8002dbc:	08002df1 	.word	0x08002df1
 8002dc0:	08002df1 	.word	0x08002df1
 8002dc4:	08002df1 	.word	0x08002df1
 8002dc8:	08002de9 	.word	0x08002de9
 8002dcc:	08002df9 	.word	0x08002df9
 8002dd0:	08002df9 	.word	0x08002df9
 8002dd4:	08002df9 	.word	0x08002df9
 8002dd8:	08002df1 	.word	0x08002df1
 8002ddc:	08002df1 	.word	0x08002df1
 8002de0:	08002df1 	.word	0x08002df1
 8002de4:	08002df1 	.word	0x08002df1
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4a62      	ldr	r2, [pc, #392]	; (8002f74 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 8002dec:	601a      	str	r2, [r3, #0]
           break;
 8002dee:	e00a      	b.n	8002e06 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4a5f      	ldr	r2, [pc, #380]	; (8002f70 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002df4:	601a      	str	r2, [r3, #0]
          break;
 8002df6:	e006      	b.n	8002e06 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4a59      	ldr	r2, [pc, #356]	; (8002f60 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002dfc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002e02:	60fb      	str	r3, [r7, #12]
          break;
 8002e04:	bf00      	nop
      }
      break;
 8002e06:	e0a2      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8002e08:	7abb      	ldrb	r3, [r7, #10]
 8002e0a:	2b1b      	cmp	r3, #27
 8002e0c:	d842      	bhi.n	8002e94 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 8002e0e:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e8d 	.word	0x08002e8d
 8002e18:	08002e8d 	.word	0x08002e8d
 8002e1c:	08002e8d 	.word	0x08002e8d
 8002e20:	08002e8d 	.word	0x08002e8d
 8002e24:	08002e85 	.word	0x08002e85
 8002e28:	08002e95 	.word	0x08002e95
 8002e2c:	08002e95 	.word	0x08002e95
 8002e30:	08002e95 	.word	0x08002e95
 8002e34:	08002e8d 	.word	0x08002e8d
 8002e38:	08002e8d 	.word	0x08002e8d
 8002e3c:	08002e8d 	.word	0x08002e8d
 8002e40:	08002e8d 	.word	0x08002e8d
 8002e44:	08002e95 	.word	0x08002e95
 8002e48:	08002e95 	.word	0x08002e95
 8002e4c:	08002e95 	.word	0x08002e95
 8002e50:	08002e95 	.word	0x08002e95
 8002e54:	08002e8d 	.word	0x08002e8d
 8002e58:	08002e8d 	.word	0x08002e8d
 8002e5c:	08002e8d 	.word	0x08002e8d
 8002e60:	08002e8d 	.word	0x08002e8d
 8002e64:	08002e85 	.word	0x08002e85
 8002e68:	08002e95 	.word	0x08002e95
 8002e6c:	08002e95 	.word	0x08002e95
 8002e70:	08002e95 	.word	0x08002e95
 8002e74:	08002e8d 	.word	0x08002e8d
 8002e78:	08002e8d 	.word	0x08002e8d
 8002e7c:	08002e8d 	.word	0x08002e8d
 8002e80:	08002e8d 	.word	0x08002e8d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	4a3c      	ldr	r2, [pc, #240]	; (8002f78 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8002e88:	601a      	str	r2, [r3, #0]
           break;
 8002e8a:	e00a      	b.n	8002ea2 <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4a38      	ldr	r2, [pc, #224]	; (8002f70 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002e90:	601a      	str	r2, [r3, #0]
          break;
 8002e92:	e006      	b.n	8002ea2 <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4a32      	ldr	r2, [pc, #200]	; (8002f60 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002e98:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9e:	60fb      	str	r3, [r7, #12]
          break;
 8002ea0:	bf00      	nop
      }
      break;
 8002ea2:	e054      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8002ea4:	7abb      	ldrb	r3, [r7, #10]
 8002ea6:	2b1b      	cmp	r3, #27
 8002ea8:	d842      	bhi.n	8002f30 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 8002eaa:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 8002eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb0:	08002f29 	.word	0x08002f29
 8002eb4:	08002f29 	.word	0x08002f29
 8002eb8:	08002f29 	.word	0x08002f29
 8002ebc:	08002f29 	.word	0x08002f29
 8002ec0:	08002f21 	.word	0x08002f21
 8002ec4:	08002f31 	.word	0x08002f31
 8002ec8:	08002f31 	.word	0x08002f31
 8002ecc:	08002f31 	.word	0x08002f31
 8002ed0:	08002f29 	.word	0x08002f29
 8002ed4:	08002f29 	.word	0x08002f29
 8002ed8:	08002f29 	.word	0x08002f29
 8002edc:	08002f29 	.word	0x08002f29
 8002ee0:	08002f31 	.word	0x08002f31
 8002ee4:	08002f31 	.word	0x08002f31
 8002ee8:	08002f31 	.word	0x08002f31
 8002eec:	08002f31 	.word	0x08002f31
 8002ef0:	08002f29 	.word	0x08002f29
 8002ef4:	08002f29 	.word	0x08002f29
 8002ef8:	08002f29 	.word	0x08002f29
 8002efc:	08002f29 	.word	0x08002f29
 8002f00:	08002f21 	.word	0x08002f21
 8002f04:	08002f31 	.word	0x08002f31
 8002f08:	08002f31 	.word	0x08002f31
 8002f0c:	08002f31 	.word	0x08002f31
 8002f10:	08002f29 	.word	0x08002f29
 8002f14:	08002f29 	.word	0x08002f29
 8002f18:	08002f29 	.word	0x08002f29
 8002f1c:	08002f29 	.word	0x08002f29
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4a16      	ldr	r2, [pc, #88]	; (8002f7c <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8002f24:	601a      	str	r2, [r3, #0]
           break;
 8002f26:	e00a      	b.n	8002f3e <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	4a11      	ldr	r2, [pc, #68]	; (8002f70 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002f2c:	601a      	str	r2, [r3, #0]
          break;
 8002f2e:	e006      	b.n	8002f3e <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	4a0b      	ldr	r2, [pc, #44]	; (8002f60 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002f34:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3a:	60fb      	str	r3, [r7, #12]
          break;
 8002f3c:	bf00      	nop
      }
      break;
 8002f3e:	e006      	b.n	8002f4e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002f44:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	60fb      	str	r3, [r7, #12]
      break;
 8002f4c:	bf00      	nop
  }

  return ret;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	41480000 	.word	0x41480000
 8002f5c:	3fcccccd 	.word	0x3fcccccd
 8002f60:	bf800000 	.word	0xbf800000
 8002f64:	41c80000 	.word	0x41c80000
 8002f68:	42480000 	.word	0x42480000
 8002f6c:	42c80000 	.word	0x42c80000
 8002f70:	43480000 	.word	0x43480000
 8002f74:	43c80000 	.word	0x43c80000
 8002f78:	44480000 	.word	0x44480000
 8002f7c:	44c80000 	.word	0x44c80000

08002f80 <LIS2DW12_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2100      	movs	r1, #0
 8002f90:	ed97 0a00 	vldr	s0, [r7]
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f805 	bl	8002fa4 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8002f9a:	4603      	mov	r3, r0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	ed87 0a02 	vstr	s0, [r7, #8]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	71fb      	strb	r3, [r7, #7]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d109      	bne.n	8002fd6 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8002fc2:	79ba      	ldrb	r2, [r7, #6]
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	ed97 0a02 	vldr	s0, [r7, #8]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f98d 	bl	80032ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	e008      	b.n	8002fe8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8002fd6:	79ba      	ldrb	r2, [r7, #6]
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	ed97 0a02 	vldr	s0, [r7, #8]
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fa9f 	bl	8003524 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8002fe6:	4603      	mov	r3, r0
  }
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <LIS2DW12_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	331c      	adds	r3, #28
 8003002:	f107 020b 	add.w	r2, r7, #11
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fde7 	bl	8003bdc <lis2dw12_full_scale_get>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8003014:	f04f 33ff 	mov.w	r3, #4294967295
 8003018:	e027      	b.n	800306a <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800301a:	7afb      	ldrb	r3, [r7, #11]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d81b      	bhi.n	8003058 <LIS2DW12_ACC_GetFullScale+0x68>
 8003020:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <LIS2DW12_ACC_GetFullScale+0x38>)
 8003022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003026:	bf00      	nop
 8003028:	08003039 	.word	0x08003039
 800302c:	08003041 	.word	0x08003041
 8003030:	08003049 	.word	0x08003049
 8003034:	08003051 	.word	0x08003051
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2202      	movs	r2, #2
 800303c:	601a      	str	r2, [r3, #0]
      break;
 800303e:	e013      	b.n	8003068 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2204      	movs	r2, #4
 8003044:	601a      	str	r2, [r3, #0]
      break;
 8003046:	e00f      	b.n	8003068 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2208      	movs	r2, #8
 800304c:	601a      	str	r2, [r3, #0]
      break;
 800304e:	e00b      	b.n	8003068 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2210      	movs	r2, #16
 8003054:	601a      	str	r2, [r3, #0]
      break;
 8003056:	e007      	b.n	8003068 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f04f 32ff 	mov.w	r2, #4294967295
 800305e:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003060:	f04f 33ff 	mov.w	r3, #4294967295
 8003064:	60fb      	str	r3, [r7, #12]
      break;
 8003066:	bf00      	nop
  }

  return ret;
 8003068:	68fb      	ldr	r3, [r7, #12]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop

08003074 <LIS2DW12_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
         : (FullScale <= 4) ? LIS2DW12_4g
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b02      	cmp	r3, #2
 8003082:	dd0b      	ble.n	800309c <LIS2DW12_ACC_SetFullScale+0x28>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b04      	cmp	r3, #4
 8003088:	dd06      	ble.n	8003098 <LIS2DW12_ACC_SetFullScale+0x24>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b08      	cmp	r3, #8
 800308e:	dc01      	bgt.n	8003094 <LIS2DW12_ACC_SetFullScale+0x20>
 8003090:	2302      	movs	r3, #2
 8003092:	e004      	b.n	800309e <LIS2DW12_ACC_SetFullScale+0x2a>
 8003094:	2303      	movs	r3, #3
 8003096:	e002      	b.n	800309e <LIS2DW12_ACC_SetFullScale+0x2a>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <LIS2DW12_ACC_SetFullScale+0x2a>
 800309c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 800309e:	73fb      	strb	r3, [r7, #15]
         : (FullScale <= 8) ? LIS2DW12_8g
         :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	331c      	adds	r3, #28
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fd71 	bl	8003b90 <lis2dw12_full_scale_set>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80030b4:	f04f 33ff 	mov.w	r3, #4294967295
 80030b8:	e000      	b.n	80030bc <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <LIS2DW12_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	331c      	adds	r3, #28
 80030d6:	f107 020b 	add.w	r2, r7, #11
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fb67 	bl	80037b0 <lis2dw12_power_mode_get>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80030e8:	f04f 33ff 	mov.w	r3, #4294967295
 80030ec:	e089      	b.n	8003202 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	331c      	adds	r3, #28
 80030f2:	f107 020c 	add.w	r2, r7, #12
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fda7 	bl	8003c4c <lis2dw12_acceleration_raw_get>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8003104:	f04f 33ff 	mov.w	r3, #4294967295
 8003108:	e07b      	b.n	8003202 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch(mode)
 800310a:	7afb      	ldrb	r3, [r7, #11]
 800310c:	2b1b      	cmp	r3, #27
 800310e:	d873      	bhi.n	80031f8 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8003110:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	08003189 	.word	0x08003189
 800311c:	080031c1 	.word	0x080031c1
 8003120:	080031c1 	.word	0x080031c1
 8003124:	080031c1 	.word	0x080031c1
 8003128:	080031c1 	.word	0x080031c1
 800312c:	080031f9 	.word	0x080031f9
 8003130:	080031f9 	.word	0x080031f9
 8003134:	080031f9 	.word	0x080031f9
 8003138:	08003189 	.word	0x08003189
 800313c:	080031c1 	.word	0x080031c1
 8003140:	080031c1 	.word	0x080031c1
 8003144:	080031c1 	.word	0x080031c1
 8003148:	080031f9 	.word	0x080031f9
 800314c:	080031f9 	.word	0x080031f9
 8003150:	080031f9 	.word	0x080031f9
 8003154:	080031f9 	.word	0x080031f9
 8003158:	08003189 	.word	0x08003189
 800315c:	080031c1 	.word	0x080031c1
 8003160:	080031c1 	.word	0x080031c1
 8003164:	080031c1 	.word	0x080031c1
 8003168:	080031c1 	.word	0x080031c1
 800316c:	080031f9 	.word	0x080031f9
 8003170:	080031f9 	.word	0x080031f9
 8003174:	080031f9 	.word	0x080031f9
 8003178:	08003189 	.word	0x08003189
 800317c:	080031c1 	.word	0x080031c1
 8003180:	080031c1 	.word	0x080031c1
 8003184:	080031c1 	.word	0x080031c1
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8003188:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	da00      	bge.n	8003192 <LIS2DW12_ACC_GetAxesRaw+0xce>
 8003190:	330f      	adds	r3, #15
 8003192:	111b      	asrs	r3, r3, #4
 8003194:	b21a      	sxth	r2, r3
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800319a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	da00      	bge.n	80031a4 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 80031a2:	330f      	adds	r3, #15
 80031a4:	111b      	asrs	r3, r3, #4
 80031a6:	b21a      	sxth	r2, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 80031ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	da00      	bge.n	80031b6 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 80031b4:	330f      	adds	r3, #15
 80031b6:	111b      	asrs	r3, r3, #4
 80031b8:	b21a      	sxth	r2, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	809a      	strh	r2, [r3, #4]
      break;
 80031be:	e01f      	b.n	8003200 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 80031c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	da00      	bge.n	80031ca <LIS2DW12_ACC_GetAxesRaw+0x106>
 80031c8:	3303      	adds	r3, #3
 80031ca:	109b      	asrs	r3, r3, #2
 80031cc:	b21a      	sxth	r2, r3
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 80031d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	da00      	bge.n	80031dc <LIS2DW12_ACC_GetAxesRaw+0x118>
 80031da:	3303      	adds	r3, #3
 80031dc:	109b      	asrs	r3, r3, #2
 80031de:	b21a      	sxth	r2, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80031e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	da00      	bge.n	80031ee <LIS2DW12_ACC_GetAxesRaw+0x12a>
 80031ec:	3303      	adds	r3, #3
 80031ee:	109b      	asrs	r3, r3, #2
 80031f0:	b21a      	sxth	r2, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	809a      	strh	r2, [r3, #4]
      break;
 80031f6:	e003      	b.n	8003200 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 80031f8:	f04f 33ff 	mov.w	r3, #4294967295
 80031fc:	617b      	str	r3, [r7, #20]
      break;
 80031fe:	bf00      	nop
  }

  return ret;
 8003200:	697b      	ldr	r3, [r7, #20]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop

0800320c <LIS2DW12_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 800321c:	f107 0310 	add.w	r3, r7, #16
 8003220:	4619      	mov	r1, r3
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ff4e 	bl	80030c4 <LIS2DW12_ACC_GetAxesRaw>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	e03c      	b.n	80032ae <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8003234:	f107 030c 	add.w	r3, r7, #12
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff fbd6 	bl	80029ec <LIS2DW12_ACC_GetSensitivity>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8003246:	f04f 33ff 	mov.w	r3, #4294967295
 800324a:	e030      	b.n	80032ae <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800324c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003250:	ee07 3a90 	vmov	s15, r3
 8003254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003258:	edd7 7a03 	vldr	s15, [r7, #12]
 800325c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003264:	ee17 2a90 	vmov	r2, s15
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800326c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003270:	ee07 3a90 	vmov	s15, r3
 8003274:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003278:	edd7 7a03 	vldr	s15, [r7, #12]
 800327c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003284:	ee17 2a90 	vmov	r2, s15
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800328c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003290:	ee07 3a90 	vmov	s15, r3
 8003294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003298:	edd7 7a03 	vldr	s15, [r7, #12]
 800329c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032a4:	ee17 2a90 	vmov	r2, s15
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <LIS2DW12_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	460b      	mov	r3, r1
 80032c0:	70fb      	strb	r3, [r7, #3]
 80032c2:	4613      	mov	r3, r2
 80032c4:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f103 001c 	add.w	r0, r3, #28
 80032cc:	1cba      	adds	r2, r7, #2
 80032ce:	78f9      	ldrb	r1, [r7, #3]
 80032d0:	2301      	movs	r3, #1
 80032d2:	f000 fa07 	bl	80036e4 <lis2dw12_write_reg>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 80032dc:	f04f 33ff 	mov.w	r3, #4294967295
 80032e0:	e000      	b.n	80032e4 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80032f8:	460b      	mov	r3, r1
 80032fa:	71fb      	strb	r3, [r7, #7]
 80032fc:	4613      	mov	r3, r2
 80032fe:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	3b01      	subs	r3, #1
 8003304:	2b03      	cmp	r3, #3
 8003306:	d80b      	bhi.n	8003320 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8003308:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	0800334d 	.word	0x0800334d
 8003314:	08003379 	.word	0x08003379
 8003318:	080033a5 	.word	0x080033a5
 800331c:	080033d1 	.word	0x080033d1
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8003320:	79bb      	ldrb	r3, [r7, #6]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d002      	beq.n	800332c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8003326:	2304      	movs	r3, #4
 8003328:	75fb      	strb	r3, [r7, #23]
          break;
 800332a:	e002      	b.n	8003332 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 800332c:	2314      	movs	r3, #20
 800332e:	75fb      	strb	r3, [r7, #23]
          break;
 8003330:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if(Odr < 12.5f)
 8003332:	edd7 7a02 	vldr	s15, [r7, #8]
 8003336:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800333a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800333e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003342:	d400      	bmi.n	8003346 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8003344:	e05a      	b.n	80033fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8003346:	4b6f      	ldr	r3, [pc, #444]	; (8003504 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8003348:	60bb      	str	r3, [r7, #8]
      break;
 800334a:	e057      	b.n	80033fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 800334c:	79bb      	ldrb	r3, [r7, #6]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d002      	beq.n	8003358 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8003352:	2303      	movs	r3, #3
 8003354:	75fb      	strb	r3, [r7, #23]
          break;
 8003356:	e002      	b.n	800335e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8003358:	2313      	movs	r3, #19
 800335a:	75fb      	strb	r3, [r7, #23]
          break;
 800335c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 800335e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003362:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8003508 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336e:	dc00      	bgt.n	8003372 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8003370:	e044      	b.n	80033fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8003372:	4b66      	ldr	r3, [pc, #408]	; (800350c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003374:	60bb      	str	r3, [r7, #8]
      break;
 8003376:	e041      	b.n	80033fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8003378:	79bb      	ldrb	r3, [r7, #6]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d002      	beq.n	8003384 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 800337e:	2302      	movs	r3, #2
 8003380:	75fb      	strb	r3, [r7, #23]
          break;
 8003382:	e002      	b.n	800338a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8003384:	2312      	movs	r3, #18
 8003386:	75fb      	strb	r3, [r7, #23]
          break;
 8003388:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 800338a:	edd7 7a02 	vldr	s15, [r7, #8]
 800338e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003508 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339a:	dc00      	bgt.n	800339e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 800339c:	e02e      	b.n	80033fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800339e:	4b5b      	ldr	r3, [pc, #364]	; (800350c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80033a0:	60bb      	str	r3, [r7, #8]
      break;
 80033a2:	e02b      	b.n	80033fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 80033a4:	79bb      	ldrb	r3, [r7, #6]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d002      	beq.n	80033b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 80033aa:	2301      	movs	r3, #1
 80033ac:	75fb      	strb	r3, [r7, #23]
          break;
 80033ae:	e002      	b.n	80033b6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80033b0:	2311      	movs	r3, #17
 80033b2:	75fb      	strb	r3, [r7, #23]
          break;
 80033b4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 80033b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80033ba:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003508 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80033be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c6:	dc00      	bgt.n	80033ca <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 80033c8:	e018      	b.n	80033fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80033ca:	4b50      	ldr	r3, [pc, #320]	; (800350c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80033cc:	60bb      	str	r3, [r7, #8]
      break;
 80033ce:	e015      	b.n	80033fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 80033d0:	79bb      	ldrb	r3, [r7, #6]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d002      	beq.n	80033dc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 80033d6:	2300      	movs	r3, #0
 80033d8:	75fb      	strb	r3, [r7, #23]
          break;
 80033da:	e002      	b.n	80033e2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80033dc:	2310      	movs	r3, #16
 80033de:	75fb      	strb	r3, [r7, #23]
          break;
 80033e0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 80033e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80033e6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003508 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80033ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f2:	dc00      	bgt.n	80033f6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 80033f4:	e001      	b.n	80033fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 80033f6:	4b45      	ldr	r3, [pc, #276]	; (800350c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80033f8:	60bb      	str	r3, [r7, #8]
      break;
 80033fa:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80033fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003400:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003510 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8003404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340c:	d801      	bhi.n	8003412 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 800340e:	2301      	movs	r3, #1
 8003410:	e04d      	b.n	80034ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003412:	edd7 7a02 	vldr	s15, [r7, #8]
 8003416:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800341a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003422:	d801      	bhi.n	8003428 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8003424:	2302      	movs	r3, #2
 8003426:	e042      	b.n	80034ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003428:	edd7 7a02 	vldr	s15, [r7, #8]
 800342c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003438:	d801      	bhi.n	800343e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 800343a:	2303      	movs	r3, #3
 800343c:	e037      	b.n	80034ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800343e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003442:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003514 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8003446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800344a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344e:	d801      	bhi.n	8003454 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8003450:	2304      	movs	r3, #4
 8003452:	e02c      	b.n	80034ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003454:	edd7 7a02 	vldr	s15, [r7, #8]
 8003458:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003518 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 800345c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003464:	d801      	bhi.n	800346a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8003466:	2305      	movs	r3, #5
 8003468:	e021      	b.n	80034ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800346a:	edd7 7a02 	vldr	s15, [r7, #8]
 800346e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003508 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347a:	d801      	bhi.n	8003480 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 800347c:	2306      	movs	r3, #6
 800347e:	e016      	b.n	80034ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003480:	edd7 7a02 	vldr	s15, [r7, #8]
 8003484:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800351c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8003488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800348c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003490:	d801      	bhi.n	8003496 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8003492:	2307      	movs	r3, #7
 8003494:	e00b      	b.n	80034ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003496:	edd7 7a02 	vldr	s15, [r7, #8]
 800349a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003520 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 800349e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a6:	d801      	bhi.n	80034ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 80034a8:	2308      	movs	r3, #8
 80034aa:	e000      	b.n	80034ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80034ac:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 80034ae:	75bb      	strb	r3, [r7, #22]
          : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
          : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
          :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	331c      	adds	r3, #28
 80034b4:	7dba      	ldrb	r2, [r7, #22]
 80034b6:	4611      	mov	r1, r2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 fa33 	bl	8003924 <lis2dw12_data_rate_set>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 80034c4:	f04f 33ff 	mov.w	r3, #4294967295
 80034c8:	e018      	b.n	80034fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	331c      	adds	r3, #28
 80034ce:	7dfa      	ldrb	r2, [r7, #23]
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f91e 	bl	8003714 <lis2dw12_power_mode_set>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
 80034e2:	e00b      	b.n	80034fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	79fa      	ldrb	r2, [r7, #7]
 80034ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	79ba      	ldrb	r2, [r7, #6]
 80034f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	41480000 	.word	0x41480000
 8003508:	43480000 	.word	0x43480000
 800350c:	43480000 	.word	0x43480000
 8003510:	3fcccccd 	.word	0x3fcccccd
 8003514:	42480000 	.word	0x42480000
 8003518:	42c80000 	.word	0x42c80000
 800351c:	43c80000 	.word	0x43c80000
 8003520:	44480000 	.word	0x44480000

08003524 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003530:	460b      	mov	r3, r1
 8003532:	71fb      	strb	r3, [r7, #7]
 8003534:	4613      	mov	r3, r2
 8003536:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	79fa      	ldrb	r2, [r7, #7]
 800353c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	79ba      	ldrb	r2, [r7, #6]
 8003544:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                : (Odr <=   12.5f) ?   12.5f
 8003548:	edd7 7a02 	vldr	s15, [r7, #8]
 800354c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800360c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8003550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003558:	d801      	bhi.n	800355e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 800355a:	4b2d      	ldr	r3, [pc, #180]	; (8003610 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 800355c:	e04d      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   25.0f) ?   25.0f
 800355e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003562:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800356a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356e:	d801      	bhi.n	8003574 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8003570:	4b28      	ldr	r3, [pc, #160]	; (8003614 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8003572:	e042      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   50.0f) ?   50.0f
 8003574:	edd7 7a02 	vldr	s15, [r7, #8]
 8003578:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800357c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003584:	d801      	bhi.n	800358a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8003586:	4b24      	ldr	r3, [pc, #144]	; (8003618 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8003588:	e037      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  100.0f) ?  100.0f
 800358a:	edd7 7a02 	vldr	s15, [r7, #8]
 800358e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800361c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8003592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359a:	d801      	bhi.n	80035a0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 800359c:	4b20      	ldr	r3, [pc, #128]	; (8003620 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 800359e:	e02c      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  200.0f) ?  200.0f
 80035a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80035a4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003624 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 80035a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b0:	d801      	bhi.n	80035b6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 80035b2:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 80035b4:	e021      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  400.0f) ?  400.0f
 80035b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80035ba:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800362c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 80035be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c6:	d801      	bhi.n	80035cc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80035c8:	4b19      	ldr	r3, [pc, #100]	; (8003630 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 80035ca:	e016      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  800.0f) ?  800.0f
 80035cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80035d0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003634 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 80035d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035dc:	d801      	bhi.n	80035e2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 80035de:	4b16      	ldr	r3, [pc, #88]	; (8003638 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 80035e0:	e00b      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                :                    1600.0f;
 80035e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80035e6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800363c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 80035ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f2:	d801      	bhi.n	80035f8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 80035f6:	e000      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	3fcccccd 	.word	0x3fcccccd
 8003610:	3fcccccd 	.word	0x3fcccccd
 8003614:	41480000 	.word	0x41480000
 8003618:	41c80000 	.word	0x41c80000
 800361c:	42480000 	.word	0x42480000
 8003620:	42480000 	.word	0x42480000
 8003624:	42c80000 	.word	0x42c80000
 8003628:	42c80000 	.word	0x42c80000
 800362c:	43480000 	.word	0x43480000
 8003630:	43480000 	.word	0x43480000
 8003634:	43c80000 	.word	0x43c80000
 8003638:	43c80000 	.word	0x43c80000
 800363c:	44480000 	.word	0x44480000
 8003640:	44480000 	.word	0x44480000
 8003644:	44c80000 	.word	0x44c80000

08003648 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	461a      	mov	r2, r3
 8003654:	460b      	mov	r3, r1
 8003656:	72fb      	strb	r3, [r7, #11]
 8003658:	4613      	mov	r3, r2
 800365a:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	695c      	ldr	r4, [r3, #20]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	7b1b      	ldrb	r3, [r3, #12]
 8003668:	b298      	uxth	r0, r3
 800366a:	7afb      	ldrb	r3, [r7, #11]
 800366c:	b299      	uxth	r1, r3
 800366e:	893b      	ldrh	r3, [r7, #8]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	47a0      	blx	r4
 8003674:	4603      	mov	r3, r0
}
 8003676:	4618      	mov	r0, r3
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	bd90      	pop	{r4, r7, pc}

0800367e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800367e:	b590      	push	{r4, r7, lr}
 8003680:	b087      	sub	sp, #28
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	461a      	mov	r2, r3
 800368a:	460b      	mov	r3, r1
 800368c:	72fb      	strb	r3, [r7, #11]
 800368e:	4613      	mov	r3, r2
 8003690:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	691c      	ldr	r4, [r3, #16]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	7b1b      	ldrb	r3, [r3, #12]
 800369e:	b298      	uxth	r0, r3
 80036a0:	7afb      	ldrb	r3, [r7, #11]
 80036a2:	b299      	uxth	r1, r3
 80036a4:	893b      	ldrh	r3, [r7, #8]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	47a0      	blx	r4
 80036aa:	4603      	mov	r3, r0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd90      	pop	{r4, r7, pc}

080036b4 <lis2dw12_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80036b4:	b590      	push	{r4, r7, lr}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	461a      	mov	r2, r3
 80036c0:	460b      	mov	r3, r1
 80036c2:	72fb      	strb	r3, [r7, #11]
 80036c4:	4613      	mov	r3, r2
 80036c6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685c      	ldr	r4, [r3, #4]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6898      	ldr	r0, [r3, #8]
 80036d0:	893b      	ldrh	r3, [r7, #8]
 80036d2:	7af9      	ldrb	r1, [r7, #11]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	47a0      	blx	r4
 80036d8:	6178      	str	r0, [r7, #20]
  return ret;
 80036da:	697b      	ldr	r3, [r7, #20]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd90      	pop	{r4, r7, pc}

080036e4 <lis2dw12_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 80036e4:	b590      	push	{r4, r7, lr}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	461a      	mov	r2, r3
 80036f0:	460b      	mov	r3, r1
 80036f2:	72fb      	strb	r3, [r7, #11]
 80036f4:	4613      	mov	r3, r2
 80036f6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681c      	ldr	r4, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6898      	ldr	r0, [r3, #8]
 8003700:	893b      	ldrh	r3, [r7, #8]
 8003702:	7af9      	ldrb	r1, [r7, #11]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	47a0      	blx	r4
 8003708:	6178      	str	r0, [r7, #20]
  return ret;
 800370a:	697b      	ldr	r3, [r7, #20]
}
 800370c:	4618      	mov	r0, r3
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	bd90      	pop	{r4, r7, pc}

08003714 <lis2dw12_power_mode_set>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx, lis2dw12_mode_t val)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8003720:	f107 0210 	add.w	r2, r7, #16
 8003724:	2301      	movs	r3, #1
 8003726:	2120      	movs	r1, #32
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ffc3 	bl	80036b4 <lis2dw12_read_reg>
 800372e:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d118      	bne.n	8003768 <lis2dw12_power_mode_set+0x54>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 8003736:	78fb      	ldrb	r3, [r7, #3]
 8003738:	089b      	lsrs	r3, r3, #2
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	b2da      	uxtb	r2, r3
 8003740:	7c3b      	ldrb	r3, [r7, #16]
 8003742:	f362 0383 	bfi	r3, r2, #2, #2
 8003746:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	b2da      	uxtb	r2, r3
 8003750:	7c3b      	ldrb	r3, [r7, #16]
 8003752:	f362 0301 	bfi	r3, r2, #0, #2
 8003756:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8003758:	f107 0210 	add.w	r2, r7, #16
 800375c:	2301      	movs	r3, #1
 800375e:	2120      	movs	r1, #32
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ffbf 	bl	80036e4 <lis2dw12_write_reg>
 8003766:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d107      	bne.n	800377e <lis2dw12_power_mode_set+0x6a>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 800376e:	f107 020c 	add.w	r2, r7, #12
 8003772:	2301      	movs	r3, #1
 8003774:	2125      	movs	r1, #37	; 0x25
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff ff9c 	bl	80036b4 <lis2dw12_read_reg>
 800377c:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d110      	bne.n	80037a6 <lis2dw12_power_mode_set+0x92>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	b2da      	uxtb	r2, r3
 800378e:	7b3b      	ldrb	r3, [r7, #12]
 8003790:	f362 0382 	bfi	r3, r2, #2, #1
 8003794:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8003796:	f107 020c 	add.w	r2, r7, #12
 800379a:	2301      	movs	r3, #1
 800379c:	2125      	movs	r1, #37	; 0x25
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff ffa0 	bl	80036e4 <lis2dw12_write_reg>
 80037a4:	6178      	str	r0, [r7, #20]
  }
  return ret;
 80037a6:	697b      	ldr	r3, [r7, #20]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <lis2dw12_power_mode_get>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx, lis2dw12_mode_t *val)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 80037ba:	f107 0210 	add.w	r2, r7, #16
 80037be:	2301      	movs	r3, #1
 80037c0:	2120      	movs	r1, #32
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff ff76 	bl	80036b4 <lis2dw12_read_reg>
 80037c8:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f040 80a3 	bne.w	8003918 <lis2dw12_power_mode_get+0x168>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 80037d2:	f107 020c 	add.w	r2, r7, #12
 80037d6:	2301      	movs	r3, #1
 80037d8:	2125      	movs	r1, #37	; 0x25
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ff6a 	bl	80036b4 <lis2dw12_read_reg>
 80037e0:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80037e2:	7b3b      	ldrb	r3, [r7, #12]
 80037e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	011a      	lsls	r2, r3, #4
 80037ec:	7c3b      	ldrb	r3, [r7, #16]
 80037ee:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
            ctrl1.lp_mode)) {
 80037f8:	7c3a      	ldrb	r2, [r7, #16]
 80037fa:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80037fe:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8003800:	4413      	add	r3, r2
 8003802:	2b1b      	cmp	r3, #27
 8003804:	f200 8084 	bhi.w	8003910 <lis2dw12_power_mode_get+0x160>
 8003808:	a201      	add	r2, pc, #4	; (adr r2, 8003810 <lis2dw12_power_mode_get+0x60>)
 800380a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380e:	bf00      	nop
 8003810:	080038a1 	.word	0x080038a1
 8003814:	08003899 	.word	0x08003899
 8003818:	08003891 	.word	0x08003891
 800381c:	08003889 	.word	0x08003889
 8003820:	08003881 	.word	0x08003881
 8003824:	08003911 	.word	0x08003911
 8003828:	08003911 	.word	0x08003911
 800382c:	08003911 	.word	0x08003911
 8003830:	080038c1 	.word	0x080038c1
 8003834:	080038b9 	.word	0x080038b9
 8003838:	080038b1 	.word	0x080038b1
 800383c:	080038a9 	.word	0x080038a9
 8003840:	08003911 	.word	0x08003911
 8003844:	08003911 	.word	0x08003911
 8003848:	08003911 	.word	0x08003911
 800384c:	08003911 	.word	0x08003911
 8003850:	080038e9 	.word	0x080038e9
 8003854:	080038e1 	.word	0x080038e1
 8003858:	080038d9 	.word	0x080038d9
 800385c:	080038d1 	.word	0x080038d1
 8003860:	080038c9 	.word	0x080038c9
 8003864:	08003911 	.word	0x08003911
 8003868:	08003911 	.word	0x08003911
 800386c:	08003911 	.word	0x08003911
 8003870:	08003909 	.word	0x08003909
 8003874:	08003901 	.word	0x08003901
 8003878:	080038f9 	.word	0x080038f9
 800387c:	080038f1 	.word	0x080038f1
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2204      	movs	r2, #4
 8003884:	701a      	strb	r2, [r3, #0]
        break;
 8003886:	e048      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2203      	movs	r2, #3
 800388c:	701a      	strb	r2, [r3, #0]
        break;
 800388e:	e044      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2202      	movs	r2, #2
 8003894:	701a      	strb	r2, [r3, #0]
        break;
 8003896:	e040      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2201      	movs	r2, #1
 800389c:	701a      	strb	r2, [r3, #0]
        break;
 800389e:	e03c      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]
        break;
 80038a6:	e038      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	220b      	movs	r2, #11
 80038ac:	701a      	strb	r2, [r3, #0]
        break;
 80038ae:	e034      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	220a      	movs	r2, #10
 80038b4:	701a      	strb	r2, [r3, #0]
        break;
 80038b6:	e030      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2209      	movs	r2, #9
 80038bc:	701a      	strb	r2, [r3, #0]
        break;
 80038be:	e02c      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2208      	movs	r2, #8
 80038c4:	701a      	strb	r2, [r3, #0]
        break;
 80038c6:	e028      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2214      	movs	r2, #20
 80038cc:	701a      	strb	r2, [r3, #0]
        break;
 80038ce:	e024      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2213      	movs	r2, #19
 80038d4:	701a      	strb	r2, [r3, #0]
        break;
 80038d6:	e020      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2212      	movs	r2, #18
 80038dc:	701a      	strb	r2, [r3, #0]
        break;
 80038de:	e01c      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2211      	movs	r2, #17
 80038e4:	701a      	strb	r2, [r3, #0]
        break;
 80038e6:	e018      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2210      	movs	r2, #16
 80038ec:	701a      	strb	r2, [r3, #0]
        break;
 80038ee:	e014      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	221b      	movs	r2, #27
 80038f4:	701a      	strb	r2, [r3, #0]
        break;
 80038f6:	e010      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	221a      	movs	r2, #26
 80038fc:	701a      	strb	r2, [r3, #0]
        break;
 80038fe:	e00c      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2219      	movs	r2, #25
 8003904:	701a      	strb	r2, [r3, #0]
        break;
 8003906:	e008      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2218      	movs	r2, #24
 800390c:	701a      	strb	r2, [r3, #0]
        break;
 800390e:	e004      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2204      	movs	r2, #4
 8003914:	701a      	strb	r2, [r3, #0]
        break;
 8003916:	e000      	b.n	800391a <lis2dw12_power_mode_get+0x16a>
    }
  }
 8003918:	bf00      	nop
  return ret;
 800391a:	697b      	ldr	r3, [r7, #20]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8003930:	f107 0210 	add.w	r2, r7, #16
 8003934:	2301      	movs	r3, #1
 8003936:	2120      	movs	r1, #32
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff febb 	bl	80036b4 <lis2dw12_read_reg>
 800393e:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10f      	bne.n	8003966 <lis2dw12_data_rate_set+0x42>
    ctrl1.odr = (uint8_t) val;
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	b2da      	uxtb	r2, r3
 800394e:	7c3b      	ldrb	r3, [r7, #16]
 8003950:	f362 1307 	bfi	r3, r2, #4, #4
 8003954:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8003956:	f107 0210 	add.w	r2, r7, #16
 800395a:	2301      	movs	r3, #1
 800395c:	2120      	movs	r1, #32
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fec0 	bl	80036e4 <lis2dw12_write_reg>
 8003964:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d107      	bne.n	800397c <lis2dw12_data_rate_set+0x58>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 800396c:	f107 020c 	add.w	r2, r7, #12
 8003970:	2301      	movs	r3, #1
 8003972:	2122      	movs	r1, #34	; 0x22
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff fe9d 	bl	80036b4 <lis2dw12_read_reg>
 800397a:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d110      	bne.n	80039a4 <lis2dw12_data_rate_set+0x80>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	b2da      	uxtb	r2, r3
 800398c:	7b3b      	ldrb	r3, [r7, #12]
 800398e:	f362 0301 	bfi	r3, r2, #0, #2
 8003992:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8003994:	f107 020c 	add.w	r2, r7, #12
 8003998:	2301      	movs	r3, #1
 800399a:	2122      	movs	r1, #34	; 0x22
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff fea1 	bl	80036e4 <lis2dw12_write_reg>
 80039a2:	6178      	str	r0, [r7, #20]
  }
  return ret;
 80039a4:	697b      	ldr	r3, [r7, #20]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 80039ba:	f107 0210 	add.w	r2, r7, #16
 80039be:	2301      	movs	r3, #1
 80039c0:	2120      	movs	r1, #32
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fe76 	bl	80036b4 <lis2dw12_read_reg>
 80039c8:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f040 80b3 	bne.w	8003b38 <lis2dw12_data_rate_get+0x188>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 80039d2:	f107 020c 	add.w	r2, r7, #12
 80039d6:	2301      	movs	r3, #1
 80039d8:	2122      	movs	r1, #34	; 0x22
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff fe6a 	bl	80036b4 <lis2dw12_read_reg>
 80039e0:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr) {
 80039e2:	7b3b      	ldrb	r3, [r7, #12]
 80039e4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	7c3a      	ldrb	r2, [r7, #16]
 80039ee:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	4413      	add	r3, r2
 80039f6:	2b32      	cmp	r3, #50	; 0x32
 80039f8:	f200 809a 	bhi.w	8003b30 <lis2dw12_data_rate_get+0x180>
 80039fc:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <lis2dw12_data_rate_get+0x54>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003ad1 	.word	0x08003ad1
 8003a08:	08003ad9 	.word	0x08003ad9
 8003a0c:	08003ae1 	.word	0x08003ae1
 8003a10:	08003ae9 	.word	0x08003ae9
 8003a14:	08003af1 	.word	0x08003af1
 8003a18:	08003af9 	.word	0x08003af9
 8003a1c:	08003b01 	.word	0x08003b01
 8003a20:	08003b09 	.word	0x08003b09
 8003a24:	08003b11 	.word	0x08003b11
 8003a28:	08003b19 	.word	0x08003b19
 8003a2c:	08003b31 	.word	0x08003b31
 8003a30:	08003b31 	.word	0x08003b31
 8003a34:	08003b31 	.word	0x08003b31
 8003a38:	08003b31 	.word	0x08003b31
 8003a3c:	08003b31 	.word	0x08003b31
 8003a40:	08003b31 	.word	0x08003b31
 8003a44:	08003b31 	.word	0x08003b31
 8003a48:	08003b31 	.word	0x08003b31
 8003a4c:	08003b29 	.word	0x08003b29
 8003a50:	08003b31 	.word	0x08003b31
 8003a54:	08003b31 	.word	0x08003b31
 8003a58:	08003b31 	.word	0x08003b31
 8003a5c:	08003b31 	.word	0x08003b31
 8003a60:	08003b31 	.word	0x08003b31
 8003a64:	08003b31 	.word	0x08003b31
 8003a68:	08003b31 	.word	0x08003b31
 8003a6c:	08003b31 	.word	0x08003b31
 8003a70:	08003b31 	.word	0x08003b31
 8003a74:	08003b31 	.word	0x08003b31
 8003a78:	08003b31 	.word	0x08003b31
 8003a7c:	08003b31 	.word	0x08003b31
 8003a80:	08003b31 	.word	0x08003b31
 8003a84:	08003b31 	.word	0x08003b31
 8003a88:	08003b31 	.word	0x08003b31
 8003a8c:	08003b31 	.word	0x08003b31
 8003a90:	08003b31 	.word	0x08003b31
 8003a94:	08003b31 	.word	0x08003b31
 8003a98:	08003b31 	.word	0x08003b31
 8003a9c:	08003b31 	.word	0x08003b31
 8003aa0:	08003b31 	.word	0x08003b31
 8003aa4:	08003b31 	.word	0x08003b31
 8003aa8:	08003b31 	.word	0x08003b31
 8003aac:	08003b31 	.word	0x08003b31
 8003ab0:	08003b31 	.word	0x08003b31
 8003ab4:	08003b31 	.word	0x08003b31
 8003ab8:	08003b31 	.word	0x08003b31
 8003abc:	08003b31 	.word	0x08003b31
 8003ac0:	08003b31 	.word	0x08003b31
 8003ac4:	08003b31 	.word	0x08003b31
 8003ac8:	08003b31 	.word	0x08003b31
 8003acc:	08003b21 	.word	0x08003b21
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
        break;
 8003ad6:	e030      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2201      	movs	r2, #1
 8003adc:	701a      	strb	r2, [r3, #0]
        break;
 8003ade:	e02c      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	701a      	strb	r2, [r3, #0]
        break;
 8003ae6:	e028      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2203      	movs	r2, #3
 8003aec:	701a      	strb	r2, [r3, #0]
        break;
 8003aee:	e024      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
       case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2204      	movs	r2, #4
 8003af4:	701a      	strb	r2, [r3, #0]
        break;
 8003af6:	e020      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2205      	movs	r2, #5
 8003afc:	701a      	strb	r2, [r3, #0]
        break;
 8003afe:	e01c      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2206      	movs	r2, #6
 8003b04:	701a      	strb	r2, [r3, #0]
        break;
 8003b06:	e018      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2207      	movs	r2, #7
 8003b0c:	701a      	strb	r2, [r3, #0]
        break;
 8003b0e:	e014      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
       case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2208      	movs	r2, #8
 8003b14:	701a      	strb	r2, [r3, #0]
        break;
 8003b16:	e010      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2209      	movs	r2, #9
 8003b1c:	701a      	strb	r2, [r3, #0]
        break;
 8003b1e:	e00c      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2232      	movs	r2, #50	; 0x32
 8003b24:	701a      	strb	r2, [r3, #0]
        break;
 8003b26:	e008      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2212      	movs	r2, #18
 8003b2c:	701a      	strb	r2, [r3, #0]
        break;
 8003b2e:	e004      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
        break;
 8003b36:	e000      	b.n	8003b3a <lis2dw12_data_rate_get+0x18a>
    }
  }
 8003b38:	bf00      	nop
  return ret;
 8003b3a:	697b      	ldr	r3, [r7, #20]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8003b50:	f107 0208 	add.w	r2, r7, #8
 8003b54:	2301      	movs	r3, #1
 8003b56:	2121      	movs	r1, #33	; 0x21
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff fdab 	bl	80036b4 <lis2dw12_read_reg>
 8003b5e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10f      	bne.n	8003b86 <lis2dw12_block_data_update_set+0x42>
    reg.bdu = val;
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	7a3b      	ldrb	r3, [r7, #8]
 8003b70:	f362 03c3 	bfi	r3, r2, #3, #1
 8003b74:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8003b76:	f107 0208 	add.w	r2, r7, #8
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	2121      	movs	r1, #33	; 0x21
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff fdb0 	bl	80036e4 <lis2dw12_write_reg>
 8003b84:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003b86:	68fb      	ldr	r3, [r7, #12]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8003b9c:	f107 0208 	add.w	r2, r7, #8
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	2125      	movs	r1, #37	; 0x25
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff fd85 	bl	80036b4 <lis2dw12_read_reg>
 8003baa:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10f      	bne.n	8003bd2 <lis2dw12_full_scale_set+0x42>
    reg.fs = (uint8_t) val;
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	7a3b      	ldrb	r3, [r7, #8]
 8003bbc:	f362 1305 	bfi	r3, r2, #4, #2
 8003bc0:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8003bc2:	f107 0208 	add.w	r2, r7, #8
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	2125      	movs	r1, #37	; 0x25
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff fd8a 	bl	80036e4 <lis2dw12_write_reg>
 8003bd0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8003be6:	f107 0208 	add.w	r2, r7, #8
 8003bea:	2301      	movs	r3, #1
 8003bec:	2125      	movs	r1, #37	; 0x25
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff fd60 	bl	80036b4 <lis2dw12_read_reg>
 8003bf4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs) {
 8003bf6:	7a3b      	ldrb	r3, [r7, #8]
 8003bf8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d81a      	bhi.n	8003c38 <lis2dw12_full_scale_get+0x5c>
 8003c02:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <lis2dw12_full_scale_get+0x2c>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c21 	.word	0x08003c21
 8003c10:	08003c29 	.word	0x08003c29
 8003c14:	08003c31 	.word	0x08003c31
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
      break;
 8003c1e:	e00f      	b.n	8003c40 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
      break;
 8003c26:	e00b      	b.n	8003c40 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	701a      	strb	r2, [r3, #0]
      break;
 8003c2e:	e007      	b.n	8003c40 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2203      	movs	r2, #3
 8003c34:	701a      	strb	r2, [r3, #0]
      break;
 8003c36:	e003      	b.n	8003c40 <lis2dw12_full_scale_get+0x64>
    default:
      *val = LIS2DW12_2g;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	701a      	strb	r2, [r3, #0]
      break;
 8003c3e:	bf00      	nop
  }
  return ret;
 8003c40:	68fb      	ldr	r3, [r7, #12]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop

08003c4c <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8003c56:	f107 020c 	add.w	r2, r7, #12
 8003c5a:	2306      	movs	r3, #6
 8003c5c:	2128      	movs	r1, #40	; 0x28
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff fd28 	bl	80036b4 <lis2dw12_read_reg>
 8003c64:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003c66:	7b7b      	ldrb	r3, [r7, #13]
 8003c68:	b21a      	sxth	r2, r3
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	7b3b      	ldrb	r3, [r7, #12]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	b21a      	sxth	r2, r3
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	b212      	sxth	r2, r2
 8003c90:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	3302      	adds	r3, #2
 8003c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	7bbb      	ldrb	r3, [r7, #14]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	3302      	adds	r3, #2
 8003cac:	b212      	sxth	r2, r2
 8003cae:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003cb0:	7c7a      	ldrb	r2, [r7, #17]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	b212      	sxth	r2, r2
 8003cb8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	7c3b      	ldrb	r3, [r7, #16]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	b212      	sxth	r2, r2
 8003cd6:	801a      	strh	r2, [r3, #0]

  return ret;
 8003cd8:	697b      	ldr	r3, [r7, #20]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8003cec:	2301      	movs	r3, #1
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	210f      	movs	r1, #15
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff fcde 	bl	80036b4 <lis2dw12_read_reg>
 8003cf8:	60f8      	str	r0, [r7, #12]
  return ret;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8003d10:	f107 0208 	add.w	r2, r7, #8
 8003d14:	2301      	movs	r3, #1
 8003d16:	2121      	movs	r1, #33	; 0x21
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff fccb 	bl	80036b4 <lis2dw12_read_reg>
 8003d1e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10f      	bne.n	8003d46 <lis2dw12_auto_increment_set+0x42>
    reg.if_add_inc = val;
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	7a3b      	ldrb	r3, [r7, #8]
 8003d30:	f362 0382 	bfi	r3, r2, #2, #1
 8003d34:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8003d36:	f107 0208 	add.w	r2, r7, #8
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	2121      	movs	r1, #33	; 0x21
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff fcd0 	bl	80036e4 <lis2dw12_write_reg>
 8003d44:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003d46:	68fb      	ldr	r3, [r7, #12]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <lis2dw12_fifo_mode_set>:
  * @param  val      change the values of fmode in reg FIFO_CTRL
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx, lis2dw12_fmode_t val)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 8003d5c:	f107 0208 	add.w	r2, r7, #8
 8003d60:	2301      	movs	r3, #1
 8003d62:	212e      	movs	r1, #46	; 0x2e
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff fca5 	bl	80036b4 <lis2dw12_read_reg>
 8003d6a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10f      	bne.n	8003d92 <lis2dw12_fifo_mode_set+0x42>
    reg.fmode = (uint8_t) val;
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	7a3b      	ldrb	r3, [r7, #8]
 8003d7c:	f362 1347 	bfi	r3, r2, #5, #3
 8003d80:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 8003d82:	f107 0208 	add.w	r2, r7, #8
 8003d86:	2301      	movs	r3, #1
 8003d88:	212e      	movs	r1, #46	; 0x2e
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff fcaa 	bl	80036e4 <lis2dw12_write_reg>
 8003d90:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003d92:	68fb      	ldr	r3, [r7, #12]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <LIS2MDL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d103      	bne.n	8003db8 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003db0:	f04f 33ff 	mov.w	r3, #4294967295
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	e05d      	b.n	8003e74 <LIS2MDL_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	7b1a      	ldrb	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	699a      	ldr	r2, [r3, #24]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a23      	ldr	r2, [pc, #140]	; (8003e80 <LIS2MDL_RegisterBusIO+0xe4>)
 8003df4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a22      	ldr	r2, [pc, #136]	; (8003e84 <LIS2MDL_RegisterBusIO+0xe8>)
 8003dfa:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d103      	bne.n	8003e12 <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 8003e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	e030      	b.n	8003e74 <LIS2MDL_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4798      	blx	r3
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <LIS2MDL_RegisterBusIO+0x8a>
    {
      ret = LIS2MDL_ERROR;
 8003e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	e026      	b.n	8003e74 <LIS2MDL_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d022      	beq.n	8003e74 <LIS2MDL_RegisterBusIO+0xd8>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d11d      	bne.n	8003e74 <LIS2MDL_RegisterBusIO+0xd8>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d10d      	bne.n	8003e5c <LIS2MDL_RegisterBusIO+0xc0>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8003e40:	2334      	movs	r3, #52	; 0x34
 8003e42:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8003e44:	7afb      	ldrb	r3, [r7, #11]
 8003e46:	461a      	mov	r2, r3
 8003e48:	2162      	movs	r1, #98	; 0x62
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fa15 	bl	800427a <LIS2MDL_Write_Reg>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00e      	beq.n	8003e74 <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5a:	e00c      	b.n	8003e76 <LIS2MDL_RegisterBusIO+0xda>
            }
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	331c      	adds	r3, #28
 8003e60:	2101      	movs	r1, #1
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fbe2 	bl	800462c <lis2mdl_i2c_interface_set>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 8003e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e72:	e000      	b.n	8003e76 <LIS2MDL_RegisterBusIO+0xda>
        }
      }
    }
  }

  return ret;
 8003e74:	68fb      	ldr	r3, [r7, #12]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	080042b1 	.word	0x080042b1
 8003e84:	08004313 	.word	0x08004313

08003e88 <LIS2MDL_Init>:
 * @brief  Initialize the LIS2MDL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	331c      	adds	r3, #28
 8003e94:	2101      	movs	r1, #1
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fb20 	bl	80044dc <lis2mdl_block_data_update_set>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <LIS2MDL_Init+0x20>
  {
    return LIS2MDL_ERROR;
 8003ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea6:	e028      	b.n	8003efa <LIS2MDL_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	331c      	adds	r3, #28
 8003eac:	2102      	movs	r1, #2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fa90 	bl	80043d4 <lis2mdl_operating_mode_set>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <LIS2MDL_Init+0x38>
  {
    return LIS2MDL_ERROR;
 8003eba:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebe:	e01c      	b.n	8003efa <LIS2MDL_Init+0x72>
  }

  /* Output data rate selection */
  if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	331c      	adds	r3, #28
 8003ec4:	2103      	movs	r1, #3
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 faaa 	bl	8004420 <lis2mdl_data_rate_set>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <LIS2MDL_Init+0x50>
  {
    return LIS2MDL_ERROR;
 8003ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed6:	e010      	b.n	8003efa <LIS2MDL_Init+0x72>
  }

  /* Self Test disabled. */
  if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	331c      	adds	r3, #28
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fb7e 	bl	80045e0 <lis2mdl_self_test_set>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <LIS2MDL_Init+0x68>
  {
    return LIS2MDL_ERROR;
 8003eea:	f04f 33ff 	mov.w	r3, #4294967295
 8003eee:	e004      	b.n	8003efa <LIS2MDL_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <LIS2MDL_DeInit>:
 * @brief  Deinitialize the LIS2MDL magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f874 	bl	8003ff8 <LIS2MDL_MAG_Disable>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003f16:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1a:	e004      	b.n	8003f26 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <LIS2MDL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
  if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	331c      	adds	r3, #28
 8003f3c:	6839      	ldr	r1, [r7, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fb3d 	bl	80045be <lis2mdl_device_id_get>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <LIS2MDL_ReadID+0x22>
  {
    return LIS2MDL_ERROR;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4e:	e000      	b.n	8003f52 <LIS2MDL_ReadID+0x24>
  }

  return LIS2MDL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <LIS2MDL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2201      	movs	r2, #1
 8003f76:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2200      	movs	r2, #0
 8003f82:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2200      	movs	r2, #0
 8003f88:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2232      	movs	r2, #50	; 0x32
 8003f8e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <LIS2MDL_GetCapabilities+0x58>)
 8003fa4:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	42c80000 	.word	0x42c80000

08003fb8 <LIS2MDL_MAG_Enable>:
 * @brief Enable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	e010      	b.n	8003ff0 <LIS2MDL_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	331c      	adds	r3, #28
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 f9fd 	bl	80043d4 <lis2mdl_operating_mode_set>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <LIS2MDL_MAG_Enable+0x2e>
  {
    return LIS2MDL_ERROR;
 8003fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe4:	e004      	b.n	8003ff0 <LIS2MDL_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <LIS2MDL_MAG_Disable>:
 * @brief Disable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e010      	b.n	8004030 <LIS2MDL_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	331c      	adds	r3, #28
 8004012:	2102      	movs	r1, #2
 8004014:	4618      	mov	r0, r3
 8004016:	f000 f9dd 	bl	80043d4 <lis2mdl_operating_mode_set>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <LIS2MDL_MAG_Disable+0x2e>
  {
    return LIS2MDL_ERROR;
 8004020:	f04f 33ff 	mov.w	r3, #4294967295
 8004024:	e004      	b.n	8004030 <LIS2MDL_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <LIS2MDL_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004048:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <LIS2MDL_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	331c      	adds	r3, #28
 800406a:	f107 020b 	add.w	r2, r7, #11
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f000 f9fb 	bl	800446c <lis2mdl_data_rate_get>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 800407c:	f04f 33ff 	mov.w	r3, #4294967295
 8004080:	e023      	b.n	80040ca <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8004082:	7afb      	ldrb	r3, [r7, #11]
 8004084:	2b03      	cmp	r3, #3
 8004086:	d81b      	bhi.n	80040c0 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8004088:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 800408a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408e:	bf00      	nop
 8004090:	080040a1 	.word	0x080040a1
 8004094:	080040a9 	.word	0x080040a9
 8004098:	080040b1 	.word	0x080040b1
 800409c:	080040b9 	.word	0x080040b9
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	4a0c      	ldr	r2, [pc, #48]	; (80040d4 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80040a4:	601a      	str	r2, [r3, #0]
      break;
 80040a6:	e00f      	b.n	80040c8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	4a0b      	ldr	r2, [pc, #44]	; (80040d8 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80040ac:	601a      	str	r2, [r3, #0]
      break;
 80040ae:	e00b      	b.n	80040c8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80040b4:	601a      	str	r2, [r3, #0]
      break;
 80040b6:	e007      	b.n	80040c8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80040bc:	601a      	str	r2, [r3, #0]
      break;
 80040be:	e003      	b.n	80040c8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80040c0:	f04f 33ff 	mov.w	r3, #4294967295
 80040c4:	60fb      	str	r3, [r7, #12]
      break;
 80040c6:	bf00      	nop
  }

  return ret;
 80040c8:	68fb      	ldr	r3, [r7, #12]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	41200000 	.word	0x41200000
 80040d8:	41a00000 	.word	0x41a00000
 80040dc:	42480000 	.word	0x42480000
 80040e0:	42c80000 	.word	0x42c80000

080040e4 <LIS2MDL_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80040f0:	edd7 7a00 	vldr	s15, [r7]
 80040f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004100:	d801      	bhi.n	8004106 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8004102:	2300      	movs	r3, #0
 8004104:	e016      	b.n	8004134 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004106:	edd7 7a00 	vldr	s15, [r7]
 800410a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800410e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004116:	d801      	bhi.n	800411c <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8004118:	2301      	movs	r3, #1
 800411a:	e00b      	b.n	8004134 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800411c:	edd7 7a00 	vldr	s15, [r7]
 8004120:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800415c <LIS2MDL_MAG_SetOutputDataRate+0x78>
 8004124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800412c:	d801      	bhi.n	8004132 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800412e:	2302      	movs	r3, #2
 8004130:	e000      	b.n	8004134 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004132:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8004134:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	331c      	adds	r3, #28
 800413a:	7bfa      	ldrb	r2, [r7, #15]
 800413c:	4611      	mov	r1, r2
 800413e:	4618      	mov	r0, r3
 8004140:	f000 f96e 	bl	8004420 <lis2mdl_data_rate_set>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <LIS2MDL_MAG_SetOutputDataRate+0x6c>
  {
    return LIS2MDL_ERROR;
 800414a:	f04f 33ff 	mov.w	r3, #4294967295
 800414e:	e000      	b.n	8004152 <LIS2MDL_MAG_SetOutputDataRate+0x6e>
  }

  return LIS2MDL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	42480000 	.word	0x42480000

08004160 <LIS2MDL_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2232      	movs	r2, #50	; 0x32
 800416e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <LIS2MDL_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <LIS2MDL_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	331c      	adds	r3, #28
 80041a4:	f107 0208 	add.w	r2, r7, #8
 80041a8:	4611      	mov	r1, r2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f9bc 	bl	8004528 <lis2mdl_magnetic_raw_get>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80041b6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ba:	e00c      	b.n	80041d6 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80041bc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80041c4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80041cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <LIS2MDL_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b086      	sub	sp, #24
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	331c      	adds	r3, #28
 80041ec:	f107 0210 	add.w	r2, r7, #16
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 f998 	bl	8004528 <lis2mdl_magnetic_raw_get>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <LIS2MDL_MAG_GetAxes+0x26>
  {
    return LIS2MDL_ERROR;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004202:	e036      	b.n	8004272 <LIS2MDL_MAG_GetAxes+0x94>
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8004204:	f107 030c 	add.w	r3, r7, #12
 8004208:	4619      	mov	r1, r3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff ff14 	bl	8004038 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004210:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800421c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004228:	ee17 2a90 	vmov	r2, s15
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004230:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004234:	ee07 3a90 	vmov	s15, r3
 8004238:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800423c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004248:	ee17 2a90 	vmov	r2, s15
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004250:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004254:	ee07 3a90 	vmov	s15, r3
 8004258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800425c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004268:	ee17 2a90 	vmov	r2, s15
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <LIS2MDL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	460b      	mov	r3, r1
 8004284:	70fb      	strb	r3, [r7, #3]
 8004286:	4613      	mov	r3, r2
 8004288:	70bb      	strb	r3, [r7, #2]
  if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f103 001c 	add.w	r0, r3, #28
 8004290:	1cba      	adds	r2, r7, #2
 8004292:	78f9      	ldrb	r1, [r7, #3]
 8004294:	2301      	movs	r3, #1
 8004296:	f000 f885 	bl	80043a4 <lis2mdl_write_reg>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <LIS2MDL_Write_Reg+0x2c>
  {
    return LIS2MDL_ERROR;
 80042a0:	f04f 33ff 	mov.w	r3, #4294967295
 80042a4:	e000      	b.n	80042a8 <LIS2MDL_Write_Reg+0x2e>
  }

  return LIS2MDL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80042b0:	b590      	push	{r4, r7, lr}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	607a      	str	r2, [r7, #4]
 80042ba:	461a      	mov	r2, r3
 80042bc:	460b      	mov	r3, r1
 80042be:	72fb      	strb	r3, [r7, #11]
 80042c0:	4613      	mov	r3, r2
 80042c2:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10e      	bne.n	80042ee <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	695c      	ldr	r4, [r3, #20]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	7b1b      	ldrb	r3, [r3, #12]
 80042d8:	b298      	uxth	r0, r3
 80042da:	7afb      	ldrb	r3, [r7, #11]
 80042dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	b299      	uxth	r1, r3
 80042e4:	893b      	ldrh	r3, [r7, #8]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	47a0      	blx	r4
 80042ea:	4603      	mov	r3, r0
 80042ec:	e00d      	b.n	800430a <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	695c      	ldr	r4, [r3, #20]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	7b1b      	ldrb	r3, [r3, #12]
 80042f6:	b298      	uxth	r0, r3
 80042f8:	7afb      	ldrb	r3, [r7, #11]
 80042fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	b299      	uxth	r1, r3
 8004302:	893b      	ldrh	r3, [r7, #8]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	47a0      	blx	r4
 8004308:	4603      	mov	r3, r0
  }
}
 800430a:	4618      	mov	r0, r3
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	bd90      	pop	{r4, r7, pc}

08004312 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004312:	b590      	push	{r4, r7, lr}
 8004314:	b087      	sub	sp, #28
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	461a      	mov	r2, r3
 800431e:	460b      	mov	r3, r1
 8004320:	72fb      	strb	r3, [r7, #11]
 8004322:	4613      	mov	r3, r2
 8004324:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10e      	bne.n	8004350 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	691c      	ldr	r4, [r3, #16]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	7b1b      	ldrb	r3, [r3, #12]
 800433a:	b298      	uxth	r0, r3
 800433c:	7afb      	ldrb	r3, [r7, #11]
 800433e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004342:	b2db      	uxtb	r3, r3
 8004344:	b299      	uxth	r1, r3
 8004346:	893b      	ldrh	r3, [r7, #8]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	47a0      	blx	r4
 800434c:	4603      	mov	r3, r0
 800434e:	e00d      	b.n	800436c <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	691c      	ldr	r4, [r3, #16]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	7b1b      	ldrb	r3, [r3, #12]
 8004358:	b298      	uxth	r0, r3
 800435a:	7afb      	ldrb	r3, [r7, #11]
 800435c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004360:	b2db      	uxtb	r3, r3
 8004362:	b299      	uxth	r1, r3
 8004364:	893b      	ldrh	r3, [r7, #8]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	47a0      	blx	r4
 800436a:	4603      	mov	r3, r0
  }
}
 800436c:	4618      	mov	r0, r3
 800436e:	371c      	adds	r7, #28
 8004370:	46bd      	mov	sp, r7
 8004372:	bd90      	pop	{r4, r7, pc}

08004374 <lis2mdl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004374:	b590      	push	{r4, r7, lr}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	461a      	mov	r2, r3
 8004380:	460b      	mov	r3, r1
 8004382:	72fb      	strb	r3, [r7, #11]
 8004384:	4613      	mov	r3, r2
 8004386:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	685c      	ldr	r4, [r3, #4]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6898      	ldr	r0, [r3, #8]
 8004390:	893b      	ldrh	r3, [r7, #8]
 8004392:	7af9      	ldrb	r1, [r7, #11]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	47a0      	blx	r4
 8004398:	6178      	str	r0, [r7, #20]
  return ret;
 800439a:	697b      	ldr	r3, [r7, #20]
}
 800439c:	4618      	mov	r0, r3
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd90      	pop	{r4, r7, pc}

080043a4 <lis2mdl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80043a4:	b590      	push	{r4, r7, lr}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	461a      	mov	r2, r3
 80043b0:	460b      	mov	r3, r1
 80043b2:	72fb      	strb	r3, [r7, #11]
 80043b4:	4613      	mov	r3, r2
 80043b6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681c      	ldr	r4, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6898      	ldr	r0, [r3, #8]
 80043c0:	893b      	ldrh	r3, [r7, #8]
 80043c2:	7af9      	ldrb	r1, [r7, #11]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	47a0      	blx	r4
 80043c8:	6178      	str	r0, [r7, #20]
  return ret;
 80043ca:	697b      	ldr	r3, [r7, #20]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd90      	pop	{r4, r7, pc}

080043d4 <lis2mdl_operating_mode_set>:
  * @param  val    change the values of md in reg CFG_REG_A
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx, lis2mdl_md_t val)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 80043e0:	f107 0208 	add.w	r2, r7, #8
 80043e4:	2301      	movs	r3, #1
 80043e6:	2160      	movs	r1, #96	; 0x60
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff ffc3 	bl	8004374 <lis2mdl_read_reg>
 80043ee:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10f      	bne.n	8004416 <lis2mdl_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	7a3b      	ldrb	r3, [r7, #8]
 8004400:	f362 0301 	bfi	r3, r2, #0, #2
 8004404:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8004406:	f107 0208 	add.w	r2, r7, #8
 800440a:	2301      	movs	r3, #1
 800440c:	2160      	movs	r1, #96	; 0x60
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff ffc8 	bl	80043a4 <lis2mdl_write_reg>
 8004414:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004416:	68fb      	ldr	r3, [r7, #12]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 800442c:	f107 0208 	add.w	r2, r7, #8
 8004430:	2301      	movs	r3, #1
 8004432:	2160      	movs	r1, #96	; 0x60
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff ff9d 	bl	8004374 <lis2mdl_read_reg>
 800443a:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <lis2mdl_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	f003 0303 	and.w	r3, r3, #3
 8004448:	b2da      	uxtb	r2, r3
 800444a:	7a3b      	ldrb	r3, [r7, #8]
 800444c:	f362 0383 	bfi	r3, r2, #2, #2
 8004450:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8004452:	f107 0208 	add.w	r2, r7, #8
 8004456:	2301      	movs	r3, #1
 8004458:	2160      	movs	r1, #96	; 0x60
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff ffa2 	bl	80043a4 <lis2mdl_write_reg>
 8004460:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004462:	68fb      	ldr	r3, [r7, #12]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8004476:	f107 0208 	add.w	r2, r7, #8
 800447a:	2301      	movs	r3, #1
 800447c:	2160      	movs	r1, #96	; 0x60
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7ff ff78 	bl	8004374 <lis2mdl_read_reg>
 8004484:	60f8      	str	r0, [r7, #12]
  switch (reg.odr){
 8004486:	7a3b      	ldrb	r3, [r7, #8]
 8004488:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b03      	cmp	r3, #3
 8004490:	d81a      	bhi.n	80044c8 <lis2mdl_data_rate_get+0x5c>
 8004492:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <lis2mdl_data_rate_get+0x2c>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	080044a9 	.word	0x080044a9
 800449c:	080044b1 	.word	0x080044b1
 80044a0:	080044b9 	.word	0x080044b9
 80044a4:	080044c1 	.word	0x080044c1
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
      break;
 80044ae:	e00f      	b.n	80044d0 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2201      	movs	r2, #1
 80044b4:	701a      	strb	r2, [r3, #0]
      break;
 80044b6:	e00b      	b.n	80044d0 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2202      	movs	r2, #2
 80044bc:	701a      	strb	r2, [r3, #0]
      break;
 80044be:	e007      	b.n	80044d0 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2203      	movs	r2, #3
 80044c4:	701a      	strb	r2, [r3, #0]
      break;
 80044c6:	e003      	b.n	80044d0 <lis2mdl_data_rate_get+0x64>
    default:
      *val = LIS2MDL_ODR_10Hz;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]
      break;
 80044ce:	bf00      	nop
  }
  return ret;
 80044d0:	68fb      	ldr	r3, [r7, #12]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop

080044dc <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 80044e8:	f107 0208 	add.w	r2, r7, #8
 80044ec:	2301      	movs	r3, #1
 80044ee:	2162      	movs	r1, #98	; 0x62
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ff3f 	bl	8004374 <lis2mdl_read_reg>
 80044f6:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10f      	bne.n	800451e <lis2mdl_block_data_update_set+0x42>
    reg.bdu = val;
 80044fe:	78fb      	ldrb	r3, [r7, #3]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	b2da      	uxtb	r2, r3
 8004506:	7a3b      	ldrb	r3, [r7, #8]
 8004508:	f362 1304 	bfi	r3, r2, #4, #1
 800450c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 800450e:	f107 0208 	add.w	r2, r7, #8
 8004512:	2301      	movs	r3, #1
 8004514:	2162      	movs	r1, #98	; 0x62
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff ff44 	bl	80043a4 <lis2mdl_write_reg>
 800451c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800451e:	68fb      	ldr	r3, [r7, #12]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004532:	f107 020c 	add.w	r2, r7, #12
 8004536:	2306      	movs	r3, #6
 8004538:	2168      	movs	r1, #104	; 0x68
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff ff1a 	bl	8004374 <lis2mdl_read_reg>
 8004540:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004542:	7b7b      	ldrb	r3, [r7, #13]
 8004544:	b21a      	sxth	r2, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004550:	b29b      	uxth	r3, r3
 8004552:	021b      	lsls	r3, r3, #8
 8004554:	b29a      	uxth	r2, r3
 8004556:	7b3b      	ldrb	r3, [r7, #12]
 8004558:	b29b      	uxth	r3, r3
 800455a:	4413      	add	r3, r2
 800455c:	b29b      	uxth	r3, r3
 800455e:	b21a      	sxth	r2, r3
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004564:	7bfa      	ldrb	r2, [r7, #15]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	3302      	adds	r3, #2
 800456a:	b212      	sxth	r2, r2
 800456c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	3302      	adds	r3, #2
 8004572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004576:	b29b      	uxth	r3, r3
 8004578:	021b      	lsls	r3, r3, #8
 800457a:	b29a      	uxth	r2, r3
 800457c:	7bbb      	ldrb	r3, [r7, #14]
 800457e:	b29b      	uxth	r3, r3
 8004580:	4413      	add	r3, r2
 8004582:	b29a      	uxth	r2, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	3302      	adds	r3, #2
 8004588:	b212      	sxth	r2, r2
 800458a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800458c:	7c7a      	ldrb	r2, [r7, #17]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	3304      	adds	r3, #4
 8004592:	b212      	sxth	r2, r2
 8004594:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	3304      	adds	r3, #4
 800459a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	7c3b      	ldrb	r3, [r7, #16]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	4413      	add	r3, r2
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	3304      	adds	r3, #4
 80045b0:	b212      	sxth	r2, r2
 80045b2:	801a      	strh	r2, [r3, #0]

  return ret;
 80045b4:	697b      	ldr	r3, [r7, #20]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 80045c8:	2301      	movs	r3, #1
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	214f      	movs	r1, #79	; 0x4f
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff fed0 	bl	8004374 <lis2mdl_read_reg>
 80045d4:	60f8      	str	r0, [r7, #12]
  return ret;
 80045d6:	68fb      	ldr	r3, [r7, #12]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 80045ec:	f107 0208 	add.w	r2, r7, #8
 80045f0:	2301      	movs	r3, #1
 80045f2:	2162      	movs	r1, #98	; 0x62
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff febd 	bl	8004374 <lis2mdl_read_reg>
 80045fa:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10f      	bne.n	8004622 <lis2mdl_self_test_set+0x42>
    reg.self_test = val;
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	b2da      	uxtb	r2, r3
 800460a:	7a3b      	ldrb	r3, [r7, #8]
 800460c:	f362 0341 	bfi	r3, r2, #1, #1
 8004610:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8004612:	f107 0208 	add.w	r2, r7, #8
 8004616:	2301      	movs	r3, #1
 8004618:	2162      	movs	r1, #98	; 0x62
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff fec2 	bl	80043a4 <lis2mdl_write_reg>
 8004620:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004622:	68fb      	ldr	r3, [r7, #12]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <lis2mdl_i2c_interface_set>:
  * @param  val   change the values of i2c_dis in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx, lis2mdl_i2c_dis_t val)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8004638:	f107 0208 	add.w	r2, r7, #8
 800463c:	2301      	movs	r3, #1
 800463e:	2162      	movs	r1, #98	; 0x62
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff fe97 	bl	8004374 <lis2mdl_read_reg>
 8004646:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10f      	bne.n	800466e <lis2mdl_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	b2da      	uxtb	r2, r3
 8004656:	7a3b      	ldrb	r3, [r7, #8]
 8004658:	f362 1345 	bfi	r3, r2, #5, #1
 800465c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 800465e:	f107 0208 	add.w	r2, r7, #8
 8004662:	2301      	movs	r3, #1
 8004664:	2162      	movs	r1, #98	; 0x62
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fe9c 	bl	80043a4 <lis2mdl_write_reg>
 800466c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800466e:	68fb      	ldr	r3, [r7, #12]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <LPS22HH_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d103      	bne.n	8004694 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 800468c:	f04f 33ff 	mov.w	r3, #4294967295
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	e04d      	b.n	8004730 <LPS22HH_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	7b1a      	ldrb	r2, [r3, #12]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	695a      	ldr	r2, [r3, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	699a      	ldr	r2, [r3, #24]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a1b      	ldr	r2, [pc, #108]	; (800473c <LPS22HH_RegisterBusIO+0xc4>)
 80046d0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a1a      	ldr	r2, [pc, #104]	; (8004740 <LPS22HH_RegisterBusIO+0xc8>)
 80046d6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d103      	bne.n	80046ee <LPS22HH_RegisterBusIO+0x76>
    {
      ret = LPS22HH_ERROR;
 80046e6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	e020      	b.n	8004730 <LPS22HH_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4798      	blx	r3
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <LPS22HH_RegisterBusIO+0x8a>
    {
      ret = LPS22HH_ERROR;
 80046fa:	f04f 33ff 	mov.w	r3, #4294967295
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	e016      	b.n	8004730 <LPS22HH_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d112      	bne.n	8004730 <LPS22HH_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10d      	bne.n	8004730 <LPS22HH_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004714:	2301      	movs	r3, #1
 8004716:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8004718:	7afb      	ldrb	r3, [r7, #11]
 800471a:	461a      	mov	r2, r3
 800471c:	2110      	movs	r1, #16
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f9df 	bl	8004ae2 <LPS22HH_Write_Reg>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <LPS22HH_RegisterBusIO+0xb8>
          {
            ret = LPS22HH_ERROR;
 800472a:	f04f 33ff 	mov.w	r3, #4294967295
 800472e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004730:	68fb      	ldr	r3, [r7, #12]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	08004e0b 	.word	0x08004e0b
 8004740:	08004e41 	.word	0x08004e41

08004744 <LPS22HH_Init>:
 * @brief  Initialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004752:	2b00      	cmp	r3, #0
 8004754:	d108      	bne.n	8004768 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fb0e 	bl	8004d78 <LPS22HH_Initialize>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8004762:	f04f 33ff 	mov.w	r3, #4294967295
 8004766:	e004      	b.n	8004772 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HH_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <LPS22HH_DeInit>:
 * @brief  Deinitialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004788:	2b01      	cmp	r3, #1
 800478a:	d111      	bne.n	80047b0 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f877 	bl	8004880 <LPS22HH_PRESS_Disable>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8004798:	f04f 33ff 	mov.w	r3, #4294967295
 800479c:	e00d      	b.n	80047ba <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f918 	bl	80049d4 <LPS22HH_TEMP_Disable>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295
 80047ae:	e004      	b.n	80047ba <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HH_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <LPS22HH_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	331c      	adds	r3, #28
 80047d0:	6839      	ldr	r1, [r7, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fd1a 	bl	800520c <lps22hh_device_id_get>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 80047de:	f04f 33ff 	mov.w	r3, #4294967295
 80047e2:	e000      	b.n	80047e6 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <LPS22HH_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HH sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2200      	movs	r2, #0
 80047fe:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2201      	movs	r2, #1
 8004804:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2201      	movs	r2, #1
 800480a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2200      	movs	r2, #0
 8004810:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	4a05      	ldr	r2, [pc, #20]	; (8004834 <LPS22HH_GetCapabilities+0x44>)
 800481e:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	4a04      	ldr	r2, [pc, #16]	; (8004834 <LPS22HH_GetCapabilities+0x44>)
 8004824:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	43480000 	.word	0x43480000

08004838 <LPS22HH_PRESS_Enable>:
 * @brief  Enable the LPS22HH pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e014      	b.n	8004878 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f103 021c 	add.w	r2, r3, #28
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f000 fb93 	bl	8004f88 <lps22hh_data_rate_set>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8004868:	f04f 33ff 	mov.w	r3, #4294967295
 800486c:	e004      	b.n	8004878 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HH_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <LPS22HH_PRESS_Disable>:
 * @brief  Disable the LPS22HH pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	e024      	b.n	80048e0 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800489c:	2b00      	cmp	r3, #0
 800489e:	d11a      	bne.n	80048d6 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f103 021c 	add.w	r2, r3, #28
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	332b      	adds	r3, #43	; 0x2b
 80048aa:	4619      	mov	r1, r3
 80048ac:	4610      	mov	r0, r2
 80048ae:	f000 fbb9 	bl	8005024 <lps22hh_data_rate_get>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 80048b8:	f04f 33ff 	mov.w	r3, #4294967295
 80048bc:	e010      	b.n	80048e0 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	331c      	adds	r3, #28
 80048c2:	2100      	movs	r1, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fb5f 	bl	8004f88 <lps22hh_data_rate_set>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80048d0:	f04f 33ff 	mov.w	r3, #4294967295
 80048d4:	e004      	b.n	80048e0 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HH_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <LPS22HH_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80048f2:	6839      	ldr	r1, [r7, #0]
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f90f 	bl	8004b18 <LPS22HH_GetOutputDataRate>
 80048fa:	4603      	mov	r3, r0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <LPS22HH_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004916:	2b01      	cmp	r3, #1
 8004918:	d106      	bne.n	8004928 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800491a:	ed97 0a00 	vldr	s0, [r7]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f95e 	bl	8004be0 <LPS22HH_SetOutputDataRate_When_Enabled>
 8004924:	4603      	mov	r3, r0
 8004926:	e005      	b.n	8004934 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004928:	ed97 0a00 	vldr	s0, [r7]
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f9c9 	bl	8004cc4 <LPS22HH_SetOutputDataRate_When_Disabled>
 8004932:	4603      	mov	r3, r0
  }
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <LPS22HH_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8004946:	f107 030c 	add.w	r3, r7, #12
 800494a:	2204      	movs	r2, #4
 800494c:	2100      	movs	r1, #0
 800494e:	4618      	mov	r0, r3
 8004950:	f012 fb56 	bl	8017000 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	331c      	adds	r3, #28
 8004958:	f107 020c 	add.w	r2, r7, #12
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fc08 	bl	8005174 <lps22hh_pressure_raw_get>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 800496a:	f04f 33ff 	mov.w	r3, #4294967295
 800496e:	e009      	b.n	8004984 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fab0 	bl	8004ed8 <lps22hh_from_lsb_to_hpa>
 8004978:	eef0 7a40 	vmov.f32	s15, s0
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <LPS22HH_TEMP_Enable>:
 * @brief  Enable the LPS22HH temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	e014      	b.n	80049cc <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f103 021c 	add.w	r2, r3, #28
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f000 fae9 	bl	8004f88 <lps22hh_data_rate_set>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80049bc:	f04f 33ff 	mov.w	r3, #4294967295
 80049c0:	e004      	b.n	80049cc <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HH_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <LPS22HH_TEMP_Disable>:
 * @brief  Disable the LPS22HH temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	e024      	b.n	8004a34 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d11a      	bne.n	8004a2a <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f103 021c 	add.w	r2, r3, #28
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	332b      	adds	r3, #43	; 0x2b
 80049fe:	4619      	mov	r1, r3
 8004a00:	4610      	mov	r0, r2
 8004a02:	f000 fb0f 	bl	8005024 <lps22hh_data_rate_get>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8004a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a10:	e010      	b.n	8004a34 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	331c      	adds	r3, #28
 8004a16:	2100      	movs	r1, #0
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fab5 	bl	8004f88 <lps22hh_data_rate_set>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8004a24:	f04f 33ff 	mov.w	r3, #4294967295
 8004a28:	e004      	b.n	8004a34 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HH_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <LPS22HH_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8004a46:	6839      	ldr	r1, [r7, #0]
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f865 	bl	8004b18 <LPS22HH_GetOutputDataRate>
 8004a4e:	4603      	mov	r3, r0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <LPS22HH_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d106      	bne.n	8004a7c <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004a6e:	ed97 0a00 	vldr	s0, [r7]
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f8b4 	bl	8004be0 <LPS22HH_SetOutputDataRate_When_Enabled>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	e005      	b.n	8004a88 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004a7c:	ed97 0a00 	vldr	s0, [r7]
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f91f 	bl	8004cc4 <LPS22HH_SetOutputDataRate_When_Disabled>
 8004a86:	4603      	mov	r3, r0
  }
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <LPS22HH_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004a9a:	f107 030c 	add.w	r3, r7, #12
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f012 faac 	bl	8017000 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	331c      	adds	r3, #28
 8004aac:	f107 020c 	add.w	r2, r7, #12
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fb87 	bl	80051c6 <lps22hh_temperature_raw_get>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8004abe:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac2:	e00a      	b.n	8004ada <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8004ac4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fa1d 	bl	8004f08 <lps22hh_from_lsb_to_celsius>
 8004ace:	eef0 7a40 	vmov.f32	s15, s0
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <LPS22HH_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	460b      	mov	r3, r1
 8004aec:	70fb      	strb	r3, [r7, #3]
 8004aee:	4613      	mov	r3, r2
 8004af0:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f103 001c 	add.w	r0, r3, #28
 8004af8:	1cba      	adds	r2, r7, #2
 8004afa:	78f9      	ldrb	r1, [r7, #3]
 8004afc:	2301      	movs	r3, #1
 8004afe:	f000 f9d2 	bl	8004ea6 <lps22hh_write_reg>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8004b08:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0c:	e000      	b.n	8004b10 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <LPS22HH_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	331c      	adds	r3, #28
 8004b2a:	f107 020b 	add.w	r2, r7, #11
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fa77 	bl	8005024 <lps22hh_data_rate_get>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8004b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b40:	e03d      	b.n	8004bbe <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8004b42:	7afb      	ldrb	r3, [r7, #11]
 8004b44:	2b07      	cmp	r3, #7
 8004b46:	d835      	bhi.n	8004bb4 <LPS22HH_GetOutputDataRate+0x9c>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <LPS22HH_GetOutputDataRate+0x38>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004b71 	.word	0x08004b71
 8004b54:	08004b7b 	.word	0x08004b7b
 8004b58:	08004b85 	.word	0x08004b85
 8004b5c:	08004b8d 	.word	0x08004b8d
 8004b60:	08004b95 	.word	0x08004b95
 8004b64:	08004b9d 	.word	0x08004b9d
 8004b68:	08004ba5 	.word	0x08004ba5
 8004b6c:	08004bad 	.word	0x08004bad
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
      break;
 8004b78:	e020      	b.n	8004bbc <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004b80:	601a      	str	r2, [r3, #0]
      break;
 8004b82:	e01b      	b.n	8004bbc <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	4a10      	ldr	r2, [pc, #64]	; (8004bc8 <LPS22HH_GetOutputDataRate+0xb0>)
 8004b88:	601a      	str	r2, [r3, #0]
      break;
 8004b8a:	e017      	b.n	8004bbc <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	4a0f      	ldr	r2, [pc, #60]	; (8004bcc <LPS22HH_GetOutputDataRate+0xb4>)
 8004b90:	601a      	str	r2, [r3, #0]
      break;
 8004b92:	e013      	b.n	8004bbc <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	4a0e      	ldr	r2, [pc, #56]	; (8004bd0 <LPS22HH_GetOutputDataRate+0xb8>)
 8004b98:	601a      	str	r2, [r3, #0]
      break;
 8004b9a:	e00f      	b.n	8004bbc <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	4a0d      	ldr	r2, [pc, #52]	; (8004bd4 <LPS22HH_GetOutputDataRate+0xbc>)
 8004ba0:	601a      	str	r2, [r3, #0]
      break;
 8004ba2:	e00b      	b.n	8004bbc <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	4a0c      	ldr	r2, [pc, #48]	; (8004bd8 <LPS22HH_GetOutputDataRate+0xc0>)
 8004ba8:	601a      	str	r2, [r3, #0]
      break;
 8004baa:	e007      	b.n	8004bbc <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	4a0b      	ldr	r2, [pc, #44]	; (8004bdc <LPS22HH_GetOutputDataRate+0xc4>)
 8004bb0:	601a      	str	r2, [r3, #0]
      break;
 8004bb2:	e003      	b.n	8004bbc <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8004bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb8:	60fb      	str	r3, [r7, #12]
      break;
 8004bba:	bf00      	nop
  }

  return ret;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	41200000 	.word	0x41200000
 8004bcc:	41c80000 	.word	0x41c80000
 8004bd0:	42480000 	.word	0x42480000
 8004bd4:	42960000 	.word	0x42960000
 8004bd8:	42c80000 	.word	0x42c80000
 8004bdc:	43480000 	.word	0x43480000

08004be0 <LPS22HH_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004bec:	edd7 7a00 	vldr	s15, [r7]
 8004bf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfc:	d801      	bhi.n	8004c02 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e037      	b.n	8004c72 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004c02:	edd7 7a00 	vldr	s15, [r7]
 8004c06:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c12:	d801      	bhi.n	8004c18 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e02c      	b.n	8004c72 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004c18:	edd7 7a00 	vldr	s15, [r7]
 8004c1c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c28:	d801      	bhi.n	8004c2e <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e021      	b.n	8004c72 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004c2e:	edd7 7a00 	vldr	s15, [r7]
 8004c32:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004cb8 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8004c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3e:	d801      	bhi.n	8004c44 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8004c40:	2304      	movs	r3, #4
 8004c42:	e016      	b.n	8004c72 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004c44:	edd7 7a00 	vldr	s15, [r7]
 8004c48:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004cbc <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8004c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c54:	d801      	bhi.n	8004c5a <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8004c56:	2305      	movs	r3, #5
 8004c58:	e00b      	b.n	8004c72 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004c5a:	edd7 7a00 	vldr	s15, [r7]
 8004c5e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004cc0 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8004c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6a:	d801      	bhi.n	8004c70 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8004c6c:	2306      	movs	r3, #6
 8004c6e:	e000      	b.n	8004c72 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004c70:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8004c72:	73fb      	strb	r3, [r7, #15]
          : (Odr <=  50.0f) ? LPS22HH_50_Hz
          : (Odr <=  75.0f) ? LPS22HH_75_Hz
          : (Odr <= 100.0f) ? LPS22HH_100_Hz
          :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	331c      	adds	r3, #28
 8004c78:	7bfa      	ldrb	r2, [r7, #15]
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 f983 	bl	8004f88 <lps22hh_data_rate_set>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8004c88:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8c:	e00f      	b.n	8004cae <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f103 021c 	add.w	r2, r3, #28
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	332b      	adds	r3, #43	; 0x2b
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	f000 f9c2 	bl	8005024 <lps22hh_data_rate_get>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8004ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8004caa:	e000      	b.n	8004cae <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	42480000 	.word	0x42480000
 8004cbc:	42960000 	.word	0x42960000
 8004cc0:	42c80000 	.word	0x42c80000

08004cc4 <LPS22HH_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004cd0:	edd7 7a00 	vldr	s15, [r7]
 8004cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce0:	d801      	bhi.n	8004ce6 <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e037      	b.n	8004d56 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004ce6:	edd7 7a00 	vldr	s15, [r7]
 8004cea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf6:	d801      	bhi.n	8004cfc <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e02c      	b.n	8004d56 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004cfc:	edd7 7a00 	vldr	s15, [r7]
 8004d00:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0c:	d801      	bhi.n	8004d12 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e021      	b.n	8004d56 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004d12:	edd7 7a00 	vldr	s15, [r7]
 8004d16:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004d6c <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 8004d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d22:	d801      	bhi.n	8004d28 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8004d24:	2304      	movs	r3, #4
 8004d26:	e016      	b.n	8004d56 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004d28:	edd7 7a00 	vldr	s15, [r7]
 8004d2c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004d70 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8004d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d38:	d801      	bhi.n	8004d3e <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8004d3a:	2305      	movs	r3, #5
 8004d3c:	e00b      	b.n	8004d56 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004d3e:	edd7 7a00 	vldr	s15, [r7]
 8004d42:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004d74 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 8004d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4e:	d801      	bhi.n	8004d54 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8004d50:	2306      	movs	r3, #6
 8004d52:	e000      	b.n	8004d56 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004d54:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                 : (Odr <=  50.0f) ? LPS22HH_50_Hz
                 : (Odr <=  75.0f) ? LPS22HH_75_Hz
                 : (Odr <= 100.0f) ? LPS22HH_100_Hz
                 :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	42480000 	.word	0x42480000
 8004d70:	42960000 	.word	0x42960000
 8004d74:	42c80000 	.word	0x42c80000

08004d78 <LPS22HH_Initialize>:
 * @brief  Initialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	331c      	adds	r3, #28
 8004d84:	2111      	movs	r1, #17
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fa9d 	bl	80052c6 <lps22hh_i3c_interface_set>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 8004d92:	f04f 33ff 	mov.w	r3, #4294967295
 8004d96:	e034      	b.n	8004e02 <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	331c      	adds	r3, #28
 8004d9c:	2110      	movs	r1, #16
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 f8f2 	bl	8004f88 <lps22hh_data_rate_set>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 8004daa:	f04f 33ff 	mov.w	r3, #4294967295
 8004dae:	e028      	b.n	8004e02 <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	331c      	adds	r3, #28
 8004db4:	2100      	movs	r1, #0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fa5f 	bl	800527a <lps22hh_lp_bandwidth_set>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 8004dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc6:	e01c      	b.n	8004e02 <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	331c      	adds	r3, #28
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 f8b4 	bl	8004f3c <lps22hh_block_data_update_set>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 8004dda:	f04f 33ff 	mov.w	r3, #4294967295
 8004dde:	e010      	b.n	8004e02 <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	331c      	adds	r3, #28
 8004de4:	2101      	movs	r1, #1
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fa21 	bl	800522e <lps22hh_auto_increment_set>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 8004df2:	f04f 33ff 	mov.w	r3, #4294967295
 8004df6:	e004      	b.n	8004e02 <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HH_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004e0a:	b590      	push	{r4, r7, lr}
 8004e0c:	b087      	sub	sp, #28
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	461a      	mov	r2, r3
 8004e16:	460b      	mov	r3, r1
 8004e18:	72fb      	strb	r3, [r7, #11]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	695c      	ldr	r4, [r3, #20]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	7b1b      	ldrb	r3, [r3, #12]
 8004e2a:	b298      	uxth	r0, r3
 8004e2c:	7afb      	ldrb	r3, [r7, #11]
 8004e2e:	b299      	uxth	r1, r3
 8004e30:	893b      	ldrh	r3, [r7, #8]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	47a0      	blx	r4
 8004e36:	4603      	mov	r3, r0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	371c      	adds	r7, #28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd90      	pop	{r4, r7, pc}

08004e40 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004e40:	b590      	push	{r4, r7, lr}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	607a      	str	r2, [r7, #4]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	72fb      	strb	r3, [r7, #11]
 8004e50:	4613      	mov	r3, r2
 8004e52:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	691c      	ldr	r4, [r3, #16]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	7b1b      	ldrb	r3, [r3, #12]
 8004e60:	b298      	uxth	r0, r3
 8004e62:	7afb      	ldrb	r3, [r7, #11]
 8004e64:	b299      	uxth	r1, r3
 8004e66:	893b      	ldrh	r3, [r7, #8]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	47a0      	blx	r4
 8004e6c:	4603      	mov	r3, r0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd90      	pop	{r4, r7, pc}

08004e76 <lps22hh_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004e76:	b590      	push	{r4, r7, lr}
 8004e78:	b087      	sub	sp, #28
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	461a      	mov	r2, r3
 8004e82:	460b      	mov	r3, r1
 8004e84:	72fb      	strb	r3, [r7, #11]
 8004e86:	4613      	mov	r3, r2
 8004e88:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685c      	ldr	r4, [r3, #4]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6898      	ldr	r0, [r3, #8]
 8004e92:	893b      	ldrh	r3, [r7, #8]
 8004e94:	7af9      	ldrb	r1, [r7, #11]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	47a0      	blx	r4
 8004e9a:	6178      	str	r0, [r7, #20]
  return ret;
 8004e9c:	697b      	ldr	r3, [r7, #20]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd90      	pop	{r4, r7, pc}

08004ea6 <lps22hh_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8004ea6:	b590      	push	{r4, r7, lr}
 8004ea8:	b087      	sub	sp, #28
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	72fb      	strb	r3, [r7, #11]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681c      	ldr	r4, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6898      	ldr	r0, [r3, #8]
 8004ec2:	893b      	ldrh	r3, [r7, #8]
 8004ec4:	7af9      	ldrb	r1, [r7, #11]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	47a0      	blx	r4
 8004eca:	6178      	str	r0, [r7, #20]
  return ret;
 8004ecc:	697b      	ldr	r3, [r7, #20]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd90      	pop	{r4, r7, pc}
	...

08004ed8 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  return ( (float_t) lsb / 1048576.0f );
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eea:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004f04 <lps22hh_from_lsb_to_hpa+0x2c>
 8004eee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004ef2:	eef0 7a66 	vmov.f32	s15, s13
}
 8004ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	49800000 	.word	0x49800000

08004f08 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	80fb      	strh	r3, [r7, #6]
  return ( (float_t) lsb / 100.0f );
 8004f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f1e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004f38 <lps22hh_from_lsb_to_celsius+0x30>
 8004f22:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004f26:	eef0 7a66 	vmov.f32	s15, s13
}
 8004f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	42c80000 	.word	0x42c80000

08004f3c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
 8004f48:	f107 0208 	add.w	r2, r7, #8
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	2110      	movs	r1, #16
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff ff90 	bl	8004e76 <lps22hh_read_reg>
 8004f56:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10f      	bne.n	8004f7e <lps22hh_block_data_update_set+0x42>
    reg.bdu = val;
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	7a3b      	ldrb	r3, [r7, #8]
 8004f68:	f362 0341 	bfi	r3, r2, #1, #1
 8004f6c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
 8004f6e:	f107 0208 	add.w	r2, r7, #8
 8004f72:	2301      	movs	r3, #1
 8004f74:	2110      	movs	r1, #16
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff ff95 	bl	8004ea6 <lps22hh_write_reg>
 8004f7c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004f94:	f107 0210 	add.w	r2, r7, #16
 8004f98:	2301      	movs	r3, #1
 8004f9a:	2110      	movs	r1, #16
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff ff6a 	bl	8004e76 <lps22hh_read_reg>
 8004fa2:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d107      	bne.n	8004fba <lps22hh_data_rate_set+0x32>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8004faa:	f107 020c 	add.w	r2, r7, #12
 8004fae:	2301      	movs	r3, #1
 8004fb0:	2111      	movs	r1, #17
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff ff5f 	bl	8004e76 <lps22hh_read_reg>
 8004fb8:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10f      	bne.n	8004fe0 <lps22hh_data_rate_set+0x58>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	7c3b      	ldrb	r3, [r7, #16]
 8004fca:	f362 1306 	bfi	r3, r2, #4, #3
 8004fce:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004fd0:	f107 0210 	add.w	r2, r7, #16
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	2110      	movs	r1, #16
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff ff64 	bl	8004ea6 <lps22hh_write_reg>
 8004fde:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d119      	bne.n	800501a <lps22hh_data_rate_set+0x92>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8004fe6:	78fb      	ldrb	r3, [r7, #3]
 8004fe8:	091b      	lsrs	r3, r3, #4
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	7b3b      	ldrb	r3, [r7, #12]
 8004ff2:	f362 0341 	bfi	r3, r2, #1, #1
 8004ff6:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	08db      	lsrs	r3, r3, #3
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	b2da      	uxtb	r2, r3
 8005002:	7b3b      	ldrb	r3, [r7, #12]
 8005004:	f362 0300 	bfi	r3, r2, #0, #1
 8005008:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 800500a:	f107 020c 	add.w	r2, r7, #12
 800500e:	2301      	movs	r3, #1
 8005010:	2111      	movs	r1, #17
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff ff47 	bl	8004ea6 <lps22hh_write_reg>
 8005018:	6178      	str	r0, [r7, #20]
  }
  return ret;
 800501a:	697b      	ldr	r3, [r7, #20]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800502e:	f107 0210 	add.w	r2, r7, #16
 8005032:	2301      	movs	r3, #1
 8005034:	2110      	movs	r1, #16
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff ff1d 	bl	8004e76 <lps22hh_read_reg>
 800503c:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d107      	bne.n	8005054 <lps22hh_data_rate_get+0x30>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8005044:	f107 020c 	add.w	r2, r7, #12
 8005048:	2301      	movs	r3, #1
 800504a:	2111      	movs	r1, #17
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff ff12 	bl	8004e76 <lps22hh_read_reg>
 8005052:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f040 8086 	bne.w	8005168 <lps22hh_data_rate_get+0x144>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 800505c:	f107 020c 	add.w	r2, r7, #12
 8005060:	2301      	movs	r3, #1
 8005062:	2111      	movs	r1, #17
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff ff06 	bl	8004e76 <lps22hh_read_reg>
 800506a:	6178      	str	r0, [r7, #20]
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800506c:	7b3b      	ldrb	r3, [r7, #12]
 800506e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005072:	b2db      	uxtb	r3, r3
 8005074:	011a      	lsls	r2, r3, #4
 8005076:	7b3b      	ldrb	r3, [r7, #12]
 8005078:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800507c:	b2db      	uxtb	r3, r3
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	4413      	add	r3, r2
            ctrl_reg1.odr )) {
 8005082:	7c3a      	ldrb	r2, [r7, #16]
 8005084:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005088:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800508a:	4413      	add	r3, r2
 800508c:	2b15      	cmp	r3, #21
 800508e:	d867      	bhi.n	8005160 <lps22hh_data_rate_get+0x13c>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <lps22hh_data_rate_get+0x74>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050f1 	.word	0x080050f1
 800509c:	08005101 	.word	0x08005101
 80050a0:	08005109 	.word	0x08005109
 80050a4:	08005111 	.word	0x08005111
 80050a8:	08005119 	.word	0x08005119
 80050ac:	08005121 	.word	0x08005121
 80050b0:	08005151 	.word	0x08005151
 80050b4:	08005159 	.word	0x08005159
 80050b8:	080050f9 	.word	0x080050f9
 80050bc:	08005161 	.word	0x08005161
 80050c0:	08005161 	.word	0x08005161
 80050c4:	08005161 	.word	0x08005161
 80050c8:	08005161 	.word	0x08005161
 80050cc:	08005161 	.word	0x08005161
 80050d0:	08005161 	.word	0x08005161
 80050d4:	08005161 	.word	0x08005161
 80050d8:	08005161 	.word	0x08005161
 80050dc:	08005129 	.word	0x08005129
 80050e0:	08005131 	.word	0x08005131
 80050e4:	08005139 	.word	0x08005139
 80050e8:	08005141 	.word	0x08005141
 80050ec:	08005149 	.word	0x08005149
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2200      	movs	r2, #0
 80050f4:	701a      	strb	r2, [r3, #0]
        break;
 80050f6:	e038      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2208      	movs	r2, #8
 80050fc:	701a      	strb	r2, [r3, #0]
        break;
 80050fe:	e034      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2201      	movs	r2, #1
 8005104:	701a      	strb	r2, [r3, #0]
        break;
 8005106:	e030      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2202      	movs	r2, #2
 800510c:	701a      	strb	r2, [r3, #0]
        break;
 800510e:	e02c      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2203      	movs	r2, #3
 8005114:	701a      	strb	r2, [r3, #0]
        break;
 8005116:	e028      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2204      	movs	r2, #4
 800511c:	701a      	strb	r2, [r3, #0]
        break;
 800511e:	e024      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2205      	movs	r2, #5
 8005124:	701a      	strb	r2, [r3, #0]
        break;
 8005126:	e020      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2211      	movs	r2, #17
 800512c:	701a      	strb	r2, [r3, #0]
        break;
 800512e:	e01c      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2212      	movs	r2, #18
 8005134:	701a      	strb	r2, [r3, #0]
        break;
 8005136:	e018      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2213      	movs	r2, #19
 800513c:	701a      	strb	r2, [r3, #0]
        break;
 800513e:	e014      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2214      	movs	r2, #20
 8005144:	701a      	strb	r2, [r3, #0]
        break;
 8005146:	e010      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2215      	movs	r2, #21
 800514c:	701a      	strb	r2, [r3, #0]
        break;
 800514e:	e00c      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2206      	movs	r2, #6
 8005154:	701a      	strb	r2, [r3, #0]
        break;
 8005156:	e008      	b.n	800516a <lps22hh_data_rate_get+0x146>
      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2207      	movs	r2, #7
 800515c:	701a      	strb	r2, [r3, #0]
        break;
 800515e:	e004      	b.n	800516a <lps22hh_data_rate_get+0x146>
      default:
        *val = LPS22HH_POWER_DOWN;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2200      	movs	r2, #0
 8005164:	701a      	strb	r2, [r3, #0]
        break;
 8005166:	e000      	b.n	800516a <lps22hh_data_rate_get+0x146>
    }
  }
 8005168:	bf00      	nop
  return ret;
 800516a:	697b      	ldr	r3, [r7, #20]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];

  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800517e:	f107 0208 	add.w	r2, r7, #8
 8005182:	2303      	movs	r3, #3
 8005184:	2128      	movs	r1, #40	; 0x28
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff fe75 	bl	8004e76 <lps22hh_read_reg>
 800518c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800518e:	7abb      	ldrb	r3, [r7, #10]
 8005190:	461a      	mov	r2, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	7a7a      	ldrb	r2, [r7, #9]
 800519e:	441a      	add	r2, r3
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	7a3a      	ldrb	r2, [r7, #8]
 80051ac:	441a      	add	r2, r3
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	021a      	lsls	r2, r3, #8
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	601a      	str	r2, [r3, #0]

  return ret;
 80051bc:	68fb      	ldr	r3, [r7, #12]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80051d0:	f107 0208 	add.w	r2, r7, #8
 80051d4:	2302      	movs	r3, #2
 80051d6:	212b      	movs	r1, #43	; 0x2b
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff fe4c 	bl	8004e76 <lps22hh_read_reg>
 80051de:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80051e0:	7a7b      	ldrb	r3, [r7, #9]
 80051e2:	b21a      	sxth	r2, r3
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	021b      	lsls	r3, r3, #8
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	7a3b      	ldrb	r3, [r7, #8]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	4413      	add	r3, r2
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	b21a      	sxth	r2, r3
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	801a      	strh	r2, [r3, #0]

  return ret;
 8005202:	68fb      	ldr	r3, [r7, #12]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005216:	2301      	movs	r3, #1
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	210f      	movs	r1, #15
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff fe2a 	bl	8004e76 <lps22hh_read_reg>
 8005222:	60f8      	str	r0, [r7, #12]
  return ret;
 8005224:	68fb      	ldr	r3, [r7, #12]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	460b      	mov	r3, r1
 8005238:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*) &reg, 1);
 800523a:	f107 0208 	add.w	r2, r7, #8
 800523e:	2301      	movs	r3, #1
 8005240:	2111      	movs	r1, #17
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff fe17 	bl	8004e76 <lps22hh_read_reg>
 8005248:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10f      	bne.n	8005270 <lps22hh_auto_increment_set+0x42>
    reg.if_add_inc = val;
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	b2da      	uxtb	r2, r3
 8005258:	7a3b      	ldrb	r3, [r7, #8]
 800525a:	f362 1304 	bfi	r3, r2, #4, #1
 800525e:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*) &reg, 1);
 8005260:	f107 0208 	add.w	r2, r7, #8
 8005264:	2301      	movs	r3, #1
 8005266:	2111      	movs	r1, #17
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff fe1c 	bl	8004ea6 <lps22hh_write_reg>
 800526e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005270:	68fb      	ldr	r3, [r7, #12]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <lps22hh_lp_bandwidth_set>:
  * @param  val      change the values of lpfp_cfg in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx, lps22hh_lpfp_cfg_t val)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
 8005286:	f107 0208 	add.w	r2, r7, #8
 800528a:	2301      	movs	r3, #1
 800528c:	2110      	movs	r1, #16
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff fdf1 	bl	8004e76 <lps22hh_read_reg>
 8005294:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10f      	bne.n	80052bc <lps22hh_lp_bandwidth_set+0x42>
    reg.lpfp_cfg = (uint8_t)val;
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	7a3b      	ldrb	r3, [r7, #8]
 80052a6:	f362 0383 	bfi	r3, r2, #2, #2
 80052aa:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
 80052ac:	f107 0208 	add.w	r2, r7, #8
 80052b0:	2301      	movs	r3, #1
 80052b2:	2110      	movs	r1, #16
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff fdf6 	bl	8004ea6 <lps22hh_write_reg>
 80052ba:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80052bc:	68fb      	ldr	r3, [r7, #12]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	460b      	mov	r3, r1
 80052d0:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t*) &reg, 1);
 80052d2:	f107 0208 	add.w	r2, r7, #8
 80052d6:	2301      	movs	r3, #1
 80052d8:	210e      	movs	r1, #14
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff fdcb 	bl	8004e76 <lps22hh_read_reg>
 80052e0:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d118      	bne.n	800531a <lps22hh_i3c_interface_set+0x54>
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 80052e8:	78fb      	ldrb	r3, [r7, #3]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	7a3b      	ldrb	r3, [r7, #8]
 80052f2:	f362 0341 	bfi	r3, r2, #1, #1
 80052f6:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	091b      	lsrs	r3, r3, #4
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	b2da      	uxtb	r2, r3
 8005302:	7a3b      	ldrb	r3, [r7, #8]
 8005304:	f362 13c7 	bfi	r3, r2, #7, #1
 8005308:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t*) &reg, 1);
 800530a:	f107 0208 	add.w	r2, r7, #8
 800530e:	2301      	movs	r3, #1
 8005310:	210e      	movs	r1, #14
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff fdc7 	bl	8004ea6 <lps22hh_write_reg>
 8005318:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800531a:	68fb      	ldr	r3, [r7, #12]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <LSM6DSO_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d103      	bne.n	8005340 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005338:	f04f 33ff 	mov.w	r3, #4294967295
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	e04d      	b.n	80053dc <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	7b1a      	ldrb	r2, [r3, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	695a      	ldr	r2, [r3, #20]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	699a      	ldr	r2, [r3, #24]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a1b      	ldr	r2, [pc, #108]	; (80053e8 <LSM6DSO_RegisterBusIO+0xc4>)
 800537c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a1a      	ldr	r2, [pc, #104]	; (80053ec <LSM6DSO_RegisterBusIO+0xc8>)
 8005382:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d103      	bne.n	800539a <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 8005392:	f04f 33ff 	mov.w	r3, #4294967295
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	e020      	b.n	80053dc <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4798      	blx	r3
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 80053a6:	f04f 33ff 	mov.w	r3, #4294967295
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	e016      	b.n	80053dc <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d112      	bne.n	80053dc <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10d      	bne.n	80053dc <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80053c0:	230c      	movs	r3, #12
 80053c2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 80053c4:	7afb      	ldrb	r3, [r7, #11]
 80053c6:	461a      	mov	r2, r3
 80053c8:	2112      	movs	r1, #18
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 ff59 	bl	8006282 <LSM6DSO_Write_Reg>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 80053d6:	f04f 33ff 	mov.w	r3, #4294967295
 80053da:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80053dc:	68fb      	ldr	r3, [r7, #12]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	08006725 	.word	0x08006725
 80053ec:	0800675b 	.word	0x0800675b

080053f0 <LSM6DSO_Init>:
 * @brief  Initialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	331c      	adds	r3, #28
 80053fc:	2180      	movs	r1, #128	; 0x80
 80053fe:	4618      	mov	r0, r3
 8005400:	f001 fe23 	bl	800704a <lsm6dso_i3c_disable_set>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 800540a:	f04f 33ff 	mov.w	r3, #4294967295
 800540e:	e060      	b.n	80054d2 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	331c      	adds	r3, #28
 8005414:	2101      	movs	r1, #1
 8005416:	4618      	mov	r0, r3
 8005418:	f001 fdf1 	bl	8006ffe <lsm6dso_auto_increment_set>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 8005422:	f04f 33ff 	mov.w	r3, #4294967295
 8005426:	e054      	b.n	80054d2 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	331c      	adds	r3, #28
 800542c:	2101      	movs	r1, #1
 800542e:	4618      	mov	r0, r3
 8005430:	f001 fd66 	bl	8006f00 <lsm6dso_block_data_update_set>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 800543a:	f04f 33ff 	mov.w	r3, #4294967295
 800543e:	e048      	b.n	80054d2 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	331c      	adds	r3, #28
 8005444:	2100      	movs	r1, #0
 8005446:	4618      	mov	r0, r3
 8005448:	f001 fe45 	bl	80070d6 <lsm6dso_fifo_mode_set>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 8005452:	f04f 33ff 	mov.w	r3, #4294967295
 8005456:	e03c      	b.n	80054d2 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2204      	movs	r2, #4
 800545c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	331c      	adds	r3, #28
 8005464:	2100      	movs	r1, #0
 8005466:	4618      	mov	r0, r3
 8005468:	f001 fa20 	bl	80068ac <lsm6dso_xl_data_rate_set>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8005472:	f04f 33ff 	mov.w	r3, #4294967295
 8005476:	e02c      	b.n	80054d2 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	331c      	adds	r3, #28
 800547c:	2100      	movs	r1, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f001 f9b6 	bl	80067f0 <lsm6dso_xl_full_scale_set>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 800548a:	f04f 33ff 	mov.w	r3, #4294967295
 800548e:	e020      	b.n	80054d2 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2204      	movs	r2, #4
 8005494:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	331c      	adds	r3, #28
 800549c:	2100      	movs	r1, #0
 800549e:	4618      	mov	r0, r3
 80054a0:	f001 fbd0 	bl	8006c44 <lsm6dso_gy_data_rate_set>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 80054aa:	f04f 33ff 	mov.w	r3, #4294967295
 80054ae:	e010      	b.n	80054d2 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	331c      	adds	r3, #28
 80054b4:	2106      	movs	r1, #6
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 fb5c 	bl	8006b74 <lsm6dso_gy_full_scale_set>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 80054c2:	f04f 33ff 	mov.w	r3, #4294967295
 80054c6:	e004      	b.n	80054d2 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <LSM6DSO_DeInit>:
 * @brief  Deinitialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f888 	bl	80055f8 <LSM6DSO_ACC_Disable>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80054ee:	f04f 33ff 	mov.w	r3, #4294967295
 80054f2:	e015      	b.n	8005520 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fc2e 	bl	8005d56 <LSM6DSO_GYRO_Disable>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8005500:	f04f 33ff 	mov.w	r3, #4294967295
 8005504:	e00c      	b.n	8005520 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <LSM6DSO_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	331c      	adds	r3, #28
 8005536:	6839      	ldr	r1, [r7, #0]
 8005538:	4618      	mov	r0, r3
 800553a:	f001 fd4f 	bl	8006fdc <lsm6dso_device_id_get>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8005544:	f04f 33ff 	mov.w	r3, #4294967295
 8005548:	e000      	b.n	800554c <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <LSM6DSO_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSO sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2201      	movs	r2, #1
 8005562:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2201      	movs	r2, #1
 8005568:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2200      	movs	r2, #0
 800556e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2200      	movs	r2, #0
 8005574:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800557c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2210      	movs	r2, #16
 8005582:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2200      	movs	r2, #0
 8005588:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	4a07      	ldr	r2, [pc, #28]	; (80055ac <LSM6DSO_GetCapabilities+0x58>)
 800558e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	4a06      	ldr	r2, [pc, #24]	; (80055ac <LSM6DSO_GetCapabilities+0x58>)
 8005594:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	45d02000 	.word	0x45d02000

080055b0 <LSM6DSO_ACC_Enable>:
 * @brief  Enable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e014      	b.n	80055f0 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f103 021c 	add.w	r2, r3, #28
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80055d2:	4619      	mov	r1, r3
 80055d4:	4610      	mov	r0, r2
 80055d6:	f001 f969 	bl	80068ac <lsm6dso_xl_data_rate_set>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80055e0:	f04f 33ff 	mov.w	r3, #4294967295
 80055e4:	e004      	b.n	80055f0 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <LSM6DSO_ACC_Disable>:
 * @brief  Disable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	e01f      	b.n	800564e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f103 021c 	add.w	r2, r3, #28
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	332b      	adds	r3, #43	; 0x2b
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f001 fa42 	bl	8006aa4 <lsm6dso_xl_data_rate_get>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8005626:	f04f 33ff 	mov.w	r3, #4294967295
 800562a:	e010      	b.n	800564e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	331c      	adds	r3, #28
 8005630:	2100      	movs	r1, #0
 8005632:	4618      	mov	r0, r3
 8005634:	f001 f93a 	bl	80068ac <lsm6dso_xl_data_rate_set>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800563e:	f04f 33ff 	mov.w	r3, #4294967295
 8005642:	e004      	b.n	800564e <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <LSM6DSO_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	331c      	adds	r3, #28
 800566a:	f107 020b 	add.w	r2, r7, #11
 800566e:	4611      	mov	r1, r2
 8005670:	4618      	mov	r0, r3
 8005672:	f001 f8e3 	bl	800683c <lsm6dso_xl_full_scale_get>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800567c:	f04f 33ff 	mov.w	r3, #4294967295
 8005680:	e023      	b.n	80056ca <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005682:	7afb      	ldrb	r3, [r7, #11]
 8005684:	2b03      	cmp	r3, #3
 8005686:	d81b      	bhi.n	80056c0 <LSM6DSO_ACC_GetSensitivity+0x68>
 8005688:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <LSM6DSO_ACC_GetSensitivity+0x38>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056a1 	.word	0x080056a1
 8005694:	080056b9 	.word	0x080056b9
 8005698:	080056a9 	.word	0x080056a9
 800569c:	080056b1 	.word	0x080056b1
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	4a0c      	ldr	r2, [pc, #48]	; (80056d4 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 80056a4:	601a      	str	r2, [r3, #0]
      break;
 80056a6:	e00f      	b.n	80056c8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	4a0b      	ldr	r2, [pc, #44]	; (80056d8 <LSM6DSO_ACC_GetSensitivity+0x80>)
 80056ac:	601a      	str	r2, [r3, #0]
      break;
 80056ae:	e00b      	b.n	80056c8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <LSM6DSO_ACC_GetSensitivity+0x84>)
 80056b4:	601a      	str	r2, [r3, #0]
      break;
 80056b6:	e007      	b.n	80056c8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	4a09      	ldr	r2, [pc, #36]	; (80056e0 <LSM6DSO_ACC_GetSensitivity+0x88>)
 80056bc:	601a      	str	r2, [r3, #0]
      break;
 80056be:	e003      	b.n	80056c8 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80056c0:	f04f 33ff 	mov.w	r3, #4294967295
 80056c4:	60fb      	str	r3, [r7, #12]
      break;
 80056c6:	bf00      	nop
  }

  return ret;
 80056c8:	68fb      	ldr	r3, [r7, #12]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	3d79db23 	.word	0x3d79db23
 80056d8:	3df9db23 	.word	0x3df9db23
 80056dc:	3e79db23 	.word	0x3e79db23
 80056e0:	3ef9db23 	.word	0x3ef9db23

080056e4 <LSM6DSO_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	331c      	adds	r3, #28
 80056f6:	f107 020b 	add.w	r2, r7, #11
 80056fa:	4611      	mov	r1, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f001 f9d1 	bl	8006aa4 <lsm6dso_xl_data_rate_get>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8005708:	f04f 33ff 	mov.w	r3, #4294967295
 800570c:	e054      	b.n	80057b8 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800570e:	7afb      	ldrb	r3, [r7, #11]
 8005710:	2b0b      	cmp	r3, #11
 8005712:	d84c      	bhi.n	80057ae <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8005714:	a201      	add	r2, pc, #4	; (adr r2, 800571c <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	0800574d 	.word	0x0800574d
 8005720:	0800575f 	.word	0x0800575f
 8005724:	08005767 	.word	0x08005767
 8005728:	0800576f 	.word	0x0800576f
 800572c:	08005777 	.word	0x08005777
 8005730:	0800577f 	.word	0x0800577f
 8005734:	08005787 	.word	0x08005787
 8005738:	0800578f 	.word	0x0800578f
 800573c:	08005797 	.word	0x08005797
 8005740:	0800579f 	.word	0x0800579f
 8005744:	080057a7 	.word	0x080057a7
 8005748:	08005757 	.word	0x08005757
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	601a      	str	r2, [r3, #0]
      break;
 8005754:	e02f      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	4a19      	ldr	r2, [pc, #100]	; (80057c0 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 800575a:	601a      	str	r2, [r3, #0]
      break;
 800575c:	e02b      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8005762:	601a      	str	r2, [r3, #0]
      break;
 8005764:	e027      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	4a17      	ldr	r2, [pc, #92]	; (80057c8 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 800576a:	601a      	str	r2, [r3, #0]
      break;
 800576c:	e023      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	4a16      	ldr	r2, [pc, #88]	; (80057cc <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8005772:	601a      	str	r2, [r3, #0]
      break;
 8005774:	e01f      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	4a15      	ldr	r2, [pc, #84]	; (80057d0 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 800577a:	601a      	str	r2, [r3, #0]
      break;
 800577c:	e01b      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	4a14      	ldr	r2, [pc, #80]	; (80057d4 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8005782:	601a      	str	r2, [r3, #0]
      break;
 8005784:	e017      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	4a13      	ldr	r2, [pc, #76]	; (80057d8 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 800578a:	601a      	str	r2, [r3, #0]
      break;
 800578c:	e013      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	4a12      	ldr	r2, [pc, #72]	; (80057dc <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8005792:	601a      	str	r2, [r3, #0]
      break;
 8005794:	e00f      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	4a11      	ldr	r2, [pc, #68]	; (80057e0 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 800579a:	601a      	str	r2, [r3, #0]
      break;
 800579c:	e00b      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	4a10      	ldr	r2, [pc, #64]	; (80057e4 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80057a2:	601a      	str	r2, [r3, #0]
      break;
 80057a4:	e007      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	4a0f      	ldr	r2, [pc, #60]	; (80057e8 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80057aa:	601a      	str	r2, [r3, #0]
      break;
 80057ac:	e003      	b.n	80057b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80057ae:	f04f 33ff 	mov.w	r3, #4294967295
 80057b2:	60fb      	str	r3, [r7, #12]
      break;
 80057b4:	bf00      	nop
  }

  return ret;
 80057b6:	68fb      	ldr	r3, [r7, #12]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	3fcccccd 	.word	0x3fcccccd
 80057c4:	41480000 	.word	0x41480000
 80057c8:	41d00000 	.word	0x41d00000
 80057cc:	42500000 	.word	0x42500000
 80057d0:	42d00000 	.word	0x42d00000
 80057d4:	43500000 	.word	0x43500000
 80057d8:	43d08000 	.word	0x43d08000
 80057dc:	44504000 	.word	0x44504000
 80057e0:	44d06000 	.word	0x44d06000
 80057e4:	45505000 	.word	0x45505000
 80057e8:	45d05800 	.word	0x45d05800

080057ec <LSM6DSO_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80057f8:	2100      	movs	r1, #0
 80057fa:	ed97 0a00 	vldr	s0, [r7]
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f806 	bl	8005810 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8005804:	4603      	mov	r3, r0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the accelerometer operating mode
 * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08c      	sub	sp, #48	; 0x30
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	ed87 0a02 	vstr	s0, [r7, #8]
 800581c:	460b      	mov	r3, r1
 800581e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	62bb      	str	r3, [r7, #40]	; 0x28
  
  switch (Mode)
 8005828:	79fb      	ldrb	r3, [r7, #7]
 800582a:	2b02      	cmp	r3, #2
 800582c:	f000 80ea 	beq.w	8005a04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8005830:	2b02      	cmp	r3, #2
 8005832:	f300 8163 	bgt.w	8005afc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 800583a:	2b01      	cmp	r3, #1
 800583c:	d074      	beq.n	8005928 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 800583e:	e15d      	b.n	8005afc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f103 001c 	add.w	r0, r3, #28
 8005846:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800584a:	2301      	movs	r3, #1
 800584c:	2114      	movs	r1, #20
 800584e:	f000 ff9f 	bl	8006790 <lsm6dso_read_reg>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8005858:	f04f 33ff 	mov.w	r3, #4294967295
 800585c:	e16c      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800585e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005862:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d025      	beq.n	80058b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005872:	2b01      	cmp	r3, #1
 8005874:	d10b      	bne.n	800588e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	331c      	adds	r3, #28
 800587a:	2100      	movs	r1, #0
 800587c:	4618      	mov	r0, r3
 800587e:	f001 f815 	bl	80068ac <lsm6dso_xl_data_rate_set>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8005888:	f04f 33ff 	mov.w	r3, #4294967295
 800588c:	e154      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800588e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005892:	f36f 13c7 	bfc	r3, #7, #1
 8005896:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f103 001c 	add.w	r0, r3, #28
 80058a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80058a4:	2301      	movs	r3, #1
 80058a6:	2114      	movs	r1, #20
 80058a8:	f000 ff8a 	bl	80067c0 <lsm6dso_write_reg>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 80058b2:	f04f 33ff 	mov.w	r3, #4294967295
 80058b6:	e13f      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f103 001c 	add.w	r0, r3, #28
 80058be:	f107 0220 	add.w	r2, r7, #32
 80058c2:	2301      	movs	r3, #1
 80058c4:	2115      	movs	r1, #21
 80058c6:	f000 ff63 	bl	8006790 <lsm6dso_read_reg>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80058d0:	f04f 33ff 	mov.w	r3, #4294967295
 80058d4:	e130      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80058d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058da:	f003 0310 	and.w	r3, r3, #16
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d014      	beq.n	800590e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 80058e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058e8:	f36f 1304 	bfc	r3, #4, #1
 80058ec:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f103 001c 	add.w	r0, r3, #28
 80058f6:	f107 0220 	add.w	r2, r7, #32
 80058fa:	2301      	movs	r3, #1
 80058fc:	2115      	movs	r1, #21
 80058fe:	f000 ff5f 	bl	80067c0 <lsm6dso_write_reg>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8005908:	f04f 33ff 	mov.w	r3, #4294967295
 800590c:	e114      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 800590e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005912:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800591a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800591e:	d400      	bmi.n	8005922 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8005920:	e0f0      	b.n	8005b04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8005922:	4b87      	ldr	r3, [pc, #540]	; (8005b40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8005924:	62bb      	str	r3, [r7, #40]	; 0x28
 8005926:	e0ed      	b.n	8005b04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f103 001c 	add.w	r0, r3, #28
 800592e:	f107 021c 	add.w	r2, r7, #28
 8005932:	2301      	movs	r3, #1
 8005934:	2114      	movs	r1, #20
 8005936:	f000 ff2b 	bl	8006790 <lsm6dso_read_reg>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8005940:	f04f 33ff 	mov.w	r3, #4294967295
 8005944:	e0f8      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8005946:	7f3b      	ldrb	r3, [r7, #28]
 8005948:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d023      	beq.n	800599a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005958:	2b01      	cmp	r3, #1
 800595a:	d10b      	bne.n	8005974 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	331c      	adds	r3, #28
 8005960:	2100      	movs	r1, #0
 8005962:	4618      	mov	r0, r3
 8005964:	f000 ffa2 	bl	80068ac <lsm6dso_xl_data_rate_set>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 800596e:	f04f 33ff 	mov.w	r3, #4294967295
 8005972:	e0e1      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8005974:	7f3b      	ldrb	r3, [r7, #28]
 8005976:	f36f 13c7 	bfc	r3, #7, #1
 800597a:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f103 001c 	add.w	r0, r3, #28
 8005982:	f107 021c 	add.w	r2, r7, #28
 8005986:	2301      	movs	r3, #1
 8005988:	2114      	movs	r1, #20
 800598a:	f000 ff19 	bl	80067c0 <lsm6dso_write_reg>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8005994:	f04f 33ff 	mov.w	r3, #4294967295
 8005998:	e0ce      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f103 001c 	add.w	r0, r3, #28
 80059a0:	f107 0218 	add.w	r2, r7, #24
 80059a4:	2301      	movs	r3, #1
 80059a6:	2115      	movs	r1, #21
 80059a8:	f000 fef2 	bl	8006790 <lsm6dso_read_reg>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 80059b2:	f04f 33ff 	mov.w	r3, #4294967295
 80059b6:	e0bf      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 80059b8:	7e3b      	ldrb	r3, [r7, #24]
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d112      	bne.n	80059ea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 80059c4:	7e3b      	ldrb	r3, [r7, #24]
 80059c6:	f043 0310 	orr.w	r3, r3, #16
 80059ca:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f103 001c 	add.w	r0, r3, #28
 80059d2:	f107 0218 	add.w	r2, r7, #24
 80059d6:	2301      	movs	r3, #1
 80059d8:	2115      	movs	r1, #21
 80059da:	f000 fef1 	bl	80067c0 <lsm6dso_write_reg>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 80059e4:	f04f 33ff 	mov.w	r3, #4294967295
 80059e8:	e0a6      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80059ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80059ee:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005b44 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80059f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059fa:	dc00      	bgt.n	80059fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 80059fc:	e082      	b.n	8005b04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80059fe:	4b52      	ldr	r3, [pc, #328]	; (8005b48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8005a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a02:	e07f      	b.n	8005b04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f103 001c 	add.w	r0, r3, #28
 8005a0a:	f107 0210 	add.w	r2, r7, #16
 8005a0e:	2301      	movs	r3, #1
 8005a10:	2115      	movs	r1, #21
 8005a12:	f000 febd 	bl	8006790 <lsm6dso_read_reg>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8005a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a20:	e08a      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8005a22:	7c3b      	ldrb	r3, [r7, #16]
 8005a24:	f003 0310 	and.w	r3, r3, #16
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d012      	beq.n	8005a54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8005a2e:	7c3b      	ldrb	r3, [r7, #16]
 8005a30:	f36f 1304 	bfc	r3, #4, #1
 8005a34:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f103 001c 	add.w	r0, r3, #28
 8005a3c:	f107 0210 	add.w	r2, r7, #16
 8005a40:	2301      	movs	r3, #1
 8005a42:	2115      	movs	r1, #21
 8005a44:	f000 febc 	bl	80067c0 <lsm6dso_write_reg>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8005a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a52:	e071      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d108      	bne.n	8005a70 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 f979 	bl	8005d56 <LSM6DSO_GYRO_Disable>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8005a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a6e:	e063      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f103 001c 	add.w	r0, r3, #28
 8005a76:	f107 0214 	add.w	r2, r7, #20
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	2114      	movs	r1, #20
 8005a7e:	f000 fe87 	bl	8006790 <lsm6dso_read_reg>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8005a88:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8c:	e054      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8005a8e:	7d3b      	ldrb	r3, [r7, #20]
 8005a90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d123      	bne.n	8005ae2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d10b      	bne.n	8005abc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	331c      	adds	r3, #28
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fefe 	bl	80068ac <lsm6dso_xl_data_rate_set>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8005ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aba:	e03d      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8005abc:	7d3b      	ldrb	r3, [r7, #20]
 8005abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac2:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f103 001c 	add.w	r0, r3, #28
 8005aca:	f107 0214 	add.w	r2, r7, #20
 8005ace:	2301      	movs	r3, #1
 8005ad0:	2114      	movs	r1, #20
 8005ad2:	f000 fe75 	bl	80067c0 <lsm6dso_write_reg>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8005adc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae0:	e02a      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005ae2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005ae6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005b44 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8005aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af2:	dc00      	bgt.n	8005af6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8005af4:	e006      	b.n	8005b04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8005af6:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8005af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005afa:	e003      	b.n	8005b04 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8005afc:	f04f 33ff 	mov.w	r3, #4294967295
 8005b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8005b02:	bf00      	nop
  }

  if(ret == LSM6DSO_ERROR)
 8005b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0a:	d102      	bne.n	8005b12 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8005b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b10:	e012      	b.n	8005b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d106      	bne.n	8005b2a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8005b1c:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 fbc9 	bl	80062b8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8005b26:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005b28:	e005      	b.n	8005b36 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8005b2a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 fc5a 	bl	80063e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8005b34:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8005b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3730      	adds	r7, #48	; 0x30
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	41480000 	.word	0x41480000
 8005b44:	43500000 	.word	0x43500000
 8005b48:	43500000 	.word	0x43500000

08005b4c <LSM6DSO_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	331c      	adds	r3, #28
 8005b5e:	f107 020b 	add.w	r2, r7, #11
 8005b62:	4611      	mov	r1, r2
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 fe69 	bl	800683c <lsm6dso_xl_full_scale_get>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8005b70:	f04f 33ff 	mov.w	r3, #4294967295
 8005b74:	e023      	b.n	8005bbe <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8005b76:	7afb      	ldrb	r3, [r7, #11]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d81b      	bhi.n	8005bb4 <LSM6DSO_ACC_GetFullScale+0x68>
 8005b7c:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <LSM6DSO_ACC_GetFullScale+0x38>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005b95 	.word	0x08005b95
 8005b88:	08005bad 	.word	0x08005bad
 8005b8c:	08005b9d 	.word	0x08005b9d
 8005b90:	08005ba5 	.word	0x08005ba5
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2202      	movs	r2, #2
 8005b98:	601a      	str	r2, [r3, #0]
      break;
 8005b9a:	e00f      	b.n	8005bbc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2204      	movs	r2, #4
 8005ba0:	601a      	str	r2, [r3, #0]
      break;
 8005ba2:	e00b      	b.n	8005bbc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2208      	movs	r2, #8
 8005ba8:	601a      	str	r2, [r3, #0]
      break;
 8005baa:	e007      	b.n	8005bbc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2210      	movs	r2, #16
 8005bb0:	601a      	str	r2, [r3, #0]
      break;
 8005bb2:	e003      	b.n	8005bbc <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb8:	60fb      	str	r3, [r7, #12]
      break;
 8005bba:	bf00      	nop
  }

  return ret;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop

08005bc8 <LSM6DSO_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	dd0b      	ble.n	8005bf0 <LSM6DSO_ACC_SetFullScale+0x28>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	dd06      	ble.n	8005bec <LSM6DSO_ACC_SetFullScale+0x24>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	dc01      	bgt.n	8005be8 <LSM6DSO_ACC_SetFullScale+0x20>
 8005be4:	2303      	movs	r3, #3
 8005be6:	e004      	b.n	8005bf2 <LSM6DSO_ACC_SetFullScale+0x2a>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e002      	b.n	8005bf2 <LSM6DSO_ACC_SetFullScale+0x2a>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e000      	b.n	8005bf2 <LSM6DSO_ACC_SetFullScale+0x2a>
 8005bf0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8005bf2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	331c      	adds	r3, #28
 8005bf8:	7bfa      	ldrb	r2, [r7, #15]
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 fdf7 	bl	80067f0 <lsm6dso_xl_full_scale_set>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8005c08:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0c:	e000      	b.n	8005c10 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <LSM6DSO_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	331c      	adds	r3, #28
 8005c26:	f107 0208 	add.w	r2, r7, #8
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f001 f99e 	bl	8006f6e <lsm6dso_acceleration_raw_get>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8005c38:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3c:	e00c      	b.n	8005c58 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005c3e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005c46:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005c4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <LSM6DSO_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	331c      	adds	r3, #28
 8005c74:	f107 0210 	add.w	r2, r7, #16
 8005c78:	4611      	mov	r1, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f001 f977 	bl	8006f6e <lsm6dso_acceleration_raw_get>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8005c86:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8a:	e03c      	b.n	8005d06 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8005c8c:	f107 030c 	add.w	r3, r7, #12
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff fce0 	bl	8005658 <LSM6DSO_ACC_GetSensitivity>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8005c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca2:	e030      	b.n	8005d06 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8005ca4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cbc:	ee17 2a90 	vmov	r2, s15
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8005cc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005cc8:	ee07 3a90 	vmov	s15, r3
 8005ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cdc:	ee17 2a90 	vmov	r2, s15
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8005ce4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005ce8:	ee07 3a90 	vmov	s15, r3
 8005cec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cfc:	ee17 2a90 	vmov	r2, s15
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <LSM6DSO_GYRO_Enable>:
 * @brief  Enable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b082      	sub	sp, #8
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	e014      	b.n	8005d4e <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f103 021c 	add.w	r2, r3, #28
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d30:	4619      	mov	r1, r3
 8005d32:	4610      	mov	r0, r2
 8005d34:	f000 ff86 	bl	8006c44 <lsm6dso_gy_data_rate_set>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8005d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d42:	e004      	b.n	8005d4e <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <LSM6DSO_GYRO_Disable>:
 * @brief  Disable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e01f      	b.n	8005dac <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f103 021c 	add.w	r2, r3, #28
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	332c      	adds	r3, #44	; 0x2c
 8005d76:	4619      	mov	r1, r3
 8005d78:	4610      	mov	r0, r2
 8005d7a:	f001 f85f 	bl	8006e3c <lsm6dso_gy_data_rate_get>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8005d84:	f04f 33ff 	mov.w	r3, #4294967295
 8005d88:	e010      	b.n	8005dac <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	331c      	adds	r3, #28
 8005d8e:	2100      	movs	r1, #0
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 ff57 	bl	8006c44 <lsm6dso_gy_data_rate_set>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8005d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005da0:	e004      	b.n	8005dac <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <LSM6DSO_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	331c      	adds	r3, #28
 8005dc6:	f107 020b 	add.w	r2, r7, #11
 8005dca:	4611      	mov	r1, r2
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 fef7 	bl	8006bc0 <lsm6dso_gy_full_scale_get>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ddc:	e02d      	b.n	8005e3a <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8005dde:	7afb      	ldrb	r3, [r7, #11]
 8005de0:	2b06      	cmp	r3, #6
 8005de2:	d825      	bhi.n	8005e30 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8005de4:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8005de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dea:	bf00      	nop
 8005dec:	08005e11 	.word	0x08005e11
 8005df0:	08005e09 	.word	0x08005e09
 8005df4:	08005e19 	.word	0x08005e19
 8005df8:	08005e31 	.word	0x08005e31
 8005dfc:	08005e21 	.word	0x08005e21
 8005e00:	08005e31 	.word	0x08005e31
 8005e04:	08005e29 	.word	0x08005e29
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	4a0e      	ldr	r2, [pc, #56]	; (8005e44 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8005e0c:	601a      	str	r2, [r3, #0]
      break;
 8005e0e:	e013      	b.n	8005e38 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	4a0d      	ldr	r2, [pc, #52]	; (8005e48 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8005e14:	601a      	str	r2, [r3, #0]
      break;
 8005e16:	e00f      	b.n	8005e38 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	4a0c      	ldr	r2, [pc, #48]	; (8005e4c <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8005e1c:	601a      	str	r2, [r3, #0]
      break;
 8005e1e:	e00b      	b.n	8005e38 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	4a0b      	ldr	r2, [pc, #44]	; (8005e50 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8005e24:	601a      	str	r2, [r3, #0]
      break;
 8005e26:	e007      	b.n	8005e38 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	4a0a      	ldr	r2, [pc, #40]	; (8005e54 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8005e2c:	601a      	str	r2, [r3, #0]
      break;
 8005e2e:	e003      	b.n	8005e38 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8005e30:	f04f 33ff 	mov.w	r3, #4294967295
 8005e34:	60fb      	str	r3, [r7, #12]
      break;
 8005e36:	bf00      	nop
  }

  return ret;
 8005e38:	68fb      	ldr	r3, [r7, #12]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	408c0000 	.word	0x408c0000
 8005e48:	410c0000 	.word	0x410c0000
 8005e4c:	418c0000 	.word	0x418c0000
 8005e50:	420c0000 	.word	0x420c0000
 8005e54:	428c0000 	.word	0x428c0000

08005e58 <LSM6DSO_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	331c      	adds	r3, #28
 8005e6a:	f107 020b 	add.w	r2, r7, #11
 8005e6e:	4611      	mov	r1, r2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 ffe3 	bl	8006e3c <lsm6dso_gy_data_rate_get>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8005e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e80:	e04e      	b.n	8005f20 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8005e82:	7afb      	ldrb	r3, [r7, #11]
 8005e84:	2b0a      	cmp	r3, #10
 8005e86:	d846      	bhi.n	8005f16 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8005e88:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8005e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8e:	bf00      	nop
 8005e90:	08005ebd 	.word	0x08005ebd
 8005e94:	08005ec7 	.word	0x08005ec7
 8005e98:	08005ecf 	.word	0x08005ecf
 8005e9c:	08005ed7 	.word	0x08005ed7
 8005ea0:	08005edf 	.word	0x08005edf
 8005ea4:	08005ee7 	.word	0x08005ee7
 8005ea8:	08005eef 	.word	0x08005eef
 8005eac:	08005ef7 	.word	0x08005ef7
 8005eb0:	08005eff 	.word	0x08005eff
 8005eb4:	08005f07 	.word	0x08005f07
 8005eb8:	08005f0f 	.word	0x08005f0f
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	f04f 0200 	mov.w	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]
      break;
 8005ec4:	e02b      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	4a17      	ldr	r2, [pc, #92]	; (8005f28 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8005eca:	601a      	str	r2, [r3, #0]
      break;
 8005ecc:	e027      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	4a16      	ldr	r2, [pc, #88]	; (8005f2c <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8005ed2:	601a      	str	r2, [r3, #0]
      break;
 8005ed4:	e023      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	4a15      	ldr	r2, [pc, #84]	; (8005f30 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8005eda:	601a      	str	r2, [r3, #0]
      break;
 8005edc:	e01f      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	4a14      	ldr	r2, [pc, #80]	; (8005f34 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8005ee2:	601a      	str	r2, [r3, #0]
      break;
 8005ee4:	e01b      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	4a13      	ldr	r2, [pc, #76]	; (8005f38 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8005eea:	601a      	str	r2, [r3, #0]
      break;
 8005eec:	e017      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	4a12      	ldr	r2, [pc, #72]	; (8005f3c <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8005ef2:	601a      	str	r2, [r3, #0]
      break;
 8005ef4:	e013      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	4a11      	ldr	r2, [pc, #68]	; (8005f40 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8005efa:	601a      	str	r2, [r3, #0]
      break;
 8005efc:	e00f      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	4a10      	ldr	r2, [pc, #64]	; (8005f44 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8005f02:	601a      	str	r2, [r3, #0]
      break;
 8005f04:	e00b      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	4a0f      	ldr	r2, [pc, #60]	; (8005f48 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8005f0a:	601a      	str	r2, [r3, #0]
      break;
 8005f0c:	e007      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	4a0e      	ldr	r2, [pc, #56]	; (8005f4c <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8005f12:	601a      	str	r2, [r3, #0]
      break;
 8005f14:	e003      	b.n	8005f1e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8005f16:	f04f 33ff 	mov.w	r3, #4294967295
 8005f1a:	60fb      	str	r3, [r7, #12]
      break;
 8005f1c:	bf00      	nop
  }

  return ret;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	41480000 	.word	0x41480000
 8005f2c:	41d00000 	.word	0x41d00000
 8005f30:	42500000 	.word	0x42500000
 8005f34:	42d00000 	.word	0x42d00000
 8005f38:	43500000 	.word	0x43500000
 8005f3c:	43d08000 	.word	0x43d08000
 8005f40:	44504000 	.word	0x44504000
 8005f44:	44d06000 	.word	0x44d06000
 8005f48:	45505000 	.word	0x45505000
 8005f4c:	45d05800 	.word	0x45d05800

08005f50 <LSM6DSO_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	ed97 0a00 	vldr	s0, [r7]
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f806 	bl	8005f74 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8005f68:	4603      	mov	r3, r0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
 * @param  Odr the output data rate value to be set
 * @param  Mode the gyroscope operating mode
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005f80:	460b      	mov	r3, r1
 8005f82:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d028      	beq.n	8005fe8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8005f96:	e05c      	b.n	8006052 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f103 001c 	add.w	r0, r3, #28
 8005f9e:	f107 0214 	add.w	r2, r7, #20
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	2116      	movs	r1, #22
 8005fa6:	f000 fbf3 	bl	8006790 <lsm6dso_read_reg>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8005fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb4:	e06c      	b.n	8006090 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8005fb6:	7d3b      	ldrb	r3, [r7, #20]
 8005fb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d04b      	beq.n	800605a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8005fc2:	7d3b      	ldrb	r3, [r7, #20]
 8005fc4:	f36f 13c7 	bfc	r3, #7, #1
 8005fc8:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f103 001c 	add.w	r0, r3, #28
 8005fd0:	f107 0214 	add.w	r2, r7, #20
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	2116      	movs	r1, #22
 8005fd8:	f000 fbf2 	bl	80067c0 <lsm6dso_write_reg>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d03b      	beq.n	800605a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8005fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe6:	e053      	b.n	8006090 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f103 001c 	add.w	r0, r3, #28
 8005fee:	f107 0210 	add.w	r2, r7, #16
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	2116      	movs	r1, #22
 8005ff6:	f000 fbcb 	bl	8006790 <lsm6dso_read_reg>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8006000:	f04f 33ff 	mov.w	r3, #4294967295
 8006004:	e044      	b.n	8006090 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8006006:	7c3b      	ldrb	r3, [r7, #16]
 8006008:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d112      	bne.n	8006038 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8006012:	7c3b      	ldrb	r3, [r7, #16]
 8006014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006018:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f103 001c 	add.w	r0, r3, #28
 8006020:	f107 0210 	add.w	r2, r7, #16
 8006024:	2301      	movs	r3, #1
 8006026:	2116      	movs	r1, #22
 8006028:	f000 fbca 	bl	80067c0 <lsm6dso_write_reg>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8006032:	f04f 33ff 	mov.w	r3, #4294967295
 8006036:	e02b      	b.n	8006090 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006038:	edd7 7a06 	vldr	s15, [r7, #24]
 800603c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006098 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8006040:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006048:	dc00      	bgt.n	800604c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 800604a:	e007      	b.n	800605c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 800604c:	4b13      	ldr	r3, [pc, #76]	; (800609c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 800604e:	61bb      	str	r3, [r7, #24]
 8006050:	e004      	b.n	800605c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006052:	f04f 33ff 	mov.w	r3, #4294967295
 8006056:	61fb      	str	r3, [r7, #28]
      break;
 8006058:	e000      	b.n	800605c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 800605a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006062:	d102      	bne.n	800606a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8006064:	f04f 33ff 	mov.w	r3, #4294967295
 8006068:	e012      	b.n	8006090 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006070:	2b01      	cmp	r3, #1
 8006072:	d106      	bne.n	8006082 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006074:	ed97 0a06 	vldr	s0, [r7, #24]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 fa45 	bl	8006508 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800607e:	61f8      	str	r0, [r7, #28]
 8006080:	e005      	b.n	800608e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006082:	ed97 0a06 	vldr	s0, [r7, #24]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 faca 	bl	8006620 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 800608c:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800608e:	69fb      	ldr	r3, [r7, #28]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3720      	adds	r7, #32
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	43500000 	.word	0x43500000
 800609c:	43500000 	.word	0x43500000

080060a0 <LSM6DSO_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	331c      	adds	r3, #28
 80060b2:	f107 020b 	add.w	r2, r7, #11
 80060b6:	4611      	mov	r1, r2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fd81 	bl	8006bc0 <lsm6dso_gy_full_scale_get>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80060c4:	f04f 33ff 	mov.w	r3, #4294967295
 80060c8:	e030      	b.n	800612c <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80060ca:	7afb      	ldrb	r3, [r7, #11]
 80060cc:	2b06      	cmp	r3, #6
 80060ce:	d828      	bhi.n	8006122 <LSM6DSO_GYRO_GetFullScale+0x82>
 80060d0:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <LSM6DSO_GYRO_GetFullScale+0x38>)
 80060d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d6:	bf00      	nop
 80060d8:	080060fd 	.word	0x080060fd
 80060dc:	080060f5 	.word	0x080060f5
 80060e0:	08006105 	.word	0x08006105
 80060e4:	08006123 	.word	0x08006123
 80060e8:	0800610f 	.word	0x0800610f
 80060ec:	08006123 	.word	0x08006123
 80060f0:	08006119 	.word	0x08006119
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	227d      	movs	r2, #125	; 0x7d
 80060f8:	601a      	str	r2, [r3, #0]
      break;
 80060fa:	e016      	b.n	800612a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	22fa      	movs	r2, #250	; 0xfa
 8006100:	601a      	str	r2, [r3, #0]
      break;
 8006102:	e012      	b.n	800612a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800610a:	601a      	str	r2, [r3, #0]
      break;
 800610c:	e00d      	b.n	800612a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006114:	601a      	str	r2, [r3, #0]
      break;
 8006116:	e008      	b.n	800612a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800611e:	601a      	str	r2, [r3, #0]
      break;
 8006120:	e003      	b.n	800612a <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8006122:	f04f 33ff 	mov.w	r3, #4294967295
 8006126:	60fb      	str	r3, [r7, #12]
      break;
 8006128:	bf00      	nop
  }

  return ret;
 800612a:	68fb      	ldr	r3, [r7, #12]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <LSM6DSO_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b7d      	cmp	r3, #125	; 0x7d
 8006142:	dd12      	ble.n	800616a <LSM6DSO_GYRO_SetFullScale+0x36>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2bfa      	cmp	r3, #250	; 0xfa
 8006148:	dd0d      	ble.n	8006166 <LSM6DSO_GYRO_SetFullScale+0x32>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006150:	dd07      	ble.n	8006162 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006158:	dc01      	bgt.n	800615e <LSM6DSO_GYRO_SetFullScale+0x2a>
 800615a:	2304      	movs	r3, #4
 800615c:	e006      	b.n	800616c <LSM6DSO_GYRO_SetFullScale+0x38>
 800615e:	2306      	movs	r3, #6
 8006160:	e004      	b.n	800616c <LSM6DSO_GYRO_SetFullScale+0x38>
 8006162:	2302      	movs	r3, #2
 8006164:	e002      	b.n	800616c <LSM6DSO_GYRO_SetFullScale+0x38>
 8006166:	2300      	movs	r3, #0
 8006168:	e000      	b.n	800616c <LSM6DSO_GYRO_SetFullScale+0x38>
 800616a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 800616c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	331c      	adds	r3, #28
 8006172:	7bfa      	ldrb	r2, [r7, #15]
 8006174:	4611      	mov	r1, r2
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fcfc 	bl	8006b74 <lsm6dso_gy_full_scale_set>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8006182:	f04f 33ff 	mov.w	r3, #4294967295
 8006186:	e000      	b.n	800618a <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <LSM6DSO_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	331c      	adds	r3, #28
 80061a0:	f107 0208 	add.w	r2, r7, #8
 80061a4:	4611      	mov	r1, r2
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fed0 	bl	8006f4c <lsm6dso_angular_rate_raw_get>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 80061b2:	f04f 33ff 	mov.w	r3, #4294967295
 80061b6:	e00c      	b.n	80061d2 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80061b8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80061c0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80061c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <LSM6DSO_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b086      	sub	sp, #24
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	331c      	adds	r3, #28
 80061e8:	f107 0210 	add.w	r2, r7, #16
 80061ec:	4611      	mov	r1, r2
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 feac 	bl	8006f4c <lsm6dso_angular_rate_raw_get>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80061fa:	f04f 33ff 	mov.w	r3, #4294967295
 80061fe:	e03c      	b.n	800627a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006200:	f107 030c 	add.w	r3, r7, #12
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7ff fdd4 	bl	8005db4 <LSM6DSO_GYRO_GetSensitivity>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8006212:	f04f 33ff 	mov.w	r3, #4294967295
 8006216:	e030      	b.n	800627a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006218:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800621c:	ee07 3a90 	vmov	s15, r3
 8006220:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006224:	edd7 7a03 	vldr	s15, [r7, #12]
 8006228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800622c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006230:	ee17 2a90 	vmov	r2, s15
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006238:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800623c:	ee07 3a90 	vmov	s15, r3
 8006240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006244:	edd7 7a03 	vldr	s15, [r7, #12]
 8006248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800624c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006250:	ee17 2a90 	vmov	r2, s15
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006258:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800625c:	ee07 3a90 	vmov	s15, r3
 8006260:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006264:	edd7 7a03 	vldr	s15, [r7, #12]
 8006268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006270:	ee17 2a90 	vmov	r2, s15
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <LSM6DSO_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	460b      	mov	r3, r1
 800628c:	70fb      	strb	r3, [r7, #3]
 800628e:	4613      	mov	r3, r2
 8006290:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f103 001c 	add.w	r0, r3, #28
 8006298:	1cba      	adds	r2, r7, #2
 800629a:	78f9      	ldrb	r1, [r7, #3]
 800629c:	2301      	movs	r3, #1
 800629e:	f000 fa8f 	bl	80067c0 <lsm6dso_write_reg>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 80062a8:	f04f 33ff 	mov.w	r3, #4294967295
 80062ac:	e000      	b.n	80062b0 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80062c4:	edd7 7a00 	vldr	s15, [r7]
 80062c8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80063c8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 80062cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d4:	d801      	bhi.n	80062da <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 80062d6:	230b      	movs	r3, #11
 80062d8:	e063      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80062da:	edd7 7a00 	vldr	s15, [r7]
 80062de:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80062e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ea:	d801      	bhi.n	80062f0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 80062ec:	2301      	movs	r3, #1
 80062ee:	e058      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80062f0:	edd7 7a00 	vldr	s15, [r7]
 80062f4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80062f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006300:	d801      	bhi.n	8006306 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8006302:	2302      	movs	r3, #2
 8006304:	e04d      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006306:	edd7 7a00 	vldr	s15, [r7]
 800630a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80063cc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 800630e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006316:	d801      	bhi.n	800631c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006318:	2303      	movs	r3, #3
 800631a:	e042      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800631c:	edd7 7a00 	vldr	s15, [r7]
 8006320:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80063d0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8006324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800632c:	d801      	bhi.n	8006332 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800632e:	2304      	movs	r3, #4
 8006330:	e037      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006332:	edd7 7a00 	vldr	s15, [r7]
 8006336:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80063d4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 800633a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800633e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006342:	d801      	bhi.n	8006348 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8006344:	2305      	movs	r3, #5
 8006346:	e02c      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006348:	edd7 7a00 	vldr	s15, [r7]
 800634c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80063d8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8006350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006358:	d801      	bhi.n	800635e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800635a:	2306      	movs	r3, #6
 800635c:	e021      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800635e:	edd7 7a00 	vldr	s15, [r7]
 8006362:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80063dc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8006366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800636a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800636e:	d801      	bhi.n	8006374 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8006370:	2307      	movs	r3, #7
 8006372:	e016      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006374:	edd7 7a00 	vldr	s15, [r7]
 8006378:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80063e0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 800637c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006384:	d801      	bhi.n	800638a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006386:	2308      	movs	r3, #8
 8006388:	e00b      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800638a:	edd7 7a00 	vldr	s15, [r7]
 800638e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80063e4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8006392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800639a:	d801      	bhi.n	80063a0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 800639c:	2309      	movs	r3, #9
 800639e:	e000      	b.n	80063a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80063a0:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80063a2:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
          :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	331c      	adds	r3, #28
 80063a8:	7bfa      	ldrb	r2, [r7, #15]
 80063aa:	4611      	mov	r1, r2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 fa7d 	bl	80068ac <lsm6dso_xl_data_rate_set>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 80063b8:	f04f 33ff 	mov.w	r3, #4294967295
 80063bc:	e000      	b.n	80063c0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	3fcccccd 	.word	0x3fcccccd
 80063cc:	42500000 	.word	0x42500000
 80063d0:	42d00000 	.word	0x42d00000
 80063d4:	43500000 	.word	0x43500000
 80063d8:	43d08000 	.word	0x43d08000
 80063dc:	44504000 	.word	0x44504000
 80063e0:	44d06000 	.word	0x44d06000
 80063e4:	45505000 	.word	0x45505000

080063e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80063f4:	edd7 7a00 	vldr	s15, [r7]
 80063f8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80064e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 80063fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006404:	d801      	bhi.n	800640a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8006406:	230b      	movs	r3, #11
 8006408:	e063      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800640a:	edd7 7a00 	vldr	s15, [r7]
 800640e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800641a:	d801      	bhi.n	8006420 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 800641c:	2301      	movs	r3, #1
 800641e:	e058      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006420:	edd7 7a00 	vldr	s15, [r7]
 8006424:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800642c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006430:	d801      	bhi.n	8006436 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8006432:	2302      	movs	r3, #2
 8006434:	e04d      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006436:	edd7 7a00 	vldr	s15, [r7]
 800643a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80064ec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 800643e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006446:	d801      	bhi.n	800644c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8006448:	2303      	movs	r3, #3
 800644a:	e042      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800644c:	edd7 7a00 	vldr	s15, [r7]
 8006450:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80064f0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8006454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800645c:	d801      	bhi.n	8006462 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800645e:	2304      	movs	r3, #4
 8006460:	e037      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006462:	edd7 7a00 	vldr	s15, [r7]
 8006466:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80064f4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 800646a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800646e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006472:	d801      	bhi.n	8006478 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8006474:	2305      	movs	r3, #5
 8006476:	e02c      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006478:	edd7 7a00 	vldr	s15, [r7]
 800647c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80064f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8006480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006488:	d801      	bhi.n	800648e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800648a:	2306      	movs	r3, #6
 800648c:	e021      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800648e:	edd7 7a00 	vldr	s15, [r7]
 8006492:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80064fc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8006496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800649a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800649e:	d801      	bhi.n	80064a4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80064a0:	2307      	movs	r3, #7
 80064a2:	e016      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80064a4:	edd7 7a00 	vldr	s15, [r7]
 80064a8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006500 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 80064ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b4:	d801      	bhi.n	80064ba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80064b6:	2308      	movs	r3, #8
 80064b8:	e00b      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80064ba:	edd7 7a00 	vldr	s15, [r7]
 80064be:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006504 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80064c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ca:	d801      	bhi.n	80064d0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80064cc:	2309      	movs	r3, #9
 80064ce:	e000      	b.n	80064d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80064d0:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	3fcccccd 	.word	0x3fcccccd
 80064ec:	42500000 	.word	0x42500000
 80064f0:	42d00000 	.word	0x42d00000
 80064f4:	43500000 	.word	0x43500000
 80064f8:	43d08000 	.word	0x43d08000
 80064fc:	44504000 	.word	0x44504000
 8006500:	44d06000 	.word	0x44d06000
 8006504:	45505000 	.word	0x45505000

08006508 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006514:	edd7 7a00 	vldr	s15, [r7]
 8006518:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800651c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006524:	d801      	bhi.n	800652a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8006526:	2301      	movs	r3, #1
 8006528:	e058      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800652a:	edd7 7a00 	vldr	s15, [r7]
 800652e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800653a:	d801      	bhi.n	8006540 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800653c:	2302      	movs	r3, #2
 800653e:	e04d      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006540:	edd7 7a00 	vldr	s15, [r7]
 8006544:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006604 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8006548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800654c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006550:	d801      	bhi.n	8006556 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8006552:	2303      	movs	r3, #3
 8006554:	e042      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006556:	edd7 7a00 	vldr	s15, [r7]
 800655a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006608 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800655e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006566:	d801      	bhi.n	800656c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8006568:	2304      	movs	r3, #4
 800656a:	e037      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800656c:	edd7 7a00 	vldr	s15, [r7]
 8006570:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800660c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8006574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657c:	d801      	bhi.n	8006582 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800657e:	2305      	movs	r3, #5
 8006580:	e02c      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006582:	edd7 7a00 	vldr	s15, [r7]
 8006586:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006610 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800658a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800658e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006592:	d801      	bhi.n	8006598 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8006594:	2306      	movs	r3, #6
 8006596:	e021      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006598:	edd7 7a00 	vldr	s15, [r7]
 800659c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006614 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80065a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a8:	d801      	bhi.n	80065ae <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80065aa:	2307      	movs	r3, #7
 80065ac:	e016      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80065ae:	edd7 7a00 	vldr	s15, [r7]
 80065b2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006618 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80065b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065be:	d801      	bhi.n	80065c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80065c0:	2308      	movs	r3, #8
 80065c2:	e00b      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80065c4:	edd7 7a00 	vldr	s15, [r7]
 80065c8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800661c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80065cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d4:	d801      	bhi.n	80065da <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80065d6:	2309      	movs	r3, #9
 80065d8:	e000      	b.n	80065dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80065da:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80065dc:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
          :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	331c      	adds	r3, #28
 80065e2:	7bfa      	ldrb	r2, [r7, #15]
 80065e4:	4611      	mov	r1, r2
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fb2c 	bl	8006c44 <lsm6dso_gy_data_rate_set>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80065f2:	f04f 33ff 	mov.w	r3, #4294967295
 80065f6:	e000      	b.n	80065fa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	42500000 	.word	0x42500000
 8006608:	42d00000 	.word	0x42d00000
 800660c:	43500000 	.word	0x43500000
 8006610:	43d08000 	.word	0x43d08000
 8006614:	44504000 	.word	0x44504000
 8006618:	44d06000 	.word	0x44d06000
 800661c:	45505000 	.word	0x45505000

08006620 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800662c:	edd7 7a00 	vldr	s15, [r7]
 8006630:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800663c:	d801      	bhi.n	8006642 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800663e:	2301      	movs	r3, #1
 8006640:	e058      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006642:	edd7 7a00 	vldr	s15, [r7]
 8006646:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800664a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800664e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006652:	d801      	bhi.n	8006658 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8006654:	2302      	movs	r3, #2
 8006656:	e04d      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006658:	edd7 7a00 	vldr	s15, [r7]
 800665c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006708 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8006660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006668:	d801      	bhi.n	800666e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800666a:	2303      	movs	r3, #3
 800666c:	e042      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800666e:	edd7 7a00 	vldr	s15, [r7]
 8006672:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800670c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8006676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800667a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800667e:	d801      	bhi.n	8006684 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8006680:	2304      	movs	r3, #4
 8006682:	e037      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006684:	edd7 7a00 	vldr	s15, [r7]
 8006688:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006710 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800668c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006694:	d801      	bhi.n	800669a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8006696:	2305      	movs	r3, #5
 8006698:	e02c      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800669a:	edd7 7a00 	vldr	s15, [r7]
 800669e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006714 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80066a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066aa:	d801      	bhi.n	80066b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80066ac:	2306      	movs	r3, #6
 80066ae:	e021      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80066b0:	edd7 7a00 	vldr	s15, [r7]
 80066b4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006718 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80066b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c0:	d801      	bhi.n	80066c6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80066c2:	2307      	movs	r3, #7
 80066c4:	e016      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80066c6:	edd7 7a00 	vldr	s15, [r7]
 80066ca:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800671c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80066ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d6:	d801      	bhi.n	80066dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80066d8:	2308      	movs	r3, #8
 80066da:	e00b      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80066dc:	edd7 7a00 	vldr	s15, [r7]
 80066e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8006720 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80066e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ec:	d801      	bhi.n	80066f2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80066ee:	2309      	movs	r3, #9
 80066f0:	e000      	b.n	80066f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80066f2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                 :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	42500000 	.word	0x42500000
 800670c:	42d00000 	.word	0x42d00000
 8006710:	43500000 	.word	0x43500000
 8006714:	43d08000 	.word	0x43d08000
 8006718:	44504000 	.word	0x44504000
 800671c:	44d06000 	.word	0x44d06000
 8006720:	45505000 	.word	0x45505000

08006724 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006724:	b590      	push	{r4, r7, lr}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	607a      	str	r2, [r7, #4]
 800672e:	461a      	mov	r2, r3
 8006730:	460b      	mov	r3, r1
 8006732:	72fb      	strb	r3, [r7, #11]
 8006734:	4613      	mov	r3, r2
 8006736:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	695c      	ldr	r4, [r3, #20]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	7b1b      	ldrb	r3, [r3, #12]
 8006744:	b298      	uxth	r0, r3
 8006746:	7afb      	ldrb	r3, [r7, #11]
 8006748:	b299      	uxth	r1, r3
 800674a:	893b      	ldrh	r3, [r7, #8]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	47a0      	blx	r4
 8006750:	4603      	mov	r3, r0
}
 8006752:	4618      	mov	r0, r3
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	bd90      	pop	{r4, r7, pc}

0800675a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800675a:	b590      	push	{r4, r7, lr}
 800675c:	b087      	sub	sp, #28
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	461a      	mov	r2, r3
 8006766:	460b      	mov	r3, r1
 8006768:	72fb      	strb	r3, [r7, #11]
 800676a:	4613      	mov	r3, r2
 800676c:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	691c      	ldr	r4, [r3, #16]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	7b1b      	ldrb	r3, [r3, #12]
 800677a:	b298      	uxth	r0, r3
 800677c:	7afb      	ldrb	r3, [r7, #11]
 800677e:	b299      	uxth	r1, r3
 8006780:	893b      	ldrh	r3, [r7, #8]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	47a0      	blx	r4
 8006786:	4603      	mov	r3, r0
}
 8006788:	4618      	mov	r0, r3
 800678a:	371c      	adds	r7, #28
 800678c:	46bd      	mov	sp, r7
 800678e:	bd90      	pop	{r4, r7, pc}

08006790 <lsm6dso_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8006790:	b590      	push	{r4, r7, lr}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	607a      	str	r2, [r7, #4]
 800679a:	461a      	mov	r2, r3
 800679c:	460b      	mov	r3, r1
 800679e:	72fb      	strb	r3, [r7, #11]
 80067a0:	4613      	mov	r3, r2
 80067a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	685c      	ldr	r4, [r3, #4]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6898      	ldr	r0, [r3, #8]
 80067ac:	893b      	ldrh	r3, [r7, #8]
 80067ae:	7af9      	ldrb	r1, [r7, #11]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	47a0      	blx	r4
 80067b4:	6178      	str	r0, [r7, #20]
  return ret;
 80067b6:	697b      	ldr	r3, [r7, #20]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	371c      	adds	r7, #28
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd90      	pop	{r4, r7, pc}

080067c0 <lsm6dso_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80067c0:	b590      	push	{r4, r7, lr}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	607a      	str	r2, [r7, #4]
 80067ca:	461a      	mov	r2, r3
 80067cc:	460b      	mov	r3, r1
 80067ce:	72fb      	strb	r3, [r7, #11]
 80067d0:	4613      	mov	r3, r2
 80067d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681c      	ldr	r4, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6898      	ldr	r0, [r3, #8]
 80067dc:	893b      	ldrh	r3, [r7, #8]
 80067de:	7af9      	ldrb	r1, [r7, #11]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	47a0      	blx	r4
 80067e4:	6178      	str	r0, [r7, #20]
  return ret;
 80067e6:	697b      	ldr	r3, [r7, #20]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd90      	pop	{r4, r7, pc}

080067f0 <lsm6dso_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 80067fc:	f107 0208 	add.w	r2, r7, #8
 8006800:	2301      	movs	r3, #1
 8006802:	2110      	movs	r1, #16
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff ffc3 	bl	8006790 <lsm6dso_read_reg>
 800680a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10f      	bne.n	8006832 <lsm6dso_xl_full_scale_set+0x42>
    reg.fs_xl = (uint8_t) val;
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	f003 0303 	and.w	r3, r3, #3
 8006818:	b2da      	uxtb	r2, r3
 800681a:	7a3b      	ldrb	r3, [r7, #8]
 800681c:	f362 0383 	bfi	r3, r2, #2, #2
 8006820:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8006822:	f107 0208 	add.w	r2, r7, #8
 8006826:	2301      	movs	r3, #1
 8006828:	2110      	movs	r1, #16
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff ffc8 	bl	80067c0 <lsm6dso_write_reg>
 8006830:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006832:	68fb      	ldr	r3, [r7, #12]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <lsm6dso_xl_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dso_fs_xl_t *val)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8006846:	f107 0208 	add.w	r2, r7, #8
 800684a:	2301      	movs	r3, #1
 800684c:	2110      	movs	r1, #16
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff ff9e 	bl	8006790 <lsm6dso_read_reg>
 8006854:	60f8      	str	r0, [r7, #12]
  switch (reg.fs_xl) {
 8006856:	7a3b      	ldrb	r3, [r7, #8]
 8006858:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b03      	cmp	r3, #3
 8006860:	d81a      	bhi.n	8006898 <lsm6dso_xl_full_scale_get+0x5c>
 8006862:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <lsm6dso_xl_full_scale_get+0x2c>)
 8006864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006868:	08006879 	.word	0x08006879
 800686c:	08006881 	.word	0x08006881
 8006870:	08006889 	.word	0x08006889
 8006874:	08006891 	.word	0x08006891
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2200      	movs	r2, #0
 800687c:	701a      	strb	r2, [r3, #0]
      break;
 800687e:	e00f      	b.n	80068a0 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2201      	movs	r2, #1
 8006884:	701a      	strb	r2, [r3, #0]
      break;
 8006886:	e00b      	b.n	80068a0 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2202      	movs	r2, #2
 800688c:	701a      	strb	r2, [r3, #0]
      break;
 800688e:	e007      	b.n	80068a0 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2203      	movs	r2, #3
 8006894:	701a      	strb	r2, [r3, #0]
      break;
 8006896:	e003      	b.n	80068a0 <lsm6dso_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSO_2g;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2200      	movs	r2, #0
 800689c:	701a      	strb	r2, [r3, #0]
      break;
 800689e:	bf00      	nop
  }

  return ret;
 80068a0:	68fb      	ldr	r3, [r7, #12]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop

080068ac <lsm6dso_xl_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dso_odr_xl_t val)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80068bc:	f107 030c 	add.w	r3, r7, #12
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fc2d 	bl	8007122 <lsm6dso_fsm_enable_get>
 80068c8:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f040 80c4 	bne.w	8006a5a <lsm6dso_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80068d2:	7b3b      	ldrb	r3, [r7, #12]
 80068d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80068d8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80068da:	7b3b      	ldrb	r3, [r7, #12]
 80068dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80068e0:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80068e2:	4313      	orrs	r3, r2
 80068e4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80068e6:	7b3b      	ldrb	r3, [r7, #12]
 80068e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80068ec:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80068ee:	4313      	orrs	r3, r2
 80068f0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80068f2:	7b3b      	ldrb	r3, [r7, #12]
 80068f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80068f8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80068fa:	4313      	orrs	r3, r2
 80068fc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80068fe:	7b3b      	ldrb	r3, [r7, #12]
 8006900:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006904:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8006906:	4313      	orrs	r3, r2
 8006908:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800690a:	7b3b      	ldrb	r3, [r7, #12]
 800690c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006910:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8006912:	4313      	orrs	r3, r2
 8006914:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8006916:	7b3b      	ldrb	r3, [r7, #12]
 8006918:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800691c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800691e:	4313      	orrs	r3, r2
 8006920:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8006922:	7b3b      	ldrb	r3, [r7, #12]
 8006924:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006928:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800692a:	4313      	orrs	r3, r2
 800692c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800692e:	7b7b      	ldrb	r3, [r7, #13]
 8006930:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006934:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8006936:	4313      	orrs	r3, r2
 8006938:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800693a:	7b7b      	ldrb	r3, [r7, #13]
 800693c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006940:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8006942:	4313      	orrs	r3, r2
 8006944:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8006946:	7b7b      	ldrb	r3, [r7, #13]
 8006948:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800694c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800694e:	4313      	orrs	r3, r2
 8006950:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8006952:	7b7b      	ldrb	r3, [r7, #13]
 8006954:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006958:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800695a:	4313      	orrs	r3, r2
 800695c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800695e:	7b7b      	ldrb	r3, [r7, #13]
 8006960:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006964:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8006966:	4313      	orrs	r3, r2
 8006968:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800696a:	7b7b      	ldrb	r3, [r7, #13]
 800696c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006970:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8006972:	4313      	orrs	r3, r2
 8006974:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8006976:	7b7b      	ldrb	r3, [r7, #13]
 8006978:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800697c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800697e:	4313      	orrs	r3, r2
 8006980:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 8006982:	7b7b      	ldrb	r3, [r7, #13]
 8006984:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006988:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800698a:	4313      	orrs	r3, r2
 800698c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800698e:	2b01      	cmp	r3, #1
 8006990:	d163      	bne.n	8006a5a <lsm6dso_xl_data_rate_set+0x1ae>

      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8006992:	f107 030b 	add.w	r3, r7, #11
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fbe3 	bl	8007164 <lsm6dso_fsm_data_rate_get>
 800699e:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d159      	bne.n	8006a5a <lsm6dso_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 80069a6:	7afb      	ldrb	r3, [r7, #11]
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d853      	bhi.n	8006a54 <lsm6dso_xl_data_rate_set+0x1a8>
 80069ac:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <lsm6dso_xl_data_rate_set+0x108>)
 80069ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b2:	bf00      	nop
 80069b4:	080069c5 	.word	0x080069c5
 80069b8:	080069d7 	.word	0x080069d7
 80069bc:	080069f5 	.word	0x080069f5
 80069c0:	08006a1f 	.word	0x08006a1f
          case LSM6DSO_ODR_FSM_12Hz5:

            if (val == LSM6DSO_XL_ODR_OFF){
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d102      	bne.n	80069d0 <lsm6dso_xl_data_rate_set+0x124>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80069ca:	2301      	movs	r3, #1
 80069cc:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 80069ce:	e045      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	75fb      	strb	r3, [r7, #23]
            break;
 80069d4:	e042      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_26Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 80069d6:	78fb      	ldrb	r3, [r7, #3]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d102      	bne.n	80069e2 <lsm6dso_xl_data_rate_set+0x136>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80069dc:	2302      	movs	r3, #2
 80069de:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 80069e0:	e03c      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 80069e2:	78fb      	ldrb	r3, [r7, #3]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d102      	bne.n	80069ee <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80069e8:	2302      	movs	r3, #2
 80069ea:	75fb      	strb	r3, [r7, #23]
            break;
 80069ec:	e036      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	75fb      	strb	r3, [r7, #23]
            break;
 80069f2:	e033      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_52Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d102      	bne.n	8006a00 <lsm6dso_xl_data_rate_set+0x154>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80069fa:	2303      	movs	r3, #3
 80069fc:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 80069fe:	e02d      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d102      	bne.n	8006a0c <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006a06:	2303      	movs	r3, #3
 8006a08:	75fb      	strb	r3, [r7, #23]
            break;
 8006a0a:	e027      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_26Hz){
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d102      	bne.n	8006a18 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006a12:	2303      	movs	r3, #3
 8006a14:	75fb      	strb	r3, [r7, #23]
            break;
 8006a16:	e021      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	75fb      	strb	r3, [r7, #23]
            break;
 8006a1c:	e01e      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_104Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d102      	bne.n	8006a2a <lsm6dso_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006a24:	2304      	movs	r3, #4
 8006a26:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 8006a28:	e018      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 8006a2a:	78fb      	ldrb	r3, [r7, #3]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d102      	bne.n	8006a36 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006a30:	2304      	movs	r3, #4
 8006a32:	75fb      	strb	r3, [r7, #23]
            break;
 8006a34:	e012      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_26Hz){
 8006a36:	78fb      	ldrb	r3, [r7, #3]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d102      	bne.n	8006a42 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	75fb      	strb	r3, [r7, #23]
            break;
 8006a40:	e00c      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_52Hz){
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d102      	bne.n	8006a4e <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006a48:	2304      	movs	r3, #4
 8006a4a:	75fb      	strb	r3, [r7, #23]
            break;
 8006a4c:	e006      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006a4e:	78fb      	ldrb	r3, [r7, #3]
 8006a50:	75fb      	strb	r3, [r7, #23]
            break;
 8006a52:	e003      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
          default:
            odr_xl = val;
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	75fb      	strb	r3, [r7, #23]
            break;
 8006a58:	e000      	b.n	8006a5c <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8006a5a:	bf00      	nop
    }
  }
  if (ret == 0) {
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d107      	bne.n	8006a72 <lsm6dso_xl_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8006a62:	f107 0208 	add.w	r2, r7, #8
 8006a66:	2301      	movs	r3, #1
 8006a68:	2110      	movs	r1, #16
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff fe90 	bl	8006790 <lsm6dso_read_reg>
 8006a70:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10f      	bne.n	8006a98 <lsm6dso_xl_data_rate_set+0x1ec>
    reg.odr_xl = (uint8_t) odr_xl;
 8006a78:	7dfb      	ldrb	r3, [r7, #23]
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	7a3b      	ldrb	r3, [r7, #8]
 8006a82:	f362 1307 	bfi	r3, r2, #4, #4
 8006a86:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8006a88:	f107 0208 	add.w	r2, r7, #8
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	2110      	movs	r1, #16
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff fe95 	bl	80067c0 <lsm6dso_write_reg>
 8006a96:	6138      	str	r0, [r7, #16]
  }
  return ret;
 8006a98:	693b      	ldr	r3, [r7, #16]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop

08006aa4 <lsm6dso_xl_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_odr_xl_t *val)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8006aae:	f107 0208 	add.w	r2, r7, #8
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	2110      	movs	r1, #16
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff fe6a 	bl	8006790 <lsm6dso_read_reg>
 8006abc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl) {
 8006abe:	7a3b      	ldrb	r3, [r7, #8]
 8006ac0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b0b      	cmp	r3, #11
 8006ac8:	d84a      	bhi.n	8006b60 <lsm6dso_xl_data_rate_get+0xbc>
 8006aca:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <lsm6dso_xl_data_rate_get+0x2c>)
 8006acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad0:	08006b01 	.word	0x08006b01
 8006ad4:	08006b09 	.word	0x08006b09
 8006ad8:	08006b11 	.word	0x08006b11
 8006adc:	08006b19 	.word	0x08006b19
 8006ae0:	08006b21 	.word	0x08006b21
 8006ae4:	08006b29 	.word	0x08006b29
 8006ae8:	08006b31 	.word	0x08006b31
 8006aec:	08006b39 	.word	0x08006b39
 8006af0:	08006b41 	.word	0x08006b41
 8006af4:	08006b49 	.word	0x08006b49
 8006af8:	08006b51 	.word	0x08006b51
 8006afc:	08006b59 	.word	0x08006b59
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	701a      	strb	r2, [r3, #0]
      break;
 8006b06:	e02f      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	701a      	strb	r2, [r3, #0]
      break;
 8006b0e:	e02b      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2202      	movs	r2, #2
 8006b14:	701a      	strb	r2, [r3, #0]
      break;
 8006b16:	e027      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2203      	movs	r2, #3
 8006b1c:	701a      	strb	r2, [r3, #0]
      break;
 8006b1e:	e023      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2204      	movs	r2, #4
 8006b24:	701a      	strb	r2, [r3, #0]
      break;
 8006b26:	e01f      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2205      	movs	r2, #5
 8006b2c:	701a      	strb	r2, [r3, #0]
      break;
 8006b2e:	e01b      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2206      	movs	r2, #6
 8006b34:	701a      	strb	r2, [r3, #0]
      break;
 8006b36:	e017      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2207      	movs	r2, #7
 8006b3c:	701a      	strb	r2, [r3, #0]
      break;
 8006b3e:	e013      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2208      	movs	r2, #8
 8006b44:	701a      	strb	r2, [r3, #0]
      break;
 8006b46:	e00f      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2209      	movs	r2, #9
 8006b4c:	701a      	strb	r2, [r3, #0]
      break;
 8006b4e:	e00b      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	220a      	movs	r2, #10
 8006b54:	701a      	strb	r2, [r3, #0]
      break;
 8006b56:	e007      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	220b      	movs	r2, #11
 8006b5c:	701a      	strb	r2, [r3, #0]
      break;
 8006b5e:	e003      	b.n	8006b68 <lsm6dso_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2200      	movs	r2, #0
 8006b64:	701a      	strb	r2, [r3, #0]
      break;
 8006b66:	bf00      	nop
  }
  return ret;
 8006b68:	68fb      	ldr	r3, [r7, #12]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop

08006b74 <lsm6dso_gy_full_scale_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dso_fs_g_t val)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006b80:	f107 0208 	add.w	r2, r7, #8
 8006b84:	2301      	movs	r3, #1
 8006b86:	2111      	movs	r1, #17
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff fe01 	bl	8006790 <lsm6dso_read_reg>
 8006b8e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10f      	bne.n	8006bb6 <lsm6dso_gy_full_scale_set+0x42>
    reg.fs_g = (uint8_t) val;
 8006b96:	78fb      	ldrb	r3, [r7, #3]
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	7a3b      	ldrb	r3, [r7, #8]
 8006ba0:	f362 0343 	bfi	r3, r2, #1, #3
 8006ba4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006ba6:	f107 0208 	add.w	r2, r7, #8
 8006baa:	2301      	movs	r3, #1
 8006bac:	2111      	movs	r1, #17
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7ff fe06 	bl	80067c0 <lsm6dso_write_reg>
 8006bb4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <lsm6dso_gy_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dso_fs_g_t *val)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006bca:	f107 0208 	add.w	r2, r7, #8
 8006bce:	2301      	movs	r3, #1
 8006bd0:	2111      	movs	r1, #17
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff fddc 	bl	8006790 <lsm6dso_read_reg>
 8006bd8:	60f8      	str	r0, [r7, #12]
  switch (reg.fs_g) {
 8006bda:	7a3b      	ldrb	r3, [r7, #8]
 8006bdc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b06      	cmp	r3, #6
 8006be4:	d824      	bhi.n	8006c30 <lsm6dso_gy_full_scale_get+0x70>
 8006be6:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <lsm6dso_gy_full_scale_get+0x2c>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006c09 	.word	0x08006c09
 8006bf0:	08006c11 	.word	0x08006c11
 8006bf4:	08006c19 	.word	0x08006c19
 8006bf8:	08006c31 	.word	0x08006c31
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c31 	.word	0x08006c31
 8006c04:	08006c29 	.word	0x08006c29
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	701a      	strb	r2, [r3, #0]
      break;
 8006c0e:	e013      	b.n	8006c38 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2201      	movs	r2, #1
 8006c14:	701a      	strb	r2, [r3, #0]
      break;
 8006c16:	e00f      	b.n	8006c38 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	701a      	strb	r2, [r3, #0]
      break;
 8006c1e:	e00b      	b.n	8006c38 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2204      	movs	r2, #4
 8006c24:	701a      	strb	r2, [r3, #0]
      break;
 8006c26:	e007      	b.n	8006c38 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2206      	movs	r2, #6
 8006c2c:	701a      	strb	r2, [r3, #0]
      break;
 8006c2e:	e003      	b.n	8006c38 <lsm6dso_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSO_250dps;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2200      	movs	r2, #0
 8006c34:	701a      	strb	r2, [r3, #0]
      break;
 8006c36:	bf00      	nop
  }

  return ret;
 8006c38:	68fb      	ldr	r3, [r7, #12]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop

08006c44 <lsm6dso_gy_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dso_odr_g_t val)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8006c54:	f107 030c 	add.w	r3, r7, #12
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fa61 	bl	8007122 <lsm6dso_fsm_enable_get>
 8006c60:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f040 80c4 	bne.w	8006df2 <lsm6dso_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8006c6a:	7b3b      	ldrb	r3, [r7, #12]
 8006c6c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006c70:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8006c72:	7b3b      	ldrb	r3, [r7, #12]
 8006c74:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006c78:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8006c7e:	7b3b      	ldrb	r3, [r7, #12]
 8006c80:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c84:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8006c86:	4313      	orrs	r3, r2
 8006c88:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8006c8a:	7b3b      	ldrb	r3, [r7, #12]
 8006c8c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006c90:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8006c92:	4313      	orrs	r3, r2
 8006c94:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8006c96:	7b3b      	ldrb	r3, [r7, #12]
 8006c98:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006c9c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8006ca2:	7b3b      	ldrb	r3, [r7, #12]
 8006ca4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006ca8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8006caa:	4313      	orrs	r3, r2
 8006cac:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8006cae:	7b3b      	ldrb	r3, [r7, #12]
 8006cb0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006cb4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8006cba:	7b3b      	ldrb	r3, [r7, #12]
 8006cbc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006cc0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8006cc6:	7b7b      	ldrb	r3, [r7, #13]
 8006cc8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ccc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8006cd2:	7b7b      	ldrb	r3, [r7, #13]
 8006cd4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006cd8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8006cde:	7b7b      	ldrb	r3, [r7, #13]
 8006ce0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006ce4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8006cea:	7b7b      	ldrb	r3, [r7, #13]
 8006cec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006cf0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8006cf6:	7b7b      	ldrb	r3, [r7, #13]
 8006cf8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006cfc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8006d02:	7b7b      	ldrb	r3, [r7, #13]
 8006d04:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006d08:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8006d0e:	7b7b      	ldrb	r3, [r7, #13]
 8006d10:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006d14:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8006d16:	4313      	orrs	r3, r2
 8006d18:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 8006d1a:	7b7b      	ldrb	r3, [r7, #13]
 8006d1c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006d20:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8006d22:	4313      	orrs	r3, r2
 8006d24:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d163      	bne.n	8006df2 <lsm6dso_gy_data_rate_set+0x1ae>

      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8006d2a:	f107 030b 	add.w	r3, r7, #11
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fa17 	bl	8007164 <lsm6dso_fsm_data_rate_get>
 8006d36:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d159      	bne.n	8006df2 <lsm6dso_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8006d3e:	7afb      	ldrb	r3, [r7, #11]
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d853      	bhi.n	8006dec <lsm6dso_gy_data_rate_set+0x1a8>
 8006d44:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <lsm6dso_gy_data_rate_set+0x108>)
 8006d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4a:	bf00      	nop
 8006d4c:	08006d5d 	.word	0x08006d5d
 8006d50:	08006d6f 	.word	0x08006d6f
 8006d54:	08006d8d 	.word	0x08006d8d
 8006d58:	08006db7 	.word	0x08006db7
          case LSM6DSO_ODR_FSM_12Hz5:

            if (val == LSM6DSO_GY_ODR_OFF){
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d102      	bne.n	8006d68 <lsm6dso_gy_data_rate_set+0x124>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8006d62:	2301      	movs	r3, #1
 8006d64:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 8006d66:	e045      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006d68:	78fb      	ldrb	r3, [r7, #3]
 8006d6a:	75fb      	strb	r3, [r7, #23]
            break;
 8006d6c:	e042      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_26Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 8006d6e:	78fb      	ldrb	r3, [r7, #3]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d102      	bne.n	8006d7a <lsm6dso_gy_data_rate_set+0x136>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006d74:	2302      	movs	r3, #2
 8006d76:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 8006d78:	e03c      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8006d7a:	78fb      	ldrb	r3, [r7, #3]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d102      	bne.n	8006d86 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006d80:	2302      	movs	r3, #2
 8006d82:	75fb      	strb	r3, [r7, #23]
            break;
 8006d84:	e036      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006d86:	78fb      	ldrb	r3, [r7, #3]
 8006d88:	75fb      	strb	r3, [r7, #23]
            break;
 8006d8a:	e033      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_52Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 8006d8c:	78fb      	ldrb	r3, [r7, #3]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d102      	bne.n	8006d98 <lsm6dso_gy_data_rate_set+0x154>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006d92:	2303      	movs	r3, #3
 8006d94:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 8006d96:	e02d      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8006d98:	78fb      	ldrb	r3, [r7, #3]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d102      	bne.n	8006da4 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	75fb      	strb	r3, [r7, #23]
            break;
 8006da2:	e027      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_26Hz){
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d102      	bne.n	8006db0 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006daa:	2303      	movs	r3, #3
 8006dac:	75fb      	strb	r3, [r7, #23]
            break;
 8006dae:	e021      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	75fb      	strb	r3, [r7, #23]
            break;
 8006db4:	e01e      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_104Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 8006db6:	78fb      	ldrb	r3, [r7, #3]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d102      	bne.n	8006dc2 <lsm6dso_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006dbc:	2304      	movs	r3, #4
 8006dbe:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 8006dc0:	e018      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d102      	bne.n	8006dce <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006dc8:	2304      	movs	r3, #4
 8006dca:	75fb      	strb	r3, [r7, #23]
            break;
 8006dcc:	e012      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_26Hz){
 8006dce:	78fb      	ldrb	r3, [r7, #3]
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d102      	bne.n	8006dda <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	75fb      	strb	r3, [r7, #23]
            break;
 8006dd8:	e00c      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_52Hz){
 8006dda:	78fb      	ldrb	r3, [r7, #3]
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d102      	bne.n	8006de6 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006de0:	2304      	movs	r3, #4
 8006de2:	75fb      	strb	r3, [r7, #23]
            break;
 8006de4:	e006      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006de6:	78fb      	ldrb	r3, [r7, #3]
 8006de8:	75fb      	strb	r3, [r7, #23]
            break;
 8006dea:	e003      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
          default:
            odr_gy = val;
 8006dec:	78fb      	ldrb	r3, [r7, #3]
 8006dee:	75fb      	strb	r3, [r7, #23]
            break;
 8006df0:	e000      	b.n	8006df4 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8006df2:	bf00      	nop
    }
  }

  if (ret == 0) {
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d107      	bne.n	8006e0a <lsm6dso_gy_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006dfa:	f107 0208 	add.w	r2, r7, #8
 8006dfe:	2301      	movs	r3, #1
 8006e00:	2111      	movs	r1, #17
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff fcc4 	bl	8006790 <lsm6dso_read_reg>
 8006e08:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10f      	bne.n	8006e30 <lsm6dso_gy_data_rate_set+0x1ec>
    reg.odr_g = (uint8_t) odr_gy;
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
 8006e12:	f003 030f 	and.w	r3, r3, #15
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	7a3b      	ldrb	r3, [r7, #8]
 8006e1a:	f362 1307 	bfi	r3, r2, #4, #4
 8006e1e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006e20:	f107 0208 	add.w	r2, r7, #8
 8006e24:	2301      	movs	r3, #1
 8006e26:	2111      	movs	r1, #17
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7ff fcc9 	bl	80067c0 <lsm6dso_write_reg>
 8006e2e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006e30:	693b      	ldr	r3, [r7, #16]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop

08006e3c <lsm6dso_gy_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_odr_g_t *val)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8006e46:	f107 0208 	add.w	r2, r7, #8
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	2111      	movs	r1, #17
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff fc9e 	bl	8006790 <lsm6dso_read_reg>
 8006e54:	60f8      	str	r0, [r7, #12]
  switch (reg.odr_g) {
 8006e56:	7a3b      	ldrb	r3, [r7, #8]
 8006e58:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b0a      	cmp	r3, #10
 8006e60:	d844      	bhi.n	8006eec <lsm6dso_gy_data_rate_get+0xb0>
 8006e62:	a201      	add	r2, pc, #4	; (adr r2, 8006e68 <lsm6dso_gy_data_rate_get+0x2c>)
 8006e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e68:	08006e95 	.word	0x08006e95
 8006e6c:	08006e9d 	.word	0x08006e9d
 8006e70:	08006ea5 	.word	0x08006ea5
 8006e74:	08006ead 	.word	0x08006ead
 8006e78:	08006eb5 	.word	0x08006eb5
 8006e7c:	08006ebd 	.word	0x08006ebd
 8006e80:	08006ec5 	.word	0x08006ec5
 8006e84:	08006ecd 	.word	0x08006ecd
 8006e88:	08006ed5 	.word	0x08006ed5
 8006e8c:	08006edd 	.word	0x08006edd
 8006e90:	08006ee5 	.word	0x08006ee5
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2200      	movs	r2, #0
 8006e98:	701a      	strb	r2, [r3, #0]
      break;
 8006e9a:	e02b      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	701a      	strb	r2, [r3, #0]
      break;
 8006ea2:	e027      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	701a      	strb	r2, [r3, #0]
      break;
 8006eaa:	e023      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2203      	movs	r2, #3
 8006eb0:	701a      	strb	r2, [r3, #0]
      break;
 8006eb2:	e01f      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2204      	movs	r2, #4
 8006eb8:	701a      	strb	r2, [r3, #0]
      break;
 8006eba:	e01b      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2205      	movs	r2, #5
 8006ec0:	701a      	strb	r2, [r3, #0]
      break;
 8006ec2:	e017      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2206      	movs	r2, #6
 8006ec8:	701a      	strb	r2, [r3, #0]
      break;
 8006eca:	e013      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2207      	movs	r2, #7
 8006ed0:	701a      	strb	r2, [r3, #0]
      break;
 8006ed2:	e00f      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2208      	movs	r2, #8
 8006ed8:	701a      	strb	r2, [r3, #0]
      break;
 8006eda:	e00b      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2209      	movs	r2, #9
 8006ee0:	701a      	strb	r2, [r3, #0]
      break;
 8006ee2:	e007      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	220a      	movs	r2, #10
 8006ee8:	701a      	strb	r2, [r3, #0]
      break;
 8006eea:	e003      	b.n	8006ef4 <lsm6dso_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	701a      	strb	r2, [r3, #0]
      break;
 8006ef2:	bf00      	nop
  }
  return ret;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop

08006f00 <lsm6dso_block_data_update_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of bdu in reg CTRL3_C
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8006f0c:	f107 0208 	add.w	r2, r7, #8
 8006f10:	2301      	movs	r3, #1
 8006f12:	2112      	movs	r1, #18
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff fc3b 	bl	8006790 <lsm6dso_read_reg>
 8006f1a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10f      	bne.n	8006f42 <lsm6dso_block_data_update_set+0x42>
    reg.bdu = val;
 8006f22:	78fb      	ldrb	r3, [r7, #3]
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	7a3b      	ldrb	r3, [r7, #8]
 8006f2c:	f362 1386 	bfi	r3, r2, #6, #1
 8006f30:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8006f32:	f107 0208 	add.w	r2, r7, #8
 8006f36:	2301      	movs	r3, #1
 8006f38:	2112      	movs	r1, #18
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7ff fc40 	bl	80067c0 <lsm6dso_write_reg>
 8006f40:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006f42:	68fb      	ldr	r3, [r7, #12]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <lsm6dso_angular_rate_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8006f56:	2306      	movs	r3, #6
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	2122      	movs	r1, #34	; 0x22
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7ff fc17 	bl	8006790 <lsm6dso_read_reg>
 8006f62:	60f8      	str	r0, [r7, #12]
  return ret;
 8006f64:	68fb      	ldr	r3, [r7, #12]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <lsm6dso_acceleration_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8006f78:	2306      	movs	r3, #6
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	2128      	movs	r1, #40	; 0x28
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7ff fc06 	bl	8006790 <lsm6dso_read_reg>
 8006f84:	60f8      	str	r0, [r7, #12]
  return ret;
 8006f86:	68fb      	ldr	r3, [r7, #12]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <lsm6dso_mem_bank_set>:
  * @param  val      change the values of reg_access in
  *                               reg FUNC_CFG_ACCESS
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx, lsm6dso_reg_access_t val)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 8006f9c:	f107 0208 	add.w	r2, r7, #8
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff fbf3 	bl	8006790 <lsm6dso_read_reg>
 8006faa:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10f      	bne.n	8006fd2 <lsm6dso_mem_bank_set+0x42>
    reg.reg_access = (uint8_t)val;
 8006fb2:	78fb      	ldrb	r3, [r7, #3]
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	7a3b      	ldrb	r3, [r7, #8]
 8006fbc:	f362 1387 	bfi	r3, r2, #6, #2
 8006fc0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 8006fc2:	f107 0208 	add.w	r2, r7, #8
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	2101      	movs	r1, #1
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7ff fbf8 	bl	80067c0 <lsm6dso_write_reg>
 8006fd0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <lsm6dso_device_id_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	210f      	movs	r1, #15
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7ff fbcf 	bl	8006790 <lsm6dso_read_reg>
 8006ff2:	60f8      	str	r0, [r7, #12]
  return ret;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <lsm6dso_auto_increment_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of if_inc in reg CTRL3_C
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	460b      	mov	r3, r1
 8007008:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 800700a:	f107 0208 	add.w	r2, r7, #8
 800700e:	2301      	movs	r3, #1
 8007010:	2112      	movs	r1, #18
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff fbbc 	bl	8006790 <lsm6dso_read_reg>
 8007018:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10f      	bne.n	8007040 <lsm6dso_auto_increment_set+0x42>
    reg.if_inc = val;
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	b2da      	uxtb	r2, r3
 8007028:	7a3b      	ldrb	r3, [r7, #8]
 800702a:	f362 0382 	bfi	r3, r2, #2, #1
 800702e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8007030:	f107 0208 	add.w	r2, r7, #8
 8007034:	2301      	movs	r3, #1
 8007036:	2112      	movs	r1, #18
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff fbc1 	bl	80067c0 <lsm6dso_write_reg>
 800703e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007040:	68fb      	ldr	r3, [r7, #12]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <lsm6dso_i3c_disable_set>:
  * @param  val      change the values of i3c_disable
  *                                    in reg CTRL9_XL
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx, lsm6dso_i3c_disable_t val)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b086      	sub	sp, #24
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	460b      	mov	r3, r1
 8007054:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 8007056:	f107 020c 	add.w	r2, r7, #12
 800705a:	2301      	movs	r3, #1
 800705c:	2118      	movs	r1, #24
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7ff fb96 	bl	8006790 <lsm6dso_read_reg>
 8007064:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d111      	bne.n	8007090 <lsm6dso_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800706c:	78fb      	ldrb	r3, [r7, #3]
 800706e:	09db      	lsrs	r3, r3, #7
 8007070:	b2db      	uxtb	r3, r3
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	b2da      	uxtb	r2, r3
 8007078:	7b3b      	ldrb	r3, [r7, #12]
 800707a:	f362 0341 	bfi	r3, r2, #1, #1
 800707e:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 8007080:	f107 020c 	add.w	r2, r7, #12
 8007084:	2301      	movs	r3, #1
 8007086:	2118      	movs	r1, #24
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7ff fb99 	bl	80067c0 <lsm6dso_write_reg>
 800708e:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d107      	bne.n	80070a6 <lsm6dso_i3c_disable_set+0x5c>

    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8007096:	f107 0210 	add.w	r2, r7, #16
 800709a:	2301      	movs	r3, #1
 800709c:	2162      	movs	r1, #98	; 0x62
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7ff fb76 	bl	8006790 <lsm6dso_read_reg>
 80070a4:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&i3c_bus_avb, 1);
  }
  if (ret == 0) {
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10f      	bne.n	80070cc <lsm6dso_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80070ac:	78fb      	ldrb	r3, [r7, #3]
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	7c3b      	ldrb	r3, [r7, #16]
 80070b6:	f362 03c4 	bfi	r3, r2, #3, #2
 80070ba:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80070bc:	f107 0210 	add.w	r2, r7, #16
 80070c0:	2301      	movs	r3, #1
 80070c2:	2162      	movs	r1, #98	; 0x62
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff fb7b 	bl	80067c0 <lsm6dso_write_reg>
 80070ca:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&i3c_bus_avb, 1);
  }

  return ret;
 80070cc:	697b      	ldr	r3, [r7, #20]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3718      	adds	r7, #24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <lsm6dso_fifo_mode_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fifo_mode in reg FIFO_CTRL4
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dso_fifo_mode_t val)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	460b      	mov	r3, r1
 80070e0:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 80070e2:	f107 0208 	add.w	r2, r7, #8
 80070e6:	2301      	movs	r3, #1
 80070e8:	210a      	movs	r1, #10
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7ff fb50 	bl	8006790 <lsm6dso_read_reg>
 80070f0:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10f      	bne.n	8007118 <lsm6dso_fifo_mode_set+0x42>
    reg.fifo_mode = (uint8_t)val;
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	7a3b      	ldrb	r3, [r7, #8]
 8007102:	f362 0302 	bfi	r3, r2, #0, #3
 8007106:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 8007108:	f107 0208 	add.w	r2, r7, #8
 800710c:	2301      	movs	r3, #1
 800710e:	210a      	movs	r1, #10
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff fb55 	bl	80067c0 <lsm6dso_write_reg>
 8007116:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007118:	68fb      	ldr	r3, [r7, #12]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <lsm6dso_fsm_enable_get>:
  * @param  val      union of registers from FSM_ENABLE_A to FSM_ENABLE_B
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800712c:	2102      	movs	r1, #2
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff ff2e 	bl	8006f90 <lsm6dso_mem_bank_set>
 8007134:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d106      	bne.n	800714a <lsm6dso_fsm_enable_get+0x28>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t*) val, 2);
 800713c:	2302      	movs	r3, #2
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	2146      	movs	r1, #70	; 0x46
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff fb24 	bl	8006790 <lsm6dso_read_reg>
 8007148:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d104      	bne.n	800715a <lsm6dso_fsm_enable_get+0x38>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007150:	2100      	movs	r1, #0
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff ff1c 	bl	8006f90 <lsm6dso_mem_bank_set>
 8007158:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800715a:	68fb      	ldr	r3, [r7, #12]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <lsm6dso_fsm_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fsm_odr in reg EMB_FUNC_ODR_CFG_B
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_fsm_odr_t *val)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800716e:	2102      	movs	r1, #2
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff ff0d 	bl	8006f90 <lsm6dso_mem_bank_set>
 8007176:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d107      	bne.n	800718e <lsm6dso_fsm_data_rate_get+0x2a>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 800717e:	f107 0208 	add.w	r2, r7, #8
 8007182:	2301      	movs	r3, #1
 8007184:	215f      	movs	r1, #95	; 0x5f
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff fb02 	bl	8006790 <lsm6dso_read_reg>
 800718c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&reg, 1);
  }
  if (ret == 0) {
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d12a      	bne.n	80071ea <lsm6dso_fsm_data_rate_get+0x86>
    switch (reg.fsm_odr) {
 8007194:	7a3b      	ldrb	r3, [r7, #8]
 8007196:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b03      	cmp	r3, #3
 800719e:	d81b      	bhi.n	80071d8 <lsm6dso_fsm_data_rate_get+0x74>
 80071a0:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <lsm6dso_fsm_data_rate_get+0x44>)
 80071a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a6:	bf00      	nop
 80071a8:	080071b9 	.word	0x080071b9
 80071ac:	080071c1 	.word	0x080071c1
 80071b0:	080071c9 	.word	0x080071c9
 80071b4:	080071d1 	.word	0x080071d1
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]
        break;
 80071be:	e00f      	b.n	80071e0 <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2201      	movs	r2, #1
 80071c4:	701a      	strb	r2, [r3, #0]
        break;
 80071c6:	e00b      	b.n	80071e0 <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2202      	movs	r2, #2
 80071cc:	701a      	strb	r2, [r3, #0]
        break;
 80071ce:	e007      	b.n	80071e0 <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2203      	movs	r2, #3
 80071d4:	701a      	strb	r2, [r3, #0]
        break;
 80071d6:	e003      	b.n	80071e0 <lsm6dso_fsm_data_rate_get+0x7c>
      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2200      	movs	r2, #0
 80071dc:	701a      	strb	r2, [r3, #0]
        break;
 80071de:	bf00      	nop
    }
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80071e0:	2100      	movs	r1, #0
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7ff fed4 	bl	8006f90 <lsm6dso_mem_bank_set>
 80071e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80071ea:	68fb      	ldr	r3, [r7, #12]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <STTS751_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d103      	bne.n	800720c <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8007204:	f04f 33ff 	mov.w	r3, #4294967295
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	e030      	b.n	800726e <STTS751_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	7b1a      	ldrb	r2, [r3, #12]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	695a      	ldr	r2, [r3, #20]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	699a      	ldr	r2, [r3, #24]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a0c      	ldr	r2, [pc, #48]	; (8007278 <STTS751_RegisterBusIO+0x84>)
 8007248:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a0b      	ldr	r2, [pc, #44]	; (800727c <STTS751_RegisterBusIO+0x88>)
 800724e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d004      	beq.n	8007268 <STTS751_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4798      	blx	r3
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	e002      	b.n	800726e <STTS751_RegisterBusIO+0x7a>
    }
    else
    {
      ret = STTS751_ERROR;
 8007268:	f04f 33ff 	mov.w	r3, #4294967295
 800726c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800726e:	68fb      	ldr	r3, [r7, #12]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	08007701 	.word	0x08007701
 800727c:	0800776f 	.word	0x0800776f

08007280 <STTS751_Init>:
 * @brief  Initialize the STTS751 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800728e:	2b00      	cmp	r3, #0
 8007290:	d127      	bne.n	80072e2 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	331c      	adds	r3, #28
 8007296:	2101      	movs	r1, #1
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fc46 	bl	8007b2a <stts751_pin_event_route_set>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 80072a4:	f04f 33ff 	mov.w	r3, #4294967295
 80072a8:	e020      	b.n	80072ec <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80072b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	331c      	adds	r3, #28
 80072b6:	2103      	movs	r1, #3
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 fbaf 	bl	8007a1c <stts751_resolution_set>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 80072c4:	f04f 33ff 	mov.w	r3, #4294967295
 80072c8:	e010      	b.n	80072ec <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	331c      	adds	r3, #28
 80072ce:	2180      	movs	r1, #128	; 0x80
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 facd 	bl	8007870 <stts751_temp_data_rate_set>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 80072dc:	f04f 33ff 	mov.w	r3, #4294967295
 80072e0:	e004      	b.n	80072ec <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return STTS751_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <STTS751_DeInit>:
 * @brief  Deinitialize the STTS751 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007302:	2b01      	cmp	r3, #1
 8007304:	d108      	bne.n	8007318 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f870 	bl	80073ec <STTS751_TEMP_Disable>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 8007312:	f04f 33ff 	mov.w	r3, #4294967295
 8007316:	e004      	b.n	8007322 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return STTS751_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <STTS751_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	331c      	adds	r3, #28
 8007338:	f107 020c 	add.w	r2, r7, #12
 800733c:	4611      	mov	r1, r2
 800733e:	4618      	mov	r0, r3
 8007340:	f000 fc19 	bl	8007b76 <stts751_device_id_get>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 800734a:	f04f 33ff 	mov.w	r3, #4294967295
 800734e:	e003      	b.n	8007358 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 8007350:	7b7a      	ldrb	r2, [r7, #13]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <STTS751_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to STTS751 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2200      	movs	r2, #0
 800736e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2200      	movs	r2, #0
 8007374:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2201      	movs	r2, #1
 800737a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2200      	movs	r2, #0
 8007380:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007390:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	f04f 0200 	mov.w	r2, #0
 8007398:	60da      	str	r2, [r3, #12]
  return STTS751_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <STTS751_TEMP_Enable>:
 * @brief  Enable the STTS751 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d101      	bne.n	80073be <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e012      	b.n	80073e4 <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80073c4:	eeb0 0a67 	vmov.f32	s0, s15
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f8b5 	bl	8007538 <STTS751_TEMP_SetOutputDataRate>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 80073d4:	f04f 33ff 	mov.w	r3, #4294967295
 80073d8:	e004      	b.n	80073e4 <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return STTS751_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <STTS751_TEMP_Disable>:
 * @brief  Disable the STTS751 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	e01c      	b.n	800743c <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	332c      	adds	r3, #44	; 0x2c
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f81b 	bl	8007444 <STTS751_TEMP_GetOutputDataRate>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 8007414:	f04f 33ff 	mov.w	r3, #4294967295
 8007418:	e010      	b.n	800743c <STTS751_TEMP_Disable+0x50>
  }
  
  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	331c      	adds	r3, #28
 800741e:	2180      	movs	r1, #128	; 0x80
 8007420:	4618      	mov	r0, r3
 8007422:	f000 fa25 	bl	8007870 <stts751_temp_data_rate_set>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 800742c:	f04f 33ff 	mov.w	r3, #4294967295
 8007430:	e004      	b.n	800743c <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return STTS751_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <STTS751_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	331c      	adds	r3, #28
 8007456:	f107 020b 	add.w	r2, r7, #11
 800745a:	4611      	mov	r1, r2
 800745c:	4618      	mov	r0, r3
 800745e:	f000 fa5d 	bl	800791c <stts751_temp_data_rate_get>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8007468:	f04f 33ff 	mov.w	r3, #4294967295
 800746c:	e060      	b.n	8007530 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 800746e:	7afb      	ldrb	r3, [r7, #11]
 8007470:	2b90      	cmp	r3, #144	; 0x90
 8007472:	d021      	beq.n	80074b8 <STTS751_TEMP_GetOutputDataRate+0x74>
 8007474:	2b90      	cmp	r3, #144	; 0x90
 8007476:	dc56      	bgt.n	8007526 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007478:	2b09      	cmp	r3, #9
 800747a:	dc1b      	bgt.n	80074b4 <STTS751_TEMP_GetOutputDataRate+0x70>
 800747c:	2b00      	cmp	r3, #0
 800747e:	db52      	blt.n	8007526 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007480:	2b09      	cmp	r3, #9
 8007482:	d850      	bhi.n	8007526 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007484:	a201      	add	r2, pc, #4	; (adr r2, 800748c <STTS751_TEMP_GetOutputDataRate+0x48>)
 8007486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748a:	bf00      	nop
 800748c:	080074c3 	.word	0x080074c3
 8007490:	080074cd 	.word	0x080074cd
 8007494:	080074d7 	.word	0x080074d7
 8007498:	080074e1 	.word	0x080074e1
 800749c:	080074eb 	.word	0x080074eb
 80074a0:	080074f5 	.word	0x080074f5
 80074a4:	080074ff 	.word	0x080074ff
 80074a8:	08007509 	.word	0x08007509
 80074ac:	08007513 	.word	0x08007513
 80074b0:	0800751d 	.word	0x0800751d
 80074b4:	2b80      	cmp	r3, #128	; 0x80
 80074b6:	d136      	bne.n	8007526 <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
	case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	f04f 0200 	mov.w	r2, #0
 80074be:	601a      	str	r2, [r3, #0]
      break;
 80074c0:	e035      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 80074c8:	601a      	str	r2, [r3, #0]
      break;
 80074ca:	e030      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 80074d2:	601a      	str	r2, [r3, #0]
      break;
 80074d4:	e02b      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80074dc:	601a      	str	r2, [r3, #0]
      break;
 80074de:	e026      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80074e6:	601a      	str	r2, [r3, #0]
      break;
 80074e8:	e021      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80074f0:	601a      	str	r2, [r3, #0]
      break;
 80074f2:	e01c      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80074fa:	601a      	str	r2, [r3, #0]
      break;
 80074fc:	e017      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8007504:	601a      	str	r2, [r3, #0]
      break;
 8007506:	e012      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800750e:	601a      	str	r2, [r3, #0]
      break;
 8007510:	e00d      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8007518:	601a      	str	r2, [r3, #0]
      break;
 800751a:	e008      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007522:	601a      	str	r2, [r3, #0]
      break;
 8007524:	e003      	b.n	800752e <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 8007526:	f04f 33ff 	mov.w	r3, #4294967295
 800752a:	60fb      	str	r3, [r7, #12]
      break;
 800752c:	bf00      	nop
  }

  return ret;
 800752e:	68fb      	ldr	r3, [r7, #12]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <STTS751_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	331c      	adds	r3, #28
 8007548:	f107 020e 	add.w	r2, r7, #14
 800754c:	4611      	mov	r1, r2
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fa8a 	bl	8007a68 <stts751_resolution_get>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d002      	beq.n	8007560 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 800755a:	f04f 33ff 	mov.w	r3, #4294967295
 800755e:	e0a5      	b.n	80076ac <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if(Odr == 16.0f && res == STTS751_12bit)
 8007560:	edd7 7a00 	vldr	s15, [r7]
 8007564:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8007568:	eef4 7a47 	vcmp.f32	s15, s14
 800756c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007570:	d10e      	bne.n	8007590 <STTS751_TEMP_SetOutputDataRate+0x58>
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	2b03      	cmp	r3, #3
 8007576:	d10b      	bne.n	8007590 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	331c      	adds	r3, #28
 800757c:	2101      	movs	r1, #1
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fa4c 	bl	8007a1c <stts751_resolution_set>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 800758a:	f04f 33ff 	mov.w	r3, #4294967295
 800758e:	e08d      	b.n	80076ac <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if(Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8007590:	edd7 7a00 	vldr	s15, [r7]
 8007594:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80076b4 <STTS751_TEMP_SetOutputDataRate+0x17c>
 8007598:	eef4 7a47 	vcmp.f32	s15, s14
 800759c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a0:	d111      	bne.n	80075c6 <STTS751_TEMP_SetOutputDataRate+0x8e>
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d002      	beq.n	80075ae <STTS751_TEMP_SetOutputDataRate+0x76>
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d10b      	bne.n	80075c6 <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	331c      	adds	r3, #28
 80075b2:	2100      	movs	r1, #0
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 fa31 	bl	8007a1c <stts751_resolution_set>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 80075c0:	f04f 33ff 	mov.w	r3, #4294967295
 80075c4:	e072      	b.n	80076ac <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 80075c6:	edd7 7a00 	vldr	s15, [r7]
 80075ca:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80076b8 <STTS751_TEMP_SetOutputDataRate+0x180>
 80075ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d6:	d801      	bhi.n	80075dc <STTS751_TEMP_SetOutputDataRate+0xa4>
 80075d8:	2300      	movs	r3, #0
 80075da:	e058      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 80075dc:	edd7 7a00 	vldr	s15, [r7]
 80075e0:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80075e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ec:	d801      	bhi.n	80075f2 <STTS751_TEMP_SetOutputDataRate+0xba>
 80075ee:	2301      	movs	r3, #1
 80075f0:	e04d      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 80075f2:	edd7 7a00 	vldr	s15, [r7]
 80075f6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80075fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007602:	d801      	bhi.n	8007608 <STTS751_TEMP_SetOutputDataRate+0xd0>
 8007604:	2302      	movs	r3, #2
 8007606:	e042      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007608:	edd7 7a00 	vldr	s15, [r7]
 800760c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007618:	d801      	bhi.n	800761e <STTS751_TEMP_SetOutputDataRate+0xe6>
 800761a:	2303      	movs	r3, #3
 800761c:	e037      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 800761e:	edd7 7a00 	vldr	s15, [r7]
 8007622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800762a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762e:	d801      	bhi.n	8007634 <STTS751_TEMP_SetOutputDataRate+0xfc>
 8007630:	2304      	movs	r3, #4
 8007632:	e02c      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007634:	edd7 7a00 	vldr	s15, [r7]
 8007638:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800763c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007644:	d801      	bhi.n	800764a <STTS751_TEMP_SetOutputDataRate+0x112>
 8007646:	2305      	movs	r3, #5
 8007648:	e021      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 800764a:	edd7 7a00 	vldr	s15, [r7]
 800764e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800765a:	d801      	bhi.n	8007660 <STTS751_TEMP_SetOutputDataRate+0x128>
 800765c:	2306      	movs	r3, #6
 800765e:	e016      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007660:	edd7 7a00 	vldr	s15, [r7]
 8007664:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8007668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800766c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007670:	d801      	bhi.n	8007676 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8007672:	2307      	movs	r3, #7
 8007674:	e00b      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007676:	edd7 7a00 	vldr	s15, [r7]
 800767a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800767e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007686:	d801      	bhi.n	800768c <STTS751_TEMP_SetOutputDataRate+0x154>
 8007688:	2308      	movs	r3, #8
 800768a:	e000      	b.n	800768e <STTS751_TEMP_SetOutputDataRate+0x156>
 800768c:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 800768e:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 4.0f   ) ? STTS751_TEMP_ODR_4Hz
          : (Odr <= 8.0f   ) ? STTS751_TEMP_ODR_8Hz
          : (Odr <= 16.0f  ) ? STTS751_TEMP_ODR_16Hz
          :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	331c      	adds	r3, #28
 8007694:	7bfa      	ldrb	r2, [r7, #15]
 8007696:	4611      	mov	r1, r2
 8007698:	4618      	mov	r0, r3
 800769a:	f000 f8e9 	bl	8007870 <stts751_temp_data_rate_set>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 80076a4:	f04f 33ff 	mov.w	r3, #4294967295
 80076a8:	e000      	b.n	80076ac <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	42000000 	.word	0x42000000
 80076b8:	3d800000 	.word	0x3d800000

080076bc <STTS751_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	331c      	adds	r3, #28
 80076ca:	f107 020e 	add.w	r2, r7, #14
 80076ce:	4611      	mov	r1, r2
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 fa01 	bl	8007ad8 <stts751_temperature_raw_get>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 80076dc:	f04f 33ff 	mov.w	r3, #4294967295
 80076e0:	e00a      	b.n	80076f8 <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 80076e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 f8a8 	bl	800783c <stts751_from_lsb_to_celsius>
 80076ec:	eef0 7a40 	vmov.f32	s15, s0
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007700:	b590      	push	{r4, r7, lr}
 8007702:	b089      	sub	sp, #36	; 0x24
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	607a      	str	r2, [r7, #4]
 800770a:	461a      	mov	r2, r3
 800770c:	460b      	mov	r3, r1
 800770e:	72fb      	strb	r3, [r7, #11]
 8007710:	4613      	mov	r3, r2
 8007712:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d11f      	bne.n	8007764 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8007724:	2300      	movs	r3, #0
 8007726:	83fb      	strh	r3, [r7, #30]
 8007728:	e018      	b.n	800775c <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	695c      	ldr	r4, [r3, #20]
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	7b1b      	ldrb	r3, [r3, #12]
 8007732:	b298      	uxth	r0, r3
 8007734:	7afb      	ldrb	r3, [r7, #11]
 8007736:	b29a      	uxth	r2, r3
 8007738:	8bfb      	ldrh	r3, [r7, #30]
 800773a:	4413      	add	r3, r2
 800773c:	b299      	uxth	r1, r3
 800773e:	8bfb      	ldrh	r3, [r7, #30]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	441a      	add	r2, r3
 8007744:	2301      	movs	r3, #1
 8007746:	47a0      	blx	r4
 8007748:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8007750:	f04f 33ff 	mov.w	r3, #4294967295
 8007754:	e007      	b.n	8007766 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8007756:	8bfb      	ldrh	r3, [r7, #30]
 8007758:	3301      	adds	r3, #1
 800775a:	83fb      	strh	r3, [r7, #30]
 800775c:	8bfa      	ldrh	r2, [r7, #30]
 800775e:	893b      	ldrh	r3, [r7, #8]
 8007760:	429a      	cmp	r2, r3
 8007762:	d3e2      	bcc.n	800772a <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8007764:	69bb      	ldr	r3, [r7, #24]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3724      	adds	r7, #36	; 0x24
 800776a:	46bd      	mov	sp, r7
 800776c:	bd90      	pop	{r4, r7, pc}

0800776e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800776e:	b590      	push	{r4, r7, lr}
 8007770:	b089      	sub	sp, #36	; 0x24
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	607a      	str	r2, [r7, #4]
 8007778:	461a      	mov	r2, r3
 800777a:	460b      	mov	r3, r1
 800777c:	72fb      	strb	r3, [r7, #11]
 800777e:	4613      	mov	r3, r2
 8007780:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d11f      	bne.n	80077d2 <WriteRegWrap+0x64>
  {
	for (i = 0; i < Length; i++)
 8007792:	2300      	movs	r3, #0
 8007794:	83fb      	strh	r3, [r7, #30]
 8007796:	e018      	b.n	80077ca <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	691c      	ldr	r4, [r3, #16]
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	7b1b      	ldrb	r3, [r3, #12]
 80077a0:	b298      	uxth	r0, r3
 80077a2:	7afb      	ldrb	r3, [r7, #11]
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	8bfb      	ldrh	r3, [r7, #30]
 80077a8:	4413      	add	r3, r2
 80077aa:	b299      	uxth	r1, r3
 80077ac:	8bfb      	ldrh	r3, [r7, #30]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	441a      	add	r2, r3
 80077b2:	2301      	movs	r3, #1
 80077b4:	47a0      	blx	r4
 80077b6:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 80077be:	f04f 33ff 	mov.w	r3, #4294967295
 80077c2:	e007      	b.n	80077d4 <WriteRegWrap+0x66>
	for (i = 0; i < Length; i++)
 80077c4:	8bfb      	ldrh	r3, [r7, #30]
 80077c6:	3301      	adds	r3, #1
 80077c8:	83fb      	strh	r3, [r7, #30]
 80077ca:	8bfa      	ldrh	r2, [r7, #30]
 80077cc:	893b      	ldrh	r3, [r7, #8]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d3e2      	bcc.n	8007798 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 80077d2:	69bb      	ldr	r3, [r7, #24]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3724      	adds	r7, #36	; 0x24
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd90      	pop	{r4, r7, pc}

080077dc <stts751_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80077dc:	b590      	push	{r4, r7, lr}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	607a      	str	r2, [r7, #4]
 80077e6:	461a      	mov	r2, r3
 80077e8:	460b      	mov	r3, r1
 80077ea:	72fb      	strb	r3, [r7, #11]
 80077ec:	4613      	mov	r3, r2
 80077ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	685c      	ldr	r4, [r3, #4]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6898      	ldr	r0, [r3, #8]
 80077f8:	893b      	ldrh	r3, [r7, #8]
 80077fa:	7af9      	ldrb	r1, [r7, #11]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	47a0      	blx	r4
 8007800:	6178      	str	r0, [r7, #20]
  return ret;
 8007802:	697b      	ldr	r3, [r7, #20]
}
 8007804:	4618      	mov	r0, r3
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	bd90      	pop	{r4, r7, pc}

0800780c <stts751_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 800780c:	b590      	push	{r4, r7, lr}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	607a      	str	r2, [r7, #4]
 8007816:	461a      	mov	r2, r3
 8007818:	460b      	mov	r3, r1
 800781a:	72fb      	strb	r3, [r7, #11]
 800781c:	4613      	mov	r3, r2
 800781e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681c      	ldr	r4, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6898      	ldr	r0, [r3, #8]
 8007828:	893b      	ldrh	r3, [r7, #8]
 800782a:	7af9      	ldrb	r1, [r7, #11]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	47a0      	blx	r4
 8007830:	6178      	str	r0, [r7, #20]
  return ret;
 8007832:	697b      	ldr	r3, [r7, #20]
}
 8007834:	4618      	mov	r0, r3
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	bd90      	pop	{r4, r7, pc}

0800783c <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float stts751_from_lsb_to_celsius(int16_t lsb)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	4603      	mov	r3, r0
 8007844:	80fb      	strh	r3, [r7, #6]
  return ((float)lsb) / 256.0f;
 8007846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007852:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800786c <stts751_from_lsb_to_celsius+0x30>
 8007856:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800785a:	eef0 7a66 	vmov.f32	s15, s13
}
 800785e:	eeb0 0a67 	vmov.f32	s0, s15
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	43800000 	.word	0x43800000

08007870 <stts751_temp_data_rate_set>:
  * @param  val      change the sensor data rate
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx, stts751_odr_t val)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 800787c:	23aa      	movs	r3, #170	; 0xaa
 800787e:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8007880:	f107 020c 	add.w	r2, r7, #12
 8007884:	2301      	movs	r3, #1
 8007886:	2104      	movs	r1, #4
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7ff ffa7 	bl	80077dc <stts751_read_reg>
 800788e:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&conversion_rate, 1);
  if (ret == 0) {
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10f      	bne.n	80078b6 <stts751_temp_data_rate_set+0x46>
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8007896:	78fb      	ldrb	r3, [r7, #3]
 8007898:	f003 030f 	and.w	r3, r3, #15
 800789c:	b2da      	uxtb	r2, r3
 800789e:	7b3b      	ldrb	r3, [r7, #12]
 80078a0:	f362 0303 	bfi	r3, r2, #0, #4
 80078a4:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 80078a6:	f107 020c 	add.w	r2, r7, #12
 80078aa:	2301      	movs	r3, #1
 80078ac:	2104      	movs	r1, #4
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff ffac 	bl	800780c <stts751_write_reg>
 80078b4:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&conversion_rate, 1);
  }
  if (ret == 0) {
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d107      	bne.n	80078cc <stts751_temp_data_rate_set+0x5c>
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 80078bc:	f107 0210 	add.w	r2, r7, #16
 80078c0:	2301      	movs	r3, #1
 80078c2:	2103      	movs	r1, #3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff ff89 	bl	80077dc <stts751_read_reg>
 80078ca:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&configuration, 1);
  }
  if (ret == 0) {
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d111      	bne.n	80078f6 <stts751_temp_data_rate_set+0x86>
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 80078d2:	78fb      	ldrb	r3, [r7, #3]
 80078d4:	09db      	lsrs	r3, r3, #7
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	7c3b      	ldrb	r3, [r7, #16]
 80078e0:	f362 1386 	bfi	r3, r2, #6, #1
 80078e4:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 80078e6:	f107 0210 	add.w	r2, r7, #16
 80078ea:	2301      	movs	r3, #1
 80078ec:	2103      	movs	r1, #3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7ff ff8c 	bl	800780c <stts751_write_reg>
 80078f4:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&configuration, 1);
  }
  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT)) {
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10a      	bne.n	8007912 <stts751_temp_data_rate_set+0xa2>
 80078fc:	78fb      	ldrb	r3, [r7, #3]
 80078fe:	2b90      	cmp	r3, #144	; 0x90
 8007900:	d107      	bne.n	8007912 <stts751_temp_data_rate_set+0xa2>
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8007902:	f107 020b 	add.w	r2, r7, #11
 8007906:	2301      	movs	r3, #1
 8007908:	210f      	movs	r1, #15
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff ff7e 	bl	800780c <stts751_write_reg>
 8007910:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8007912:	697b      	ldr	r3, [r7, #20]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3718      	adds	r7, #24
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <stts751_temp_data_rate_get>:
  * @param  val      Get the sensor data rate
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx, stts751_odr_t *val)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8007926:	f107 0210 	add.w	r2, r7, #16
 800792a:	2301      	movs	r3, #1
 800792c:	2104      	movs	r1, #4
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7ff ff54 	bl	80077dc <stts751_read_reg>
 8007934:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&conversion_rate, 1);
  if (ret == 0) {
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d107      	bne.n	800794c <stts751_temp_data_rate_get+0x30>
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800793c:	f107 020c 	add.w	r2, r7, #12
 8007940:	2301      	movs	r3, #1
 8007942:	2103      	movs	r1, #3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff ff49 	bl	80077dc <stts751_read_reg>
 800794a:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&configuration, 1);
  }
  switch ( (configuration.stop << 7) + conversion_rate.conv) {
 800794c:	7b3b      	ldrb	r3, [r7, #12]
 800794e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007952:	b2db      	uxtb	r3, r3
 8007954:	01db      	lsls	r3, r3, #7
 8007956:	7c3a      	ldrb	r2, [r7, #16]
 8007958:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800795c:	b2d2      	uxtb	r2, r2
 800795e:	4413      	add	r3, r2
 8007960:	2b90      	cmp	r3, #144	; 0x90
 8007962:	d025      	beq.n	80079b0 <stts751_temp_data_rate_get+0x94>
 8007964:	2b90      	cmp	r3, #144	; 0x90
 8007966:	dc4f      	bgt.n	8007a08 <stts751_temp_data_rate_get+0xec>
 8007968:	2b09      	cmp	r3, #9
 800796a:	dc1b      	bgt.n	80079a4 <stts751_temp_data_rate_get+0x88>
 800796c:	2b00      	cmp	r3, #0
 800796e:	db4b      	blt.n	8007a08 <stts751_temp_data_rate_get+0xec>
 8007970:	2b09      	cmp	r3, #9
 8007972:	d849      	bhi.n	8007a08 <stts751_temp_data_rate_get+0xec>
 8007974:	a201      	add	r2, pc, #4	; (adr r2, 800797c <stts751_temp_data_rate_get+0x60>)
 8007976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797a:	bf00      	nop
 800797c:	080079b9 	.word	0x080079b9
 8007980:	080079c1 	.word	0x080079c1
 8007984:	080079c9 	.word	0x080079c9
 8007988:	080079d1 	.word	0x080079d1
 800798c:	080079d9 	.word	0x080079d9
 8007990:	080079e1 	.word	0x080079e1
 8007994:	080079e9 	.word	0x080079e9
 8007998:	080079f1 	.word	0x080079f1
 800799c:	080079f9 	.word	0x080079f9
 80079a0:	08007a01 	.word	0x08007a01
 80079a4:	2b80      	cmp	r3, #128	; 0x80
 80079a6:	d12f      	bne.n	8007a08 <stts751_temp_data_rate_get+0xec>
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2280      	movs	r2, #128	; 0x80
 80079ac:	701a      	strb	r2, [r3, #0]
      break;
 80079ae:	e02f      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2290      	movs	r2, #144	; 0x90
 80079b4:	701a      	strb	r2, [r3, #0]
      break;
 80079b6:	e02b      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2200      	movs	r2, #0
 80079bc:	701a      	strb	r2, [r3, #0]
      break;
 80079be:	e027      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2201      	movs	r2, #1
 80079c4:	701a      	strb	r2, [r3, #0]
      break;
 80079c6:	e023      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
     case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2202      	movs	r2, #2
 80079cc:	701a      	strb	r2, [r3, #0]
      break;
 80079ce:	e01f      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2203      	movs	r2, #3
 80079d4:	701a      	strb	r2, [r3, #0]
      break;
 80079d6:	e01b      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2204      	movs	r2, #4
 80079dc:	701a      	strb	r2, [r3, #0]
      break;
 80079de:	e017      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2205      	movs	r2, #5
 80079e4:	701a      	strb	r2, [r3, #0]
      break;
 80079e6:	e013      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
     case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2206      	movs	r2, #6
 80079ec:	701a      	strb	r2, [r3, #0]
      break;
 80079ee:	e00f      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2207      	movs	r2, #7
 80079f4:	701a      	strb	r2, [r3, #0]
      break;
 80079f6:	e00b      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2208      	movs	r2, #8
 80079fc:	701a      	strb	r2, [r3, #0]
      break;
 80079fe:	e007      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2209      	movs	r2, #9
 8007a04:	701a      	strb	r2, [r3, #0]
      break;
 8007a06:	e003      	b.n	8007a10 <stts751_temp_data_rate_get+0xf4>
    default:
      *val = STTS751_TEMP_ODR_OFF;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2280      	movs	r2, #128	; 0x80
 8007a0c:	701a      	strb	r2, [r3, #0]
      break;
 8007a0e:	bf00      	nop
  }
  return ret;
 8007a10:	697b      	ldr	r3, [r7, #20]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop

08007a1c <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,(uint8_t*) &reg, 1);
 8007a28:	f107 0208 	add.w	r2, r7, #8
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	2103      	movs	r1, #3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff fed3 	bl	80077dc <stts751_read_reg>
 8007a36:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10f      	bne.n	8007a5e <stts751_resolution_set+0x42>
    reg.tres = (uint8_t) val;
 8007a3e:	78fb      	ldrb	r3, [r7, #3]
 8007a40:	f003 0303 	and.w	r3, r3, #3
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	7a3b      	ldrb	r3, [r7, #8]
 8007a48:	f362 0383 	bfi	r3, r2, #2, #2
 8007a4c:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,(uint8_t*) &reg, 1);
 8007a4e:	f107 0208 	add.w	r2, r7, #8
 8007a52:	2301      	movs	r3, #1
 8007a54:	2103      	movs	r1, #3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7ff fed8 	bl	800780c <stts751_write_reg>
 8007a5c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,(uint8_t*) &reg, 1);
 8007a72:	f107 0208 	add.w	r2, r7, #8
 8007a76:	2301      	movs	r3, #1
 8007a78:	2103      	movs	r1, #3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7ff feae 	bl	80077dc <stts751_read_reg>
 8007a80:	60f8      	str	r0, [r7, #12]

  switch (reg.tres) {
 8007a82:	7a3b      	ldrb	r3, [r7, #8]
 8007a84:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d81a      	bhi.n	8007ac4 <stts751_resolution_get+0x5c>
 8007a8e:	a201      	add	r2, pc, #4	; (adr r2, 8007a94 <stts751_resolution_get+0x2c>)
 8007a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a94:	08007aad 	.word	0x08007aad
 8007a98:	08007ab5 	.word	0x08007ab5
 8007a9c:	08007aa5 	.word	0x08007aa5
 8007aa0:	08007abd 	.word	0x08007abd
    case STTS751_9bit:
      *val = STTS751_9bit;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	701a      	strb	r2, [r3, #0]
      break;
 8007aaa:	e00f      	b.n	8007acc <stts751_resolution_get+0x64>
    case STTS751_10bit:
      *val = STTS751_10bit;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	701a      	strb	r2, [r3, #0]
      break;
 8007ab2:	e00b      	b.n	8007acc <stts751_resolution_get+0x64>
    case STTS751_11bit:
      *val = STTS751_11bit;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	701a      	strb	r2, [r3, #0]
      break;
 8007aba:	e007      	b.n	8007acc <stts751_resolution_get+0x64>
    case STTS751_12bit:
      *val = STTS751_12bit;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	2203      	movs	r2, #3
 8007ac0:	701a      	strb	r2, [r3, #0]
      break;
 8007ac2:	e003      	b.n	8007acc <stts751_resolution_get+0x64>
    default:
      *val = STTS751_9bit;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	701a      	strb	r2, [r3, #0]
      break;
 8007aca:	bf00      	nop
  }
  return ret;
 8007acc:	68fb      	ldr	r3, [r7, #12]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop

08007ad8 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint16_t temperature;
  uint8_t temperature_low;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8007ae2:	f107 020a 	add.w	r2, r7, #10
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	2100      	movs	r1, #0
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff fe76 	bl	80077dc <stts751_read_reg>
 8007af0:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&temperature, 1);
  if (ret == 0) {
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d113      	bne.n	8007b20 <stts751_temperature_raw_get+0x48>
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8007af8:	f107 0209 	add.w	r2, r7, #9
 8007afc:	2301      	movs	r3, #1
 8007afe:	2102      	movs	r1, #2
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7ff fe6b 	bl	80077dc <stts751_read_reg>
 8007b06:	60f8      	str	r0, [r7, #12]
                           &temperature_low, 1);

    temperature  = (temperature << 8) + temperature_low;
 8007b08:	897b      	ldrh	r3, [r7, #10]
 8007b0a:	021b      	lsls	r3, r3, #8
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	7a7b      	ldrb	r3, [r7, #9]
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	4413      	add	r3, r2
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	817b      	strh	r3, [r7, #10]
    *buff = (int16_t)temperature;
 8007b18:	897b      	ldrh	r3, [r7, #10]
 8007b1a:	b21a      	sxth	r2, r3
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 8007b20:	68fb      	ldr	r3, [r7, #12]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,(uint8_t*)&reg, 1);
 8007b36:	f107 0208 	add.w	r2, r7, #8
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	2103      	movs	r1, #3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff fe4c 	bl	80077dc <stts751_read_reg>
 8007b44:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10f      	bne.n	8007b6c <stts751_pin_event_route_set+0x42>
    reg.mask1 = val;
 8007b4c:	78fb      	ldrb	r3, [r7, #3]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	7a3b      	ldrb	r3, [r7, #8]
 8007b56:	f362 13c7 	bfi	r3, r2, #7, #1
 8007b5a:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t*)&reg, 1);
 8007b5c:	f107 0208 	add.w	r2, r7, #8
 8007b60:	2301      	movs	r3, #1
 8007b62:	2103      	movs	r1, #3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff fe51 	bl	800780c <stts751_write_reg>
 8007b6a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	2301      	movs	r3, #1
 8007b84:	21fd      	movs	r1, #253	; 0xfd
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7ff fe28 	bl	80077dc <stts751_read_reg>
 8007b8c:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&buff->product_id, 1);
  if (ret == 0){
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d107      	bne.n	8007ba4 <stts751_device_id_get+0x2e>
  ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	1c5a      	adds	r2, r3, #1
 8007b98:	2301      	movs	r3, #1
 8007b9a:	21fe      	movs	r1, #254	; 0xfe
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7ff fe1d 	bl	80077dc <stts751_read_reg>
 8007ba2:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&buff->manufacturer_id, 1);
  }
  if (ret == 0){
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d107      	bne.n	8007bba <stts751_device_id_get+0x44>
  ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	1c9a      	adds	r2, r3, #2
 8007bae:	2301      	movs	r3, #1
 8007bb0:	21ff      	movs	r1, #255	; 0xff
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff fe12 	bl	80077dc <stts751_read_reg>
 8007bb8:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&buff->revision_id, 1);
  }
  return ret;
 8007bba:	68fb      	ldr	r3, [r7, #12]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <IKS01A3_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 *         - ENV_TEMPERATURE for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08a      	sub	sp, #40	; 0x28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	61bb      	str	r3, [r7, #24]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d06e      	beq.n	8007cbe <IKS01A3_ENV_SENSOR_Init+0xfa>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	f200 809d 	bhi.w	8007d22 <IKS01A3_ENV_SENSOR_Init+0x15e>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <IKS01A3_ENV_SENSOR_Init+0x32>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d032      	beq.n	8007c5a <IKS01A3_ENV_SENSOR_Init+0x96>
 8007bf4:	e095      	b.n	8007d22 <IKS01A3_ENV_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8007bf6:	6838      	ldr	r0, [r7, #0]
 8007bf8:	f000 f90a 	bl	8007e10 <HTS221_0_Probe>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8007c02:	f04f 33ff 	mov.w	r3, #4294967295
 8007c06:	e0cc      	b.n	8007da2 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007c08:	4a68      	ldr	r2, [pc, #416]	; (8007dac <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	4967      	ldr	r1, [pc, #412]	; (8007db0 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c1a:	f107 0108 	add.w	r1, r7, #8
 8007c1e:	4610      	mov	r0, r2
 8007c20:	4798      	blx	r3
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007c28:	f06f 0306 	mvn.w	r3, #6
 8007c2c:	e0b9      	b.n	8007da2 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8007c2e:	7a3b      	ldrb	r3, [r7, #8]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d103      	bne.n	8007c3c <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	f043 0301 	orr.w	r3, r3, #1
 8007c3a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007c3c:	7abb      	ldrb	r3, [r7, #10]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d103      	bne.n	8007c4a <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	f043 0304 	orr.w	r3, r3, #4
 8007c48:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007c4a:	7a7b      	ldrb	r3, [r7, #9]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d16c      	bne.n	8007d2a <IKS01A3_ENV_SENSOR_Init+0x166>
      {
        component_functions |= ENV_PRESSURE;
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	f043 0302 	orr.w	r3, r3, #2
 8007c56:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007c58:	e067      	b.n	8007d2a <IKS01A3_ENV_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8007c5a:	6838      	ldr	r0, [r7, #0]
 8007c5c:	f000 f992 	bl	8007f84 <LPS22HH_0_Probe>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <IKS01A3_ENV_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8007c66:	f04f 33ff 	mov.w	r3, #4294967295
 8007c6a:	e09a      	b.n	8007da2 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007c6c:	4a4f      	ldr	r2, [pc, #316]	; (8007dac <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	494e      	ldr	r1, [pc, #312]	; (8007db0 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c7e:	f107 0108 	add.w	r1, r7, #8
 8007c82:	4610      	mov	r0, r2
 8007c84:	4798      	blx	r3
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <IKS01A3_ENV_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007c8c:	f06f 0306 	mvn.w	r3, #6
 8007c90:	e087      	b.n	8007da2 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8007c92:	7a3b      	ldrb	r3, [r7, #8]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d103      	bne.n	8007ca0 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_TEMPERATURE;
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	f043 0301 	orr.w	r3, r3, #1
 8007c9e:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007ca0:	7abb      	ldrb	r3, [r7, #10]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d103      	bne.n	8007cae <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_HUMIDITY;
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	f043 0304 	orr.w	r3, r3, #4
 8007cac:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007cae:	7a7b      	ldrb	r3, [r7, #9]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d13c      	bne.n	8007d2e <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_PRESSURE;
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	f043 0302 	orr.w	r3, r3, #2
 8007cba:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007cbc:	e037      	b.n	8007d2e <IKS01A3_ENV_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8007cbe:	6838      	ldr	r0, [r7, #0]
 8007cc0:	f000 fa1c 	bl	80080fc <STTS751_0_Probe>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <IKS01A3_ENV_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8007cca:	f04f 33ff 	mov.w	r3, #4294967295
 8007cce:	e068      	b.n	8007da2 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007cd0:	4a36      	ldr	r2, [pc, #216]	; (8007dac <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	4935      	ldr	r1, [pc, #212]	; (8007db0 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007ce2:	f107 0108 	add.w	r1, r7, #8
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	4798      	blx	r3
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <IKS01A3_ENV_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007cf0:	f06f 0306 	mvn.w	r3, #6
 8007cf4:	e055      	b.n	8007da2 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8007cf6:	7a3b      	ldrb	r3, [r7, #8]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d103      	bne.n	8007d04 <IKS01A3_ENV_SENSOR_Init+0x140>
      {
        component_functions |= ENV_TEMPERATURE;
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	f043 0301 	orr.w	r3, r3, #1
 8007d02:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007d04:	7abb      	ldrb	r3, [r7, #10]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d103      	bne.n	8007d12 <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        component_functions |= ENV_HUMIDITY;
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	f043 0304 	orr.w	r3, r3, #4
 8007d10:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007d12:	7a7b      	ldrb	r3, [r7, #9]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d10c      	bne.n	8007d32 <IKS01A3_ENV_SENSOR_Init+0x16e>
      {
        component_functions |= ENV_PRESSURE;
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	f043 0302 	orr.w	r3, r3, #2
 8007d1e:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007d20:	e007      	b.n	8007d32 <IKS01A3_ENV_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007d22:	f06f 0301 	mvn.w	r3, #1
 8007d26:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007d28:	e004      	b.n	8007d34 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8007d2a:	bf00      	nop
 8007d2c:	e002      	b.n	8007d34 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8007d2e:	bf00      	nop
 8007d30:	e000      	b.n	8007d34 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8007d32:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <IKS01A3_ENV_SENSOR_Init+0x17a>
  {
    return ret;
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	e031      	b.n	8007da2 <IKS01A3_ENV_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8007d3e:	2300      	movs	r3, #0
 8007d40:	61fb      	str	r3, [r7, #28]
 8007d42:	e02a      	b.n	8007d9a <IKS01A3_ENV_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	4013      	ands	r3, r2
 8007d4a:	6a3a      	ldr	r2, [r7, #32]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d11e      	bne.n	8007d8e <IKS01A3_ENV_SENSOR_Init+0x1ca>
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	4013      	ands	r3, r2
 8007d56:	6a3a      	ldr	r2, [r7, #32]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d118      	bne.n	8007d8e <IKS01A3_ENV_SENSOR_Init+0x1ca>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007d5c:	4a15      	ldr	r2, [pc, #84]	; (8007db4 <IKS01A3_ENV_SENSOR_Init+0x1f0>)
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007d64:	4814      	ldr	r0, [pc, #80]	; (8007db8 <IKS01A3_ENV_SENSOR_Init+0x1f4>)
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	4413      	add	r3, r2
 8007d6e:	440b      	add	r3, r1
 8007d70:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	490e      	ldr	r1, [pc, #56]	; (8007db0 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d7e:	4610      	mov	r0, r2
 8007d80:	4798      	blx	r3
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <IKS01A3_ENV_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8007d88:	f06f 0304 	mvn.w	r3, #4
 8007d8c:	e009      	b.n	8007da2 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	3301      	adds	r3, #1
 8007d98:	61fb      	str	r3, [r7, #28]
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d9d1      	bls.n	8007d44 <IKS01A3_ENV_SENSOR_Init+0x180>
  }

  return ret;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3728      	adds	r7, #40	; 0x28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20002ab0 	.word	0x20002ab0
 8007db0:	2000be6c 	.word	0x2000be6c
 8007db4:	20001380 	.word	0x20001380
 8007db8:	20002a8c 	.word	0x20002a8c

08007dbc <IKS01A3_ENV_SENSOR_GetCapabilities>:
 * @param  Instance Environmental sensor instance
 * @param  Capabilities pointer to Environmental sensor capabilities
 * @retval BSP status
 */
int32_t IKS01A3_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_ENV_SENSOR_Capabilities_t *Capabilities)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d903      	bls.n	8007dd4 <IKS01A3_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007dcc:	f06f 0301 	mvn.w	r3, #1
 8007dd0:	60fb      	str	r3, [r7, #12]
 8007dd2:	e014      	b.n	8007dfe <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8007dd4:	4a0c      	ldr	r2, [pc, #48]	; (8007e08 <IKS01A3_ENV_SENSOR_GetCapabilities+0x4c>)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	490b      	ldr	r1, [pc, #44]	; (8007e0c <IKS01A3_ENV_SENSOR_GetCapabilities+0x50>)
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	4610      	mov	r0, r2
 8007dea:	4798      	blx	r3
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <IKS01A3_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007df2:	f06f 0306 	mvn.w	r3, #6
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	e001      	b.n	8007dfe <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	20002ab0 	.word	0x20002ab0
 8007e0c:	2000be6c 	.word	0x2000be6c

08007e10 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b090      	sub	sp, #64	; 0x40
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t              id;
  int32_t              ret = BSP_ERROR_NONE;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8007e20:	23bf      	movs	r3, #191	; 0xbf
 8007e22:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8007e26:	4b49      	ldr	r3, [pc, #292]	; (8007f4c <HTS221_0_Probe+0x13c>)
 8007e28:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8007e2a:	4b49      	ldr	r3, [pc, #292]	; (8007f50 <HTS221_0_Probe+0x140>)
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8007e2e:	4b49      	ldr	r3, [pc, #292]	; (8007f54 <HTS221_0_Probe+0x144>)
 8007e30:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8007e32:	4b49      	ldr	r3, [pc, #292]	; (8007f58 <HTS221_0_Probe+0x148>)
 8007e34:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8007e36:	4b49      	ldr	r3, [pc, #292]	; (8007f5c <HTS221_0_Probe+0x14c>)
 8007e38:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8007e3a:	f107 0320 	add.w	r3, r7, #32
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4847      	ldr	r0, [pc, #284]	; (8007f60 <HTS221_0_Probe+0x150>)
 8007e42:	f7f9 fe3d 	bl	8001ac0 <HTS221_RegisterBusIO>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007e4c:	f06f 0306 	mvn.w	r3, #6
 8007e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e52:	e076      	b.n	8007f42 <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8007e54:	f107 031f 	add.w	r3, r7, #31
 8007e58:	4619      	mov	r1, r3
 8007e5a:	4841      	ldr	r0, [pc, #260]	; (8007f60 <HTS221_0_Probe+0x150>)
 8007e5c:	f7f9 feb5 	bl	8001bca <HTS221_ReadID>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007e66:	f06f 0306 	mvn.w	r3, #6
 8007e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e6c:	e069      	b.n	8007f42 <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8007e6e:	7ffb      	ldrb	r3, [r7, #31]
 8007e70:	2bbc      	cmp	r3, #188	; 0xbc
 8007e72:	d003      	beq.n	8007e7c <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007e74:	f06f 0306 	mvn.w	r3, #6
 8007e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e7a:	e062      	b.n	8007f42 <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8007e7c:	f107 030c 	add.w	r3, r7, #12
 8007e80:	4619      	mov	r1, r3
 8007e82:	4837      	ldr	r0, [pc, #220]	; (8007f60 <HTS221_0_Probe+0x150>)
 8007e84:	f7f9 feb8 	bl	8001bf8 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007e88:	7b3b      	ldrb	r3, [r7, #12]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	7b7b      	ldrb	r3, [r7, #13]
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007e96:	4313      	orrs	r3, r2
 8007e98:	4a32      	ldr	r2, [pc, #200]	; (8007f64 <HTS221_0_Probe+0x154>)
 8007e9a:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8007e9c:	4b32      	ldr	r3, [pc, #200]	; (8007f68 <HTS221_0_Probe+0x158>)
 8007e9e:	4a30      	ldr	r2, [pc, #192]	; (8007f60 <HTS221_0_Probe+0x150>)
 8007ea0:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8007ea2:	4b32      	ldr	r3, [pc, #200]	; (8007f6c <HTS221_0_Probe+0x15c>)
 8007ea4:	4a32      	ldr	r2, [pc, #200]	; (8007f70 <HTS221_0_Probe+0x160>)
 8007ea6:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d11d      	bne.n	8007eea <HTS221_0_Probe+0xda>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d018      	beq.n	8007eea <HTS221_0_Probe+0xda>
 8007eb8:	7b3b      	ldrb	r3, [r7, #12]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d115      	bne.n	8007eea <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8007ebe:	4b2d      	ldr	r3, [pc, #180]	; (8007f74 <HTS221_0_Probe+0x164>)
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	4a2d      	ldr	r2, [pc, #180]	; (8007f78 <HTS221_0_Probe+0x168>)
 8007ec4:	492d      	ldr	r1, [pc, #180]	; (8007f7c <HTS221_0_Probe+0x16c>)
 8007ec6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8007eca:	4b28      	ldr	r3, [pc, #160]	; (8007f6c <HTS221_0_Probe+0x15c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a25      	ldr	r2, [pc, #148]	; (8007f68 <HTS221_0_Probe+0x158>)
 8007ed2:	6812      	ldr	r2, [r2, #0]
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	4798      	blx	r3
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ede:	f06f 0304 	mvn.w	r3, #4
 8007ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ee4:	e001      	b.n	8007eea <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8007eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d11d      	bne.n	8007f2c <HTS221_0_Probe+0x11c>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f003 0304 	and.w	r3, r3, #4
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d018      	beq.n	8007f2c <HTS221_0_Probe+0x11c>
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d115      	bne.n	8007f2c <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8007f00:	4b1c      	ldr	r3, [pc, #112]	; (8007f74 <HTS221_0_Probe+0x164>)
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	4a1c      	ldr	r2, [pc, #112]	; (8007f78 <HTS221_0_Probe+0x168>)
 8007f06:	491e      	ldr	r1, [pc, #120]	; (8007f80 <HTS221_0_Probe+0x170>)
 8007f08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8007f0c:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <HTS221_0_Probe+0x15c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a15      	ldr	r2, [pc, #84]	; (8007f68 <HTS221_0_Probe+0x158>)
 8007f14:	6812      	ldr	r2, [r2, #0]
 8007f16:	4610      	mov	r0, r2
 8007f18:	4798      	blx	r3
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f20:	f06f 0304 	mvn.w	r3, #4
 8007f24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f26:	e001      	b.n	8007f2c <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8007f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d107      	bne.n	8007f42 <HTS221_0_Probe+0x132>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d002      	beq.n	8007f42 <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f3c:	f06f 0304 	mvn.w	r3, #4
 8007f40:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 8007f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3740      	adds	r7, #64	; 0x40
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	080015f5 	.word	0x080015f5
 8007f50:	08001659 	.word	0x08001659
 8007f54:	0800170d 	.word	0x0800170d
 8007f58:	080016a9 	.word	0x080016a9
 8007f5c:	08001771 	.word	0x08001771
 8007f60:	20002ac8 	.word	0x20002ac8
 8007f64:	20002abc 	.word	0x20002abc
 8007f68:	2000be6c 	.word	0x2000be6c
 8007f6c:	20002ab0 	.word	0x20002ab0
 8007f70:	2000122c 	.word	0x2000122c
 8007f74:	20001380 	.word	0x20001380
 8007f78:	20002a8c 	.word	0x20002a8c
 8007f7c:	20001250 	.word	0x20001250
 8007f80:	2000123c 	.word	0x2000123c

08007f84 <LPS22HH_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b090      	sub	sp, #64	; 0x40
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8007f90:	2300      	movs	r3, #0
 8007f92:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8007f94:	23bb      	movs	r3, #187	; 0xbb
 8007f96:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8007f9a:	4b4a      	ldr	r3, [pc, #296]	; (80080c4 <LPS22HH_0_Probe+0x140>)
 8007f9c:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8007f9e:	4b4a      	ldr	r3, [pc, #296]	; (80080c8 <LPS22HH_0_Probe+0x144>)
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8007fa2:	4b4a      	ldr	r3, [pc, #296]	; (80080cc <LPS22HH_0_Probe+0x148>)
 8007fa4:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8007fa6:	4b4a      	ldr	r3, [pc, #296]	; (80080d0 <LPS22HH_0_Probe+0x14c>)
 8007fa8:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8007faa:	4b4a      	ldr	r3, [pc, #296]	; (80080d4 <LPS22HH_0_Probe+0x150>)
 8007fac:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8007fae:	f107 0320 	add.w	r3, r7, #32
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	4848      	ldr	r0, [pc, #288]	; (80080d8 <LPS22HH_0_Probe+0x154>)
 8007fb6:	f7fc fb5f 	bl	8004678 <LPS22HH_RegisterBusIO>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d003      	beq.n	8007fc8 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007fc0:	f06f 0306 	mvn.w	r3, #6
 8007fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fc6:	e078      	b.n	80080ba <LPS22HH_0_Probe+0x136>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8007fc8:	f107 031f 	add.w	r3, r7, #31
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4842      	ldr	r0, [pc, #264]	; (80080d8 <LPS22HH_0_Probe+0x154>)
 8007fd0:	f7fc fbf7 	bl	80047c2 <LPS22HH_ReadID>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007fda:	f06f 0306 	mvn.w	r3, #6
 8007fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fe0:	e06b      	b.n	80080ba <LPS22HH_0_Probe+0x136>
  }
  else if (id != LPS22HH_ID)
 8007fe2:	7ffb      	ldrb	r3, [r7, #31]
 8007fe4:	2bb3      	cmp	r3, #179	; 0xb3
 8007fe6:	d003      	beq.n	8007ff0 <LPS22HH_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007fe8:	f06f 0306 	mvn.w	r3, #6
 8007fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fee:	e064      	b.n	80080ba <LPS22HH_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8007ff0:	f107 030c 	add.w	r3, r7, #12
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	4838      	ldr	r0, [pc, #224]	; (80080d8 <LPS22HH_0_Probe+0x154>)
 8007ff8:	f7fc fbfa 	bl	80047f0 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007ffc:	7b3b      	ldrb	r3, [r7, #12]
 8007ffe:	461a      	mov	r2, r3
 8008000:	7b7b      	ldrb	r3, [r7, #13]
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8008006:	7bbb      	ldrb	r3, [r7, #14]
 8008008:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800800a:	4313      	orrs	r3, r2
 800800c:	4a33      	ldr	r2, [pc, #204]	; (80080dc <LPS22HH_0_Probe+0x158>)
 800800e:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8008010:	4b33      	ldr	r3, [pc, #204]	; (80080e0 <LPS22HH_0_Probe+0x15c>)
 8008012:	4a31      	ldr	r2, [pc, #196]	; (80080d8 <LPS22HH_0_Probe+0x154>)
 8008014:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8008016:	4b33      	ldr	r3, [pc, #204]	; (80080e4 <LPS22HH_0_Probe+0x160>)
 8008018:	4a33      	ldr	r2, [pc, #204]	; (80080e8 <LPS22HH_0_Probe+0x164>)
 800801a:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800801c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800801e:	2b00      	cmp	r3, #0
 8008020:	d11e      	bne.n	8008060 <LPS22HH_0_Probe+0xdc>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	2b00      	cmp	r3, #0
 800802a:	d019      	beq.n	8008060 <LPS22HH_0_Probe+0xdc>
 800802c:	7b3b      	ldrb	r3, [r7, #12]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d116      	bne.n	8008060 <LPS22HH_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8008032:	4b2e      	ldr	r3, [pc, #184]	; (80080ec <LPS22HH_0_Probe+0x168>)
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	4a2e      	ldr	r2, [pc, #184]	; (80080f0 <LPS22HH_0_Probe+0x16c>)
 8008038:	3303      	adds	r3, #3
 800803a:	492e      	ldr	r1, [pc, #184]	; (80080f4 <LPS22HH_0_Probe+0x170>)
 800803c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008040:	4b28      	ldr	r3, [pc, #160]	; (80080e4 <LPS22HH_0_Probe+0x160>)
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a26      	ldr	r2, [pc, #152]	; (80080e0 <LPS22HH_0_Probe+0x15c>)
 8008048:	6852      	ldr	r2, [r2, #4]
 800804a:	4610      	mov	r0, r2
 800804c:	4798      	blx	r3
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d003      	beq.n	800805c <LPS22HH_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008054:	f06f 0304 	mvn.w	r3, #4
 8008058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800805a:	e001      	b.n	8008060 <LPS22HH_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800805c:	2300      	movs	r3, #0
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8008060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d11e      	bne.n	80080a4 <LPS22HH_0_Probe+0x120>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f003 0302 	and.w	r3, r3, #2
 800806c:	2b00      	cmp	r3, #0
 800806e:	d019      	beq.n	80080a4 <LPS22HH_0_Probe+0x120>
 8008070:	7b7b      	ldrb	r3, [r7, #13]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d116      	bne.n	80080a4 <LPS22HH_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8008076:	4b1d      	ldr	r3, [pc, #116]	; (80080ec <LPS22HH_0_Probe+0x168>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	4a1d      	ldr	r2, [pc, #116]	; (80080f0 <LPS22HH_0_Probe+0x16c>)
 800807c:	3303      	adds	r3, #3
 800807e:	491e      	ldr	r1, [pc, #120]	; (80080f8 <LPS22HH_0_Probe+0x174>)
 8008080:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008084:	4b17      	ldr	r3, [pc, #92]	; (80080e4 <LPS22HH_0_Probe+0x160>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a15      	ldr	r2, [pc, #84]	; (80080e0 <LPS22HH_0_Probe+0x15c>)
 800808c:	6852      	ldr	r2, [r2, #4]
 800808e:	4610      	mov	r0, r2
 8008090:	4798      	blx	r3
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d003      	beq.n	80080a0 <LPS22HH_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008098:	f06f 0304 	mvn.w	r3, #4
 800809c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800809e:	e001      	b.n	80080a4 <LPS22HH_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80080a0:	2300      	movs	r3, #0
 80080a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80080a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d107      	bne.n	80080ba <LPS22HH_0_Probe+0x136>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f003 0304 	and.w	r3, r3, #4
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d002      	beq.n	80080ba <LPS22HH_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80080b4:	f06f 0304 	mvn.w	r3, #4
 80080b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 80080ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3740      	adds	r7, #64	; 0x40
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	080015f5 	.word	0x080015f5
 80080c8:	08001659 	.word	0x08001659
 80080cc:	0800170d 	.word	0x0800170d
 80080d0:	080016a9 	.word	0x080016a9
 80080d4:	08001771 	.word	0x08001771
 80080d8:	20002af4 	.word	0x20002af4
 80080dc:	20002abc 	.word	0x20002abc
 80080e0:	2000be6c 	.word	0x2000be6c
 80080e4:	20002ab0 	.word	0x20002ab0
 80080e8:	200012cc 	.word	0x200012cc
 80080ec:	20001380 	.word	0x20001380
 80080f0:	20002a8c 	.word	0x20002a8c
 80080f4:	200012f0 	.word	0x200012f0
 80080f8:	200012dc 	.word	0x200012dc

080080fc <STTS751_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE
 * @retval BSP status
 */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b090      	sub	sp, #64	; 0x40
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008104:	2300      	movs	r3, #0
 8008106:	63fb      	str	r3, [r7, #60]	; 0x3c
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8008108:	2300      	movs	r3, #0
 800810a:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 800810c:	2395      	movs	r3, #149	; 0x95
 800810e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008112:	4b3f      	ldr	r3, [pc, #252]	; (8008210 <STTS751_0_Probe+0x114>)
 8008114:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008116:	4b3f      	ldr	r3, [pc, #252]	; (8008214 <STTS751_0_Probe+0x118>)
 8008118:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800811a:	4b3f      	ldr	r3, [pc, #252]	; (8008218 <STTS751_0_Probe+0x11c>)
 800811c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800811e:	4b3f      	ldr	r3, [pc, #252]	; (800821c <STTS751_0_Probe+0x120>)
 8008120:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008122:	4b3f      	ldr	r3, [pc, #252]	; (8008220 <STTS751_0_Probe+0x124>)
 8008124:	63bb      	str	r3, [r7, #56]	; 0x38

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8008126:	f107 0320 	add.w	r3, r7, #32
 800812a:	4619      	mov	r1, r3
 800812c:	483d      	ldr	r0, [pc, #244]	; (8008224 <STTS751_0_Probe+0x128>)
 800812e:	f7ff f861 	bl	80071f4 <STTS751_RegisterBusIO>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d003      	beq.n	8008140 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008138:	f06f 0306 	mvn.w	r3, #6
 800813c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800813e:	e061      	b.n	8008204 <STTS751_0_Probe+0x108>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8008140:	f107 031f 	add.w	r3, r7, #31
 8008144:	4619      	mov	r1, r3
 8008146:	4837      	ldr	r0, [pc, #220]	; (8008224 <STTS751_0_Probe+0x128>)
 8008148:	f7ff f8ef 	bl	800732a <STTS751_ReadID>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008152:	f06f 0306 	mvn.w	r3, #6
 8008156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008158:	e054      	b.n	8008204 <STTS751_0_Probe+0x108>
  }
  else if (id != STTS751_ID_MAN)
 800815a:	7ffb      	ldrb	r3, [r7, #31]
 800815c:	2b53      	cmp	r3, #83	; 0x53
 800815e:	d003      	beq.n	8008168 <STTS751_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008160:	f06f 0306 	mvn.w	r3, #6
 8008164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008166:	e04d      	b.n	8008204 <STTS751_0_Probe+0x108>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8008168:	f107 030c 	add.w	r3, r7, #12
 800816c:	4619      	mov	r1, r3
 800816e:	482d      	ldr	r0, [pc, #180]	; (8008224 <STTS751_0_Probe+0x128>)
 8008170:	f7ff f8f6 	bl	8007360 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008174:	7b3b      	ldrb	r3, [r7, #12]
 8008176:	461a      	mov	r2, r3
 8008178:	7b7b      	ldrb	r3, [r7, #13]
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008182:	4313      	orrs	r3, r2
 8008184:	4a28      	ldr	r2, [pc, #160]	; (8008228 <STTS751_0_Probe+0x12c>)
 8008186:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8008188:	4b28      	ldr	r3, [pc, #160]	; (800822c <STTS751_0_Probe+0x130>)
 800818a:	4a26      	ldr	r2, [pc, #152]	; (8008224 <STTS751_0_Probe+0x128>)
 800818c:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 800818e:	4b28      	ldr	r3, [pc, #160]	; (8008230 <STTS751_0_Probe+0x134>)
 8008190:	4a28      	ldr	r2, [pc, #160]	; (8008234 <STTS751_0_Probe+0x138>)
 8008192:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d11e      	bne.n	80081d8 <STTS751_0_Probe+0xdc>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d019      	beq.n	80081d8 <STTS751_0_Probe+0xdc>
 80081a4:	7b3b      	ldrb	r3, [r7, #12]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d116      	bne.n	80081d8 <STTS751_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 80081aa:	4b23      	ldr	r3, [pc, #140]	; (8008238 <STTS751_0_Probe+0x13c>)
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	4a23      	ldr	r2, [pc, #140]	; (800823c <STTS751_0_Probe+0x140>)
 80081b0:	3306      	adds	r3, #6
 80081b2:	4923      	ldr	r1, [pc, #140]	; (8008240 <STTS751_0_Probe+0x144>)
 80081b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 80081b8:	4b1d      	ldr	r3, [pc, #116]	; (8008230 <STTS751_0_Probe+0x134>)
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a1b      	ldr	r2, [pc, #108]	; (800822c <STTS751_0_Probe+0x130>)
 80081c0:	6892      	ldr	r2, [r2, #8]
 80081c2:	4610      	mov	r0, r2
 80081c4:	4798      	blx	r3
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <STTS751_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80081cc:	f06f 0304 	mvn.w	r3, #4
 80081d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081d2:	e001      	b.n	80081d8 <STTS751_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80081d4:	2300      	movs	r3, #0
 80081d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80081d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d107      	bne.n	80081ee <STTS751_0_Probe+0xf2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f003 0304 	and.w	r3, r3, #4
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <STTS751_0_Probe+0xf2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80081e8:	f06f 0304 	mvn.w	r3, #4
 80081ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80081ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d107      	bne.n	8008204 <STTS751_0_Probe+0x108>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f003 0302 	and.w	r3, r3, #2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <STTS751_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80081fe:	f06f 0304 	mvn.w	r3, #4
 8008202:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8008204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008206:	4618      	mov	r0, r3
 8008208:	3740      	adds	r7, #64	; 0x40
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	080015f5 	.word	0x080015f5
 8008214:	08001659 	.word	0x08001659
 8008218:	0800170d 	.word	0x0800170d
 800821c:	080016a9 	.word	0x080016a9
 8008220:	08001771 	.word	0x08001771
 8008224:	20002b20 	.word	0x20002b20
 8008228:	20002abc 	.word	0x20002abc
 800822c:	2000be6c 	.word	0x2000be6c
 8008230:	20002ab0 	.word	0x20002ab0
 8008234:	2000135c 	.word	0x2000135c
 8008238:	20001380 	.word	0x20001380
 800823c:	20002a8c 	.word	0x20002a8c
 8008240:	2000136c 	.word	0x2000136c

08008244 <IKS01A3_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08e      	sub	sp, #56	; 0x38
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800824e:	2300      	movs	r3, #0
 8008250:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8008252:	2301      	movs	r3, #1
 8008254:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8008256:	2300      	movs	r3, #0
 8008258:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b02      	cmp	r3, #2
 800825e:	d06e      	beq.n	800833e <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b02      	cmp	r3, #2
 8008264:	f200 809d 	bhi.w	80083a2 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <IKS01A3_MOTION_SENSOR_Init+0x32>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d032      	beq.n	80082da <IKS01A3_MOTION_SENSOR_Init+0x96>
 8008274:	e095      	b.n	80083a2 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8008276:	6838      	ldr	r0, [r7, #0]
 8008278:	f000 f90a 	bl	8008490 <LSM6DSO_0_Probe>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d002      	beq.n	8008288 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8008282:	f04f 33ff 	mov.w	r3, #4294967295
 8008286:	e0cc      	b.n	8008422 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008288:	4a68      	ldr	r2, [pc, #416]	; (800842c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	4967      	ldr	r1, [pc, #412]	; (8008430 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800829a:	f107 010c 	add.w	r1, r7, #12
 800829e:	4610      	mov	r0, r2
 80082a0:	4798      	blx	r3
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80082a8:	f06f 0306 	mvn.w	r3, #6
 80082ac:	e0b9      	b.n	8008422 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80082ae:	7b3b      	ldrb	r3, [r7, #12]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d103      	bne.n	80082bc <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	f043 0302 	orr.w	r3, r3, #2
 80082ba:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80082bc:	7b7b      	ldrb	r3, [r7, #13]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d103      	bne.n	80082ca <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80082c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c4:	f043 0301 	orr.w	r3, r3, #1
 80082c8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d16c      	bne.n	80083aa <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	f043 0304 	orr.w	r3, r3, #4
 80082d6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80082d8:	e067      	b.n	80083aa <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 80082da:	6838      	ldr	r0, [r7, #0]
 80082dc:	f000 f994 	bl	8008608 <LIS2DW12_0_Probe>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d002      	beq.n	80082ec <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80082e6:	f04f 33ff 	mov.w	r3, #4294967295
 80082ea:	e09a      	b.n	8008422 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80082ec:	4a4f      	ldr	r2, [pc, #316]	; (800842c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	494e      	ldr	r1, [pc, #312]	; (8008430 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80082fe:	f107 010c 	add.w	r1, r7, #12
 8008302:	4610      	mov	r0, r2
 8008304:	4798      	blx	r3
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800830c:	f06f 0306 	mvn.w	r3, #6
 8008310:	e087      	b.n	8008422 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008312:	7b3b      	ldrb	r3, [r7, #12]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d103      	bne.n	8008320 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8008318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831a:	f043 0302 	orr.w	r3, r3, #2
 800831e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008320:	7b7b      	ldrb	r3, [r7, #13]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d103      	bne.n	800832e <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	f043 0301 	orr.w	r3, r3, #1
 800832c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800832e:	7bbb      	ldrb	r3, [r7, #14]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d13c      	bne.n	80083ae <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	f043 0304 	orr.w	r3, r3, #4
 800833a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800833c:	e037      	b.n	80083ae <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800833e:	6838      	ldr	r0, [r7, #0]
 8008340:	f000 fa06 	bl	8008750 <LIS2MDL_0_Probe>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800834a:	f04f 33ff 	mov.w	r3, #4294967295
 800834e:	e068      	b.n	8008422 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008350:	4a36      	ldr	r2, [pc, #216]	; (800842c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	4935      	ldr	r1, [pc, #212]	; (8008430 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008362:	f107 010c 	add.w	r1, r7, #12
 8008366:	4610      	mov	r0, r2
 8008368:	4798      	blx	r3
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d002      	beq.n	8008376 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008370:	f06f 0306 	mvn.w	r3, #6
 8008374:	e055      	b.n	8008422 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008376:	7b3b      	ldrb	r3, [r7, #12]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d103      	bne.n	8008384 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837e:	f043 0302 	orr.w	r3, r3, #2
 8008382:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008384:	7b7b      	ldrb	r3, [r7, #13]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d103      	bne.n	8008392 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800838a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838c:	f043 0301 	orr.w	r3, r3, #1
 8008390:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d10c      	bne.n	80083b2 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	f043 0304 	orr.w	r3, r3, #4
 800839e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80083a0:	e007      	b.n	80083b2 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80083a2:	f06f 0301 	mvn.w	r3, #1
 80083a6:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80083a8:	e004      	b.n	80083b4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80083aa:	bf00      	nop
 80083ac:	e002      	b.n	80083b4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80083ae:	bf00      	nop
 80083b0:	e000      	b.n	80083b4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80083b2:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80083b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80083ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083bc:	e031      	b.n	8008422 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80083be:	2300      	movs	r3, #0
 80083c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083c2:	e02a      	b.n	800841a <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c8:	4013      	ands	r3, r2
 80083ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d11e      	bne.n	800840e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 80083d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	4013      	ands	r3, r2
 80083d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083d8:	429a      	cmp	r2, r3
 80083da:	d118      	bne.n	800840e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80083dc:	4a15      	ldr	r2, [pc, #84]	; (8008434 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80083e4:	4814      	ldr	r0, [pc, #80]	; (8008438 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	4613      	mov	r3, r2
 80083ea:	005b      	lsls	r3, r3, #1
 80083ec:	4413      	add	r3, r2
 80083ee:	440b      	add	r3, r1
 80083f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	490e      	ldr	r1, [pc, #56]	; (8008430 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80083fe:	4610      	mov	r0, r2
 8008400:	4798      	blx	r3
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d002      	beq.n	800840e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8008408:	f06f 0304 	mvn.w	r3, #4
 800840c:	e009      	b.n	8008422 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8008414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008416:	3301      	adds	r3, #1
 8008418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841c:	2b02      	cmp	r3, #2
 800841e:	d9d1      	bls.n	80083c4 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8008420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008422:	4618      	mov	r0, r3
 8008424:	3738      	adds	r7, #56	; 0x38
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20002b74 	.word	0x20002b74
 8008430:	2000be78 	.word	0x2000be78
 8008434:	20001394 	.word	0x20001394
 8008438:	20002b50 	.word	0x20002b50

0800843c <IKS01A3_MOTION_SENSOR_GetCapabilities>:
 * @param  Instance Motion sensor instance
 * @param  Capabilities pointer to motion sensor capabilities
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b02      	cmp	r3, #2
 800844a:	d903      	bls.n	8008454 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800844c:	f06f 0301 	mvn.w	r3, #1
 8008450:	60fb      	str	r3, [r7, #12]
 8008452:	e014      	b.n	800847e <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8008454:	4a0c      	ldr	r2, [pc, #48]	; (8008488 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x4c>)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	490b      	ldr	r1, [pc, #44]	; (800848c <IKS01A3_MOTION_SENSOR_GetCapabilities+0x50>)
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	4610      	mov	r0, r2
 800846a:	4798      	blx	r3
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <IKS01A3_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008472:	f06f 0306 	mvn.w	r3, #6
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	e001      	b.n	800847e <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800847e:	68fb      	ldr	r3, [r7, #12]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	20002b74 	.word	0x20002b74
 800848c:	2000be78 	.word	0x2000be78

08008490 <LSM6DSO_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b092      	sub	sp, #72	; 0x48
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008498:	2300      	movs	r3, #0
 800849a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800849c:	2300      	movs	r3, #0
 800849e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80084a0:	23d7      	movs	r3, #215	; 0xd7
 80084a2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 80084a6:	4b4a      	ldr	r3, [pc, #296]	; (80085d0 <LSM6DSO_0_Probe+0x140>)
 80084a8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80084aa:	4b4a      	ldr	r3, [pc, #296]	; (80085d4 <LSM6DSO_0_Probe+0x144>)
 80084ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80084ae:	4b4a      	ldr	r3, [pc, #296]	; (80085d8 <LSM6DSO_0_Probe+0x148>)
 80084b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80084b2:	4b4a      	ldr	r3, [pc, #296]	; (80085dc <LSM6DSO_0_Probe+0x14c>)
 80084b4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 80084b6:	4b4a      	ldr	r3, [pc, #296]	; (80085e0 <LSM6DSO_0_Probe+0x150>)
 80084b8:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80084ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084be:	4619      	mov	r1, r3
 80084c0:	4848      	ldr	r0, [pc, #288]	; (80085e4 <LSM6DSO_0_Probe+0x154>)
 80084c2:	f7fc ff2f 	bl	8005324 <LSM6DSO_RegisterBusIO>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d003      	beq.n	80084d4 <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80084cc:	f06f 0306 	mvn.w	r3, #6
 80084d0:	647b      	str	r3, [r7, #68]	; 0x44
 80084d2:	e077      	b.n	80085c4 <LSM6DSO_0_Probe+0x134>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80084d4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80084d8:	4619      	mov	r1, r3
 80084da:	4842      	ldr	r0, [pc, #264]	; (80085e4 <LSM6DSO_0_Probe+0x154>)
 80084dc:	f7fd f824 	bl	8005528 <LSM6DSO_ReadID>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80084e6:	f06f 0306 	mvn.w	r3, #6
 80084ea:	647b      	str	r3, [r7, #68]	; 0x44
 80084ec:	e06a      	b.n	80085c4 <LSM6DSO_0_Probe+0x134>
  }
  else if (id != LSM6DSO_ID)
 80084ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084f2:	2b6c      	cmp	r3, #108	; 0x6c
 80084f4:	d003      	beq.n	80084fe <LSM6DSO_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80084f6:	f06f 0306 	mvn.w	r3, #6
 80084fa:	647b      	str	r3, [r7, #68]	; 0x44
 80084fc:	e062      	b.n	80085c4 <LSM6DSO_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 80084fe:	f107 0308 	add.w	r3, r7, #8
 8008502:	4619      	mov	r1, r3
 8008504:	4837      	ldr	r0, [pc, #220]	; (80085e4 <LSM6DSO_0_Probe+0x154>)
 8008506:	f7fd f825 	bl	8005554 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800850a:	7a7b      	ldrb	r3, [r7, #9]
 800850c:	461a      	mov	r2, r3
 800850e:	7a3b      	ldrb	r3, [r7, #8]
 8008510:	005b      	lsls	r3, r3, #1
 8008512:	431a      	orrs	r2, r3
 8008514:	7abb      	ldrb	r3, [r7, #10]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4313      	orrs	r3, r2
 800851a:	4a33      	ldr	r2, [pc, #204]	; (80085e8 <LSM6DSO_0_Probe+0x158>)
 800851c:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800851e:	4b33      	ldr	r3, [pc, #204]	; (80085ec <LSM6DSO_0_Probe+0x15c>)
 8008520:	4a30      	ldr	r2, [pc, #192]	; (80085e4 <LSM6DSO_0_Probe+0x154>)
 8008522:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8008524:	4b32      	ldr	r3, [pc, #200]	; (80085f0 <LSM6DSO_0_Probe+0x160>)
 8008526:	4a33      	ldr	r2, [pc, #204]	; (80085f4 <LSM6DSO_0_Probe+0x164>)
 8008528:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800852a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800852c:	2b00      	cmp	r3, #0
 800852e:	d11d      	bne.n	800856c <LSM6DSO_0_Probe+0xdc>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d018      	beq.n	800856c <LSM6DSO_0_Probe+0xdc>
 800853a:	7a7b      	ldrb	r3, [r7, #9]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d115      	bne.n	800856c <LSM6DSO_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8008540:	4b2d      	ldr	r3, [pc, #180]	; (80085f8 <LSM6DSO_0_Probe+0x168>)
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	4a2d      	ldr	r2, [pc, #180]	; (80085fc <LSM6DSO_0_Probe+0x16c>)
 8008546:	492e      	ldr	r1, [pc, #184]	; (8008600 <LSM6DSO_0_Probe+0x170>)
 8008548:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800854c:	4b28      	ldr	r3, [pc, #160]	; (80085f0 <LSM6DSO_0_Probe+0x160>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a26      	ldr	r2, [pc, #152]	; (80085ec <LSM6DSO_0_Probe+0x15c>)
 8008554:	6812      	ldr	r2, [r2, #0]
 8008556:	4610      	mov	r0, r2
 8008558:	4798      	blx	r3
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d003      	beq.n	8008568 <LSM6DSO_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008560:	f06f 0304 	mvn.w	r3, #4
 8008564:	647b      	str	r3, [r7, #68]	; 0x44
 8008566:	e001      	b.n	800856c <LSM6DSO_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008568:	2300      	movs	r3, #0
 800856a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800856c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800856e:	2b00      	cmp	r3, #0
 8008570:	d11d      	bne.n	80085ae <LSM6DSO_0_Probe+0x11e>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d018      	beq.n	80085ae <LSM6DSO_0_Probe+0x11e>
 800857c:	7a3b      	ldrb	r3, [r7, #8]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d115      	bne.n	80085ae <LSM6DSO_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008582:	4b1d      	ldr	r3, [pc, #116]	; (80085f8 <LSM6DSO_0_Probe+0x168>)
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	4a1d      	ldr	r2, [pc, #116]	; (80085fc <LSM6DSO_0_Probe+0x16c>)
 8008588:	491e      	ldr	r1, [pc, #120]	; (8008604 <LSM6DSO_0_Probe+0x174>)
 800858a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800858e:	4b18      	ldr	r3, [pc, #96]	; (80085f0 <LSM6DSO_0_Probe+0x160>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a15      	ldr	r2, [pc, #84]	; (80085ec <LSM6DSO_0_Probe+0x15c>)
 8008596:	6812      	ldr	r2, [r2, #0]
 8008598:	4610      	mov	r0, r2
 800859a:	4798      	blx	r3
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <LSM6DSO_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80085a2:	f06f 0304 	mvn.w	r3, #4
 80085a6:	647b      	str	r3, [r7, #68]	; 0x44
 80085a8:	e001      	b.n	80085ae <LSM6DSO_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80085aa:	2300      	movs	r3, #0
 80085ac:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80085ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d107      	bne.n	80085c4 <LSM6DSO_0_Probe+0x134>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f003 0304 	and.w	r3, r3, #4
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <LSM6DSO_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80085be:	f06f 0304 	mvn.w	r3, #4
 80085c2:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80085c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3748      	adds	r7, #72	; 0x48
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	080015f5 	.word	0x080015f5
 80085d4:	08001659 	.word	0x08001659
 80085d8:	0800170d 	.word	0x0800170d
 80085dc:	080016a9 	.word	0x080016a9
 80085e0:	08001771 	.word	0x08001771
 80085e4:	20002b8c 	.word	0x20002b8c
 80085e8:	20002b80 	.word	0x20002b80
 80085ec:	2000be78 	.word	0x2000be78
 80085f0:	20002b74 	.word	0x20002b74
 80085f4:	20001304 	.word	0x20001304
 80085f8:	20001394 	.word	0x20001394
 80085fc:	20002b50 	.word	0x20002b50
 8008600:	20001338 	.word	0x20001338
 8008604:	20001314 	.word	0x20001314

08008608 <LIS2DW12_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b092      	sub	sp, #72	; 0x48
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008610:	2300      	movs	r3, #0
 8008612:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8008614:	2300      	movs	r3, #0
 8008616:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8008618:	2333      	movs	r3, #51	; 0x33
 800861a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 800861e:	4b3f      	ldr	r3, [pc, #252]	; (800871c <LIS2DW12_0_Probe+0x114>)
 8008620:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008622:	4b3f      	ldr	r3, [pc, #252]	; (8008720 <LIS2DW12_0_Probe+0x118>)
 8008624:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008626:	4b3f      	ldr	r3, [pc, #252]	; (8008724 <LIS2DW12_0_Probe+0x11c>)
 8008628:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800862a:	4b3f      	ldr	r3, [pc, #252]	; (8008728 <LIS2DW12_0_Probe+0x120>)
 800862c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 800862e:	4b3f      	ldr	r3, [pc, #252]	; (800872c <LIS2DW12_0_Probe+0x124>)
 8008630:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8008632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008636:	4619      	mov	r1, r3
 8008638:	483d      	ldr	r0, [pc, #244]	; (8008730 <LIS2DW12_0_Probe+0x128>)
 800863a:	f7fa f85f 	bl	80026fc <LIS2DW12_RegisterBusIO>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d003      	beq.n	800864c <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008644:	f06f 0306 	mvn.w	r3, #6
 8008648:	647b      	str	r3, [r7, #68]	; 0x44
 800864a:	e062      	b.n	8008712 <LIS2DW12_0_Probe+0x10a>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800864c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008650:	4619      	mov	r1, r3
 8008652:	4837      	ldr	r0, [pc, #220]	; (8008730 <LIS2DW12_0_Probe+0x128>)
 8008654:	f7fa f93c 	bl	80028d0 <LIS2DW12_ReadID>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d003      	beq.n	8008666 <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800865e:	f06f 0306 	mvn.w	r3, #6
 8008662:	647b      	str	r3, [r7, #68]	; 0x44
 8008664:	e055      	b.n	8008712 <LIS2DW12_0_Probe+0x10a>
  }
  else if (id != LIS2DW12_ID)
 8008666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800866a:	2b44      	cmp	r3, #68	; 0x44
 800866c:	d003      	beq.n	8008676 <LIS2DW12_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800866e:	f06f 0306 	mvn.w	r3, #6
 8008672:	647b      	str	r3, [r7, #68]	; 0x44
 8008674:	e04d      	b.n	8008712 <LIS2DW12_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8008676:	f107 0308 	add.w	r3, r7, #8
 800867a:	4619      	mov	r1, r3
 800867c:	482c      	ldr	r0, [pc, #176]	; (8008730 <LIS2DW12_0_Probe+0x128>)
 800867e:	f7fa f93d 	bl	80028fc <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008682:	7a7b      	ldrb	r3, [r7, #9]
 8008684:	461a      	mov	r2, r3
 8008686:	7a3b      	ldrb	r3, [r7, #8]
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	431a      	orrs	r2, r3
 800868c:	7abb      	ldrb	r3, [r7, #10]
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4313      	orrs	r3, r2
 8008692:	4a28      	ldr	r2, [pc, #160]	; (8008734 <LIS2DW12_0_Probe+0x12c>)
 8008694:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8008696:	4b28      	ldr	r3, [pc, #160]	; (8008738 <LIS2DW12_0_Probe+0x130>)
 8008698:	4a25      	ldr	r2, [pc, #148]	; (8008730 <LIS2DW12_0_Probe+0x128>)
 800869a:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800869c:	4b27      	ldr	r3, [pc, #156]	; (800873c <LIS2DW12_0_Probe+0x134>)
 800869e:	4a28      	ldr	r2, [pc, #160]	; (8008740 <LIS2DW12_0_Probe+0x138>)
 80086a0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80086a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d11e      	bne.n	80086e6 <LIS2DW12_0_Probe+0xde>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d019      	beq.n	80086e6 <LIS2DW12_0_Probe+0xde>
 80086b2:	7a3b      	ldrb	r3, [r7, #8]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d116      	bne.n	80086e6 <LIS2DW12_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80086b8:	4b22      	ldr	r3, [pc, #136]	; (8008744 <LIS2DW12_0_Probe+0x13c>)
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	4a22      	ldr	r2, [pc, #136]	; (8008748 <LIS2DW12_0_Probe+0x140>)
 80086be:	3303      	adds	r3, #3
 80086c0:	4922      	ldr	r1, [pc, #136]	; (800874c <LIS2DW12_0_Probe+0x144>)
 80086c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80086c6:	4b1d      	ldr	r3, [pc, #116]	; (800873c <LIS2DW12_0_Probe+0x134>)
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a1a      	ldr	r2, [pc, #104]	; (8008738 <LIS2DW12_0_Probe+0x130>)
 80086ce:	6852      	ldr	r2, [r2, #4]
 80086d0:	4610      	mov	r0, r2
 80086d2:	4798      	blx	r3
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <LIS2DW12_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80086da:	f06f 0304 	mvn.w	r3, #4
 80086de:	647b      	str	r3, [r7, #68]	; 0x44
 80086e0:	e001      	b.n	80086e6 <LIS2DW12_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80086e2:	2300      	movs	r3, #0
 80086e4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80086e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d107      	bne.n	80086fc <LIS2DW12_0_Probe+0xf4>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <LIS2DW12_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80086f6:	f06f 0304 	mvn.w	r3, #4
 80086fa:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80086fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d107      	bne.n	8008712 <LIS2DW12_0_Probe+0x10a>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f003 0304 	and.w	r3, r3, #4
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <LIS2DW12_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800870c:	f06f 0304 	mvn.w	r3, #4
 8008710:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8008712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008714:	4618      	mov	r0, r3
 8008716:	3748      	adds	r7, #72	; 0x48
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	080015f5 	.word	0x080015f5
 8008720:	08001659 	.word	0x08001659
 8008724:	0800170d 	.word	0x0800170d
 8008728:	080016a9 	.word	0x080016a9
 800872c:	08001771 	.word	0x08001771
 8008730:	20002bbc 	.word	0x20002bbc
 8008734:	20002b80 	.word	0x20002b80
 8008738:	2000be78 	.word	0x2000be78
 800873c:	20002b74 	.word	0x20002b74
 8008740:	20001264 	.word	0x20001264
 8008744:	20001394 	.word	0x20001394
 8008748:	20002b50 	.word	0x20002b50
 800874c:	20001274 	.word	0x20001274

08008750 <LIS2MDL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b092      	sub	sp, #72	; 0x48
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8008758:	2300      	movs	r3, #0
 800875a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800875c:	2300      	movs	r3, #0
 800875e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8008760:	233d      	movs	r3, #61	; 0x3d
 8008762:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008766:	4b3f      	ldr	r3, [pc, #252]	; (8008864 <LIS2MDL_0_Probe+0x114>)
 8008768:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800876a:	4b3f      	ldr	r3, [pc, #252]	; (8008868 <LIS2MDL_0_Probe+0x118>)
 800876c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800876e:	4b3f      	ldr	r3, [pc, #252]	; (800886c <LIS2MDL_0_Probe+0x11c>)
 8008770:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008772:	4b3f      	ldr	r3, [pc, #252]	; (8008870 <LIS2MDL_0_Probe+0x120>)
 8008774:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008776:	4b3f      	ldr	r3, [pc, #252]	; (8008874 <LIS2MDL_0_Probe+0x124>)
 8008778:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800877a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800877e:	4619      	mov	r1, r3
 8008780:	483d      	ldr	r0, [pc, #244]	; (8008878 <LIS2MDL_0_Probe+0x128>)
 8008782:	f7fb fb0b 	bl	8003d9c <LIS2MDL_RegisterBusIO>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800878c:	f06f 0306 	mvn.w	r3, #6
 8008790:	647b      	str	r3, [r7, #68]	; 0x44
 8008792:	e062      	b.n	800885a <LIS2MDL_0_Probe+0x10a>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8008794:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008798:	4619      	mov	r1, r3
 800879a:	4837      	ldr	r0, [pc, #220]	; (8008878 <LIS2MDL_0_Probe+0x128>)
 800879c:	f7fb fbc7 	bl	8003f2e <LIS2MDL_ReadID>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80087a6:	f06f 0306 	mvn.w	r3, #6
 80087aa:	647b      	str	r3, [r7, #68]	; 0x44
 80087ac:	e055      	b.n	800885a <LIS2MDL_0_Probe+0x10a>
  }
  else if (id != LIS2MDL_ID)
 80087ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087b2:	2b40      	cmp	r3, #64	; 0x40
 80087b4:	d003      	beq.n	80087be <LIS2MDL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80087b6:	f06f 0306 	mvn.w	r3, #6
 80087ba:	647b      	str	r3, [r7, #68]	; 0x44
 80087bc:	e04d      	b.n	800885a <LIS2MDL_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 80087be:	f107 0308 	add.w	r3, r7, #8
 80087c2:	4619      	mov	r1, r3
 80087c4:	482c      	ldr	r0, [pc, #176]	; (8008878 <LIS2MDL_0_Probe+0x128>)
 80087c6:	f7fb fbc9 	bl	8003f5c <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80087ca:	7a7b      	ldrb	r3, [r7, #9]
 80087cc:	461a      	mov	r2, r3
 80087ce:	7a3b      	ldrb	r3, [r7, #8]
 80087d0:	005b      	lsls	r3, r3, #1
 80087d2:	431a      	orrs	r2, r3
 80087d4:	7abb      	ldrb	r3, [r7, #10]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4313      	orrs	r3, r2
 80087da:	4a28      	ldr	r2, [pc, #160]	; (800887c <LIS2MDL_0_Probe+0x12c>)
 80087dc:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 80087de:	4b28      	ldr	r3, [pc, #160]	; (8008880 <LIS2MDL_0_Probe+0x130>)
 80087e0:	4a25      	ldr	r2, [pc, #148]	; (8008878 <LIS2MDL_0_Probe+0x128>)
 80087e2:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80087e4:	4b27      	ldr	r3, [pc, #156]	; (8008884 <LIS2MDL_0_Probe+0x134>)
 80087e6:	4a28      	ldr	r2, [pc, #160]	; (8008888 <LIS2MDL_0_Probe+0x138>)
 80087e8:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80087ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d11e      	bne.n	800882e <LIS2MDL_0_Probe+0xde>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f003 0304 	and.w	r3, r3, #4
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d019      	beq.n	800882e <LIS2MDL_0_Probe+0xde>
 80087fa:	7abb      	ldrb	r3, [r7, #10]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d116      	bne.n	800882e <LIS2MDL_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008800:	4b22      	ldr	r3, [pc, #136]	; (800888c <LIS2MDL_0_Probe+0x13c>)
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	4a22      	ldr	r2, [pc, #136]	; (8008890 <LIS2MDL_0_Probe+0x140>)
 8008806:	3306      	adds	r3, #6
 8008808:	4922      	ldr	r1, [pc, #136]	; (8008894 <LIS2MDL_0_Probe+0x144>)
 800880a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 800880e:	4b1d      	ldr	r3, [pc, #116]	; (8008884 <LIS2MDL_0_Probe+0x134>)
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a1a      	ldr	r2, [pc, #104]	; (8008880 <LIS2MDL_0_Probe+0x130>)
 8008816:	6892      	ldr	r2, [r2, #8]
 8008818:	4610      	mov	r0, r2
 800881a:	4798      	blx	r3
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <LIS2MDL_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008822:	f06f 0304 	mvn.w	r3, #4
 8008826:	647b      	str	r3, [r7, #68]	; 0x44
 8008828:	e001      	b.n	800882e <LIS2MDL_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800882a:	2300      	movs	r3, #0
 800882c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800882e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008830:	2b00      	cmp	r3, #0
 8008832:	d107      	bne.n	8008844 <LIS2MDL_0_Probe+0xf4>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <LIS2MDL_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800883e:	f06f 0304 	mvn.w	r3, #4
 8008842:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008846:	2b00      	cmp	r3, #0
 8008848:	d107      	bne.n	800885a <LIS2MDL_0_Probe+0x10a>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <LIS2MDL_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008854:	f06f 0304 	mvn.w	r3, #4
 8008858:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 800885a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800885c:	4618      	mov	r0, r3
 800885e:	3748      	adds	r7, #72	; 0x48
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	080015f5 	.word	0x080015f5
 8008868:	08001659 	.word	0x08001659
 800886c:	0800170d 	.word	0x0800170d
 8008870:	080016a9 	.word	0x080016a9
 8008874:	08001771 	.word	0x08001771
 8008878:	20002bf0 	.word	0x20002bf0
 800887c:	20002b80 	.word	0x20002b80
 8008880:	2000be78 	.word	0x2000be78
 8008884:	20002b74 	.word	0x20002b74
 8008888:	20001298 	.word	0x20001298
 800888c:	20001394 	.word	0x20001394
 8008890:	20002b50 	.word	0x20002b50
 8008894:	200012a8 	.word	0x200012a8

08008898 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	4603      	mov	r3, r0
 80088a0:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80088a2:	79fb      	ldrb	r3, [r7, #7]
 80088a4:	4a04      	ldr	r2, [pc, #16]	; (80088b8 <BSP_LED_Init+0x20>)
 80088a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088aa:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	0801cd30 	.word	0x0801cd30

080088bc <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	4603      	mov	r3, r0
 80088c4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	4a06      	ldr	r2, [pc, #24]	; (80088e4 <BSP_LED_On+0x28>)
 80088ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ce:	2120      	movs	r1, #32
 80088d0:	2201      	movs	r2, #1
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fdd4 	bl	8009480 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	200013a8 	.word	0x200013a8

080088e8 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	4603      	mov	r3, r0
 80088f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	4a06      	ldr	r2, [pc, #24]	; (8008910 <BSP_LED_Off+0x28>)
 80088f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088fa:	2120      	movs	r1, #32
 80088fc:	2200      	movs	r2, #0
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 fdbe 	bl	8009480 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	200013a8 	.word	0x200013a8

08008914 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800891a:	2300      	movs	r3, #0
 800891c:	60bb      	str	r3, [r7, #8]
 800891e:	4b1c      	ldr	r3, [pc, #112]	; (8008990 <LED_USER_GPIO_Init+0x7c>)
 8008920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008922:	4a1b      	ldr	r2, [pc, #108]	; (8008990 <LED_USER_GPIO_Init+0x7c>)
 8008924:	f043 0301 	orr.w	r3, r3, #1
 8008928:	6313      	str	r3, [r2, #48]	; 0x30
 800892a:	4b19      	ldr	r3, [pc, #100]	; (8008990 <LED_USER_GPIO_Init+0x7c>)
 800892c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	60bb      	str	r3, [r7, #8]
 8008934:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008936:	f107 030c 	add.w	r3, r7, #12
 800893a:	2200      	movs	r2, #0
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	605a      	str	r2, [r3, #4]
 8008940:	609a      	str	r2, [r3, #8]
 8008942:	60da      	str	r2, [r3, #12]
 8008944:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008946:	2300      	movs	r3, #0
 8008948:	607b      	str	r3, [r7, #4]
 800894a:	4b11      	ldr	r3, [pc, #68]	; (8008990 <LED_USER_GPIO_Init+0x7c>)
 800894c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894e:	4a10      	ldr	r2, [pc, #64]	; (8008990 <LED_USER_GPIO_Init+0x7c>)
 8008950:	f043 0301 	orr.w	r3, r3, #1
 8008954:	6313      	str	r3, [r2, #48]	; 0x30
 8008956:	4b0e      	ldr	r3, [pc, #56]	; (8008990 <LED_USER_GPIO_Init+0x7c>)
 8008958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	607b      	str	r3, [r7, #4]
 8008960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8008962:	2200      	movs	r2, #0
 8008964:	2120      	movs	r1, #32
 8008966:	480b      	ldr	r0, [pc, #44]	; (8008994 <LED_USER_GPIO_Init+0x80>)
 8008968:	f000 fd8a 	bl	8009480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800896c:	2320      	movs	r3, #32
 800896e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008970:	2301      	movs	r3, #1
 8008972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008974:	2300      	movs	r3, #0
 8008976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008978:	2300      	movs	r3, #0
 800897a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800897c:	f107 030c 	add.w	r3, r7, #12
 8008980:	4619      	mov	r1, r3
 8008982:	4804      	ldr	r0, [pc, #16]	; (8008994 <LED_USER_GPIO_Init+0x80>)
 8008984:	f000 fafc 	bl	8008f80 <HAL_GPIO_Init>

}
 8008988:	bf00      	nop
 800898a:	3720      	adds	r7, #32
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	40023800 	.word	0x40023800
 8008994:	40020000 	.word	0x40020000

08008998 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	460a      	mov	r2, r1
 80089a2:	71fb      	strb	r3, [r7, #7]
 80089a4:	4613      	mov	r3, r2
 80089a6:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80089a8:	2300      	movs	r3, #0
 80089aa:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80089ac:	79fb      	ldrb	r3, [r7, #7]
 80089ae:	4a1f      	ldr	r2, [pc, #124]	; (8008a2c <BSP_PB_Init+0x94>)
 80089b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089b4:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80089b6:	79bb      	ldrb	r3, [r7, #6]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d132      	bne.n	8008a22 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80089bc:	79fb      	ldrb	r3, [r7, #7]
 80089be:	00db      	lsls	r3, r3, #3
 80089c0:	4a1b      	ldr	r2, [pc, #108]	; (8008a30 <BSP_PB_Init+0x98>)
 80089c2:	441a      	add	r2, r3
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	491b      	ldr	r1, [pc, #108]	; (8008a34 <BSP_PB_Init+0x9c>)
 80089c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80089cc:	4619      	mov	r1, r3
 80089ce:	4610      	mov	r0, r2
 80089d0:	f000 fac2 	bl	8008f58 <HAL_EXTI_GetHandle>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80089da:	f06f 0303 	mvn.w	r3, #3
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	e01f      	b.n	8008a22 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80089e2:	79fb      	ldrb	r3, [r7, #7]
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	4a12      	ldr	r2, [pc, #72]	; (8008a30 <BSP_PB_Init+0x98>)
 80089e8:	1898      	adds	r0, r3, r2
 80089ea:	79fb      	ldrb	r3, [r7, #7]
 80089ec:	4a12      	ldr	r2, [pc, #72]	; (8008a38 <BSP_PB_Init+0xa0>)
 80089ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089f2:	461a      	mov	r2, r3
 80089f4:	2100      	movs	r1, #0
 80089f6:	f000 fa95 	bl	8008f24 <HAL_EXTI_RegisterCallback>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008a00:	f06f 0303 	mvn.w	r3, #3
 8008a04:	60fb      	str	r3, [r7, #12]
 8008a06:	e00c      	b.n	8008a22 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8008a08:	2028      	movs	r0, #40	; 0x28
 8008a0a:	79fb      	ldrb	r3, [r7, #7]
 8008a0c:	4a0b      	ldr	r2, [pc, #44]	; (8008a3c <BSP_PB_Init+0xa4>)
 8008a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a12:	2200      	movs	r2, #0
 8008a14:	4619      	mov	r1, r3
 8008a16:	f000 fa3f 	bl	8008e98 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8008a1a:	2328      	movs	r3, #40	; 0x28
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 fa57 	bl	8008ed0 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8008a22:	68fb      	ldr	r3, [r7, #12]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	0801cd34 	.word	0x0801cd34
 8008a30:	200013b0 	.word	0x200013b0
 8008a34:	0801cd38 	.word	0x0801cd38
 8008a38:	0801cd3c 	.word	0x0801cd3c
 8008a3c:	0801cd40 	.word	0x0801cd40

08008a40 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	4a09      	ldr	r2, [pc, #36]	; (8008a74 <BSP_PB_GetState+0x34>)
 8008a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008a56:	4611      	mov	r1, r2
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 fcf9 	bl	8009450 <HAL_GPIO_ReadPin>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	bf0c      	ite	eq
 8008a64:	2301      	moveq	r3, #1
 8008a66:	2300      	movne	r3, #0
 8008a68:	b2db      	uxtb	r3, r3
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	200013ac 	.word	0x200013ac

08008a78 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	f003 f913 	bl	800bca8 <BSP_PB_Callback>
}
 8008a82:	bf00      	nop
 8008a84:	bd80      	pop	{r7, pc}
	...

08008a88 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b088      	sub	sp, #32
 8008a8c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60bb      	str	r3, [r7, #8]
 8008a92:	4b19      	ldr	r3, [pc, #100]	; (8008af8 <BUTTON_USER_GPIO_Init+0x70>)
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	4a18      	ldr	r2, [pc, #96]	; (8008af8 <BUTTON_USER_GPIO_Init+0x70>)
 8008a98:	f043 0304 	orr.w	r3, r3, #4
 8008a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a9e:	4b16      	ldr	r3, [pc, #88]	; (8008af8 <BUTTON_USER_GPIO_Init+0x70>)
 8008aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa2:	f003 0304 	and.w	r3, r3, #4
 8008aa6:	60bb      	str	r3, [r7, #8]
 8008aa8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008aaa:	f107 030c 	add.w	r3, r7, #12
 8008aae:	2200      	movs	r2, #0
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	605a      	str	r2, [r3, #4]
 8008ab4:	609a      	str	r2, [r3, #8]
 8008ab6:	60da      	str	r2, [r3, #12]
 8008ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008aba:	2300      	movs	r3, #0
 8008abc:	607b      	str	r3, [r7, #4]
 8008abe:	4b0e      	ldr	r3, [pc, #56]	; (8008af8 <BUTTON_USER_GPIO_Init+0x70>)
 8008ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac2:	4a0d      	ldr	r2, [pc, #52]	; (8008af8 <BUTTON_USER_GPIO_Init+0x70>)
 8008ac4:	f043 0304 	orr.w	r3, r3, #4
 8008ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8008aca:	4b0b      	ldr	r3, [pc, #44]	; (8008af8 <BUTTON_USER_GPIO_Init+0x70>)
 8008acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ace:	f003 0304 	and.w	r3, r3, #4
 8008ad2:	607b      	str	r3, [r7, #4]
 8008ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8008ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008adc:	4b07      	ldr	r3, [pc, #28]	; (8008afc <BUTTON_USER_GPIO_Init+0x74>)
 8008ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8008ae4:	f107 030c 	add.w	r3, r7, #12
 8008ae8:	4619      	mov	r1, r3
 8008aea:	4805      	ldr	r0, [pc, #20]	; (8008b00 <BUTTON_USER_GPIO_Init+0x78>)
 8008aec:	f000 fa48 	bl	8008f80 <HAL_GPIO_Init>

}
 8008af0:	bf00      	nop
 8008af2:	3720      	adds	r7, #32
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	40023800 	.word	0x40023800
 8008afc:	10210000 	.word	0x10210000
 8008b00:	40020800 	.word	0x40020800

08008b04 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8008b12:	79fb      	ldrb	r3, [r7, #7]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d903      	bls.n	8008b20 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008b18:	f06f 0301 	mvn.w	r3, #1
 8008b1c:	60fb      	str	r3, [r7, #12]
 8008b1e:	e025      	b.n	8008b6c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8008b20:	79fb      	ldrb	r3, [r7, #7]
 8008b22:	79fa      	ldrb	r2, [r7, #7]
 8008b24:	4914      	ldr	r1, [pc, #80]	; (8008b78 <BSP_COM_Init+0x74>)
 8008b26:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008b2a:	4814      	ldr	r0, [pc, #80]	; (8008b7c <BSP_COM_Init+0x78>)
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	011b      	lsls	r3, r3, #4
 8008b30:	4413      	add	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4403      	add	r3, r0
 8008b36:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8008b38:	79fa      	ldrb	r2, [r7, #7]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	011b      	lsls	r3, r3, #4
 8008b3e:	4413      	add	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4a0e      	ldr	r2, [pc, #56]	; (8008b7c <BSP_COM_Init+0x78>)
 8008b44:	4413      	add	r3, r2
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 f864 	bl	8008c14 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8008b4c:	79fa      	ldrb	r2, [r7, #7]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	4413      	add	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4a09      	ldr	r2, [pc, #36]	; (8008b7c <BSP_COM_Init+0x78>)
 8008b58:	4413      	add	r3, r2
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 f810 	bl	8008b80 <MX_USART2_UART_Init>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d002      	beq.n	8008b6c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008b66:	f06f 0303 	mvn.w	r3, #3
 8008b6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	200013b8 	.word	0x200013b8
 8008b7c:	2000be84 	.word	0x2000be84

08008b80 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART2;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a12      	ldr	r2, [pc, #72]	; (8008bd8 <MX_USART2_UART_Init+0x58>)
 8008b90:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008b98:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	220c      	movs	r2, #12
 8008bb0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f002 fbbc 	bl	800b33c <HAL_UART_Init>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	40004400 	.word	0x40004400

08008bdc <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) /* For IAR and MDK-ARM */
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8008be4:	4b09      	ldr	r3, [pc, #36]	; (8008c0c <__io_putchar+0x30>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	461a      	mov	r2, r3
 8008bea:	4613      	mov	r3, r2
 8008bec:	011b      	lsls	r3, r3, #4
 8008bee:	4413      	add	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4a07      	ldr	r2, [pc, #28]	; (8008c10 <__io_putchar+0x34>)
 8008bf4:	1898      	adds	r0, r3, r2
 8008bf6:	1d39      	adds	r1, r7, #4
 8008bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f002 fbf4 	bl	800b3ea <HAL_UART_Transmit>
  return ch;
 8008c02:	687b      	ldr	r3, [r7, #4]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	20002c1c 	.word	0x20002c1c
 8008c10:	2000be84 	.word	0x2000be84

08008c14 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08a      	sub	sp, #40	; 0x28
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	613b      	str	r3, [r7, #16]
 8008c20:	4b1e      	ldr	r3, [pc, #120]	; (8008c9c <USART2_MspInit+0x88>)
 8008c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c24:	4a1d      	ldr	r2, [pc, #116]	; (8008c9c <USART2_MspInit+0x88>)
 8008c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8008c2c:	4b1b      	ldr	r3, [pc, #108]	; (8008c9c <USART2_MspInit+0x88>)
 8008c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c34:	613b      	str	r3, [r7, #16]
 8008c36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c38:	2300      	movs	r3, #0
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	4b17      	ldr	r3, [pc, #92]	; (8008c9c <USART2_MspInit+0x88>)
 8008c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c40:	4a16      	ldr	r2, [pc, #88]	; (8008c9c <USART2_MspInit+0x88>)
 8008c42:	f043 0301 	orr.w	r3, r3, #1
 8008c46:	6313      	str	r3, [r2, #48]	; 0x30
 8008c48:	4b14      	ldr	r3, [pc, #80]	; (8008c9c <USART2_MspInit+0x88>)
 8008c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]
 8008c52:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8008c54:	2304      	movs	r3, #4
 8008c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c58:	2302      	movs	r3, #2
 8008c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c60:	2300      	movs	r3, #0
 8008c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8008c64:	2307      	movs	r3, #7
 8008c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8008c68:	f107 0314 	add.w	r3, r7, #20
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	480c      	ldr	r0, [pc, #48]	; (8008ca0 <USART2_MspInit+0x8c>)
 8008c70:	f000 f986 	bl	8008f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8008c74:	2308      	movs	r3, #8
 8008c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c78:	2302      	movs	r3, #2
 8008c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c80:	2300      	movs	r3, #0
 8008c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8008c84:	2307      	movs	r3, #7
 8008c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8008c88:	f107 0314 	add.w	r3, r7, #20
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	4804      	ldr	r0, [pc, #16]	; (8008ca0 <USART2_MspInit+0x8c>)
 8008c90:	f000 f976 	bl	8008f80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8008c94:	bf00      	nop
 8008c96:	3728      	adds	r7, #40	; 0x28
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	40023800 	.word	0x40023800
 8008ca0:	40020000 	.word	0x40020000

08008ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008ca8:	4b0e      	ldr	r3, [pc, #56]	; (8008ce4 <HAL_Init+0x40>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a0d      	ldr	r2, [pc, #52]	; (8008ce4 <HAL_Init+0x40>)
 8008cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008cb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ce4 <HAL_Init+0x40>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a0a      	ldr	r2, [pc, #40]	; (8008ce4 <HAL_Init+0x40>)
 8008cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008cc0:	4b08      	ldr	r3, [pc, #32]	; (8008ce4 <HAL_Init+0x40>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a07      	ldr	r2, [pc, #28]	; (8008ce4 <HAL_Init+0x40>)
 8008cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ccc:	2003      	movs	r0, #3
 8008cce:	f000 f8d8 	bl	8008e82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	f7f8 fc16 	bl	8001504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008cd8:	f7f8 fbc6 	bl	8001468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	40023c00 	.word	0x40023c00

08008ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008cec:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <HAL_IncTick+0x20>)
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <HAL_IncTick+0x24>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	4a04      	ldr	r2, [pc, #16]	; (8008d0c <HAL_IncTick+0x24>)
 8008cfa:	6013      	str	r3, [r2, #0]
}
 8008cfc:	bf00      	nop
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	200013c0 	.word	0x200013c0
 8008d0c:	2000bec8 	.word	0x2000bec8

08008d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008d10:	b480      	push	{r7}
 8008d12:	af00      	add	r7, sp, #0
  return uwTick;
 8008d14:	4b03      	ldr	r3, [pc, #12]	; (8008d24 <HAL_GetTick+0x14>)
 8008d16:	681b      	ldr	r3, [r3, #0]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	2000bec8 	.word	0x2000bec8

08008d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f003 0307 	and.w	r3, r3, #7
 8008d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008d38:	4b0c      	ldr	r3, [pc, #48]	; (8008d6c <__NVIC_SetPriorityGrouping+0x44>)
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008d44:	4013      	ands	r3, r2
 8008d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008d5a:	4a04      	ldr	r2, [pc, #16]	; (8008d6c <__NVIC_SetPriorityGrouping+0x44>)
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	60d3      	str	r3, [r2, #12]
}
 8008d60:	bf00      	nop
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	e000ed00 	.word	0xe000ed00

08008d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008d70:	b480      	push	{r7}
 8008d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d74:	4b04      	ldr	r3, [pc, #16]	; (8008d88 <__NVIC_GetPriorityGrouping+0x18>)
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	0a1b      	lsrs	r3, r3, #8
 8008d7a:	f003 0307 	and.w	r3, r3, #7
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	e000ed00 	.word	0xe000ed00

08008d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	db0b      	blt.n	8008db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
 8008da0:	f003 021f 	and.w	r2, r3, #31
 8008da4:	4907      	ldr	r1, [pc, #28]	; (8008dc4 <__NVIC_EnableIRQ+0x38>)
 8008da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008daa:	095b      	lsrs	r3, r3, #5
 8008dac:	2001      	movs	r0, #1
 8008dae:	fa00 f202 	lsl.w	r2, r0, r2
 8008db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008db6:	bf00      	nop
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	e000e100 	.word	0xe000e100

08008dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	6039      	str	r1, [r7, #0]
 8008dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	db0a      	blt.n	8008df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	490c      	ldr	r1, [pc, #48]	; (8008e14 <__NVIC_SetPriority+0x4c>)
 8008de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008de6:	0112      	lsls	r2, r2, #4
 8008de8:	b2d2      	uxtb	r2, r2
 8008dea:	440b      	add	r3, r1
 8008dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008df0:	e00a      	b.n	8008e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	4908      	ldr	r1, [pc, #32]	; (8008e18 <__NVIC_SetPriority+0x50>)
 8008df8:	79fb      	ldrb	r3, [r7, #7]
 8008dfa:	f003 030f 	and.w	r3, r3, #15
 8008dfe:	3b04      	subs	r3, #4
 8008e00:	0112      	lsls	r2, r2, #4
 8008e02:	b2d2      	uxtb	r2, r2
 8008e04:	440b      	add	r3, r1
 8008e06:	761a      	strb	r2, [r3, #24]
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	e000e100 	.word	0xe000e100
 8008e18:	e000ed00 	.word	0xe000ed00

08008e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b089      	sub	sp, #36	; 0x24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f003 0307 	and.w	r3, r3, #7
 8008e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	f1c3 0307 	rsb	r3, r3, #7
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	bf28      	it	cs
 8008e3a:	2304      	movcs	r3, #4
 8008e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	3304      	adds	r3, #4
 8008e42:	2b06      	cmp	r3, #6
 8008e44:	d902      	bls.n	8008e4c <NVIC_EncodePriority+0x30>
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	3b03      	subs	r3, #3
 8008e4a:	e000      	b.n	8008e4e <NVIC_EncodePriority+0x32>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e50:	f04f 32ff 	mov.w	r2, #4294967295
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5a:	43da      	mvns	r2, r3
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	401a      	ands	r2, r3
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008e64:	f04f 31ff 	mov.w	r1, #4294967295
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e6e:	43d9      	mvns	r1, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e74:	4313      	orrs	r3, r2
         );
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3724      	adds	r7, #36	; 0x24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b082      	sub	sp, #8
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7ff ff4c 	bl	8008d28 <__NVIC_SetPriorityGrouping>
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008eaa:	f7ff ff61 	bl	8008d70 <__NVIC_GetPriorityGrouping>
 8008eae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	68b9      	ldr	r1, [r7, #8]
 8008eb4:	6978      	ldr	r0, [r7, #20]
 8008eb6:	f7ff ffb1 	bl	8008e1c <NVIC_EncodePriority>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7ff ff80 	bl	8008dc8 <__NVIC_SetPriority>
}
 8008ec8:	bf00      	nop
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7ff ff54 	bl	8008d8c <__NVIC_EnableIRQ>
}
 8008ee4:	bf00      	nop
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d101      	bne.n	8008efe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e00e      	b.n	8008f1c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	795b      	ldrb	r3, [r3, #5]
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d105      	bne.n	8008f14 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7f8 fad6 	bl	80014c0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	607a      	str	r2, [r7, #4]
 8008f30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8008f36:	7afb      	ldrb	r3, [r7, #11]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d103      	bne.n	8008f44 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	605a      	str	r2, [r3, #4]
      break;
 8008f42:	e002      	b.n	8008f4a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	75fb      	strb	r3, [r7, #23]
      break;
 8008f48:	bf00      	nop
  }

  return status;
 8008f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	371c      	adds	r7, #28
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e003      	b.n	8008f74 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008f72:	2300      	movs	r3, #0
  }
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b089      	sub	sp, #36	; 0x24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f96:	2300      	movs	r3, #0
 8008f98:	61fb      	str	r3, [r7, #28]
 8008f9a:	e159      	b.n	8009250 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	4013      	ands	r3, r2
 8008fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008fb0:	693a      	ldr	r2, [r7, #16]
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	f040 8148 	bne.w	800924a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f003 0303 	and.w	r3, r3, #3
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d005      	beq.n	8008fd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d130      	bne.n	8009034 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	005b      	lsls	r3, r3, #1
 8008fdc:	2203      	movs	r2, #3
 8008fde:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe2:	43db      	mvns	r3, r3
 8008fe4:	69ba      	ldr	r2, [r7, #24]
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	68da      	ldr	r2, [r3, #12]
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	005b      	lsls	r3, r3, #1
 8008ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff6:	69ba      	ldr	r2, [r7, #24]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	69ba      	ldr	r2, [r7, #24]
 8009000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009008:	2201      	movs	r2, #1
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	fa02 f303 	lsl.w	r3, r2, r3
 8009010:	43db      	mvns	r3, r3
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	4013      	ands	r3, r2
 8009016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	091b      	lsrs	r3, r3, #4
 800901e:	f003 0201 	and.w	r2, r3, #1
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	fa02 f303 	lsl.w	r3, r2, r3
 8009028:	69ba      	ldr	r2, [r7, #24]
 800902a:	4313      	orrs	r3, r2
 800902c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	69ba      	ldr	r2, [r7, #24]
 8009032:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f003 0303 	and.w	r3, r3, #3
 800903c:	2b03      	cmp	r3, #3
 800903e:	d017      	beq.n	8009070 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	005b      	lsls	r3, r3, #1
 800904a:	2203      	movs	r2, #3
 800904c:	fa02 f303 	lsl.w	r3, r2, r3
 8009050:	43db      	mvns	r3, r3
 8009052:	69ba      	ldr	r2, [r7, #24]
 8009054:	4013      	ands	r3, r2
 8009056:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	689a      	ldr	r2, [r3, #8]
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	005b      	lsls	r3, r3, #1
 8009060:	fa02 f303 	lsl.w	r3, r2, r3
 8009064:	69ba      	ldr	r2, [r7, #24]
 8009066:	4313      	orrs	r3, r2
 8009068:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	69ba      	ldr	r2, [r7, #24]
 800906e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f003 0303 	and.w	r3, r3, #3
 8009078:	2b02      	cmp	r3, #2
 800907a:	d123      	bne.n	80090c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	08da      	lsrs	r2, r3, #3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	3208      	adds	r2, #8
 8009084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009088:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	f003 0307 	and.w	r3, r3, #7
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	220f      	movs	r2, #15
 8009094:	fa02 f303 	lsl.w	r3, r2, r3
 8009098:	43db      	mvns	r3, r3
 800909a:	69ba      	ldr	r2, [r7, #24]
 800909c:	4013      	ands	r3, r2
 800909e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	691a      	ldr	r2, [r3, #16]
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	f003 0307 	and.w	r3, r3, #7
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	fa02 f303 	lsl.w	r3, r2, r3
 80090b0:	69ba      	ldr	r2, [r7, #24]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	08da      	lsrs	r2, r3, #3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	3208      	adds	r2, #8
 80090be:	69b9      	ldr	r1, [r7, #24]
 80090c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	2203      	movs	r2, #3
 80090d0:	fa02 f303 	lsl.w	r3, r2, r3
 80090d4:	43db      	mvns	r3, r3
 80090d6:	69ba      	ldr	r2, [r7, #24]
 80090d8:	4013      	ands	r3, r2
 80090da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	f003 0203 	and.w	r2, r3, #3
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	005b      	lsls	r3, r3, #1
 80090e8:	fa02 f303 	lsl.w	r3, r2, r3
 80090ec:	69ba      	ldr	r2, [r7, #24]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	69ba      	ldr	r2, [r7, #24]
 80090f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 80a2 	beq.w	800924a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009106:	2300      	movs	r3, #0
 8009108:	60fb      	str	r3, [r7, #12]
 800910a:	4b57      	ldr	r3, [pc, #348]	; (8009268 <HAL_GPIO_Init+0x2e8>)
 800910c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800910e:	4a56      	ldr	r2, [pc, #344]	; (8009268 <HAL_GPIO_Init+0x2e8>)
 8009110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009114:	6453      	str	r3, [r2, #68]	; 0x44
 8009116:	4b54      	ldr	r3, [pc, #336]	; (8009268 <HAL_GPIO_Init+0x2e8>)
 8009118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800911a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009122:	4a52      	ldr	r2, [pc, #328]	; (800926c <HAL_GPIO_Init+0x2ec>)
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	089b      	lsrs	r3, r3, #2
 8009128:	3302      	adds	r3, #2
 800912a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800912e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	f003 0303 	and.w	r3, r3, #3
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	220f      	movs	r2, #15
 800913a:	fa02 f303 	lsl.w	r3, r2, r3
 800913e:	43db      	mvns	r3, r3
 8009140:	69ba      	ldr	r2, [r7, #24]
 8009142:	4013      	ands	r3, r2
 8009144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a49      	ldr	r2, [pc, #292]	; (8009270 <HAL_GPIO_Init+0x2f0>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d019      	beq.n	8009182 <HAL_GPIO_Init+0x202>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a48      	ldr	r2, [pc, #288]	; (8009274 <HAL_GPIO_Init+0x2f4>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d013      	beq.n	800917e <HAL_GPIO_Init+0x1fe>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a47      	ldr	r2, [pc, #284]	; (8009278 <HAL_GPIO_Init+0x2f8>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d00d      	beq.n	800917a <HAL_GPIO_Init+0x1fa>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a46      	ldr	r2, [pc, #280]	; (800927c <HAL_GPIO_Init+0x2fc>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d007      	beq.n	8009176 <HAL_GPIO_Init+0x1f6>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a45      	ldr	r2, [pc, #276]	; (8009280 <HAL_GPIO_Init+0x300>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d101      	bne.n	8009172 <HAL_GPIO_Init+0x1f2>
 800916e:	2304      	movs	r3, #4
 8009170:	e008      	b.n	8009184 <HAL_GPIO_Init+0x204>
 8009172:	2307      	movs	r3, #7
 8009174:	e006      	b.n	8009184 <HAL_GPIO_Init+0x204>
 8009176:	2303      	movs	r3, #3
 8009178:	e004      	b.n	8009184 <HAL_GPIO_Init+0x204>
 800917a:	2302      	movs	r3, #2
 800917c:	e002      	b.n	8009184 <HAL_GPIO_Init+0x204>
 800917e:	2301      	movs	r3, #1
 8009180:	e000      	b.n	8009184 <HAL_GPIO_Init+0x204>
 8009182:	2300      	movs	r3, #0
 8009184:	69fa      	ldr	r2, [r7, #28]
 8009186:	f002 0203 	and.w	r2, r2, #3
 800918a:	0092      	lsls	r2, r2, #2
 800918c:	4093      	lsls	r3, r2
 800918e:	69ba      	ldr	r2, [r7, #24]
 8009190:	4313      	orrs	r3, r2
 8009192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009194:	4935      	ldr	r1, [pc, #212]	; (800926c <HAL_GPIO_Init+0x2ec>)
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	089b      	lsrs	r3, r3, #2
 800919a:	3302      	adds	r3, #2
 800919c:	69ba      	ldr	r2, [r7, #24]
 800919e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80091a2:	4b38      	ldr	r3, [pc, #224]	; (8009284 <HAL_GPIO_Init+0x304>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	43db      	mvns	r3, r3
 80091ac:	69ba      	ldr	r2, [r7, #24]
 80091ae:	4013      	ands	r3, r2
 80091b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d003      	beq.n	80091c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80091be:	69ba      	ldr	r2, [r7, #24]
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80091c6:	4a2f      	ldr	r2, [pc, #188]	; (8009284 <HAL_GPIO_Init+0x304>)
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80091cc:	4b2d      	ldr	r3, [pc, #180]	; (8009284 <HAL_GPIO_Init+0x304>)
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	43db      	mvns	r3, r3
 80091d6:	69ba      	ldr	r2, [r7, #24]
 80091d8:	4013      	ands	r3, r2
 80091da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d003      	beq.n	80091f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80091e8:	69ba      	ldr	r2, [r7, #24]
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80091f0:	4a24      	ldr	r2, [pc, #144]	; (8009284 <HAL_GPIO_Init+0x304>)
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80091f6:	4b23      	ldr	r3, [pc, #140]	; (8009284 <HAL_GPIO_Init+0x304>)
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	43db      	mvns	r3, r3
 8009200:	69ba      	ldr	r2, [r7, #24]
 8009202:	4013      	ands	r3, r2
 8009204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d003      	beq.n	800921a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8009212:	69ba      	ldr	r2, [r7, #24]
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	4313      	orrs	r3, r2
 8009218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800921a:	4a1a      	ldr	r2, [pc, #104]	; (8009284 <HAL_GPIO_Init+0x304>)
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009220:	4b18      	ldr	r3, [pc, #96]	; (8009284 <HAL_GPIO_Init+0x304>)
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	43db      	mvns	r3, r3
 800922a:	69ba      	ldr	r2, [r7, #24]
 800922c:	4013      	ands	r3, r2
 800922e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d003      	beq.n	8009244 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800923c:	69ba      	ldr	r2, [r7, #24]
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	4313      	orrs	r3, r2
 8009242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009244:	4a0f      	ldr	r2, [pc, #60]	; (8009284 <HAL_GPIO_Init+0x304>)
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	3301      	adds	r3, #1
 800924e:	61fb      	str	r3, [r7, #28]
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	2b0f      	cmp	r3, #15
 8009254:	f67f aea2 	bls.w	8008f9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009258:	bf00      	nop
 800925a:	bf00      	nop
 800925c:	3724      	adds	r7, #36	; 0x24
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	40023800 	.word	0x40023800
 800926c:	40013800 	.word	0x40013800
 8009270:	40020000 	.word	0x40020000
 8009274:	40020400 	.word	0x40020400
 8009278:	40020800 	.word	0x40020800
 800927c:	40020c00 	.word	0x40020c00
 8009280:	40021000 	.word	0x40021000
 8009284:	40013c00 	.word	0x40013c00

08009288 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009292:	2300      	movs	r3, #0
 8009294:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8009296:	2300      	movs	r3, #0
 8009298:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800929a:	2300      	movs	r3, #0
 800929c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800929e:	2300      	movs	r3, #0
 80092a0:	617b      	str	r3, [r7, #20]
 80092a2:	e0bb      	b.n	800941c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80092a4:	2201      	movs	r2, #1
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	4013      	ands	r3, r2
 80092b4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	f040 80ab 	bne.w	8009416 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80092c0:	4a5c      	ldr	r2, [pc, #368]	; (8009434 <HAL_GPIO_DeInit+0x1ac>)
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	089b      	lsrs	r3, r3, #2
 80092c6:	3302      	adds	r3, #2
 80092c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092cc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f003 0303 	and.w	r3, r3, #3
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	220f      	movs	r2, #15
 80092d8:	fa02 f303 	lsl.w	r3, r2, r3
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	4013      	ands	r3, r2
 80092e0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a54      	ldr	r2, [pc, #336]	; (8009438 <HAL_GPIO_DeInit+0x1b0>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d019      	beq.n	800931e <HAL_GPIO_DeInit+0x96>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a53      	ldr	r2, [pc, #332]	; (800943c <HAL_GPIO_DeInit+0x1b4>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d013      	beq.n	800931a <HAL_GPIO_DeInit+0x92>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a52      	ldr	r2, [pc, #328]	; (8009440 <HAL_GPIO_DeInit+0x1b8>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d00d      	beq.n	8009316 <HAL_GPIO_DeInit+0x8e>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a51      	ldr	r2, [pc, #324]	; (8009444 <HAL_GPIO_DeInit+0x1bc>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d007      	beq.n	8009312 <HAL_GPIO_DeInit+0x8a>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a50      	ldr	r2, [pc, #320]	; (8009448 <HAL_GPIO_DeInit+0x1c0>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d101      	bne.n	800930e <HAL_GPIO_DeInit+0x86>
 800930a:	2304      	movs	r3, #4
 800930c:	e008      	b.n	8009320 <HAL_GPIO_DeInit+0x98>
 800930e:	2307      	movs	r3, #7
 8009310:	e006      	b.n	8009320 <HAL_GPIO_DeInit+0x98>
 8009312:	2303      	movs	r3, #3
 8009314:	e004      	b.n	8009320 <HAL_GPIO_DeInit+0x98>
 8009316:	2302      	movs	r3, #2
 8009318:	e002      	b.n	8009320 <HAL_GPIO_DeInit+0x98>
 800931a:	2301      	movs	r3, #1
 800931c:	e000      	b.n	8009320 <HAL_GPIO_DeInit+0x98>
 800931e:	2300      	movs	r3, #0
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	f002 0203 	and.w	r2, r2, #3
 8009326:	0092      	lsls	r2, r2, #2
 8009328:	4093      	lsls	r3, r2
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	429a      	cmp	r2, r3
 800932e:	d132      	bne.n	8009396 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009330:	4b46      	ldr	r3, [pc, #280]	; (800944c <HAL_GPIO_DeInit+0x1c4>)
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	43db      	mvns	r3, r3
 8009338:	4944      	ldr	r1, [pc, #272]	; (800944c <HAL_GPIO_DeInit+0x1c4>)
 800933a:	4013      	ands	r3, r2
 800933c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800933e:	4b43      	ldr	r3, [pc, #268]	; (800944c <HAL_GPIO_DeInit+0x1c4>)
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	43db      	mvns	r3, r3
 8009346:	4941      	ldr	r1, [pc, #260]	; (800944c <HAL_GPIO_DeInit+0x1c4>)
 8009348:	4013      	ands	r3, r2
 800934a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800934c:	4b3f      	ldr	r3, [pc, #252]	; (800944c <HAL_GPIO_DeInit+0x1c4>)
 800934e:	689a      	ldr	r2, [r3, #8]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	43db      	mvns	r3, r3
 8009354:	493d      	ldr	r1, [pc, #244]	; (800944c <HAL_GPIO_DeInit+0x1c4>)
 8009356:	4013      	ands	r3, r2
 8009358:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800935a:	4b3c      	ldr	r3, [pc, #240]	; (800944c <HAL_GPIO_DeInit+0x1c4>)
 800935c:	68da      	ldr	r2, [r3, #12]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	43db      	mvns	r3, r3
 8009362:	493a      	ldr	r1, [pc, #232]	; (800944c <HAL_GPIO_DeInit+0x1c4>)
 8009364:	4013      	ands	r3, r2
 8009366:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	f003 0303 	and.w	r3, r3, #3
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	220f      	movs	r2, #15
 8009372:	fa02 f303 	lsl.w	r3, r2, r3
 8009376:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009378:	4a2e      	ldr	r2, [pc, #184]	; (8009434 <HAL_GPIO_DeInit+0x1ac>)
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	089b      	lsrs	r3, r3, #2
 800937e:	3302      	adds	r3, #2
 8009380:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	43da      	mvns	r2, r3
 8009388:	482a      	ldr	r0, [pc, #168]	; (8009434 <HAL_GPIO_DeInit+0x1ac>)
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	089b      	lsrs	r3, r3, #2
 800938e:	400a      	ands	r2, r1
 8009390:	3302      	adds	r3, #2
 8009392:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	2103      	movs	r1, #3
 80093a0:	fa01 f303 	lsl.w	r3, r1, r3
 80093a4:	43db      	mvns	r3, r3
 80093a6:	401a      	ands	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	08da      	lsrs	r2, r3, #3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	3208      	adds	r2, #8
 80093b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	f003 0307 	and.w	r3, r3, #7
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	220f      	movs	r2, #15
 80093c2:	fa02 f303 	lsl.w	r3, r2, r3
 80093c6:	43db      	mvns	r3, r3
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	08d2      	lsrs	r2, r2, #3
 80093cc:	4019      	ands	r1, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	3208      	adds	r2, #8
 80093d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	68da      	ldr	r2, [r3, #12]
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	2103      	movs	r1, #3
 80093e0:	fa01 f303 	lsl.w	r3, r1, r3
 80093e4:	43db      	mvns	r3, r3
 80093e6:	401a      	ands	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	2101      	movs	r1, #1
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	fa01 f303 	lsl.w	r3, r1, r3
 80093f8:	43db      	mvns	r3, r3
 80093fa:	401a      	ands	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	689a      	ldr	r2, [r3, #8]
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	2103      	movs	r1, #3
 800940a:	fa01 f303 	lsl.w	r3, r1, r3
 800940e:	43db      	mvns	r3, r3
 8009410:	401a      	ands	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	3301      	adds	r3, #1
 800941a:	617b      	str	r3, [r7, #20]
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	2b0f      	cmp	r3, #15
 8009420:	f67f af40 	bls.w	80092a4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009424:	bf00      	nop
 8009426:	bf00      	nop
 8009428:	371c      	adds	r7, #28
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	40013800 	.word	0x40013800
 8009438:	40020000 	.word	0x40020000
 800943c:	40020400 	.word	0x40020400
 8009440:	40020800 	.word	0x40020800
 8009444:	40020c00 	.word	0x40020c00
 8009448:	40021000 	.word	0x40021000
 800944c:	40013c00 	.word	0x40013c00

08009450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	460b      	mov	r3, r1
 800945a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	691a      	ldr	r2, [r3, #16]
 8009460:	887b      	ldrh	r3, [r7, #2]
 8009462:	4013      	ands	r3, r2
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009468:	2301      	movs	r3, #1
 800946a:	73fb      	strb	r3, [r7, #15]
 800946c:	e001      	b.n	8009472 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800946e:	2300      	movs	r3, #0
 8009470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009472:	7bfb      	ldrb	r3, [r7, #15]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	807b      	strh	r3, [r7, #2]
 800948c:	4613      	mov	r3, r2
 800948e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009490:	787b      	ldrb	r3, [r7, #1]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009496:	887a      	ldrh	r2, [r7, #2]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800949c:	e003      	b.n	80094a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800949e:	887b      	ldrh	r3, [r7, #2]
 80094a0:	041a      	lsls	r2, r3, #16
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	619a      	str	r2, [r3, #24]
}
 80094a6:	bf00      	nop
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
	...

080094b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e12b      	b.n	800971e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d106      	bne.n	80094e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f95d 	bl	800979a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2224      	movs	r2, #36	; 0x24
 80094e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f022 0201 	bic.w	r2, r2, #1
 80094f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009506:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009516:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009518:	f001 fc36 	bl	800ad88 <HAL_RCC_GetPCLK1Freq>
 800951c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	4a81      	ldr	r2, [pc, #516]	; (8009728 <HAL_I2C_Init+0x274>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d807      	bhi.n	8009538 <HAL_I2C_Init+0x84>
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	4a80      	ldr	r2, [pc, #512]	; (800972c <HAL_I2C_Init+0x278>)
 800952c:	4293      	cmp	r3, r2
 800952e:	bf94      	ite	ls
 8009530:	2301      	movls	r3, #1
 8009532:	2300      	movhi	r3, #0
 8009534:	b2db      	uxtb	r3, r3
 8009536:	e006      	b.n	8009546 <HAL_I2C_Init+0x92>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	4a7d      	ldr	r2, [pc, #500]	; (8009730 <HAL_I2C_Init+0x27c>)
 800953c:	4293      	cmp	r3, r2
 800953e:	bf94      	ite	ls
 8009540:	2301      	movls	r3, #1
 8009542:	2300      	movhi	r3, #0
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e0e7      	b.n	800971e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	4a78      	ldr	r2, [pc, #480]	; (8009734 <HAL_I2C_Init+0x280>)
 8009552:	fba2 2303 	umull	r2, r3, r2, r3
 8009556:	0c9b      	lsrs	r3, r3, #18
 8009558:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	430a      	orrs	r2, r1
 800956c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	6a1b      	ldr	r3, [r3, #32]
 8009574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	4a6a      	ldr	r2, [pc, #424]	; (8009728 <HAL_I2C_Init+0x274>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d802      	bhi.n	8009588 <HAL_I2C_Init+0xd4>
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	3301      	adds	r3, #1
 8009586:	e009      	b.n	800959c <HAL_I2C_Init+0xe8>
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800958e:	fb02 f303 	mul.w	r3, r2, r3
 8009592:	4a69      	ldr	r2, [pc, #420]	; (8009738 <HAL_I2C_Init+0x284>)
 8009594:	fba2 2303 	umull	r2, r3, r2, r3
 8009598:	099b      	lsrs	r3, r3, #6
 800959a:	3301      	adds	r3, #1
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	6812      	ldr	r2, [r2, #0]
 80095a0:	430b      	orrs	r3, r1
 80095a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80095ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	495c      	ldr	r1, [pc, #368]	; (8009728 <HAL_I2C_Init+0x274>)
 80095b8:	428b      	cmp	r3, r1
 80095ba:	d819      	bhi.n	80095f0 <HAL_I2C_Init+0x13c>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	1e59      	subs	r1, r3, #1
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80095ca:	1c59      	adds	r1, r3, #1
 80095cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80095d0:	400b      	ands	r3, r1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00a      	beq.n	80095ec <HAL_I2C_Init+0x138>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	1e59      	subs	r1, r3, #1
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	005b      	lsls	r3, r3, #1
 80095e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80095e4:	3301      	adds	r3, #1
 80095e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095ea:	e051      	b.n	8009690 <HAL_I2C_Init+0x1dc>
 80095ec:	2304      	movs	r3, #4
 80095ee:	e04f      	b.n	8009690 <HAL_I2C_Init+0x1dc>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d111      	bne.n	800961c <HAL_I2C_Init+0x168>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	1e58      	subs	r0, r3, #1
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6859      	ldr	r1, [r3, #4]
 8009600:	460b      	mov	r3, r1
 8009602:	005b      	lsls	r3, r3, #1
 8009604:	440b      	add	r3, r1
 8009606:	fbb0 f3f3 	udiv	r3, r0, r3
 800960a:	3301      	adds	r3, #1
 800960c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009610:	2b00      	cmp	r3, #0
 8009612:	bf0c      	ite	eq
 8009614:	2301      	moveq	r3, #1
 8009616:	2300      	movne	r3, #0
 8009618:	b2db      	uxtb	r3, r3
 800961a:	e012      	b.n	8009642 <HAL_I2C_Init+0x18e>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	1e58      	subs	r0, r3, #1
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6859      	ldr	r1, [r3, #4]
 8009624:	460b      	mov	r3, r1
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	440b      	add	r3, r1
 800962a:	0099      	lsls	r1, r3, #2
 800962c:	440b      	add	r3, r1
 800962e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009632:	3301      	adds	r3, #1
 8009634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009638:	2b00      	cmp	r3, #0
 800963a:	bf0c      	ite	eq
 800963c:	2301      	moveq	r3, #1
 800963e:	2300      	movne	r3, #0
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <HAL_I2C_Init+0x196>
 8009646:	2301      	movs	r3, #1
 8009648:	e022      	b.n	8009690 <HAL_I2C_Init+0x1dc>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10e      	bne.n	8009670 <HAL_I2C_Init+0x1bc>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	1e58      	subs	r0, r3, #1
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6859      	ldr	r1, [r3, #4]
 800965a:	460b      	mov	r3, r1
 800965c:	005b      	lsls	r3, r3, #1
 800965e:	440b      	add	r3, r1
 8009660:	fbb0 f3f3 	udiv	r3, r0, r3
 8009664:	3301      	adds	r3, #1
 8009666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800966a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800966e:	e00f      	b.n	8009690 <HAL_I2C_Init+0x1dc>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	1e58      	subs	r0, r3, #1
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6859      	ldr	r1, [r3, #4]
 8009678:	460b      	mov	r3, r1
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	440b      	add	r3, r1
 800967e:	0099      	lsls	r1, r3, #2
 8009680:	440b      	add	r3, r1
 8009682:	fbb0 f3f3 	udiv	r3, r0, r3
 8009686:	3301      	adds	r3, #1
 8009688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800968c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009690:	6879      	ldr	r1, [r7, #4]
 8009692:	6809      	ldr	r1, [r1, #0]
 8009694:	4313      	orrs	r3, r2
 8009696:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	69da      	ldr	r2, [r3, #28]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	431a      	orrs	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	430a      	orrs	r2, r1
 80096b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80096be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	6911      	ldr	r1, [r2, #16]
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	68d2      	ldr	r2, [r2, #12]
 80096ca:	4311      	orrs	r1, r2
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	6812      	ldr	r2, [r2, #0]
 80096d0:	430b      	orrs	r3, r1
 80096d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	695a      	ldr	r2, [r3, #20]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	431a      	orrs	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	430a      	orrs	r2, r1
 80096ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f042 0201 	orr.w	r2, r2, #1
 80096fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2220      	movs	r2, #32
 800970a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	000186a0 	.word	0x000186a0
 800972c:	001e847f 	.word	0x001e847f
 8009730:	003d08ff 	.word	0x003d08ff
 8009734:	431bde83 	.word	0x431bde83
 8009738:	10624dd3 	.word	0x10624dd3

0800973c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e021      	b.n	8009792 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2224      	movs	r2, #36	; 0x24
 8009752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f022 0201 	bic.w	r2, r2, #1
 8009764:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f821 	bl	80097ae <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800979a:	b480      	push	{r7}
 800979c:	b083      	sub	sp, #12
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80097a2:	bf00      	nop
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b083      	sub	sp, #12
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80097b6:	bf00      	nop
 80097b8:	370c      	adds	r7, #12
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
	...

080097c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b088      	sub	sp, #32
 80097c8:	af02      	add	r7, sp, #8
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	4608      	mov	r0, r1
 80097ce:	4611      	mov	r1, r2
 80097d0:	461a      	mov	r2, r3
 80097d2:	4603      	mov	r3, r0
 80097d4:	817b      	strh	r3, [r7, #10]
 80097d6:	460b      	mov	r3, r1
 80097d8:	813b      	strh	r3, [r7, #8]
 80097da:	4613      	mov	r3, r2
 80097dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80097de:	f7ff fa97 	bl	8008d10 <HAL_GetTick>
 80097e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b20      	cmp	r3, #32
 80097ee:	f040 80d9 	bne.w	80099a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	2319      	movs	r3, #25
 80097f8:	2201      	movs	r2, #1
 80097fa:	496d      	ldr	r1, [pc, #436]	; (80099b0 <HAL_I2C_Mem_Write+0x1ec>)
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 fc99 	bl	800a134 <I2C_WaitOnFlagUntilTimeout>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009808:	2302      	movs	r3, #2
 800980a:	e0cc      	b.n	80099a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009812:	2b01      	cmp	r3, #1
 8009814:	d101      	bne.n	800981a <HAL_I2C_Mem_Write+0x56>
 8009816:	2302      	movs	r3, #2
 8009818:	e0c5      	b.n	80099a6 <HAL_I2C_Mem_Write+0x1e2>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b01      	cmp	r3, #1
 800982e:	d007      	beq.n	8009840 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f042 0201 	orr.w	r2, r2, #1
 800983e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800984e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2221      	movs	r2, #33	; 0x21
 8009854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2240      	movs	r2, #64	; 0x40
 800985c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6a3a      	ldr	r2, [r7, #32]
 800986a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009870:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009876:	b29a      	uxth	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	4a4d      	ldr	r2, [pc, #308]	; (80099b4 <HAL_I2C_Mem_Write+0x1f0>)
 8009880:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009882:	88f8      	ldrh	r0, [r7, #6]
 8009884:	893a      	ldrh	r2, [r7, #8]
 8009886:	8979      	ldrh	r1, [r7, #10]
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	9301      	str	r3, [sp, #4]
 800988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	4603      	mov	r3, r0
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 fad0 	bl	8009e38 <I2C_RequestMemoryWrite>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d052      	beq.n	8009944 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e081      	b.n	80099a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098a2:	697a      	ldr	r2, [r7, #20]
 80098a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f000 fd1a 	bl	800a2e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00d      	beq.n	80098ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b6:	2b04      	cmp	r3, #4
 80098b8:	d107      	bne.n	80098ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e06b      	b.n	80099a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d2:	781a      	ldrb	r2, [r3, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e8:	3b01      	subs	r3, #1
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	3b01      	subs	r3, #1
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	695b      	ldr	r3, [r3, #20]
 8009904:	f003 0304 	and.w	r3, r3, #4
 8009908:	2b04      	cmp	r3, #4
 800990a:	d11b      	bne.n	8009944 <HAL_I2C_Mem_Write+0x180>
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009910:	2b00      	cmp	r3, #0
 8009912:	d017      	beq.n	8009944 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009918:	781a      	ldrb	r2, [r3, #0]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009924:	1c5a      	adds	r2, r3, #1
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800992e:	3b01      	subs	r3, #1
 8009930:	b29a      	uxth	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800993a:	b29b      	uxth	r3, r3
 800993c:	3b01      	subs	r3, #1
 800993e:	b29a      	uxth	r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1aa      	bne.n	80098a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 fd06 	bl	800a362 <I2C_WaitOnBTFFlagUntilTimeout>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00d      	beq.n	8009978 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009960:	2b04      	cmp	r3, #4
 8009962:	d107      	bne.n	8009974 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009972:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e016      	b.n	80099a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2220      	movs	r2, #32
 800998c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2200      	movs	r2, #0
 800999c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	e000      	b.n	80099a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80099a4:	2302      	movs	r3, #2
  }
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	00100002 	.word	0x00100002
 80099b4:	ffff0000 	.word	0xffff0000

080099b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08c      	sub	sp, #48	; 0x30
 80099bc:	af02      	add	r7, sp, #8
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	4608      	mov	r0, r1
 80099c2:	4611      	mov	r1, r2
 80099c4:	461a      	mov	r2, r3
 80099c6:	4603      	mov	r3, r0
 80099c8:	817b      	strh	r3, [r7, #10]
 80099ca:	460b      	mov	r3, r1
 80099cc:	813b      	strh	r3, [r7, #8]
 80099ce:	4613      	mov	r3, r2
 80099d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80099d2:	f7ff f99d 	bl	8008d10 <HAL_GetTick>
 80099d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b20      	cmp	r3, #32
 80099e2:	f040 8208 	bne.w	8009df6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	2319      	movs	r3, #25
 80099ec:	2201      	movs	r2, #1
 80099ee:	497b      	ldr	r1, [pc, #492]	; (8009bdc <HAL_I2C_Mem_Read+0x224>)
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 fb9f 	bl	800a134 <I2C_WaitOnFlagUntilTimeout>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80099fc:	2302      	movs	r3, #2
 80099fe:	e1fb      	b.n	8009df8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d101      	bne.n	8009a0e <HAL_I2C_Mem_Read+0x56>
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	e1f4      	b.n	8009df8 <HAL_I2C_Mem_Read+0x440>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d007      	beq.n	8009a34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f042 0201 	orr.w	r2, r2, #1
 8009a32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2222      	movs	r2, #34	; 0x22
 8009a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2240      	movs	r2, #64	; 0x40
 8009a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009a64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4a5b      	ldr	r2, [pc, #364]	; (8009be0 <HAL_I2C_Mem_Read+0x228>)
 8009a74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a76:	88f8      	ldrh	r0, [r7, #6]
 8009a78:	893a      	ldrh	r2, [r7, #8]
 8009a7a:	8979      	ldrh	r1, [r7, #10]
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7e:	9301      	str	r3, [sp, #4]
 8009a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	4603      	mov	r3, r0
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f000 fa6c 	bl	8009f64 <I2C_RequestMemoryRead>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d001      	beq.n	8009a96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e1b0      	b.n	8009df8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d113      	bne.n	8009ac6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	623b      	str	r3, [r7, #32]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	623b      	str	r3, [r7, #32]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	623b      	str	r3, [r7, #32]
 8009ab2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	e184      	b.n	8009dd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d11b      	bne.n	8009b06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009adc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ade:	2300      	movs	r3, #0
 8009ae0:	61fb      	str	r3, [r7, #28]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	61fb      	str	r3, [r7, #28]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	699b      	ldr	r3, [r3, #24]
 8009af0:	61fb      	str	r3, [r7, #28]
 8009af2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b02:	601a      	str	r2, [r3, #0]
 8009b04:	e164      	b.n	8009dd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d11b      	bne.n	8009b46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b2e:	2300      	movs	r3, #0
 8009b30:	61bb      	str	r3, [r7, #24]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	695b      	ldr	r3, [r3, #20]
 8009b38:	61bb      	str	r3, [r7, #24]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	61bb      	str	r3, [r7, #24]
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	e144      	b.n	8009dd0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b46:	2300      	movs	r3, #0
 8009b48:	617b      	str	r3, [r7, #20]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	617b      	str	r3, [r7, #20]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	617b      	str	r3, [r7, #20]
 8009b5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009b5c:	e138      	b.n	8009dd0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b62:	2b03      	cmp	r3, #3
 8009b64:	f200 80f1 	bhi.w	8009d4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d123      	bne.n	8009bb8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f000 fc35 	bl	800a3e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e139      	b.n	8009df8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	691a      	ldr	r2, [r3, #16]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8e:	b2d2      	uxtb	r2, r2
 8009b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b96:	1c5a      	adds	r2, r3, #1
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009bb6:	e10b      	b.n	8009dd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d14e      	bne.n	8009c5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	4906      	ldr	r1, [pc, #24]	; (8009be4 <HAL_I2C_Mem_Read+0x22c>)
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f000 fab2 	bl	800a134 <I2C_WaitOnFlagUntilTimeout>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d008      	beq.n	8009be8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e10e      	b.n	8009df8 <HAL_I2C_Mem_Read+0x440>
 8009bda:	bf00      	nop
 8009bdc:	00100002 	.word	0x00100002
 8009be0:	ffff0000 	.word	0xffff0000
 8009be4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	691a      	ldr	r2, [r3, #16]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c02:	b2d2      	uxtb	r2, r2
 8009c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0a:	1c5a      	adds	r2, r3, #1
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c14:	3b01      	subs	r3, #1
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	3b01      	subs	r3, #1
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	691a      	ldr	r2, [r3, #16]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c34:	b2d2      	uxtb	r2, r2
 8009c36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c46:	3b01      	subs	r3, #1
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	3b01      	subs	r3, #1
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c5c:	e0b8      	b.n	8009dd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c64:	2200      	movs	r2, #0
 8009c66:	4966      	ldr	r1, [pc, #408]	; (8009e00 <HAL_I2C_Mem_Read+0x448>)
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f000 fa63 	bl	800a134 <I2C_WaitOnFlagUntilTimeout>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e0bf      	b.n	8009df8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	691a      	ldr	r2, [r3, #16]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c92:	b2d2      	uxtb	r2, r2
 8009c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	494f      	ldr	r1, [pc, #316]	; (8009e00 <HAL_I2C_Mem_Read+0x448>)
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f000 fa35 	bl	800a134 <I2C_WaitOnFlagUntilTimeout>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d001      	beq.n	8009cd4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e091      	b.n	8009df8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	691a      	ldr	r2, [r3, #16]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cee:	b2d2      	uxtb	r2, r2
 8009cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf6:	1c5a      	adds	r2, r3, #1
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d00:	3b01      	subs	r3, #1
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	691a      	ldr	r2, [r3, #16]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d20:	b2d2      	uxtb	r2, r2
 8009d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d32:	3b01      	subs	r3, #1
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	3b01      	subs	r3, #1
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d48:	e042      	b.n	8009dd0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f000 fb48 	bl	800a3e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e04c      	b.n	8009df8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	691a      	ldr	r2, [r3, #16]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d68:	b2d2      	uxtb	r2, r2
 8009d6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	695b      	ldr	r3, [r3, #20]
 8009d96:	f003 0304 	and.w	r3, r3, #4
 8009d9a:	2b04      	cmp	r3, #4
 8009d9c:	d118      	bne.n	8009dd0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	691a      	ldr	r2, [r3, #16]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da8:	b2d2      	uxtb	r2, r2
 8009daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f47f aec2 	bne.w	8009b5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2220      	movs	r2, #32
 8009dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	e000      	b.n	8009df8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009df6:	2302      	movs	r3, #2
  }
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3728      	adds	r7, #40	; 0x28
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	00010004 	.word	0x00010004

08009e04 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e12:	b2db      	uxtb	r3, r3
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b088      	sub	sp, #32
 8009e3c:	af02      	add	r7, sp, #8
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	4608      	mov	r0, r1
 8009e42:	4611      	mov	r1, r2
 8009e44:	461a      	mov	r2, r3
 8009e46:	4603      	mov	r3, r0
 8009e48:	817b      	strh	r3, [r7, #10]
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	813b      	strh	r3, [r7, #8]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 f960 	bl	800a134 <I2C_WaitOnFlagUntilTimeout>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00d      	beq.n	8009e96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e88:	d103      	bne.n	8009e92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e92:	2303      	movs	r3, #3
 8009e94:	e05f      	b.n	8009f56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e96:	897b      	ldrh	r3, [r7, #10]
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009ea4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea8:	6a3a      	ldr	r2, [r7, #32]
 8009eaa:	492d      	ldr	r1, [pc, #180]	; (8009f60 <I2C_RequestMemoryWrite+0x128>)
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f000 f998 	bl	800a1e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d001      	beq.n	8009ebc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e04c      	b.n	8009f56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	617b      	str	r3, [r7, #20]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	695b      	ldr	r3, [r3, #20]
 8009ec6:	617b      	str	r3, [r7, #20]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	699b      	ldr	r3, [r3, #24]
 8009ece:	617b      	str	r3, [r7, #20]
 8009ed0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed4:	6a39      	ldr	r1, [r7, #32]
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f000 fa02 	bl	800a2e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00d      	beq.n	8009efe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee6:	2b04      	cmp	r3, #4
 8009ee8:	d107      	bne.n	8009efa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ef8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e02b      	b.n	8009f56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009efe:	88fb      	ldrh	r3, [r7, #6]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d105      	bne.n	8009f10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f04:	893b      	ldrh	r3, [r7, #8]
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	611a      	str	r2, [r3, #16]
 8009f0e:	e021      	b.n	8009f54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009f10:	893b      	ldrh	r3, [r7, #8]
 8009f12:	0a1b      	lsrs	r3, r3, #8
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f20:	6a39      	ldr	r1, [r7, #32]
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f000 f9dc 	bl	800a2e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00d      	beq.n	8009f4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f32:	2b04      	cmp	r3, #4
 8009f34:	d107      	bne.n	8009f46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e005      	b.n	8009f56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f4a:	893b      	ldrh	r3, [r7, #8]
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3718      	adds	r7, #24
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	00010002 	.word	0x00010002

08009f64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af02      	add	r7, sp, #8
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	4608      	mov	r0, r1
 8009f6e:	4611      	mov	r1, r2
 8009f70:	461a      	mov	r2, r3
 8009f72:	4603      	mov	r3, r0
 8009f74:	817b      	strh	r3, [r7, #10]
 8009f76:	460b      	mov	r3, r1
 8009f78:	813b      	strh	r3, [r7, #8]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	6a3b      	ldr	r3, [r7, #32]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f000 f8c2 	bl	800a134 <I2C_WaitOnFlagUntilTimeout>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00d      	beq.n	8009fd2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fc4:	d103      	bne.n	8009fce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009fce:	2303      	movs	r3, #3
 8009fd0:	e0aa      	b.n	800a128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009fd2:	897b      	ldrh	r3, [r7, #10]
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009fe0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe4:	6a3a      	ldr	r2, [r7, #32]
 8009fe6:	4952      	ldr	r1, [pc, #328]	; (800a130 <I2C_RequestMemoryRead+0x1cc>)
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 f8fa 	bl	800a1e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e097      	b.n	800a128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	617b      	str	r3, [r7, #20]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	695b      	ldr	r3, [r3, #20]
 800a002:	617b      	str	r3, [r7, #20]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	699b      	ldr	r3, [r3, #24]
 800a00a:	617b      	str	r3, [r7, #20]
 800a00c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a010:	6a39      	ldr	r1, [r7, #32]
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	f000 f964 	bl	800a2e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00d      	beq.n	800a03a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a022:	2b04      	cmp	r3, #4
 800a024:	d107      	bne.n	800a036 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a034:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	e076      	b.n	800a128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a03a:	88fb      	ldrh	r3, [r7, #6]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d105      	bne.n	800a04c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a040:	893b      	ldrh	r3, [r7, #8]
 800a042:	b2da      	uxtb	r2, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	611a      	str	r2, [r3, #16]
 800a04a:	e021      	b.n	800a090 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a04c:	893b      	ldrh	r3, [r7, #8]
 800a04e:	0a1b      	lsrs	r3, r3, #8
 800a050:	b29b      	uxth	r3, r3
 800a052:	b2da      	uxtb	r2, r3
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05c:	6a39      	ldr	r1, [r7, #32]
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f000 f93e 	bl	800a2e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00d      	beq.n	800a086 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06e:	2b04      	cmp	r3, #4
 800a070:	d107      	bne.n	800a082 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a080:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e050      	b.n	800a128 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a086:	893b      	ldrh	r3, [r7, #8]
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a092:	6a39      	ldr	r1, [r7, #32]
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f000 f923 	bl	800a2e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00d      	beq.n	800a0bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a4:	2b04      	cmp	r3, #4
 800a0a6:	d107      	bne.n	800a0b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e035      	b.n	800a128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f000 f82b 	bl	800a134 <I2C_WaitOnFlagUntilTimeout>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00d      	beq.n	800a100 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0f2:	d103      	bne.n	800a0fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e013      	b.n	800a128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a100:	897b      	ldrh	r3, [r7, #10]
 800a102:	b2db      	uxtb	r3, r3
 800a104:	f043 0301 	orr.w	r3, r3, #1
 800a108:	b2da      	uxtb	r2, r3
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	6a3a      	ldr	r2, [r7, #32]
 800a114:	4906      	ldr	r1, [pc, #24]	; (800a130 <I2C_RequestMemoryRead+0x1cc>)
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f000 f863 	bl	800a1e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d001      	beq.n	800a126 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e000      	b.n	800a128 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3718      	adds	r7, #24
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	00010002 	.word	0x00010002

0800a134 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	603b      	str	r3, [r7, #0]
 800a140:	4613      	mov	r3, r2
 800a142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a144:	e025      	b.n	800a192 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a14c:	d021      	beq.n	800a192 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a14e:	f7fe fddf 	bl	8008d10 <HAL_GetTick>
 800a152:	4602      	mov	r2, r0
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	683a      	ldr	r2, [r7, #0]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d302      	bcc.n	800a164 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d116      	bne.n	800a192 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2200      	movs	r2, #0
 800a168:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2220      	movs	r2, #32
 800a16e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17e:	f043 0220 	orr.w	r2, r3, #32
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e023      	b.n	800a1da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	0c1b      	lsrs	r3, r3, #16
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d10d      	bne.n	800a1b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	43da      	mvns	r2, r3
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	bf0c      	ite	eq
 800a1ae:	2301      	moveq	r3, #1
 800a1b0:	2300      	movne	r3, #0
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	e00c      	b.n	800a1d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	43da      	mvns	r2, r3
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	bf0c      	ite	eq
 800a1ca:	2301      	moveq	r3, #1
 800a1cc:	2300      	movne	r3, #0
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	79fb      	ldrb	r3, [r7, #7]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d0b6      	beq.n	800a146 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b084      	sub	sp, #16
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	60f8      	str	r0, [r7, #12]
 800a1ea:	60b9      	str	r1, [r7, #8]
 800a1ec:	607a      	str	r2, [r7, #4]
 800a1ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a1f0:	e051      	b.n	800a296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	695b      	ldr	r3, [r3, #20]
 800a1f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a200:	d123      	bne.n	800a24a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a210:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a21a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2220      	movs	r2, #32
 800a226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a236:	f043 0204 	orr.w	r2, r3, #4
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e046      	b.n	800a2d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a250:	d021      	beq.n	800a296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a252:	f7fe fd5d 	bl	8008d10 <HAL_GetTick>
 800a256:	4602      	mov	r2, r0
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d302      	bcc.n	800a268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d116      	bne.n	800a296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2220      	movs	r2, #32
 800a272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2200      	movs	r2, #0
 800a27a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a282:	f043 0220 	orr.w	r2, r3, #32
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e020      	b.n	800a2d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	0c1b      	lsrs	r3, r3, #16
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d10c      	bne.n	800a2ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	695b      	ldr	r3, [r3, #20]
 800a2a6:	43da      	mvns	r2, r3
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	4013      	ands	r3, r2
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	bf14      	ite	ne
 800a2b2:	2301      	movne	r3, #1
 800a2b4:	2300      	moveq	r3, #0
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	e00b      	b.n	800a2d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	699b      	ldr	r3, [r3, #24]
 800a2c0:	43da      	mvns	r2, r3
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	bf14      	ite	ne
 800a2cc:	2301      	movne	r3, #1
 800a2ce:	2300      	moveq	r3, #0
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d18d      	bne.n	800a1f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a2ec:	e02d      	b.n	800a34a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f000 f8ce 	bl	800a490 <I2C_IsAcknowledgeFailed>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d001      	beq.n	800a2fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e02d      	b.n	800a35a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a304:	d021      	beq.n	800a34a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a306:	f7fe fd03 	bl	8008d10 <HAL_GetTick>
 800a30a:	4602      	mov	r2, r0
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	429a      	cmp	r2, r3
 800a314:	d302      	bcc.n	800a31c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d116      	bne.n	800a34a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2200      	movs	r2, #0
 800a320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2220      	movs	r2, #32
 800a326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a336:	f043 0220 	orr.w	r2, r3, #32
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e007      	b.n	800a35a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	695b      	ldr	r3, [r3, #20]
 800a350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a354:	2b80      	cmp	r3, #128	; 0x80
 800a356:	d1ca      	bne.n	800a2ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b084      	sub	sp, #16
 800a366:	af00      	add	r7, sp, #0
 800a368:	60f8      	str	r0, [r7, #12]
 800a36a:	60b9      	str	r1, [r7, #8]
 800a36c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a36e:	e02d      	b.n	800a3cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f000 f88d 	bl	800a490 <I2C_IsAcknowledgeFailed>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d001      	beq.n	800a380 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e02d      	b.n	800a3dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a386:	d021      	beq.n	800a3cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a388:	f7fe fcc2 	bl	8008d10 <HAL_GetTick>
 800a38c:	4602      	mov	r2, r0
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	1ad3      	subs	r3, r2, r3
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	429a      	cmp	r2, r3
 800a396:	d302      	bcc.n	800a39e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d116      	bne.n	800a3cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2220      	movs	r2, #32
 800a3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b8:	f043 0220 	orr.w	r2, r3, #32
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e007      	b.n	800a3dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	f003 0304 	and.w	r3, r3, #4
 800a3d6:	2b04      	cmp	r3, #4
 800a3d8:	d1ca      	bne.n	800a370 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a3f0:	e042      	b.n	800a478 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	695b      	ldr	r3, [r3, #20]
 800a3f8:	f003 0310 	and.w	r3, r3, #16
 800a3fc:	2b10      	cmp	r3, #16
 800a3fe:	d119      	bne.n	800a434 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f06f 0210 	mvn.w	r2, #16
 800a408:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2220      	movs	r2, #32
 800a414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	e029      	b.n	800a488 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a434:	f7fe fc6c 	bl	8008d10 <HAL_GetTick>
 800a438:	4602      	mov	r2, r0
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	68ba      	ldr	r2, [r7, #8]
 800a440:	429a      	cmp	r2, r3
 800a442:	d302      	bcc.n	800a44a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d116      	bne.n	800a478 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2220      	movs	r2, #32
 800a454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a464:	f043 0220 	orr.w	r2, r3, #32
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	e007      	b.n	800a488 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	695b      	ldr	r3, [r3, #20]
 800a47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a482:	2b40      	cmp	r3, #64	; 0x40
 800a484:	d1b5      	bne.n	800a3f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	695b      	ldr	r3, [r3, #20]
 800a49e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4a6:	d11b      	bne.n	800a4e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a4b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2220      	movs	r2, #32
 800a4bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4cc:	f043 0204 	orr.w	r2, r3, #4
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e000      	b.n	800a4e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	370c      	adds	r7, #12
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
	...

0800a4f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d101      	bne.n	800a502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e264      	b.n	800a9cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f003 0301 	and.w	r3, r3, #1
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d075      	beq.n	800a5fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a50e:	4ba3      	ldr	r3, [pc, #652]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	f003 030c 	and.w	r3, r3, #12
 800a516:	2b04      	cmp	r3, #4
 800a518:	d00c      	beq.n	800a534 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a51a:	4ba0      	ldr	r3, [pc, #640]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a522:	2b08      	cmp	r3, #8
 800a524:	d112      	bne.n	800a54c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a526:	4b9d      	ldr	r3, [pc, #628]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a52e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a532:	d10b      	bne.n	800a54c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a534:	4b99      	ldr	r3, [pc, #612]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d05b      	beq.n	800a5f8 <HAL_RCC_OscConfig+0x108>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d157      	bne.n	800a5f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	e23f      	b.n	800a9cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a554:	d106      	bne.n	800a564 <HAL_RCC_OscConfig+0x74>
 800a556:	4b91      	ldr	r3, [pc, #580]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a90      	ldr	r2, [pc, #576]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a55c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a560:	6013      	str	r3, [r2, #0]
 800a562:	e01d      	b.n	800a5a0 <HAL_RCC_OscConfig+0xb0>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a56c:	d10c      	bne.n	800a588 <HAL_RCC_OscConfig+0x98>
 800a56e:	4b8b      	ldr	r3, [pc, #556]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a8a      	ldr	r2, [pc, #552]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a578:	6013      	str	r3, [r2, #0]
 800a57a:	4b88      	ldr	r3, [pc, #544]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a87      	ldr	r2, [pc, #540]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a584:	6013      	str	r3, [r2, #0]
 800a586:	e00b      	b.n	800a5a0 <HAL_RCC_OscConfig+0xb0>
 800a588:	4b84      	ldr	r3, [pc, #528]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a83      	ldr	r2, [pc, #524]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a58e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a592:	6013      	str	r3, [r2, #0]
 800a594:	4b81      	ldr	r3, [pc, #516]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a80      	ldr	r2, [pc, #512]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a59a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a59e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d013      	beq.n	800a5d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5a8:	f7fe fbb2 	bl	8008d10 <HAL_GetTick>
 800a5ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5ae:	e008      	b.n	800a5c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a5b0:	f7fe fbae 	bl	8008d10 <HAL_GetTick>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	2b64      	cmp	r3, #100	; 0x64
 800a5bc:	d901      	bls.n	800a5c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	e204      	b.n	800a9cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5c2:	4b76      	ldr	r3, [pc, #472]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d0f0      	beq.n	800a5b0 <HAL_RCC_OscConfig+0xc0>
 800a5ce:	e014      	b.n	800a5fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5d0:	f7fe fb9e 	bl	8008d10 <HAL_GetTick>
 800a5d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a5d6:	e008      	b.n	800a5ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a5d8:	f7fe fb9a 	bl	8008d10 <HAL_GetTick>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	2b64      	cmp	r3, #100	; 0x64
 800a5e4:	d901      	bls.n	800a5ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	e1f0      	b.n	800a9cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a5ea:	4b6c      	ldr	r3, [pc, #432]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d1f0      	bne.n	800a5d8 <HAL_RCC_OscConfig+0xe8>
 800a5f6:	e000      	b.n	800a5fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f003 0302 	and.w	r3, r3, #2
 800a602:	2b00      	cmp	r3, #0
 800a604:	d063      	beq.n	800a6ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a606:	4b65      	ldr	r3, [pc, #404]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	f003 030c 	and.w	r3, r3, #12
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00b      	beq.n	800a62a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a612:	4b62      	ldr	r3, [pc, #392]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a61a:	2b08      	cmp	r3, #8
 800a61c:	d11c      	bne.n	800a658 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a61e:	4b5f      	ldr	r3, [pc, #380]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a626:	2b00      	cmp	r3, #0
 800a628:	d116      	bne.n	800a658 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a62a:	4b5c      	ldr	r3, [pc, #368]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f003 0302 	and.w	r3, r3, #2
 800a632:	2b00      	cmp	r3, #0
 800a634:	d005      	beq.n	800a642 <HAL_RCC_OscConfig+0x152>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d001      	beq.n	800a642 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e1c4      	b.n	800a9cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a642:	4b56      	ldr	r3, [pc, #344]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	00db      	lsls	r3, r3, #3
 800a650:	4952      	ldr	r1, [pc, #328]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a652:	4313      	orrs	r3, r2
 800a654:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a656:	e03a      	b.n	800a6ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d020      	beq.n	800a6a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a660:	4b4f      	ldr	r3, [pc, #316]	; (800a7a0 <HAL_RCC_OscConfig+0x2b0>)
 800a662:	2201      	movs	r2, #1
 800a664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a666:	f7fe fb53 	bl	8008d10 <HAL_GetTick>
 800a66a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a66c:	e008      	b.n	800a680 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a66e:	f7fe fb4f 	bl	8008d10 <HAL_GetTick>
 800a672:	4602      	mov	r2, r0
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	2b02      	cmp	r3, #2
 800a67a:	d901      	bls.n	800a680 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a67c:	2303      	movs	r3, #3
 800a67e:	e1a5      	b.n	800a9cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a680:	4b46      	ldr	r3, [pc, #280]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 0302 	and.w	r3, r3, #2
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d0f0      	beq.n	800a66e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a68c:	4b43      	ldr	r3, [pc, #268]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	00db      	lsls	r3, r3, #3
 800a69a:	4940      	ldr	r1, [pc, #256]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a69c:	4313      	orrs	r3, r2
 800a69e:	600b      	str	r3, [r1, #0]
 800a6a0:	e015      	b.n	800a6ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a6a2:	4b3f      	ldr	r3, [pc, #252]	; (800a7a0 <HAL_RCC_OscConfig+0x2b0>)
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6a8:	f7fe fb32 	bl	8008d10 <HAL_GetTick>
 800a6ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a6ae:	e008      	b.n	800a6c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a6b0:	f7fe fb2e 	bl	8008d10 <HAL_GetTick>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d901      	bls.n	800a6c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e184      	b.n	800a9cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a6c2:	4b36      	ldr	r3, [pc, #216]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f003 0302 	and.w	r3, r3, #2
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1f0      	bne.n	800a6b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 0308 	and.w	r3, r3, #8
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d030      	beq.n	800a73c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	695b      	ldr	r3, [r3, #20]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d016      	beq.n	800a710 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a6e2:	4b30      	ldr	r3, [pc, #192]	; (800a7a4 <HAL_RCC_OscConfig+0x2b4>)
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6e8:	f7fe fb12 	bl	8008d10 <HAL_GetTick>
 800a6ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a6ee:	e008      	b.n	800a702 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a6f0:	f7fe fb0e 	bl	8008d10 <HAL_GetTick>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d901      	bls.n	800a702 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a6fe:	2303      	movs	r3, #3
 800a700:	e164      	b.n	800a9cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a702:	4b26      	ldr	r3, [pc, #152]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a706:	f003 0302 	and.w	r3, r3, #2
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d0f0      	beq.n	800a6f0 <HAL_RCC_OscConfig+0x200>
 800a70e:	e015      	b.n	800a73c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a710:	4b24      	ldr	r3, [pc, #144]	; (800a7a4 <HAL_RCC_OscConfig+0x2b4>)
 800a712:	2200      	movs	r2, #0
 800a714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a716:	f7fe fafb 	bl	8008d10 <HAL_GetTick>
 800a71a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a71c:	e008      	b.n	800a730 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a71e:	f7fe faf7 	bl	8008d10 <HAL_GetTick>
 800a722:	4602      	mov	r2, r0
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d901      	bls.n	800a730 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a72c:	2303      	movs	r3, #3
 800a72e:	e14d      	b.n	800a9cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a730:	4b1a      	ldr	r3, [pc, #104]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a734:	f003 0302 	and.w	r3, r3, #2
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d1f0      	bne.n	800a71e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 0304 	and.w	r3, r3, #4
 800a744:	2b00      	cmp	r3, #0
 800a746:	f000 80a0 	beq.w	800a88a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a74a:	2300      	movs	r3, #0
 800a74c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a74e:	4b13      	ldr	r3, [pc, #76]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10f      	bne.n	800a77a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a75a:	2300      	movs	r3, #0
 800a75c:	60bb      	str	r3, [r7, #8]
 800a75e:	4b0f      	ldr	r3, [pc, #60]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a762:	4a0e      	ldr	r2, [pc, #56]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a768:	6413      	str	r3, [r2, #64]	; 0x40
 800a76a:	4b0c      	ldr	r3, [pc, #48]	; (800a79c <HAL_RCC_OscConfig+0x2ac>)
 800a76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a76e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a772:	60bb      	str	r3, [r7, #8]
 800a774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a776:	2301      	movs	r3, #1
 800a778:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a77a:	4b0b      	ldr	r3, [pc, #44]	; (800a7a8 <HAL_RCC_OscConfig+0x2b8>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a782:	2b00      	cmp	r3, #0
 800a784:	d121      	bne.n	800a7ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a786:	4b08      	ldr	r3, [pc, #32]	; (800a7a8 <HAL_RCC_OscConfig+0x2b8>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a07      	ldr	r2, [pc, #28]	; (800a7a8 <HAL_RCC_OscConfig+0x2b8>)
 800a78c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a792:	f7fe fabd 	bl	8008d10 <HAL_GetTick>
 800a796:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a798:	e011      	b.n	800a7be <HAL_RCC_OscConfig+0x2ce>
 800a79a:	bf00      	nop
 800a79c:	40023800 	.word	0x40023800
 800a7a0:	42470000 	.word	0x42470000
 800a7a4:	42470e80 	.word	0x42470e80
 800a7a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7ac:	f7fe fab0 	bl	8008d10 <HAL_GetTick>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	d901      	bls.n	800a7be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	e106      	b.n	800a9cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a7be:	4b85      	ldr	r3, [pc, #532]	; (800a9d4 <HAL_RCC_OscConfig+0x4e4>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d0f0      	beq.n	800a7ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d106      	bne.n	800a7e0 <HAL_RCC_OscConfig+0x2f0>
 800a7d2:	4b81      	ldr	r3, [pc, #516]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a7d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7d6:	4a80      	ldr	r2, [pc, #512]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a7d8:	f043 0301 	orr.w	r3, r3, #1
 800a7dc:	6713      	str	r3, [r2, #112]	; 0x70
 800a7de:	e01c      	b.n	800a81a <HAL_RCC_OscConfig+0x32a>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	2b05      	cmp	r3, #5
 800a7e6:	d10c      	bne.n	800a802 <HAL_RCC_OscConfig+0x312>
 800a7e8:	4b7b      	ldr	r3, [pc, #492]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a7ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ec:	4a7a      	ldr	r2, [pc, #488]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a7ee:	f043 0304 	orr.w	r3, r3, #4
 800a7f2:	6713      	str	r3, [r2, #112]	; 0x70
 800a7f4:	4b78      	ldr	r3, [pc, #480]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a7f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7f8:	4a77      	ldr	r2, [pc, #476]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a7fa:	f043 0301 	orr.w	r3, r3, #1
 800a7fe:	6713      	str	r3, [r2, #112]	; 0x70
 800a800:	e00b      	b.n	800a81a <HAL_RCC_OscConfig+0x32a>
 800a802:	4b75      	ldr	r3, [pc, #468]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a806:	4a74      	ldr	r2, [pc, #464]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a808:	f023 0301 	bic.w	r3, r3, #1
 800a80c:	6713      	str	r3, [r2, #112]	; 0x70
 800a80e:	4b72      	ldr	r3, [pc, #456]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a812:	4a71      	ldr	r2, [pc, #452]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a814:	f023 0304 	bic.w	r3, r3, #4
 800a818:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d015      	beq.n	800a84e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a822:	f7fe fa75 	bl	8008d10 <HAL_GetTick>
 800a826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a828:	e00a      	b.n	800a840 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a82a:	f7fe fa71 	bl	8008d10 <HAL_GetTick>
 800a82e:	4602      	mov	r2, r0
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	1ad3      	subs	r3, r2, r3
 800a834:	f241 3288 	movw	r2, #5000	; 0x1388
 800a838:	4293      	cmp	r3, r2
 800a83a:	d901      	bls.n	800a840 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a83c:	2303      	movs	r3, #3
 800a83e:	e0c5      	b.n	800a9cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a840:	4b65      	ldr	r3, [pc, #404]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a844:	f003 0302 	and.w	r3, r3, #2
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d0ee      	beq.n	800a82a <HAL_RCC_OscConfig+0x33a>
 800a84c:	e014      	b.n	800a878 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a84e:	f7fe fa5f 	bl	8008d10 <HAL_GetTick>
 800a852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a854:	e00a      	b.n	800a86c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a856:	f7fe fa5b 	bl	8008d10 <HAL_GetTick>
 800a85a:	4602      	mov	r2, r0
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	1ad3      	subs	r3, r2, r3
 800a860:	f241 3288 	movw	r2, #5000	; 0x1388
 800a864:	4293      	cmp	r3, r2
 800a866:	d901      	bls.n	800a86c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a868:	2303      	movs	r3, #3
 800a86a:	e0af      	b.n	800a9cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a86c:	4b5a      	ldr	r3, [pc, #360]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a86e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a870:	f003 0302 	and.w	r3, r3, #2
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1ee      	bne.n	800a856 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a878:	7dfb      	ldrb	r3, [r7, #23]
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d105      	bne.n	800a88a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a87e:	4b56      	ldr	r3, [pc, #344]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a882:	4a55      	ldr	r2, [pc, #340]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a888:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f000 809b 	beq.w	800a9ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a894:	4b50      	ldr	r3, [pc, #320]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	f003 030c 	and.w	r3, r3, #12
 800a89c:	2b08      	cmp	r3, #8
 800a89e:	d05c      	beq.n	800a95a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d141      	bne.n	800a92c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8a8:	4b4c      	ldr	r3, [pc, #304]	; (800a9dc <HAL_RCC_OscConfig+0x4ec>)
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8ae:	f7fe fa2f 	bl	8008d10 <HAL_GetTick>
 800a8b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a8b4:	e008      	b.n	800a8c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a8b6:	f7fe fa2b 	bl	8008d10 <HAL_GetTick>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	1ad3      	subs	r3, r2, r3
 800a8c0:	2b02      	cmp	r3, #2
 800a8c2:	d901      	bls.n	800a8c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a8c4:	2303      	movs	r3, #3
 800a8c6:	e081      	b.n	800a9cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a8c8:	4b43      	ldr	r3, [pc, #268]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d1f0      	bne.n	800a8b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	69da      	ldr	r2, [r3, #28]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a1b      	ldr	r3, [r3, #32]
 800a8dc:	431a      	orrs	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e2:	019b      	lsls	r3, r3, #6
 800a8e4:	431a      	orrs	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ea:	085b      	lsrs	r3, r3, #1
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	041b      	lsls	r3, r3, #16
 800a8f0:	431a      	orrs	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f6:	061b      	lsls	r3, r3, #24
 800a8f8:	4937      	ldr	r1, [pc, #220]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a8fe:	4b37      	ldr	r3, [pc, #220]	; (800a9dc <HAL_RCC_OscConfig+0x4ec>)
 800a900:	2201      	movs	r2, #1
 800a902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a904:	f7fe fa04 	bl	8008d10 <HAL_GetTick>
 800a908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a90a:	e008      	b.n	800a91e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a90c:	f7fe fa00 	bl	8008d10 <HAL_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	2b02      	cmp	r3, #2
 800a918:	d901      	bls.n	800a91e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e056      	b.n	800a9cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a91e:	4b2e      	ldr	r3, [pc, #184]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a926:	2b00      	cmp	r3, #0
 800a928:	d0f0      	beq.n	800a90c <HAL_RCC_OscConfig+0x41c>
 800a92a:	e04e      	b.n	800a9ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a92c:	4b2b      	ldr	r3, [pc, #172]	; (800a9dc <HAL_RCC_OscConfig+0x4ec>)
 800a92e:	2200      	movs	r2, #0
 800a930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a932:	f7fe f9ed 	bl	8008d10 <HAL_GetTick>
 800a936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a938:	e008      	b.n	800a94c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a93a:	f7fe f9e9 	bl	8008d10 <HAL_GetTick>
 800a93e:	4602      	mov	r2, r0
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	1ad3      	subs	r3, r2, r3
 800a944:	2b02      	cmp	r3, #2
 800a946:	d901      	bls.n	800a94c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a948:	2303      	movs	r3, #3
 800a94a:	e03f      	b.n	800a9cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a94c:	4b22      	ldr	r3, [pc, #136]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1f0      	bne.n	800a93a <HAL_RCC_OscConfig+0x44a>
 800a958:	e037      	b.n	800a9ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d101      	bne.n	800a966 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	e032      	b.n	800a9cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a966:	4b1c      	ldr	r3, [pc, #112]	; (800a9d8 <HAL_RCC_OscConfig+0x4e8>)
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	699b      	ldr	r3, [r3, #24]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d028      	beq.n	800a9c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a97e:	429a      	cmp	r2, r3
 800a980:	d121      	bne.n	800a9c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d11a      	bne.n	800a9c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a996:	4013      	ands	r3, r2
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a99c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d111      	bne.n	800a9c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ac:	085b      	lsrs	r3, r3, #1
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d107      	bne.n	800a9c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d001      	beq.n	800a9ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e000      	b.n	800a9cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3718      	adds	r7, #24
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	40007000 	.word	0x40007000
 800a9d8:	40023800 	.word	0x40023800
 800a9dc:	42470060 	.word	0x42470060

0800a9e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d101      	bne.n	800a9f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e0cc      	b.n	800ab8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a9f4:	4b68      	ldr	r3, [pc, #416]	; (800ab98 <HAL_RCC_ClockConfig+0x1b8>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f003 0307 	and.w	r3, r3, #7
 800a9fc:	683a      	ldr	r2, [r7, #0]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d90c      	bls.n	800aa1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa02:	4b65      	ldr	r3, [pc, #404]	; (800ab98 <HAL_RCC_ClockConfig+0x1b8>)
 800aa04:	683a      	ldr	r2, [r7, #0]
 800aa06:	b2d2      	uxtb	r2, r2
 800aa08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa0a:	4b63      	ldr	r3, [pc, #396]	; (800ab98 <HAL_RCC_ClockConfig+0x1b8>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f003 0307 	and.w	r3, r3, #7
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d001      	beq.n	800aa1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e0b8      	b.n	800ab8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0302 	and.w	r3, r3, #2
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d020      	beq.n	800aa6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 0304 	and.w	r3, r3, #4
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d005      	beq.n	800aa40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aa34:	4b59      	ldr	r3, [pc, #356]	; (800ab9c <HAL_RCC_ClockConfig+0x1bc>)
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	4a58      	ldr	r2, [pc, #352]	; (800ab9c <HAL_RCC_ClockConfig+0x1bc>)
 800aa3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800aa3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 0308 	and.w	r3, r3, #8
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d005      	beq.n	800aa58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aa4c:	4b53      	ldr	r3, [pc, #332]	; (800ab9c <HAL_RCC_ClockConfig+0x1bc>)
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	4a52      	ldr	r2, [pc, #328]	; (800ab9c <HAL_RCC_ClockConfig+0x1bc>)
 800aa52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800aa56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa58:	4b50      	ldr	r3, [pc, #320]	; (800ab9c <HAL_RCC_ClockConfig+0x1bc>)
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	494d      	ldr	r1, [pc, #308]	; (800ab9c <HAL_RCC_ClockConfig+0x1bc>)
 800aa66:	4313      	orrs	r3, r2
 800aa68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f003 0301 	and.w	r3, r3, #1
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d044      	beq.n	800ab00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d107      	bne.n	800aa8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa7e:	4b47      	ldr	r3, [pc, #284]	; (800ab9c <HAL_RCC_ClockConfig+0x1bc>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d119      	bne.n	800aabe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e07f      	b.n	800ab8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d003      	beq.n	800aa9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aa9a:	2b03      	cmp	r3, #3
 800aa9c:	d107      	bne.n	800aaae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa9e:	4b3f      	ldr	r3, [pc, #252]	; (800ab9c <HAL_RCC_ClockConfig+0x1bc>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d109      	bne.n	800aabe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e06f      	b.n	800ab8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aaae:	4b3b      	ldr	r3, [pc, #236]	; (800ab9c <HAL_RCC_ClockConfig+0x1bc>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 0302 	and.w	r3, r3, #2
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d101      	bne.n	800aabe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e067      	b.n	800ab8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aabe:	4b37      	ldr	r3, [pc, #220]	; (800ab9c <HAL_RCC_ClockConfig+0x1bc>)
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	f023 0203 	bic.w	r2, r3, #3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	4934      	ldr	r1, [pc, #208]	; (800ab9c <HAL_RCC_ClockConfig+0x1bc>)
 800aacc:	4313      	orrs	r3, r2
 800aace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aad0:	f7fe f91e 	bl	8008d10 <HAL_GetTick>
 800aad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aad6:	e00a      	b.n	800aaee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aad8:	f7fe f91a 	bl	8008d10 <HAL_GetTick>
 800aadc:	4602      	mov	r2, r0
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d901      	bls.n	800aaee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aaea:	2303      	movs	r3, #3
 800aaec:	e04f      	b.n	800ab8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aaee:	4b2b      	ldr	r3, [pc, #172]	; (800ab9c <HAL_RCC_ClockConfig+0x1bc>)
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	f003 020c 	and.w	r2, r3, #12
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d1eb      	bne.n	800aad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ab00:	4b25      	ldr	r3, [pc, #148]	; (800ab98 <HAL_RCC_ClockConfig+0x1b8>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f003 0307 	and.w	r3, r3, #7
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d20c      	bcs.n	800ab28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab0e:	4b22      	ldr	r3, [pc, #136]	; (800ab98 <HAL_RCC_ClockConfig+0x1b8>)
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	b2d2      	uxtb	r2, r2
 800ab14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab16:	4b20      	ldr	r3, [pc, #128]	; (800ab98 <HAL_RCC_ClockConfig+0x1b8>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 0307 	and.w	r3, r3, #7
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d001      	beq.n	800ab28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ab24:	2301      	movs	r3, #1
 800ab26:	e032      	b.n	800ab8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 0304 	and.w	r3, r3, #4
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d008      	beq.n	800ab46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ab34:	4b19      	ldr	r3, [pc, #100]	; (800ab9c <HAL_RCC_ClockConfig+0x1bc>)
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	4916      	ldr	r1, [pc, #88]	; (800ab9c <HAL_RCC_ClockConfig+0x1bc>)
 800ab42:	4313      	orrs	r3, r2
 800ab44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f003 0308 	and.w	r3, r3, #8
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d009      	beq.n	800ab66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ab52:	4b12      	ldr	r3, [pc, #72]	; (800ab9c <HAL_RCC_ClockConfig+0x1bc>)
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	00db      	lsls	r3, r3, #3
 800ab60:	490e      	ldr	r1, [pc, #56]	; (800ab9c <HAL_RCC_ClockConfig+0x1bc>)
 800ab62:	4313      	orrs	r3, r2
 800ab64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ab66:	f000 f821 	bl	800abac <HAL_RCC_GetSysClockFreq>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	4b0b      	ldr	r3, [pc, #44]	; (800ab9c <HAL_RCC_ClockConfig+0x1bc>)
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	091b      	lsrs	r3, r3, #4
 800ab72:	f003 030f 	and.w	r3, r3, #15
 800ab76:	490a      	ldr	r1, [pc, #40]	; (800aba0 <HAL_RCC_ClockConfig+0x1c0>)
 800ab78:	5ccb      	ldrb	r3, [r1, r3]
 800ab7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab7e:	4a09      	ldr	r2, [pc, #36]	; (800aba4 <HAL_RCC_ClockConfig+0x1c4>)
 800ab80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ab82:	4b09      	ldr	r3, [pc, #36]	; (800aba8 <HAL_RCC_ClockConfig+0x1c8>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7f6 fcbc 	bl	8001504 <HAL_InitTick>

  return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	40023c00 	.word	0x40023c00
 800ab9c:	40023800 	.word	0x40023800
 800aba0:	0801cd18 	.word	0x0801cd18
 800aba4:	20001228 	.word	0x20001228
 800aba8:	200013bc 	.word	0x200013bc

0800abac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800abac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800abb0:	b084      	sub	sp, #16
 800abb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800abb4:	2300      	movs	r3, #0
 800abb6:	607b      	str	r3, [r7, #4]
 800abb8:	2300      	movs	r3, #0
 800abba:	60fb      	str	r3, [r7, #12]
 800abbc:	2300      	movs	r3, #0
 800abbe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800abc0:	2300      	movs	r3, #0
 800abc2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800abc4:	4b67      	ldr	r3, [pc, #412]	; (800ad64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	f003 030c 	and.w	r3, r3, #12
 800abcc:	2b08      	cmp	r3, #8
 800abce:	d00d      	beq.n	800abec <HAL_RCC_GetSysClockFreq+0x40>
 800abd0:	2b08      	cmp	r3, #8
 800abd2:	f200 80bd 	bhi.w	800ad50 <HAL_RCC_GetSysClockFreq+0x1a4>
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d002      	beq.n	800abe0 <HAL_RCC_GetSysClockFreq+0x34>
 800abda:	2b04      	cmp	r3, #4
 800abdc:	d003      	beq.n	800abe6 <HAL_RCC_GetSysClockFreq+0x3a>
 800abde:	e0b7      	b.n	800ad50 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800abe0:	4b61      	ldr	r3, [pc, #388]	; (800ad68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800abe2:	60bb      	str	r3, [r7, #8]
       break;
 800abe4:	e0b7      	b.n	800ad56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800abe6:	4b61      	ldr	r3, [pc, #388]	; (800ad6c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800abe8:	60bb      	str	r3, [r7, #8]
      break;
 800abea:	e0b4      	b.n	800ad56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800abec:	4b5d      	ldr	r3, [pc, #372]	; (800ad64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abf4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800abf6:	4b5b      	ldr	r3, [pc, #364]	; (800ad64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d04d      	beq.n	800ac9e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ac02:	4b58      	ldr	r3, [pc, #352]	; (800ad64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	099b      	lsrs	r3, r3, #6
 800ac08:	461a      	mov	r2, r3
 800ac0a:	f04f 0300 	mov.w	r3, #0
 800ac0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ac12:	f04f 0100 	mov.w	r1, #0
 800ac16:	ea02 0800 	and.w	r8, r2, r0
 800ac1a:	ea03 0901 	and.w	r9, r3, r1
 800ac1e:	4640      	mov	r0, r8
 800ac20:	4649      	mov	r1, r9
 800ac22:	f04f 0200 	mov.w	r2, #0
 800ac26:	f04f 0300 	mov.w	r3, #0
 800ac2a:	014b      	lsls	r3, r1, #5
 800ac2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ac30:	0142      	lsls	r2, r0, #5
 800ac32:	4610      	mov	r0, r2
 800ac34:	4619      	mov	r1, r3
 800ac36:	ebb0 0008 	subs.w	r0, r0, r8
 800ac3a:	eb61 0109 	sbc.w	r1, r1, r9
 800ac3e:	f04f 0200 	mov.w	r2, #0
 800ac42:	f04f 0300 	mov.w	r3, #0
 800ac46:	018b      	lsls	r3, r1, #6
 800ac48:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ac4c:	0182      	lsls	r2, r0, #6
 800ac4e:	1a12      	subs	r2, r2, r0
 800ac50:	eb63 0301 	sbc.w	r3, r3, r1
 800ac54:	f04f 0000 	mov.w	r0, #0
 800ac58:	f04f 0100 	mov.w	r1, #0
 800ac5c:	00d9      	lsls	r1, r3, #3
 800ac5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ac62:	00d0      	lsls	r0, r2, #3
 800ac64:	4602      	mov	r2, r0
 800ac66:	460b      	mov	r3, r1
 800ac68:	eb12 0208 	adds.w	r2, r2, r8
 800ac6c:	eb43 0309 	adc.w	r3, r3, r9
 800ac70:	f04f 0000 	mov.w	r0, #0
 800ac74:	f04f 0100 	mov.w	r1, #0
 800ac78:	0259      	lsls	r1, r3, #9
 800ac7a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800ac7e:	0250      	lsls	r0, r2, #9
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	4610      	mov	r0, r2
 800ac86:	4619      	mov	r1, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	f04f 0300 	mov.w	r3, #0
 800ac90:	f7f5 ffe2 	bl	8000c58 <__aeabi_uldivmod>
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	4613      	mov	r3, r2
 800ac9a:	60fb      	str	r3, [r7, #12]
 800ac9c:	e04a      	b.n	800ad34 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ac9e:	4b31      	ldr	r3, [pc, #196]	; (800ad64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	099b      	lsrs	r3, r3, #6
 800aca4:	461a      	mov	r2, r3
 800aca6:	f04f 0300 	mov.w	r3, #0
 800acaa:	f240 10ff 	movw	r0, #511	; 0x1ff
 800acae:	f04f 0100 	mov.w	r1, #0
 800acb2:	ea02 0400 	and.w	r4, r2, r0
 800acb6:	ea03 0501 	and.w	r5, r3, r1
 800acba:	4620      	mov	r0, r4
 800acbc:	4629      	mov	r1, r5
 800acbe:	f04f 0200 	mov.w	r2, #0
 800acc2:	f04f 0300 	mov.w	r3, #0
 800acc6:	014b      	lsls	r3, r1, #5
 800acc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800accc:	0142      	lsls	r2, r0, #5
 800acce:	4610      	mov	r0, r2
 800acd0:	4619      	mov	r1, r3
 800acd2:	1b00      	subs	r0, r0, r4
 800acd4:	eb61 0105 	sbc.w	r1, r1, r5
 800acd8:	f04f 0200 	mov.w	r2, #0
 800acdc:	f04f 0300 	mov.w	r3, #0
 800ace0:	018b      	lsls	r3, r1, #6
 800ace2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ace6:	0182      	lsls	r2, r0, #6
 800ace8:	1a12      	subs	r2, r2, r0
 800acea:	eb63 0301 	sbc.w	r3, r3, r1
 800acee:	f04f 0000 	mov.w	r0, #0
 800acf2:	f04f 0100 	mov.w	r1, #0
 800acf6:	00d9      	lsls	r1, r3, #3
 800acf8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800acfc:	00d0      	lsls	r0, r2, #3
 800acfe:	4602      	mov	r2, r0
 800ad00:	460b      	mov	r3, r1
 800ad02:	1912      	adds	r2, r2, r4
 800ad04:	eb45 0303 	adc.w	r3, r5, r3
 800ad08:	f04f 0000 	mov.w	r0, #0
 800ad0c:	f04f 0100 	mov.w	r1, #0
 800ad10:	0299      	lsls	r1, r3, #10
 800ad12:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ad16:	0290      	lsls	r0, r2, #10
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	4619      	mov	r1, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	461a      	mov	r2, r3
 800ad24:	f04f 0300 	mov.w	r3, #0
 800ad28:	f7f5 ff96 	bl	8000c58 <__aeabi_uldivmod>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	4613      	mov	r3, r2
 800ad32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ad34:	4b0b      	ldr	r3, [pc, #44]	; (800ad64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	0c1b      	lsrs	r3, r3, #16
 800ad3a:	f003 0303 	and.w	r3, r3, #3
 800ad3e:	3301      	adds	r3, #1
 800ad40:	005b      	lsls	r3, r3, #1
 800ad42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad4c:	60bb      	str	r3, [r7, #8]
      break;
 800ad4e:	e002      	b.n	800ad56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ad50:	4b05      	ldr	r3, [pc, #20]	; (800ad68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ad52:	60bb      	str	r3, [r7, #8]
      break;
 800ad54:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ad56:	68bb      	ldr	r3, [r7, #8]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ad62:	bf00      	nop
 800ad64:	40023800 	.word	0x40023800
 800ad68:	00f42400 	.word	0x00f42400
 800ad6c:	007a1200 	.word	0x007a1200

0800ad70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad70:	b480      	push	{r7}
 800ad72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad74:	4b03      	ldr	r3, [pc, #12]	; (800ad84 <HAL_RCC_GetHCLKFreq+0x14>)
 800ad76:	681b      	ldr	r3, [r3, #0]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop
 800ad84:	20001228 	.word	0x20001228

0800ad88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ad8c:	f7ff fff0 	bl	800ad70 <HAL_RCC_GetHCLKFreq>
 800ad90:	4602      	mov	r2, r0
 800ad92:	4b05      	ldr	r3, [pc, #20]	; (800ada8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	0a9b      	lsrs	r3, r3, #10
 800ad98:	f003 0307 	and.w	r3, r3, #7
 800ad9c:	4903      	ldr	r1, [pc, #12]	; (800adac <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad9e:	5ccb      	ldrb	r3, [r1, r3]
 800ada0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	40023800 	.word	0x40023800
 800adac:	0801cd28 	.word	0x0801cd28

0800adb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800adb4:	f7ff ffdc 	bl	800ad70 <HAL_RCC_GetHCLKFreq>
 800adb8:	4602      	mov	r2, r0
 800adba:	4b05      	ldr	r3, [pc, #20]	; (800add0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	0b5b      	lsrs	r3, r3, #13
 800adc0:	f003 0307 	and.w	r3, r3, #7
 800adc4:	4903      	ldr	r1, [pc, #12]	; (800add4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800adc6:	5ccb      	ldrb	r3, [r1, r3]
 800adc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800adcc:	4618      	mov	r0, r3
 800adce:	bd80      	pop	{r7, pc}
 800add0:	40023800 	.word	0x40023800
 800add4:	0801cd28 	.word	0x0801cd28

0800add8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	220f      	movs	r2, #15
 800ade6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ade8:	4b12      	ldr	r3, [pc, #72]	; (800ae34 <HAL_RCC_GetClockConfig+0x5c>)
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	f003 0203 	and.w	r2, r3, #3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800adf4:	4b0f      	ldr	r3, [pc, #60]	; (800ae34 <HAL_RCC_GetClockConfig+0x5c>)
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ae00:	4b0c      	ldr	r3, [pc, #48]	; (800ae34 <HAL_RCC_GetClockConfig+0x5c>)
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ae0c:	4b09      	ldr	r3, [pc, #36]	; (800ae34 <HAL_RCC_GetClockConfig+0x5c>)
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	08db      	lsrs	r3, r3, #3
 800ae12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ae1a:	4b07      	ldr	r3, [pc, #28]	; (800ae38 <HAL_RCC_GetClockConfig+0x60>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0207 	and.w	r2, r3, #7
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	601a      	str	r2, [r3, #0]
}
 800ae26:	bf00      	nop
 800ae28:	370c      	adds	r7, #12
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	40023800 	.word	0x40023800
 800ae38:	40023c00 	.word	0x40023c00

0800ae3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d101      	bne.n	800ae4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e041      	b.n	800aed2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d106      	bne.n	800ae68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 f839 	bl	800aeda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	3304      	adds	r3, #4
 800ae78:	4619      	mov	r1, r3
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	f000 f9ca 	bl	800b214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800aeda:	b480      	push	{r7}
 800aedc:	b083      	sub	sp, #12
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800aee2:	bf00      	nop
 800aee4:	370c      	adds	r7, #12
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
	...

0800aef0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	2b01      	cmp	r3, #1
 800af02:	d001      	beq.n	800af08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	e044      	b.n	800af92 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2202      	movs	r2, #2
 800af0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68da      	ldr	r2, [r3, #12]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f042 0201 	orr.w	r2, r2, #1
 800af1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a1e      	ldr	r2, [pc, #120]	; (800afa0 <HAL_TIM_Base_Start_IT+0xb0>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d018      	beq.n	800af5c <HAL_TIM_Base_Start_IT+0x6c>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af32:	d013      	beq.n	800af5c <HAL_TIM_Base_Start_IT+0x6c>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a1a      	ldr	r2, [pc, #104]	; (800afa4 <HAL_TIM_Base_Start_IT+0xb4>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d00e      	beq.n	800af5c <HAL_TIM_Base_Start_IT+0x6c>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a19      	ldr	r2, [pc, #100]	; (800afa8 <HAL_TIM_Base_Start_IT+0xb8>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d009      	beq.n	800af5c <HAL_TIM_Base_Start_IT+0x6c>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a17      	ldr	r2, [pc, #92]	; (800afac <HAL_TIM_Base_Start_IT+0xbc>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d004      	beq.n	800af5c <HAL_TIM_Base_Start_IT+0x6c>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a16      	ldr	r2, [pc, #88]	; (800afb0 <HAL_TIM_Base_Start_IT+0xc0>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d111      	bne.n	800af80 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	f003 0307 	and.w	r3, r3, #7
 800af66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2b06      	cmp	r3, #6
 800af6c:	d010      	beq.n	800af90 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f042 0201 	orr.w	r2, r2, #1
 800af7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af7e:	e007      	b.n	800af90 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f042 0201 	orr.w	r2, r2, #1
 800af8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3714      	adds	r7, #20
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	40010000 	.word	0x40010000
 800afa4:	40000400 	.word	0x40000400
 800afa8:	40000800 	.word	0x40000800
 800afac:	40000c00 	.word	0x40000c00
 800afb0:	40014000 	.word	0x40014000

0800afb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	f003 0302 	and.w	r3, r3, #2
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d122      	bne.n	800b010 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	f003 0302 	and.w	r3, r3, #2
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d11b      	bne.n	800b010 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f06f 0202 	mvn.w	r2, #2
 800afe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2201      	movs	r2, #1
 800afe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	699b      	ldr	r3, [r3, #24]
 800afee:	f003 0303 	and.w	r3, r3, #3
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d003      	beq.n	800affe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 f8ee 	bl	800b1d8 <HAL_TIM_IC_CaptureCallback>
 800affc:	e005      	b.n	800b00a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f8e0 	bl	800b1c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 f8f1 	bl	800b1ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	f003 0304 	and.w	r3, r3, #4
 800b01a:	2b04      	cmp	r3, #4
 800b01c:	d122      	bne.n	800b064 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	f003 0304 	and.w	r3, r3, #4
 800b028:	2b04      	cmp	r3, #4
 800b02a:	d11b      	bne.n	800b064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f06f 0204 	mvn.w	r2, #4
 800b034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2202      	movs	r2, #2
 800b03a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	699b      	ldr	r3, [r3, #24]
 800b042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f8c4 	bl	800b1d8 <HAL_TIM_IC_CaptureCallback>
 800b050:	e005      	b.n	800b05e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 f8b6 	bl	800b1c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f8c7 	bl	800b1ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	f003 0308 	and.w	r3, r3, #8
 800b06e:	2b08      	cmp	r3, #8
 800b070:	d122      	bne.n	800b0b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	f003 0308 	and.w	r3, r3, #8
 800b07c:	2b08      	cmp	r3, #8
 800b07e:	d11b      	bne.n	800b0b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f06f 0208 	mvn.w	r2, #8
 800b088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2204      	movs	r2, #4
 800b08e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	69db      	ldr	r3, [r3, #28]
 800b096:	f003 0303 	and.w	r3, r3, #3
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d003      	beq.n	800b0a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 f89a 	bl	800b1d8 <HAL_TIM_IC_CaptureCallback>
 800b0a4:	e005      	b.n	800b0b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f88c 	bl	800b1c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 f89d 	bl	800b1ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	f003 0310 	and.w	r3, r3, #16
 800b0c2:	2b10      	cmp	r3, #16
 800b0c4:	d122      	bne.n	800b10c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	f003 0310 	and.w	r3, r3, #16
 800b0d0:	2b10      	cmp	r3, #16
 800b0d2:	d11b      	bne.n	800b10c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f06f 0210 	mvn.w	r2, #16
 800b0dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2208      	movs	r2, #8
 800b0e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	69db      	ldr	r3, [r3, #28]
 800b0ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d003      	beq.n	800b0fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f870 	bl	800b1d8 <HAL_TIM_IC_CaptureCallback>
 800b0f8:	e005      	b.n	800b106 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f862 	bl	800b1c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 f873 	bl	800b1ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	f003 0301 	and.w	r3, r3, #1
 800b116:	2b01      	cmp	r3, #1
 800b118:	d10e      	bne.n	800b138 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	f003 0301 	and.w	r3, r3, #1
 800b124:	2b01      	cmp	r3, #1
 800b126:	d107      	bne.n	800b138 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f06f 0201 	mvn.w	r2, #1
 800b130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f7f6 f8e0 	bl	80012f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b142:	2b80      	cmp	r3, #128	; 0x80
 800b144:	d10e      	bne.n	800b164 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b150:	2b80      	cmp	r3, #128	; 0x80
 800b152:	d107      	bne.n	800b164 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b15c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 f8e2 	bl	800b328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b16e:	2b40      	cmp	r3, #64	; 0x40
 800b170:	d10e      	bne.n	800b190 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b17c:	2b40      	cmp	r3, #64	; 0x40
 800b17e:	d107      	bne.n	800b190 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f838 	bl	800b200 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	f003 0320 	and.w	r3, r3, #32
 800b19a:	2b20      	cmp	r3, #32
 800b19c:	d10e      	bne.n	800b1bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	f003 0320 	and.w	r3, r3, #32
 800b1a8:	2b20      	cmp	r3, #32
 800b1aa:	d107      	bne.n	800b1bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f06f 0220 	mvn.w	r2, #32
 800b1b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f8ac 	bl	800b314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b1bc:	bf00      	nop
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1f4:	bf00      	nop
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b208:	bf00      	nop
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a34      	ldr	r2, [pc, #208]	; (800b2f8 <TIM_Base_SetConfig+0xe4>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d00f      	beq.n	800b24c <TIM_Base_SetConfig+0x38>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b232:	d00b      	beq.n	800b24c <TIM_Base_SetConfig+0x38>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a31      	ldr	r2, [pc, #196]	; (800b2fc <TIM_Base_SetConfig+0xe8>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d007      	beq.n	800b24c <TIM_Base_SetConfig+0x38>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a30      	ldr	r2, [pc, #192]	; (800b300 <TIM_Base_SetConfig+0xec>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d003      	beq.n	800b24c <TIM_Base_SetConfig+0x38>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a2f      	ldr	r2, [pc, #188]	; (800b304 <TIM_Base_SetConfig+0xf0>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d108      	bne.n	800b25e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a25      	ldr	r2, [pc, #148]	; (800b2f8 <TIM_Base_SetConfig+0xe4>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d01b      	beq.n	800b29e <TIM_Base_SetConfig+0x8a>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b26c:	d017      	beq.n	800b29e <TIM_Base_SetConfig+0x8a>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a22      	ldr	r2, [pc, #136]	; (800b2fc <TIM_Base_SetConfig+0xe8>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d013      	beq.n	800b29e <TIM_Base_SetConfig+0x8a>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a21      	ldr	r2, [pc, #132]	; (800b300 <TIM_Base_SetConfig+0xec>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d00f      	beq.n	800b29e <TIM_Base_SetConfig+0x8a>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a20      	ldr	r2, [pc, #128]	; (800b304 <TIM_Base_SetConfig+0xf0>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d00b      	beq.n	800b29e <TIM_Base_SetConfig+0x8a>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a1f      	ldr	r2, [pc, #124]	; (800b308 <TIM_Base_SetConfig+0xf4>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d007      	beq.n	800b29e <TIM_Base_SetConfig+0x8a>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a1e      	ldr	r2, [pc, #120]	; (800b30c <TIM_Base_SetConfig+0xf8>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d003      	beq.n	800b29e <TIM_Base_SetConfig+0x8a>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a1d      	ldr	r2, [pc, #116]	; (800b310 <TIM_Base_SetConfig+0xfc>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d108      	bne.n	800b2b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	68db      	ldr	r3, [r3, #12]
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	695b      	ldr	r3, [r3, #20]
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	689a      	ldr	r2, [r3, #8]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a08      	ldr	r2, [pc, #32]	; (800b2f8 <TIM_Base_SetConfig+0xe4>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d103      	bne.n	800b2e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	691a      	ldr	r2, [r3, #16]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	615a      	str	r2, [r3, #20]
}
 800b2ea:	bf00      	nop
 800b2ec:	3714      	adds	r7, #20
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	40010000 	.word	0x40010000
 800b2fc:	40000400 	.word	0x40000400
 800b300:	40000800 	.word	0x40000800
 800b304:	40000c00 	.word	0x40000c00
 800b308:	40014000 	.word	0x40014000
 800b30c:	40014400 	.word	0x40014400
 800b310:	40014800 	.word	0x40014800

0800b314 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b31c:	bf00      	nop
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d101      	bne.n	800b34e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	e03f      	b.n	800b3ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b00      	cmp	r3, #0
 800b358:	d106      	bne.n	800b368 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f837 	bl	800b3d6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2224      	movs	r2, #36	; 0x24
 800b36c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	68da      	ldr	r2, [r3, #12]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b37e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f90f 	bl	800b5a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	691a      	ldr	r2, [r3, #16]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b394:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	695a      	ldr	r2, [r3, #20]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b3a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	68da      	ldr	r2, [r3, #12]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b3b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2220      	movs	r2, #32
 800b3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2220      	movs	r2, #32
 800b3c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3708      	adds	r7, #8
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800b3d6:	b480      	push	{r7}
 800b3d8:	b083      	sub	sp, #12
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800b3de:	bf00      	nop
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b08a      	sub	sp, #40	; 0x28
 800b3ee:	af02      	add	r7, sp, #8
 800b3f0:	60f8      	str	r0, [r7, #12]
 800b3f2:	60b9      	str	r1, [r7, #8]
 800b3f4:	603b      	str	r3, [r7, #0]
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b404:	b2db      	uxtb	r3, r3
 800b406:	2b20      	cmp	r3, #32
 800b408:	d17c      	bne.n	800b504 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d002      	beq.n	800b416 <HAL_UART_Transmit+0x2c>
 800b410:	88fb      	ldrh	r3, [r7, #6]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d101      	bne.n	800b41a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	e075      	b.n	800b506 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b420:	2b01      	cmp	r3, #1
 800b422:	d101      	bne.n	800b428 <HAL_UART_Transmit+0x3e>
 800b424:	2302      	movs	r3, #2
 800b426:	e06e      	b.n	800b506 <HAL_UART_Transmit+0x11c>
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2200      	movs	r2, #0
 800b434:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2221      	movs	r2, #33	; 0x21
 800b43a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b43e:	f7fd fc67 	bl	8008d10 <HAL_GetTick>
 800b442:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	88fa      	ldrh	r2, [r7, #6]
 800b448:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	88fa      	ldrh	r2, [r7, #6]
 800b44e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b458:	d108      	bne.n	800b46c <HAL_UART_Transmit+0x82>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d104      	bne.n	800b46c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b462:	2300      	movs	r3, #0
 800b464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	61bb      	str	r3, [r7, #24]
 800b46a:	e003      	b.n	800b474 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b470:	2300      	movs	r3, #0
 800b472:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2200      	movs	r2, #0
 800b478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b47c:	e02a      	b.n	800b4d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	2200      	movs	r2, #0
 800b486:	2180      	movs	r1, #128	; 0x80
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f000 f840 	bl	800b50e <UART_WaitOnFlagUntilTimeout>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d001      	beq.n	800b498 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b494:	2303      	movs	r3, #3
 800b496:	e036      	b.n	800b506 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10b      	bne.n	800b4b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	881b      	ldrh	r3, [r3, #0]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	3302      	adds	r3, #2
 800b4b2:	61bb      	str	r3, [r7, #24]
 800b4b4:	e007      	b.n	800b4c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	781a      	ldrb	r2, [r3, #0]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1cf      	bne.n	800b47e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	9300      	str	r3, [sp, #0]
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	2140      	movs	r1, #64	; 0x40
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f000 f810 	bl	800b50e <UART_WaitOnFlagUntilTimeout>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d001      	beq.n	800b4f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b4f4:	2303      	movs	r3, #3
 800b4f6:	e006      	b.n	800b506 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2220      	movs	r2, #32
 800b4fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b500:	2300      	movs	r3, #0
 800b502:	e000      	b.n	800b506 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b504:	2302      	movs	r3, #2
  }
}
 800b506:	4618      	mov	r0, r3
 800b508:	3720      	adds	r7, #32
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b084      	sub	sp, #16
 800b512:	af00      	add	r7, sp, #0
 800b514:	60f8      	str	r0, [r7, #12]
 800b516:	60b9      	str	r1, [r7, #8]
 800b518:	603b      	str	r3, [r7, #0]
 800b51a:	4613      	mov	r3, r2
 800b51c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b51e:	e02c      	b.n	800b57a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b526:	d028      	beq.n	800b57a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d007      	beq.n	800b53e <UART_WaitOnFlagUntilTimeout+0x30>
 800b52e:	f7fd fbef 	bl	8008d10 <HAL_GetTick>
 800b532:	4602      	mov	r2, r0
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	1ad3      	subs	r3, r2, r3
 800b538:	69ba      	ldr	r2, [r7, #24]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d21d      	bcs.n	800b57a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	68da      	ldr	r2, [r3, #12]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b54c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	695a      	ldr	r2, [r3, #20]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f022 0201 	bic.w	r2, r2, #1
 800b55c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2220      	movs	r2, #32
 800b562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2220      	movs	r2, #32
 800b56a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2200      	movs	r2, #0
 800b572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b576:	2303      	movs	r3, #3
 800b578:	e00f      	b.n	800b59a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	4013      	ands	r3, r2
 800b584:	68ba      	ldr	r2, [r7, #8]
 800b586:	429a      	cmp	r2, r3
 800b588:	bf0c      	ite	eq
 800b58a:	2301      	moveq	r3, #1
 800b58c:	2300      	movne	r3, #0
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	461a      	mov	r2, r3
 800b592:	79fb      	ldrb	r3, [r7, #7]
 800b594:	429a      	cmp	r2, r3
 800b596:	d0c3      	beq.n	800b520 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
	...

0800b5a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a8:	b09f      	sub	sp, #124	; 0x7c
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	691b      	ldr	r3, [r3, #16]
 800b5b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b5b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5ba:	68d9      	ldr	r1, [r3, #12]
 800b5bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	ea40 0301 	orr.w	r3, r0, r1
 800b5c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b5c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5c8:	689a      	ldr	r2, [r3, #8]
 800b5ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	431a      	orrs	r2, r3
 800b5d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5d2:	695b      	ldr	r3, [r3, #20]
 800b5d4:	431a      	orrs	r2, r3
 800b5d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5d8:	69db      	ldr	r3, [r3, #28]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b5de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b5e8:	f021 010c 	bic.w	r1, r1, #12
 800b5ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b5f2:	430b      	orrs	r3, r1
 800b5f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b5f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	695b      	ldr	r3, [r3, #20]
 800b5fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b602:	6999      	ldr	r1, [r3, #24]
 800b604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	ea40 0301 	orr.w	r3, r0, r1
 800b60c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b60e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	4bc5      	ldr	r3, [pc, #788]	; (800b928 <UART_SetConfig+0x384>)
 800b614:	429a      	cmp	r2, r3
 800b616:	d004      	beq.n	800b622 <UART_SetConfig+0x7e>
 800b618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	4bc3      	ldr	r3, [pc, #780]	; (800b92c <UART_SetConfig+0x388>)
 800b61e:	429a      	cmp	r2, r3
 800b620:	d103      	bne.n	800b62a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b622:	f7ff fbc5 	bl	800adb0 <HAL_RCC_GetPCLK2Freq>
 800b626:	6778      	str	r0, [r7, #116]	; 0x74
 800b628:	e002      	b.n	800b630 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b62a:	f7ff fbad 	bl	800ad88 <HAL_RCC_GetPCLK1Freq>
 800b62e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b632:	69db      	ldr	r3, [r3, #28]
 800b634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b638:	f040 80b6 	bne.w	800b7a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b63c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b63e:	461c      	mov	r4, r3
 800b640:	f04f 0500 	mov.w	r5, #0
 800b644:	4622      	mov	r2, r4
 800b646:	462b      	mov	r3, r5
 800b648:	1891      	adds	r1, r2, r2
 800b64a:	6439      	str	r1, [r7, #64]	; 0x40
 800b64c:	415b      	adcs	r3, r3
 800b64e:	647b      	str	r3, [r7, #68]	; 0x44
 800b650:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b654:	1912      	adds	r2, r2, r4
 800b656:	eb45 0303 	adc.w	r3, r5, r3
 800b65a:	f04f 0000 	mov.w	r0, #0
 800b65e:	f04f 0100 	mov.w	r1, #0
 800b662:	00d9      	lsls	r1, r3, #3
 800b664:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b668:	00d0      	lsls	r0, r2, #3
 800b66a:	4602      	mov	r2, r0
 800b66c:	460b      	mov	r3, r1
 800b66e:	1911      	adds	r1, r2, r4
 800b670:	6639      	str	r1, [r7, #96]	; 0x60
 800b672:	416b      	adcs	r3, r5
 800b674:	667b      	str	r3, [r7, #100]	; 0x64
 800b676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	461a      	mov	r2, r3
 800b67c:	f04f 0300 	mov.w	r3, #0
 800b680:	1891      	adds	r1, r2, r2
 800b682:	63b9      	str	r1, [r7, #56]	; 0x38
 800b684:	415b      	adcs	r3, r3
 800b686:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b688:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b68c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b690:	f7f5 fae2 	bl	8000c58 <__aeabi_uldivmod>
 800b694:	4602      	mov	r2, r0
 800b696:	460b      	mov	r3, r1
 800b698:	4ba5      	ldr	r3, [pc, #660]	; (800b930 <UART_SetConfig+0x38c>)
 800b69a:	fba3 2302 	umull	r2, r3, r3, r2
 800b69e:	095b      	lsrs	r3, r3, #5
 800b6a0:	011e      	lsls	r6, r3, #4
 800b6a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6a4:	461c      	mov	r4, r3
 800b6a6:	f04f 0500 	mov.w	r5, #0
 800b6aa:	4622      	mov	r2, r4
 800b6ac:	462b      	mov	r3, r5
 800b6ae:	1891      	adds	r1, r2, r2
 800b6b0:	6339      	str	r1, [r7, #48]	; 0x30
 800b6b2:	415b      	adcs	r3, r3
 800b6b4:	637b      	str	r3, [r7, #52]	; 0x34
 800b6b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b6ba:	1912      	adds	r2, r2, r4
 800b6bc:	eb45 0303 	adc.w	r3, r5, r3
 800b6c0:	f04f 0000 	mov.w	r0, #0
 800b6c4:	f04f 0100 	mov.w	r1, #0
 800b6c8:	00d9      	lsls	r1, r3, #3
 800b6ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b6ce:	00d0      	lsls	r0, r2, #3
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	1911      	adds	r1, r2, r4
 800b6d6:	65b9      	str	r1, [r7, #88]	; 0x58
 800b6d8:	416b      	adcs	r3, r5
 800b6da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	f04f 0300 	mov.w	r3, #0
 800b6e6:	1891      	adds	r1, r2, r2
 800b6e8:	62b9      	str	r1, [r7, #40]	; 0x28
 800b6ea:	415b      	adcs	r3, r3
 800b6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b6f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b6f6:	f7f5 faaf 	bl	8000c58 <__aeabi_uldivmod>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	4b8c      	ldr	r3, [pc, #560]	; (800b930 <UART_SetConfig+0x38c>)
 800b700:	fba3 1302 	umull	r1, r3, r3, r2
 800b704:	095b      	lsrs	r3, r3, #5
 800b706:	2164      	movs	r1, #100	; 0x64
 800b708:	fb01 f303 	mul.w	r3, r1, r3
 800b70c:	1ad3      	subs	r3, r2, r3
 800b70e:	00db      	lsls	r3, r3, #3
 800b710:	3332      	adds	r3, #50	; 0x32
 800b712:	4a87      	ldr	r2, [pc, #540]	; (800b930 <UART_SetConfig+0x38c>)
 800b714:	fba2 2303 	umull	r2, r3, r2, r3
 800b718:	095b      	lsrs	r3, r3, #5
 800b71a:	005b      	lsls	r3, r3, #1
 800b71c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b720:	441e      	add	r6, r3
 800b722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b724:	4618      	mov	r0, r3
 800b726:	f04f 0100 	mov.w	r1, #0
 800b72a:	4602      	mov	r2, r0
 800b72c:	460b      	mov	r3, r1
 800b72e:	1894      	adds	r4, r2, r2
 800b730:	623c      	str	r4, [r7, #32]
 800b732:	415b      	adcs	r3, r3
 800b734:	627b      	str	r3, [r7, #36]	; 0x24
 800b736:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b73a:	1812      	adds	r2, r2, r0
 800b73c:	eb41 0303 	adc.w	r3, r1, r3
 800b740:	f04f 0400 	mov.w	r4, #0
 800b744:	f04f 0500 	mov.w	r5, #0
 800b748:	00dd      	lsls	r5, r3, #3
 800b74a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b74e:	00d4      	lsls	r4, r2, #3
 800b750:	4622      	mov	r2, r4
 800b752:	462b      	mov	r3, r5
 800b754:	1814      	adds	r4, r2, r0
 800b756:	653c      	str	r4, [r7, #80]	; 0x50
 800b758:	414b      	adcs	r3, r1
 800b75a:	657b      	str	r3, [r7, #84]	; 0x54
 800b75c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	461a      	mov	r2, r3
 800b762:	f04f 0300 	mov.w	r3, #0
 800b766:	1891      	adds	r1, r2, r2
 800b768:	61b9      	str	r1, [r7, #24]
 800b76a:	415b      	adcs	r3, r3
 800b76c:	61fb      	str	r3, [r7, #28]
 800b76e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b772:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b776:	f7f5 fa6f 	bl	8000c58 <__aeabi_uldivmod>
 800b77a:	4602      	mov	r2, r0
 800b77c:	460b      	mov	r3, r1
 800b77e:	4b6c      	ldr	r3, [pc, #432]	; (800b930 <UART_SetConfig+0x38c>)
 800b780:	fba3 1302 	umull	r1, r3, r3, r2
 800b784:	095b      	lsrs	r3, r3, #5
 800b786:	2164      	movs	r1, #100	; 0x64
 800b788:	fb01 f303 	mul.w	r3, r1, r3
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	00db      	lsls	r3, r3, #3
 800b790:	3332      	adds	r3, #50	; 0x32
 800b792:	4a67      	ldr	r2, [pc, #412]	; (800b930 <UART_SetConfig+0x38c>)
 800b794:	fba2 2303 	umull	r2, r3, r2, r3
 800b798:	095b      	lsrs	r3, r3, #5
 800b79a:	f003 0207 	and.w	r2, r3, #7
 800b79e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4432      	add	r2, r6
 800b7a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b7a6:	e0b9      	b.n	800b91c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b7a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7aa:	461c      	mov	r4, r3
 800b7ac:	f04f 0500 	mov.w	r5, #0
 800b7b0:	4622      	mov	r2, r4
 800b7b2:	462b      	mov	r3, r5
 800b7b4:	1891      	adds	r1, r2, r2
 800b7b6:	6139      	str	r1, [r7, #16]
 800b7b8:	415b      	adcs	r3, r3
 800b7ba:	617b      	str	r3, [r7, #20]
 800b7bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b7c0:	1912      	adds	r2, r2, r4
 800b7c2:	eb45 0303 	adc.w	r3, r5, r3
 800b7c6:	f04f 0000 	mov.w	r0, #0
 800b7ca:	f04f 0100 	mov.w	r1, #0
 800b7ce:	00d9      	lsls	r1, r3, #3
 800b7d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b7d4:	00d0      	lsls	r0, r2, #3
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	460b      	mov	r3, r1
 800b7da:	eb12 0804 	adds.w	r8, r2, r4
 800b7de:	eb43 0905 	adc.w	r9, r3, r5
 800b7e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f04f 0100 	mov.w	r1, #0
 800b7ec:	f04f 0200 	mov.w	r2, #0
 800b7f0:	f04f 0300 	mov.w	r3, #0
 800b7f4:	008b      	lsls	r3, r1, #2
 800b7f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b7fa:	0082      	lsls	r2, r0, #2
 800b7fc:	4640      	mov	r0, r8
 800b7fe:	4649      	mov	r1, r9
 800b800:	f7f5 fa2a 	bl	8000c58 <__aeabi_uldivmod>
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	4b49      	ldr	r3, [pc, #292]	; (800b930 <UART_SetConfig+0x38c>)
 800b80a:	fba3 2302 	umull	r2, r3, r3, r2
 800b80e:	095b      	lsrs	r3, r3, #5
 800b810:	011e      	lsls	r6, r3, #4
 800b812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b814:	4618      	mov	r0, r3
 800b816:	f04f 0100 	mov.w	r1, #0
 800b81a:	4602      	mov	r2, r0
 800b81c:	460b      	mov	r3, r1
 800b81e:	1894      	adds	r4, r2, r2
 800b820:	60bc      	str	r4, [r7, #8]
 800b822:	415b      	adcs	r3, r3
 800b824:	60fb      	str	r3, [r7, #12]
 800b826:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b82a:	1812      	adds	r2, r2, r0
 800b82c:	eb41 0303 	adc.w	r3, r1, r3
 800b830:	f04f 0400 	mov.w	r4, #0
 800b834:	f04f 0500 	mov.w	r5, #0
 800b838:	00dd      	lsls	r5, r3, #3
 800b83a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b83e:	00d4      	lsls	r4, r2, #3
 800b840:	4622      	mov	r2, r4
 800b842:	462b      	mov	r3, r5
 800b844:	1814      	adds	r4, r2, r0
 800b846:	64bc      	str	r4, [r7, #72]	; 0x48
 800b848:	414b      	adcs	r3, r1
 800b84a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b84c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	4618      	mov	r0, r3
 800b852:	f04f 0100 	mov.w	r1, #0
 800b856:	f04f 0200 	mov.w	r2, #0
 800b85a:	f04f 0300 	mov.w	r3, #0
 800b85e:	008b      	lsls	r3, r1, #2
 800b860:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b864:	0082      	lsls	r2, r0, #2
 800b866:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b86a:	f7f5 f9f5 	bl	8000c58 <__aeabi_uldivmod>
 800b86e:	4602      	mov	r2, r0
 800b870:	460b      	mov	r3, r1
 800b872:	4b2f      	ldr	r3, [pc, #188]	; (800b930 <UART_SetConfig+0x38c>)
 800b874:	fba3 1302 	umull	r1, r3, r3, r2
 800b878:	095b      	lsrs	r3, r3, #5
 800b87a:	2164      	movs	r1, #100	; 0x64
 800b87c:	fb01 f303 	mul.w	r3, r1, r3
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	011b      	lsls	r3, r3, #4
 800b884:	3332      	adds	r3, #50	; 0x32
 800b886:	4a2a      	ldr	r2, [pc, #168]	; (800b930 <UART_SetConfig+0x38c>)
 800b888:	fba2 2303 	umull	r2, r3, r2, r3
 800b88c:	095b      	lsrs	r3, r3, #5
 800b88e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b892:	441e      	add	r6, r3
 800b894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b896:	4618      	mov	r0, r3
 800b898:	f04f 0100 	mov.w	r1, #0
 800b89c:	4602      	mov	r2, r0
 800b89e:	460b      	mov	r3, r1
 800b8a0:	1894      	adds	r4, r2, r2
 800b8a2:	603c      	str	r4, [r7, #0]
 800b8a4:	415b      	adcs	r3, r3
 800b8a6:	607b      	str	r3, [r7, #4]
 800b8a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8ac:	1812      	adds	r2, r2, r0
 800b8ae:	eb41 0303 	adc.w	r3, r1, r3
 800b8b2:	f04f 0400 	mov.w	r4, #0
 800b8b6:	f04f 0500 	mov.w	r5, #0
 800b8ba:	00dd      	lsls	r5, r3, #3
 800b8bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b8c0:	00d4      	lsls	r4, r2, #3
 800b8c2:	4622      	mov	r2, r4
 800b8c4:	462b      	mov	r3, r5
 800b8c6:	eb12 0a00 	adds.w	sl, r2, r0
 800b8ca:	eb43 0b01 	adc.w	fp, r3, r1
 800b8ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f04f 0100 	mov.w	r1, #0
 800b8d8:	f04f 0200 	mov.w	r2, #0
 800b8dc:	f04f 0300 	mov.w	r3, #0
 800b8e0:	008b      	lsls	r3, r1, #2
 800b8e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b8e6:	0082      	lsls	r2, r0, #2
 800b8e8:	4650      	mov	r0, sl
 800b8ea:	4659      	mov	r1, fp
 800b8ec:	f7f5 f9b4 	bl	8000c58 <__aeabi_uldivmod>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	4b0e      	ldr	r3, [pc, #56]	; (800b930 <UART_SetConfig+0x38c>)
 800b8f6:	fba3 1302 	umull	r1, r3, r3, r2
 800b8fa:	095b      	lsrs	r3, r3, #5
 800b8fc:	2164      	movs	r1, #100	; 0x64
 800b8fe:	fb01 f303 	mul.w	r3, r1, r3
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	011b      	lsls	r3, r3, #4
 800b906:	3332      	adds	r3, #50	; 0x32
 800b908:	4a09      	ldr	r2, [pc, #36]	; (800b930 <UART_SetConfig+0x38c>)
 800b90a:	fba2 2303 	umull	r2, r3, r2, r3
 800b90e:	095b      	lsrs	r3, r3, #5
 800b910:	f003 020f 	and.w	r2, r3, #15
 800b914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4432      	add	r2, r6
 800b91a:	609a      	str	r2, [r3, #8]
}
 800b91c:	bf00      	nop
 800b91e:	377c      	adds	r7, #124	; 0x7c
 800b920:	46bd      	mov	sp, r7
 800b922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b926:	bf00      	nop
 800b928:	40011000 	.word	0x40011000
 800b92c:	40011400 	.word	0x40011400
 800b930:	51eb851f 	.word	0x51eb851f

0800b934 <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS01A3_DataLogTerminal_Init(void);
static void MX_IKS01A3_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Init_PreTreatment */

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */
  MX_IKS01A3_DataLogTerminal_Init();
 800b938:	f000 f802 	bl	800b940 <MX_IKS01A3_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800b93c:	bf00      	nop
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <MX_IKS01A3_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Init(void)
{
 800b940:	b5b0      	push	{r4, r5, r7, lr}
 800b942:	b088      	sub	sp, #32
 800b944:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 800b946:	2000      	movs	r0, #0
 800b948:	f7fc ffa6 	bl	8008898 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800b94c:	2101      	movs	r1, #1
 800b94e:	2000      	movs	r0, #0
 800b950:	f7fd f822 	bl	8008998 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 800b954:	2000      	movs	r0, #0
 800b956:	f7fd f873 	bl	8008a40 <BSP_PB_GetState>
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	bf0c      	ite	eq
 800b960:	2301      	moveq	r3, #1
 800b962:	2300      	movne	r3, #0
 800b964:	b2db      	uxtb	r3, r3
 800b966:	461a      	mov	r2, r3
 800b968:	4b75      	ldr	r3, [pc, #468]	; (800bb40 <MX_IKS01A3_DataLogTerminal_Init+0x200>)
 800b96a:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800b96c:	2000      	movs	r0, #0
 800b96e:	f7fd f8c9 	bl	8008b04 <BSP_COM_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);
 800b972:	2103      	movs	r1, #3
 800b974:	2000      	movs	r0, #0
 800b976:	f7fc fc65 	bl	8008244 <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 800b97a:	2102      	movs	r1, #2
 800b97c:	2001      	movs	r0, #1
 800b97e:	f7fc fc61 	bl	8008244 <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 800b982:	2104      	movs	r1, #4
 800b984:	2002      	movs	r0, #2
 800b986:	f7fc fc5d 	bl	8008244 <IKS01A3_MOTION_SENSOR_Init>

  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800b98a:	2300      	movs	r3, #0
 800b98c:	60fb      	str	r3, [r7, #12]
 800b98e:	e0c3      	b.n	800bb18 <MX_IKS01A3_DataLogTerminal_Init+0x1d8>
  {
    IKS01A3_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	4613      	mov	r3, r2
 800b996:	00db      	lsls	r3, r3, #3
 800b998:	1a9b      	subs	r3, r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	4a69      	ldr	r2, [pc, #420]	; (800bb44 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800b99e:	4413      	add	r3, r2
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	f7fc fd4b 	bl	800843c <IKS01A3_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800b9a6:	4967      	ldr	r1, [pc, #412]	; (800bb44 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	00db      	lsls	r3, r3, #3
 800b9ae:	1a9b      	subs	r3, r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	440b      	add	r3, r1
 800b9b4:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800b9b6:	4618      	mov	r0, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800b9b8:	4962      	ldr	r1, [pc, #392]	; (800bb44 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	4613      	mov	r3, r2
 800b9be:	00db      	lsls	r3, r3, #3
 800b9c0:	1a9b      	subs	r3, r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	440b      	add	r3, r1
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800b9ca:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800b9cc:	495d      	ldr	r1, [pc, #372]	; (800bb44 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	00db      	lsls	r3, r3, #3
 800b9d4:	1a9b      	subs	r3, r3, r2
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	440b      	add	r3, r1
 800b9da:	3302      	adds	r3, #2
 800b9dc:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800b9de:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800b9e0:	4958      	ldr	r1, [pc, #352]	; (800bb44 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	00db      	lsls	r3, r3, #3
 800b9e8:	1a9b      	subs	r3, r3, r2
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	440b      	add	r3, r1
 800b9ee:	3303      	adds	r3, #3
 800b9f0:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800b9f2:	9303      	str	r3, [sp, #12]
 800b9f4:	9502      	str	r5, [sp, #8]
 800b9f6:	9401      	str	r4, [sp, #4]
 800b9f8:	9000      	str	r0, [sp, #0]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	4a52      	ldr	r2, [pc, #328]	; (800bb48 <MX_IKS01A3_DataLogTerminal_Init+0x208>)
 800b9fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba02:	4852      	ldr	r0, [pc, #328]	; (800bb4c <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800ba04:	f00b ff86 	bl	8017914 <sniprintf>
    printf("%s", dataOut);
 800ba08:	4950      	ldr	r1, [pc, #320]	; (800bb4c <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800ba0a:	4851      	ldr	r0, [pc, #324]	; (800bb50 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 800ba0c:	f00b ff6a 	bl	80178e4 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 800ba10:	494c      	ldr	r1, [pc, #304]	; (800bb44 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800ba12:	68fa      	ldr	r2, [r7, #12]
 800ba14:	4613      	mov	r3, r2
 800ba16:	00db      	lsls	r3, r3, #3
 800ba18:	1a9b      	subs	r3, r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	440b      	add	r3, r1
 800ba1e:	3314      	adds	r3, #20
 800ba20:	edd3 7a00 	vldr	s15, [r3]
 800ba24:	463b      	mov	r3, r7
 800ba26:	2103      	movs	r1, #3
 800ba28:	4618      	mov	r0, r3
 800ba2a:	eeb0 0a67 	vmov.f32	s0, s15
 800ba2e:	f000 f94b 	bl	800bcc8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800ba36:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800ba38:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800ba3a:	4942      	ldr	r1, [pc, #264]	; (800bb44 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	4613      	mov	r3, r2
 800ba40:	00db      	lsls	r3, r3, #3
 800ba42:	1a9b      	subs	r3, r3, r2
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	440b      	add	r3, r1
 800ba48:	3308      	adds	r3, #8
 800ba4a:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800ba4c:	9301      	str	r3, [sp, #4]
 800ba4e:	9000      	str	r0, [sp, #0]
 800ba50:	4623      	mov	r3, r4
 800ba52:	4a40      	ldr	r2, [pc, #256]	; (800bb54 <MX_IKS01A3_DataLogTerminal_Init+0x214>)
 800ba54:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba58:	483c      	ldr	r0, [pc, #240]	; (800bb4c <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800ba5a:	f00b ff5b 	bl	8017914 <sniprintf>
    printf("%s", dataOut);
 800ba5e:	493b      	ldr	r1, [pc, #236]	; (800bb4c <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800ba60:	483b      	ldr	r0, [pc, #236]	; (800bb50 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 800ba62:	f00b ff3f 	bl	80178e4 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 800ba66:	4937      	ldr	r1, [pc, #220]	; (800bb44 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	00db      	lsls	r3, r3, #3
 800ba6e:	1a9b      	subs	r3, r3, r2
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	440b      	add	r3, r1
 800ba74:	3310      	adds	r3, #16
 800ba76:	edd3 7a00 	vldr	s15, [r3]
 800ba7a:	463b      	mov	r3, r7
 800ba7c:	2103      	movs	r1, #3
 800ba7e:	4618      	mov	r0, r3
 800ba80:	eeb0 0a67 	vmov.f32	s0, s15
 800ba84:	f000 f920 	bl	800bcc8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800ba8c:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800ba8e:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800ba90:	492c      	ldr	r1, [pc, #176]	; (800bb44 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	4613      	mov	r3, r2
 800ba96:	00db      	lsls	r3, r3, #3
 800ba98:	1a9b      	subs	r3, r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	440b      	add	r3, r1
 800ba9e:	3304      	adds	r3, #4
 800baa0:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800baa2:	9301      	str	r3, [sp, #4]
 800baa4:	9000      	str	r0, [sp, #0]
 800baa6:	4623      	mov	r3, r4
 800baa8:	4a2b      	ldr	r2, [pc, #172]	; (800bb58 <MX_IKS01A3_DataLogTerminal_Init+0x218>)
 800baaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800baae:	4827      	ldr	r0, [pc, #156]	; (800bb4c <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bab0:	f00b ff30 	bl	8017914 <sniprintf>
    printf("%s", dataOut);
 800bab4:	4925      	ldr	r1, [pc, #148]	; (800bb4c <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bab6:	4826      	ldr	r0, [pc, #152]	; (800bb50 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 800bab8:	f00b ff14 	bl	80178e4 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 800babc:	4921      	ldr	r1, [pc, #132]	; (800bb44 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	4613      	mov	r3, r2
 800bac2:	00db      	lsls	r3, r3, #3
 800bac4:	1a9b      	subs	r3, r3, r2
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	440b      	add	r3, r1
 800baca:	3318      	adds	r3, #24
 800bacc:	edd3 7a00 	vldr	s15, [r3]
 800bad0:	463b      	mov	r3, r7
 800bad2:	2103      	movs	r1, #3
 800bad4:	4618      	mov	r0, r3
 800bad6:	eeb0 0a67 	vmov.f32	s0, s15
 800bada:	f000 f8f5 	bl	800bcc8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800bae2:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800bae4:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800bae6:	4917      	ldr	r1, [pc, #92]	; (800bb44 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	4613      	mov	r3, r2
 800baec:	00db      	lsls	r3, r3, #3
 800baee:	1a9b      	subs	r3, r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	440b      	add	r3, r1
 800baf4:	330c      	adds	r3, #12
 800baf6:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800baf8:	9301      	str	r3, [sp, #4]
 800bafa:	9000      	str	r0, [sp, #0]
 800bafc:	4623      	mov	r3, r4
 800bafe:	4a17      	ldr	r2, [pc, #92]	; (800bb5c <MX_IKS01A3_DataLogTerminal_Init+0x21c>)
 800bb00:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bb04:	4811      	ldr	r0, [pc, #68]	; (800bb4c <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bb06:	f00b ff05 	bl	8017914 <sniprintf>
    printf("%s", dataOut);
 800bb0a:	4910      	ldr	r1, [pc, #64]	; (800bb4c <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bb0c:	4810      	ldr	r0, [pc, #64]	; (800bb50 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 800bb0e:	f00b fee9 	bl	80178e4 <iprintf>
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	3301      	adds	r3, #1
 800bb16:	60fb      	str	r3, [r7, #12]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	f67f af38 	bls.w	800b990 <MX_IKS01A3_DataLogTerminal_Init+0x50>
  }

  IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 800bb20:	2105      	movs	r1, #5
 800bb22:	2000      	movs	r0, #0
 800bb24:	f7fc f84e 	bl	8007bc4 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_TEMPERATURE | ENV_PRESSURE);
 800bb28:	2103      	movs	r1, #3
 800bb2a:	2001      	movs	r0, #1
 800bb2c:	f7fc f84a 	bl	8007bc4 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 800bb30:	2101      	movs	r1, #1
 800bb32:	2002      	movs	r0, #2
 800bb34:	f7fc f846 	bl	8007bc4 <IKS01A3_ENV_SENSOR_Init>

  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800bb38:	2300      	movs	r3, #0
 800bb3a:	60fb      	str	r3, [r7, #12]
 800bb3c:	e09c      	b.n	800bc78 <MX_IKS01A3_DataLogTerminal_Init+0x338>
 800bb3e:	bf00      	nop
 800bb40:	20002da4 	.word	0x20002da4
 800bb44:	20002c20 	.word	0x20002c20
 800bb48:	0801c558 	.word	0x0801c558
 800bb4c:	20002ca4 	.word	0x20002ca4
 800bb50:	0801c5cc 	.word	0x0801c5cc
 800bb54:	0801c5d0 	.word	0x0801c5d0
 800bb58:	0801c5fc 	.word	0x0801c5fc
 800bb5c:	0801c62c 	.word	0x0801c62c
  {
    IKS01A3_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	011b      	lsls	r3, r3, #4
 800bb66:	4949      	ldr	r1, [pc, #292]	; (800bc8c <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800bb68:	440b      	add	r3, r1
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	4610      	mov	r0, r2
 800bb6e:	f7fc f925 	bl	8007dbc <IKS01A3_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800bb72:	4a46      	ldr	r2, [pc, #280]	; (800bc8c <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	011b      	lsls	r3, r3, #4
 800bb78:	4413      	add	r3, r2
 800bb7a:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800bb7c:	4619      	mov	r1, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800bb7e:	4a43      	ldr	r2, [pc, #268]	; (800bc8c <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	011b      	lsls	r3, r3, #4
 800bb84:	4413      	add	r3, r2
 800bb86:	3301      	adds	r3, #1
 800bb88:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800bb8a:	4618      	mov	r0, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800bb8c:	4a3f      	ldr	r2, [pc, #252]	; (800bc8c <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	011b      	lsls	r3, r3, #4
 800bb92:	4413      	add	r3, r2
 800bb94:	3302      	adds	r3, #2
 800bb96:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800bb98:	461c      	mov	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800bb9a:	4a3c      	ldr	r2, [pc, #240]	; (800bc8c <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	011b      	lsls	r3, r3, #4
 800bba0:	4413      	add	r3, r2
 800bba2:	3303      	adds	r3, #3
 800bba4:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800bba6:	9303      	str	r3, [sp, #12]
 800bba8:	9402      	str	r4, [sp, #8]
 800bbaa:	9001      	str	r0, [sp, #4]
 800bbac:	9100      	str	r1, [sp, #0]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	4a37      	ldr	r2, [pc, #220]	; (800bc90 <MX_IKS01A3_DataLogTerminal_Init+0x350>)
 800bbb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bbb6:	4837      	ldr	r0, [pc, #220]	; (800bc94 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800bbb8:	f00b feac 	bl	8017914 <sniprintf>
    printf("%s", dataOut);
 800bbbc:	4935      	ldr	r1, [pc, #212]	; (800bc94 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800bbbe:	4836      	ldr	r0, [pc, #216]	; (800bc98 <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 800bbc0:	f00b fe90 	bl	80178e4 <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 800bbc4:	4a31      	ldr	r2, [pc, #196]	; (800bc8c <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	011b      	lsls	r3, r3, #4
 800bbca:	4413      	add	r3, r2
 800bbcc:	3308      	adds	r3, #8
 800bbce:	edd3 7a00 	vldr	s15, [r3]
 800bbd2:	463b      	mov	r3, r7
 800bbd4:	2103      	movs	r1, #3
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	eeb0 0a67 	vmov.f32	s0, s15
 800bbdc:	f000 f874 	bl	800bcc8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 800bbe4:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800bbe6:	9300      	str	r3, [sp, #0]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	4a2c      	ldr	r2, [pc, #176]	; (800bc9c <MX_IKS01A3_DataLogTerminal_Init+0x35c>)
 800bbec:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bbf0:	4828      	ldr	r0, [pc, #160]	; (800bc94 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800bbf2:	f00b fe8f 	bl	8017914 <sniprintf>
    printf("%s", dataOut);
 800bbf6:	4927      	ldr	r1, [pc, #156]	; (800bc94 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800bbf8:	4827      	ldr	r0, [pc, #156]	; (800bc98 <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 800bbfa:	f00b fe73 	bl	80178e4 <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 800bbfe:	4a23      	ldr	r2, [pc, #140]	; (800bc8c <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	011b      	lsls	r3, r3, #4
 800bc04:	4413      	add	r3, r2
 800bc06:	330c      	adds	r3, #12
 800bc08:	edd3 7a00 	vldr	s15, [r3]
 800bc0c:	463b      	mov	r3, r7
 800bc0e:	2103      	movs	r1, #3
 800bc10:	4618      	mov	r0, r3
 800bc12:	eeb0 0a67 	vmov.f32	s0, s15
 800bc16:	f000 f857 	bl	800bcc8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 800bc1e:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800bc20:	9300      	str	r3, [sp, #0]
 800bc22:	4613      	mov	r3, r2
 800bc24:	4a1e      	ldr	r2, [pc, #120]	; (800bca0 <MX_IKS01A3_DataLogTerminal_Init+0x360>)
 800bc26:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bc2a:	481a      	ldr	r0, [pc, #104]	; (800bc94 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800bc2c:	f00b fe72 	bl	8017914 <sniprintf>
    printf("%s", dataOut);
 800bc30:	4918      	ldr	r1, [pc, #96]	; (800bc94 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800bc32:	4819      	ldr	r0, [pc, #100]	; (800bc98 <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 800bc34:	f00b fe56 	bl	80178e4 <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 800bc38:	4a14      	ldr	r2, [pc, #80]	; (800bc8c <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	011b      	lsls	r3, r3, #4
 800bc3e:	4413      	add	r3, r2
 800bc40:	3304      	adds	r3, #4
 800bc42:	edd3 7a00 	vldr	s15, [r3]
 800bc46:	463b      	mov	r3, r7
 800bc48:	2103      	movs	r1, #3
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	eeb0 0a67 	vmov.f32	s0, s15
 800bc50:	f000 f83a 	bl	800bcc8 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	461a      	mov	r2, r3
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	9300      	str	r3, [sp, #0]
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	4a11      	ldr	r2, [pc, #68]	; (800bca4 <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 800bc60:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bc64:	480b      	ldr	r0, [pc, #44]	; (800bc94 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800bc66:	f00b fe55 	bl	8017914 <sniprintf>
    printf("%s", dataOut);
 800bc6a:	490a      	ldr	r1, [pc, #40]	; (800bc94 <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800bc6c:	480a      	ldr	r0, [pc, #40]	; (800bc98 <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 800bc6e:	f00b fe39 	bl	80178e4 <iprintf>
  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	3301      	adds	r3, #1
 800bc76:	60fb      	str	r3, [r7, #12]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	f67f af70 	bls.w	800bb60 <MX_IKS01A3_DataLogTerminal_Init+0x220>
  }
}
 800bc80:	bf00      	nop
 800bc82:	bf00      	nop
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bdb0      	pop	{r4, r5, r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	20002c74 	.word	0x20002c74
 800bc90:	0801c658 	.word	0x0801c658
 800bc94:	20002ca4 	.word	0x20002ca4
 800bc98:	0801c5cc 	.word	0x0801c5cc
 800bc9c:	0801c6cc 	.word	0x0801c6cc
 800bca0:	0801c6e8 	.word	0x0801c6e8
 800bca4:	0801c708 	.word	0x0801c708

0800bca8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	4603      	mov	r3, r0
 800bcb0:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 800bcb2:	4b04      	ldr	r3, [pc, #16]	; (800bcc4 <BSP_PB_Callback+0x1c>)
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	701a      	strb	r2, [r3, #0]
}
 800bcb8:	bf00      	nop
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr
 800bcc4:	20002c1d 	.word	0x20002c1d

0800bcc8 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 800bcc8:	b5b0      	push	{r4, r5, r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	ed87 0a03 	vstr	s0, [r7, #12]
 800bcd2:	60b8      	str	r0, [r7, #8]
 800bcd4:	6079      	str	r1, [r7, #4]
  if(in >= 0.0f)
 800bcd6:	edd7 7a03 	vldr	s15, [r7, #12]
 800bcda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bcde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bce2:	db03      	blt.n	800bcec <floatToInt+0x24>
  {
    out_value->sign = 0;
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	2200      	movs	r2, #0
 800bce8:	701a      	strb	r2, [r3, #0]
 800bcea:	e008      	b.n	800bcfe <floatToInt+0x36>
  }else
  {
    out_value->sign = 1;
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	701a      	strb	r2, [r3, #0]
    in = -in;
 800bcf2:	edd7 7a03 	vldr	s15, [r7, #12]
 800bcf6:	eef1 7a67 	vneg.f32	s15, s15
 800bcfa:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 800bcfe:	68f8      	ldr	r0, [r7, #12]
 800bd00:	f7f4 fc2a 	bl	8000558 <__aeabi_f2d>
 800bd04:	4604      	mov	r4, r0
 800bd06:	460d      	mov	r5, r1
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f7f4 fc13 	bl	8000534 <__aeabi_i2d>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	ec43 2b11 	vmov	d1, r2, r3
 800bd16:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 800bdd0 <floatToInt+0x108>
 800bd1a:	f00e f921 	bl	8019f60 <pow>
 800bd1e:	ec53 2b10 	vmov	r2, r3, d0
 800bd22:	f04f 0000 	mov.w	r0, #0
 800bd26:	492c      	ldr	r1, [pc, #176]	; (800bdd8 <floatToInt+0x110>)
 800bd28:	f7f4 fd98 	bl	800085c <__aeabi_ddiv>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	460b      	mov	r3, r1
 800bd30:	4620      	mov	r0, r4
 800bd32:	4629      	mov	r1, r5
 800bd34:	f7f4 fab2 	bl	800029c <__adddf3>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	4619      	mov	r1, r3
 800bd40:	f7f4 ff3a 	bl	8000bb8 <__aeabi_d2f>
 800bd44:	4603      	mov	r3, r0
 800bd46:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 800bd48:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd50:	ee17 2a90 	vmov	r2, s15
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	ee07 3a90 	vmov	s15, r3
 800bd60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd64:	ed97 7a03 	vldr	s14, [r7, #12]
 800bd68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd6c:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f7f4 fbf1 	bl	8000558 <__aeabi_f2d>
 800bd76:	4604      	mov	r4, r0
 800bd78:	460d      	mov	r5, r1
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f7f4 fbda 	bl	8000534 <__aeabi_i2d>
 800bd80:	4602      	mov	r2, r0
 800bd82:	460b      	mov	r3, r1
 800bd84:	ec43 2b11 	vmov	d1, r2, r3
 800bd88:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800bdd0 <floatToInt+0x108>
 800bd8c:	f00e f8e8 	bl	8019f60 <pow>
 800bd90:	ec53 2b10 	vmov	r2, r3, d0
 800bd94:	4620      	mov	r0, r4
 800bd96:	4629      	mov	r1, r5
 800bd98:	f7f4 fc36 	bl	8000608 <__aeabi_dmul>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	460b      	mov	r3, r1
 800bda0:	ec43 2b17 	vmov	d7, r2, r3
 800bda4:	eeb0 0a47 	vmov.f32	s0, s14
 800bda8:	eef0 0a67 	vmov.f32	s1, s15
 800bdac:	f00e f804 	bl	8019db8 <trunc>
 800bdb0:	ec53 2b10 	vmov	r2, r3, d0
 800bdb4:	4610      	mov	r0, r2
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	f7f4 fed6 	bl	8000b68 <__aeabi_d2iz>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	609a      	str	r2, [r3, #8]
}
 800bdc4:	bf00      	nop
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bdb0      	pop	{r4, r5, r7, pc}
 800bdcc:	f3af 8000 	nop.w
 800bdd0:	00000000 	.word	0x00000000
 800bdd4:	40240000 	.word	0x40240000
 800bdd8:	3fe00000 	.word	0x3fe00000

0800bddc <__NVIC_SetPriority>:
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	4603      	mov	r3, r0
 800bde4:	6039      	str	r1, [r7, #0]
 800bde6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bde8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	db0a      	blt.n	800be06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	490c      	ldr	r1, [pc, #48]	; (800be28 <__NVIC_SetPriority+0x4c>)
 800bdf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdfa:	0112      	lsls	r2, r2, #4
 800bdfc:	b2d2      	uxtb	r2, r2
 800bdfe:	440b      	add	r3, r1
 800be00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800be04:	e00a      	b.n	800be1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	4908      	ldr	r1, [pc, #32]	; (800be2c <__NVIC_SetPriority+0x50>)
 800be0c:	79fb      	ldrb	r3, [r7, #7]
 800be0e:	f003 030f 	and.w	r3, r3, #15
 800be12:	3b04      	subs	r3, #4
 800be14:	0112      	lsls	r2, r2, #4
 800be16:	b2d2      	uxtb	r2, r2
 800be18:	440b      	add	r3, r1
 800be1a:	761a      	strb	r2, [r3, #24]
}
 800be1c:	bf00      	nop
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr
 800be28:	e000e100 	.word	0xe000e100
 800be2c:	e000ed00 	.word	0xe000ed00

0800be30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800be30:	b580      	push	{r7, lr}
 800be32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800be34:	4b05      	ldr	r3, [pc, #20]	; (800be4c <SysTick_Handler+0x1c>)
 800be36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800be38:	f002 f922 	bl	800e080 <xTaskGetSchedulerState>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d001      	beq.n	800be46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800be42:	f002 ff41 	bl	800ecc8 <xPortSysTickHandler>
  }
}
 800be46:	bf00      	nop
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	e000e010 	.word	0xe000e010

0800be50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800be50:	b580      	push	{r7, lr}
 800be52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800be54:	2100      	movs	r1, #0
 800be56:	f06f 0004 	mvn.w	r0, #4
 800be5a:	f7ff ffbf 	bl	800bddc <__NVIC_SetPriority>
#endif
}
 800be5e:	bf00      	nop
 800be60:	bd80      	pop	{r7, pc}
	...

0800be64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be6a:	f3ef 8305 	mrs	r3, IPSR
 800be6e:	603b      	str	r3, [r7, #0]
  return(result);
 800be70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be72:	2b00      	cmp	r3, #0
 800be74:	d003      	beq.n	800be7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800be76:	f06f 0305 	mvn.w	r3, #5
 800be7a:	607b      	str	r3, [r7, #4]
 800be7c:	e00c      	b.n	800be98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800be7e:	4b0a      	ldr	r3, [pc, #40]	; (800bea8 <osKernelInitialize+0x44>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d105      	bne.n	800be92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800be86:	4b08      	ldr	r3, [pc, #32]	; (800bea8 <osKernelInitialize+0x44>)
 800be88:	2201      	movs	r2, #1
 800be8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	607b      	str	r3, [r7, #4]
 800be90:	e002      	b.n	800be98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800be92:	f04f 33ff 	mov.w	r3, #4294967295
 800be96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800be98:	687b      	ldr	r3, [r7, #4]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	370c      	adds	r7, #12
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	20002da8 	.word	0x20002da8

0800beac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800beb2:	f3ef 8305 	mrs	r3, IPSR
 800beb6:	603b      	str	r3, [r7, #0]
  return(result);
 800beb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d003      	beq.n	800bec6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bebe:	f06f 0305 	mvn.w	r3, #5
 800bec2:	607b      	str	r3, [r7, #4]
 800bec4:	e010      	b.n	800bee8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bec6:	4b0b      	ldr	r3, [pc, #44]	; (800bef4 <osKernelStart+0x48>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2b01      	cmp	r3, #1
 800becc:	d109      	bne.n	800bee2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bece:	f7ff ffbf 	bl	800be50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bed2:	4b08      	ldr	r3, [pc, #32]	; (800bef4 <osKernelStart+0x48>)
 800bed4:	2202      	movs	r2, #2
 800bed6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bed8:	f001 fbec 	bl	800d6b4 <vTaskStartScheduler>
      stat = osOK;
 800bedc:	2300      	movs	r3, #0
 800bede:	607b      	str	r3, [r7, #4]
 800bee0:	e002      	b.n	800bee8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bee2:	f04f 33ff 	mov.w	r3, #4294967295
 800bee6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bee8:	687b      	ldr	r3, [r7, #4]
}
 800beea:	4618      	mov	r0, r3
 800beec:	3708      	adds	r7, #8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	20002da8 	.word	0x20002da8

0800bef8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bef8:	b580      	push	{r7, lr}
 800befa:	b08e      	sub	sp, #56	; 0x38
 800befc:	af04      	add	r7, sp, #16
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bf04:	2300      	movs	r3, #0
 800bf06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf08:	f3ef 8305 	mrs	r3, IPSR
 800bf0c:	617b      	str	r3, [r7, #20]
  return(result);
 800bf0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d17e      	bne.n	800c012 <osThreadNew+0x11a>
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d07b      	beq.n	800c012 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bf1a:	2380      	movs	r3, #128	; 0x80
 800bf1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bf1e:	2318      	movs	r3, #24
 800bf20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bf22:	2300      	movs	r3, #0
 800bf24:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bf26:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d045      	beq.n	800bfbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d002      	beq.n	800bf40 <osThreadNew+0x48>
        name = attr->name;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d002      	beq.n	800bf4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	699b      	ldr	r3, [r3, #24]
 800bf4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d008      	beq.n	800bf66 <osThreadNew+0x6e>
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	2b38      	cmp	r3, #56	; 0x38
 800bf58:	d805      	bhi.n	800bf66 <osThreadNew+0x6e>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d001      	beq.n	800bf6a <osThreadNew+0x72>
        return (NULL);
 800bf66:	2300      	movs	r3, #0
 800bf68:	e054      	b.n	800c014 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	695b      	ldr	r3, [r3, #20]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	695b      	ldr	r3, [r3, #20]
 800bf76:	089b      	lsrs	r3, r3, #2
 800bf78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00e      	beq.n	800bfa0 <osThreadNew+0xa8>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	2b5b      	cmp	r3, #91	; 0x5b
 800bf88:	d90a      	bls.n	800bfa0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d006      	beq.n	800bfa0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	695b      	ldr	r3, [r3, #20]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d002      	beq.n	800bfa0 <osThreadNew+0xa8>
        mem = 1;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	61bb      	str	r3, [r7, #24]
 800bf9e:	e010      	b.n	800bfc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10c      	bne.n	800bfc2 <osThreadNew+0xca>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d108      	bne.n	800bfc2 <osThreadNew+0xca>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d104      	bne.n	800bfc2 <osThreadNew+0xca>
          mem = 0;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	61bb      	str	r3, [r7, #24]
 800bfbc:	e001      	b.n	800bfc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d110      	bne.n	800bfea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bfd0:	9202      	str	r2, [sp, #8]
 800bfd2:	9301      	str	r3, [sp, #4]
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	6a3a      	ldr	r2, [r7, #32]
 800bfdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f001 f992 	bl	800d308 <xTaskCreateStatic>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	613b      	str	r3, [r7, #16]
 800bfe8:	e013      	b.n	800c012 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bfea:	69bb      	ldr	r3, [r7, #24]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d110      	bne.n	800c012 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bff0:	6a3b      	ldr	r3, [r7, #32]
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	f107 0310 	add.w	r3, r7, #16
 800bff8:	9301      	str	r3, [sp, #4]
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	9300      	str	r3, [sp, #0]
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f001 f9dd 	bl	800d3c2 <xTaskCreate>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d001      	beq.n	800c012 <osThreadNew+0x11a>
            hTask = NULL;
 800c00e:	2300      	movs	r3, #0
 800c010:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c012:	693b      	ldr	r3, [r7, #16]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3728      	adds	r7, #40	; 0x28
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c024:	f3ef 8305 	mrs	r3, IPSR
 800c028:	60bb      	str	r3, [r7, #8]
  return(result);
 800c02a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d003      	beq.n	800c038 <osDelay+0x1c>
    stat = osErrorISR;
 800c030:	f06f 0305 	mvn.w	r3, #5
 800c034:	60fb      	str	r3, [r7, #12]
 800c036:	e007      	b.n	800c048 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c038:	2300      	movs	r3, #0
 800c03a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d002      	beq.n	800c048 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f001 fb02 	bl	800d64c <vTaskDelay>
    }
  }

  return (stat);
 800c048:	68fb      	ldr	r3, [r7, #12]
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800c052:	b580      	push	{r7, lr}
 800c054:	b086      	sub	sp, #24
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800c05a:	2300      	movs	r3, #0
 800c05c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c05e:	f3ef 8305 	mrs	r3, IPSR
 800c062:	60fb      	str	r3, [r7, #12]
  return(result);
 800c064:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800c066:	2b00      	cmp	r3, #0
 800c068:	d12d      	bne.n	800c0c6 <osEventFlagsNew+0x74>
    mem = -1;
 800c06a:	f04f 33ff 	mov.w	r3, #4294967295
 800c06e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d015      	beq.n	800c0a2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d006      	beq.n	800c08c <osEventFlagsNew+0x3a>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	2b1f      	cmp	r3, #31
 800c084:	d902      	bls.n	800c08c <osEventFlagsNew+0x3a>
        mem = 1;
 800c086:	2301      	movs	r3, #1
 800c088:	613b      	str	r3, [r7, #16]
 800c08a:	e00c      	b.n	800c0a6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d108      	bne.n	800c0a6 <osEventFlagsNew+0x54>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d104      	bne.n	800c0a6 <osEventFlagsNew+0x54>
          mem = 0;
 800c09c:	2300      	movs	r3, #0
 800c09e:	613b      	str	r3, [r7, #16]
 800c0a0:	e001      	b.n	800c0a6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d106      	bne.n	800c0ba <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f000 f91d 	bl	800c2f0 <xEventGroupCreateStatic>
 800c0b6:	6178      	str	r0, [r7, #20]
 800c0b8:	e005      	b.n	800c0c6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d102      	bne.n	800c0c6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800c0c0:	f000 f94d 	bl	800c35e <xEventGroupCreate>
 800c0c4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800c0c6:	697b      	ldr	r3, [r7, #20]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3718      	adds	r7, #24
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d004      	beq.n	800c0ee <osEventFlagsSet+0x1e>
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d003      	beq.n	800c0f6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800c0ee:	f06f 0303 	mvn.w	r3, #3
 800c0f2:	617b      	str	r3, [r7, #20]
 800c0f4:	e028      	b.n	800c148 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0f6:	f3ef 8305 	mrs	r3, IPSR
 800c0fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d01d      	beq.n	800c13e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800c102:	2300      	movs	r3, #0
 800c104:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800c106:	f107 0308 	add.w	r3, r7, #8
 800c10a:	461a      	mov	r2, r3
 800c10c:	6839      	ldr	r1, [r7, #0]
 800c10e:	6938      	ldr	r0, [r7, #16]
 800c110:	f000 fb46 	bl	800c7a0 <xEventGroupSetBitsFromISR>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d103      	bne.n	800c122 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800c11a:	f06f 0302 	mvn.w	r3, #2
 800c11e:	617b      	str	r3, [r7, #20]
 800c120:	e012      	b.n	800c148 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00d      	beq.n	800c148 <osEventFlagsSet+0x78>
 800c12c:	4b09      	ldr	r3, [pc, #36]	; (800c154 <osEventFlagsSet+0x84>)
 800c12e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c132:	601a      	str	r2, [r3, #0]
 800c134:	f3bf 8f4f 	dsb	sy
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	e004      	b.n	800c148 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6938      	ldr	r0, [r7, #16]
 800c142:	f000 fa65 	bl	800c610 <xEventGroupSetBits>
 800c146:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800c148:	697b      	ldr	r3, [r7, #20]
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3718      	adds	r7, #24
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	e000ed04 	.word	0xe000ed04

0800c158 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800c158:	b580      	push	{r7, lr}
 800c15a:	b086      	sub	sp, #24
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d004      	beq.n	800c176 <osEventFlagsClear+0x1e>
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c172:	2b00      	cmp	r3, #0
 800c174:	d003      	beq.n	800c17e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800c176:	f06f 0303 	mvn.w	r3, #3
 800c17a:	617b      	str	r3, [r7, #20]
 800c17c:	e019      	b.n	800c1b2 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c17e:	f3ef 8305 	mrs	r3, IPSR
 800c182:	60fb      	str	r3, [r7, #12]
  return(result);
 800c184:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00e      	beq.n	800c1a8 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800c18a:	6938      	ldr	r0, [r7, #16]
 800c18c:	f000 fa1c 	bl	800c5c8 <xEventGroupGetBitsFromISR>
 800c190:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6938      	ldr	r0, [r7, #16]
 800c196:	f000 fa03 	bl	800c5a0 <xEventGroupClearBitsFromISR>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d108      	bne.n	800c1b2 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 800c1a0:	f06f 0302 	mvn.w	r3, #2
 800c1a4:	617b      	str	r3, [r7, #20]
 800c1a6:	e004      	b.n	800c1b2 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	6938      	ldr	r0, [r7, #16]
 800c1ac:	f000 f9c0 	bl	800c530 <xEventGroupClearBits>
 800c1b0:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800c1b2:	697b      	ldr	r3, [r7, #20]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3718      	adds	r7, #24
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b08c      	sub	sp, #48	; 0x30
 800c1c0:	af02      	add	r7, sp, #8
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
 800c1c8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d004      	beq.n	800c1de <osEventFlagsWait+0x22>
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d003      	beq.n	800c1e6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800c1de:	f06f 0303 	mvn.w	r3, #3
 800c1e2:	61fb      	str	r3, [r7, #28]
 800c1e4:	e04b      	b.n	800c27e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1e6:	f3ef 8305 	mrs	r3, IPSR
 800c1ea:	617b      	str	r3, [r7, #20]
  return(result);
 800c1ec:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d003      	beq.n	800c1fa <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800c1f2:	f06f 0305 	mvn.w	r3, #5
 800c1f6:	61fb      	str	r3, [r7, #28]
 800c1f8:	e041      	b.n	800c27e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f003 0301 	and.w	r3, r3, #1
 800c200:	2b00      	cmp	r3, #0
 800c202:	d002      	beq.n	800c20a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800c204:	2301      	movs	r3, #1
 800c206:	627b      	str	r3, [r7, #36]	; 0x24
 800c208:	e001      	b.n	800c20e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800c20a:	2300      	movs	r3, #0
 800c20c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f003 0302 	and.w	r3, r3, #2
 800c214:	2b00      	cmp	r3, #0
 800c216:	d002      	beq.n	800c21e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800c218:	2300      	movs	r3, #0
 800c21a:	623b      	str	r3, [r7, #32]
 800c21c:	e001      	b.n	800c222 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800c21e:	2301      	movs	r3, #1
 800c220:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	9300      	str	r3, [sp, #0]
 800c226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c228:	6a3a      	ldr	r2, [r7, #32]
 800c22a:	68b9      	ldr	r1, [r7, #8]
 800c22c:	69b8      	ldr	r0, [r7, #24]
 800c22e:	f000 f8b1 	bl	800c394 <xEventGroupWaitBits>
 800c232:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f003 0301 	and.w	r3, r3, #1
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d010      	beq.n	800c260 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800c23e:	68ba      	ldr	r2, [r7, #8]
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	4013      	ands	r3, r2
 800c244:	68ba      	ldr	r2, [r7, #8]
 800c246:	429a      	cmp	r2, r3
 800c248:	d019      	beq.n	800c27e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d003      	beq.n	800c258 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800c250:	f06f 0301 	mvn.w	r3, #1
 800c254:	61fb      	str	r3, [r7, #28]
 800c256:	e012      	b.n	800c27e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800c258:	f06f 0302 	mvn.w	r3, #2
 800c25c:	61fb      	str	r3, [r7, #28]
 800c25e:	e00e      	b.n	800c27e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800c260:	68ba      	ldr	r2, [r7, #8]
 800c262:	69fb      	ldr	r3, [r7, #28]
 800c264:	4013      	ands	r3, r2
 800c266:	2b00      	cmp	r3, #0
 800c268:	d109      	bne.n	800c27e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d003      	beq.n	800c278 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800c270:	f06f 0301 	mvn.w	r3, #1
 800c274:	61fb      	str	r3, [r7, #28]
 800c276:	e002      	b.n	800c27e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800c278:	f06f 0302 	mvn.w	r3, #2
 800c27c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800c27e:	69fb      	ldr	r3, [r7, #28]
}
 800c280:	4618      	mov	r0, r3
 800c282:	3728      	adds	r7, #40	; 0x28
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	4a07      	ldr	r2, [pc, #28]	; (800c2b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800c298:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	4a06      	ldr	r2, [pc, #24]	; (800c2b8 <vApplicationGetIdleTaskMemory+0x30>)
 800c29e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2280      	movs	r2, #128	; 0x80
 800c2a4:	601a      	str	r2, [r3, #0]
}
 800c2a6:	bf00      	nop
 800c2a8:	3714      	adds	r7, #20
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	20002dac 	.word	0x20002dac
 800c2b8:	20002e08 	.word	0x20002e08

0800c2bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c2bc:	b480      	push	{r7}
 800c2be:	b085      	sub	sp, #20
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	4a07      	ldr	r2, [pc, #28]	; (800c2e8 <vApplicationGetTimerTaskMemory+0x2c>)
 800c2cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	4a06      	ldr	r2, [pc, #24]	; (800c2ec <vApplicationGetTimerTaskMemory+0x30>)
 800c2d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c2da:	601a      	str	r2, [r3, #0]
}
 800c2dc:	bf00      	nop
 800c2de:	3714      	adds	r7, #20
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	20003008 	.word	0x20003008
 800c2ec:	20003064 	.word	0x20003064

0800c2f0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d10a      	bne.n	800c314 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c302:	f383 8811 	msr	BASEPRI, r3
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c310:	bf00      	nop
 800c312:	e7fe      	b.n	800c312 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800c314:	2320      	movs	r3, #32
 800c316:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	2b20      	cmp	r3, #32
 800c31c:	d00a      	beq.n	800c334 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	60fb      	str	r3, [r7, #12]
}
 800c330:	bf00      	nop
 800c332:	e7fe      	b.n	800c332 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00a      	beq.n	800c354 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	2200      	movs	r2, #0
 800c342:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	3304      	adds	r3, #4
 800c348:	4618      	mov	r0, r3
 800c34a:	f000 fa3d 	bl	800c7c8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	2201      	movs	r2, #1
 800c352:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800c354:	697b      	ldr	r3, [r7, #20]
	}
 800c356:	4618      	mov	r0, r3
 800c358:	3718      	adds	r7, #24
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c35e:	b580      	push	{r7, lr}
 800c360:	b082      	sub	sp, #8
 800c362:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c364:	2020      	movs	r0, #32
 800c366:	f002 fd3f 	bl	800ede8 <pvPortMalloc>
 800c36a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00a      	beq.n	800c388 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	3304      	adds	r3, #4
 800c37c:	4618      	mov	r0, r3
 800c37e:	f000 fa23 	bl	800c7c8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c388:	687b      	ldr	r3, [r7, #4]
	}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
	...

0800c394 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b090      	sub	sp, #64	; 0x40
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	607a      	str	r2, [r7, #4]
 800c3a0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d10a      	bne.n	800c3ca <xEventGroupWaitBits+0x36>
	__asm volatile
 800c3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b8:	f383 8811 	msr	BASEPRI, r3
 800c3bc:	f3bf 8f6f 	isb	sy
 800c3c0:	f3bf 8f4f 	dsb	sy
 800c3c4:	623b      	str	r3, [r7, #32]
}
 800c3c6:	bf00      	nop
 800c3c8:	e7fe      	b.n	800c3c8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00a      	beq.n	800c3ea <xEventGroupWaitBits+0x56>
	__asm volatile
 800c3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d8:	f383 8811 	msr	BASEPRI, r3
 800c3dc:	f3bf 8f6f 	isb	sy
 800c3e0:	f3bf 8f4f 	dsb	sy
 800c3e4:	61fb      	str	r3, [r7, #28]
}
 800c3e6:	bf00      	nop
 800c3e8:	e7fe      	b.n	800c3e8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d10a      	bne.n	800c406 <xEventGroupWaitBits+0x72>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	61bb      	str	r3, [r7, #24]
}
 800c402:	bf00      	nop
 800c404:	e7fe      	b.n	800c404 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c406:	f001 fe3b 	bl	800e080 <xTaskGetSchedulerState>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d102      	bne.n	800c416 <xEventGroupWaitBits+0x82>
 800c410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c412:	2b00      	cmp	r3, #0
 800c414:	d101      	bne.n	800c41a <xEventGroupWaitBits+0x86>
 800c416:	2301      	movs	r3, #1
 800c418:	e000      	b.n	800c41c <xEventGroupWaitBits+0x88>
 800c41a:	2300      	movs	r3, #0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d10a      	bne.n	800c436 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	617b      	str	r3, [r7, #20]
}
 800c432:	bf00      	nop
 800c434:	e7fe      	b.n	800c434 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800c436:	f001 f9a3 	bl	800d780 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c440:	683a      	ldr	r2, [r7, #0]
 800c442:	68b9      	ldr	r1, [r7, #8]
 800c444:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c446:	f000 f988 	bl	800c75a <prvTestWaitCondition>
 800c44a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800c44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00e      	beq.n	800c470 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c454:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c456:	2300      	movs	r3, #0
 800c458:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d028      	beq.n	800c4b2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	43db      	mvns	r3, r3
 800c468:	401a      	ands	r2, r3
 800c46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c46c:	601a      	str	r2, [r3, #0]
 800c46e:	e020      	b.n	800c4b2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c472:	2b00      	cmp	r3, #0
 800c474:	d104      	bne.n	800c480 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c478:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800c47a:	2301      	movs	r3, #1
 800c47c:	633b      	str	r3, [r7, #48]	; 0x30
 800c47e:	e018      	b.n	800c4b2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d003      	beq.n	800c48e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c488:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c48c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d003      	beq.n	800c49c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c496:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c49a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c49e:	1d18      	adds	r0, r3, #4
 800c4a0:	68ba      	ldr	r2, [r7, #8]
 800c4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	f001 fb61 	bl	800db70 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c4b2:	f001 f973 	bl	800d79c <xTaskResumeAll>
 800c4b6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c4b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d031      	beq.n	800c522 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800c4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d107      	bne.n	800c4d4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800c4c4:	4b19      	ldr	r3, [pc, #100]	; (800c52c <xEventGroupWaitBits+0x198>)
 800c4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4ca:	601a      	str	r2, [r3, #0]
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c4d4:	f001 fe60 	bl	800e198 <uxTaskResetEventItemValue>
 800c4d8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c4da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d11a      	bne.n	800c51a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800c4e4:	f002 fb5e 	bl	800eba4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c4ee:	683a      	ldr	r2, [r7, #0]
 800c4f0:	68b9      	ldr	r1, [r7, #8]
 800c4f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c4f4:	f000 f931 	bl	800c75a <prvTestWaitCondition>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d009      	beq.n	800c512 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d006      	beq.n	800c512 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	43db      	mvns	r3, r3
 800c50c:	401a      	ands	r2, r3
 800c50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c510:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c512:	2301      	movs	r3, #1
 800c514:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800c516:	f002 fb75 	bl	800ec04 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c51c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c520:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c524:	4618      	mov	r0, r3
 800c526:	3740      	adds	r7, #64	; 0x40
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	e000ed04 	.word	0xe000ed04

0800c530 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d10a      	bne.n	800c55a <xEventGroupClearBits+0x2a>
	__asm volatile
 800c544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c548:	f383 8811 	msr	BASEPRI, r3
 800c54c:	f3bf 8f6f 	isb	sy
 800c550:	f3bf 8f4f 	dsb	sy
 800c554:	60fb      	str	r3, [r7, #12]
}
 800c556:	bf00      	nop
 800c558:	e7fe      	b.n	800c558 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00a      	beq.n	800c57a <xEventGroupClearBits+0x4a>
	__asm volatile
 800c564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c568:	f383 8811 	msr	BASEPRI, r3
 800c56c:	f3bf 8f6f 	isb	sy
 800c570:	f3bf 8f4f 	dsb	sy
 800c574:	60bb      	str	r3, [r7, #8]
}
 800c576:	bf00      	nop
 800c578:	e7fe      	b.n	800c578 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800c57a:	f002 fb13 	bl	800eba4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	43db      	mvns	r3, r3
 800c58c:	401a      	ands	r2, r3
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800c592:	f002 fb37 	bl	800ec04 <vPortExitCritical>

	return uxReturn;
 800c596:	693b      	ldr	r3, [r7, #16]
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3718      	adds	r7, #24
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	683a      	ldr	r2, [r7, #0]
 800c5ae:	6879      	ldr	r1, [r7, #4]
 800c5b0:	4804      	ldr	r0, [pc, #16]	; (800c5c4 <xEventGroupClearBitsFromISR+0x24>)
 800c5b2:	f002 f9ab 	bl	800e90c <xTimerPendFunctionCallFromISR>
 800c5b6:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
	}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	0800c741 	.word	0x0800c741

0800c5c8 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b089      	sub	sp, #36	; 0x24
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c5d4:	f3ef 8211 	mrs	r2, BASEPRI
 800c5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5dc:	f383 8811 	msr	BASEPRI, r3
 800c5e0:	f3bf 8f6f 	isb	sy
 800c5e4:	f3bf 8f4f 	dsb	sy
 800c5e8:	60fa      	str	r2, [r7, #12]
 800c5ea:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5ee:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	617b      	str	r3, [r7, #20]
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c600:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800c602:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800c604:	4618      	mov	r0, r3
 800c606:	3724      	adds	r7, #36	; 0x24
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b08e      	sub	sp, #56	; 0x38
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c61a:	2300      	movs	r3, #0
 800c61c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800c622:	2300      	movs	r3, #0
 800c624:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d10a      	bne.n	800c642 <xEventGroupSetBits+0x32>
	__asm volatile
 800c62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	613b      	str	r3, [r7, #16]
}
 800c63e:	bf00      	nop
 800c640:	e7fe      	b.n	800c640 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00a      	beq.n	800c662 <xEventGroupSetBits+0x52>
	__asm volatile
 800c64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c650:	f383 8811 	msr	BASEPRI, r3
 800c654:	f3bf 8f6f 	isb	sy
 800c658:	f3bf 8f4f 	dsb	sy
 800c65c:	60fb      	str	r3, [r7, #12]
}
 800c65e:	bf00      	nop
 800c660:	e7fe      	b.n	800c660 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c664:	3304      	adds	r3, #4
 800c666:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66a:	3308      	adds	r3, #8
 800c66c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c66e:	f001 f887 	bl	800d780 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	431a      	orrs	r2, r3
 800c680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c682:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c684:	e03c      	b.n	800c700 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c692:	2300      	movs	r3, #0
 800c694:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c69c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c69e:	69bb      	ldr	r3, [r7, #24]
 800c6a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c6a4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d108      	bne.n	800c6c2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	4013      	ands	r3, r2
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00b      	beq.n	800c6d4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6c0:	e008      	b.n	800c6d4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	4013      	ands	r3, r2
 800c6ca:	69ba      	ldr	r2, [r7, #24]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d101      	bne.n	800c6d4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d010      	beq.n	800c6fc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d003      	beq.n	800c6ec <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c6e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c6f8:	f001 fb06 	bl	800dd08 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800c700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c702:	6a3b      	ldr	r3, [r7, #32]
 800c704:	429a      	cmp	r2, r3
 800c706:	d1be      	bne.n	800c686 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70e:	43db      	mvns	r3, r3
 800c710:	401a      	ands	r2, r3
 800c712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c714:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c716:	f001 f841 	bl	800d79c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71c:	681b      	ldr	r3, [r3, #0]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3738      	adds	r7, #56	; 0x38
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b082      	sub	sp, #8
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c730:	6839      	ldr	r1, [r7, #0]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f7ff ff6c 	bl	800c610 <xEventGroupSetBits>
}
 800c738:	bf00      	nop
 800c73a:	3708      	adds	r7, #8
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c74a:	6839      	ldr	r1, [r7, #0]
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f7ff feef 	bl	800c530 <xEventGroupClearBits>
}
 800c752:	bf00      	nop
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c75a:	b480      	push	{r7}
 800c75c:	b087      	sub	sp, #28
 800c75e:	af00      	add	r7, sp, #0
 800c760:	60f8      	str	r0, [r7, #12]
 800c762:	60b9      	str	r1, [r7, #8]
 800c764:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c766:	2300      	movs	r3, #0
 800c768:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d107      	bne.n	800c780 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	4013      	ands	r3, r2
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00a      	beq.n	800c790 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c77a:	2301      	movs	r3, #1
 800c77c:	617b      	str	r3, [r7, #20]
 800c77e:	e007      	b.n	800c790 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	4013      	ands	r3, r2
 800c786:	68ba      	ldr	r2, [r7, #8]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d101      	bne.n	800c790 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c78c:	2301      	movs	r3, #1
 800c78e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800c790:	697b      	ldr	r3, [r7, #20]
}
 800c792:	4618      	mov	r0, r3
 800c794:	371c      	adds	r7, #28
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr
	...

0800c7a0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b086      	sub	sp, #24
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	68ba      	ldr	r2, [r7, #8]
 800c7b0:	68f9      	ldr	r1, [r7, #12]
 800c7b2:	4804      	ldr	r0, [pc, #16]	; (800c7c4 <xEventGroupSetBitsFromISR+0x24>)
 800c7b4:	f002 f8aa 	bl	800e90c <xTimerPendFunctionCallFromISR>
 800c7b8:	6178      	str	r0, [r7, #20]

		return xReturn;
 800c7ba:	697b      	ldr	r3, [r7, #20]
	}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3718      	adds	r7, #24
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	0800c727 	.word	0x0800c727

0800c7c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f103 0208 	add.w	r2, r3, #8
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c7e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f103 0208 	add.w	r2, r3, #8
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f103 0208 	add.w	r2, r3, #8
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c7fc:	bf00      	nop
 800c7fe:	370c      	adds	r7, #12
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c808:	b480      	push	{r7}
 800c80a:	b083      	sub	sp, #12
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c816:	bf00      	nop
 800c818:	370c      	adds	r7, #12
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr

0800c822 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c822:	b480      	push	{r7}
 800c824:	b085      	sub	sp, #20
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
 800c82a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	689a      	ldr	r2, [r3, #8]
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	683a      	ldr	r2, [r7, #0]
 800c846:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	683a      	ldr	r2, [r7, #0]
 800c84c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	1c5a      	adds	r2, r3, #1
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	601a      	str	r2, [r3, #0]
}
 800c85e:	bf00      	nop
 800c860:	3714      	adds	r7, #20
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr

0800c86a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c86a:	b480      	push	{r7}
 800c86c:	b085      	sub	sp, #20
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
 800c872:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c880:	d103      	bne.n	800c88a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	691b      	ldr	r3, [r3, #16]
 800c886:	60fb      	str	r3, [r7, #12]
 800c888:	e00c      	b.n	800c8a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	3308      	adds	r3, #8
 800c88e:	60fb      	str	r3, [r7, #12]
 800c890:	e002      	b.n	800c898 <vListInsert+0x2e>
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	60fb      	str	r3, [r7, #12]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	68ba      	ldr	r2, [r7, #8]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d2f6      	bcs.n	800c892 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	685a      	ldr	r2, [r3, #4]
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	683a      	ldr	r2, [r7, #0]
 800c8b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	68fa      	ldr	r2, [r7, #12]
 800c8b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	683a      	ldr	r2, [r7, #0]
 800c8be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	1c5a      	adds	r2, r3, #1
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	601a      	str	r2, [r3, #0]
}
 800c8d0:	bf00      	nop
 800c8d2:	3714      	adds	r7, #20
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	6892      	ldr	r2, [r2, #8]
 800c8f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	689b      	ldr	r3, [r3, #8]
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	6852      	ldr	r2, [r2, #4]
 800c8fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	429a      	cmp	r2, r3
 800c906:	d103      	bne.n	800c910 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	689a      	ldr	r2, [r3, #8]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2200      	movs	r2, #0
 800c914:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	1e5a      	subs	r2, r3, #1
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
}
 800c924:	4618      	mov	r0, r3
 800c926:	3714      	adds	r7, #20
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d10a      	bne.n	800c95a <xQueueGenericReset+0x2a>
	__asm volatile
 800c944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c948:	f383 8811 	msr	BASEPRI, r3
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	60bb      	str	r3, [r7, #8]
}
 800c956:	bf00      	nop
 800c958:	e7fe      	b.n	800c958 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c95a:	f002 f923 	bl	800eba4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c966:	68f9      	ldr	r1, [r7, #12]
 800c968:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c96a:	fb01 f303 	mul.w	r3, r1, r3
 800c96e:	441a      	add	r2, r3
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2200      	movs	r2, #0
 800c978:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c98a:	3b01      	subs	r3, #1
 800c98c:	68f9      	ldr	r1, [r7, #12]
 800c98e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c990:	fb01 f303 	mul.w	r3, r1, r3
 800c994:	441a      	add	r2, r3
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	22ff      	movs	r2, #255	; 0xff
 800c99e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	22ff      	movs	r2, #255	; 0xff
 800c9a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d114      	bne.n	800c9da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d01a      	beq.n	800c9ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	3310      	adds	r3, #16
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f001 f93f 	bl	800dc40 <xTaskRemoveFromEventList>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d012      	beq.n	800c9ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c9c8:	4b0c      	ldr	r3, [pc, #48]	; (800c9fc <xQueueGenericReset+0xcc>)
 800c9ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ce:	601a      	str	r2, [r3, #0]
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	f3bf 8f6f 	isb	sy
 800c9d8:	e009      	b.n	800c9ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	3310      	adds	r3, #16
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7ff fef2 	bl	800c7c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	3324      	adds	r3, #36	; 0x24
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7ff feed 	bl	800c7c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c9ee:	f002 f909 	bl	800ec04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c9f2:	2301      	movs	r3, #1
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3710      	adds	r7, #16
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	e000ed04 	.word	0xe000ed04

0800ca00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b08e      	sub	sp, #56	; 0x38
 800ca04:	af02      	add	r7, sp, #8
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	60b9      	str	r1, [r7, #8]
 800ca0a:	607a      	str	r2, [r7, #4]
 800ca0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d10a      	bne.n	800ca2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ca14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca18:	f383 8811 	msr	BASEPRI, r3
 800ca1c:	f3bf 8f6f 	isb	sy
 800ca20:	f3bf 8f4f 	dsb	sy
 800ca24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ca26:	bf00      	nop
 800ca28:	e7fe      	b.n	800ca28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d10a      	bne.n	800ca46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ca30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca34:	f383 8811 	msr	BASEPRI, r3
 800ca38:	f3bf 8f6f 	isb	sy
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca42:	bf00      	nop
 800ca44:	e7fe      	b.n	800ca44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d002      	beq.n	800ca52 <xQueueGenericCreateStatic+0x52>
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d001      	beq.n	800ca56 <xQueueGenericCreateStatic+0x56>
 800ca52:	2301      	movs	r3, #1
 800ca54:	e000      	b.n	800ca58 <xQueueGenericCreateStatic+0x58>
 800ca56:	2300      	movs	r3, #0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d10a      	bne.n	800ca72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ca5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca60:	f383 8811 	msr	BASEPRI, r3
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	f3bf 8f4f 	dsb	sy
 800ca6c:	623b      	str	r3, [r7, #32]
}
 800ca6e:	bf00      	nop
 800ca70:	e7fe      	b.n	800ca70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d102      	bne.n	800ca7e <xQueueGenericCreateStatic+0x7e>
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d101      	bne.n	800ca82 <xQueueGenericCreateStatic+0x82>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e000      	b.n	800ca84 <xQueueGenericCreateStatic+0x84>
 800ca82:	2300      	movs	r3, #0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d10a      	bne.n	800ca9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ca88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8c:	f383 8811 	msr	BASEPRI, r3
 800ca90:	f3bf 8f6f 	isb	sy
 800ca94:	f3bf 8f4f 	dsb	sy
 800ca98:	61fb      	str	r3, [r7, #28]
}
 800ca9a:	bf00      	nop
 800ca9c:	e7fe      	b.n	800ca9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ca9e:	2350      	movs	r3, #80	; 0x50
 800caa0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	2b50      	cmp	r3, #80	; 0x50
 800caa6:	d00a      	beq.n	800cabe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800caa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caac:	f383 8811 	msr	BASEPRI, r3
 800cab0:	f3bf 8f6f 	isb	sy
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	61bb      	str	r3, [r7, #24]
}
 800caba:	bf00      	nop
 800cabc:	e7fe      	b.n	800cabc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cabe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00d      	beq.n	800cae6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800caca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cacc:	2201      	movs	r2, #1
 800cace:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cad2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad8:	9300      	str	r3, [sp, #0]
 800cada:	4613      	mov	r3, r2
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	68b9      	ldr	r1, [r7, #8]
 800cae0:	68f8      	ldr	r0, [r7, #12]
 800cae2:	f000 f805 	bl	800caf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cae8:	4618      	mov	r0, r3
 800caea:	3730      	adds	r7, #48	; 0x30
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}

0800caf0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	607a      	str	r2, [r7, #4]
 800cafc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d103      	bne.n	800cb0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	69ba      	ldr	r2, [r7, #24]
 800cb08:	601a      	str	r2, [r3, #0]
 800cb0a:	e002      	b.n	800cb12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cb0c:	69bb      	ldr	r3, [r7, #24]
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	68ba      	ldr	r2, [r7, #8]
 800cb1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb1e:	2101      	movs	r1, #1
 800cb20:	69b8      	ldr	r0, [r7, #24]
 800cb22:	f7ff ff05 	bl	800c930 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cb26:	69bb      	ldr	r3, [r7, #24]
 800cb28:	78fa      	ldrb	r2, [r7, #3]
 800cb2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cb2e:	bf00      	nop
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
	...

0800cb38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b08e      	sub	sp, #56	; 0x38
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
 800cb44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb46:	2300      	movs	r3, #0
 800cb48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d10a      	bne.n	800cb6a <xQueueGenericSend+0x32>
	__asm volatile
 800cb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb58:	f383 8811 	msr	BASEPRI, r3
 800cb5c:	f3bf 8f6f 	isb	sy
 800cb60:	f3bf 8f4f 	dsb	sy
 800cb64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb66:	bf00      	nop
 800cb68:	e7fe      	b.n	800cb68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d103      	bne.n	800cb78 <xQueueGenericSend+0x40>
 800cb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d101      	bne.n	800cb7c <xQueueGenericSend+0x44>
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e000      	b.n	800cb7e <xQueueGenericSend+0x46>
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d10a      	bne.n	800cb98 <xQueueGenericSend+0x60>
	__asm volatile
 800cb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb86:	f383 8811 	msr	BASEPRI, r3
 800cb8a:	f3bf 8f6f 	isb	sy
 800cb8e:	f3bf 8f4f 	dsb	sy
 800cb92:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cb94:	bf00      	nop
 800cb96:	e7fe      	b.n	800cb96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	2b02      	cmp	r3, #2
 800cb9c:	d103      	bne.n	800cba6 <xQueueGenericSend+0x6e>
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba2:	2b01      	cmp	r3, #1
 800cba4:	d101      	bne.n	800cbaa <xQueueGenericSend+0x72>
 800cba6:	2301      	movs	r3, #1
 800cba8:	e000      	b.n	800cbac <xQueueGenericSend+0x74>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d10a      	bne.n	800cbc6 <xQueueGenericSend+0x8e>
	__asm volatile
 800cbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb4:	f383 8811 	msr	BASEPRI, r3
 800cbb8:	f3bf 8f6f 	isb	sy
 800cbbc:	f3bf 8f4f 	dsb	sy
 800cbc0:	623b      	str	r3, [r7, #32]
}
 800cbc2:	bf00      	nop
 800cbc4:	e7fe      	b.n	800cbc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbc6:	f001 fa5b 	bl	800e080 <xTaskGetSchedulerState>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d102      	bne.n	800cbd6 <xQueueGenericSend+0x9e>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d101      	bne.n	800cbda <xQueueGenericSend+0xa2>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e000      	b.n	800cbdc <xQueueGenericSend+0xa4>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d10a      	bne.n	800cbf6 <xQueueGenericSend+0xbe>
	__asm volatile
 800cbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe4:	f383 8811 	msr	BASEPRI, r3
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	61fb      	str	r3, [r7, #28]
}
 800cbf2:	bf00      	nop
 800cbf4:	e7fe      	b.n	800cbf4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbf6:	f001 ffd5 	bl	800eba4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d302      	bcc.n	800cc0c <xQueueGenericSend+0xd4>
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	2b02      	cmp	r3, #2
 800cc0a:	d129      	bne.n	800cc60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc0c:	683a      	ldr	r2, [r7, #0]
 800cc0e:	68b9      	ldr	r1, [r7, #8]
 800cc10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc12:	f000 fa0b 	bl	800d02c <prvCopyDataToQueue>
 800cc16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d010      	beq.n	800cc42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc22:	3324      	adds	r3, #36	; 0x24
 800cc24:	4618      	mov	r0, r3
 800cc26:	f001 f80b 	bl	800dc40 <xTaskRemoveFromEventList>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d013      	beq.n	800cc58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc30:	4b3f      	ldr	r3, [pc, #252]	; (800cd30 <xQueueGenericSend+0x1f8>)
 800cc32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc36:	601a      	str	r2, [r3, #0]
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	e00a      	b.n	800cc58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d007      	beq.n	800cc58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc48:	4b39      	ldr	r3, [pc, #228]	; (800cd30 <xQueueGenericSend+0x1f8>)
 800cc4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc4e:	601a      	str	r2, [r3, #0]
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc58:	f001 ffd4 	bl	800ec04 <vPortExitCritical>
				return pdPASS;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	e063      	b.n	800cd28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d103      	bne.n	800cc6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc66:	f001 ffcd 	bl	800ec04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	e05c      	b.n	800cd28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d106      	bne.n	800cc82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc74:	f107 0314 	add.w	r3, r7, #20
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f001 f8a7 	bl	800ddcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc82:	f001 ffbf 	bl	800ec04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc86:	f000 fd7b 	bl	800d780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc8a:	f001 ff8b 	bl	800eba4 <vPortEnterCritical>
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc94:	b25b      	sxtb	r3, r3
 800cc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc9a:	d103      	bne.n	800cca4 <xQueueGenericSend+0x16c>
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccaa:	b25b      	sxtb	r3, r3
 800ccac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb0:	d103      	bne.n	800ccba <xQueueGenericSend+0x182>
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ccba:	f001 ffa3 	bl	800ec04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ccbe:	1d3a      	adds	r2, r7, #4
 800ccc0:	f107 0314 	add.w	r3, r7, #20
 800ccc4:	4611      	mov	r1, r2
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f001 f896 	bl	800ddf8 <xTaskCheckForTimeOut>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d124      	bne.n	800cd1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ccd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccd4:	f000 faa2 	bl	800d21c <prvIsQueueFull>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d018      	beq.n	800cd10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ccde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce0:	3310      	adds	r3, #16
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	4611      	mov	r1, r2
 800cce6:	4618      	mov	r0, r3
 800cce8:	f000 ff1e 	bl	800db28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ccec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccee:	f000 fa2d 	bl	800d14c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ccf2:	f000 fd53 	bl	800d79c <xTaskResumeAll>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	f47f af7c 	bne.w	800cbf6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ccfe:	4b0c      	ldr	r3, [pc, #48]	; (800cd30 <xQueueGenericSend+0x1f8>)
 800cd00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd04:	601a      	str	r2, [r3, #0]
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	f3bf 8f6f 	isb	sy
 800cd0e:	e772      	b.n	800cbf6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cd10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd12:	f000 fa1b 	bl	800d14c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd16:	f000 fd41 	bl	800d79c <xTaskResumeAll>
 800cd1a:	e76c      	b.n	800cbf6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd1e:	f000 fa15 	bl	800d14c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd22:	f000 fd3b 	bl	800d79c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3738      	adds	r7, #56	; 0x38
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	e000ed04 	.word	0xe000ed04

0800cd34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b090      	sub	sp, #64	; 0x40
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
 800cd40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d10a      	bne.n	800cd62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd50:	f383 8811 	msr	BASEPRI, r3
 800cd54:	f3bf 8f6f 	isb	sy
 800cd58:	f3bf 8f4f 	dsb	sy
 800cd5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd5e:	bf00      	nop
 800cd60:	e7fe      	b.n	800cd60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d103      	bne.n	800cd70 <xQueueGenericSendFromISR+0x3c>
 800cd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d101      	bne.n	800cd74 <xQueueGenericSendFromISR+0x40>
 800cd70:	2301      	movs	r3, #1
 800cd72:	e000      	b.n	800cd76 <xQueueGenericSendFromISR+0x42>
 800cd74:	2300      	movs	r3, #0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d10a      	bne.n	800cd90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7e:	f383 8811 	msr	BASEPRI, r3
 800cd82:	f3bf 8f6f 	isb	sy
 800cd86:	f3bf 8f4f 	dsb	sy
 800cd8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd8c:	bf00      	nop
 800cd8e:	e7fe      	b.n	800cd8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	2b02      	cmp	r3, #2
 800cd94:	d103      	bne.n	800cd9e <xQueueGenericSendFromISR+0x6a>
 800cd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d101      	bne.n	800cda2 <xQueueGenericSendFromISR+0x6e>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e000      	b.n	800cda4 <xQueueGenericSendFromISR+0x70>
 800cda2:	2300      	movs	r3, #0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d10a      	bne.n	800cdbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdac:	f383 8811 	msr	BASEPRI, r3
 800cdb0:	f3bf 8f6f 	isb	sy
 800cdb4:	f3bf 8f4f 	dsb	sy
 800cdb8:	623b      	str	r3, [r7, #32]
}
 800cdba:	bf00      	nop
 800cdbc:	e7fe      	b.n	800cdbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdbe:	f001 ffd3 	bl	800ed68 <vPortValidateInterruptPriority>
	__asm volatile
 800cdc2:	f3ef 8211 	mrs	r2, BASEPRI
 800cdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdca:	f383 8811 	msr	BASEPRI, r3
 800cdce:	f3bf 8f6f 	isb	sy
 800cdd2:	f3bf 8f4f 	dsb	sy
 800cdd6:	61fa      	str	r2, [r7, #28]
 800cdd8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800cdda:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cddc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d302      	bcc.n	800cdf0 <xQueueGenericSendFromISR+0xbc>
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d12f      	bne.n	800ce50 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdfe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce00:	683a      	ldr	r2, [r7, #0]
 800ce02:	68b9      	ldr	r1, [r7, #8]
 800ce04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce06:	f000 f911 	bl	800d02c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ce0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce12:	d112      	bne.n	800ce3a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d016      	beq.n	800ce4a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1e:	3324      	adds	r3, #36	; 0x24
 800ce20:	4618      	mov	r0, r3
 800ce22:	f000 ff0d 	bl	800dc40 <xTaskRemoveFromEventList>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00e      	beq.n	800ce4a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d00b      	beq.n	800ce4a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2201      	movs	r2, #1
 800ce36:	601a      	str	r2, [r3, #0]
 800ce38:	e007      	b.n	800ce4a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce3e:	3301      	adds	r3, #1
 800ce40:	b2db      	uxtb	r3, r3
 800ce42:	b25a      	sxtb	r2, r3
 800ce44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ce4e:	e001      	b.n	800ce54 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce50:	2300      	movs	r3, #0
 800ce52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce56:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	f383 8811 	msr	BASEPRI, r3
}
 800ce5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3740      	adds	r7, #64	; 0x40
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
	...

0800ce6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b08c      	sub	sp, #48	; 0x30
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d10a      	bne.n	800ce9c <xQueueReceive+0x30>
	__asm volatile
 800ce86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8a:	f383 8811 	msr	BASEPRI, r3
 800ce8e:	f3bf 8f6f 	isb	sy
 800ce92:	f3bf 8f4f 	dsb	sy
 800ce96:	623b      	str	r3, [r7, #32]
}
 800ce98:	bf00      	nop
 800ce9a:	e7fe      	b.n	800ce9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d103      	bne.n	800ceaa <xQueueReceive+0x3e>
 800cea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d101      	bne.n	800ceae <xQueueReceive+0x42>
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e000      	b.n	800ceb0 <xQueueReceive+0x44>
 800ceae:	2300      	movs	r3, #0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d10a      	bne.n	800ceca <xQueueReceive+0x5e>
	__asm volatile
 800ceb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb8:	f383 8811 	msr	BASEPRI, r3
 800cebc:	f3bf 8f6f 	isb	sy
 800cec0:	f3bf 8f4f 	dsb	sy
 800cec4:	61fb      	str	r3, [r7, #28]
}
 800cec6:	bf00      	nop
 800cec8:	e7fe      	b.n	800cec8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ceca:	f001 f8d9 	bl	800e080 <xTaskGetSchedulerState>
 800cece:	4603      	mov	r3, r0
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d102      	bne.n	800ceda <xQueueReceive+0x6e>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d101      	bne.n	800cede <xQueueReceive+0x72>
 800ceda:	2301      	movs	r3, #1
 800cedc:	e000      	b.n	800cee0 <xQueueReceive+0x74>
 800cede:	2300      	movs	r3, #0
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d10a      	bne.n	800cefa <xQueueReceive+0x8e>
	__asm volatile
 800cee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee8:	f383 8811 	msr	BASEPRI, r3
 800ceec:	f3bf 8f6f 	isb	sy
 800cef0:	f3bf 8f4f 	dsb	sy
 800cef4:	61bb      	str	r3, [r7, #24]
}
 800cef6:	bf00      	nop
 800cef8:	e7fe      	b.n	800cef8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cefa:	f001 fe53 	bl	800eba4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d01f      	beq.n	800cf4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf0a:	68b9      	ldr	r1, [r7, #8]
 800cf0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf0e:	f000 f8f7 	bl	800d100 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf14:	1e5a      	subs	r2, r3, #1
 800cf16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00f      	beq.n	800cf42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf24:	3310      	adds	r3, #16
 800cf26:	4618      	mov	r0, r3
 800cf28:	f000 fe8a 	bl	800dc40 <xTaskRemoveFromEventList>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d007      	beq.n	800cf42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf32:	4b3d      	ldr	r3, [pc, #244]	; (800d028 <xQueueReceive+0x1bc>)
 800cf34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf38:	601a      	str	r2, [r3, #0]
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf42:	f001 fe5f 	bl	800ec04 <vPortExitCritical>
				return pdPASS;
 800cf46:	2301      	movs	r3, #1
 800cf48:	e069      	b.n	800d01e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d103      	bne.n	800cf58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf50:	f001 fe58 	bl	800ec04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf54:	2300      	movs	r3, #0
 800cf56:	e062      	b.n	800d01e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d106      	bne.n	800cf6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf5e:	f107 0310 	add.w	r3, r7, #16
 800cf62:	4618      	mov	r0, r3
 800cf64:	f000 ff32 	bl	800ddcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf6c:	f001 fe4a 	bl	800ec04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf70:	f000 fc06 	bl	800d780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf74:	f001 fe16 	bl	800eba4 <vPortEnterCritical>
 800cf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf7e:	b25b      	sxtb	r3, r3
 800cf80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf84:	d103      	bne.n	800cf8e <xQueueReceive+0x122>
 800cf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf94:	b25b      	sxtb	r3, r3
 800cf96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf9a:	d103      	bne.n	800cfa4 <xQueueReceive+0x138>
 800cf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfa4:	f001 fe2e 	bl	800ec04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfa8:	1d3a      	adds	r2, r7, #4
 800cfaa:	f107 0310 	add.w	r3, r7, #16
 800cfae:	4611      	mov	r1, r2
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f000 ff21 	bl	800ddf8 <xTaskCheckForTimeOut>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d123      	bne.n	800d004 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfbe:	f000 f917 	bl	800d1f0 <prvIsQueueEmpty>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d017      	beq.n	800cff8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfca:	3324      	adds	r3, #36	; 0x24
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	4611      	mov	r1, r2
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f000 fda9 	bl	800db28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfd8:	f000 f8b8 	bl	800d14c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cfdc:	f000 fbde 	bl	800d79c <xTaskResumeAll>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d189      	bne.n	800cefa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cfe6:	4b10      	ldr	r3, [pc, #64]	; (800d028 <xQueueReceive+0x1bc>)
 800cfe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfec:	601a      	str	r2, [r3, #0]
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	f3bf 8f6f 	isb	sy
 800cff6:	e780      	b.n	800cefa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cffa:	f000 f8a7 	bl	800d14c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cffe:	f000 fbcd 	bl	800d79c <xTaskResumeAll>
 800d002:	e77a      	b.n	800cefa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d006:	f000 f8a1 	bl	800d14c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d00a:	f000 fbc7 	bl	800d79c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d00e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d010:	f000 f8ee 	bl	800d1f0 <prvIsQueueEmpty>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	f43f af6f 	beq.w	800cefa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d01c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3730      	adds	r7, #48	; 0x30
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	e000ed04 	.word	0xe000ed04

0800d02c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b086      	sub	sp, #24
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d038:	2300      	movs	r3, #0
 800d03a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d040:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d046:	2b00      	cmp	r3, #0
 800d048:	d10d      	bne.n	800d066 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d14d      	bne.n	800d0ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	4618      	mov	r0, r3
 800d058:	f001 f830 	bl	800e0bc <xTaskPriorityDisinherit>
 800d05c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2200      	movs	r2, #0
 800d062:	609a      	str	r2, [r3, #8]
 800d064:	e043      	b.n	800d0ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d119      	bne.n	800d0a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	6858      	ldr	r0, [r3, #4]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d074:	461a      	mov	r2, r3
 800d076:	68b9      	ldr	r1, [r7, #8]
 800d078:	f009 ffb4 	bl	8016fe4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	685a      	ldr	r2, [r3, #4]
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d084:	441a      	add	r2, r3
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	685a      	ldr	r2, [r3, #4]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	429a      	cmp	r2, r3
 800d094:	d32b      	bcc.n	800d0ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	605a      	str	r2, [r3, #4]
 800d09e:	e026      	b.n	800d0ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	68d8      	ldr	r0, [r3, #12]
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	68b9      	ldr	r1, [r7, #8]
 800d0ac:	f009 ff9a 	bl	8016fe4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	68da      	ldr	r2, [r3, #12]
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b8:	425b      	negs	r3, r3
 800d0ba:	441a      	add	r2, r3
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	68da      	ldr	r2, [r3, #12]
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d207      	bcs.n	800d0dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	689a      	ldr	r2, [r3, #8]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d4:	425b      	negs	r3, r3
 800d0d6:	441a      	add	r2, r3
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2b02      	cmp	r3, #2
 800d0e0:	d105      	bne.n	800d0ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d002      	beq.n	800d0ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	3b01      	subs	r3, #1
 800d0ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	1c5a      	adds	r2, r3, #1
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d0f6:	697b      	ldr	r3, [r7, #20]
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3718      	adds	r7, #24
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d018      	beq.n	800d144 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	68da      	ldr	r2, [r3, #12]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d11a:	441a      	add	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	68da      	ldr	r2, [r3, #12]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d303      	bcc.n	800d134 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	68d9      	ldr	r1, [r3, #12]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d13c:	461a      	mov	r2, r3
 800d13e:	6838      	ldr	r0, [r7, #0]
 800d140:	f009 ff50 	bl	8016fe4 <memcpy>
	}
}
 800d144:	bf00      	nop
 800d146:	3708      	adds	r7, #8
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d154:	f001 fd26 	bl	800eba4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d15e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d160:	e011      	b.n	800d186 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d166:	2b00      	cmp	r3, #0
 800d168:	d012      	beq.n	800d190 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	3324      	adds	r3, #36	; 0x24
 800d16e:	4618      	mov	r0, r3
 800d170:	f000 fd66 	bl	800dc40 <xTaskRemoveFromEventList>
 800d174:	4603      	mov	r3, r0
 800d176:	2b00      	cmp	r3, #0
 800d178:	d001      	beq.n	800d17e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d17a:	f000 fe9f 	bl	800debc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d17e:	7bfb      	ldrb	r3, [r7, #15]
 800d180:	3b01      	subs	r3, #1
 800d182:	b2db      	uxtb	r3, r3
 800d184:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	dce9      	bgt.n	800d162 <prvUnlockQueue+0x16>
 800d18e:	e000      	b.n	800d192 <prvUnlockQueue+0x46>
					break;
 800d190:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	22ff      	movs	r2, #255	; 0xff
 800d196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d19a:	f001 fd33 	bl	800ec04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d19e:	f001 fd01 	bl	800eba4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1aa:	e011      	b.n	800d1d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	691b      	ldr	r3, [r3, #16]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d012      	beq.n	800d1da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	3310      	adds	r3, #16
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f000 fd41 	bl	800dc40 <xTaskRemoveFromEventList>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d001      	beq.n	800d1c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d1c4:	f000 fe7a 	bl	800debc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d1c8:	7bbb      	ldrb	r3, [r7, #14]
 800d1ca:	3b01      	subs	r3, #1
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	dce9      	bgt.n	800d1ac <prvUnlockQueue+0x60>
 800d1d8:	e000      	b.n	800d1dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d1da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	22ff      	movs	r2, #255	; 0xff
 800d1e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d1e4:	f001 fd0e 	bl	800ec04 <vPortExitCritical>
}
 800d1e8:	bf00      	nop
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d1f8:	f001 fcd4 	bl	800eba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d200:	2b00      	cmp	r3, #0
 800d202:	d102      	bne.n	800d20a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d204:	2301      	movs	r3, #1
 800d206:	60fb      	str	r3, [r7, #12]
 800d208:	e001      	b.n	800d20e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d20a:	2300      	movs	r3, #0
 800d20c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d20e:	f001 fcf9 	bl	800ec04 <vPortExitCritical>

	return xReturn;
 800d212:	68fb      	ldr	r3, [r7, #12]
}
 800d214:	4618      	mov	r0, r3
 800d216:	3710      	adds	r7, #16
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d224:	f001 fcbe 	bl	800eba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d230:	429a      	cmp	r2, r3
 800d232:	d102      	bne.n	800d23a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d234:	2301      	movs	r3, #1
 800d236:	60fb      	str	r3, [r7, #12]
 800d238:	e001      	b.n	800d23e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d23a:	2300      	movs	r3, #0
 800d23c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d23e:	f001 fce1 	bl	800ec04 <vPortExitCritical>

	return xReturn;
 800d242:	68fb      	ldr	r3, [r7, #12]
}
 800d244:	4618      	mov	r0, r3
 800d246:	3710      	adds	r7, #16
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d24c:	b480      	push	{r7}
 800d24e:	b085      	sub	sp, #20
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d256:	2300      	movs	r3, #0
 800d258:	60fb      	str	r3, [r7, #12]
 800d25a:	e014      	b.n	800d286 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d25c:	4a0f      	ldr	r2, [pc, #60]	; (800d29c <vQueueAddToRegistry+0x50>)
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d10b      	bne.n	800d280 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d268:	490c      	ldr	r1, [pc, #48]	; (800d29c <vQueueAddToRegistry+0x50>)
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	683a      	ldr	r2, [r7, #0]
 800d26e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d272:	4a0a      	ldr	r2, [pc, #40]	; (800d29c <vQueueAddToRegistry+0x50>)
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	00db      	lsls	r3, r3, #3
 800d278:	4413      	add	r3, r2
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d27e:	e006      	b.n	800d28e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	3301      	adds	r3, #1
 800d284:	60fb      	str	r3, [r7, #12]
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2b07      	cmp	r3, #7
 800d28a:	d9e7      	bls.n	800d25c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d28c:	bf00      	nop
 800d28e:	bf00      	nop
 800d290:	3714      	adds	r7, #20
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	2000becc 	.word	0x2000becc

0800d2a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d2b0:	f001 fc78 	bl	800eba4 <vPortEnterCritical>
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2ba:	b25b      	sxtb	r3, r3
 800d2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2c0:	d103      	bne.n	800d2ca <vQueueWaitForMessageRestricted+0x2a>
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2d0:	b25b      	sxtb	r3, r3
 800d2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d6:	d103      	bne.n	800d2e0 <vQueueWaitForMessageRestricted+0x40>
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2e0:	f001 fc90 	bl	800ec04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d106      	bne.n	800d2fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	3324      	adds	r3, #36	; 0x24
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	68b9      	ldr	r1, [r7, #8]
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f000 fc77 	bl	800dbe8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d2fa:	6978      	ldr	r0, [r7, #20]
 800d2fc:	f7ff ff26 	bl	800d14c <prvUnlockQueue>
	}
 800d300:	bf00      	nop
 800d302:	3718      	adds	r7, #24
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b08e      	sub	sp, #56	; 0x38
 800d30c:	af04      	add	r7, sp, #16
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	607a      	str	r2, [r7, #4]
 800d314:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d10a      	bne.n	800d332 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	623b      	str	r3, [r7, #32]
}
 800d32e:	bf00      	nop
 800d330:	e7fe      	b.n	800d330 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d334:	2b00      	cmp	r3, #0
 800d336:	d10a      	bne.n	800d34e <xTaskCreateStatic+0x46>
	__asm volatile
 800d338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33c:	f383 8811 	msr	BASEPRI, r3
 800d340:	f3bf 8f6f 	isb	sy
 800d344:	f3bf 8f4f 	dsb	sy
 800d348:	61fb      	str	r3, [r7, #28]
}
 800d34a:	bf00      	nop
 800d34c:	e7fe      	b.n	800d34c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d34e:	235c      	movs	r3, #92	; 0x5c
 800d350:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	2b5c      	cmp	r3, #92	; 0x5c
 800d356:	d00a      	beq.n	800d36e <xTaskCreateStatic+0x66>
	__asm volatile
 800d358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35c:	f383 8811 	msr	BASEPRI, r3
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	61bb      	str	r3, [r7, #24]
}
 800d36a:	bf00      	nop
 800d36c:	e7fe      	b.n	800d36c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d36e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d372:	2b00      	cmp	r3, #0
 800d374:	d01e      	beq.n	800d3b4 <xTaskCreateStatic+0xac>
 800d376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d01b      	beq.n	800d3b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d384:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d388:	2202      	movs	r2, #2
 800d38a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d38e:	2300      	movs	r3, #0
 800d390:	9303      	str	r3, [sp, #12]
 800d392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d394:	9302      	str	r3, [sp, #8]
 800d396:	f107 0314 	add.w	r3, r7, #20
 800d39a:	9301      	str	r3, [sp, #4]
 800d39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	68b9      	ldr	r1, [r7, #8]
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f000 f850 	bl	800d44c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d3ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3ae:	f000 f8dd 	bl	800d56c <prvAddNewTaskToReadyList>
 800d3b2:	e001      	b.n	800d3b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d3b8:	697b      	ldr	r3, [r7, #20]
	}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3728      	adds	r7, #40	; 0x28
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b08c      	sub	sp, #48	; 0x30
 800d3c6:	af04      	add	r7, sp, #16
 800d3c8:	60f8      	str	r0, [r7, #12]
 800d3ca:	60b9      	str	r1, [r7, #8]
 800d3cc:	603b      	str	r3, [r7, #0]
 800d3ce:	4613      	mov	r3, r2
 800d3d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d3d2:	88fb      	ldrh	r3, [r7, #6]
 800d3d4:	009b      	lsls	r3, r3, #2
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f001 fd06 	bl	800ede8 <pvPortMalloc>
 800d3dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00e      	beq.n	800d402 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d3e4:	205c      	movs	r0, #92	; 0x5c
 800d3e6:	f001 fcff 	bl	800ede8 <pvPortMalloc>
 800d3ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d3ec:	69fb      	ldr	r3, [r7, #28]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d003      	beq.n	800d3fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	697a      	ldr	r2, [r7, #20]
 800d3f6:	631a      	str	r2, [r3, #48]	; 0x30
 800d3f8:	e005      	b.n	800d406 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d3fa:	6978      	ldr	r0, [r7, #20]
 800d3fc:	f001 fdc0 	bl	800ef80 <vPortFree>
 800d400:	e001      	b.n	800d406 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d402:	2300      	movs	r3, #0
 800d404:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d017      	beq.n	800d43c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d40c:	69fb      	ldr	r3, [r7, #28]
 800d40e:	2200      	movs	r2, #0
 800d410:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d414:	88fa      	ldrh	r2, [r7, #6]
 800d416:	2300      	movs	r3, #0
 800d418:	9303      	str	r3, [sp, #12]
 800d41a:	69fb      	ldr	r3, [r7, #28]
 800d41c:	9302      	str	r3, [sp, #8]
 800d41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d420:	9301      	str	r3, [sp, #4]
 800d422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d424:	9300      	str	r3, [sp, #0]
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	68b9      	ldr	r1, [r7, #8]
 800d42a:	68f8      	ldr	r0, [r7, #12]
 800d42c:	f000 f80e 	bl	800d44c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d430:	69f8      	ldr	r0, [r7, #28]
 800d432:	f000 f89b 	bl	800d56c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d436:	2301      	movs	r3, #1
 800d438:	61bb      	str	r3, [r7, #24]
 800d43a:	e002      	b.n	800d442 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d43c:	f04f 33ff 	mov.w	r3, #4294967295
 800d440:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d442:	69bb      	ldr	r3, [r7, #24]
	}
 800d444:	4618      	mov	r0, r3
 800d446:	3720      	adds	r7, #32
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b088      	sub	sp, #32
 800d450:	af00      	add	r7, sp, #0
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	607a      	str	r2, [r7, #4]
 800d458:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	461a      	mov	r2, r3
 800d464:	21a5      	movs	r1, #165	; 0xa5
 800d466:	f009 fdcb 	bl	8017000 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d474:	3b01      	subs	r3, #1
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	4413      	add	r3, r2
 800d47a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d47c:	69bb      	ldr	r3, [r7, #24]
 800d47e:	f023 0307 	bic.w	r3, r3, #7
 800d482:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d484:	69bb      	ldr	r3, [r7, #24]
 800d486:	f003 0307 	and.w	r3, r3, #7
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d00a      	beq.n	800d4a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	617b      	str	r3, [r7, #20]
}
 800d4a0:	bf00      	nop
 800d4a2:	e7fe      	b.n	800d4a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d01f      	beq.n	800d4ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	61fb      	str	r3, [r7, #28]
 800d4ae:	e012      	b.n	800d4d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d4b0:	68ba      	ldr	r2, [r7, #8]
 800d4b2:	69fb      	ldr	r3, [r7, #28]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	7819      	ldrb	r1, [r3, #0]
 800d4b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4ba:	69fb      	ldr	r3, [r7, #28]
 800d4bc:	4413      	add	r3, r2
 800d4be:	3334      	adds	r3, #52	; 0x34
 800d4c0:	460a      	mov	r2, r1
 800d4c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d4c4:	68ba      	ldr	r2, [r7, #8]
 800d4c6:	69fb      	ldr	r3, [r7, #28]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d006      	beq.n	800d4de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	61fb      	str	r3, [r7, #28]
 800d4d6:	69fb      	ldr	r3, [r7, #28]
 800d4d8:	2b0f      	cmp	r3, #15
 800d4da:	d9e9      	bls.n	800d4b0 <prvInitialiseNewTask+0x64>
 800d4dc:	e000      	b.n	800d4e0 <prvInitialiseNewTask+0x94>
			{
				break;
 800d4de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d4e8:	e003      	b.n	800d4f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f4:	2b37      	cmp	r3, #55	; 0x37
 800d4f6:	d901      	bls.n	800d4fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d4f8:	2337      	movs	r3, #55	; 0x37
 800d4fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d500:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d506:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50a:	2200      	movs	r2, #0
 800d50c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d510:	3304      	adds	r3, #4
 800d512:	4618      	mov	r0, r3
 800d514:	f7ff f978 	bl	800c808 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51a:	3318      	adds	r3, #24
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7ff f973 	bl	800c808 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d526:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d530:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d536:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53a:	2200      	movs	r2, #0
 800d53c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d540:	2200      	movs	r2, #0
 800d542:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d546:	683a      	ldr	r2, [r7, #0]
 800d548:	68f9      	ldr	r1, [r7, #12]
 800d54a:	69b8      	ldr	r0, [r7, #24]
 800d54c:	f001 f9fe 	bl	800e94c <pxPortInitialiseStack>
 800d550:	4602      	mov	r2, r0
 800d552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d554:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d002      	beq.n	800d562 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d560:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d562:	bf00      	nop
 800d564:	3720      	adds	r7, #32
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
	...

0800d56c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d574:	f001 fb16 	bl	800eba4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d578:	4b2d      	ldr	r3, [pc, #180]	; (800d630 <prvAddNewTaskToReadyList+0xc4>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	3301      	adds	r3, #1
 800d57e:	4a2c      	ldr	r2, [pc, #176]	; (800d630 <prvAddNewTaskToReadyList+0xc4>)
 800d580:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d582:	4b2c      	ldr	r3, [pc, #176]	; (800d634 <prvAddNewTaskToReadyList+0xc8>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d109      	bne.n	800d59e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d58a:	4a2a      	ldr	r2, [pc, #168]	; (800d634 <prvAddNewTaskToReadyList+0xc8>)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d590:	4b27      	ldr	r3, [pc, #156]	; (800d630 <prvAddNewTaskToReadyList+0xc4>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2b01      	cmp	r3, #1
 800d596:	d110      	bne.n	800d5ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d598:	f000 fcb4 	bl	800df04 <prvInitialiseTaskLists>
 800d59c:	e00d      	b.n	800d5ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d59e:	4b26      	ldr	r3, [pc, #152]	; (800d638 <prvAddNewTaskToReadyList+0xcc>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d109      	bne.n	800d5ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d5a6:	4b23      	ldr	r3, [pc, #140]	; (800d634 <prvAddNewTaskToReadyList+0xc8>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d802      	bhi.n	800d5ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d5b4:	4a1f      	ldr	r2, [pc, #124]	; (800d634 <prvAddNewTaskToReadyList+0xc8>)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d5ba:	4b20      	ldr	r3, [pc, #128]	; (800d63c <prvAddNewTaskToReadyList+0xd0>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	4a1e      	ldr	r2, [pc, #120]	; (800d63c <prvAddNewTaskToReadyList+0xd0>)
 800d5c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d5c4:	4b1d      	ldr	r3, [pc, #116]	; (800d63c <prvAddNewTaskToReadyList+0xd0>)
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d0:	4b1b      	ldr	r3, [pc, #108]	; (800d640 <prvAddNewTaskToReadyList+0xd4>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d903      	bls.n	800d5e0 <prvAddNewTaskToReadyList+0x74>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5dc:	4a18      	ldr	r2, [pc, #96]	; (800d640 <prvAddNewTaskToReadyList+0xd4>)
 800d5de:	6013      	str	r3, [r2, #0]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	4413      	add	r3, r2
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	4a15      	ldr	r2, [pc, #84]	; (800d644 <prvAddNewTaskToReadyList+0xd8>)
 800d5ee:	441a      	add	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	3304      	adds	r3, #4
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	4610      	mov	r0, r2
 800d5f8:	f7ff f913 	bl	800c822 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d5fc:	f001 fb02 	bl	800ec04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d600:	4b0d      	ldr	r3, [pc, #52]	; (800d638 <prvAddNewTaskToReadyList+0xcc>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d00e      	beq.n	800d626 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d608:	4b0a      	ldr	r3, [pc, #40]	; (800d634 <prvAddNewTaskToReadyList+0xc8>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d612:	429a      	cmp	r2, r3
 800d614:	d207      	bcs.n	800d626 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d616:	4b0c      	ldr	r3, [pc, #48]	; (800d648 <prvAddNewTaskToReadyList+0xdc>)
 800d618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d61c:	601a      	str	r2, [r3, #0]
 800d61e:	f3bf 8f4f 	dsb	sy
 800d622:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d626:	bf00      	nop
 800d628:	3708      	adds	r7, #8
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	20005538 	.word	0x20005538
 800d634:	20005064 	.word	0x20005064
 800d638:	20005544 	.word	0x20005544
 800d63c:	20005554 	.word	0x20005554
 800d640:	20005540 	.word	0x20005540
 800d644:	20005068 	.word	0x20005068
 800d648:	e000ed04 	.word	0xe000ed04

0800d64c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b084      	sub	sp, #16
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d654:	2300      	movs	r3, #0
 800d656:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d017      	beq.n	800d68e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d65e:	4b13      	ldr	r3, [pc, #76]	; (800d6ac <vTaskDelay+0x60>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d00a      	beq.n	800d67c <vTaskDelay+0x30>
	__asm volatile
 800d666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66a:	f383 8811 	msr	BASEPRI, r3
 800d66e:	f3bf 8f6f 	isb	sy
 800d672:	f3bf 8f4f 	dsb	sy
 800d676:	60bb      	str	r3, [r7, #8]
}
 800d678:	bf00      	nop
 800d67a:	e7fe      	b.n	800d67a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d67c:	f000 f880 	bl	800d780 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d680:	2100      	movs	r1, #0
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 fda0 	bl	800e1c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d688:	f000 f888 	bl	800d79c <xTaskResumeAll>
 800d68c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d107      	bne.n	800d6a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d694:	4b06      	ldr	r3, [pc, #24]	; (800d6b0 <vTaskDelay+0x64>)
 800d696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d69a:	601a      	str	r2, [r3, #0]
 800d69c:	f3bf 8f4f 	dsb	sy
 800d6a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d6a4:	bf00      	nop
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}
 800d6ac:	20005560 	.word	0x20005560
 800d6b0:	e000ed04 	.word	0xe000ed04

0800d6b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b08a      	sub	sp, #40	; 0x28
 800d6b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d6c2:	463a      	mov	r2, r7
 800d6c4:	1d39      	adds	r1, r7, #4
 800d6c6:	f107 0308 	add.w	r3, r7, #8
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7fe fddc 	bl	800c288 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d6d0:	6839      	ldr	r1, [r7, #0]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	68ba      	ldr	r2, [r7, #8]
 800d6d6:	9202      	str	r2, [sp, #8]
 800d6d8:	9301      	str	r3, [sp, #4]
 800d6da:	2300      	movs	r3, #0
 800d6dc:	9300      	str	r3, [sp, #0]
 800d6de:	2300      	movs	r3, #0
 800d6e0:	460a      	mov	r2, r1
 800d6e2:	4921      	ldr	r1, [pc, #132]	; (800d768 <vTaskStartScheduler+0xb4>)
 800d6e4:	4821      	ldr	r0, [pc, #132]	; (800d76c <vTaskStartScheduler+0xb8>)
 800d6e6:	f7ff fe0f 	bl	800d308 <xTaskCreateStatic>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	4a20      	ldr	r2, [pc, #128]	; (800d770 <vTaskStartScheduler+0xbc>)
 800d6ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d6f0:	4b1f      	ldr	r3, [pc, #124]	; (800d770 <vTaskStartScheduler+0xbc>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d002      	beq.n	800d6fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	617b      	str	r3, [r7, #20]
 800d6fc:	e001      	b.n	800d702 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d6fe:	2300      	movs	r3, #0
 800d700:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	2b01      	cmp	r3, #1
 800d706:	d102      	bne.n	800d70e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d708:	f000 fdb2 	bl	800e270 <xTimerCreateTimerTask>
 800d70c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	2b01      	cmp	r3, #1
 800d712:	d116      	bne.n	800d742 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d718:	f383 8811 	msr	BASEPRI, r3
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	613b      	str	r3, [r7, #16]
}
 800d726:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d728:	4b12      	ldr	r3, [pc, #72]	; (800d774 <vTaskStartScheduler+0xc0>)
 800d72a:	f04f 32ff 	mov.w	r2, #4294967295
 800d72e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d730:	4b11      	ldr	r3, [pc, #68]	; (800d778 <vTaskStartScheduler+0xc4>)
 800d732:	2201      	movs	r2, #1
 800d734:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d736:	4b11      	ldr	r3, [pc, #68]	; (800d77c <vTaskStartScheduler+0xc8>)
 800d738:	2200      	movs	r2, #0
 800d73a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d73c:	f001 f990 	bl	800ea60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d740:	e00e      	b.n	800d760 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d748:	d10a      	bne.n	800d760 <vTaskStartScheduler+0xac>
	__asm volatile
 800d74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74e:	f383 8811 	msr	BASEPRI, r3
 800d752:	f3bf 8f6f 	isb	sy
 800d756:	f3bf 8f4f 	dsb	sy
 800d75a:	60fb      	str	r3, [r7, #12]
}
 800d75c:	bf00      	nop
 800d75e:	e7fe      	b.n	800d75e <vTaskStartScheduler+0xaa>
}
 800d760:	bf00      	nop
 800d762:	3718      	adds	r7, #24
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	0801c934 	.word	0x0801c934
 800d76c:	0800ded5 	.word	0x0800ded5
 800d770:	2000555c 	.word	0x2000555c
 800d774:	20005558 	.word	0x20005558
 800d778:	20005544 	.word	0x20005544
 800d77c:	2000553c 	.word	0x2000553c

0800d780 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d780:	b480      	push	{r7}
 800d782:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d784:	4b04      	ldr	r3, [pc, #16]	; (800d798 <vTaskSuspendAll+0x18>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	3301      	adds	r3, #1
 800d78a:	4a03      	ldr	r2, [pc, #12]	; (800d798 <vTaskSuspendAll+0x18>)
 800d78c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d78e:	bf00      	nop
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr
 800d798:	20005560 	.word	0x20005560

0800d79c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d7aa:	4b42      	ldr	r3, [pc, #264]	; (800d8b4 <xTaskResumeAll+0x118>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d10a      	bne.n	800d7c8 <xTaskResumeAll+0x2c>
	__asm volatile
 800d7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b6:	f383 8811 	msr	BASEPRI, r3
 800d7ba:	f3bf 8f6f 	isb	sy
 800d7be:	f3bf 8f4f 	dsb	sy
 800d7c2:	603b      	str	r3, [r7, #0]
}
 800d7c4:	bf00      	nop
 800d7c6:	e7fe      	b.n	800d7c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d7c8:	f001 f9ec 	bl	800eba4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d7cc:	4b39      	ldr	r3, [pc, #228]	; (800d8b4 <xTaskResumeAll+0x118>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	3b01      	subs	r3, #1
 800d7d2:	4a38      	ldr	r2, [pc, #224]	; (800d8b4 <xTaskResumeAll+0x118>)
 800d7d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7d6:	4b37      	ldr	r3, [pc, #220]	; (800d8b4 <xTaskResumeAll+0x118>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d162      	bne.n	800d8a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d7de:	4b36      	ldr	r3, [pc, #216]	; (800d8b8 <xTaskResumeAll+0x11c>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d05e      	beq.n	800d8a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d7e6:	e02f      	b.n	800d848 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7e8:	4b34      	ldr	r3, [pc, #208]	; (800d8bc <xTaskResumeAll+0x120>)
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	68db      	ldr	r3, [r3, #12]
 800d7ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	3318      	adds	r3, #24
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7ff f871 	bl	800c8dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	3304      	adds	r3, #4
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7ff f86c 	bl	800c8dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d808:	4b2d      	ldr	r3, [pc, #180]	; (800d8c0 <xTaskResumeAll+0x124>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d903      	bls.n	800d818 <xTaskResumeAll+0x7c>
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d814:	4a2a      	ldr	r2, [pc, #168]	; (800d8c0 <xTaskResumeAll+0x124>)
 800d816:	6013      	str	r3, [r2, #0]
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d81c:	4613      	mov	r3, r2
 800d81e:	009b      	lsls	r3, r3, #2
 800d820:	4413      	add	r3, r2
 800d822:	009b      	lsls	r3, r3, #2
 800d824:	4a27      	ldr	r2, [pc, #156]	; (800d8c4 <xTaskResumeAll+0x128>)
 800d826:	441a      	add	r2, r3
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	3304      	adds	r3, #4
 800d82c:	4619      	mov	r1, r3
 800d82e:	4610      	mov	r0, r2
 800d830:	f7fe fff7 	bl	800c822 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d838:	4b23      	ldr	r3, [pc, #140]	; (800d8c8 <xTaskResumeAll+0x12c>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d83e:	429a      	cmp	r2, r3
 800d840:	d302      	bcc.n	800d848 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d842:	4b22      	ldr	r3, [pc, #136]	; (800d8cc <xTaskResumeAll+0x130>)
 800d844:	2201      	movs	r2, #1
 800d846:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d848:	4b1c      	ldr	r3, [pc, #112]	; (800d8bc <xTaskResumeAll+0x120>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d1cb      	bne.n	800d7e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d001      	beq.n	800d85a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d856:	f000 fbf3 	bl	800e040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d85a:	4b1d      	ldr	r3, [pc, #116]	; (800d8d0 <xTaskResumeAll+0x134>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d010      	beq.n	800d888 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d866:	f000 f847 	bl	800d8f8 <xTaskIncrementTick>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d002      	beq.n	800d876 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d870:	4b16      	ldr	r3, [pc, #88]	; (800d8cc <xTaskResumeAll+0x130>)
 800d872:	2201      	movs	r2, #1
 800d874:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	3b01      	subs	r3, #1
 800d87a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d1f1      	bne.n	800d866 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d882:	4b13      	ldr	r3, [pc, #76]	; (800d8d0 <xTaskResumeAll+0x134>)
 800d884:	2200      	movs	r2, #0
 800d886:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d888:	4b10      	ldr	r3, [pc, #64]	; (800d8cc <xTaskResumeAll+0x130>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d009      	beq.n	800d8a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d890:	2301      	movs	r3, #1
 800d892:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d894:	4b0f      	ldr	r3, [pc, #60]	; (800d8d4 <xTaskResumeAll+0x138>)
 800d896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d89a:	601a      	str	r2, [r3, #0]
 800d89c:	f3bf 8f4f 	dsb	sy
 800d8a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d8a4:	f001 f9ae 	bl	800ec04 <vPortExitCritical>

	return xAlreadyYielded;
 800d8a8:	68bb      	ldr	r3, [r7, #8]
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3710      	adds	r7, #16
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
 800d8b2:	bf00      	nop
 800d8b4:	20005560 	.word	0x20005560
 800d8b8:	20005538 	.word	0x20005538
 800d8bc:	200054f8 	.word	0x200054f8
 800d8c0:	20005540 	.word	0x20005540
 800d8c4:	20005068 	.word	0x20005068
 800d8c8:	20005064 	.word	0x20005064
 800d8cc:	2000554c 	.word	0x2000554c
 800d8d0:	20005548 	.word	0x20005548
 800d8d4:	e000ed04 	.word	0xe000ed04

0800d8d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b083      	sub	sp, #12
 800d8dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d8de:	4b05      	ldr	r3, [pc, #20]	; (800d8f4 <xTaskGetTickCount+0x1c>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d8e4:	687b      	ldr	r3, [r7, #4]
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	370c      	adds	r7, #12
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr
 800d8f2:	bf00      	nop
 800d8f4:	2000553c 	.word	0x2000553c

0800d8f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b086      	sub	sp, #24
 800d8fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d8fe:	2300      	movs	r3, #0
 800d900:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d902:	4b4f      	ldr	r3, [pc, #316]	; (800da40 <xTaskIncrementTick+0x148>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	f040 808f 	bne.w	800da2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d90c:	4b4d      	ldr	r3, [pc, #308]	; (800da44 <xTaskIncrementTick+0x14c>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	3301      	adds	r3, #1
 800d912:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d914:	4a4b      	ldr	r2, [pc, #300]	; (800da44 <xTaskIncrementTick+0x14c>)
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d120      	bne.n	800d962 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d920:	4b49      	ldr	r3, [pc, #292]	; (800da48 <xTaskIncrementTick+0x150>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00a      	beq.n	800d940 <xTaskIncrementTick+0x48>
	__asm volatile
 800d92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92e:	f383 8811 	msr	BASEPRI, r3
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	f3bf 8f4f 	dsb	sy
 800d93a:	603b      	str	r3, [r7, #0]
}
 800d93c:	bf00      	nop
 800d93e:	e7fe      	b.n	800d93e <xTaskIncrementTick+0x46>
 800d940:	4b41      	ldr	r3, [pc, #260]	; (800da48 <xTaskIncrementTick+0x150>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	60fb      	str	r3, [r7, #12]
 800d946:	4b41      	ldr	r3, [pc, #260]	; (800da4c <xTaskIncrementTick+0x154>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4a3f      	ldr	r2, [pc, #252]	; (800da48 <xTaskIncrementTick+0x150>)
 800d94c:	6013      	str	r3, [r2, #0]
 800d94e:	4a3f      	ldr	r2, [pc, #252]	; (800da4c <xTaskIncrementTick+0x154>)
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	6013      	str	r3, [r2, #0]
 800d954:	4b3e      	ldr	r3, [pc, #248]	; (800da50 <xTaskIncrementTick+0x158>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	3301      	adds	r3, #1
 800d95a:	4a3d      	ldr	r2, [pc, #244]	; (800da50 <xTaskIncrementTick+0x158>)
 800d95c:	6013      	str	r3, [r2, #0]
 800d95e:	f000 fb6f 	bl	800e040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d962:	4b3c      	ldr	r3, [pc, #240]	; (800da54 <xTaskIncrementTick+0x15c>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	693a      	ldr	r2, [r7, #16]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d349      	bcc.n	800da00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d96c:	4b36      	ldr	r3, [pc, #216]	; (800da48 <xTaskIncrementTick+0x150>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d104      	bne.n	800d980 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d976:	4b37      	ldr	r3, [pc, #220]	; (800da54 <xTaskIncrementTick+0x15c>)
 800d978:	f04f 32ff 	mov.w	r2, #4294967295
 800d97c:	601a      	str	r2, [r3, #0]
					break;
 800d97e:	e03f      	b.n	800da00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d980:	4b31      	ldr	r3, [pc, #196]	; (800da48 <xTaskIncrementTick+0x150>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	68db      	ldr	r3, [r3, #12]
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d990:	693a      	ldr	r2, [r7, #16]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	429a      	cmp	r2, r3
 800d996:	d203      	bcs.n	800d9a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d998:	4a2e      	ldr	r2, [pc, #184]	; (800da54 <xTaskIncrementTick+0x15c>)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d99e:	e02f      	b.n	800da00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	3304      	adds	r3, #4
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7fe ff99 	bl	800c8dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d004      	beq.n	800d9bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	3318      	adds	r3, #24
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fe ff90 	bl	800c8dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9c0:	4b25      	ldr	r3, [pc, #148]	; (800da58 <xTaskIncrementTick+0x160>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d903      	bls.n	800d9d0 <xTaskIncrementTick+0xd8>
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9cc:	4a22      	ldr	r2, [pc, #136]	; (800da58 <xTaskIncrementTick+0x160>)
 800d9ce:	6013      	str	r3, [r2, #0]
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9d4:	4613      	mov	r3, r2
 800d9d6:	009b      	lsls	r3, r3, #2
 800d9d8:	4413      	add	r3, r2
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	4a1f      	ldr	r2, [pc, #124]	; (800da5c <xTaskIncrementTick+0x164>)
 800d9de:	441a      	add	r2, r3
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	3304      	adds	r3, #4
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	4610      	mov	r0, r2
 800d9e8:	f7fe ff1b 	bl	800c822 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9f0:	4b1b      	ldr	r3, [pc, #108]	; (800da60 <xTaskIncrementTick+0x168>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d3b8      	bcc.n	800d96c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9fe:	e7b5      	b.n	800d96c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800da00:	4b17      	ldr	r3, [pc, #92]	; (800da60 <xTaskIncrementTick+0x168>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da06:	4915      	ldr	r1, [pc, #84]	; (800da5c <xTaskIncrementTick+0x164>)
 800da08:	4613      	mov	r3, r2
 800da0a:	009b      	lsls	r3, r3, #2
 800da0c:	4413      	add	r3, r2
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	440b      	add	r3, r1
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2b01      	cmp	r3, #1
 800da16:	d901      	bls.n	800da1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800da18:	2301      	movs	r3, #1
 800da1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800da1c:	4b11      	ldr	r3, [pc, #68]	; (800da64 <xTaskIncrementTick+0x16c>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d007      	beq.n	800da34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800da24:	2301      	movs	r3, #1
 800da26:	617b      	str	r3, [r7, #20]
 800da28:	e004      	b.n	800da34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800da2a:	4b0f      	ldr	r3, [pc, #60]	; (800da68 <xTaskIncrementTick+0x170>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	3301      	adds	r3, #1
 800da30:	4a0d      	ldr	r2, [pc, #52]	; (800da68 <xTaskIncrementTick+0x170>)
 800da32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800da34:	697b      	ldr	r3, [r7, #20]
}
 800da36:	4618      	mov	r0, r3
 800da38:	3718      	adds	r7, #24
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	20005560 	.word	0x20005560
 800da44:	2000553c 	.word	0x2000553c
 800da48:	200054f0 	.word	0x200054f0
 800da4c:	200054f4 	.word	0x200054f4
 800da50:	20005550 	.word	0x20005550
 800da54:	20005558 	.word	0x20005558
 800da58:	20005540 	.word	0x20005540
 800da5c:	20005068 	.word	0x20005068
 800da60:	20005064 	.word	0x20005064
 800da64:	2000554c 	.word	0x2000554c
 800da68:	20005548 	.word	0x20005548

0800da6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800da6c:	b480      	push	{r7}
 800da6e:	b085      	sub	sp, #20
 800da70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800da72:	4b28      	ldr	r3, [pc, #160]	; (800db14 <vTaskSwitchContext+0xa8>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d003      	beq.n	800da82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800da7a:	4b27      	ldr	r3, [pc, #156]	; (800db18 <vTaskSwitchContext+0xac>)
 800da7c:	2201      	movs	r2, #1
 800da7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800da80:	e041      	b.n	800db06 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800da82:	4b25      	ldr	r3, [pc, #148]	; (800db18 <vTaskSwitchContext+0xac>)
 800da84:	2200      	movs	r2, #0
 800da86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da88:	4b24      	ldr	r3, [pc, #144]	; (800db1c <vTaskSwitchContext+0xb0>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	60fb      	str	r3, [r7, #12]
 800da8e:	e010      	b.n	800dab2 <vTaskSwitchContext+0x46>
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d10a      	bne.n	800daac <vTaskSwitchContext+0x40>
	__asm volatile
 800da96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9a:	f383 8811 	msr	BASEPRI, r3
 800da9e:	f3bf 8f6f 	isb	sy
 800daa2:	f3bf 8f4f 	dsb	sy
 800daa6:	607b      	str	r3, [r7, #4]
}
 800daa8:	bf00      	nop
 800daaa:	e7fe      	b.n	800daaa <vTaskSwitchContext+0x3e>
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	3b01      	subs	r3, #1
 800dab0:	60fb      	str	r3, [r7, #12]
 800dab2:	491b      	ldr	r1, [pc, #108]	; (800db20 <vTaskSwitchContext+0xb4>)
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	4613      	mov	r3, r2
 800dab8:	009b      	lsls	r3, r3, #2
 800daba:	4413      	add	r3, r2
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	440b      	add	r3, r1
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d0e4      	beq.n	800da90 <vTaskSwitchContext+0x24>
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	4613      	mov	r3, r2
 800daca:	009b      	lsls	r3, r3, #2
 800dacc:	4413      	add	r3, r2
 800dace:	009b      	lsls	r3, r3, #2
 800dad0:	4a13      	ldr	r2, [pc, #76]	; (800db20 <vTaskSwitchContext+0xb4>)
 800dad2:	4413      	add	r3, r2
 800dad4:	60bb      	str	r3, [r7, #8]
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	685a      	ldr	r2, [r3, #4]
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	605a      	str	r2, [r3, #4]
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	685a      	ldr	r2, [r3, #4]
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	3308      	adds	r3, #8
 800dae8:	429a      	cmp	r2, r3
 800daea:	d104      	bne.n	800daf6 <vTaskSwitchContext+0x8a>
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	685a      	ldr	r2, [r3, #4]
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	605a      	str	r2, [r3, #4]
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	68db      	ldr	r3, [r3, #12]
 800dafc:	4a09      	ldr	r2, [pc, #36]	; (800db24 <vTaskSwitchContext+0xb8>)
 800dafe:	6013      	str	r3, [r2, #0]
 800db00:	4a06      	ldr	r2, [pc, #24]	; (800db1c <vTaskSwitchContext+0xb0>)
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	6013      	str	r3, [r2, #0]
}
 800db06:	bf00      	nop
 800db08:	3714      	adds	r7, #20
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr
 800db12:	bf00      	nop
 800db14:	20005560 	.word	0x20005560
 800db18:	2000554c 	.word	0x2000554c
 800db1c:	20005540 	.word	0x20005540
 800db20:	20005068 	.word	0x20005068
 800db24:	20005064 	.word	0x20005064

0800db28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d10a      	bne.n	800db4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800db38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3c:	f383 8811 	msr	BASEPRI, r3
 800db40:	f3bf 8f6f 	isb	sy
 800db44:	f3bf 8f4f 	dsb	sy
 800db48:	60fb      	str	r3, [r7, #12]
}
 800db4a:	bf00      	nop
 800db4c:	e7fe      	b.n	800db4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db4e:	4b07      	ldr	r3, [pc, #28]	; (800db6c <vTaskPlaceOnEventList+0x44>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	3318      	adds	r3, #24
 800db54:	4619      	mov	r1, r3
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f7fe fe87 	bl	800c86a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800db5c:	2101      	movs	r1, #1
 800db5e:	6838      	ldr	r0, [r7, #0]
 800db60:	f000 fb32 	bl	800e1c8 <prvAddCurrentTaskToDelayedList>
}
 800db64:	bf00      	nop
 800db66:	3710      	adds	r7, #16
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}
 800db6c:	20005064 	.word	0x20005064

0800db70 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d10a      	bne.n	800db98 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800db82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db86:	f383 8811 	msr	BASEPRI, r3
 800db8a:	f3bf 8f6f 	isb	sy
 800db8e:	f3bf 8f4f 	dsb	sy
 800db92:	617b      	str	r3, [r7, #20]
}
 800db94:	bf00      	nop
 800db96:	e7fe      	b.n	800db96 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800db98:	4b11      	ldr	r3, [pc, #68]	; (800dbe0 <vTaskPlaceOnUnorderedEventList+0x70>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d10a      	bne.n	800dbb6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800dba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba4:	f383 8811 	msr	BASEPRI, r3
 800dba8:	f3bf 8f6f 	isb	sy
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	613b      	str	r3, [r7, #16]
}
 800dbb2:	bf00      	nop
 800dbb4:	e7fe      	b.n	800dbb4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800dbb6:	4b0b      	ldr	r3, [pc, #44]	; (800dbe4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	68ba      	ldr	r2, [r7, #8]
 800dbbc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800dbc0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dbc2:	4b08      	ldr	r3, [pc, #32]	; (800dbe4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	3318      	adds	r3, #24
 800dbc8:	4619      	mov	r1, r3
 800dbca:	68f8      	ldr	r0, [r7, #12]
 800dbcc:	f7fe fe29 	bl	800c822 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dbd0:	2101      	movs	r1, #1
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f000 faf8 	bl	800e1c8 <prvAddCurrentTaskToDelayedList>
}
 800dbd8:	bf00      	nop
 800dbda:	3718      	adds	r7, #24
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	20005560 	.word	0x20005560
 800dbe4:	20005064 	.word	0x20005064

0800dbe8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b086      	sub	sp, #24
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	60f8      	str	r0, [r7, #12]
 800dbf0:	60b9      	str	r1, [r7, #8]
 800dbf2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d10a      	bne.n	800dc10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfe:	f383 8811 	msr	BASEPRI, r3
 800dc02:	f3bf 8f6f 	isb	sy
 800dc06:	f3bf 8f4f 	dsb	sy
 800dc0a:	617b      	str	r3, [r7, #20]
}
 800dc0c:	bf00      	nop
 800dc0e:	e7fe      	b.n	800dc0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc10:	4b0a      	ldr	r3, [pc, #40]	; (800dc3c <vTaskPlaceOnEventListRestricted+0x54>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	3318      	adds	r3, #24
 800dc16:	4619      	mov	r1, r3
 800dc18:	68f8      	ldr	r0, [r7, #12]
 800dc1a:	f7fe fe02 	bl	800c822 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d002      	beq.n	800dc2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dc24:	f04f 33ff 	mov.w	r3, #4294967295
 800dc28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dc2a:	6879      	ldr	r1, [r7, #4]
 800dc2c:	68b8      	ldr	r0, [r7, #8]
 800dc2e:	f000 facb 	bl	800e1c8 <prvAddCurrentTaskToDelayedList>
	}
 800dc32:	bf00      	nop
 800dc34:	3718      	adds	r7, #24
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	20005064 	.word	0x20005064

0800dc40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b086      	sub	sp, #24
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d10a      	bne.n	800dc6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc5a:	f383 8811 	msr	BASEPRI, r3
 800dc5e:	f3bf 8f6f 	isb	sy
 800dc62:	f3bf 8f4f 	dsb	sy
 800dc66:	60fb      	str	r3, [r7, #12]
}
 800dc68:	bf00      	nop
 800dc6a:	e7fe      	b.n	800dc6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	3318      	adds	r3, #24
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7fe fe33 	bl	800c8dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc76:	4b1e      	ldr	r3, [pc, #120]	; (800dcf0 <xTaskRemoveFromEventList+0xb0>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d11d      	bne.n	800dcba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	3304      	adds	r3, #4
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7fe fe2a 	bl	800c8dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc8c:	4b19      	ldr	r3, [pc, #100]	; (800dcf4 <xTaskRemoveFromEventList+0xb4>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d903      	bls.n	800dc9c <xTaskRemoveFromEventList+0x5c>
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc98:	4a16      	ldr	r2, [pc, #88]	; (800dcf4 <xTaskRemoveFromEventList+0xb4>)
 800dc9a:	6013      	str	r3, [r2, #0]
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dca0:	4613      	mov	r3, r2
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	4413      	add	r3, r2
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	4a13      	ldr	r2, [pc, #76]	; (800dcf8 <xTaskRemoveFromEventList+0xb8>)
 800dcaa:	441a      	add	r2, r3
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	3304      	adds	r3, #4
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	4610      	mov	r0, r2
 800dcb4:	f7fe fdb5 	bl	800c822 <vListInsertEnd>
 800dcb8:	e005      	b.n	800dcc6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	3318      	adds	r3, #24
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	480e      	ldr	r0, [pc, #56]	; (800dcfc <xTaskRemoveFromEventList+0xbc>)
 800dcc2:	f7fe fdae 	bl	800c822 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcca:	4b0d      	ldr	r3, [pc, #52]	; (800dd00 <xTaskRemoveFromEventList+0xc0>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d905      	bls.n	800dce0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dcd8:	4b0a      	ldr	r3, [pc, #40]	; (800dd04 <xTaskRemoveFromEventList+0xc4>)
 800dcda:	2201      	movs	r2, #1
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	e001      	b.n	800dce4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dce0:	2300      	movs	r3, #0
 800dce2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dce4:	697b      	ldr	r3, [r7, #20]
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3718      	adds	r7, #24
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	20005560 	.word	0x20005560
 800dcf4:	20005540 	.word	0x20005540
 800dcf8:	20005068 	.word	0x20005068
 800dcfc:	200054f8 	.word	0x200054f8
 800dd00:	20005064 	.word	0x20005064
 800dd04:	2000554c 	.word	0x2000554c

0800dd08 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b086      	sub	sp, #24
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800dd12:	4b29      	ldr	r3, [pc, #164]	; (800ddb8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d10a      	bne.n	800dd30 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800dd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd1e:	f383 8811 	msr	BASEPRI, r3
 800dd22:	f3bf 8f6f 	isb	sy
 800dd26:	f3bf 8f4f 	dsb	sy
 800dd2a:	613b      	str	r3, [r7, #16]
}
 800dd2c:	bf00      	nop
 800dd2e:	e7fe      	b.n	800dd2e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d10a      	bne.n	800dd5c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800dd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4a:	f383 8811 	msr	BASEPRI, r3
 800dd4e:	f3bf 8f6f 	isb	sy
 800dd52:	f3bf 8f4f 	dsb	sy
 800dd56:	60fb      	str	r3, [r7, #12]
}
 800dd58:	bf00      	nop
 800dd5a:	e7fe      	b.n	800dd5a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f7fe fdbd 	bl	800c8dc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	3304      	adds	r3, #4
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7fe fdb8 	bl	800c8dc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd70:	4b12      	ldr	r3, [pc, #72]	; (800ddbc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d903      	bls.n	800dd80 <vTaskRemoveFromUnorderedEventList+0x78>
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd7c:	4a0f      	ldr	r2, [pc, #60]	; (800ddbc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800dd7e:	6013      	str	r3, [r2, #0]
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd84:	4613      	mov	r3, r2
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	4413      	add	r3, r2
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	4a0c      	ldr	r2, [pc, #48]	; (800ddc0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800dd8e:	441a      	add	r2, r3
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	3304      	adds	r3, #4
 800dd94:	4619      	mov	r1, r3
 800dd96:	4610      	mov	r0, r2
 800dd98:	f7fe fd43 	bl	800c822 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dda0:	4b08      	ldr	r3, [pc, #32]	; (800ddc4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d902      	bls.n	800ddb0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800ddaa:	4b07      	ldr	r3, [pc, #28]	; (800ddc8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800ddac:	2201      	movs	r2, #1
 800ddae:	601a      	str	r2, [r3, #0]
	}
}
 800ddb0:	bf00      	nop
 800ddb2:	3718      	adds	r7, #24
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	20005560 	.word	0x20005560
 800ddbc:	20005540 	.word	0x20005540
 800ddc0:	20005068 	.word	0x20005068
 800ddc4:	20005064 	.word	0x20005064
 800ddc8:	2000554c 	.word	0x2000554c

0800ddcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ddd4:	4b06      	ldr	r3, [pc, #24]	; (800ddf0 <vTaskInternalSetTimeOutState+0x24>)
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dddc:	4b05      	ldr	r3, [pc, #20]	; (800ddf4 <vTaskInternalSetTimeOutState+0x28>)
 800ddde:	681a      	ldr	r2, [r3, #0]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	605a      	str	r2, [r3, #4]
}
 800dde4:	bf00      	nop
 800dde6:	370c      	adds	r7, #12
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr
 800ddf0:	20005550 	.word	0x20005550
 800ddf4:	2000553c 	.word	0x2000553c

0800ddf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b088      	sub	sp, #32
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d10a      	bne.n	800de1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800de08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0c:	f383 8811 	msr	BASEPRI, r3
 800de10:	f3bf 8f6f 	isb	sy
 800de14:	f3bf 8f4f 	dsb	sy
 800de18:	613b      	str	r3, [r7, #16]
}
 800de1a:	bf00      	nop
 800de1c:	e7fe      	b.n	800de1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d10a      	bne.n	800de3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800de24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de28:	f383 8811 	msr	BASEPRI, r3
 800de2c:	f3bf 8f6f 	isb	sy
 800de30:	f3bf 8f4f 	dsb	sy
 800de34:	60fb      	str	r3, [r7, #12]
}
 800de36:	bf00      	nop
 800de38:	e7fe      	b.n	800de38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800de3a:	f000 feb3 	bl	800eba4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800de3e:	4b1d      	ldr	r3, [pc, #116]	; (800deb4 <xTaskCheckForTimeOut+0xbc>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	69ba      	ldr	r2, [r7, #24]
 800de4a:	1ad3      	subs	r3, r2, r3
 800de4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de56:	d102      	bne.n	800de5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800de58:	2300      	movs	r3, #0
 800de5a:	61fb      	str	r3, [r7, #28]
 800de5c:	e023      	b.n	800dea6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	4b15      	ldr	r3, [pc, #84]	; (800deb8 <xTaskCheckForTimeOut+0xc0>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	429a      	cmp	r2, r3
 800de68:	d007      	beq.n	800de7a <xTaskCheckForTimeOut+0x82>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	69ba      	ldr	r2, [r7, #24]
 800de70:	429a      	cmp	r2, r3
 800de72:	d302      	bcc.n	800de7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800de74:	2301      	movs	r3, #1
 800de76:	61fb      	str	r3, [r7, #28]
 800de78:	e015      	b.n	800dea6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	697a      	ldr	r2, [r7, #20]
 800de80:	429a      	cmp	r2, r3
 800de82:	d20b      	bcs.n	800de9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	681a      	ldr	r2, [r3, #0]
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	1ad2      	subs	r2, r2, r3
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7ff ff9b 	bl	800ddcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800de96:	2300      	movs	r3, #0
 800de98:	61fb      	str	r3, [r7, #28]
 800de9a:	e004      	b.n	800dea6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	2200      	movs	r2, #0
 800dea0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dea2:	2301      	movs	r3, #1
 800dea4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dea6:	f000 fead 	bl	800ec04 <vPortExitCritical>

	return xReturn;
 800deaa:	69fb      	ldr	r3, [r7, #28]
}
 800deac:	4618      	mov	r0, r3
 800deae:	3720      	adds	r7, #32
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	2000553c 	.word	0x2000553c
 800deb8:	20005550 	.word	0x20005550

0800debc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800debc:	b480      	push	{r7}
 800debe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dec0:	4b03      	ldr	r3, [pc, #12]	; (800ded0 <vTaskMissedYield+0x14>)
 800dec2:	2201      	movs	r2, #1
 800dec4:	601a      	str	r2, [r3, #0]
}
 800dec6:	bf00      	nop
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr
 800ded0:	2000554c 	.word	0x2000554c

0800ded4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dedc:	f000 f852 	bl	800df84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dee0:	4b06      	ldr	r3, [pc, #24]	; (800defc <prvIdleTask+0x28>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d9f9      	bls.n	800dedc <prvIdleTask+0x8>
			{
				taskYIELD();
 800dee8:	4b05      	ldr	r3, [pc, #20]	; (800df00 <prvIdleTask+0x2c>)
 800deea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deee:	601a      	str	r2, [r3, #0]
 800def0:	f3bf 8f4f 	dsb	sy
 800def4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800def8:	e7f0      	b.n	800dedc <prvIdleTask+0x8>
 800defa:	bf00      	nop
 800defc:	20005068 	.word	0x20005068
 800df00:	e000ed04 	.word	0xe000ed04

0800df04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df0a:	2300      	movs	r3, #0
 800df0c:	607b      	str	r3, [r7, #4]
 800df0e:	e00c      	b.n	800df2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800df10:	687a      	ldr	r2, [r7, #4]
 800df12:	4613      	mov	r3, r2
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	4413      	add	r3, r2
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	4a12      	ldr	r2, [pc, #72]	; (800df64 <prvInitialiseTaskLists+0x60>)
 800df1c:	4413      	add	r3, r2
 800df1e:	4618      	mov	r0, r3
 800df20:	f7fe fc52 	bl	800c7c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	3301      	adds	r3, #1
 800df28:	607b      	str	r3, [r7, #4]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2b37      	cmp	r3, #55	; 0x37
 800df2e:	d9ef      	bls.n	800df10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800df30:	480d      	ldr	r0, [pc, #52]	; (800df68 <prvInitialiseTaskLists+0x64>)
 800df32:	f7fe fc49 	bl	800c7c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800df36:	480d      	ldr	r0, [pc, #52]	; (800df6c <prvInitialiseTaskLists+0x68>)
 800df38:	f7fe fc46 	bl	800c7c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800df3c:	480c      	ldr	r0, [pc, #48]	; (800df70 <prvInitialiseTaskLists+0x6c>)
 800df3e:	f7fe fc43 	bl	800c7c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800df42:	480c      	ldr	r0, [pc, #48]	; (800df74 <prvInitialiseTaskLists+0x70>)
 800df44:	f7fe fc40 	bl	800c7c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800df48:	480b      	ldr	r0, [pc, #44]	; (800df78 <prvInitialiseTaskLists+0x74>)
 800df4a:	f7fe fc3d 	bl	800c7c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800df4e:	4b0b      	ldr	r3, [pc, #44]	; (800df7c <prvInitialiseTaskLists+0x78>)
 800df50:	4a05      	ldr	r2, [pc, #20]	; (800df68 <prvInitialiseTaskLists+0x64>)
 800df52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800df54:	4b0a      	ldr	r3, [pc, #40]	; (800df80 <prvInitialiseTaskLists+0x7c>)
 800df56:	4a05      	ldr	r2, [pc, #20]	; (800df6c <prvInitialiseTaskLists+0x68>)
 800df58:	601a      	str	r2, [r3, #0]
}
 800df5a:	bf00      	nop
 800df5c:	3708      	adds	r7, #8
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	20005068 	.word	0x20005068
 800df68:	200054c8 	.word	0x200054c8
 800df6c:	200054dc 	.word	0x200054dc
 800df70:	200054f8 	.word	0x200054f8
 800df74:	2000550c 	.word	0x2000550c
 800df78:	20005524 	.word	0x20005524
 800df7c:	200054f0 	.word	0x200054f0
 800df80:	200054f4 	.word	0x200054f4

0800df84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df8a:	e019      	b.n	800dfc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800df8c:	f000 fe0a 	bl	800eba4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df90:	4b10      	ldr	r3, [pc, #64]	; (800dfd4 <prvCheckTasksWaitingTermination+0x50>)
 800df92:	68db      	ldr	r3, [r3, #12]
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	3304      	adds	r3, #4
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7fe fc9d 	bl	800c8dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dfa2:	4b0d      	ldr	r3, [pc, #52]	; (800dfd8 <prvCheckTasksWaitingTermination+0x54>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	3b01      	subs	r3, #1
 800dfa8:	4a0b      	ldr	r2, [pc, #44]	; (800dfd8 <prvCheckTasksWaitingTermination+0x54>)
 800dfaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dfac:	4b0b      	ldr	r3, [pc, #44]	; (800dfdc <prvCheckTasksWaitingTermination+0x58>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	3b01      	subs	r3, #1
 800dfb2:	4a0a      	ldr	r2, [pc, #40]	; (800dfdc <prvCheckTasksWaitingTermination+0x58>)
 800dfb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dfb6:	f000 fe25 	bl	800ec04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 f810 	bl	800dfe0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dfc0:	4b06      	ldr	r3, [pc, #24]	; (800dfdc <prvCheckTasksWaitingTermination+0x58>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d1e1      	bne.n	800df8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dfc8:	bf00      	nop
 800dfca:	bf00      	nop
 800dfcc:	3708      	adds	r7, #8
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	2000550c 	.word	0x2000550c
 800dfd8:	20005538 	.word	0x20005538
 800dfdc:	20005520 	.word	0x20005520

0800dfe0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d108      	bne.n	800e004 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dff6:	4618      	mov	r0, r3
 800dff8:	f000 ffc2 	bl	800ef80 <vPortFree>
				vPortFree( pxTCB );
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f000 ffbf 	bl	800ef80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e002:	e018      	b.n	800e036 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d103      	bne.n	800e016 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 ffb6 	bl	800ef80 <vPortFree>
	}
 800e014:	e00f      	b.n	800e036 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e01c:	2b02      	cmp	r3, #2
 800e01e:	d00a      	beq.n	800e036 <prvDeleteTCB+0x56>
	__asm volatile
 800e020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e024:	f383 8811 	msr	BASEPRI, r3
 800e028:	f3bf 8f6f 	isb	sy
 800e02c:	f3bf 8f4f 	dsb	sy
 800e030:	60fb      	str	r3, [r7, #12]
}
 800e032:	bf00      	nop
 800e034:	e7fe      	b.n	800e034 <prvDeleteTCB+0x54>
	}
 800e036:	bf00      	nop
 800e038:	3710      	adds	r7, #16
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
	...

0800e040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e046:	4b0c      	ldr	r3, [pc, #48]	; (800e078 <prvResetNextTaskUnblockTime+0x38>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d104      	bne.n	800e05a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e050:	4b0a      	ldr	r3, [pc, #40]	; (800e07c <prvResetNextTaskUnblockTime+0x3c>)
 800e052:	f04f 32ff 	mov.w	r2, #4294967295
 800e056:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e058:	e008      	b.n	800e06c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e05a:	4b07      	ldr	r3, [pc, #28]	; (800e078 <prvResetNextTaskUnblockTime+0x38>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	68db      	ldr	r3, [r3, #12]
 800e062:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	4a04      	ldr	r2, [pc, #16]	; (800e07c <prvResetNextTaskUnblockTime+0x3c>)
 800e06a:	6013      	str	r3, [r2, #0]
}
 800e06c:	bf00      	nop
 800e06e:	370c      	adds	r7, #12
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr
 800e078:	200054f0 	.word	0x200054f0
 800e07c:	20005558 	.word	0x20005558

0800e080 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e086:	4b0b      	ldr	r3, [pc, #44]	; (800e0b4 <xTaskGetSchedulerState+0x34>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d102      	bne.n	800e094 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e08e:	2301      	movs	r3, #1
 800e090:	607b      	str	r3, [r7, #4]
 800e092:	e008      	b.n	800e0a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e094:	4b08      	ldr	r3, [pc, #32]	; (800e0b8 <xTaskGetSchedulerState+0x38>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d102      	bne.n	800e0a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e09c:	2302      	movs	r3, #2
 800e09e:	607b      	str	r3, [r7, #4]
 800e0a0:	e001      	b.n	800e0a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e0a6:	687b      	ldr	r3, [r7, #4]
	}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	370c      	adds	r7, #12
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr
 800e0b4:	20005544 	.word	0x20005544
 800e0b8:	20005560 	.word	0x20005560

0800e0bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b086      	sub	sp, #24
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d056      	beq.n	800e180 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e0d2:	4b2e      	ldr	r3, [pc, #184]	; (800e18c <xTaskPriorityDisinherit+0xd0>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	693a      	ldr	r2, [r7, #16]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d00a      	beq.n	800e0f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e0:	f383 8811 	msr	BASEPRI, r3
 800e0e4:	f3bf 8f6f 	isb	sy
 800e0e8:	f3bf 8f4f 	dsb	sy
 800e0ec:	60fb      	str	r3, [r7, #12]
}
 800e0ee:	bf00      	nop
 800e0f0:	e7fe      	b.n	800e0f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d10a      	bne.n	800e110 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0fe:	f383 8811 	msr	BASEPRI, r3
 800e102:	f3bf 8f6f 	isb	sy
 800e106:	f3bf 8f4f 	dsb	sy
 800e10a:	60bb      	str	r3, [r7, #8]
}
 800e10c:	bf00      	nop
 800e10e:	e7fe      	b.n	800e10e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e114:	1e5a      	subs	r2, r3, #1
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e122:	429a      	cmp	r2, r3
 800e124:	d02c      	beq.n	800e180 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d128      	bne.n	800e180 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	3304      	adds	r3, #4
 800e132:	4618      	mov	r0, r3
 800e134:	f7fe fbd2 	bl	800c8dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e144:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e150:	4b0f      	ldr	r3, [pc, #60]	; (800e190 <xTaskPriorityDisinherit+0xd4>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	429a      	cmp	r2, r3
 800e156:	d903      	bls.n	800e160 <xTaskPriorityDisinherit+0xa4>
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e15c:	4a0c      	ldr	r2, [pc, #48]	; (800e190 <xTaskPriorityDisinherit+0xd4>)
 800e15e:	6013      	str	r3, [r2, #0]
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e164:	4613      	mov	r3, r2
 800e166:	009b      	lsls	r3, r3, #2
 800e168:	4413      	add	r3, r2
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	4a09      	ldr	r2, [pc, #36]	; (800e194 <xTaskPriorityDisinherit+0xd8>)
 800e16e:	441a      	add	r2, r3
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	3304      	adds	r3, #4
 800e174:	4619      	mov	r1, r3
 800e176:	4610      	mov	r0, r2
 800e178:	f7fe fb53 	bl	800c822 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e17c:	2301      	movs	r3, #1
 800e17e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e180:	697b      	ldr	r3, [r7, #20]
	}
 800e182:	4618      	mov	r0, r3
 800e184:	3718      	adds	r7, #24
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	20005064 	.word	0x20005064
 800e190:	20005540 	.word	0x20005540
 800e194:	20005068 	.word	0x20005068

0800e198 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800e19e:	4b09      	ldr	r3, [pc, #36]	; (800e1c4 <uxTaskResetEventItemValue+0x2c>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	699b      	ldr	r3, [r3, #24]
 800e1a4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1a6:	4b07      	ldr	r3, [pc, #28]	; (800e1c4 <uxTaskResetEventItemValue+0x2c>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ac:	4b05      	ldr	r3, [pc, #20]	; (800e1c4 <uxTaskResetEventItemValue+0x2c>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800e1b4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800e1b6:	687b      	ldr	r3, [r7, #4]
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	370c      	adds	r7, #12
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr
 800e1c4:	20005064 	.word	0x20005064

0800e1c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b084      	sub	sp, #16
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e1d2:	4b21      	ldr	r3, [pc, #132]	; (800e258 <prvAddCurrentTaskToDelayedList+0x90>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1d8:	4b20      	ldr	r3, [pc, #128]	; (800e25c <prvAddCurrentTaskToDelayedList+0x94>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	3304      	adds	r3, #4
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fe fb7c 	bl	800c8dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ea:	d10a      	bne.n	800e202 <prvAddCurrentTaskToDelayedList+0x3a>
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d007      	beq.n	800e202 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1f2:	4b1a      	ldr	r3, [pc, #104]	; (800e25c <prvAddCurrentTaskToDelayedList+0x94>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	3304      	adds	r3, #4
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	4819      	ldr	r0, [pc, #100]	; (800e260 <prvAddCurrentTaskToDelayedList+0x98>)
 800e1fc:	f7fe fb11 	bl	800c822 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e200:	e026      	b.n	800e250 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e202:	68fa      	ldr	r2, [r7, #12]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	4413      	add	r3, r2
 800e208:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e20a:	4b14      	ldr	r3, [pc, #80]	; (800e25c <prvAddCurrentTaskToDelayedList+0x94>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	68ba      	ldr	r2, [r7, #8]
 800e210:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e212:	68ba      	ldr	r2, [r7, #8]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	429a      	cmp	r2, r3
 800e218:	d209      	bcs.n	800e22e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e21a:	4b12      	ldr	r3, [pc, #72]	; (800e264 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	4b0f      	ldr	r3, [pc, #60]	; (800e25c <prvAddCurrentTaskToDelayedList+0x94>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	3304      	adds	r3, #4
 800e224:	4619      	mov	r1, r3
 800e226:	4610      	mov	r0, r2
 800e228:	f7fe fb1f 	bl	800c86a <vListInsert>
}
 800e22c:	e010      	b.n	800e250 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e22e:	4b0e      	ldr	r3, [pc, #56]	; (800e268 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	4b0a      	ldr	r3, [pc, #40]	; (800e25c <prvAddCurrentTaskToDelayedList+0x94>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	3304      	adds	r3, #4
 800e238:	4619      	mov	r1, r3
 800e23a:	4610      	mov	r0, r2
 800e23c:	f7fe fb15 	bl	800c86a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e240:	4b0a      	ldr	r3, [pc, #40]	; (800e26c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	68ba      	ldr	r2, [r7, #8]
 800e246:	429a      	cmp	r2, r3
 800e248:	d202      	bcs.n	800e250 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e24a:	4a08      	ldr	r2, [pc, #32]	; (800e26c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	6013      	str	r3, [r2, #0]
}
 800e250:	bf00      	nop
 800e252:	3710      	adds	r7, #16
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}
 800e258:	2000553c 	.word	0x2000553c
 800e25c:	20005064 	.word	0x20005064
 800e260:	20005524 	.word	0x20005524
 800e264:	200054f4 	.word	0x200054f4
 800e268:	200054f0 	.word	0x200054f0
 800e26c:	20005558 	.word	0x20005558

0800e270 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b08a      	sub	sp, #40	; 0x28
 800e274:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e276:	2300      	movs	r3, #0
 800e278:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e27a:	f000 fb07 	bl	800e88c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e27e:	4b1c      	ldr	r3, [pc, #112]	; (800e2f0 <xTimerCreateTimerTask+0x80>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d021      	beq.n	800e2ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e286:	2300      	movs	r3, #0
 800e288:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e28a:	2300      	movs	r3, #0
 800e28c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e28e:	1d3a      	adds	r2, r7, #4
 800e290:	f107 0108 	add.w	r1, r7, #8
 800e294:	f107 030c 	add.w	r3, r7, #12
 800e298:	4618      	mov	r0, r3
 800e29a:	f7fe f80f 	bl	800c2bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e29e:	6879      	ldr	r1, [r7, #4]
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	68fa      	ldr	r2, [r7, #12]
 800e2a4:	9202      	str	r2, [sp, #8]
 800e2a6:	9301      	str	r3, [sp, #4]
 800e2a8:	2302      	movs	r3, #2
 800e2aa:	9300      	str	r3, [sp, #0]
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	460a      	mov	r2, r1
 800e2b0:	4910      	ldr	r1, [pc, #64]	; (800e2f4 <xTimerCreateTimerTask+0x84>)
 800e2b2:	4811      	ldr	r0, [pc, #68]	; (800e2f8 <xTimerCreateTimerTask+0x88>)
 800e2b4:	f7ff f828 	bl	800d308 <xTaskCreateStatic>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	4a10      	ldr	r2, [pc, #64]	; (800e2fc <xTimerCreateTimerTask+0x8c>)
 800e2bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e2be:	4b0f      	ldr	r3, [pc, #60]	; (800e2fc <xTimerCreateTimerTask+0x8c>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d001      	beq.n	800e2ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d10a      	bne.n	800e2e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d4:	f383 8811 	msr	BASEPRI, r3
 800e2d8:	f3bf 8f6f 	isb	sy
 800e2dc:	f3bf 8f4f 	dsb	sy
 800e2e0:	613b      	str	r3, [r7, #16]
}
 800e2e2:	bf00      	nop
 800e2e4:	e7fe      	b.n	800e2e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e2e6:	697b      	ldr	r3, [r7, #20]
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3718      	adds	r7, #24
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	20005594 	.word	0x20005594
 800e2f4:	0801c93c 	.word	0x0801c93c
 800e2f8:	0800e435 	.word	0x0800e435
 800e2fc:	20005598 	.word	0x20005598

0800e300 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b08a      	sub	sp, #40	; 0x28
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	607a      	str	r2, [r7, #4]
 800e30c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e30e:	2300      	movs	r3, #0
 800e310:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d10a      	bne.n	800e32e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31c:	f383 8811 	msr	BASEPRI, r3
 800e320:	f3bf 8f6f 	isb	sy
 800e324:	f3bf 8f4f 	dsb	sy
 800e328:	623b      	str	r3, [r7, #32]
}
 800e32a:	bf00      	nop
 800e32c:	e7fe      	b.n	800e32c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e32e:	4b1a      	ldr	r3, [pc, #104]	; (800e398 <xTimerGenericCommand+0x98>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d02a      	beq.n	800e38c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	2b05      	cmp	r3, #5
 800e346:	dc18      	bgt.n	800e37a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e348:	f7ff fe9a 	bl	800e080 <xTaskGetSchedulerState>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b02      	cmp	r3, #2
 800e350:	d109      	bne.n	800e366 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e352:	4b11      	ldr	r3, [pc, #68]	; (800e398 <xTimerGenericCommand+0x98>)
 800e354:	6818      	ldr	r0, [r3, #0]
 800e356:	f107 0110 	add.w	r1, r7, #16
 800e35a:	2300      	movs	r3, #0
 800e35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e35e:	f7fe fbeb 	bl	800cb38 <xQueueGenericSend>
 800e362:	6278      	str	r0, [r7, #36]	; 0x24
 800e364:	e012      	b.n	800e38c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e366:	4b0c      	ldr	r3, [pc, #48]	; (800e398 <xTimerGenericCommand+0x98>)
 800e368:	6818      	ldr	r0, [r3, #0]
 800e36a:	f107 0110 	add.w	r1, r7, #16
 800e36e:	2300      	movs	r3, #0
 800e370:	2200      	movs	r2, #0
 800e372:	f7fe fbe1 	bl	800cb38 <xQueueGenericSend>
 800e376:	6278      	str	r0, [r7, #36]	; 0x24
 800e378:	e008      	b.n	800e38c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e37a:	4b07      	ldr	r3, [pc, #28]	; (800e398 <xTimerGenericCommand+0x98>)
 800e37c:	6818      	ldr	r0, [r3, #0]
 800e37e:	f107 0110 	add.w	r1, r7, #16
 800e382:	2300      	movs	r3, #0
 800e384:	683a      	ldr	r2, [r7, #0]
 800e386:	f7fe fcd5 	bl	800cd34 <xQueueGenericSendFromISR>
 800e38a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3728      	adds	r7, #40	; 0x28
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
 800e396:	bf00      	nop
 800e398:	20005594 	.word	0x20005594

0800e39c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b088      	sub	sp, #32
 800e3a0:	af02      	add	r7, sp, #8
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3a6:	4b22      	ldr	r3, [pc, #136]	; (800e430 <prvProcessExpiredTimer+0x94>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	3304      	adds	r3, #4
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7fe fa91 	bl	800c8dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3c0:	f003 0304 	and.w	r3, r3, #4
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d022      	beq.n	800e40e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	699a      	ldr	r2, [r3, #24]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	18d1      	adds	r1, r2, r3
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	683a      	ldr	r2, [r7, #0]
 800e3d4:	6978      	ldr	r0, [r7, #20]
 800e3d6:	f000 f8d1 	bl	800e57c <prvInsertTimerInActiveList>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d01f      	beq.n	800e420 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	9300      	str	r3, [sp, #0]
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	2100      	movs	r1, #0
 800e3ea:	6978      	ldr	r0, [r7, #20]
 800e3ec:	f7ff ff88 	bl	800e300 <xTimerGenericCommand>
 800e3f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d113      	bne.n	800e420 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fc:	f383 8811 	msr	BASEPRI, r3
 800e400:	f3bf 8f6f 	isb	sy
 800e404:	f3bf 8f4f 	dsb	sy
 800e408:	60fb      	str	r3, [r7, #12]
}
 800e40a:	bf00      	nop
 800e40c:	e7fe      	b.n	800e40c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e414:	f023 0301 	bic.w	r3, r3, #1
 800e418:	b2da      	uxtb	r2, r3
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	6a1b      	ldr	r3, [r3, #32]
 800e424:	6978      	ldr	r0, [r7, #20]
 800e426:	4798      	blx	r3
}
 800e428:	bf00      	nop
 800e42a:	3718      	adds	r7, #24
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	2000558c 	.word	0x2000558c

0800e434 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e43c:	f107 0308 	add.w	r3, r7, #8
 800e440:	4618      	mov	r0, r3
 800e442:	f000 f857 	bl	800e4f4 <prvGetNextExpireTime>
 800e446:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	4619      	mov	r1, r3
 800e44c:	68f8      	ldr	r0, [r7, #12]
 800e44e:	f000 f803 	bl	800e458 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e452:	f000 f8d5 	bl	800e600 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e456:	e7f1      	b.n	800e43c <prvTimerTask+0x8>

0800e458 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e462:	f7ff f98d 	bl	800d780 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e466:	f107 0308 	add.w	r3, r7, #8
 800e46a:	4618      	mov	r0, r3
 800e46c:	f000 f866 	bl	800e53c <prvSampleTimeNow>
 800e470:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d130      	bne.n	800e4da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d10a      	bne.n	800e494 <prvProcessTimerOrBlockTask+0x3c>
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	429a      	cmp	r2, r3
 800e484:	d806      	bhi.n	800e494 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e486:	f7ff f989 	bl	800d79c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e48a:	68f9      	ldr	r1, [r7, #12]
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f7ff ff85 	bl	800e39c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e492:	e024      	b.n	800e4de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d008      	beq.n	800e4ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e49a:	4b13      	ldr	r3, [pc, #76]	; (800e4e8 <prvProcessTimerOrBlockTask+0x90>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d101      	bne.n	800e4a8 <prvProcessTimerOrBlockTask+0x50>
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	e000      	b.n	800e4aa <prvProcessTimerOrBlockTask+0x52>
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e4ac:	4b0f      	ldr	r3, [pc, #60]	; (800e4ec <prvProcessTimerOrBlockTask+0x94>)
 800e4ae:	6818      	ldr	r0, [r3, #0]
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	1ad3      	subs	r3, r2, r3
 800e4b6:	683a      	ldr	r2, [r7, #0]
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	f7fe fef1 	bl	800d2a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e4be:	f7ff f96d 	bl	800d79c <xTaskResumeAll>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d10a      	bne.n	800e4de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e4c8:	4b09      	ldr	r3, [pc, #36]	; (800e4f0 <prvProcessTimerOrBlockTask+0x98>)
 800e4ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4ce:	601a      	str	r2, [r3, #0]
 800e4d0:	f3bf 8f4f 	dsb	sy
 800e4d4:	f3bf 8f6f 	isb	sy
}
 800e4d8:	e001      	b.n	800e4de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e4da:	f7ff f95f 	bl	800d79c <xTaskResumeAll>
}
 800e4de:	bf00      	nop
 800e4e0:	3710      	adds	r7, #16
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	20005590 	.word	0x20005590
 800e4ec:	20005594 	.word	0x20005594
 800e4f0:	e000ed04 	.word	0xe000ed04

0800e4f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b085      	sub	sp, #20
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e4fc:	4b0e      	ldr	r3, [pc, #56]	; (800e538 <prvGetNextExpireTime+0x44>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d101      	bne.n	800e50a <prvGetNextExpireTime+0x16>
 800e506:	2201      	movs	r2, #1
 800e508:	e000      	b.n	800e50c <prvGetNextExpireTime+0x18>
 800e50a:	2200      	movs	r2, #0
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d105      	bne.n	800e524 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e518:	4b07      	ldr	r3, [pc, #28]	; (800e538 <prvGetNextExpireTime+0x44>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	60fb      	str	r3, [r7, #12]
 800e522:	e001      	b.n	800e528 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e524:	2300      	movs	r3, #0
 800e526:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e528:	68fb      	ldr	r3, [r7, #12]
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3714      	adds	r7, #20
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr
 800e536:	bf00      	nop
 800e538:	2000558c 	.word	0x2000558c

0800e53c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b084      	sub	sp, #16
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e544:	f7ff f9c8 	bl	800d8d8 <xTaskGetTickCount>
 800e548:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e54a:	4b0b      	ldr	r3, [pc, #44]	; (800e578 <prvSampleTimeNow+0x3c>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	68fa      	ldr	r2, [r7, #12]
 800e550:	429a      	cmp	r2, r3
 800e552:	d205      	bcs.n	800e560 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e554:	f000 f936 	bl	800e7c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2201      	movs	r2, #1
 800e55c:	601a      	str	r2, [r3, #0]
 800e55e:	e002      	b.n	800e566 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e566:	4a04      	ldr	r2, [pc, #16]	; (800e578 <prvSampleTimeNow+0x3c>)
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e56c:	68fb      	ldr	r3, [r7, #12]
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3710      	adds	r7, #16
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	2000559c 	.word	0x2000559c

0800e57c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b086      	sub	sp, #24
 800e580:	af00      	add	r7, sp, #0
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	60b9      	str	r1, [r7, #8]
 800e586:	607a      	str	r2, [r7, #4]
 800e588:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e58a:	2300      	movs	r3, #0
 800e58c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	68ba      	ldr	r2, [r7, #8]
 800e592:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	68fa      	ldr	r2, [r7, #12]
 800e598:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e59a:	68ba      	ldr	r2, [r7, #8]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d812      	bhi.n	800e5c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5a2:	687a      	ldr	r2, [r7, #4]
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	1ad2      	subs	r2, r2, r3
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	699b      	ldr	r3, [r3, #24]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d302      	bcc.n	800e5b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	617b      	str	r3, [r7, #20]
 800e5b4:	e01b      	b.n	800e5ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e5b6:	4b10      	ldr	r3, [pc, #64]	; (800e5f8 <prvInsertTimerInActiveList+0x7c>)
 800e5b8:	681a      	ldr	r2, [r3, #0]
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	3304      	adds	r3, #4
 800e5be:	4619      	mov	r1, r3
 800e5c0:	4610      	mov	r0, r2
 800e5c2:	f7fe f952 	bl	800c86a <vListInsert>
 800e5c6:	e012      	b.n	800e5ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d206      	bcs.n	800e5de <prvInsertTimerInActiveList+0x62>
 800e5d0:	68ba      	ldr	r2, [r7, #8]
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d302      	bcc.n	800e5de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	617b      	str	r3, [r7, #20]
 800e5dc:	e007      	b.n	800e5ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e5de:	4b07      	ldr	r3, [pc, #28]	; (800e5fc <prvInsertTimerInActiveList+0x80>)
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	3304      	adds	r3, #4
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	4610      	mov	r0, r2
 800e5ea:	f7fe f93e 	bl	800c86a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e5ee:	697b      	ldr	r3, [r7, #20]
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3718      	adds	r7, #24
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}
 800e5f8:	20005590 	.word	0x20005590
 800e5fc:	2000558c 	.word	0x2000558c

0800e600 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b08e      	sub	sp, #56	; 0x38
 800e604:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e606:	e0ca      	b.n	800e79e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	da18      	bge.n	800e640 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e60e:	1d3b      	adds	r3, r7, #4
 800e610:	3304      	adds	r3, #4
 800e612:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e616:	2b00      	cmp	r3, #0
 800e618:	d10a      	bne.n	800e630 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61e:	f383 8811 	msr	BASEPRI, r3
 800e622:	f3bf 8f6f 	isb	sy
 800e626:	f3bf 8f4f 	dsb	sy
 800e62a:	61fb      	str	r3, [r7, #28]
}
 800e62c:	bf00      	nop
 800e62e:	e7fe      	b.n	800e62e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e636:	6850      	ldr	r0, [r2, #4]
 800e638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e63a:	6892      	ldr	r2, [r2, #8]
 800e63c:	4611      	mov	r1, r2
 800e63e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2b00      	cmp	r3, #0
 800e644:	f2c0 80aa 	blt.w	800e79c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e64e:	695b      	ldr	r3, [r3, #20]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d004      	beq.n	800e65e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e656:	3304      	adds	r3, #4
 800e658:	4618      	mov	r0, r3
 800e65a:	f7fe f93f 	bl	800c8dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e65e:	463b      	mov	r3, r7
 800e660:	4618      	mov	r0, r3
 800e662:	f7ff ff6b 	bl	800e53c <prvSampleTimeNow>
 800e666:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2b09      	cmp	r3, #9
 800e66c:	f200 8097 	bhi.w	800e79e <prvProcessReceivedCommands+0x19e>
 800e670:	a201      	add	r2, pc, #4	; (adr r2, 800e678 <prvProcessReceivedCommands+0x78>)
 800e672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e676:	bf00      	nop
 800e678:	0800e6a1 	.word	0x0800e6a1
 800e67c:	0800e6a1 	.word	0x0800e6a1
 800e680:	0800e6a1 	.word	0x0800e6a1
 800e684:	0800e715 	.word	0x0800e715
 800e688:	0800e729 	.word	0x0800e729
 800e68c:	0800e773 	.word	0x0800e773
 800e690:	0800e6a1 	.word	0x0800e6a1
 800e694:	0800e6a1 	.word	0x0800e6a1
 800e698:	0800e715 	.word	0x0800e715
 800e69c:	0800e729 	.word	0x0800e729
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6a6:	f043 0301 	orr.w	r3, r3, #1
 800e6aa:	b2da      	uxtb	r2, r3
 800e6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e6b2:	68ba      	ldr	r2, [r7, #8]
 800e6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b6:	699b      	ldr	r3, [r3, #24]
 800e6b8:	18d1      	adds	r1, r2, r3
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6c0:	f7ff ff5c 	bl	800e57c <prvInsertTimerInActiveList>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d069      	beq.n	800e79e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6cc:	6a1b      	ldr	r3, [r3, #32]
 800e6ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6d8:	f003 0304 	and.w	r3, r3, #4
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d05e      	beq.n	800e79e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e6e0:	68ba      	ldr	r2, [r7, #8]
 800e6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e4:	699b      	ldr	r3, [r3, #24]
 800e6e6:	441a      	add	r2, r3
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	9300      	str	r3, [sp, #0]
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	2100      	movs	r1, #0
 800e6f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6f2:	f7ff fe05 	bl	800e300 <xTimerGenericCommand>
 800e6f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e6f8:	6a3b      	ldr	r3, [r7, #32]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d14f      	bne.n	800e79e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e702:	f383 8811 	msr	BASEPRI, r3
 800e706:	f3bf 8f6f 	isb	sy
 800e70a:	f3bf 8f4f 	dsb	sy
 800e70e:	61bb      	str	r3, [r7, #24]
}
 800e710:	bf00      	nop
 800e712:	e7fe      	b.n	800e712 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e716:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e71a:	f023 0301 	bic.w	r3, r3, #1
 800e71e:	b2da      	uxtb	r2, r3
 800e720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e726:	e03a      	b.n	800e79e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e72e:	f043 0301 	orr.w	r3, r3, #1
 800e732:	b2da      	uxtb	r2, r3
 800e734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e73a:	68ba      	ldr	r2, [r7, #8]
 800e73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e73e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e742:	699b      	ldr	r3, [r3, #24]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d10a      	bne.n	800e75e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e74c:	f383 8811 	msr	BASEPRI, r3
 800e750:	f3bf 8f6f 	isb	sy
 800e754:	f3bf 8f4f 	dsb	sy
 800e758:	617b      	str	r3, [r7, #20]
}
 800e75a:	bf00      	nop
 800e75c:	e7fe      	b.n	800e75c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e760:	699a      	ldr	r2, [r3, #24]
 800e762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e764:	18d1      	adds	r1, r2, r3
 800e766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e76a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e76c:	f7ff ff06 	bl	800e57c <prvInsertTimerInActiveList>
					break;
 800e770:	e015      	b.n	800e79e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e778:	f003 0302 	and.w	r3, r3, #2
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d103      	bne.n	800e788 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e782:	f000 fbfd 	bl	800ef80 <vPortFree>
 800e786:	e00a      	b.n	800e79e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e78e:	f023 0301 	bic.w	r3, r3, #1
 800e792:	b2da      	uxtb	r2, r3
 800e794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e796:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e79a:	e000      	b.n	800e79e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e79c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e79e:	4b08      	ldr	r3, [pc, #32]	; (800e7c0 <prvProcessReceivedCommands+0x1c0>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	1d39      	adds	r1, r7, #4
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7fe fb60 	bl	800ce6c <xQueueReceive>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	f47f af2a 	bne.w	800e608 <prvProcessReceivedCommands+0x8>
	}
}
 800e7b4:	bf00      	nop
 800e7b6:	bf00      	nop
 800e7b8:	3730      	adds	r7, #48	; 0x30
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	20005594 	.word	0x20005594

0800e7c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b088      	sub	sp, #32
 800e7c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e7ca:	e048      	b.n	800e85e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7cc:	4b2d      	ldr	r3, [pc, #180]	; (800e884 <prvSwitchTimerLists+0xc0>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	68db      	ldr	r3, [r3, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7d6:	4b2b      	ldr	r3, [pc, #172]	; (800e884 <prvSwitchTimerLists+0xc0>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	68db      	ldr	r3, [r3, #12]
 800e7dc:	68db      	ldr	r3, [r3, #12]
 800e7de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	3304      	adds	r3, #4
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7fe f879 	bl	800c8dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	6a1b      	ldr	r3, [r3, #32]
 800e7ee:	68f8      	ldr	r0, [r7, #12]
 800e7f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7f8:	f003 0304 	and.w	r3, r3, #4
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d02e      	beq.n	800e85e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	699b      	ldr	r3, [r3, #24]
 800e804:	693a      	ldr	r2, [r7, #16]
 800e806:	4413      	add	r3, r2
 800e808:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e80a:	68ba      	ldr	r2, [r7, #8]
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d90e      	bls.n	800e830 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	68ba      	ldr	r2, [r7, #8]
 800e816:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	68fa      	ldr	r2, [r7, #12]
 800e81c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e81e:	4b19      	ldr	r3, [pc, #100]	; (800e884 <prvSwitchTimerLists+0xc0>)
 800e820:	681a      	ldr	r2, [r3, #0]
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	3304      	adds	r3, #4
 800e826:	4619      	mov	r1, r3
 800e828:	4610      	mov	r0, r2
 800e82a:	f7fe f81e 	bl	800c86a <vListInsert>
 800e82e:	e016      	b.n	800e85e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e830:	2300      	movs	r3, #0
 800e832:	9300      	str	r3, [sp, #0]
 800e834:	2300      	movs	r3, #0
 800e836:	693a      	ldr	r2, [r7, #16]
 800e838:	2100      	movs	r1, #0
 800e83a:	68f8      	ldr	r0, [r7, #12]
 800e83c:	f7ff fd60 	bl	800e300 <xTimerGenericCommand>
 800e840:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d10a      	bne.n	800e85e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84c:	f383 8811 	msr	BASEPRI, r3
 800e850:	f3bf 8f6f 	isb	sy
 800e854:	f3bf 8f4f 	dsb	sy
 800e858:	603b      	str	r3, [r7, #0]
}
 800e85a:	bf00      	nop
 800e85c:	e7fe      	b.n	800e85c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e85e:	4b09      	ldr	r3, [pc, #36]	; (800e884 <prvSwitchTimerLists+0xc0>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d1b1      	bne.n	800e7cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e868:	4b06      	ldr	r3, [pc, #24]	; (800e884 <prvSwitchTimerLists+0xc0>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e86e:	4b06      	ldr	r3, [pc, #24]	; (800e888 <prvSwitchTimerLists+0xc4>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	4a04      	ldr	r2, [pc, #16]	; (800e884 <prvSwitchTimerLists+0xc0>)
 800e874:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e876:	4a04      	ldr	r2, [pc, #16]	; (800e888 <prvSwitchTimerLists+0xc4>)
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	6013      	str	r3, [r2, #0]
}
 800e87c:	bf00      	nop
 800e87e:	3718      	adds	r7, #24
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}
 800e884:	2000558c 	.word	0x2000558c
 800e888:	20005590 	.word	0x20005590

0800e88c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e892:	f000 f987 	bl	800eba4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e896:	4b15      	ldr	r3, [pc, #84]	; (800e8ec <prvCheckForValidListAndQueue+0x60>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d120      	bne.n	800e8e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e89e:	4814      	ldr	r0, [pc, #80]	; (800e8f0 <prvCheckForValidListAndQueue+0x64>)
 800e8a0:	f7fd ff92 	bl	800c7c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e8a4:	4813      	ldr	r0, [pc, #76]	; (800e8f4 <prvCheckForValidListAndQueue+0x68>)
 800e8a6:	f7fd ff8f 	bl	800c7c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e8aa:	4b13      	ldr	r3, [pc, #76]	; (800e8f8 <prvCheckForValidListAndQueue+0x6c>)
 800e8ac:	4a10      	ldr	r2, [pc, #64]	; (800e8f0 <prvCheckForValidListAndQueue+0x64>)
 800e8ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e8b0:	4b12      	ldr	r3, [pc, #72]	; (800e8fc <prvCheckForValidListAndQueue+0x70>)
 800e8b2:	4a10      	ldr	r2, [pc, #64]	; (800e8f4 <prvCheckForValidListAndQueue+0x68>)
 800e8b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	9300      	str	r3, [sp, #0]
 800e8ba:	4b11      	ldr	r3, [pc, #68]	; (800e900 <prvCheckForValidListAndQueue+0x74>)
 800e8bc:	4a11      	ldr	r2, [pc, #68]	; (800e904 <prvCheckForValidListAndQueue+0x78>)
 800e8be:	2110      	movs	r1, #16
 800e8c0:	200a      	movs	r0, #10
 800e8c2:	f7fe f89d 	bl	800ca00 <xQueueGenericCreateStatic>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	4a08      	ldr	r2, [pc, #32]	; (800e8ec <prvCheckForValidListAndQueue+0x60>)
 800e8ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e8cc:	4b07      	ldr	r3, [pc, #28]	; (800e8ec <prvCheckForValidListAndQueue+0x60>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d005      	beq.n	800e8e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e8d4:	4b05      	ldr	r3, [pc, #20]	; (800e8ec <prvCheckForValidListAndQueue+0x60>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	490b      	ldr	r1, [pc, #44]	; (800e908 <prvCheckForValidListAndQueue+0x7c>)
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7fe fcb6 	bl	800d24c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e8e0:	f000 f990 	bl	800ec04 <vPortExitCritical>
}
 800e8e4:	bf00      	nop
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	20005594 	.word	0x20005594
 800e8f0:	20005564 	.word	0x20005564
 800e8f4:	20005578 	.word	0x20005578
 800e8f8:	2000558c 	.word	0x2000558c
 800e8fc:	20005590 	.word	0x20005590
 800e900:	20005640 	.word	0x20005640
 800e904:	200055a0 	.word	0x200055a0
 800e908:	0801c944 	.word	0x0801c944

0800e90c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b08a      	sub	sp, #40	; 0x28
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	607a      	str	r2, [r7, #4]
 800e918:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800e91a:	f06f 0301 	mvn.w	r3, #1
 800e91e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e92c:	4b06      	ldr	r3, [pc, #24]	; (800e948 <xTimerPendFunctionCallFromISR+0x3c>)
 800e92e:	6818      	ldr	r0, [r3, #0]
 800e930:	f107 0114 	add.w	r1, r7, #20
 800e934:	2300      	movs	r3, #0
 800e936:	683a      	ldr	r2, [r7, #0]
 800e938:	f7fe f9fc 	bl	800cd34 <xQueueGenericSendFromISR>
 800e93c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800e93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e940:	4618      	mov	r0, r3
 800e942:	3728      	adds	r7, #40	; 0x28
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}
 800e948:	20005594 	.word	0x20005594

0800e94c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e94c:	b480      	push	{r7}
 800e94e:	b085      	sub	sp, #20
 800e950:	af00      	add	r7, sp, #0
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	60b9      	str	r1, [r7, #8]
 800e956:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	3b04      	subs	r3, #4
 800e95c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	3b04      	subs	r3, #4
 800e96a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	f023 0201 	bic.w	r2, r3, #1
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	3b04      	subs	r3, #4
 800e97a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e97c:	4a0c      	ldr	r2, [pc, #48]	; (800e9b0 <pxPortInitialiseStack+0x64>)
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	3b14      	subs	r3, #20
 800e986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	3b04      	subs	r3, #4
 800e992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f06f 0202 	mvn.w	r2, #2
 800e99a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	3b20      	subs	r3, #32
 800e9a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3714      	adds	r7, #20
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr
 800e9b0:	0800e9b5 	.word	0x0800e9b5

0800e9b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b085      	sub	sp, #20
 800e9b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e9be:	4b12      	ldr	r3, [pc, #72]	; (800ea08 <prvTaskExitError+0x54>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c6:	d00a      	beq.n	800e9de <prvTaskExitError+0x2a>
	__asm volatile
 800e9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9cc:	f383 8811 	msr	BASEPRI, r3
 800e9d0:	f3bf 8f6f 	isb	sy
 800e9d4:	f3bf 8f4f 	dsb	sy
 800e9d8:	60fb      	str	r3, [r7, #12]
}
 800e9da:	bf00      	nop
 800e9dc:	e7fe      	b.n	800e9dc <prvTaskExitError+0x28>
	__asm volatile
 800e9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e2:	f383 8811 	msr	BASEPRI, r3
 800e9e6:	f3bf 8f6f 	isb	sy
 800e9ea:	f3bf 8f4f 	dsb	sy
 800e9ee:	60bb      	str	r3, [r7, #8]
}
 800e9f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e9f2:	bf00      	nop
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d0fc      	beq.n	800e9f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e9fa:	bf00      	nop
 800e9fc:	bf00      	nop
 800e9fe:	3714      	adds	r7, #20
 800ea00:	46bd      	mov	sp, r7
 800ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea06:	4770      	bx	lr
 800ea08:	200013c4 	.word	0x200013c4
 800ea0c:	00000000 	.word	0x00000000

0800ea10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ea10:	4b07      	ldr	r3, [pc, #28]	; (800ea30 <pxCurrentTCBConst2>)
 800ea12:	6819      	ldr	r1, [r3, #0]
 800ea14:	6808      	ldr	r0, [r1, #0]
 800ea16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea1a:	f380 8809 	msr	PSP, r0
 800ea1e:	f3bf 8f6f 	isb	sy
 800ea22:	f04f 0000 	mov.w	r0, #0
 800ea26:	f380 8811 	msr	BASEPRI, r0
 800ea2a:	4770      	bx	lr
 800ea2c:	f3af 8000 	nop.w

0800ea30 <pxCurrentTCBConst2>:
 800ea30:	20005064 	.word	0x20005064
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ea34:	bf00      	nop
 800ea36:	bf00      	nop

0800ea38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ea38:	4808      	ldr	r0, [pc, #32]	; (800ea5c <prvPortStartFirstTask+0x24>)
 800ea3a:	6800      	ldr	r0, [r0, #0]
 800ea3c:	6800      	ldr	r0, [r0, #0]
 800ea3e:	f380 8808 	msr	MSP, r0
 800ea42:	f04f 0000 	mov.w	r0, #0
 800ea46:	f380 8814 	msr	CONTROL, r0
 800ea4a:	b662      	cpsie	i
 800ea4c:	b661      	cpsie	f
 800ea4e:	f3bf 8f4f 	dsb	sy
 800ea52:	f3bf 8f6f 	isb	sy
 800ea56:	df00      	svc	0
 800ea58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ea5a:	bf00      	nop
 800ea5c:	e000ed08 	.word	0xe000ed08

0800ea60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b086      	sub	sp, #24
 800ea64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ea66:	4b46      	ldr	r3, [pc, #280]	; (800eb80 <xPortStartScheduler+0x120>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	4a46      	ldr	r2, [pc, #280]	; (800eb84 <xPortStartScheduler+0x124>)
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d10a      	bne.n	800ea86 <xPortStartScheduler+0x26>
	__asm volatile
 800ea70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea74:	f383 8811 	msr	BASEPRI, r3
 800ea78:	f3bf 8f6f 	isb	sy
 800ea7c:	f3bf 8f4f 	dsb	sy
 800ea80:	613b      	str	r3, [r7, #16]
}
 800ea82:	bf00      	nop
 800ea84:	e7fe      	b.n	800ea84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ea86:	4b3e      	ldr	r3, [pc, #248]	; (800eb80 <xPortStartScheduler+0x120>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	4a3f      	ldr	r2, [pc, #252]	; (800eb88 <xPortStartScheduler+0x128>)
 800ea8c:	4293      	cmp	r3, r2
 800ea8e:	d10a      	bne.n	800eaa6 <xPortStartScheduler+0x46>
	__asm volatile
 800ea90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea94:	f383 8811 	msr	BASEPRI, r3
 800ea98:	f3bf 8f6f 	isb	sy
 800ea9c:	f3bf 8f4f 	dsb	sy
 800eaa0:	60fb      	str	r3, [r7, #12]
}
 800eaa2:	bf00      	nop
 800eaa4:	e7fe      	b.n	800eaa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eaa6:	4b39      	ldr	r3, [pc, #228]	; (800eb8c <xPortStartScheduler+0x12c>)
 800eaa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	b2db      	uxtb	r3, r3
 800eab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	22ff      	movs	r2, #255	; 0xff
 800eab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	b2db      	uxtb	r3, r3
 800eabe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eac0:	78fb      	ldrb	r3, [r7, #3]
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eac8:	b2da      	uxtb	r2, r3
 800eaca:	4b31      	ldr	r3, [pc, #196]	; (800eb90 <xPortStartScheduler+0x130>)
 800eacc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eace:	4b31      	ldr	r3, [pc, #196]	; (800eb94 <xPortStartScheduler+0x134>)
 800ead0:	2207      	movs	r2, #7
 800ead2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ead4:	e009      	b.n	800eaea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ead6:	4b2f      	ldr	r3, [pc, #188]	; (800eb94 <xPortStartScheduler+0x134>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	3b01      	subs	r3, #1
 800eadc:	4a2d      	ldr	r2, [pc, #180]	; (800eb94 <xPortStartScheduler+0x134>)
 800eade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eae0:	78fb      	ldrb	r3, [r7, #3]
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	005b      	lsls	r3, r3, #1
 800eae6:	b2db      	uxtb	r3, r3
 800eae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eaea:	78fb      	ldrb	r3, [r7, #3]
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaf2:	2b80      	cmp	r3, #128	; 0x80
 800eaf4:	d0ef      	beq.n	800ead6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eaf6:	4b27      	ldr	r3, [pc, #156]	; (800eb94 <xPortStartScheduler+0x134>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f1c3 0307 	rsb	r3, r3, #7
 800eafe:	2b04      	cmp	r3, #4
 800eb00:	d00a      	beq.n	800eb18 <xPortStartScheduler+0xb8>
	__asm volatile
 800eb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb06:	f383 8811 	msr	BASEPRI, r3
 800eb0a:	f3bf 8f6f 	isb	sy
 800eb0e:	f3bf 8f4f 	dsb	sy
 800eb12:	60bb      	str	r3, [r7, #8]
}
 800eb14:	bf00      	nop
 800eb16:	e7fe      	b.n	800eb16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eb18:	4b1e      	ldr	r3, [pc, #120]	; (800eb94 <xPortStartScheduler+0x134>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	021b      	lsls	r3, r3, #8
 800eb1e:	4a1d      	ldr	r2, [pc, #116]	; (800eb94 <xPortStartScheduler+0x134>)
 800eb20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eb22:	4b1c      	ldr	r3, [pc, #112]	; (800eb94 <xPortStartScheduler+0x134>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb2a:	4a1a      	ldr	r2, [pc, #104]	; (800eb94 <xPortStartScheduler+0x134>)
 800eb2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	b2da      	uxtb	r2, r3
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eb36:	4b18      	ldr	r3, [pc, #96]	; (800eb98 <xPortStartScheduler+0x138>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	4a17      	ldr	r2, [pc, #92]	; (800eb98 <xPortStartScheduler+0x138>)
 800eb3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eb40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eb42:	4b15      	ldr	r3, [pc, #84]	; (800eb98 <xPortStartScheduler+0x138>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	4a14      	ldr	r2, [pc, #80]	; (800eb98 <xPortStartScheduler+0x138>)
 800eb48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eb4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eb4e:	f000 f8dd 	bl	800ed0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eb52:	4b12      	ldr	r3, [pc, #72]	; (800eb9c <xPortStartScheduler+0x13c>)
 800eb54:	2200      	movs	r2, #0
 800eb56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eb58:	f000 f8fc 	bl	800ed54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800eb5c:	4b10      	ldr	r3, [pc, #64]	; (800eba0 <xPortStartScheduler+0x140>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	4a0f      	ldr	r2, [pc, #60]	; (800eba0 <xPortStartScheduler+0x140>)
 800eb62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800eb66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eb68:	f7ff ff66 	bl	800ea38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eb6c:	f7fe ff7e 	bl	800da6c <vTaskSwitchContext>
	prvTaskExitError();
 800eb70:	f7ff ff20 	bl	800e9b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3718      	adds	r7, #24
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	e000ed00 	.word	0xe000ed00
 800eb84:	410fc271 	.word	0x410fc271
 800eb88:	410fc270 	.word	0x410fc270
 800eb8c:	e000e400 	.word	0xe000e400
 800eb90:	20005690 	.word	0x20005690
 800eb94:	20005694 	.word	0x20005694
 800eb98:	e000ed20 	.word	0xe000ed20
 800eb9c:	200013c4 	.word	0x200013c4
 800eba0:	e000ef34 	.word	0xe000ef34

0800eba4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
	__asm volatile
 800ebaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebae:	f383 8811 	msr	BASEPRI, r3
 800ebb2:	f3bf 8f6f 	isb	sy
 800ebb6:	f3bf 8f4f 	dsb	sy
 800ebba:	607b      	str	r3, [r7, #4]
}
 800ebbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ebbe:	4b0f      	ldr	r3, [pc, #60]	; (800ebfc <vPortEnterCritical+0x58>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	4a0d      	ldr	r2, [pc, #52]	; (800ebfc <vPortEnterCritical+0x58>)
 800ebc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ebc8:	4b0c      	ldr	r3, [pc, #48]	; (800ebfc <vPortEnterCritical+0x58>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	d10f      	bne.n	800ebf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ebd0:	4b0b      	ldr	r3, [pc, #44]	; (800ec00 <vPortEnterCritical+0x5c>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	b2db      	uxtb	r3, r3
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d00a      	beq.n	800ebf0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ebda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebde:	f383 8811 	msr	BASEPRI, r3
 800ebe2:	f3bf 8f6f 	isb	sy
 800ebe6:	f3bf 8f4f 	dsb	sy
 800ebea:	603b      	str	r3, [r7, #0]
}
 800ebec:	bf00      	nop
 800ebee:	e7fe      	b.n	800ebee <vPortEnterCritical+0x4a>
	}
}
 800ebf0:	bf00      	nop
 800ebf2:	370c      	adds	r7, #12
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr
 800ebfc:	200013c4 	.word	0x200013c4
 800ec00:	e000ed04 	.word	0xe000ed04

0800ec04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ec04:	b480      	push	{r7}
 800ec06:	b083      	sub	sp, #12
 800ec08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ec0a:	4b12      	ldr	r3, [pc, #72]	; (800ec54 <vPortExitCritical+0x50>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d10a      	bne.n	800ec28 <vPortExitCritical+0x24>
	__asm volatile
 800ec12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec16:	f383 8811 	msr	BASEPRI, r3
 800ec1a:	f3bf 8f6f 	isb	sy
 800ec1e:	f3bf 8f4f 	dsb	sy
 800ec22:	607b      	str	r3, [r7, #4]
}
 800ec24:	bf00      	nop
 800ec26:	e7fe      	b.n	800ec26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ec28:	4b0a      	ldr	r3, [pc, #40]	; (800ec54 <vPortExitCritical+0x50>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	3b01      	subs	r3, #1
 800ec2e:	4a09      	ldr	r2, [pc, #36]	; (800ec54 <vPortExitCritical+0x50>)
 800ec30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ec32:	4b08      	ldr	r3, [pc, #32]	; (800ec54 <vPortExitCritical+0x50>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d105      	bne.n	800ec46 <vPortExitCritical+0x42>
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	f383 8811 	msr	BASEPRI, r3
}
 800ec44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ec46:	bf00      	nop
 800ec48:	370c      	adds	r7, #12
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec50:	4770      	bx	lr
 800ec52:	bf00      	nop
 800ec54:	200013c4 	.word	0x200013c4
	...

0800ec60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ec60:	f3ef 8009 	mrs	r0, PSP
 800ec64:	f3bf 8f6f 	isb	sy
 800ec68:	4b15      	ldr	r3, [pc, #84]	; (800ecc0 <pxCurrentTCBConst>)
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	f01e 0f10 	tst.w	lr, #16
 800ec70:	bf08      	it	eq
 800ec72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ec76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec7a:	6010      	str	r0, [r2, #0]
 800ec7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ec80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ec84:	f380 8811 	msr	BASEPRI, r0
 800ec88:	f3bf 8f4f 	dsb	sy
 800ec8c:	f3bf 8f6f 	isb	sy
 800ec90:	f7fe feec 	bl	800da6c <vTaskSwitchContext>
 800ec94:	f04f 0000 	mov.w	r0, #0
 800ec98:	f380 8811 	msr	BASEPRI, r0
 800ec9c:	bc09      	pop	{r0, r3}
 800ec9e:	6819      	ldr	r1, [r3, #0]
 800eca0:	6808      	ldr	r0, [r1, #0]
 800eca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca6:	f01e 0f10 	tst.w	lr, #16
 800ecaa:	bf08      	it	eq
 800ecac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ecb0:	f380 8809 	msr	PSP, r0
 800ecb4:	f3bf 8f6f 	isb	sy
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop
 800ecbc:	f3af 8000 	nop.w

0800ecc0 <pxCurrentTCBConst>:
 800ecc0:	20005064 	.word	0x20005064
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ecc4:	bf00      	nop
 800ecc6:	bf00      	nop

0800ecc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
	__asm volatile
 800ecce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd2:	f383 8811 	msr	BASEPRI, r3
 800ecd6:	f3bf 8f6f 	isb	sy
 800ecda:	f3bf 8f4f 	dsb	sy
 800ecde:	607b      	str	r3, [r7, #4]
}
 800ece0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ece2:	f7fe fe09 	bl	800d8f8 <xTaskIncrementTick>
 800ece6:	4603      	mov	r3, r0
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d003      	beq.n	800ecf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ecec:	4b06      	ldr	r3, [pc, #24]	; (800ed08 <xPortSysTickHandler+0x40>)
 800ecee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecf2:	601a      	str	r2, [r3, #0]
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	f383 8811 	msr	BASEPRI, r3
}
 800ecfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ed00:	bf00      	nop
 800ed02:	3708      	adds	r7, #8
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}
 800ed08:	e000ed04 	.word	0xe000ed04

0800ed0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ed10:	4b0b      	ldr	r3, [pc, #44]	; (800ed40 <vPortSetupTimerInterrupt+0x34>)
 800ed12:	2200      	movs	r2, #0
 800ed14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ed16:	4b0b      	ldr	r3, [pc, #44]	; (800ed44 <vPortSetupTimerInterrupt+0x38>)
 800ed18:	2200      	movs	r2, #0
 800ed1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ed1c:	4b0a      	ldr	r3, [pc, #40]	; (800ed48 <vPortSetupTimerInterrupt+0x3c>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a0a      	ldr	r2, [pc, #40]	; (800ed4c <vPortSetupTimerInterrupt+0x40>)
 800ed22:	fba2 2303 	umull	r2, r3, r2, r3
 800ed26:	099b      	lsrs	r3, r3, #6
 800ed28:	4a09      	ldr	r2, [pc, #36]	; (800ed50 <vPortSetupTimerInterrupt+0x44>)
 800ed2a:	3b01      	subs	r3, #1
 800ed2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ed2e:	4b04      	ldr	r3, [pc, #16]	; (800ed40 <vPortSetupTimerInterrupt+0x34>)
 800ed30:	2207      	movs	r2, #7
 800ed32:	601a      	str	r2, [r3, #0]
}
 800ed34:	bf00      	nop
 800ed36:	46bd      	mov	sp, r7
 800ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3c:	4770      	bx	lr
 800ed3e:	bf00      	nop
 800ed40:	e000e010 	.word	0xe000e010
 800ed44:	e000e018 	.word	0xe000e018
 800ed48:	20001228 	.word	0x20001228
 800ed4c:	10624dd3 	.word	0x10624dd3
 800ed50:	e000e014 	.word	0xe000e014

0800ed54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ed54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ed64 <vPortEnableVFP+0x10>
 800ed58:	6801      	ldr	r1, [r0, #0]
 800ed5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ed5e:	6001      	str	r1, [r0, #0]
 800ed60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ed62:	bf00      	nop
 800ed64:	e000ed88 	.word	0xe000ed88

0800ed68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ed68:	b480      	push	{r7}
 800ed6a:	b085      	sub	sp, #20
 800ed6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ed6e:	f3ef 8305 	mrs	r3, IPSR
 800ed72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2b0f      	cmp	r3, #15
 800ed78:	d914      	bls.n	800eda4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ed7a:	4a17      	ldr	r2, [pc, #92]	; (800edd8 <vPortValidateInterruptPriority+0x70>)
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	4413      	add	r3, r2
 800ed80:	781b      	ldrb	r3, [r3, #0]
 800ed82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ed84:	4b15      	ldr	r3, [pc, #84]	; (800eddc <vPortValidateInterruptPriority+0x74>)
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	7afa      	ldrb	r2, [r7, #11]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d20a      	bcs.n	800eda4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ed8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed92:	f383 8811 	msr	BASEPRI, r3
 800ed96:	f3bf 8f6f 	isb	sy
 800ed9a:	f3bf 8f4f 	dsb	sy
 800ed9e:	607b      	str	r3, [r7, #4]
}
 800eda0:	bf00      	nop
 800eda2:	e7fe      	b.n	800eda2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eda4:	4b0e      	ldr	r3, [pc, #56]	; (800ede0 <vPortValidateInterruptPriority+0x78>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800edac:	4b0d      	ldr	r3, [pc, #52]	; (800ede4 <vPortValidateInterruptPriority+0x7c>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d90a      	bls.n	800edca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800edb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb8:	f383 8811 	msr	BASEPRI, r3
 800edbc:	f3bf 8f6f 	isb	sy
 800edc0:	f3bf 8f4f 	dsb	sy
 800edc4:	603b      	str	r3, [r7, #0]
}
 800edc6:	bf00      	nop
 800edc8:	e7fe      	b.n	800edc8 <vPortValidateInterruptPriority+0x60>
	}
 800edca:	bf00      	nop
 800edcc:	3714      	adds	r7, #20
 800edce:	46bd      	mov	sp, r7
 800edd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd4:	4770      	bx	lr
 800edd6:	bf00      	nop
 800edd8:	e000e3f0 	.word	0xe000e3f0
 800eddc:	20005690 	.word	0x20005690
 800ede0:	e000ed0c 	.word	0xe000ed0c
 800ede4:	20005694 	.word	0x20005694

0800ede8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b08a      	sub	sp, #40	; 0x28
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800edf0:	2300      	movs	r3, #0
 800edf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800edf4:	f7fe fcc4 	bl	800d780 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800edf8:	4b5b      	ldr	r3, [pc, #364]	; (800ef68 <pvPortMalloc+0x180>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d101      	bne.n	800ee04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ee00:	f000 f920 	bl	800f044 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ee04:	4b59      	ldr	r3, [pc, #356]	; (800ef6c <pvPortMalloc+0x184>)
 800ee06:	681a      	ldr	r2, [r3, #0]
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	4013      	ands	r3, r2
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	f040 8093 	bne.w	800ef38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d01d      	beq.n	800ee54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ee18:	2208      	movs	r2, #8
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	4413      	add	r3, r2
 800ee1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f003 0307 	and.w	r3, r3, #7
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d014      	beq.n	800ee54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f023 0307 	bic.w	r3, r3, #7
 800ee30:	3308      	adds	r3, #8
 800ee32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f003 0307 	and.w	r3, r3, #7
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d00a      	beq.n	800ee54 <pvPortMalloc+0x6c>
	__asm volatile
 800ee3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee42:	f383 8811 	msr	BASEPRI, r3
 800ee46:	f3bf 8f6f 	isb	sy
 800ee4a:	f3bf 8f4f 	dsb	sy
 800ee4e:	617b      	str	r3, [r7, #20]
}
 800ee50:	bf00      	nop
 800ee52:	e7fe      	b.n	800ee52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d06e      	beq.n	800ef38 <pvPortMalloc+0x150>
 800ee5a:	4b45      	ldr	r3, [pc, #276]	; (800ef70 <pvPortMalloc+0x188>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	687a      	ldr	r2, [r7, #4]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d869      	bhi.n	800ef38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ee64:	4b43      	ldr	r3, [pc, #268]	; (800ef74 <pvPortMalloc+0x18c>)
 800ee66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ee68:	4b42      	ldr	r3, [pc, #264]	; (800ef74 <pvPortMalloc+0x18c>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ee6e:	e004      	b.n	800ee7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ee70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ee74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ee7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee7c:	685b      	ldr	r3, [r3, #4]
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d903      	bls.n	800ee8c <pvPortMalloc+0xa4>
 800ee84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d1f1      	bne.n	800ee70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ee8c:	4b36      	ldr	r3, [pc, #216]	; (800ef68 <pvPortMalloc+0x180>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d050      	beq.n	800ef38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ee96:	6a3b      	ldr	r3, [r7, #32]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	2208      	movs	r2, #8
 800ee9c:	4413      	add	r3, r2
 800ee9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea2:	681a      	ldr	r2, [r3, #0]
 800eea4:	6a3b      	ldr	r3, [r7, #32]
 800eea6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeaa:	685a      	ldr	r2, [r3, #4]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	1ad2      	subs	r2, r2, r3
 800eeb0:	2308      	movs	r3, #8
 800eeb2:	005b      	lsls	r3, r3, #1
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d91f      	bls.n	800eef8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eeb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	4413      	add	r3, r2
 800eebe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eec0:	69bb      	ldr	r3, [r7, #24]
 800eec2:	f003 0307 	and.w	r3, r3, #7
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d00a      	beq.n	800eee0 <pvPortMalloc+0xf8>
	__asm volatile
 800eeca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eece:	f383 8811 	msr	BASEPRI, r3
 800eed2:	f3bf 8f6f 	isb	sy
 800eed6:	f3bf 8f4f 	dsb	sy
 800eeda:	613b      	str	r3, [r7, #16]
}
 800eedc:	bf00      	nop
 800eede:	e7fe      	b.n	800eede <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee2:	685a      	ldr	r2, [r3, #4]
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	1ad2      	subs	r2, r2, r3
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eef2:	69b8      	ldr	r0, [r7, #24]
 800eef4:	f000 f908 	bl	800f108 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eef8:	4b1d      	ldr	r3, [pc, #116]	; (800ef70 <pvPortMalloc+0x188>)
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	1ad3      	subs	r3, r2, r3
 800ef02:	4a1b      	ldr	r2, [pc, #108]	; (800ef70 <pvPortMalloc+0x188>)
 800ef04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ef06:	4b1a      	ldr	r3, [pc, #104]	; (800ef70 <pvPortMalloc+0x188>)
 800ef08:	681a      	ldr	r2, [r3, #0]
 800ef0a:	4b1b      	ldr	r3, [pc, #108]	; (800ef78 <pvPortMalloc+0x190>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d203      	bcs.n	800ef1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ef12:	4b17      	ldr	r3, [pc, #92]	; (800ef70 <pvPortMalloc+0x188>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4a18      	ldr	r2, [pc, #96]	; (800ef78 <pvPortMalloc+0x190>)
 800ef18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ef1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1c:	685a      	ldr	r2, [r3, #4]
 800ef1e:	4b13      	ldr	r3, [pc, #76]	; (800ef6c <pvPortMalloc+0x184>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	431a      	orrs	r2, r3
 800ef24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ef28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ef2e:	4b13      	ldr	r3, [pc, #76]	; (800ef7c <pvPortMalloc+0x194>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	3301      	adds	r3, #1
 800ef34:	4a11      	ldr	r2, [pc, #68]	; (800ef7c <pvPortMalloc+0x194>)
 800ef36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ef38:	f7fe fc30 	bl	800d79c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef3c:	69fb      	ldr	r3, [r7, #28]
 800ef3e:	f003 0307 	and.w	r3, r3, #7
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d00a      	beq.n	800ef5c <pvPortMalloc+0x174>
	__asm volatile
 800ef46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef4a:	f383 8811 	msr	BASEPRI, r3
 800ef4e:	f3bf 8f6f 	isb	sy
 800ef52:	f3bf 8f4f 	dsb	sy
 800ef56:	60fb      	str	r3, [r7, #12]
}
 800ef58:	bf00      	nop
 800ef5a:	e7fe      	b.n	800ef5a <pvPortMalloc+0x172>
	return pvReturn;
 800ef5c:	69fb      	ldr	r3, [r7, #28]
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3728      	adds	r7, #40	; 0x28
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	200092a0 	.word	0x200092a0
 800ef6c:	200092b4 	.word	0x200092b4
 800ef70:	200092a4 	.word	0x200092a4
 800ef74:	20009298 	.word	0x20009298
 800ef78:	200092a8 	.word	0x200092a8
 800ef7c:	200092ac 	.word	0x200092ac

0800ef80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b086      	sub	sp, #24
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d04d      	beq.n	800f02e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ef92:	2308      	movs	r3, #8
 800ef94:	425b      	negs	r3, r3
 800ef96:	697a      	ldr	r2, [r7, #20]
 800ef98:	4413      	add	r3, r2
 800ef9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	685a      	ldr	r2, [r3, #4]
 800efa4:	4b24      	ldr	r3, [pc, #144]	; (800f038 <vPortFree+0xb8>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	4013      	ands	r3, r2
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d10a      	bne.n	800efc4 <vPortFree+0x44>
	__asm volatile
 800efae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb2:	f383 8811 	msr	BASEPRI, r3
 800efb6:	f3bf 8f6f 	isb	sy
 800efba:	f3bf 8f4f 	dsb	sy
 800efbe:	60fb      	str	r3, [r7, #12]
}
 800efc0:	bf00      	nop
 800efc2:	e7fe      	b.n	800efc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d00a      	beq.n	800efe2 <vPortFree+0x62>
	__asm volatile
 800efcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd0:	f383 8811 	msr	BASEPRI, r3
 800efd4:	f3bf 8f6f 	isb	sy
 800efd8:	f3bf 8f4f 	dsb	sy
 800efdc:	60bb      	str	r3, [r7, #8]
}
 800efde:	bf00      	nop
 800efe0:	e7fe      	b.n	800efe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	685a      	ldr	r2, [r3, #4]
 800efe6:	4b14      	ldr	r3, [pc, #80]	; (800f038 <vPortFree+0xb8>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	4013      	ands	r3, r2
 800efec:	2b00      	cmp	r3, #0
 800efee:	d01e      	beq.n	800f02e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d11a      	bne.n	800f02e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	685a      	ldr	r2, [r3, #4]
 800effc:	4b0e      	ldr	r3, [pc, #56]	; (800f038 <vPortFree+0xb8>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	43db      	mvns	r3, r3
 800f002:	401a      	ands	r2, r3
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f008:	f7fe fbba 	bl	800d780 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	685a      	ldr	r2, [r3, #4]
 800f010:	4b0a      	ldr	r3, [pc, #40]	; (800f03c <vPortFree+0xbc>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	4413      	add	r3, r2
 800f016:	4a09      	ldr	r2, [pc, #36]	; (800f03c <vPortFree+0xbc>)
 800f018:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f01a:	6938      	ldr	r0, [r7, #16]
 800f01c:	f000 f874 	bl	800f108 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f020:	4b07      	ldr	r3, [pc, #28]	; (800f040 <vPortFree+0xc0>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	3301      	adds	r3, #1
 800f026:	4a06      	ldr	r2, [pc, #24]	; (800f040 <vPortFree+0xc0>)
 800f028:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f02a:	f7fe fbb7 	bl	800d79c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f02e:	bf00      	nop
 800f030:	3718      	adds	r7, #24
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
 800f036:	bf00      	nop
 800f038:	200092b4 	.word	0x200092b4
 800f03c:	200092a4 	.word	0x200092a4
 800f040:	200092b0 	.word	0x200092b0

0800f044 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f044:	b480      	push	{r7}
 800f046:	b085      	sub	sp, #20
 800f048:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f04a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f04e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f050:	4b27      	ldr	r3, [pc, #156]	; (800f0f0 <prvHeapInit+0xac>)
 800f052:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f003 0307 	and.w	r3, r3, #7
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d00c      	beq.n	800f078 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	3307      	adds	r3, #7
 800f062:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f023 0307 	bic.w	r3, r3, #7
 800f06a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f06c:	68ba      	ldr	r2, [r7, #8]
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	1ad3      	subs	r3, r2, r3
 800f072:	4a1f      	ldr	r2, [pc, #124]	; (800f0f0 <prvHeapInit+0xac>)
 800f074:	4413      	add	r3, r2
 800f076:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f07c:	4a1d      	ldr	r2, [pc, #116]	; (800f0f4 <prvHeapInit+0xb0>)
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f082:	4b1c      	ldr	r3, [pc, #112]	; (800f0f4 <prvHeapInit+0xb0>)
 800f084:	2200      	movs	r2, #0
 800f086:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	68ba      	ldr	r2, [r7, #8]
 800f08c:	4413      	add	r3, r2
 800f08e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f090:	2208      	movs	r2, #8
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	1a9b      	subs	r3, r3, r2
 800f096:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f023 0307 	bic.w	r3, r3, #7
 800f09e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	4a15      	ldr	r2, [pc, #84]	; (800f0f8 <prvHeapInit+0xb4>)
 800f0a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f0a6:	4b14      	ldr	r3, [pc, #80]	; (800f0f8 <prvHeapInit+0xb4>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f0ae:	4b12      	ldr	r3, [pc, #72]	; (800f0f8 <prvHeapInit+0xb4>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	68fa      	ldr	r2, [r7, #12]
 800f0be:	1ad2      	subs	r2, r2, r3
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f0c4:	4b0c      	ldr	r3, [pc, #48]	; (800f0f8 <prvHeapInit+0xb4>)
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	685b      	ldr	r3, [r3, #4]
 800f0d0:	4a0a      	ldr	r2, [pc, #40]	; (800f0fc <prvHeapInit+0xb8>)
 800f0d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	4a09      	ldr	r2, [pc, #36]	; (800f100 <prvHeapInit+0xbc>)
 800f0da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f0dc:	4b09      	ldr	r3, [pc, #36]	; (800f104 <prvHeapInit+0xc0>)
 800f0de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f0e2:	601a      	str	r2, [r3, #0]
}
 800f0e4:	bf00      	nop
 800f0e6:	3714      	adds	r7, #20
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr
 800f0f0:	20005698 	.word	0x20005698
 800f0f4:	20009298 	.word	0x20009298
 800f0f8:	200092a0 	.word	0x200092a0
 800f0fc:	200092a8 	.word	0x200092a8
 800f100:	200092a4 	.word	0x200092a4
 800f104:	200092b4 	.word	0x200092b4

0800f108 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f108:	b480      	push	{r7}
 800f10a:	b085      	sub	sp, #20
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f110:	4b28      	ldr	r3, [pc, #160]	; (800f1b4 <prvInsertBlockIntoFreeList+0xac>)
 800f112:	60fb      	str	r3, [r7, #12]
 800f114:	e002      	b.n	800f11c <prvInsertBlockIntoFreeList+0x14>
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	60fb      	str	r3, [r7, #12]
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	429a      	cmp	r2, r3
 800f124:	d8f7      	bhi.n	800f116 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	68ba      	ldr	r2, [r7, #8]
 800f130:	4413      	add	r3, r2
 800f132:	687a      	ldr	r2, [r7, #4]
 800f134:	429a      	cmp	r2, r3
 800f136:	d108      	bne.n	800f14a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	685a      	ldr	r2, [r3, #4]
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	441a      	add	r2, r3
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	685b      	ldr	r3, [r3, #4]
 800f152:	68ba      	ldr	r2, [r7, #8]
 800f154:	441a      	add	r2, r3
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d118      	bne.n	800f190 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681a      	ldr	r2, [r3, #0]
 800f162:	4b15      	ldr	r3, [pc, #84]	; (800f1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	429a      	cmp	r2, r3
 800f168:	d00d      	beq.n	800f186 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	685a      	ldr	r2, [r3, #4]
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	441a      	add	r2, r3
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	681a      	ldr	r2, [r3, #0]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	601a      	str	r2, [r3, #0]
 800f184:	e008      	b.n	800f198 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f186:	4b0c      	ldr	r3, [pc, #48]	; (800f1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800f188:	681a      	ldr	r2, [r3, #0]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	601a      	str	r2, [r3, #0]
 800f18e:	e003      	b.n	800f198 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	681a      	ldr	r2, [r3, #0]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f198:	68fa      	ldr	r2, [r7, #12]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d002      	beq.n	800f1a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	687a      	ldr	r2, [r7, #4]
 800f1a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f1a6:	bf00      	nop
 800f1a8:	3714      	adds	r7, #20
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr
 800f1b2:	bf00      	nop
 800f1b4:	20009298 	.word	0x20009298
 800f1b8:	200092a0 	.word	0x200092a0

0800f1bc <compass_init>:
static MMC_Output_t data_out;



void compass_init(void)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b082      	sub	sp, #8
 800f1c0:	af00      	add	r7, sp, #0
	float_t freq = SAMPLE_FREQ;
 800f1c2:	4b2b      	ldr	r3, [pc, #172]	; (800f270 <compass_init+0xb4>)
 800f1c4:	603b      	str	r3, [r7, #0]

	MEC_state_t orientation = MEC_ENABLE;
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	71fb      	strb	r3, [r7, #7]
	MEC_state_t virtGyro = MEC_DISABLE;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	71bb      	strb	r3, [r7, #6]
	MEC_state_t gravity = MEC_DISABLE;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	717b      	strb	r3, [r7, #5]
	MEC_state_t linearAcc = MEC_ENABLE;
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	713b      	strb	r3, [r7, #4]


	/* E-Compass API initialization function */
	MotionEC_Initialize(&freq);
 800f1d6:	463b      	mov	r3, r7
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f000 fdb9 	bl	800fd50 <MotionEC_Initialize>
	MotionGC_Initialize(&freq);
 800f1de:	463b      	mov	r3, r7
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f001 fb5b 	bl	801089c <MotionGC_Initialize>
	MotionAC_Initialize(1);
 800f1e6:	2001      	movs	r0, #1
 800f1e8:	f001 fa62 	bl	80106b0 <MotionAC_Initialize>

	MotionMC_Initialize(100,1);
 800f1ec:	2101      	movs	r1, #1
 800f1ee:	2064      	movs	r0, #100	; 0x64
 800f1f0:	f006 fdd2 	bl	8015d98 <MotionMC_Initialize>
	MotionFX_initialize();
 800f1f4:	f007 fc44 	bl	8016a80 <MotionFX_initialize>
	/* Optional: Get version */
	MotionEC_GetLibVersion(lib_version_ec);
 800f1f8:	481e      	ldr	r0, [pc, #120]	; (800f274 <compass_init+0xb8>)
 800f1fa:	f001 fa35 	bl	8010668 <MotionEC_GetLibVersion>
	MotionAC_GetLibVersion(lib_version_ac);
 800f1fe:	481e      	ldr	r0, [pc, #120]	; (800f278 <compass_init+0xbc>)
 800f200:	f001 fb28 	bl	8010854 <MotionAC_GetLibVersion>
	MotionGC_GetLibVersion(lib_version_gc);
 800f204:	481d      	ldr	r0, [pc, #116]	; (800f27c <compass_init+0xc0>)
 800f206:	f001 fbd7 	bl	80109b8 <MotionGC_GetLibVersion>
	MotionMC_GetLibVersion(lib_version_mc);
 800f20a:	481d      	ldr	r0, [pc, #116]	; (800f280 <compass_init+0xc4>)
 800f20c:	f007 f852 	bl	80162b4 <MotionMC_GetLibVersion>
	MotionFX_GetLibVersion(lib_version_fx);
 800f210:	481c      	ldr	r0, [pc, #112]	; (800f284 <compass_init+0xc8>)
 800f212:	f007 fe97 	bl	8016f44 <MotionFX_GetLibVersion>

	printf("\n\r%s",lib_version_ec);
 800f216:	4917      	ldr	r1, [pc, #92]	; (800f274 <compass_init+0xb8>)
 800f218:	481b      	ldr	r0, [pc, #108]	; (800f288 <compass_init+0xcc>)
 800f21a:	f008 fb63 	bl	80178e4 <iprintf>
	printf("\n\r%s",lib_version_ac);
 800f21e:	4916      	ldr	r1, [pc, #88]	; (800f278 <compass_init+0xbc>)
 800f220:	4819      	ldr	r0, [pc, #100]	; (800f288 <compass_init+0xcc>)
 800f222:	f008 fb5f 	bl	80178e4 <iprintf>
	printf("\n\r%s",lib_version_gc);
 800f226:	4915      	ldr	r1, [pc, #84]	; (800f27c <compass_init+0xc0>)
 800f228:	4817      	ldr	r0, [pc, #92]	; (800f288 <compass_init+0xcc>)
 800f22a:	f008 fb5b 	bl	80178e4 <iprintf>
	printf("\n\r%s",lib_version_mc);
 800f22e:	4914      	ldr	r1, [pc, #80]	; (800f280 <compass_init+0xc4>)
 800f230:	4815      	ldr	r0, [pc, #84]	; (800f288 <compass_init+0xcc>)
 800f232:	f008 fb57 	bl	80178e4 <iprintf>
	printf("\n\r%s",lib_version_fx);
 800f236:	4913      	ldr	r1, [pc, #76]	; (800f284 <compass_init+0xc8>)
 800f238:	4813      	ldr	r0, [pc, #76]	; (800f288 <compass_init+0xcc>)
 800f23a:	f008 fb53 	bl	80178e4 <iprintf>

	MotionEC_SetOrientationEnable(orientation);
 800f23e:	79fb      	ldrb	r3, [r7, #7]
 800f240:	4618      	mov	r0, r3
 800f242:	f001 f9d9 	bl	80105f8 <MotionEC_SetOrientationEnable>
	MotionEC_SetVirtualGyroEnable(virtGyro);
 800f246:	79bb      	ldrb	r3, [r7, #6]
 800f248:	4618      	mov	r0, r3
 800f24a:	f001 f9e5 	bl	8010618 <MotionEC_SetVirtualGyroEnable>
	MotionEC_SetGravityEnable(gravity);
 800f24e:	797b      	ldrb	r3, [r7, #5]
 800f250:	4618      	mov	r0, r3
 800f252:	f001 f9f1 	bl	8010638 <MotionEC_SetGravityEnable>
	MotionEC_SetLinearAccEnable(linearAcc);
 800f256:	793b      	ldrb	r3, [r7, #4]
 800f258:	4618      	mov	r0, r3
 800f25a:	f001 f9fd 	bl	8010658 <MotionEC_SetLinearAccEnable>

	data_out.CalQuality = MMC_CALQSTATUSGOOD;
 800f25e:	4b0b      	ldr	r3, [pc, #44]	; (800f28c <compass_init+0xd0>)
 800f260:	2203      	movs	r2, #3
 800f262:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

}
 800f266:	bf00      	nop
 800f268:	3708      	adds	r7, #8
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}
 800f26e:	bf00      	nop
 800f270:	41200000 	.word	0x41200000
 800f274:	200092b8 	.word	0x200092b8
 800f278:	200092dc 	.word	0x200092dc
 800f27c:	20009324 	.word	0x20009324
 800f280:	20009348 	.word	0x20009348
 800f284:	20009300 	.word	0x20009300
 800f288:	0801c94c 	.word	0x0801c94c
 800f28c:	2000936c 	.word	0x2000936c

0800f290 <setEcParameter>:

static void setEcParameter(POS_MOTION_SENSOR_Axes_t *acc, POS_MOTION_SENSOR_Axes_t *mag, MEC_input_t *in, float timeS)
{
 800f290:	b480      	push	{r7}
 800f292:	b085      	sub	sp, #20
 800f294:	af00      	add	r7, sp, #0
 800f296:	60f8      	str	r0, [r7, #12]
 800f298:	60b9      	str	r1, [r7, #8]
 800f29a:	607a      	str	r2, [r7, #4]
 800f29c:	ed87 0a00 	vstr	s0, [r7]
	in->acc[0] = (float)((float)acc->x) / 1000;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	ee07 3a90 	vmov	s15, r3
 800f2a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f2ac:	eddf 6a28 	vldr	s13, [pc, #160]	; 800f350 <setEcParameter+0xc0>
 800f2b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	edc3 7a00 	vstr	s15, [r3]
	in->acc[1] = (float)acc->y / 1000;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	ee07 3a90 	vmov	s15, r3
 800f2c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f2c6:	eddf 6a22 	vldr	s13, [pc, #136]	; 800f350 <setEcParameter+0xc0>
 800f2ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	edc3 7a01 	vstr	s15, [r3, #4]
	in->acc[2] = (float)acc->z / 1000;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	689b      	ldr	r3, [r3, #8]
 800f2d8:	ee07 3a90 	vmov	s15, r3
 800f2dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f2e0:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800f350 <setEcParameter+0xc0>
 800f2e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	edc3 7a02 	vstr	s15, [r3, #8]

	in->mag[0] = (float)mag->x / 50;
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	ee07 3a90 	vmov	s15, r3
 800f2f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f2fa:	eddf 6a16 	vldr	s13, [pc, #88]	; 800f354 <setEcParameter+0xc4>
 800f2fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	edc3 7a03 	vstr	s15, [r3, #12]
	in->mag[1] = (float)mag->y / 50;
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	685b      	ldr	r3, [r3, #4]
 800f30c:	ee07 3a90 	vmov	s15, r3
 800f310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f314:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800f354 <setEcParameter+0xc4>
 800f318:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	edc3 7a04 	vstr	s15, [r3, #16]
	in->mag[2] = (float)mag->z / 50;
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	689b      	ldr	r3, [r3, #8]
 800f326:	ee07 3a90 	vmov	s15, r3
 800f32a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f32e:	eddf 6a09 	vldr	s13, [pc, #36]	; 800f354 <setEcParameter+0xc4>
 800f332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	edc3 7a05 	vstr	s15, [r3, #20]

	in->deltatime_s = timeS;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	683a      	ldr	r2, [r7, #0]
 800f340:	619a      	str	r2, [r3, #24]
}
 800f342:	bf00      	nop
 800f344:	3714      	adds	r7, #20
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	447a0000 	.word	0x447a0000
 800f354:	42480000 	.word	0x42480000

0800f358 <sensorCompensation>:

//	POS_MOTION_SENSOR_GetAxes(MAG_LIS2MDL, &MagAxes);


static void sensorCompensation(POS_MOTION_SENSORS no,POS_MOTION_SENSOR_Axes_t *ax)
{
 800f358:	b4b0      	push	{r4, r5, r7}
 800f35a:	b09f      	sub	sp, #124	; 0x7c
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	4603      	mov	r3, r0
 800f360:	6039      	str	r1, [r7, #0]
 800f362:	71fb      	strb	r3, [r7, #7]
	const POS_MOTION_SENSOR_Axes_t max[POS_MOTION_SENSORS_MAX] = {
 800f364:	4b3c      	ldr	r3, [pc, #240]	; (800f458 <sensorCompensation+0x100>)
 800f366:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800f36a:	461d      	mov	r5, r3
 800f36c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f36e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f374:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f378:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{992	,995	,1018},	//ACC_LSM6DSO = 0,
	{0	,0	,0},	//GYR_LSM6DSO,
	{0	,0	,0},	//MAG_LIS2MDL,
	{1008	,942	,1012}	//ACC_LIS2DW12,
	};
	const POS_MOTION_SENSOR_Axes_t min[POS_MOTION_SENSORS_MAX] = {
 800f37c:	4b37      	ldr	r3, [pc, #220]	; (800f45c <sensorCompensation+0x104>)
 800f37e:	f107 0418 	add.w	r4, r7, #24
 800f382:	461d      	mov	r5, r3
 800f384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f38a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f38c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{0	,0	,0},	//MAG_LIS2MDL,
	{-1005	,-1042	,-995}	//ACC_LIS2DW12,
	};
	POS_MOTION_SENSOR_Axes_t offset;

	offset.x = (max[no].x + min[no].x) / 2;
 800f394:	79fa      	ldrb	r2, [r7, #7]
 800f396:	4613      	mov	r3, r2
 800f398:	005b      	lsls	r3, r3, #1
 800f39a:	4413      	add	r3, r2
 800f39c:	009b      	lsls	r3, r3, #2
 800f39e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800f3a2:	4413      	add	r3, r2
 800f3a4:	3b30      	subs	r3, #48	; 0x30
 800f3a6:	6819      	ldr	r1, [r3, #0]
 800f3a8:	79fa      	ldrb	r2, [r7, #7]
 800f3aa:	4613      	mov	r3, r2
 800f3ac:	005b      	lsls	r3, r3, #1
 800f3ae:	4413      	add	r3, r2
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800f3b6:	4413      	add	r3, r2
 800f3b8:	3b60      	subs	r3, #96	; 0x60
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	440b      	add	r3, r1
 800f3be:	0fda      	lsrs	r2, r3, #31
 800f3c0:	4413      	add	r3, r2
 800f3c2:	105b      	asrs	r3, r3, #1
 800f3c4:	60fb      	str	r3, [r7, #12]
	offset.y = (max[no].y + min[no].y) / 2;
 800f3c6:	79fa      	ldrb	r2, [r7, #7]
 800f3c8:	4613      	mov	r3, r2
 800f3ca:	005b      	lsls	r3, r3, #1
 800f3cc:	4413      	add	r3, r2
 800f3ce:	009b      	lsls	r3, r3, #2
 800f3d0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800f3d4:	4413      	add	r3, r2
 800f3d6:	3b2c      	subs	r3, #44	; 0x2c
 800f3d8:	6819      	ldr	r1, [r3, #0]
 800f3da:	79fa      	ldrb	r2, [r7, #7]
 800f3dc:	4613      	mov	r3, r2
 800f3de:	005b      	lsls	r3, r3, #1
 800f3e0:	4413      	add	r3, r2
 800f3e2:	009b      	lsls	r3, r3, #2
 800f3e4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800f3e8:	4413      	add	r3, r2
 800f3ea:	3b5c      	subs	r3, #92	; 0x5c
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	440b      	add	r3, r1
 800f3f0:	0fda      	lsrs	r2, r3, #31
 800f3f2:	4413      	add	r3, r2
 800f3f4:	105b      	asrs	r3, r3, #1
 800f3f6:	613b      	str	r3, [r7, #16]
	offset.z = (max[no].z + min[no].z) / 2;
 800f3f8:	79fa      	ldrb	r2, [r7, #7]
 800f3fa:	4613      	mov	r3, r2
 800f3fc:	005b      	lsls	r3, r3, #1
 800f3fe:	4413      	add	r3, r2
 800f400:	009b      	lsls	r3, r3, #2
 800f402:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800f406:	4413      	add	r3, r2
 800f408:	3b28      	subs	r3, #40	; 0x28
 800f40a:	6819      	ldr	r1, [r3, #0]
 800f40c:	79fa      	ldrb	r2, [r7, #7]
 800f40e:	4613      	mov	r3, r2
 800f410:	005b      	lsls	r3, r3, #1
 800f412:	4413      	add	r3, r2
 800f414:	009b      	lsls	r3, r3, #2
 800f416:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800f41a:	4413      	add	r3, r2
 800f41c:	3b58      	subs	r3, #88	; 0x58
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	440b      	add	r3, r1
 800f422:	0fda      	lsrs	r2, r3, #31
 800f424:	4413      	add	r3, r2
 800f426:	105b      	asrs	r3, r3, #1
 800f428:	617b      	str	r3, [r7, #20]
	ax->x -= offset.x;
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	1ad2      	subs	r2, r2, r3
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	601a      	str	r2, [r3, #0]
	ax->y -= offset.y;
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	685a      	ldr	r2, [r3, #4]
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	1ad2      	subs	r2, r2, r3
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	605a      	str	r2, [r3, #4]
	ax->z -= offset.z;
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	689a      	ldr	r2, [r3, #8]
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	1ad2      	subs	r2, r2, r3
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	609a      	str	r2, [r3, #8]
}
 800f44e:	bf00      	nop
 800f450:	377c      	adds	r7, #124	; 0x7c
 800f452:	46bd      	mov	sp, r7
 800f454:	bcb0      	pop	{r4, r5, r7}
 800f456:	4770      	bx	lr
 800f458:	0801c954 	.word	0x0801c954
 800f45c:	0801c984 	.word	0x0801c984

0800f460 <GetCalibratedMagAxses>:

static int32_t GetCalibratedMagAxses(POS_MOTION_SENSORS sensor, POS_MOTION_SENSOR_Axes_t *Axes, int timeMs)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b08c      	sub	sp, #48	; 0x30
 800f464:	af00      	add	r7, sp, #0
 800f466:	4603      	mov	r3, r0
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	607a      	str	r2, [r7, #4]
 800f46c:	73fb      	strb	r3, [r7, #15]
	float mag_cal_x, mag_cal_y, mag_cal_z;

	static int32_t test = 0;

	/* Get magnetic field X/Y/Z in [uT] */
	ret = POS_MOTION_SENSOR_GetAxes(sensor, Axes);
 800f46e:	7bfb      	ldrb	r3, [r7, #15]
 800f470:	68b9      	ldr	r1, [r7, #8]
 800f472:	4618      	mov	r0, r3
 800f474:	f000 fa48 	bl	800f908 <POS_MOTION_SENSOR_GetAxes>
 800f478:	62f8      	str	r0, [r7, #44]	; 0x2c

	//MEMS_Read_MagValue(&data_in.Mag[0], &data_in.Mag[1], &data_in.Mag[2]);
	data_in.Mag[0] = Axes->x;
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	ee07 3a90 	vmov	s15, r3
 800f482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f486:	edc7 7a04 	vstr	s15, [r7, #16]
	data_in.Mag[1] = Axes->y;
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	685b      	ldr	r3, [r3, #4]
 800f48e:	ee07 3a90 	vmov	s15, r3
 800f492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f496:	edc7 7a05 	vstr	s15, [r7, #20]
	data_in.Mag[2] = Axes->z;
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	689b      	ldr	r3, [r3, #8]
 800f49e:	ee07 3a90 	vmov	s15, r3
 800f4a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4a6:	edc7 7a06 	vstr	s15, [r7, #24]
	/* Get current sample time in [ms] */
	data_in.TimeStamp = timeMs;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	61fb      	str	r3, [r7, #28]
	/* Magnetometer calibration algorithm update */
	MotionMC_Update(&data_in);
 800f4ae:	f107 0310 	add.w	r3, r7, #16
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f006 fdba 	bl	801602c <MotionMC_Update>
	/* Get the magnetometer calibration coefficients */
	MotionMC_GetCalParams(&data_out);
 800f4b8:	484d      	ldr	r0, [pc, #308]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f4ba:	f006 fea9 	bl	8016210 <MotionMC_GetCalParams>
	/* Apply calibration coefficients */
	mag_cal_x = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[0][0]
 800f4be:	ed97 7a04 	vldr	s14, [r7, #16]
 800f4c2:	4b4b      	ldr	r3, [pc, #300]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f4c4:	edd3 7a00 	vldr	s15, [r3]
 800f4c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f4cc:	4b48      	ldr	r3, [pc, #288]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f4ce:	edd3 7a03 	vldr	s15, [r3, #12]
 800f4d2:	ee27 7a27 	vmul.f32	s14, s14, s15
	 + (data_in.Mag[1] - data_out.HI_Bias[1]) * data_out.SF_Matrix[0][1]
 800f4d6:	edd7 6a05 	vldr	s13, [r7, #20]
 800f4da:	4b45      	ldr	r3, [pc, #276]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f4dc:	edd3 7a01 	vldr	s15, [r3, #4]
 800f4e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f4e4:	4b42      	ldr	r3, [pc, #264]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f4e6:	edd3 7a04 	vldr	s15, [r3, #16]
 800f4ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f4ee:	ee37 7a27 	vadd.f32	s14, s14, s15
	 + (data_in.Mag[2] - data_out.HI_Bias[2]) * data_out.SF_Matrix[0][2]);
 800f4f2:	edd7 6a06 	vldr	s13, [r7, #24]
 800f4f6:	4b3e      	ldr	r3, [pc, #248]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f4f8:	edd3 7a02 	vldr	s15, [r3, #8]
 800f4fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f500:	4b3b      	ldr	r3, [pc, #236]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f502:	edd3 7a05 	vldr	s15, [r3, #20]
 800f506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f50a:	ee77 7a27 	vadd.f32	s15, s14, s15
	mag_cal_x = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[0][0]
 800f50e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f516:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	mag_cal_y = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[1][0]
 800f51a:	ed97 7a04 	vldr	s14, [r7, #16]
 800f51e:	4b34      	ldr	r3, [pc, #208]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f520:	edd3 7a00 	vldr	s15, [r3]
 800f524:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f528:	4b31      	ldr	r3, [pc, #196]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f52a:	edd3 7a06 	vldr	s15, [r3, #24]
 800f52e:	ee27 7a27 	vmul.f32	s14, s14, s15
	 + (data_in.Mag[1] - data_out.HI_Bias[1]) * data_out.SF_Matrix[1][1]
 800f532:	edd7 6a05 	vldr	s13, [r7, #20]
 800f536:	4b2e      	ldr	r3, [pc, #184]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f538:	edd3 7a01 	vldr	s15, [r3, #4]
 800f53c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f540:	4b2b      	ldr	r3, [pc, #172]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f542:	edd3 7a07 	vldr	s15, [r3, #28]
 800f546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f54a:	ee37 7a27 	vadd.f32	s14, s14, s15
	 + (data_in.Mag[2] - data_out.HI_Bias[2]) * data_out.SF_Matrix[1][2]);
 800f54e:	edd7 6a06 	vldr	s13, [r7, #24]
 800f552:	4b27      	ldr	r3, [pc, #156]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f554:	edd3 7a02 	vldr	s15, [r3, #8]
 800f558:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f55c:	4b24      	ldr	r3, [pc, #144]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f55e:	edd3 7a08 	vldr	s15, [r3, #32]
 800f562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f566:	ee77 7a27 	vadd.f32	s15, s14, s15
	mag_cal_y = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[1][0]
 800f56a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f56e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f572:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	mag_cal_z = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[2][0]
 800f576:	ed97 7a04 	vldr	s14, [r7, #16]
 800f57a:	4b1d      	ldr	r3, [pc, #116]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f57c:	edd3 7a00 	vldr	s15, [r3]
 800f580:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f584:	4b1a      	ldr	r3, [pc, #104]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f586:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800f58a:	ee27 7a27 	vmul.f32	s14, s14, s15
	 + (data_in.Mag[1] - data_out.HI_Bias[1]) * data_out.SF_Matrix[2][1]
 800f58e:	edd7 6a05 	vldr	s13, [r7, #20]
 800f592:	4b17      	ldr	r3, [pc, #92]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f594:	edd3 7a01 	vldr	s15, [r3, #4]
 800f598:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f59c:	4b14      	ldr	r3, [pc, #80]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f59e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800f5a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f5a6:	ee37 7a27 	vadd.f32	s14, s14, s15
	 + (data_in.Mag[2] - data_out.HI_Bias[2]) * data_out.SF_Matrix[2][2]);
 800f5aa:	edd7 6a06 	vldr	s13, [r7, #24]
 800f5ae:	4b10      	ldr	r3, [pc, #64]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f5b0:	edd3 7a02 	vldr	s15, [r3, #8]
 800f5b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f5b8:	4b0d      	ldr	r3, [pc, #52]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f5ba:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f5be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f5c2:	ee77 7a27 	vadd.f32	s15, s14, s15
	mag_cal_z = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[2][0]
 800f5c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f5ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f5ce:	edc7 7a08 	vstr	s15, [r7, #32]

	if (MMC_CALQSTATUSUNKNOWN != data_out.CalQuality)
 800f5d2:	4b07      	ldr	r3, [pc, #28]	; (800f5f0 <GetCalibratedMagAxses+0x190>)
 800f5d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d004      	beq.n	800f5e6 <GetCalibratedMagAxses+0x186>
	{
		test++;
 800f5dc:	4b05      	ldr	r3, [pc, #20]	; (800f5f4 <GetCalibratedMagAxses+0x194>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	4a04      	ldr	r2, [pc, #16]	; (800f5f4 <GetCalibratedMagAxses+0x194>)
 800f5e4:	6013      	str	r3, [r2, #0]
	}
}
 800f5e6:	bf00      	nop
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3730      	adds	r7, #48	; 0x30
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}
 800f5f0:	2000936c 	.word	0x2000936c
 800f5f4:	200093a0 	.word	0x200093a0

0800f5f8 <GetCompassData>:

void GetCompassData()
{
 800f5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5fc:	b0d3      	sub	sp, #332	; 0x14c
 800f5fe:	af06      	add	r7, sp, #24
	MEC_input_t in;
	MEC_output_t out;

	char printOut[150];

	MEC_state_t orientation = MEC_ENABLE;
 800f600:	2301      	movs	r3, #1
 800f602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	MEC_state_t virtGyro = MEC_DISABLE;
 800f606:	2300      	movs	r3, #0
 800f608:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	MEC_state_t gravity = MEC_DISABLE;
 800f60c:	2300      	movs	r3, #0
 800f60e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	MEC_state_t linearAcc = MEC_ENABLE;
 800f612:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f616:	2201      	movs	r2, #1
 800f618:	701a      	strb	r2, [r3, #0]
	POS_MOTION_SENSOR_Axes_t AccAxesLsm6dso;
	POS_MOTION_SENSOR_Axes_t GyrAxesLsm6dso;
	POS_MOTION_SENSOR_Axes_t MagAxes;
	POS_MOTION_SENSOR_Axes_t AccAxesLis2dw12;

	GetCalibratedMagAxses(MAG_LIS2MDL, &MagAxes, 100);
 800f61a:	f107 030c 	add.w	r3, r7, #12
 800f61e:	2264      	movs	r2, #100	; 0x64
 800f620:	4619      	mov	r1, r3
 800f622:	2002      	movs	r0, #2
 800f624:	f7ff ff1c 	bl	800f460 <GetCalibratedMagAxses>

//	POS_MOTION_SENSOR_GetAxes(MAG_LIS2MDL, &MagAxes);
	POS_MOTION_SENSOR_GetAxes(ACC_LSM6DSO, &AccAxesLsm6dso);
 800f628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f62c:	4619      	mov	r1, r3
 800f62e:	2000      	movs	r0, #0
 800f630:	f000 f96a 	bl	800f908 <POS_MOTION_SENSOR_GetAxes>
	POS_MOTION_SENSOR_GetAxes(GYR_LSM6DSO, &GyrAxesLsm6dso);
 800f634:	f107 0318 	add.w	r3, r7, #24
 800f638:	4619      	mov	r1, r3
 800f63a:	2001      	movs	r0, #1
 800f63c:	f000 f964 	bl	800f908 <POS_MOTION_SENSOR_GetAxes>
	POS_MOTION_SENSOR_GetAxes(ACC_LIS2DW12, &AccAxesLis2dw12);
 800f640:	463b      	mov	r3, r7
 800f642:	4619      	mov	r1, r3
 800f644:	2003      	movs	r0, #3
 800f646:	f000 f95f 	bl	800f908 <POS_MOTION_SENSOR_GetAxes>

	// LIS2DW12 like LSM6DSO
	int32_t h = AccAxesLis2dw12.x;
 800f64a:	463b      	mov	r3, r7
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	AccAxesLis2dw12.x = -AccAxesLis2dw12.y;
 800f652:	463b      	mov	r3, r7
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	425a      	negs	r2, r3
 800f658:	463b      	mov	r3, r7
 800f65a:	601a      	str	r2, [r3, #0]
	AccAxesLis2dw12.y = h;
 800f65c:	463b      	mov	r3, r7
 800f65e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800f662:	605a      	str	r2, [r3, #4]


	sensorCompensation(ACC_LSM6DSO, &AccAxesLsm6dso);
 800f664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f668:	4619      	mov	r1, r3
 800f66a:	2000      	movs	r0, #0
 800f66c:	f7ff fe74 	bl	800f358 <sensorCompensation>
	sensorCompensation(ACC_LSM6DSO, &AccAxesLis2dw12);
 800f670:	463b      	mov	r3, r7
 800f672:	4619      	mov	r1, r3
 800f674:	2000      	movs	r0, #0
 800f676:	f7ff fe6f 	bl	800f358 <sensorCompensation>

	setEcParameter(&AccAxesLsm6dso, &MagAxes, &in, 0.1);
 800f67a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800f67e:	f107 010c 	add.w	r1, r7, #12
 800f682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f686:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800f820 <GetCompassData+0x228>
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7ff fe00 	bl	800f290 <setEcParameter>
	MotionEC_Run(&in, &out);
 800f690:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800f694:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800f698:	4611      	mov	r1, r2
 800f69a:	4618      	mov	r0, r3
 800f69c:	f000 fbe6 	bl	800fe6c <MotionEC_Run>

	MotionEC_GetOrientationEnable(&orientation);
 800f6a0:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f000 ff9f 	bl	80105e8 <MotionEC_GetOrientationEnable>
	MotionEC_GetVirtualGyroEnable(&virtGyro);
 800f6aa:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f000 ffaa 	bl	8010608 <MotionEC_GetVirtualGyroEnable>
	MotionEC_GetGravityEnable(&gravity);
 800f6b4:	f107 0331 	add.w	r3, r7, #49	; 0x31
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f000 ffb5 	bl	8010628 <MotionEC_GetGravityEnable>
	MotionEC_GetLinearAccEnable(&linearAcc);
 800f6be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f000 ffc0 	bl	8010648 <MotionEC_GetLinearAccEnable>

	printOut[0] = 0;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	size_t len = strlen(printOut);
 800f6ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7f0 fd84 	bl	80001e0 <strlen>
 800f6d8:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
	if(prAllow & 1)
 800f6dc:	4b51      	ldr	r3, [pc, #324]	; (800f824 <GetCompassData+0x22c>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	f003 0301 	and.w	r3, r3, #1
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d023      	beq.n	800f730 <GetCompassData+0x138>
	{
		sprintf(printOut + len,"euler %2.2f %2.2f %2.2f ",out.euler[0],out.euler[1],out.euler[2]);
 800f6e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f6ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f6f0:	18d6      	adds	r6, r2, r3
 800f6f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7f0 ff2e 	bl	8000558 <__aeabi_f2d>
 800f6fc:	4680      	mov	r8, r0
 800f6fe:	4689      	mov	r9, r1
 800f700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f704:	4618      	mov	r0, r3
 800f706:	f7f0 ff27 	bl	8000558 <__aeabi_f2d>
 800f70a:	4604      	mov	r4, r0
 800f70c:	460d      	mov	r5, r1
 800f70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f712:	4618      	mov	r0, r3
 800f714:	f7f0 ff20 	bl	8000558 <__aeabi_f2d>
 800f718:	4602      	mov	r2, r0
 800f71a:	460b      	mov	r3, r1
 800f71c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f720:	e9cd 4500 	strd	r4, r5, [sp]
 800f724:	4642      	mov	r2, r8
 800f726:	464b      	mov	r3, r9
 800f728:	493f      	ldr	r1, [pc, #252]	; (800f828 <GetCompassData+0x230>)
 800f72a:	4630      	mov	r0, r6
 800f72c:	f008 f926 	bl	801797c <siprintf>
	}
	if(prAllow & 2)
 800f730:	4b3c      	ldr	r3, [pc, #240]	; (800f824 <GetCompassData+0x22c>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	f003 0302 	and.w	r3, r3, #2
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d033      	beq.n	800f7a4 <GetCompassData+0x1ac>
	{
		len = strlen(printOut);
 800f73c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f740:	4618      	mov	r0, r3
 800f742:	f7f0 fd4d 	bl	80001e0 <strlen>
 800f746:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
		sprintf(printOut + len,"Q %2.2f %2.2f %2.2f %2.2f ",out.quaternion[0],out.quaternion[1],out.quaternion[2],out.quaternion[3]);
 800f74a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f74e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f752:	18d6      	adds	r6, r2, r3
 800f754:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f758:	4618      	mov	r0, r3
 800f75a:	f7f0 fefd 	bl	8000558 <__aeabi_f2d>
 800f75e:	4682      	mov	sl, r0
 800f760:	468b      	mov	fp, r1
 800f762:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f766:	4618      	mov	r0, r3
 800f768:	f7f0 fef6 	bl	8000558 <__aeabi_f2d>
 800f76c:	4604      	mov	r4, r0
 800f76e:	460d      	mov	r5, r1
 800f770:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f774:	4618      	mov	r0, r3
 800f776:	f7f0 feef 	bl	8000558 <__aeabi_f2d>
 800f77a:	4680      	mov	r8, r0
 800f77c:	4689      	mov	r9, r1
 800f77e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f782:	4618      	mov	r0, r3
 800f784:	f7f0 fee8 	bl	8000558 <__aeabi_f2d>
 800f788:	4602      	mov	r2, r0
 800f78a:	460b      	mov	r3, r1
 800f78c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f790:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f794:	e9cd 4500 	strd	r4, r5, [sp]
 800f798:	4652      	mov	r2, sl
 800f79a:	465b      	mov	r3, fp
 800f79c:	4923      	ldr	r1, [pc, #140]	; (800f82c <GetCompassData+0x234>)
 800f79e:	4630      	mov	r0, r6
 800f7a0:	f008 f8ec 	bl	801797c <siprintf>
	}
	if(prAllow & 4)
 800f7a4:	4b1f      	ldr	r3, [pc, #124]	; (800f824 <GetCompassData+0x22c>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	f003 0304 	and.w	r3, r3, #4
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d02a      	beq.n	800f806 <GetCompassData+0x20e>
	{
		len = strlen(printOut);
 800f7b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7f0 fd13 	bl	80001e0 <strlen>
 800f7ba:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
		sprintf(printOut + len,"linear %2.2f %2.2f %2.2f ",out.linear[0],out.linear[1],out.linear[2]);
 800f7be:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f7c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f7c6:	18d6      	adds	r6, r2, r3
 800f7c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7f0 fec3 	bl	8000558 <__aeabi_f2d>
 800f7d2:	4680      	mov	r8, r0
 800f7d4:	4689      	mov	r9, r1
 800f7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f7f0 febc 	bl	8000558 <__aeabi_f2d>
 800f7e0:	4604      	mov	r4, r0
 800f7e2:	460d      	mov	r5, r1
 800f7e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7f0 feb5 	bl	8000558 <__aeabi_f2d>
 800f7ee:	4602      	mov	r2, r0
 800f7f0:	460b      	mov	r3, r1
 800f7f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f7f6:	e9cd 4500 	strd	r4, r5, [sp]
 800f7fa:	4642      	mov	r2, r8
 800f7fc:	464b      	mov	r3, r9
 800f7fe:	490c      	ldr	r1, [pc, #48]	; (800f830 <GetCompassData+0x238>)
 800f800:	4630      	mov	r0, r6
 800f802:	f008 f8bb 	bl	801797c <siprintf>
	}
	printf("\n\r%s",printOut);
 800f806:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f80a:	4619      	mov	r1, r3
 800f80c:	4809      	ldr	r0, [pc, #36]	; (800f834 <GetCompassData+0x23c>)
 800f80e:	f008 f869 	bl	80178e4 <iprintf>

}
 800f812:	bf00      	nop
 800f814:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800f818:	46bd      	mov	sp, r7
 800f81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f81e:	bf00      	nop
 800f820:	3dcccccd 	.word	0x3dcccccd
 800f824:	200013c8 	.word	0x200013c8
 800f828:	0801c9b4 	.word	0x0801c9b4
 800f82c:	0801c9d0 	.word	0x0801c9d0
 800f830:	0801c9ec 	.word	0x0801c9ec
 800f834:	0801c94c 	.word	0x0801c94c

0800f838 <MotionAC_LoadCalFromNVM>:

///////////////////////////

char MotionAC_LoadCalFromNVM (unsigned short intdataSize, unsigned int *data)
{
 800f838:	b480      	push	{r7}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	4603      	mov	r3, r0
 800f840:	6039      	str	r1, [r7, #0]
 800f842:	80fb      	strh	r3, [r7, #6]
	return 0;
 800f844:	2300      	movs	r3, #0

}
 800f846:	4618      	mov	r0, r3
 800f848:	370c      	adds	r7, #12
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr

0800f852 <MotionAC_SaveCalInNVM>:
char MotionAC_SaveCalInNVM (unsigned short intdataSize, unsigned int *data)
{
 800f852:	b480      	push	{r7}
 800f854:	b083      	sub	sp, #12
 800f856:	af00      	add	r7, sp, #0
 800f858:	4603      	mov	r3, r0
 800f85a:	6039      	str	r1, [r7, #0]
 800f85c:	80fb      	strh	r3, [r7, #6]
	return 0;
 800f85e:	2300      	movs	r3, #0
}
 800f860:	4618      	mov	r0, r3
 800f862:	370c      	adds	r7, #12
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr

0800f86c <MotionMC_LoadCalFromNVM>:

char MotionMC_LoadCalFromNVM (unsigned short intdataSize, unsigned int *data)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
 800f872:	4603      	mov	r3, r0
 800f874:	6039      	str	r1, [r7, #0]
 800f876:	80fb      	strh	r3, [r7, #6]
	return 0;
 800f878:	2300      	movs	r3, #0

}
 800f87a:	4618      	mov	r0, r3
 800f87c:	370c      	adds	r7, #12
 800f87e:	46bd      	mov	sp, r7
 800f880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f884:	4770      	bx	lr

0800f886 <MotionMC_SaveCalInNVM>:
char MotionMC_SaveCalInNVM (unsigned short intdataSize, unsigned int *data)
{
 800f886:	b480      	push	{r7}
 800f888:	b083      	sub	sp, #12
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	4603      	mov	r3, r0
 800f88e:	6039      	str	r1, [r7, #0]
 800f890:	80fb      	strh	r3, [r7, #6]
	return 0;
 800f892:	2300      	movs	r3, #0
}
 800f894:	4618      	mov	r0, r3
 800f896:	370c      	adds	r7, #12
 800f898:	46bd      	mov	sp, r7
 800f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89e:	4770      	bx	lr

0800f8a0 <position_Init>:
static void motionSensor_Init(void);



void position_Init(void)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	af00      	add	r7, sp, #0
	motionSensor_Init();
 800f8a4:	f000 f80a 	bl	800f8bc <motionSensor_Init>
	compass_init();
 800f8a8:	f7ff fc88 	bl	800f1bc <compass_init>


	/////
//	POS_MOTION_SENSOR_Axes_t AccAxesLsm6dso;
//	POS_MOTION_SENSOR_GetAxes(ACC_LSM6DSO, &AccAxesLsm6dso);
}
 800f8ac:	bf00      	nop
 800f8ae:	bd80      	pop	{r7, pc}

0800f8b0 <PositionProcess>:

void PositionProcess(void)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	af00      	add	r7, sp, #0
	GetCompassData();
 800f8b4:	f7ff fea0 	bl	800f5f8 <GetCompassData>
//	POS_MOTION_SENSOR_GetAxes(ACC_LSM6DSO, &AccAxesLsm6dso);
//	POS_MOTION_SENSOR_GetAxes(GYR_LSM6DSO, &GyrAxesLsm6dso);
//
//	printf("\n\rACC x = %5d y = %5d z = %5d MAG x = %5d y = %5d z = %5d",(int)AccAxesLis2dw.x,(int)AccAxesLis2dw.y,(int)AccAxesLis2dw.z,(int)MagAxes.x,(int)MagAxes.y,(int)MagAxes.z);
//	printf("\n\rACC x = %5d y = %5d z = %5d GYR x = %5d y = %5d z = %5d\n\r",(int)AccAxesLsm6dso.x,(int)AccAxesLsm6dso.y,(int)AccAxesLsm6dso.z,(int)GyrAxesLsm6dso.x,(int)GyrAxesLsm6dso.y,(int)GyrAxesLsm6dso.z);
}
 800f8b8:	bf00      	nop
 800f8ba:	bd80      	pop	{r7, pc}

0800f8bc <motionSensor_Init>:
/**
  * @brief  Initialize the accelerometer and  magnetometer
  * @retval None
  */
static void motionSensor_Init(void)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	af00      	add	r7, sp, #0
//  displayFloatToInt_t out_value_odr;
//  int i;

	  /* Initialize Virtual COM Port */
	  BSP_COM_Init(COM1);
 800f8c0:	2000      	movs	r0, #0
 800f8c2:	f7f9 f91f 	bl	8008b04 <BSP_COM_Init>


	POS_MOTION_SENSOR_Init();
 800f8c6:	f000 f802 	bl	800f8ce <POS_MOTION_SENSOR_Init>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
    printf("%s", dataOut);
  }
  */
}
 800f8ca:	bf00      	nop
 800f8cc:	bd80      	pop	{r7, pc}

0800f8ce <POS_MOTION_SENSOR_Init>:
 * @brief  Initializes the motion sensors
 * @retval BSP status
 */
#include "position.h"
int32_t POS_MOTION_SENSOR_Init(void)
{
 800f8ce:	b580      	push	{r7, lr}
 800f8d0:	b082      	sub	sp, #8
 800f8d2:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	607b      	str	r3, [r7, #4]

  ret = LIS2DW12_0_Probe(ACC_LIS2DW12);
 800f8d8:	2003      	movs	r0, #3
 800f8da:	f000 f8df 	bl	800fa9c <LIS2DW12_0_Probe>
 800f8de:	6078      	str	r0, [r7, #4]
  if (BSP_ERROR_NONE == ret)
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d103      	bne.n	800f8ee <POS_MOTION_SENSOR_Init+0x20>
  {
	  ret = LIS2MDL_0_Probe(MAG_LIS2MDL);
 800f8e6:	2002      	movs	r0, #2
 800f8e8:	f000 f950 	bl	800fb8c <LIS2MDL_0_Probe>
 800f8ec:	6078      	str	r0, [r7, #4]
  }

  if (BSP_ERROR_NONE == ret)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d103      	bne.n	800f8fc <POS_MOTION_SENSOR_Init+0x2e>
  {
	  ret = LSM6DSO_0_Probe(GYR_LSM6DSO);
 800f8f4:	2001      	movs	r0, #1
 800f8f6:	f000 f833 	bl	800f960 <LSM6DSO_0_Probe>
 800f8fa:	6078      	str	r0, [r7, #4]
  }
  return ret;
 800f8fc:	687b      	ldr	r3, [r7, #4]
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3708      	adds	r7, #8
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}
	...

0800f908 <POS_MOTION_SENSOR_GetAxes>:
 * @param  Sensor Motion sensor instance
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t POS_MOTION_SENSOR_GetAxes(POS_MOTION_SENSORS sensor, POS_MOTION_SENSOR_Axes_t *Axes)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b084      	sub	sp, #16
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	4603      	mov	r3, r0
 800f910:	6039      	str	r1, [r7, #0]
 800f912:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if (sensor >= POS_MOTION_SENSORS_MAX)
 800f914:	79fb      	ldrb	r3, [r7, #7]
 800f916:	2b03      	cmp	r3, #3
 800f918:	d903      	bls.n	800f922 <POS_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f91a:	f06f 0301 	mvn.w	r3, #1
 800f91e:	60fb      	str	r3, [r7, #12]
 800f920:	e014      	b.n	800f94c <POS_MOTION_SENSOR_GetAxes+0x44>
  }
  else
  {
    if (PosMotionFuncDrv[sensor]->GetAxes(PosMotionCompObj[sensor], Axes) != BSP_ERROR_NONE)
 800f922:	79fb      	ldrb	r3, [r7, #7]
 800f924:	4a0c      	ldr	r2, [pc, #48]	; (800f958 <POS_MOTION_SENSOR_GetAxes+0x50>)
 800f926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f92a:	69db      	ldr	r3, [r3, #28]
 800f92c:	79fa      	ldrb	r2, [r7, #7]
 800f92e:	490b      	ldr	r1, [pc, #44]	; (800f95c <POS_MOTION_SENSOR_GetAxes+0x54>)
 800f930:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f934:	6839      	ldr	r1, [r7, #0]
 800f936:	4610      	mov	r0, r2
 800f938:	4798      	blx	r3
 800f93a:	4603      	mov	r3, r0
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d003      	beq.n	800f948 <POS_MOTION_SENSOR_GetAxes+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800f940:	f06f 0304 	mvn.w	r3, #4
 800f944:	60fb      	str	r3, [r7, #12]
 800f946:	e001      	b.n	800f94c <POS_MOTION_SENSOR_GetAxes+0x44>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800f948:	2300      	movs	r3, #0
 800f94a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800f94c:	68fb      	ldr	r3, [r7, #12]
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3710      	adds	r7, #16
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
 800f956:	bf00      	nop
 800f958:	200093a4 	.word	0x200093a4
 800f95c:	2000bf0c 	.word	0x2000bf0c

0800f960 <LSM6DSO_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSO_0_Probe(POS_MOTION_SENSORS sensor)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b08c      	sub	sp, #48	; 0x30
 800f964:	af00      	add	r7, sp, #0
 800f966:	4603      	mov	r3, r0
 800f968:	71fb      	strb	r3, [r7, #7]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  int32_t ret = BSP_ERROR_NONE;
 800f96a:	2300      	movs	r3, #0
 800f96c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800f96e:	2300      	movs	r3, #0
 800f970:	61bb      	str	r3, [r7, #24]
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800f972:	23d7      	movs	r3, #215	; 0xd7
 800f974:	773b      	strb	r3, [r7, #28]
  io_ctx.Init        = POS_I2C_Init;
 800f976:	4b3d      	ldr	r3, [pc, #244]	; (800fa6c <LSM6DSO_0_Probe+0x10c>)
 800f978:	613b      	str	r3, [r7, #16]
  io_ctx.DeInit      = POS_I2C_DeInit;
 800f97a:	4b3d      	ldr	r3, [pc, #244]	; (800fa70 <LSM6DSO_0_Probe+0x110>)
 800f97c:	617b      	str	r3, [r7, #20]
  io_ctx.ReadReg     = POS_I2C_ReadReg;
 800f97e:	4b3d      	ldr	r3, [pc, #244]	; (800fa74 <LSM6DSO_0_Probe+0x114>)
 800f980:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.WriteReg    = POS_I2C_WriteReg;
 800f982:	4b3d      	ldr	r3, [pc, #244]	; (800fa78 <LSM6DSO_0_Probe+0x118>)
 800f984:	623b      	str	r3, [r7, #32]
  io_ctx.GetTick     = POS_GetTick;
 800f986:	4b3d      	ldr	r3, [pc, #244]	; (800fa7c <LSM6DSO_0_Probe+0x11c>)
 800f988:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800f98a:	f107 0310 	add.w	r3, r7, #16
 800f98e:	4619      	mov	r1, r3
 800f990:	483b      	ldr	r0, [pc, #236]	; (800fa80 <LSM6DSO_0_Probe+0x120>)
 800f992:	f7f5 fcc7 	bl	8005324 <LSM6DSO_RegisterBusIO>
 800f996:	4603      	mov	r3, r0
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d003      	beq.n	800f9a4 <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800f99c:	f06f 0306 	mvn.w	r3, #6
 800f9a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9a2:	e05e      	b.n	800fa62 <LSM6DSO_0_Probe+0x102>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800f9a4:	f107 030f 	add.w	r3, r7, #15
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	4835      	ldr	r0, [pc, #212]	; (800fa80 <LSM6DSO_0_Probe+0x120>)
 800f9ac:	f7f5 fdbc 	bl	8005528 <LSM6DSO_ReadID>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d003      	beq.n	800f9be <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800f9b6:	f06f 0306 	mvn.w	r3, #6
 800f9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9bc:	e051      	b.n	800fa62 <LSM6DSO_0_Probe+0x102>
  }
  else if (id != LSM6DSO_ID)
 800f9be:	7bfb      	ldrb	r3, [r7, #15]
 800f9c0:	2b6c      	cmp	r3, #108	; 0x6c
 800f9c2:	d003      	beq.n	800f9cc <LSM6DSO_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800f9c4:	f06f 0306 	mvn.w	r3, #6
 800f9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9ca:	e04a      	b.n	800fa62 <LSM6DSO_0_Probe+0x102>
  }
  else
  {
	PosMotionCompObj[ACC_LSM6DSO] = &lsm6dso_obj_0;
 800f9cc:	4b2d      	ldr	r3, [pc, #180]	; (800fa84 <LSM6DSO_0_Probe+0x124>)
 800f9ce:	4a2c      	ldr	r2, [pc, #176]	; (800fa80 <LSM6DSO_0_Probe+0x120>)
 800f9d0:	601a      	str	r2, [r3, #0]
	PosMotionCompObj[GYR_LSM6DSO] = &lsm6dso_obj_0;
 800f9d2:	4b2c      	ldr	r3, [pc, #176]	; (800fa84 <LSM6DSO_0_Probe+0x124>)
 800f9d4:	4a2a      	ldr	r2, [pc, #168]	; (800fa80 <LSM6DSO_0_Probe+0x120>)
 800f9d6:	605a      	str	r2, [r3, #4]
	/* The second cast (void *) is added to bypass Misra R11.3 rule */
	PosMotionDrv[ACC_LSM6DSO] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800f9d8:	4b2b      	ldr	r3, [pc, #172]	; (800fa88 <LSM6DSO_0_Probe+0x128>)
 800f9da:	4a2c      	ldr	r2, [pc, #176]	; (800fa8c <LSM6DSO_0_Probe+0x12c>)
 800f9dc:	601a      	str	r2, [r3, #0]
	PosMotionDrv[GYR_LSM6DSO] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800f9de:	4b2a      	ldr	r3, [pc, #168]	; (800fa88 <LSM6DSO_0_Probe+0x128>)
 800f9e0:	4a2a      	ldr	r2, [pc, #168]	; (800fa8c <LSM6DSO_0_Probe+0x12c>)
 800f9e2:	605a      	str	r2, [r3, #4]

	/* The second cast (void *) is added to bypass Misra R11.3 rule */
	PosMotionFuncDrv[ACC_LSM6DSO] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_ACC_Driver;
 800f9e4:	4b2a      	ldr	r3, [pc, #168]	; (800fa90 <LSM6DSO_0_Probe+0x130>)
 800f9e6:	4a2b      	ldr	r2, [pc, #172]	; (800fa94 <LSM6DSO_0_Probe+0x134>)
 800f9e8:	601a      	str	r2, [r3, #0]
	PosMotionFuncDrv[GYR_LSM6DSO] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800f9ea:	4b29      	ldr	r3, [pc, #164]	; (800fa90 <LSM6DSO_0_Probe+0x130>)
 800f9ec:	4a2a      	ldr	r2, [pc, #168]	; (800fa98 <LSM6DSO_0_Probe+0x138>)
 800f9ee:	605a      	str	r2, [r3, #4]

	if (PosMotionDrv[ACC_LSM6DSO]->Init(PosMotionCompObj[ACC_LSM6DSO]) != LSM6DSO_OK)
 800f9f0:	4b25      	ldr	r3, [pc, #148]	; (800fa88 <LSM6DSO_0_Probe+0x128>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	4a23      	ldr	r2, [pc, #140]	; (800fa84 <LSM6DSO_0_Probe+0x124>)
 800f9f8:	6812      	ldr	r2, [r2, #0]
 800f9fa:	4610      	mov	r0, r2
 800f9fc:	4798      	blx	r3
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d003      	beq.n	800fa0c <LSM6DSO_0_Probe+0xac>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 800fa04:	f06f 0304 	mvn.w	r3, #4
 800fa08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa0a:	e02a      	b.n	800fa62 <LSM6DSO_0_Probe+0x102>
	}
	else if (PosMotionDrv[GYR_LSM6DSO]->Init(PosMotionCompObj[GYR_LSM6DSO]) != LSM6DSO_OK)
 800fa0c:	4b1e      	ldr	r3, [pc, #120]	; (800fa88 <LSM6DSO_0_Probe+0x128>)
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	4a1c      	ldr	r2, [pc, #112]	; (800fa84 <LSM6DSO_0_Probe+0x124>)
 800fa14:	6852      	ldr	r2, [r2, #4]
 800fa16:	4610      	mov	r0, r2
 800fa18:	4798      	blx	r3
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d003      	beq.n	800fa28 <LSM6DSO_0_Probe+0xc8>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 800fa20:	f06f 0304 	mvn.w	r3, #4
 800fa24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa26:	e01c      	b.n	800fa62 <LSM6DSO_0_Probe+0x102>
	}
	else
	{
		ret = BSP_ERROR_NONE;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (PosMotionFuncDrv[ACC_LSM6DSO]->Enable(PosMotionCompObj[ACC_LSM6DSO]) != LSM6DSO_OK)
 800fa2c:	4b18      	ldr	r3, [pc, #96]	; (800fa90 <LSM6DSO_0_Probe+0x130>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	4a14      	ldr	r2, [pc, #80]	; (800fa84 <LSM6DSO_0_Probe+0x124>)
 800fa34:	6812      	ldr	r2, [r2, #0]
 800fa36:	4610      	mov	r0, r2
 800fa38:	4798      	blx	r3
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d003      	beq.n	800fa48 <LSM6DSO_0_Probe+0xe8>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800fa40:	f06f 0304 	mvn.w	r3, #4
 800fa44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa46:	e00c      	b.n	800fa62 <LSM6DSO_0_Probe+0x102>
		}
		else if (PosMotionFuncDrv[GYR_LSM6DSO]->Enable(PosMotionCompObj[GYR_LSM6DSO]) != LSM6DSO_OK)
 800fa48:	4b11      	ldr	r3, [pc, #68]	; (800fa90 <LSM6DSO_0_Probe+0x130>)
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	4a0d      	ldr	r2, [pc, #52]	; (800fa84 <LSM6DSO_0_Probe+0x124>)
 800fa50:	6852      	ldr	r2, [r2, #4]
 800fa52:	4610      	mov	r0, r2
 800fa54:	4798      	blx	r3
 800fa56:	4603      	mov	r3, r0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d002      	beq.n	800fa62 <LSM6DSO_0_Probe+0x102>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800fa5c:	f06f 0304 	mvn.w	r3, #4
 800fa60:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
	}
  }
	  return ret;
 800fa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	3730      	adds	r7, #48	; 0x30
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}
 800fa6c:	080015f5 	.word	0x080015f5
 800fa70:	08001659 	.word	0x08001659
 800fa74:	0800170d 	.word	0x0800170d
 800fa78:	080016a9 	.word	0x080016a9
 800fa7c:	08001771 	.word	0x08001771
 800fa80:	200093c4 	.word	0x200093c4
 800fa84:	2000bf0c 	.word	0x2000bf0c
 800fa88:	200093b4 	.word	0x200093b4
 800fa8c:	20001304 	.word	0x20001304
 800fa90:	200093a4 	.word	0x200093a4
 800fa94:	20001314 	.word	0x20001314
 800fa98:	20001338 	.word	0x20001338

0800fa9c <LIS2DW12_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2DW12_0_Probe(POS_MOTION_SENSORS sensor)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b08c      	sub	sp, #48	; 0x30
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	4603      	mov	r3, r0
 800faa4:	71fb      	strb	r3, [r7, #7]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  int32_t ret = BSP_ERROR_NONE;
 800faa6:	2300      	movs	r3, #0
 800faa8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800faaa:	2300      	movs	r3, #0
 800faac:	61bb      	str	r3, [r7, #24]
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800faae:	2333      	movs	r3, #51	; 0x33
 800fab0:	773b      	strb	r3, [r7, #28]
  io_ctx.Init        = POS_I2C_Init;
 800fab2:	4b2b      	ldr	r3, [pc, #172]	; (800fb60 <LIS2DW12_0_Probe+0xc4>)
 800fab4:	613b      	str	r3, [r7, #16]
  io_ctx.DeInit      = POS_I2C_DeInit;
 800fab6:	4b2b      	ldr	r3, [pc, #172]	; (800fb64 <LIS2DW12_0_Probe+0xc8>)
 800fab8:	617b      	str	r3, [r7, #20]
  io_ctx.ReadReg     = POS_I2C_ReadReg;
 800faba:	4b2b      	ldr	r3, [pc, #172]	; (800fb68 <LIS2DW12_0_Probe+0xcc>)
 800fabc:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.WriteReg    = POS_I2C_WriteReg;
 800fabe:	4b2b      	ldr	r3, [pc, #172]	; (800fb6c <LIS2DW12_0_Probe+0xd0>)
 800fac0:	623b      	str	r3, [r7, #32]
  io_ctx.GetTick     = POS_GetTick;
 800fac2:	4b2b      	ldr	r3, [pc, #172]	; (800fb70 <LIS2DW12_0_Probe+0xd4>)
 800fac4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800fac6:	f107 0310 	add.w	r3, r7, #16
 800faca:	4619      	mov	r1, r3
 800facc:	4829      	ldr	r0, [pc, #164]	; (800fb74 <LIS2DW12_0_Probe+0xd8>)
 800face:	f7f2 fe15 	bl	80026fc <LIS2DW12_RegisterBusIO>
 800fad2:	4603      	mov	r3, r0
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d003      	beq.n	800fae0 <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fad8:	f06f 0306 	mvn.w	r3, #6
 800fadc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fade:	e039      	b.n	800fb54 <LIS2DW12_0_Probe+0xb8>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800fae0:	f107 030f 	add.w	r3, r7, #15
 800fae4:	4619      	mov	r1, r3
 800fae6:	4823      	ldr	r0, [pc, #140]	; (800fb74 <LIS2DW12_0_Probe+0xd8>)
 800fae8:	f7f2 fef2 	bl	80028d0 <LIS2DW12_ReadID>
 800faec:	4603      	mov	r3, r0
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d003      	beq.n	800fafa <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800faf2:	f06f 0306 	mvn.w	r3, #6
 800faf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800faf8:	e02c      	b.n	800fb54 <LIS2DW12_0_Probe+0xb8>
  }
  else if (id != LIS2DW12_ID)
 800fafa:	7bfb      	ldrb	r3, [r7, #15]
 800fafc:	2b44      	cmp	r3, #68	; 0x44
 800fafe:	d003      	beq.n	800fb08 <LIS2DW12_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fb00:	f06f 0306 	mvn.w	r3, #6
 800fb04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb06:	e025      	b.n	800fb54 <LIS2DW12_0_Probe+0xb8>
  }
  else
  {
    PosMotionCompObj[ACC_LIS2DW12] = &lis2dw12_obj_0;
 800fb08:	4b1b      	ldr	r3, [pc, #108]	; (800fb78 <LIS2DW12_0_Probe+0xdc>)
 800fb0a:	4a1a      	ldr	r2, [pc, #104]	; (800fb74 <LIS2DW12_0_Probe+0xd8>)
 800fb0c:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionDrv[ACC_LIS2DW12] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800fb0e:	4b1b      	ldr	r3, [pc, #108]	; (800fb7c <LIS2DW12_0_Probe+0xe0>)
 800fb10:	4a1b      	ldr	r2, [pc, #108]	; (800fb80 <LIS2DW12_0_Probe+0xe4>)
 800fb12:	60da      	str	r2, [r3, #12]

	/* The second cast (void *) is added to bypass Misra R11.3 rule */
	PosMotionFuncDrv[ACC_LIS2DW12] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2DW12_ACC_Driver;
 800fb14:	4b1b      	ldr	r3, [pc, #108]	; (800fb84 <LIS2DW12_0_Probe+0xe8>)
 800fb16:	4a1c      	ldr	r2, [pc, #112]	; (800fb88 <LIS2DW12_0_Probe+0xec>)
 800fb18:	60da      	str	r2, [r3, #12]

	if (PosMotionDrv[ACC_LIS2DW12]->Init(PosMotionCompObj[ACC_LIS2DW12]) != LIS2DW12_OK)
 800fb1a:	4b18      	ldr	r3, [pc, #96]	; (800fb7c <LIS2DW12_0_Probe+0xe0>)
 800fb1c:	68db      	ldr	r3, [r3, #12]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	4a15      	ldr	r2, [pc, #84]	; (800fb78 <LIS2DW12_0_Probe+0xdc>)
 800fb22:	68d2      	ldr	r2, [r2, #12]
 800fb24:	4610      	mov	r0, r2
 800fb26:	4798      	blx	r3
 800fb28:	4603      	mov	r3, r0
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d003      	beq.n	800fb36 <LIS2DW12_0_Probe+0x9a>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 800fb2e:	f06f 0304 	mvn.w	r3, #4
 800fb32:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb34:	e00e      	b.n	800fb54 <LIS2DW12_0_Probe+0xb8>
	}
	else
	{
		ret = BSP_ERROR_NONE;
 800fb36:	2300      	movs	r3, #0
 800fb38:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (PosMotionFuncDrv[ACC_LIS2DW12]->Enable(PosMotionCompObj[ACC_LIS2DW12]) != LSM6DSO_OK)
 800fb3a:	4b12      	ldr	r3, [pc, #72]	; (800fb84 <LIS2DW12_0_Probe+0xe8>)
 800fb3c:	68db      	ldr	r3, [r3, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	4a0d      	ldr	r2, [pc, #52]	; (800fb78 <LIS2DW12_0_Probe+0xdc>)
 800fb42:	68d2      	ldr	r2, [r2, #12]
 800fb44:	4610      	mov	r0, r2
 800fb46:	4798      	blx	r3
 800fb48:	4603      	mov	r3, r0
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d002      	beq.n	800fb54 <LIS2DW12_0_Probe+0xb8>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800fb4e:	f06f 0304 	mvn.w	r3, #4
 800fb52:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
	}
  }
  return ret;
 800fb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	3730      	adds	r7, #48	; 0x30
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	080015f5 	.word	0x080015f5
 800fb64:	08001659 	.word	0x08001659
 800fb68:	0800170d 	.word	0x0800170d
 800fb6c:	080016a9 	.word	0x080016a9
 800fb70:	08001771 	.word	0x08001771
 800fb74:	200093f4 	.word	0x200093f4
 800fb78:	2000bf0c 	.word	0x2000bf0c
 800fb7c:	200093b4 	.word	0x200093b4
 800fb80:	20001264 	.word	0x20001264
 800fb84:	200093a4 	.word	0x200093a4
 800fb88:	20001274 	.word	0x20001274

0800fb8c <LIS2MDL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2MDL_0_Probe(POS_MOTION_SENSORS sensor)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b08c      	sub	sp, #48	; 0x30
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	4603      	mov	r3, r0
 800fb94:	71fb      	strb	r3, [r7, #7]

  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  int32_t                 ret = BSP_ERROR_NONE;
 800fb96:	2300      	movs	r3, #0
 800fb98:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the magneto driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	61bb      	str	r3, [r7, #24]
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800fb9e:	233d      	movs	r3, #61	; 0x3d
 800fba0:	773b      	strb	r3, [r7, #28]
  io_ctx.Init        = POS_I2C_Init;
 800fba2:	4b2b      	ldr	r3, [pc, #172]	; (800fc50 <LIS2MDL_0_Probe+0xc4>)
 800fba4:	613b      	str	r3, [r7, #16]
  io_ctx.DeInit      = POS_I2C_DeInit;
 800fba6:	4b2b      	ldr	r3, [pc, #172]	; (800fc54 <LIS2MDL_0_Probe+0xc8>)
 800fba8:	617b      	str	r3, [r7, #20]
  io_ctx.ReadReg     = POS_I2C_ReadReg;
 800fbaa:	4b2b      	ldr	r3, [pc, #172]	; (800fc58 <LIS2MDL_0_Probe+0xcc>)
 800fbac:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.WriteReg    = POS_I2C_WriteReg;
 800fbae:	4b2b      	ldr	r3, [pc, #172]	; (800fc5c <LIS2MDL_0_Probe+0xd0>)
 800fbb0:	623b      	str	r3, [r7, #32]
  io_ctx.GetTick     = POS_GetTick;
 800fbb2:	4b2b      	ldr	r3, [pc, #172]	; (800fc60 <LIS2MDL_0_Probe+0xd4>)
 800fbb4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800fbb6:	f107 0310 	add.w	r3, r7, #16
 800fbba:	4619      	mov	r1, r3
 800fbbc:	4829      	ldr	r0, [pc, #164]	; (800fc64 <LIS2MDL_0_Probe+0xd8>)
 800fbbe:	f7f4 f8ed 	bl	8003d9c <LIS2MDL_RegisterBusIO>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d003      	beq.n	800fbd0 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fbc8:	f06f 0306 	mvn.w	r3, #6
 800fbcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbce:	e039      	b.n	800fc44 <LIS2MDL_0_Probe+0xb8>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800fbd0:	f107 030f 	add.w	r3, r7, #15
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	4823      	ldr	r0, [pc, #140]	; (800fc64 <LIS2MDL_0_Probe+0xd8>)
 800fbd8:	f7f4 f9a9 	bl	8003f2e <LIS2MDL_ReadID>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d003      	beq.n	800fbea <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fbe2:	f06f 0306 	mvn.w	r3, #6
 800fbe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbe8:	e02c      	b.n	800fc44 <LIS2MDL_0_Probe+0xb8>
  }
  else if (id != LIS2MDL_ID)
 800fbea:	7bfb      	ldrb	r3, [r7, #15]
 800fbec:	2b40      	cmp	r3, #64	; 0x40
 800fbee:	d003      	beq.n	800fbf8 <LIS2MDL_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fbf0:	f06f 0306 	mvn.w	r3, #6
 800fbf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbf6:	e025      	b.n	800fc44 <LIS2MDL_0_Probe+0xb8>
  }
  else
  {

    PosMotionCompObj[MAG_LIS2MDL] = &lis2mdl_obj_0;
 800fbf8:	4b1b      	ldr	r3, [pc, #108]	; (800fc68 <LIS2MDL_0_Probe+0xdc>)
 800fbfa:	4a1a      	ldr	r2, [pc, #104]	; (800fc64 <LIS2MDL_0_Probe+0xd8>)
 800fbfc:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionDrv[MAG_LIS2MDL] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800fbfe:	4b1b      	ldr	r3, [pc, #108]	; (800fc6c <LIS2MDL_0_Probe+0xe0>)
 800fc00:	4a1b      	ldr	r2, [pc, #108]	; (800fc70 <LIS2MDL_0_Probe+0xe4>)
 800fc02:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionFuncDrv[MAG_LIS2MDL] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2MDL_MAG_Driver;
 800fc04:	4b1b      	ldr	r3, [pc, #108]	; (800fc74 <LIS2MDL_0_Probe+0xe8>)
 800fc06:	4a1c      	ldr	r2, [pc, #112]	; (800fc78 <LIS2MDL_0_Probe+0xec>)
 800fc08:	609a      	str	r2, [r3, #8]

    if (PosMotionDrv[MAG_LIS2MDL]->Init(PosMotionCompObj[MAG_LIS2MDL]) != LIS2MDL_OK)
 800fc0a:	4b18      	ldr	r3, [pc, #96]	; (800fc6c <LIS2MDL_0_Probe+0xe0>)
 800fc0c:	689b      	ldr	r3, [r3, #8]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4a15      	ldr	r2, [pc, #84]	; (800fc68 <LIS2MDL_0_Probe+0xdc>)
 800fc12:	6892      	ldr	r2, [r2, #8]
 800fc14:	4610      	mov	r0, r2
 800fc16:	4798      	blx	r3
 800fc18:	4603      	mov	r3, r0
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d003      	beq.n	800fc26 <LIS2MDL_0_Probe+0x9a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800fc1e:	f06f 0304 	mvn.w	r3, #4
 800fc22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc24:	e00e      	b.n	800fc44 <LIS2MDL_0_Probe+0xb8>
    }
	else
	{
		ret = BSP_ERROR_NONE;
 800fc26:	2300      	movs	r3, #0
 800fc28:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (PosMotionFuncDrv[MAG_LIS2MDL]->Enable(PosMotionCompObj[MAG_LIS2MDL]) != LSM6DSO_OK)
 800fc2a:	4b12      	ldr	r3, [pc, #72]	; (800fc74 <LIS2MDL_0_Probe+0xe8>)
 800fc2c:	689b      	ldr	r3, [r3, #8]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4a0d      	ldr	r2, [pc, #52]	; (800fc68 <LIS2MDL_0_Probe+0xdc>)
 800fc32:	6892      	ldr	r2, [r2, #8]
 800fc34:	4610      	mov	r0, r2
 800fc36:	4798      	blx	r3
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d002      	beq.n	800fc44 <LIS2MDL_0_Probe+0xb8>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800fc3e:	f06f 0304 	mvn.w	r3, #4
 800fc42:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
	}
  }
  return ret;
 800fc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3730      	adds	r7, #48	; 0x30
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}
 800fc4e:	bf00      	nop
 800fc50:	080015f5 	.word	0x080015f5
 800fc54:	08001659 	.word	0x08001659
 800fc58:	0800170d 	.word	0x0800170d
 800fc5c:	080016a9 	.word	0x080016a9
 800fc60:	08001771 	.word	0x08001771
 800fc64:	20009428 	.word	0x20009428
 800fc68:	2000bf0c 	.word	0x2000bf0c
 800fc6c:	200093b4 	.word	0x200093b4
 800fc70:	20001298 	.word	0x20001298
 800fc74:	200093a4 	.word	0x200093a4
 800fc78:	200012a8 	.word	0x200012a8

0800fc7c <quaternionsMult>:
 800fc7c:	ed90 4a01 	vldr	s8, [r0, #4]
 800fc80:	edd1 7a01 	vldr	s15, [r1, #4]
 800fc84:	edd0 4a00 	vldr	s9, [r0]
 800fc88:	ed91 5a00 	vldr	s10, [r1]
 800fc8c:	edd0 5a02 	vldr	s11, [r0, #8]
 800fc90:	ed91 6a02 	vldr	s12, [r1, #8]
 800fc94:	edd0 6a03 	vldr	s13, [r0, #12]
 800fc98:	ed91 7a03 	vldr	s14, [r1, #12]
 800fc9c:	ee67 7ac4 	vnmul.f32	s15, s15, s8
 800fca0:	eee4 7a85 	vfma.f32	s15, s9, s10
 800fca4:	eee5 7ac6 	vfms.f32	s15, s11, s12
 800fca8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800fcac:	edc2 7a00 	vstr	s15, [r2]
 800fcb0:	ed91 4a00 	vldr	s8, [r1]
 800fcb4:	edd0 7a01 	vldr	s15, [r0, #4]
 800fcb8:	edd0 4a00 	vldr	s9, [r0]
 800fcbc:	ed91 5a01 	vldr	s10, [r1, #4]
 800fcc0:	edd0 5a02 	vldr	s11, [r0, #8]
 800fcc4:	ed91 6a03 	vldr	s12, [r1, #12]
 800fcc8:	edd0 6a03 	vldr	s13, [r0, #12]
 800fccc:	ed91 7a02 	vldr	s14, [r1, #8]
 800fcd0:	ee67 7a84 	vmul.f32	s15, s15, s8
 800fcd4:	eee4 7a85 	vfma.f32	s15, s9, s10
 800fcd8:	eee5 7a86 	vfma.f32	s15, s11, s12
 800fcdc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800fce0:	edc2 7a01 	vstr	s15, [r2, #4]
 800fce4:	ed91 4a00 	vldr	s8, [r1]
 800fce8:	edd0 7a02 	vldr	s15, [r0, #8]
 800fcec:	edd0 4a00 	vldr	s9, [r0]
 800fcf0:	ed91 5a02 	vldr	s10, [r1, #8]
 800fcf4:	ed91 6a01 	vldr	s12, [r1, #4]
 800fcf8:	edd0 5a03 	vldr	s11, [r0, #12]
 800fcfc:	edd0 6a01 	vldr	s13, [r0, #4]
 800fd00:	ed91 7a03 	vldr	s14, [r1, #12]
 800fd04:	ee67 7a84 	vmul.f32	s15, s15, s8
 800fd08:	eee4 7a85 	vfma.f32	s15, s9, s10
 800fd0c:	eee5 7a86 	vfma.f32	s15, s11, s12
 800fd10:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800fd14:	edc2 7a02 	vstr	s15, [r2, #8]
 800fd18:	edd0 7a01 	vldr	s15, [r0, #4]
 800fd1c:	ed91 4a02 	vldr	s8, [r1, #8]
 800fd20:	edd0 4a00 	vldr	s9, [r0]
 800fd24:	ed91 5a03 	vldr	s10, [r1, #12]
 800fd28:	edd0 6a02 	vldr	s13, [r0, #8]
 800fd2c:	edd0 5a03 	vldr	s11, [r0, #12]
 800fd30:	ed91 6a00 	vldr	s12, [r1]
 800fd34:	ed91 7a01 	vldr	s14, [r1, #4]
 800fd38:	ee67 7a84 	vmul.f32	s15, s15, s8
 800fd3c:	eee4 7a85 	vfma.f32	s15, s9, s10
 800fd40:	eee5 7a86 	vfma.f32	s15, s11, s12
 800fd44:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800fd48:	edc2 7a03 	vstr	s15, [r2, #12]
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop

0800fd50 <MotionEC_Initialize>:
 800fd50:	4a3a      	ldr	r2, [pc, #232]	; (800fe3c <MotionEC_Initialize+0xec>)
 800fd52:	493b      	ldr	r1, [pc, #236]	; (800fe40 <MotionEC_Initialize+0xf0>)
 800fd54:	6813      	ldr	r3, [r2, #0]
 800fd56:	f023 0301 	bic.w	r3, r3, #1
 800fd5a:	b410      	push	{r4}
 800fd5c:	6013      	str	r3, [r2, #0]
 800fd5e:	680b      	ldr	r3, [r1, #0]
 800fd60:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800fd64:	4013      	ands	r3, r2
 800fd66:	f24c 2440 	movw	r4, #49728	; 0xc240
 800fd6a:	42a3      	cmp	r3, r4
 800fd6c:	d013      	beq.n	800fd96 <MotionEC_Initialize+0x46>
 800fd6e:	680b      	ldr	r3, [r1, #0]
 800fd70:	f24c 2170 	movw	r1, #49776	; 0xc270
 800fd74:	4013      	ands	r3, r2
 800fd76:	428b      	cmp	r3, r1
 800fd78:	d00d      	beq.n	800fd96 <MotionEC_Initialize+0x46>
 800fd7a:	4b32      	ldr	r3, [pc, #200]	; (800fe44 <MotionEC_Initialize+0xf4>)
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	601a      	str	r2, [r3, #0]
 800fd80:	681a      	ldr	r2, [r3, #0]
 800fd82:	2a00      	cmp	r2, #0
 800fd84:	d1fc      	bne.n	800fd80 <MotionEC_Initialize+0x30>
 800fd86:	4b30      	ldr	r3, [pc, #192]	; (800fe48 <MotionEC_Initialize+0xf8>)
 800fd88:	4a30      	ldr	r2, [pc, #192]	; (800fe4c <MotionEC_Initialize+0xfc>)
 800fd8a:	601a      	str	r2, [r3, #0]
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	4b30      	ldr	r3, [pc, #192]	; (800fe50 <MotionEC_Initialize+0x100>)
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d01f      	beq.n	800fdd4 <MotionEC_Initialize+0x84>
 800fd94:	e7fe      	b.n	800fd94 <MotionEC_Initialize+0x44>
 800fd96:	4b2f      	ldr	r3, [pc, #188]	; (800fe54 <MotionEC_Initialize+0x104>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d1ed      	bne.n	800fd7a <MotionEC_Initialize+0x2a>
 800fd9e:	4a2e      	ldr	r2, [pc, #184]	; (800fe58 <MotionEC_Initialize+0x108>)
 800fda0:	6813      	ldr	r3, [r2, #0]
 800fda2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fda6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800fdaa:	d006      	beq.n	800fdba <MotionEC_Initialize+0x6a>
 800fdac:	6813      	ldr	r3, [r2, #0]
 800fdae:	f240 4283 	movw	r2, #1155	; 0x483
 800fdb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	d1df      	bne.n	800fd7a <MotionEC_Initialize+0x2a>
 800fdba:	4b28      	ldr	r3, [pc, #160]	; (800fe5c <MotionEC_Initialize+0x10c>)
 800fdbc:	2201      	movs	r2, #1
 800fdbe:	601a      	str	r2, [r3, #0]
 800fdc0:	681a      	ldr	r2, [r3, #0]
 800fdc2:	2a00      	cmp	r2, #0
 800fdc4:	d1fc      	bne.n	800fdc0 <MotionEC_Initialize+0x70>
 800fdc6:	4b26      	ldr	r3, [pc, #152]	; (800fe60 <MotionEC_Initialize+0x110>)
 800fdc8:	4a20      	ldr	r2, [pc, #128]	; (800fe4c <MotionEC_Initialize+0xfc>)
 800fdca:	601a      	str	r2, [r3, #0]
 800fdcc:	681a      	ldr	r2, [r3, #0]
 800fdce:	4b20      	ldr	r3, [pc, #128]	; (800fe50 <MotionEC_Initialize+0x100>)
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d1df      	bne.n	800fd94 <MotionEC_Initialize+0x44>
 800fdd4:	edd0 6a00 	vldr	s13, [r0]
 800fdd8:	4822      	ldr	r0, [pc, #136]	; (800fe64 <MotionEC_Initialize+0x114>)
 800fdda:	4a23      	ldr	r2, [pc, #140]	; (800fe68 <MotionEC_Initialize+0x118>)
 800fddc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fde0:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 800fde4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800fde8:	4601      	mov	r1, r0
 800fdea:	2301      	movs	r3, #1
 800fdec:	f801 3b04 	strb.w	r3, [r1], #4
 800fdf0:	f100 0410 	add.w	r4, r0, #16
 800fdf4:	7313      	strb	r3, [r2, #12]
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	6043      	str	r3, [r0, #4]
 800fdfa:	6103      	str	r3, [r0, #16]
 800fdfc:	e9c1 3301 	strd	r3, r3, [r1, #4]
 800fe00:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800fe04:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800fe08:	e9c2 3305 	strd	r3, r3, [r2, #20]
 800fe0c:	e9c2 330a 	strd	r3, r3, [r2, #40]	; 0x28
 800fe10:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 800fe14:	6113      	str	r3, [r2, #16]
 800fe16:	6253      	str	r3, [r2, #36]	; 0x24
 800fe18:	63d3      	str	r3, [r2, #60]	; 0x3c
 800fe1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe1e:	edc2 7a07 	vstr	s15, [r2, #28]
 800fe22:	edc2 7a08 	vstr	s15, [r2, #32]
 800fe26:	edc2 7a0c 	vstr	s15, [r2, #48]	; 0x30
 800fe2a:	edc2 7a10 	vstr	s15, [r2, #64]	; 0x40
 800fe2e:	ed82 6a02 	vstr	s12, [r2, #8]
 800fe32:	ed82 7a00 	vstr	s14, [r2]
 800fe36:	ed82 7a01 	vstr	s14, [r2, #4]
 800fe3a:	4770      	bx	lr
 800fe3c:	e0002000 	.word	0xe0002000
 800fe40:	e000ed00 	.word	0xe000ed00
 800fe44:	40023008 	.word	0x40023008
 800fe48:	40023000 	.word	0x40023000
 800fe4c:	f407a5c2 	.word	0xf407a5c2
 800fe50:	b5e8b5cd 	.word	0xb5e8b5cd
 800fe54:	e0042000 	.word	0xe0042000
 800fe58:	5c001000 	.word	0x5c001000
 800fe5c:	58024c08 	.word	0x58024c08
 800fe60:	58024c00 	.word	0x58024c00
 800fe64:	200015bc 	.word	0x200015bc
 800fe68:	20000000 	.word	0x20000000

0800fe6c <MotionEC_Run>:
 800fe6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe70:	ed2d 8b10 	vpush	{d8-d15}
 800fe74:	4c04      	ldr	r4, [pc, #16]	; (800fe88 <MotionEC_Run+0x1c>)
 800fe76:	7823      	ldrb	r3, [r4, #0]
 800fe78:	b09f      	sub	sp, #124	; 0x7c
 800fe7a:	b93b      	cbnz	r3, 800fe8c <MotionEC_Run+0x20>
 800fe7c:	b01f      	add	sp, #124	; 0x7c
 800fe7e:	ecbd 8b10 	vpop	{d8-d15}
 800fe82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe86:	bf00      	nop
 800fe88:	200015bc 	.word	0x200015bc
 800fe8c:	4607      	mov	r7, r0
 800fe8e:	460d      	mov	r5, r1
 800fe90:	6800      	ldr	r0, [r0, #0]
 800fe92:	6879      	ldr	r1, [r7, #4]
 800fe94:	68ba      	ldr	r2, [r7, #8]
 800fe96:	4ef7      	ldr	r6, [pc, #988]	; (8010274 <MotionEC_Run+0x408>)
 800fe98:	f10d 0910 	add.w	r9, sp, #16
 800fe9c:	464b      	mov	r3, r9
 800fe9e:	c307      	stmia	r3!, {r0, r1, r2}
 800fea0:	ed9d ba05 	vldr	s22, [sp, #20]
 800fea4:	eddd ba04 	vldr	s23, [sp, #16]
 800fea8:	eddd 9a06 	vldr	s19, [sp, #24]
 800feac:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 800feb0:	463b      	mov	r3, r7
 800feb2:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800feb6:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 800feba:	f10d 081c 	add.w	r8, sp, #28
 800febe:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800fec2:	689a      	ldr	r2, [r3, #8]
 800fec4:	6859      	ldr	r1, [r3, #4]
 800fec6:	4643      	mov	r3, r8
 800fec8:	c307      	stmia	r3!, {r0, r1, r2}
 800feca:	ee17 0a90 	vmov	r0, s15
 800fece:	f7f0 fb43 	bl	8000558 <__aeabi_f2d>
 800fed2:	ec41 0b10 	vmov	d0, r0, r1
 800fed6:	f00a f8f1 	bl	801a0bc <sqrt>
 800feda:	ec51 0b10 	vmov	r0, r1, d0
 800fede:	f7f0 fe6b 	bl	8000bb8 <__aeabi_d2f>
 800fee2:	ed9d 8a08 	vldr	s16, [sp, #32]
 800fee6:	ed9d 9a07 	vldr	s18, [sp, #28]
 800feea:	eddd 8a09 	vldr	s17, [sp, #36]	; 0x24
 800feee:	ee68 7a08 	vmul.f32	s15, s16, s16
 800fef2:	ee0a 0a10 	vmov	s20, r0
 800fef6:	eee9 7a09 	vfma.f32	s15, s18, s18
 800fefa:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800fefe:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800ff02:	eecc aa0a 	vdiv.f32	s21, s24, s20
 800ff06:	ee17 0a90 	vmov	r0, s15
 800ff0a:	f7f0 fb25 	bl	8000558 <__aeabi_f2d>
 800ff0e:	ec41 0b10 	vmov	d0, r0, r1
 800ff12:	f00a f8d3 	bl	801a0bc <sqrt>
 800ff16:	ec51 0b10 	vmov	r0, r1, d0
 800ff1a:	f7f0 fe4d 	bl	8000bb8 <__aeabi_d2f>
 800ff1e:	ee07 0a90 	vmov	s15, r0
 800ff22:	eecc 7a27 	vdiv.f32	s15, s24, s15
 800ff26:	7b33      	ldrb	r3, [r6, #12]
 800ff28:	ee6b baaa 	vmul.f32	s23, s23, s21
 800ff2c:	ee29 9a27 	vmul.f32	s18, s18, s15
 800ff30:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ff34:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800ff38:	ee69 9aaa 	vmul.f32	s19, s19, s21
 800ff3c:	ee6b 7a2a 	vmul.f32	s15, s22, s21
 800ff40:	ed8d 9a07 	vstr	s18, [sp, #28]
 800ff44:	ed8d 8a08 	vstr	s16, [sp, #32]
 800ff48:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 800ff4c:	edcd ba04 	vstr	s23, [sp, #16]
 800ff50:	edcd 7a05 	vstr	s15, [sp, #20]
 800ff54:	edcd 9a06 	vstr	s19, [sp, #24]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	f040 822f 	bne.w	80103bc <MotionEC_Run+0x550>
 800ff5e:	ee7a 6a4c 	vsub.f32	s13, s20, s24
 800ff62:	ed96 7a01 	vldr	s14, [r6, #4]
 800ff66:	ed96 5a00 	vldr	s10, [r6]
 800ff6a:	edd4 2a04 	vldr	s5, [r4, #16]
 800ff6e:	ed94 3a05 	vldr	s6, [r4, #20]
 800ff72:	edd4 3a06 	vldr	s7, [r4, #24]
 800ff76:	ed94 4a01 	vldr	s8, [r4, #4]
 800ff7a:	edd4 4a02 	vldr	s9, [r4, #8]
 800ff7e:	eef0 6ae6 	vabs.f32	s13, s13
 800ff82:	ee7c 6a66 	vsub.f32	s13, s24, s13
 800ff86:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
 800ff8a:	ee26 6a87 	vmul.f32	s12, s13, s14
 800ff8e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ff92:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ff96:	ee25 5a25 	vmul.f32	s10, s10, s11
 800ff9a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800ff9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa2:	eeb4 5ae6 	vcmpe.f32	s10, s13
 800ffa6:	bfb8      	it	lt
 800ffa8:	eeb0 7a46 	vmovlt.f32	s14, s12
 800ffac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffb0:	bfa8      	it	ge
 800ffb2:	eef0 6a45 	vmovge.f32	s13, s10
 800ffb6:	ee27 9a09 	vmul.f32	s18, s14, s18
 800ffba:	ee27 8a08 	vmul.f32	s16, s14, s16
 800ffbe:	ee68 8a87 	vmul.f32	s17, s17, s14
 800ffc2:	ee26 6aab 	vmul.f32	s12, s13, s23
 800ffc6:	ee3c 7a47 	vsub.f32	s14, s24, s14
 800ffca:	ee7c 5a66 	vsub.f32	s11, s24, s13
 800ffce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ffd2:	ee69 9aa6 	vmul.f32	s19, s19, s13
 800ffd6:	edd4 6a03 	vldr	s13, [r4, #12]
 800ffda:	eea7 9a22 	vfma.f32	s18, s14, s5
 800ffde:	eea7 8a03 	vfma.f32	s16, s14, s6
 800ffe2:	eee7 8a23 	vfma.f32	s17, s14, s7
 800ffe6:	eeb0 7a46 	vmov.f32	s14, s12
 800ffea:	eea5 7a84 	vfma.f32	s14, s11, s8
 800ffee:	eee5 7aa4 	vfma.f32	s15, s11, s9
 800fff2:	eee5 9aa6 	vfma.f32	s19, s11, s13
 800fff6:	ed84 9a04 	vstr	s18, [r4, #16]
 800fffa:	ed84 8a05 	vstr	s16, [r4, #20]
 800fffe:	edc4 8a06 	vstr	s17, [r4, #24]
 8010002:	ed84 7a01 	vstr	s14, [r4, #4]
 8010006:	edc4 7a02 	vstr	s15, [r4, #8]
 801000a:	edc4 9a03 	vstr	s19, [r4, #12]
 801000e:	eef0 aa47 	vmov.f32	s21, s14
 8010012:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010016:	ee28 8a08 	vmul.f32	s16, s16, s16
 801001a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801001e:	eea9 8a09 	vfma.f32	s16, s18, s18
 8010022:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8010026:	eea8 8aa8 	vfma.f32	s16, s17, s17
 801002a:	ee17 0a90 	vmov	r0, s15
 801002e:	f7f0 fa93 	bl	8000558 <__aeabi_f2d>
 8010032:	ec41 0b10 	vmov	d0, r0, r1
 8010036:	f00a f841 	bl	801a0bc <sqrt>
 801003a:	ee18 0a10 	vmov	r0, s16
 801003e:	ec59 8b10 	vmov	r8, r9, d0
 8010042:	f7f0 fa89 	bl	8000558 <__aeabi_f2d>
 8010046:	ec41 0b10 	vmov	d0, r0, r1
 801004a:	f00a f837 	bl	801a0bc <sqrt>
 801004e:	4649      	mov	r1, r9
 8010050:	4640      	mov	r0, r8
 8010052:	ed8d 0b00 	vstr	d0, [sp]
 8010056:	f7f0 fdaf 	bl	8000bb8 <__aeabi_d2f>
 801005a:	ed9d 0b00 	vldr	d0, [sp]
 801005e:	ee07 0a90 	vmov	s15, r0
 8010062:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8010066:	ec51 0b10 	vmov	r0, r1, d0
 801006a:	ee8b 9aa7 	vdiv.f32	s18, s23, s15
 801006e:	f7f0 fda3 	bl	8000bb8 <__aeabi_d2f>
 8010072:	ee07 0a90 	vmov	s15, r0
 8010076:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 801007a:	edd4 6a04 	vldr	s13, [r4, #16]
 801007e:	edd4 8a03 	vldr	s17, [r4, #12]
 8010082:	edd4 5a02 	vldr	s11, [r4, #8]
 8010086:	ed94 7a06 	vldr	s14, [r4, #24]
 801008a:	ed94 6a05 	vldr	s12, [r4, #20]
 801008e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010092:	ee69 8a28 	vmul.f32	s17, s18, s17
 8010096:	ee27 7a87 	vmul.f32	s14, s15, s14
 801009a:	ee69 aa2a 	vmul.f32	s21, s18, s21
 801009e:	ee66 9ae8 	vnmul.f32	s19, s13, s17
 80100a2:	ee29 9a25 	vmul.f32	s18, s18, s11
 80100a6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80100aa:	eee7 9a2a 	vfma.f32	s19, s14, s21
 80100ae:	ee29 8a47 	vnmul.f32	s16, s18, s14
 80100b2:	ee27 aaea 	vnmul.f32	s20, s15, s21
 80100b6:	eea8 8aa7 	vfma.f32	s16, s17, s15
 80100ba:	ee29 6aa9 	vmul.f32	s12, s19, s19
 80100be:	eea9 aa26 	vfma.f32	s20, s18, s13
 80100c2:	eea8 6a08 	vfma.f32	s12, s16, s16
 80100c6:	edc4 7a05 	vstr	s15, [r4, #20]
 80100ca:	eeaa 6a0a 	vfma.f32	s12, s20, s20
 80100ce:	ed84 7a06 	vstr	s14, [r4, #24]
 80100d2:	edc4 6a04 	vstr	s13, [r4, #16]
 80100d6:	ee16 0a10 	vmov	r0, s12
 80100da:	edc4 8a03 	vstr	s17, [r4, #12]
 80100de:	edc4 aa01 	vstr	s21, [r4, #4]
 80100e2:	ed84 9a02 	vstr	s18, [r4, #8]
 80100e6:	f7f0 fa37 	bl	8000558 <__aeabi_f2d>
 80100ea:	ec41 0b10 	vmov	d0, r0, r1
 80100ee:	f009 ffe5 	bl	801a0bc <sqrt>
 80100f2:	ec51 0b10 	vmov	r0, r1, d0
 80100f6:	f7f0 fd5f 	bl	8000bb8 <__aeabi_d2f>
 80100fa:	ee07 0a90 	vmov	s15, r0
 80100fe:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 8010102:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010106:	ee2a aa27 	vmul.f32	s20, s20, s15
 801010a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801010e:	ee2a baca 	vnmul.f32	s22, s21, s20
 8010112:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8010116:	eea8 ba28 	vfma.f32	s22, s16, s17
 801011a:	ee29 cae8 	vnmul.f32	s24, s19, s17
 801011e:	ee78 7a4b 	vsub.f32	s15, s16, s22
 8010122:	ee69 ca48 	vnmul.f32	s25, s18, s16
 8010126:	ee77 7ae8 	vsub.f32	s15, s15, s17
 801012a:	eeaa ca09 	vfma.f32	s24, s20, s18
 801012e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010136:	eee9 caaa 	vfma.f32	s25, s19, s21
 801013a:	f2c0 815b 	blt.w	80103f4 <MotionEC_Run+0x588>
 801013e:	ee77 7aab 	vadd.f32	s15, s15, s23
 8010142:	ee17 0a90 	vmov	r0, s15
 8010146:	f7f0 fa07 	bl	8000558 <__aeabi_f2d>
 801014a:	ec41 0b10 	vmov	d0, r0, r1
 801014e:	f009 ffb5 	bl	801a0bc <sqrt>
 8010152:	2200      	movs	r2, #0
 8010154:	4b48      	ldr	r3, [pc, #288]	; (8010278 <MotionEC_Run+0x40c>)
 8010156:	ec51 0b10 	vmov	r0, r1, d0
 801015a:	f7f0 fa55 	bl	8000608 <__aeabi_dmul>
 801015e:	ee79 7a6c 	vsub.f32	s15, s18, s25
 8010162:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801016a:	da02      	bge.n	8010172 <MotionEC_Run+0x306>
 801016c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010170:	4619      	mov	r1, r3
 8010172:	f7f0 fd21 	bl	8000bb8 <__aeabi_d2f>
 8010176:	ee7b 7a48 	vsub.f32	s15, s22, s16
 801017a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801017e:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8010182:	ee0b 0a90 	vmov	s23, r0
 8010186:	eef4 7ac7 	vcmpe.f32	s15, s14
 801018a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801018e:	6028      	str	r0, [r5, #0]
 8010190:	f2c0 8136 	blt.w	8010400 <MotionEC_Run+0x594>
 8010194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010198:	ee77 7a87 	vadd.f32	s15, s15, s14
 801019c:	ee17 0a90 	vmov	r0, s15
 80101a0:	f7f0 f9da 	bl	8000558 <__aeabi_f2d>
 80101a4:	ec41 0b10 	vmov	d0, r0, r1
 80101a8:	f009 ff88 	bl	801a0bc <sqrt>
 80101ac:	2200      	movs	r2, #0
 80101ae:	4b32      	ldr	r3, [pc, #200]	; (8010278 <MotionEC_Run+0x40c>)
 80101b0:	ec51 0b10 	vmov	r0, r1, d0
 80101b4:	f7f0 fa28 	bl	8000608 <__aeabi_dmul>
 80101b8:	ee7a 7a6a 	vsub.f32	s15, s20, s21
 80101bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80101c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c4:	da02      	bge.n	80101cc <MotionEC_Run+0x360>
 80101c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101ca:	4619      	mov	r1, r3
 80101cc:	f7f0 fcf4 	bl	8000bb8 <__aeabi_d2f>
 80101d0:	ee78 7ac8 	vsub.f32	s15, s17, s16
 80101d4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80101d8:	ee77 7acb 	vsub.f32	s15, s15, s22
 80101dc:	ee0d 0a10 	vmov	s26, r0
 80101e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80101e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101e8:	6068      	str	r0, [r5, #4]
 80101ea:	f2c0 8106 	blt.w	80103fa <MotionEC_Run+0x58e>
 80101ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80101f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80101f6:	ee17 0a90 	vmov	r0, s15
 80101fa:	f7f0 f9ad 	bl	8000558 <__aeabi_f2d>
 80101fe:	ec41 0b10 	vmov	d0, r0, r1
 8010202:	f009 ff5b 	bl	801a0bc <sqrt>
 8010206:	2200      	movs	r2, #0
 8010208:	4b1b      	ldr	r3, [pc, #108]	; (8010278 <MotionEC_Run+0x40c>)
 801020a:	ec51 0b10 	vmov	r0, r1, d0
 801020e:	f7f0 f9fb 	bl	8000608 <__aeabi_dmul>
 8010212:	ee7c 7a69 	vsub.f32	s15, s24, s19
 8010216:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801021a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801021e:	da02      	bge.n	8010226 <MotionEC_Run+0x3ba>
 8010220:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010224:	4619      	mov	r1, r3
 8010226:	f7f0 fcc7 	bl	8000bb8 <__aeabi_d2f>
 801022a:	ee78 7a28 	vadd.f32	s15, s16, s17
 801022e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010232:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8010236:	ee0d 0a90 	vmov	s27, r0
 801023a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801023e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010242:	60a8      	str	r0, [r5, #8]
 8010244:	f2c0 81c3 	blt.w	80105ce <MotionEC_Run+0x762>
 8010248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801024c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010250:	ee17 0a90 	vmov	r0, s15
 8010254:	f7f0 f980 	bl	8000558 <__aeabi_f2d>
 8010258:	ec41 0b10 	vmov	d0, r0, r1
 801025c:	f009 ff2e 	bl	801a0bc <sqrt>
 8010260:	2200      	movs	r2, #0
 8010262:	4b05      	ldr	r3, [pc, #20]	; (8010278 <MotionEC_Run+0x40c>)
 8010264:	ec51 0b10 	vmov	r0, r1, d0
 8010268:	f7f0 f9ce 	bl	8000608 <__aeabi_dmul>
 801026c:	f7f0 fca4 	bl	8000bb8 <__aeabi_d2f>
 8010270:	e006      	b.n	8010280 <MotionEC_Run+0x414>
 8010272:	bf00      	nop
 8010274:	20000000 	.word	0x20000000
 8010278:	3fe00000 	.word	0x3fe00000
 801027c:	42652edf 	.word	0x42652edf
 8010280:	ee0e 0a10 	vmov	s28, r0
 8010284:	7fe3      	ldrb	r3, [r4, #31]
 8010286:	ed85 ea03 	vstr	s28, [r5, #12]
 801028a:	2b00      	cmp	r3, #0
 801028c:	f040 8116 	bne.w	80104bc <MotionEC_Run+0x650>
 8010290:	7f23      	ldrb	r3, [r4, #28]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d06a      	beq.n	801036c <MotionEC_Run+0x500>
 8010296:	ed96 5a0d 	vldr	s10, [r6, #52]	; 0x34
 801029a:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 801029e:	edd6 5a10 	vldr	s11, [r6, #64]	; 0x40
 80102a2:	ed97 6a06 	vldr	s12, [r7, #24]
 80102a6:	edd6 4a0b 	vldr	s9, [r6, #44]	; 0x2c
 80102aa:	ed96 4a0e 	vldr	s8, [r6, #56]	; 0x38
 80102ae:	ed86 9a0d 	vstr	s18, [r6, #52]	; 0x34
 80102b2:	ee65 6a68 	vnmul.f32	s13, s10, s17
 80102b6:	ee29 7a67 	vnmul.f32	s14, s18, s15
 80102ba:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80102be:	eea5 7a2a 	vfma.f32	s14, s10, s21
 80102c2:	eee5 6a89 	vfma.f32	s13, s11, s18
 80102c6:	eee5 7aea 	vfms.f32	s15, s11, s21
 80102ca:	ed96 5a08 	vldr	s10, [r6, #32]
 80102ce:	edc6 aa0a 	vstr	s21, [r6, #40]	; 0x28
 80102d2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80102d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102da:	eee5 7a0a 	vfma.f32	s15, s10, s20
 80102de:	eea8 7a24 	vfma.f32	s14, s16, s9
 80102e2:	eee9 6a84 	vfma.f32	s13, s19, s8
 80102e6:	bf0c      	ite	eq
 80102e8:	ed96 6a02 	vldreq	s12, [r6, #8]
 80102ec:	ed86 6a02 	vstrne	s12, [r6, #8]
 80102f0:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80102f4:	eec3 5a86 	vdiv.f32	s11, s7, s12
 80102f8:	eee4 6aca 	vfms.f32	s13, s9, s20
 80102fc:	eea9 7ac5 	vfms.f32	s14, s19, s10
 8010300:	eee8 7a44 	vfms.f32	s15, s16, s8
 8010304:	edd6 4a0f 	vldr	s9, [r6, #60]	; 0x3c
 8010308:	ed96 6a09 	vldr	s12, [r6, #36]	; 0x24
 801030c:	ed96 5a0c 	vldr	s10, [r6, #48]	; 0x30
 8010310:	ed86 aa0e 	vstr	s20, [r6, #56]	; 0x38
 8010314:	eeec 7a86 	vfma.f32	s15, s25, s12
 8010318:	eeeb 6a24 	vfma.f32	s13, s22, s9
 801031c:	eeac 7a05 	vfma.f32	s14, s24, s10
 8010320:	eeec 7a64 	vfms.f32	s15, s24, s9
 8010324:	eeab 7a46 	vfms.f32	s14, s22, s12
 8010328:	eeec 6ac5 	vfms.f32	s13, s25, s10
 801032c:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 801027c <MotionEC_Run+0x410>
 8010330:	ed86 8a08 	vstr	s16, [r6, #32]
 8010334:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010338:	ee67 7a86 	vmul.f32	s15, s15, s12
 801033c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010340:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8010344:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010348:	ee27 7a25 	vmul.f32	s14, s14, s11
 801034c:	edc5 6a07 	vstr	s13, [r5, #28]
 8010350:	edc5 7a08 	vstr	s15, [r5, #32]
 8010354:	edc6 9a0b 	vstr	s19, [r6, #44]	; 0x2c
 8010358:	ed86 ca09 	vstr	s24, [r6, #36]	; 0x24
 801035c:	ed86 ba0c 	vstr	s22, [r6, #48]	; 0x30
 8010360:	ed85 7a09 	vstr	s14, [r5, #36]	; 0x24
 8010364:	edc6 ca0f 	vstr	s25, [r6, #60]	; 0x3c
 8010368:	edc6 8a10 	vstr	s17, [r6, #64]	; 0x40
 801036c:	7f63      	ldrb	r3, [r4, #29]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d149      	bne.n	8010406 <MotionEC_Run+0x59a>
 8010372:	7fa3      	ldrb	r3, [r4, #30]
 8010374:	b1bb      	cbz	r3, 80103a6 <MotionEC_Run+0x53a>
 8010376:	edd7 6a00 	vldr	s13, [r7]
 801037a:	ed97 7a01 	vldr	s14, [r7, #4]
 801037e:	edd7 7a02 	vldr	s15, [r7, #8]
 8010382:	ed95 5a0a 	vldr	s10, [r5, #40]	; 0x28
 8010386:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801038a:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801038e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8010392:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010396:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801039a:	edc5 6a0d 	vstr	s13, [r5, #52]	; 0x34
 801039e:	ed85 7a0e 	vstr	s14, [r5, #56]	; 0x38
 80103a2:	edc5 7a0f 	vstr	s15, [r5, #60]	; 0x3c
 80103a6:	6828      	ldr	r0, [r5, #0]
 80103a8:	6869      	ldr	r1, [r5, #4]
 80103aa:	68aa      	ldr	r2, [r5, #8]
 80103ac:	68eb      	ldr	r3, [r5, #12]
 80103ae:	4c89      	ldr	r4, [pc, #548]	; (80105d4 <MotionEC_Run+0x768>)
 80103b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103b2:	b01f      	add	sp, #124	; 0x7c
 80103b4:	ecbd 8b10 	vpop	{d8-d15}
 80103b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103bc:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 80103c0:	1d23      	adds	r3, r4, #4
 80103c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80103c6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80103ca:	f104 0310 	add.w	r3, r4, #16
 80103ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80103d2:	2300      	movs	r3, #0
 80103d4:	ed94 7a01 	vldr	s14, [r4, #4]
 80103d8:	edd4 7a02 	vldr	s15, [r4, #8]
 80103dc:	edd4 9a03 	vldr	s19, [r4, #12]
 80103e0:	ed94 9a04 	vldr	s18, [r4, #16]
 80103e4:	ed94 8a05 	vldr	s16, [r4, #20]
 80103e8:	edd4 8a06 	vldr	s17, [r4, #24]
 80103ec:	7333      	strb	r3, [r6, #12]
 80103ee:	edd4 aa01 	vldr	s21, [r4, #4]
 80103f2:	e60e      	b.n	8010012 <MotionEC_Run+0x1a6>
 80103f4:	2000      	movs	r0, #0
 80103f6:	2100      	movs	r1, #0
 80103f8:	e6b1      	b.n	801015e <MotionEC_Run+0x2f2>
 80103fa:	2000      	movs	r0, #0
 80103fc:	2100      	movs	r1, #0
 80103fe:	e708      	b.n	8010212 <MotionEC_Run+0x3a6>
 8010400:	2000      	movs	r0, #0
 8010402:	2100      	movs	r1, #0
 8010404:	e6d8      	b.n	80101b8 <MotionEC_Run+0x34c>
 8010406:	2300      	movs	r3, #0
 8010408:	eef1 6a6b 	vneg.f32	s13, s23
 801040c:	eeb1 7a4d 	vneg.f32	s14, s26
 8010410:	eef1 7a6d 	vneg.f32	s15, s27
 8010414:	aa12      	add	r2, sp, #72	; 0x48
 8010416:	a916      	add	r1, sp, #88	; 0x58
 8010418:	a80a      	add	r0, sp, #40	; 0x28
 801041a:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 801041e:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 8010422:	9316      	str	r3, [sp, #88]	; 0x58
 8010424:	9317      	str	r3, [sp, #92]	; 0x5c
 8010426:	9318      	str	r3, [sp, #96]	; 0x60
 8010428:	ed8d 7a0c 	vstr	s14, [sp, #48]	; 0x30
 801042c:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8010430:	ed8d ea0a 	vstr	s28, [sp, #40]	; 0x28
 8010434:	ed8d ea0e 	vstr	s28, [sp, #56]	; 0x38
 8010438:	edcd ba0f 	vstr	s23, [sp, #60]	; 0x3c
 801043c:	ed8d da10 	vstr	s26, [sp, #64]	; 0x40
 8010440:	edcd da11 	vstr	s27, [sp, #68]	; 0x44
 8010444:	9619      	str	r6, [sp, #100]	; 0x64
 8010446:	f7ff fc19 	bl	800fc7c <quaternionsMult>
 801044a:	aa1a      	add	r2, sp, #104	; 0x68
 801044c:	a812      	add	r0, sp, #72	; 0x48
 801044e:	a90e      	add	r1, sp, #56	; 0x38
 8010450:	f7ff fc14 	bl	800fc7c <quaternionsMult>
 8010454:	ed9d 9a1b 	vldr	s18, [sp, #108]	; 0x6c
 8010458:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 801045c:	eddd 8a1c 	vldr	s17, [sp, #112]	; 0x70
 8010460:	ed9d 8a1d 	vldr	s16, [sp, #116]	; 0x74
 8010464:	ee69 7a09 	vmul.f32	s15, s18, s18
 8010468:	eee7 7a07 	vfma.f32	s15, s14, s14
 801046c:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8010470:	eee8 7a08 	vfma.f32	s15, s16, s16
 8010474:	ee17 0a90 	vmov	r0, s15
 8010478:	f7f0 f86e 	bl	8000558 <__aeabi_f2d>
 801047c:	ec41 0b10 	vmov	d0, r0, r1
 8010480:	f009 fe1c 	bl	801a0bc <sqrt>
 8010484:	2000      	movs	r0, #0
 8010486:	ec53 2b10 	vmov	r2, r3, d0
 801048a:	4953      	ldr	r1, [pc, #332]	; (80105d8 <MotionEC_Run+0x76c>)
 801048c:	f7f0 f9e6 	bl	800085c <__aeabi_ddiv>
 8010490:	f7f0 fb92 	bl	8000bb8 <__aeabi_d2f>
 8010494:	ee07 0a90 	vmov	s15, r0
 8010498:	ee29 9a27 	vmul.f32	s18, s18, s15
 801049c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80104a0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80104a4:	ed8d 9a1b 	vstr	s18, [sp, #108]	; 0x6c
 80104a8:	edcd 8a1c 	vstr	s17, [sp, #112]	; 0x70
 80104ac:	ed8d 8a1d 	vstr	s16, [sp, #116]	; 0x74
 80104b0:	ab1b      	add	r3, sp, #108	; 0x6c
 80104b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80104b4:	62a8      	str	r0, [r5, #40]	; 0x28
 80104b6:	62e9      	str	r1, [r5, #44]	; 0x2c
 80104b8:	632a      	str	r2, [r5, #48]	; 0x30
 80104ba:	e75a      	b.n	8010372 <MotionEC_Run+0x506>
 80104bc:	ee6d 6a4d 	vnmul.f32	s13, s26, s26
 80104c0:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
 80104c4:	eef0 fa00 	vmov.f32	s31, #0	; 0x40000000  2.0
 80104c8:	eef0 7a4f 	vmov.f32	s15, s30
 80104cc:	eee6 7aaf 	vfma.f32	s15, s13, s31
 80104d0:	ee2d 7aed 	vnmul.f32	s14, s27, s27
 80104d4:	edcd 6a03 	vstr	s13, [sp, #12]
 80104d8:	eee7 7a2f 	vfma.f32	s15, s14, s31
 80104dc:	ee17 0a90 	vmov	r0, s15
 80104e0:	f7f0 f83a 	bl	8000558 <__aeabi_f2d>
 80104e4:	ee6b 7a8d 	vmul.f32	s15, s23, s26
 80104e8:	e9cd 0100 	strd	r0, r1, [sp]
 80104ec:	eeed 7a8e 	vfma.f32	s15, s27, s28
 80104f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80104f4:	ee17 0a90 	vmov	r0, s15
 80104f8:	f7f0 f82e 	bl	8000558 <__aeabi_f2d>
 80104fc:	ed9d 1b00 	vldr	d1, [sp]
 8010500:	ec41 0b10 	vmov	d0, r0, r1
 8010504:	f009 fd2a 	bl	8019f5c <atan2>
 8010508:	ec51 0b10 	vmov	r0, r1, d0
 801050c:	f7f0 fb54 	bl	8000bb8 <__aeabi_d2f>
 8010510:	ee6b 7aeb 	vnmul.f32	s15, s23, s23
 8010514:	eddd 6a03 	vldr	s13, [sp, #12]
 8010518:	9002      	str	r0, [sp, #8]
 801051a:	eea7 faaf 	vfma.f32	s30, s15, s31
 801051e:	ee07 0a10 	vmov	s14, r0
 8010522:	eea6 faaf 	vfma.f32	s30, s13, s31
 8010526:	eef1 ea47 	vneg.f32	s29, s14
 801052a:	edc5 ea04 	vstr	s29, [r5, #16]
 801052e:	ee1f 0a10 	vmov	r0, s30
 8010532:	f7f0 f811 	bl	8000558 <__aeabi_f2d>
 8010536:	ee6b 7a8e 	vmul.f32	s15, s23, s28
 801053a:	e9cd 0100 	strd	r0, r1, [sp]
 801053e:	eeed 7a2d 	vfma.f32	s15, s26, s27
 8010542:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010546:	ee17 0a90 	vmov	r0, s15
 801054a:	f7f0 f805 	bl	8000558 <__aeabi_f2d>
 801054e:	ed9d 1b00 	vldr	d1, [sp]
 8010552:	ec41 0b10 	vmov	d0, r0, r1
 8010556:	f009 fd01 	bl	8019f5c <atan2>
 801055a:	ec51 0b10 	vmov	r0, r1, d0
 801055e:	f7f0 fb2b 	bl	8000bb8 <__aeabi_d2f>
 8010562:	ee6e 7a4d 	vnmul.f32	s15, s28, s26
 8010566:	ee07 0a10 	vmov	s14, r0
 801056a:	eeeb 7aad 	vfma.f32	s15, s23, s27
 801056e:	eeb1 fa47 	vneg.f32	s30, s14
 8010572:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010576:	ed85 fa05 	vstr	s30, [r5, #20]
 801057a:	ee17 0a90 	vmov	r0, s15
 801057e:	f7ef ffeb 	bl	8000558 <__aeabi_f2d>
 8010582:	ec41 0b10 	vmov	d0, r0, r1
 8010586:	f009 fcaf 	bl	8019ee8 <asin>
 801058a:	ec51 0b10 	vmov	r0, r1, d0
 801058e:	f7f0 fb13 	bl	8000bb8 <__aeabi_d2f>
 8010592:	ed9d 7a02 	vldr	s14, [sp, #8]
 8010596:	61a8      	str	r0, [r5, #24]
 8010598:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801059c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105a0:	bfc8      	it	gt
 80105a2:	eddf ea0e 	vldrgt	s29, [pc, #56]	; 80105dc <MotionEC_Run+0x770>
 80105a6:	ee07 0a90 	vmov	s15, r0
 80105aa:	bfc8      	it	gt
 80105ac:	ee7e eac7 	vsubgt.f32	s29, s29, s14
 80105b0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80105e0 <MotionEC_Run+0x774>
 80105b4:	ee6e ea87 	vmul.f32	s29, s29, s14
 80105b8:	ee2f fa07 	vmul.f32	s30, s30, s14
 80105bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80105c0:	edc5 ea04 	vstr	s29, [r5, #16]
 80105c4:	ed85 fa05 	vstr	s30, [r5, #20]
 80105c8:	edc5 7a06 	vstr	s15, [r5, #24]
 80105cc:	e660      	b.n	8010290 <MotionEC_Run+0x424>
 80105ce:	ed9f ea05 	vldr	s28, [pc, #20]	; 80105e4 <MotionEC_Run+0x778>
 80105d2:	e657      	b.n	8010284 <MotionEC_Run+0x418>
 80105d4:	20000010 	.word	0x20000010
 80105d8:	3ff00000 	.word	0x3ff00000
 80105dc:	40c90fdc 	.word	0x40c90fdc
 80105e0:	42652edf 	.word	0x42652edf
 80105e4:	00000000 	.word	0x00000000

080105e8 <MotionEC_GetOrientationEnable>:
 80105e8:	4b02      	ldr	r3, [pc, #8]	; (80105f4 <MotionEC_GetOrientationEnable+0xc>)
 80105ea:	781a      	ldrb	r2, [r3, #0]
 80105ec:	b10a      	cbz	r2, 80105f2 <MotionEC_GetOrientationEnable+0xa>
 80105ee:	7fdb      	ldrb	r3, [r3, #31]
 80105f0:	7003      	strb	r3, [r0, #0]
 80105f2:	4770      	bx	lr
 80105f4:	200015bc 	.word	0x200015bc

080105f8 <MotionEC_SetOrientationEnable>:
 80105f8:	4b02      	ldr	r3, [pc, #8]	; (8010604 <MotionEC_SetOrientationEnable+0xc>)
 80105fa:	781a      	ldrb	r2, [r3, #0]
 80105fc:	b102      	cbz	r2, 8010600 <MotionEC_SetOrientationEnable+0x8>
 80105fe:	77d8      	strb	r0, [r3, #31]
 8010600:	4770      	bx	lr
 8010602:	bf00      	nop
 8010604:	200015bc 	.word	0x200015bc

08010608 <MotionEC_GetVirtualGyroEnable>:
 8010608:	4b02      	ldr	r3, [pc, #8]	; (8010614 <MotionEC_GetVirtualGyroEnable+0xc>)
 801060a:	781a      	ldrb	r2, [r3, #0]
 801060c:	b10a      	cbz	r2, 8010612 <MotionEC_GetVirtualGyroEnable+0xa>
 801060e:	7f1b      	ldrb	r3, [r3, #28]
 8010610:	7003      	strb	r3, [r0, #0]
 8010612:	4770      	bx	lr
 8010614:	200015bc 	.word	0x200015bc

08010618 <MotionEC_SetVirtualGyroEnable>:
 8010618:	4b02      	ldr	r3, [pc, #8]	; (8010624 <MotionEC_SetVirtualGyroEnable+0xc>)
 801061a:	781a      	ldrb	r2, [r3, #0]
 801061c:	b102      	cbz	r2, 8010620 <MotionEC_SetVirtualGyroEnable+0x8>
 801061e:	7718      	strb	r0, [r3, #28]
 8010620:	4770      	bx	lr
 8010622:	bf00      	nop
 8010624:	200015bc 	.word	0x200015bc

08010628 <MotionEC_GetGravityEnable>:
 8010628:	4b02      	ldr	r3, [pc, #8]	; (8010634 <MotionEC_GetGravityEnable+0xc>)
 801062a:	781a      	ldrb	r2, [r3, #0]
 801062c:	b10a      	cbz	r2, 8010632 <MotionEC_GetGravityEnable+0xa>
 801062e:	7f5b      	ldrb	r3, [r3, #29]
 8010630:	7003      	strb	r3, [r0, #0]
 8010632:	4770      	bx	lr
 8010634:	200015bc 	.word	0x200015bc

08010638 <MotionEC_SetGravityEnable>:
 8010638:	4b02      	ldr	r3, [pc, #8]	; (8010644 <MotionEC_SetGravityEnable+0xc>)
 801063a:	781a      	ldrb	r2, [r3, #0]
 801063c:	b102      	cbz	r2, 8010640 <MotionEC_SetGravityEnable+0x8>
 801063e:	7758      	strb	r0, [r3, #29]
 8010640:	4770      	bx	lr
 8010642:	bf00      	nop
 8010644:	200015bc 	.word	0x200015bc

08010648 <MotionEC_GetLinearAccEnable>:
 8010648:	4b02      	ldr	r3, [pc, #8]	; (8010654 <MotionEC_GetLinearAccEnable+0xc>)
 801064a:	781a      	ldrb	r2, [r3, #0]
 801064c:	b10a      	cbz	r2, 8010652 <MotionEC_GetLinearAccEnable+0xa>
 801064e:	7f9b      	ldrb	r3, [r3, #30]
 8010650:	7003      	strb	r3, [r0, #0]
 8010652:	4770      	bx	lr
 8010654:	200015bc 	.word	0x200015bc

08010658 <MotionEC_SetLinearAccEnable>:
 8010658:	4b02      	ldr	r3, [pc, #8]	; (8010664 <MotionEC_SetLinearAccEnable+0xc>)
 801065a:	781a      	ldrb	r2, [r3, #0]
 801065c:	b102      	cbz	r2, 8010660 <MotionEC_SetLinearAccEnable+0x8>
 801065e:	7798      	strb	r0, [r3, #30]
 8010660:	4770      	bx	lr
 8010662:	bf00      	nop
 8010664:	200015bc 	.word	0x200015bc

08010668 <MotionEC_GetLibVersion>:
 8010668:	4b0f      	ldr	r3, [pc, #60]	; (80106a8 <MotionEC_GetLibVersion+0x40>)
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	b90b      	cbnz	r3, 8010672 <MotionEC_GetLibVersion+0xa>
 801066e:	4618      	mov	r0, r3
 8010670:	4770      	bx	lr
 8010672:	b470      	push	{r4, r5, r6}
 8010674:	4e0d      	ldr	r6, [pc, #52]	; (80106ac <MotionEC_GetLibVersion+0x44>)
 8010676:	4605      	mov	r5, r0
 8010678:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801067a:	b08b      	sub	sp, #44	; 0x2c
 801067c:	ac01      	add	r4, sp, #4
 801067e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010680:	6833      	ldr	r3, [r6, #0]
 8010682:	f824 3b02 	strh.w	r3, [r4], #2
 8010686:	0c1b      	lsrs	r3, r3, #16
 8010688:	7023      	strb	r3, [r4, #0]
 801068a:	ac01      	add	r4, sp, #4
 801068c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801068e:	8826      	ldrh	r6, [r4, #0]
 8010690:	60eb      	str	r3, [r5, #12]
 8010692:	78a4      	ldrb	r4, [r4, #2]
 8010694:	6028      	str	r0, [r5, #0]
 8010696:	2312      	movs	r3, #18
 8010698:	4618      	mov	r0, r3
 801069a:	6069      	str	r1, [r5, #4]
 801069c:	60aa      	str	r2, [r5, #8]
 801069e:	822e      	strh	r6, [r5, #16]
 80106a0:	74ac      	strb	r4, [r5, #18]
 80106a2:	b00b      	add	sp, #44	; 0x2c
 80106a4:	bc70      	pop	{r4, r5, r6}
 80106a6:	4770      	bx	lr
 80106a8:	200015bc 	.word	0x200015bc
 80106ac:	0801ca08 	.word	0x0801ca08

080106b0 <MotionAC_Initialize>:
 80106b0:	4a5a      	ldr	r2, [pc, #360]	; (801081c <MotionAC_Initialize+0x16c>)
 80106b2:	495b      	ldr	r1, [pc, #364]	; (8010820 <MotionAC_Initialize+0x170>)
 80106b4:	6813      	ldr	r3, [r2, #0]
 80106b6:	f023 0301 	bic.w	r3, r3, #1
 80106ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80106be:	6013      	str	r3, [r2, #0]
 80106c0:	680b      	ldr	r3, [r1, #0]
 80106c2:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80106c6:	4013      	ands	r3, r2
 80106c8:	f24c 2440 	movw	r4, #49728	; 0xc240
 80106cc:	42a3      	cmp	r3, r4
 80106ce:	b091      	sub	sp, #68	; 0x44
 80106d0:	d013      	beq.n	80106fa <MotionAC_Initialize+0x4a>
 80106d2:	680b      	ldr	r3, [r1, #0]
 80106d4:	f24c 2170 	movw	r1, #49776	; 0xc270
 80106d8:	4013      	ands	r3, r2
 80106da:	428b      	cmp	r3, r1
 80106dc:	d00d      	beq.n	80106fa <MotionAC_Initialize+0x4a>
 80106de:	4b51      	ldr	r3, [pc, #324]	; (8010824 <MotionAC_Initialize+0x174>)
 80106e0:	2201      	movs	r2, #1
 80106e2:	601a      	str	r2, [r3, #0]
 80106e4:	681a      	ldr	r2, [r3, #0]
 80106e6:	2a00      	cmp	r2, #0
 80106e8:	d1fc      	bne.n	80106e4 <MotionAC_Initialize+0x34>
 80106ea:	4b4f      	ldr	r3, [pc, #316]	; (8010828 <MotionAC_Initialize+0x178>)
 80106ec:	4a4f      	ldr	r2, [pc, #316]	; (801082c <MotionAC_Initialize+0x17c>)
 80106ee:	601a      	str	r2, [r3, #0]
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	4b4f      	ldr	r3, [pc, #316]	; (8010830 <MotionAC_Initialize+0x180>)
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d01f      	beq.n	8010738 <MotionAC_Initialize+0x88>
 80106f8:	e7fe      	b.n	80106f8 <MotionAC_Initialize+0x48>
 80106fa:	4b4e      	ldr	r3, [pc, #312]	; (8010834 <MotionAC_Initialize+0x184>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d1ed      	bne.n	80106de <MotionAC_Initialize+0x2e>
 8010702:	4a4d      	ldr	r2, [pc, #308]	; (8010838 <MotionAC_Initialize+0x188>)
 8010704:	6813      	ldr	r3, [r2, #0]
 8010706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801070a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801070e:	d006      	beq.n	801071e <MotionAC_Initialize+0x6e>
 8010710:	6813      	ldr	r3, [r2, #0]
 8010712:	f240 4283 	movw	r2, #1155	; 0x483
 8010716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801071a:	4293      	cmp	r3, r2
 801071c:	d1df      	bne.n	80106de <MotionAC_Initialize+0x2e>
 801071e:	4b47      	ldr	r3, [pc, #284]	; (801083c <MotionAC_Initialize+0x18c>)
 8010720:	2201      	movs	r2, #1
 8010722:	601a      	str	r2, [r3, #0]
 8010724:	681a      	ldr	r2, [r3, #0]
 8010726:	2a00      	cmp	r2, #0
 8010728:	d1fc      	bne.n	8010724 <MotionAC_Initialize+0x74>
 801072a:	4b45      	ldr	r3, [pc, #276]	; (8010840 <MotionAC_Initialize+0x190>)
 801072c:	4a3f      	ldr	r2, [pc, #252]	; (801082c <MotionAC_Initialize+0x17c>)
 801072e:	601a      	str	r2, [r3, #0]
 8010730:	681a      	ldr	r2, [r3, #0]
 8010732:	4b3f      	ldr	r3, [pc, #252]	; (8010830 <MotionAC_Initialize+0x180>)
 8010734:	429a      	cmp	r2, r3
 8010736:	d1df      	bne.n	80106f8 <MotionAC_Initialize+0x48>
 8010738:	4f42      	ldr	r7, [pc, #264]	; (8010844 <MotionAC_Initialize+0x194>)
 801073a:	f04f 0901 	mov.w	r9, #1
 801073e:	4606      	mov	r6, r0
 8010740:	f887 9000 	strb.w	r9, [r7]
 8010744:	b9e0      	cbnz	r0, 8010780 <MotionAC_Initialize+0xd0>
 8010746:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8010848 <MotionAC_Initialize+0x198>
 801074a:	f88d 9004 	strb.w	r9, [sp, #4]
 801074e:	f108 0514 	add.w	r5, r8, #20
 8010752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010754:	ac03      	add	r4, sp, #12
 8010756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801075a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801075c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801075e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010760:	682a      	ldr	r2, [r5, #0]
 8010762:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8010766:	6022      	str	r2, [r4, #0]
 8010768:	a901      	add	r1, sp, #4
 801076a:	203c      	movs	r0, #60	; 0x3c
 801076c:	9302      	str	r3, [sp, #8]
 801076e:	f7ff f870 	bl	800f852 <MotionAC_SaveCalInNVM>
 8010772:	f888 6000 	strb.w	r6, [r8]
 8010776:	2300      	movs	r3, #0
 8010778:	707b      	strb	r3, [r7, #1]
 801077a:	b011      	add	sp, #68	; 0x44
 801077c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010780:	4c31      	ldr	r4, [pc, #196]	; (8010848 <MotionAC_Initialize+0x198>)
 8010782:	4832      	ldr	r0, [pc, #200]	; (801084c <MotionAC_Initialize+0x19c>)
 8010784:	4a32      	ldr	r2, [pc, #200]	; (8010850 <MotionAC_Initialize+0x1a0>)
 8010786:	2114      	movs	r1, #20
 8010788:	f44f 13f0 	mov.w	r3, #1966080	; 0x1e0000
 801078c:	f8c4 1464 	str.w	r1, [r4, #1124]	; 0x464
 8010790:	6523      	str	r3, [r4, #80]	; 0x50
 8010792:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010796:	f44f 03dc 	mov.w	r3, #7208960	; 0x6e0000
 801079a:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
 801079e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
 80107a2:	f504 618c 	add.w	r1, r4, #1120	; 0x460
 80107a6:	f504 638d 	add.w	r3, r4, #1128	; 0x468
 80107aa:	2500      	movs	r5, #0
 80107ac:	6008      	str	r0, [r1, #0]
 80107ae:	601a      	str	r2, [r3, #0]
 80107b0:	4629      	mov	r1, r5
 80107b2:	222e      	movs	r2, #46	; 0x2e
 80107b4:	f104 0016 	add.w	r0, r4, #22
 80107b8:	7025      	strb	r5, [r4, #0]
 80107ba:	f884 546c 	strb.w	r5, [r4, #1132]	; 0x46c
 80107be:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 80107c2:	6565      	str	r5, [r4, #84]	; 0x54
 80107c4:	6125      	str	r5, [r4, #16]
 80107c6:	64a5      	str	r5, [r4, #72]	; 0x48
 80107c8:	f006 fc1a 	bl	8017000 <memset>
 80107cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80107d0:	2202      	movs	r2, #2
 80107d2:	a901      	add	r1, sp, #4
 80107d4:	203c      	movs	r0, #60	; 0x3c
 80107d6:	f884 9015 	strb.w	r9, [r4, #21]
 80107da:	7522      	strb	r2, [r4, #20]
 80107dc:	6263      	str	r3, [r4, #36]	; 0x24
 80107de:	6363      	str	r3, [r4, #52]	; 0x34
 80107e0:	6463      	str	r3, [r4, #68]	; 0x44
 80107e2:	f7ff f829 	bl	800f838 <MotionAC_LoadCalFromNVM>
 80107e6:	4548      	cmp	r0, r9
 80107e8:	d0c5      	beq.n	8010776 <MotionAC_Initialize+0xc6>
 80107ea:	f8dd c008 	ldr.w	ip, [sp, #8]
 80107ee:	f88d 5004 	strb.w	r5, [sp, #4]
 80107f2:	f1bc 0f00 	cmp.w	ip, #0
 80107f6:	d0be      	beq.n	8010776 <MotionAC_Initialize+0xc6>
 80107f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d0ba      	beq.n	8010776 <MotionAC_Initialize+0xc6>
 8010800:	ae03      	add	r6, sp, #12
 8010802:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010804:	f104 0514 	add.w	r5, r4, #20
 8010808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801080a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801080c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801080e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010812:	6833      	ldr	r3, [r6, #0]
 8010814:	602b      	str	r3, [r5, #0]
 8010816:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
 801081a:	e7ac      	b.n	8010776 <MotionAC_Initialize+0xc6>
 801081c:	e0002000 	.word	0xe0002000
 8010820:	e000ed00 	.word	0xe000ed00
 8010824:	40023008 	.word	0x40023008
 8010828:	40023000 	.word	0x40023000
 801082c:	f407a5c2 	.word	0xf407a5c2
 8010830:	b5e8b5cd 	.word	0xb5e8b5cd
 8010834:	e0042000 	.word	0xe0042000
 8010838:	5c001000 	.word	0x5c001000
 801083c:	58024c08 	.word	0x58024c08
 8010840:	58024c00 	.word	0x58024c00
 8010844:	200015dc 	.word	0x200015dc
 8010848:	2000bf20 	.word	0x2000bf20
 801084c:	3a83126f 	.word	0x3a83126f
 8010850:	3e4ccccd 	.word	0x3e4ccccd

08010854 <MotionAC_GetLibVersion>:
 8010854:	4b0f      	ldr	r3, [pc, #60]	; (8010894 <MotionAC_GetLibVersion+0x40>)
 8010856:	781b      	ldrb	r3, [r3, #0]
 8010858:	b90b      	cbnz	r3, 801085e <MotionAC_GetLibVersion+0xa>
 801085a:	4618      	mov	r0, r3
 801085c:	4770      	bx	lr
 801085e:	b470      	push	{r4, r5, r6}
 8010860:	4e0d      	ldr	r6, [pc, #52]	; (8010898 <MotionAC_GetLibVersion+0x44>)
 8010862:	4605      	mov	r5, r0
 8010864:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010866:	b08b      	sub	sp, #44	; 0x2c
 8010868:	ac01      	add	r4, sp, #4
 801086a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801086c:	6833      	ldr	r3, [r6, #0]
 801086e:	f824 3b02 	strh.w	r3, [r4], #2
 8010872:	0c1b      	lsrs	r3, r3, #16
 8010874:	7023      	strb	r3, [r4, #0]
 8010876:	ac01      	add	r4, sp, #4
 8010878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801087a:	8826      	ldrh	r6, [r4, #0]
 801087c:	60eb      	str	r3, [r5, #12]
 801087e:	78a4      	ldrb	r4, [r4, #2]
 8010880:	6028      	str	r0, [r5, #0]
 8010882:	2312      	movs	r3, #18
 8010884:	4618      	mov	r0, r3
 8010886:	6069      	str	r1, [r5, #4]
 8010888:	60aa      	str	r2, [r5, #8]
 801088a:	822e      	strh	r6, [r5, #16]
 801088c:	74ac      	strb	r4, [r5, #18]
 801088e:	b00b      	add	sp, #44	; 0x2c
 8010890:	bc70      	pop	{r4, r5, r6}
 8010892:	4770      	bx	lr
 8010894:	200015dc 	.word	0x200015dc
 8010898:	0801ca2c 	.word	0x0801ca2c

0801089c <MotionGC_Initialize>:
 801089c:	4a35      	ldr	r2, [pc, #212]	; (8010974 <MotionGC_Initialize+0xd8>)
 801089e:	4936      	ldr	r1, [pc, #216]	; (8010978 <MotionGC_Initialize+0xdc>)
 80108a0:	6813      	ldr	r3, [r2, #0]
 80108a2:	f023 0301 	bic.w	r3, r3, #1
 80108a6:	b470      	push	{r4, r5, r6}
 80108a8:	6013      	str	r3, [r2, #0]
 80108aa:	680b      	ldr	r3, [r1, #0]
 80108ac:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80108b0:	4013      	ands	r3, r2
 80108b2:	f24c 2440 	movw	r4, #49728	; 0xc240
 80108b6:	42a3      	cmp	r3, r4
 80108b8:	d013      	beq.n	80108e2 <MotionGC_Initialize+0x46>
 80108ba:	680b      	ldr	r3, [r1, #0]
 80108bc:	f24c 2170 	movw	r1, #49776	; 0xc270
 80108c0:	4013      	ands	r3, r2
 80108c2:	428b      	cmp	r3, r1
 80108c4:	d00d      	beq.n	80108e2 <MotionGC_Initialize+0x46>
 80108c6:	4b2d      	ldr	r3, [pc, #180]	; (801097c <MotionGC_Initialize+0xe0>)
 80108c8:	2201      	movs	r2, #1
 80108ca:	601a      	str	r2, [r3, #0]
 80108cc:	681a      	ldr	r2, [r3, #0]
 80108ce:	2a00      	cmp	r2, #0
 80108d0:	d1fc      	bne.n	80108cc <MotionGC_Initialize+0x30>
 80108d2:	4b2b      	ldr	r3, [pc, #172]	; (8010980 <MotionGC_Initialize+0xe4>)
 80108d4:	4a2b      	ldr	r2, [pc, #172]	; (8010984 <MotionGC_Initialize+0xe8>)
 80108d6:	601a      	str	r2, [r3, #0]
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	4b2b      	ldr	r3, [pc, #172]	; (8010988 <MotionGC_Initialize+0xec>)
 80108dc:	429a      	cmp	r2, r3
 80108de:	d01f      	beq.n	8010920 <MotionGC_Initialize+0x84>
 80108e0:	e7fe      	b.n	80108e0 <MotionGC_Initialize+0x44>
 80108e2:	4b2a      	ldr	r3, [pc, #168]	; (801098c <MotionGC_Initialize+0xf0>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d1ed      	bne.n	80108c6 <MotionGC_Initialize+0x2a>
 80108ea:	4a29      	ldr	r2, [pc, #164]	; (8010990 <MotionGC_Initialize+0xf4>)
 80108ec:	6813      	ldr	r3, [r2, #0]
 80108ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80108f2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80108f6:	d006      	beq.n	8010906 <MotionGC_Initialize+0x6a>
 80108f8:	6813      	ldr	r3, [r2, #0]
 80108fa:	f240 4283 	movw	r2, #1155	; 0x483
 80108fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010902:	4293      	cmp	r3, r2
 8010904:	d1df      	bne.n	80108c6 <MotionGC_Initialize+0x2a>
 8010906:	4b23      	ldr	r3, [pc, #140]	; (8010994 <MotionGC_Initialize+0xf8>)
 8010908:	2201      	movs	r2, #1
 801090a:	601a      	str	r2, [r3, #0]
 801090c:	681a      	ldr	r2, [r3, #0]
 801090e:	2a00      	cmp	r2, #0
 8010910:	d1fc      	bne.n	801090c <MotionGC_Initialize+0x70>
 8010912:	4b21      	ldr	r3, [pc, #132]	; (8010998 <MotionGC_Initialize+0xfc>)
 8010914:	4a1b      	ldr	r2, [pc, #108]	; (8010984 <MotionGC_Initialize+0xe8>)
 8010916:	601a      	str	r2, [r3, #0]
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	4b1b      	ldr	r3, [pc, #108]	; (8010988 <MotionGC_Initialize+0xec>)
 801091c:	429a      	cmp	r2, r3
 801091e:	d1df      	bne.n	80108e0 <MotionGC_Initialize+0x44>
 8010920:	ed90 7a00 	vldr	s14, [r0]
 8010924:	eddf 6a1d 	vldr	s13, [pc, #116]	; 801099c <MotionGC_Initialize+0x100>
 8010928:	4b1d      	ldr	r3, [pc, #116]	; (80109a0 <MotionGC_Initialize+0x104>)
 801092a:	4a1e      	ldr	r2, [pc, #120]	; (80109a4 <MotionGC_Initialize+0x108>)
 801092c:	605a      	str	r2, [r3, #4]
 801092e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010932:	2200      	movs	r2, #0
 8010934:	2101      	movs	r1, #1
 8010936:	4e1c      	ldr	r6, [pc, #112]	; (80109a8 <MotionGC_Initialize+0x10c>)
 8010938:	4c1c      	ldr	r4, [pc, #112]	; (80109ac <MotionGC_Initialize+0x110>)
 801093a:	7019      	strb	r1, [r3, #0]
 801093c:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 8010940:	f04f 557c 	mov.w	r5, #1056964608	; 0x3f000000
 8010944:	481a      	ldr	r0, [pc, #104]	; (80109b0 <MotionGC_Initialize+0x114>)
 8010946:	6159      	str	r1, [r3, #20]
 8010948:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 801094c:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
 8010950:	4918      	ldr	r1, [pc, #96]	; (80109b4 <MotionGC_Initialize+0x118>)
 8010952:	609e      	str	r6, [r3, #8]
 8010954:	2200      	movs	r2, #0
 8010956:	60dd      	str	r5, [r3, #12]
 8010958:	611c      	str	r4, [r3, #16]
 801095a:	edc3 7a08 	vstr	s15, [r3, #32]
 801095e:	6199      	str	r1, [r3, #24]
 8010960:	61d8      	str	r0, [r3, #28]
 8010962:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8010966:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 801096a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 801096e:	bc70      	pop	{r4, r5, r6}
 8010970:	4770      	bx	lr
 8010972:	bf00      	nop
 8010974:	e0002000 	.word	0xe0002000
 8010978:	e000ed00 	.word	0xe000ed00
 801097c:	40023008 	.word	0x40023008
 8010980:	40023000 	.word	0x40023000
 8010984:	f407a5c2 	.word	0xf407a5c2
 8010988:	b5e8b5cd 	.word	0xb5e8b5cd
 801098c:	e0042000 	.word	0xe0042000
 8010990:	5c001000 	.word	0x5c001000
 8010994:	58024c08 	.word	0x58024c08
 8010998:	58024c00 	.word	0x58024c00
 801099c:	3e4ccccd 	.word	0x3e4ccccd
 80109a0:	200015e0 	.word	0x200015e0
 80109a4:	3b83126f 	.word	0x3b83126f
 80109a8:	3dcccccd 	.word	0x3dcccccd
 80109ac:	3b03126f 	.word	0x3b03126f
 80109b0:	3fa66666 	.word	0x3fa66666
 80109b4:	41700000 	.word	0x41700000

080109b8 <MotionGC_GetLibVersion>:
 80109b8:	4b0f      	ldr	r3, [pc, #60]	; (80109f8 <MotionGC_GetLibVersion+0x40>)
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	b90b      	cbnz	r3, 80109c2 <MotionGC_GetLibVersion+0xa>
 80109be:	4618      	mov	r0, r3
 80109c0:	4770      	bx	lr
 80109c2:	b470      	push	{r4, r5, r6}
 80109c4:	4e0d      	ldr	r6, [pc, #52]	; (80109fc <MotionGC_GetLibVersion+0x44>)
 80109c6:	4605      	mov	r5, r0
 80109c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80109ca:	b08b      	sub	sp, #44	; 0x2c
 80109cc:	ac01      	add	r4, sp, #4
 80109ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109d0:	6833      	ldr	r3, [r6, #0]
 80109d2:	f824 3b02 	strh.w	r3, [r4], #2
 80109d6:	0c1b      	lsrs	r3, r3, #16
 80109d8:	7023      	strb	r3, [r4, #0]
 80109da:	ac01      	add	r4, sp, #4
 80109dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80109de:	8826      	ldrh	r6, [r4, #0]
 80109e0:	60eb      	str	r3, [r5, #12]
 80109e2:	78a4      	ldrb	r4, [r4, #2]
 80109e4:	6028      	str	r0, [r5, #0]
 80109e6:	2312      	movs	r3, #18
 80109e8:	4618      	mov	r0, r3
 80109ea:	6069      	str	r1, [r5, #4]
 80109ec:	60aa      	str	r2, [r5, #8]
 80109ee:	822e      	strh	r6, [r5, #16]
 80109f0:	74ac      	strb	r4, [r5, #18]
 80109f2:	b00b      	add	sp, #44	; 0x2c
 80109f4:	bc70      	pop	{r4, r5, r6}
 80109f6:	4770      	bx	lr
 80109f8:	200015e0 	.word	0x200015e0
 80109fc:	0801ca58 	.word	0x0801ca58

08010a00 <MEMS_INV3x3>:
 8010a00:	ed90 6a01 	vldr	s12, [r0, #4]
 8010a04:	edd0 6a03 	vldr	s13, [r0, #12]
 8010a08:	ed90 7a05 	vldr	s14, [r0, #20]
 8010a0c:	edd0 7a07 	vldr	s15, [r0, #28]
 8010a10:	eeb4 6a66 	vcmp.f32	s12, s13
 8010a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a18:	b430      	push	{r4, r5}
 8010a1a:	d110      	bne.n	8010a3e <MEMS_INV3x3+0x3e>
 8010a1c:	ed90 6a02 	vldr	s12, [r0, #8]
 8010a20:	edd0 6a06 	vldr	s13, [r0, #24]
 8010a24:	eeb4 6a66 	vcmp.f32	s12, s13
 8010a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a2c:	d107      	bne.n	8010a3e <MEMS_INV3x3+0x3e>
 8010a2e:	eeb4 7a67 	vcmp.f32	s14, s15
 8010a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a36:	bf0c      	ite	eq
 8010a38:	2501      	moveq	r5, #1
 8010a3a:	2500      	movne	r5, #0
 8010a3c:	e000      	b.n	8010a40 <MEMS_INV3x3+0x40>
 8010a3e:	2500      	movs	r5, #0
 8010a40:	edd0 6a04 	vldr	s13, [r0, #16]
 8010a44:	688c      	ldr	r4, [r1, #8]
 8010a46:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8010a4a:	ed90 7a08 	vldr	s14, [r0, #32]
 8010a4e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010a52:	e9d1 2300 	ldrd	r2, r3, [r1]
 8010a56:	edc2 7a00 	vstr	s15, [r2]
 8010a5a:	ed90 6a03 	vldr	s12, [r0, #12]
 8010a5e:	edd0 7a08 	vldr	s15, [r0, #32]
 8010a62:	edd0 6a05 	vldr	s13, [r0, #20]
 8010a66:	ed90 7a06 	vldr	s14, [r0, #24]
 8010a6a:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 8010a6e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010a72:	edc3 7a00 	vstr	s15, [r3]
 8010a76:	ed90 6a04 	vldr	s12, [r0, #16]
 8010a7a:	ed90 7a06 	vldr	s14, [r0, #24]
 8010a7e:	edd0 6a03 	vldr	s13, [r0, #12]
 8010a82:	edd0 7a07 	vldr	s15, [r0, #28]
 8010a86:	ee27 7a46 	vnmul.f32	s14, s14, s12
 8010a8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010a8e:	ed84 7a00 	vstr	s14, [r4]
 8010a92:	edd0 7a01 	vldr	s15, [r0, #4]
 8010a96:	ed93 5a00 	vldr	s10, [r3]
 8010a9a:	edd0 6a00 	vldr	s13, [r0]
 8010a9e:	edd2 5a00 	vldr	s11, [r2]
 8010aa2:	ed90 6a02 	vldr	s12, [r0, #8]
 8010aa6:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010aaa:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8010aae:	eee7 7a06 	vfma.f32	s15, s14, s12
 8010ab2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aba:	d075      	beq.n	8010ba8 <MEMS_INV3x3+0x1a8>
 8010abc:	ed90 7a06 	vldr	s14, [r0, #24]
 8010ac0:	edd0 5a08 	vldr	s11, [r0, #32]
 8010ac4:	ee27 7a46 	vnmul.f32	s14, s14, s12
 8010ac8:	eea6 7aa5 	vfma.f32	s14, s13, s11
 8010acc:	ed83 7a01 	vstr	s14, [r3, #4]
 8010ad0:	edd0 5a07 	vldr	s11, [r0, #28]
 8010ad4:	ed90 7a00 	vldr	s14, [r0]
 8010ad8:	ed90 6a06 	vldr	s12, [r0, #24]
 8010adc:	edd0 6a01 	vldr	s13, [r0, #4]
 8010ae0:	ee27 7a65 	vnmul.f32	s14, s14, s11
 8010ae4:	eea6 7a26 	vfma.f32	s14, s12, s13
 8010ae8:	ed84 7a01 	vstr	s14, [r4, #4]
 8010aec:	edd0 5a03 	vldr	s11, [r0, #12]
 8010af0:	ed90 7a01 	vldr	s14, [r0, #4]
 8010af4:	ed90 6a04 	vldr	s12, [r0, #16]
 8010af8:	edd0 6a00 	vldr	s13, [r0]
 8010afc:	ee27 7a65 	vnmul.f32	s14, s14, s11
 8010b00:	eea6 7a26 	vfma.f32	s14, s12, s13
 8010b04:	ed84 7a02 	vstr	s14, [r4, #8]
 8010b08:	bb55      	cbnz	r5, 8010b60 <MEMS_INV3x3+0x160>
 8010b0a:	edd0 5a08 	vldr	s11, [r0, #32]
 8010b0e:	ed90 7a01 	vldr	s14, [r0, #4]
 8010b12:	ed90 6a07 	vldr	s12, [r0, #28]
 8010b16:	edd0 6a02 	vldr	s13, [r0, #8]
 8010b1a:	ee27 7a65 	vnmul.f32	s14, s14, s11
 8010b1e:	eea6 7a26 	vfma.f32	s14, s12, s13
 8010b22:	ed82 7a01 	vstr	s14, [r2, #4]
 8010b26:	edd0 5a04 	vldr	s11, [r0, #16]
 8010b2a:	ed90 7a02 	vldr	s14, [r0, #8]
 8010b2e:	ed90 6a05 	vldr	s12, [r0, #20]
 8010b32:	edd0 6a01 	vldr	s13, [r0, #4]
 8010b36:	ee27 7a65 	vnmul.f32	s14, s14, s11
 8010b3a:	eea6 7a26 	vfma.f32	s14, s12, s13
 8010b3e:	ed82 7a02 	vstr	s14, [r2, #8]
 8010b42:	edd0 5a05 	vldr	s11, [r0, #20]
 8010b46:	ed90 7a00 	vldr	s14, [r0]
 8010b4a:	ed90 6a03 	vldr	s12, [r0, #12]
 8010b4e:	edd0 6a02 	vldr	s13, [r0, #8]
 8010b52:	ee27 7a65 	vnmul.f32	s14, s14, s11
 8010b56:	eea6 7a26 	vfma.f32	s14, s12, s13
 8010b5a:	ed83 7a02 	vstr	s14, [r3, #8]
 8010b5e:	e005      	b.n	8010b6c <MEMS_INV3x3+0x16c>
 8010b60:	6818      	ldr	r0, [r3, #0]
 8010b62:	6050      	str	r0, [r2, #4]
 8010b64:	6820      	ldr	r0, [r4, #0]
 8010b66:	6090      	str	r0, [r2, #8]
 8010b68:	6862      	ldr	r2, [r4, #4]
 8010b6a:	609a      	str	r2, [r3, #8]
 8010b6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b74:	1f0a      	subs	r2, r1, #4
 8010b76:	3108      	adds	r1, #8
 8010b78:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8010b7c:	4291      	cmp	r1, r2
 8010b7e:	ed93 6a00 	vldr	s12, [r3]
 8010b82:	edd3 6a01 	vldr	s13, [r3, #4]
 8010b86:	edd3 7a02 	vldr	s15, [r3, #8]
 8010b8a:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010b8e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8010b92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010b96:	ed83 6a00 	vstr	s12, [r3]
 8010b9a:	edc3 6a01 	vstr	s13, [r3, #4]
 8010b9e:	edc3 7a02 	vstr	s15, [r3, #8]
 8010ba2:	d1e9      	bne.n	8010b78 <MEMS_INV3x3+0x178>
 8010ba4:	2001      	movs	r0, #1
 8010ba6:	e000      	b.n	8010baa <MEMS_INV3x3+0x1aa>
 8010ba8:	2000      	movs	r0, #0
 8010baa:	bc30      	pop	{r4, r5}
 8010bac:	4770      	bx	lr
	...

08010bb0 <Hessenberg_Form_Orthogonal>:
 8010bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bb4:	b08f      	sub	sp, #60	; 0x3c
 8010bb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bba:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8010bbe:	460c      	mov	r4, r1
 8010bc0:	2000      	movs	r0, #0
 8010bc2:	2700      	movs	r7, #0
 8010bc4:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 8010bc8:	b205      	sxth	r5, r0
 8010bca:	42aa      	cmp	r2, r5
 8010bcc:	dd11      	ble.n	8010bf2 <Hessenberg_Form_Orthogonal+0x42>
 8010bce:	4621      	mov	r1, r4
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	fa0f fc83 	sxth.w	ip, r3
 8010bd6:	3301      	adds	r3, #1
 8010bd8:	4565      	cmp	r5, ip
 8010bda:	fa0f fc83 	sxth.w	ip, r3
 8010bde:	bf0c      	ite	eq
 8010be0:	600e      	streq	r6, [r1, #0]
 8010be2:	600f      	strne	r7, [r1, #0]
 8010be4:	4562      	cmp	r2, ip
 8010be6:	f101 0104 	add.w	r1, r1, #4
 8010bea:	dcf2      	bgt.n	8010bd2 <Hessenberg_Form_Orthogonal+0x22>
 8010bec:	3001      	adds	r0, #1
 8010bee:	445c      	add	r4, fp
 8010bf0:	e7ea      	b.n	8010bc8 <Hessenberg_Form_Orthogonal+0x18>
 8010bf2:	2a02      	cmp	r2, #2
 8010bf4:	f340 811b 	ble.w	8010e2e <Hessenberg_Form_Orthogonal+0x27e>
 8010bf8:	9902      	ldr	r1, [sp, #8]
 8010bfa:	ed9f 5a8f 	vldr	s10, [pc, #572]	; 8010e38 <Hessenberg_Form_Orthogonal+0x288>
 8010bfe:	eddf 5a8f 	vldr	s11, [pc, #572]	; 8010e3c <Hessenberg_Form_Orthogonal+0x28c>
 8010c02:	4459      	add	r1, fp
 8010c04:	4608      	mov	r0, r1
 8010c06:	f10b 0104 	add.w	r1, fp, #4
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	9104      	str	r1, [sp, #16]
 8010c0e:	1e91      	subs	r1, r2, #2
 8010c10:	9301      	str	r3, [sp, #4]
 8010c12:	9106      	str	r1, [sp, #24]
 8010c14:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 8010c18:	4682      	mov	sl, r0
 8010c1a:	9906      	ldr	r1, [sp, #24]
 8010c1c:	428b      	cmp	r3, r1
 8010c1e:	f280 8106 	bge.w	8010e2e <Hessenberg_Form_Orthogonal+0x27e>
 8010c22:	1c59      	adds	r1, r3, #1
 8010c24:	b20b      	sxth	r3, r1
 8010c26:	eddf 6a85 	vldr	s13, [pc, #532]	; 8010e3c <Hessenberg_Form_Orthogonal+0x28c>
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	4654      	mov	r4, sl
 8010c2e:	4290      	cmp	r0, r2
 8010c30:	da07      	bge.n	8010c42 <Hessenberg_Form_Orthogonal+0x92>
 8010c32:	edd4 7a00 	vldr	s15, [r4]
 8010c36:	3001      	adds	r0, #1
 8010c38:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8010c3c:	b200      	sxth	r0, r0
 8010c3e:	445c      	add	r4, fp
 8010c40:	e7f5      	b.n	8010c2e <Hessenberg_Form_Orthogonal+0x7e>
 8010c42:	eef0 7ae6 	vabs.f32	s15, s13
 8010c46:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c4e:	f100 80e8 	bmi.w	8010e22 <Hessenberg_Form_Orthogonal+0x272>
 8010c52:	eef1 7ae6 	vsqrt.f32	s15, s13
 8010c56:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8010c5a:	9300      	str	r3, [sp, #0]
 8010c5c:	1c87      	adds	r7, r0, #2
 8010c5e:	ad08      	add	r5, sp, #32
 8010c60:	008c      	lsls	r4, r1, #2
 8010c62:	b2bf      	uxth	r7, r7
 8010c64:	eb05 0804 	add.w	r8, r5, r4
 8010c68:	fa0f fc87 	sxth.w	ip, r7
 8010c6c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8010c70:	eb0a 060b 	add.w	r6, sl, fp
 8010c74:	2500      	movs	r5, #0
 8010c76:	ed9a 7a00 	vldr	s14, [sl]
 8010c7a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c82:	bfa8      	it	ge
 8010c84:	eef1 7a67 	vnegge.f32	s15, s15
 8010c88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c8c:	edca 7a00 	vstr	s15, [sl]
 8010c90:	ed88 7a00 	vstr	s14, [r8]
 8010c94:	eb07 0e05 	add.w	lr, r7, r5
 8010c98:	fa0f fe8e 	sxth.w	lr, lr
 8010c9c:	4572      	cmp	r2, lr
 8010c9e:	dd0c      	ble.n	8010cba <Hessenberg_Form_Orthogonal+0x10a>
 8010ca0:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8010ca4:	ab08      	add	r3, sp, #32
 8010ca6:	449e      	add	lr, r3
 8010ca8:	f8d6 9000 	ldr.w	r9, [r6]
 8010cac:	f8ce 9000 	str.w	r9, [lr]
 8010cb0:	edc6 5a00 	vstr	s11, [r6]
 8010cb4:	3501      	adds	r5, #1
 8010cb6:	445e      	add	r6, fp
 8010cb8:	e7ec      	b.n	8010c94 <Hessenberg_Form_Orthogonal+0xe4>
 8010cba:	ed98 7a00 	vldr	s14, [r8]
 8010cbe:	9b00      	ldr	r3, [sp, #0]
 8010cc0:	9f02      	ldr	r7, [sp, #8]
 8010cc2:	9307      	str	r3, [sp, #28]
 8010cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010cc8:	fb02 3501 	mla	r5, r2, r1, r3
 8010ccc:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8010cd0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010cd4:	3c04      	subs	r4, #4
 8010cd6:	0099      	lsls	r1, r3, #2
 8010cd8:	ebaa 0404 	sub.w	r4, sl, r4
 8010cdc:	1c46      	adds	r6, r0, #1
 8010cde:	9505      	str	r5, [sp, #20]
 8010ce0:	ad08      	add	r5, sp, #32
 8010ce2:	440c      	add	r4, r1
 8010ce4:	440d      	add	r5, r1
 8010ce6:	b2b6      	uxth	r6, r6
 8010ce8:	461f      	mov	r7, r3
 8010cea:	f04f 0c00 	mov.w	ip, #0
 8010cee:	4297      	cmp	r7, r2
 8010cf0:	da33      	bge.n	8010d5a <Hessenberg_Form_Orthogonal+0x1aa>
 8010cf2:	9b05      	ldr	r3, [sp, #20]
 8010cf4:	eddf 7a51 	vldr	s15, [pc, #324]	; 8010e3c <Hessenberg_Form_Orthogonal+0x28c>
 8010cf8:	eb0c 0e03 	add.w	lr, ip, r3
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	eb06 0803 	add.w	r8, r6, r3
 8010d02:	fa0f f888 	sxth.w	r8, r8
 8010d06:	4542      	cmp	r2, r8
 8010d08:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8010d0c:	dd08      	ble.n	8010d20 <Hessenberg_Form_Orthogonal+0x170>
 8010d0e:	edde 6a00 	vldr	s13, [lr]
 8010d12:	edd9 4a00 	vldr	s9, [r9]
 8010d16:	3301      	adds	r3, #1
 8010d18:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8010d1c:	44de      	add	lr, fp
 8010d1e:	e7ee      	b.n	8010cfe <Hessenberg_Form_Orthogonal+0x14e>
 8010d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010d24:	eb0c 0e04 	add.w	lr, ip, r4
 8010d28:	2300      	movs	r3, #0
 8010d2a:	eb06 0803 	add.w	r8, r6, r3
 8010d2e:	fa0f f888 	sxth.w	r8, r8
 8010d32:	4542      	cmp	r2, r8
 8010d34:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8010d38:	dd0a      	ble.n	8010d50 <Hessenberg_Form_Orthogonal+0x1a0>
 8010d3a:	edde 6a00 	vldr	s13, [lr]
 8010d3e:	edd9 4a00 	vldr	s9, [r9]
 8010d42:	eee4 6ae7 	vfms.f32	s13, s9, s15
 8010d46:	3301      	adds	r3, #1
 8010d48:	edce 6a00 	vstr	s13, [lr]
 8010d4c:	44de      	add	lr, fp
 8010d4e:	e7ec      	b.n	8010d2a <Hessenberg_Form_Orthogonal+0x17a>
 8010d50:	3701      	adds	r7, #1
 8010d52:	b23f      	sxth	r7, r7
 8010d54:	f10c 0c04 	add.w	ip, ip, #4
 8010d58:	e7c9      	b.n	8010cee <Hessenberg_Form_Orthogonal+0x13e>
 8010d5a:	9c02      	ldr	r4, [sp, #8]
 8010d5c:	9b07      	ldr	r3, [sp, #28]
 8010d5e:	3001      	adds	r0, #1
 8010d60:	b280      	uxth	r0, r0
 8010d62:	440c      	add	r4, r1
 8010d64:	f04f 0c00 	mov.w	ip, #0
 8010d68:	eddf 7a34 	vldr	s15, [pc, #208]	; 8010e3c <Hessenberg_Form_Orthogonal+0x28c>
 8010d6c:	2600      	movs	r6, #0
 8010d6e:	eb00 0e06 	add.w	lr, r0, r6
 8010d72:	fa0f fe8e 	sxth.w	lr, lr
 8010d76:	00b7      	lsls	r7, r6, #2
 8010d78:	4572      	cmp	r2, lr
 8010d7a:	eb05 0807 	add.w	r8, r5, r7
 8010d7e:	4427      	add	r7, r4
 8010d80:	dd07      	ble.n	8010d92 <Hessenberg_Form_Orthogonal+0x1e2>
 8010d82:	edd8 4a00 	vldr	s9, [r8]
 8010d86:	edd7 6a00 	vldr	s13, [r7]
 8010d8a:	3601      	adds	r6, #1
 8010d8c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8010d90:	e7ed      	b.n	8010d6e <Hessenberg_Form_Orthogonal+0x1be>
 8010d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010d96:	46ae      	mov	lr, r5
 8010d98:	4627      	mov	r7, r4
 8010d9a:	461e      	mov	r6, r3
 8010d9c:	4296      	cmp	r6, r2
 8010d9e:	da0a      	bge.n	8010db6 <Hessenberg_Form_Orthogonal+0x206>
 8010da0:	edd7 6a00 	vldr	s13, [r7]
 8010da4:	ecfe 4a01 	vldmia	lr!, {s9}
 8010da8:	eee4 6ae7 	vfms.f32	s13, s9, s15
 8010dac:	3601      	adds	r6, #1
 8010dae:	b236      	sxth	r6, r6
 8010db0:	ece7 6a01 	vstmia	r7!, {s13}
 8010db4:	e7f2      	b.n	8010d9c <Hessenberg_Form_Orthogonal+0x1ec>
 8010db6:	f10c 0c01 	add.w	ip, ip, #1
 8010dba:	fa0f f68c 	sxth.w	r6, ip
 8010dbe:	42b2      	cmp	r2, r6
 8010dc0:	445c      	add	r4, fp
 8010dc2:	dcd1      	bgt.n	8010d68 <Hessenberg_Form_Orthogonal+0x1b8>
 8010dc4:	9c03      	ldr	r4, [sp, #12]
 8010dc6:	2700      	movs	r7, #0
 8010dc8:	4421      	add	r1, r4
 8010dca:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8010e3c <Hessenberg_Form_Orthogonal+0x28c>
 8010dce:	2400      	movs	r4, #0
 8010dd0:	eb00 0c04 	add.w	ip, r0, r4
 8010dd4:	fa0f fc8c 	sxth.w	ip, ip
 8010dd8:	00a6      	lsls	r6, r4, #2
 8010dda:	4562      	cmp	r2, ip
 8010ddc:	eb05 0e06 	add.w	lr, r5, r6
 8010de0:	440e      	add	r6, r1
 8010de2:	dd07      	ble.n	8010df4 <Hessenberg_Form_Orthogonal+0x244>
 8010de4:	edde 4a00 	vldr	s9, [lr]
 8010de8:	edd6 6a00 	vldr	s13, [r6]
 8010dec:	3401      	adds	r4, #1
 8010dee:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8010df2:	e7ed      	b.n	8010dd0 <Hessenberg_Form_Orthogonal+0x220>
 8010df4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010df8:	46ac      	mov	ip, r5
 8010dfa:	460e      	mov	r6, r1
 8010dfc:	461c      	mov	r4, r3
 8010dfe:	4294      	cmp	r4, r2
 8010e00:	da0a      	bge.n	8010e18 <Hessenberg_Form_Orthogonal+0x268>
 8010e02:	edd6 6a00 	vldr	s13, [r6]
 8010e06:	ecfc 4a01 	vldmia	ip!, {s9}
 8010e0a:	eee4 6ae7 	vfms.f32	s13, s9, s15
 8010e0e:	3401      	adds	r4, #1
 8010e10:	b224      	sxth	r4, r4
 8010e12:	ece6 6a01 	vstmia	r6!, {s13}
 8010e16:	e7f2      	b.n	8010dfe <Hessenberg_Form_Orthogonal+0x24e>
 8010e18:	3701      	adds	r7, #1
 8010e1a:	b23c      	sxth	r4, r7
 8010e1c:	42a2      	cmp	r2, r4
 8010e1e:	4459      	add	r1, fp
 8010e20:	dcd3      	bgt.n	8010dca <Hessenberg_Form_Orthogonal+0x21a>
 8010e22:	9904      	ldr	r1, [sp, #16]
 8010e24:	448a      	add	sl, r1
 8010e26:	9901      	ldr	r1, [sp, #4]
 8010e28:	3101      	adds	r1, #1
 8010e2a:	9101      	str	r1, [sp, #4]
 8010e2c:	e6f5      	b.n	8010c1a <Hessenberg_Form_Orthogonal+0x6a>
 8010e2e:	2000      	movs	r0, #0
 8010e30:	b00f      	add	sp, #60	; 0x3c
 8010e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e36:	bf00      	nop
 8010e38:	358637bd 	.word	0x358637bd
 8010e3c:	00000000 	.word	0x00000000

08010e40 <QR_Hessenberg_Matrix.constprop.27>:
 8010e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e44:	ed2d 8b02 	vpush	{d8}
 8010e48:	461c      	mov	r4, r3
 8010e4a:	b0a5      	sub	sp, #148	; 0x94
 8010e4c:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8010e50:	3b01      	subs	r3, #1
 8010e52:	e9cd 1205 	strd	r1, r2, [sp, #20]
 8010e56:	f1ce 0100 	rsb	r1, lr, #0
 8010e5a:	9307      	str	r3, [sp, #28]
 8010e5c:	910a      	str	r1, [sp, #40]	; 0x28
 8010e5e:	00e3      	lsls	r3, r4, #3
 8010e60:	00e1      	lsls	r1, r4, #3
 8010e62:	ed9f 5ac6 	vldr	s10, [pc, #792]	; 801117c <QR_Hessenberg_Matrix.constprop.27+0x33c>
 8010e66:	931d      	str	r3, [sp, #116]	; 0x74
 8010e68:	3104      	adds	r1, #4
 8010e6a:	f06f 0303 	mvn.w	r3, #3
 8010e6e:	9a07      	ldr	r2, [sp, #28]
 8010e70:	9121      	str	r1, [sp, #132]	; 0x84
 8010e72:	fb03 f304 	mul.w	r3, r3, r4
 8010e76:	0061      	lsls	r1, r4, #1
 8010e78:	ed9f 4abe 	vldr	s8, [pc, #760]	; 8011174 <QR_Hessenberg_Matrix.constprop.27+0x334>
 8010e7c:	ed9f 3abe 	vldr	s6, [pc, #760]	; 8011178 <QR_Hessenberg_Matrix.constprop.27+0x338>
 8010e80:	9000      	str	r0, [sp, #0]
 8010e82:	9110      	str	r1, [sp, #64]	; 0x40
 8010e84:	9308      	str	r3, [sp, #32]
 8010e86:	eef0 4a45 	vmov.f32	s9, s10
 8010e8a:	eef0 3a45 	vmov.f32	s7, s10
 8010e8e:	46f2      	mov	sl, lr
 8010e90:	4693      	mov	fp, r2
 8010e92:	46a1      	mov	r9, r4
 8010e94:	9900      	ldr	r1, [sp, #0]
 8010e96:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010e98:	fb0b f309 	mul.w	r3, fp, r9
 8010e9c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010ea0:	9301      	str	r3, [sp, #4]
 8010ea2:	f1ab 0302 	sub.w	r3, fp, #2
 8010ea6:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ea8:	f10b 3eff 	add.w	lr, fp, #4294967295
 8010eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010eae:	eb09 060b 	add.w	r6, r9, fp
 8010eb2:	ea4f 078e 	mov.w	r7, lr, lsl #2
 8010eb6:	00b6      	lsls	r6, r6, #2
 8010eb8:	eb03 010b 	add.w	r1, r3, fp
 8010ebc:	960f      	str	r6, [sp, #60]	; 0x3c
 8010ebe:	9b01      	ldr	r3, [sp, #4]
 8010ec0:	9e01      	ldr	r6, [sp, #4]
 8010ec2:	9722      	str	r7, [sp, #136]	; 0x88
 8010ec4:	1f3a      	subs	r2, r7, #4
 8010ec6:	eba2 020a 	sub.w	r2, r2, sl
 8010eca:	181d      	adds	r5, r3, r0
 8010ecc:	18b2      	adds	r2, r6, r2
 8010ece:	ea4f 088b 	mov.w	r8, fp, lsl #2
 8010ed2:	9212      	str	r2, [sp, #72]	; 0x48
 8010ed4:	19ea      	adds	r2, r5, r7
 8010ed6:	9213      	str	r2, [sp, #76]	; 0x4c
 8010ed8:	eb05 0208 	add.w	r2, r5, r8
 8010edc:	9214      	str	r2, [sp, #80]	; 0x50
 8010ede:	4632      	mov	r2, r6
 8010ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ee2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8010ee6:	4442      	add	r2, r8
 8010ee8:	920c      	str	r2, [sp, #48]	; 0x30
 8010eea:	4632      	mov	r2, r6
 8010eec:	469c      	mov	ip, r3
 8010eee:	443a      	add	r2, r7
 8010ef0:	9b00      	ldr	r3, [sp, #0]
 8010ef2:	920d      	str	r2, [sp, #52]	; 0x34
 8010ef4:	f1a8 0404 	sub.w	r4, r8, #4
 8010ef8:	4632      	mov	r2, r6
 8010efa:	fb0c 330a 	mla	r3, ip, sl, r3
 8010efe:	4422      	add	r2, r4
 8010f00:	eba8 000a 	sub.w	r0, r8, sl
 8010f04:	9215      	str	r2, [sp, #84]	; 0x54
 8010f06:	18c2      	adds	r2, r0, r3
 8010f08:	9218      	str	r2, [sp, #96]	; 0x60
 8010f0a:	eb03 0208 	add.w	r2, r3, r8
 8010f0e:	921c      	str	r2, [sp, #112]	; 0x70
 8010f10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010f12:	0089      	lsls	r1, r1, #2
 8010f14:	189a      	adds	r2, r3, r2
 8010f16:	910e      	str	r1, [sp, #56]	; 0x38
 8010f18:	9217      	str	r2, [sp, #92]	; 0x5c
 8010f1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010f1c:	f06f 0103 	mvn.w	r1, #3
 8010f20:	4413      	add	r3, r2
 8010f22:	9316      	str	r3, [sp, #88]	; 0x58
 8010f24:	eba1 030a 	sub.w	r3, r1, sl
 8010f28:	9304      	str	r3, [sp, #16]
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	9302      	str	r3, [sp, #8]
 8010f2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010f30:	9b01      	ldr	r3, [sp, #4]
 8010f32:	4659      	mov	r1, fp
 8010f34:	9808      	ldr	r0, [sp, #32]
 8010f36:	2900      	cmp	r1, #0
 8010f38:	4410      	add	r0, r2
 8010f3a:	dd1a      	ble.n	8010f72 <QR_Hessenberg_Matrix.constprop.27+0x132>
 8010f3c:	ed90 7a00 	vldr	s14, [r0]
 8010f40:	edd2 7a01 	vldr	s15, [r2, #4]
 8010f44:	edd2 6a00 	vldr	s13, [r2]
 8010f48:	9804      	ldr	r0, [sp, #16]
 8010f4a:	eeb0 7ac7 	vabs.f32	s14, s14
 8010f4e:	eef0 7ae7 	vabs.f32	s15, s15
 8010f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f56:	eeb0 7ae6 	vabs.f32	s14, s13
 8010f5a:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010f5e:	4402      	add	r2, r0
 8010f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f68:	d903      	bls.n	8010f72 <QR_Hessenberg_Matrix.constprop.27+0x132>
 8010f6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010f6c:	3901      	subs	r1, #1
 8010f6e:	4403      	add	r3, r0
 8010f70:	e7e0      	b.n	8010f34 <QR_Hessenberg_Matrix.constprop.27+0xf4>
 8010f72:	ebbb 0201 	subs.w	r2, fp, r1
 8010f76:	9103      	str	r1, [sp, #12]
 8010f78:	d002      	beq.n	8010f80 <QR_Hessenberg_Matrix.constprop.27+0x140>
 8010f7a:	2a01      	cmp	r2, #1
 8010f7c:	d00f      	beq.n	8010f9e <QR_Hessenberg_Matrix.constprop.27+0x15e>
 8010f7e:	e0c8      	b.n	8011112 <QR_Hessenberg_Matrix.constprop.27+0x2d2>
 8010f80:	9a03      	ldr	r2, [sp, #12]
 8010f82:	9906      	ldr	r1, [sp, #24]
 8010f84:	0092      	lsls	r2, r2, #2
 8010f86:	4413      	add	r3, r2
 8010f88:	edd3 7a00 	vldr	s15, [r3]
 8010f8c:	ee75 7a27 	vadd.f32	s15, s10, s15
 8010f90:	440a      	add	r2, r1
 8010f92:	edc3 7a00 	vstr	s15, [r3]
 8010f96:	46de      	mov	lr, fp
 8010f98:	edc2 7a00 	vstr	s15, [r2]
 8010f9c:	e2c5      	b.n	801152a <QR_Hessenberg_Matrix.constprop.27+0x6ea>
 8010f9e:	9a00      	ldr	r2, [sp, #0]
 8010fa0:	9f22      	ldr	r7, [sp, #136]	; 0x88
 8010fa2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8010fa6:	fb0e f309 	mul.w	r3, lr, r9
 8010faa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010fae:	eb03 020a 	add.w	r2, r3, sl
 8010fb2:	eb02 0008 	add.w	r0, r2, r8
 8010fb6:	19d9      	adds	r1, r3, r7
 8010fb8:	edd1 5a00 	vldr	s11, [r1]
 8010fbc:	edd0 7a00 	vldr	s15, [r0]
 8010fc0:	eb03 0408 	add.w	r4, r3, r8
 8010fc4:	443a      	add	r2, r7
 8010fc6:	ed94 6a00 	vldr	s12, [r4]
 8010fca:	edd2 6a00 	vldr	s13, [r2]
 8010fce:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8010fd2:	ee26 6a26 	vmul.f32	s12, s12, s13
 8010fd6:	ee75 5a85 	vadd.f32	s11, s11, s10
 8010fda:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fe2:	edc1 5a00 	vstr	s11, [r1]
 8010fe6:	eef0 5a46 	vmov.f32	s11, s12
 8010fea:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8010fee:	9906      	ldr	r1, [sp, #24]
 8010ff0:	ed90 7a00 	vldr	s14, [r0]
 8010ff4:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8010ff8:	ee35 7a07 	vadd.f32	s14, s10, s14
 8010ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011000:	eb01 0507 	add.w	r5, r1, r7
 8011004:	eb01 0408 	add.w	r4, r1, r8
 8011008:	ed80 7a00 	vstr	s14, [r0]
 801100c:	dd7a      	ble.n	8011104 <QR_Hessenberg_Matrix.constprop.27+0x2c4>
 801100e:	eef1 6ae5 	vsqrt.f32	s13, s11
 8011012:	f1a8 0104 	sub.w	r1, r8, #4
 8011016:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801101a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801101e:	bf4c      	ite	mi
 8011020:	ee77 7ae6 	vsubmi.f32	s15, s15, s13
 8011024:	ee77 7aa6 	vaddpl.f32	s15, s15, s13
 8011028:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801102c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011030:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011034:	ed85 7a00 	vstr	s14, [r5]
 8011038:	ed90 7a00 	vldr	s14, [r0]
 801103c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011040:	eb0a 0001 	add.w	r0, sl, r1
 8011044:	ed84 7a00 	vstr	s14, [r4]
 8011048:	edd2 6a00 	vldr	s13, [r2]
 801104c:	eeb0 7a46 	vmov.f32	s14, s12
 8011050:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8011054:	4418      	add	r0, r3
 8011056:	4419      	add	r1, r3
 8011058:	4673      	mov	r3, lr
 801105a:	eeb1 6ac7 	vsqrt.f32	s12, s14
 801105e:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8011062:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8011066:	4599      	cmp	r9, r3
 8011068:	dd13      	ble.n	8011092 <QR_Hessenberg_Matrix.constprop.27+0x252>
 801106a:	3301      	adds	r3, #1
 801106c:	edd0 7a00 	vldr	s15, [r0]
 8011070:	edd1 5a00 	vldr	s11, [r1]
 8011074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011078:	ee25 6ac7 	vnmul.f32	s12, s11, s14
 801107c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8011080:	ece1 7a01 	vstmia	r1!, {s15}
 8011084:	edd0 7a00 	vldr	s15, [r0]
 8011088:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801108c:	eca0 6a01 	vstmia	r0!, {s12}
 8011090:	e7e9      	b.n	8011066 <QR_Hessenberg_Matrix.constprop.27+0x226>
 8011092:	9b00      	ldr	r3, [sp, #0]
 8011094:	2200      	movs	r2, #0
 8011096:	443b      	add	r3, r7
 8011098:	eba8 0007 	sub.w	r0, r8, r7
 801109c:	18c1      	adds	r1, r0, r3
 801109e:	edd1 7a00 	vldr	s15, [r1]
 80110a2:	edd3 5a00 	vldr	s11, [r3]
 80110a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110aa:	ee25 6ac7 	vnmul.f32	s12, s11, s14
 80110ae:	eee6 7aa5 	vfma.f32	s15, s13, s11
 80110b2:	3201      	adds	r2, #1
 80110b4:	455a      	cmp	r2, fp
 80110b6:	edc3 7a00 	vstr	s15, [r3]
 80110ba:	edd1 7a00 	vldr	s15, [r1]
 80110be:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80110c2:	4453      	add	r3, sl
 80110c4:	ed81 6a00 	vstr	s12, [r1]
 80110c8:	dde8      	ble.n	801109c <QR_Hessenberg_Matrix.constprop.27+0x25c>
 80110ca:	9b05      	ldr	r3, [sp, #20]
 80110cc:	eba8 0007 	sub.w	r0, r8, r7
 80110d0:	443b      	add	r3, r7
 80110d2:	2200      	movs	r2, #0
 80110d4:	18c1      	adds	r1, r0, r3
 80110d6:	edd1 7a00 	vldr	s15, [r1]
 80110da:	edd3 5a00 	vldr	s11, [r3]
 80110de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110e2:	ee25 6ac7 	vnmul.f32	s12, s11, s14
 80110e6:	eee6 7aa5 	vfma.f32	s15, s13, s11
 80110ea:	3201      	adds	r2, #1
 80110ec:	4591      	cmp	r9, r2
 80110ee:	edc3 7a00 	vstr	s15, [r3]
 80110f2:	edd1 7a00 	vldr	s15, [r1]
 80110f6:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80110fa:	4453      	add	r3, sl
 80110fc:	ed81 6a00 	vstr	s12, [r1]
 8011100:	d1e8      	bne.n	80110d4 <QR_Hessenberg_Matrix.constprop.27+0x294>
 8011102:	e212      	b.n	801152a <QR_Hessenberg_Matrix.constprop.27+0x6ea>
 8011104:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011108:	edc5 7a00 	vstr	s15, [r5]
 801110c:	edc4 7a00 	vstr	s15, [r4]
 8011110:	e20b      	b.n	801152a <QR_Hessenberg_Matrix.constprop.27+0x6ea>
 8011112:	9a02      	ldr	r2, [sp, #8]
 8011114:	9b02      	ldr	r3, [sp, #8]
 8011116:	210a      	movs	r1, #10
 8011118:	fb93 f3f1 	sdiv	r3, r3, r1
 801111c:	fb01 2313 	mls	r3, r1, r3, r2
 8011120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011122:	ed92 7a00 	vldr	s14, [r2]
 8011126:	bb5b      	cbnz	r3, 8011180 <QR_Hessenberg_Matrix.constprop.27+0x340>
 8011128:	ee35 5a07 	vadd.f32	s10, s10, s14
 801112c:	9a00      	ldr	r2, [sp, #0]
 801112e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011130:	f10a 0104 	add.w	r1, sl, #4
 8011134:	ed92 7a00 	vldr	s14, [r2]
 8011138:	edd0 7a00 	vldr	s15, [r0]
 801113c:	3301      	adds	r3, #1
 801113e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011142:	455b      	cmp	r3, fp
 8011144:	edc2 7a00 	vstr	s15, [r2]
 8011148:	440a      	add	r2, r1
 801114a:	ddf3      	ble.n	8011134 <QR_Hessenberg_Matrix.constprop.27+0x2f4>
 801114c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801114e:	ed93 7a00 	vldr	s14, [r3]
 8011152:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011154:	edd3 7a00 	vldr	s15, [r3]
 8011158:	eeb0 7ac7 	vabs.f32	s14, s14
 801115c:	eef0 7ae7 	vabs.f32	s15, s15
 8011160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011164:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8011168:	ee67 1aa7 	vmul.f32	s3, s15, s15
 801116c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011170:	e015      	b.n	801119e <QR_Hessenberg_Matrix.constprop.27+0x35e>
 8011172:	bf00      	nop
 8011174:	34000000 	.word	0x34000000
 8011178:	358637bd 	.word	0x358637bd
 801117c:	00000000 	.word	0x00000000
 8011180:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011182:	edd3 7a00 	vldr	s15, [r3]
 8011186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011188:	edd3 1a00 	vldr	s3, [r3]
 801118c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801118e:	ee61 1ae7 	vnmul.f32	s3, s3, s15
 8011192:	edd3 6a00 	vldr	s13, [r3]
 8011196:	eee6 1a87 	vfma.f32	s3, s13, s14
 801119a:	ee76 7a87 	vadd.f32	s15, s13, s14
 801119e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80111a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80111a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80111a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111a6:	3c08      	subs	r4, #8
 80111a8:	9420      	str	r4, [sp, #128]	; 0x80
 80111aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80111ac:	f1a4 0c04 	sub.w	ip, r4, #4
 80111b0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80111b2:	2200      	movs	r2, #0
 80111b4:	1f27      	subs	r7, r4, #4
 80111b6:	4610      	mov	r0, r2
 80111b8:	9723      	str	r7, [sp, #140]	; 0x8c
 80111ba:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80111bc:	1826      	adds	r6, r4, r0
 80111be:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80111c0:	4404      	add	r4, r0
 80111c2:	941f      	str	r4, [sp, #124]	; 0x7c
 80111c4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80111c6:	eb04 0800 	add.w	r8, r4, r0
 80111ca:	1e5c      	subs	r4, r3, #1
 80111cc:	eb0c 0702 	add.w	r7, ip, r2
 80111d0:	9411      	str	r4, [sp, #68]	; 0x44
 80111d2:	9c04      	ldr	r4, [sp, #16]
 80111d4:	971a      	str	r7, [sp, #104]	; 0x68
 80111d6:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80111d8:	4420      	add	r0, r4
 80111da:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80111dc:	4417      	add	r7, r2
 80111de:	4414      	add	r4, r2
 80111e0:	9719      	str	r7, [sp, #100]	; 0x64
 80111e2:	9f03      	ldr	r7, [sp, #12]
 80111e4:	941b      	str	r4, [sp, #108]	; 0x6c
 80111e6:	f1a5 0408 	sub.w	r4, r5, #8
 80111ea:	941e      	str	r4, [sp, #120]	; 0x78
 80111ec:	429f      	cmp	r7, r3
 80111ee:	f1a5 0404 	sub.w	r4, r5, #4
 80111f2:	4625      	mov	r5, r4
 80111f4:	f1a2 0204 	sub.w	r2, r2, #4
 80111f8:	dc4e      	bgt.n	8011298 <QR_Hessenberg_Matrix.constprop.27+0x458>
 80111fa:	ed11 7a02 	vldr	s14, [r1, #-8]
 80111fe:	ed16 0a02 	vldr	s0, [r6, #-8]
 8011202:	ed56 6a01 	vldr	s13, [r6, #-4]
 8011206:	ed58 0a01 	vldr	s1, [r8, #-4]
 801120a:	ed51 5a01 	vldr	s11, [r1, #-4]
 801120e:	ee37 2a67 	vsub.f32	s4, s14, s15
 8011212:	eeb0 8a61 	vmov.f32	s16, s3
 8011216:	eea7 8a02 	vfma.f32	s16, s14, s4
 801121a:	ee32 2a26 	vadd.f32	s4, s4, s13
 801121e:	eec8 2a00 	vdiv.f32	s5, s16, s0
 8011222:	eeb0 6ae6 	vabs.f32	s12, s13
 8011226:	ee72 5aa5 	vadd.f32	s11, s5, s11
 801122a:	eef0 6ae0 	vabs.f32	s13, s1
 801122e:	eef0 2ac2 	vabs.f32	s5, s4
 8011232:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8011236:	eef0 6ae5 	vabs.f32	s13, s11
 801123a:	ee72 2aa6 	vadd.f32	s5, s5, s13
 801123e:	eeb0 1ac7 	vabs.f32	s2, s14
 8011242:	eec5 6aa2 	vdiv.f32	s13, s11, s5
 8011246:	eec2 5a22 	vdiv.f32	s11, s4, s5
 801124a:	eef0 6ae6 	vabs.f32	s13, s13
 801124e:	eeb0 2ae5 	vabs.f32	s4, s11
 8011252:	eec0 5aa2 	vdiv.f32	s11, s1, s5
 8011256:	d01f      	beq.n	8011298 <QR_Hessenberg_Matrix.constprop.27+0x458>
 8011258:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801125a:	ed16 7a03 	vldr	s14, [r6, #-12]
 801125e:	ed51 2a03 	vldr	s5, [r1, #-12]
 8011262:	9e04      	ldr	r6, [sp, #16]
 8011264:	eeb0 7ac7 	vabs.f32	s14, s14
 8011268:	ee37 7a06 	vadd.f32	s14, s14, s12
 801126c:	eeb0 6ae5 	vabs.f32	s12, s11
 8011270:	ee37 7a01 	vadd.f32	s14, s14, s2
 8011274:	ee72 5a06 	vadd.f32	s11, s4, s12
 8011278:	ee27 7a04 	vmul.f32	s14, s14, s8
 801127c:	eeb0 6ae2 	vabs.f32	s12, s5
 8011280:	ee26 6a25 	vmul.f32	s12, s12, s11
 8011284:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011288:	4431      	add	r1, r6
 801128a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011292:	d901      	bls.n	8011298 <QR_Hessenberg_Matrix.constprop.27+0x458>
 8011294:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011296:	e790      	b.n	80111ba <QR_Hessenberg_Matrix.constprop.27+0x37a>
 8011298:	1c98      	adds	r0, r3, #2
 801129a:	fb00 f209 	mul.w	r2, r0, r9
 801129e:	009d      	lsls	r5, r3, #2
 80112a0:	9e00      	ldr	r6, [sp, #0]
 80112a2:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 80112a6:	4431      	add	r1, r6
 80112a8:	f10a 0804 	add.w	r8, sl, #4
 80112ac:	4558      	cmp	r0, fp
 80112ae:	dc04      	bgt.n	80112ba <QR_Hessenberg_Matrix.constprop.27+0x47a>
 80112b0:	edc1 4a00 	vstr	s9, [r1]
 80112b4:	3001      	adds	r0, #1
 80112b6:	4441      	add	r1, r8
 80112b8:	e7f8      	b.n	80112ac <QR_Hessenberg_Matrix.constprop.27+0x46c>
 80112ba:	9900      	ldr	r1, [sp, #0]
 80112bc:	444a      	add	r2, r9
 80112be:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80112c2:	440a      	add	r2, r1
 80112c4:	1cd9      	adds	r1, r3, #3
 80112c6:	4559      	cmp	r1, fp
 80112c8:	dc04      	bgt.n	80112d4 <QR_Hessenberg_Matrix.constprop.27+0x494>
 80112ca:	edc2 4a00 	vstr	s9, [r2]
 80112ce:	3101      	adds	r1, #1
 80112d0:	4442      	add	r2, r8
 80112d2:	e7f8      	b.n	80112c6 <QR_Hessenberg_Matrix.constprop.27+0x486>
 80112d4:	9900      	ldr	r1, [sp, #0]
 80112d6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80112d8:	fb03 f209 	mul.w	r2, r3, r9
 80112dc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80112e0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80112e2:	4411      	add	r1, r2
 80112e4:	ed91 7a00 	vldr	s14, [r1]
 80112e8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80112ea:	ee77 6a67 	vsub.f32	s13, s14, s15
 80112ee:	4411      	add	r1, r2
 80112f0:	eee7 1a26 	vfma.f32	s3, s14, s13
 80112f4:	4414      	add	r4, r2
 80112f6:	4410      	add	r0, r2
 80112f8:	edd1 2a00 	vldr	s5, [r1]
 80112fc:	edd4 6a00 	vldr	s13, [r4]
 8011300:	9919      	ldr	r1, [sp, #100]	; 0x64
 8011302:	ed90 6a00 	vldr	s12, [r0]
 8011306:	9c00      	ldr	r4, [sp, #0]
 8011308:	eec1 5aa2 	vdiv.f32	s11, s3, s5
 801130c:	4411      	add	r1, r2
 801130e:	4608      	mov	r0, r1
 8011310:	3404      	adds	r4, #4
 8011312:	1f29      	subs	r1, r5, #4
 8011314:	440a      	add	r2, r1
 8011316:	9411      	str	r4, [sp, #68]	; 0x44
 8011318:	4619      	mov	r1, r3
 801131a:	ee37 7a26 	vadd.f32	s14, s14, s13
 801131e:	ed90 2a00 	vldr	s4, [r0]
 8011322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011326:	ee35 6a86 	vadd.f32	s12, s11, s12
 801132a:	eeb0 7ac2 	vabs.f32	s14, s4
 801132e:	eef0 6ae7 	vabs.f32	s13, s15
 8011332:	ee76 6a87 	vadd.f32	s13, s13, s14
 8011336:	eeb0 7ac6 	vabs.f32	s14, s12
 801133a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801133e:	eef0 6a63 	vmov.f32	s13, s7
 8011342:	eec6 2a07 	vdiv.f32	s5, s12, s14
 8011346:	eec2 5a07 	vdiv.f32	s11, s4, s14
 801134a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 801134e:	4571      	cmp	r1, lr
 8011350:	f300 80e2 	bgt.w	8011518 <QR_Hessenberg_Matrix.constprop.27+0x6d8>
 8011354:	4299      	cmp	r1, r3
 8011356:	dd24      	ble.n	80113a2 <QR_Hessenberg_Matrix.constprop.27+0x562>
 8011358:	4571      	cmp	r1, lr
 801135a:	bf1e      	ittt	ne
 801135c:	981d      	ldrne	r0, [sp, #116]	; 0x74
 801135e:	1880      	addne	r0, r0, r2
 8011360:	edd0 5a00 	vldrne	s11, [r0]
 8011364:	edd2 1a00 	vldr	s3, [r2]
 8011368:	bf08      	it	eq
 801136a:	ed5f 5a7c 	vldreq	s11, [pc, #-496]	; 801117c <QR_Hessenberg_Matrix.constprop.27+0x33c>
 801136e:	eb0a 0002 	add.w	r0, sl, r2
 8011372:	ed90 2a00 	vldr	s4, [r0]
 8011376:	eeb0 7ae1 	vabs.f32	s14, s3
 801137a:	eef0 7ac2 	vabs.f32	s15, s4
 801137e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011382:	eef0 6ae5 	vabs.f32	s13, s11
 8011386:	ee77 6aa6 	vadd.f32	s13, s15, s13
 801138a:	eef4 6ac3 	vcmpe.f32	s13, s6
 801138e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011392:	f100 80bd 	bmi.w	8011510 <QR_Hessenberg_Matrix.constprop.27+0x6d0>
 8011396:	eec1 2aa6 	vdiv.f32	s5, s3, s13
 801139a:	ee82 6a26 	vdiv.f32	s12, s4, s13
 801139e:	eec5 5aa6 	vdiv.f32	s11, s11, s13
 80113a2:	ee26 7a06 	vmul.f32	s14, s12, s12
 80113a6:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 80113aa:	eea2 7aa2 	vfma.f32	s14, s5, s5
 80113ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b2:	eea5 7aa5 	vfma.f32	s14, s11, s11
 80113b6:	eef1 7ac7 	vsqrt.f32	s15, s14
 80113ba:	bf48      	it	mi
 80113bc:	eef1 7a67 	vnegmi.f32	s15, s15
 80113c0:	4299      	cmp	r1, r3
 80113c2:	dd04      	ble.n	80113ce <QR_Hessenberg_Matrix.constprop.27+0x58e>
 80113c4:	ee66 6ae7 	vnmul.f32	s13, s13, s15
 80113c8:	edc2 6a00 	vstr	s13, [r2]
 80113cc:	e008      	b.n	80113e0 <QR_Hessenberg_Matrix.constprop.27+0x5a0>
 80113ce:	9803      	ldr	r0, [sp, #12]
 80113d0:	4298      	cmp	r0, r3
 80113d2:	d005      	beq.n	80113e0 <QR_Hessenberg_Matrix.constprop.27+0x5a0>
 80113d4:	edd2 6a00 	vldr	s13, [r2]
 80113d8:	eef1 6a66 	vneg.f32	s13, s13
 80113dc:	edc2 6a00 	vstr	s13, [r2]
 80113e0:	ee32 7aa7 	vadd.f32	s14, s5, s15
 80113e4:	ee86 2a27 	vdiv.f32	s4, s12, s15
 80113e8:	9821      	ldr	r0, [sp, #132]	; 0x84
 80113ea:	eb08 0602 	add.w	r6, r8, r2
 80113ee:	1d14      	adds	r4, r2, #4
 80113f0:	4410      	add	r0, r2
 80113f2:	460f      	mov	r7, r1
 80113f4:	eec5 1aa7 	vdiv.f32	s3, s11, s15
 80113f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80113fc:	ee86 6a07 	vdiv.f32	s12, s12, s14
 8011400:	eec5 5a87 	vdiv.f32	s11, s11, s14
 8011404:	eef1 0a66 	vneg.f32	s1, s13
 8011408:	eeb1 1a61 	vneg.f32	s2, s3
 801140c:	eef1 2a42 	vneg.f32	s5, s4
 8011410:	45b9      	cmp	r9, r7
 8011412:	dd1e      	ble.n	8011452 <QR_Hessenberg_Matrix.constprop.27+0x612>
 8011414:	ed96 7a00 	vldr	s14, [r6]
 8011418:	edd4 7a00 	vldr	s15, [r4]
 801141c:	4571      	cmp	r1, lr
 801141e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011422:	d007      	beq.n	8011434 <QR_Hessenberg_Matrix.constprop.27+0x5f4>
 8011424:	ed90 7a00 	vldr	s14, [r0]
 8011428:	eee5 7a87 	vfma.f32	s15, s11, s14
 801142c:	eea1 7a27 	vfma.f32	s14, s2, s15
 8011430:	ed80 7a00 	vstr	s14, [r0]
 8011434:	ed96 7a00 	vldr	s14, [r6]
 8011438:	eea2 7aa7 	vfma.f32	s14, s5, s15
 801143c:	3004      	adds	r0, #4
 801143e:	3701      	adds	r7, #1
 8011440:	eca6 7a01 	vstmia	r6!, {s14}
 8011444:	ed94 7a00 	vldr	s14, [r4]
 8011448:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801144c:	eca4 7a01 	vstmia	r4!, {s14}
 8011450:	e7de      	b.n	8011410 <QR_Hessenberg_Matrix.constprop.27+0x5d0>
 8011452:	1cce      	adds	r6, r1, #3
 8011454:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011456:	455e      	cmp	r6, fp
 8011458:	bfa8      	it	ge
 801145a:	465e      	movge	r6, fp
 801145c:	4428      	add	r0, r5
 801145e:	2400      	movs	r4, #0
 8011460:	eeb1 1a46 	vneg.f32	s2, s12
 8011464:	eef1 2a65 	vneg.f32	s5, s11
 8011468:	42b4      	cmp	r4, r6
 801146a:	f100 0c04 	add.w	ip, r0, #4
 801146e:	f1a0 0704 	sub.w	r7, r0, #4
 8011472:	dc21      	bgt.n	80114b8 <QR_Hessenberg_Matrix.constprop.27+0x678>
 8011474:	edd0 7a00 	vldr	s15, [r0]
 8011478:	ed10 7a01 	vldr	s14, [r0, #-4]
 801147c:	ee62 7a27 	vmul.f32	s15, s4, s15
 8011480:	4571      	cmp	r1, lr
 8011482:	f104 0401 	add.w	r4, r4, #1
 8011486:	eee6 7a87 	vfma.f32	s15, s13, s14
 801148a:	d007      	beq.n	801149c <QR_Hessenberg_Matrix.constprop.27+0x65c>
 801148c:	ed9c 7a00 	vldr	s14, [ip]
 8011490:	eee1 7a87 	vfma.f32	s15, s3, s14
 8011494:	eea2 7aa7 	vfma.f32	s14, s5, s15
 8011498:	ed8c 7a00 	vstr	s14, [ip]
 801149c:	ed90 7a00 	vldr	s14, [r0]
 80114a0:	eea1 7a27 	vfma.f32	s14, s2, s15
 80114a4:	ed80 7a00 	vstr	s14, [r0]
 80114a8:	ed97 7a00 	vldr	s14, [r7]
 80114ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80114b0:	4450      	add	r0, sl
 80114b2:	edc7 7a00 	vstr	s15, [r7]
 80114b6:	e7d7      	b.n	8011468 <QR_Hessenberg_Matrix.constprop.27+0x628>
 80114b8:	9805      	ldr	r0, [sp, #20]
 80114ba:	2400      	movs	r4, #0
 80114bc:	4428      	add	r0, r5
 80114be:	eef1 0a65 	vneg.f32	s1, s11
 80114c2:	ed90 7a01 	vldr	s14, [r0, #4]
 80114c6:	edd0 7a00 	vldr	s15, [r0]
 80114ca:	ee22 7a07 	vmul.f32	s14, s4, s14
 80114ce:	4571      	cmp	r1, lr
 80114d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80114d4:	f104 0401 	add.w	r4, r4, #1
 80114d8:	f100 0604 	add.w	r6, r0, #4
 80114dc:	eef0 2a47 	vmov.f32	s5, s14
 80114e0:	d007      	beq.n	80114f2 <QR_Hessenberg_Matrix.constprop.27+0x6b2>
 80114e2:	ed90 7a02 	vldr	s14, [r0, #8]
 80114e6:	eee1 2a87 	vfma.f32	s5, s3, s14
 80114ea:	eea0 7aa2 	vfma.f32	s14, s1, s5
 80114ee:	ed80 7a02 	vstr	s14, [r0, #8]
 80114f2:	edd6 7a00 	vldr	s15, [r6]
 80114f6:	eee1 7a22 	vfma.f32	s15, s2, s5
 80114fa:	45a1      	cmp	r9, r4
 80114fc:	edc6 7a00 	vstr	s15, [r6]
 8011500:	edd0 7a00 	vldr	s15, [r0]
 8011504:	ee77 7ae2 	vsub.f32	s15, s15, s5
 8011508:	edc0 7a00 	vstr	s15, [r0]
 801150c:	4450      	add	r0, sl
 801150e:	d1d8      	bne.n	80114c2 <QR_Hessenberg_Matrix.constprop.27+0x682>
 8011510:	3101      	adds	r1, #1
 8011512:	4442      	add	r2, r8
 8011514:	3504      	adds	r5, #4
 8011516:	e71a      	b.n	801134e <QR_Hessenberg_Matrix.constprop.27+0x50e>
 8011518:	9b02      	ldr	r3, [sp, #8]
 801151a:	3301      	adds	r3, #1
 801151c:	2b0b      	cmp	r3, #11
 801151e:	9302      	str	r3, [sp, #8]
 8011520:	f47f ad05 	bne.w	8010f2e <QR_Hessenberg_Matrix.constprop.27+0xee>
 8011524:	f04f 30ff 	mov.w	r0, #4294967295
 8011528:	e0c6      	b.n	80116b8 <QR_Hessenberg_Matrix.constprop.27+0x878>
 801152a:	f1be 0b01 	subs.w	fp, lr, #1
 801152e:	f57f acb1 	bpl.w	8010e94 <QR_Hessenberg_Matrix.constprop.27+0x54>
 8011532:	9b00      	ldr	r3, [sp, #0]
 8011534:	edd3 7a00 	vldr	s15, [r3]
 8011538:	eb03 020a 	add.w	r2, r3, sl
 801153c:	46d6      	mov	lr, sl
 801153e:	464c      	mov	r4, r9
 8011540:	f10a 0504 	add.w	r5, sl, #4
 8011544:	eef0 7ae7 	vabs.f32	s15, s15
 8011548:	2301      	movs	r3, #1
 801154a:	1e59      	subs	r1, r3, #1
 801154c:	4610      	mov	r0, r2
 801154e:	428c      	cmp	r4, r1
 8011550:	dd07      	ble.n	8011562 <QR_Hessenberg_Matrix.constprop.27+0x722>
 8011552:	ecb0 7a01 	vldmia	r0!, {s14}
 8011556:	eeb0 7ac7 	vabs.f32	s14, s14
 801155a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801155e:	3101      	adds	r1, #1
 8011560:	e7f5      	b.n	801154e <QR_Hessenberg_Matrix.constprop.27+0x70e>
 8011562:	1c58      	adds	r0, r3, #1
 8011564:	4284      	cmp	r4, r0
 8011566:	442a      	add	r2, r5
 8011568:	d001      	beq.n	801156e <QR_Hessenberg_Matrix.constprop.27+0x72e>
 801156a:	4603      	mov	r3, r0
 801156c:	e7ed      	b.n	801154a <QR_Hessenberg_Matrix.constprop.27+0x70a>
 801156e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80116c4 <QR_Hessenberg_Matrix.constprop.27+0x884>
 8011572:	9a00      	ldr	r2, [sp, #0]
 8011574:	9908      	ldr	r1, [sp, #32]
 8011576:	eddf 4a54 	vldr	s9, [pc, #336]	; 80116c8 <QR_Hessenberg_Matrix.constprop.27+0x888>
 801157a:	9c07      	ldr	r4, [sp, #28]
 801157c:	ee87 5a27 	vdiv.f32	s10, s14, s15
 8011580:	fb03 3300 	mla	r3, r3, r0, r3
 8011584:	ebce 0383 	rsb	r3, lr, r3, lsl #2
 8011588:	4413      	add	r3, r2
 801158a:	9a06      	ldr	r2, [sp, #24]
 801158c:	f1a1 0a04 	sub.w	sl, r1, #4
 8011590:	4472      	add	r2, lr
 8011592:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8011596:	eef0 5a46 	vmov.f32	s11, s12
 801159a:	eb03 010e 	add.w	r1, r3, lr
 801159e:	f104 38ff 	add.w	r8, r4, #4294967295
 80115a2:	ed81 6a00 	vstr	s12, [r1]
 80115a6:	4647      	mov	r7, r8
 80115a8:	461e      	mov	r6, r3
 80115aa:	461d      	mov	r5, r3
 80115ac:	9401      	str	r4, [sp, #4]
 80115ae:	2f00      	cmp	r7, #0
 80115b0:	f107 0c01 	add.w	ip, r7, #1
 80115b4:	db30      	blt.n	8011618 <QR_Hessenberg_Matrix.constprop.27+0x7d8>
 80115b6:	ed56 6a01 	vldr	s13, [r6, #-4]
 80115ba:	ed12 7a01 	vldr	s14, [r2, #-4]
 80115be:	edd5 7a00 	vldr	s15, [r5]
 80115c2:	9c01      	ldr	r4, [sp, #4]
 80115c4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80115c8:	4689      	mov	r9, r1
 80115ca:	46b3      	mov	fp, r6
 80115cc:	45a4      	cmp	ip, r4
 80115ce:	da09      	bge.n	80115e4 <QR_Hessenberg_Matrix.constprop.27+0x7a4>
 80115d0:	edd9 6a00 	vldr	s13, [r9]
 80115d4:	ecbb 4a01 	vldmia	fp!, {s8}
 80115d8:	f10c 0c01 	add.w	ip, ip, #1
 80115dc:	eee4 7a26 	vfma.f32	s15, s8, s13
 80115e0:	44f1      	add	r9, lr
 80115e2:	e7f3      	b.n	80115cc <QR_Hessenberg_Matrix.constprop.27+0x78c>
 80115e4:	eef0 6ac7 	vabs.f32	s13, s14
 80115e8:	eef4 6ae4 	vcmpe.f32	s13, s9
 80115ec:	eef1 7a67 	vneg.f32	s15, s15
 80115f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115f4:	bfc8      	it	gt
 80115f6:	eec7 6a87 	vdivgt.f32	s13, s15, s14
 80115fa:	9401      	str	r4, [sp, #4]
 80115fc:	9c04      	ldr	r4, [sp, #16]
 80115fe:	4426      	add	r6, r4
 8011600:	9c08      	ldr	r4, [sp, #32]
 8011602:	f107 37ff 	add.w	r7, r7, #4294967295
 8011606:	4421      	add	r1, r4
 8011608:	bfd8      	it	le
 801160a:	ee65 6a27 	vmulle.f32	s13, s10, s15
 801160e:	edc5 6a00 	vstr	s13, [r5]
 8011612:	eba5 050e 	sub.w	r5, r5, lr
 8011616:	e7ca      	b.n	80115ae <QR_Hessenberg_Matrix.constprop.27+0x76e>
 8011618:	f118 0101 	adds.w	r1, r8, #1
 801161c:	4453      	add	r3, sl
 801161e:	f1a2 0204 	sub.w	r2, r2, #4
 8011622:	4644      	mov	r4, r8
 8011624:	d1b9      	bne.n	801159a <QR_Hessenberg_Matrix.constprop.27+0x75a>
 8011626:	9a00      	ldr	r2, [sp, #0]
 8011628:	9907      	ldr	r1, [sp, #28]
 801162a:	f1ae 0304 	sub.w	r3, lr, #4
 801162e:	4413      	add	r3, r2
 8011630:	9a00      	ldr	r2, [sp, #0]
 8011632:	eba3 0c02 	sub.w	ip, r3, r2
 8011636:	9a05      	ldr	r2, [sp, #20]
 8011638:	2400      	movs	r4, #0
 801163a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80116cc <QR_Hessenberg_Matrix.constprop.27+0x88c>
 801163e:	461e      	mov	r6, r3
 8011640:	4617      	mov	r7, r2
 8011642:	2500      	movs	r5, #0
 8011644:	ed96 7a00 	vldr	s14, [r6]
 8011648:	ecf7 6a01 	vldmia	r7!, {s13}
 801164c:	3501      	adds	r5, #1
 801164e:	428d      	cmp	r5, r1
 8011650:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011654:	4476      	add	r6, lr
 8011656:	ddf5      	ble.n	8011644 <QR_Hessenberg_Matrix.constprop.27+0x804>
 8011658:	3401      	adds	r4, #1
 801165a:	eb02 050c 	add.w	r5, r2, ip
 801165e:	4284      	cmp	r4, r0
 8011660:	edc5 7a00 	vstr	s15, [r5]
 8011664:	4472      	add	r2, lr
 8011666:	d1e8      	bne.n	801163a <QR_Hessenberg_Matrix.constprop.27+0x7fa>
 8011668:	3901      	subs	r1, #1
 801166a:	1c4a      	adds	r2, r1, #1
 801166c:	f1a3 0304 	sub.w	r3, r3, #4
 8011670:	d1de      	bne.n	8011630 <QR_Hessenberg_Matrix.constprop.27+0x7f0>
 8011672:	9905      	ldr	r1, [sp, #20]
 8011674:	eb01 040e 	add.w	r4, r1, lr
 8011678:	eddf 7a14 	vldr	s15, [pc, #80]	; 80116cc <QR_Hessenberg_Matrix.constprop.27+0x88c>
 801167c:	460a      	mov	r2, r1
 801167e:	2300      	movs	r3, #0
 8011680:	ed92 7a00 	vldr	s14, [r2]
 8011684:	3301      	adds	r3, #1
 8011686:	4283      	cmp	r3, r0
 8011688:	eee7 7a07 	vfma.f32	s15, s14, s14
 801168c:	4472      	add	r2, lr
 801168e:	d1f7      	bne.n	8011680 <QR_Hessenberg_Matrix.constprop.27+0x840>
 8011690:	eef1 6ae7 	vsqrt.f32	s13, s15
 8011694:	460b      	mov	r3, r1
 8011696:	2200      	movs	r2, #0
 8011698:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 801169c:	3201      	adds	r2, #1
 801169e:	4282      	cmp	r2, r0
 80116a0:	edd3 7a00 	vldr	s15, [r3]
 80116a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116a8:	edc3 7a00 	vstr	s15, [r3]
 80116ac:	4473      	add	r3, lr
 80116ae:	d1f5      	bne.n	801169c <QR_Hessenberg_Matrix.constprop.27+0x85c>
 80116b0:	3104      	adds	r1, #4
 80116b2:	428c      	cmp	r4, r1
 80116b4:	d1e0      	bne.n	8011678 <QR_Hessenberg_Matrix.constprop.27+0x838>
 80116b6:	2000      	movs	r0, #0
 80116b8:	b025      	add	sp, #148	; 0x94
 80116ba:	ecbd 8b02 	vpop	{d8}
 80116be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c2:	bf00      	nop
 80116c4:	4b000000 	.word	0x4b000000
 80116c8:	358637bd 	.word	0x358637bd
 80116cc:	00000000 	.word	0x00000000

080116d0 <MEMS_checkConsistency.constprop.32>:
 80116d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116d4:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80116d8:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 80116dc:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 80116e0:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
 80116e4:	1b67      	subs	r7, r4, r5
 80116e6:	1ad6      	subs	r6, r2, r3
 80116e8:	ea87 7ee7 	eor.w	lr, r7, r7, asr #31
 80116ec:	ea86 7ce6 	eor.w	ip, r6, r6, asr #31
 80116f0:	ebae 7ee7 	sub.w	lr, lr, r7, asr #31
 80116f4:	ebac 7ce6 	sub.w	ip, ip, r6, asr #31
 80116f8:	45e6      	cmp	lr, ip
 80116fa:	dd5f      	ble.n	80117bc <MEMS_checkConsistency.constprop.32+0xec>
 80116fc:	b2a4      	uxth	r4, r4
 80116fe:	b2ab      	uxth	r3, r5
 8011700:	2f00      	cmp	r7, #0
 8011702:	bfb4      	ite	lt
 8011704:	1b1c      	sublt	r4, r3, r4
 8011706:	1ae4      	subge	r4, r4, r3
 8011708:	b223      	sxth	r3, r4
 801170a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801170e:	f9b1 400a 	ldrsh.w	r4, [r1, #10]
 8011712:	1b15      	subs	r5, r2, r4
 8011714:	ea85 76e5 	eor.w	r6, r5, r5, asr #31
 8011718:	eba6 76e5 	sub.w	r6, r6, r5, asr #31
 801171c:	42b3      	cmp	r3, r6
 801171e:	dc06      	bgt.n	801172e <MEMS_checkConsistency.constprop.32+0x5e>
 8011720:	b292      	uxth	r2, r2
 8011722:	b2a3      	uxth	r3, r4
 8011724:	2d00      	cmp	r5, #0
 8011726:	bfb4      	ite	lt
 8011728:	1a9a      	sublt	r2, r3, r2
 801172a:	1ad2      	subge	r2, r2, r3
 801172c:	b213      	sxth	r3, r2
 801172e:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8011732:	898e      	ldrh	r6, [r1, #12]
 8011734:	89c7      	ldrh	r7, [r0, #14]
 8011736:	89cd      	ldrh	r5, [r1, #14]
 8011738:	ebac 0406 	sub.w	r4, ip, r6
 801173c:	1b7a      	subs	r2, r7, r5
 801173e:	ea84 78e4 	eor.w	r8, r4, r4, asr #31
 8011742:	ea82 7ee2 	eor.w	lr, r2, r2, asr #31
 8011746:	eba8 78e4 	sub.w	r8, r8, r4, asr #31
 801174a:	ebae 7ee2 	sub.w	lr, lr, r2, asr #31
 801174e:	45f0      	cmp	r8, lr
 8011750:	dd2f      	ble.n	80117b2 <MEMS_checkConsistency.constprop.32+0xe2>
 8011752:	2c00      	cmp	r4, #0
 8011754:	bfba      	itte	lt
 8011756:	eba6 020c 	sublt.w	r2, r6, ip
 801175a:	b212      	sxthlt	r2, r2
 801175c:	b222      	sxthge	r2, r4
 801175e:	8a04      	ldrh	r4, [r0, #16]
 8011760:	8a08      	ldrh	r0, [r1, #16]
 8011762:	1a21      	subs	r1, r4, r0
 8011764:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
 8011768:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
 801176c:	42aa      	cmp	r2, r5
 801176e:	dc04      	bgt.n	801177a <MEMS_checkConsistency.constprop.32+0xaa>
 8011770:	2900      	cmp	r1, #0
 8011772:	bfba      	itte	lt
 8011774:	1b02      	sublt	r2, r0, r4
 8011776:	b212      	sxthlt	r2, r2
 8011778:	b20a      	sxthge	r2, r1
 801177a:	ee07 3a90 	vmov	s15, r3
 801177e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011782:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8011786:	ee27 0a80 	vmul.f32	s0, s15, s0
 801178a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011792:	d51c      	bpl.n	80117ce <MEMS_checkConsistency.constprop.32+0xfe>
 8011794:	ee07 2a90 	vmov	s15, r2
 8011798:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80117d4 <MEMS_checkConsistency.constprop.32+0x104>
 801179c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80117a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117a8:	bf4c      	ite	mi
 80117aa:	2001      	movmi	r0, #1
 80117ac:	2000      	movpl	r0, #0
 80117ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117b2:	2a00      	cmp	r2, #0
 80117b4:	bfb8      	it	lt
 80117b6:	1bea      	sublt	r2, r5, r7
 80117b8:	b212      	sxth	r2, r2
 80117ba:	e7d0      	b.n	801175e <MEMS_checkConsistency.constprop.32+0x8e>
 80117bc:	b29b      	uxth	r3, r3
 80117be:	2e00      	cmp	r6, #0
 80117c0:	b292      	uxth	r2, r2
 80117c2:	bfb5      	itete	lt
 80117c4:	1a9b      	sublt	r3, r3, r2
 80117c6:	1ad2      	subge	r2, r2, r3
 80117c8:	b21b      	sxthlt	r3, r3
 80117ca:	b213      	sxthge	r3, r2
 80117cc:	e79d      	b.n	801170a <MEMS_checkConsistency.constprop.32+0x3a>
 80117ce:	2000      	movs	r0, #0
 80117d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117d4:	43480000 	.word	0x43480000

080117d8 <MEMS_updateMagBufferIndex.constprop.22>:
 80117d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117dc:	4d76      	ldr	r5, [pc, #472]	; (80119b8 <MEMS_updateMagBufferIndex.constprop.22+0x1e0>)
 80117de:	ed2d 8b02 	vpush	{d8}
 80117e2:	f895 10e0 	ldrb.w	r1, [r5, #224]	; 0xe0
 80117e6:	f895 80e1 	ldrb.w	r8, [r5, #225]	; 0xe1
 80117ea:	f995 20e2 	ldrsb.w	r2, [r5, #226]	; 0xe2
 80117ee:	b089      	sub	sp, #36	; 0x24
 80117f0:	2300      	movs	r3, #0
 80117f2:	4541      	cmp	r1, r8
 80117f4:	9101      	str	r1, [sp, #4]
 80117f6:	f102 0201 	add.w	r2, r2, #1
 80117fa:	e9c5 333a 	strd	r3, r3, [r5, #232]	; 0xe8
 80117fe:	e9c5 333c 	strd	r3, r3, [r5, #240]	; 0xf0
 8011802:	e9c5 333e 	strd	r3, r3, [r5, #248]	; 0xf8
 8011806:	f000 80d0 	beq.w	80119aa <MEMS_updateMagBufferIndex.constprop.22+0x1d2>
 801180a:	1a52      	subs	r2, r2, r1
 801180c:	fb92 f3f8 	sdiv	r3, r2, r8
 8011810:	fb08 2213 	mls	r2, r8, r3, r2
 8011814:	b213      	sxth	r3, r2
 8011816:	2a00      	cmp	r2, #0
 8011818:	9307      	str	r3, [sp, #28]
 801181a:	f2c0 80c2 	blt.w	80119a2 <MEMS_updateMagBufferIndex.constprop.22+0x1ca>
 801181e:	9b01      	ldr	r3, [sp, #4]
 8011820:	2b00      	cmp	r3, #0
 8011822:	f000 80b9 	beq.w	8011998 <MEMS_updateMagBufferIndex.constprop.22+0x1c0>
 8011826:	2600      	movs	r6, #0
 8011828:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801182c:	4681      	mov	r9, r0
 801182e:	ee87 8a80 	vdiv.f32	s16, s15, s0
 8011832:	e9cd 6602 	strd	r6, r6, [sp, #8]
 8011836:	e9cd 6604 	strd	r6, r6, [sp, #16]
 801183a:	9606      	str	r6, [sp, #24]
 801183c:	46b3      	mov	fp, r6
 801183e:	2701      	movs	r7, #1
 8011840:	e021      	b.n	8011886 <MEMS_updateMagBufferIndex.constprop.22+0xae>
 8011842:	3c20      	subs	r4, #32
 8011844:	fa07 f404 	lsl.w	r4, r7, r4
 8011848:	ea24 040b 	bic.w	r4, r4, fp
 801184c:	f1ba 0f1f 	cmp.w	sl, #31
 8011850:	ea8b 0b04 	eor.w	fp, fp, r4
 8011854:	d97a      	bls.n	801194c <MEMS_updateMagBufferIndex.constprop.22+0x174>
 8011856:	9905      	ldr	r1, [sp, #20]
 8011858:	f1aa 0220 	sub.w	r2, sl, #32
 801185c:	fa07 f202 	lsl.w	r2, r7, r2
 8011860:	ea22 0201 	bic.w	r2, r2, r1
 8011864:	404a      	eors	r2, r1
 8011866:	2b1f      	cmp	r3, #31
 8011868:	9205      	str	r2, [sp, #20]
 801186a:	d978      	bls.n	801195e <MEMS_updateMagBufferIndex.constprop.22+0x186>
 801186c:	9a03      	ldr	r2, [sp, #12]
 801186e:	3b20      	subs	r3, #32
 8011870:	fa07 f303 	lsl.w	r3, r7, r3
 8011874:	ea23 0302 	bic.w	r3, r3, r2
 8011878:	4053      	eors	r3, r2
 801187a:	3601      	adds	r6, #1
 801187c:	9a01      	ldr	r2, [sp, #4]
 801187e:	9303      	str	r3, [sp, #12]
 8011880:	b2f3      	uxtb	r3, r6
 8011882:	429a      	cmp	r2, r3
 8011884:	d977      	bls.n	8011976 <MEMS_updateMagBufferIndex.constprop.22+0x19e>
 8011886:	9b07      	ldr	r3, [sp, #28]
 8011888:	199a      	adds	r2, r3, r6
 801188a:	fb92 f3f8 	sdiv	r3, r2, r8
 801188e:	fb08 2313 	mls	r3, r8, r3, r2
 8011892:	b2db      	uxtb	r3, r3
 8011894:	f103 0a04 	add.w	sl, r3, #4
 8011898:	eb05 02ca 	add.w	r2, r5, sl, lsl #3
 801189c:	f9b2 00e2 	ldrsh.w	r0, [r2, #226]	; 0xe2
 80118a0:	fb90 f2f9 	sdiv	r2, r0, r9
 80118a4:	fb09 0212 	mls	r2, r9, r2, r0
 80118a8:	2a00      	cmp	r2, #0
 80118aa:	bfb8      	it	lt
 80118ac:	444a      	addlt	r2, r9
 80118ae:	b213      	sxth	r3, r2
 80118b0:	ee00 3a10 	vmov	s0, r3
 80118b4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80118b8:	ee20 0a08 	vmul.f32	s0, s0, s16
 80118bc:	f008 faee 	bl	8019e9c <roundf>
 80118c0:	eb05 02ca 	add.w	r2, r5, sl, lsl #3
 80118c4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80118c8:	f9b2 00e4 	ldrsh.w	r0, [r2, #228]	; 0xe4
 80118cc:	fb90 f2f9 	sdiv	r2, r0, r9
 80118d0:	fb09 0212 	mls	r2, r9, r2, r0
 80118d4:	2a00      	cmp	r2, #0
 80118d6:	bfb8      	it	lt
 80118d8:	444a      	addlt	r2, r9
 80118da:	b213      	sxth	r3, r2
 80118dc:	ee00 3a10 	vmov	s0, r3
 80118e0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80118e4:	edcd 7a00 	vstr	s15, [sp]
 80118e8:	ee20 0a08 	vmul.f32	s0, s0, s16
 80118ec:	f008 fad6 	bl	8019e9c <roundf>
 80118f0:	eb05 03ca 	add.w	r3, r5, sl, lsl #3
 80118f4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80118f8:	f9b3 20e6 	ldrsh.w	r2, [r3, #230]	; 0xe6
 80118fc:	fb92 f3f9 	sdiv	r3, r2, r9
 8011900:	fb09 2313 	mls	r3, r9, r3, r2
 8011904:	2b00      	cmp	r3, #0
 8011906:	bfb8      	it	lt
 8011908:	444b      	addlt	r3, r9
 801190a:	b21b      	sxth	r3, r3
 801190c:	ee00 3a10 	vmov	s0, r3
 8011910:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8011914:	f89d 4000 	ldrb.w	r4, [sp]
 8011918:	edcd 7a00 	vstr	s15, [sp]
 801191c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8011920:	f008 fabc 	bl	8019e9c <roundf>
 8011924:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8011928:	f89d a000 	ldrb.w	sl, [sp]
 801192c:	edcd 7a00 	vstr	s15, [sp]
 8011930:	2c1f      	cmp	r4, #31
 8011932:	f89d 3000 	ldrb.w	r3, [sp]
 8011936:	d884      	bhi.n	8011842 <MEMS_updateMagBufferIndex.constprop.22+0x6a>
 8011938:	9a06      	ldr	r2, [sp, #24]
 801193a:	fa07 f404 	lsl.w	r4, r7, r4
 801193e:	ea24 0402 	bic.w	r4, r4, r2
 8011942:	4062      	eors	r2, r4
 8011944:	f1ba 0f1f 	cmp.w	sl, #31
 8011948:	9206      	str	r2, [sp, #24]
 801194a:	d884      	bhi.n	8011856 <MEMS_updateMagBufferIndex.constprop.22+0x7e>
 801194c:	9904      	ldr	r1, [sp, #16]
 801194e:	fa07 f20a 	lsl.w	r2, r7, sl
 8011952:	ea22 0201 	bic.w	r2, r2, r1
 8011956:	404a      	eors	r2, r1
 8011958:	2b1f      	cmp	r3, #31
 801195a:	9204      	str	r2, [sp, #16]
 801195c:	d886      	bhi.n	801186c <MEMS_updateMagBufferIndex.constprop.22+0x94>
 801195e:	9a02      	ldr	r2, [sp, #8]
 8011960:	fa07 f303 	lsl.w	r3, r7, r3
 8011964:	ea23 0302 	bic.w	r3, r3, r2
 8011968:	4053      	eors	r3, r2
 801196a:	3601      	adds	r6, #1
 801196c:	9a01      	ldr	r2, [sp, #4]
 801196e:	9302      	str	r3, [sp, #8]
 8011970:	b2f3      	uxtb	r3, r6
 8011972:	429a      	cmp	r2, r3
 8011974:	d887      	bhi.n	8011886 <MEMS_updateMagBufferIndex.constprop.22+0xae>
 8011976:	9b06      	ldr	r3, [sp, #24]
 8011978:	f8c5 30ec 	str.w	r3, [r5, #236]	; 0xec
 801197c:	9b05      	ldr	r3, [sp, #20]
 801197e:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 8011982:	9b04      	ldr	r3, [sp, #16]
 8011984:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8011988:	9b03      	ldr	r3, [sp, #12]
 801198a:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
 801198e:	9b02      	ldr	r3, [sp, #8]
 8011990:	f8c5 b0e8 	str.w	fp, [r5, #232]	; 0xe8
 8011994:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
 8011998:	b009      	add	sp, #36	; 0x24
 801199a:	ecbd 8b02 	vpop	{d8}
 801199e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119a2:	4442      	add	r2, r8
 80119a4:	b213      	sxth	r3, r2
 80119a6:	9307      	str	r3, [sp, #28]
 80119a8:	e739      	b.n	801181e <MEMS_updateMagBufferIndex.constprop.22+0x46>
 80119aa:	fb92 f3f1 	sdiv	r3, r2, r1
 80119ae:	fb01 2213 	mls	r2, r1, r3, r2
 80119b2:	b213      	sxth	r3, r2
 80119b4:	9307      	str	r3, [sp, #28]
 80119b6:	e732      	b.n	801181e <MEMS_updateMagBufferIndex.constprop.22+0x46>
 80119b8:	20001708 	.word	0x20001708

080119bc <getMagStats.constprop.28>:
 80119bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119c0:	4d80      	ldr	r5, [pc, #512]	; (8011bc4 <getMagStats.constprop.28+0x208>)
 80119c2:	2400      	movs	r4, #0
 80119c4:	601c      	str	r4, [r3, #0]
 80119c6:	6014      	str	r4, [r2, #0]
 80119c8:	f895 e0e0 	ldrb.w	lr, [r5, #224]	; 0xe0
 80119cc:	f895 80e1 	ldrb.w	r8, [r5, #225]	; 0xe1
 80119d0:	f995 40e2 	ldrsb.w	r4, [r5, #226]	; 0xe2
 80119d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80119d8:	45c6      	cmp	lr, r8
 80119da:	b083      	sub	sp, #12
 80119dc:	f104 0401 	add.w	r4, r4, #1
 80119e0:	46a9      	mov	r9, r5
 80119e2:	ee87 4a80 	vdiv.f32	s8, s15, s0
 80119e6:	d105      	bne.n	80119f4 <getMagStats.constprop.28+0x38>
 80119e8:	fb94 f5fe 	sdiv	r5, r4, lr
 80119ec:	fb0e 4415 	mls	r4, lr, r5, r4
 80119f0:	b225      	sxth	r5, r4
 80119f2:	e00a      	b.n	8011a0a <getMagStats.constprop.28+0x4e>
 80119f4:	eba4 040e 	sub.w	r4, r4, lr
 80119f8:	fb94 f5f8 	sdiv	r5, r4, r8
 80119fc:	fb08 4415 	mls	r4, r8, r5, r4
 8011a00:	2c00      	cmp	r4, #0
 8011a02:	b225      	sxth	r5, r4
 8011a04:	bfbc      	itt	lt
 8011a06:	4444      	addlt	r4, r8
 8011a08:	b225      	sxthlt	r5, r4
 8011a0a:	eddf 3a6f 	vldr	s7, [pc, #444]	; 8011bc8 <getMagStats.constprop.28+0x20c>
 8011a0e:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8011a12:	f04f 0a00 	mov.w	sl, #0
 8011a16:	b26c      	sxtb	r4, r5
 8011a18:	ee64 3a23 	vmul.f32	s7, s8, s7
 8011a1c:	ee24 4a27 	vmul.f32	s8, s8, s15
 8011a20:	9401      	str	r4, [sp, #4]
 8011a22:	46d3      	mov	fp, sl
 8011a24:	9c01      	ldr	r4, [sp, #4]
 8011a26:	eb04 050a 	add.w	r5, r4, sl
 8011a2a:	fa5f f48a 	uxtb.w	r4, sl
 8011a2e:	45a6      	cmp	lr, r4
 8011a30:	f240 80a4 	bls.w	8011b7c <getMagStats.constprop.28+0x1c0>
 8011a34:	fb95 f4f8 	sdiv	r4, r5, r8
 8011a38:	fb08 5414 	mls	r4, r8, r4, r5
 8011a3c:	b2e4      	uxtb	r4, r4
 8011a3e:	3404      	adds	r4, #4
 8011a40:	eb09 04c4 	add.w	r4, r9, r4, lsl #3
 8011a44:	8887      	ldrh	r7, [r0, #4]
 8011a46:	f8b4 60e6 	ldrh.w	r6, [r4, #230]	; 0xe6
 8011a4a:	f8b4 50e2 	ldrh.w	r5, [r4, #226]	; 0xe2
 8011a4e:	f8b0 c000 	ldrh.w	ip, [r0]
 8011a52:	f8b4 40e4 	ldrh.w	r4, [r4, #228]	; 0xe4
 8011a56:	ed91 2a05 	vldr	s4, [r1, #20]
 8011a5a:	edd1 2a02 	vldr	s5, [r1, #8]
 8011a5e:	edd1 0a03 	vldr	s1, [r1, #12]
 8011a62:	ed91 7a07 	vldr	s14, [r1, #28]
 8011a66:	ed91 1a01 	vldr	s2, [r1, #4]
 8011a6a:	edd1 4a04 	vldr	s9, [r1, #16]
 8011a6e:	edd1 6a08 	vldr	s13, [r1, #32]
 8011a72:	edd1 1a06 	vldr	s3, [r1, #24]
 8011a76:	edd1 5a00 	vldr	s11, [r1]
 8011a7a:	ed92 3a00 	vldr	s6, [r2]
 8011a7e:	1bf6      	subs	r6, r6, r7
 8011a80:	b236      	sxth	r6, r6
 8011a82:	8847      	ldrh	r7, [r0, #2]
 8011a84:	ee07 6a90 	vmov	s15, r6
 8011a88:	eba5 050c 	sub.w	r5, r5, ip
 8011a8c:	b22d      	sxth	r5, r5
 8011a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a92:	1be4      	subs	r4, r4, r7
 8011a94:	ee06 5a10 	vmov	s12, r5
 8011a98:	b224      	sxth	r4, r4
 8011a9a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011a9e:	ee05 4a10 	vmov	s10, r4
 8011aa2:	ee27 2a82 	vmul.f32	s4, s15, s4
 8011aa6:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8011aaa:	ee67 2aa2 	vmul.f32	s5, s15, s5
 8011aae:	eea6 2a20 	vfma.f32	s4, s12, s1
 8011ab2:	f10b 0601 	add.w	r6, fp, #1
 8011ab6:	f10a 0a01 	add.w	sl, sl, #1
 8011aba:	ee25 7a07 	vmul.f32	s14, s10, s14
 8011abe:	eee5 2a01 	vfma.f32	s5, s10, s2
 8011ac2:	ee25 5a24 	vmul.f32	s10, s10, s9
 8011ac6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011aca:	eebd 2ac2 	vcvt.s32.f32	s4, s4
 8011ace:	eefd 6ac5 	vcvt.s32.f32	s13, s10
 8011ad2:	eea6 7a21 	vfma.f32	s14, s12, s3
 8011ad6:	ee26 6a25 	vmul.f32	s12, s12, s11
 8011ada:	ee16 7a90 	vmov	r7, s13
 8011ade:	ee12 4a10 	vmov	r4, s4
 8011ae2:	eefd 2ae2 	vcvt.s32.f32	s5, s5
 8011ae6:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 8011aea:	443c      	add	r4, r7
 8011aec:	fb14 f704 	smulbb	r7, r4, r4
 8011af0:	ee12 5a90 	vmov	r5, s5
 8011af4:	ee16 4a10 	vmov	r4, s12
 8011af8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b00:	4425      	add	r5, r4
 8011b02:	fb15 7505 	smlabb	r5, r5, r5, r7
 8011b06:	ee17 4a90 	vmov	r4, s15
 8011b0a:	ee17 7a10 	vmov	r7, s14
 8011b0e:	4427      	add	r7, r4
 8011b10:	fb17 5407 	smlabb	r4, r7, r7, r5
 8011b14:	ee07 4a90 	vmov	s15, r4
 8011b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b1c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8011b20:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011b24:	ee17 4a10 	vmov	r4, s14
 8011b28:	b224      	sxth	r4, r4
 8011b2a:	ee07 4a10 	vmov	s14, r4
 8011b2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011b32:	ee77 7a63 	vsub.f32	s15, s14, s7
 8011b36:	ee33 7a07 	vadd.f32	s14, s6, s14
 8011b3a:	eef0 7ae7 	vabs.f32	s15, s15
 8011b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b42:	ed82 7a00 	vstr	s14, [r2]
 8011b46:	ee17 4a90 	vmov	r4, s15
 8011b4a:	b224      	sxth	r4, r4
 8011b4c:	ee07 4a90 	vmov	s15, r4
 8011b50:	fb04 f404 	mul.w	r4, r4, r4
 8011b54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011b58:	ee07 4a90 	vmov	s15, r4
 8011b5c:	eeb4 4ac7 	vcmpe.f32	s8, s14
 8011b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b64:	ed93 7a00 	vldr	s14, [r3]
 8011b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b70:	bf48      	it	mi
 8011b72:	fa5f fb86 	uxtbmi.w	fp, r6
 8011b76:	edc3 7a00 	vstr	s15, [r3]
 8011b7a:	e753      	b.n	8011a24 <getMagStats.constprop.28+0x68>
 8011b7c:	ee07 ea90 	vmov	s15, lr
 8011b80:	ed93 7a00 	vldr	s14, [r3]
 8011b84:	eddf 6a11 	vldr	s13, [pc, #68]	; 8011bcc <getMagStats.constprop.28+0x210>
 8011b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b8c:	4658      	mov	r0, fp
 8011b8e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8011b92:	eeb1 7ac6 	vsqrt.f32	s14, s12
 8011b96:	ee20 7a07 	vmul.f32	s14, s0, s14
 8011b9a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ba2:	bfb8      	it	lt
 8011ba4:	eeb0 7a66 	vmovlt.f32	s14, s13
 8011ba8:	ed83 7a00 	vstr	s14, [r3]
 8011bac:	ed92 7a00 	vldr	s14, [r2]
 8011bb0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011bb4:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8011bb8:	ed82 7a00 	vstr	s14, [r2]
 8011bbc:	b003      	add	sp, #12
 8011bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bc2:	bf00      	nop
 8011bc4:	20001708 	.word	0x20001708
 8011bc8:	423c0000 	.word	0x423c0000
 8011bcc:	3f59999a 	.word	0x3f59999a

08011bd0 <MEMS_solveEllipsoid.constprop.25>:
 8011bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bd4:	ed2d 8b10 	vpush	{d8-d15}
 8011bd8:	4bb9      	ldr	r3, [pc, #740]	; (8011ec0 <MEMS_solveEllipsoid.constprop.25+0x2f0>)
 8011bda:	2400      	movs	r4, #0
 8011bdc:	6014      	str	r4, [r2, #0]
 8011bde:	f893 50e0 	ldrb.w	r5, [r3, #224]	; 0xe0
 8011be2:	f893 60e1 	ldrb.w	r6, [r3, #225]	; 0xe1
 8011be6:	f993 70e2 	ldrsb.w	r7, [r3, #226]	; 0xe2
 8011bea:	f5ad 7d6f 	sub.w	sp, sp, #956	; 0x3bc
 8011bee:	42b5      	cmp	r5, r6
 8011bf0:	9201      	str	r2, [sp, #4]
 8011bf2:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	910e      	str	r1, [sp, #56]	; 0x38
 8011bfa:	f107 0701 	add.w	r7, r7, #1
 8011bfe:	4698      	mov	r8, r3
 8011c00:	d106      	bne.n	8011c10 <MEMS_solveEllipsoid.constprop.25+0x40>
 8011c02:	fb97 f9f5 	sdiv	r9, r7, r5
 8011c06:	fb05 7919 	mls	r9, r5, r9, r7
 8011c0a:	fa0f f989 	sxth.w	r9, r9
 8011c0e:	e00d      	b.n	8011c2c <MEMS_solveEllipsoid.constprop.25+0x5c>
 8011c10:	eba7 0905 	sub.w	r9, r7, r5
 8011c14:	fb99 f3f6 	sdiv	r3, r9, r6
 8011c18:	fb06 9313 	mls	r3, r6, r3, r9
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	fa0f f983 	sxth.w	r9, r3
 8011c22:	bfbc      	itt	lt
 8011c24:	eb06 0903 	addlt.w	r9, r6, r3
 8011c28:	fa0f f989 	sxthlt.w	r9, r9
 8011c2c:	ed9f 8aa8 	vldr	s16, [pc, #672]	; 8011ed0 <MEMS_solveEllipsoid.constprop.25+0x300>
 8011c30:	2200      	movs	r2, #0
 8011c32:	eef0 8a48 	vmov.f32	s17, s16
 8011c36:	eeb0 9a48 	vmov.f32	s18, s16
 8011c3a:	b2d3      	uxtb	r3, r2
 8011c3c:	429d      	cmp	r5, r3
 8011c3e:	eb09 0102 	add.w	r1, r9, r2
 8011c42:	d921      	bls.n	8011c88 <MEMS_solveEllipsoid.constprop.25+0xb8>
 8011c44:	fb91 f3f6 	sdiv	r3, r1, r6
 8011c48:	fb06 1313 	mls	r3, r6, r3, r1
 8011c4c:	b2db      	uxtb	r3, r3
 8011c4e:	3304      	adds	r3, #4
 8011c50:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8011c54:	3201      	adds	r2, #1
 8011c56:	f9b3 10e2 	ldrsh.w	r1, [r3, #226]	; 0xe2
 8011c5a:	ee06 1a90 	vmov	s13, r1
 8011c5e:	f9b3 10e4 	ldrsh.w	r1, [r3, #228]	; 0xe4
 8011c62:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	; 0xe6
 8011c66:	ee07 1a10 	vmov	s14, r1
 8011c6a:	ee07 3a90 	vmov	s15, r3
 8011c6e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011c72:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c7a:	ee39 9a26 	vadd.f32	s18, s18, s13
 8011c7e:	ee78 8a87 	vadd.f32	s17, s17, s14
 8011c82:	ee38 8a27 	vadd.f32	s16, s16, s15
 8011c86:	e7d8      	b.n	8011c3a <MEMS_solveEllipsoid.constprop.25+0x6a>
 8011c88:	ee07 5a90 	vmov	s15, r5
 8011c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011c90:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8011c94:	eec9 7a87 	vdiv.f32	s15, s19, s14
 8011c98:	2210      	movs	r2, #16
 8011c9a:	a82e      	add	r0, sp, #184	; 0xb8
 8011c9c:	2100      	movs	r1, #0
 8011c9e:	ee29 9a27 	vmul.f32	s18, s18, s15
 8011ca2:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8011ca6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011caa:	ed8d 9a13 	vstr	s18, [sp, #76]	; 0x4c
 8011cae:	edcd 8a14 	vstr	s17, [sp, #80]	; 0x50
 8011cb2:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 8011cb6:	f005 f9a3 	bl	8017000 <memset>
 8011cba:	eddf 6a85 	vldr	s13, [pc, #532]	; 8011ed0 <MEMS_solveEllipsoid.constprop.25+0x300>
 8011cbe:	eef0 4a69 	vmov.f32	s9, s19
 8011cc2:	eeb0 4a66 	vmov.f32	s8, s13
 8011cc6:	eef0 7a66 	vmov.f32	s15, s13
 8011cca:	eef0 3a66 	vmov.f32	s7, s13
 8011cce:	eeb0 3a66 	vmov.f32	s6, s13
 8011cd2:	eeb0 ba66 	vmov.f32	s22, s13
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	b2d3      	uxtb	r3, r2
 8011cda:	429d      	cmp	r5, r3
 8011cdc:	eb09 0102 	add.w	r1, r9, r2
 8011ce0:	d92d      	bls.n	8011d3e <MEMS_solveEllipsoid.constprop.25+0x16e>
 8011ce2:	fb91 f3f6 	sdiv	r3, r1, r6
 8011ce6:	fb06 1313 	mls	r3, r6, r3, r1
 8011cea:	b2db      	uxtb	r3, r3
 8011cec:	3304      	adds	r3, #4
 8011cee:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8011cf2:	3201      	adds	r2, #1
 8011cf4:	f9b3 10e2 	ldrsh.w	r1, [r3, #226]	; 0xe2
 8011cf8:	ee05 1a90 	vmov	s11, r1
 8011cfc:	f9b3 10e4 	ldrsh.w	r1, [r3, #228]	; 0xe4
 8011d00:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	; 0xe6
 8011d04:	ee06 1a10 	vmov	s12, r1
 8011d08:	ee07 3a10 	vmov	s14, r3
 8011d0c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8011d10:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011d14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011d18:	ee75 5ac9 	vsub.f32	s11, s11, s18
 8011d1c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8011d20:	ee37 7a48 	vsub.f32	s14, s14, s16
 8011d24:	eea5 baa5 	vfma.f32	s22, s11, s11
 8011d28:	eea5 3a86 	vfma.f32	s6, s11, s12
 8011d2c:	eee6 7a06 	vfma.f32	s15, s12, s12
 8011d30:	eee5 3a87 	vfma.f32	s7, s11, s14
 8011d34:	eea6 4a07 	vfma.f32	s8, s12, s14
 8011d38:	eee7 6a07 	vfma.f32	s13, s14, s14
 8011d3c:	e7cc      	b.n	8011cd8 <MEMS_solveEllipsoid.constprop.25+0x108>
 8011d3e:	ee23 6aa3 	vmul.f32	s12, s7, s7
 8011d42:	ab28      	add	r3, sp, #160	; 0xa0
 8011d44:	eea3 6a03 	vfma.f32	s12, s6, s6
 8011d48:	ed8d ba28 	vstr	s22, [sp, #160]	; 0xa0
 8011d4c:	eea4 6a04 	vfma.f32	s12, s8, s8
 8011d50:	ed8d 3a29 	vstr	s6, [sp, #164]	; 0xa4
 8011d54:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d5c:	edcd 3a2a 	vstr	s7, [sp, #168]	; 0xa8
 8011d60:	edcd 7a2b 	vstr	s15, [sp, #172]	; 0xac
 8011d64:	ed8d 4a2c 	vstr	s8, [sp, #176]	; 0xb0
 8011d68:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8011d6c:	f000 80d2 	beq.w	8011f14 <MEMS_solveEllipsoid.constprop.25+0x344>
 8011d70:	ee7b 9a26 	vadd.f32	s19, s22, s13
 8011d74:	eddf aa53 	vldr	s21, [pc, #332]	; 8011ec4 <MEMS_solveEllipsoid.constprop.25+0x2f4>
 8011d78:	eddf 5a53 	vldr	s11, [pc, #332]	; 8011ec8 <MEMS_solveEllipsoid.constprop.25+0x2f8>
 8011d7c:	9302      	str	r3, [sp, #8]
 8011d7e:	ee79 9aa7 	vadd.f32	s19, s19, s15
 8011d82:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8011d86:	ee69 9aaa 	vmul.f32	s19, s19, s21
 8011d8a:	f04f 0900 	mov.w	r9, #0
 8011d8e:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8011d92:	ee3b 7a69 	vsub.f32	s14, s22, s19
 8011d96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011d9a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8011d9e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8011da2:	4648      	mov	r0, r9
 8011da4:	eee6 7a05 	vfma.f32	s15, s12, s10
 8011da8:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8011dac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011db0:	eeb1 aae7 	vsqrt.f32	s20, s15
 8011db4:	ee84 7a8a 	vdiv.f32	s14, s9, s20
 8011db8:	f100 0e01 	add.w	lr, r0, #1
 8011dbc:	fb00 f10e 	mul.w	r1, r0, lr
 8011dc0:	2302      	movs	r3, #2
 8011dc2:	fb91 f1f3 	sdiv	r1, r1, r3
 8011dc6:	eba9 0101 	sub.w	r1, r9, r1
 8011dca:	aab7      	add	r2, sp, #732	; 0x2dc
 8011dcc:	b2c9      	uxtb	r1, r1
 8011dce:	230c      	movs	r3, #12
 8011dd0:	fa5f fc80 	uxtb.w	ip, r0
 8011dd4:	9103      	str	r1, [sp, #12]
 8011dd6:	fb03 2000 	mla	r0, r3, r0, r2
 8011dda:	2200      	movs	r2, #0
 8011ddc:	fa5f fa82 	uxtb.w	sl, r2
 8011de0:	9903      	ldr	r1, [sp, #12]
 8011de2:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 8011de6:	45d4      	cmp	ip, sl
 8011de8:	4463      	add	r3, ip
 8011dea:	448a      	add	sl, r1
 8011dec:	fb02 2b02 	mla	fp, r2, r2, r2
 8011df0:	d80e      	bhi.n	8011e10 <MEMS_solveEllipsoid.constprop.25+0x240>
 8011df2:	fa5f f38a 	uxtb.w	r3, sl
 8011df6:	d111      	bne.n	8011e1c <MEMS_solveEllipsoid.constprop.25+0x24c>
 8011df8:	9902      	ldr	r1, [sp, #8]
 8011dfa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011dfe:	edd3 7a00 	vldr	s15, [r3]
 8011e02:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8011e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011e0a:	edc0 7a00 	vstr	s15, [r0]
 8011e0e:	e00e      	b.n	8011e2e <MEMS_solveEllipsoid.constprop.25+0x25e>
 8011e10:	2102      	movs	r1, #2
 8011e12:	fb9b faf1 	sdiv	sl, fp, r1
 8011e16:	eba3 030a 	sub.w	r3, r3, sl
 8011e1a:	b2db      	uxtb	r3, r3
 8011e1c:	9902      	ldr	r1, [sp, #8]
 8011e1e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011e22:	edd3 7a00 	vldr	s15, [r3]
 8011e26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011e2a:	edc0 7a00 	vstr	s15, [r0]
 8011e2e:	3201      	adds	r2, #1
 8011e30:	2a03      	cmp	r2, #3
 8011e32:	f100 0004 	add.w	r0, r0, #4
 8011e36:	d1d1      	bne.n	8011ddc <MEMS_solveEllipsoid.constprop.25+0x20c>
 8011e38:	4670      	mov	r0, lr
 8011e3a:	f109 0903 	add.w	r9, r9, #3
 8011e3e:	2803      	cmp	r0, #3
 8011e40:	fa5f f989 	uxtb.w	r9, r9
 8011e44:	d1b8      	bne.n	8011db8 <MEMS_solveEllipsoid.constprop.25+0x1e8>
 8011e46:	ed9d 5abf 	vldr	s10, [sp, #764]	; 0x2fc
 8011e4a:	eddd 6aba 	vldr	s13, [sp, #744]	; 0x2e8
 8011e4e:	ed9d 4abc 	vldr	s8, [sp, #752]	; 0x2f0
 8011e52:	ed9d 6abe 	vldr	s12, [sp, #760]	; 0x2f8
 8011e56:	eddd 7abd 	vldr	s15, [sp, #756]	; 0x2f4
 8011e5a:	eddd 5abb 	vldr	s11, [sp, #748]	; 0x2ec
 8011e5e:	eddd 3ab8 	vldr	s7, [sp, #736]	; 0x2e0
 8011e62:	ee26 0ac5 	vnmul.f32	s0, s13, s10
 8011e66:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8011e6a:	eea4 0a27 	vfma.f32	s0, s8, s15
 8011e6e:	eea5 7a85 	vfma.f32	s14, s11, s10
 8011e72:	ed9d 4ab7 	vldr	s8, [sp, #732]	; 0x2dc
 8011e76:	ed9d 5ab9 	vldr	s10, [sp, #740]	; 0x2e4
 8011e7a:	ee67 7ae5 	vnmul.f32	s15, s15, s11
 8011e7e:	ee20 0a23 	vmul.f32	s0, s0, s7
 8011e82:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011e86:	eea4 0a07 	vfma.f32	s0, s8, s14
 8011e8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011e8e:	eea5 0a27 	vfma.f32	s0, s10, s15
 8011e92:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8011e96:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011e9a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ea2:	d909      	bls.n	8011eb8 <MEMS_solveEllipsoid.constprop.25+0x2e8>
 8011ea4:	eeb4 0ae4 	vcmpe.f32	s0, s9
 8011ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eac:	da14      	bge.n	8011ed8 <MEMS_solveEllipsoid.constprop.25+0x308>
 8011eae:	f008 f939 	bl	801a124 <acosf>
 8011eb2:	ee60 aa2a 	vmul.f32	s21, s0, s21
 8011eb6:	e011      	b.n	8011edc <MEMS_solveEllipsoid.constprop.25+0x30c>
 8011eb8:	eddf aa04 	vldr	s21, [pc, #16]	; 8011ecc <MEMS_solveEllipsoid.constprop.25+0x2fc>
 8011ebc:	e00e      	b.n	8011edc <MEMS_solveEllipsoid.constprop.25+0x30c>
 8011ebe:	bf00      	nop
 8011ec0:	20001708 	.word	0x20001708
 8011ec4:	3eaaaaab 	.word	0x3eaaaaab
 8011ec8:	3e2aaaab 	.word	0x3e2aaaab
 8011ecc:	3f860a92 	.word	0x3f860a92
 8011ed0:	00000000 	.word	0x00000000
 8011ed4:	40060a92 	.word	0x40060a92
 8011ed8:	ed5f aa03 	vldr	s21, [pc, #-12]	; 8011ed0 <MEMS_solveEllipsoid.constprop.25+0x300>
 8011edc:	eeb0 0a6a 	vmov.f32	s0, s21
 8011ee0:	f007 ff9c 	bl	8019e1c <cosf>
 8011ee4:	ee3a aa0a 	vadd.f32	s20, s20, s20
 8011ee8:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8011ed4 <MEMS_solveEllipsoid.constprop.25+0x304>
 8011eec:	eeb0 ba69 	vmov.f32	s22, s19
 8011ef0:	eea0 ba0a 	vfma.f32	s22, s0, s20
 8011ef4:	ee3a 0aa7 	vadd.f32	s0, s21, s15
 8011ef8:	f007 ff90 	bl	8019e1c <cosf>
 8011efc:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8011f00:	eef0 6a69 	vmov.f32	s13, s19
 8011f04:	eeb0 7a4b 	vmov.f32	s14, s22
 8011f08:	eee0 6a0a 	vfma.f32	s13, s0, s20
 8011f0c:	ee99 7aa7 	vfnms.f32	s14, s19, s15
 8011f10:	ee77 7a66 	vsub.f32	s15, s14, s13
 8011f14:	eeb0 7acb 	vabs.f32	s14, s22
 8011f18:	eef0 7ae7 	vabs.f32	s15, s15
 8011f1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f24:	bfb4      	ite	lt
 8011f26:	eeb0 6a47 	vmovlt.f32	s12, s14
 8011f2a:	eeb0 6a67 	vmovge.f32	s12, s15
 8011f2e:	eef0 6ae6 	vabs.f32	s13, s13
 8011f32:	bf88      	it	hi
 8011f34:	eef0 7a47 	vmovhi.f32	s15, s14
 8011f38:	eef4 6ac6 	vcmpe.f32	s13, s12
 8011f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f40:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011f44:	bfa8      	it	ge
 8011f46:	eeb0 6a66 	vmovge.f32	s12, s13
 8011f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f4e:	bf88      	it	hi
 8011f50:	eef0 7a66 	vmovhi.f32	s15, s13
 8011f54:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8011f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011f5c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f64:	f300 853c 	bgt.w	80129e0 <MEMS_solveEllipsoid.constprop.25+0xe10>
 8011f68:	2210      	movs	r2, #16
 8011f6a:	2100      	movs	r1, #0
 8011f6c:	a82e      	add	r0, sp, #184	; 0xb8
 8011f6e:	f005 f847 	bl	8017000 <memset>
 8011f72:	2218      	movs	r2, #24
 8011f74:	2100      	movs	r1, #0
 8011f76:	a8e7      	add	r0, sp, #924	; 0x39c
 8011f78:	f005 f842 	bl	8017000 <memset>
 8011f7c:	4b7c      	ldr	r3, [pc, #496]	; (8012170 <MEMS_solveEllipsoid.constprop.25+0x5a0>)
 8011f7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011f82:	ab10      	add	r3, sp, #64	; 0x40
 8011f84:	c303      	stmia	r3!, {r0, r1}
 8011f86:	42b5      	cmp	r5, r6
 8011f88:	801a      	strh	r2, [r3, #0]
 8011f8a:	d105      	bne.n	8011f98 <MEMS_solveEllipsoid.constprop.25+0x3c8>
 8011f8c:	fb97 f1f5 	sdiv	r1, r7, r5
 8011f90:	fb05 7711 	mls	r7, r5, r1, r7
 8011f94:	b239      	sxth	r1, r7
 8011f96:	e009      	b.n	8011fac <MEMS_solveEllipsoid.constprop.25+0x3dc>
 8011f98:	1b7f      	subs	r7, r7, r5
 8011f9a:	fb97 f3f6 	sdiv	r3, r7, r6
 8011f9e:	fb06 7713 	mls	r7, r6, r3, r7
 8011fa2:	2f00      	cmp	r7, #0
 8011fa4:	b239      	sxth	r1, r7
 8011fa6:	bfbc      	itt	lt
 8011fa8:	19bf      	addlt	r7, r7, r6
 8011faa:	b239      	sxthlt	r1, r7
 8011fac:	eddf 7a71 	vldr	s15, [pc, #452]	; 8012174 <MEMS_solveEllipsoid.constprop.25+0x5a4>
 8011fb0:	ed8d 8a0f 	vstr	s16, [sp, #60]	; 0x3c
 8011fb4:	2000      	movs	r0, #0
 8011fb6:	eef0 ba67 	vmov.f32	s23, s15
 8011fba:	eeb0 ca67 	vmov.f32	s24, s15
 8011fbe:	eef0 2a67 	vmov.f32	s5, s15
 8011fc2:	eef0 fa67 	vmov.f32	s31, s15
 8011fc6:	eeb0 2a67 	vmov.f32	s4, s15
 8011fca:	eeb0 0a67 	vmov.f32	s0, s15
 8011fce:	eef0 0a67 	vmov.f32	s1, s15
 8011fd2:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
 8011fd6:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 8011fda:	eef0 1a67 	vmov.f32	s3, s15
 8011fde:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
 8011fe2:	eef0 aa67 	vmov.f32	s21, s15
 8011fe6:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 8011fea:	eeb0 1a67 	vmov.f32	s2, s15
 8011fee:	edcd 7a08 	vstr	s15, [sp, #32]
 8011ff2:	eeb0 aa67 	vmov.f32	s20, s15
 8011ff6:	eeb0 ba67 	vmov.f32	s22, s15
 8011ffa:	edcd 7a07 	vstr	s15, [sp, #28]
 8011ffe:	edcd 7a06 	vstr	s15, [sp, #24]
 8012002:	edcd 7a05 	vstr	s15, [sp, #20]
 8012006:	eef0 9a67 	vmov.f32	s19, s15
 801200a:	eeb0 ea67 	vmov.f32	s28, s15
 801200e:	eef0 ea67 	vmov.f32	s29, s15
 8012012:	eeb0 fa67 	vmov.f32	s30, s15
 8012016:	eef0 da67 	vmov.f32	s27, s15
 801201a:	eeb0 da67 	vmov.f32	s26, s15
 801201e:	eef0 ca67 	vmov.f32	s25, s15
 8012022:	edcd 7a04 	vstr	s15, [sp, #16]
 8012026:	edcd 7a03 	vstr	s15, [sp, #12]
 801202a:	edcd 7a02 	vstr	s15, [sp, #8]
 801202e:	b2c3      	uxtb	r3, r0
 8012030:	429d      	cmp	r5, r3
 8012032:	eb01 0200 	add.w	r2, r1, r0
 8012036:	f240 809f 	bls.w	8012178 <MEMS_solveEllipsoid.constprop.25+0x5a8>
 801203a:	fb92 f3f6 	sdiv	r3, r2, r6
 801203e:	fb06 2313 	mls	r3, r6, r3, r2
 8012042:	b2db      	uxtb	r3, r3
 8012044:	3304      	adds	r3, #4
 8012046:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801204a:	ed9d 8a02 	vldr	s16, [sp, #8]
 801204e:	f9b3 20e2 	ldrsh.w	r2, [r3, #226]	; 0xe2
 8012052:	eddd 5a0f 	vldr	s11, [sp, #60]	; 0x3c
 8012056:	ee07 2a10 	vmov	s14, r2
 801205a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801205e:	f9b3 20e4 	ldrsh.w	r2, [r3, #228]	; 0xe4
 8012062:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	; 0xe6
 8012066:	ee37 7a49 	vsub.f32	s14, s14, s18
 801206a:	ee06 3a90 	vmov	s13, r3
 801206e:	ee67 4a07 	vmul.f32	s9, s14, s14
 8012072:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012076:	eea4 8aa4 	vfma.f32	s16, s9, s9
 801207a:	3001      	adds	r0, #1
 801207c:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8012080:	ed8d 8a02 	vstr	s16, [sp, #8]
 8012084:	ed9d 8a07 	vldr	s16, [sp, #28]
 8012088:	eea7 8a24 	vfma.f32	s16, s14, s9
 801208c:	ee27 3a26 	vmul.f32	s6, s14, s13
 8012090:	ee06 2a10 	vmov	s12, r2
 8012094:	ed8d 8a07 	vstr	s16, [sp, #28]
 8012098:	ed9d 8a05 	vldr	s16, [sp, #20]
 801209c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80120a0:	eea3 8a24 	vfma.f32	s16, s6, s9
 80120a4:	ee36 6a68 	vsub.f32	s12, s12, s17
 80120a8:	ed8d 8a05 	vstr	s16, [sp, #20]
 80120ac:	ee67 3a06 	vmul.f32	s7, s14, s12
 80120b0:	ed9d 8a06 	vldr	s16, [sp, #24]
 80120b4:	eea3 8aa4 	vfma.f32	s16, s7, s9
 80120b8:	ee26 5a06 	vmul.f32	s10, s12, s12
 80120bc:	ee26 4a26 	vmul.f32	s8, s12, s13
 80120c0:	ed8d 8a06 	vstr	s16, [sp, #24]
 80120c4:	ed9d 8a08 	vldr	s16, [sp, #32]
 80120c8:	eea4 8a05 	vfma.f32	s16, s8, s10
 80120cc:	ee66 5aa6 	vmul.f32	s11, s13, s13
 80120d0:	ed8d 8a08 	vstr	s16, [sp, #32]
 80120d4:	ed9d 8a03 	vldr	s16, [sp, #12]
 80120d8:	eea5 8a05 	vfma.f32	s16, s10, s10
 80120dc:	eea6 ba24 	vfma.f32	s22, s12, s9
 80120e0:	ed8d 8a03 	vstr	s16, [sp, #12]
 80120e4:	ed9d 8a09 	vldr	s16, [sp, #36]	; 0x24
 80120e8:	eea3 8a85 	vfma.f32	s16, s7, s10
 80120ec:	eea6 aaa4 	vfma.f32	s20, s13, s9
 80120f0:	ed8d 8a09 	vstr	s16, [sp, #36]	; 0x24
 80120f4:	ed9d 8a0a 	vldr	s16, [sp, #40]	; 0x28
 80120f8:	eea6 8a05 	vfma.f32	s16, s12, s10
 80120fc:	eee4 9a24 	vfma.f32	s19, s8, s9
 8012100:	ed8d 8a0a 	vstr	s16, [sp, #40]	; 0x28
 8012104:	ed9d 8a0b 	vldr	s16, [sp, #44]	; 0x2c
 8012108:	eea4 8a25 	vfma.f32	s16, s8, s11
 801210c:	eee4 ca04 	vfma.f32	s25, s8, s8
 8012110:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8012114:	ed9d 8a04 	vldr	s16, [sp, #16]
 8012118:	eea5 8aa5 	vfma.f32	s16, s11, s11
 801211c:	eee7 2a04 	vfma.f32	s5, s14, s8
 8012120:	ed8d 8a04 	vstr	s16, [sp, #16]
 8012124:	ed9d 8a0c 	vldr	s16, [sp, #48]	; 0x30
 8012128:	eea3 8a25 	vfma.f32	s16, s6, s11
 801212c:	eea3 da03 	vfma.f32	s26, s6, s6
 8012130:	eee3 daa3 	vfma.f32	s27, s7, s7
 8012134:	eea3 1a05 	vfma.f32	s2, s6, s10
 8012138:	eee7 aa05 	vfma.f32	s21, s14, s10
 801213c:	eee6 1a85 	vfma.f32	s3, s13, s10
 8012140:	ed8d 8a0c 	vstr	s16, [sp, #48]	; 0x30
 8012144:	eee3 0aa5 	vfma.f32	s1, s7, s11
 8012148:	eea7 0a25 	vfma.f32	s0, s14, s11
 801214c:	eea6 2a25 	vfma.f32	s4, s12, s11
 8012150:	eee6 faa5 	vfma.f32	s31, s13, s11
 8012154:	ee3f fa24 	vadd.f32	s30, s30, s9
 8012158:	ee3c ca04 	vadd.f32	s24, s24, s8
 801215c:	ee7b ba83 	vadd.f32	s23, s23, s6
 8012160:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012164:	ee7e ea85 	vadd.f32	s29, s29, s10
 8012168:	ee3e ea25 	vadd.f32	s28, s28, s11
 801216c:	e75f      	b.n	801202e <MEMS_solveEllipsoid.constprop.25+0x45e>
 801216e:	bf00      	nop
 8012170:	0801ca7c 	.word	0x0801ca7c
 8012174:	00000000 	.word	0x00000000
 8012178:	eddd 6a02 	vldr	s13, [sp, #8]
 801217c:	edcd cad2 	vstr	s25, [sp, #840]	; 0x348
 8012180:	edcd 6ab7 	vstr	s13, [sp, #732]	; 0x2dc
 8012184:	eddd 6a03 	vldr	s13, [sp, #12]
 8012188:	ed8d dad9 	vstr	s26, [sp, #868]	; 0x364
 801218c:	edcd 6ac1 	vstr	s13, [sp, #772]	; 0x304
 8012190:	eddd 6a04 	vldr	s13, [sp, #16]
 8012194:	edcd dadf 	vstr	s27, [sp, #892]	; 0x37c
 8012198:	edcd 6aca 	vstr	s13, [sp, #808]	; 0x328
 801219c:	eddd 6a05 	vldr	s13, [sp, #20]
 80121a0:	ed8d fae4 	vstr	s30, [sp, #912]	; 0x390
 80121a4:	edcd 6abb 	vstr	s13, [sp, #748]	; 0x2ec
 80121a8:	eddd 6a06 	vldr	s13, [sp, #24]
 80121ac:	edcd eae8 	vstr	s29, [sp, #928]	; 0x3a0
 80121b0:	edcd 6abc 	vstr	s13, [sp, #752]	; 0x2f0
 80121b4:	eddd 6a07 	vldr	s13, [sp, #28]
 80121b8:	ed8d eaeb 	vstr	s28, [sp, #940]	; 0x3ac
 80121bc:	edcd 6abd 	vstr	s13, [sp, #756]	; 0x2f4
 80121c0:	eddd 6a08 	vldr	s13, [sp, #32]
 80121c4:	edcd 9aba 	vstr	s19, [sp, #744]	; 0x2e8
 80121c8:	edcd 6ac3 	vstr	s13, [sp, #780]	; 0x30c
 80121cc:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 80121d0:	ed8d babe 	vstr	s22, [sp, #760]	; 0x2f8
 80121d4:	edcd 6ac5 	vstr	s13, [sp, #788]	; 0x314
 80121d8:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
 80121dc:	ed8d aabf 	vstr	s20, [sp, #764]	; 0x2fc
 80121e0:	ee07 5a10 	vmov	s14, r5
 80121e4:	edcd 6ac7 	vstr	s13, [sp, #796]	; 0x31c
 80121e8:	eddd 6a0b 	vldr	s13, [sp, #44]	; 0x2c
 80121ec:	ed8d 1ac4 	vstr	s2, [sp, #784]	; 0x310
 80121f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80121f4:	edcd aac6 	vstr	s21, [sp, #792]	; 0x318
 80121f8:	edcd 1ac8 	vstr	s3, [sp, #800]	; 0x320
 80121fc:	edcd 6acb 	vstr	s13, [sp, #812]	; 0x32c
 8012200:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
 8012204:	edcd 0acd 	vstr	s1, [sp, #820]	; 0x334
 8012208:	edcd 6acc 	vstr	s13, [sp, #816]	; 0x330
 801220c:	ed8d 0ace 	vstr	s0, [sp, #824]	; 0x338
 8012210:	ed8d 2acf 	vstr	s4, [sp, #828]	; 0x33c
 8012214:	edcd fad0 	vstr	s31, [sp, #832]	; 0x340
 8012218:	edcd 2ad5 	vstr	s5, [sp, #852]	; 0x354
 801221c:	ed8d cad8 	vstr	s24, [sp, #864]	; 0x360
 8012220:	edcd bade 	vstr	s23, [sp, #888]	; 0x378
 8012224:	edcd 7ae3 	vstr	s15, [sp, #908]	; 0x38c
 8012228:	ed8d fac0 	vstr	s30, [sp, #768]	; 0x300
 801222c:	2100      	movs	r1, #0
 801222e:	edcd eac9 	vstr	s29, [sp, #804]	; 0x324
 8012232:	ed8d ead1 	vstr	s28, [sp, #836]	; 0x344
 8012236:	edcd dab8 	vstr	s27, [sp, #736]	; 0x2e0
 801223a:	ed8d dab9 	vstr	s26, [sp, #740]	; 0x2e4
 801223e:	edcd cac2 	vstr	s25, [sp, #776]	; 0x308
 8012242:	ed8d cae9 	vstr	s24, [sp, #932]	; 0x3a4
 8012246:	edcd 7ae5 	vstr	s15, [sp, #916]	; 0x394
 801224a:	edcd bae6 	vstr	s23, [sp, #920]	; 0x398
 801224e:	ed8d bae0 	vstr	s22, [sp, #896]	; 0x380
 8012252:	edcd aae1 	vstr	s21, [sp, #900]	; 0x384
 8012256:	edcd 2ae2 	vstr	s5, [sp, #904]	; 0x388
 801225a:	ed8d aadb 	vstr	s20, [sp, #876]	; 0x36c
 801225e:	edcd 9ada 	vstr	s19, [sp, #872]	; 0x368
 8012262:	edcd 2adc 	vstr	s5, [sp, #880]	; 0x370
 8012266:	ed8d 0add 	vstr	s0, [sp, #884]	; 0x374
 801226a:	edcd 0ad3 	vstr	s1, [sp, #844]	; 0x34c
 801226e:	ed8d 1ad4 	vstr	s2, [sp, #848]	; 0x350
 8012272:	edcd 1ad6 	vstr	s3, [sp, #856]	; 0x358
 8012276:	ed8d 2ad7 	vstr	s4, [sp, #860]	; 0x35c
 801227a:	ed8d 7aed 	vstr	s14, [sp, #948]	; 0x3b4
 801227e:	2602      	movs	r6, #2
 8012280:	250b      	movs	r5, #11
 8012282:	1c48      	adds	r0, r1, #1
 8012284:	fb05 f301 	mul.w	r3, r5, r1
 8012288:	fb00 f201 	mul.w	r2, r0, r1
 801228c:	fb92 f2f6 	sdiv	r2, r2, r6
 8012290:	1a9b      	subs	r3, r3, r2
 8012292:	aab7      	add	r2, sp, #732	; 0x2dc
 8012294:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012298:	aa10      	add	r2, sp, #64	; 0x40
 801229a:	5c57      	ldrb	r7, [r2, r1]
 801229c:	ed93 7a00 	vldr	s14, [r3]
 80122a0:	aa10      	add	r2, sp, #64	; 0x40
 80122a2:	5c52      	ldrb	r2, [r2, r1]
 80122a4:	fb12 f207 	smulbb	r2, r2, r7
 80122a8:	ee07 2a90 	vmov	s15, r2
 80122ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122b0:	3101      	adds	r1, #1
 80122b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122b6:	b2ca      	uxtb	r2, r1
 80122b8:	2a0a      	cmp	r2, #10
 80122ba:	ece3 7a01 	vstmia	r3!, {s15}
 80122be:	d1ed      	bne.n	801229c <MEMS_solveEllipsoid.constprop.25+0x6cc>
 80122c0:	280a      	cmp	r0, #10
 80122c2:	4601      	mov	r1, r0
 80122c4:	d1dd      	bne.n	8012282 <MEMS_solveEllipsoid.constprop.25+0x6b2>
 80122c6:	2250      	movs	r2, #80	; 0x50
 80122c8:	2100      	movs	r1, #0
 80122ca:	a842      	add	r0, sp, #264	; 0x108
 80122cc:	f004 fe98 	bl	8017000 <memset>
 80122d0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80122d4:	4ad1      	ldr	r2, [pc, #836]	; (801261c <MEMS_solveEllipsoid.constprop.25+0xa4c>)
 80122d6:	9343      	str	r3, [sp, #268]	; 0x10c
 80122d8:	9344      	str	r3, [sp, #272]	; 0x110
 80122da:	9349      	str	r3, [sp, #292]	; 0x124
 80122dc:	9251      	str	r2, [sp, #324]	; 0x144
 80122de:	9254      	str	r2, [sp, #336]	; 0x150
 80122e0:	9256      	str	r2, [sp, #344]	; 0x158
 80122e2:	a937      	add	r1, sp, #220	; 0xdc
 80122e4:	2306      	movs	r3, #6
 80122e6:	2602      	movs	r6, #2
 80122e8:	250b      	movs	r5, #11
 80122ea:	fb05 f203 	mul.w	r2, r5, r3
 80122ee:	f1c3 0008 	rsb	r0, r3, #8
 80122f2:	1c5f      	adds	r7, r3, #1
 80122f4:	4410      	add	r0, r2
 80122f6:	fb07 f303 	mul.w	r3, r7, r3
 80122fa:	fb93 f3f6 	sdiv	r3, r3, r6
 80122fe:	425b      	negs	r3, r3
 8012300:	441a      	add	r2, r3
 8012302:	4403      	add	r3, r0
 8012304:	a8b7      	add	r0, sp, #732	; 0x2dc
 8012306:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801230a:	a8b8      	add	r0, sp, #736	; 0x2e0
 801230c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012310:	f1a1 0c60 	sub.w	ip, r1, #96	; 0x60
 8012314:	4608      	mov	r0, r1
 8012316:	f852 eb04 	ldr.w	lr, [r2], #4
 801231a:	f84c eb04 	str.w	lr, [ip], #4
 801231e:	4293      	cmp	r3, r2
 8012320:	f840 ec60 	str.w	lr, [r0, #-96]
 8012324:	f100 000c 	add.w	r0, r0, #12
 8012328:	d1f5      	bne.n	8012316 <MEMS_solveEllipsoid.constprop.25+0x746>
 801232a:	2f09      	cmp	r7, #9
 801232c:	f101 0110 	add.w	r1, r1, #16
 8012330:	463b      	mov	r3, r7
 8012332:	d1da      	bne.n	80122ea <MEMS_solveEllipsoid.constprop.25+0x71a>
 8012334:	ae32      	add	r6, sp, #200	; 0xc8
 8012336:	2240      	movs	r2, #64	; 0x40
 8012338:	2100      	movs	r1, #0
 801233a:	4630      	mov	r0, r6
 801233c:	f004 fe60 	bl	8017000 <memset>
 8012340:	aa36      	add	r2, sp, #216	; 0xd8
 8012342:	ab3a      	add	r3, sp, #232	; 0xe8
 8012344:	a916      	add	r1, sp, #88	; 0x58
 8012346:	a81f      	add	r0, sp, #124	; 0x7c
 8012348:	e9cd 6216 	strd	r6, r2, [sp, #88]	; 0x58
 801234c:	9318      	str	r3, [sp, #96]	; 0x60
 801234e:	f7fe fb57 	bl	8010a00 <MEMS_INV3x3>
 8012352:	ed9d 8aed 	vldr	s16, [sp, #948]	; 0x3b4
 8012356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801235a:	eec7 7a08 	vdiv.f32	s15, s14, s16
 801235e:	4635      	mov	r5, r6
 8012360:	2100      	movs	r1, #0
 8012362:	f04f 0c18 	mov.w	ip, #24
 8012366:	2702      	movs	r7, #2
 8012368:	edc6 7a0f 	vstr	s15, [r6, #60]	; 0x3c
 801236c:	2600      	movs	r6, #0
 801236e:	ab57      	add	r3, sp, #348	; 0x15c
 8012370:	4632      	mov	r2, r6
 8012372:	fb0c 3e01 	mla	lr, ip, r1, r3
 8012376:	4613      	mov	r3, r2
 8012378:	3201      	adds	r2, #1
 801237a:	fb03 f302 	mul.w	r3, r3, r2
 801237e:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8012620 <MEMS_solveEllipsoid.constprop.25+0xa50>
 8012382:	fb93 f3f7 	sdiv	r3, r3, r7
 8012386:	1af3      	subs	r3, r6, r3
 8012388:	009b      	lsls	r3, r3, #2
 801238a:	2000      	movs	r0, #0
 801238c:	eb00 0803 	add.w	r8, r0, r3
 8012390:	f50d 7937 	add.w	r9, sp, #732	; 0x2dc
 8012394:	44c8      	add	r8, r9
 8012396:	eb05 0900 	add.w	r9, r5, r0
 801239a:	ed98 7a06 	vldr	s14, [r8, #24]
 801239e:	edd9 6a00 	vldr	s13, [r9]
 80123a2:	3004      	adds	r0, #4
 80123a4:	2810      	cmp	r0, #16
 80123a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80123aa:	d1ef      	bne.n	801238c <MEMS_solveEllipsoid.constprop.25+0x7bc>
 80123ac:	2a06      	cmp	r2, #6
 80123ae:	ecee 7a01 	vstmia	lr!, {s15}
 80123b2:	f106 060a 	add.w	r6, r6, #10
 80123b6:	d1de      	bne.n	8012376 <MEMS_solveEllipsoid.constprop.25+0x7a6>
 80123b8:	3101      	adds	r1, #1
 80123ba:	2904      	cmp	r1, #4
 80123bc:	f105 0510 	add.w	r5, r5, #16
 80123c0:	d1d4      	bne.n	801236c <MEMS_solveEllipsoid.constprop.25+0x79c>
 80123c2:	2500      	movs	r5, #0
 80123c4:	ae6f      	add	r6, sp, #444	; 0x1bc
 80123c6:	4629      	mov	r1, r5
 80123c8:	f50d 7eae 	add.w	lr, sp, #348	; 0x15c
 80123cc:	1c4f      	adds	r7, r1, #1
 80123ce:	1868      	adds	r0, r5, r1
 80123d0:	fb01 f307 	mul.w	r3, r1, r7
 80123d4:	f04f 0c02 	mov.w	ip, #2
 80123d8:	fb93 f3fc 	sdiv	r3, r3, ip
 80123dc:	425b      	negs	r3, r3
 80123de:	eb02 0803 	add.w	r8, r2, r3
 80123e2:	4403      	add	r3, r0
 80123e4:	f06f 0003 	mvn.w	r0, #3
 80123e8:	fb00 f101 	mul.w	r1, r0, r1
 80123ec:	a8b7      	add	r0, sp, #732	; 0x2dc
 80123ee:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80123f2:	3118      	adds	r1, #24
 80123f4:	fa03 f00c 	lsl.w	r0, r3, ip
 80123f8:	2300      	movs	r3, #0
 80123fa:	eddf 7a89 	vldr	s15, [pc, #548]	; 8012620 <MEMS_solveEllipsoid.constprop.25+0xa50>
 80123fe:	46c1      	mov	r9, r8
 8012400:	f04f 0c00 	mov.w	ip, #0
 8012404:	eb0e 0a03 	add.w	sl, lr, r3
 8012408:	f04f 0b18 	mov.w	fp, #24
 801240c:	fb0b ab0c 	mla	fp, fp, ip, sl
 8012410:	ed9b 7a00 	vldr	s14, [fp]
 8012414:	ecf9 6a01 	vldmia	r9!, {s13}
 8012418:	f10c 0c01 	add.w	ip, ip, #1
 801241c:	f1bc 0f04 	cmp.w	ip, #4
 8012420:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012424:	d1f0      	bne.n	8012408 <MEMS_solveEllipsoid.constprop.25+0x838>
 8012426:	eb00 0c03 	add.w	ip, r0, r3
 801242a:	f50d 7937 	add.w	r9, sp, #732	; 0x2dc
 801242e:	44cc      	add	ip, r9
 8012430:	ed9c 7a00 	vldr	s14, [ip]
 8012434:	f04f 0c06 	mov.w	ip, #6
 8012438:	ee77 7a67 	vsub.f32	s15, s14, s15
 801243c:	eb06 0903 	add.w	r9, r6, r3
 8012440:	fb0c 6c03 	mla	ip, ip, r3, r6
 8012444:	3304      	adds	r3, #4
 8012446:	4299      	cmp	r1, r3
 8012448:	edc9 7a00 	vstr	s15, [r9]
 801244c:	edcc 7a00 	vstr	s15, [ip]
 8012450:	d1d3      	bne.n	80123fa <MEMS_solveEllipsoid.constprop.25+0x82a>
 8012452:	2f06      	cmp	r7, #6
 8012454:	f105 050a 	add.w	r5, r5, #10
 8012458:	f106 061c 	add.w	r6, r6, #28
 801245c:	f10e 0e04 	add.w	lr, lr, #4
 8012460:	f102 020a 	add.w	r2, r2, #10
 8012464:	4639      	mov	r1, r7
 8012466:	d1b1      	bne.n	80123cc <MEMS_solveEllipsoid.constprop.25+0x7fc>
 8012468:	f04f 0e18 	mov.w	lr, #24
 801246c:	ab6f      	add	r3, sp, #444	; 0x1bc
 801246e:	4473      	add	r3, lr
 8012470:	2600      	movs	r6, #0
 8012472:	9303      	str	r3, [sp, #12]
 8012474:	2002      	movs	r0, #2
 8012476:	f106 0801 	add.w	r8, r6, #1
 801247a:	fb07 f506 	mul.w	r5, r7, r6
 801247e:	fb06 f308 	mul.w	r3, r6, r8
 8012482:	fb93 f3f0 	sdiv	r3, r3, r0
 8012486:	1aed      	subs	r5, r5, r3
 8012488:	b2f3      	uxtb	r3, r6
 801248a:	9302      	str	r3, [sp, #8]
 801248c:	ab93      	add	r3, sp, #588	; 0x24c
 801248e:	00ad      	lsls	r5, r5, #2
 8012490:	fb0e 3a06 	mla	sl, lr, r6, r3
 8012494:	f50d 7cde 	add.w	ip, sp, #444	; 0x1bc
 8012498:	eddf 7a61 	vldr	s15, [pc, #388]	; 8012620 <MEMS_solveEllipsoid.constprop.25+0xa50>
 801249c:	2300      	movs	r3, #0
 801249e:	fb07 6203 	mla	r2, r7, r3, r6
 80124a2:	9204      	str	r2, [sp, #16]
 80124a4:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 80124a8:	aa42      	add	r2, sp, #264	; 0x108
 80124aa:	fb0e cb03 	mla	fp, lr, r3, ip
 80124ae:	4491      	add	r9, r2
 80124b0:	9a02      	ldr	r2, [sp, #8]
 80124b2:	ed9b 7a00 	vldr	s14, [fp]
 80124b6:	fa5f fb83 	uxtb.w	fp, r3
 80124ba:	455a      	cmp	r2, fp
 80124bc:	fb03 3103 	mla	r1, r3, r3, r3
 80124c0:	d804      	bhi.n	80124cc <MEMS_solveEllipsoid.constprop.25+0x8fc>
 80124c2:	edd9 6a00 	vldr	s13, [r9]
 80124c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80124ca:	e00a      	b.n	80124e2 <MEMS_solveEllipsoid.constprop.25+0x912>
 80124cc:	9a04      	ldr	r2, [sp, #16]
 80124ce:	fb91 f1f0 	sdiv	r1, r1, r0
 80124d2:	1a52      	subs	r2, r2, r1
 80124d4:	a942      	add	r1, sp, #264	; 0x108
 80124d6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80124da:	edd2 6a00 	vldr	s13, [r2]
 80124de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80124e2:	3301      	adds	r3, #1
 80124e4:	2b06      	cmp	r3, #6
 80124e6:	d1da      	bne.n	801249e <MEMS_solveEllipsoid.constprop.25+0x8ce>
 80124e8:	9b03      	ldr	r3, [sp, #12]
 80124ea:	ecea 7a01 	vstmia	sl!, {s15}
 80124ee:	f10c 0c04 	add.w	ip, ip, #4
 80124f2:	4563      	cmp	r3, ip
 80124f4:	d1d0      	bne.n	8012498 <MEMS_solveEllipsoid.constprop.25+0x8c8>
 80124f6:	f1b8 0f06 	cmp.w	r8, #6
 80124fa:	4646      	mov	r6, r8
 80124fc:	d1bb      	bne.n	8012476 <MEMS_solveEllipsoid.constprop.25+0x8a6>
 80124fe:	a96f      	add	r1, sp, #444	; 0x1bc
 8012500:	4642      	mov	r2, r8
 8012502:	a893      	add	r0, sp, #588	; 0x24c
 8012504:	f7fe fb54 	bl	8010bb0 <Hessenberg_Form_Orthogonal>
 8012508:	4643      	mov	r3, r8
 801250a:	a96f      	add	r1, sp, #444	; 0x1bc
 801250c:	aa19      	add	r2, sp, #100	; 0x64
 801250e:	a893      	add	r0, sp, #588	; 0x24c
 8012510:	f7fe fc96 	bl	8010e40 <QR_Hessenberg_Matrix.constprop.27>
 8012514:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
 8012518:	a91a      	add	r1, sp, #104	; 0x68
 801251a:	2201      	movs	r2, #1
 801251c:	2300      	movs	r3, #0
 801251e:	ecb1 7a01 	vldmia	r1!, {s14}
 8012522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801252a:	b2d0      	uxtb	r0, r2
 801252c:	f102 0201 	add.w	r2, r2, #1
 8012530:	bfc4      	itt	gt
 8012532:	eef0 7a47 	vmovgt.f32	s15, s14
 8012536:	4603      	movgt	r3, r0
 8012538:	2a06      	cmp	r2, #6
 801253a:	d1f0      	bne.n	801251e <MEMS_solveEllipsoid.constprop.25+0x94e>
 801253c:	aa6f      	add	r2, sp, #444	; 0x1bc
 801253e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8012542:	460a      	mov	r2, r1
 8012544:	6809      	ldr	r1, [r1, #0]
 8012546:	6992      	ldr	r2, [r2, #24]
 8012548:	9229      	str	r2, [sp, #164]	; 0xa4
 801254a:	aa6f      	add	r2, sp, #444	; 0x1bc
 801254c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012550:	a86f      	add	r0, sp, #444	; 0x1bc
 8012552:	9128      	str	r1, [sp, #160]	; 0xa0
 8012554:	a96f      	add	r1, sp, #444	; 0x1bc
 8012556:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801255a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801255e:	4613      	mov	r3, r2
 8012560:	6c89      	ldr	r1, [r1, #72]	; 0x48
 8012562:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012564:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8012566:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8012568:	912b      	str	r1, [sp, #172]	; 0xac
 801256a:	932d      	str	r3, [sp, #180]	; 0xb4
 801256c:	902a      	str	r0, [sp, #168]	; 0xa8
 801256e:	922c      	str	r2, [sp, #176]	; 0xb0
 8012570:	a92e      	add	r1, sp, #184	; 0xb8
 8012572:	2300      	movs	r3, #0
 8012574:	ad5d      	add	r5, sp, #372	; 0x174
 8012576:	aa57      	add	r2, sp, #348	; 0x15c
 8012578:	eddf 7a29 	vldr	s15, [pc, #164]	; 8012620 <MEMS_solveEllipsoid.constprop.25+0xa50>
 801257c:	441a      	add	r2, r3
 801257e:	18ee      	adds	r6, r5, r3
 8012580:	a828      	add	r0, sp, #160	; 0xa0
 8012582:	ecf2 6a01 	vldmia	r2!, {s13}
 8012586:	ecb0 7a01 	vldmia	r0!, {s14}
 801258a:	4296      	cmp	r6, r2
 801258c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012590:	d1f7      	bne.n	8012582 <MEMS_solveEllipsoid.constprop.25+0x9b2>
 8012592:	3318      	adds	r3, #24
 8012594:	eef1 7a67 	vneg.f32	s15, s15
 8012598:	2b60      	cmp	r3, #96	; 0x60
 801259a:	ece1 7a01 	vstmia	r1!, {s15}
 801259e:	d1ea      	bne.n	8012576 <MEMS_solveEllipsoid.constprop.25+0x9a6>
 80125a0:	eddd 7a2a 	vldr	s15, [sp, #168]	; 0xa8
 80125a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80125a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ac:	d509      	bpl.n	80125c2 <MEMS_solveEllipsoid.constprop.25+0x9f2>
 80125ae:	ab28      	add	r3, sp, #160	; 0xa0
 80125b0:	aa32      	add	r2, sp, #200	; 0xc8
 80125b2:	edd3 7a00 	vldr	s15, [r3]
 80125b6:	eef1 7a67 	vneg.f32	s15, s15
 80125ba:	ece3 7a01 	vstmia	r3!, {s15}
 80125be:	429a      	cmp	r2, r3
 80125c0:	d1f7      	bne.n	80125b2 <MEMS_solveEllipsoid.constprop.25+0x9e2>
 80125c2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8012620 <MEMS_solveEllipsoid.constprop.25+0xa50>
 80125c6:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 80125ca:	2500      	movs	r5, #0
 80125cc:	f04f 0e02 	mov.w	lr, #2
 80125d0:	f04f 0c0a 	mov.w	ip, #10
 80125d4:	1c6f      	adds	r7, r5, #1
 80125d6:	fb0c f005 	mul.w	r0, ip, r5
 80125da:	fb05 f307 	mul.w	r3, r5, r7
 80125de:	eddf 7a10 	vldr	s15, [pc, #64]	; 8012620 <MEMS_solveEllipsoid.constprop.25+0xa50>
 80125e2:	fb93 f3fe 	sdiv	r3, r3, lr
 80125e6:	1ac0      	subs	r0, r0, r3
 80125e8:	0080      	lsls	r0, r0, #2
 80125ea:	fa5f f985 	uxtb.w	r9, r5
 80125ee:	ae28      	add	r6, sp, #160	; 0xa0
 80125f0:	2300      	movs	r3, #0
 80125f2:	f50d 7b37 	add.w	fp, sp, #732	; 0x2dc
 80125f6:	eb00 0a83 	add.w	sl, r0, r3, lsl #2
 80125fa:	44da      	add	sl, fp
 80125fc:	fa5f fb83 	uxtb.w	fp, r3
 8012600:	45d9      	cmp	r9, fp
 8012602:	fb0c 5203 	mla	r2, ip, r3, r5
 8012606:	fb03 3103 	mla	r1, r3, r3, r3
 801260a:	ecf6 6a01 	vldmia	r6!, {s13}
 801260e:	d815      	bhi.n	801263c <MEMS_solveEllipsoid.constprop.25+0xa6c>
 8012610:	ed9a 6a00 	vldr	s12, [sl]
 8012614:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012618:	e01a      	b.n	8012650 <MEMS_solveEllipsoid.constprop.25+0xa80>
 801261a:	bf00      	nop
 801261c:	be800000 	.word	0xbe800000
 8012620:	00000000 	.word	0x00000000
 8012624:	423c0000 	.word	0x423c0000
 8012628:	3eaaaaab 	.word	0x3eaaaaab
 801262c:	3eb33333 	.word	0x3eb33333
 8012630:	3e99999a 	.word	0x3e99999a
 8012634:	3f333333 	.word	0x3f333333
 8012638:	3e4ccccd 	.word	0x3e4ccccd
 801263c:	fb91 f1fe 	sdiv	r1, r1, lr
 8012640:	1a52      	subs	r2, r2, r1
 8012642:	a9ee      	add	r1, sp, #952	; 0x3b8
 8012644:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8012648:	ed12 6a37 	vldr	s12, [r2, #-220]	; 0xffffff24
 801264c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012650:	3301      	adds	r3, #1
 8012652:	2b0a      	cmp	r3, #10
 8012654:	d1cd      	bne.n	80125f2 <MEMS_solveEllipsoid.constprop.25+0xa22>
 8012656:	ecf8 6a01 	vldmia	r8!, {s13}
 801265a:	2f0a      	cmp	r7, #10
 801265c:	463d      	mov	r5, r7
 801265e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012662:	d1b7      	bne.n	80125d4 <MEMS_solveEllipsoid.constprop.25+0xa04>
 8012664:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8012668:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801266a:	9393      	str	r3, [sp, #588]	; 0x24c
 801266c:	9b01      	ldr	r3, [sp, #4]
 801266e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8012670:	9294      	str	r2, [sp, #592]	; 0x250
 8012672:	9296      	str	r2, [sp, #600]	; 0x258
 8012674:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8012676:	9297      	str	r2, [sp, #604]	; 0x25c
 8012678:	f104 060c 	add.w	r6, r4, #12
 801267c:	f104 0518 	add.w	r5, r4, #24
 8012680:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8012682:	9457      	str	r4, [sp, #348]	; 0x15c
 8012684:	a957      	add	r1, sp, #348	; 0x15c
 8012686:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 801268a:	eef1 6ae7 	vsqrt.f32	s13, s15
 801268e:	a893      	add	r0, sp, #588	; 0x24c
 8012690:	9658      	str	r6, [sp, #352]	; 0x160
 8012692:	9559      	str	r5, [sp, #356]	; 0x164
 8012694:	929b      	str	r2, [sp, #620]	; 0x26c
 8012696:	eef1 7ae6 	vsqrt.f32	s15, s13
 801269a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801269e:	edc3 7a00 	vstr	s15, [r3]
 80126a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80126a4:	9395      	str	r3, [sp, #596]	; 0x254
 80126a6:	9399      	str	r3, [sp, #612]	; 0x264
 80126a8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80126aa:	9398      	str	r3, [sp, #608]	; 0x260
 80126ac:	939a      	str	r3, [sp, #616]	; 0x268
 80126ae:	f7fe f9a7 	bl	8010a00 <MEMS_INV3x3>
 80126b2:	2800      	cmp	r0, #0
 80126b4:	f000 8194 	beq.w	80129e0 <MEMS_solveEllipsoid.constprop.25+0xe10>
 80126b8:	eddd 7a2f 	vldr	s15, [sp, #188]	; 0xbc
 80126bc:	ed94 6a04 	vldr	s12, [r4, #16]
 80126c0:	ed9d 5a2e 	vldr	s10, [sp, #184]	; 0xb8
 80126c4:	edd4 1a03 	vldr	s3, [r4, #12]
 80126c8:	edd4 6a01 	vldr	s13, [r4, #4]
 80126cc:	ed94 2a00 	vldr	s4, [r4]
 80126d0:	eddd 5a30 	vldr	s11, [sp, #192]	; 0xc0
 80126d4:	edd4 2a05 	vldr	s5, [r4, #20]
 80126d8:	ed94 3a02 	vldr	s6, [r4, #8]
 80126dc:	ed94 7a07 	vldr	s14, [r4, #28]
 80126e0:	edd4 3a06 	vldr	s7, [r4, #24]
 80126e4:	ed94 4a08 	vldr	s8, [r4, #32]
 80126e8:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 80126ec:	9457      	str	r4, [sp, #348]	; 0x15c
 80126ee:	ee27 6a86 	vmul.f32	s12, s15, s12
 80126f2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80126f6:	eea1 6a85 	vfma.f32	s12, s3, s10
 80126fa:	2203      	movs	r2, #3
 80126fc:	a9b7      	add	r1, sp, #732	; 0x2dc
 80126fe:	eee2 6a05 	vfma.f32	s13, s4, s10
 8012702:	a893      	add	r0, sp, #588	; 0x24c
 8012704:	9658      	str	r6, [sp, #352]	; 0x160
 8012706:	eea2 6aa5 	vfma.f32	s12, s5, s11
 801270a:	9559      	str	r5, [sp, #356]	; 0x164
 801270c:	eee3 6a25 	vfma.f32	s13, s6, s11
 8012710:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012714:	eeb1 6a46 	vneg.f32	s12, s12
 8012718:	eea3 7a85 	vfma.f32	s14, s7, s10
 801271c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012720:	eef1 6a66 	vneg.f32	s13, s13
 8012724:	eee6 7a85 	vfma.f32	s15, s13, s10
 8012728:	eea4 7a25 	vfma.f32	s14, s8, s11
 801272c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8012730:	eeb1 7a47 	vneg.f32	s14, s14
 8012734:	eee7 7a25 	vfma.f32	s15, s14, s11
 8012738:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 801273c:	eef0 7ae7 	vabs.f32	s15, s15
 8012740:	ed8d 6a43 	vstr	s12, [sp, #268]	; 0x10c
 8012744:	eeb1 8ae7 	vsqrt.f32	s16, s15
 8012748:	ed8d 7a44 	vstr	s14, [sp, #272]	; 0x110
 801274c:	f7fe fa30 	bl	8010bb0 <Hessenberg_Form_Orthogonal>
 8012750:	a9b7      	add	r1, sp, #732	; 0x2dc
 8012752:	a893      	add	r0, sp, #588	; 0x24c
 8012754:	aa6f      	add	r2, sp, #444	; 0x1bc
 8012756:	2303      	movs	r3, #3
 8012758:	f7fe fb72 	bl	8010e40 <QR_Hessenberg_Matrix.constprop.27>
 801275c:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 8012760:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8012764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012768:	d519      	bpl.n	801279e <MEMS_solveEllipsoid.constprop.25+0xbce>
 801276a:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 801276e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012776:	d512      	bpl.n	801279e <MEMS_solveEllipsoid.constprop.25+0xbce>
 8012778:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 801277c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012784:	d50b      	bpl.n	801279e <MEMS_solveEllipsoid.constprop.25+0xbce>
 8012786:	eef1 6a66 	vneg.f32	s13, s13
 801278a:	eeb1 7a47 	vneg.f32	s14, s14
 801278e:	eef1 7a67 	vneg.f32	s15, s15
 8012792:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 8012796:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 801279a:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 801279e:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 80127a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80127a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127aa:	f100 8119 	bmi.w	80129e0 <MEMS_solveEllipsoid.constprop.25+0xe10>
 80127ae:	eddd 7a70 	vldr	s15, [sp, #448]	; 0x1c0
 80127b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80127b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ba:	f100 8111 	bmi.w	80129e0 <MEMS_solveEllipsoid.constprop.25+0xe10>
 80127be:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 80127c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80127c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ca:	f100 8109 	bmi.w	80129e0 <MEMS_solveEllipsoid.constprop.25+0xe10>
 80127ce:	aa72      	add	r2, sp, #456	; 0x1c8
 80127d0:	ab6f      	add	r3, sp, #444	; 0x1bc
 80127d2:	ed93 7a00 	vldr	s14, [r3]
 80127d6:	eef1 7ac7 	vsqrt.f32	s15, s14
 80127da:	ece3 7a01 	vstmia	r3!, {s15}
 80127de:	429a      	cmp	r2, r3
 80127e0:	d1f7      	bne.n	80127d2 <MEMS_solveEllipsoid.constprop.25+0xc02>
 80127e2:	f04f 0b00 	mov.w	fp, #0
 80127e6:	2300      	movs	r3, #0
 80127e8:	46da      	mov	sl, fp
 80127ea:	4618      	mov	r0, r3
 80127ec:	a9b7      	add	r1, sp, #732	; 0x2dc
 80127ee:	f50d 7cae 	add.w	ip, sp, #348	; 0x15c
 80127f2:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 80127f6:	460e      	mov	r6, r1
 80127f8:	441a      	add	r2, r3
 80127fa:	4605      	mov	r5, r0
 80127fc:	f101 0e0c 	add.w	lr, r1, #12
 8012800:	f8c2 b000 	str.w	fp, [r2]
 8012804:	46b1      	mov	r9, r6
 8012806:	460f      	mov	r7, r1
 8012808:	f50d 78de 	add.w	r8, sp, #444	; 0x1bc
 801280c:	ecf7 7a01 	vldmia	r7!, {s15}
 8012810:	ecb8 7a01 	vldmia	r8!, {s14}
 8012814:	ecb9 6a01 	vldmia	r9!, {s12}
 8012818:	edd2 6a00 	vldr	s13, [r2]
 801281c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012820:	45be      	cmp	lr, r7
 8012822:	eee7 6a86 	vfma.f32	s13, s15, s12
 8012826:	edc2 6a00 	vstr	s13, [r2]
 801282a:	d1ef      	bne.n	801280c <MEMS_solveEllipsoid.constprop.25+0xc3c>
 801282c:	f85c 7025 	ldr.w	r7, [ip, r5, lsl #2]
 8012830:	3501      	adds	r5, #1
 8012832:	fa5f f885 	uxtb.w	r8, r5
 8012836:	441f      	add	r7, r3
 8012838:	f1b8 0f03 	cmp.w	r8, #3
 801283c:	f102 0204 	add.w	r2, r2, #4
 8012840:	f106 060c 	add.w	r6, r6, #12
 8012844:	edc7 6a00 	vstr	s13, [r7]
 8012848:	d1da      	bne.n	8012800 <MEMS_solveEllipsoid.constprop.25+0xc30>
 801284a:	3304      	adds	r3, #4
 801284c:	2b0c      	cmp	r3, #12
 801284e:	f100 0001 	add.w	r0, r0, #1
 8012852:	4671      	mov	r1, lr
 8012854:	d1cd      	bne.n	80127f2 <MEMS_solveEllipsoid.constprop.25+0xc22>
 8012856:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801285a:	ed5f 3a8e 	vldr	s7, [pc, #-568]	; 8012624 <MEMS_solveEllipsoid.constprop.25+0xa54>
 801285e:	ed94 7a08 	vldr	s14, [r4, #32]
 8012862:	edd4 4a00 	vldr	s9, [r4]
 8012866:	ed94 5a03 	vldr	s10, [r4, #12]
 801286a:	edd4 5a04 	vldr	s11, [r4, #16]
 801286e:	ed94 6a06 	vldr	s12, [r4, #24]
 8012872:	edd4 6a07 	vldr	s13, [r4, #28]
 8012876:	9b01      	ldr	r3, [sp, #4]
 8012878:	f8c4 a004 	str.w	sl, [r4, #4]
 801287c:	ee28 4a27 	vmul.f32	s8, s16, s15
 8012880:	f8c4 a008 	str.w	sl, [r4, #8]
 8012884:	eec3 7a84 	vdiv.f32	s15, s7, s8
 8012888:	f8c4 a014 	str.w	sl, [r4, #20]
 801288c:	ed1f 2a9a 	vldr	s4, [pc, #-616]	; 8012628 <MEMS_solveEllipsoid.constprop.25+0xa58>
 8012890:	ed5f 1a9a 	vldr	s3, [pc, #-616]	; 801262c <MEMS_solveEllipsoid.constprop.25+0xa5c>
 8012894:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8012898:	ee25 5a27 	vmul.f32	s10, s10, s15
 801289c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80128a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80128a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80128a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80128ac:	edc4 4a00 	vstr	s9, [r4]
 80128b0:	edc4 5a04 	vstr	s11, [r4, #16]
 80128b4:	ed84 5a03 	vstr	s10, [r4, #12]
 80128b8:	ed84 6a06 	vstr	s12, [r4, #24]
 80128bc:	edc4 6a07 	vstr	s13, [r4, #28]
 80128c0:	edc4 7a08 	vstr	s15, [r4, #32]
 80128c4:	edd3 7a00 	vldr	s15, [r3]
 80128c8:	eec7 2a88 	vdiv.f32	s5, s15, s16
 80128cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80128d0:	ee77 7a62 	vsub.f32	s15, s14, s5
 80128d4:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 80128d8:	edc3 7a00 	vstr	s15, [r3]
 80128dc:	ed94 6a00 	vldr	s12, [r4]
 80128e0:	ed94 3a04 	vldr	s6, [r4, #16]
 80128e4:	edd4 3a08 	vldr	s7, [r4, #32]
 80128e8:	ee76 7a03 	vadd.f32	s15, s12, s6
 80128ec:	ee76 4a47 	vsub.f32	s9, s12, s14
 80128f0:	ee33 5a47 	vsub.f32	s10, s6, s14
 80128f4:	ee33 4a66 	vsub.f32	s8, s6, s13
 80128f8:	ee76 5a66 	vsub.f32	s11, s12, s13
 80128fc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012900:	eef0 4ae4 	vabs.f32	s9, s9
 8012904:	eeb0 5ac5 	vabs.f32	s10, s10
 8012908:	eeb4 5ae4 	vcmpe.f32	s10, s9
 801290c:	eef0 5ae5 	vabs.f32	s11, s11
 8012910:	ee67 7a82 	vmul.f32	s15, s15, s4
 8012914:	eeb0 4ac4 	vabs.f32	s8, s8
 8012918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801291c:	ee73 6ae6 	vsub.f32	s13, s7, s13
 8012920:	eeb4 4ae5 	vcmpe.f32	s8, s11
 8012924:	bfb8      	it	lt
 8012926:	eeb0 5a64 	vmovlt.f32	s10, s9
 801292a:	ee36 2a67 	vsub.f32	s4, s12, s15
 801292e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012932:	ee73 4a67 	vsub.f32	s9, s6, s15
 8012936:	bfb8      	it	lt
 8012938:	eeb0 4a65 	vmovlt.f32	s8, s11
 801293c:	eef0 6ae6 	vabs.f32	s13, s13
 8012940:	eef4 6ac4 	vcmpe.f32	s13, s8
 8012944:	eef0 4ae4 	vabs.f32	s9, s9
 8012948:	eeb0 2ac2 	vabs.f32	s4, s4
 801294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012950:	ee73 5ae7 	vsub.f32	s11, s7, s15
 8012954:	eef4 4ac2 	vcmpe.f32	s9, s4
 8012958:	bfb8      	it	lt
 801295a:	eef0 6a44 	vmovlt.f32	s13, s8
 801295e:	ee33 7ac7 	vsub.f32	s14, s7, s14
 8012962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012966:	bfb8      	it	lt
 8012968:	eef0 4a42 	vmovlt.f32	s9, s4
 801296c:	eef0 5ae5 	vabs.f32	s11, s11
 8012970:	eef4 5ae4 	vcmpe.f32	s11, s9
 8012974:	eeb0 7ac7 	vabs.f32	s14, s14
 8012978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801297c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8012980:	bfb8      	it	lt
 8012982:	eef0 5a64 	vmovlt.f32	s11, s9
 8012986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801298a:	bfb8      	it	lt
 801298c:	eeb0 7a45 	vmovlt.f32	s14, s10
 8012990:	eeb4 7ae1 	vcmpe.f32	s14, s3
 8012994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012998:	d524      	bpl.n	80129e4 <MEMS_solveEllipsoid.constprop.25+0xe14>
 801299a:	ed1f 7adb 	vldr	s14, [pc, #-876]	; 8012630 <MEMS_solveEllipsoid.constprop.25+0xa60>
 801299e:	eef4 5ac7 	vcmpe.f32	s11, s14
 80129a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129a6:	bf4c      	ite	mi
 80129a8:	2301      	movmi	r3, #1
 80129aa:	2300      	movpl	r3, #0
 80129ac:	ed1f 7adf 	vldr	s14, [pc, #-892]	; 8012634 <MEMS_solveEllipsoid.constprop.25+0xa64>
 80129b0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80129b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129b8:	d516      	bpl.n	80129e8 <MEMS_solveEllipsoid.constprop.25+0xe18>
 80129ba:	ed1f 7ae1 	vldr	s14, [pc, #-900]	; 8012638 <MEMS_solveEllipsoid.constprop.25+0xa68>
 80129be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80129c2:	eef4 5ac7 	vcmpe.f32	s11, s14
 80129c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ca:	bf4c      	ite	mi
 80129cc:	2201      	movmi	r2, #1
 80129ce:	2200      	movpl	r2, #0
 80129d0:	edd4 6a06 	vldr	s13, [r4, #24]
 80129d4:	ed94 7a03 	vldr	s14, [r4, #12]
 80129d8:	edd4 5a07 	vldr	s11, [r4, #28]
 80129dc:	b932      	cbnz	r2, 80129ec <MEMS_solveEllipsoid.constprop.25+0xe1c>
 80129de:	bbbb      	cbnz	r3, 8012a50 <MEMS_solveEllipsoid.constprop.25+0xe80>
 80129e0:	2000      	movs	r0, #0
 80129e2:	e07c      	b.n	8012ade <MEMS_solveEllipsoid.constprop.25+0xf0e>
 80129e4:	2300      	movs	r3, #0
 80129e6:	e7e1      	b.n	80129ac <MEMS_solveEllipsoid.constprop.25+0xddc>
 80129e8:	2200      	movs	r2, #0
 80129ea:	e7f1      	b.n	80129d0 <MEMS_solveEllipsoid.constprop.25+0xe00>
 80129ec:	eeb4 6ac3 	vcmpe.f32	s12, s6
 80129f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f4:	bf88      	it	hi
 80129f6:	eeb0 6a43 	vmovhi.f32	s12, s6
 80129fa:	eef4 3ac6 	vcmpe.f32	s7, s12
 80129fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a02:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8012af8 <MEMS_solveEllipsoid.constprop.25+0xf28>
 8012a06:	bf98      	it	ls
 8012a08:	eeb0 6a63 	vmovls.f32	s12, s7
 8012a0c:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8012a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a14:	dde3      	ble.n	80129de <MEMS_solveEllipsoid.constprop.25+0xe0e>
 8012a16:	eeb0 6ae5 	vabs.f32	s12, s11
 8012a1a:	eeb0 7ac7 	vabs.f32	s14, s14
 8012a1e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8012a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a26:	bfb8      	it	lt
 8012a28:	eeb0 7a46 	vmovlt.f32	s14, s12
 8012a2c:	eef0 6ae6 	vabs.f32	s13, s13
 8012a30:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8012afc <MEMS_solveEllipsoid.constprop.25+0xf2c>
 8012a34:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a3c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012a40:	bfb8      	it	lt
 8012a42:	eeb0 7a66 	vmovlt.f32	s14, s13
 8012a46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a4e:	d5c6      	bpl.n	80129de <MEMS_solveEllipsoid.constprop.25+0xe0e>
 8012a50:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012a54:	eef4 2ae7 	vcmpe.f32	s5, s15
 8012a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a5c:	dcc0      	bgt.n	80129e0 <MEMS_solveEllipsoid.constprop.25+0xe10>
 8012a5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a60:	ed9f 8a27 	vldr	s16, [pc, #156]	; 8012b00 <MEMS_solveEllipsoid.constprop.25+0xf30>
 8012a64:	a722      	add	r7, pc, #136	; (adr r7, 8012af0 <MEMS_solveEllipsoid.constprop.25+0xf20>)
 8012a66:	e9d7 6700 	ldrd	r6, r7, [r7]
 8012a6a:	f1a3 0a02 	sub.w	sl, r3, #2
 8012a6e:	f104 0904 	add.w	r9, r4, #4
 8012a72:	2500      	movs	r5, #0
 8012a74:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8012a78:	44a0      	add	r8, r4
 8012a7a:	f8d8 0000 	ldr.w	r0, [r8]
 8012a7e:	f7ed fd6b 	bl	8000558 <__aeabi_f2d>
 8012a82:	4632      	mov	r2, r6
 8012a84:	463b      	mov	r3, r7
 8012a86:	f7ed fdbf 	bl	8000608 <__aeabi_dmul>
 8012a8a:	f7ee f86d 	bl	8000b68 <__aeabi_d2iz>
 8012a8e:	ee07 0a90 	vmov	s15, r0
 8012a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a96:	ee67 7a88 	vmul.f32	s15, s15, s16
 8012a9a:	ece8 7a01 	vstmia	r8!, {s15}
 8012a9e:	45c8      	cmp	r8, r9
 8012aa0:	d1eb      	bne.n	8012a7a <MEMS_solveEllipsoid.constprop.25+0xeaa>
 8012aa2:	ab42      	add	r3, sp, #264	; 0x108
 8012aa4:	195a      	adds	r2, r3, r5
 8012aa6:	ab13      	add	r3, sp, #76	; 0x4c
 8012aa8:	442b      	add	r3, r5
 8012aaa:	edd3 7a00 	vldr	s15, [r3]
 8012aae:	ed92 0a00 	vldr	s0, [r2]
 8012ab2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012ab6:	f007 f9f1 	bl	8019e9c <roundf>
 8012aba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012abe:	3504      	adds	r5, #4
 8012ac0:	ee10 3a10 	vmov	r3, s0
 8012ac4:	2d0c      	cmp	r5, #12
 8012ac6:	f108 0910 	add.w	r9, r8, #16
 8012aca:	f82a 3f02 	strh.w	r3, [sl, #2]!
 8012ace:	d1d1      	bne.n	8012a74 <MEMS_solveEllipsoid.constprop.25+0xea4>
 8012ad0:	68e1      	ldr	r1, [r4, #12]
 8012ad2:	69a2      	ldr	r2, [r4, #24]
 8012ad4:	69e3      	ldr	r3, [r4, #28]
 8012ad6:	6061      	str	r1, [r4, #4]
 8012ad8:	60a2      	str	r2, [r4, #8]
 8012ada:	6163      	str	r3, [r4, #20]
 8012adc:	2001      	movs	r0, #1
 8012ade:	f50d 7d6f 	add.w	sp, sp, #956	; 0x3bc
 8012ae2:	ecbd 8b10 	vpop	{d8-d15}
 8012ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aea:	bf00      	nop
 8012aec:	f3af 8000 	nop.w
 8012af0:	00000000 	.word	0x00000000
 8012af4:	412e8480 	.word	0x412e8480
 8012af8:	3ecccccd 	.word	0x3ecccccd
 8012afc:	3f19999a 	.word	0x3f19999a
 8012b00:	358637bd 	.word	0x358637bd

08012b04 <MEMS_compareCalScore>:
 8012b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b08:	7904      	ldrb	r4, [r0, #4]
 8012b0a:	790e      	ldrb	r6, [r1, #4]
 8012b0c:	6803      	ldr	r3, [r0, #0]
 8012b0e:	680d      	ldr	r5, [r1, #0]
 8012b10:	42b4      	cmp	r4, r6
 8012b12:	bf8c      	ite	hi
 8012b14:	ee07 4a90 	vmovhi	s15, r4
 8012b18:	ee07 6a90 	vmovls	s15, r6
 8012b1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012b20:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012b24:	ee20 7a07 	vmul.f32	s14, s0, s14
 8012b28:	1ad3      	subs	r3, r2, r3
 8012b2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b32:	b083      	sub	sp, #12
 8012b34:	eba2 0205 	sub.w	r2, r2, r5
 8012b38:	f100 8103 	bmi.w	8012d42 <MEMS_compareCalScore+0x23e>
 8012b3c:	eef0 7a0c 	vmov.f32	s15, #12	; 0x40600000  3.5
 8012b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b48:	eeb1 7a0e 	vmov.f32	s14, #30	; 0x40f00000  7.5
 8012b4c:	bf48      	it	mi
 8012b4e:	eeb0 7a67 	vmovmi.f32	s14, s15
 8012b52:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8012b56:	f9b1 e006 	ldrsh.w	lr, [r1, #6]
 8012b5a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8012b5e:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8012b62:	eba7 090e 	sub.w	r9, r7, lr
 8012b66:	eba5 080c 	sub.w	r8, r5, ip
 8012b6a:	ea89 7be9 	eor.w	fp, r9, r9, asr #31
 8012b6e:	ea88 7ae8 	eor.w	sl, r8, r8, asr #31
 8012b72:	ebab 7be9 	sub.w	fp, fp, r9, asr #31
 8012b76:	ebaa 7ae8 	sub.w	sl, sl, r8, asr #31
 8012b7a:	45d3      	cmp	fp, sl
 8012b7c:	f340 80d4 	ble.w	8012d28 <MEMS_compareCalScore+0x224>
 8012b80:	b2bf      	uxth	r7, r7
 8012b82:	fa1f fe8e 	uxth.w	lr, lr
 8012b86:	f1b9 0f00 	cmp.w	r9, #0
 8012b8a:	bfb4      	ite	lt
 8012b8c:	ebae 0707 	sublt.w	r7, lr, r7
 8012b90:	eba7 070e 	subge.w	r7, r7, lr
 8012b94:	b23d      	sxth	r5, r7
 8012b96:	9501      	str	r5, [sp, #4]
 8012b98:	f9b0 800a 	ldrsh.w	r8, [r0, #10]
 8012b9c:	f9b1 700a 	ldrsh.w	r7, [r1, #10]
 8012ba0:	eba8 0c07 	sub.w	ip, r8, r7
 8012ba4:	ea8c 7eec 	eor.w	lr, ip, ip, asr #31
 8012ba8:	ebae 7eec 	sub.w	lr, lr, ip, asr #31
 8012bac:	4575      	cmp	r5, lr
 8012bae:	dc09      	bgt.n	8012bc4 <MEMS_compareCalScore+0xc0>
 8012bb0:	fa1f f588 	uxth.w	r5, r8
 8012bb4:	b2bf      	uxth	r7, r7
 8012bb6:	f1bc 0f00 	cmp.w	ip, #0
 8012bba:	bfb4      	ite	lt
 8012bbc:	1b7d      	sublt	r5, r7, r5
 8012bbe:	1bed      	subge	r5, r5, r7
 8012bc0:	b22d      	sxth	r5, r5
 8012bc2:	9501      	str	r5, [sp, #4]
 8012bc4:	f8b0 900c 	ldrh.w	r9, [r0, #12]
 8012bc8:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8012bcc:	f8b0 800e 	ldrh.w	r8, [r0, #14]
 8012bd0:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
 8012bd4:	eba9 070e 	sub.w	r7, r9, lr
 8012bd8:	eba8 050c 	sub.w	r5, r8, ip
 8012bdc:	ea87 7be7 	eor.w	fp, r7, r7, asr #31
 8012be0:	ea85 7ae5 	eor.w	sl, r5, r5, asr #31
 8012be4:	ebab 7be7 	sub.w	fp, fp, r7, asr #31
 8012be8:	ebaa 7ae5 	sub.w	sl, sl, r5, asr #31
 8012bec:	45d3      	cmp	fp, sl
 8012bee:	f340 8095 	ble.w	8012d1c <MEMS_compareCalScore+0x218>
 8012bf2:	2f00      	cmp	r7, #0
 8012bf4:	bfba      	itte	lt
 8012bf6:	ebae 0509 	sublt.w	r5, lr, r9
 8012bfa:	b22d      	sxthlt	r5, r5
 8012bfc:	b23d      	sxthge	r5, r7
 8012bfe:	f8b0 9010 	ldrh.w	r9, [r0, #16]
 8012c02:	8a0f      	ldrh	r7, [r1, #16]
 8012c04:	eba9 0107 	sub.w	r1, r9, r7
 8012c08:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
 8012c0c:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
 8012c10:	4285      	cmp	r5, r0
 8012c12:	dc05      	bgt.n	8012c20 <MEMS_compareCalScore+0x11c>
 8012c14:	2900      	cmp	r1, #0
 8012c16:	bfba      	itte	lt
 8012c18:	eba7 0509 	sublt.w	r5, r7, r9
 8012c1c:	b22d      	sxthlt	r5, r5
 8012c1e:	b20d      	sxthge	r5, r1
 8012c20:	eddd 7a01 	vldr	s15, [sp, #4]
 8012c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c28:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c34:	d50a      	bpl.n	8012c4c <MEMS_compareCalScore+0x148>
 8012c36:	ee07 5a90 	vmov	s15, r5
 8012c3a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8012e4c <MEMS_compareCalScore+0x348>
 8012c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c4a:	d41c      	bmi.n	8012c86 <MEMS_compareCalScore+0x182>
 8012c4c:	ebb4 0f46 	cmp.w	r4, r6, lsl #1
 8012c50:	db12      	blt.n	8012c78 <MEMS_compareCalScore+0x174>
 8012c52:	497f      	ldr	r1, [pc, #508]	; (8012e50 <MEMS_compareCalScore+0x34c>)
 8012c54:	1ad0      	subs	r0, r2, r3
 8012c56:	4288      	cmp	r0, r1
 8012c58:	d80e      	bhi.n	8012c78 <MEMS_compareCalScore+0x174>
 8012c5a:	ee07 4a90 	vmov	s15, r4
 8012c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c62:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8012c66:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012c6a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c72:	d401      	bmi.n	8012c78 <MEMS_compareCalScore+0x174>
 8012c74:	2000      	movs	r0, #0
 8012c76:	e003      	b.n	8012c80 <MEMS_compareCalScore+0x17c>
 8012c78:	4293      	cmp	r3, r2
 8012c7a:	bf2c      	ite	cs
 8012c7c:	2000      	movcs	r0, #0
 8012c7e:	2001      	movcc	r0, #1
 8012c80:	b003      	add	sp, #12
 8012c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c86:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8012c8a:	d25d      	bcs.n	8012d48 <MEMS_compareCalScore+0x244>
 8012c8c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8012c90:	ee07 4a90 	vmov	s15, r4
 8012c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c98:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012c9c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012ca0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ca8:	d465      	bmi.n	8012d76 <MEMS_compareCalScore+0x272>
 8012caa:	eef0 6a0c 	vmov.f32	s13, #12	; 0x40600000  3.5
 8012cae:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cb6:	f100 80bd 	bmi.w	8012e34 <MEMS_compareCalScore+0x330>
 8012cba:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8012cbe:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cc6:	bf44      	itt	mi
 8012cc8:	eef7 7a00 	vmovmi.f32	s15, #112	; 0x3f800000  1.0
 8012ccc:	ee37 7a27 	vaddmi.f32	s14, s14, s15
 8012cd0:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 8012cd4:	d256      	bcs.n	8012d84 <MEMS_compareCalScore+0x280>
 8012cd6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8012cda:	ee07 6a90 	vmov	s15, r6
 8012cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ce2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8012ce6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012cea:	eeb4 0ac6 	vcmpe.f32	s0, s12
 8012cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf2:	d45e      	bmi.n	8012db2 <MEMS_compareCalScore+0x2ae>
 8012cf4:	eef0 7a0c 	vmov.f32	s15, #12	; 0x40600000  3.5
 8012cf8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d00:	f100 8093 	bmi.w	8012e2a <MEMS_compareCalScore+0x326>
 8012d04:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8012d08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d10:	bf44      	itt	mi
 8012d12:	eef7 7a00 	vmovmi.f32	s15, #112	; 0x3f800000  1.0
 8012d16:	ee76 6aa7 	vaddmi.f32	s13, s13, s15
 8012d1a:	e04e      	b.n	8012dba <MEMS_compareCalScore+0x2b6>
 8012d1c:	2d00      	cmp	r5, #0
 8012d1e:	bfb8      	it	lt
 8012d20:	ebac 0508 	sublt.w	r5, ip, r8
 8012d24:	b22d      	sxth	r5, r5
 8012d26:	e76a      	b.n	8012bfe <MEMS_compareCalScore+0xfa>
 8012d28:	b2ad      	uxth	r5, r5
 8012d2a:	fa1f fc8c 	uxth.w	ip, ip
 8012d2e:	f1b8 0f00 	cmp.w	r8, #0
 8012d32:	bfb4      	ite	lt
 8012d34:	ebac 0505 	sublt.w	r5, ip, r5
 8012d38:	eba5 050c 	subge.w	r5, r5, ip
 8012d3c:	b22d      	sxth	r5, r5
 8012d3e:	9501      	str	r5, [sp, #4]
 8012d40:	e72a      	b.n	8012b98 <MEMS_compareCalScore+0x94>
 8012d42:	eeb0 7a67 	vmov.f32	s14, s15
 8012d46:	e704      	b.n	8012b52 <MEMS_compareCalScore+0x4e>
 8012d48:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8012d4c:	d35c      	bcc.n	8012e08 <MEMS_compareCalScore+0x304>
 8012d4e:	4941      	ldr	r1, [pc, #260]	; (8012e54 <MEMS_compareCalScore+0x350>)
 8012d50:	428b      	cmp	r3, r1
 8012d52:	d877      	bhi.n	8012e44 <MEMS_compareCalScore+0x340>
 8012d54:	f5a3 51e1 	sub.w	r1, r3, #7200	; 0x1c20
 8012d58:	ee07 1a90 	vmov	s15, r1
 8012d5c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8012e58 <MEMS_compareCalScore+0x354>
 8012d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012d68:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8012d6c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8012d70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d74:	e78c      	b.n	8012c90 <MEMS_compareCalScore+0x18c>
 8012d76:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8012d7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012d7e:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 8012d82:	d3a8      	bcc.n	8012cd6 <MEMS_compareCalScore+0x1d2>
 8012d84:	f5b2 5fe1 	cmp.w	r2, #7200	; 0x1c20
 8012d88:	d32d      	bcc.n	8012de6 <MEMS_compareCalScore+0x2e2>
 8012d8a:	4932      	ldr	r1, [pc, #200]	; (8012e54 <MEMS_compareCalScore+0x350>)
 8012d8c:	428a      	cmp	r2, r1
 8012d8e:	d856      	bhi.n	8012e3e <MEMS_compareCalScore+0x33a>
 8012d90:	f5a2 51e1 	sub.w	r1, r2, #7200	; 0x1c20
 8012d94:	ee07 1a90 	vmov	s15, r1
 8012d98:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8012e58 <MEMS_compareCalScore+0x354>
 8012d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012da0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8012da4:	eee7 6ac6 	vfms.f32	s13, s15, s12
 8012da8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8012dac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012db0:	e793      	b.n	8012cda <MEMS_compareCalScore+0x1d6>
 8012db2:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8012db6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012dba:	ee77 7a66 	vsub.f32	s15, s14, s13
 8012dbe:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8012e5c <MEMS_compareCalScore+0x358>
 8012dc2:	eef0 7ae7 	vabs.f32	s15, s15
 8012dc6:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dce:	f53f af53 	bmi.w	8012c78 <MEMS_compareCalScore+0x174>
 8012dd2:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dda:	bf4c      	ite	mi
 8012ddc:	2001      	movmi	r0, #1
 8012dde:	2000      	movpl	r0, #0
 8012de0:	b003      	add	sp, #12
 8012de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012de6:	f5a2 7116 	sub.w	r1, r2, #600	; 0x258
 8012dea:	ee07 1a90 	vmov	s15, r1
 8012dee:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8012e60 <MEMS_compareCalScore+0x35c>
 8012df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012dfa:	eee7 6ac6 	vfms.f32	s13, s15, s12
 8012dfe:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8012e02:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012e06:	e768      	b.n	8012cda <MEMS_compareCalScore+0x1d6>
 8012e08:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8012e0c:	ee07 1a90 	vmov	s15, r1
 8012e10:	eddf 6a13 	vldr	s13, [pc, #76]	; 8012e60 <MEMS_compareCalScore+0x35c>
 8012e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012e1c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8012e20:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8012e24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012e28:	e732      	b.n	8012c90 <MEMS_compareCalScore+0x18c>
 8012e2a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8012e2e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012e32:	e7c2      	b.n	8012dba <MEMS_compareCalScore+0x2b6>
 8012e34:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8012e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012e3c:	e79f      	b.n	8012d7e <MEMS_compareCalScore+0x27a>
 8012e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012e42:	e74a      	b.n	8012cda <MEMS_compareCalScore+0x1d6>
 8012e44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012e48:	e722      	b.n	8012c90 <MEMS_compareCalScore+0x18c>
 8012e4a:	bf00      	nop
 8012e4c:	43480000 	.word	0x43480000
 8012e50:	00015180 	.word	0x00015180
 8012e54:	0001517f 	.word	0x0001517f
 8012e58:	367e3344 	.word	0x367e3344
 8012e5c:	3dcccccd 	.word	0x3dcccccd
 8012e60:	389ee00a 	.word	0x389ee00a
 8012e64:	00000000 	.word	0x00000000

08012e68 <MEMS_runMagCal.constprop.18>:
 8012e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e6c:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8012eec <MEMS_runMagCal.constprop.18+0x84>
 8012e70:	ed2d 8b0e 	vpush	{d8-d14}
 8012e74:	f8bb 5008 	ldrh.w	r5, [fp, #8]
 8012e78:	f8db 600c 	ldr.w	r6, [fp, #12]
 8012e7c:	f9bb 4002 	ldrsh.w	r4, [fp, #2]
 8012e80:	2d82      	cmp	r5, #130	; 0x82
 8012e82:	f2ad 4db4 	subw	sp, sp, #1204	; 0x4b4
 8012e86:	f240 824f 	bls.w	8013328 <MEMS_runMagCal.constprop.18+0x4c0>
 8012e8a:	f105 077e 	add.w	r7, r5, #126	; 0x7e
 8012e8e:	b2ff      	uxtb	r7, r7
 8012e90:	f04f 0982 	mov.w	r9, #130	; 0x82
 8012e94:	f8db c010 	ldr.w	ip, [fp, #16]
 8012e98:	2300      	movs	r3, #0
 8012e9a:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 8012e9e:	b219      	sxth	r1, r3
 8012ea0:	00ca      	lsls	r2, r1, #3
 8012ea2:	eb0c 0002 	add.w	r0, ip, r2
 8012ea6:	3301      	adds	r3, #1
 8012ea8:	f81c e031 	ldrb.w	lr, [ip, r1, lsl #3]
 8012eac:	f80a e031 	strb.w	lr, [sl, r1, lsl #3]
 8012eb0:	4452      	add	r2, sl
 8012eb2:	b2db      	uxtb	r3, r3
 8012eb4:	f8d0 e002 	ldr.w	lr, [r0, #2]
 8012eb8:	88c1      	ldrh	r1, [r0, #6]
 8012eba:	f8c2 e002 	str.w	lr, [r2, #2]
 8012ebe:	4599      	cmp	r9, r3
 8012ec0:	80d1      	strh	r1, [r2, #6]
 8012ec2:	d8ec      	bhi.n	8012e9e <MEMS_runMagCal.constprop.18+0x36>
 8012ec4:	2d82      	cmp	r5, #130	; 0x82
 8012ec6:	bf86      	itte	hi
 8012ec8:	f1a5 0382 	subhi.w	r3, r5, #130	; 0x82
 8012ecc:	b29b      	uxthhi	r3, r3
 8012ece:	2300      	movls	r3, #0
 8012ed0:	f8ab 3008 	strh.w	r3, [fp, #8]
 8012ed4:	b1ff      	cbz	r7, 8012f16 <MEMS_runMagCal.constprop.18+0xae>
 8012ed6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8012eda:	1e79      	subs	r1, r7, #1
 8012edc:	b2c9      	uxtb	r1, r1
 8012ede:	f103 0208 	add.w	r2, r3, #8
 8012ee2:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8012ee6:	f04f 0e00 	mov.w	lr, #0
 8012eea:	e002      	b.n	8012ef2 <MEMS_runMagCal.constprop.18+0x8a>
 8012eec:	20001708 	.word	0x20001708
 8012ef0:	3208      	adds	r2, #8
 8012ef2:	f893 0410 	ldrb.w	r0, [r3, #1040]	; 0x410
 8012ef6:	f8b3 c412 	ldrh.w	ip, [r3, #1042]	; 0x412
 8012efa:	f8b3 7414 	ldrh.w	r7, [r3, #1044]	; 0x414
 8012efe:	7018      	strb	r0, [r3, #0]
 8012f00:	4291      	cmp	r1, r2
 8012f02:	f8b3 0416 	ldrh.w	r0, [r3, #1046]	; 0x416
 8012f06:	f883 e410 	strb.w	lr, [r3, #1040]	; 0x410
 8012f0a:	f8a3 c002 	strh.w	ip, [r3, #2]
 8012f0e:	809f      	strh	r7, [r3, #4]
 8012f10:	80d8      	strh	r0, [r3, #6]
 8012f12:	4613      	mov	r3, r2
 8012f14:	d1ec      	bne.n	8012ef0 <MEMS_runMagCal.constprop.18+0x88>
 8012f16:	3d01      	subs	r5, #1
 8012f18:	fb04 6215 	mls	r2, r4, r5, r6
 8012f1c:	f109 31ff 	add.w	r1, r9, #4294967295
 8012f20:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
 8012f24:	9206      	str	r2, [sp, #24]
 8012f26:	fb04 2201 	mla	r2, r4, r1, r2
 8012f2a:	9107      	str	r1, [sp, #28]
 8012f2c:	9205      	str	r2, [sp, #20]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	f000 81fe 	beq.w	8013330 <MEMS_runMagCal.constprop.18+0x4c8>
 8012f34:	f8df 83c0 	ldr.w	r8, [pc, #960]	; 80132f8 <MEMS_runMagCal.constprop.18+0x490>
 8012f38:	eddb 2a01 	vldr	s5, [fp, #4]
 8012f3c:	ed9b 3a2d 	vldr	s6, [fp, #180]	; 0xb4
 8012f40:	eddb 3a2a 	vldr	s7, [fp, #168]	; 0xa8
 8012f44:	ed9b 4a31 	vldr	s8, [fp, #196]	; 0xc4
 8012f48:	eddb 4a2b 	vldr	s9, [fp, #172]	; 0xac
 8012f4c:	ed9b 5a35 	vldr	s10, [fp, #212]	; 0xd4
 8012f50:	eddb 5a2c 	vldr	s11, [fp, #176]	; 0xb0
 8012f54:	ed9f 6ae3 	vldr	s12, [pc, #908]	; 80132e4 <MEMS_runMagCal.constprop.18+0x47c>
 8012f58:	f647 7eff 	movw	lr, #32767	; 0x7fff
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	4645      	mov	r5, r8
 8012f60:	e9cd 8e00 	strd	r8, lr, [sp]
 8012f64:	f8cd e008 	str.w	lr, [sp, #8]
 8012f68:	46f0      	mov	r8, lr
 8012f6a:	9304      	str	r3, [sp, #16]
 8012f6c:	461f      	mov	r7, r3
 8012f6e:	4618      	mov	r0, r3
 8012f70:	46ac      	mov	ip, r5
 8012f72:	46ae      	mov	lr, r5
 8012f74:	f81a 1030 	ldrb.w	r1, [sl, r0, lsl #3]
 8012f78:	00c3      	lsls	r3, r0, #3
 8012f7a:	1c45      	adds	r5, r0, #1
 8012f7c:	1c7e      	adds	r6, r7, #1
 8012f7e:	eb0a 0203 	add.w	r2, sl, r3
 8012f82:	2900      	cmp	r1, #0
 8012f84:	f000 809e 	beq.w	80130c4 <MEMS_runMagCal.constprop.18+0x25c>
 8012f88:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8012f8c:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8012f90:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8012f94:	ee07 1a90 	vmov	s15, r1
 8012f98:	ee07 4a10 	vmov	s14, r4
 8012f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fa0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8012fa4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8012fa8:	b237      	sxth	r7, r6
 8012faa:	9e01      	ldr	r6, [sp, #4]
 8012fac:	458c      	cmp	ip, r1
 8012fae:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8012fb2:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012fb6:	bfb8      	it	lt
 8012fb8:	468c      	movlt	ip, r1
 8012fba:	428e      	cmp	r6, r1
 8012fbc:	bfa8      	it	ge
 8012fbe:	460e      	movge	r6, r1
 8012fc0:	ee66 6a83 	vmul.f32	s13, s13, s6
 8012fc4:	45a6      	cmp	lr, r4
 8012fc6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012fca:	ee07 2a10 	vmov	s14, r2
 8012fce:	9601      	str	r6, [sp, #4]
 8012fd0:	9e00      	ldr	r6, [sp, #0]
 8012fd2:	bfb8      	it	lt
 8012fd4:	46a6      	movlt	lr, r4
 8012fd6:	45a0      	cmp	r8, r4
 8012fd8:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8012fdc:	bfa8      	it	ge
 8012fde:	46a0      	movge	r8, r4
 8012fe0:	4296      	cmp	r6, r2
 8012fe2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012fe6:	bfb8      	it	lt
 8012fe8:	4616      	movlt	r6, r2
 8012fea:	ee37 7a65 	vsub.f32	s14, s14, s11
 8012fee:	9600      	str	r6, [sp, #0]
 8012ff0:	9e02      	ldr	r6, [sp, #8]
 8012ff2:	ee37 6a86 	vadd.f32	s12, s15, s12
 8012ff6:	4296      	cmp	r6, r2
 8012ff8:	ee67 7a05 	vmul.f32	s15, s14, s10
 8012ffc:	bfa8      	it	ge
 8012ffe:	4616      	movge	r6, r2
 8013000:	2803      	cmp	r0, #3
 8013002:	9602      	str	r6, [sp, #8]
 8013004:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8013008:	dd5c      	ble.n	80130c4 <MEMS_runMagCal.constprop.18+0x25c>
 801300a:	f1a3 0620 	sub.w	r6, r3, #32
 801300e:	4456      	add	r6, sl
 8013010:	f1a3 0008 	sub.w	r0, r3, #8
 8013014:	3b18      	subs	r3, #24
 8013016:	4453      	add	r3, sl
 8013018:	9303      	str	r3, [sp, #12]
 801301a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801301e:	4450      	add	r0, sl
 8013020:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8013024:	9b03      	ldr	r3, [sp, #12]
 8013026:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801302a:	900a      	str	r0, [sp, #40]	; 0x28
 801302c:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8013030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013032:	1ae4      	subs	r4, r4, r3
 8013034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013036:	1a1b      	subs	r3, r3, r0
 8013038:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801303c:	9803      	ldr	r0, [sp, #12]
 801303e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013042:	9309      	str	r3, [sp, #36]	; 0x24
 8013044:	9b08      	ldr	r3, [sp, #32]
 8013046:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 801304a:	9008      	str	r0, [sp, #32]
 801304c:	ee07 4a90 	vmov	s15, r4
 8013050:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8013054:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 8013058:	9b03      	ldr	r3, [sp, #12]
 801305a:	f9b6 6006 	ldrsh.w	r6, [r6, #6]
 801305e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013062:	9303      	str	r3, [sp, #12]
 8013064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013066:	1ac9      	subs	r1, r1, r3
 8013068:	9b08      	ldr	r3, [sp, #32]
 801306a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801306e:	1ae4      	subs	r4, r4, r3
 8013070:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8013074:	eeb0 7ac7 	vabs.f32	s14, s14
 8013078:	ee07 1a90 	vmov	s15, r1
 801307c:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 8013080:	9b03      	ldr	r3, [sp, #12]
 8013082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013086:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 801308a:	eef0 7ae7 	vabs.f32	s15, s15
 801308e:	1ac0      	subs	r0, r0, r3
 8013090:	1b92      	subs	r2, r2, r6
 8013092:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013096:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801309a:	ee07 2a90 	vmov	s15, r2
 801309e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80130a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130a6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80130aa:	eef0 7ae7 	vabs.f32	s15, s15
 80130ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80130b2:	9b04      	ldr	r3, [sp, #16]
 80130b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80130b8:	ee17 2a90 	vmov	r2, s15
 80130bc:	4293      	cmp	r3, r2
 80130be:	bf38      	it	cc
 80130c0:	4613      	movcc	r3, r2
 80130c2:	9304      	str	r3, [sp, #16]
 80130c4:	b228      	sxth	r0, r5
 80130c6:	4581      	cmp	r9, r0
 80130c8:	f73f af54 	bgt.w	8012f74 <MEMS_runMagCal.constprop.18+0x10c>
 80130cc:	4673      	mov	r3, lr
 80130ce:	4665      	mov	r5, ip
 80130d0:	46c6      	mov	lr, r8
 80130d2:	4698      	mov	r8, r3
 80130d4:	2f00      	cmp	r7, #0
 80130d6:	f000 816a 	beq.w	80133ae <MEMS_runMagCal.constprop.18+0x546>
 80130da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80130de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80130e2:	ee87 7aa2 	vdiv.f32	s14, s15, s5
 80130e6:	f280 814d 	bge.w	8013384 <MEMS_runMagCal.constprop.18+0x51c>
 80130ea:	f51e 4f80 	cmn.w	lr, #16384	; 0x4000
 80130ee:	f2c0 8149 	blt.w	8013384 <MEMS_runMagCal.constprop.18+0x51c>
 80130f2:	f5bc 4f80 	cmp.w	ip, #16384	; 0x4000
 80130f6:	f280 8145 	bge.w	8013384 <MEMS_runMagCal.constprop.18+0x51c>
 80130fa:	9b01      	ldr	r3, [sp, #4]
 80130fc:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8013100:	f2c0 8140 	blt.w	8013384 <MEMS_runMagCal.constprop.18+0x51c>
 8013104:	9900      	ldr	r1, [sp, #0]
 8013106:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 801310a:	f280 813b 	bge.w	8013384 <MEMS_runMagCal.constprop.18+0x51c>
 801310e:	9802      	ldr	r0, [sp, #8]
 8013110:	f510 4f80 	cmn.w	r0, #16384	; 0x4000
 8013114:	f2c0 8136 	blt.w	8013384 <MEMS_runMagCal.constprop.18+0x51c>
 8013118:	ee07 7a90 	vmov	s15, r7
 801311c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013120:	1aea      	subs	r2, r5, r3
 8013122:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8013126:	eba8 0e0e 	sub.w	lr, r8, lr
 801312a:	4596      	cmp	lr, r2
 801312c:	4673      	mov	r3, lr
 801312e:	eba1 0100 	sub.w	r1, r1, r0
 8013132:	bfb8      	it	lt
 8013134:	4613      	movlt	r3, r2
 8013136:	428b      	cmp	r3, r1
 8013138:	bfb8      	it	lt
 801313a:	460b      	movlt	r3, r1
 801313c:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80132e8 <MEMS_runMagCal.constprop.18+0x480>
 8013140:	eeb1 6ae7 	vsqrt.f32	s12, s15
 8013144:	ee07 3a90 	vmov	s15, r3
 8013148:	ee67 6a26 	vmul.f32	s13, s14, s13
 801314c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013150:	ee26 6a22 	vmul.f32	s12, s12, s5
 8013154:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801315c:	f100 8112 	bmi.w	8013384 <MEMS_runMagCal.constprop.18+0x51c>
 8013160:	eddd 6a04 	vldr	s13, [sp, #16]
 8013164:	eddf 5a61 	vldr	s11, [pc, #388]	; 80132ec <MEMS_runMagCal.constprop.18+0x484>
 8013168:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801316c:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8013170:	eef4 2ae5 	vcmpe.f32	s5, s11
 8013174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013178:	f300 8104 	bgt.w	8013384 <MEMS_runMagCal.constprop.18+0x51c>
 801317c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8013180:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013184:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801318c:	f300 80df 	bgt.w	801334e <MEMS_runMagCal.constprop.18+0x4e6>
 8013190:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8013194:	ee67 6a26 	vmul.f32	s13, s14, s13
 8013198:	eef4 7ae6 	vcmpe.f32	s15, s13
 801319c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a0:	f340 85e5 	ble.w	8013d6e <MEMS_runMagCal.constprop.18+0xf06>
 80131a4:	ee07 ea90 	vmov	s15, lr
 80131a8:	ee37 7a07 	vadd.f32	s14, s14, s14
 80131ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80131b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b8:	f340 85d9 	ble.w	8013d6e <MEMS_runMagCal.constprop.18+0xf06>
 80131bc:	ee07 2a90 	vmov	s15, r2
 80131c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80131c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131cc:	f140 85cf 	bpl.w	8013d6e <MEMS_runMagCal.constprop.18+0xf06>
 80131d0:	ee07 1a90 	vmov	s15, r1
 80131d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80131dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131e0:	bf4c      	ite	mi
 80131e2:	2301      	movmi	r3, #1
 80131e4:	2300      	movpl	r3, #0
 80131e6:	9300      	str	r3, [sp, #0]
 80131e8:	f89b 6364 	ldrb.w	r6, [fp, #868]	; 0x364
 80131ec:	f89b 7365 	ldrb.w	r7, [fp, #869]	; 0x365
 80131f0:	f99b 2366 	ldrsb.w	r2, [fp, #870]	; 0x366
 80131f4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80131f8:	283b      	cmp	r0, #59	; 0x3b
 80131fa:	4633      	mov	r3, r6
 80131fc:	4639      	mov	r1, r7
 80131fe:	f340 80dd 	ble.w	80133bc <MEMS_runMagCal.constprop.18+0x554>
 8013202:	f89b 00a4 	ldrb.w	r0, [fp, #164]	; 0xa4
 8013206:	2800      	cmp	r0, #0
 8013208:	f000 80d8 	beq.w	80133bc <MEMS_runMagCal.constprop.18+0x554>
 801320c:	eddf 7a38 	vldr	s15, [pc, #224]	; 80132f0 <MEMS_runMagCal.constprop.18+0x488>
 8013210:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013214:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8013218:	eef0 7ae7 	vabs.f32	s15, s15
 801321c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013224:	f340 80ca 	ble.w	80133bc <MEMS_runMagCal.constprop.18+0x554>
 8013228:	42be      	cmp	r6, r7
 801322a:	f001 86d0 	beq.w	8014fce <MEMS_runMagCal.constprop.18+0x2166>
 801322e:	2000      	movs	r0, #0
 8013230:	9001      	str	r0, [sp, #4]
 8013232:	2e00      	cmp	r6, #0
 8013234:	f000 80c2 	beq.w	80133bc <MEMS_runMagCal.constprop.18+0x554>
 8013238:	2500      	movs	r5, #0
 801323a:	46ae      	mov	lr, r5
 801323c:	46ac      	mov	ip, r5
 801323e:	46a8      	mov	r8, r5
 8013240:	4628      	mov	r0, r5
 8013242:	9c01      	ldr	r4, [sp, #4]
 8013244:	1904      	adds	r4, r0, r4
 8013246:	fb94 f0f7 	sdiv	r0, r4, r7
 801324a:	fb07 4010 	mls	r0, r7, r0, r4
 801324e:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 8013252:	3501      	adds	r5, #1
 8013254:	f8b0 4368 	ldrh.w	r4, [r0, #872]	; 0x368
 8013258:	f241 205b 	movw	r0, #4699	; 0x125b
 801325c:	4284      	cmp	r4, r0
 801325e:	bf95      	itete	ls
 8013260:	f5c4 5092 	rsbls	r0, r4, #4672	; 0x1240
 8013264:	f5a4 5092 	subhi.w	r0, r4, #4672	; 0x1240
 8013268:	301c      	addls	r0, #28
 801326a:	381c      	subhi	r0, #28
 801326c:	b280      	uxth	r0, r0
 801326e:	44a0      	add	r8, r4
 8013270:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8013274:	42a0      	cmp	r0, r4
 8013276:	bf98      	it	ls
 8013278:	f10e 0e01 	addls.w	lr, lr, #1
 801327c:	f10c 0001 	add.w	r0, ip, #1
 8013280:	b22d      	sxth	r5, r5
 8013282:	bf8c      	ite	hi
 8013284:	fa5f fc80 	uxtbhi.w	ip, r0
 8013288:	fa5f fe8e 	uxtbls.w	lr, lr
 801328c:	42ae      	cmp	r6, r5
 801328e:	4628      	mov	r0, r5
 8013290:	dcd7      	bgt.n	8013242 <MEMS_runMagCal.constprop.18+0x3da>
 8013292:	fbb8 f0f6 	udiv	r0, r8, r6
 8013296:	ee07 0a90 	vmov	s15, r0
 801329a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8013310 <MEMS_runMagCal.constprop.18+0x4a8>
 801329e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80132f0 <MEMS_runMagCal.constprop.18+0x488>
 80132a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132a6:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 80132aa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80132ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80132b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132b6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80132ba:	eeb0 7ac7 	vabs.f32	s14, s14
 80132be:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80132c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132c6:	d579      	bpl.n	80133bc <MEMS_runMagCal.constprop.18+0x554>
 80132c8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80132cc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80132f4 <MEMS_runMagCal.constprop.18+0x48c>
 80132d0:	eef0 7ae7 	vabs.f32	s15, s15
 80132d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80132d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132dc:	dd6e      	ble.n	80133bc <MEMS_runMagCal.constprop.18+0x554>
 80132de:	45f4      	cmp	ip, lr
 80132e0:	d86c      	bhi.n	80133bc <MEMS_runMagCal.constprop.18+0x554>
 80132e2:	e01f      	b.n	8013324 <MEMS_runMagCal.constprop.18+0x4bc>
 80132e4:	00000000 	.word	0x00000000
 80132e8:	43020000 	.word	0x43020000
 80132ec:	447a0000 	.word	0x447a0000
 80132f0:	423c0000 	.word	0x423c0000
 80132f4:	42700000 	.word	0x42700000
 80132f8:	ffff8000 	.word	0xffff8000
 80132fc:	43480000 	.word	0x43480000
 8013300:	42c80000 	.word	0x42c80000
 8013304:	477fff00 	.word	0x477fff00
 8013308:	3a83126f 	.word	0x3a83126f
 801330c:	00000000 	.word	0x00000000
 8013310:	3c23d70a 	.word	0x3c23d70a
 8013314:	c23c0000 	.word	0xc23c0000
 8013318:	3fd9999a 	.word	0x3fd9999a
 801331c:	40233334 	.word	0x40233334
 8013320:	427c0000 	.word	0x427c0000
 8013324:	2401      	movs	r4, #1
 8013326:	e04a      	b.n	80133be <MEMS_runMagCal.constprop.18+0x556>
 8013328:	b14d      	cbz	r5, 801333e <MEMS_runMagCal.constprop.18+0x4d6>
 801332a:	46a9      	mov	r9, r5
 801332c:	2700      	movs	r7, #0
 801332e:	e5b1      	b.n	8012e94 <MEMS_runMagCal.constprop.18+0x2c>
 8013330:	e9cb 333a 	strd	r3, r3, [fp, #232]	; 0xe8
 8013334:	e9cb 333c 	strd	r3, r3, [fp, #240]	; 0xf0
 8013338:	e9cb 333e 	strd	r3, r3, [fp, #248]	; 0xf8
 801333c:	e5fa      	b.n	8012f34 <MEMS_runMagCal.constprop.18+0xcc>
 801333e:	f8ab 5008 	strh.w	r5, [fp, #8]
 8013342:	f20d 4db4 	addw	sp, sp, #1204	; 0x4b4
 8013346:	ecbd 8b0e 	vpop	{d8-d14}
 801334a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801334e:	f89b 30a4 	ldrb.w	r3, [fp, #164]	; 0xa4
 8013352:	3b02      	subs	r3, #2
 8013354:	2b01      	cmp	r3, #1
 8013356:	d8f4      	bhi.n	8013342 <MEMS_runMagCal.constprop.18+0x4da>
 8013358:	ed5f 7a18 	vldr	s15, [pc, #-96]	; 80132fc <MEMS_runMagCal.constprop.18+0x494>
 801335c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8013360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013364:	dded      	ble.n	8013342 <MEMS_runMagCal.constprop.18+0x4da>
 8013366:	2300      	movs	r3, #0
 8013368:	2101      	movs	r1, #1
 801336a:	22ff      	movs	r2, #255	; 0xff
 801336c:	9805      	ldr	r0, [sp, #20]
 801336e:	f8cb 0360 	str.w	r0, [fp, #864]	; 0x360
 8013372:	f88b 10a4 	strb.w	r1, [fp, #164]	; 0xa4
 8013376:	f88b 30e0 	strb.w	r3, [fp, #224]	; 0xe0
 801337a:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
 801337e:	f88b 20e2 	strb.w	r2, [fp, #226]	; 0xe2
 8013382:	e7de      	b.n	8013342 <MEMS_runMagCal.constprop.18+0x4da>
 8013384:	f89b 30a4 	ldrb.w	r3, [fp, #164]	; 0xa4
 8013388:	3b02      	subs	r3, #2
 801338a:	2b01      	cmp	r3, #1
 801338c:	f240 84df 	bls.w	8013d4e <MEMS_runMagCal.constprop.18+0xee6>
 8013390:	9905      	ldr	r1, [sp, #20]
 8013392:	f8cb 1360 	str.w	r1, [fp, #864]	; 0x360
 8013396:	2200      	movs	r2, #0
 8013398:	23ff      	movs	r3, #255	; 0xff
 801339a:	f88b 20e0 	strb.w	r2, [fp, #224]	; 0xe0
 801339e:	f88b 30e2 	strb.w	r3, [fp, #226]	; 0xe2
 80133a2:	f20d 4db4 	addw	sp, sp, #1204	; 0x4b4
 80133a6:	ecbd 8b0e 	vpop	{d8-d14}
 80133aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ae:	f89b 3364 	ldrb.w	r3, [fp, #868]	; 0x364
 80133b2:	f99b 2366 	ldrsb.w	r2, [fp, #870]	; 0x366
 80133b6:	f89b 1365 	ldrb.w	r1, [fp, #869]	; 0x365
 80133ba:	9700      	str	r7, [sp, #0]
 80133bc:	2400      	movs	r4, #0
 80133be:	ed1f 0a30 	vldr	s0, [pc, #-192]	; 8013300 <MEMS_runMagCal.constprop.18+0x498>
 80133c2:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 8013304 <MEMS_runMagCal.constprop.18+0x49c>
 80133c6:	ee26 0a00 	vmul.f32	s0, s12, s0
 80133ca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80133ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133d2:	bf88      	it	hi
 80133d4:	eeb0 0a67 	vmovhi.f32	s0, s15
 80133d8:	2a00      	cmp	r2, #0
 80133da:	f2c0 8479 	blt.w	8013cd0 <MEMS_runMagCal.constprop.18+0xe68>
 80133de:	1c50      	adds	r0, r2, #1
 80133e0:	fb90 f2f1 	sdiv	r2, r0, r1
 80133e4:	fb01 0212 	mls	r2, r1, r2, r0
 80133e8:	b252      	sxtb	r2, r2
 80133ea:	4615      	mov	r5, r2
 80133ec:	3301      	adds	r3, #1
 80133ee:	4299      	cmp	r1, r3
 80133f0:	bfa8      	it	ge
 80133f2:	4619      	movge	r1, r3
 80133f4:	f88b 1364 	strb.w	r1, [fp, #868]	; 0x364
 80133f8:	f88b 2366 	strb.w	r2, [fp, #870]	; 0x366
 80133fc:	f006 fd4e 	bl	8019e9c <roundf>
 8013400:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8013404:	eb0b 0545 	add.w	r5, fp, r5, lsl #1
 8013408:	ee10 3a10 	vmov	r3, s0
 801340c:	f8a5 3368 	strh.w	r3, [r5, #872]	; 0x368
 8013410:	2c00      	cmp	r4, #0
 8013412:	d1bd      	bne.n	8013390 <MEMS_runMagCal.constprop.18+0x528>
 8013414:	f8db 5360 	ldr.w	r5, [fp, #864]	; 0x360
 8013418:	b12d      	cbz	r5, 8013426 <MEMS_runMagCal.constprop.18+0x5be>
 801341a:	9b05      	ldr	r3, [sp, #20]
 801341c:	1b5a      	subs	r2, r3, r5
 801341e:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8013422:	429a      	cmp	r2, r3
 8013424:	d98d      	bls.n	8013342 <MEMS_runMagCal.constprop.18+0x4da>
 8013426:	eddd 7a05 	vldr	s15, [sp, #20]
 801342a:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 801342e:	ed5f 7a4a 	vldr	s15, [pc, #-296]	; 8013308 <MEMS_runMagCal.constprop.18+0x4a0>
 8013432:	ee2a aa27 	vmul.f32	s20, s20, s15
 8013436:	eeb0 0a4a 	vmov.f32	s0, s20
 801343a:	f006 fd2f 	bl	8019e9c <roundf>
 801343e:	f8db 30d8 	ldr.w	r3, [fp, #216]	; 0xd8
 8013442:	eef0 ba40 	vmov.f32	s23, s0
 8013446:	2b00      	cmp	r3, #0
 8013448:	f040 841e 	bne.w	8013c88 <MEMS_runMagCal.constprop.18+0xe20>
 801344c:	f89b 80a4 	ldrb.w	r8, [fp, #164]	; 0xa4
 8013450:	f89b 6364 	ldrb.w	r6, [fp, #868]	; 0x364
 8013454:	f89b 1365 	ldrb.w	r1, [fp, #869]	; 0x365
 8013458:	428e      	cmp	r6, r1
 801345a:	f000 846e 	beq.w	8013d3a <MEMS_runMagCal.constprop.18+0xed2>
 801345e:	2700      	movs	r7, #0
 8013460:	ee07 6a90 	vmov	s15, r6
 8013464:	b2b4      	uxth	r4, r6
 8013466:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801346a:	ed1f 7a58 	vldr	s14, [pc, #-352]	; 801330c <MEMS_runMagCal.constprop.18+0x4a4>
 801346e:	2c00      	cmp	r4, #0
 8013470:	f000 8111 	beq.w	8013696 <MEMS_runMagCal.constprop.18+0x82e>
 8013474:	2200      	movs	r2, #0
 8013476:	9501      	str	r5, [sp, #4]
 8013478:	eef0 6a47 	vmov.f32	s13, s14
 801347c:	f241 205c 	movw	r0, #4700	; 0x125c
 8013480:	f640 3cb8 	movw	ip, #3000	; 0xbb8
 8013484:	4615      	mov	r5, r2
 8013486:	eb07 0e02 	add.w	lr, r7, r2
 801348a:	fb9e f3f1 	sdiv	r3, lr, r1
 801348e:	fb01 e313 	mls	r3, r1, r3, lr
 8013492:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8013496:	3201      	adds	r2, #1
 8013498:	f8b3 3368 	ldrh.w	r3, [r3, #872]	; 0x368
 801349c:	ee07 3a90 	vmov	s15, r3
 80134a0:	f5a3 5e92 	sub.w	lr, r3, #4672	; 0x1240
 80134a4:	4283      	cmp	r3, r0
 80134a6:	bf98      	it	ls
 80134a8:	1ac3      	subls	r3, r0, r3
 80134aa:	f1ae 0e1c 	sub.w	lr, lr, #28
 80134ae:	bf88      	it	hi
 80134b0:	fa1f f38e 	uxthhi.w	r3, lr
 80134b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134b8:	bf98      	it	ls
 80134ba:	b29b      	uxthls	r3, r3
 80134bc:	fb03 fe03 	mul.w	lr, r3, r3
 80134c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80134c4:	ee07 ea90 	vmov	s15, lr
 80134c8:	4563      	cmp	r3, ip
 80134ca:	bf88      	it	hi
 80134cc:	1c6b      	addhi	r3, r5, #1
 80134ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134d2:	fa1f fe82 	uxth.w	lr, r2
 80134d6:	bf88      	it	hi
 80134d8:	b2dd      	uxtbhi	r5, r3
 80134da:	4574      	cmp	r4, lr
 80134dc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80134e0:	d8d1      	bhi.n	8013486 <MEMS_runMagCal.constprop.18+0x61e>
 80134e2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80134e6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80134ea:	2e3b      	cmp	r6, #59	; 0x3b
 80134ec:	9505      	str	r5, [sp, #20]
 80134ee:	9d01      	ldr	r5, [sp, #4]
 80134f0:	ed5f 6a79 	vldr	s13, [pc, #-484]	; 8013310 <MEMS_runMagCal.constprop.18+0x4a8>
 80134f4:	eeb1 bae7 	vsqrt.f32	s22, s15
 80134f8:	ee2b ba26 	vmul.f32	s22, s22, s13
 80134fc:	f340 80d2 	ble.w	80136a4 <MEMS_runMagCal.constprop.18+0x83c>
 8013500:	f1b8 0f00 	cmp.w	r8, #0
 8013504:	d038      	beq.n	8013578 <MEMS_runMagCal.constprop.18+0x710>
 8013506:	eec7 5a06 	vdiv.f32	s11, s14, s12
 801350a:	ed5f 7a7e 	vldr	s15, [pc, #-504]	; 8013314 <MEMS_runMagCal.constprop.18+0x4ac>
 801350e:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8013512:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8013516:	eef0 7ae7 	vabs.f32	s15, s15
 801351a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801351e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013522:	f101 8543 	bmi.w	8014fac <MEMS_runMagCal.constprop.18+0x2144>
 8013526:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 801352a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801352e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013532:	d507      	bpl.n	8013544 <MEMS_runMagCal.constprop.18+0x6dc>
 8013534:	ed1f 7a88 	vldr	s14, [pc, #-544]	; 8013318 <MEMS_runMagCal.constprop.18+0x4b0>
 8013538:	eeb4 bac7 	vcmpe.f32	s22, s14
 801353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013540:	f101 8534 	bmi.w	8014fac <MEMS_runMagCal.constprop.18+0x2144>
 8013544:	eeb1 7a05 	vmov.f32	s14, #21	; 0x40a80000  5.250
 8013548:	eef4 7ac7 	vcmpe.f32	s15, s14
 801354c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013550:	f101 8538 	bmi.w	8014fc4 <MEMS_runMagCal.constprop.18+0x215c>
 8013554:	eeb2 7a05 	vmov.f32	s14, #37	; 0x41280000  10.5
 8013558:	eef4 7ac7 	vcmpe.f32	s15, s14
 801355c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013560:	d507      	bpl.n	8013572 <MEMS_runMagCal.constprop.18+0x70a>
 8013562:	ed5f 7a92 	vldr	s15, [pc, #-584]	; 801331c <MEMS_runMagCal.constprop.18+0x4b4>
 8013566:	eeb4 bae7 	vcmpe.f32	s22, s15
 801356a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801356e:	f101 8529 	bmi.w	8014fc4 <MEMS_runMagCal.constprop.18+0x215c>
 8013572:	2301      	movs	r3, #1
 8013574:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 8013578:	ed9b 8a01 	vldr	s16, [fp, #4]
 801357c:	ed5f 7a98 	vldr	s15, [pc, #-608]	; 8013320 <MEMS_runMagCal.constprop.18+0x4b8>
 8013580:	f8db 30e4 	ldr.w	r3, [fp, #228]	; 0xe4
 8013584:	f9bb 6002 	ldrsh.w	r6, [fp, #2]
 8013588:	f89b 50e0 	ldrb.w	r5, [fp, #224]	; 0xe0
 801358c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013590:	eec7 8a08 	vdiv.f32	s17, s14, s16
 8013594:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013598:	f503 42ab 	add.w	r2, r3, #21888	; 0x5580
 801359c:	fb01 0606 	mla	r6, r1, r6, r0
 80135a0:	3270      	adds	r2, #112	; 0x70
 80135a2:	42b2      	cmp	r2, r6
 80135a4:	eeb1 9a00 	vmov.f32	s18, #16	; 0x40800000  4.0
 80135a8:	ee28 9a89 	vmul.f32	s18, s17, s18
 80135ac:	ee69 7a27 	vmul.f32	s15, s18, s15
 80135b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80135b4:	ee17 1a90 	vmov	r1, s15
 80135b8:	b289      	uxth	r1, r1
 80135ba:	4688      	mov	r8, r1
 80135bc:	d254      	bcs.n	8013668 <MEMS_runMagCal.constprop.18+0x800>
 80135be:	f644 6220 	movw	r2, #20000	; 0x4e20
 80135c2:	4296      	cmp	r6, r2
 80135c4:	f89b 40e1 	ldrb.w	r4, [fp, #225]	; 0xe1
 80135c8:	f99b 20e2 	ldrsb.w	r2, [fp, #226]	; 0xe2
 80135cc:	bf1a      	itte	ne
 80135ce:	f5a6 469c 	subne.w	r6, r6, #19968	; 0x4e00
 80135d2:	3e20      	subne	r6, #32
 80135d4:	2600      	moveq	r6, #0
 80135d6:	42ac      	cmp	r4, r5
 80135d8:	f102 0201 	add.w	r2, r2, #1
 80135dc:	f000 839d 	beq.w	8013d1a <MEMS_runMagCal.constprop.18+0xeb2>
 80135e0:	1b52      	subs	r2, r2, r5
 80135e2:	fb92 f1f4 	sdiv	r1, r2, r4
 80135e6:	fb04 2211 	mls	r2, r4, r1, r2
 80135ea:	2a00      	cmp	r2, #0
 80135ec:	b217      	sxth	r7, r2
 80135ee:	bfbc      	itt	lt
 80135f0:	1912      	addlt	r2, r2, r4
 80135f2:	b217      	sxthlt	r7, r2
 80135f4:	fa0f fc85 	sxth.w	ip, r5
 80135f8:	f1bc 0f00 	cmp.w	ip, #0
 80135fc:	d031      	beq.n	8013662 <MEMS_runMagCal.constprop.18+0x7fa>
 80135fe:	1b9b      	subs	r3, r3, r6
 8013600:	2100      	movs	r1, #0
 8013602:	b298      	uxth	r0, r3
 8013604:	468e      	mov	lr, r1
 8013606:	e005      	b.n	8013614 <MEMS_runMagCal.constprop.18+0x7ac>
 8013608:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 801360c:	3101      	adds	r1, #1
 801360e:	b20b      	sxth	r3, r1
 8013610:	459c      	cmp	ip, r3
 8013612:	dd1a      	ble.n	801364a <MEMS_runMagCal.constprop.18+0x7e2>
 8013614:	187a      	adds	r2, r7, r1
 8013616:	fb92 f3f4 	sdiv	r3, r2, r4
 801361a:	fb04 2313 	mls	r3, r4, r3, r2
 801361e:	b2db      	uxtb	r3, r3
 8013620:	3304      	adds	r3, #4
 8013622:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013626:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 801362a:	4402      	add	r2, r0
 801362c:	b212      	sxth	r2, r2
 801362e:	2a00      	cmp	r2, #0
 8013630:	daea      	bge.n	8013608 <MEMS_runMagCal.constprop.18+0x7a0>
 8013632:	f105 3eff 	add.w	lr, r5, #4294967295
 8013636:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 801363a:	2d00      	cmp	r5, #0
 801363c:	f000 837a 	beq.w	8013d34 <MEMS_runMagCal.constprop.18+0xecc>
 8013640:	fa5f f58e 	uxtb.w	r5, lr
 8013644:	f04f 0e01 	mov.w	lr, #1
 8013648:	e7e0      	b.n	801360c <MEMS_runMagCal.constprop.18+0x7a4>
 801364a:	f88b 50e0 	strb.w	r5, [fp, #224]	; 0xe0
 801364e:	f1be 0f00 	cmp.w	lr, #0
 8013652:	d006      	beq.n	8013662 <MEMS_runMagCal.constprop.18+0x7fa>
 8013654:	eeb0 0a49 	vmov.f32	s0, s18
 8013658:	4640      	mov	r0, r8
 801365a:	f7fe f8bd 	bl	80117d8 <MEMS_updateMagBufferIndex.constprop.22>
 801365e:	f89b 50e0 	ldrb.w	r5, [fp, #224]	; 0xe0
 8013662:	f8cb 60e4 	str.w	r6, [fp, #228]	; 0xe4
 8013666:	4633      	mov	r3, r6
 8013668:	2d00      	cmp	r5, #0
 801366a:	d04d      	beq.n	8013708 <MEMS_runMagCal.constprop.18+0x8a0>
 801366c:	f99b 20e2 	ldrsb.w	r2, [fp, #226]	; 0xe2
 8013670:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8013674:	f9b2 2100 	ldrsh.w	r2, [r2, #256]	; 0x100
 8013678:	f502 529c 	add.w	r2, r2, #4992	; 0x1380
 801367c:	3208      	adds	r2, #8
 801367e:	4413      	add	r3, r2
 8013680:	9a06      	ldr	r2, [sp, #24]
 8013682:	4293      	cmp	r3, r2
 8013684:	d334      	bcc.n	80136f0 <MEMS_runMagCal.constprop.18+0x888>
 8013686:	9b00      	ldr	r3, [sp, #0]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d140      	bne.n	801370e <MEMS_runMagCal.constprop.18+0x8a6>
 801368c:	2d0a      	cmp	r5, #10
 801368e:	d83e      	bhi.n	801370e <MEMS_runMagCal.constprop.18+0x8a6>
 8013690:	2300      	movs	r3, #0
 8013692:	9304      	str	r3, [sp, #16]
 8013694:	e122      	b.n	80138dc <MEMS_runMagCal.constprop.18+0xa74>
 8013696:	eeb1 bac7 	vsqrt.f32	s22, s14
 801369a:	9405      	str	r4, [sp, #20]
 801369c:	eddf 7ac7 	vldr	s15, [pc, #796]	; 80139bc <MEMS_runMagCal.constprop.18+0xb54>
 80136a0:	ee2b ba27 	vmul.f32	s22, s22, s15
 80136a4:	f1b8 0f03 	cmp.w	r8, #3
 80136a8:	f47f af66 	bne.w	8013578 <MEMS_runMagCal.constprop.18+0x710>
 80136ac:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	f43f af61 	beq.w	8013578 <MEMS_runMagCal.constprop.18+0x710>
 80136b6:	ee07 3a90 	vmov	s15, r3
 80136ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80136be:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80136c2:	ee7a 6a67 	vsub.f32	s13, s20, s15
 80136c6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80136ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136ce:	f77f af53 	ble.w	8013578 <MEMS_runMagCal.constprop.18+0x710>
 80136d2:	ee07 5a10 	vmov	s14, r5
 80136d6:	eddf 6aba 	vldr	s13, [pc, #744]	; 80139c0 <MEMS_runMagCal.constprop.18+0xb58>
 80136da:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80136de:	ee27 7a26 	vmul.f32	s14, s14, s13
 80136e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80136e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136ea:	f73f ae2a 	bgt.w	8013342 <MEMS_runMagCal.constprop.18+0x4da>
 80136ee:	e743      	b.n	8013578 <MEMS_runMagCal.constprop.18+0x710>
 80136f0:	2300      	movs	r3, #0
 80136f2:	e9cb 333a 	strd	r3, r3, [fp, #232]	; 0xe8
 80136f6:	e9cb 333c 	strd	r3, r3, [fp, #240]	; 0xf0
 80136fa:	e9cb 333e 	strd	r3, r3, [fp, #248]	; 0xf8
 80136fe:	22ff      	movs	r2, #255	; 0xff
 8013700:	f88b 30e0 	strb.w	r3, [fp, #224]	; 0xe0
 8013704:	f88b 20e2 	strb.w	r2, [fp, #226]	; 0xe2
 8013708:	9b00      	ldr	r3, [sp, #0]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d0c0      	beq.n	8013690 <MEMS_runMagCal.constprop.18+0x828>
 801370e:	ee69 aa09 	vmul.f32	s21, s18, s18
 8013712:	eddf 6aac 	vldr	s13, [pc, #688]	; 80139c4 <MEMS_runMagCal.constprop.18+0xb5c>
 8013716:	f8cd 9000 	str.w	r9, [sp]
 801371a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801371e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8013722:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 8013726:	2300      	movs	r3, #0
 8013728:	ee6a aaa6 	vmul.f32	s21, s21, s13
 801372c:	ee68 8a87 	vmul.f32	s17, s17, s14
 8013730:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013734:	ee69 9a29 	vmul.f32	s19, s18, s19
 8013738:	461c      	mov	r4, r3
 801373a:	9304      	str	r3, [sp, #16]
 801373c:	f81a 1034 	ldrb.w	r1, [sl, r4, lsl #3]
 8013740:	eb0a 02c4 	add.w	r2, sl, r4, lsl #3
 8013744:	b2a4      	uxth	r4, r4
 8013746:	2900      	cmp	r1, #0
 8013748:	f000 80c1 	beq.w	80138ce <MEMS_runMagCal.constprop.18+0xa66>
 801374c:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
 8013750:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 8013754:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8013758:	ee07 5a90 	vmov	s15, r5
 801375c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013760:	eef0 7ae7 	vabs.f32	s15, s15
 8013764:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801376c:	d516      	bpl.n	801379c <MEMS_runMagCal.constprop.18+0x934>
 801376e:	ee07 6a90 	vmov	s15, r6
 8013772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013776:	eef0 7ae7 	vabs.f32	s15, s15
 801377a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013782:	dd0b      	ble.n	801379c <MEMS_runMagCal.constprop.18+0x934>
 8013784:	ee07 7a90 	vmov	s15, r7
 8013788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801378c:	eef0 7ae7 	vabs.f32	s15, s15
 8013790:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013798:	f300 8099 	bgt.w	80138ce <MEMS_runMagCal.constprop.18+0xa66>
 801379c:	f89b 90e0 	ldrb.w	r9, [fp, #224]	; 0xe0
 80137a0:	f1b9 0f00 	cmp.w	r9, #0
 80137a4:	f000 81c6 	beq.w	8013b34 <MEMS_runMagCal.constprop.18+0xccc>
 80137a8:	f9bb 135a 	ldrsh.w	r1, [fp, #858]	; 0x35a
 80137ac:	f9bb 2358 	ldrsh.w	r2, [fp, #856]	; 0x358
 80137b0:	f9bb 335c 	ldrsh.w	r3, [fp, #860]	; 0x35c
 80137b4:	1b89      	subs	r1, r1, r6
 80137b6:	fb01 f101 	mul.w	r1, r1, r1
 80137ba:	1b52      	subs	r2, r2, r5
 80137bc:	fb02 1202 	mla	r2, r2, r2, r1
 80137c0:	1bdb      	subs	r3, r3, r7
 80137c2:	fb03 2303 	mla	r3, r3, r3, r2
 80137c6:	ee07 3a90 	vmov	s15, r3
 80137ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80137ce:	eef4 aae7 	vcmpe.f32	s21, s15
 80137d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137d6:	dc7a      	bgt.n	80138ce <MEMS_runMagCal.constprop.18+0xa66>
 80137d8:	fb95 f3f8 	sdiv	r3, r5, r8
 80137dc:	fb08 5313 	mls	r3, r8, r3, r5
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	bfb8      	it	lt
 80137e4:	4443      	addlt	r3, r8
 80137e6:	b21b      	sxth	r3, r3
 80137e8:	ee07 3a90 	vmov	s15, r3
 80137ec:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80137f0:	ee20 0a08 	vmul.f32	s0, s0, s16
 80137f4:	f006 fb52 	bl	8019e9c <roundf>
 80137f8:	fb96 f3f8 	sdiv	r3, r6, r8
 80137fc:	fb08 6313 	mls	r3, r8, r3, r6
 8013800:	2b00      	cmp	r3, #0
 8013802:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013806:	bfb8      	it	lt
 8013808:	4443      	addlt	r3, r8
 801380a:	b21b      	sxth	r3, r3
 801380c:	edcd 7a01 	vstr	s15, [sp, #4]
 8013810:	ee07 3a90 	vmov	s15, r3
 8013814:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013818:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801381c:	9201      	str	r2, [sp, #4]
 801381e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013822:	f006 fb3b 	bl	8019e9c <roundf>
 8013826:	fb97 f3f8 	sdiv	r3, r7, r8
 801382a:	fb08 7313 	mls	r3, r8, r3, r7
 801382e:	2b00      	cmp	r3, #0
 8013830:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013834:	bfb8      	it	lt
 8013836:	4443      	addlt	r3, r8
 8013838:	b21b      	sxth	r3, r3
 801383a:	edcd 7a02 	vstr	s15, [sp, #8]
 801383e:	ee07 3a90 	vmov	s15, r3
 8013842:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013846:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801384a:	9202      	str	r2, [sp, #8]
 801384c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013850:	f006 fb24 	bl	8019e9c <roundf>
 8013854:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013858:	e9db 233a 	ldrd	r2, r3, [fp, #232]	; 0xe8
 801385c:	edcd 7a03 	vstr	s15, [sp, #12]
 8013860:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8013864:	9103      	str	r1, [sp, #12]
 8013866:	9901      	ldr	r1, [sp, #4]
 8013868:	291f      	cmp	r1, #31
 801386a:	f240 8205 	bls.w	8013c78 <MEMS_runMagCal.constprop.18+0xe10>
 801386e:	f1a1 0320 	sub.w	r3, r1, #32
 8013872:	2101      	movs	r1, #1
 8013874:	fa01 f303 	lsl.w	r3, r1, r3
 8013878:	4213      	tst	r3, r2
 801387a:	bf08      	it	eq
 801387c:	2100      	moveq	r1, #0
 801387e:	9802      	ldr	r0, [sp, #8]
 8013880:	281f      	cmp	r0, #31
 8013882:	f081 0c01 	eor.w	ip, r1, #1
 8013886:	e9db 233c 	ldrd	r2, r3, [fp, #240]	; 0xf0
 801388a:	f240 81ec 	bls.w	8013c66 <MEMS_runMagCal.constprop.18+0xdfe>
 801388e:	f1a0 0320 	sub.w	r3, r0, #32
 8013892:	2001      	movs	r0, #1
 8013894:	fa00 f303 	lsl.w	r3, r0, r3
 8013898:	4213      	tst	r3, r2
 801389a:	bf14      	ite	ne
 801389c:	4603      	movne	r3, r0
 801389e:	2300      	moveq	r3, #0
 80138a0:	9a03      	ldr	r2, [sp, #12]
 80138a2:	2a1f      	cmp	r2, #31
 80138a4:	f083 0001 	eor.w	r0, r3, #1
 80138a8:	f240 8094 	bls.w	80139d4 <MEMS_runMagCal.constprop.18+0xb6c>
 80138ac:	f1a2 0e20 	sub.w	lr, r2, #32
 80138b0:	f8db 20fc 	ldr.w	r2, [fp, #252]	; 0xfc
 80138b4:	9207      	str	r2, [sp, #28]
 80138b6:	2201      	movs	r2, #1
 80138b8:	fa02 fe0e 	lsl.w	lr, r2, lr
 80138bc:	9a07      	ldr	r2, [sp, #28]
 80138be:	ea1e 0f02 	tst.w	lr, r2
 80138c2:	f000 8094 	beq.w	80139ee <MEMS_runMagCal.constprop.18+0xb86>
 80138c6:	ea5c 0300 	orrs.w	r3, ip, r0
 80138ca:	f040 80e6 	bne.w	8013a9a <MEMS_runMagCal.constprop.18+0xc32>
 80138ce:	3401      	adds	r4, #1
 80138d0:	9a00      	ldr	r2, [sp, #0]
 80138d2:	b224      	sxth	r4, r4
 80138d4:	42a2      	cmp	r2, r4
 80138d6:	4623      	mov	r3, r4
 80138d8:	f73f af30 	bgt.w	801373c <MEMS_runMagCal.constprop.18+0x8d4>
 80138dc:	f89b 30dc 	ldrb.w	r3, [fp, #220]	; 0xdc
 80138e0:	9a04      	ldr	r2, [sp, #16]
 80138e2:	431a      	orrs	r2, r3
 80138e4:	f88b 20dc 	strb.w	r2, [fp, #220]	; 0xdc
 80138e8:	2a00      	cmp	r2, #0
 80138ea:	f43f ad2a 	beq.w	8013342 <MEMS_runMagCal.constprop.18+0x4da>
 80138ee:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
 80138f2:	9303      	str	r3, [sp, #12]
 80138f4:	2b18      	cmp	r3, #24
 80138f6:	f67f ad24 	bls.w	8013342 <MEMS_runMagCal.constprop.18+0x4da>
 80138fa:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 80138fe:	b16b      	cbz	r3, 801391c <MEMS_runMagCal.constprop.18+0xab4>
 8013900:	ee07 3a90 	vmov	s15, r3
 8013904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013908:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801390c:	ee3a aa67 	vsub.f32	s20, s20, s15
 8013910:	eeb4 aac7 	vcmpe.f32	s20, s14
 8013914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013918:	f53f ad13 	bmi.w	8013342 <MEMS_runMagCal.constprop.18+0x4da>
 801391c:	f8db 30f4 	ldr.w	r3, [fp, #244]	; 0xf4
 8013920:	9300      	str	r3, [sp, #0]
 8013922:	f8db 30f8 	ldr.w	r3, [fp, #248]	; 0xf8
 8013926:	9302      	str	r3, [sp, #8]
 8013928:	2200      	movs	r2, #0
 801392a:	f8db 30fc 	ldr.w	r3, [fp, #252]	; 0xfc
 801392e:	9301      	str	r3, [sp, #4]
 8013930:	4611      	mov	r1, r2
 8013932:	eddb 8a01 	vldr	s17, [fp, #4]
 8013936:	f8db e0f0 	ldr.w	lr, [fp, #240]	; 0xf0
 801393a:	9219      	str	r2, [sp, #100]	; 0x64
 801393c:	e9db 893a 	ldrd	r8, r9, [fp, #232]	; 0xe8
 8013940:	4610      	mov	r0, r2
 8013942:	4613      	mov	r3, r2
 8013944:	4615      	mov	r5, r2
 8013946:	e9cd 221a 	strd	r2, r2, [sp, #104]	; 0x68
 801394a:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
 801394e:	921e      	str	r2, [sp, #120]	; 0x78
 8013950:	f04f 0c01 	mov.w	ip, #1
 8013954:	e012      	b.n	801397c <MEMS_runMagCal.constprop.18+0xb14>
 8013956:	9c01      	ldr	r4, [sp, #4]
 8013958:	2f00      	cmp	r7, #0
 801395a:	bf18      	it	ne
 801395c:	3501      	addne	r5, #1
 801395e:	2e00      	cmp	r6, #0
 8013960:	bf18      	it	ne
 8013962:	3301      	addne	r3, #1
 8013964:	4214      	tst	r4, r2
 8013966:	b2ed      	uxtb	r5, r5
 8013968:	b2db      	uxtb	r3, r3
 801396a:	bf14      	ite	ne
 801396c:	2201      	movne	r2, #1
 801396e:	2200      	moveq	r2, #0
 8013970:	3101      	adds	r1, #1
 8013972:	4410      	add	r0, r2
 8013974:	2940      	cmp	r1, #64	; 0x40
 8013976:	b2c0      	uxtb	r0, r0
 8013978:	f000 8213 	beq.w	8013da2 <MEMS_runMagCal.constprop.18+0xf3a>
 801397c:	f1a1 0220 	sub.w	r2, r1, #32
 8013980:	fa0c f202 	lsl.w	r2, ip, r2
 8013984:	291f      	cmp	r1, #31
 8013986:	fa0c f401 	lsl.w	r4, ip, r1
 801398a:	ea08 0702 	and.w	r7, r8, r2
 801398e:	ea0e 0602 	and.w	r6, lr, r2
 8013992:	d8e0      	bhi.n	8013956 <MEMS_runMagCal.constprop.18+0xaee>
 8013994:	9a00      	ldr	r2, [sp, #0]
 8013996:	ea19 0f04 	tst.w	r9, r4
 801399a:	bf18      	it	ne
 801399c:	3501      	addne	r5, #1
 801399e:	ea02 0204 	and.w	r2, r2, r4
 80139a2:	bf18      	it	ne
 80139a4:	b2ed      	uxtbne	r5, r5
 80139a6:	2a00      	cmp	r2, #0
 80139a8:	bf18      	it	ne
 80139aa:	3301      	addne	r3, #1
 80139ac:	9a02      	ldr	r2, [sp, #8]
 80139ae:	4222      	tst	r2, r4
 80139b0:	b2db      	uxtb	r3, r3
 80139b2:	bf14      	ite	ne
 80139b4:	2201      	movne	r2, #1
 80139b6:	2200      	moveq	r2, #0
 80139b8:	e7da      	b.n	8013970 <MEMS_runMagCal.constprop.18+0xb08>
 80139ba:	bf00      	nop
 80139bc:	3c23d70a 	.word	0x3c23d70a
 80139c0:	3a83126f 	.word	0x3a83126f
 80139c4:	3f666666 	.word	0x3f666666
 80139c8:	4952f000 	.word	0x4952f000
 80139cc:	4828c000 	.word	0x4828c000
 80139d0:	43480000 	.word	0x43480000
 80139d4:	f8db 20f8 	ldr.w	r2, [fp, #248]	; 0xf8
 80139d8:	9207      	str	r2, [sp, #28]
 80139da:	9a03      	ldr	r2, [sp, #12]
 80139dc:	f04f 0e01 	mov.w	lr, #1
 80139e0:	fa0e fe02 	lsl.w	lr, lr, r2
 80139e4:	9a07      	ldr	r2, [sp, #28]
 80139e6:	ea1e 0f02 	tst.w	lr, r2
 80139ea:	f47f af6c 	bne.w	80138c6 <MEMS_runMagCal.constprop.18+0xa5e>
 80139ee:	f99b 20e2 	ldrsb.w	r2, [fp, #226]	; 0xe2
 80139f2:	f89b c0e1 	ldrb.w	ip, [fp, #225]	; 0xe1
 80139f6:	3201      	adds	r2, #1
 80139f8:	9207      	str	r2, [sp, #28]
 80139fa:	2900      	cmp	r1, #0
 80139fc:	d153      	bne.n	8013aa6 <MEMS_runMagCal.constprop.18+0xc3e>
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d151      	bne.n	8013aa6 <MEMS_runMagCal.constprop.18+0xc3e>
 8013a02:	fb92 f3fc 	sdiv	r3, r2, ip
 8013a06:	9806      	ldr	r0, [sp, #24]
 8013a08:	f8bb e002 	ldrh.w	lr, [fp, #2]
 8013a0c:	f8ab 5358 	strh.w	r5, [fp, #856]	; 0x358
 8013a10:	fb0c 2213 	mls	r2, ip, r3, r2
 8013a14:	f8db 30e4 	ldr.w	r3, [fp, #228]	; 0xe4
 8013a18:	f8ab 635a 	strh.w	r6, [fp, #858]	; 0x35a
 8013a1c:	b251      	sxtb	r1, r2
 8013a1e:	f109 0201 	add.w	r2, r9, #1
 8013a22:	4562      	cmp	r2, ip
 8013a24:	eba0 0303 	sub.w	r3, r0, r3
 8013a28:	bfa8      	it	ge
 8013a2a:	4662      	movge	r2, ip
 8013a2c:	fb1e 3004 	smlabb	r0, lr, r4, r3
 8013a30:	1d0b      	adds	r3, r1, #4
 8013a32:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013a36:	b2d2      	uxtb	r2, r2
 8013a38:	4562      	cmp	r2, ip
 8013a3a:	f88b 20e0 	strb.w	r2, [fp, #224]	; 0xe0
 8013a3e:	f8ab 735c 	strh.w	r7, [fp, #860]	; 0x35c
 8013a42:	f88b 10e2 	strb.w	r1, [fp, #226]	; 0xe2
 8013a46:	f8a3 50e2 	strh.w	r5, [r3, #226]	; 0xe2
 8013a4a:	f8a3 60e4 	strh.w	r6, [r3, #228]	; 0xe4
 8013a4e:	f8a3 70e6 	strh.w	r7, [r3, #230]	; 0xe6
 8013a52:	f8a3 00e0 	strh.w	r0, [r3, #224]	; 0xe0
 8013a56:	f001 82ae 	beq.w	8014fb6 <MEMS_runMagCal.constprop.18+0x214e>
 8013a5a:	9b01      	ldr	r3, [sp, #4]
 8013a5c:	2b1f      	cmp	r3, #31
 8013a5e:	f240 8195 	bls.w	8013d8c <MEMS_runMagCal.constprop.18+0xf24>
 8013a62:	f8db 20e8 	ldr.w	r2, [fp, #232]	; 0xe8
 8013a66:	3b20      	subs	r3, #32
 8013a68:	2101      	movs	r1, #1
 8013a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8013a6e:	ea23 0302 	bic.w	r3, r3, r2
 8013a72:	4053      	eors	r3, r2
 8013a74:	f8cb 30e8 	str.w	r3, [fp, #232]	; 0xe8
 8013a78:	9b02      	ldr	r3, [sp, #8]
 8013a7a:	2b1f      	cmp	r3, #31
 8013a7c:	f240 817b 	bls.w	8013d76 <MEMS_runMagCal.constprop.18+0xf0e>
 8013a80:	f8db 20f0 	ldr.w	r2, [fp, #240]	; 0xf0
 8013a84:	3b20      	subs	r3, #32
 8013a86:	2101      	movs	r1, #1
 8013a88:	fa01 f303 	lsl.w	r3, r1, r3
 8013a8c:	ea23 0302 	bic.w	r3, r3, r2
 8013a90:	4053      	eors	r3, r2
 8013a92:	f8cb 30f0 	str.w	r3, [fp, #240]	; 0xf0
 8013a96:	9b03      	ldr	r3, [sp, #12]
 8013a98:	e0ca      	b.n	8013c30 <MEMS_runMagCal.constprop.18+0xdc8>
 8013a9a:	f99b 20e2 	ldrsb.w	r2, [fp, #226]	; 0xe2
 8013a9e:	f89b c0e1 	ldrb.w	ip, [fp, #225]	; 0xe1
 8013aa2:	1c53      	adds	r3, r2, #1
 8013aa4:	9307      	str	r3, [sp, #28]
 8013aa6:	45e1      	cmp	r9, ip
 8013aa8:	9b07      	ldr	r3, [sp, #28]
 8013aaa:	f000 813c 	beq.w	8013d26 <MEMS_runMagCal.constprop.18+0xebe>
 8013aae:	eba3 0209 	sub.w	r2, r3, r9
 8013ab2:	fb92 f3fc 	sdiv	r3, r2, ip
 8013ab6:	fb0c 2313 	mls	r3, ip, r3, r2
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	fa0f fe83 	sxth.w	lr, r3
 8013ac0:	bfbc      	itt	lt
 8013ac2:	4463      	addlt	r3, ip
 8013ac4:	fa0f fe83 	sxthlt.w	lr, r3
 8013ac8:	2200      	movs	r2, #0
 8013aca:	eb0e 0102 	add.w	r1, lr, r2
 8013ace:	fb91 f3fc 	sdiv	r3, r1, ip
 8013ad2:	fb0c 1313 	mls	r3, ip, r3, r1
 8013ad6:	b2db      	uxtb	r3, r3
 8013ad8:	3304      	adds	r3, #4
 8013ada:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013ade:	3201      	adds	r2, #1
 8013ae0:	f9b3 00e2 	ldrsh.w	r0, [r3, #226]	; 0xe2
 8013ae4:	f9b3 10e4 	ldrsh.w	r1, [r3, #228]	; 0xe4
 8013ae8:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	; 0xe6
 8013aec:	1a28      	subs	r0, r5, r0
 8013aee:	1a71      	subs	r1, r6, r1
 8013af0:	ee06 0a90 	vmov	s13, r0
 8013af4:	ee07 1a10 	vmov	s14, r1
 8013af8:	1afb      	subs	r3, r7, r3
 8013afa:	ee07 3a90 	vmov	s15, r3
 8013afe:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013b02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013b06:	eef0 6ae6 	vabs.f32	s13, s13
 8013b0a:	eeb0 7ac7 	vabs.f32	s14, s14
 8013b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b12:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013b16:	eef0 7ae7 	vabs.f32	s15, s15
 8013b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b1e:	b2d3      	uxtb	r3, r2
 8013b20:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b28:	f73f aed1 	bgt.w	80138ce <MEMS_runMagCal.constprop.18+0xa66>
 8013b2c:	4599      	cmp	r9, r3
 8013b2e:	d8cc      	bhi.n	8013aca <MEMS_runMagCal.constprop.18+0xc62>
 8013b30:	9a07      	ldr	r2, [sp, #28]
 8013b32:	e766      	b.n	8013a02 <MEMS_runMagCal.constprop.18+0xb9a>
 8013b34:	f8db 20e4 	ldr.w	r2, [fp, #228]	; 0xe4
 8013b38:	f88b 90e2 	strb.w	r9, [fp, #226]	; 0xe2
 8013b3c:	f04f 0101 	mov.w	r1, #1
 8013b40:	f88b 10e0 	strb.w	r1, [fp, #224]	; 0xe0
 8013b44:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013b48:	2a00      	cmp	r2, #0
 8013b4a:	f040 80c5 	bne.w	8013cd8 <MEMS_runMagCal.constprop.18+0xe70>
 8013b4e:	9806      	ldr	r0, [sp, #24]
 8013b50:	fb03 0301 	mla	r3, r3, r1, r0
 8013b54:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 8013b58:	fb95 f3f8 	sdiv	r3, r5, r8
 8013b5c:	fb08 5313 	mls	r3, r8, r3, r5
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	bfb8      	it	lt
 8013b64:	4443      	addlt	r3, r8
 8013b66:	b21b      	sxth	r3, r3
 8013b68:	ee00 3a10 	vmov	s0, r3
 8013b6c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013b70:	f8ab 2100 	strh.w	r2, [fp, #256]	; 0x100
 8013b74:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013b78:	f8ab 5102 	strh.w	r5, [fp, #258]	; 0x102
 8013b7c:	f8ab 5358 	strh.w	r5, [fp, #856]	; 0x358
 8013b80:	f8ab 6104 	strh.w	r6, [fp, #260]	; 0x104
 8013b84:	f8ab 635a 	strh.w	r6, [fp, #858]	; 0x35a
 8013b88:	f8ab 7106 	strh.w	r7, [fp, #262]	; 0x106
 8013b8c:	f8ab 735c 	strh.w	r7, [fp, #860]	; 0x35c
 8013b90:	f006 f984 	bl	8019e9c <roundf>
 8013b94:	fb96 f3f8 	sdiv	r3, r6, r8
 8013b98:	fb08 6613 	mls	r6, r8, r3, r6
 8013b9c:	2e00      	cmp	r6, #0
 8013b9e:	bfb8      	it	lt
 8013ba0:	4446      	addlt	r6, r8
 8013ba2:	b233      	sxth	r3, r6
 8013ba4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013ba8:	ee00 3a10 	vmov	s0, r3
 8013bac:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013bb0:	edcd 7a01 	vstr	s15, [sp, #4]
 8013bb4:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013bb8:	f006 f970 	bl	8019e9c <roundf>
 8013bbc:	fb97 f3f8 	sdiv	r3, r7, r8
 8013bc0:	fb08 7713 	mls	r7, r8, r3, r7
 8013bc4:	2f00      	cmp	r7, #0
 8013bc6:	bfb8      	it	lt
 8013bc8:	4447      	addlt	r7, r8
 8013bca:	b23b      	sxth	r3, r7
 8013bcc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013bd0:	ee00 3a10 	vmov	s0, r3
 8013bd4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013bd8:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8013bdc:	edcd 7a01 	vstr	s15, [sp, #4]
 8013be0:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013be4:	f006 f95a 	bl	8019e9c <roundf>
 8013be8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013bec:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8013bf0:	edcd 7a01 	vstr	s15, [sp, #4]
 8013bf4:	2d1f      	cmp	r5, #31
 8013bf6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013bfa:	d97e      	bls.n	8013cfa <MEMS_runMagCal.constprop.18+0xe92>
 8013bfc:	f8db 10e8 	ldr.w	r1, [fp, #232]	; 0xe8
 8013c00:	f1a5 0220 	sub.w	r2, r5, #32
 8013c04:	2001      	movs	r0, #1
 8013c06:	fa00 f202 	lsl.w	r2, r0, r2
 8013c0a:	ea22 0201 	bic.w	r2, r2, r1
 8013c0e:	404a      	eors	r2, r1
 8013c10:	f8cb 20e8 	str.w	r2, [fp, #232]	; 0xe8
 8013c14:	2e1f      	cmp	r6, #31
 8013c16:	d966      	bls.n	8013ce6 <MEMS_runMagCal.constprop.18+0xe7e>
 8013c18:	f8db 10f0 	ldr.w	r1, [fp, #240]	; 0xf0
 8013c1c:	f1a6 0220 	sub.w	r2, r6, #32
 8013c20:	2001      	movs	r0, #1
 8013c22:	fa00 f202 	lsl.w	r2, r0, r2
 8013c26:	ea22 0201 	bic.w	r2, r2, r1
 8013c2a:	404a      	eors	r2, r1
 8013c2c:	f8cb 20f0 	str.w	r2, [fp, #240]	; 0xf0
 8013c30:	2b1f      	cmp	r3, #31
 8013c32:	d90c      	bls.n	8013c4e <MEMS_runMagCal.constprop.18+0xde6>
 8013c34:	f8db 20fc 	ldr.w	r2, [fp, #252]	; 0xfc
 8013c38:	2101      	movs	r1, #1
 8013c3a:	3b20      	subs	r3, #32
 8013c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8013c40:	ea23 0302 	bic.w	r3, r3, r2
 8013c44:	4053      	eors	r3, r2
 8013c46:	f8cb 30fc 	str.w	r3, [fp, #252]	; 0xfc
 8013c4a:	9104      	str	r1, [sp, #16]
 8013c4c:	e63f      	b.n	80138ce <MEMS_runMagCal.constprop.18+0xa66>
 8013c4e:	f8db 20f8 	ldr.w	r2, [fp, #248]	; 0xf8
 8013c52:	2101      	movs	r1, #1
 8013c54:	fa01 f303 	lsl.w	r3, r1, r3
 8013c58:	ea23 0302 	bic.w	r3, r3, r2
 8013c5c:	4053      	eors	r3, r2
 8013c5e:	f8cb 30f8 	str.w	r3, [fp, #248]	; 0xf8
 8013c62:	9104      	str	r1, [sp, #16]
 8013c64:	e633      	b.n	80138ce <MEMS_runMagCal.constprop.18+0xa66>
 8013c66:	4602      	mov	r2, r0
 8013c68:	2001      	movs	r0, #1
 8013c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8013c6e:	421a      	tst	r2, r3
 8013c70:	bf14      	ite	ne
 8013c72:	4603      	movne	r3, r0
 8013c74:	2300      	moveq	r3, #0
 8013c76:	e613      	b.n	80138a0 <MEMS_runMagCal.constprop.18+0xa38>
 8013c78:	460a      	mov	r2, r1
 8013c7a:	2101      	movs	r1, #1
 8013c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8013c80:	421a      	tst	r2, r3
 8013c82:	bf08      	it	eq
 8013c84:	2100      	moveq	r1, #0
 8013c86:	e5fa      	b.n	801387e <MEMS_runMagCal.constprop.18+0xa16>
 8013c88:	ee07 3a90 	vmov	s15, r3
 8013c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c90:	ed1f 7ab3 	vldr	s14, [pc, #-716]	; 80139c8 <MEMS_runMagCal.constprop.18+0xb60>
 8013c94:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ca8:	dc31      	bgt.n	8013d0e <MEMS_runMagCal.constprop.18+0xea6>
 8013caa:	ed1f 7ab8 	vldr	s14, [pc, #-736]	; 80139cc <MEMS_runMagCal.constprop.18+0xb64>
 8013cae:	f89b 80a4 	ldrb.w	r8, [fp, #164]	; 0xa4
 8013cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cba:	f341 8161 	ble.w	8014f80 <MEMS_runMagCal.constprop.18+0x2118>
 8013cbe:	f118 0800 	adds.w	r8, r8, #0
 8013cc2:	bf18      	it	ne
 8013cc4:	f04f 0801 	movne.w	r8, #1
 8013cc8:	f88b 80a4 	strb.w	r8, [fp, #164]	; 0xa4
 8013ccc:	f7ff bbc0 	b.w	8013450 <MEMS_runMagCal.constprop.18+0x5e8>
 8013cd0:	2500      	movs	r5, #0
 8013cd2:	462a      	mov	r2, r5
 8013cd4:	f7ff bb8a 	b.w	80133ec <MEMS_runMagCal.constprop.18+0x584>
 8013cd8:	9b06      	ldr	r3, [sp, #24]
 8013cda:	fb11 f104 	smulbb	r1, r1, r4
 8013cde:	1a9a      	subs	r2, r3, r2
 8013ce0:	440a      	add	r2, r1
 8013ce2:	b212      	sxth	r2, r2
 8013ce4:	e738      	b.n	8013b58 <MEMS_runMagCal.constprop.18+0xcf0>
 8013ce6:	f8db 10f4 	ldr.w	r1, [fp, #244]	; 0xf4
 8013cea:	2201      	movs	r2, #1
 8013cec:	40b2      	lsls	r2, r6
 8013cee:	ea22 0201 	bic.w	r2, r2, r1
 8013cf2:	404a      	eors	r2, r1
 8013cf4:	f8cb 20f4 	str.w	r2, [fp, #244]	; 0xf4
 8013cf8:	e79a      	b.n	8013c30 <MEMS_runMagCal.constprop.18+0xdc8>
 8013cfa:	f8db 10ec 	ldr.w	r1, [fp, #236]	; 0xec
 8013cfe:	2201      	movs	r2, #1
 8013d00:	40aa      	lsls	r2, r5
 8013d02:	ea22 0201 	bic.w	r2, r2, r1
 8013d06:	404a      	eors	r2, r1
 8013d08:	f8cb 20ec 	str.w	r2, [fp, #236]	; 0xec
 8013d0c:	e782      	b.n	8013c14 <MEMS_runMagCal.constprop.18+0xdac>
 8013d0e:	f04f 0800 	mov.w	r8, #0
 8013d12:	f88b 80a4 	strb.w	r8, [fp, #164]	; 0xa4
 8013d16:	f7ff bb9b 	b.w	8013450 <MEMS_runMagCal.constprop.18+0x5e8>
 8013d1a:	fb92 f7f5 	sdiv	r7, r2, r5
 8013d1e:	fb05 2217 	mls	r2, r5, r7, r2
 8013d22:	b217      	sxth	r7, r2
 8013d24:	e466      	b.n	80135f4 <MEMS_runMagCal.constprop.18+0x78c>
 8013d26:	fb93 fef9 	sdiv	lr, r3, r9
 8013d2a:	fb09 3e1e 	mls	lr, r9, lr, r3
 8013d2e:	fa0f fe8e 	sxth.w	lr, lr
 8013d32:	e6c9      	b.n	8013ac8 <MEMS_runMagCal.constprop.18+0xc60>
 8013d34:	f04f 0e01 	mov.w	lr, #1
 8013d38:	e468      	b.n	801360c <MEMS_runMagCal.constprop.18+0x7a4>
 8013d3a:	f99b 3366 	ldrsb.w	r3, [fp, #870]	; 0x366
 8013d3e:	3301      	adds	r3, #1
 8013d40:	fb93 f7f6 	sdiv	r7, r3, r6
 8013d44:	fb06 3317 	mls	r3, r6, r7, r3
 8013d48:	b29f      	uxth	r7, r3
 8013d4a:	f7ff bb89 	b.w	8013460 <MEMS_runMagCal.constprop.18+0x5f8>
 8013d4e:	ed5f 7ae0 	vldr	s15, [pc, #-896]	; 80139d0 <MEMS_runMagCal.constprop.18+0xb68>
 8013d52:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8013d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d5a:	f77f ab19 	ble.w	8013390 <MEMS_runMagCal.constprop.18+0x528>
 8013d5e:	2201      	movs	r2, #1
 8013d60:	2300      	movs	r3, #0
 8013d62:	f88b 20a4 	strb.w	r2, [fp, #164]	; 0xa4
 8013d66:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
 8013d6a:	f7ff bb11 	b.w	8013390 <MEMS_runMagCal.constprop.18+0x528>
 8013d6e:	2300      	movs	r3, #0
 8013d70:	9300      	str	r3, [sp, #0]
 8013d72:	f7ff ba39 	b.w	80131e8 <MEMS_runMagCal.constprop.18+0x380>
 8013d76:	f8db 20f4 	ldr.w	r2, [fp, #244]	; 0xf4
 8013d7a:	2101      	movs	r1, #1
 8013d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8013d80:	ea23 0302 	bic.w	r3, r3, r2
 8013d84:	4053      	eors	r3, r2
 8013d86:	f8cb 30f4 	str.w	r3, [fp, #244]	; 0xf4
 8013d8a:	e684      	b.n	8013a96 <MEMS_runMagCal.constprop.18+0xc2e>
 8013d8c:	f8db 20ec 	ldr.w	r2, [fp, #236]	; 0xec
 8013d90:	2101      	movs	r1, #1
 8013d92:	fa01 f303 	lsl.w	r3, r1, r3
 8013d96:	ea23 0302 	bic.w	r3, r3, r2
 8013d9a:	4053      	eors	r3, r2
 8013d9c:	f8cb 30ec 	str.w	r3, [fp, #236]	; 0xec
 8013da0:	e66a      	b.n	8013a78 <MEMS_runMagCal.constprop.18+0xc10>
 8013da2:	2d05      	cmp	r5, #5
 8013da4:	f241 80fd 	bls.w	8014fa2 <MEMS_runMagCal.constprop.18+0x213a>
 8013da8:	2b05      	cmp	r3, #5
 8013daa:	f241 80fa 	bls.w	8014fa2 <MEMS_runMagCal.constprop.18+0x213a>
 8013dae:	2805      	cmp	r0, #5
 8013db0:	f241 80f7 	bls.w	8014fa2 <MEMS_runMagCal.constprop.18+0x213a>
 8013db4:	f89b 40e1 	ldrb.w	r4, [fp, #225]	; 0xe1
 8013db8:	9a03      	ldr	r2, [sp, #12]
 8013dba:	f99b 30e2 	ldrsb.w	r3, [fp, #226]	; 0xe2
 8013dbe:	9300      	str	r3, [sp, #0]
 8013dc0:	42a2      	cmp	r2, r4
 8013dc2:	f103 0301 	add.w	r3, r3, #1
 8013dc6:	f001 812b 	beq.w	8015020 <MEMS_runMagCal.constprop.18+0x21b8>
 8013dca:	1a9a      	subs	r2, r3, r2
 8013dcc:	fb92 f3f4 	sdiv	r3, r2, r4
 8013dd0:	fb04 2313 	mls	r3, r4, r3, r2
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	b21d      	sxth	r5, r3
 8013dd8:	bfbc      	itt	lt
 8013dda:	191b      	addlt	r3, r3, r4
 8013ddc:	b21d      	sxthlt	r5, r3
 8013dde:	f105 031d 	add.w	r3, r5, #29
 8013de2:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013de6:	2600      	movs	r6, #0
 8013de8:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 8013dec:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8013df0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8013df4:	4689      	mov	r9, r1
 8013df6:	4694      	mov	ip, r2
 8013df8:	461f      	mov	r7, r3
 8013dfa:	eb05 0e06 	add.w	lr, r5, r6
 8013dfe:	fb9e f0f4 	sdiv	r0, lr, r4
 8013e02:	fb04 e010 	mls	r0, r4, r0, lr
 8013e06:	b2c0      	uxtb	r0, r0
 8013e08:	301d      	adds	r0, #29
 8013e0a:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8013e0e:	3601      	adds	r6, #1
 8013e10:	f9b0 801a 	ldrsh.w	r8, [r0, #26]
 8013e14:	f9b0 e01c 	ldrsh.w	lr, [r0, #28]
 8013e18:	f9b0 001e 	ldrsh.w	r0, [r0, #30]
 8013e1c:	4541      	cmp	r1, r8
 8013e1e:	bfb8      	it	lt
 8013e20:	4641      	movlt	r1, r8
 8013e22:	45c1      	cmp	r9, r8
 8013e24:	bfa8      	it	ge
 8013e26:	46c1      	movge	r9, r8
 8013e28:	4572      	cmp	r2, lr
 8013e2a:	bfb8      	it	lt
 8013e2c:	4672      	movlt	r2, lr
 8013e2e:	45f4      	cmp	ip, lr
 8013e30:	bfa8      	it	ge
 8013e32:	46f4      	movge	ip, lr
 8013e34:	4283      	cmp	r3, r0
 8013e36:	bfb8      	it	lt
 8013e38:	4603      	movlt	r3, r0
 8013e3a:	4287      	cmp	r7, r0
 8013e3c:	bfa8      	it	ge
 8013e3e:	4607      	movge	r7, r0
 8013e40:	9803      	ldr	r0, [sp, #12]
 8013e42:	fa5f f886 	uxtb.w	r8, r6
 8013e46:	4540      	cmp	r0, r8
 8013e48:	d8d7      	bhi.n	8013dfa <MEMS_runMagCal.constprop.18+0xf92>
 8013e4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013e4e:	ee87 8aa8 	vdiv.f32	s16, s15, s17
 8013e52:	f89b 0024 	ldrb.w	r0, [fp, #36]	; 0x24
 8013e56:	eba1 0109 	sub.w	r1, r1, r9
 8013e5a:	eba2 020c 	sub.w	r2, r2, ip
 8013e5e:	1bdb      	subs	r3, r3, r7
 8013e60:	b209      	sxth	r1, r1
 8013e62:	b212      	sxth	r2, r2
 8013e64:	b21b      	sxth	r3, r3
 8013e66:	ed9f 6ae1 	vldr	s12, [pc, #900]	; 80141ec <MEMS_runMagCal.constprop.18+0x1384>
 8013e6a:	ee28 6a06 	vmul.f32	s12, s16, s12
 8013e6e:	2800      	cmp	r0, #0
 8013e70:	f041 80d3 	bne.w	801501a <MEMS_runMagCal.constprop.18+0x21b2>
 8013e74:	f89b 00a4 	ldrb.w	r0, [fp, #164]	; 0xa4
 8013e78:	fab0 f080 	clz	r0, r0
 8013e7c:	0940      	lsrs	r0, r0, #5
 8013e7e:	ee07 1a90 	vmov	s15, r1
 8013e82:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8013e86:	ee66 6a26 	vmul.f32	s13, s12, s13
 8013e8a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8013e8e:	eef4 5ae6 	vcmpe.f32	s11, s13
 8013e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e96:	f301 80a3 	bgt.w	8014fe0 <MEMS_runMagCal.constprop.18+0x2178>
 8013e9a:	ee07 2a90 	vmov	s15, r2
 8013e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013ea2:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eaa:	f101 8099 	bmi.w	8014fe0 <MEMS_runMagCal.constprop.18+0x2178>
 8013eae:	ee07 3a90 	vmov	s15, r3
 8013eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013eb6:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ebe:	f101 808f 	bmi.w	8014fe0 <MEMS_runMagCal.constprop.18+0x2178>
 8013ec2:	2800      	cmp	r0, #0
 8013ec4:	f001 80b7 	beq.w	8015036 <MEMS_runMagCal.constprop.18+0x21ce>
 8013ec8:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8013ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ed0:	f301 80ad 	bgt.w	801502e <MEMS_runMagCal.constprop.18+0x21c6>
 8013ed4:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8013ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013edc:	f301 80a7 	bgt.w	801502e <MEMS_runMagCal.constprop.18+0x21c6>
 8013ee0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8013ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee8:	bfcc      	ite	gt
 8013eea:	f04f 0801 	movgt.w	r8, #1
 8013eee:	f04f 0800 	movle.w	r8, #0
 8013ef2:	eef7 6a02 	vmov.f32	s13, #114	; 0x3f900000  1.125
 8013ef6:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8013efa:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8013efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f02:	f301 804e 	bgt.w	8014fa2 <MEMS_runMagCal.constprop.18+0x213a>
 8013f06:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013f0a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8013f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f12:	f301 8046 	bgt.w	8014fa2 <MEMS_runMagCal.constprop.18+0x213a>
 8013f16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013f1a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8013f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f22:	f301 803e 	bgt.w	8014fa2 <MEMS_runMagCal.constprop.18+0x213a>
 8013f26:	fa4f fc85 	sxtb.w	ip, r5
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	f10c 0201 	add.w	r2, ip, #1
 8013f30:	9201      	str	r2, [sp, #4]
 8013f32:	469e      	mov	lr, r3
 8013f34:	4699      	mov	r9, r3
 8013f36:	2701      	movs	r7, #1
 8013f38:	9a01      	ldr	r2, [sp, #4]
 8013f3a:	eb0c 0103 	add.w	r1, ip, r3
 8013f3e:	441a      	add	r2, r3
 8013f40:	fb91 f3f4 	sdiv	r3, r1, r4
 8013f44:	fb04 1313 	mls	r3, r4, r3, r1
 8013f48:	b258      	sxtb	r0, r3
 8013f4a:	2800      	cmp	r0, #0
 8013f4c:	bfb8      	it	lt
 8013f4e:	191b      	addlt	r3, r3, r4
 8013f50:	fb92 f1f4 	sdiv	r1, r2, r4
 8013f54:	fb04 2111 	mls	r1, r4, r1, r2
 8013f58:	bfb8      	it	lt
 8013f5a:	b258      	sxtblt	r0, r3
 8013f5c:	b249      	sxtb	r1, r1
 8013f5e:	3104      	adds	r1, #4
 8013f60:	3004      	adds	r0, #4
 8013f62:	eb0b 03c1 	add.w	r3, fp, r1, lsl #3
 8013f66:	eb0b 02c0 	add.w	r2, fp, r0, lsl #3
 8013f6a:	f9b3 30e2 	ldrsh.w	r3, [r3, #226]	; 0xe2
 8013f6e:	f9b2 20e2 	ldrsh.w	r2, [r2, #226]	; 0xe2
 8013f72:	1a9d      	subs	r5, r3, r2
 8013f74:	2d00      	cmp	r5, #0
 8013f76:	b29b      	uxth	r3, r3
 8013f78:	b292      	uxth	r2, r2
 8013f7a:	bfb4      	ite	lt
 8013f7c:	1ad3      	sublt	r3, r2, r3
 8013f7e:	1a9b      	subge	r3, r3, r2
 8013f80:	b21e      	sxth	r6, r3
 8013f82:	eb0b 02c0 	add.w	r2, fp, r0, lsl #3
 8013f86:	eb0b 03c1 	add.w	r3, fp, r1, lsl #3
 8013f8a:	f9b2 20e4 	ldrsh.w	r2, [r2, #228]	; 0xe4
 8013f8e:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013f92:	1a9d      	subs	r5, r3, r2
 8013f94:	2d00      	cmp	r5, #0
 8013f96:	b29b      	uxth	r3, r3
 8013f98:	b292      	uxth	r2, r2
 8013f9a:	bfb4      	ite	lt
 8013f9c:	1ad3      	sublt	r3, r2, r3
 8013f9e:	1a9b      	subge	r3, r3, r2
 8013fa0:	eb0b 05c0 	add.w	r5, fp, r0, lsl #3
 8013fa4:	eb0b 02c1 	add.w	r2, fp, r1, lsl #3
 8013fa8:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8013fac:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8013fb0:	f9b2 20e6 	ldrsh.w	r2, [r2, #230]	; 0xe6
 8013fb4:	f9b5 50e6 	ldrsh.w	r5, [r5, #230]	; 0xe6
 8013fb8:	f8b1 10e0 	ldrh.w	r1, [r1, #224]	; 0xe0
 8013fbc:	f8b0 00e0 	ldrh.w	r0, [r0, #224]	; 0xe0
 8013fc0:	b21b      	sxth	r3, r3
 8013fc2:	9300      	str	r3, [sp, #0]
 8013fc4:	1a09      	subs	r1, r1, r0
 8013fc6:	1b53      	subs	r3, r2, r5
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	b292      	uxth	r2, r2
 8013fcc:	b2ad      	uxth	r5, r5
 8013fce:	b209      	sxth	r1, r1
 8013fd0:	bfb4      	ite	lt
 8013fd2:	1aaa      	sublt	r2, r5, r2
 8013fd4:	1b52      	subge	r2, r2, r5
 8013fd6:	2900      	cmp	r1, #0
 8013fd8:	b212      	sxth	r2, r2
 8013fda:	dd21      	ble.n	8014020 <MEMS_runMagCal.constprop.18+0x11b8>
 8013fdc:	9b00      	ldr	r3, [sp, #0]
 8013fde:	4433      	add	r3, r6
 8013fe0:	441a      	add	r2, r3
 8013fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013fe6:	fb03 f202 	mul.w	r2, r3, r2
 8013fea:	ee07 2a90 	vmov	s15, r2
 8013fee:	ee07 1a10 	vmov	s14, r1
 8013ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ff6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013ffa:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8013ffe:	f109 0901 	add.w	r9, r9, #1
 8014002:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8014006:	fa5f f989 	uxtb.w	r9, r9
 801400a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801400e:	ee17 3a90 	vmov	r3, s15
 8014012:	b21b      	sxth	r3, r3
 8014014:	2b64      	cmp	r3, #100	; 0x64
 8014016:	bfc4      	itt	gt
 8014018:	f10e 0e01 	addgt.w	lr, lr, #1
 801401c:	fa5f fe8e 	uxtbgt.w	lr, lr
 8014020:	463b      	mov	r3, r7
 8014022:	9903      	ldr	r1, [sp, #12]
 8014024:	3701      	adds	r7, #1
 8014026:	b2fa      	uxtb	r2, r7
 8014028:	4291      	cmp	r1, r2
 801402a:	d885      	bhi.n	8013f38 <MEMS_runMagCal.constprop.18+0x10d0>
 801402c:	ebb9 0f8e 	cmp.w	r9, lr, lsl #2
 8014030:	f280 87b7 	bge.w	8014fa2 <MEMS_runMagCal.constprop.18+0x213a>
 8014034:	f89b 30a4 	ldrb.w	r3, [fp, #164]	; 0xa4
 8014038:	3b02      	subs	r3, #2
 801403a:	2b01      	cmp	r3, #1
 801403c:	f201 8033 	bhi.w	80150a6 <MEMS_runMagCal.constprop.18+0x223e>
 8014040:	4e6b      	ldr	r6, [pc, #428]	; (80141f0 <MEMS_runMagCal.constprop.18+0x1388>)
 8014042:	2400      	movs	r4, #0
 8014044:	ad16      	add	r5, sp, #88	; 0x58
 8014046:	ecb6 0a01 	vldmia	r6!, {s0}
 801404a:	f005 ff27 	bl	8019e9c <roundf>
 801404e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014052:	ee10 3a10 	vmov	r3, s0
 8014056:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
 801405a:	3401      	adds	r4, #1
 801405c:	2c03      	cmp	r4, #3
 801405e:	d1f2      	bne.n	8014046 <MEMS_runMagCal.constprop.18+0x11de>
 8014060:	ab10      	add	r3, sp, #64	; 0x40
 8014062:	aa13      	add	r2, sp, #76	; 0x4c
 8014064:	eeb0 0a68 	vmov.f32	s0, s17
 8014068:	4962      	ldr	r1, [pc, #392]	; (80141f4 <MEMS_runMagCal.constprop.18+0x138c>)
 801406a:	4628      	mov	r0, r5
 801406c:	f7fd fca6 	bl	80119bc <getMagStats.constprop.28>
 8014070:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 8014074:	eddf 7a60 	vldr	s15, [pc, #384]	; 80141f8 <MEMS_runMagCal.constprop.18+0x1390>
 8014078:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801407c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014080:	eefc baeb 	vcvt.u32.f32	s23, s23
 8014084:	d50f      	bpl.n	80140a6 <MEMS_runMagCal.constprop.18+0x123e>
 8014086:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80141fc <MEMS_runMagCal.constprop.18+0x1394>
 801408a:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 801408e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014092:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8014096:	eef0 7ae7 	vabs.f32	s15, s15
 801409a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801409e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140a2:	f101 8005 	bmi.w	80150b0 <MEMS_runMagCal.constprop.18+0x2248>
 80140a6:	2300      	movs	r3, #0
 80140a8:	602b      	str	r3, [r5, #0]
 80140aa:	80ab      	strh	r3, [r5, #4]
 80140ac:	ae1f      	add	r6, sp, #124	; 0x7c
 80140ae:	aa0f      	add	r2, sp, #60	; 0x3c
 80140b0:	4630      	mov	r0, r6
 80140b2:	4629      	mov	r1, r5
 80140b4:	eeb0 0a68 	vmov.f32	s0, s17
 80140b8:	f7fd fd8a 	bl	8011bd0 <MEMS_solveEllipsoid.constprop.25>
 80140bc:	edcb ba28 	vstr	s23, [fp, #160]	; 0xa0
 80140c0:	2800      	cmp	r0, #0
 80140c2:	f000 876e 	beq.w	8014fa2 <MEMS_runMagCal.constprop.18+0x213a>
 80140c6:	eeb0 0a68 	vmov.f32	s0, s17
 80140ca:	ab10      	add	r3, sp, #64	; 0x40
 80140cc:	aa13      	add	r2, sp, #76	; 0x4c
 80140ce:	4631      	mov	r1, r6
 80140d0:	4628      	mov	r0, r5
 80140d2:	f7fd fc73 	bl	80119bc <getMagStats.constprop.28>
 80140d6:	bb78      	cbnz	r0, 8014138 <MEMS_runMagCal.constprop.18+0x12d0>
 80140d8:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 80140dc:	ed9f 6a47 	vldr	s12, [pc, #284]	; 80141fc <MEMS_runMagCal.constprop.18+0x1394>
 80140e0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8014200 <MEMS_runMagCal.constprop.18+0x1398>
 80140e4:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80140e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80140ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140f0:	eef0 7ae7 	vabs.f32	s15, s15
 80140f4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80140f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140fc:	d51c      	bpl.n	8014138 <MEMS_runMagCal.constprop.18+0x12d0>
 80140fe:	eddf 6a41 	vldr	s13, [pc, #260]	; 8014204 <MEMS_runMagCal.constprop.18+0x139c>
 8014102:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801410a:	dd15      	ble.n	8014138 <MEMS_runMagCal.constprop.18+0x12d0>
 801410c:	4633      	mov	r3, r6
 801410e:	ed93 6a00 	vldr	s12, [r3]
 8014112:	edd3 6a01 	vldr	s13, [r3, #4]
 8014116:	edd3 7a02 	vldr	s15, [r3, #8]
 801411a:	ee26 6a07 	vmul.f32	s12, s12, s14
 801411e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8014122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014126:	ed83 6a00 	vstr	s12, [r3]
 801412a:	edc3 6a01 	vstr	s13, [r3, #4]
 801412e:	edc3 7a02 	vstr	s15, [r3, #8]
 8014132:	330c      	adds	r3, #12
 8014134:	459a      	cmp	sl, r3
 8014136:	d1ea      	bne.n	801410e <MEMS_runMagCal.constprop.18+0x12a6>
 8014138:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
 801413c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8014208 <MEMS_runMagCal.constprop.18+0x13a0>
 8014140:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 8014144:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8014148:	005b      	lsls	r3, r3, #1
 801414a:	ee07 3a90 	vmov	s15, r3
 801414e:	ee06 0a90 	vmov	s13, r0
 8014152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014156:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801415a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801415e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014166:	f300 87ae 	bgt.w	80150c6 <MEMS_runMagCal.constprop.18+0x225e>
 801416a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 801416e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014176:	f341 85cd 	ble.w	8015d14 <MEMS_runMagCal.constprop.18+0x2eac>
 801417a:	f89b 7024 	ldrb.w	r7, [fp, #36]	; 0x24
 801417e:	fab7 f787 	clz	r7, r7
 8014182:	097f      	lsrs	r7, r7, #5
 8014184:	ed96 6a04 	vldr	s12, [r6, #16]
 8014188:	edd6 8a00 	vldr	s17, [r6]
 801418c:	edd6 6a08 	vldr	s13, [r6, #32]
 8014190:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
 8014194:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801420c <MEMS_runMagCal.constprop.18+0x13a4>
 8014198:	ed96 aa03 	vldr	s20, [r6, #12]
 801419c:	edd6 9a06 	vldr	s19, [r6, #24]
 80141a0:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 80141a4:	9300      	str	r3, [sp, #0]
 80141a6:	ee78 8a86 	vadd.f32	s17, s17, s12
 80141aa:	ee28 7a07 	vmul.f32	s14, s16, s14
 80141ae:	ee78 8aa6 	vadd.f32	s17, s17, s13
 80141b2:	ee87 0a00 	vdiv.f32	s0, s14, s0
 80141b6:	9319      	str	r3, [sp, #100]	; 0x64
 80141b8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80141bc:	ed96 9a07 	vldr	s18, [r6, #28]
 80141c0:	f005 fe6c 	bl	8019e9c <roundf>
 80141c4:	eeb0 7ae9 	vabs.f32	s14, s19
 80141c8:	eef0 7aca 	vabs.f32	s15, s20
 80141cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80141d0:	eeb0 7ac9 	vabs.f32	s14, s18
 80141d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80141d8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8014210 <MEMS_runMagCal.constprop.18+0x13a8>
 80141dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80141e0:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 80141e4:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 80141e8:	e016      	b.n	8014218 <MEMS_runMagCal.constprop.18+0x13b0>
 80141ea:	bf00      	nop
 80141ec:	42340000 	.word	0x42340000
 80141f0:	200017b0 	.word	0x200017b0
 80141f4:	200017bc 	.word	0x200017bc
 80141f8:	3fd9999a 	.word	0x3fd9999a
 80141fc:	423c0000 	.word	0x423c0000
 8014200:	3eb33333 	.word	0x3eb33333
 8014204:	3dcccccd 	.word	0x3dcccccd
 8014208:	3c23d70a 	.word	0x3c23d70a
 801420c:	3eaaaaab 	.word	0x3eaaaaab
 8014210:	42055556 	.word	0x42055556
 8014214:	447a0000 	.word	0x447a0000
 8014218:	ee17 3a10 	vmov	r3, s14
 801421c:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8014220:	f005 fe3c 	bl	8019e9c <roundf>
 8014224:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8014228:	ed1f 6a06 	vldr	s12, [pc, #-24]	; 8014214 <MEMS_runMagCal.constprop.18+0x13ac>
 801422c:	ee17 1a90 	vmov	r1, s15
 8014230:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8014234:	2300      	movs	r3, #0
 8014236:	f88d 1069 	strb.w	r1, [sp, #105]	; 0x69
 801423a:	eb06 1103 	add.w	r1, r6, r3, lsl #4
 801423e:	edd1 7a00 	vldr	s15, [r1]
 8014242:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 8014246:	f822 1c04 	strh.w	r1, [r2, #-4]
 801424a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801424e:	3301      	adds	r3, #1
 8014250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014254:	2b03      	cmp	r3, #3
 8014256:	ee17 1a90 	vmov	r1, s15
 801425a:	f822 1f02 	strh.w	r1, [r2, #2]!
 801425e:	d1ec      	bne.n	801423a <MEMS_runMagCal.constprop.18+0x13d2>
 8014260:	ee6a 6a06 	vmul.f32	s13, s20, s12
 8014264:	ee29 7a86 	vmul.f32	s14, s19, s12
 8014268:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801426c:	ee69 7a06 	vmul.f32	s15, s18, s12
 8014270:	ee16 3a90 	vmov	r3, s13
 8014274:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014278:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
 801427c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014280:	ee17 3a10 	vmov	r3, s14
 8014284:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
 8014288:	ee17 3a90 	vmov	r3, s15
 801428c:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
 8014290:	f1b8 0f00 	cmp.w	r8, #0
 8014294:	d00b      	beq.n	80142ae <MEMS_runMagCal.constprop.18+0x1446>
 8014296:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 801429a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801429e:	f005 fdfd 	bl	8019e9c <roundf>
 80142a2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80142a6:	ee17 3a90 	vmov	r3, s15
 80142aa:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80142ae:	2300      	movs	r3, #0
 80142b0:	f88b 30dc 	strb.w	r3, [fp, #220]	; 0xdc
 80142b4:	2f00      	cmp	r7, #0
 80142b6:	f43f a844 	beq.w	8013342 <MEMS_runMagCal.constprop.18+0x4da>
 80142ba:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 80142be:	eddb ba01 	vldr	s23, [fp, #4]
 80142c2:	f89b 4024 	ldrb.w	r4, [fp, #36]	; 0x24
 80142c6:	ee05 3a90 	vmov	s11, r3
 80142ca:	eeb8 eae5 	vcvt.f32.s32	s28, s11
 80142ce:	ee2e 6a2b 	vmul.f32	s12, s28, s23
 80142d2:	2c00      	cmp	r4, #0
 80142d4:	f040 86fa 	bne.w	80150cc <MEMS_runMagCal.constprop.18+0x2264>
 80142d8:	eeb4 bac6 	vcmpe.f32	s22, s12
 80142dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142e0:	d503      	bpl.n	80142ea <MEMS_runMagCal.constprop.18+0x1482>
 80142e2:	9b05      	ldr	r3, [sp, #20]
 80142e4:	2b09      	cmp	r3, #9
 80142e6:	f67f a82c 	bls.w	8013342 <MEMS_runMagCal.constprop.18+0x4da>
 80142ea:	f8db 30d8 	ldr.w	r3, [fp, #216]	; 0xd8
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	f040 86ec 	bne.w	80150cc <MEMS_runMagCal.constprop.18+0x2264>
 80142f4:	ac19      	add	r4, sp, #100	; 0x64
 80142f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80142f8:	4feb      	ldr	r7, [pc, #940]	; (80146a8 <MEMS_runMagCal.constprop.18+0x1840>)
 80142fa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80142fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014300:	e887 0003 	stmia.w	r7, {r0, r1}
 8014304:	2401      	movs	r4, #1
 8014306:	f88b 4024 	strb.w	r4, [fp, #36]	; 0x24
 801430a:	2300      	movs	r3, #0
 801430c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8014310:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8014314:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8014318:	e9c5 3300 	strd	r3, r3, [r5]
 801431c:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
 8014320:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 8014324:	9320      	str	r3, [sp, #128]	; 0x80
 8014326:	60ab      	str	r3, [r5, #8]
 8014328:	f89b 202c 	ldrb.w	r2, [fp, #44]	; 0x2c
 801432c:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 8014330:	ee07 2a10 	vmov	s14, r2
 8014334:	9a00      	ldr	r2, [sp, #0]
 8014336:	1ad3      	subs	r3, r2, r3
 8014338:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 801433c:	f0c1 81f1 	bcc.w	8015722 <MEMS_runMagCal.constprop.18+0x28ba>
 8014340:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8014344:	f081 81d6 	bcs.w	80156f4 <MEMS_runMagCal.constprop.18+0x288c>
 8014348:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801434c:	ee07 3a90 	vmov	s15, r3
 8014350:	ed9f 6ad6 	vldr	s12, [pc, #856]	; 80146ac <MEMS_runMagCal.constprop.18+0x1844>
 8014354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014358:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801435c:	eee7 6ac6 	vfms.f32	s13, s15, s12
 8014360:	eef0 7a66 	vmov.f32	s15, s13
 8014364:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8014368:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801436c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014370:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014374:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8014378:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801437c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014380:	f101 8189 	bmi.w	8015696 <MEMS_runMagCal.constprop.18+0x282e>
 8014384:	eef0 6a0c 	vmov.f32	s13, #12	; 0x40600000  3.5
 8014388:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801438c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014390:	f101 817b 	bmi.w	801568a <MEMS_runMagCal.constprop.18+0x2822>
 8014394:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8014398:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801439c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143a0:	bf44      	itt	mi
 80143a2:	eeb7 7a00 	vmovmi.f32	s14, #112	; 0x3f800000  1.0
 80143a6:	ee77 7a87 	vaddmi.f32	s15, s15, s14
 80143aa:	2c01      	cmp	r4, #1
 80143ac:	edc6 7a00 	vstr	s15, [r6]
 80143b0:	f240 8158 	bls.w	8014664 <MEMS_runMagCal.constprop.18+0x17fc>
 80143b4:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
 80143b8:	9900      	ldr	r1, [sp, #0]
 80143ba:	f89b 2044 	ldrb.w	r2, [fp, #68]	; 0x44
 80143be:	1acb      	subs	r3, r1, r3
 80143c0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80143c4:	f0c1 8147 	bcc.w	8015656 <MEMS_runMagCal.constprop.18+0x27ee>
 80143c8:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80143cc:	f081 8423 	bcs.w	8015c16 <MEMS_runMagCal.constprop.18+0x2dae>
 80143d0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80143d4:	ee07 3a10 	vmov	s14, r3
 80143d8:	ed9f 6ab4 	vldr	s12, [pc, #720]	; 80146ac <MEMS_runMagCal.constprop.18+0x1844>
 80143dc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80143e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80143e4:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80143e8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80143ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 80143f0:	ee06 2a90 	vmov	s13, r2
 80143f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80143f8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80143fc:	ee66 6aab 	vmul.f32	s13, s13, s23
 8014400:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014408:	f101 811f 	bmi.w	801564a <MEMS_runMagCal.constprop.18+0x27e2>
 801440c:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
 8014410:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014418:	f101 83f7 	bmi.w	8015c0a <MEMS_runMagCal.constprop.18+0x2da2>
 801441c:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8014420:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014428:	bf44      	itt	mi
 801442a:	eef7 6a00 	vmovmi.f32	s13, #112	; 0x3f800000  1.0
 801442e:	ee37 7a26 	vaddmi.f32	s14, s14, s13
 8014432:	2c02      	cmp	r4, #2
 8014434:	ed86 7a01 	vstr	s14, [r6, #4]
 8014438:	ee77 7a87 	vadd.f32	s15, s15, s14
 801443c:	f000 8112 	beq.w	8014664 <MEMS_runMagCal.constprop.18+0x17fc>
 8014440:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8014444:	9900      	ldr	r1, [sp, #0]
 8014446:	f89b 205c 	ldrb.w	r2, [fp, #92]	; 0x5c
 801444a:	1acb      	subs	r3, r1, r3
 801444c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8014450:	f0c1 80f7 	bcc.w	8015642 <MEMS_runMagCal.constprop.18+0x27da>
 8014454:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8014458:	f081 83f8 	bcs.w	8015c4c <MEMS_runMagCal.constprop.18+0x2de4>
 801445c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8014460:	ee07 3a10 	vmov	s14, r3
 8014464:	ed9f 6a91 	vldr	s12, [pc, #580]	; 80146ac <MEMS_runMagCal.constprop.18+0x1844>
 8014468:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801446c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014470:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8014474:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8014478:	ee27 7a26 	vmul.f32	s14, s14, s13
 801447c:	ee06 2a90 	vmov	s13, r2
 8014480:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014484:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8014488:	ee66 6aab 	vmul.f32	s13, s13, s23
 801448c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014494:	f101 80cf 	bmi.w	8015636 <MEMS_runMagCal.constprop.18+0x27ce>
 8014498:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
 801449c:	eef4 6ac6 	vcmpe.f32	s13, s12
 80144a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144a4:	f101 83cc 	bmi.w	8015c40 <MEMS_runMagCal.constprop.18+0x2dd8>
 80144a8:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80144ac:	eef4 6ac6 	vcmpe.f32	s13, s12
 80144b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144b4:	bf44      	itt	mi
 80144b6:	eef7 6a00 	vmovmi.f32	s13, #112	; 0x3f800000  1.0
 80144ba:	ee37 7a26 	vaddmi.f32	s14, s14, s13
 80144be:	2c03      	cmp	r4, #3
 80144c0:	ed86 7a02 	vstr	s14, [r6, #8]
 80144c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80144c8:	f000 80cc 	beq.w	8014664 <MEMS_runMagCal.constprop.18+0x17fc>
 80144cc:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
 80144d0:	9900      	ldr	r1, [sp, #0]
 80144d2:	f89b 2074 	ldrb.w	r2, [fp, #116]	; 0x74
 80144d6:	1acb      	subs	r3, r1, r3
 80144d8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80144dc:	f0c1 80a7 	bcc.w	801562e <MEMS_runMagCal.constprop.18+0x27c6>
 80144e0:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80144e4:	f081 8401 	bcs.w	8015cea <MEMS_runMagCal.constprop.18+0x2e82>
 80144e8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80144ec:	ee07 3a10 	vmov	s14, r3
 80144f0:	ed9f 6a6e 	vldr	s12, [pc, #440]	; 80146ac <MEMS_runMagCal.constprop.18+0x1844>
 80144f4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80144f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80144fc:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8014500:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8014504:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014508:	ee06 2a90 	vmov	s13, r2
 801450c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014510:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8014514:	ee66 6aab 	vmul.f32	s13, s13, s23
 8014518:	eef4 6ac6 	vcmpe.f32	s13, s12
 801451c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014520:	f101 807f 	bmi.w	8015622 <MEMS_runMagCal.constprop.18+0x27ba>
 8014524:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
 8014528:	eef4 6ac6 	vcmpe.f32	s13, s12
 801452c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014530:	f101 83d5 	bmi.w	8015cde <MEMS_runMagCal.constprop.18+0x2e76>
 8014534:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8014538:	eef4 6ac6 	vcmpe.f32	s13, s12
 801453c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014540:	bf44      	itt	mi
 8014542:	eef7 6a00 	vmovmi.f32	s13, #112	; 0x3f800000  1.0
 8014546:	ee37 7a26 	vaddmi.f32	s14, s14, s13
 801454a:	2c04      	cmp	r4, #4
 801454c:	ed86 7a03 	vstr	s14, [r6, #12]
 8014550:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014554:	f000 8086 	beq.w	8014664 <MEMS_runMagCal.constprop.18+0x17fc>
 8014558:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
 801455c:	9900      	ldr	r1, [sp, #0]
 801455e:	f89b 208c 	ldrb.w	r2, [fp, #140]	; 0x8c
 8014562:	1acb      	subs	r3, r1, r3
 8014564:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8014568:	f0c1 8057 	bcc.w	801561a <MEMS_runMagCal.constprop.18+0x27b2>
 801456c:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8014570:	f081 83e6 	bcs.w	8015d40 <MEMS_runMagCal.constprop.18+0x2ed8>
 8014574:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8014578:	ee07 3a10 	vmov	s14, r3
 801457c:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 80146ac <MEMS_runMagCal.constprop.18+0x1844>
 8014580:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8014584:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014588:	eea6 7ac6 	vfms.f32	s14, s13, s12
 801458c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8014590:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014594:	ee06 2a90 	vmov	s13, r2
 8014598:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801459c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80145a0:	ee66 6aab 	vmul.f32	s13, s13, s23
 80145a4:	eef4 6ac6 	vcmpe.f32	s13, s12
 80145a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145ac:	f101 83e3 	bmi.w	8015d76 <MEMS_runMagCal.constprop.18+0x2f0e>
 80145b0:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
 80145b4:	eef4 6ac6 	vcmpe.f32	s13, s12
 80145b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145bc:	f101 83d5 	bmi.w	8015d6a <MEMS_runMagCal.constprop.18+0x2f02>
 80145c0:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80145c4:	eef4 6ac6 	vcmpe.f32	s13, s12
 80145c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145cc:	bf44      	itt	mi
 80145ce:	eef7 6a00 	vmovmi.f32	s13, #112	; 0x3f800000  1.0
 80145d2:	ee37 7a26 	vaddmi.f32	s14, s14, s13
 80145d6:	2c05      	cmp	r4, #5
 80145d8:	ed86 7a04 	vstr	s14, [r6, #16]
 80145dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80145e0:	d040      	beq.n	8014664 <MEMS_runMagCal.constprop.18+0x17fc>
 80145e2:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 80145e6:	9900      	ldr	r1, [sp, #0]
 80145e8:	f89b 20a4 	ldrb.w	r2, [fp, #164]	; 0xa4
 80145ec:	1acb      	subs	r3, r1, r3
 80145ee:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80145f2:	f0c1 8077 	bcc.w	80156e4 <MEMS_runMagCal.constprop.18+0x287c>
 80145f6:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80145fa:	f081 805e 	bcs.w	80156ba <MEMS_runMagCal.constprop.18+0x2852>
 80145fe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8014602:	ee07 3a10 	vmov	s14, r3
 8014606:	ed9f 6a29 	vldr	s12, [pc, #164]	; 80146ac <MEMS_runMagCal.constprop.18+0x1844>
 801460a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801460e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014612:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8014616:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 801461a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801461e:	ee06 2a90 	vmov	s13, r2
 8014622:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014626:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801462a:	ee66 6aab 	vmul.f32	s13, s13, s23
 801462e:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014636:	f101 803a 	bmi.w	80156ae <MEMS_runMagCal.constprop.18+0x2846>
 801463a:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
 801463e:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014646:	f101 802c 	bmi.w	80156a2 <MEMS_runMagCal.constprop.18+0x283a>
 801464a:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 801464e:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014656:	bf44      	itt	mi
 8014658:	eef7 6a00 	vmovmi.f32	s13, #112	; 0x3f800000  1.0
 801465c:	ee37 7a26 	vaddmi.f32	s14, s14, s13
 8014660:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014664:	eddf 6a12 	vldr	s13, [pc, #72]	; 80146b0 <MEMS_runMagCal.constprop.18+0x1848>
 8014668:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80146b4 <MEMS_runMagCal.constprop.18+0x184c>
 801466c:	ed96 1a00 	vldr	s2, [r6]
 8014670:	edd6 1a01 	vldr	s3, [r6, #4]
 8014674:	ed96 2a02 	vldr	s4, [r6, #8]
 8014678:	edd6 2a03 	vldr	s5, [r6, #12]
 801467c:	ed96 3a04 	vldr	s6, [r6, #16]
 8014680:	ee86 daa7 	vdiv.f32	s26, s13, s15
 8014684:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014688:	ee2d 1a01 	vmul.f32	s2, s26, s2
 801468c:	ee6d 1a21 	vmul.f32	s3, s26, s3
 8014690:	ee2d 2a02 	vmul.f32	s4, s26, s4
 8014694:	ee6d 2a22 	vmul.f32	s5, s26, s5
 8014698:	ee2d 3a03 	vmul.f32	s6, s26, s6
 801469c:	ee27 da8d 	vmul.f32	s26, s15, s26
 80146a0:	2c00      	cmp	r4, #0
 80146a2:	f001 804a 	beq.w	801573a <MEMS_runMagCal.constprop.18+0x28d2>
 80146a6:	e007      	b.n	80146b8 <MEMS_runMagCal.constprop.18+0x1850>
 80146a8:	20001730 	.word	0x20001730
 80146ac:	389ee00a 	.word	0x389ee00a
 80146b0:	3f68ba2e 	.word	0x3f68ba2e
 80146b4:	3dcccccd 	.word	0x3dcccccd
 80146b8:	f9bb 302e 	ldrsh.w	r3, [fp, #46]	; 0x2e
 80146bc:	ee03 3a90 	vmov	s7, r3
 80146c0:	f8bb 3034 	ldrh.w	r3, [fp, #52]	; 0x34
 80146c4:	ee04 3a10 	vmov	s8, r3
 80146c8:	f9bb 303a 	ldrsh.w	r3, [fp, #58]	; 0x3a
 80146cc:	ee04 3a90 	vmov	s9, r3
 80146d0:	f9bb 3030 	ldrsh.w	r3, [fp, #48]	; 0x30
 80146d4:	ee05 3a10 	vmov	s10, r3
 80146d8:	f8bb 3036 	ldrh.w	r3, [fp, #54]	; 0x36
 80146dc:	ee05 3a90 	vmov	s11, r3
 80146e0:	f9bb 303c 	ldrsh.w	r3, [fp, #60]	; 0x3c
 80146e4:	ee06 3a10 	vmov	s12, r3
 80146e8:	f9bb 3032 	ldrsh.w	r3, [fp, #50]	; 0x32
 80146ec:	ee06 3a90 	vmov	s13, r3
 80146f0:	f8bb 3038 	ldrh.w	r3, [fp, #56]	; 0x38
 80146f4:	ee07 3a10 	vmov	s14, r3
 80146f8:	f9bb 303e 	ldrsh.w	r3, [fp, #62]	; 0x3e
 80146fc:	ee07 3a90 	vmov	s15, r3
 8014700:	f89b 302c 	ldrb.w	r3, [fp, #44]	; 0x2c
 8014704:	ee0d 3a90 	vmov	s27, r3
 8014708:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801470c:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8014710:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8014714:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014718:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801471c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014720:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014724:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801472c:	eef8 daed 	vcvt.f32.s32	s27, s27
 8014730:	2c01      	cmp	r4, #1
 8014732:	ee63 3a81 	vmul.f32	s7, s7, s2
 8014736:	ee24 4a01 	vmul.f32	s8, s8, s2
 801473a:	ee64 4a81 	vmul.f32	s9, s9, s2
 801473e:	ee25 5a01 	vmul.f32	s10, s10, s2
 8014742:	ee65 5a81 	vmul.f32	s11, s11, s2
 8014746:	ee26 6a01 	vmul.f32	s12, s12, s2
 801474a:	ee66 6a81 	vmul.f32	s13, s13, s2
 801474e:	ee27 7a01 	vmul.f32	s14, s14, s2
 8014752:	ee67 7a81 	vmul.f32	s15, s15, s2
 8014756:	ee6d da81 	vmul.f32	s27, s27, s2
 801475a:	f240 819b 	bls.w	8014a94 <MEMS_runMagCal.constprop.18+0x1c2c>
 801475e:	f9bb 3046 	ldrsh.w	r3, [fp, #70]	; 0x46
 8014762:	ee00 3a90 	vmov	s1, r3
 8014766:	f8bb 304c 	ldrh.w	r3, [fp, #76]	; 0x4c
 801476a:	ee01 3a10 	vmov	s2, r3
 801476e:	f9bb 3052 	ldrsh.w	r3, [fp, #82]	; 0x52
 8014772:	ee0a 3a10 	vmov	s20, r3
 8014776:	f9bb 3048 	ldrsh.w	r3, [fp, #72]	; 0x48
 801477a:	ee09 3a90 	vmov	s19, r3
 801477e:	f8bb 304e 	ldrh.w	r3, [fp, #78]	; 0x4e
 8014782:	ee09 3a10 	vmov	s18, r3
 8014786:	f9bb 3054 	ldrsh.w	r3, [fp, #84]	; 0x54
 801478a:	ee08 3a90 	vmov	s17, r3
 801478e:	f9bb 304a 	ldrsh.w	r3, [fp, #74]	; 0x4a
 8014792:	ee08 3a10 	vmov	s16, r3
 8014796:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 801479a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801479e:	ee00 3a10 	vmov	s0, r3
 80147a2:	f9bb 3056 	ldrsh.w	r3, [fp, #86]	; 0x56
 80147a6:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80147aa:	eee0 3aa1 	vfma.f32	s7, s1, s3
 80147ae:	2c02      	cmp	r4, #2
 80147b0:	ee00 3a90 	vmov	s1, r3
 80147b4:	f89b 3044 	ldrb.w	r3, [fp, #68]	; 0x44
 80147b8:	eea1 4a21 	vfma.f32	s8, s2, s3
 80147bc:	ee01 3a10 	vmov	s2, r3
 80147c0:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 80147c4:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 80147c8:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 80147cc:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80147d0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80147d4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80147d8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80147dc:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80147e0:	eeea 4a21 	vfma.f32	s9, s20, s3
 80147e4:	eea9 5aa1 	vfma.f32	s10, s19, s3
 80147e8:	eee9 5a21 	vfma.f32	s11, s18, s3
 80147ec:	eea8 6aa1 	vfma.f32	s12, s17, s3
 80147f0:	eee8 6a21 	vfma.f32	s13, s16, s3
 80147f4:	eea0 7a21 	vfma.f32	s14, s0, s3
 80147f8:	eee0 7aa1 	vfma.f32	s15, s1, s3
 80147fc:	eee1 da21 	vfma.f32	s27, s2, s3
 8014800:	f000 8148 	beq.w	8014a94 <MEMS_runMagCal.constprop.18+0x1c2c>
 8014804:	f9bb 305e 	ldrsh.w	r3, [fp, #94]	; 0x5e
 8014808:	ee01 3a10 	vmov	s2, r3
 801480c:	f8bb 3064 	ldrh.w	r3, [fp, #100]	; 0x64
 8014810:	ee01 3a90 	vmov	s3, r3
 8014814:	f9bb 306a 	ldrsh.w	r3, [fp, #106]	; 0x6a
 8014818:	ee09 3a90 	vmov	s19, r3
 801481c:	f9bb 3060 	ldrsh.w	r3, [fp, #96]	; 0x60
 8014820:	ee09 3a10 	vmov	s18, r3
 8014824:	f8bb 3066 	ldrh.w	r3, [fp, #102]	; 0x66
 8014828:	ee08 3a90 	vmov	s17, r3
 801482c:	f9bb 306c 	ldrsh.w	r3, [fp, #108]	; 0x6c
 8014830:	ee08 3a10 	vmov	s16, r3
 8014834:	f9bb 3062 	ldrsh.w	r3, [fp, #98]	; 0x62
 8014838:	ee00 3a10 	vmov	s0, r3
 801483c:	f8bb 3068 	ldrh.w	r3, [fp, #104]	; 0x68
 8014840:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014844:	ee00 3a90 	vmov	s1, r3
 8014848:	f9bb 306e 	ldrsh.w	r3, [fp, #110]	; 0x6e
 801484c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014850:	eee1 3a02 	vfma.f32	s7, s2, s4
 8014854:	2c03      	cmp	r4, #3
 8014856:	ee01 3a10 	vmov	s2, r3
 801485a:	f89b 305c 	ldrb.w	r3, [fp, #92]	; 0x5c
 801485e:	eea1 4a82 	vfma.f32	s8, s3, s4
 8014862:	ee01 3a90 	vmov	s3, r3
 8014866:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 801486a:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801486e:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8014872:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8014876:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801487a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801487e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014882:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014886:	eee9 4a82 	vfma.f32	s9, s19, s4
 801488a:	eea9 5a02 	vfma.f32	s10, s18, s4
 801488e:	eee2 5a28 	vfma.f32	s11, s4, s17
 8014892:	eea8 6a02 	vfma.f32	s12, s16, s4
 8014896:	eee0 6a02 	vfma.f32	s13, s0, s4
 801489a:	eea0 7a82 	vfma.f32	s14, s1, s4
 801489e:	eee1 7a02 	vfma.f32	s15, s2, s4
 80148a2:	eee1 da82 	vfma.f32	s27, s3, s4
 80148a6:	f000 80f5 	beq.w	8014a94 <MEMS_runMagCal.constprop.18+0x1c2c>
 80148aa:	f9bb 3076 	ldrsh.w	r3, [fp, #118]	; 0x76
 80148ae:	ee01 3a90 	vmov	s3, r3
 80148b2:	f8bb 307c 	ldrh.w	r3, [fp, #124]	; 0x7c
 80148b6:	ee02 3a10 	vmov	s4, r3
 80148ba:	f9bb 3082 	ldrsh.w	r3, [fp, #130]	; 0x82
 80148be:	ee09 3a10 	vmov	s18, r3
 80148c2:	f9bb 3078 	ldrsh.w	r3, [fp, #120]	; 0x78
 80148c6:	ee08 3a90 	vmov	s17, r3
 80148ca:	f8bb 307e 	ldrh.w	r3, [fp, #126]	; 0x7e
 80148ce:	ee08 3a10 	vmov	s16, r3
 80148d2:	f9bb 3084 	ldrsh.w	r3, [fp, #132]	; 0x84
 80148d6:	ee00 3a10 	vmov	s0, r3
 80148da:	f9bb 307a 	ldrsh.w	r3, [fp, #122]	; 0x7a
 80148de:	ee00 3a90 	vmov	s1, r3
 80148e2:	f8bb 3080 	ldrh.w	r3, [fp, #128]	; 0x80
 80148e6:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80148ea:	ee01 3a10 	vmov	s2, r3
 80148ee:	f9bb 3086 	ldrsh.w	r3, [fp, #134]	; 0x86
 80148f2:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 80148f6:	eee1 3aa2 	vfma.f32	s7, s3, s5
 80148fa:	2c04      	cmp	r4, #4
 80148fc:	ee01 3a90 	vmov	s3, r3
 8014900:	f89b 3074 	ldrb.w	r3, [fp, #116]	; 0x74
 8014904:	eea2 4a22 	vfma.f32	s8, s4, s5
 8014908:	ee02 3a10 	vmov	s4, r3
 801490c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8014910:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8014914:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8014918:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801491c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014920:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014924:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014928:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801492c:	eee9 4a22 	vfma.f32	s9, s18, s5
 8014930:	eea8 5aa2 	vfma.f32	s10, s17, s5
 8014934:	eee8 5a22 	vfma.f32	s11, s16, s5
 8014938:	eea0 6a22 	vfma.f32	s12, s0, s5
 801493c:	eee0 6aa2 	vfma.f32	s13, s1, s5
 8014940:	eea1 7a22 	vfma.f32	s14, s2, s5
 8014944:	eee1 7aa2 	vfma.f32	s15, s3, s5
 8014948:	eee2 da82 	vfma.f32	s27, s5, s4
 801494c:	f000 80a2 	beq.w	8014a94 <MEMS_runMagCal.constprop.18+0x1c2c>
 8014950:	f9bb 308e 	ldrsh.w	r3, [fp, #142]	; 0x8e
 8014954:	ee09 3a90 	vmov	s19, r3
 8014958:	f8bb 3094 	ldrh.w	r3, [fp, #148]	; 0x94
 801495c:	ee09 3a10 	vmov	s18, r3
 8014960:	f9bb 309a 	ldrsh.w	r3, [fp, #154]	; 0x9a
 8014964:	ee08 3a90 	vmov	s17, r3
 8014968:	f9bb 3090 	ldrsh.w	r3, [fp, #144]	; 0x90
 801496c:	ee08 3a10 	vmov	s16, r3
 8014970:	f8bb 3096 	ldrh.w	r3, [fp, #150]	; 0x96
 8014974:	ee00 3a10 	vmov	s0, r3
 8014978:	f9bb 309c 	ldrsh.w	r3, [fp, #156]	; 0x9c
 801497c:	ee00 3a90 	vmov	s1, r3
 8014980:	f9bb 3092 	ldrsh.w	r3, [fp, #146]	; 0x92
 8014984:	ee01 3a10 	vmov	s2, r3
 8014988:	f8bb 3098 	ldrh.w	r3, [fp, #152]	; 0x98
 801498c:	ee01 3a90 	vmov	s3, r3
 8014990:	f9bb 309e 	ldrsh.w	r3, [fp, #158]	; 0x9e
 8014994:	ee02 3a10 	vmov	s4, r3
 8014998:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801499c:	ee02 3a90 	vmov	s5, r3
 80149a0:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 80149a4:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 80149a8:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80149ac:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80149b0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80149b4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80149b8:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80149bc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80149c0:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 80149c4:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80149c8:	2c05      	cmp	r4, #5
 80149ca:	eee9 3a83 	vfma.f32	s7, s19, s6
 80149ce:	eea3 4a09 	vfma.f32	s8, s6, s18
 80149d2:	eee3 4a28 	vfma.f32	s9, s6, s17
 80149d6:	eea3 5a08 	vfma.f32	s10, s6, s16
 80149da:	eee3 5a00 	vfma.f32	s11, s6, s0
 80149de:	eea3 6a20 	vfma.f32	s12, s6, s1
 80149e2:	eee3 6a01 	vfma.f32	s13, s6, s2
 80149e6:	eea3 7a21 	vfma.f32	s14, s6, s3
 80149ea:	eee3 7a02 	vfma.f32	s15, s6, s4
 80149ee:	eee3 da22 	vfma.f32	s27, s6, s5
 80149f2:	d04f      	beq.n	8014a94 <MEMS_runMagCal.constprop.18+0x1c2c>
 80149f4:	f9bb 30a6 	ldrsh.w	r3, [fp, #166]	; 0xa6
 80149f8:	ee09 3a10 	vmov	s18, r3
 80149fc:	f8bb 30ac 	ldrh.w	r3, [fp, #172]	; 0xac
 8014a00:	ee08 3a90 	vmov	s17, r3
 8014a04:	f9bb 30b2 	ldrsh.w	r3, [fp, #178]	; 0xb2
 8014a08:	ee08 3a10 	vmov	s16, r3
 8014a0c:	f9bb 30a8 	ldrsh.w	r3, [fp, #168]	; 0xa8
 8014a10:	ee00 3a10 	vmov	s0, r3
 8014a14:	f8bb 30ae 	ldrh.w	r3, [fp, #174]	; 0xae
 8014a18:	ee00 3a90 	vmov	s1, r3
 8014a1c:	f9bb 30b4 	ldrsh.w	r3, [fp, #180]	; 0xb4
 8014a20:	ee01 3a10 	vmov	s2, r3
 8014a24:	f9bb 30aa 	ldrsh.w	r3, [fp, #170]	; 0xaa
 8014a28:	ee01 3a90 	vmov	s3, r3
 8014a2c:	f8bb 30b0 	ldrh.w	r3, [fp, #176]	; 0xb0
 8014a30:	ee02 3a10 	vmov	s4, r3
 8014a34:	f9bb 30b6 	ldrsh.w	r3, [fp, #182]	; 0xb6
 8014a38:	ee02 3a90 	vmov	s5, r3
 8014a3c:	f89b 30a4 	ldrb.w	r3, [fp, #164]	; 0xa4
 8014a40:	ee03 3a10 	vmov	s6, r3
 8014a44:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8014a48:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8014a4c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8014a50:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014a54:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014a58:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014a5c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014a60:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8014a64:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8014a68:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8014a6c:	eee9 3a0d 	vfma.f32	s7, s18, s26
 8014a70:	eea8 4a8d 	vfma.f32	s8, s17, s26
 8014a74:	eee8 4a0d 	vfma.f32	s9, s16, s26
 8014a78:	eead 5a00 	vfma.f32	s10, s26, s0
 8014a7c:	eee0 5a8d 	vfma.f32	s11, s1, s26
 8014a80:	eea1 6a0d 	vfma.f32	s12, s2, s26
 8014a84:	eeed 6a21 	vfma.f32	s13, s26, s3
 8014a88:	eead 7a02 	vfma.f32	s14, s26, s4
 8014a8c:	eee2 7a8d 	vfma.f32	s15, s5, s26
 8014a90:	eeed da03 	vfma.f32	s27, s26, s6
 8014a94:	edcd 3a10 	vstr	s7, [sp, #64]	; 0x40
 8014a98:	ed8d 4a13 	vstr	s8, [sp, #76]	; 0x4c
 8014a9c:	edc5 4a00 	vstr	s9, [r5]
 8014aa0:	ed8d 5a11 	vstr	s10, [sp, #68]	; 0x44
 8014aa4:	edcd 5a14 	vstr	s11, [sp, #80]	; 0x50
 8014aa8:	ed85 6a01 	vstr	s12, [r5, #4]
 8014aac:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8014ab0:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 8014ab4:	edc5 7a02 	vstr	s15, [r5, #8]
 8014ab8:	eeb0 ba44 	vmov.f32	s22, s8
 8014abc:	eeb0 0a63 	vmov.f32	s0, s7
 8014ac0:	eeb0 ca64 	vmov.f32	s24, s9
 8014ac4:	eef0 9a45 	vmov.f32	s19, s10
 8014ac8:	eeb0 aa65 	vmov.f32	s20, s11
 8014acc:	eeb0 8a46 	vmov.f32	s16, s12
 8014ad0:	eef0 8a66 	vmov.f32	s17, s13
 8014ad4:	eeb0 9a47 	vmov.f32	s18, s14
 8014ad8:	eef0 ea67 	vmov.f32	s29, s15
 8014adc:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8014ae0:	eddf cae5 	vldr	s25, [pc, #916]	; 8014e78 <MEMS_runMagCal.constprop.18+0x2010>
 8014ae4:	ee07 3a90 	vmov	s15, r3
 8014ae8:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 8014aec:	ee04 3a10 	vmov	s8, r3
 8014af0:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
 8014af4:	ee04 3a90 	vmov	s9, r3
 8014af8:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8014afc:	ee05 3a10 	vmov	s10, r3
 8014b00:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 8014b04:	ee05 3a90 	vmov	s11, r3
 8014b08:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 8014b0c:	ee06 3a10 	vmov	s12, r3
 8014b10:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8014b14:	ee06 3a90 	vmov	s13, r3
 8014b18:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 8014b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b20:	ee07 3a10 	vmov	s14, r3
 8014b24:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 8014b28:	eead ba27 	vfma.f32	s22, s26, s15
 8014b2c:	ee07 3a90 	vmov	s15, r3
 8014b30:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8014b34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b3c:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8014b40:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014b44:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014b48:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014b4c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014b50:	eea4 0a0d 	vfma.f32	s0, s8, s26
 8014b54:	2300      	movs	r3, #0
 8014b56:	f88b 30a5 	strb.w	r3, [fp, #165]	; 0xa5
 8014b5a:	eead 9a07 	vfma.f32	s18, s26, s14
 8014b5e:	eead ca24 	vfma.f32	s24, s26, s9
 8014b62:	eeed 9a05 	vfma.f32	s19, s26, s10
 8014b66:	eead aa25 	vfma.f32	s20, s26, s11
 8014b6a:	eead 8a06 	vfma.f32	s16, s26, s12
 8014b6e:	eeed 8a26 	vfma.f32	s17, s26, s13
 8014b72:	eeed ea27 	vfma.f32	s29, s26, s15
 8014b76:	f005 f991 	bl	8019e9c <roundf>
 8014b7a:	eef0 aa40 	vmov.f32	s21, s0
 8014b7e:	ee2b 0a2c 	vmul.f32	s0, s22, s25
 8014b82:	edcb aa2a 	vstr	s21, [fp, #168]	; 0xa8
 8014b86:	f005 f989 	bl	8019e9c <roundf>
 8014b8a:	ee10 0a10 	vmov	r0, s0
 8014b8e:	f7eb fce3 	bl	8000558 <__aeabi_f2d>
 8014b92:	a3b7      	add	r3, pc, #732	; (adr r3, 8014e70 <MEMS_runMagCal.constprop.18+0x2008>)
 8014b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b98:	f7eb fd36 	bl	8000608 <__aeabi_dmul>
 8014b9c:	f7ec f80c 	bl	8000bb8 <__aeabi_d2f>
 8014ba0:	eeb0 0a69 	vmov.f32	s0, s19
 8014ba4:	ee0b 0a10 	vmov	s22, r0
 8014ba8:	f8cb 00b4 	str.w	r0, [fp, #180]	; 0xb4
 8014bac:	f005 f976 	bl	8019e9c <roundf>
 8014bb0:	eef0 9a40 	vmov.f32	s19, s0
 8014bb4:	ee2a 0a2c 	vmul.f32	s0, s20, s25
 8014bb8:	edcb 9a2b 	vstr	s19, [fp, #172]	; 0xac
 8014bbc:	f005 f96e 	bl	8019e9c <roundf>
 8014bc0:	ee10 0a10 	vmov	r0, s0
 8014bc4:	f7eb fcc8 	bl	8000558 <__aeabi_f2d>
 8014bc8:	a3a9      	add	r3, pc, #676	; (adr r3, 8014e70 <MEMS_runMagCal.constprop.18+0x2008>)
 8014bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bce:	f7eb fd1b 	bl	8000608 <__aeabi_dmul>
 8014bd2:	f7eb fff1 	bl	8000bb8 <__aeabi_d2f>
 8014bd6:	eeb0 0a68 	vmov.f32	s0, s17
 8014bda:	ee0a 0a10 	vmov	s20, r0
 8014bde:	f8cb 00c4 	str.w	r0, [fp, #196]	; 0xc4
 8014be2:	f005 f95b 	bl	8019e9c <roundf>
 8014be6:	eef0 8a40 	vmov.f32	s17, s0
 8014bea:	ee29 0a2c 	vmul.f32	s0, s18, s25
 8014bee:	edcb 8a2c 	vstr	s17, [fp, #176]	; 0xb0
 8014bf2:	f005 f953 	bl	8019e9c <roundf>
 8014bf6:	ee10 0a10 	vmov	r0, s0
 8014bfa:	f7eb fcad 	bl	8000558 <__aeabi_f2d>
 8014bfe:	a39c      	add	r3, pc, #624	; (adr r3, 8014e70 <MEMS_runMagCal.constprop.18+0x2008>)
 8014c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c04:	f7eb fd00 	bl	8000608 <__aeabi_dmul>
 8014c08:	f7eb ffd6 	bl	8000bb8 <__aeabi_d2f>
 8014c0c:	ee2c 0a2c 	vmul.f32	s0, s24, s25
 8014c10:	ee09 0a10 	vmov	s18, r0
 8014c14:	f8cb 00d4 	str.w	r0, [fp, #212]	; 0xd4
 8014c18:	f005 f940 	bl	8019e9c <roundf>
 8014c1c:	ee10 0a10 	vmov	r0, s0
 8014c20:	f7eb fc9a 	bl	8000558 <__aeabi_f2d>
 8014c24:	a392      	add	r3, pc, #584	; (adr r3, 8014e70 <MEMS_runMagCal.constprop.18+0x2008>)
 8014c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c2a:	f7eb fced 	bl	8000608 <__aeabi_dmul>
 8014c2e:	f7eb ffc3 	bl	8000bb8 <__aeabi_d2f>
 8014c32:	ee28 0a2c 	vmul.f32	s0, s16, s25
 8014c36:	ee0c 0a10 	vmov	s24, r0
 8014c3a:	f8cb 00c0 	str.w	r0, [fp, #192]	; 0xc0
 8014c3e:	f005 f92d 	bl	8019e9c <roundf>
 8014c42:	ee10 0a10 	vmov	r0, s0
 8014c46:	f7eb fc87 	bl	8000558 <__aeabi_f2d>
 8014c4a:	a389      	add	r3, pc, #548	; (adr r3, 8014e70 <MEMS_runMagCal.constprop.18+0x2008>)
 8014c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c50:	f7eb fcda 	bl	8000608 <__aeabi_dmul>
 8014c54:	f7eb ffb0 	bl	8000bb8 <__aeabi_d2f>
 8014c58:	ee2e 0aac 	vmul.f32	s0, s29, s25
 8014c5c:	ee08 0a10 	vmov	s16, r0
 8014c60:	f8cb 00cc 	str.w	r0, [fp, #204]	; 0xcc
 8014c64:	f005 f91a 	bl	8019e9c <roundf>
 8014c68:	ee10 0a10 	vmov	r0, s0
 8014c6c:	f7eb fc74 	bl	8000558 <__aeabi_f2d>
 8014c70:	a37f      	add	r3, pc, #508	; (adr r3, 8014e70 <MEMS_runMagCal.constprop.18+0x2008>)
 8014c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c76:	f7eb fcc7 	bl	8000608 <__aeabi_dmul>
 8014c7a:	f7eb ff9d 	bl	8000bb8 <__aeabi_d2f>
 8014c7e:	eef0 7a6d 	vmov.f32	s15, s27
 8014c82:	eeed 7a0e 	vfma.f32	s15, s26, s28
 8014c86:	f8cb 00d0 	str.w	r0, [fp, #208]	; 0xd0
 8014c8a:	f8cb 00c8 	str.w	r0, [fp, #200]	; 0xc8
 8014c8e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014c92:	ee67 7aab 	vmul.f32	s15, s15, s23
 8014c96:	ee0c 0a90 	vmov	s25, r0
 8014c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ca2:	ed8b ca2e 	vstr	s24, [fp, #184]	; 0xb8
 8014ca6:	ed8b 8a2f 	vstr	s16, [fp, #188]	; 0xbc
 8014caa:	f100 84e9 	bmi.w	8015680 <MEMS_runMagCal.constprop.18+0x2818>
 8014cae:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8014cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cba:	bf4c      	ite	mi
 8014cbc:	2302      	movmi	r3, #2
 8014cbe:	2301      	movpl	r3, #1
 8014cc0:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 8014cc4:	f89b 50e0 	ldrb.w	r5, [fp, #224]	; 0xe0
 8014cc8:	f89b 80e1 	ldrb.w	r8, [fp, #225]	; 0xe1
 8014ccc:	9a00      	ldr	r2, [sp, #0]
 8014cce:	f99b 30e2 	ldrsb.w	r3, [fp, #226]	; 0xe2
 8014cd2:	f8cb 20d8 	str.w	r2, [fp, #216]	; 0xd8
 8014cd6:	2100      	movs	r1, #0
 8014cd8:	22ff      	movs	r2, #255	; 0xff
 8014cda:	4545      	cmp	r5, r8
 8014cdc:	f103 0301 	add.w	r3, r3, #1
 8014ce0:	f88b 1364 	strb.w	r1, [fp, #868]	; 0x364
 8014ce4:	f88b 2366 	strb.w	r2, [fp, #870]	; 0x366
 8014ce8:	f000 84c3 	beq.w	8015672 <MEMS_runMagCal.constprop.18+0x280a>
 8014cec:	1b5b      	subs	r3, r3, r5
 8014cee:	fb93 f2f8 	sdiv	r2, r3, r8
 8014cf2:	fb08 3312 	mls	r3, r8, r2, r3
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	b21f      	sxth	r7, r3
 8014cfa:	bfbc      	itt	lt
 8014cfc:	4443      	addlt	r3, r8
 8014cfe:	b21f      	sxthlt	r7, r3
 8014d00:	f89b 9365 	ldrb.w	r9, [fp, #869]	; 0x365
 8014d04:	2d00      	cmp	r5, #0
 8014d06:	f000 8514 	beq.w	8015732 <MEMS_runMagCal.constprop.18+0x28ca>
 8014d0a:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8014e7c <MEMS_runMagCal.constprop.18+0x2014>
 8014d0e:	2600      	movs	r6, #0
 8014d10:	ee6b baa7 	vmul.f32	s23, s23, s15
 8014d14:	4633      	mov	r3, r6
 8014d16:	f04f 34ff 	mov.w	r4, #4294967295
 8014d1a:	19da      	adds	r2, r3, r7
 8014d1c:	fb92 f3f8 	sdiv	r3, r2, r8
 8014d20:	fb08 2313 	mls	r3, r8, r3, r2
 8014d24:	b2db      	uxtb	r3, r3
 8014d26:	331d      	adds	r3, #29
 8014d28:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8014d2c:	1c62      	adds	r2, r4, #1
 8014d2e:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
 8014d32:	fb92 f4f9 	sdiv	r4, r2, r9
 8014d36:	ee07 1a90 	vmov	s15, r1
 8014d3a:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
 8014d3e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8014d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d46:	ee07 1a10 	vmov	s14, r1
 8014d4a:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8014d4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014d52:	ee06 3a90 	vmov	s13, r3
 8014d56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014d5a:	ee37 7a69 	vsub.f32	s14, s14, s19
 8014d5e:	ee17 3a90 	vmov	r3, s15
 8014d62:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014d66:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014d6a:	b21b      	sxth	r3, r3
 8014d6c:	ee76 6aea 	vsub.f32	s13, s13, s21
 8014d70:	ee07 3a90 	vmov	s15, r3
 8014d74:	ee17 3a10 	vmov	r3, s14
 8014d78:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8014d7c:	b21b      	sxth	r3, r3
 8014d7e:	ee07 3a10 	vmov	s14, r3
 8014d82:	ee16 3a90 	vmov	r3, s13
 8014d86:	b21b      	sxth	r3, r3
 8014d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d8c:	ee06 3a90 	vmov	s13, r3
 8014d90:	ee67 5aac 	vmul.f32	s11, s15, s25
 8014d94:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014d98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014d9c:	ee27 5a88 	vmul.f32	s10, s15, s16
 8014da0:	eee6 5a8c 	vfma.f32	s11, s13, s24
 8014da4:	fb09 2414 	mls	r4, r9, r4, r2
 8014da8:	b264      	sxtb	r4, r4
 8014daa:	ee27 6a2c 	vmul.f32	s12, s14, s25
 8014dae:	eea7 5a0c 	vfma.f32	s10, s14, s24
 8014db2:	3601      	adds	r6, #1
 8014db4:	b236      	sxth	r6, r6
 8014db6:	ee27 7a0a 	vmul.f32	s14, s14, s20
 8014dba:	eea6 6a8c 	vfma.f32	s12, s13, s24
 8014dbe:	ee66 6a8b 	vmul.f32	s13, s13, s22
 8014dc2:	eefd 5ae5 	vcvt.s32.f32	s11, s11
 8014dc6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014dca:	eebd 5ac5 	vcvt.s32.f32	s10, s10
 8014dce:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8014dd2:	ee67 7a89 	vmul.f32	s15, s15, s18
 8014dd6:	ee17 0a10 	vmov	r0, s14
 8014dda:	ee15 2a90 	vmov	r2, s11
 8014dde:	ee16 3a90 	vmov	r3, s13
 8014de2:	ee15 1a10 	vmov	r1, s10
 8014de6:	eebd 7ac6 	vcvt.s32.f32	s14, s12
 8014dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014dee:	4402      	add	r2, r0
 8014df0:	4419      	add	r1, r3
 8014df2:	4610      	mov	r0, r2
 8014df4:	ee17 3a10 	vmov	r3, s14
 8014df8:	ee17 2a90 	vmov	r2, s15
 8014dfc:	fb10 f000 	smulbb	r0, r0, r0
 8014e00:	441a      	add	r2, r3
 8014e02:	b209      	sxth	r1, r1
 8014e04:	fb01 0101 	mla	r1, r1, r1, r0
 8014e08:	b213      	sxth	r3, r2
 8014e0a:	fb03 1303 	mla	r3, r3, r3, r1
 8014e0e:	ee07 3a90 	vmov	s15, r3
 8014e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014e16:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8014e1a:	ee20 0a2b 	vmul.f32	s0, s0, s23
 8014e1e:	f005 f83d 	bl	8019e9c <roundf>
 8014e22:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014e26:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 8014e2a:	ee10 1a10 	vmov	r1, s0
 8014e2e:	42ae      	cmp	r6, r5
 8014e30:	f8a3 1368 	strh.w	r1, [r3, #872]	; 0x368
 8014e34:	4622      	mov	r2, r4
 8014e36:	4633      	mov	r3, r6
 8014e38:	f6ff af6f 	blt.w	8014d1a <MEMS_runMagCal.constprop.18+0x1eb2>
 8014e3c:	f88b 4366 	strb.w	r4, [fp, #870]	; 0x366
 8014e40:	454d      	cmp	r5, r9
 8014e42:	4629      	mov	r1, r5
 8014e44:	bf28      	it	cs
 8014e46:	4649      	movcs	r1, r9
 8014e48:	454d      	cmp	r5, r9
 8014e4a:	f88b 1364 	strb.w	r1, [fp, #868]	; 0x364
 8014e4e:	f080 8408 	bcs.w	8015662 <MEMS_runMagCal.constprop.18+0x27fa>
 8014e52:	2000      	movs	r0, #0
 8014e54:	b28e      	uxth	r6, r1
 8014e56:	2900      	cmp	r1, #0
 8014e58:	f43e aa73 	beq.w	8013342 <MEMS_runMagCal.constprop.18+0x4da>
 8014e5c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8014e80 <MEMS_runMagCal.constprop.18+0x2018>
 8014e60:	2400      	movs	r4, #0
 8014e62:	eeb0 7a66 	vmov.f32	s14, s13
 8014e66:	f241 255c 	movw	r5, #4700	; 0x125c
 8014e6a:	e017      	b.n	8014e9c <MEMS_runMagCal.constprop.18+0x2034>
 8014e6c:	f3af 8000 	nop.w
 8014e70:	a0b5ed8d 	.word	0xa0b5ed8d
 8014e74:	3eb0c6f7 	.word	0x3eb0c6f7
 8014e78:	447a0000 	.word	0x447a0000
 8014e7c:	42c80000 	.word	0x42c80000
 8014e80:	00000000 	.word	0x00000000
 8014e84:	3c23d70a 	.word	0x3c23d70a
 8014e88:	c23c0000 	.word	0xc23c0000
 8014e8c:	3fd9999a 	.word	0x3fd9999a
 8014e90:	4752f000 	.word	0x4752f000
 8014e94:	3eaaaaab 	.word	0x3eaaaaab
 8014e98:	40233334 	.word	0x40233334
 8014e9c:	1902      	adds	r2, r0, r4
 8014e9e:	fb92 f3f9 	sdiv	r3, r2, r9
 8014ea2:	fb09 2313 	mls	r3, r9, r3, r2
 8014ea6:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8014eaa:	3401      	adds	r4, #1
 8014eac:	f8b3 3368 	ldrh.w	r3, [r3, #872]	; 0x368
 8014eb0:	ee07 3a90 	vmov	s15, r3
 8014eb4:	f5a3 5292 	sub.w	r2, r3, #4672	; 0x1240
 8014eb8:	42ab      	cmp	r3, r5
 8014eba:	bf98      	it	ls
 8014ebc:	1aeb      	subls	r3, r5, r3
 8014ebe:	f1a2 021c 	sub.w	r2, r2, #28
 8014ec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ec6:	bf8c      	ite	hi
 8014ec8:	b293      	uxthhi	r3, r2
 8014eca:	b29b      	uxthls	r3, r3
 8014ecc:	fb03 f303 	mul.w	r3, r3, r3
 8014ed0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014ed4:	ee07 3a90 	vmov	s15, r3
 8014ed8:	b2a3      	uxth	r3, r4
 8014eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ede:	429e      	cmp	r6, r3
 8014ee0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014ee4:	d8da      	bhi.n	8014e9c <MEMS_runMagCal.constprop.18+0x2034>
 8014ee6:	ee07 1a90 	vmov	s15, r1
 8014eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014eee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014ef2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8014ef6:	293b      	cmp	r1, #59	; 0x3b
 8014ef8:	eeb1 7ac6 	vsqrt.f32	s14, s12
 8014efc:	f77e aa21 	ble.w	8013342 <MEMS_runMagCal.constprop.18+0x4da>
 8014f00:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8014f04:	ed5f 6a21 	vldr	s13, [pc, #-132]	; 8014e84 <MEMS_runMagCal.constprop.18+0x201c>
 8014f08:	ed5f 7a21 	vldr	s15, [pc, #-132]	; 8014e88 <MEMS_runMagCal.constprop.18+0x2020>
 8014f0c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8014f10:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8014f14:	eef0 7ae7 	vabs.f32	s15, s15
 8014f18:	eef4 7ac6 	vcmpe.f32	s15, s12
 8014f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f20:	f100 839d 	bmi.w	801565e <MEMS_runMagCal.constprop.18+0x27f6>
 8014f24:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8014f28:	eef4 7ac6 	vcmpe.f32	s15, s12
 8014f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f30:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014f34:	d507      	bpl.n	8014f46 <MEMS_runMagCal.constprop.18+0x20de>
 8014f36:	ed5f 6a2b 	vldr	s13, [pc, #-172]	; 8014e8c <MEMS_runMagCal.constprop.18+0x2024>
 8014f3a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f42:	f100 838c 	bmi.w	801565e <MEMS_runMagCal.constprop.18+0x27f6>
 8014f46:	eef1 6a05 	vmov.f32	s13, #21	; 0x40a80000  5.250
 8014f4a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f52:	f100 840a 	bmi.w	801576a <MEMS_runMagCal.constprop.18+0x2902>
 8014f56:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 8014f5a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f62:	f140 8400 	bpl.w	8015766 <MEMS_runMagCal.constprop.18+0x28fe>
 8014f66:	ed5f 7a34 	vldr	s15, [pc, #-208]	; 8014e98 <MEMS_runMagCal.constprop.18+0x2030>
 8014f6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f72:	bf4c      	ite	mi
 8014f74:	2302      	movmi	r3, #2
 8014f76:	2301      	movpl	r3, #1
 8014f78:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 8014f7c:	f7fe b9e1 	b.w	8013342 <MEMS_runMagCal.constprop.18+0x4da>
 8014f80:	ed1f 7a3d 	vldr	s14, [pc, #-244]	; 8014e90 <MEMS_runMagCal.constprop.18+0x2028>
 8014f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f8c:	f77e aa60 	ble.w	8013450 <MEMS_runMagCal.constprop.18+0x5e8>
 8014f90:	f1b8 0f02 	cmp.w	r8, #2
 8014f94:	bf28      	it	cs
 8014f96:	f04f 0802 	movcs.w	r8, #2
 8014f9a:	f88b 80a4 	strb.w	r8, [fp, #164]	; 0xa4
 8014f9e:	f7fe ba57 	b.w	8013450 <MEMS_runMagCal.constprop.18+0x5e8>
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	f88b 30dc 	strb.w	r3, [fp, #220]	; 0xdc
 8014fa8:	f7fe b9cb 	b.w	8013342 <MEMS_runMagCal.constprop.18+0x4da>
 8014fac:	2303      	movs	r3, #3
 8014fae:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 8014fb2:	f7fe bb7b 	b.w	80136ac <MEMS_runMagCal.constprop.18+0x844>
 8014fb6:	eeb0 0a49 	vmov.f32	s0, s18
 8014fba:	4640      	mov	r0, r8
 8014fbc:	f7fc fc0c 	bl	80117d8 <MEMS_updateMagBufferIndex.constprop.22>
 8014fc0:	f7fe bd4b 	b.w	8013a5a <MEMS_runMagCal.constprop.18+0xbf2>
 8014fc4:	2302      	movs	r3, #2
 8014fc6:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 8014fca:	f7fe bad5 	b.w	8013578 <MEMS_runMagCal.constprop.18+0x710>
 8014fce:	1c50      	adds	r0, r2, #1
 8014fd0:	fb90 f4f6 	sdiv	r4, r0, r6
 8014fd4:	fb06 0014 	mls	r0, r6, r4, r0
 8014fd8:	b2c0      	uxtb	r0, r0
 8014fda:	9001      	str	r0, [sp, #4]
 8014fdc:	f7fe b929 	b.w	8013232 <MEMS_runMagCal.constprop.18+0x3ca>
 8014fe0:	9b00      	ldr	r3, [sp, #0]
 8014fe2:	f8db 20e4 	ldr.w	r2, [fp, #228]	; 0xe4
 8014fe6:	f8db 1360 	ldr.w	r1, [fp, #864]	; 0x360
 8014fea:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 8014fee:	f9ba 3100 	ldrsh.w	r3, [sl, #256]	; 0x100
 8014ff2:	4413      	add	r3, r2
 8014ff4:	4299      	cmp	r1, r3
 8014ff6:	d2d4      	bcs.n	8014fa2 <MEMS_runMagCal.constprop.18+0x213a>
 8014ff8:	f8db 10d8 	ldr.w	r1, [fp, #216]	; 0xd8
 8014ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015000:	fb03 f301 	mul.w	r3, r3, r1
 8015004:	3364      	adds	r3, #100	; 0x64
 8015006:	4293      	cmp	r3, r2
 8015008:	bf38      	it	cc
 801500a:	4613      	movcc	r3, r2
 801500c:	2200      	movs	r2, #0
 801500e:	f8cb 3360 	str.w	r3, [fp, #864]	; 0x360
 8015012:	f88b 20dc 	strb.w	r2, [fp, #220]	; 0xdc
 8015016:	f7fe b994 	b.w	8013342 <MEMS_runMagCal.constprop.18+0x4da>
 801501a:	2000      	movs	r0, #0
 801501c:	f7fe bf2f 	b.w	8013e7e <MEMS_runMagCal.constprop.18+0x1016>
 8015020:	fb93 f5f2 	sdiv	r5, r3, r2
 8015024:	fb02 3315 	mls	r3, r2, r5, r3
 8015028:	b21d      	sxth	r5, r3
 801502a:	f7fe bed8 	b.w	8013dde <MEMS_runMagCal.constprop.18+0xf76>
 801502e:	f04f 0801 	mov.w	r8, #1
 8015032:	f7fe bf5e 	b.w	8013ef2 <MEMS_runMagCal.constprop.18+0x108a>
 8015036:	eddb 4a31 	vldr	s9, [fp, #196]	; 0xc4
 801503a:	eddb 6a2d 	vldr	s13, [fp, #180]	; 0xb4
 801503e:	ed9b 5a35 	vldr	s10, [fp, #212]	; 0xd4
 8015042:	ed1f 4a6c 	vldr	s8, [pc, #-432]	; 8014e94 <MEMS_runMagCal.constprop.18+0x202c>
 8015046:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801504a:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 801504e:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015052:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8015056:	ee66 6a84 	vmul.f32	s13, s13, s8
 801505a:	eef4 6ae4 	vcmpe.f32	s13, s9
 801505e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015062:	bf88      	it	hi
 8015064:	eef0 6a64 	vmovhi.f32	s13, s9
 8015068:	eef4 6ac5 	vcmpe.f32	s13, s10
 801506c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015070:	bfb8      	it	lt
 8015072:	eef0 6a45 	vmovlt.f32	s13, s10
 8015076:	ee65 5aa6 	vmul.f32	s11, s11, s13
 801507a:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801507e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015082:	dc8e      	bgt.n	8014fa2 <MEMS_runMagCal.constprop.18+0x213a>
 8015084:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015088:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801508c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015090:	dc87      	bgt.n	8014fa2 <MEMS_runMagCal.constprop.18+0x213a>
 8015092:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015096:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801509a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801509e:	dc80      	bgt.n	8014fa2 <MEMS_runMagCal.constprop.18+0x213a>
 80150a0:	4680      	mov	r8, r0
 80150a2:	f7fe bf40 	b.w	8013f26 <MEMS_runMagCal.constprop.18+0x10be>
 80150a6:	ad16      	add	r5, sp, #88	; 0x58
 80150a8:	eefc baeb 	vcvt.u32.f32	s23, s23
 80150ac:	f7fe bffe 	b.w	80140ac <MEMS_runMagCal.constprop.18+0x1244>
 80150b0:	2800      	cmp	r0, #0
 80150b2:	f47e aff8 	bne.w	80140a6 <MEMS_runMagCal.constprop.18+0x123e>
 80150b6:	f88b 40a4 	strb.w	r4, [fp, #164]	; 0xa4
 80150ba:	edcb ba28 	vstr	s23, [fp, #160]	; 0xa0
 80150be:	f88b 00dc 	strb.w	r0, [fp, #220]	; 0xdc
 80150c2:	f7fe b93e 	b.w	8013342 <MEMS_runMagCal.constprop.18+0x4da>
 80150c6:	2700      	movs	r7, #0
 80150c8:	f7ff b85c 	b.w	8014184 <MEMS_runMagCal.constprop.18+0x131c>
 80150cc:	f89b 3364 	ldrb.w	r3, [fp, #868]	; 0x364
 80150d0:	9a05      	ldr	r2, [sp, #20]
 80150d2:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80150d6:	f280 8082 	bge.w	80151de <MEMS_runMagCal.constprop.18+0x2376>
 80150da:	005b      	lsls	r3, r3, #1
 80150dc:	2b3b      	cmp	r3, #59	; 0x3b
 80150de:	bfd4      	ite	le
 80150e0:	2300      	movle	r3, #0
 80150e2:	2301      	movgt	r3, #1
 80150e4:	9309      	str	r3, [sp, #36]	; 0x24
 80150e6:	ed5f 7a94 	vldr	s15, [pc, #-592]	; 8014e98 <MEMS_runMagCal.constprop.18+0x2030>
 80150ea:	eddb 6ad8 	vldr	s13, [fp, #864]	; 0x360
 80150ee:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80150f2:	f04f 0800 	mov.w	r8, #0
 80150f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150fa:	f8c5 8000 	str.w	r8, [r5]
 80150fe:	f885 8004 	strb.w	r8, [r5, #4]
 8015102:	f300 8283 	bgt.w	801560c <MEMS_runMagCal.constprop.18+0x27a4>
 8015106:	2c00      	cmp	r4, #0
 8015108:	f43f a8f4 	beq.w	80142f4 <MEMS_runMagCal.constprop.18+0x148c>
 801510c:	4ba3      	ldr	r3, [pc, #652]	; (801539c <MEMS_runMagCal.constprop.18+0x2534>)
 801510e:	9301      	str	r3, [sp, #4]
 8015110:	eeb0 0a6b 	vmov.f32	s0, s23
 8015114:	4619      	mov	r1, r3
 8015116:	a819      	add	r0, sp, #100	; 0x64
 8015118:	f7fc fada 	bl	80116d0 <MEMS_checkConsistency.constprop.32>
 801511c:	2801      	cmp	r0, #1
 801511e:	f000 8609 	beq.w	8015d34 <MEMS_runMagCal.constprop.18+0x2ecc>
 8015122:	2c01      	cmp	r4, #1
 8015124:	d95e      	bls.n	80151e4 <MEMS_runMagCal.constprop.18+0x237c>
 8015126:	eeb0 0a6b 	vmov.f32	s0, s23
 801512a:	499d      	ldr	r1, [pc, #628]	; (80153a0 <MEMS_runMagCal.constprop.18+0x2538>)
 801512c:	a819      	add	r0, sp, #100	; 0x64
 801512e:	f7fc facf 	bl	80116d0 <MEMS_checkConsistency.constprop.32>
 8015132:	2801      	cmp	r0, #1
 8015134:	f000 85f1 	beq.w	8015d1a <MEMS_runMagCal.constprop.18+0x2eb2>
 8015138:	2c02      	cmp	r4, #2
 801513a:	f000 85bf 	beq.w	8015cbc <MEMS_runMagCal.constprop.18+0x2e54>
 801513e:	eeb0 0a6b 	vmov.f32	s0, s23
 8015142:	4998      	ldr	r1, [pc, #608]	; (80153a4 <MEMS_runMagCal.constprop.18+0x253c>)
 8015144:	a819      	add	r0, sp, #100	; 0x64
 8015146:	f7fc fac3 	bl	80116d0 <MEMS_checkConsistency.constprop.32>
 801514a:	2801      	cmp	r0, #1
 801514c:	f000 85ad 	beq.w	8015caa <MEMS_runMagCal.constprop.18+0x2e42>
 8015150:	2c03      	cmp	r4, #3
 8015152:	f000 85b3 	beq.w	8015cbc <MEMS_runMagCal.constprop.18+0x2e54>
 8015156:	eeb0 0a6b 	vmov.f32	s0, s23
 801515a:	4993      	ldr	r1, [pc, #588]	; (80153a8 <MEMS_runMagCal.constprop.18+0x2540>)
 801515c:	a819      	add	r0, sp, #100	; 0x64
 801515e:	f7fc fab7 	bl	80116d0 <MEMS_checkConsistency.constprop.32>
 8015162:	2801      	cmp	r0, #1
 8015164:	f000 8598 	beq.w	8015c98 <MEMS_runMagCal.constprop.18+0x2e30>
 8015168:	2c04      	cmp	r4, #4
 801516a:	f000 85a7 	beq.w	8015cbc <MEMS_runMagCal.constprop.18+0x2e54>
 801516e:	eeb0 0a6b 	vmov.f32	s0, s23
 8015172:	498e      	ldr	r1, [pc, #568]	; (80153ac <MEMS_runMagCal.constprop.18+0x2544>)
 8015174:	a819      	add	r0, sp, #100	; 0x64
 8015176:	f7fc faab 	bl	80116d0 <MEMS_checkConsistency.constprop.32>
 801517a:	2801      	cmp	r0, #1
 801517c:	f000 8583 	beq.w	8015c86 <MEMS_runMagCal.constprop.18+0x2e1e>
 8015180:	2c05      	cmp	r4, #5
 8015182:	f000 859b 	beq.w	8015cbc <MEMS_runMagCal.constprop.18+0x2e54>
 8015186:	eeb0 0a6b 	vmov.f32	s0, s23
 801518a:	4989      	ldr	r1, [pc, #548]	; (80153b0 <MEMS_runMagCal.constprop.18+0x2548>)
 801518c:	a819      	add	r0, sp, #100	; 0x64
 801518e:	f7fc fa9f 	bl	80116d0 <MEMS_checkConsistency.constprop.32>
 8015192:	2801      	cmp	r0, #1
 8015194:	f000 852b 	beq.w	8015bee <MEMS_runMagCal.constprop.18+0x2d86>
 8015198:	2c06      	cmp	r4, #6
 801519a:	f000 858f 	beq.w	8015cbc <MEMS_runMagCal.constprop.18+0x2e54>
 801519e:	f04f 0906 	mov.w	r9, #6
 80151a2:	e006      	b.n	80151b2 <MEMS_runMagCal.constprop.18+0x234a>
 80151a4:	f109 0901 	add.w	r9, r9, #1
 80151a8:	fa5f f389 	uxtb.w	r3, r9
 80151ac:	429c      	cmp	r4, r3
 80151ae:	f240 8585 	bls.w	8015cbc <MEMS_runMagCal.constprop.18+0x2e54>
 80151b2:	9b01      	ldr	r3, [sp, #4]
 80151b4:	eb09 0149 	add.w	r1, r9, r9, lsl #1
 80151b8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80151bc:	eeb0 0a6b 	vmov.f32	s0, s23
 80151c0:	a819      	add	r0, sp, #100	; 0x64
 80151c2:	f7fc fa85 	bl	80116d0 <MEMS_checkConsistency.constprop.32>
 80151c6:	2801      	cmp	r0, #1
 80151c8:	d1ec      	bne.n	80151a4 <MEMS_runMagCal.constprop.18+0x233c>
 80151ca:	f815 3009 	ldrb.w	r3, [r5, r9]
 80151ce:	f108 0801 	add.w	r8, r8, #1
 80151d2:	3301      	adds	r3, #1
 80151d4:	f805 3009 	strb.w	r3, [r5, r9]
 80151d8:	fa4f f888 	sxtb.w	r8, r8
 80151dc:	e7e2      	b.n	80151a4 <MEMS_runMagCal.constprop.18+0x233c>
 80151de:	2300      	movs	r3, #0
 80151e0:	9309      	str	r3, [sp, #36]	; 0x24
 80151e2:	e780      	b.n	80150e6 <MEMS_runMagCal.constprop.18+0x227e>
 80151e4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80153b4 <MEMS_runMagCal.constprop.18+0x254c>
 80151e8:	eef8 7a66 	vcvt.f32.u32	s15, s13
 80151ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80151f0:	ed9b 7a0a 	vldr	s14, [fp, #40]	; 0x28
 80151f4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80151f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80151fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015200:	f340 80bd 	ble.w	801537e <MEMS_runMagCal.constprop.18+0x2516>
 8015204:	45a0      	cmp	r8, r4
 8015206:	f280 83b2 	bge.w	801596e <MEMS_runMagCal.constprop.18+0x2b06>
 801520a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801520e:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 8015212:	9306      	str	r3, [sp, #24]
 8015214:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 8015218:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 801521c:	9307      	str	r3, [sp, #28]
 801521e:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 8015222:	f9bd 006e 	ldrsh.w	r0, [sp, #110]	; 0x6e
 8015226:	9308      	str	r3, [sp, #32]
 8015228:	b293      	uxth	r3, r2
 801522a:	9303      	str	r3, [sp, #12]
 801522c:	b28b      	uxth	r3, r1
 801522e:	f04f 0c00 	mov.w	ip, #0
 8015232:	9304      	str	r3, [sp, #16]
 8015234:	b283      	uxth	r3, r0
 8015236:	920a      	str	r2, [sp, #40]	; 0x28
 8015238:	910b      	str	r1, [sp, #44]	; 0x2c
 801523a:	900c      	str	r0, [sp, #48]	; 0x30
 801523c:	f8df a17c 	ldr.w	sl, [pc, #380]	; 80153bc <MEMS_runMagCal.constprop.18+0x2554>
 8015240:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 80153b8 <MEMS_runMagCal.constprop.18+0x2550>
 8015244:	f8c6 c000 	str.w	ip, [r6]
 8015248:	46e1      	mov	r9, ip
 801524a:	f886 c004 	strb.w	ip, [r6, #4]
 801524e:	f8cd c008 	str.w	ip, [sp, #8]
 8015252:	9305      	str	r3, [sp, #20]
 8015254:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8015258:	950d      	str	r5, [sp, #52]	; 0x34
 801525a:	e06f      	b.n	801533c <MEMS_runMagCal.constprop.18+0x24d4>
 801525c:	9b03      	ldr	r3, [sp, #12]
 801525e:	b292      	uxth	r2, r2
 8015260:	2800      	cmp	r0, #0
 8015262:	bfb4      	ite	lt
 8015264:	1ad2      	sublt	r2, r2, r3
 8015266:	1a9a      	subge	r2, r3, r2
 8015268:	b213      	sxth	r3, r2
 801526a:	f9ba 2032 	ldrsh.w	r2, [sl, #50]	; 0x32
 801526e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015270:	1a89      	subs	r1, r1, r2
 8015272:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
 8015276:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
 801527a:	4283      	cmp	r3, r0
 801527c:	dc06      	bgt.n	801528c <MEMS_runMagCal.constprop.18+0x2424>
 801527e:	9b05      	ldr	r3, [sp, #20]
 8015280:	b292      	uxth	r2, r2
 8015282:	2900      	cmp	r1, #0
 8015284:	bfb4      	ite	lt
 8015286:	1ad2      	sublt	r2, r2, r3
 8015288:	1a9a      	subge	r2, r3, r2
 801528a:	b213      	sxth	r3, r2
 801528c:	9806      	ldr	r0, [sp, #24]
 801528e:	f8ba 1034 	ldrh.w	r1, [sl, #52]	; 0x34
 8015292:	f8ba 2036 	ldrh.w	r2, [sl, #54]	; 0x36
 8015296:	eba0 0c01 	sub.w	ip, r0, r1
 801529a:	9807      	ldr	r0, [sp, #28]
 801529c:	1a80      	subs	r0, r0, r2
 801529e:	ea8c 75ec 	eor.w	r5, ip, ip, asr #31
 80152a2:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 80152a6:	eba5 75ec 	sub.w	r5, r5, ip, asr #31
 80152aa:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
 80152ae:	4575      	cmp	r5, lr
 80152b0:	dd5f      	ble.n	8015372 <MEMS_runMagCal.constprop.18+0x250a>
 80152b2:	f1bc 0f00 	cmp.w	ip, #0
 80152b6:	bfbd      	ittte	lt
 80152b8:	9a06      	ldrlt	r2, [sp, #24]
 80152ba:	1a88      	sublt	r0, r1, r2
 80152bc:	b200      	sxthlt	r0, r0
 80152be:	fa0f f08c 	sxthge.w	r0, ip
 80152c2:	f8ba 2038 	ldrh.w	r2, [sl, #56]	; 0x38
 80152c6:	9908      	ldr	r1, [sp, #32]
 80152c8:	1a89      	subs	r1, r1, r2
 80152ca:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
 80152ce:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31
 80152d2:	4560      	cmp	r0, ip
 80152d4:	dc05      	bgt.n	80152e2 <MEMS_runMagCal.constprop.18+0x247a>
 80152d6:	2900      	cmp	r1, #0
 80152d8:	bfbd      	ittte	lt
 80152da:	9908      	ldrlt	r1, [sp, #32]
 80152dc:	1a50      	sublt	r0, r2, r1
 80152de:	b200      	sxthlt	r0, r0
 80152e0:	b208      	sxthge	r0, r1
 80152e2:	ee07 3a10 	vmov	s14, r3
 80152e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80152ea:	ee27 7a2b 	vmul.f32	s14, s14, s23
 80152ee:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80152f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152f6:	dd18      	ble.n	801532a <MEMS_runMagCal.constprop.18+0x24c2>
 80152f8:	ee07 0a10 	vmov	s14, r0
 80152fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015300:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8015304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015308:	d50f      	bpl.n	801532a <MEMS_runMagCal.constprop.18+0x24c2>
 801530a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801530c:	b943      	cbnz	r3, 8015320 <MEMS_runMagCal.constprop.18+0x24b8>
 801530e:	ed9a 7a0a 	vldr	s14, [sl, #40]	; 0x28
 8015312:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8015316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801531a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801531e:	d504      	bpl.n	801532a <MEMS_runMagCal.constprop.18+0x24c2>
 8015320:	f04f 0301 	mov.w	r3, #1
 8015324:	f806 3009 	strb.w	r3, [r6, r9]
 8015328:	9702      	str	r7, [sp, #8]
 801532a:	f109 0901 	add.w	r9, r9, #1
 801532e:	fa5f f389 	uxtb.w	r3, r9
 8015332:	429c      	cmp	r4, r3
 8015334:	f10a 0a18 	add.w	sl, sl, #24
 8015338:	f240 8315 	bls.w	8015966 <MEMS_runMagCal.constprop.18+0x2afe>
 801533c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801533e:	f9ba 202e 	ldrsh.w	r2, [sl, #46]	; 0x2e
 8015342:	f9ba 3030 	ldrsh.w	r3, [sl, #48]	; 0x30
 8015346:	1a88      	subs	r0, r1, r2
 8015348:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801534a:	1ac9      	subs	r1, r1, r3
 801534c:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 8015350:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
 8015354:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
 8015358:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31
 801535c:	45e6      	cmp	lr, ip
 801535e:	f73f af7d 	bgt.w	801525c <MEMS_runMagCal.constprop.18+0x23f4>
 8015362:	9a04      	ldr	r2, [sp, #16]
 8015364:	b29b      	uxth	r3, r3
 8015366:	2900      	cmp	r1, #0
 8015368:	bfb4      	ite	lt
 801536a:	1a9b      	sublt	r3, r3, r2
 801536c:	1ad3      	subge	r3, r2, r3
 801536e:	b21b      	sxth	r3, r3
 8015370:	e77b      	b.n	801526a <MEMS_runMagCal.constprop.18+0x2402>
 8015372:	2800      	cmp	r0, #0
 8015374:	bfbc      	itt	lt
 8015376:	9907      	ldrlt	r1, [sp, #28]
 8015378:	1a50      	sublt	r0, r2, r1
 801537a:	b200      	sxth	r0, r0
 801537c:	e7a1      	b.n	80152c2 <MEMS_runMagCal.constprop.18+0x245a>
 801537e:	2401      	movs	r4, #1
 8015380:	2700      	movs	r7, #0
 8015382:	9702      	str	r7, [sp, #8]
 8015384:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 8015388:	9a00      	ldr	r2, [sp, #0]
 801538a:	1ad3      	subs	r3, r2, r3
 801538c:	f100 812c 	bmi.w	80155e8 <MEMS_runMagCal.constprop.18+0x2780>
 8015390:	f04f 37ff 	mov.w	r7, #4294967295
 8015394:	4639      	mov	r1, r7
 8015396:	2200      	movs	r2, #0
 8015398:	e01b      	b.n	80153d2 <MEMS_runMagCal.constprop.18+0x256a>
 801539a:	bf00      	nop
 801539c:	20001730 	.word	0x20001730
 80153a0:	20001748 	.word	0x20001748
 80153a4:	20001760 	.word	0x20001760
 80153a8:	20001778 	.word	0x20001778
 80153ac:	20001790 	.word	0x20001790
 80153b0:	200017a8 	.word	0x200017a8
 80153b4:	3a83126f 	.word	0x3a83126f
 80153b8:	43c80000 	.word	0x43c80000
 80153bc:	20001708 	.word	0x20001708
 80153c0:	43480000 	.word	0x43480000
 80153c4:	00000000 	.word	0x00000000
 80153c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153ca:	9800      	ldr	r0, [sp, #0]
 80153cc:	1ac3      	subs	r3, r0, r3
 80153ce:	f100 810d 	bmi.w	80155ec <MEMS_runMagCal.constprop.18+0x2784>
 80153d2:	4299      	cmp	r1, r3
 80153d4:	f102 0001 	add.w	r0, r2, #1
 80153d8:	bf88      	it	hi
 80153da:	4617      	movhi	r7, r2
 80153dc:	b242      	sxtb	r2, r0
 80153de:	bf88      	it	hi
 80153e0:	4619      	movhi	r1, r3
 80153e2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80153e6:	4294      	cmp	r4, r2
 80153e8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80153ec:	4694      	mov	ip, r2
 80153ee:	dceb      	bgt.n	80153c8 <MEMS_runMagCal.constprop.18+0x2560>
 80153f0:	2904      	cmp	r1, #4
 80153f2:	f200 80bd 	bhi.w	8015570 <MEMS_runMagCal.constprop.18+0x2708>
 80153f6:	2f00      	cmp	r7, #0
 80153f8:	f2c0 80ba 	blt.w	8015570 <MEMS_runMagCal.constprop.18+0x2708>
 80153fc:	2318      	movs	r3, #24
 80153fe:	fb03 b307 	mla	r3, r3, r7, fp
 8015402:	ee15 1a90 	vmov	r1, s11
 8015406:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801540a:	428a      	cmp	r2, r1
 801540c:	f0c0 8093 	bcc.w	8015536 <MEMS_runMagCal.constprop.18+0x26ce>
 8015410:	f9b3 002e 	ldrsh.w	r0, [r3, #46]	; 0x2e
 8015414:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8015418:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 801541c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8015420:	eba1 0e00 	sub.w	lr, r1, r0
 8015424:	eba3 0c02 	sub.w	ip, r3, r2
 8015428:	ea8e 79ee 	eor.w	r9, lr, lr, asr #31
 801542c:	ea8c 78ec 	eor.w	r8, ip, ip, asr #31
 8015430:	eba9 79ee 	sub.w	r9, r9, lr, asr #31
 8015434:	eba8 78ec 	sub.w	r8, r8, ip, asr #31
 8015438:	45c1      	cmp	r9, r8
 801543a:	f340 828b 	ble.w	8015954 <MEMS_runMagCal.constprop.18+0x2aec>
 801543e:	b289      	uxth	r1, r1
 8015440:	b283      	uxth	r3, r0
 8015442:	f1be 0f00 	cmp.w	lr, #0
 8015446:	bfb4      	ite	lt
 8015448:	1a59      	sublt	r1, r3, r1
 801544a:	1ac9      	subge	r1, r1, r3
 801544c:	b20b      	sxth	r3, r1
 801544e:	2118      	movs	r1, #24
 8015450:	fb01 b107 	mla	r1, r1, r7, fp
 8015454:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 8015458:	f9b1 1032 	ldrsh.w	r1, [r1, #50]	; 0x32
 801545c:	1a50      	subs	r0, r2, r1
 801545e:	ea80 7ce0 	eor.w	ip, r0, r0, asr #31
 8015462:	ebac 7ce0 	sub.w	ip, ip, r0, asr #31
 8015466:	4563      	cmp	r3, ip
 8015468:	dc06      	bgt.n	8015478 <MEMS_runMagCal.constprop.18+0x2610>
 801546a:	b293      	uxth	r3, r2
 801546c:	2800      	cmp	r0, #0
 801546e:	b28a      	uxth	r2, r1
 8015470:	bfb4      	ite	lt
 8015472:	1ad3      	sublt	r3, r2, r3
 8015474:	1a9b      	subge	r3, r3, r2
 8015476:	b21b      	sxth	r3, r3
 8015478:	2218      	movs	r2, #24
 801547a:	fb02 b207 	mla	r2, r2, r7, fp
 801547e:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 8015482:	8e91      	ldrh	r1, [r2, #52]	; 0x34
 8015484:	f8bd e072 	ldrh.w	lr, [sp, #114]	; 0x72
 8015488:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 801548a:	eba8 0c01 	sub.w	ip, r8, r1
 801548e:	ebae 0002 	sub.w	r0, lr, r2
 8015492:	ea8c 7aec 	eor.w	sl, ip, ip, asr #31
 8015496:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 801549a:	ebaa 7aec 	sub.w	sl, sl, ip, asr #31
 801549e:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
 80154a2:	45ca      	cmp	sl, r9
 80154a4:	f340 8250 	ble.w	8015948 <MEMS_runMagCal.constprop.18+0x2ae0>
 80154a8:	f1bc 0f00 	cmp.w	ip, #0
 80154ac:	bfba      	itte	lt
 80154ae:	eba1 0008 	sublt.w	r0, r1, r8
 80154b2:	b200      	sxthlt	r0, r0
 80154b4:	fa0f f08c 	sxthge.w	r0, ip
 80154b8:	2218      	movs	r2, #24
 80154ba:	fb02 b207 	mla	r2, r2, r7, fp
 80154be:	f8bd c074 	ldrh.w	ip, [sp, #116]	; 0x74
 80154c2:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 80154c4:	ebac 0102 	sub.w	r1, ip, r2
 80154c8:	ea81 7ee1 	eor.w	lr, r1, r1, asr #31
 80154cc:	ebae 7ee1 	sub.w	lr, lr, r1, asr #31
 80154d0:	4570      	cmp	r0, lr
 80154d2:	dc05      	bgt.n	80154e0 <MEMS_runMagCal.constprop.18+0x2678>
 80154d4:	2900      	cmp	r1, #0
 80154d6:	bfba      	itte	lt
 80154d8:	eba2 000c 	sublt.w	r0, r2, ip
 80154dc:	b200      	sxthlt	r0, r0
 80154de:	b208      	sxthge	r0, r1
 80154e0:	ee07 3a90 	vmov	s15, r3
 80154e4:	ee3b 7aab 	vadd.f32	s14, s23, s23
 80154e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80154ec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80154f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80154f4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80154f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154fc:	d50b      	bpl.n	8015516 <MEMS_runMagCal.constprop.18+0x26ae>
 80154fe:	0043      	lsls	r3, r0, #1
 8015500:	ee07 3a90 	vmov	s15, r3
 8015504:	ed1f 7a52 	vldr	s14, [pc, #-328]	; 80153c0 <MEMS_runMagCal.constprop.18+0x2558>
 8015508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801550c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015514:	d40f      	bmi.n	8015536 <MEMS_runMagCal.constprop.18+0x26ce>
 8015516:	f10d 0e64 	add.w	lr, sp, #100	; 0x64
 801551a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801551e:	f04f 0c18 	mov.w	ip, #24
 8015522:	fb0c b707 	mla	r7, ip, r7, fp
 8015526:	3728      	adds	r7, #40	; 0x28
 8015528:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801552a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801552e:	e887 0003 	stmia.w	r7, {r0, r1}
 8015532:	f7fe beea 	b.w	801430a <MEMS_runMagCal.constprop.18+0x14a2>
 8015536:	9b02      	ldr	r3, [sp, #8]
 8015538:	2b01      	cmp	r3, #1
 801553a:	f47d af02 	bne.w	8013342 <MEMS_runMagCal.constprop.18+0x4da>
 801553e:	f89b 4024 	ldrb.w	r4, [fp, #36]	; 0x24
 8015542:	2300      	movs	r3, #0
 8015544:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8015548:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 801554c:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8015550:	e9c5 3300 	strd	r3, r3, [r5]
 8015554:	60ab      	str	r3, [r5, #8]
 8015556:	e9c6 3300 	strd	r3, r3, [r6]
 801555a:	e9c6 3302 	strd	r3, r3, [r6, #8]
 801555e:	e9c6 3304 	strd	r3, r3, [r6, #16]
 8015562:	2c00      	cmp	r4, #0
 8015564:	f47e aee0 	bne.w	8014328 <MEMS_runMagCal.constprop.18+0x14c0>
 8015568:	ed5f 7a6a 	vldr	s15, [pc, #-424]	; 80153c4 <MEMS_runMagCal.constprop.18+0x255c>
 801556c:	f7ff b87a 	b.w	8014664 <MEMS_runMagCal.constprop.18+0x17fc>
 8015570:	f89b 3025 	ldrb.w	r3, [fp, #37]	; 0x25
 8015574:	42a3      	cmp	r3, r4
 8015576:	f240 80fa 	bls.w	801576e <MEMS_runMagCal.constprop.18+0x2906>
 801557a:	2300      	movs	r3, #0
 801557c:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 80153c4 <MEMS_runMagCal.constprop.18+0x255c>
 8015580:	461a      	mov	r2, r3
 8015582:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015586:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 801558a:	3301      	adds	r3, #1
 801558c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8015590:	ee07 2a10 	vmov	s14, r2
 8015594:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015598:	b25b      	sxtb	r3, r3
 801559a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801559e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155a2:	bfc8      	it	gt
 80155a4:	eef8 7a47 	vcvtgt.f32.u32	s15, s14
 80155a8:	429c      	cmp	r4, r3
 80155aa:	461a      	mov	r2, r3
 80155ac:	dce9      	bgt.n	8015582 <MEMS_runMagCal.constprop.18+0x271a>
 80155ae:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80155b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80155b6:	eef4 7ace 	vcmpe.f32	s15, s28
 80155ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155be:	d4ba      	bmi.n	8015536 <MEMS_runMagCal.constprop.18+0x26ce>
 80155c0:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 80155c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80155c8:	3401      	adds	r4, #1
 80155ca:	b2e4      	uxtb	r4, r4
 80155cc:	1e67      	subs	r7, r4, #1
 80155ce:	f04f 0e18 	mov.w	lr, #24
 80155d2:	fb0e b707 	mla	r7, lr, r7, fp
 80155d6:	3728      	adds	r7, #40	; 0x28
 80155d8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80155da:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80155de:	f88b 4024 	strb.w	r4, [fp, #36]	; 0x24
 80155e2:	e887 0003 	stmia.w	r7, {r0, r1}
 80155e6:	e7ac      	b.n	8015542 <MEMS_runMagCal.constprop.18+0x26da>
 80155e8:	f04f 0c00 	mov.w	ip, #0
 80155ec:	f10d 0e64 	add.w	lr, sp, #100	; 0x64
 80155f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80155f4:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
 80155f8:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 80155fc:	3728      	adds	r7, #40	; 0x28
 80155fe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015600:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015604:	e887 0003 	stmia.w	r7, {r0, r1}
 8015608:	f7fe be7f 	b.w	801430a <MEMS_runMagCal.constprop.18+0x14a2>
 801560c:	f8cd 8008 	str.w	r8, [sp, #8]
 8015610:	2c00      	cmp	r4, #0
 8015612:	f47f aeb7 	bne.w	8015384 <MEMS_runMagCal.constprop.18+0x251c>
 8015616:	f7fe be6d 	b.w	80142f4 <MEMS_runMagCal.constprop.18+0x148c>
 801561a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801561e:	f7fe bfb9 	b.w	8014594 <MEMS_runMagCal.constprop.18+0x172c>
 8015622:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8015626:	ee37 7a26 	vadd.f32	s14, s14, s13
 801562a:	f7fe bf8e 	b.w	801454a <MEMS_runMagCal.constprop.18+0x16e2>
 801562e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8015632:	f7fe bf69 	b.w	8014508 <MEMS_runMagCal.constprop.18+0x16a0>
 8015636:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801563a:	ee37 7a26 	vadd.f32	s14, s14, s13
 801563e:	f7fe bf3e 	b.w	80144be <MEMS_runMagCal.constprop.18+0x1656>
 8015642:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8015646:	f7fe bf19 	b.w	801447c <MEMS_runMagCal.constprop.18+0x1614>
 801564a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801564e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015652:	f7fe beee 	b.w	8014432 <MEMS_runMagCal.constprop.18+0x15ca>
 8015656:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801565a:	f7fe bec9 	b.w	80143f0 <MEMS_runMagCal.constprop.18+0x1588>
 801565e:	2303      	movs	r3, #3
 8015660:	e48a      	b.n	8014f78 <MEMS_runMagCal.constprop.18+0x2110>
 8015662:	3201      	adds	r2, #1
 8015664:	fb92 f0f1 	sdiv	r0, r2, r1
 8015668:	fb01 2210 	mls	r2, r1, r0, r2
 801566c:	b290      	uxth	r0, r2
 801566e:	f7ff bbf1 	b.w	8014e54 <MEMS_runMagCal.constprop.18+0x1fec>
 8015672:	fb93 f7f5 	sdiv	r7, r3, r5
 8015676:	fb05 3317 	mls	r3, r5, r7, r3
 801567a:	b21f      	sxth	r7, r3
 801567c:	f7ff bb40 	b.w	8014d00 <MEMS_runMagCal.constprop.18+0x1e98>
 8015680:	2303      	movs	r3, #3
 8015682:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 8015686:	f7ff bb1d 	b.w	8014cc4 <MEMS_runMagCal.constprop.18+0x1e5c>
 801568a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801568e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015692:	f7fe be8a 	b.w	80143aa <MEMS_runMagCal.constprop.18+0x1542>
 8015696:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801569a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801569e:	f7fe be84 	b.w	80143aa <MEMS_runMagCal.constprop.18+0x1542>
 80156a2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80156a6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80156aa:	f7fe bfd9 	b.w	8014660 <MEMS_runMagCal.constprop.18+0x17f8>
 80156ae:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80156b2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80156b6:	f7fe bfd3 	b.w	8014660 <MEMS_runMagCal.constprop.18+0x17f8>
 80156ba:	49b5      	ldr	r1, [pc, #724]	; (8015990 <MEMS_runMagCal.constprop.18+0x2b28>)
 80156bc:	428b      	cmp	r3, r1
 80156be:	d815      	bhi.n	80156ec <MEMS_runMagCal.constprop.18+0x2884>
 80156c0:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 80156c4:	ee07 3a10 	vmov	s14, r3
 80156c8:	ed9f 6ab2 	vldr	s12, [pc, #712]	; 8015994 <MEMS_runMagCal.constprop.18+0x2b2c>
 80156cc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80156d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80156d4:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80156d8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80156dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80156e0:	f7fe bf9d 	b.w	801461e <MEMS_runMagCal.constprop.18+0x17b6>
 80156e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80156e8:	f7fe bf99 	b.w	801461e <MEMS_runMagCal.constprop.18+0x17b6>
 80156ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80156f0:	f7fe bf95 	b.w	801461e <MEMS_runMagCal.constprop.18+0x17b6>
 80156f4:	4aa6      	ldr	r2, [pc, #664]	; (8015990 <MEMS_runMagCal.constprop.18+0x2b28>)
 80156f6:	4293      	cmp	r3, r2
 80156f8:	d817      	bhi.n	801572a <MEMS_runMagCal.constprop.18+0x28c2>
 80156fa:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 80156fe:	ee07 3a90 	vmov	s15, r3
 8015702:	ed9f 6aa4 	vldr	s12, [pc, #656]	; 8015994 <MEMS_runMagCal.constprop.18+0x2b2c>
 8015706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801570a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801570e:	eee7 6ac6 	vfms.f32	s13, s15, s12
 8015712:	eef0 7a66 	vmov.f32	s15, s13
 8015716:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 801571a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801571e:	f7fe be25 	b.w	801436c <MEMS_runMagCal.constprop.18+0x1504>
 8015722:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8015726:	f7fe be21 	b.w	801436c <MEMS_runMagCal.constprop.18+0x1504>
 801572a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801572e:	f7fe be1d 	b.w	801436c <MEMS_runMagCal.constprop.18+0x1504>
 8015732:	f04f 32ff 	mov.w	r2, #4294967295
 8015736:	f7ff bb83 	b.w	8014e40 <MEMS_runMagCal.constprop.18+0x1fd8>
 801573a:	eddf da97 	vldr	s27, [pc, #604]	; 8015998 <MEMS_runMagCal.constprop.18+0x2b30>
 801573e:	ed9d ba13 	vldr	s22, [sp, #76]	; 0x4c
 8015742:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
 8015746:	ed95 ca00 	vldr	s24, [r5]
 801574a:	eddd 9a11 	vldr	s19, [sp, #68]	; 0x44
 801574e:	ed9d aa14 	vldr	s20, [sp, #80]	; 0x50
 8015752:	ed95 8a01 	vldr	s16, [r5, #4]
 8015756:	eddd 8a12 	vldr	s17, [sp, #72]	; 0x48
 801575a:	ed9d 9a15 	vldr	s18, [sp, #84]	; 0x54
 801575e:	edd5 ea02 	vldr	s29, [r5, #8]
 8015762:	f7ff b9bb 	b.w	8014adc <MEMS_runMagCal.constprop.18+0x1c74>
 8015766:	2301      	movs	r3, #1
 8015768:	e406      	b.n	8014f78 <MEMS_runMagCal.constprop.18+0x2110>
 801576a:	2302      	movs	r3, #2
 801576c:	e404      	b.n	8014f78 <MEMS_runMagCal.constprop.18+0x2110>
 801576e:	4b8b      	ldr	r3, [pc, #556]	; (801599c <MEMS_runMagCal.constprop.18+0x2b34>)
 8015770:	f8dd 8000 	ldr.w	r8, [sp]
 8015774:	9301      	str	r3, [sp, #4]
 8015776:	eeb0 0a6b 	vmov.f32	s0, s23
 801577a:	4619      	mov	r1, r3
 801577c:	4642      	mov	r2, r8
 801577e:	a819      	add	r0, sp, #100	; 0x64
 8015780:	4699      	mov	r9, r3
 8015782:	f7fd f9bf 	bl	8012b04 <MEMS_compareCalScore>
 8015786:	2c01      	cmp	r4, #1
 8015788:	4607      	mov	r7, r0
 801578a:	7030      	strb	r0, [r6, #0]
 801578c:	d937      	bls.n	80157fe <MEMS_runMagCal.constprop.18+0x2996>
 801578e:	eeb0 0a6b 	vmov.f32	s0, s23
 8015792:	4642      	mov	r2, r8
 8015794:	f109 0118 	add.w	r1, r9, #24
 8015798:	a819      	add	r0, sp, #100	; 0x64
 801579a:	f8cd 9004 	str.w	r9, [sp, #4]
 801579e:	f7fd f9b1 	bl	8012b04 <MEMS_compareCalScore>
 80157a2:	2c02      	cmp	r4, #2
 80157a4:	4407      	add	r7, r0
 80157a6:	b2ff      	uxtb	r7, r7
 80157a8:	7070      	strb	r0, [r6, #1]
 80157aa:	d028      	beq.n	80157fe <MEMS_runMagCal.constprop.18+0x2996>
 80157ac:	eeb0 0a6b 	vmov.f32	s0, s23
 80157b0:	4642      	mov	r2, r8
 80157b2:	f109 0130 	add.w	r1, r9, #48	; 0x30
 80157b6:	a819      	add	r0, sp, #100	; 0x64
 80157b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80157bc:	f7fd f9a2 	bl	8012b04 <MEMS_compareCalScore>
 80157c0:	2c03      	cmp	r4, #3
 80157c2:	4407      	add	r7, r0
 80157c4:	b2ff      	uxtb	r7, r7
 80157c6:	70b0      	strb	r0, [r6, #2]
 80157c8:	d019      	beq.n	80157fe <MEMS_runMagCal.constprop.18+0x2996>
 80157ca:	9b01      	ldr	r3, [sp, #4]
 80157cc:	eeb0 0a6b 	vmov.f32	s0, s23
 80157d0:	4642      	mov	r2, r8
 80157d2:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80157d6:	a819      	add	r0, sp, #100	; 0x64
 80157d8:	f7fd f994 	bl	8012b04 <MEMS_compareCalScore>
 80157dc:	2c04      	cmp	r4, #4
 80157de:	4407      	add	r7, r0
 80157e0:	b2ff      	uxtb	r7, r7
 80157e2:	70f0      	strb	r0, [r6, #3]
 80157e4:	d00b      	beq.n	80157fe <MEMS_runMagCal.constprop.18+0x2996>
 80157e6:	9b01      	ldr	r3, [sp, #4]
 80157e8:	eeb0 0a6b 	vmov.f32	s0, s23
 80157ec:	4642      	mov	r2, r8
 80157ee:	f103 0160 	add.w	r1, r3, #96	; 0x60
 80157f2:	a819      	add	r0, sp, #100	; 0x64
 80157f4:	f7fd f986 	bl	8012b04 <MEMS_compareCalScore>
 80157f8:	4407      	add	r7, r0
 80157fa:	b2ff      	uxtb	r7, r7
 80157fc:	7130      	strb	r0, [r6, #4]
 80157fe:	2f00      	cmp	r7, #0
 8015800:	f43f ae99 	beq.w	8015536 <MEMS_runMagCal.constprop.18+0x26ce>
 8015804:	9503      	str	r5, [sp, #12]
 8015806:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 80159ac <MEMS_runMagCal.constprop.18+0x2b44>
 801580a:	f04f 0901 	mov.w	r9, #1
 801580e:	2700      	movs	r7, #0
 8015810:	4625      	mov	r5, r4
 8015812:	e005      	b.n	8015820 <MEMS_runMagCal.constprop.18+0x29b8>
 8015814:	fa5f f289 	uxtb.w	r2, r9
 8015818:	4295      	cmp	r5, r2
 801581a:	d95e      	bls.n	80158da <MEMS_runMagCal.constprop.18+0x2a72>
 801581c:	f109 0901 	add.w	r9, r9, #1
 8015820:	eb06 0409 	add.w	r4, r6, r9
 8015824:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8015828:	2a00      	cmp	r2, #0
 801582a:	d0f3      	beq.n	8015814 <MEMS_runMagCal.constprop.18+0x29ac>
 801582c:	fa5f f889 	uxtb.w	r8, r9
 8015830:	4545      	cmp	r5, r8
 8015832:	d952      	bls.n	80158da <MEMS_runMagCal.constprop.18+0x2a72>
 8015834:	f816 2009 	ldrb.w	r2, [r6, r9]
 8015838:	b17a      	cbz	r2, 801585a <MEMS_runMagCal.constprop.18+0x29f2>
 801583a:	2318      	movs	r3, #24
 801583c:	fb03 f009 	mul.w	r0, r3, r9
 8015840:	9b01      	ldr	r3, [sp, #4]
 8015842:	9a00      	ldr	r2, [sp, #0]
 8015844:	eb0a 0100 	add.w	r1, sl, r0
 8015848:	eeb0 0a6b 	vmov.f32	s0, s23
 801584c:	4418      	add	r0, r3
 801584e:	f7fd f959 	bl	8012b04 <MEMS_compareCalScore>
 8015852:	2800      	cmp	r0, #0
 8015854:	d06d      	beq.n	8015932 <MEMS_runMagCal.constprop.18+0x2aca>
 8015856:	f806 7009 	strb.w	r7, [r6, r9]
 801585a:	f108 0201 	add.w	r2, r8, #1
 801585e:	b2d2      	uxtb	r2, r2
 8015860:	4295      	cmp	r5, r2
 8015862:	d9db      	bls.n	801581c <MEMS_runMagCal.constprop.18+0x29b4>
 8015864:	7862      	ldrb	r2, [r4, #1]
 8015866:	b172      	cbz	r2, 8015886 <MEMS_runMagCal.constprop.18+0x2a1e>
 8015868:	2318      	movs	r3, #24
 801586a:	fb03 f009 	mul.w	r0, r3, r9
 801586e:	4b4c      	ldr	r3, [pc, #304]	; (80159a0 <MEMS_runMagCal.constprop.18+0x2b38>)
 8015870:	9a00      	ldr	r2, [sp, #0]
 8015872:	eb0a 0100 	add.w	r1, sl, r0
 8015876:	eeb0 0a6b 	vmov.f32	s0, s23
 801587a:	4418      	add	r0, r3
 801587c:	f7fd f942 	bl	8012b04 <MEMS_compareCalScore>
 8015880:	2800      	cmp	r0, #0
 8015882:	d056      	beq.n	8015932 <MEMS_runMagCal.constprop.18+0x2aca>
 8015884:	7067      	strb	r7, [r4, #1]
 8015886:	f108 0202 	add.w	r2, r8, #2
 801588a:	b2d2      	uxtb	r2, r2
 801588c:	4295      	cmp	r5, r2
 801588e:	d9c5      	bls.n	801581c <MEMS_runMagCal.constprop.18+0x29b4>
 8015890:	78a2      	ldrb	r2, [r4, #2]
 8015892:	b172      	cbz	r2, 80158b2 <MEMS_runMagCal.constprop.18+0x2a4a>
 8015894:	2318      	movs	r3, #24
 8015896:	fb03 f009 	mul.w	r0, r3, r9
 801589a:	4b42      	ldr	r3, [pc, #264]	; (80159a4 <MEMS_runMagCal.constprop.18+0x2b3c>)
 801589c:	9a00      	ldr	r2, [sp, #0]
 801589e:	eb0a 0100 	add.w	r1, sl, r0
 80158a2:	eeb0 0a6b 	vmov.f32	s0, s23
 80158a6:	4418      	add	r0, r3
 80158a8:	f7fd f92c 	bl	8012b04 <MEMS_compareCalScore>
 80158ac:	2800      	cmp	r0, #0
 80158ae:	d040      	beq.n	8015932 <MEMS_runMagCal.constprop.18+0x2aca>
 80158b0:	70a7      	strb	r7, [r4, #2]
 80158b2:	f108 0203 	add.w	r2, r8, #3
 80158b6:	b2d2      	uxtb	r2, r2
 80158b8:	4295      	cmp	r5, r2
 80158ba:	d9af      	bls.n	801581c <MEMS_runMagCal.constprop.18+0x29b4>
 80158bc:	7932      	ldrb	r2, [r6, #4]
 80158be:	2a00      	cmp	r2, #0
 80158c0:	d0ac      	beq.n	801581c <MEMS_runMagCal.constprop.18+0x29b4>
 80158c2:	2318      	movs	r3, #24
 80158c4:	eeb0 0a6b 	vmov.f32	s0, s23
 80158c8:	9a00      	ldr	r2, [sp, #0]
 80158ca:	4837      	ldr	r0, [pc, #220]	; (80159a8 <MEMS_runMagCal.constprop.18+0x2b40>)
 80158cc:	fb03 a109 	mla	r1, r3, r9, sl
 80158d0:	f7fd f918 	bl	8012b04 <MEMS_compareCalScore>
 80158d4:	b368      	cbz	r0, 8015932 <MEMS_runMagCal.constprop.18+0x2aca>
 80158d6:	7137      	strb	r7, [r6, #4]
 80158d8:	e7a0      	b.n	801581c <MEMS_runMagCal.constprop.18+0x29b4>
 80158da:	7833      	ldrb	r3, [r6, #0]
 80158dc:	462c      	mov	r4, r5
 80158de:	9d03      	ldr	r5, [sp, #12]
 80158e0:	bb83      	cbnz	r3, 8015944 <MEMS_runMagCal.constprop.18+0x2adc>
 80158e2:	2c01      	cmp	r4, #1
 80158e4:	f67f ae27 	bls.w	8015536 <MEMS_runMagCal.constprop.18+0x26ce>
 80158e8:	7873      	ldrb	r3, [r6, #1]
 80158ea:	bb4b      	cbnz	r3, 8015940 <MEMS_runMagCal.constprop.18+0x2ad8>
 80158ec:	2c02      	cmp	r4, #2
 80158ee:	f43f ae22 	beq.w	8015536 <MEMS_runMagCal.constprop.18+0x26ce>
 80158f2:	78b3      	ldrb	r3, [r6, #2]
 80158f4:	bb13      	cbnz	r3, 801593c <MEMS_runMagCal.constprop.18+0x2ad4>
 80158f6:	2c03      	cmp	r4, #3
 80158f8:	f43f ae1d 	beq.w	8015536 <MEMS_runMagCal.constprop.18+0x26ce>
 80158fc:	78f3      	ldrb	r3, [r6, #3]
 80158fe:	b9db      	cbnz	r3, 8015938 <MEMS_runMagCal.constprop.18+0x2ad0>
 8015900:	2c04      	cmp	r4, #4
 8015902:	f43f ae18 	beq.w	8015536 <MEMS_runMagCal.constprop.18+0x26ce>
 8015906:	7933      	ldrb	r3, [r6, #4]
 8015908:	2b00      	cmp	r3, #0
 801590a:	f43f ae14 	beq.w	8015536 <MEMS_runMagCal.constprop.18+0x26ce>
 801590e:	2404      	movs	r4, #4
 8015910:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8015914:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015918:	2718      	movs	r7, #24
 801591a:	fb07 b404 	mla	r4, r7, r4, fp
 801591e:	f104 0728 	add.w	r7, r4, #40	; 0x28
 8015922:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015924:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8015928:	f89b 4024 	ldrb.w	r4, [fp, #36]	; 0x24
 801592c:	e887 0003 	stmia.w	r7, {r0, r1}
 8015930:	e607      	b.n	8015542 <MEMS_runMagCal.constprop.18+0x26da>
 8015932:	f804 7c01 	strb.w	r7, [r4, #-1]
 8015936:	e771      	b.n	801581c <MEMS_runMagCal.constprop.18+0x29b4>
 8015938:	2403      	movs	r4, #3
 801593a:	e7e9      	b.n	8015910 <MEMS_runMagCal.constprop.18+0x2aa8>
 801593c:	2402      	movs	r4, #2
 801593e:	e7e7      	b.n	8015910 <MEMS_runMagCal.constprop.18+0x2aa8>
 8015940:	2401      	movs	r4, #1
 8015942:	e7e5      	b.n	8015910 <MEMS_runMagCal.constprop.18+0x2aa8>
 8015944:	2400      	movs	r4, #0
 8015946:	e7e3      	b.n	8015910 <MEMS_runMagCal.constprop.18+0x2aa8>
 8015948:	2800      	cmp	r0, #0
 801594a:	bfb8      	it	lt
 801594c:	eba2 000e 	sublt.w	r0, r2, lr
 8015950:	b200      	sxth	r0, r0
 8015952:	e5b1      	b.n	80154b8 <MEMS_runMagCal.constprop.18+0x2650>
 8015954:	b29b      	uxth	r3, r3
 8015956:	b292      	uxth	r2, r2
 8015958:	f1bc 0f00 	cmp.w	ip, #0
 801595c:	bfb4      	ite	lt
 801595e:	1ad3      	sublt	r3, r2, r3
 8015960:	1a9b      	subge	r3, r3, r2
 8015962:	b21b      	sxth	r3, r3
 8015964:	e573      	b.n	801544e <MEMS_runMagCal.constprop.18+0x25e6>
 8015966:	9b02      	ldr	r3, [sp, #8]
 8015968:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801596a:	2b01      	cmp	r3, #1
 801596c:	d04e      	beq.n	8015a0c <MEMS_runMagCal.constprop.18+0x2ba4>
 801596e:	2c01      	cmp	r4, #1
 8015970:	f67f ad05 	bls.w	801537e <MEMS_runMagCal.constprop.18+0x2516>
 8015974:	f04f 0a00 	mov.w	sl, #0
 8015978:	2301      	movs	r3, #1
 801597a:	9703      	str	r7, [sp, #12]
 801597c:	f8cd 8010 	str.w	r8, [sp, #16]
 8015980:	f8cd a008 	str.w	sl, [sp, #8]
 8015984:	46a0      	mov	r8, r4
 8015986:	4699      	mov	r9, r3
 8015988:	461f      	mov	r7, r3
 801598a:	4654      	mov	r4, sl
 801598c:	e014      	b.n	80159b8 <MEMS_runMagCal.constprop.18+0x2b50>
 801598e:	bf00      	nop
 8015990:	0001517f 	.word	0x0001517f
 8015994:	367e3344 	.word	0x367e3344
 8015998:	00000000 	.word	0x00000000
 801599c:	20001730 	.word	0x20001730
 80159a0:	20001748 	.word	0x20001748
 80159a4:	20001760 	.word	0x20001760
 80159a8:	20001790 	.word	0x20001790
 80159ac:	20001718 	.word	0x20001718
 80159b0:	fa5f f98c 	uxtb.w	r9, ip
 80159b4:	45c8      	cmp	r8, r9
 80159b6:	d920      	bls.n	80159fa <MEMS_runMagCal.constprop.18+0x2b92>
 80159b8:	2318      	movs	r3, #24
 80159ba:	2228      	movs	r2, #40	; 0x28
 80159bc:	fb13 210a 	smlabb	r1, r3, sl, r2
 80159c0:	fb13 2009 	smlabb	r0, r3, r9, r2
 80159c4:	4459      	add	r1, fp
 80159c6:	4458      	add	r0, fp
 80159c8:	eeb0 0a6b 	vmov.f32	s0, s23
 80159cc:	f7fb fe80 	bl	80116d0 <MEMS_checkConsistency.constprop.32>
 80159d0:	9902      	ldr	r1, [sp, #8]
 80159d2:	3101      	adds	r1, #1
 80159d4:	b24b      	sxtb	r3, r1
 80159d6:	2801      	cmp	r0, #1
 80159d8:	f109 0c01 	add.w	ip, r9, #1
 80159dc:	9302      	str	r3, [sp, #8]
 80159de:	d1e7      	bne.n	80159b0 <MEMS_runMagCal.constprop.18+0x2b48>
 80159e0:	f815 100a 	ldrb.w	r1, [r5, sl]
 80159e4:	3101      	adds	r1, #1
 80159e6:	f805 100a 	strb.w	r1, [r5, sl]
 80159ea:	f815 1009 	ldrb.w	r1, [r5, r9]
 80159ee:	3401      	adds	r4, #1
 80159f0:	3101      	adds	r1, #1
 80159f2:	f805 1009 	strb.w	r1, [r5, r9]
 80159f6:	b264      	sxtb	r4, r4
 80159f8:	e7da      	b.n	80159b0 <MEMS_runMagCal.constprop.18+0x2b48>
 80159fa:	f107 0901 	add.w	r9, r7, #1
 80159fe:	fa5f f989 	uxtb.w	r9, r9
 8015a02:	45c8      	cmp	r8, r9
 8015a04:	d926      	bls.n	8015a54 <MEMS_runMagCal.constprop.18+0x2bec>
 8015a06:	46ba      	mov	sl, r7
 8015a08:	464f      	mov	r7, r9
 8015a0a:	e7d5      	b.n	80159b8 <MEMS_runMagCal.constprop.18+0x2b50>
 8015a0c:	f04f 0c00 	mov.w	ip, #0
 8015a10:	46e6      	mov	lr, ip
 8015a12:	46e1      	mov	r9, ip
 8015a14:	f04f 0818 	mov.w	r8, #24
 8015a18:	e006      	b.n	8015a28 <MEMS_runMagCal.constprop.18+0x2bc0>
 8015a1a:	f10e 0e01 	add.w	lr, lr, #1
 8015a1e:	fa5f fe8e 	uxtb.w	lr, lr
 8015a22:	45a6      	cmp	lr, r4
 8015a24:	f080 80bd 	bcs.w	8015ba2 <MEMS_runMagCal.constprop.18+0x2d3a>
 8015a28:	f816 300e 	ldrb.w	r3, [r6, lr]
 8015a2c:	2b01      	cmp	r3, #1
 8015a2e:	d1f4      	bne.n	8015a1a <MEMS_runMagCal.constprop.18+0x2bb2>
 8015a30:	ebae 070c 	sub.w	r7, lr, ip
 8015a34:	b2ff      	uxtb	r7, r7
 8015a36:	b27b      	sxtb	r3, r7
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	db04      	blt.n	8015a46 <MEMS_runMagCal.constprop.18+0x2bde>
 8015a3c:	f89b 2025 	ldrb.w	r2, [fp, #37]	; 0x25
 8015a40:	4293      	cmp	r3, r2
 8015a42:	f2c0 80b5 	blt.w	8015bb0 <MEMS_runMagCal.constprop.18+0x2d48>
 8015a46:	f10c 0c01 	add.w	ip, ip, #1
 8015a4a:	f89b 4024 	ldrb.w	r4, [fp, #36]	; 0x24
 8015a4e:	fa5f fc8c 	uxtb.w	ip, ip
 8015a52:	e7e2      	b.n	8015a1a <MEMS_runMagCal.constprop.18+0x2bb2>
 8015a54:	9b02      	ldr	r3, [sp, #8]
 8015a56:	9f03      	ldr	r7, [sp, #12]
 8015a58:	4622      	mov	r2, r4
 8015a5a:	1a9b      	subs	r3, r3, r2
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	4644      	mov	r4, r8
 8015a60:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015a64:	da5c      	bge.n	8015b20 <MEMS_runMagCal.constprop.18+0x2cb8>
 8015a66:	eba4 0308 	sub.w	r3, r4, r8
 8015a6a:	4598      	cmp	r8, r3
 8015a6c:	da58      	bge.n	8015b20 <MEMS_runMagCal.constprop.18+0x2cb8>
 8015a6e:	782b      	ldrb	r3, [r5, #0]
 8015a70:	786a      	ldrb	r2, [r5, #1]
 8015a72:	429a      	cmp	r2, r3
 8015a74:	bf38      	it	cc
 8015a76:	461a      	movcc	r2, r3
 8015a78:	2c02      	cmp	r4, #2
 8015a7a:	d90f      	bls.n	8015a9c <MEMS_runMagCal.constprop.18+0x2c34>
 8015a7c:	78a9      	ldrb	r1, [r5, #2]
 8015a7e:	428a      	cmp	r2, r1
 8015a80:	bf38      	it	cc
 8015a82:	460a      	movcc	r2, r1
 8015a84:	2c03      	cmp	r4, #3
 8015a86:	d009      	beq.n	8015a9c <MEMS_runMagCal.constprop.18+0x2c34>
 8015a88:	78e9      	ldrb	r1, [r5, #3]
 8015a8a:	428a      	cmp	r2, r1
 8015a8c:	bf38      	it	cc
 8015a8e:	460a      	movcc	r2, r1
 8015a90:	2c04      	cmp	r4, #4
 8015a92:	d003      	beq.n	8015a9c <MEMS_runMagCal.constprop.18+0x2c34>
 8015a94:	7929      	ldrb	r1, [r5, #4]
 8015a96:	428a      	cmp	r2, r1
 8015a98:	bf38      	it	cc
 8015a9a:	460a      	movcc	r2, r1
 8015a9c:	4293      	cmp	r3, r2
 8015a9e:	7869      	ldrb	r1, [r5, #1]
 8015aa0:	bf36      	itet	cc
 8015aa2:	461a      	movcc	r2, r3
 8015aa4:	f04f 33ff 	movcs.w	r3, #4294967295
 8015aa8:	2300      	movcc	r3, #0
 8015aaa:	4291      	cmp	r1, r2
 8015aac:	d276      	bcs.n	8015b9c <MEMS_runMagCal.constprop.18+0x2d34>
 8015aae:	2c02      	cmp	r4, #2
 8015ab0:	d972      	bls.n	8015b98 <MEMS_runMagCal.constprop.18+0x2d30>
 8015ab2:	460a      	mov	r2, r1
 8015ab4:	2301      	movs	r3, #1
 8015ab6:	78a9      	ldrb	r1, [r5, #2]
 8015ab8:	428a      	cmp	r2, r1
 8015aba:	d96a      	bls.n	8015b92 <MEMS_runMagCal.constprop.18+0x2d2a>
 8015abc:	2c03      	cmp	r4, #3
 8015abe:	d066      	beq.n	8015b8e <MEMS_runMagCal.constprop.18+0x2d26>
 8015ac0:	460a      	mov	r2, r1
 8015ac2:	2302      	movs	r3, #2
 8015ac4:	78e9      	ldrb	r1, [r5, #3]
 8015ac6:	428a      	cmp	r2, r1
 8015ac8:	d95e      	bls.n	8015b88 <MEMS_runMagCal.constprop.18+0x2d20>
 8015aca:	2c04      	cmp	r4, #4
 8015acc:	d05a      	beq.n	8015b84 <MEMS_runMagCal.constprop.18+0x2d1c>
 8015ace:	460a      	mov	r2, r1
 8015ad0:	2303      	movs	r3, #3
 8015ad2:	7929      	ldrb	r1, [r5, #4]
 8015ad4:	4291      	cmp	r1, r2
 8015ad6:	d350      	bcc.n	8015b7a <MEMS_runMagCal.constprop.18+0x2d12>
 8015ad8:	1c5a      	adds	r2, r3, #1
 8015ada:	d032      	beq.n	8015b42 <MEMS_runMagCal.constprop.18+0x2cda>
 8015adc:	f89b 2025 	ldrb.w	r2, [fp, #37]	; 0x25
 8015ae0:	4293      	cmp	r3, r2
 8015ae2:	f6bf ac4e 	bge.w	8015382 <MEMS_runMagCal.constprop.18+0x251a>
 8015ae6:	3c01      	subs	r4, #1
 8015ae8:	f88b 4024 	strb.w	r4, [fp, #36]	; 0x24
 8015aec:	b2dc      	uxtb	r4, r3
 8015aee:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8015af2:	00db      	lsls	r3, r3, #3
 8015af4:	f103 0e40 	add.w	lr, r3, #64	; 0x40
 8015af8:	3328      	adds	r3, #40	; 0x28
 8015afa:	eb0b 0c03 	add.w	ip, fp, r3
 8015afe:	f89b 3025 	ldrb.w	r3, [fp, #37]	; 0x25
 8015b02:	1e5a      	subs	r2, r3, #1
 8015b04:	4294      	cmp	r4, r2
 8015b06:	44de      	add	lr, fp
 8015b08:	da0c      	bge.n	8015b24 <MEMS_runMagCal.constprop.18+0x2cbc>
 8015b0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015b0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b12:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015b16:	3401      	adds	r4, #1
 8015b18:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015b1c:	b2e4      	uxtb	r4, r4
 8015b1e:	e7e6      	b.n	8015aee <MEMS_runMagCal.constprop.18+0x2c86>
 8015b20:	2700      	movs	r7, #0
 8015b22:	e42e      	b.n	8015382 <MEMS_runMagCal.constprop.18+0x251a>
 8015b24:	2218      	movs	r2, #24
 8015b26:	fb02 b303 	mla	r3, r2, r3, fp
 8015b2a:	f89b 4024 	ldrb.w	r4, [fp, #36]	; 0x24
 8015b2e:	9702      	str	r7, [sp, #8]
 8015b30:	2200      	movs	r2, #0
 8015b32:	629a      	str	r2, [r3, #40]	; 0x28
 8015b34:	eddb ba01 	vldr	s23, [fp, #4]
 8015b38:	2c00      	cmp	r4, #0
 8015b3a:	f47f ac23 	bne.w	8015384 <MEMS_runMagCal.constprop.18+0x251c>
 8015b3e:	f7fe bbd9 	b.w	80142f4 <MEMS_runMagCal.constprop.18+0x148c>
 8015b42:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015b46:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8015b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b4e:	d8e7      	bhi.n	8015b20 <MEMS_runMagCal.constprop.18+0x2cb8>
 8015b50:	f04f 0800 	mov.w	r8, #0
 8015b54:	f04f 0918 	mov.w	r9, #24
 8015b58:	9b01      	ldr	r3, [sp, #4]
 8015b5a:	fb09 3108 	mla	r1, r9, r8, r3
 8015b5e:	fa5f f388 	uxtb.w	r3, r8
 8015b62:	429c      	cmp	r4, r3
 8015b64:	eeb0 0a6b 	vmov.f32	s0, s23
 8015b68:	a819      	add	r0, sp, #100	; 0x64
 8015b6a:	d9d9      	bls.n	8015b20 <MEMS_runMagCal.constprop.18+0x2cb8>
 8015b6c:	f7fb fdb0 	bl	80116d0 <MEMS_checkConsistency.constprop.32>
 8015b70:	f108 0301 	add.w	r3, r8, #1
 8015b74:	b118      	cbz	r0, 8015b7e <MEMS_runMagCal.constprop.18+0x2d16>
 8015b76:	4698      	mov	r8, r3
 8015b78:	e7ee      	b.n	8015b58 <MEMS_runMagCal.constprop.18+0x2cf0>
 8015b7a:	2304      	movs	r3, #4
 8015b7c:	e7ae      	b.n	8015adc <MEMS_runMagCal.constprop.18+0x2c74>
 8015b7e:	fa4f f388 	sxtb.w	r3, r8
 8015b82:	e7ab      	b.n	8015adc <MEMS_runMagCal.constprop.18+0x2c74>
 8015b84:	2303      	movs	r3, #3
 8015b86:	e7a9      	b.n	8015adc <MEMS_runMagCal.constprop.18+0x2c74>
 8015b88:	2c04      	cmp	r4, #4
 8015b8a:	d1a2      	bne.n	8015ad2 <MEMS_runMagCal.constprop.18+0x2c6a>
 8015b8c:	e7a4      	b.n	8015ad8 <MEMS_runMagCal.constprop.18+0x2c70>
 8015b8e:	2302      	movs	r3, #2
 8015b90:	e7a4      	b.n	8015adc <MEMS_runMagCal.constprop.18+0x2c74>
 8015b92:	2c03      	cmp	r4, #3
 8015b94:	d196      	bne.n	8015ac4 <MEMS_runMagCal.constprop.18+0x2c5c>
 8015b96:	e79f      	b.n	8015ad8 <MEMS_runMagCal.constprop.18+0x2c70>
 8015b98:	2301      	movs	r3, #1
 8015b9a:	e79f      	b.n	8015adc <MEMS_runMagCal.constprop.18+0x2c74>
 8015b9c:	2c02      	cmp	r4, #2
 8015b9e:	d88a      	bhi.n	8015ab6 <MEMS_runMagCal.constprop.18+0x2c4e>
 8015ba0:	e79a      	b.n	8015ad8 <MEMS_runMagCal.constprop.18+0x2c70>
 8015ba2:	eddb ba01 	vldr	s23, [fp, #4]
 8015ba6:	2c00      	cmp	r4, #0
 8015ba8:	f47f abec 	bne.w	8015384 <MEMS_runMagCal.constprop.18+0x251c>
 8015bac:	f7fe bba2 	b.w	80142f4 <MEMS_runMagCal.constprop.18+0x148c>
 8015bb0:	2c01      	cmp	r4, #1
 8015bb2:	4623      	mov	r3, r4
 8015bb4:	bf38      	it	cc
 8015bb6:	2301      	movcc	r3, #1
 8015bb8:	3b01      	subs	r3, #1
 8015bba:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
 8015bbe:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8015bc2:	00db      	lsls	r3, r3, #3
 8015bc4:	f103 0a40 	add.w	sl, r3, #64	; 0x40
 8015bc8:	3328      	adds	r3, #40	; 0x28
 8015bca:	eb0b 0403 	add.w	r4, fp, r3
 8015bce:	f89b 3025 	ldrb.w	r3, [fp, #37]	; 0x25
 8015bd2:	1e5a      	subs	r2, r3, #1
 8015bd4:	4297      	cmp	r7, r2
 8015bd6:	44da      	add	sl, fp
 8015bd8:	da12      	bge.n	8015c00 <MEMS_runMagCal.constprop.18+0x2d98>
 8015bda:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8015bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015be0:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8015be4:	3701      	adds	r7, #1
 8015be6:	e884 0003 	stmia.w	r4, {r0, r1}
 8015bea:	b2ff      	uxtb	r7, r7
 8015bec:	e7e7      	b.n	8015bbe <MEMS_runMagCal.constprop.18+0x2d56>
 8015bee:	796b      	ldrb	r3, [r5, #5]
 8015bf0:	f108 0801 	add.w	r8, r8, #1
 8015bf4:	3301      	adds	r3, #1
 8015bf6:	fa4f f888 	sxtb.w	r8, r8
 8015bfa:	716b      	strb	r3, [r5, #5]
 8015bfc:	f7ff bacc 	b.w	8015198 <MEMS_runMagCal.constprop.18+0x2330>
 8015c00:	fb08 b303 	mla	r3, r8, r3, fp
 8015c04:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
 8015c08:	e71d      	b.n	8015a46 <MEMS_runMagCal.constprop.18+0x2bde>
 8015c0a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8015c0e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015c12:	f7fe bc0e 	b.w	8014432 <MEMS_runMagCal.constprop.18+0x15ca>
 8015c16:	495d      	ldr	r1, [pc, #372]	; (8015d8c <MEMS_runMagCal.constprop.18+0x2f24>)
 8015c18:	428b      	cmp	r3, r1
 8015c1a:	d82c      	bhi.n	8015c76 <MEMS_runMagCal.constprop.18+0x2e0e>
 8015c1c:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 8015c20:	ee07 3a10 	vmov	s14, r3
 8015c24:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8015d90 <MEMS_runMagCal.constprop.18+0x2f28>
 8015c28:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015c2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015c30:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8015c34:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8015c38:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015c3c:	f7fe bbd8 	b.w	80143f0 <MEMS_runMagCal.constprop.18+0x1588>
 8015c40:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8015c44:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015c48:	f7fe bc39 	b.w	80144be <MEMS_runMagCal.constprop.18+0x1656>
 8015c4c:	494f      	ldr	r1, [pc, #316]	; (8015d8c <MEMS_runMagCal.constprop.18+0x2f24>)
 8015c4e:	428b      	cmp	r3, r1
 8015c50:	d815      	bhi.n	8015c7e <MEMS_runMagCal.constprop.18+0x2e16>
 8015c52:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 8015c56:	ee07 3a10 	vmov	s14, r3
 8015c5a:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 8015d90 <MEMS_runMagCal.constprop.18+0x2f28>
 8015c5e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015c62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015c66:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8015c6a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8015c6e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015c72:	f7fe bc03 	b.w	801447c <MEMS_runMagCal.constprop.18+0x1614>
 8015c76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015c7a:	f7fe bbb9 	b.w	80143f0 <MEMS_runMagCal.constprop.18+0x1588>
 8015c7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015c82:	f7fe bbfb 	b.w	801447c <MEMS_runMagCal.constprop.18+0x1614>
 8015c86:	792b      	ldrb	r3, [r5, #4]
 8015c88:	f108 0801 	add.w	r8, r8, #1
 8015c8c:	3301      	adds	r3, #1
 8015c8e:	fa4f f888 	sxtb.w	r8, r8
 8015c92:	712b      	strb	r3, [r5, #4]
 8015c94:	f7ff ba74 	b.w	8015180 <MEMS_runMagCal.constprop.18+0x2318>
 8015c98:	78eb      	ldrb	r3, [r5, #3]
 8015c9a:	f108 0801 	add.w	r8, r8, #1
 8015c9e:	3301      	adds	r3, #1
 8015ca0:	fa4f f888 	sxtb.w	r8, r8
 8015ca4:	70eb      	strb	r3, [r5, #3]
 8015ca6:	f7ff ba5f 	b.w	8015168 <MEMS_runMagCal.constprop.18+0x2300>
 8015caa:	78ab      	ldrb	r3, [r5, #2]
 8015cac:	f108 0801 	add.w	r8, r8, #1
 8015cb0:	3301      	adds	r3, #1
 8015cb2:	fa4f f888 	sxtb.w	r8, r8
 8015cb6:	70ab      	strb	r3, [r5, #2]
 8015cb8:	f7ff ba4a 	b.w	8015150 <MEMS_runMagCal.constprop.18+0x22e8>
 8015cbc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8015d94 <MEMS_runMagCal.constprop.18+0x2f2c>
 8015cc0:	eef8 7a66 	vcvt.f32.u32	s15, s13
 8015cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015cc8:	ed9b 7a0a 	vldr	s14, [fp, #40]	; 0x28
 8015ccc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8015cd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cd8:	f53f aa94 	bmi.w	8015204 <MEMS_runMagCal.constprop.18+0x239c>
 8015cdc:	e64a      	b.n	8015974 <MEMS_runMagCal.constprop.18+0x2b0c>
 8015cde:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8015ce2:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015ce6:	f7fe bc30 	b.w	801454a <MEMS_runMagCal.constprop.18+0x16e2>
 8015cea:	4928      	ldr	r1, [pc, #160]	; (8015d8c <MEMS_runMagCal.constprop.18+0x2f24>)
 8015cec:	428b      	cmp	r3, r1
 8015cee:	d81d      	bhi.n	8015d2c <MEMS_runMagCal.constprop.18+0x2ec4>
 8015cf0:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 8015cf4:	ee07 3a10 	vmov	s14, r3
 8015cf8:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8015d90 <MEMS_runMagCal.constprop.18+0x2f28>
 8015cfc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015d00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015d04:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8015d08:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8015d0c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015d10:	f7fe bbfa 	b.w	8014508 <MEMS_runMagCal.constprop.18+0x16a0>
 8015d14:	2701      	movs	r7, #1
 8015d16:	f7fe ba35 	b.w	8014184 <MEMS_runMagCal.constprop.18+0x131c>
 8015d1a:	786b      	ldrb	r3, [r5, #1]
 8015d1c:	f108 0801 	add.w	r8, r8, #1
 8015d20:	3301      	adds	r3, #1
 8015d22:	fa4f f888 	sxtb.w	r8, r8
 8015d26:	706b      	strb	r3, [r5, #1]
 8015d28:	f7ff ba06 	b.w	8015138 <MEMS_runMagCal.constprop.18+0x22d0>
 8015d2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015d30:	f7fe bbea 	b.w	8014508 <MEMS_runMagCal.constprop.18+0x16a0>
 8015d34:	782b      	ldrb	r3, [r5, #0]
 8015d36:	3301      	adds	r3, #1
 8015d38:	4680      	mov	r8, r0
 8015d3a:	702b      	strb	r3, [r5, #0]
 8015d3c:	f7ff b9f1 	b.w	8015122 <MEMS_runMagCal.constprop.18+0x22ba>
 8015d40:	4912      	ldr	r1, [pc, #72]	; (8015d8c <MEMS_runMagCal.constprop.18+0x2f24>)
 8015d42:	428b      	cmp	r3, r1
 8015d44:	d81d      	bhi.n	8015d82 <MEMS_runMagCal.constprop.18+0x2f1a>
 8015d46:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 8015d4a:	ee07 3a10 	vmov	s14, r3
 8015d4e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8015d90 <MEMS_runMagCal.constprop.18+0x2f28>
 8015d52:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015d56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015d5a:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8015d5e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8015d62:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015d66:	f7fe bc15 	b.w	8014594 <MEMS_runMagCal.constprop.18+0x172c>
 8015d6a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8015d6e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015d72:	f7fe bc30 	b.w	80145d6 <MEMS_runMagCal.constprop.18+0x176e>
 8015d76:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8015d7a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015d7e:	f7fe bc2a 	b.w	80145d6 <MEMS_runMagCal.constprop.18+0x176e>
 8015d82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015d86:	f7fe bc05 	b.w	8014594 <MEMS_runMagCal.constprop.18+0x172c>
 8015d8a:	bf00      	nop
 8015d8c:	0001517f 	.word	0x0001517f
 8015d90:	367e3344 	.word	0x367e3344
 8015d94:	3a83126f 	.word	0x3a83126f

08015d98 <MotionMC_Initialize>:
 8015d98:	4a93      	ldr	r2, [pc, #588]	; (8015fe8 <MotionMC_Initialize+0x250>)
 8015d9a:	6813      	ldr	r3, [r2, #0]
 8015d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015da0:	f023 0301 	bic.w	r3, r3, #1
 8015da4:	4c91      	ldr	r4, [pc, #580]	; (8015fec <MotionMC_Initialize+0x254>)
 8015da6:	6013      	str	r3, [r2, #0]
 8015da8:	6823      	ldr	r3, [r4, #0]
 8015daa:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8015dae:	4013      	ands	r3, r2
 8015db0:	f24c 2540 	movw	r5, #49728	; 0xc240
 8015db4:	42ab      	cmp	r3, r5
 8015db6:	b0ae      	sub	sp, #184	; 0xb8
 8015db8:	d013      	beq.n	8015de2 <MotionMC_Initialize+0x4a>
 8015dba:	6823      	ldr	r3, [r4, #0]
 8015dbc:	f24c 2470 	movw	r4, #49776	; 0xc270
 8015dc0:	4013      	ands	r3, r2
 8015dc2:	42a3      	cmp	r3, r4
 8015dc4:	d00d      	beq.n	8015de2 <MotionMC_Initialize+0x4a>
 8015dc6:	4b8a      	ldr	r3, [pc, #552]	; (8015ff0 <MotionMC_Initialize+0x258>)
 8015dc8:	2201      	movs	r2, #1
 8015dca:	601a      	str	r2, [r3, #0]
 8015dcc:	681a      	ldr	r2, [r3, #0]
 8015dce:	2a00      	cmp	r2, #0
 8015dd0:	d1fc      	bne.n	8015dcc <MotionMC_Initialize+0x34>
 8015dd2:	4b88      	ldr	r3, [pc, #544]	; (8015ff4 <MotionMC_Initialize+0x25c>)
 8015dd4:	4a88      	ldr	r2, [pc, #544]	; (8015ff8 <MotionMC_Initialize+0x260>)
 8015dd6:	601a      	str	r2, [r3, #0]
 8015dd8:	681a      	ldr	r2, [r3, #0]
 8015dda:	4b88      	ldr	r3, [pc, #544]	; (8015ffc <MotionMC_Initialize+0x264>)
 8015ddc:	429a      	cmp	r2, r3
 8015dde:	d01f      	beq.n	8015e20 <MotionMC_Initialize+0x88>
 8015de0:	e7fe      	b.n	8015de0 <MotionMC_Initialize+0x48>
 8015de2:	4b87      	ldr	r3, [pc, #540]	; (8016000 <MotionMC_Initialize+0x268>)
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d1ed      	bne.n	8015dc6 <MotionMC_Initialize+0x2e>
 8015dea:	4a86      	ldr	r2, [pc, #536]	; (8016004 <MotionMC_Initialize+0x26c>)
 8015dec:	6813      	ldr	r3, [r2, #0]
 8015dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015df2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8015df6:	d006      	beq.n	8015e06 <MotionMC_Initialize+0x6e>
 8015df8:	6813      	ldr	r3, [r2, #0]
 8015dfa:	f240 4283 	movw	r2, #1155	; 0x483
 8015dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015e02:	4293      	cmp	r3, r2
 8015e04:	d1df      	bne.n	8015dc6 <MotionMC_Initialize+0x2e>
 8015e06:	4b80      	ldr	r3, [pc, #512]	; (8016008 <MotionMC_Initialize+0x270>)
 8015e08:	2201      	movs	r2, #1
 8015e0a:	601a      	str	r2, [r3, #0]
 8015e0c:	681a      	ldr	r2, [r3, #0]
 8015e0e:	2a00      	cmp	r2, #0
 8015e10:	d1fc      	bne.n	8015e0c <MotionMC_Initialize+0x74>
 8015e12:	4b7e      	ldr	r3, [pc, #504]	; (801600c <MotionMC_Initialize+0x274>)
 8015e14:	4a78      	ldr	r2, [pc, #480]	; (8015ff8 <MotionMC_Initialize+0x260>)
 8015e16:	601a      	str	r2, [r3, #0]
 8015e18:	681a      	ldr	r2, [r3, #0]
 8015e1a:	4b78      	ldr	r3, [pc, #480]	; (8015ffc <MotionMC_Initialize+0x264>)
 8015e1c:	429a      	cmp	r2, r3
 8015e1e:	d1df      	bne.n	8015de0 <MotionMC_Initialize+0x48>
 8015e20:	4c7b      	ldr	r4, [pc, #492]	; (8016010 <MotionMC_Initialize+0x278>)
 8015e22:	1e43      	subs	r3, r0, #1
 8015e24:	f04f 0901 	mov.w	r9, #1
 8015e28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015e2c:	f884 93e0 	strb.w	r9, [r4, #992]	; 0x3e0
 8015e30:	d302      	bcc.n	8015e38 <MotionMC_Initialize+0xa0>
 8015e32:	b02e      	add	sp, #184	; 0xb8
 8015e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e38:	468a      	mov	sl, r1
 8015e3a:	4607      	mov	r7, r0
 8015e3c:	fa0f f880 	sxth.w	r8, r0
 8015e40:	2900      	cmp	r1, #0
 8015e42:	d154      	bne.n	8015eee <MotionMC_Initialize+0x156>
 8015e44:	f104 06a4 	add.w	r6, r4, #164	; 0xa4
 8015e48:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015e4a:	ad02      	add	r5, sp, #8
 8015e4c:	f88d 9000 	strb.w	r9, [sp]
 8015e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015e52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015e56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015e5a:	4631      	mov	r1, r6
 8015e5c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8015e60:	f851 29b0 	ldr.w	r2, [r1], #-176
 8015e64:	602a      	str	r2, [r5, #0]
 8015e66:	a80f      	add	r0, sp, #60	; 0x3c
 8015e68:	227c      	movs	r2, #124	; 0x7c
 8015e6a:	9301      	str	r3, [sp, #4]
 8015e6c:	f001 f8ba 	bl	8016fe4 <memcpy>
 8015e70:	4669      	mov	r1, sp
 8015e72:	20b8      	movs	r0, #184	; 0xb8
 8015e74:	f7f9 fd07 	bl	800f886 <MotionMC_SaveCalInNVM>
 8015e78:	f884 a014 	strb.w	sl, [r4, #20]
 8015e7c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8015e80:	4a64      	ldr	r2, [pc, #400]	; (8016014 <MotionMC_Initialize+0x27c>)
 8015e82:	1bdb      	subs	r3, r3, r7
 8015e84:	ee07 3a90 	vmov	s15, r3
 8015e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015e8c:	23c8      	movs	r3, #200	; 0xc8
 8015e8e:	eef0 7ae7 	vabs.f32	s15, s15
 8015e92:	fb93 f3f7 	sdiv	r3, r3, r7
 8015e96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015e9a:	b2db      	uxtb	r3, r3
 8015e9c:	2b32      	cmp	r3, #50	; 0x32
 8015e9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015ea2:	bf28      	it	cs
 8015ea4:	2332      	movcs	r3, #50	; 0x32
 8015ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eaa:	f884 33ea 	strb.w	r3, [r4, #1002]	; 0x3ea
 8015eae:	6017      	str	r7, [r2, #0]
 8015eb0:	dd0d      	ble.n	8015ece <MotionMC_Initialize+0x136>
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	4958      	ldr	r1, [pc, #352]	; (8016018 <MotionMC_Initialize+0x280>)
 8015eb6:	f8a4 8002 	strh.w	r8, [r4, #2]
 8015eba:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8015ebe:	6061      	str	r1, [r4, #4]
 8015ec0:	8123      	strh	r3, [r4, #8]
 8015ec2:	60e3      	str	r3, [r4, #12]
 8015ec4:	8022      	strh	r2, [r4, #0]
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	f884 357c 	strb.w	r3, [r4, #1404]	; 0x57c
 8015ecc:	e7b1      	b.n	8015e32 <MotionMC_Initialize+0x9a>
 8015ece:	edd4 7a01 	vldr	s15, [r4, #4]
 8015ed2:	eddf 6a52 	vldr	s13, [pc, #328]	; 801601c <MotionMC_Initialize+0x284>
 8015ed6:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8016020 <MotionMC_Initialize+0x288>
 8015eda:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015ede:	eef0 7ae7 	vabs.f32	s15, s15
 8015ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eea:	dce2      	bgt.n	8015eb2 <MotionMC_Initialize+0x11a>
 8015eec:	e7eb      	b.n	8015ec6 <MotionMC_Initialize+0x12e>
 8015eee:	2500      	movs	r5, #0
 8015ef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015ef4:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 8015ef8:	484a      	ldr	r0, [pc, #296]	; (8016024 <MotionMC_Initialize+0x28c>)
 8015efa:	60e5      	str	r5, [r4, #12]
 8015efc:	4629      	mov	r1, r5
 8015efe:	7525      	strb	r5, [r4, #20]
 8015f00:	61a5      	str	r5, [r4, #24]
 8015f02:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 8015f06:	f884 5020 	strb.w	r5, [r4, #32]
 8015f0a:	60a2      	str	r2, [r4, #8]
 8015f0c:	6120      	str	r0, [r4, #16]
 8015f0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015f12:	83a3      	strh	r3, [r4, #28]
 8015f14:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8015f18:	f001 f872 	bl	8017000 <memset>
 8015f1c:	f44f 66a0 	mov.w	r6, #1280	; 0x500
 8015f20:	23ff      	movs	r3, #255	; 0xff
 8015f22:	224b      	movs	r2, #75	; 0x4b
 8015f24:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 8015f28:	4629      	mov	r1, r5
 8015f2a:	f8c4 5360 	str.w	r5, [r4, #864]	; 0x360
 8015f2e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 8015f32:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
 8015f36:	f884 20e1 	strb.w	r2, [r4, #225]	; 0xe1
 8015f3a:	f884 30e2 	strb.w	r3, [r4, #226]	; 0xe2
 8015f3e:	f884 3366 	strb.w	r3, [r4, #870]	; 0x366
 8015f42:	222e      	movs	r2, #46	; 0x2e
 8015f44:	f8a4 0364 	strh.w	r0, [r4, #868]	; 0x364
 8015f48:	84a6      	strh	r6, [r4, #36]	; 0x24
 8015f4a:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
 8015f4e:	f001 f857 	bl	8017000 <memset>
 8015f52:	f1a7 030a 	sub.w	r3, r7, #10
 8015f56:	b29b      	uxth	r3, r3
 8015f58:	a92e      	add	r1, sp, #184	; 0xb8
 8015f5a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8015f5e:	2b32      	cmp	r3, #50	; 0x32
 8015f60:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 8015f64:	f04f 0500 	mov.w	r5, #0
 8015f68:	bf98      	it	ls
 8015f6a:	f884 9014 	strbls.w	r9, [r4, #20]
 8015f6e:	2305      	movs	r3, #5
 8015f70:	f884 90a5 	strb.w	r9, [r4, #165]	; 0xa5
 8015f74:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 8015f78:	f8c4 20c4 	str.w	r2, [r4, #196]	; 0xc4
 8015f7c:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
 8015f80:	f801 5db8 	strb.w	r5, [r1, #-184]!
 8015f84:	20b8      	movs	r0, #184	; 0xb8
 8015f86:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 8015f8a:	f7f9 fc6f 	bl	800f86c <MotionMC_LoadCalFromNVM>
 8015f8e:	2801      	cmp	r0, #1
 8015f90:	f43f af74 	beq.w	8015e7c <MotionMC_Initialize+0xe4>
 8015f94:	f8dd c004 	ldr.w	ip, [sp, #4]
 8015f98:	f88d 5000 	strb.w	r5, [sp]
 8015f9c:	f1bc 0f00 	cmp.w	ip, #0
 8015fa0:	f43f af6c 	beq.w	8015e7c <MotionMC_Initialize+0xe4>
 8015fa4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	f43f af67 	beq.w	8015e7c <MotionMC_Initialize+0xe4>
 8015fae:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	f43f af62 	beq.w	8015e7c <MotionMC_Initialize+0xe4>
 8015fb8:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8015fbc:	429a      	cmp	r2, r3
 8015fbe:	f4ff af5d 	bcc.w	8015e7c <MotionMC_Initialize+0xe4>
 8015fc2:	ad02      	add	r5, sp, #8
 8015fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015fc6:	4e18      	ldr	r6, [pc, #96]	; (8016028 <MotionMC_Initialize+0x290>)
 8015fc8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015fcc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015fd0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015fd2:	4630      	mov	r0, r6
 8015fd4:	682b      	ldr	r3, [r5, #0]
 8015fd6:	f840 39b0 	str.w	r3, [r0], #-176
 8015fda:	227c      	movs	r2, #124	; 0x7c
 8015fdc:	a90f      	add	r1, sp, #60	; 0x3c
 8015fde:	f8c4 c0d8 	str.w	ip, [r4, #216]	; 0xd8
 8015fe2:	f000 ffff 	bl	8016fe4 <memcpy>
 8015fe6:	e749      	b.n	8015e7c <MotionMC_Initialize+0xe4>
 8015fe8:	e0002000 	.word	0xe0002000
 8015fec:	e000ed00 	.word	0xe000ed00
 8015ff0:	40023008 	.word	0x40023008
 8015ff4:	40023000 	.word	0x40023000
 8015ff8:	f407a5c2 	.word	0xf407a5c2
 8015ffc:	b5e8b5cd 	.word	0xb5e8b5cd
 8016000:	e0042000 	.word	0xe0042000
 8016004:	5c001000 	.word	0x5c001000
 8016008:	58024c08 	.word	0x58024c08
 801600c:	58024c00 	.word	0x58024c00
 8016010:	20001708 	.word	0x20001708
 8016014:	20000044 	.word	0x20000044
 8016018:	3dcccccd 	.word	0x3dcccccd
 801601c:	3dcccccd 	.word	0x3dcccccd
 8016020:	3c23d70a 	.word	0x3c23d70a
 8016024:	2000c390 	.word	0x2000c390
 8016028:	200017ac 	.word	0x200017ac

0801602c <MotionMC_Update>:
 801602c:	4b74      	ldr	r3, [pc, #464]	; (8016200 <MotionMC_Update+0x1d4>)
 801602e:	f893 23e0 	ldrb.w	r2, [r3, #992]	; 0x3e0
 8016032:	2a00      	cmp	r2, #0
 8016034:	d07b      	beq.n	801612e <MotionMC_Update+0x102>
 8016036:	ed90 7a00 	vldr	s14, [r0]
 801603a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801603e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016042:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801604a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801604e:	bfac      	ite	ge
 8016050:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8016054:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8016058:	ed90 7a01 	vldr	s14, [r0, #4]
 801605c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016060:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016064:	ee17 1a90 	vmov	r1, s15
 8016068:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801606c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016074:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016078:	bfac      	ite	ge
 801607a:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801607e:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8016082:	ed90 7a02 	vldr	s14, [r0, #8]
 8016086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801608a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801608e:	ee17 4a90 	vmov	r4, s15
 8016092:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016096:	ee67 7a27 	vmul.f32	s15, s14, s15
 801609a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801609e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80160a6:	bfac      	ite	ge
 80160a8:	ee77 7a87 	vaddge.f32	s15, s15, s14
 80160ac:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 80160b0:	f893 657c 	ldrb.w	r6, [r3, #1404]	; 0x57c
 80160b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80160b8:	ee17 2a90 	vmov	r2, s15
 80160bc:	b37e      	cbz	r6, 801611e <MotionMC_Update+0xf2>
 80160be:	4d51      	ldr	r5, [pc, #324]	; (8016204 <MotionMC_Update+0x1d8>)
 80160c0:	00f0      	lsls	r0, r6, #3
 80160c2:	682d      	ldr	r5, [r5, #0]
 80160c4:	181f      	adds	r7, r3, r0
 80160c6:	fb15 f506 	smulbb	r5, r5, r6
 80160ca:	f8a7 53ec 	strh.w	r5, [r7, #1004]	; 0x3ec
 80160ce:	f647 75fe 	movw	r5, #32766	; 0x7ffe
 80160d2:	4f4d      	ldr	r7, [pc, #308]	; (8016208 <MotionMC_Update+0x1dc>)
 80160d4:	42a9      	cmp	r1, r5
 80160d6:	bfa8      	it	ge
 80160d8:	4629      	movge	r1, r5
 80160da:	42aa      	cmp	r2, r5
 80160dc:	bfa8      	it	ge
 80160de:	462a      	movge	r2, r5
 80160e0:	42b9      	cmp	r1, r7
 80160e2:	bfb8      	it	lt
 80160e4:	4639      	movlt	r1, r7
 80160e6:	42bc      	cmp	r4, r7
 80160e8:	db22      	blt.n	8016130 <MotionMC_Update+0x104>
 80160ea:	42ac      	cmp	r4, r5
 80160ec:	bfa8      	it	ge
 80160ee:	462c      	movge	r4, r5
 80160f0:	b224      	sxth	r4, r4
 80160f2:	4d45      	ldr	r5, [pc, #276]	; (8016208 <MotionMC_Update+0x1dc>)
 80160f4:	f893 c3ea 	ldrb.w	ip, [r3, #1002]	; 0x3ea
 80160f8:	42aa      	cmp	r2, r5
 80160fa:	f106 0701 	add.w	r7, r6, #1
 80160fe:	bfb8      	it	lt
 8016100:	462a      	movlt	r2, r5
 8016102:	b2ff      	uxtb	r7, r7
 8016104:	181d      	adds	r5, r3, r0
 8016106:	45bc      	cmp	ip, r7
 8016108:	f8a5 23f2 	strh.w	r2, [r5, #1010]	; 0x3f2
 801610c:	f8a5 13ee 	strh.w	r1, [r5, #1006]	; 0x3ee
 8016110:	f8a5 43f0 	strh.w	r4, [r5, #1008]	; 0x3f0
 8016114:	f883 757c 	strb.w	r7, [r3, #1404]	; 0x57c
 8016118:	d00c      	beq.n	8016134 <MotionMC_Update+0x108>
 801611a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801611e:	68c0      	ldr	r0, [r0, #12]
 8016120:	f8c3 03e4 	str.w	r0, [r3, #996]	; 0x3e4
 8016124:	2001      	movs	r0, #1
 8016126:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
 801612a:	4630      	mov	r0, r6
 801612c:	e7cf      	b.n	80160ce <MotionMC_Update+0xa2>
 801612e:	4770      	bx	lr
 8016130:	462c      	mov	r4, r5
 8016132:	e7de      	b.n	80160f2 <MotionMC_Update+0xc6>
 8016134:	f893 23e8 	ldrb.w	r2, [r3, #1000]	; 0x3e8
 8016138:	f8d3 83e4 	ldr.w	r8, [r3, #996]	; 0x3e4
 801613c:	2100      	movs	r1, #0
 801613e:	f883 157c 	strb.w	r1, [r3, #1404]	; 0x57c
 8016142:	b382      	cbz	r2, 80161a6 <MotionMC_Update+0x17a>
 8016144:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
 8016148:	891a      	ldrh	r2, [r3, #8]
 801614a:	e9d3 1703 	ldrd	r1, r7, [r3, #12]
 801614e:	f1bc 0f00 	cmp.w	ip, #0
 8016152:	d026      	beq.n	80161a2 <MotionMC_Update+0x176>
 8016154:	f1be 0f00 	cmp.w	lr, #0
 8016158:	d023      	beq.n	80161a2 <MotionMC_Update+0x176>
 801615a:	492c      	ldr	r1, [pc, #176]	; (801620c <MotionMC_Update+0x1e0>)
 801615c:	4572      	cmp	r2, lr
 801615e:	f101 0408 	add.w	r4, r1, #8
 8016162:	bf28      	it	cs
 8016164:	4672      	movcs	r2, lr
 8016166:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 801616a:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 801616e:	f04f 0c01 	mov.w	ip, #1
 8016172:	3201      	adds	r2, #1
 8016174:	b292      	uxth	r2, r2
 8016176:	4572      	cmp	r2, lr
 8016178:	bf28      	it	cs
 801617a:	4672      	movcs	r2, lr
 801617c:	eb02 0509 	add.w	r5, r2, r9
 8016180:	eb07 04c5 	add.w	r4, r7, r5, lsl #3
 8016184:	f8d1 a00a 	ldr.w	sl, [r1, #10]
 8016188:	f807 c035 	strb.w	ip, [r7, r5, lsl #3]
 801618c:	f8c4 a002 	str.w	sl, [r4, #2]
 8016190:	89cd      	ldrh	r5, [r1, #14]
 8016192:	80e5      	strh	r5, [r4, #6]
 8016194:	3108      	adds	r1, #8
 8016196:	42b1      	cmp	r1, r6
 8016198:	d1eb      	bne.n	8016172 <MotionMC_Update+0x146>
 801619a:	4418      	add	r0, r3
 801619c:	f8b0 13ec 	ldrh.w	r1, [r0, #1004]	; 0x3ec
 80161a0:	4441      	add	r1, r8
 80161a2:	811a      	strh	r2, [r3, #8]
 80161a4:	60d9      	str	r1, [r3, #12]
 80161a6:	7d1a      	ldrb	r2, [r3, #20]
 80161a8:	2a00      	cmp	r2, #0
 80161aa:	d0b6      	beq.n	801611a <MotionMC_Update+0xee>
 80161ac:	8919      	ldrh	r1, [r3, #8]
 80161ae:	895a      	ldrh	r2, [r3, #10]
 80161b0:	428a      	cmp	r2, r1
 80161b2:	d01d      	beq.n	80161f0 <MotionMC_Update+0x1c4>
 80161b4:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 80161b8:	b1f1      	cbz	r1, 80161f8 <MotionMC_Update+0x1cc>
 80161ba:	68da      	ldr	r2, [r3, #12]
 80161bc:	3201      	adds	r2, #1
 80161be:	442a      	add	r2, r5
 80161c0:	1c50      	adds	r0, r2, #1
 80161c2:	d019      	beq.n	80161f8 <MotionMC_Update+0x1cc>
 80161c4:	f502 541c 	add.w	r4, r2, #9984	; 0x2700
 80161c8:	3410      	adds	r4, #16
 80161ca:	6998      	ldr	r0, [r3, #24]
 80161cc:	42a0      	cmp	r0, r4
 80161ce:	8b9c      	ldrh	r4, [r3, #28]
 80161d0:	bf84      	itt	hi
 80161d2:	619a      	strhi	r2, [r3, #24]
 80161d4:	4610      	movhi	r0, r2
 80161d6:	4420      	add	r0, r4
 80161d8:	4282      	cmp	r2, r0
 80161da:	d39e      	bcc.n	801611a <MotionMC_Update+0xee>
 80161dc:	b121      	cbz	r1, 80161e8 <MotionMC_Update+0x1bc>
 80161de:	68db      	ldr	r3, [r3, #12]
 80161e0:	3901      	subs	r1, #1
 80161e2:	fb05 3111 	mls	r1, r5, r1, r3
 80161e6:	b289      	uxth	r1, r1
 80161e8:	1a53      	subs	r3, r2, r1
 80161ea:	b21b      	sxth	r3, r3
 80161ec:	42a3      	cmp	r3, r4
 80161ee:	db94      	blt.n	801611a <MotionMC_Update+0xee>
 80161f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161f4:	f7fc be38 	b.w	8012e68 <MEMS_runMagCal.constprop.18>
 80161f8:	f242 7410 	movw	r4, #10000	; 0x2710
 80161fc:	2200      	movs	r2, #0
 80161fe:	e7e4      	b.n	80161ca <MotionMC_Update+0x19e>
 8016200:	20001708 	.word	0x20001708
 8016204:	20000044 	.word	0x20000044
 8016208:	ffff8002 	.word	0xffff8002
 801620c:	20001aec 	.word	0x20001aec

08016210 <MotionMC_GetCalParams>:
 8016210:	b4f0      	push	{r4, r5, r6, r7}
 8016212:	4f26      	ldr	r7, [pc, #152]	; (80162ac <MotionMC_GetCalParams+0x9c>)
 8016214:	f897 33e0 	ldrb.w	r3, [r7, #992]	; 0x3e0
 8016218:	b08e      	sub	sp, #56	; 0x38
 801621a:	b913      	cbnz	r3, 8016222 <MotionMC_GetCalParams+0x12>
 801621c:	b00e      	add	sp, #56	; 0x38
 801621e:	bcf0      	pop	{r4, r5, r6, r7}
 8016220:	4770      	bx	lr
 8016222:	f107 05a4 	add.w	r5, r7, #164	; 0xa4
 8016226:	4606      	mov	r6, r0
 8016228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801622a:	ac01      	add	r4, sp, #4
 801622c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801622e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016236:	682b      	ldr	r3, [r5, #0]
 8016238:	6023      	str	r3, [r4, #0]
 801623a:	9905      	ldr	r1, [sp, #20]
 801623c:	9a06      	ldr	r2, [sp, #24]
 801623e:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8016242:	eddd 6a02 	vldr	s13, [sp, #8]
 8016246:	60f1      	str	r1, [r6, #12]
 8016248:	6132      	str	r2, [r6, #16]
 801624a:	9f07      	ldr	r7, [sp, #28]
 801624c:	ed9d 7a03 	vldr	s14, [sp, #12]
 8016250:	eddd 7a04 	vldr	s15, [sp, #16]
 8016254:	ed9f 6a16 	vldr	s12, [pc, #88]	; 80162b0 <MotionMC_GetCalParams+0xa0>
 8016258:	9d08      	ldr	r5, [sp, #32]
 801625a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801625c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801625e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016260:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016262:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
 8016266:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801626a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801626e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016272:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016276:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801627a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801627e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016282:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016286:	ee67 7a86 	vmul.f32	s15, s15, s12
 801628a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801628c:	6177      	str	r7, [r6, #20]
 801628e:	edc6 6a00 	vstr	s13, [r6]
 8016292:	ed86 7a01 	vstr	s14, [r6, #4]
 8016296:	edc6 7a02 	vstr	s15, [r6, #8]
 801629a:	61b5      	str	r5, [r6, #24]
 801629c:	61f4      	str	r4, [r6, #28]
 801629e:	6230      	str	r0, [r6, #32]
 80162a0:	6271      	str	r1, [r6, #36]	; 0x24
 80162a2:	62b2      	str	r2, [r6, #40]	; 0x28
 80162a4:	62f3      	str	r3, [r6, #44]	; 0x2c
 80162a6:	b00e      	add	sp, #56	; 0x38
 80162a8:	bcf0      	pop	{r4, r5, r6, r7}
 80162aa:	4770      	bx	lr
 80162ac:	20001708 	.word	0x20001708
 80162b0:	3dcccccd 	.word	0x3dcccccd

080162b4 <MotionMC_GetLibVersion>:
 80162b4:	4b10      	ldr	r3, [pc, #64]	; (80162f8 <MotionMC_GetLibVersion+0x44>)
 80162b6:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 80162ba:	b90b      	cbnz	r3, 80162c0 <MotionMC_GetLibVersion+0xc>
 80162bc:	4618      	mov	r0, r3
 80162be:	4770      	bx	lr
 80162c0:	b470      	push	{r4, r5, r6}
 80162c2:	4e0e      	ldr	r6, [pc, #56]	; (80162fc <MotionMC_GetLibVersion+0x48>)
 80162c4:	4605      	mov	r5, r0
 80162c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80162c8:	b08b      	sub	sp, #44	; 0x2c
 80162ca:	ac01      	add	r4, sp, #4
 80162cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80162ce:	6833      	ldr	r3, [r6, #0]
 80162d0:	f824 3b02 	strh.w	r3, [r4], #2
 80162d4:	0c1b      	lsrs	r3, r3, #16
 80162d6:	7023      	strb	r3, [r4, #0]
 80162d8:	ac01      	add	r4, sp, #4
 80162da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80162dc:	8826      	ldrh	r6, [r4, #0]
 80162de:	60eb      	str	r3, [r5, #12]
 80162e0:	78a4      	ldrb	r4, [r4, #2]
 80162e2:	6028      	str	r0, [r5, #0]
 80162e4:	2312      	movs	r3, #18
 80162e6:	4618      	mov	r0, r3
 80162e8:	6069      	str	r1, [r5, #4]
 80162ea:	60aa      	str	r2, [r5, #8]
 80162ec:	822e      	strh	r6, [r5, #16]
 80162ee:	74ac      	strb	r4, [r5, #18]
 80162f0:	b00b      	add	sp, #44	; 0x2c
 80162f2:	bc70      	pop	{r4, r5, r6}
 80162f4:	4770      	bx	lr
 80162f6:	bf00      	nop
 80162f8:	20001708 	.word	0x20001708
 80162fc:	0801ca88 	.word	0x0801ca88

08016300 <rt_InitInfAndNaN.isra.3>:
 8016300:	4b05      	ldr	r3, [pc, #20]	; (8016318 <rt_InitInfAndNaN.isra.3+0x18>)
 8016302:	4a06      	ldr	r2, [pc, #24]	; (801631c <rt_InitInfAndNaN.isra.3+0x1c>)
 8016304:	f503 6182 	add.w	r1, r3, #1040	; 0x410
 8016308:	f203 4314 	addw	r3, r3, #1044	; 0x414
 801630c:	f04f 40ff 	mov.w	r0, #2139095040	; 0x7f800000
 8016310:	6008      	str	r0, [r1, #0]
 8016312:	601a      	str	r2, [r3, #0]
 8016314:	4770      	bx	lr
 8016316:	bf00      	nop
 8016318:	20001c88 	.word	0x20001c88
 801631c:	ff800000 	.word	0xff800000

08016320 <iNemo_setOrientation.constprop.40>:
 8016320:	b4f0      	push	{r4, r5, r6, r7}
 8016322:	4973      	ldr	r1, [pc, #460]	; (80164f0 <iNemo_setOrientation.constprop.40+0x1d0>)
 8016324:	4b73      	ldr	r3, [pc, #460]	; (80164f4 <iNemo_setOrientation.constprop.40+0x1d4>)
 8016326:	7808      	ldrb	r0, [r1, #0]
 8016328:	2200      	movs	r2, #0
 801632a:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 801632e:	b084      	sub	sp, #16
 8016330:	2f17      	cmp	r7, #23
 8016332:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8016336:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 801633a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 801633e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 8016342:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8016346:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 801634a:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 801634e:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
 8016352:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8016356:	790a      	ldrb	r2, [r1, #4]
 8016358:	bf98      	it	ls
 801635a:	3020      	addls	r0, #32
 801635c:	f88d 0004 	strb.w	r0, [sp, #4]
 8016360:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016364:	2817      	cmp	r0, #23
 8016366:	bf98      	it	ls
 8016368:	3220      	addls	r2, #32
 801636a:	f88d 2008 	strb.w	r2, [sp, #8]
 801636e:	7a0a      	ldrb	r2, [r1, #8]
 8016370:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016374:	2817      	cmp	r0, #23
 8016376:	bf98      	it	ls
 8016378:	3220      	addls	r2, #32
 801637a:	f88d 200c 	strb.w	r2, [sp, #12]
 801637e:	784a      	ldrb	r2, [r1, #1]
 8016380:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016384:	2817      	cmp	r0, #23
 8016386:	bf98      	it	ls
 8016388:	3220      	addls	r2, #32
 801638a:	f88d 2005 	strb.w	r2, [sp, #5]
 801638e:	794a      	ldrb	r2, [r1, #5]
 8016390:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016394:	2817      	cmp	r0, #23
 8016396:	bf98      	it	ls
 8016398:	3220      	addls	r2, #32
 801639a:	f88d 2009 	strb.w	r2, [sp, #9]
 801639e:	7a4a      	ldrb	r2, [r1, #9]
 80163a0:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80163a4:	2817      	cmp	r0, #23
 80163a6:	bf98      	it	ls
 80163a8:	3220      	addls	r2, #32
 80163aa:	f88d 200d 	strb.w	r2, [sp, #13]
 80163ae:	788a      	ldrb	r2, [r1, #2]
 80163b0:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80163b4:	2817      	cmp	r0, #23
 80163b6:	bf98      	it	ls
 80163b8:	3220      	addls	r2, #32
 80163ba:	f88d 2006 	strb.w	r2, [sp, #6]
 80163be:	798a      	ldrb	r2, [r1, #6]
 80163c0:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80163c4:	2817      	cmp	r0, #23
 80163c6:	bf98      	it	ls
 80163c8:	3220      	addls	r2, #32
 80163ca:	f88d 200a 	strb.w	r2, [sp, #10]
 80163ce:	7a8a      	ldrb	r2, [r1, #10]
 80163d0:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 80163d4:	2917      	cmp	r1, #23
 80163d6:	bf98      	it	ls
 80163d8:	3220      	addls	r2, #32
 80163da:	f88d 200e 	strb.w	r2, [sp, #14]
 80163de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80163e2:	3a64      	subs	r2, #100	; 0x64
 80163e4:	2a13      	cmp	r2, #19
 80163e6:	d80e      	bhi.n	8016406 <iNemo_setOrientation.constprop.40+0xe6>
 80163e8:	e8df f002 	tbb	[pc, r2]
 80163ec:	0d0dba0a 	.word	0x0d0dba0a
 80163f0:	0d0d0d0d 	.word	0x0d0d0d0d
 80163f4:	0dbe0d0d 	.word	0x0dbe0d0d
 80163f8:	c20d0d0d 	.word	0xc20d0d0d
 80163fc:	ca0dc60d 	.word	0xca0dc60d
 8016400:	22ff      	movs	r2, #255	; 0xff
 8016402:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 8016406:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801640a:	3a64      	subs	r2, #100	; 0x64
 801640c:	2a13      	cmp	r2, #19
 801640e:	d80e      	bhi.n	801642e <iNemo_setOrientation.constprop.40+0x10e>
 8016410:	e8df f002 	tbb	[pc, r2]
 8016414:	0d0dba0a 	.word	0x0d0dba0a
 8016418:	0d0d0d0d 	.word	0x0d0d0d0d
 801641c:	0dbe0d0d 	.word	0x0dbe0d0d
 8016420:	c20d0d0d 	.word	0xc20d0d0d
 8016424:	ca0dc60d 	.word	0xca0dc60d
 8016428:	22ff      	movs	r2, #255	; 0xff
 801642a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 801642e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8016432:	3a64      	subs	r2, #100	; 0x64
 8016434:	2a13      	cmp	r2, #19
 8016436:	d80e      	bhi.n	8016456 <iNemo_setOrientation.constprop.40+0x136>
 8016438:	e8df f002 	tbb	[pc, r2]
 801643c:	0d0dba0a 	.word	0x0d0dba0a
 8016440:	0d0d0d0d 	.word	0x0d0d0d0d
 8016444:	0dbe0d0d 	.word	0x0dbe0d0d
 8016448:	c20d0d0d 	.word	0xc20d0d0d
 801644c:	ca0dc60d 	.word	0xca0dc60d
 8016450:	22ff      	movs	r2, #255	; 0xff
 8016452:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8016456:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801645a:	3a64      	subs	r2, #100	; 0x64
 801645c:	2a13      	cmp	r2, #19
 801645e:	d80e      	bhi.n	801647e <iNemo_setOrientation.constprop.40+0x15e>
 8016460:	e8df f002 	tbb	[pc, r2]
 8016464:	0d0dba0a 	.word	0x0d0dba0a
 8016468:	0d0d0d0d 	.word	0x0d0d0d0d
 801646c:	0dbe0d0d 	.word	0x0dbe0d0d
 8016470:	c20d0d0d 	.word	0xc20d0d0d
 8016474:	ca0dc60d 	.word	0xca0dc60d
 8016478:	22ff      	movs	r2, #255	; 0xff
 801647a:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 801647e:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8016482:	3a64      	subs	r2, #100	; 0x64
 8016484:	2a13      	cmp	r2, #19
 8016486:	d80e      	bhi.n	80164a6 <iNemo_setOrientation.constprop.40+0x186>
 8016488:	e8df f002 	tbb	[pc, r2]
 801648c:	0d0dba0a 	.word	0x0d0dba0a
 8016490:	0d0d0d0d 	.word	0x0d0d0d0d
 8016494:	0dbe0d0d 	.word	0x0dbe0d0d
 8016498:	c20d0d0d 	.word	0xc20d0d0d
 801649c:	ca0dc60d 	.word	0xca0dc60d
 80164a0:	22ff      	movs	r2, #255	; 0xff
 80164a2:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 80164a6:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80164aa:	3a64      	subs	r2, #100	; 0x64
 80164ac:	2a13      	cmp	r2, #19
 80164ae:	d80e      	bhi.n	80164ce <iNemo_setOrientation.constprop.40+0x1ae>
 80164b0:	e8df f002 	tbb	[pc, r2]
 80164b4:	0d0dba0a 	.word	0x0d0dba0a
 80164b8:	0d0d0d0d 	.word	0x0d0d0d0d
 80164bc:	0dbe0d0d 	.word	0x0dbe0d0d
 80164c0:	c20d0d0d 	.word	0xc20d0d0d
 80164c4:	ca0dc60d 	.word	0xca0dc60d
 80164c8:	22ff      	movs	r2, #255	; 0xff
 80164ca:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 80164ce:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80164d2:	3a64      	subs	r2, #100	; 0x64
 80164d4:	2a13      	cmp	r2, #19
 80164d6:	d812      	bhi.n	80164fe <iNemo_setOrientation.constprop.40+0x1de>
 80164d8:	e8df f002 	tbb	[pc, r2]
 80164dc:	1111ba0e 	.word	0x1111ba0e
 80164e0:	11111111 	.word	0x11111111
 80164e4:	11be1111 	.word	0x11be1111
 80164e8:	c2111111 	.word	0xc2111111
 80164ec:	ca11c611 	.word	0xca11c611
 80164f0:	20000048 	.word	0x20000048
 80164f4:	20001c88 	.word	0x20001c88
 80164f8:	22ff      	movs	r2, #255	; 0xff
 80164fa:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 80164fe:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8016502:	3a64      	subs	r2, #100	; 0x64
 8016504:	2a13      	cmp	r2, #19
 8016506:	d80e      	bhi.n	8016526 <iNemo_setOrientation.constprop.40+0x206>
 8016508:	e8df f002 	tbb	[pc, r2]
 801650c:	0d0db60a 	.word	0x0d0db60a
 8016510:	0d0d0d0d 	.word	0x0d0d0d0d
 8016514:	0dba0d0d 	.word	0x0dba0d0d
 8016518:	be0d0d0d 	.word	0xbe0d0d0d
 801651c:	c60dc20d 	.word	0xc60dc20d
 8016520:	22ff      	movs	r2, #255	; 0xff
 8016522:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8016526:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801652a:	3a64      	subs	r2, #100	; 0x64
 801652c:	2a13      	cmp	r2, #19
 801652e:	d80e      	bhi.n	801654e <iNemo_setOrientation.constprop.40+0x22e>
 8016530:	e8df f002 	tbb	[pc, r2]
 8016534:	0d0db60a 	.word	0x0d0db60a
 8016538:	0d0d0d0d 	.word	0x0d0d0d0d
 801653c:	0dbc0d0d 	.word	0x0dbc0d0d
 8016540:	c20d0d0d 	.word	0xc20d0d0d
 8016544:	100dc80d 	.word	0x100dc80d
 8016548:	22ff      	movs	r2, #255	; 0xff
 801654a:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 801654e:	b004      	add	sp, #16
 8016550:	bcf0      	pop	{r4, r5, r6, r7}
 8016552:	4770      	bx	lr
 8016554:	22ff      	movs	r2, #255	; 0xff
 8016556:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 801655a:	b004      	add	sp, #16
 801655c:	bcf0      	pop	{r4, r5, r6, r7}
 801655e:	4770      	bx	lr
 8016560:	2201      	movs	r2, #1
 8016562:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8016566:	e74e      	b.n	8016406 <iNemo_setOrientation.constprop.40+0xe6>
 8016568:	2201      	movs	r2, #1
 801656a:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 801656e:	e74a      	b.n	8016406 <iNemo_setOrientation.constprop.40+0xe6>
 8016570:	22ff      	movs	r2, #255	; 0xff
 8016572:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 8016576:	e746      	b.n	8016406 <iNemo_setOrientation.constprop.40+0xe6>
 8016578:	2201      	movs	r2, #1
 801657a:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 801657e:	e742      	b.n	8016406 <iNemo_setOrientation.constprop.40+0xe6>
 8016580:	22ff      	movs	r2, #255	; 0xff
 8016582:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8016586:	e73e      	b.n	8016406 <iNemo_setOrientation.constprop.40+0xe6>
 8016588:	2201      	movs	r2, #1
 801658a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 801658e:	e74e      	b.n	801642e <iNemo_setOrientation.constprop.40+0x10e>
 8016590:	2201      	movs	r2, #1
 8016592:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8016596:	e74a      	b.n	801642e <iNemo_setOrientation.constprop.40+0x10e>
 8016598:	22ff      	movs	r2, #255	; 0xff
 801659a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 801659e:	e746      	b.n	801642e <iNemo_setOrientation.constprop.40+0x10e>
 80165a0:	2201      	movs	r2, #1
 80165a2:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 80165a6:	e742      	b.n	801642e <iNemo_setOrientation.constprop.40+0x10e>
 80165a8:	22ff      	movs	r2, #255	; 0xff
 80165aa:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80165ae:	e73e      	b.n	801642e <iNemo_setOrientation.constprop.40+0x10e>
 80165b0:	2201      	movs	r2, #1
 80165b2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 80165b6:	e74e      	b.n	8016456 <iNemo_setOrientation.constprop.40+0x136>
 80165b8:	2201      	movs	r2, #1
 80165ba:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 80165be:	e74a      	b.n	8016456 <iNemo_setOrientation.constprop.40+0x136>
 80165c0:	22ff      	movs	r2, #255	; 0xff
 80165c2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 80165c6:	e746      	b.n	8016456 <iNemo_setOrientation.constprop.40+0x136>
 80165c8:	2201      	movs	r2, #1
 80165ca:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 80165ce:	e742      	b.n	8016456 <iNemo_setOrientation.constprop.40+0x136>
 80165d0:	22ff      	movs	r2, #255	; 0xff
 80165d2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 80165d6:	e73e      	b.n	8016456 <iNemo_setOrientation.constprop.40+0x136>
 80165d8:	2201      	movs	r2, #1
 80165da:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 80165de:	e74e      	b.n	801647e <iNemo_setOrientation.constprop.40+0x15e>
 80165e0:	2201      	movs	r2, #1
 80165e2:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 80165e6:	e74a      	b.n	801647e <iNemo_setOrientation.constprop.40+0x15e>
 80165e8:	22ff      	movs	r2, #255	; 0xff
 80165ea:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 80165ee:	e746      	b.n	801647e <iNemo_setOrientation.constprop.40+0x15e>
 80165f0:	2201      	movs	r2, #1
 80165f2:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 80165f6:	e742      	b.n	801647e <iNemo_setOrientation.constprop.40+0x15e>
 80165f8:	22ff      	movs	r2, #255	; 0xff
 80165fa:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 80165fe:	e73e      	b.n	801647e <iNemo_setOrientation.constprop.40+0x15e>
 8016600:	2201      	movs	r2, #1
 8016602:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 8016606:	e74e      	b.n	80164a6 <iNemo_setOrientation.constprop.40+0x186>
 8016608:	2201      	movs	r2, #1
 801660a:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 801660e:	e74a      	b.n	80164a6 <iNemo_setOrientation.constprop.40+0x186>
 8016610:	22ff      	movs	r2, #255	; 0xff
 8016612:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 8016616:	e746      	b.n	80164a6 <iNemo_setOrientation.constprop.40+0x186>
 8016618:	2201      	movs	r2, #1
 801661a:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 801661e:	e742      	b.n	80164a6 <iNemo_setOrientation.constprop.40+0x186>
 8016620:	22ff      	movs	r2, #255	; 0xff
 8016622:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 8016626:	e73e      	b.n	80164a6 <iNemo_setOrientation.constprop.40+0x186>
 8016628:	2201      	movs	r2, #1
 801662a:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 801662e:	e74e      	b.n	80164ce <iNemo_setOrientation.constprop.40+0x1ae>
 8016630:	2201      	movs	r2, #1
 8016632:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 8016636:	e74a      	b.n	80164ce <iNemo_setOrientation.constprop.40+0x1ae>
 8016638:	22ff      	movs	r2, #255	; 0xff
 801663a:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 801663e:	e746      	b.n	80164ce <iNemo_setOrientation.constprop.40+0x1ae>
 8016640:	2201      	movs	r2, #1
 8016642:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8016646:	e742      	b.n	80164ce <iNemo_setOrientation.constprop.40+0x1ae>
 8016648:	22ff      	movs	r2, #255	; 0xff
 801664a:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 801664e:	e73e      	b.n	80164ce <iNemo_setOrientation.constprop.40+0x1ae>
 8016650:	2201      	movs	r2, #1
 8016652:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 8016656:	e752      	b.n	80164fe <iNemo_setOrientation.constprop.40+0x1de>
 8016658:	2201      	movs	r2, #1
 801665a:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 801665e:	e74e      	b.n	80164fe <iNemo_setOrientation.constprop.40+0x1de>
 8016660:	22ff      	movs	r2, #255	; 0xff
 8016662:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 8016666:	e74a      	b.n	80164fe <iNemo_setOrientation.constprop.40+0x1de>
 8016668:	2201      	movs	r2, #1
 801666a:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 801666e:	e746      	b.n	80164fe <iNemo_setOrientation.constprop.40+0x1de>
 8016670:	22ff      	movs	r2, #255	; 0xff
 8016672:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 8016676:	e742      	b.n	80164fe <iNemo_setOrientation.constprop.40+0x1de>
 8016678:	2201      	movs	r2, #1
 801667a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 801667e:	e752      	b.n	8016526 <iNemo_setOrientation.constprop.40+0x206>
 8016680:	2201      	movs	r2, #1
 8016682:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 8016686:	e74e      	b.n	8016526 <iNemo_setOrientation.constprop.40+0x206>
 8016688:	22ff      	movs	r2, #255	; 0xff
 801668a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 801668e:	e74a      	b.n	8016526 <iNemo_setOrientation.constprop.40+0x206>
 8016690:	2201      	movs	r2, #1
 8016692:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8016696:	e746      	b.n	8016526 <iNemo_setOrientation.constprop.40+0x206>
 8016698:	22ff      	movs	r2, #255	; 0xff
 801669a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 801669e:	e742      	b.n	8016526 <iNemo_setOrientation.constprop.40+0x206>
 80166a0:	2201      	movs	r2, #1
 80166a2:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 80166a6:	b004      	add	sp, #16
 80166a8:	bcf0      	pop	{r4, r5, r6, r7}
 80166aa:	4770      	bx	lr
 80166ac:	2201      	movs	r2, #1
 80166ae:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 80166b2:	b004      	add	sp, #16
 80166b4:	bcf0      	pop	{r4, r5, r6, r7}
 80166b6:	4770      	bx	lr
 80166b8:	22ff      	movs	r2, #255	; 0xff
 80166ba:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 80166be:	b004      	add	sp, #16
 80166c0:	bcf0      	pop	{r4, r5, r6, r7}
 80166c2:	4770      	bx	lr
 80166c4:	2201      	movs	r2, #1
 80166c6:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 80166ca:	b004      	add	sp, #16
 80166cc:	bcf0      	pop	{r4, r5, r6, r7}
 80166ce:	4770      	bx	lr

080166d0 <iNemo_setOrientation_6X.constprop.41>:
 80166d0:	b4f0      	push	{r4, r5, r6, r7}
 80166d2:	4973      	ldr	r1, [pc, #460]	; (80168a0 <iNemo_setOrientation_6X.constprop.41+0x1d0>)
 80166d4:	4b73      	ldr	r3, [pc, #460]	; (80168a4 <iNemo_setOrientation_6X.constprop.41+0x1d4>)
 80166d6:	7808      	ldrb	r0, [r1, #0]
 80166d8:	2200      	movs	r2, #0
 80166da:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 80166de:	b084      	sub	sp, #16
 80166e0:	2f17      	cmp	r7, #23
 80166e2:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
 80166e6:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 80166ea:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
 80166ee:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 80166f2:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
 80166f6:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
 80166fa:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 80166fe:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
 8016702:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 8016706:	790a      	ldrb	r2, [r1, #4]
 8016708:	bf98      	it	ls
 801670a:	3020      	addls	r0, #32
 801670c:	f88d 0004 	strb.w	r0, [sp, #4]
 8016710:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016714:	2817      	cmp	r0, #23
 8016716:	bf98      	it	ls
 8016718:	3220      	addls	r2, #32
 801671a:	f88d 2008 	strb.w	r2, [sp, #8]
 801671e:	7a0a      	ldrb	r2, [r1, #8]
 8016720:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016724:	2817      	cmp	r0, #23
 8016726:	bf98      	it	ls
 8016728:	3220      	addls	r2, #32
 801672a:	f88d 200c 	strb.w	r2, [sp, #12]
 801672e:	784a      	ldrb	r2, [r1, #1]
 8016730:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016734:	2817      	cmp	r0, #23
 8016736:	bf98      	it	ls
 8016738:	3220      	addls	r2, #32
 801673a:	f88d 2005 	strb.w	r2, [sp, #5]
 801673e:	794a      	ldrb	r2, [r1, #5]
 8016740:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016744:	2817      	cmp	r0, #23
 8016746:	bf98      	it	ls
 8016748:	3220      	addls	r2, #32
 801674a:	f88d 2009 	strb.w	r2, [sp, #9]
 801674e:	7a4a      	ldrb	r2, [r1, #9]
 8016750:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016754:	2817      	cmp	r0, #23
 8016756:	bf98      	it	ls
 8016758:	3220      	addls	r2, #32
 801675a:	f88d 200d 	strb.w	r2, [sp, #13]
 801675e:	788a      	ldrb	r2, [r1, #2]
 8016760:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016764:	2817      	cmp	r0, #23
 8016766:	bf98      	it	ls
 8016768:	3220      	addls	r2, #32
 801676a:	f88d 2006 	strb.w	r2, [sp, #6]
 801676e:	798a      	ldrb	r2, [r1, #6]
 8016770:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8016774:	2817      	cmp	r0, #23
 8016776:	bf98      	it	ls
 8016778:	3220      	addls	r2, #32
 801677a:	f88d 200a 	strb.w	r2, [sp, #10]
 801677e:	7a8a      	ldrb	r2, [r1, #10]
 8016780:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 8016784:	2917      	cmp	r1, #23
 8016786:	bf98      	it	ls
 8016788:	3220      	addls	r2, #32
 801678a:	f88d 200e 	strb.w	r2, [sp, #14]
 801678e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8016792:	3a64      	subs	r2, #100	; 0x64
 8016794:	2a13      	cmp	r2, #19
 8016796:	d80e      	bhi.n	80167b6 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8016798:	e8df f002 	tbb	[pc, r2]
 801679c:	0d0dba0a 	.word	0x0d0dba0a
 80167a0:	0d0d0d0d 	.word	0x0d0d0d0d
 80167a4:	0dbe0d0d 	.word	0x0dbe0d0d
 80167a8:	c20d0d0d 	.word	0xc20d0d0d
 80167ac:	ca0dc60d 	.word	0xca0dc60d
 80167b0:	22ff      	movs	r2, #255	; 0xff
 80167b2:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 80167b6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80167ba:	3a64      	subs	r2, #100	; 0x64
 80167bc:	2a13      	cmp	r2, #19
 80167be:	d80e      	bhi.n	80167de <iNemo_setOrientation_6X.constprop.41+0x10e>
 80167c0:	e8df f002 	tbb	[pc, r2]
 80167c4:	0d0dba0a 	.word	0x0d0dba0a
 80167c8:	0d0d0d0d 	.word	0x0d0d0d0d
 80167cc:	0dbe0d0d 	.word	0x0dbe0d0d
 80167d0:	c20d0d0d 	.word	0xc20d0d0d
 80167d4:	ca0dc60d 	.word	0xca0dc60d
 80167d8:	22ff      	movs	r2, #255	; 0xff
 80167da:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 80167de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80167e2:	3a64      	subs	r2, #100	; 0x64
 80167e4:	2a13      	cmp	r2, #19
 80167e6:	d80e      	bhi.n	8016806 <iNemo_setOrientation_6X.constprop.41+0x136>
 80167e8:	e8df f002 	tbb	[pc, r2]
 80167ec:	0d0dba0a 	.word	0x0d0dba0a
 80167f0:	0d0d0d0d 	.word	0x0d0d0d0d
 80167f4:	0dbe0d0d 	.word	0x0dbe0d0d
 80167f8:	c20d0d0d 	.word	0xc20d0d0d
 80167fc:	ca0dc60d 	.word	0xca0dc60d
 8016800:	22ff      	movs	r2, #255	; 0xff
 8016802:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8016806:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801680a:	3a64      	subs	r2, #100	; 0x64
 801680c:	2a13      	cmp	r2, #19
 801680e:	d80e      	bhi.n	801682e <iNemo_setOrientation_6X.constprop.41+0x15e>
 8016810:	e8df f002 	tbb	[pc, r2]
 8016814:	0d0dba0a 	.word	0x0d0dba0a
 8016818:	0d0d0d0d 	.word	0x0d0d0d0d
 801681c:	0dbe0d0d 	.word	0x0dbe0d0d
 8016820:	c20d0d0d 	.word	0xc20d0d0d
 8016824:	ca0dc60d 	.word	0xca0dc60d
 8016828:	22ff      	movs	r2, #255	; 0xff
 801682a:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 801682e:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8016832:	3a64      	subs	r2, #100	; 0x64
 8016834:	2a13      	cmp	r2, #19
 8016836:	d80e      	bhi.n	8016856 <iNemo_setOrientation_6X.constprop.41+0x186>
 8016838:	e8df f002 	tbb	[pc, r2]
 801683c:	0d0dba0a 	.word	0x0d0dba0a
 8016840:	0d0d0d0d 	.word	0x0d0d0d0d
 8016844:	0dbe0d0d 	.word	0x0dbe0d0d
 8016848:	c20d0d0d 	.word	0xc20d0d0d
 801684c:	ca0dc60d 	.word	0xca0dc60d
 8016850:	22ff      	movs	r2, #255	; 0xff
 8016852:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 8016856:	f89d 200a 	ldrb.w	r2, [sp, #10]
 801685a:	3a64      	subs	r2, #100	; 0x64
 801685c:	2a13      	cmp	r2, #19
 801685e:	d80e      	bhi.n	801687e <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8016860:	e8df f002 	tbb	[pc, r2]
 8016864:	0d0dba0a 	.word	0x0d0dba0a
 8016868:	0d0d0d0d 	.word	0x0d0d0d0d
 801686c:	0dbe0d0d 	.word	0x0dbe0d0d
 8016870:	c20d0d0d 	.word	0xc20d0d0d
 8016874:	ca0dc60d 	.word	0xca0dc60d
 8016878:	22ff      	movs	r2, #255	; 0xff
 801687a:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 801687e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8016882:	3a64      	subs	r2, #100	; 0x64
 8016884:	2a13      	cmp	r2, #19
 8016886:	d812      	bhi.n	80168ae <iNemo_setOrientation_6X.constprop.41+0x1de>
 8016888:	e8df f002 	tbb	[pc, r2]
 801688c:	1111ba0e 	.word	0x1111ba0e
 8016890:	11111111 	.word	0x11111111
 8016894:	11be1111 	.word	0x11be1111
 8016898:	c2111111 	.word	0xc2111111
 801689c:	ca11c611 	.word	0xca11c611
 80168a0:	20000048 	.word	0x20000048
 80168a4:	20001c88 	.word	0x20001c88
 80168a8:	22ff      	movs	r2, #255	; 0xff
 80168aa:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 80168ae:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80168b2:	3a64      	subs	r2, #100	; 0x64
 80168b4:	2a13      	cmp	r2, #19
 80168b6:	d80e      	bhi.n	80168d6 <iNemo_setOrientation_6X.constprop.41+0x206>
 80168b8:	e8df f002 	tbb	[pc, r2]
 80168bc:	0d0db60a 	.word	0x0d0db60a
 80168c0:	0d0d0d0d 	.word	0x0d0d0d0d
 80168c4:	0dba0d0d 	.word	0x0dba0d0d
 80168c8:	be0d0d0d 	.word	0xbe0d0d0d
 80168cc:	c60dc20d 	.word	0xc60dc20d
 80168d0:	22ff      	movs	r2, #255	; 0xff
 80168d2:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 80168d6:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80168da:	3a64      	subs	r2, #100	; 0x64
 80168dc:	2a13      	cmp	r2, #19
 80168de:	d80e      	bhi.n	80168fe <iNemo_setOrientation_6X.constprop.41+0x22e>
 80168e0:	e8df f002 	tbb	[pc, r2]
 80168e4:	0d0db60a 	.word	0x0d0db60a
 80168e8:	0d0d0d0d 	.word	0x0d0d0d0d
 80168ec:	0dbc0d0d 	.word	0x0dbc0d0d
 80168f0:	c20d0d0d 	.word	0xc20d0d0d
 80168f4:	100dc80d 	.word	0x100dc80d
 80168f8:	22ff      	movs	r2, #255	; 0xff
 80168fa:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 80168fe:	b004      	add	sp, #16
 8016900:	bcf0      	pop	{r4, r5, r6, r7}
 8016902:	4770      	bx	lr
 8016904:	22ff      	movs	r2, #255	; 0xff
 8016906:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 801690a:	b004      	add	sp, #16
 801690c:	bcf0      	pop	{r4, r5, r6, r7}
 801690e:	4770      	bx	lr
 8016910:	2201      	movs	r2, #1
 8016912:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8016916:	e74e      	b.n	80167b6 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8016918:	2201      	movs	r2, #1
 801691a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 801691e:	e74a      	b.n	80167b6 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8016920:	22ff      	movs	r2, #255	; 0xff
 8016922:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 8016926:	e746      	b.n	80167b6 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8016928:	2201      	movs	r2, #1
 801692a:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 801692e:	e742      	b.n	80167b6 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8016930:	22ff      	movs	r2, #255	; 0xff
 8016932:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8016936:	e73e      	b.n	80167b6 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8016938:	2201      	movs	r2, #1
 801693a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 801693e:	e74e      	b.n	80167de <iNemo_setOrientation_6X.constprop.41+0x10e>
 8016940:	2201      	movs	r2, #1
 8016942:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 8016946:	e74a      	b.n	80167de <iNemo_setOrientation_6X.constprop.41+0x10e>
 8016948:	22ff      	movs	r2, #255	; 0xff
 801694a:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 801694e:	e746      	b.n	80167de <iNemo_setOrientation_6X.constprop.41+0x10e>
 8016950:	2201      	movs	r2, #1
 8016952:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 8016956:	e742      	b.n	80167de <iNemo_setOrientation_6X.constprop.41+0x10e>
 8016958:	22ff      	movs	r2, #255	; 0xff
 801695a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 801695e:	e73e      	b.n	80167de <iNemo_setOrientation_6X.constprop.41+0x10e>
 8016960:	2201      	movs	r2, #1
 8016962:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8016966:	e74e      	b.n	8016806 <iNemo_setOrientation_6X.constprop.41+0x136>
 8016968:	2201      	movs	r2, #1
 801696a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 801696e:	e74a      	b.n	8016806 <iNemo_setOrientation_6X.constprop.41+0x136>
 8016970:	22ff      	movs	r2, #255	; 0xff
 8016972:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 8016976:	e746      	b.n	8016806 <iNemo_setOrientation_6X.constprop.41+0x136>
 8016978:	2201      	movs	r2, #1
 801697a:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 801697e:	e742      	b.n	8016806 <iNemo_setOrientation_6X.constprop.41+0x136>
 8016980:	22ff      	movs	r2, #255	; 0xff
 8016982:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8016986:	e73e      	b.n	8016806 <iNemo_setOrientation_6X.constprop.41+0x136>
 8016988:	2201      	movs	r2, #1
 801698a:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 801698e:	e74e      	b.n	801682e <iNemo_setOrientation_6X.constprop.41+0x15e>
 8016990:	2201      	movs	r2, #1
 8016992:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 8016996:	e74a      	b.n	801682e <iNemo_setOrientation_6X.constprop.41+0x15e>
 8016998:	22ff      	movs	r2, #255	; 0xff
 801699a:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 801699e:	e746      	b.n	801682e <iNemo_setOrientation_6X.constprop.41+0x15e>
 80169a0:	2201      	movs	r2, #1
 80169a2:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 80169a6:	e742      	b.n	801682e <iNemo_setOrientation_6X.constprop.41+0x15e>
 80169a8:	22ff      	movs	r2, #255	; 0xff
 80169aa:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 80169ae:	e73e      	b.n	801682e <iNemo_setOrientation_6X.constprop.41+0x15e>
 80169b0:	2201      	movs	r2, #1
 80169b2:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 80169b6:	e74e      	b.n	8016856 <iNemo_setOrientation_6X.constprop.41+0x186>
 80169b8:	2201      	movs	r2, #1
 80169ba:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 80169be:	e74a      	b.n	8016856 <iNemo_setOrientation_6X.constprop.41+0x186>
 80169c0:	22ff      	movs	r2, #255	; 0xff
 80169c2:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 80169c6:	e746      	b.n	8016856 <iNemo_setOrientation_6X.constprop.41+0x186>
 80169c8:	2201      	movs	r2, #1
 80169ca:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 80169ce:	e742      	b.n	8016856 <iNemo_setOrientation_6X.constprop.41+0x186>
 80169d0:	22ff      	movs	r2, #255	; 0xff
 80169d2:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 80169d6:	e73e      	b.n	8016856 <iNemo_setOrientation_6X.constprop.41+0x186>
 80169d8:	2201      	movs	r2, #1
 80169da:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 80169de:	e74e      	b.n	801687e <iNemo_setOrientation_6X.constprop.41+0x1ae>
 80169e0:	2201      	movs	r2, #1
 80169e2:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 80169e6:	e74a      	b.n	801687e <iNemo_setOrientation_6X.constprop.41+0x1ae>
 80169e8:	22ff      	movs	r2, #255	; 0xff
 80169ea:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 80169ee:	e746      	b.n	801687e <iNemo_setOrientation_6X.constprop.41+0x1ae>
 80169f0:	2201      	movs	r2, #1
 80169f2:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 80169f6:	e742      	b.n	801687e <iNemo_setOrientation_6X.constprop.41+0x1ae>
 80169f8:	22ff      	movs	r2, #255	; 0xff
 80169fa:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 80169fe:	e73e      	b.n	801687e <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8016a00:	2201      	movs	r2, #1
 8016a02:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 8016a06:	e752      	b.n	80168ae <iNemo_setOrientation_6X.constprop.41+0x1de>
 8016a08:	2201      	movs	r2, #1
 8016a0a:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8016a0e:	e74e      	b.n	80168ae <iNemo_setOrientation_6X.constprop.41+0x1de>
 8016a10:	22ff      	movs	r2, #255	; 0xff
 8016a12:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8016a16:	e74a      	b.n	80168ae <iNemo_setOrientation_6X.constprop.41+0x1de>
 8016a18:	2201      	movs	r2, #1
 8016a1a:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 8016a1e:	e746      	b.n	80168ae <iNemo_setOrientation_6X.constprop.41+0x1de>
 8016a20:	22ff      	movs	r2, #255	; 0xff
 8016a22:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 8016a26:	e742      	b.n	80168ae <iNemo_setOrientation_6X.constprop.41+0x1de>
 8016a28:	2201      	movs	r2, #1
 8016a2a:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 8016a2e:	e752      	b.n	80168d6 <iNemo_setOrientation_6X.constprop.41+0x206>
 8016a30:	2201      	movs	r2, #1
 8016a32:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 8016a36:	e74e      	b.n	80168d6 <iNemo_setOrientation_6X.constprop.41+0x206>
 8016a38:	22ff      	movs	r2, #255	; 0xff
 8016a3a:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 8016a3e:	e74a      	b.n	80168d6 <iNemo_setOrientation_6X.constprop.41+0x206>
 8016a40:	2201      	movs	r2, #1
 8016a42:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 8016a46:	e746      	b.n	80168d6 <iNemo_setOrientation_6X.constprop.41+0x206>
 8016a48:	22ff      	movs	r2, #255	; 0xff
 8016a4a:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 8016a4e:	e742      	b.n	80168d6 <iNemo_setOrientation_6X.constprop.41+0x206>
 8016a50:	2201      	movs	r2, #1
 8016a52:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 8016a56:	b004      	add	sp, #16
 8016a58:	bcf0      	pop	{r4, r5, r6, r7}
 8016a5a:	4770      	bx	lr
 8016a5c:	2201      	movs	r2, #1
 8016a5e:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 8016a62:	b004      	add	sp, #16
 8016a64:	bcf0      	pop	{r4, r5, r6, r7}
 8016a66:	4770      	bx	lr
 8016a68:	22ff      	movs	r2, #255	; 0xff
 8016a6a:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 8016a6e:	b004      	add	sp, #16
 8016a70:	bcf0      	pop	{r4, r5, r6, r7}
 8016a72:	4770      	bx	lr
 8016a74:	2201      	movs	r2, #1
 8016a76:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8016a7a:	b004      	add	sp, #16
 8016a7c:	bcf0      	pop	{r4, r5, r6, r7}
 8016a7e:	4770      	bx	lr

08016a80 <MotionFX_initialize>:
 8016a80:	4a11      	ldr	r2, [pc, #68]	; (8016ac8 <MotionFX_initialize+0x48>)
 8016a82:	4912      	ldr	r1, [pc, #72]	; (8016acc <MotionFX_initialize+0x4c>)
 8016a84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a88:	6813      	ldr	r3, [r2, #0]
 8016a8a:	f023 0301 	bic.w	r3, r3, #1
 8016a8e:	6013      	str	r3, [r2, #0]
 8016a90:	680b      	ldr	r3, [r1, #0]
 8016a92:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8016a96:	4013      	ands	r3, r2
 8016a98:	f24c 2040 	movw	r0, #49728	; 0xc240
 8016a9c:	4283      	cmp	r3, r0
 8016a9e:	d01f      	beq.n	8016ae0 <MotionFX_initialize+0x60>
 8016aa0:	680b      	ldr	r3, [r1, #0]
 8016aa2:	f24c 2170 	movw	r1, #49776	; 0xc270
 8016aa6:	4013      	ands	r3, r2
 8016aa8:	428b      	cmp	r3, r1
 8016aaa:	d019      	beq.n	8016ae0 <MotionFX_initialize+0x60>
 8016aac:	4b08      	ldr	r3, [pc, #32]	; (8016ad0 <MotionFX_initialize+0x50>)
 8016aae:	2201      	movs	r2, #1
 8016ab0:	601a      	str	r2, [r3, #0]
 8016ab2:	681a      	ldr	r2, [r3, #0]
 8016ab4:	2a00      	cmp	r2, #0
 8016ab6:	d1fc      	bne.n	8016ab2 <MotionFX_initialize+0x32>
 8016ab8:	4b06      	ldr	r3, [pc, #24]	; (8016ad4 <MotionFX_initialize+0x54>)
 8016aba:	4a07      	ldr	r2, [pc, #28]	; (8016ad8 <MotionFX_initialize+0x58>)
 8016abc:	601a      	str	r2, [r3, #0]
 8016abe:	681a      	ldr	r2, [r3, #0]
 8016ac0:	4b06      	ldr	r3, [pc, #24]	; (8016adc <MotionFX_initialize+0x5c>)
 8016ac2:	429a      	cmp	r2, r3
 8016ac4:	d02b      	beq.n	8016b1e <MotionFX_initialize+0x9e>
 8016ac6:	e7fe      	b.n	8016ac6 <MotionFX_initialize+0x46>
 8016ac8:	e0002000 	.word	0xe0002000
 8016acc:	e000ed00 	.word	0xe000ed00
 8016ad0:	40023008 	.word	0x40023008
 8016ad4:	40023000 	.word	0x40023000
 8016ad8:	f407a5c2 	.word	0xf407a5c2
 8016adc:	b5e8b5cd 	.word	0xb5e8b5cd
 8016ae0:	4beb      	ldr	r3, [pc, #940]	; (8016e90 <MotionFX_initialize+0x410>)
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d1e1      	bne.n	8016aac <MotionFX_initialize+0x2c>
 8016ae8:	4aea      	ldr	r2, [pc, #936]	; (8016e94 <MotionFX_initialize+0x414>)
 8016aea:	6813      	ldr	r3, [r2, #0]
 8016aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016af0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8016af4:	d006      	beq.n	8016b04 <MotionFX_initialize+0x84>
 8016af6:	6813      	ldr	r3, [r2, #0]
 8016af8:	f240 4283 	movw	r2, #1155	; 0x483
 8016afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016b00:	4293      	cmp	r3, r2
 8016b02:	d1d3      	bne.n	8016aac <MotionFX_initialize+0x2c>
 8016b04:	4be4      	ldr	r3, [pc, #912]	; (8016e98 <MotionFX_initialize+0x418>)
 8016b06:	2201      	movs	r2, #1
 8016b08:	601a      	str	r2, [r3, #0]
 8016b0a:	681a      	ldr	r2, [r3, #0]
 8016b0c:	2a00      	cmp	r2, #0
 8016b0e:	d1fc      	bne.n	8016b0a <MotionFX_initialize+0x8a>
 8016b10:	4be2      	ldr	r3, [pc, #904]	; (8016e9c <MotionFX_initialize+0x41c>)
 8016b12:	4ae3      	ldr	r2, [pc, #908]	; (8016ea0 <MotionFX_initialize+0x420>)
 8016b14:	601a      	str	r2, [r3, #0]
 8016b16:	681a      	ldr	r2, [r3, #0]
 8016b18:	4be2      	ldr	r3, [pc, #904]	; (8016ea4 <MotionFX_initialize+0x424>)
 8016b1a:	429a      	cmp	r2, r3
 8016b1c:	d1d3      	bne.n	8016ac6 <MotionFX_initialize+0x46>
 8016b1e:	4ce2      	ldr	r4, [pc, #904]	; (8016ea8 <MotionFX_initialize+0x428>)
 8016b20:	eddf 7ae2 	vldr	s15, [pc, #904]	; 8016eac <MotionFX_initialize+0x42c>
 8016b24:	4ee2      	ldr	r6, [pc, #904]	; (8016eb0 <MotionFX_initialize+0x430>)
 8016b26:	eddf 6ae3 	vldr	s13, [pc, #908]	; 8016eb4 <MotionFX_initialize+0x434>
 8016b2a:	2500      	movs	r5, #0
 8016b2c:	f04f 0901 	mov.w	r9, #1
 8016b30:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 8016e68 <MotionFX_initialize+0x3e8>
 8016b34:	ed9f 1bce 	vldr	d1, [pc, #824]	; 8016e70 <MotionFX_initialize+0x3f0>
 8016b38:	ed9f 2bcf 	vldr	d2, [pc, #828]	; 8016e78 <MotionFX_initialize+0x3f8>
 8016b3c:	ed9f 3bd0 	vldr	d3, [pc, #832]	; 8016e80 <MotionFX_initialize+0x400>
 8016b40:	f20f 3b44 	addw	fp, pc, #836	; 0x344
 8016b44:	e9db ab00 	ldrd	sl, fp, [fp]
 8016b48:	f241 17b6 	movw	r7, #4534	; 0x11b6
 8016b4c:	f884 9d49 	strb.w	r9, [r4, #3401]	; 0xd49
 8016b50:	f8c4 5d4c 	str.w	r5, [r4, #3404]	; 0xd4c
 8016b54:	f8c4 5d50 	str.w	r5, [r4, #3408]	; 0xd50
 8016b58:	f7ff fbd2 	bl	8016300 <rt_InitInfAndNaN.isra.3>
 8016b5c:	f241 10b4 	movw	r0, #4532	; 0x11b4
 8016b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016b64:	f606 08e8 	addw	r8, r6, #2280	; 0x8e8
 8016b68:	5235      	strh	r5, [r6, r0]
 8016b6a:	55f5      	strb	r5, [r6, r7]
 8016b6c:	200a      	movs	r0, #10
 8016b6e:	ed88 5b02 	vstr	d5, [r8, #8]
 8016b72:	ed88 1b04 	vstr	d1, [r8, #16]
 8016b76:	ed88 2b06 	vstr	d2, [r8, #24]
 8016b7a:	e9c8 ab08 	strd	sl, fp, [r8, #32]
 8016b7e:	ed88 3b0a 	vstr	d3, [r8, #40]	; 0x28
 8016b82:	ed88 7a82 	vstr	s14, [r8, #520]	; 0x208
 8016b86:	f886 08e0 	strb.w	r0, [r6, #2272]	; 0x8e0
 8016b8a:	edc8 7a83 	vstr	s15, [r8, #524]	; 0x20c
 8016b8e:	edc8 7a84 	vstr	s15, [r8, #528]	; 0x210
 8016b92:	f8c4 5418 	str.w	r5, [r4, #1048]	; 0x418
 8016b96:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
 8016b9a:	f8c4 5430 	str.w	r5, [r4, #1072]	; 0x430
 8016b9e:	f8c4 541c 	str.w	r5, [r4, #1052]	; 0x41c
 8016ba2:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
 8016ba6:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
 8016baa:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
 8016bae:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
 8016bb2:	f884 5438 	strb.w	r5, [r4, #1080]	; 0x438
 8016bb6:	f7ff fba3 	bl	8016300 <rt_InitInfAndNaN.isra.3>
 8016bba:	f604 330c 	addw	r3, r4, #2828	; 0xb0c
 8016bbe:	ed86 5b06 	vstr	d5, [r6, #24]
 8016bc2:	eddf 4abd 	vldr	s9, [pc, #756]	; 8016eb8 <MotionFX_initialize+0x438>
 8016bc6:	ed9f 5abd 	vldr	s10, [pc, #756]	; 8016ebc <MotionFX_initialize+0x43c>
 8016bca:	eddf 5abd 	vldr	s11, [pc, #756]	; 8016ec0 <MotionFX_initialize+0x440>
 8016bce:	f8df c30c 	ldr.w	ip, [pc, #780]	; 8016edc <MotionFX_initialize+0x45c>
 8016bd2:	48bc      	ldr	r0, [pc, #752]	; (8016ec4 <MotionFX_initialize+0x444>)
 8016bd4:	49bc      	ldr	r1, [pc, #752]	; (8016ec8 <MotionFX_initialize+0x448>)
 8016bd6:	4abd      	ldr	r2, [pc, #756]	; (8016ecc <MotionFX_initialize+0x44c>)
 8016bd8:	ed86 7a86 	vstr	s14, [r6, #536]	; 0x218
 8016bdc:	f604 0ecc 	addw	lr, r4, #2252	; 0x8cc
 8016be0:	f604 4704 	addw	r7, r4, #3076	; 0xc04
 8016be4:	ed86 1b08 	vstr	d1, [r6, #32]
 8016be8:	ed86 2b0a 	vstr	d2, [r6, #40]	; 0x28
 8016bec:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8016bf0:	e9c6 ab0c 	strd	sl, fp, [r6, #48]	; 0x30
 8016bf4:	ed86 3b0e 	vstr	d3, [r6, #56]	; 0x38
 8016bf8:	f04f 0a02 	mov.w	sl, #2
 8016bfc:	ed83 7a21 	vstr	s14, [r3, #132]	; 0x84
 8016c00:	ed83 7a25 	vstr	s14, [r3, #148]	; 0x94
 8016c04:	ed83 7a29 	vstr	s14, [r3, #164]	; 0xa4
 8016c08:	edc6 7a87 	vstr	s15, [r6, #540]	; 0x21c
 8016c0c:	edc6 7a88 	vstr	s15, [r6, #544]	; 0x220
 8016c10:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
 8016c14:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 8016c18:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
 8016c1c:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
 8016c20:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
 8016c24:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
 8016c28:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
 8016c2c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
 8016c30:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
 8016c34:	f8a6 58dc 	strh.w	r5, [r6, #2268]	; 0x8dc
 8016c38:	f886 58de 	strb.w	r5, [r6, #2270]	; 0x8de
 8016c3c:	f886 900c 	strb.w	r9, [r6, #12]
 8016c40:	f04f 3b01 	mov.w	fp, #16843009	; 0x1010101
 8016c44:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
 8016c48:	f8c4 5448 	str.w	r5, [r4, #1096]	; 0x448
 8016c4c:	f8c4 5454 	str.w	r5, [r4, #1108]	; 0x454
 8016c50:	f8c4 5440 	str.w	r5, [r4, #1088]	; 0x440
 8016c54:	f884 5444 	strb.w	r5, [r4, #1092]	; 0x444
 8016c58:	f8c4 544c 	str.w	r5, [r4, #1100]	; 0x44c
 8016c5c:	f884 5450 	strb.w	r5, [r4, #1104]	; 0x450
 8016c60:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
 8016c64:	f884 545c 	strb.w	r5, [r4, #1116]	; 0x45c
 8016c68:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
 8016c6c:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 8016c70:	ed83 7a31 	vstr	s14, [r3, #196]	; 0xc4
 8016c74:	ed83 7a35 	vstr	s14, [r3, #212]	; 0xd4
 8016c78:	ed83 7a39 	vstr	s14, [r3, #228]	; 0xe4
 8016c7c:	ed83 7a3d 	vstr	s14, [r3, #244]	; 0xf4
 8016c80:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
 8016c84:	ed83 7a13 	vstr	s14, [r3, #76]	; 0x4c
 8016c88:	ed83 7a17 	vstr	s14, [r3, #92]	; 0x5c
 8016c8c:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8016c90:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 8016c94:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
 8016c98:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
 8016c9c:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
 8016ca0:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
 8016ca4:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
 8016ca8:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 8016cac:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
 8016cb0:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
 8016cb4:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
 8016cb8:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
 8016cbc:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
 8016cc0:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
 8016cc4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 8016cc8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8016ccc:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 8016cd0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 8016cd4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 8016cd8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 8016cdc:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
 8016ce0:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8016ce4:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
 8016ce8:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 8016cec:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 8016cf0:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 8016cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016cf8:	f8c4 cc2c 	str.w	ip, [r4, #3116]	; 0xc2c
 8016cfc:	f8c4 0c30 	str.w	r0, [r4, #3120]	; 0xc30
 8016d00:	f8c4 1c34 	str.w	r1, [r4, #3124]	; 0xc34
 8016d04:	f8c4 2c38 	str.w	r2, [r4, #3128]	; 0xc38
 8016d08:	edc8 7a28 	vstr	s15, [r8, #160]	; 0xa0
 8016d0c:	edc8 7a29 	vstr	s15, [r8, #164]	; 0xa4
 8016d10:	edc8 7a2a 	vstr	s15, [r8, #168]	; 0xa8
 8016d14:	ed87 7a08 	vstr	s14, [r7, #32]
 8016d18:	f604 18c4 	addw	r8, r4, #2500	; 0x9c4
 8016d1c:	edc7 4a00 	vstr	s9, [r7]
 8016d20:	ed87 5a01 	vstr	s10, [r7, #4]
 8016d24:	edc7 5a02 	vstr	s11, [r7, #8]
 8016d28:	edc7 6a03 	vstr	s13, [r7, #12]
 8016d2c:	ed87 6a04 	vstr	s12, [r7, #16]
 8016d30:	ed8e 7a21 	vstr	s14, [lr, #132]	; 0x84
 8016d34:	ed8e 7a25 	vstr	s14, [lr, #148]	; 0x94
 8016d38:	ed8e 7a29 	vstr	s14, [lr, #164]	; 0xa4
 8016d3c:	edce 7a1e 	vstr	s15, [lr, #120]	; 0x78
 8016d40:	edce 7a1f 	vstr	s15, [lr, #124]	; 0x7c
 8016d44:	edce 7a20 	vstr	s15, [lr, #128]	; 0x80
 8016d48:	edce 7a22 	vstr	s15, [lr, #136]	; 0x88
 8016d4c:	edce 7a23 	vstr	s15, [lr, #140]	; 0x8c
 8016d50:	edce 7a24 	vstr	s15, [lr, #144]	; 0x90
 8016d54:	edce 7a26 	vstr	s15, [lr, #152]	; 0x98
 8016d58:	edce 7a27 	vstr	s15, [lr, #156]	; 0x9c
 8016d5c:	edce 7a28 	vstr	s15, [lr, #160]	; 0xa0
 8016d60:	f8a4 3c3c 	strh.w	r3, [r4, #3132]	; 0xc3c
 8016d64:	f8c4 9c1c 	str.w	r9, [r4, #3100]	; 0xc1c
 8016d68:	f884 9c28 	strb.w	r9, [r4, #3112]	; 0xc28
 8016d6c:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 8016d70:	f8c4 bc18 	str.w	fp, [r4, #3096]	; 0xc18
 8016d74:	f884 ac20 	strb.w	sl, [r4, #3104]	; 0xc20
 8016d78:	edce 7a2a 	vstr	s15, [lr, #168]	; 0xa8
 8016d7c:	ed8e 7a2d 	vstr	s14, [lr, #180]	; 0xb4
 8016d80:	ed8e 7a31 	vstr	s14, [lr, #196]	; 0xc4
 8016d84:	ed8e 7a35 	vstr	s14, [lr, #212]	; 0xd4
 8016d88:	ed8e 7a39 	vstr	s14, [lr, #228]	; 0xe4
 8016d8c:	ed8e 7a3d 	vstr	s14, [lr, #244]	; 0xf4
 8016d90:	ed8e 7a0f 	vstr	s14, [lr, #60]	; 0x3c
 8016d94:	ed8e 7a13 	vstr	s14, [lr, #76]	; 0x4c
 8016d98:	ed8e 7a17 	vstr	s14, [lr, #92]	; 0x5c
 8016d9c:	edce 7a2b 	vstr	s15, [lr, #172]	; 0xac
 8016da0:	edce 7a2c 	vstr	s15, [lr, #176]	; 0xb0
 8016da4:	edce 7a2e 	vstr	s15, [lr, #184]	; 0xb8
 8016da8:	edce 7a2f 	vstr	s15, [lr, #188]	; 0xbc
 8016dac:	edce 7a30 	vstr	s15, [lr, #192]	; 0xc0
 8016db0:	edce 7a32 	vstr	s15, [lr, #200]	; 0xc8
 8016db4:	edce 7a33 	vstr	s15, [lr, #204]	; 0xcc
 8016db8:	edce 7a34 	vstr	s15, [lr, #208]	; 0xd0
 8016dbc:	edce 7a36 	vstr	s15, [lr, #216]	; 0xd8
 8016dc0:	edce 7a37 	vstr	s15, [lr, #220]	; 0xdc
 8016dc4:	edce 7a38 	vstr	s15, [lr, #224]	; 0xe0
 8016dc8:	edce 7a3a 	vstr	s15, [lr, #232]	; 0xe8
 8016dcc:	edce 7a3b 	vstr	s15, [lr, #236]	; 0xec
 8016dd0:	edce 7a3c 	vstr	s15, [lr, #240]	; 0xf0
 8016dd4:	edce 7a10 	vstr	s15, [lr, #64]	; 0x40
 8016dd8:	edce 7a11 	vstr	s15, [lr, #68]	; 0x44
 8016ddc:	edce 7a12 	vstr	s15, [lr, #72]	; 0x48
 8016de0:	edce 7a14 	vstr	s15, [lr, #80]	; 0x50
 8016de4:	edce 7a15 	vstr	s15, [lr, #84]	; 0x54
 8016de8:	edce 7a16 	vstr	s15, [lr, #88]	; 0x58
 8016dec:	edce 7a18 	vstr	s15, [lr, #96]	; 0x60
 8016df0:	edce 7a19 	vstr	s15, [lr, #100]	; 0x64
 8016df4:	edce 7a1a 	vstr	s15, [lr, #104]	; 0x68
 8016df8:	edce 7a1b 	vstr	s15, [lr, #108]	; 0x6c
 8016dfc:	edce 7a1c 	vstr	s15, [lr, #112]	; 0x70
 8016e00:	f8a4 39fc 	strh.w	r3, [r4, #2556]	; 0x9fc
 8016e04:	4b32      	ldr	r3, [pc, #200]	; (8016ed0 <MotionFX_initialize+0x450>)
 8016e06:	f8c4 c9ec 	str.w	ip, [r4, #2540]	; 0x9ec
 8016e0a:	f8c4 09f0 	str.w	r0, [r4, #2544]	; 0x9f0
 8016e0e:	f8c4 19f4 	str.w	r1, [r4, #2548]	; 0x9f4
 8016e12:	f8c4 29f8 	str.w	r2, [r4, #2552]	; 0x9f8
 8016e16:	f8c4 39d8 	str.w	r3, [r4, #2520]	; 0x9d8
 8016e1a:	edc6 7a2c 	vstr	s15, [r6, #176]	; 0xb0
 8016e1e:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
 8016e22:	edc6 7a2e 	vstr	s15, [r6, #184]	; 0xb8
 8016e26:	edc8 4a00 	vstr	s9, [r8]
 8016e2a:	ed88 5a01 	vstr	s10, [r8, #4]
 8016e2e:	edc8 5a02 	vstr	s11, [r8, #8]
 8016e32:	edc8 6a03 	vstr	s13, [r8, #12]
 8016e36:	ed88 6a04 	vstr	s12, [r8, #16]
 8016e3a:	ed88 7a08 	vstr	s14, [r8, #32]
 8016e3e:	edce 7a1d 	vstr	s15, [lr, #116]	; 0x74
 8016e42:	f8c4 99dc 	str.w	r9, [r4, #2524]	; 0x9dc
 8016e46:	f884 99e8 	strb.w	r9, [r4, #2536]	; 0x9e8
 8016e4a:	f884 a9e0 	strb.w	sl, [r4, #2528]	; 0x9e0
 8016e4e:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 8016e52:	f7ff fa65 	bl	8016320 <iNemo_setOrientation.constprop.40>
 8016e56:	f7ff fc3b 	bl	80166d0 <iNemo_setOrientation_6X.constprop.41>
 8016e5a:	f04f 567f 	mov.w	r6, #1069547520	; 0x3fc00000
 8016e5e:	f8df c080 	ldr.w	ip, [pc, #128]	; 8016ee0 <MotionFX_initialize+0x460>
 8016e62:	481c      	ldr	r0, [pc, #112]	; (8016ed4 <MotionFX_initialize+0x454>)
 8016e64:	491c      	ldr	r1, [pc, #112]	; (8016ed8 <MotionFX_initialize+0x458>)
 8016e66:	e03d      	b.n	8016ee4 <MotionFX_initialize+0x464>
 8016e68:	60000000 	.word	0x60000000
 8016e6c:	3fc76cab 	.word	0x3fc76cab
 8016e70:	20000000 	.word	0x20000000
 8016e74:	3fc55a40 	.word	0x3fc55a40
 8016e78:	00000000 	.word	0x00000000
 8016e7c:	3fbfdfb7 	.word	0x3fbfdfb7
 8016e80:	60000000 	.word	0x60000000
 8016e84:	3f9f1fed 	.word	0x3f9f1fed
 8016e88:	c0000000 	.word	0xc0000000
 8016e8c:	3fb2875e 	.word	0x3fb2875e
 8016e90:	e0042000 	.word	0xe0042000
 8016e94:	5c001000 	.word	0x5c001000
 8016e98:	58024c08 	.word	0x58024c08
 8016e9c:	58024c00 	.word	0x58024c00
 8016ea0:	f407a5c2 	.word	0xf407a5c2
 8016ea4:	b5e8b5cd 	.word	0xb5e8b5cd
 8016ea8:	20001c88 	.word	0x20001c88
 8016eac:	00000000 	.word	0x00000000
 8016eb0:	20000048 	.word	0x20000048
 8016eb4:	3f2ac083 	.word	0x3f2ac083
 8016eb8:	3f639581 	.word	0x3f639581
 8016ebc:	402ab021 	.word	0x402ab021
 8016ec0:	3f13f7cf 	.word	0x3f13f7cf
 8016ec4:	3a09a027 	.word	0x3a09a027
 8016ec8:	39b24207 	.word	0x39b24207
 8016ecc:	3dcccccd 	.word	0x3dcccccd
 8016ed0:	01000101 	.word	0x01000101
 8016ed4:	3a51b717 	.word	0x3a51b717
 8016ed8:	3a378034 	.word	0x3a378034
 8016edc:	39712c28 	.word	0x39712c28
 8016ee0:	3f666666 	.word	0x3f666666
 8016ee4:	4a14      	ldr	r2, [pc, #80]	; (8016f38 <MotionFX_initialize+0x4b8>)
 8016ee6:	4b15      	ldr	r3, [pc, #84]	; (8016f3c <MotionFX_initialize+0x4bc>)
 8016ee8:	f8df e054 	ldr.w	lr, [pc, #84]	; 8016f40 <MotionFX_initialize+0x4c0>
 8016eec:	edc8 6a03 	vstr	s13, [r8, #12]
 8016ef0:	edc7 6a03 	vstr	s13, [r7, #12]
 8016ef4:	f884 a9fd 	strb.w	sl, [r4, #2557]	; 0x9fd
 8016ef8:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 8016efc:	f884 ac3d 	strb.w	sl, [r4, #3133]	; 0xc3d
 8016f00:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 8016f04:	f8c4 bc19 	str.w	fp, [r4, #3097]	; 0xc19
 8016f08:	f8c4 e9d9 	str.w	lr, [r4, #2521]	; 0x9d9
 8016f0c:	f8c8 c000 	str.w	ip, [r8]
 8016f10:	f8c7 c000 	str.w	ip, [r7]
 8016f14:	f8c8 6004 	str.w	r6, [r8, #4]
 8016f18:	607e      	str	r6, [r7, #4]
 8016f1a:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
 8016f1e:	62b8      	str	r0, [r7, #40]	; 0x28
 8016f20:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
 8016f24:	62f9      	str	r1, [r7, #44]	; 0x2c
 8016f26:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
 8016f2a:	633a      	str	r2, [r7, #48]	; 0x30
 8016f2c:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 8016f30:	637b      	str	r3, [r7, #52]	; 0x34
 8016f32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f36:	bf00      	nop
 8016f38:	3b378034 	.word	0x3b378034
 8016f3c:	3dcccccd 	.word	0x3dcccccd
 8016f40:	01010001 	.word	0x01010001

08016f44 <MotionFX_GetLibVersion>:
 8016f44:	4b10      	ldr	r3, [pc, #64]	; (8016f88 <MotionFX_GetLibVersion+0x44>)
 8016f46:	f893 3d49 	ldrb.w	r3, [r3, #3401]	; 0xd49
 8016f4a:	b90b      	cbnz	r3, 8016f50 <MotionFX_GetLibVersion+0xc>
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	4770      	bx	lr
 8016f50:	b470      	push	{r4, r5, r6}
 8016f52:	4e0e      	ldr	r6, [pc, #56]	; (8016f8c <MotionFX_GetLibVersion+0x48>)
 8016f54:	4605      	mov	r5, r0
 8016f56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016f58:	b08b      	sub	sp, #44	; 0x2c
 8016f5a:	ac01      	add	r4, sp, #4
 8016f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f5e:	6833      	ldr	r3, [r6, #0]
 8016f60:	f824 3b02 	strh.w	r3, [r4], #2
 8016f64:	0c1b      	lsrs	r3, r3, #16
 8016f66:	7023      	strb	r3, [r4, #0]
 8016f68:	ac01      	add	r4, sp, #4
 8016f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016f6c:	8826      	ldrh	r6, [r4, #0]
 8016f6e:	60eb      	str	r3, [r5, #12]
 8016f70:	78a4      	ldrb	r4, [r4, #2]
 8016f72:	6028      	str	r0, [r5, #0]
 8016f74:	2312      	movs	r3, #18
 8016f76:	4618      	mov	r0, r3
 8016f78:	6069      	str	r1, [r5, #4]
 8016f7a:	60aa      	str	r2, [r5, #8]
 8016f7c:	822e      	strh	r6, [r5, #16]
 8016f7e:	74ac      	strb	r4, [r5, #18]
 8016f80:	b00b      	add	sp, #44	; 0x2c
 8016f82:	bc70      	pop	{r4, r5, r6}
 8016f84:	4770      	bx	lr
 8016f86:	bf00      	nop
 8016f88:	20001c88 	.word	0x20001c88
 8016f8c:	0801cc44 	.word	0x0801cc44

08016f90 <__errno>:
 8016f90:	4b01      	ldr	r3, [pc, #4]	; (8016f98 <__errno+0x8>)
 8016f92:	6818      	ldr	r0, [r3, #0]
 8016f94:	4770      	bx	lr
 8016f96:	bf00      	nop
 8016f98:	200013cc 	.word	0x200013cc

08016f9c <__libc_init_array>:
 8016f9c:	b570      	push	{r4, r5, r6, lr}
 8016f9e:	4d0d      	ldr	r5, [pc, #52]	; (8016fd4 <__libc_init_array+0x38>)
 8016fa0:	4c0d      	ldr	r4, [pc, #52]	; (8016fd8 <__libc_init_array+0x3c>)
 8016fa2:	1b64      	subs	r4, r4, r5
 8016fa4:	10a4      	asrs	r4, r4, #2
 8016fa6:	2600      	movs	r6, #0
 8016fa8:	42a6      	cmp	r6, r4
 8016faa:	d109      	bne.n	8016fc0 <__libc_init_array+0x24>
 8016fac:	4d0b      	ldr	r5, [pc, #44]	; (8016fdc <__libc_init_array+0x40>)
 8016fae:	4c0c      	ldr	r4, [pc, #48]	; (8016fe0 <__libc_init_array+0x44>)
 8016fb0:	f005 fa9e 	bl	801c4f0 <_init>
 8016fb4:	1b64      	subs	r4, r4, r5
 8016fb6:	10a4      	asrs	r4, r4, #2
 8016fb8:	2600      	movs	r6, #0
 8016fba:	42a6      	cmp	r6, r4
 8016fbc:	d105      	bne.n	8016fca <__libc_init_array+0x2e>
 8016fbe:	bd70      	pop	{r4, r5, r6, pc}
 8016fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8016fc4:	4798      	blx	r3
 8016fc6:	3601      	adds	r6, #1
 8016fc8:	e7ee      	b.n	8016fa8 <__libc_init_array+0xc>
 8016fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8016fce:	4798      	blx	r3
 8016fd0:	3601      	adds	r6, #1
 8016fd2:	e7f2      	b.n	8016fba <__libc_init_array+0x1e>
 8016fd4:	0801d5b0 	.word	0x0801d5b0
 8016fd8:	0801d5b0 	.word	0x0801d5b0
 8016fdc:	0801d5b0 	.word	0x0801d5b0
 8016fe0:	0801d5b4 	.word	0x0801d5b4

08016fe4 <memcpy>:
 8016fe4:	440a      	add	r2, r1
 8016fe6:	4291      	cmp	r1, r2
 8016fe8:	f100 33ff 	add.w	r3, r0, #4294967295
 8016fec:	d100      	bne.n	8016ff0 <memcpy+0xc>
 8016fee:	4770      	bx	lr
 8016ff0:	b510      	push	{r4, lr}
 8016ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ffa:	4291      	cmp	r1, r2
 8016ffc:	d1f9      	bne.n	8016ff2 <memcpy+0xe>
 8016ffe:	bd10      	pop	{r4, pc}

08017000 <memset>:
 8017000:	4402      	add	r2, r0
 8017002:	4603      	mov	r3, r0
 8017004:	4293      	cmp	r3, r2
 8017006:	d100      	bne.n	801700a <memset+0xa>
 8017008:	4770      	bx	lr
 801700a:	f803 1b01 	strb.w	r1, [r3], #1
 801700e:	e7f9      	b.n	8017004 <memset+0x4>

08017010 <__cvt>:
 8017010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017014:	ec55 4b10 	vmov	r4, r5, d0
 8017018:	2d00      	cmp	r5, #0
 801701a:	460e      	mov	r6, r1
 801701c:	4619      	mov	r1, r3
 801701e:	462b      	mov	r3, r5
 8017020:	bfbb      	ittet	lt
 8017022:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017026:	461d      	movlt	r5, r3
 8017028:	2300      	movge	r3, #0
 801702a:	232d      	movlt	r3, #45	; 0x2d
 801702c:	700b      	strb	r3, [r1, #0]
 801702e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017030:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017034:	4691      	mov	r9, r2
 8017036:	f023 0820 	bic.w	r8, r3, #32
 801703a:	bfbc      	itt	lt
 801703c:	4622      	movlt	r2, r4
 801703e:	4614      	movlt	r4, r2
 8017040:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017044:	d005      	beq.n	8017052 <__cvt+0x42>
 8017046:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801704a:	d100      	bne.n	801704e <__cvt+0x3e>
 801704c:	3601      	adds	r6, #1
 801704e:	2102      	movs	r1, #2
 8017050:	e000      	b.n	8017054 <__cvt+0x44>
 8017052:	2103      	movs	r1, #3
 8017054:	ab03      	add	r3, sp, #12
 8017056:	9301      	str	r3, [sp, #4]
 8017058:	ab02      	add	r3, sp, #8
 801705a:	9300      	str	r3, [sp, #0]
 801705c:	ec45 4b10 	vmov	d0, r4, r5
 8017060:	4653      	mov	r3, sl
 8017062:	4632      	mov	r2, r6
 8017064:	f000 fd38 	bl	8017ad8 <_dtoa_r>
 8017068:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801706c:	4607      	mov	r7, r0
 801706e:	d102      	bne.n	8017076 <__cvt+0x66>
 8017070:	f019 0f01 	tst.w	r9, #1
 8017074:	d022      	beq.n	80170bc <__cvt+0xac>
 8017076:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801707a:	eb07 0906 	add.w	r9, r7, r6
 801707e:	d110      	bne.n	80170a2 <__cvt+0x92>
 8017080:	783b      	ldrb	r3, [r7, #0]
 8017082:	2b30      	cmp	r3, #48	; 0x30
 8017084:	d10a      	bne.n	801709c <__cvt+0x8c>
 8017086:	2200      	movs	r2, #0
 8017088:	2300      	movs	r3, #0
 801708a:	4620      	mov	r0, r4
 801708c:	4629      	mov	r1, r5
 801708e:	f7e9 fd23 	bl	8000ad8 <__aeabi_dcmpeq>
 8017092:	b918      	cbnz	r0, 801709c <__cvt+0x8c>
 8017094:	f1c6 0601 	rsb	r6, r6, #1
 8017098:	f8ca 6000 	str.w	r6, [sl]
 801709c:	f8da 3000 	ldr.w	r3, [sl]
 80170a0:	4499      	add	r9, r3
 80170a2:	2200      	movs	r2, #0
 80170a4:	2300      	movs	r3, #0
 80170a6:	4620      	mov	r0, r4
 80170a8:	4629      	mov	r1, r5
 80170aa:	f7e9 fd15 	bl	8000ad8 <__aeabi_dcmpeq>
 80170ae:	b108      	cbz	r0, 80170b4 <__cvt+0xa4>
 80170b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80170b4:	2230      	movs	r2, #48	; 0x30
 80170b6:	9b03      	ldr	r3, [sp, #12]
 80170b8:	454b      	cmp	r3, r9
 80170ba:	d307      	bcc.n	80170cc <__cvt+0xbc>
 80170bc:	9b03      	ldr	r3, [sp, #12]
 80170be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80170c0:	1bdb      	subs	r3, r3, r7
 80170c2:	4638      	mov	r0, r7
 80170c4:	6013      	str	r3, [r2, #0]
 80170c6:	b004      	add	sp, #16
 80170c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170cc:	1c59      	adds	r1, r3, #1
 80170ce:	9103      	str	r1, [sp, #12]
 80170d0:	701a      	strb	r2, [r3, #0]
 80170d2:	e7f0      	b.n	80170b6 <__cvt+0xa6>

080170d4 <__exponent>:
 80170d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80170d6:	4603      	mov	r3, r0
 80170d8:	2900      	cmp	r1, #0
 80170da:	bfb8      	it	lt
 80170dc:	4249      	neglt	r1, r1
 80170de:	f803 2b02 	strb.w	r2, [r3], #2
 80170e2:	bfb4      	ite	lt
 80170e4:	222d      	movlt	r2, #45	; 0x2d
 80170e6:	222b      	movge	r2, #43	; 0x2b
 80170e8:	2909      	cmp	r1, #9
 80170ea:	7042      	strb	r2, [r0, #1]
 80170ec:	dd2a      	ble.n	8017144 <__exponent+0x70>
 80170ee:	f10d 0407 	add.w	r4, sp, #7
 80170f2:	46a4      	mov	ip, r4
 80170f4:	270a      	movs	r7, #10
 80170f6:	46a6      	mov	lr, r4
 80170f8:	460a      	mov	r2, r1
 80170fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80170fe:	fb07 1516 	mls	r5, r7, r6, r1
 8017102:	3530      	adds	r5, #48	; 0x30
 8017104:	2a63      	cmp	r2, #99	; 0x63
 8017106:	f104 34ff 	add.w	r4, r4, #4294967295
 801710a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801710e:	4631      	mov	r1, r6
 8017110:	dcf1      	bgt.n	80170f6 <__exponent+0x22>
 8017112:	3130      	adds	r1, #48	; 0x30
 8017114:	f1ae 0502 	sub.w	r5, lr, #2
 8017118:	f804 1c01 	strb.w	r1, [r4, #-1]
 801711c:	1c44      	adds	r4, r0, #1
 801711e:	4629      	mov	r1, r5
 8017120:	4561      	cmp	r1, ip
 8017122:	d30a      	bcc.n	801713a <__exponent+0x66>
 8017124:	f10d 0209 	add.w	r2, sp, #9
 8017128:	eba2 020e 	sub.w	r2, r2, lr
 801712c:	4565      	cmp	r5, ip
 801712e:	bf88      	it	hi
 8017130:	2200      	movhi	r2, #0
 8017132:	4413      	add	r3, r2
 8017134:	1a18      	subs	r0, r3, r0
 8017136:	b003      	add	sp, #12
 8017138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801713a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801713e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017142:	e7ed      	b.n	8017120 <__exponent+0x4c>
 8017144:	2330      	movs	r3, #48	; 0x30
 8017146:	3130      	adds	r1, #48	; 0x30
 8017148:	7083      	strb	r3, [r0, #2]
 801714a:	70c1      	strb	r1, [r0, #3]
 801714c:	1d03      	adds	r3, r0, #4
 801714e:	e7f1      	b.n	8017134 <__exponent+0x60>

08017150 <_printf_float>:
 8017150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017154:	ed2d 8b02 	vpush	{d8}
 8017158:	b08d      	sub	sp, #52	; 0x34
 801715a:	460c      	mov	r4, r1
 801715c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017160:	4616      	mov	r6, r2
 8017162:	461f      	mov	r7, r3
 8017164:	4605      	mov	r5, r0
 8017166:	f001 fb99 	bl	801889c <_localeconv_r>
 801716a:	f8d0 a000 	ldr.w	sl, [r0]
 801716e:	4650      	mov	r0, sl
 8017170:	f7e9 f836 	bl	80001e0 <strlen>
 8017174:	2300      	movs	r3, #0
 8017176:	930a      	str	r3, [sp, #40]	; 0x28
 8017178:	6823      	ldr	r3, [r4, #0]
 801717a:	9305      	str	r3, [sp, #20]
 801717c:	f8d8 3000 	ldr.w	r3, [r8]
 8017180:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017184:	3307      	adds	r3, #7
 8017186:	f023 0307 	bic.w	r3, r3, #7
 801718a:	f103 0208 	add.w	r2, r3, #8
 801718e:	f8c8 2000 	str.w	r2, [r8]
 8017192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017196:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801719a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801719e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80171a2:	9307      	str	r3, [sp, #28]
 80171a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80171a8:	ee08 0a10 	vmov	s16, r0
 80171ac:	4b9f      	ldr	r3, [pc, #636]	; (801742c <_printf_float+0x2dc>)
 80171ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80171b2:	f04f 32ff 	mov.w	r2, #4294967295
 80171b6:	f7e9 fcc1 	bl	8000b3c <__aeabi_dcmpun>
 80171ba:	bb88      	cbnz	r0, 8017220 <_printf_float+0xd0>
 80171bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80171c0:	4b9a      	ldr	r3, [pc, #616]	; (801742c <_printf_float+0x2dc>)
 80171c2:	f04f 32ff 	mov.w	r2, #4294967295
 80171c6:	f7e9 fc9b 	bl	8000b00 <__aeabi_dcmple>
 80171ca:	bb48      	cbnz	r0, 8017220 <_printf_float+0xd0>
 80171cc:	2200      	movs	r2, #0
 80171ce:	2300      	movs	r3, #0
 80171d0:	4640      	mov	r0, r8
 80171d2:	4649      	mov	r1, r9
 80171d4:	f7e9 fc8a 	bl	8000aec <__aeabi_dcmplt>
 80171d8:	b110      	cbz	r0, 80171e0 <_printf_float+0x90>
 80171da:	232d      	movs	r3, #45	; 0x2d
 80171dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80171e0:	4b93      	ldr	r3, [pc, #588]	; (8017430 <_printf_float+0x2e0>)
 80171e2:	4894      	ldr	r0, [pc, #592]	; (8017434 <_printf_float+0x2e4>)
 80171e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80171e8:	bf94      	ite	ls
 80171ea:	4698      	movls	r8, r3
 80171ec:	4680      	movhi	r8, r0
 80171ee:	2303      	movs	r3, #3
 80171f0:	6123      	str	r3, [r4, #16]
 80171f2:	9b05      	ldr	r3, [sp, #20]
 80171f4:	f023 0204 	bic.w	r2, r3, #4
 80171f8:	6022      	str	r2, [r4, #0]
 80171fa:	f04f 0900 	mov.w	r9, #0
 80171fe:	9700      	str	r7, [sp, #0]
 8017200:	4633      	mov	r3, r6
 8017202:	aa0b      	add	r2, sp, #44	; 0x2c
 8017204:	4621      	mov	r1, r4
 8017206:	4628      	mov	r0, r5
 8017208:	f000 f9d8 	bl	80175bc <_printf_common>
 801720c:	3001      	adds	r0, #1
 801720e:	f040 8090 	bne.w	8017332 <_printf_float+0x1e2>
 8017212:	f04f 30ff 	mov.w	r0, #4294967295
 8017216:	b00d      	add	sp, #52	; 0x34
 8017218:	ecbd 8b02 	vpop	{d8}
 801721c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017220:	4642      	mov	r2, r8
 8017222:	464b      	mov	r3, r9
 8017224:	4640      	mov	r0, r8
 8017226:	4649      	mov	r1, r9
 8017228:	f7e9 fc88 	bl	8000b3c <__aeabi_dcmpun>
 801722c:	b140      	cbz	r0, 8017240 <_printf_float+0xf0>
 801722e:	464b      	mov	r3, r9
 8017230:	2b00      	cmp	r3, #0
 8017232:	bfbc      	itt	lt
 8017234:	232d      	movlt	r3, #45	; 0x2d
 8017236:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801723a:	487f      	ldr	r0, [pc, #508]	; (8017438 <_printf_float+0x2e8>)
 801723c:	4b7f      	ldr	r3, [pc, #508]	; (801743c <_printf_float+0x2ec>)
 801723e:	e7d1      	b.n	80171e4 <_printf_float+0x94>
 8017240:	6863      	ldr	r3, [r4, #4]
 8017242:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017246:	9206      	str	r2, [sp, #24]
 8017248:	1c5a      	adds	r2, r3, #1
 801724a:	d13f      	bne.n	80172cc <_printf_float+0x17c>
 801724c:	2306      	movs	r3, #6
 801724e:	6063      	str	r3, [r4, #4]
 8017250:	9b05      	ldr	r3, [sp, #20]
 8017252:	6861      	ldr	r1, [r4, #4]
 8017254:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017258:	2300      	movs	r3, #0
 801725a:	9303      	str	r3, [sp, #12]
 801725c:	ab0a      	add	r3, sp, #40	; 0x28
 801725e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017262:	ab09      	add	r3, sp, #36	; 0x24
 8017264:	ec49 8b10 	vmov	d0, r8, r9
 8017268:	9300      	str	r3, [sp, #0]
 801726a:	6022      	str	r2, [r4, #0]
 801726c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017270:	4628      	mov	r0, r5
 8017272:	f7ff fecd 	bl	8017010 <__cvt>
 8017276:	9b06      	ldr	r3, [sp, #24]
 8017278:	9909      	ldr	r1, [sp, #36]	; 0x24
 801727a:	2b47      	cmp	r3, #71	; 0x47
 801727c:	4680      	mov	r8, r0
 801727e:	d108      	bne.n	8017292 <_printf_float+0x142>
 8017280:	1cc8      	adds	r0, r1, #3
 8017282:	db02      	blt.n	801728a <_printf_float+0x13a>
 8017284:	6863      	ldr	r3, [r4, #4]
 8017286:	4299      	cmp	r1, r3
 8017288:	dd41      	ble.n	801730e <_printf_float+0x1be>
 801728a:	f1ab 0b02 	sub.w	fp, fp, #2
 801728e:	fa5f fb8b 	uxtb.w	fp, fp
 8017292:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017296:	d820      	bhi.n	80172da <_printf_float+0x18a>
 8017298:	3901      	subs	r1, #1
 801729a:	465a      	mov	r2, fp
 801729c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80172a0:	9109      	str	r1, [sp, #36]	; 0x24
 80172a2:	f7ff ff17 	bl	80170d4 <__exponent>
 80172a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80172a8:	1813      	adds	r3, r2, r0
 80172aa:	2a01      	cmp	r2, #1
 80172ac:	4681      	mov	r9, r0
 80172ae:	6123      	str	r3, [r4, #16]
 80172b0:	dc02      	bgt.n	80172b8 <_printf_float+0x168>
 80172b2:	6822      	ldr	r2, [r4, #0]
 80172b4:	07d2      	lsls	r2, r2, #31
 80172b6:	d501      	bpl.n	80172bc <_printf_float+0x16c>
 80172b8:	3301      	adds	r3, #1
 80172ba:	6123      	str	r3, [r4, #16]
 80172bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d09c      	beq.n	80171fe <_printf_float+0xae>
 80172c4:	232d      	movs	r3, #45	; 0x2d
 80172c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80172ca:	e798      	b.n	80171fe <_printf_float+0xae>
 80172cc:	9a06      	ldr	r2, [sp, #24]
 80172ce:	2a47      	cmp	r2, #71	; 0x47
 80172d0:	d1be      	bne.n	8017250 <_printf_float+0x100>
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d1bc      	bne.n	8017250 <_printf_float+0x100>
 80172d6:	2301      	movs	r3, #1
 80172d8:	e7b9      	b.n	801724e <_printf_float+0xfe>
 80172da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80172de:	d118      	bne.n	8017312 <_printf_float+0x1c2>
 80172e0:	2900      	cmp	r1, #0
 80172e2:	6863      	ldr	r3, [r4, #4]
 80172e4:	dd0b      	ble.n	80172fe <_printf_float+0x1ae>
 80172e6:	6121      	str	r1, [r4, #16]
 80172e8:	b913      	cbnz	r3, 80172f0 <_printf_float+0x1a0>
 80172ea:	6822      	ldr	r2, [r4, #0]
 80172ec:	07d0      	lsls	r0, r2, #31
 80172ee:	d502      	bpl.n	80172f6 <_printf_float+0x1a6>
 80172f0:	3301      	adds	r3, #1
 80172f2:	440b      	add	r3, r1
 80172f4:	6123      	str	r3, [r4, #16]
 80172f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80172f8:	f04f 0900 	mov.w	r9, #0
 80172fc:	e7de      	b.n	80172bc <_printf_float+0x16c>
 80172fe:	b913      	cbnz	r3, 8017306 <_printf_float+0x1b6>
 8017300:	6822      	ldr	r2, [r4, #0]
 8017302:	07d2      	lsls	r2, r2, #31
 8017304:	d501      	bpl.n	801730a <_printf_float+0x1ba>
 8017306:	3302      	adds	r3, #2
 8017308:	e7f4      	b.n	80172f4 <_printf_float+0x1a4>
 801730a:	2301      	movs	r3, #1
 801730c:	e7f2      	b.n	80172f4 <_printf_float+0x1a4>
 801730e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017314:	4299      	cmp	r1, r3
 8017316:	db05      	blt.n	8017324 <_printf_float+0x1d4>
 8017318:	6823      	ldr	r3, [r4, #0]
 801731a:	6121      	str	r1, [r4, #16]
 801731c:	07d8      	lsls	r0, r3, #31
 801731e:	d5ea      	bpl.n	80172f6 <_printf_float+0x1a6>
 8017320:	1c4b      	adds	r3, r1, #1
 8017322:	e7e7      	b.n	80172f4 <_printf_float+0x1a4>
 8017324:	2900      	cmp	r1, #0
 8017326:	bfd4      	ite	le
 8017328:	f1c1 0202 	rsble	r2, r1, #2
 801732c:	2201      	movgt	r2, #1
 801732e:	4413      	add	r3, r2
 8017330:	e7e0      	b.n	80172f4 <_printf_float+0x1a4>
 8017332:	6823      	ldr	r3, [r4, #0]
 8017334:	055a      	lsls	r2, r3, #21
 8017336:	d407      	bmi.n	8017348 <_printf_float+0x1f8>
 8017338:	6923      	ldr	r3, [r4, #16]
 801733a:	4642      	mov	r2, r8
 801733c:	4631      	mov	r1, r6
 801733e:	4628      	mov	r0, r5
 8017340:	47b8      	blx	r7
 8017342:	3001      	adds	r0, #1
 8017344:	d12c      	bne.n	80173a0 <_printf_float+0x250>
 8017346:	e764      	b.n	8017212 <_printf_float+0xc2>
 8017348:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801734c:	f240 80e0 	bls.w	8017510 <_printf_float+0x3c0>
 8017350:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017354:	2200      	movs	r2, #0
 8017356:	2300      	movs	r3, #0
 8017358:	f7e9 fbbe 	bl	8000ad8 <__aeabi_dcmpeq>
 801735c:	2800      	cmp	r0, #0
 801735e:	d034      	beq.n	80173ca <_printf_float+0x27a>
 8017360:	4a37      	ldr	r2, [pc, #220]	; (8017440 <_printf_float+0x2f0>)
 8017362:	2301      	movs	r3, #1
 8017364:	4631      	mov	r1, r6
 8017366:	4628      	mov	r0, r5
 8017368:	47b8      	blx	r7
 801736a:	3001      	adds	r0, #1
 801736c:	f43f af51 	beq.w	8017212 <_printf_float+0xc2>
 8017370:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017374:	429a      	cmp	r2, r3
 8017376:	db02      	blt.n	801737e <_printf_float+0x22e>
 8017378:	6823      	ldr	r3, [r4, #0]
 801737a:	07d8      	lsls	r0, r3, #31
 801737c:	d510      	bpl.n	80173a0 <_printf_float+0x250>
 801737e:	ee18 3a10 	vmov	r3, s16
 8017382:	4652      	mov	r2, sl
 8017384:	4631      	mov	r1, r6
 8017386:	4628      	mov	r0, r5
 8017388:	47b8      	blx	r7
 801738a:	3001      	adds	r0, #1
 801738c:	f43f af41 	beq.w	8017212 <_printf_float+0xc2>
 8017390:	f04f 0800 	mov.w	r8, #0
 8017394:	f104 091a 	add.w	r9, r4, #26
 8017398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801739a:	3b01      	subs	r3, #1
 801739c:	4543      	cmp	r3, r8
 801739e:	dc09      	bgt.n	80173b4 <_printf_float+0x264>
 80173a0:	6823      	ldr	r3, [r4, #0]
 80173a2:	079b      	lsls	r3, r3, #30
 80173a4:	f100 8105 	bmi.w	80175b2 <_printf_float+0x462>
 80173a8:	68e0      	ldr	r0, [r4, #12]
 80173aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80173ac:	4298      	cmp	r0, r3
 80173ae:	bfb8      	it	lt
 80173b0:	4618      	movlt	r0, r3
 80173b2:	e730      	b.n	8017216 <_printf_float+0xc6>
 80173b4:	2301      	movs	r3, #1
 80173b6:	464a      	mov	r2, r9
 80173b8:	4631      	mov	r1, r6
 80173ba:	4628      	mov	r0, r5
 80173bc:	47b8      	blx	r7
 80173be:	3001      	adds	r0, #1
 80173c0:	f43f af27 	beq.w	8017212 <_printf_float+0xc2>
 80173c4:	f108 0801 	add.w	r8, r8, #1
 80173c8:	e7e6      	b.n	8017398 <_printf_float+0x248>
 80173ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	dc39      	bgt.n	8017444 <_printf_float+0x2f4>
 80173d0:	4a1b      	ldr	r2, [pc, #108]	; (8017440 <_printf_float+0x2f0>)
 80173d2:	2301      	movs	r3, #1
 80173d4:	4631      	mov	r1, r6
 80173d6:	4628      	mov	r0, r5
 80173d8:	47b8      	blx	r7
 80173da:	3001      	adds	r0, #1
 80173dc:	f43f af19 	beq.w	8017212 <_printf_float+0xc2>
 80173e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80173e4:	4313      	orrs	r3, r2
 80173e6:	d102      	bne.n	80173ee <_printf_float+0x29e>
 80173e8:	6823      	ldr	r3, [r4, #0]
 80173ea:	07d9      	lsls	r1, r3, #31
 80173ec:	d5d8      	bpl.n	80173a0 <_printf_float+0x250>
 80173ee:	ee18 3a10 	vmov	r3, s16
 80173f2:	4652      	mov	r2, sl
 80173f4:	4631      	mov	r1, r6
 80173f6:	4628      	mov	r0, r5
 80173f8:	47b8      	blx	r7
 80173fa:	3001      	adds	r0, #1
 80173fc:	f43f af09 	beq.w	8017212 <_printf_float+0xc2>
 8017400:	f04f 0900 	mov.w	r9, #0
 8017404:	f104 0a1a 	add.w	sl, r4, #26
 8017408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801740a:	425b      	negs	r3, r3
 801740c:	454b      	cmp	r3, r9
 801740e:	dc01      	bgt.n	8017414 <_printf_float+0x2c4>
 8017410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017412:	e792      	b.n	801733a <_printf_float+0x1ea>
 8017414:	2301      	movs	r3, #1
 8017416:	4652      	mov	r2, sl
 8017418:	4631      	mov	r1, r6
 801741a:	4628      	mov	r0, r5
 801741c:	47b8      	blx	r7
 801741e:	3001      	adds	r0, #1
 8017420:	f43f aef7 	beq.w	8017212 <_printf_float+0xc2>
 8017424:	f109 0901 	add.w	r9, r9, #1
 8017428:	e7ee      	b.n	8017408 <_printf_float+0x2b8>
 801742a:	bf00      	nop
 801742c:	7fefffff 	.word	0x7fefffff
 8017430:	0801cd48 	.word	0x0801cd48
 8017434:	0801cd4c 	.word	0x0801cd4c
 8017438:	0801cd54 	.word	0x0801cd54
 801743c:	0801cd50 	.word	0x0801cd50
 8017440:	0801cd58 	.word	0x0801cd58
 8017444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017446:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017448:	429a      	cmp	r2, r3
 801744a:	bfa8      	it	ge
 801744c:	461a      	movge	r2, r3
 801744e:	2a00      	cmp	r2, #0
 8017450:	4691      	mov	r9, r2
 8017452:	dc37      	bgt.n	80174c4 <_printf_float+0x374>
 8017454:	f04f 0b00 	mov.w	fp, #0
 8017458:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801745c:	f104 021a 	add.w	r2, r4, #26
 8017460:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017462:	9305      	str	r3, [sp, #20]
 8017464:	eba3 0309 	sub.w	r3, r3, r9
 8017468:	455b      	cmp	r3, fp
 801746a:	dc33      	bgt.n	80174d4 <_printf_float+0x384>
 801746c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017470:	429a      	cmp	r2, r3
 8017472:	db3b      	blt.n	80174ec <_printf_float+0x39c>
 8017474:	6823      	ldr	r3, [r4, #0]
 8017476:	07da      	lsls	r2, r3, #31
 8017478:	d438      	bmi.n	80174ec <_printf_float+0x39c>
 801747a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801747c:	9b05      	ldr	r3, [sp, #20]
 801747e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017480:	1ad3      	subs	r3, r2, r3
 8017482:	eba2 0901 	sub.w	r9, r2, r1
 8017486:	4599      	cmp	r9, r3
 8017488:	bfa8      	it	ge
 801748a:	4699      	movge	r9, r3
 801748c:	f1b9 0f00 	cmp.w	r9, #0
 8017490:	dc35      	bgt.n	80174fe <_printf_float+0x3ae>
 8017492:	f04f 0800 	mov.w	r8, #0
 8017496:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801749a:	f104 0a1a 	add.w	sl, r4, #26
 801749e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80174a2:	1a9b      	subs	r3, r3, r2
 80174a4:	eba3 0309 	sub.w	r3, r3, r9
 80174a8:	4543      	cmp	r3, r8
 80174aa:	f77f af79 	ble.w	80173a0 <_printf_float+0x250>
 80174ae:	2301      	movs	r3, #1
 80174b0:	4652      	mov	r2, sl
 80174b2:	4631      	mov	r1, r6
 80174b4:	4628      	mov	r0, r5
 80174b6:	47b8      	blx	r7
 80174b8:	3001      	adds	r0, #1
 80174ba:	f43f aeaa 	beq.w	8017212 <_printf_float+0xc2>
 80174be:	f108 0801 	add.w	r8, r8, #1
 80174c2:	e7ec      	b.n	801749e <_printf_float+0x34e>
 80174c4:	4613      	mov	r3, r2
 80174c6:	4631      	mov	r1, r6
 80174c8:	4642      	mov	r2, r8
 80174ca:	4628      	mov	r0, r5
 80174cc:	47b8      	blx	r7
 80174ce:	3001      	adds	r0, #1
 80174d0:	d1c0      	bne.n	8017454 <_printf_float+0x304>
 80174d2:	e69e      	b.n	8017212 <_printf_float+0xc2>
 80174d4:	2301      	movs	r3, #1
 80174d6:	4631      	mov	r1, r6
 80174d8:	4628      	mov	r0, r5
 80174da:	9205      	str	r2, [sp, #20]
 80174dc:	47b8      	blx	r7
 80174de:	3001      	adds	r0, #1
 80174e0:	f43f ae97 	beq.w	8017212 <_printf_float+0xc2>
 80174e4:	9a05      	ldr	r2, [sp, #20]
 80174e6:	f10b 0b01 	add.w	fp, fp, #1
 80174ea:	e7b9      	b.n	8017460 <_printf_float+0x310>
 80174ec:	ee18 3a10 	vmov	r3, s16
 80174f0:	4652      	mov	r2, sl
 80174f2:	4631      	mov	r1, r6
 80174f4:	4628      	mov	r0, r5
 80174f6:	47b8      	blx	r7
 80174f8:	3001      	adds	r0, #1
 80174fa:	d1be      	bne.n	801747a <_printf_float+0x32a>
 80174fc:	e689      	b.n	8017212 <_printf_float+0xc2>
 80174fe:	9a05      	ldr	r2, [sp, #20]
 8017500:	464b      	mov	r3, r9
 8017502:	4442      	add	r2, r8
 8017504:	4631      	mov	r1, r6
 8017506:	4628      	mov	r0, r5
 8017508:	47b8      	blx	r7
 801750a:	3001      	adds	r0, #1
 801750c:	d1c1      	bne.n	8017492 <_printf_float+0x342>
 801750e:	e680      	b.n	8017212 <_printf_float+0xc2>
 8017510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017512:	2a01      	cmp	r2, #1
 8017514:	dc01      	bgt.n	801751a <_printf_float+0x3ca>
 8017516:	07db      	lsls	r3, r3, #31
 8017518:	d538      	bpl.n	801758c <_printf_float+0x43c>
 801751a:	2301      	movs	r3, #1
 801751c:	4642      	mov	r2, r8
 801751e:	4631      	mov	r1, r6
 8017520:	4628      	mov	r0, r5
 8017522:	47b8      	blx	r7
 8017524:	3001      	adds	r0, #1
 8017526:	f43f ae74 	beq.w	8017212 <_printf_float+0xc2>
 801752a:	ee18 3a10 	vmov	r3, s16
 801752e:	4652      	mov	r2, sl
 8017530:	4631      	mov	r1, r6
 8017532:	4628      	mov	r0, r5
 8017534:	47b8      	blx	r7
 8017536:	3001      	adds	r0, #1
 8017538:	f43f ae6b 	beq.w	8017212 <_printf_float+0xc2>
 801753c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017540:	2200      	movs	r2, #0
 8017542:	2300      	movs	r3, #0
 8017544:	f7e9 fac8 	bl	8000ad8 <__aeabi_dcmpeq>
 8017548:	b9d8      	cbnz	r0, 8017582 <_printf_float+0x432>
 801754a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801754c:	f108 0201 	add.w	r2, r8, #1
 8017550:	3b01      	subs	r3, #1
 8017552:	4631      	mov	r1, r6
 8017554:	4628      	mov	r0, r5
 8017556:	47b8      	blx	r7
 8017558:	3001      	adds	r0, #1
 801755a:	d10e      	bne.n	801757a <_printf_float+0x42a>
 801755c:	e659      	b.n	8017212 <_printf_float+0xc2>
 801755e:	2301      	movs	r3, #1
 8017560:	4652      	mov	r2, sl
 8017562:	4631      	mov	r1, r6
 8017564:	4628      	mov	r0, r5
 8017566:	47b8      	blx	r7
 8017568:	3001      	adds	r0, #1
 801756a:	f43f ae52 	beq.w	8017212 <_printf_float+0xc2>
 801756e:	f108 0801 	add.w	r8, r8, #1
 8017572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017574:	3b01      	subs	r3, #1
 8017576:	4543      	cmp	r3, r8
 8017578:	dcf1      	bgt.n	801755e <_printf_float+0x40e>
 801757a:	464b      	mov	r3, r9
 801757c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017580:	e6dc      	b.n	801733c <_printf_float+0x1ec>
 8017582:	f04f 0800 	mov.w	r8, #0
 8017586:	f104 0a1a 	add.w	sl, r4, #26
 801758a:	e7f2      	b.n	8017572 <_printf_float+0x422>
 801758c:	2301      	movs	r3, #1
 801758e:	4642      	mov	r2, r8
 8017590:	e7df      	b.n	8017552 <_printf_float+0x402>
 8017592:	2301      	movs	r3, #1
 8017594:	464a      	mov	r2, r9
 8017596:	4631      	mov	r1, r6
 8017598:	4628      	mov	r0, r5
 801759a:	47b8      	blx	r7
 801759c:	3001      	adds	r0, #1
 801759e:	f43f ae38 	beq.w	8017212 <_printf_float+0xc2>
 80175a2:	f108 0801 	add.w	r8, r8, #1
 80175a6:	68e3      	ldr	r3, [r4, #12]
 80175a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80175aa:	1a5b      	subs	r3, r3, r1
 80175ac:	4543      	cmp	r3, r8
 80175ae:	dcf0      	bgt.n	8017592 <_printf_float+0x442>
 80175b0:	e6fa      	b.n	80173a8 <_printf_float+0x258>
 80175b2:	f04f 0800 	mov.w	r8, #0
 80175b6:	f104 0919 	add.w	r9, r4, #25
 80175ba:	e7f4      	b.n	80175a6 <_printf_float+0x456>

080175bc <_printf_common>:
 80175bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175c0:	4616      	mov	r6, r2
 80175c2:	4699      	mov	r9, r3
 80175c4:	688a      	ldr	r2, [r1, #8]
 80175c6:	690b      	ldr	r3, [r1, #16]
 80175c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80175cc:	4293      	cmp	r3, r2
 80175ce:	bfb8      	it	lt
 80175d0:	4613      	movlt	r3, r2
 80175d2:	6033      	str	r3, [r6, #0]
 80175d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80175d8:	4607      	mov	r7, r0
 80175da:	460c      	mov	r4, r1
 80175dc:	b10a      	cbz	r2, 80175e2 <_printf_common+0x26>
 80175de:	3301      	adds	r3, #1
 80175e0:	6033      	str	r3, [r6, #0]
 80175e2:	6823      	ldr	r3, [r4, #0]
 80175e4:	0699      	lsls	r1, r3, #26
 80175e6:	bf42      	ittt	mi
 80175e8:	6833      	ldrmi	r3, [r6, #0]
 80175ea:	3302      	addmi	r3, #2
 80175ec:	6033      	strmi	r3, [r6, #0]
 80175ee:	6825      	ldr	r5, [r4, #0]
 80175f0:	f015 0506 	ands.w	r5, r5, #6
 80175f4:	d106      	bne.n	8017604 <_printf_common+0x48>
 80175f6:	f104 0a19 	add.w	sl, r4, #25
 80175fa:	68e3      	ldr	r3, [r4, #12]
 80175fc:	6832      	ldr	r2, [r6, #0]
 80175fe:	1a9b      	subs	r3, r3, r2
 8017600:	42ab      	cmp	r3, r5
 8017602:	dc26      	bgt.n	8017652 <_printf_common+0x96>
 8017604:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017608:	1e13      	subs	r3, r2, #0
 801760a:	6822      	ldr	r2, [r4, #0]
 801760c:	bf18      	it	ne
 801760e:	2301      	movne	r3, #1
 8017610:	0692      	lsls	r2, r2, #26
 8017612:	d42b      	bmi.n	801766c <_printf_common+0xb0>
 8017614:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017618:	4649      	mov	r1, r9
 801761a:	4638      	mov	r0, r7
 801761c:	47c0      	blx	r8
 801761e:	3001      	adds	r0, #1
 8017620:	d01e      	beq.n	8017660 <_printf_common+0xa4>
 8017622:	6823      	ldr	r3, [r4, #0]
 8017624:	68e5      	ldr	r5, [r4, #12]
 8017626:	6832      	ldr	r2, [r6, #0]
 8017628:	f003 0306 	and.w	r3, r3, #6
 801762c:	2b04      	cmp	r3, #4
 801762e:	bf08      	it	eq
 8017630:	1aad      	subeq	r5, r5, r2
 8017632:	68a3      	ldr	r3, [r4, #8]
 8017634:	6922      	ldr	r2, [r4, #16]
 8017636:	bf0c      	ite	eq
 8017638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801763c:	2500      	movne	r5, #0
 801763e:	4293      	cmp	r3, r2
 8017640:	bfc4      	itt	gt
 8017642:	1a9b      	subgt	r3, r3, r2
 8017644:	18ed      	addgt	r5, r5, r3
 8017646:	2600      	movs	r6, #0
 8017648:	341a      	adds	r4, #26
 801764a:	42b5      	cmp	r5, r6
 801764c:	d11a      	bne.n	8017684 <_printf_common+0xc8>
 801764e:	2000      	movs	r0, #0
 8017650:	e008      	b.n	8017664 <_printf_common+0xa8>
 8017652:	2301      	movs	r3, #1
 8017654:	4652      	mov	r2, sl
 8017656:	4649      	mov	r1, r9
 8017658:	4638      	mov	r0, r7
 801765a:	47c0      	blx	r8
 801765c:	3001      	adds	r0, #1
 801765e:	d103      	bne.n	8017668 <_printf_common+0xac>
 8017660:	f04f 30ff 	mov.w	r0, #4294967295
 8017664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017668:	3501      	adds	r5, #1
 801766a:	e7c6      	b.n	80175fa <_printf_common+0x3e>
 801766c:	18e1      	adds	r1, r4, r3
 801766e:	1c5a      	adds	r2, r3, #1
 8017670:	2030      	movs	r0, #48	; 0x30
 8017672:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017676:	4422      	add	r2, r4
 8017678:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801767c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017680:	3302      	adds	r3, #2
 8017682:	e7c7      	b.n	8017614 <_printf_common+0x58>
 8017684:	2301      	movs	r3, #1
 8017686:	4622      	mov	r2, r4
 8017688:	4649      	mov	r1, r9
 801768a:	4638      	mov	r0, r7
 801768c:	47c0      	blx	r8
 801768e:	3001      	adds	r0, #1
 8017690:	d0e6      	beq.n	8017660 <_printf_common+0xa4>
 8017692:	3601      	adds	r6, #1
 8017694:	e7d9      	b.n	801764a <_printf_common+0x8e>
	...

08017698 <_printf_i>:
 8017698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801769c:	460c      	mov	r4, r1
 801769e:	4691      	mov	r9, r2
 80176a0:	7e27      	ldrb	r7, [r4, #24]
 80176a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80176a4:	2f78      	cmp	r7, #120	; 0x78
 80176a6:	4680      	mov	r8, r0
 80176a8:	469a      	mov	sl, r3
 80176aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80176ae:	d807      	bhi.n	80176c0 <_printf_i+0x28>
 80176b0:	2f62      	cmp	r7, #98	; 0x62
 80176b2:	d80a      	bhi.n	80176ca <_printf_i+0x32>
 80176b4:	2f00      	cmp	r7, #0
 80176b6:	f000 80d8 	beq.w	801786a <_printf_i+0x1d2>
 80176ba:	2f58      	cmp	r7, #88	; 0x58
 80176bc:	f000 80a3 	beq.w	8017806 <_printf_i+0x16e>
 80176c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80176c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80176c8:	e03a      	b.n	8017740 <_printf_i+0xa8>
 80176ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80176ce:	2b15      	cmp	r3, #21
 80176d0:	d8f6      	bhi.n	80176c0 <_printf_i+0x28>
 80176d2:	a001      	add	r0, pc, #4	; (adr r0, 80176d8 <_printf_i+0x40>)
 80176d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80176d8:	08017731 	.word	0x08017731
 80176dc:	08017745 	.word	0x08017745
 80176e0:	080176c1 	.word	0x080176c1
 80176e4:	080176c1 	.word	0x080176c1
 80176e8:	080176c1 	.word	0x080176c1
 80176ec:	080176c1 	.word	0x080176c1
 80176f0:	08017745 	.word	0x08017745
 80176f4:	080176c1 	.word	0x080176c1
 80176f8:	080176c1 	.word	0x080176c1
 80176fc:	080176c1 	.word	0x080176c1
 8017700:	080176c1 	.word	0x080176c1
 8017704:	08017851 	.word	0x08017851
 8017708:	08017775 	.word	0x08017775
 801770c:	08017833 	.word	0x08017833
 8017710:	080176c1 	.word	0x080176c1
 8017714:	080176c1 	.word	0x080176c1
 8017718:	08017873 	.word	0x08017873
 801771c:	080176c1 	.word	0x080176c1
 8017720:	08017775 	.word	0x08017775
 8017724:	080176c1 	.word	0x080176c1
 8017728:	080176c1 	.word	0x080176c1
 801772c:	0801783b 	.word	0x0801783b
 8017730:	680b      	ldr	r3, [r1, #0]
 8017732:	1d1a      	adds	r2, r3, #4
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	600a      	str	r2, [r1, #0]
 8017738:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801773c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017740:	2301      	movs	r3, #1
 8017742:	e0a3      	b.n	801788c <_printf_i+0x1f4>
 8017744:	6825      	ldr	r5, [r4, #0]
 8017746:	6808      	ldr	r0, [r1, #0]
 8017748:	062e      	lsls	r6, r5, #24
 801774a:	f100 0304 	add.w	r3, r0, #4
 801774e:	d50a      	bpl.n	8017766 <_printf_i+0xce>
 8017750:	6805      	ldr	r5, [r0, #0]
 8017752:	600b      	str	r3, [r1, #0]
 8017754:	2d00      	cmp	r5, #0
 8017756:	da03      	bge.n	8017760 <_printf_i+0xc8>
 8017758:	232d      	movs	r3, #45	; 0x2d
 801775a:	426d      	negs	r5, r5
 801775c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017760:	485e      	ldr	r0, [pc, #376]	; (80178dc <_printf_i+0x244>)
 8017762:	230a      	movs	r3, #10
 8017764:	e019      	b.n	801779a <_printf_i+0x102>
 8017766:	f015 0f40 	tst.w	r5, #64	; 0x40
 801776a:	6805      	ldr	r5, [r0, #0]
 801776c:	600b      	str	r3, [r1, #0]
 801776e:	bf18      	it	ne
 8017770:	b22d      	sxthne	r5, r5
 8017772:	e7ef      	b.n	8017754 <_printf_i+0xbc>
 8017774:	680b      	ldr	r3, [r1, #0]
 8017776:	6825      	ldr	r5, [r4, #0]
 8017778:	1d18      	adds	r0, r3, #4
 801777a:	6008      	str	r0, [r1, #0]
 801777c:	0628      	lsls	r0, r5, #24
 801777e:	d501      	bpl.n	8017784 <_printf_i+0xec>
 8017780:	681d      	ldr	r5, [r3, #0]
 8017782:	e002      	b.n	801778a <_printf_i+0xf2>
 8017784:	0669      	lsls	r1, r5, #25
 8017786:	d5fb      	bpl.n	8017780 <_printf_i+0xe8>
 8017788:	881d      	ldrh	r5, [r3, #0]
 801778a:	4854      	ldr	r0, [pc, #336]	; (80178dc <_printf_i+0x244>)
 801778c:	2f6f      	cmp	r7, #111	; 0x6f
 801778e:	bf0c      	ite	eq
 8017790:	2308      	moveq	r3, #8
 8017792:	230a      	movne	r3, #10
 8017794:	2100      	movs	r1, #0
 8017796:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801779a:	6866      	ldr	r6, [r4, #4]
 801779c:	60a6      	str	r6, [r4, #8]
 801779e:	2e00      	cmp	r6, #0
 80177a0:	bfa2      	ittt	ge
 80177a2:	6821      	ldrge	r1, [r4, #0]
 80177a4:	f021 0104 	bicge.w	r1, r1, #4
 80177a8:	6021      	strge	r1, [r4, #0]
 80177aa:	b90d      	cbnz	r5, 80177b0 <_printf_i+0x118>
 80177ac:	2e00      	cmp	r6, #0
 80177ae:	d04d      	beq.n	801784c <_printf_i+0x1b4>
 80177b0:	4616      	mov	r6, r2
 80177b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80177b6:	fb03 5711 	mls	r7, r3, r1, r5
 80177ba:	5dc7      	ldrb	r7, [r0, r7]
 80177bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80177c0:	462f      	mov	r7, r5
 80177c2:	42bb      	cmp	r3, r7
 80177c4:	460d      	mov	r5, r1
 80177c6:	d9f4      	bls.n	80177b2 <_printf_i+0x11a>
 80177c8:	2b08      	cmp	r3, #8
 80177ca:	d10b      	bne.n	80177e4 <_printf_i+0x14c>
 80177cc:	6823      	ldr	r3, [r4, #0]
 80177ce:	07df      	lsls	r7, r3, #31
 80177d0:	d508      	bpl.n	80177e4 <_printf_i+0x14c>
 80177d2:	6923      	ldr	r3, [r4, #16]
 80177d4:	6861      	ldr	r1, [r4, #4]
 80177d6:	4299      	cmp	r1, r3
 80177d8:	bfde      	ittt	le
 80177da:	2330      	movle	r3, #48	; 0x30
 80177dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80177e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80177e4:	1b92      	subs	r2, r2, r6
 80177e6:	6122      	str	r2, [r4, #16]
 80177e8:	f8cd a000 	str.w	sl, [sp]
 80177ec:	464b      	mov	r3, r9
 80177ee:	aa03      	add	r2, sp, #12
 80177f0:	4621      	mov	r1, r4
 80177f2:	4640      	mov	r0, r8
 80177f4:	f7ff fee2 	bl	80175bc <_printf_common>
 80177f8:	3001      	adds	r0, #1
 80177fa:	d14c      	bne.n	8017896 <_printf_i+0x1fe>
 80177fc:	f04f 30ff 	mov.w	r0, #4294967295
 8017800:	b004      	add	sp, #16
 8017802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017806:	4835      	ldr	r0, [pc, #212]	; (80178dc <_printf_i+0x244>)
 8017808:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801780c:	6823      	ldr	r3, [r4, #0]
 801780e:	680e      	ldr	r6, [r1, #0]
 8017810:	061f      	lsls	r7, r3, #24
 8017812:	f856 5b04 	ldr.w	r5, [r6], #4
 8017816:	600e      	str	r6, [r1, #0]
 8017818:	d514      	bpl.n	8017844 <_printf_i+0x1ac>
 801781a:	07d9      	lsls	r1, r3, #31
 801781c:	bf44      	itt	mi
 801781e:	f043 0320 	orrmi.w	r3, r3, #32
 8017822:	6023      	strmi	r3, [r4, #0]
 8017824:	b91d      	cbnz	r5, 801782e <_printf_i+0x196>
 8017826:	6823      	ldr	r3, [r4, #0]
 8017828:	f023 0320 	bic.w	r3, r3, #32
 801782c:	6023      	str	r3, [r4, #0]
 801782e:	2310      	movs	r3, #16
 8017830:	e7b0      	b.n	8017794 <_printf_i+0xfc>
 8017832:	6823      	ldr	r3, [r4, #0]
 8017834:	f043 0320 	orr.w	r3, r3, #32
 8017838:	6023      	str	r3, [r4, #0]
 801783a:	2378      	movs	r3, #120	; 0x78
 801783c:	4828      	ldr	r0, [pc, #160]	; (80178e0 <_printf_i+0x248>)
 801783e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017842:	e7e3      	b.n	801780c <_printf_i+0x174>
 8017844:	065e      	lsls	r6, r3, #25
 8017846:	bf48      	it	mi
 8017848:	b2ad      	uxthmi	r5, r5
 801784a:	e7e6      	b.n	801781a <_printf_i+0x182>
 801784c:	4616      	mov	r6, r2
 801784e:	e7bb      	b.n	80177c8 <_printf_i+0x130>
 8017850:	680b      	ldr	r3, [r1, #0]
 8017852:	6826      	ldr	r6, [r4, #0]
 8017854:	6960      	ldr	r0, [r4, #20]
 8017856:	1d1d      	adds	r5, r3, #4
 8017858:	600d      	str	r5, [r1, #0]
 801785a:	0635      	lsls	r5, r6, #24
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	d501      	bpl.n	8017864 <_printf_i+0x1cc>
 8017860:	6018      	str	r0, [r3, #0]
 8017862:	e002      	b.n	801786a <_printf_i+0x1d2>
 8017864:	0671      	lsls	r1, r6, #25
 8017866:	d5fb      	bpl.n	8017860 <_printf_i+0x1c8>
 8017868:	8018      	strh	r0, [r3, #0]
 801786a:	2300      	movs	r3, #0
 801786c:	6123      	str	r3, [r4, #16]
 801786e:	4616      	mov	r6, r2
 8017870:	e7ba      	b.n	80177e8 <_printf_i+0x150>
 8017872:	680b      	ldr	r3, [r1, #0]
 8017874:	1d1a      	adds	r2, r3, #4
 8017876:	600a      	str	r2, [r1, #0]
 8017878:	681e      	ldr	r6, [r3, #0]
 801787a:	6862      	ldr	r2, [r4, #4]
 801787c:	2100      	movs	r1, #0
 801787e:	4630      	mov	r0, r6
 8017880:	f7e8 fcb6 	bl	80001f0 <memchr>
 8017884:	b108      	cbz	r0, 801788a <_printf_i+0x1f2>
 8017886:	1b80      	subs	r0, r0, r6
 8017888:	6060      	str	r0, [r4, #4]
 801788a:	6863      	ldr	r3, [r4, #4]
 801788c:	6123      	str	r3, [r4, #16]
 801788e:	2300      	movs	r3, #0
 8017890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017894:	e7a8      	b.n	80177e8 <_printf_i+0x150>
 8017896:	6923      	ldr	r3, [r4, #16]
 8017898:	4632      	mov	r2, r6
 801789a:	4649      	mov	r1, r9
 801789c:	4640      	mov	r0, r8
 801789e:	47d0      	blx	sl
 80178a0:	3001      	adds	r0, #1
 80178a2:	d0ab      	beq.n	80177fc <_printf_i+0x164>
 80178a4:	6823      	ldr	r3, [r4, #0]
 80178a6:	079b      	lsls	r3, r3, #30
 80178a8:	d413      	bmi.n	80178d2 <_printf_i+0x23a>
 80178aa:	68e0      	ldr	r0, [r4, #12]
 80178ac:	9b03      	ldr	r3, [sp, #12]
 80178ae:	4298      	cmp	r0, r3
 80178b0:	bfb8      	it	lt
 80178b2:	4618      	movlt	r0, r3
 80178b4:	e7a4      	b.n	8017800 <_printf_i+0x168>
 80178b6:	2301      	movs	r3, #1
 80178b8:	4632      	mov	r2, r6
 80178ba:	4649      	mov	r1, r9
 80178bc:	4640      	mov	r0, r8
 80178be:	47d0      	blx	sl
 80178c0:	3001      	adds	r0, #1
 80178c2:	d09b      	beq.n	80177fc <_printf_i+0x164>
 80178c4:	3501      	adds	r5, #1
 80178c6:	68e3      	ldr	r3, [r4, #12]
 80178c8:	9903      	ldr	r1, [sp, #12]
 80178ca:	1a5b      	subs	r3, r3, r1
 80178cc:	42ab      	cmp	r3, r5
 80178ce:	dcf2      	bgt.n	80178b6 <_printf_i+0x21e>
 80178d0:	e7eb      	b.n	80178aa <_printf_i+0x212>
 80178d2:	2500      	movs	r5, #0
 80178d4:	f104 0619 	add.w	r6, r4, #25
 80178d8:	e7f5      	b.n	80178c6 <_printf_i+0x22e>
 80178da:	bf00      	nop
 80178dc:	0801cd5a 	.word	0x0801cd5a
 80178e0:	0801cd6b 	.word	0x0801cd6b

080178e4 <iprintf>:
 80178e4:	b40f      	push	{r0, r1, r2, r3}
 80178e6:	4b0a      	ldr	r3, [pc, #40]	; (8017910 <iprintf+0x2c>)
 80178e8:	b513      	push	{r0, r1, r4, lr}
 80178ea:	681c      	ldr	r4, [r3, #0]
 80178ec:	b124      	cbz	r4, 80178f8 <iprintf+0x14>
 80178ee:	69a3      	ldr	r3, [r4, #24]
 80178f0:	b913      	cbnz	r3, 80178f8 <iprintf+0x14>
 80178f2:	4620      	mov	r0, r4
 80178f4:	f000 ff34 	bl	8018760 <__sinit>
 80178f8:	ab05      	add	r3, sp, #20
 80178fa:	9a04      	ldr	r2, [sp, #16]
 80178fc:	68a1      	ldr	r1, [r4, #8]
 80178fe:	9301      	str	r3, [sp, #4]
 8017900:	4620      	mov	r0, r4
 8017902:	f001 fd99 	bl	8019438 <_vfiprintf_r>
 8017906:	b002      	add	sp, #8
 8017908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801790c:	b004      	add	sp, #16
 801790e:	4770      	bx	lr
 8017910:	200013cc 	.word	0x200013cc

08017914 <sniprintf>:
 8017914:	b40c      	push	{r2, r3}
 8017916:	b530      	push	{r4, r5, lr}
 8017918:	4b17      	ldr	r3, [pc, #92]	; (8017978 <sniprintf+0x64>)
 801791a:	1e0c      	subs	r4, r1, #0
 801791c:	681d      	ldr	r5, [r3, #0]
 801791e:	b09d      	sub	sp, #116	; 0x74
 8017920:	da08      	bge.n	8017934 <sniprintf+0x20>
 8017922:	238b      	movs	r3, #139	; 0x8b
 8017924:	602b      	str	r3, [r5, #0]
 8017926:	f04f 30ff 	mov.w	r0, #4294967295
 801792a:	b01d      	add	sp, #116	; 0x74
 801792c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017930:	b002      	add	sp, #8
 8017932:	4770      	bx	lr
 8017934:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017938:	f8ad 3014 	strh.w	r3, [sp, #20]
 801793c:	bf14      	ite	ne
 801793e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017942:	4623      	moveq	r3, r4
 8017944:	9304      	str	r3, [sp, #16]
 8017946:	9307      	str	r3, [sp, #28]
 8017948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801794c:	9002      	str	r0, [sp, #8]
 801794e:	9006      	str	r0, [sp, #24]
 8017950:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017954:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017956:	ab21      	add	r3, sp, #132	; 0x84
 8017958:	a902      	add	r1, sp, #8
 801795a:	4628      	mov	r0, r5
 801795c:	9301      	str	r3, [sp, #4]
 801795e:	f001 fc41 	bl	80191e4 <_svfiprintf_r>
 8017962:	1c43      	adds	r3, r0, #1
 8017964:	bfbc      	itt	lt
 8017966:	238b      	movlt	r3, #139	; 0x8b
 8017968:	602b      	strlt	r3, [r5, #0]
 801796a:	2c00      	cmp	r4, #0
 801796c:	d0dd      	beq.n	801792a <sniprintf+0x16>
 801796e:	9b02      	ldr	r3, [sp, #8]
 8017970:	2200      	movs	r2, #0
 8017972:	701a      	strb	r2, [r3, #0]
 8017974:	e7d9      	b.n	801792a <sniprintf+0x16>
 8017976:	bf00      	nop
 8017978:	200013cc 	.word	0x200013cc

0801797c <siprintf>:
 801797c:	b40e      	push	{r1, r2, r3}
 801797e:	b500      	push	{lr}
 8017980:	b09c      	sub	sp, #112	; 0x70
 8017982:	ab1d      	add	r3, sp, #116	; 0x74
 8017984:	9002      	str	r0, [sp, #8]
 8017986:	9006      	str	r0, [sp, #24]
 8017988:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801798c:	4809      	ldr	r0, [pc, #36]	; (80179b4 <siprintf+0x38>)
 801798e:	9107      	str	r1, [sp, #28]
 8017990:	9104      	str	r1, [sp, #16]
 8017992:	4909      	ldr	r1, [pc, #36]	; (80179b8 <siprintf+0x3c>)
 8017994:	f853 2b04 	ldr.w	r2, [r3], #4
 8017998:	9105      	str	r1, [sp, #20]
 801799a:	6800      	ldr	r0, [r0, #0]
 801799c:	9301      	str	r3, [sp, #4]
 801799e:	a902      	add	r1, sp, #8
 80179a0:	f001 fc20 	bl	80191e4 <_svfiprintf_r>
 80179a4:	9b02      	ldr	r3, [sp, #8]
 80179a6:	2200      	movs	r2, #0
 80179a8:	701a      	strb	r2, [r3, #0]
 80179aa:	b01c      	add	sp, #112	; 0x70
 80179ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80179b0:	b003      	add	sp, #12
 80179b2:	4770      	bx	lr
 80179b4:	200013cc 	.word	0x200013cc
 80179b8:	ffff0208 	.word	0xffff0208

080179bc <quorem>:
 80179bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179c0:	6903      	ldr	r3, [r0, #16]
 80179c2:	690c      	ldr	r4, [r1, #16]
 80179c4:	42a3      	cmp	r3, r4
 80179c6:	4607      	mov	r7, r0
 80179c8:	f2c0 8081 	blt.w	8017ace <quorem+0x112>
 80179cc:	3c01      	subs	r4, #1
 80179ce:	f101 0814 	add.w	r8, r1, #20
 80179d2:	f100 0514 	add.w	r5, r0, #20
 80179d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80179da:	9301      	str	r3, [sp, #4]
 80179dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80179e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80179e4:	3301      	adds	r3, #1
 80179e6:	429a      	cmp	r2, r3
 80179e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80179ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80179f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80179f4:	d331      	bcc.n	8017a5a <quorem+0x9e>
 80179f6:	f04f 0e00 	mov.w	lr, #0
 80179fa:	4640      	mov	r0, r8
 80179fc:	46ac      	mov	ip, r5
 80179fe:	46f2      	mov	sl, lr
 8017a00:	f850 2b04 	ldr.w	r2, [r0], #4
 8017a04:	b293      	uxth	r3, r2
 8017a06:	fb06 e303 	mla	r3, r6, r3, lr
 8017a0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017a0e:	b29b      	uxth	r3, r3
 8017a10:	ebaa 0303 	sub.w	r3, sl, r3
 8017a14:	0c12      	lsrs	r2, r2, #16
 8017a16:	f8dc a000 	ldr.w	sl, [ip]
 8017a1a:	fb06 e202 	mla	r2, r6, r2, lr
 8017a1e:	fa13 f38a 	uxtah	r3, r3, sl
 8017a22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017a26:	fa1f fa82 	uxth.w	sl, r2
 8017a2a:	f8dc 2000 	ldr.w	r2, [ip]
 8017a2e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017a32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017a36:	b29b      	uxth	r3, r3
 8017a38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017a3c:	4581      	cmp	r9, r0
 8017a3e:	f84c 3b04 	str.w	r3, [ip], #4
 8017a42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017a46:	d2db      	bcs.n	8017a00 <quorem+0x44>
 8017a48:	f855 300b 	ldr.w	r3, [r5, fp]
 8017a4c:	b92b      	cbnz	r3, 8017a5a <quorem+0x9e>
 8017a4e:	9b01      	ldr	r3, [sp, #4]
 8017a50:	3b04      	subs	r3, #4
 8017a52:	429d      	cmp	r5, r3
 8017a54:	461a      	mov	r2, r3
 8017a56:	d32e      	bcc.n	8017ab6 <quorem+0xfa>
 8017a58:	613c      	str	r4, [r7, #16]
 8017a5a:	4638      	mov	r0, r7
 8017a5c:	f001 f9ac 	bl	8018db8 <__mcmp>
 8017a60:	2800      	cmp	r0, #0
 8017a62:	db24      	blt.n	8017aae <quorem+0xf2>
 8017a64:	3601      	adds	r6, #1
 8017a66:	4628      	mov	r0, r5
 8017a68:	f04f 0c00 	mov.w	ip, #0
 8017a6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8017a70:	f8d0 e000 	ldr.w	lr, [r0]
 8017a74:	b293      	uxth	r3, r2
 8017a76:	ebac 0303 	sub.w	r3, ip, r3
 8017a7a:	0c12      	lsrs	r2, r2, #16
 8017a7c:	fa13 f38e 	uxtah	r3, r3, lr
 8017a80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017a84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017a88:	b29b      	uxth	r3, r3
 8017a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017a8e:	45c1      	cmp	r9, r8
 8017a90:	f840 3b04 	str.w	r3, [r0], #4
 8017a94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017a98:	d2e8      	bcs.n	8017a6c <quorem+0xb0>
 8017a9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017a9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017aa2:	b922      	cbnz	r2, 8017aae <quorem+0xf2>
 8017aa4:	3b04      	subs	r3, #4
 8017aa6:	429d      	cmp	r5, r3
 8017aa8:	461a      	mov	r2, r3
 8017aaa:	d30a      	bcc.n	8017ac2 <quorem+0x106>
 8017aac:	613c      	str	r4, [r7, #16]
 8017aae:	4630      	mov	r0, r6
 8017ab0:	b003      	add	sp, #12
 8017ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab6:	6812      	ldr	r2, [r2, #0]
 8017ab8:	3b04      	subs	r3, #4
 8017aba:	2a00      	cmp	r2, #0
 8017abc:	d1cc      	bne.n	8017a58 <quorem+0x9c>
 8017abe:	3c01      	subs	r4, #1
 8017ac0:	e7c7      	b.n	8017a52 <quorem+0x96>
 8017ac2:	6812      	ldr	r2, [r2, #0]
 8017ac4:	3b04      	subs	r3, #4
 8017ac6:	2a00      	cmp	r2, #0
 8017ac8:	d1f0      	bne.n	8017aac <quorem+0xf0>
 8017aca:	3c01      	subs	r4, #1
 8017acc:	e7eb      	b.n	8017aa6 <quorem+0xea>
 8017ace:	2000      	movs	r0, #0
 8017ad0:	e7ee      	b.n	8017ab0 <quorem+0xf4>
 8017ad2:	0000      	movs	r0, r0
 8017ad4:	0000      	movs	r0, r0
	...

08017ad8 <_dtoa_r>:
 8017ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017adc:	ed2d 8b02 	vpush	{d8}
 8017ae0:	ec57 6b10 	vmov	r6, r7, d0
 8017ae4:	b095      	sub	sp, #84	; 0x54
 8017ae6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017ae8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017aec:	9105      	str	r1, [sp, #20]
 8017aee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017af2:	4604      	mov	r4, r0
 8017af4:	9209      	str	r2, [sp, #36]	; 0x24
 8017af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8017af8:	b975      	cbnz	r5, 8017b18 <_dtoa_r+0x40>
 8017afa:	2010      	movs	r0, #16
 8017afc:	f000 fed6 	bl	80188ac <malloc>
 8017b00:	4602      	mov	r2, r0
 8017b02:	6260      	str	r0, [r4, #36]	; 0x24
 8017b04:	b920      	cbnz	r0, 8017b10 <_dtoa_r+0x38>
 8017b06:	4bb2      	ldr	r3, [pc, #712]	; (8017dd0 <_dtoa_r+0x2f8>)
 8017b08:	21ea      	movs	r1, #234	; 0xea
 8017b0a:	48b2      	ldr	r0, [pc, #712]	; (8017dd4 <_dtoa_r+0x2fc>)
 8017b0c:	f001 feea 	bl	80198e4 <__assert_func>
 8017b10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017b14:	6005      	str	r5, [r0, #0]
 8017b16:	60c5      	str	r5, [r0, #12]
 8017b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b1a:	6819      	ldr	r1, [r3, #0]
 8017b1c:	b151      	cbz	r1, 8017b34 <_dtoa_r+0x5c>
 8017b1e:	685a      	ldr	r2, [r3, #4]
 8017b20:	604a      	str	r2, [r1, #4]
 8017b22:	2301      	movs	r3, #1
 8017b24:	4093      	lsls	r3, r2
 8017b26:	608b      	str	r3, [r1, #8]
 8017b28:	4620      	mov	r0, r4
 8017b2a:	f000 ff07 	bl	801893c <_Bfree>
 8017b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b30:	2200      	movs	r2, #0
 8017b32:	601a      	str	r2, [r3, #0]
 8017b34:	1e3b      	subs	r3, r7, #0
 8017b36:	bfb9      	ittee	lt
 8017b38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017b3c:	9303      	strlt	r3, [sp, #12]
 8017b3e:	2300      	movge	r3, #0
 8017b40:	f8c8 3000 	strge.w	r3, [r8]
 8017b44:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017b48:	4ba3      	ldr	r3, [pc, #652]	; (8017dd8 <_dtoa_r+0x300>)
 8017b4a:	bfbc      	itt	lt
 8017b4c:	2201      	movlt	r2, #1
 8017b4e:	f8c8 2000 	strlt.w	r2, [r8]
 8017b52:	ea33 0309 	bics.w	r3, r3, r9
 8017b56:	d11b      	bne.n	8017b90 <_dtoa_r+0xb8>
 8017b58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017b5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8017b5e:	6013      	str	r3, [r2, #0]
 8017b60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017b64:	4333      	orrs	r3, r6
 8017b66:	f000 857a 	beq.w	801865e <_dtoa_r+0xb86>
 8017b6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b6c:	b963      	cbnz	r3, 8017b88 <_dtoa_r+0xb0>
 8017b6e:	4b9b      	ldr	r3, [pc, #620]	; (8017ddc <_dtoa_r+0x304>)
 8017b70:	e024      	b.n	8017bbc <_dtoa_r+0xe4>
 8017b72:	4b9b      	ldr	r3, [pc, #620]	; (8017de0 <_dtoa_r+0x308>)
 8017b74:	9300      	str	r3, [sp, #0]
 8017b76:	3308      	adds	r3, #8
 8017b78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017b7a:	6013      	str	r3, [r2, #0]
 8017b7c:	9800      	ldr	r0, [sp, #0]
 8017b7e:	b015      	add	sp, #84	; 0x54
 8017b80:	ecbd 8b02 	vpop	{d8}
 8017b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b88:	4b94      	ldr	r3, [pc, #592]	; (8017ddc <_dtoa_r+0x304>)
 8017b8a:	9300      	str	r3, [sp, #0]
 8017b8c:	3303      	adds	r3, #3
 8017b8e:	e7f3      	b.n	8017b78 <_dtoa_r+0xa0>
 8017b90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017b94:	2200      	movs	r2, #0
 8017b96:	ec51 0b17 	vmov	r0, r1, d7
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017ba0:	f7e8 ff9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8017ba4:	4680      	mov	r8, r0
 8017ba6:	b158      	cbz	r0, 8017bc0 <_dtoa_r+0xe8>
 8017ba8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017baa:	2301      	movs	r3, #1
 8017bac:	6013      	str	r3, [r2, #0]
 8017bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	f000 8551 	beq.w	8018658 <_dtoa_r+0xb80>
 8017bb6:	488b      	ldr	r0, [pc, #556]	; (8017de4 <_dtoa_r+0x30c>)
 8017bb8:	6018      	str	r0, [r3, #0]
 8017bba:	1e43      	subs	r3, r0, #1
 8017bbc:	9300      	str	r3, [sp, #0]
 8017bbe:	e7dd      	b.n	8017b7c <_dtoa_r+0xa4>
 8017bc0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017bc4:	aa12      	add	r2, sp, #72	; 0x48
 8017bc6:	a913      	add	r1, sp, #76	; 0x4c
 8017bc8:	4620      	mov	r0, r4
 8017bca:	f001 f999 	bl	8018f00 <__d2b>
 8017bce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017bd2:	4683      	mov	fp, r0
 8017bd4:	2d00      	cmp	r5, #0
 8017bd6:	d07c      	beq.n	8017cd2 <_dtoa_r+0x1fa>
 8017bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bda:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017bde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017be2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8017be6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017bea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017bee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017bf2:	4b7d      	ldr	r3, [pc, #500]	; (8017de8 <_dtoa_r+0x310>)
 8017bf4:	2200      	movs	r2, #0
 8017bf6:	4630      	mov	r0, r6
 8017bf8:	4639      	mov	r1, r7
 8017bfa:	f7e8 fb4d 	bl	8000298 <__aeabi_dsub>
 8017bfe:	a36e      	add	r3, pc, #440	; (adr r3, 8017db8 <_dtoa_r+0x2e0>)
 8017c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c04:	f7e8 fd00 	bl	8000608 <__aeabi_dmul>
 8017c08:	a36d      	add	r3, pc, #436	; (adr r3, 8017dc0 <_dtoa_r+0x2e8>)
 8017c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c0e:	f7e8 fb45 	bl	800029c <__adddf3>
 8017c12:	4606      	mov	r6, r0
 8017c14:	4628      	mov	r0, r5
 8017c16:	460f      	mov	r7, r1
 8017c18:	f7e8 fc8c 	bl	8000534 <__aeabi_i2d>
 8017c1c:	a36a      	add	r3, pc, #424	; (adr r3, 8017dc8 <_dtoa_r+0x2f0>)
 8017c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c22:	f7e8 fcf1 	bl	8000608 <__aeabi_dmul>
 8017c26:	4602      	mov	r2, r0
 8017c28:	460b      	mov	r3, r1
 8017c2a:	4630      	mov	r0, r6
 8017c2c:	4639      	mov	r1, r7
 8017c2e:	f7e8 fb35 	bl	800029c <__adddf3>
 8017c32:	4606      	mov	r6, r0
 8017c34:	460f      	mov	r7, r1
 8017c36:	f7e8 ff97 	bl	8000b68 <__aeabi_d2iz>
 8017c3a:	2200      	movs	r2, #0
 8017c3c:	4682      	mov	sl, r0
 8017c3e:	2300      	movs	r3, #0
 8017c40:	4630      	mov	r0, r6
 8017c42:	4639      	mov	r1, r7
 8017c44:	f7e8 ff52 	bl	8000aec <__aeabi_dcmplt>
 8017c48:	b148      	cbz	r0, 8017c5e <_dtoa_r+0x186>
 8017c4a:	4650      	mov	r0, sl
 8017c4c:	f7e8 fc72 	bl	8000534 <__aeabi_i2d>
 8017c50:	4632      	mov	r2, r6
 8017c52:	463b      	mov	r3, r7
 8017c54:	f7e8 ff40 	bl	8000ad8 <__aeabi_dcmpeq>
 8017c58:	b908      	cbnz	r0, 8017c5e <_dtoa_r+0x186>
 8017c5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017c5e:	f1ba 0f16 	cmp.w	sl, #22
 8017c62:	d854      	bhi.n	8017d0e <_dtoa_r+0x236>
 8017c64:	4b61      	ldr	r3, [pc, #388]	; (8017dec <_dtoa_r+0x314>)
 8017c66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017c72:	f7e8 ff3b 	bl	8000aec <__aeabi_dcmplt>
 8017c76:	2800      	cmp	r0, #0
 8017c78:	d04b      	beq.n	8017d12 <_dtoa_r+0x23a>
 8017c7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017c7e:	2300      	movs	r3, #0
 8017c80:	930e      	str	r3, [sp, #56]	; 0x38
 8017c82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017c84:	1b5d      	subs	r5, r3, r5
 8017c86:	1e6b      	subs	r3, r5, #1
 8017c88:	9304      	str	r3, [sp, #16]
 8017c8a:	bf43      	ittte	mi
 8017c8c:	2300      	movmi	r3, #0
 8017c8e:	f1c5 0801 	rsbmi	r8, r5, #1
 8017c92:	9304      	strmi	r3, [sp, #16]
 8017c94:	f04f 0800 	movpl.w	r8, #0
 8017c98:	f1ba 0f00 	cmp.w	sl, #0
 8017c9c:	db3b      	blt.n	8017d16 <_dtoa_r+0x23e>
 8017c9e:	9b04      	ldr	r3, [sp, #16]
 8017ca0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8017ca4:	4453      	add	r3, sl
 8017ca6:	9304      	str	r3, [sp, #16]
 8017ca8:	2300      	movs	r3, #0
 8017caa:	9306      	str	r3, [sp, #24]
 8017cac:	9b05      	ldr	r3, [sp, #20]
 8017cae:	2b09      	cmp	r3, #9
 8017cb0:	d869      	bhi.n	8017d86 <_dtoa_r+0x2ae>
 8017cb2:	2b05      	cmp	r3, #5
 8017cb4:	bfc4      	itt	gt
 8017cb6:	3b04      	subgt	r3, #4
 8017cb8:	9305      	strgt	r3, [sp, #20]
 8017cba:	9b05      	ldr	r3, [sp, #20]
 8017cbc:	f1a3 0302 	sub.w	r3, r3, #2
 8017cc0:	bfcc      	ite	gt
 8017cc2:	2500      	movgt	r5, #0
 8017cc4:	2501      	movle	r5, #1
 8017cc6:	2b03      	cmp	r3, #3
 8017cc8:	d869      	bhi.n	8017d9e <_dtoa_r+0x2c6>
 8017cca:	e8df f003 	tbb	[pc, r3]
 8017cce:	4e2c      	.short	0x4e2c
 8017cd0:	5a4c      	.short	0x5a4c
 8017cd2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8017cd6:	441d      	add	r5, r3
 8017cd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017cdc:	2b20      	cmp	r3, #32
 8017cde:	bfc1      	itttt	gt
 8017ce0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017ce4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017ce8:	fa09 f303 	lslgt.w	r3, r9, r3
 8017cec:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017cf0:	bfda      	itte	le
 8017cf2:	f1c3 0320 	rsble	r3, r3, #32
 8017cf6:	fa06 f003 	lslle.w	r0, r6, r3
 8017cfa:	4318      	orrgt	r0, r3
 8017cfc:	f7e8 fc0a 	bl	8000514 <__aeabi_ui2d>
 8017d00:	2301      	movs	r3, #1
 8017d02:	4606      	mov	r6, r0
 8017d04:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017d08:	3d01      	subs	r5, #1
 8017d0a:	9310      	str	r3, [sp, #64]	; 0x40
 8017d0c:	e771      	b.n	8017bf2 <_dtoa_r+0x11a>
 8017d0e:	2301      	movs	r3, #1
 8017d10:	e7b6      	b.n	8017c80 <_dtoa_r+0x1a8>
 8017d12:	900e      	str	r0, [sp, #56]	; 0x38
 8017d14:	e7b5      	b.n	8017c82 <_dtoa_r+0x1aa>
 8017d16:	f1ca 0300 	rsb	r3, sl, #0
 8017d1a:	9306      	str	r3, [sp, #24]
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	eba8 080a 	sub.w	r8, r8, sl
 8017d22:	930d      	str	r3, [sp, #52]	; 0x34
 8017d24:	e7c2      	b.n	8017cac <_dtoa_r+0x1d4>
 8017d26:	2300      	movs	r3, #0
 8017d28:	9308      	str	r3, [sp, #32]
 8017d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	dc39      	bgt.n	8017da4 <_dtoa_r+0x2cc>
 8017d30:	f04f 0901 	mov.w	r9, #1
 8017d34:	f8cd 9004 	str.w	r9, [sp, #4]
 8017d38:	464b      	mov	r3, r9
 8017d3a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017d3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017d40:	2200      	movs	r2, #0
 8017d42:	6042      	str	r2, [r0, #4]
 8017d44:	2204      	movs	r2, #4
 8017d46:	f102 0614 	add.w	r6, r2, #20
 8017d4a:	429e      	cmp	r6, r3
 8017d4c:	6841      	ldr	r1, [r0, #4]
 8017d4e:	d92f      	bls.n	8017db0 <_dtoa_r+0x2d8>
 8017d50:	4620      	mov	r0, r4
 8017d52:	f000 fdb3 	bl	80188bc <_Balloc>
 8017d56:	9000      	str	r0, [sp, #0]
 8017d58:	2800      	cmp	r0, #0
 8017d5a:	d14b      	bne.n	8017df4 <_dtoa_r+0x31c>
 8017d5c:	4b24      	ldr	r3, [pc, #144]	; (8017df0 <_dtoa_r+0x318>)
 8017d5e:	4602      	mov	r2, r0
 8017d60:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017d64:	e6d1      	b.n	8017b0a <_dtoa_r+0x32>
 8017d66:	2301      	movs	r3, #1
 8017d68:	e7de      	b.n	8017d28 <_dtoa_r+0x250>
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	9308      	str	r3, [sp, #32]
 8017d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d70:	eb0a 0903 	add.w	r9, sl, r3
 8017d74:	f109 0301 	add.w	r3, r9, #1
 8017d78:	2b01      	cmp	r3, #1
 8017d7a:	9301      	str	r3, [sp, #4]
 8017d7c:	bfb8      	it	lt
 8017d7e:	2301      	movlt	r3, #1
 8017d80:	e7dd      	b.n	8017d3e <_dtoa_r+0x266>
 8017d82:	2301      	movs	r3, #1
 8017d84:	e7f2      	b.n	8017d6c <_dtoa_r+0x294>
 8017d86:	2501      	movs	r5, #1
 8017d88:	2300      	movs	r3, #0
 8017d8a:	9305      	str	r3, [sp, #20]
 8017d8c:	9508      	str	r5, [sp, #32]
 8017d8e:	f04f 39ff 	mov.w	r9, #4294967295
 8017d92:	2200      	movs	r2, #0
 8017d94:	f8cd 9004 	str.w	r9, [sp, #4]
 8017d98:	2312      	movs	r3, #18
 8017d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8017d9c:	e7cf      	b.n	8017d3e <_dtoa_r+0x266>
 8017d9e:	2301      	movs	r3, #1
 8017da0:	9308      	str	r3, [sp, #32]
 8017da2:	e7f4      	b.n	8017d8e <_dtoa_r+0x2b6>
 8017da4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017da8:	f8cd 9004 	str.w	r9, [sp, #4]
 8017dac:	464b      	mov	r3, r9
 8017dae:	e7c6      	b.n	8017d3e <_dtoa_r+0x266>
 8017db0:	3101      	adds	r1, #1
 8017db2:	6041      	str	r1, [r0, #4]
 8017db4:	0052      	lsls	r2, r2, #1
 8017db6:	e7c6      	b.n	8017d46 <_dtoa_r+0x26e>
 8017db8:	636f4361 	.word	0x636f4361
 8017dbc:	3fd287a7 	.word	0x3fd287a7
 8017dc0:	8b60c8b3 	.word	0x8b60c8b3
 8017dc4:	3fc68a28 	.word	0x3fc68a28
 8017dc8:	509f79fb 	.word	0x509f79fb
 8017dcc:	3fd34413 	.word	0x3fd34413
 8017dd0:	0801cd89 	.word	0x0801cd89
 8017dd4:	0801cda0 	.word	0x0801cda0
 8017dd8:	7ff00000 	.word	0x7ff00000
 8017ddc:	0801cd85 	.word	0x0801cd85
 8017de0:	0801cd7c 	.word	0x0801cd7c
 8017de4:	0801cd59 	.word	0x0801cd59
 8017de8:	3ff80000 	.word	0x3ff80000
 8017dec:	0801cef8 	.word	0x0801cef8
 8017df0:	0801cdff 	.word	0x0801cdff
 8017df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017df6:	9a00      	ldr	r2, [sp, #0]
 8017df8:	601a      	str	r2, [r3, #0]
 8017dfa:	9b01      	ldr	r3, [sp, #4]
 8017dfc:	2b0e      	cmp	r3, #14
 8017dfe:	f200 80ad 	bhi.w	8017f5c <_dtoa_r+0x484>
 8017e02:	2d00      	cmp	r5, #0
 8017e04:	f000 80aa 	beq.w	8017f5c <_dtoa_r+0x484>
 8017e08:	f1ba 0f00 	cmp.w	sl, #0
 8017e0c:	dd36      	ble.n	8017e7c <_dtoa_r+0x3a4>
 8017e0e:	4ac3      	ldr	r2, [pc, #780]	; (801811c <_dtoa_r+0x644>)
 8017e10:	f00a 030f 	and.w	r3, sl, #15
 8017e14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017e18:	ed93 7b00 	vldr	d7, [r3]
 8017e1c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017e20:	ea4f 172a 	mov.w	r7, sl, asr #4
 8017e24:	eeb0 8a47 	vmov.f32	s16, s14
 8017e28:	eef0 8a67 	vmov.f32	s17, s15
 8017e2c:	d016      	beq.n	8017e5c <_dtoa_r+0x384>
 8017e2e:	4bbc      	ldr	r3, [pc, #752]	; (8018120 <_dtoa_r+0x648>)
 8017e30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017e34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017e38:	f7e8 fd10 	bl	800085c <__aeabi_ddiv>
 8017e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017e40:	f007 070f 	and.w	r7, r7, #15
 8017e44:	2503      	movs	r5, #3
 8017e46:	4eb6      	ldr	r6, [pc, #728]	; (8018120 <_dtoa_r+0x648>)
 8017e48:	b957      	cbnz	r7, 8017e60 <_dtoa_r+0x388>
 8017e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017e4e:	ec53 2b18 	vmov	r2, r3, d8
 8017e52:	f7e8 fd03 	bl	800085c <__aeabi_ddiv>
 8017e56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017e5a:	e029      	b.n	8017eb0 <_dtoa_r+0x3d8>
 8017e5c:	2502      	movs	r5, #2
 8017e5e:	e7f2      	b.n	8017e46 <_dtoa_r+0x36e>
 8017e60:	07f9      	lsls	r1, r7, #31
 8017e62:	d508      	bpl.n	8017e76 <_dtoa_r+0x39e>
 8017e64:	ec51 0b18 	vmov	r0, r1, d8
 8017e68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017e6c:	f7e8 fbcc 	bl	8000608 <__aeabi_dmul>
 8017e70:	ec41 0b18 	vmov	d8, r0, r1
 8017e74:	3501      	adds	r5, #1
 8017e76:	107f      	asrs	r7, r7, #1
 8017e78:	3608      	adds	r6, #8
 8017e7a:	e7e5      	b.n	8017e48 <_dtoa_r+0x370>
 8017e7c:	f000 80a6 	beq.w	8017fcc <_dtoa_r+0x4f4>
 8017e80:	f1ca 0600 	rsb	r6, sl, #0
 8017e84:	4ba5      	ldr	r3, [pc, #660]	; (801811c <_dtoa_r+0x644>)
 8017e86:	4fa6      	ldr	r7, [pc, #664]	; (8018120 <_dtoa_r+0x648>)
 8017e88:	f006 020f 	and.w	r2, r6, #15
 8017e8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017e98:	f7e8 fbb6 	bl	8000608 <__aeabi_dmul>
 8017e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017ea0:	1136      	asrs	r6, r6, #4
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	2502      	movs	r5, #2
 8017ea6:	2e00      	cmp	r6, #0
 8017ea8:	f040 8085 	bne.w	8017fb6 <_dtoa_r+0x4de>
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d1d2      	bne.n	8017e56 <_dtoa_r+0x37e>
 8017eb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	f000 808c 	beq.w	8017fd0 <_dtoa_r+0x4f8>
 8017eb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017ebc:	4b99      	ldr	r3, [pc, #612]	; (8018124 <_dtoa_r+0x64c>)
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	4630      	mov	r0, r6
 8017ec2:	4639      	mov	r1, r7
 8017ec4:	f7e8 fe12 	bl	8000aec <__aeabi_dcmplt>
 8017ec8:	2800      	cmp	r0, #0
 8017eca:	f000 8081 	beq.w	8017fd0 <_dtoa_r+0x4f8>
 8017ece:	9b01      	ldr	r3, [sp, #4]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d07d      	beq.n	8017fd0 <_dtoa_r+0x4f8>
 8017ed4:	f1b9 0f00 	cmp.w	r9, #0
 8017ed8:	dd3c      	ble.n	8017f54 <_dtoa_r+0x47c>
 8017eda:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017ede:	9307      	str	r3, [sp, #28]
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	4b91      	ldr	r3, [pc, #580]	; (8018128 <_dtoa_r+0x650>)
 8017ee4:	4630      	mov	r0, r6
 8017ee6:	4639      	mov	r1, r7
 8017ee8:	f7e8 fb8e 	bl	8000608 <__aeabi_dmul>
 8017eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017ef0:	3501      	adds	r5, #1
 8017ef2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8017ef6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017efa:	4628      	mov	r0, r5
 8017efc:	f7e8 fb1a 	bl	8000534 <__aeabi_i2d>
 8017f00:	4632      	mov	r2, r6
 8017f02:	463b      	mov	r3, r7
 8017f04:	f7e8 fb80 	bl	8000608 <__aeabi_dmul>
 8017f08:	4b88      	ldr	r3, [pc, #544]	; (801812c <_dtoa_r+0x654>)
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	f7e8 f9c6 	bl	800029c <__adddf3>
 8017f10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f18:	9303      	str	r3, [sp, #12]
 8017f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d15c      	bne.n	8017fda <_dtoa_r+0x502>
 8017f20:	4b83      	ldr	r3, [pc, #524]	; (8018130 <_dtoa_r+0x658>)
 8017f22:	2200      	movs	r2, #0
 8017f24:	4630      	mov	r0, r6
 8017f26:	4639      	mov	r1, r7
 8017f28:	f7e8 f9b6 	bl	8000298 <__aeabi_dsub>
 8017f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f30:	4606      	mov	r6, r0
 8017f32:	460f      	mov	r7, r1
 8017f34:	f7e8 fdf8 	bl	8000b28 <__aeabi_dcmpgt>
 8017f38:	2800      	cmp	r0, #0
 8017f3a:	f040 8296 	bne.w	801846a <_dtoa_r+0x992>
 8017f3e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017f42:	4630      	mov	r0, r6
 8017f44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017f48:	4639      	mov	r1, r7
 8017f4a:	f7e8 fdcf 	bl	8000aec <__aeabi_dcmplt>
 8017f4e:	2800      	cmp	r0, #0
 8017f50:	f040 8288 	bne.w	8018464 <_dtoa_r+0x98c>
 8017f54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017f58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017f5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	f2c0 8158 	blt.w	8018214 <_dtoa_r+0x73c>
 8017f64:	f1ba 0f0e 	cmp.w	sl, #14
 8017f68:	f300 8154 	bgt.w	8018214 <_dtoa_r+0x73c>
 8017f6c:	4b6b      	ldr	r3, [pc, #428]	; (801811c <_dtoa_r+0x644>)
 8017f6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017f72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	f280 80e3 	bge.w	8018144 <_dtoa_r+0x66c>
 8017f7e:	9b01      	ldr	r3, [sp, #4]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	f300 80df 	bgt.w	8018144 <_dtoa_r+0x66c>
 8017f86:	f040 826d 	bne.w	8018464 <_dtoa_r+0x98c>
 8017f8a:	4b69      	ldr	r3, [pc, #420]	; (8018130 <_dtoa_r+0x658>)
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	4640      	mov	r0, r8
 8017f90:	4649      	mov	r1, r9
 8017f92:	f7e8 fb39 	bl	8000608 <__aeabi_dmul>
 8017f96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f9a:	f7e8 fdbb 	bl	8000b14 <__aeabi_dcmpge>
 8017f9e:	9e01      	ldr	r6, [sp, #4]
 8017fa0:	4637      	mov	r7, r6
 8017fa2:	2800      	cmp	r0, #0
 8017fa4:	f040 8243 	bne.w	801842e <_dtoa_r+0x956>
 8017fa8:	9d00      	ldr	r5, [sp, #0]
 8017faa:	2331      	movs	r3, #49	; 0x31
 8017fac:	f805 3b01 	strb.w	r3, [r5], #1
 8017fb0:	f10a 0a01 	add.w	sl, sl, #1
 8017fb4:	e23f      	b.n	8018436 <_dtoa_r+0x95e>
 8017fb6:	07f2      	lsls	r2, r6, #31
 8017fb8:	d505      	bpl.n	8017fc6 <_dtoa_r+0x4ee>
 8017fba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017fbe:	f7e8 fb23 	bl	8000608 <__aeabi_dmul>
 8017fc2:	3501      	adds	r5, #1
 8017fc4:	2301      	movs	r3, #1
 8017fc6:	1076      	asrs	r6, r6, #1
 8017fc8:	3708      	adds	r7, #8
 8017fca:	e76c      	b.n	8017ea6 <_dtoa_r+0x3ce>
 8017fcc:	2502      	movs	r5, #2
 8017fce:	e76f      	b.n	8017eb0 <_dtoa_r+0x3d8>
 8017fd0:	9b01      	ldr	r3, [sp, #4]
 8017fd2:	f8cd a01c 	str.w	sl, [sp, #28]
 8017fd6:	930c      	str	r3, [sp, #48]	; 0x30
 8017fd8:	e78d      	b.n	8017ef6 <_dtoa_r+0x41e>
 8017fda:	9900      	ldr	r1, [sp, #0]
 8017fdc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017fde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017fe0:	4b4e      	ldr	r3, [pc, #312]	; (801811c <_dtoa_r+0x644>)
 8017fe2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017fe6:	4401      	add	r1, r0
 8017fe8:	9102      	str	r1, [sp, #8]
 8017fea:	9908      	ldr	r1, [sp, #32]
 8017fec:	eeb0 8a47 	vmov.f32	s16, s14
 8017ff0:	eef0 8a67 	vmov.f32	s17, s15
 8017ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017ff8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017ffc:	2900      	cmp	r1, #0
 8017ffe:	d045      	beq.n	801808c <_dtoa_r+0x5b4>
 8018000:	494c      	ldr	r1, [pc, #304]	; (8018134 <_dtoa_r+0x65c>)
 8018002:	2000      	movs	r0, #0
 8018004:	f7e8 fc2a 	bl	800085c <__aeabi_ddiv>
 8018008:	ec53 2b18 	vmov	r2, r3, d8
 801800c:	f7e8 f944 	bl	8000298 <__aeabi_dsub>
 8018010:	9d00      	ldr	r5, [sp, #0]
 8018012:	ec41 0b18 	vmov	d8, r0, r1
 8018016:	4639      	mov	r1, r7
 8018018:	4630      	mov	r0, r6
 801801a:	f7e8 fda5 	bl	8000b68 <__aeabi_d2iz>
 801801e:	900c      	str	r0, [sp, #48]	; 0x30
 8018020:	f7e8 fa88 	bl	8000534 <__aeabi_i2d>
 8018024:	4602      	mov	r2, r0
 8018026:	460b      	mov	r3, r1
 8018028:	4630      	mov	r0, r6
 801802a:	4639      	mov	r1, r7
 801802c:	f7e8 f934 	bl	8000298 <__aeabi_dsub>
 8018030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018032:	3330      	adds	r3, #48	; 0x30
 8018034:	f805 3b01 	strb.w	r3, [r5], #1
 8018038:	ec53 2b18 	vmov	r2, r3, d8
 801803c:	4606      	mov	r6, r0
 801803e:	460f      	mov	r7, r1
 8018040:	f7e8 fd54 	bl	8000aec <__aeabi_dcmplt>
 8018044:	2800      	cmp	r0, #0
 8018046:	d165      	bne.n	8018114 <_dtoa_r+0x63c>
 8018048:	4632      	mov	r2, r6
 801804a:	463b      	mov	r3, r7
 801804c:	4935      	ldr	r1, [pc, #212]	; (8018124 <_dtoa_r+0x64c>)
 801804e:	2000      	movs	r0, #0
 8018050:	f7e8 f922 	bl	8000298 <__aeabi_dsub>
 8018054:	ec53 2b18 	vmov	r2, r3, d8
 8018058:	f7e8 fd48 	bl	8000aec <__aeabi_dcmplt>
 801805c:	2800      	cmp	r0, #0
 801805e:	f040 80b9 	bne.w	80181d4 <_dtoa_r+0x6fc>
 8018062:	9b02      	ldr	r3, [sp, #8]
 8018064:	429d      	cmp	r5, r3
 8018066:	f43f af75 	beq.w	8017f54 <_dtoa_r+0x47c>
 801806a:	4b2f      	ldr	r3, [pc, #188]	; (8018128 <_dtoa_r+0x650>)
 801806c:	ec51 0b18 	vmov	r0, r1, d8
 8018070:	2200      	movs	r2, #0
 8018072:	f7e8 fac9 	bl	8000608 <__aeabi_dmul>
 8018076:	4b2c      	ldr	r3, [pc, #176]	; (8018128 <_dtoa_r+0x650>)
 8018078:	ec41 0b18 	vmov	d8, r0, r1
 801807c:	2200      	movs	r2, #0
 801807e:	4630      	mov	r0, r6
 8018080:	4639      	mov	r1, r7
 8018082:	f7e8 fac1 	bl	8000608 <__aeabi_dmul>
 8018086:	4606      	mov	r6, r0
 8018088:	460f      	mov	r7, r1
 801808a:	e7c4      	b.n	8018016 <_dtoa_r+0x53e>
 801808c:	ec51 0b17 	vmov	r0, r1, d7
 8018090:	f7e8 faba 	bl	8000608 <__aeabi_dmul>
 8018094:	9b02      	ldr	r3, [sp, #8]
 8018096:	9d00      	ldr	r5, [sp, #0]
 8018098:	930c      	str	r3, [sp, #48]	; 0x30
 801809a:	ec41 0b18 	vmov	d8, r0, r1
 801809e:	4639      	mov	r1, r7
 80180a0:	4630      	mov	r0, r6
 80180a2:	f7e8 fd61 	bl	8000b68 <__aeabi_d2iz>
 80180a6:	9011      	str	r0, [sp, #68]	; 0x44
 80180a8:	f7e8 fa44 	bl	8000534 <__aeabi_i2d>
 80180ac:	4602      	mov	r2, r0
 80180ae:	460b      	mov	r3, r1
 80180b0:	4630      	mov	r0, r6
 80180b2:	4639      	mov	r1, r7
 80180b4:	f7e8 f8f0 	bl	8000298 <__aeabi_dsub>
 80180b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80180ba:	3330      	adds	r3, #48	; 0x30
 80180bc:	f805 3b01 	strb.w	r3, [r5], #1
 80180c0:	9b02      	ldr	r3, [sp, #8]
 80180c2:	429d      	cmp	r5, r3
 80180c4:	4606      	mov	r6, r0
 80180c6:	460f      	mov	r7, r1
 80180c8:	f04f 0200 	mov.w	r2, #0
 80180cc:	d134      	bne.n	8018138 <_dtoa_r+0x660>
 80180ce:	4b19      	ldr	r3, [pc, #100]	; (8018134 <_dtoa_r+0x65c>)
 80180d0:	ec51 0b18 	vmov	r0, r1, d8
 80180d4:	f7e8 f8e2 	bl	800029c <__adddf3>
 80180d8:	4602      	mov	r2, r0
 80180da:	460b      	mov	r3, r1
 80180dc:	4630      	mov	r0, r6
 80180de:	4639      	mov	r1, r7
 80180e0:	f7e8 fd22 	bl	8000b28 <__aeabi_dcmpgt>
 80180e4:	2800      	cmp	r0, #0
 80180e6:	d175      	bne.n	80181d4 <_dtoa_r+0x6fc>
 80180e8:	ec53 2b18 	vmov	r2, r3, d8
 80180ec:	4911      	ldr	r1, [pc, #68]	; (8018134 <_dtoa_r+0x65c>)
 80180ee:	2000      	movs	r0, #0
 80180f0:	f7e8 f8d2 	bl	8000298 <__aeabi_dsub>
 80180f4:	4602      	mov	r2, r0
 80180f6:	460b      	mov	r3, r1
 80180f8:	4630      	mov	r0, r6
 80180fa:	4639      	mov	r1, r7
 80180fc:	f7e8 fcf6 	bl	8000aec <__aeabi_dcmplt>
 8018100:	2800      	cmp	r0, #0
 8018102:	f43f af27 	beq.w	8017f54 <_dtoa_r+0x47c>
 8018106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018108:	1e6b      	subs	r3, r5, #1
 801810a:	930c      	str	r3, [sp, #48]	; 0x30
 801810c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018110:	2b30      	cmp	r3, #48	; 0x30
 8018112:	d0f8      	beq.n	8018106 <_dtoa_r+0x62e>
 8018114:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018118:	e04a      	b.n	80181b0 <_dtoa_r+0x6d8>
 801811a:	bf00      	nop
 801811c:	0801cef8 	.word	0x0801cef8
 8018120:	0801ced0 	.word	0x0801ced0
 8018124:	3ff00000 	.word	0x3ff00000
 8018128:	40240000 	.word	0x40240000
 801812c:	401c0000 	.word	0x401c0000
 8018130:	40140000 	.word	0x40140000
 8018134:	3fe00000 	.word	0x3fe00000
 8018138:	4baf      	ldr	r3, [pc, #700]	; (80183f8 <_dtoa_r+0x920>)
 801813a:	f7e8 fa65 	bl	8000608 <__aeabi_dmul>
 801813e:	4606      	mov	r6, r0
 8018140:	460f      	mov	r7, r1
 8018142:	e7ac      	b.n	801809e <_dtoa_r+0x5c6>
 8018144:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018148:	9d00      	ldr	r5, [sp, #0]
 801814a:	4642      	mov	r2, r8
 801814c:	464b      	mov	r3, r9
 801814e:	4630      	mov	r0, r6
 8018150:	4639      	mov	r1, r7
 8018152:	f7e8 fb83 	bl	800085c <__aeabi_ddiv>
 8018156:	f7e8 fd07 	bl	8000b68 <__aeabi_d2iz>
 801815a:	9002      	str	r0, [sp, #8]
 801815c:	f7e8 f9ea 	bl	8000534 <__aeabi_i2d>
 8018160:	4642      	mov	r2, r8
 8018162:	464b      	mov	r3, r9
 8018164:	f7e8 fa50 	bl	8000608 <__aeabi_dmul>
 8018168:	4602      	mov	r2, r0
 801816a:	460b      	mov	r3, r1
 801816c:	4630      	mov	r0, r6
 801816e:	4639      	mov	r1, r7
 8018170:	f7e8 f892 	bl	8000298 <__aeabi_dsub>
 8018174:	9e02      	ldr	r6, [sp, #8]
 8018176:	9f01      	ldr	r7, [sp, #4]
 8018178:	3630      	adds	r6, #48	; 0x30
 801817a:	f805 6b01 	strb.w	r6, [r5], #1
 801817e:	9e00      	ldr	r6, [sp, #0]
 8018180:	1bae      	subs	r6, r5, r6
 8018182:	42b7      	cmp	r7, r6
 8018184:	4602      	mov	r2, r0
 8018186:	460b      	mov	r3, r1
 8018188:	d137      	bne.n	80181fa <_dtoa_r+0x722>
 801818a:	f7e8 f887 	bl	800029c <__adddf3>
 801818e:	4642      	mov	r2, r8
 8018190:	464b      	mov	r3, r9
 8018192:	4606      	mov	r6, r0
 8018194:	460f      	mov	r7, r1
 8018196:	f7e8 fcc7 	bl	8000b28 <__aeabi_dcmpgt>
 801819a:	b9c8      	cbnz	r0, 80181d0 <_dtoa_r+0x6f8>
 801819c:	4642      	mov	r2, r8
 801819e:	464b      	mov	r3, r9
 80181a0:	4630      	mov	r0, r6
 80181a2:	4639      	mov	r1, r7
 80181a4:	f7e8 fc98 	bl	8000ad8 <__aeabi_dcmpeq>
 80181a8:	b110      	cbz	r0, 80181b0 <_dtoa_r+0x6d8>
 80181aa:	9b02      	ldr	r3, [sp, #8]
 80181ac:	07d9      	lsls	r1, r3, #31
 80181ae:	d40f      	bmi.n	80181d0 <_dtoa_r+0x6f8>
 80181b0:	4620      	mov	r0, r4
 80181b2:	4659      	mov	r1, fp
 80181b4:	f000 fbc2 	bl	801893c <_Bfree>
 80181b8:	2300      	movs	r3, #0
 80181ba:	702b      	strb	r3, [r5, #0]
 80181bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80181be:	f10a 0001 	add.w	r0, sl, #1
 80181c2:	6018      	str	r0, [r3, #0]
 80181c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	f43f acd8 	beq.w	8017b7c <_dtoa_r+0xa4>
 80181cc:	601d      	str	r5, [r3, #0]
 80181ce:	e4d5      	b.n	8017b7c <_dtoa_r+0xa4>
 80181d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80181d4:	462b      	mov	r3, r5
 80181d6:	461d      	mov	r5, r3
 80181d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80181dc:	2a39      	cmp	r2, #57	; 0x39
 80181de:	d108      	bne.n	80181f2 <_dtoa_r+0x71a>
 80181e0:	9a00      	ldr	r2, [sp, #0]
 80181e2:	429a      	cmp	r2, r3
 80181e4:	d1f7      	bne.n	80181d6 <_dtoa_r+0x6fe>
 80181e6:	9a07      	ldr	r2, [sp, #28]
 80181e8:	9900      	ldr	r1, [sp, #0]
 80181ea:	3201      	adds	r2, #1
 80181ec:	9207      	str	r2, [sp, #28]
 80181ee:	2230      	movs	r2, #48	; 0x30
 80181f0:	700a      	strb	r2, [r1, #0]
 80181f2:	781a      	ldrb	r2, [r3, #0]
 80181f4:	3201      	adds	r2, #1
 80181f6:	701a      	strb	r2, [r3, #0]
 80181f8:	e78c      	b.n	8018114 <_dtoa_r+0x63c>
 80181fa:	4b7f      	ldr	r3, [pc, #508]	; (80183f8 <_dtoa_r+0x920>)
 80181fc:	2200      	movs	r2, #0
 80181fe:	f7e8 fa03 	bl	8000608 <__aeabi_dmul>
 8018202:	2200      	movs	r2, #0
 8018204:	2300      	movs	r3, #0
 8018206:	4606      	mov	r6, r0
 8018208:	460f      	mov	r7, r1
 801820a:	f7e8 fc65 	bl	8000ad8 <__aeabi_dcmpeq>
 801820e:	2800      	cmp	r0, #0
 8018210:	d09b      	beq.n	801814a <_dtoa_r+0x672>
 8018212:	e7cd      	b.n	80181b0 <_dtoa_r+0x6d8>
 8018214:	9a08      	ldr	r2, [sp, #32]
 8018216:	2a00      	cmp	r2, #0
 8018218:	f000 80c4 	beq.w	80183a4 <_dtoa_r+0x8cc>
 801821c:	9a05      	ldr	r2, [sp, #20]
 801821e:	2a01      	cmp	r2, #1
 8018220:	f300 80a8 	bgt.w	8018374 <_dtoa_r+0x89c>
 8018224:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018226:	2a00      	cmp	r2, #0
 8018228:	f000 80a0 	beq.w	801836c <_dtoa_r+0x894>
 801822c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018230:	9e06      	ldr	r6, [sp, #24]
 8018232:	4645      	mov	r5, r8
 8018234:	9a04      	ldr	r2, [sp, #16]
 8018236:	2101      	movs	r1, #1
 8018238:	441a      	add	r2, r3
 801823a:	4620      	mov	r0, r4
 801823c:	4498      	add	r8, r3
 801823e:	9204      	str	r2, [sp, #16]
 8018240:	f000 fc38 	bl	8018ab4 <__i2b>
 8018244:	4607      	mov	r7, r0
 8018246:	2d00      	cmp	r5, #0
 8018248:	dd0b      	ble.n	8018262 <_dtoa_r+0x78a>
 801824a:	9b04      	ldr	r3, [sp, #16]
 801824c:	2b00      	cmp	r3, #0
 801824e:	dd08      	ble.n	8018262 <_dtoa_r+0x78a>
 8018250:	42ab      	cmp	r3, r5
 8018252:	9a04      	ldr	r2, [sp, #16]
 8018254:	bfa8      	it	ge
 8018256:	462b      	movge	r3, r5
 8018258:	eba8 0803 	sub.w	r8, r8, r3
 801825c:	1aed      	subs	r5, r5, r3
 801825e:	1ad3      	subs	r3, r2, r3
 8018260:	9304      	str	r3, [sp, #16]
 8018262:	9b06      	ldr	r3, [sp, #24]
 8018264:	b1fb      	cbz	r3, 80182a6 <_dtoa_r+0x7ce>
 8018266:	9b08      	ldr	r3, [sp, #32]
 8018268:	2b00      	cmp	r3, #0
 801826a:	f000 809f 	beq.w	80183ac <_dtoa_r+0x8d4>
 801826e:	2e00      	cmp	r6, #0
 8018270:	dd11      	ble.n	8018296 <_dtoa_r+0x7be>
 8018272:	4639      	mov	r1, r7
 8018274:	4632      	mov	r2, r6
 8018276:	4620      	mov	r0, r4
 8018278:	f000 fcd8 	bl	8018c2c <__pow5mult>
 801827c:	465a      	mov	r2, fp
 801827e:	4601      	mov	r1, r0
 8018280:	4607      	mov	r7, r0
 8018282:	4620      	mov	r0, r4
 8018284:	f000 fc2c 	bl	8018ae0 <__multiply>
 8018288:	4659      	mov	r1, fp
 801828a:	9007      	str	r0, [sp, #28]
 801828c:	4620      	mov	r0, r4
 801828e:	f000 fb55 	bl	801893c <_Bfree>
 8018292:	9b07      	ldr	r3, [sp, #28]
 8018294:	469b      	mov	fp, r3
 8018296:	9b06      	ldr	r3, [sp, #24]
 8018298:	1b9a      	subs	r2, r3, r6
 801829a:	d004      	beq.n	80182a6 <_dtoa_r+0x7ce>
 801829c:	4659      	mov	r1, fp
 801829e:	4620      	mov	r0, r4
 80182a0:	f000 fcc4 	bl	8018c2c <__pow5mult>
 80182a4:	4683      	mov	fp, r0
 80182a6:	2101      	movs	r1, #1
 80182a8:	4620      	mov	r0, r4
 80182aa:	f000 fc03 	bl	8018ab4 <__i2b>
 80182ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	4606      	mov	r6, r0
 80182b4:	dd7c      	ble.n	80183b0 <_dtoa_r+0x8d8>
 80182b6:	461a      	mov	r2, r3
 80182b8:	4601      	mov	r1, r0
 80182ba:	4620      	mov	r0, r4
 80182bc:	f000 fcb6 	bl	8018c2c <__pow5mult>
 80182c0:	9b05      	ldr	r3, [sp, #20]
 80182c2:	2b01      	cmp	r3, #1
 80182c4:	4606      	mov	r6, r0
 80182c6:	dd76      	ble.n	80183b6 <_dtoa_r+0x8de>
 80182c8:	2300      	movs	r3, #0
 80182ca:	9306      	str	r3, [sp, #24]
 80182cc:	6933      	ldr	r3, [r6, #16]
 80182ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80182d2:	6918      	ldr	r0, [r3, #16]
 80182d4:	f000 fb9e 	bl	8018a14 <__hi0bits>
 80182d8:	f1c0 0020 	rsb	r0, r0, #32
 80182dc:	9b04      	ldr	r3, [sp, #16]
 80182de:	4418      	add	r0, r3
 80182e0:	f010 001f 	ands.w	r0, r0, #31
 80182e4:	f000 8086 	beq.w	80183f4 <_dtoa_r+0x91c>
 80182e8:	f1c0 0320 	rsb	r3, r0, #32
 80182ec:	2b04      	cmp	r3, #4
 80182ee:	dd7f      	ble.n	80183f0 <_dtoa_r+0x918>
 80182f0:	f1c0 001c 	rsb	r0, r0, #28
 80182f4:	9b04      	ldr	r3, [sp, #16]
 80182f6:	4403      	add	r3, r0
 80182f8:	4480      	add	r8, r0
 80182fa:	4405      	add	r5, r0
 80182fc:	9304      	str	r3, [sp, #16]
 80182fe:	f1b8 0f00 	cmp.w	r8, #0
 8018302:	dd05      	ble.n	8018310 <_dtoa_r+0x838>
 8018304:	4659      	mov	r1, fp
 8018306:	4642      	mov	r2, r8
 8018308:	4620      	mov	r0, r4
 801830a:	f000 fce9 	bl	8018ce0 <__lshift>
 801830e:	4683      	mov	fp, r0
 8018310:	9b04      	ldr	r3, [sp, #16]
 8018312:	2b00      	cmp	r3, #0
 8018314:	dd05      	ble.n	8018322 <_dtoa_r+0x84a>
 8018316:	4631      	mov	r1, r6
 8018318:	461a      	mov	r2, r3
 801831a:	4620      	mov	r0, r4
 801831c:	f000 fce0 	bl	8018ce0 <__lshift>
 8018320:	4606      	mov	r6, r0
 8018322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018324:	2b00      	cmp	r3, #0
 8018326:	d069      	beq.n	80183fc <_dtoa_r+0x924>
 8018328:	4631      	mov	r1, r6
 801832a:	4658      	mov	r0, fp
 801832c:	f000 fd44 	bl	8018db8 <__mcmp>
 8018330:	2800      	cmp	r0, #0
 8018332:	da63      	bge.n	80183fc <_dtoa_r+0x924>
 8018334:	2300      	movs	r3, #0
 8018336:	4659      	mov	r1, fp
 8018338:	220a      	movs	r2, #10
 801833a:	4620      	mov	r0, r4
 801833c:	f000 fb20 	bl	8018980 <__multadd>
 8018340:	9b08      	ldr	r3, [sp, #32]
 8018342:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018346:	4683      	mov	fp, r0
 8018348:	2b00      	cmp	r3, #0
 801834a:	f000 818f 	beq.w	801866c <_dtoa_r+0xb94>
 801834e:	4639      	mov	r1, r7
 8018350:	2300      	movs	r3, #0
 8018352:	220a      	movs	r2, #10
 8018354:	4620      	mov	r0, r4
 8018356:	f000 fb13 	bl	8018980 <__multadd>
 801835a:	f1b9 0f00 	cmp.w	r9, #0
 801835e:	4607      	mov	r7, r0
 8018360:	f300 808e 	bgt.w	8018480 <_dtoa_r+0x9a8>
 8018364:	9b05      	ldr	r3, [sp, #20]
 8018366:	2b02      	cmp	r3, #2
 8018368:	dc50      	bgt.n	801840c <_dtoa_r+0x934>
 801836a:	e089      	b.n	8018480 <_dtoa_r+0x9a8>
 801836c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801836e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018372:	e75d      	b.n	8018230 <_dtoa_r+0x758>
 8018374:	9b01      	ldr	r3, [sp, #4]
 8018376:	1e5e      	subs	r6, r3, #1
 8018378:	9b06      	ldr	r3, [sp, #24]
 801837a:	42b3      	cmp	r3, r6
 801837c:	bfbf      	itttt	lt
 801837e:	9b06      	ldrlt	r3, [sp, #24]
 8018380:	9606      	strlt	r6, [sp, #24]
 8018382:	1af2      	sublt	r2, r6, r3
 8018384:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8018386:	bfb6      	itet	lt
 8018388:	189b      	addlt	r3, r3, r2
 801838a:	1b9e      	subge	r6, r3, r6
 801838c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801838e:	9b01      	ldr	r3, [sp, #4]
 8018390:	bfb8      	it	lt
 8018392:	2600      	movlt	r6, #0
 8018394:	2b00      	cmp	r3, #0
 8018396:	bfb5      	itete	lt
 8018398:	eba8 0503 	sublt.w	r5, r8, r3
 801839c:	9b01      	ldrge	r3, [sp, #4]
 801839e:	2300      	movlt	r3, #0
 80183a0:	4645      	movge	r5, r8
 80183a2:	e747      	b.n	8018234 <_dtoa_r+0x75c>
 80183a4:	9e06      	ldr	r6, [sp, #24]
 80183a6:	9f08      	ldr	r7, [sp, #32]
 80183a8:	4645      	mov	r5, r8
 80183aa:	e74c      	b.n	8018246 <_dtoa_r+0x76e>
 80183ac:	9a06      	ldr	r2, [sp, #24]
 80183ae:	e775      	b.n	801829c <_dtoa_r+0x7c4>
 80183b0:	9b05      	ldr	r3, [sp, #20]
 80183b2:	2b01      	cmp	r3, #1
 80183b4:	dc18      	bgt.n	80183e8 <_dtoa_r+0x910>
 80183b6:	9b02      	ldr	r3, [sp, #8]
 80183b8:	b9b3      	cbnz	r3, 80183e8 <_dtoa_r+0x910>
 80183ba:	9b03      	ldr	r3, [sp, #12]
 80183bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80183c0:	b9a3      	cbnz	r3, 80183ec <_dtoa_r+0x914>
 80183c2:	9b03      	ldr	r3, [sp, #12]
 80183c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80183c8:	0d1b      	lsrs	r3, r3, #20
 80183ca:	051b      	lsls	r3, r3, #20
 80183cc:	b12b      	cbz	r3, 80183da <_dtoa_r+0x902>
 80183ce:	9b04      	ldr	r3, [sp, #16]
 80183d0:	3301      	adds	r3, #1
 80183d2:	9304      	str	r3, [sp, #16]
 80183d4:	f108 0801 	add.w	r8, r8, #1
 80183d8:	2301      	movs	r3, #1
 80183da:	9306      	str	r3, [sp, #24]
 80183dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80183de:	2b00      	cmp	r3, #0
 80183e0:	f47f af74 	bne.w	80182cc <_dtoa_r+0x7f4>
 80183e4:	2001      	movs	r0, #1
 80183e6:	e779      	b.n	80182dc <_dtoa_r+0x804>
 80183e8:	2300      	movs	r3, #0
 80183ea:	e7f6      	b.n	80183da <_dtoa_r+0x902>
 80183ec:	9b02      	ldr	r3, [sp, #8]
 80183ee:	e7f4      	b.n	80183da <_dtoa_r+0x902>
 80183f0:	d085      	beq.n	80182fe <_dtoa_r+0x826>
 80183f2:	4618      	mov	r0, r3
 80183f4:	301c      	adds	r0, #28
 80183f6:	e77d      	b.n	80182f4 <_dtoa_r+0x81c>
 80183f8:	40240000 	.word	0x40240000
 80183fc:	9b01      	ldr	r3, [sp, #4]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	dc38      	bgt.n	8018474 <_dtoa_r+0x99c>
 8018402:	9b05      	ldr	r3, [sp, #20]
 8018404:	2b02      	cmp	r3, #2
 8018406:	dd35      	ble.n	8018474 <_dtoa_r+0x99c>
 8018408:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801840c:	f1b9 0f00 	cmp.w	r9, #0
 8018410:	d10d      	bne.n	801842e <_dtoa_r+0x956>
 8018412:	4631      	mov	r1, r6
 8018414:	464b      	mov	r3, r9
 8018416:	2205      	movs	r2, #5
 8018418:	4620      	mov	r0, r4
 801841a:	f000 fab1 	bl	8018980 <__multadd>
 801841e:	4601      	mov	r1, r0
 8018420:	4606      	mov	r6, r0
 8018422:	4658      	mov	r0, fp
 8018424:	f000 fcc8 	bl	8018db8 <__mcmp>
 8018428:	2800      	cmp	r0, #0
 801842a:	f73f adbd 	bgt.w	8017fa8 <_dtoa_r+0x4d0>
 801842e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018430:	9d00      	ldr	r5, [sp, #0]
 8018432:	ea6f 0a03 	mvn.w	sl, r3
 8018436:	f04f 0800 	mov.w	r8, #0
 801843a:	4631      	mov	r1, r6
 801843c:	4620      	mov	r0, r4
 801843e:	f000 fa7d 	bl	801893c <_Bfree>
 8018442:	2f00      	cmp	r7, #0
 8018444:	f43f aeb4 	beq.w	80181b0 <_dtoa_r+0x6d8>
 8018448:	f1b8 0f00 	cmp.w	r8, #0
 801844c:	d005      	beq.n	801845a <_dtoa_r+0x982>
 801844e:	45b8      	cmp	r8, r7
 8018450:	d003      	beq.n	801845a <_dtoa_r+0x982>
 8018452:	4641      	mov	r1, r8
 8018454:	4620      	mov	r0, r4
 8018456:	f000 fa71 	bl	801893c <_Bfree>
 801845a:	4639      	mov	r1, r7
 801845c:	4620      	mov	r0, r4
 801845e:	f000 fa6d 	bl	801893c <_Bfree>
 8018462:	e6a5      	b.n	80181b0 <_dtoa_r+0x6d8>
 8018464:	2600      	movs	r6, #0
 8018466:	4637      	mov	r7, r6
 8018468:	e7e1      	b.n	801842e <_dtoa_r+0x956>
 801846a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801846c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018470:	4637      	mov	r7, r6
 8018472:	e599      	b.n	8017fa8 <_dtoa_r+0x4d0>
 8018474:	9b08      	ldr	r3, [sp, #32]
 8018476:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801847a:	2b00      	cmp	r3, #0
 801847c:	f000 80fd 	beq.w	801867a <_dtoa_r+0xba2>
 8018480:	2d00      	cmp	r5, #0
 8018482:	dd05      	ble.n	8018490 <_dtoa_r+0x9b8>
 8018484:	4639      	mov	r1, r7
 8018486:	462a      	mov	r2, r5
 8018488:	4620      	mov	r0, r4
 801848a:	f000 fc29 	bl	8018ce0 <__lshift>
 801848e:	4607      	mov	r7, r0
 8018490:	9b06      	ldr	r3, [sp, #24]
 8018492:	2b00      	cmp	r3, #0
 8018494:	d05c      	beq.n	8018550 <_dtoa_r+0xa78>
 8018496:	6879      	ldr	r1, [r7, #4]
 8018498:	4620      	mov	r0, r4
 801849a:	f000 fa0f 	bl	80188bc <_Balloc>
 801849e:	4605      	mov	r5, r0
 80184a0:	b928      	cbnz	r0, 80184ae <_dtoa_r+0x9d6>
 80184a2:	4b80      	ldr	r3, [pc, #512]	; (80186a4 <_dtoa_r+0xbcc>)
 80184a4:	4602      	mov	r2, r0
 80184a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80184aa:	f7ff bb2e 	b.w	8017b0a <_dtoa_r+0x32>
 80184ae:	693a      	ldr	r2, [r7, #16]
 80184b0:	3202      	adds	r2, #2
 80184b2:	0092      	lsls	r2, r2, #2
 80184b4:	f107 010c 	add.w	r1, r7, #12
 80184b8:	300c      	adds	r0, #12
 80184ba:	f7fe fd93 	bl	8016fe4 <memcpy>
 80184be:	2201      	movs	r2, #1
 80184c0:	4629      	mov	r1, r5
 80184c2:	4620      	mov	r0, r4
 80184c4:	f000 fc0c 	bl	8018ce0 <__lshift>
 80184c8:	9b00      	ldr	r3, [sp, #0]
 80184ca:	3301      	adds	r3, #1
 80184cc:	9301      	str	r3, [sp, #4]
 80184ce:	9b00      	ldr	r3, [sp, #0]
 80184d0:	444b      	add	r3, r9
 80184d2:	9307      	str	r3, [sp, #28]
 80184d4:	9b02      	ldr	r3, [sp, #8]
 80184d6:	f003 0301 	and.w	r3, r3, #1
 80184da:	46b8      	mov	r8, r7
 80184dc:	9306      	str	r3, [sp, #24]
 80184de:	4607      	mov	r7, r0
 80184e0:	9b01      	ldr	r3, [sp, #4]
 80184e2:	4631      	mov	r1, r6
 80184e4:	3b01      	subs	r3, #1
 80184e6:	4658      	mov	r0, fp
 80184e8:	9302      	str	r3, [sp, #8]
 80184ea:	f7ff fa67 	bl	80179bc <quorem>
 80184ee:	4603      	mov	r3, r0
 80184f0:	3330      	adds	r3, #48	; 0x30
 80184f2:	9004      	str	r0, [sp, #16]
 80184f4:	4641      	mov	r1, r8
 80184f6:	4658      	mov	r0, fp
 80184f8:	9308      	str	r3, [sp, #32]
 80184fa:	f000 fc5d 	bl	8018db8 <__mcmp>
 80184fe:	463a      	mov	r2, r7
 8018500:	4681      	mov	r9, r0
 8018502:	4631      	mov	r1, r6
 8018504:	4620      	mov	r0, r4
 8018506:	f000 fc73 	bl	8018df0 <__mdiff>
 801850a:	68c2      	ldr	r2, [r0, #12]
 801850c:	9b08      	ldr	r3, [sp, #32]
 801850e:	4605      	mov	r5, r0
 8018510:	bb02      	cbnz	r2, 8018554 <_dtoa_r+0xa7c>
 8018512:	4601      	mov	r1, r0
 8018514:	4658      	mov	r0, fp
 8018516:	f000 fc4f 	bl	8018db8 <__mcmp>
 801851a:	9b08      	ldr	r3, [sp, #32]
 801851c:	4602      	mov	r2, r0
 801851e:	4629      	mov	r1, r5
 8018520:	4620      	mov	r0, r4
 8018522:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8018526:	f000 fa09 	bl	801893c <_Bfree>
 801852a:	9b05      	ldr	r3, [sp, #20]
 801852c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801852e:	9d01      	ldr	r5, [sp, #4]
 8018530:	ea43 0102 	orr.w	r1, r3, r2
 8018534:	9b06      	ldr	r3, [sp, #24]
 8018536:	430b      	orrs	r3, r1
 8018538:	9b08      	ldr	r3, [sp, #32]
 801853a:	d10d      	bne.n	8018558 <_dtoa_r+0xa80>
 801853c:	2b39      	cmp	r3, #57	; 0x39
 801853e:	d029      	beq.n	8018594 <_dtoa_r+0xabc>
 8018540:	f1b9 0f00 	cmp.w	r9, #0
 8018544:	dd01      	ble.n	801854a <_dtoa_r+0xa72>
 8018546:	9b04      	ldr	r3, [sp, #16]
 8018548:	3331      	adds	r3, #49	; 0x31
 801854a:	9a02      	ldr	r2, [sp, #8]
 801854c:	7013      	strb	r3, [r2, #0]
 801854e:	e774      	b.n	801843a <_dtoa_r+0x962>
 8018550:	4638      	mov	r0, r7
 8018552:	e7b9      	b.n	80184c8 <_dtoa_r+0x9f0>
 8018554:	2201      	movs	r2, #1
 8018556:	e7e2      	b.n	801851e <_dtoa_r+0xa46>
 8018558:	f1b9 0f00 	cmp.w	r9, #0
 801855c:	db06      	blt.n	801856c <_dtoa_r+0xa94>
 801855e:	9905      	ldr	r1, [sp, #20]
 8018560:	ea41 0909 	orr.w	r9, r1, r9
 8018564:	9906      	ldr	r1, [sp, #24]
 8018566:	ea59 0101 	orrs.w	r1, r9, r1
 801856a:	d120      	bne.n	80185ae <_dtoa_r+0xad6>
 801856c:	2a00      	cmp	r2, #0
 801856e:	ddec      	ble.n	801854a <_dtoa_r+0xa72>
 8018570:	4659      	mov	r1, fp
 8018572:	2201      	movs	r2, #1
 8018574:	4620      	mov	r0, r4
 8018576:	9301      	str	r3, [sp, #4]
 8018578:	f000 fbb2 	bl	8018ce0 <__lshift>
 801857c:	4631      	mov	r1, r6
 801857e:	4683      	mov	fp, r0
 8018580:	f000 fc1a 	bl	8018db8 <__mcmp>
 8018584:	2800      	cmp	r0, #0
 8018586:	9b01      	ldr	r3, [sp, #4]
 8018588:	dc02      	bgt.n	8018590 <_dtoa_r+0xab8>
 801858a:	d1de      	bne.n	801854a <_dtoa_r+0xa72>
 801858c:	07da      	lsls	r2, r3, #31
 801858e:	d5dc      	bpl.n	801854a <_dtoa_r+0xa72>
 8018590:	2b39      	cmp	r3, #57	; 0x39
 8018592:	d1d8      	bne.n	8018546 <_dtoa_r+0xa6e>
 8018594:	9a02      	ldr	r2, [sp, #8]
 8018596:	2339      	movs	r3, #57	; 0x39
 8018598:	7013      	strb	r3, [r2, #0]
 801859a:	462b      	mov	r3, r5
 801859c:	461d      	mov	r5, r3
 801859e:	3b01      	subs	r3, #1
 80185a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80185a4:	2a39      	cmp	r2, #57	; 0x39
 80185a6:	d050      	beq.n	801864a <_dtoa_r+0xb72>
 80185a8:	3201      	adds	r2, #1
 80185aa:	701a      	strb	r2, [r3, #0]
 80185ac:	e745      	b.n	801843a <_dtoa_r+0x962>
 80185ae:	2a00      	cmp	r2, #0
 80185b0:	dd03      	ble.n	80185ba <_dtoa_r+0xae2>
 80185b2:	2b39      	cmp	r3, #57	; 0x39
 80185b4:	d0ee      	beq.n	8018594 <_dtoa_r+0xabc>
 80185b6:	3301      	adds	r3, #1
 80185b8:	e7c7      	b.n	801854a <_dtoa_r+0xa72>
 80185ba:	9a01      	ldr	r2, [sp, #4]
 80185bc:	9907      	ldr	r1, [sp, #28]
 80185be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80185c2:	428a      	cmp	r2, r1
 80185c4:	d02a      	beq.n	801861c <_dtoa_r+0xb44>
 80185c6:	4659      	mov	r1, fp
 80185c8:	2300      	movs	r3, #0
 80185ca:	220a      	movs	r2, #10
 80185cc:	4620      	mov	r0, r4
 80185ce:	f000 f9d7 	bl	8018980 <__multadd>
 80185d2:	45b8      	cmp	r8, r7
 80185d4:	4683      	mov	fp, r0
 80185d6:	f04f 0300 	mov.w	r3, #0
 80185da:	f04f 020a 	mov.w	r2, #10
 80185de:	4641      	mov	r1, r8
 80185e0:	4620      	mov	r0, r4
 80185e2:	d107      	bne.n	80185f4 <_dtoa_r+0xb1c>
 80185e4:	f000 f9cc 	bl	8018980 <__multadd>
 80185e8:	4680      	mov	r8, r0
 80185ea:	4607      	mov	r7, r0
 80185ec:	9b01      	ldr	r3, [sp, #4]
 80185ee:	3301      	adds	r3, #1
 80185f0:	9301      	str	r3, [sp, #4]
 80185f2:	e775      	b.n	80184e0 <_dtoa_r+0xa08>
 80185f4:	f000 f9c4 	bl	8018980 <__multadd>
 80185f8:	4639      	mov	r1, r7
 80185fa:	4680      	mov	r8, r0
 80185fc:	2300      	movs	r3, #0
 80185fe:	220a      	movs	r2, #10
 8018600:	4620      	mov	r0, r4
 8018602:	f000 f9bd 	bl	8018980 <__multadd>
 8018606:	4607      	mov	r7, r0
 8018608:	e7f0      	b.n	80185ec <_dtoa_r+0xb14>
 801860a:	f1b9 0f00 	cmp.w	r9, #0
 801860e:	9a00      	ldr	r2, [sp, #0]
 8018610:	bfcc      	ite	gt
 8018612:	464d      	movgt	r5, r9
 8018614:	2501      	movle	r5, #1
 8018616:	4415      	add	r5, r2
 8018618:	f04f 0800 	mov.w	r8, #0
 801861c:	4659      	mov	r1, fp
 801861e:	2201      	movs	r2, #1
 8018620:	4620      	mov	r0, r4
 8018622:	9301      	str	r3, [sp, #4]
 8018624:	f000 fb5c 	bl	8018ce0 <__lshift>
 8018628:	4631      	mov	r1, r6
 801862a:	4683      	mov	fp, r0
 801862c:	f000 fbc4 	bl	8018db8 <__mcmp>
 8018630:	2800      	cmp	r0, #0
 8018632:	dcb2      	bgt.n	801859a <_dtoa_r+0xac2>
 8018634:	d102      	bne.n	801863c <_dtoa_r+0xb64>
 8018636:	9b01      	ldr	r3, [sp, #4]
 8018638:	07db      	lsls	r3, r3, #31
 801863a:	d4ae      	bmi.n	801859a <_dtoa_r+0xac2>
 801863c:	462b      	mov	r3, r5
 801863e:	461d      	mov	r5, r3
 8018640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018644:	2a30      	cmp	r2, #48	; 0x30
 8018646:	d0fa      	beq.n	801863e <_dtoa_r+0xb66>
 8018648:	e6f7      	b.n	801843a <_dtoa_r+0x962>
 801864a:	9a00      	ldr	r2, [sp, #0]
 801864c:	429a      	cmp	r2, r3
 801864e:	d1a5      	bne.n	801859c <_dtoa_r+0xac4>
 8018650:	f10a 0a01 	add.w	sl, sl, #1
 8018654:	2331      	movs	r3, #49	; 0x31
 8018656:	e779      	b.n	801854c <_dtoa_r+0xa74>
 8018658:	4b13      	ldr	r3, [pc, #76]	; (80186a8 <_dtoa_r+0xbd0>)
 801865a:	f7ff baaf 	b.w	8017bbc <_dtoa_r+0xe4>
 801865e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018660:	2b00      	cmp	r3, #0
 8018662:	f47f aa86 	bne.w	8017b72 <_dtoa_r+0x9a>
 8018666:	4b11      	ldr	r3, [pc, #68]	; (80186ac <_dtoa_r+0xbd4>)
 8018668:	f7ff baa8 	b.w	8017bbc <_dtoa_r+0xe4>
 801866c:	f1b9 0f00 	cmp.w	r9, #0
 8018670:	dc03      	bgt.n	801867a <_dtoa_r+0xba2>
 8018672:	9b05      	ldr	r3, [sp, #20]
 8018674:	2b02      	cmp	r3, #2
 8018676:	f73f aec9 	bgt.w	801840c <_dtoa_r+0x934>
 801867a:	9d00      	ldr	r5, [sp, #0]
 801867c:	4631      	mov	r1, r6
 801867e:	4658      	mov	r0, fp
 8018680:	f7ff f99c 	bl	80179bc <quorem>
 8018684:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018688:	f805 3b01 	strb.w	r3, [r5], #1
 801868c:	9a00      	ldr	r2, [sp, #0]
 801868e:	1aaa      	subs	r2, r5, r2
 8018690:	4591      	cmp	r9, r2
 8018692:	ddba      	ble.n	801860a <_dtoa_r+0xb32>
 8018694:	4659      	mov	r1, fp
 8018696:	2300      	movs	r3, #0
 8018698:	220a      	movs	r2, #10
 801869a:	4620      	mov	r0, r4
 801869c:	f000 f970 	bl	8018980 <__multadd>
 80186a0:	4683      	mov	fp, r0
 80186a2:	e7eb      	b.n	801867c <_dtoa_r+0xba4>
 80186a4:	0801cdff 	.word	0x0801cdff
 80186a8:	0801cd58 	.word	0x0801cd58
 80186ac:	0801cd7c 	.word	0x0801cd7c

080186b0 <std>:
 80186b0:	2300      	movs	r3, #0
 80186b2:	b510      	push	{r4, lr}
 80186b4:	4604      	mov	r4, r0
 80186b6:	e9c0 3300 	strd	r3, r3, [r0]
 80186ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80186be:	6083      	str	r3, [r0, #8]
 80186c0:	8181      	strh	r1, [r0, #12]
 80186c2:	6643      	str	r3, [r0, #100]	; 0x64
 80186c4:	81c2      	strh	r2, [r0, #14]
 80186c6:	6183      	str	r3, [r0, #24]
 80186c8:	4619      	mov	r1, r3
 80186ca:	2208      	movs	r2, #8
 80186cc:	305c      	adds	r0, #92	; 0x5c
 80186ce:	f7fe fc97 	bl	8017000 <memset>
 80186d2:	4b05      	ldr	r3, [pc, #20]	; (80186e8 <std+0x38>)
 80186d4:	6263      	str	r3, [r4, #36]	; 0x24
 80186d6:	4b05      	ldr	r3, [pc, #20]	; (80186ec <std+0x3c>)
 80186d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80186da:	4b05      	ldr	r3, [pc, #20]	; (80186f0 <std+0x40>)
 80186dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80186de:	4b05      	ldr	r3, [pc, #20]	; (80186f4 <std+0x44>)
 80186e0:	6224      	str	r4, [r4, #32]
 80186e2:	6323      	str	r3, [r4, #48]	; 0x30
 80186e4:	bd10      	pop	{r4, pc}
 80186e6:	bf00      	nop
 80186e8:	080196b9 	.word	0x080196b9
 80186ec:	080196db 	.word	0x080196db
 80186f0:	08019713 	.word	0x08019713
 80186f4:	08019737 	.word	0x08019737

080186f8 <_cleanup_r>:
 80186f8:	4901      	ldr	r1, [pc, #4]	; (8018700 <_cleanup_r+0x8>)
 80186fa:	f000 b8af 	b.w	801885c <_fwalk_reent>
 80186fe:	bf00      	nop
 8018700:	08019a4d 	.word	0x08019a4d

08018704 <__sfmoreglue>:
 8018704:	b570      	push	{r4, r5, r6, lr}
 8018706:	1e4a      	subs	r2, r1, #1
 8018708:	2568      	movs	r5, #104	; 0x68
 801870a:	4355      	muls	r5, r2
 801870c:	460e      	mov	r6, r1
 801870e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018712:	f000 fcb1 	bl	8019078 <_malloc_r>
 8018716:	4604      	mov	r4, r0
 8018718:	b140      	cbz	r0, 801872c <__sfmoreglue+0x28>
 801871a:	2100      	movs	r1, #0
 801871c:	e9c0 1600 	strd	r1, r6, [r0]
 8018720:	300c      	adds	r0, #12
 8018722:	60a0      	str	r0, [r4, #8]
 8018724:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018728:	f7fe fc6a 	bl	8017000 <memset>
 801872c:	4620      	mov	r0, r4
 801872e:	bd70      	pop	{r4, r5, r6, pc}

08018730 <__sfp_lock_acquire>:
 8018730:	4801      	ldr	r0, [pc, #4]	; (8018738 <__sfp_lock_acquire+0x8>)
 8018732:	f000 b8b8 	b.w	80188a6 <__retarget_lock_acquire_recursive>
 8018736:	bf00      	nop
 8018738:	2000c7a8 	.word	0x2000c7a8

0801873c <__sfp_lock_release>:
 801873c:	4801      	ldr	r0, [pc, #4]	; (8018744 <__sfp_lock_release+0x8>)
 801873e:	f000 b8b3 	b.w	80188a8 <__retarget_lock_release_recursive>
 8018742:	bf00      	nop
 8018744:	2000c7a8 	.word	0x2000c7a8

08018748 <__sinit_lock_acquire>:
 8018748:	4801      	ldr	r0, [pc, #4]	; (8018750 <__sinit_lock_acquire+0x8>)
 801874a:	f000 b8ac 	b.w	80188a6 <__retarget_lock_acquire_recursive>
 801874e:	bf00      	nop
 8018750:	2000c7a3 	.word	0x2000c7a3

08018754 <__sinit_lock_release>:
 8018754:	4801      	ldr	r0, [pc, #4]	; (801875c <__sinit_lock_release+0x8>)
 8018756:	f000 b8a7 	b.w	80188a8 <__retarget_lock_release_recursive>
 801875a:	bf00      	nop
 801875c:	2000c7a3 	.word	0x2000c7a3

08018760 <__sinit>:
 8018760:	b510      	push	{r4, lr}
 8018762:	4604      	mov	r4, r0
 8018764:	f7ff fff0 	bl	8018748 <__sinit_lock_acquire>
 8018768:	69a3      	ldr	r3, [r4, #24]
 801876a:	b11b      	cbz	r3, 8018774 <__sinit+0x14>
 801876c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018770:	f7ff bff0 	b.w	8018754 <__sinit_lock_release>
 8018774:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018778:	6523      	str	r3, [r4, #80]	; 0x50
 801877a:	4b13      	ldr	r3, [pc, #76]	; (80187c8 <__sinit+0x68>)
 801877c:	4a13      	ldr	r2, [pc, #76]	; (80187cc <__sinit+0x6c>)
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	62a2      	str	r2, [r4, #40]	; 0x28
 8018782:	42a3      	cmp	r3, r4
 8018784:	bf04      	itt	eq
 8018786:	2301      	moveq	r3, #1
 8018788:	61a3      	streq	r3, [r4, #24]
 801878a:	4620      	mov	r0, r4
 801878c:	f000 f820 	bl	80187d0 <__sfp>
 8018790:	6060      	str	r0, [r4, #4]
 8018792:	4620      	mov	r0, r4
 8018794:	f000 f81c 	bl	80187d0 <__sfp>
 8018798:	60a0      	str	r0, [r4, #8]
 801879a:	4620      	mov	r0, r4
 801879c:	f000 f818 	bl	80187d0 <__sfp>
 80187a0:	2200      	movs	r2, #0
 80187a2:	60e0      	str	r0, [r4, #12]
 80187a4:	2104      	movs	r1, #4
 80187a6:	6860      	ldr	r0, [r4, #4]
 80187a8:	f7ff ff82 	bl	80186b0 <std>
 80187ac:	68a0      	ldr	r0, [r4, #8]
 80187ae:	2201      	movs	r2, #1
 80187b0:	2109      	movs	r1, #9
 80187b2:	f7ff ff7d 	bl	80186b0 <std>
 80187b6:	68e0      	ldr	r0, [r4, #12]
 80187b8:	2202      	movs	r2, #2
 80187ba:	2112      	movs	r1, #18
 80187bc:	f7ff ff78 	bl	80186b0 <std>
 80187c0:	2301      	movs	r3, #1
 80187c2:	61a3      	str	r3, [r4, #24]
 80187c4:	e7d2      	b.n	801876c <__sinit+0xc>
 80187c6:	bf00      	nop
 80187c8:	0801cd44 	.word	0x0801cd44
 80187cc:	080186f9 	.word	0x080186f9

080187d0 <__sfp>:
 80187d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187d2:	4607      	mov	r7, r0
 80187d4:	f7ff ffac 	bl	8018730 <__sfp_lock_acquire>
 80187d8:	4b1e      	ldr	r3, [pc, #120]	; (8018854 <__sfp+0x84>)
 80187da:	681e      	ldr	r6, [r3, #0]
 80187dc:	69b3      	ldr	r3, [r6, #24]
 80187de:	b913      	cbnz	r3, 80187e6 <__sfp+0x16>
 80187e0:	4630      	mov	r0, r6
 80187e2:	f7ff ffbd 	bl	8018760 <__sinit>
 80187e6:	3648      	adds	r6, #72	; 0x48
 80187e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80187ec:	3b01      	subs	r3, #1
 80187ee:	d503      	bpl.n	80187f8 <__sfp+0x28>
 80187f0:	6833      	ldr	r3, [r6, #0]
 80187f2:	b30b      	cbz	r3, 8018838 <__sfp+0x68>
 80187f4:	6836      	ldr	r6, [r6, #0]
 80187f6:	e7f7      	b.n	80187e8 <__sfp+0x18>
 80187f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80187fc:	b9d5      	cbnz	r5, 8018834 <__sfp+0x64>
 80187fe:	4b16      	ldr	r3, [pc, #88]	; (8018858 <__sfp+0x88>)
 8018800:	60e3      	str	r3, [r4, #12]
 8018802:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018806:	6665      	str	r5, [r4, #100]	; 0x64
 8018808:	f000 f84c 	bl	80188a4 <__retarget_lock_init_recursive>
 801880c:	f7ff ff96 	bl	801873c <__sfp_lock_release>
 8018810:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018814:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018818:	6025      	str	r5, [r4, #0]
 801881a:	61a5      	str	r5, [r4, #24]
 801881c:	2208      	movs	r2, #8
 801881e:	4629      	mov	r1, r5
 8018820:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018824:	f7fe fbec 	bl	8017000 <memset>
 8018828:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801882c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018830:	4620      	mov	r0, r4
 8018832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018834:	3468      	adds	r4, #104	; 0x68
 8018836:	e7d9      	b.n	80187ec <__sfp+0x1c>
 8018838:	2104      	movs	r1, #4
 801883a:	4638      	mov	r0, r7
 801883c:	f7ff ff62 	bl	8018704 <__sfmoreglue>
 8018840:	4604      	mov	r4, r0
 8018842:	6030      	str	r0, [r6, #0]
 8018844:	2800      	cmp	r0, #0
 8018846:	d1d5      	bne.n	80187f4 <__sfp+0x24>
 8018848:	f7ff ff78 	bl	801873c <__sfp_lock_release>
 801884c:	230c      	movs	r3, #12
 801884e:	603b      	str	r3, [r7, #0]
 8018850:	e7ee      	b.n	8018830 <__sfp+0x60>
 8018852:	bf00      	nop
 8018854:	0801cd44 	.word	0x0801cd44
 8018858:	ffff0001 	.word	0xffff0001

0801885c <_fwalk_reent>:
 801885c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018860:	4606      	mov	r6, r0
 8018862:	4688      	mov	r8, r1
 8018864:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018868:	2700      	movs	r7, #0
 801886a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801886e:	f1b9 0901 	subs.w	r9, r9, #1
 8018872:	d505      	bpl.n	8018880 <_fwalk_reent+0x24>
 8018874:	6824      	ldr	r4, [r4, #0]
 8018876:	2c00      	cmp	r4, #0
 8018878:	d1f7      	bne.n	801886a <_fwalk_reent+0xe>
 801887a:	4638      	mov	r0, r7
 801887c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018880:	89ab      	ldrh	r3, [r5, #12]
 8018882:	2b01      	cmp	r3, #1
 8018884:	d907      	bls.n	8018896 <_fwalk_reent+0x3a>
 8018886:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801888a:	3301      	adds	r3, #1
 801888c:	d003      	beq.n	8018896 <_fwalk_reent+0x3a>
 801888e:	4629      	mov	r1, r5
 8018890:	4630      	mov	r0, r6
 8018892:	47c0      	blx	r8
 8018894:	4307      	orrs	r7, r0
 8018896:	3568      	adds	r5, #104	; 0x68
 8018898:	e7e9      	b.n	801886e <_fwalk_reent+0x12>
	...

0801889c <_localeconv_r>:
 801889c:	4800      	ldr	r0, [pc, #0]	; (80188a0 <_localeconv_r+0x4>)
 801889e:	4770      	bx	lr
 80188a0:	20001520 	.word	0x20001520

080188a4 <__retarget_lock_init_recursive>:
 80188a4:	4770      	bx	lr

080188a6 <__retarget_lock_acquire_recursive>:
 80188a6:	4770      	bx	lr

080188a8 <__retarget_lock_release_recursive>:
 80188a8:	4770      	bx	lr
	...

080188ac <malloc>:
 80188ac:	4b02      	ldr	r3, [pc, #8]	; (80188b8 <malloc+0xc>)
 80188ae:	4601      	mov	r1, r0
 80188b0:	6818      	ldr	r0, [r3, #0]
 80188b2:	f000 bbe1 	b.w	8019078 <_malloc_r>
 80188b6:	bf00      	nop
 80188b8:	200013cc 	.word	0x200013cc

080188bc <_Balloc>:
 80188bc:	b570      	push	{r4, r5, r6, lr}
 80188be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80188c0:	4604      	mov	r4, r0
 80188c2:	460d      	mov	r5, r1
 80188c4:	b976      	cbnz	r6, 80188e4 <_Balloc+0x28>
 80188c6:	2010      	movs	r0, #16
 80188c8:	f7ff fff0 	bl	80188ac <malloc>
 80188cc:	4602      	mov	r2, r0
 80188ce:	6260      	str	r0, [r4, #36]	; 0x24
 80188d0:	b920      	cbnz	r0, 80188dc <_Balloc+0x20>
 80188d2:	4b18      	ldr	r3, [pc, #96]	; (8018934 <_Balloc+0x78>)
 80188d4:	4818      	ldr	r0, [pc, #96]	; (8018938 <_Balloc+0x7c>)
 80188d6:	2166      	movs	r1, #102	; 0x66
 80188d8:	f001 f804 	bl	80198e4 <__assert_func>
 80188dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80188e0:	6006      	str	r6, [r0, #0]
 80188e2:	60c6      	str	r6, [r0, #12]
 80188e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80188e6:	68f3      	ldr	r3, [r6, #12]
 80188e8:	b183      	cbz	r3, 801890c <_Balloc+0x50>
 80188ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188ec:	68db      	ldr	r3, [r3, #12]
 80188ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80188f2:	b9b8      	cbnz	r0, 8018924 <_Balloc+0x68>
 80188f4:	2101      	movs	r1, #1
 80188f6:	fa01 f605 	lsl.w	r6, r1, r5
 80188fa:	1d72      	adds	r2, r6, #5
 80188fc:	0092      	lsls	r2, r2, #2
 80188fe:	4620      	mov	r0, r4
 8018900:	f000 fb5a 	bl	8018fb8 <_calloc_r>
 8018904:	b160      	cbz	r0, 8018920 <_Balloc+0x64>
 8018906:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801890a:	e00e      	b.n	801892a <_Balloc+0x6e>
 801890c:	2221      	movs	r2, #33	; 0x21
 801890e:	2104      	movs	r1, #4
 8018910:	4620      	mov	r0, r4
 8018912:	f000 fb51 	bl	8018fb8 <_calloc_r>
 8018916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018918:	60f0      	str	r0, [r6, #12]
 801891a:	68db      	ldr	r3, [r3, #12]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d1e4      	bne.n	80188ea <_Balloc+0x2e>
 8018920:	2000      	movs	r0, #0
 8018922:	bd70      	pop	{r4, r5, r6, pc}
 8018924:	6802      	ldr	r2, [r0, #0]
 8018926:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801892a:	2300      	movs	r3, #0
 801892c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018930:	e7f7      	b.n	8018922 <_Balloc+0x66>
 8018932:	bf00      	nop
 8018934:	0801cd89 	.word	0x0801cd89
 8018938:	0801ce70 	.word	0x0801ce70

0801893c <_Bfree>:
 801893c:	b570      	push	{r4, r5, r6, lr}
 801893e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018940:	4605      	mov	r5, r0
 8018942:	460c      	mov	r4, r1
 8018944:	b976      	cbnz	r6, 8018964 <_Bfree+0x28>
 8018946:	2010      	movs	r0, #16
 8018948:	f7ff ffb0 	bl	80188ac <malloc>
 801894c:	4602      	mov	r2, r0
 801894e:	6268      	str	r0, [r5, #36]	; 0x24
 8018950:	b920      	cbnz	r0, 801895c <_Bfree+0x20>
 8018952:	4b09      	ldr	r3, [pc, #36]	; (8018978 <_Bfree+0x3c>)
 8018954:	4809      	ldr	r0, [pc, #36]	; (801897c <_Bfree+0x40>)
 8018956:	218a      	movs	r1, #138	; 0x8a
 8018958:	f000 ffc4 	bl	80198e4 <__assert_func>
 801895c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018960:	6006      	str	r6, [r0, #0]
 8018962:	60c6      	str	r6, [r0, #12]
 8018964:	b13c      	cbz	r4, 8018976 <_Bfree+0x3a>
 8018966:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018968:	6862      	ldr	r2, [r4, #4]
 801896a:	68db      	ldr	r3, [r3, #12]
 801896c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018970:	6021      	str	r1, [r4, #0]
 8018972:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018976:	bd70      	pop	{r4, r5, r6, pc}
 8018978:	0801cd89 	.word	0x0801cd89
 801897c:	0801ce70 	.word	0x0801ce70

08018980 <__multadd>:
 8018980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018984:	690e      	ldr	r6, [r1, #16]
 8018986:	4607      	mov	r7, r0
 8018988:	4698      	mov	r8, r3
 801898a:	460c      	mov	r4, r1
 801898c:	f101 0014 	add.w	r0, r1, #20
 8018990:	2300      	movs	r3, #0
 8018992:	6805      	ldr	r5, [r0, #0]
 8018994:	b2a9      	uxth	r1, r5
 8018996:	fb02 8101 	mla	r1, r2, r1, r8
 801899a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801899e:	0c2d      	lsrs	r5, r5, #16
 80189a0:	fb02 c505 	mla	r5, r2, r5, ip
 80189a4:	b289      	uxth	r1, r1
 80189a6:	3301      	adds	r3, #1
 80189a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80189ac:	429e      	cmp	r6, r3
 80189ae:	f840 1b04 	str.w	r1, [r0], #4
 80189b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80189b6:	dcec      	bgt.n	8018992 <__multadd+0x12>
 80189b8:	f1b8 0f00 	cmp.w	r8, #0
 80189bc:	d022      	beq.n	8018a04 <__multadd+0x84>
 80189be:	68a3      	ldr	r3, [r4, #8]
 80189c0:	42b3      	cmp	r3, r6
 80189c2:	dc19      	bgt.n	80189f8 <__multadd+0x78>
 80189c4:	6861      	ldr	r1, [r4, #4]
 80189c6:	4638      	mov	r0, r7
 80189c8:	3101      	adds	r1, #1
 80189ca:	f7ff ff77 	bl	80188bc <_Balloc>
 80189ce:	4605      	mov	r5, r0
 80189d0:	b928      	cbnz	r0, 80189de <__multadd+0x5e>
 80189d2:	4602      	mov	r2, r0
 80189d4:	4b0d      	ldr	r3, [pc, #52]	; (8018a0c <__multadd+0x8c>)
 80189d6:	480e      	ldr	r0, [pc, #56]	; (8018a10 <__multadd+0x90>)
 80189d8:	21b5      	movs	r1, #181	; 0xb5
 80189da:	f000 ff83 	bl	80198e4 <__assert_func>
 80189de:	6922      	ldr	r2, [r4, #16]
 80189e0:	3202      	adds	r2, #2
 80189e2:	f104 010c 	add.w	r1, r4, #12
 80189e6:	0092      	lsls	r2, r2, #2
 80189e8:	300c      	adds	r0, #12
 80189ea:	f7fe fafb 	bl	8016fe4 <memcpy>
 80189ee:	4621      	mov	r1, r4
 80189f0:	4638      	mov	r0, r7
 80189f2:	f7ff ffa3 	bl	801893c <_Bfree>
 80189f6:	462c      	mov	r4, r5
 80189f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80189fc:	3601      	adds	r6, #1
 80189fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8018a02:	6126      	str	r6, [r4, #16]
 8018a04:	4620      	mov	r0, r4
 8018a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a0a:	bf00      	nop
 8018a0c:	0801cdff 	.word	0x0801cdff
 8018a10:	0801ce70 	.word	0x0801ce70

08018a14 <__hi0bits>:
 8018a14:	0c03      	lsrs	r3, r0, #16
 8018a16:	041b      	lsls	r3, r3, #16
 8018a18:	b9d3      	cbnz	r3, 8018a50 <__hi0bits+0x3c>
 8018a1a:	0400      	lsls	r0, r0, #16
 8018a1c:	2310      	movs	r3, #16
 8018a1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018a22:	bf04      	itt	eq
 8018a24:	0200      	lsleq	r0, r0, #8
 8018a26:	3308      	addeq	r3, #8
 8018a28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018a2c:	bf04      	itt	eq
 8018a2e:	0100      	lsleq	r0, r0, #4
 8018a30:	3304      	addeq	r3, #4
 8018a32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018a36:	bf04      	itt	eq
 8018a38:	0080      	lsleq	r0, r0, #2
 8018a3a:	3302      	addeq	r3, #2
 8018a3c:	2800      	cmp	r0, #0
 8018a3e:	db05      	blt.n	8018a4c <__hi0bits+0x38>
 8018a40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018a44:	f103 0301 	add.w	r3, r3, #1
 8018a48:	bf08      	it	eq
 8018a4a:	2320      	moveq	r3, #32
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	4770      	bx	lr
 8018a50:	2300      	movs	r3, #0
 8018a52:	e7e4      	b.n	8018a1e <__hi0bits+0xa>

08018a54 <__lo0bits>:
 8018a54:	6803      	ldr	r3, [r0, #0]
 8018a56:	f013 0207 	ands.w	r2, r3, #7
 8018a5a:	4601      	mov	r1, r0
 8018a5c:	d00b      	beq.n	8018a76 <__lo0bits+0x22>
 8018a5e:	07da      	lsls	r2, r3, #31
 8018a60:	d424      	bmi.n	8018aac <__lo0bits+0x58>
 8018a62:	0798      	lsls	r0, r3, #30
 8018a64:	bf49      	itett	mi
 8018a66:	085b      	lsrmi	r3, r3, #1
 8018a68:	089b      	lsrpl	r3, r3, #2
 8018a6a:	2001      	movmi	r0, #1
 8018a6c:	600b      	strmi	r3, [r1, #0]
 8018a6e:	bf5c      	itt	pl
 8018a70:	600b      	strpl	r3, [r1, #0]
 8018a72:	2002      	movpl	r0, #2
 8018a74:	4770      	bx	lr
 8018a76:	b298      	uxth	r0, r3
 8018a78:	b9b0      	cbnz	r0, 8018aa8 <__lo0bits+0x54>
 8018a7a:	0c1b      	lsrs	r3, r3, #16
 8018a7c:	2010      	movs	r0, #16
 8018a7e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018a82:	bf04      	itt	eq
 8018a84:	0a1b      	lsreq	r3, r3, #8
 8018a86:	3008      	addeq	r0, #8
 8018a88:	071a      	lsls	r2, r3, #28
 8018a8a:	bf04      	itt	eq
 8018a8c:	091b      	lsreq	r3, r3, #4
 8018a8e:	3004      	addeq	r0, #4
 8018a90:	079a      	lsls	r2, r3, #30
 8018a92:	bf04      	itt	eq
 8018a94:	089b      	lsreq	r3, r3, #2
 8018a96:	3002      	addeq	r0, #2
 8018a98:	07da      	lsls	r2, r3, #31
 8018a9a:	d403      	bmi.n	8018aa4 <__lo0bits+0x50>
 8018a9c:	085b      	lsrs	r3, r3, #1
 8018a9e:	f100 0001 	add.w	r0, r0, #1
 8018aa2:	d005      	beq.n	8018ab0 <__lo0bits+0x5c>
 8018aa4:	600b      	str	r3, [r1, #0]
 8018aa6:	4770      	bx	lr
 8018aa8:	4610      	mov	r0, r2
 8018aaa:	e7e8      	b.n	8018a7e <__lo0bits+0x2a>
 8018aac:	2000      	movs	r0, #0
 8018aae:	4770      	bx	lr
 8018ab0:	2020      	movs	r0, #32
 8018ab2:	4770      	bx	lr

08018ab4 <__i2b>:
 8018ab4:	b510      	push	{r4, lr}
 8018ab6:	460c      	mov	r4, r1
 8018ab8:	2101      	movs	r1, #1
 8018aba:	f7ff feff 	bl	80188bc <_Balloc>
 8018abe:	4602      	mov	r2, r0
 8018ac0:	b928      	cbnz	r0, 8018ace <__i2b+0x1a>
 8018ac2:	4b05      	ldr	r3, [pc, #20]	; (8018ad8 <__i2b+0x24>)
 8018ac4:	4805      	ldr	r0, [pc, #20]	; (8018adc <__i2b+0x28>)
 8018ac6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018aca:	f000 ff0b 	bl	80198e4 <__assert_func>
 8018ace:	2301      	movs	r3, #1
 8018ad0:	6144      	str	r4, [r0, #20]
 8018ad2:	6103      	str	r3, [r0, #16]
 8018ad4:	bd10      	pop	{r4, pc}
 8018ad6:	bf00      	nop
 8018ad8:	0801cdff 	.word	0x0801cdff
 8018adc:	0801ce70 	.word	0x0801ce70

08018ae0 <__multiply>:
 8018ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ae4:	4614      	mov	r4, r2
 8018ae6:	690a      	ldr	r2, [r1, #16]
 8018ae8:	6923      	ldr	r3, [r4, #16]
 8018aea:	429a      	cmp	r2, r3
 8018aec:	bfb8      	it	lt
 8018aee:	460b      	movlt	r3, r1
 8018af0:	460d      	mov	r5, r1
 8018af2:	bfbc      	itt	lt
 8018af4:	4625      	movlt	r5, r4
 8018af6:	461c      	movlt	r4, r3
 8018af8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018afc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018b00:	68ab      	ldr	r3, [r5, #8]
 8018b02:	6869      	ldr	r1, [r5, #4]
 8018b04:	eb0a 0709 	add.w	r7, sl, r9
 8018b08:	42bb      	cmp	r3, r7
 8018b0a:	b085      	sub	sp, #20
 8018b0c:	bfb8      	it	lt
 8018b0e:	3101      	addlt	r1, #1
 8018b10:	f7ff fed4 	bl	80188bc <_Balloc>
 8018b14:	b930      	cbnz	r0, 8018b24 <__multiply+0x44>
 8018b16:	4602      	mov	r2, r0
 8018b18:	4b42      	ldr	r3, [pc, #264]	; (8018c24 <__multiply+0x144>)
 8018b1a:	4843      	ldr	r0, [pc, #268]	; (8018c28 <__multiply+0x148>)
 8018b1c:	f240 115d 	movw	r1, #349	; 0x15d
 8018b20:	f000 fee0 	bl	80198e4 <__assert_func>
 8018b24:	f100 0614 	add.w	r6, r0, #20
 8018b28:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018b2c:	4633      	mov	r3, r6
 8018b2e:	2200      	movs	r2, #0
 8018b30:	4543      	cmp	r3, r8
 8018b32:	d31e      	bcc.n	8018b72 <__multiply+0x92>
 8018b34:	f105 0c14 	add.w	ip, r5, #20
 8018b38:	f104 0314 	add.w	r3, r4, #20
 8018b3c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8018b40:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8018b44:	9202      	str	r2, [sp, #8]
 8018b46:	ebac 0205 	sub.w	r2, ip, r5
 8018b4a:	3a15      	subs	r2, #21
 8018b4c:	f022 0203 	bic.w	r2, r2, #3
 8018b50:	3204      	adds	r2, #4
 8018b52:	f105 0115 	add.w	r1, r5, #21
 8018b56:	458c      	cmp	ip, r1
 8018b58:	bf38      	it	cc
 8018b5a:	2204      	movcc	r2, #4
 8018b5c:	9201      	str	r2, [sp, #4]
 8018b5e:	9a02      	ldr	r2, [sp, #8]
 8018b60:	9303      	str	r3, [sp, #12]
 8018b62:	429a      	cmp	r2, r3
 8018b64:	d808      	bhi.n	8018b78 <__multiply+0x98>
 8018b66:	2f00      	cmp	r7, #0
 8018b68:	dc55      	bgt.n	8018c16 <__multiply+0x136>
 8018b6a:	6107      	str	r7, [r0, #16]
 8018b6c:	b005      	add	sp, #20
 8018b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b72:	f843 2b04 	str.w	r2, [r3], #4
 8018b76:	e7db      	b.n	8018b30 <__multiply+0x50>
 8018b78:	f8b3 a000 	ldrh.w	sl, [r3]
 8018b7c:	f1ba 0f00 	cmp.w	sl, #0
 8018b80:	d020      	beq.n	8018bc4 <__multiply+0xe4>
 8018b82:	f105 0e14 	add.w	lr, r5, #20
 8018b86:	46b1      	mov	r9, r6
 8018b88:	2200      	movs	r2, #0
 8018b8a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8018b8e:	f8d9 b000 	ldr.w	fp, [r9]
 8018b92:	b2a1      	uxth	r1, r4
 8018b94:	fa1f fb8b 	uxth.w	fp, fp
 8018b98:	fb0a b101 	mla	r1, sl, r1, fp
 8018b9c:	4411      	add	r1, r2
 8018b9e:	f8d9 2000 	ldr.w	r2, [r9]
 8018ba2:	0c24      	lsrs	r4, r4, #16
 8018ba4:	0c12      	lsrs	r2, r2, #16
 8018ba6:	fb0a 2404 	mla	r4, sl, r4, r2
 8018baa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8018bae:	b289      	uxth	r1, r1
 8018bb0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018bb4:	45f4      	cmp	ip, lr
 8018bb6:	f849 1b04 	str.w	r1, [r9], #4
 8018bba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8018bbe:	d8e4      	bhi.n	8018b8a <__multiply+0xaa>
 8018bc0:	9901      	ldr	r1, [sp, #4]
 8018bc2:	5072      	str	r2, [r6, r1]
 8018bc4:	9a03      	ldr	r2, [sp, #12]
 8018bc6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018bca:	3304      	adds	r3, #4
 8018bcc:	f1b9 0f00 	cmp.w	r9, #0
 8018bd0:	d01f      	beq.n	8018c12 <__multiply+0x132>
 8018bd2:	6834      	ldr	r4, [r6, #0]
 8018bd4:	f105 0114 	add.w	r1, r5, #20
 8018bd8:	46b6      	mov	lr, r6
 8018bda:	f04f 0a00 	mov.w	sl, #0
 8018bde:	880a      	ldrh	r2, [r1, #0]
 8018be0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8018be4:	fb09 b202 	mla	r2, r9, r2, fp
 8018be8:	4492      	add	sl, r2
 8018bea:	b2a4      	uxth	r4, r4
 8018bec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018bf0:	f84e 4b04 	str.w	r4, [lr], #4
 8018bf4:	f851 4b04 	ldr.w	r4, [r1], #4
 8018bf8:	f8be 2000 	ldrh.w	r2, [lr]
 8018bfc:	0c24      	lsrs	r4, r4, #16
 8018bfe:	fb09 2404 	mla	r4, r9, r4, r2
 8018c02:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8018c06:	458c      	cmp	ip, r1
 8018c08:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018c0c:	d8e7      	bhi.n	8018bde <__multiply+0xfe>
 8018c0e:	9a01      	ldr	r2, [sp, #4]
 8018c10:	50b4      	str	r4, [r6, r2]
 8018c12:	3604      	adds	r6, #4
 8018c14:	e7a3      	b.n	8018b5e <__multiply+0x7e>
 8018c16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d1a5      	bne.n	8018b6a <__multiply+0x8a>
 8018c1e:	3f01      	subs	r7, #1
 8018c20:	e7a1      	b.n	8018b66 <__multiply+0x86>
 8018c22:	bf00      	nop
 8018c24:	0801cdff 	.word	0x0801cdff
 8018c28:	0801ce70 	.word	0x0801ce70

08018c2c <__pow5mult>:
 8018c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c30:	4615      	mov	r5, r2
 8018c32:	f012 0203 	ands.w	r2, r2, #3
 8018c36:	4606      	mov	r6, r0
 8018c38:	460f      	mov	r7, r1
 8018c3a:	d007      	beq.n	8018c4c <__pow5mult+0x20>
 8018c3c:	4c25      	ldr	r4, [pc, #148]	; (8018cd4 <__pow5mult+0xa8>)
 8018c3e:	3a01      	subs	r2, #1
 8018c40:	2300      	movs	r3, #0
 8018c42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018c46:	f7ff fe9b 	bl	8018980 <__multadd>
 8018c4a:	4607      	mov	r7, r0
 8018c4c:	10ad      	asrs	r5, r5, #2
 8018c4e:	d03d      	beq.n	8018ccc <__pow5mult+0xa0>
 8018c50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018c52:	b97c      	cbnz	r4, 8018c74 <__pow5mult+0x48>
 8018c54:	2010      	movs	r0, #16
 8018c56:	f7ff fe29 	bl	80188ac <malloc>
 8018c5a:	4602      	mov	r2, r0
 8018c5c:	6270      	str	r0, [r6, #36]	; 0x24
 8018c5e:	b928      	cbnz	r0, 8018c6c <__pow5mult+0x40>
 8018c60:	4b1d      	ldr	r3, [pc, #116]	; (8018cd8 <__pow5mult+0xac>)
 8018c62:	481e      	ldr	r0, [pc, #120]	; (8018cdc <__pow5mult+0xb0>)
 8018c64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018c68:	f000 fe3c 	bl	80198e4 <__assert_func>
 8018c6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018c70:	6004      	str	r4, [r0, #0]
 8018c72:	60c4      	str	r4, [r0, #12]
 8018c74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018c78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018c7c:	b94c      	cbnz	r4, 8018c92 <__pow5mult+0x66>
 8018c7e:	f240 2171 	movw	r1, #625	; 0x271
 8018c82:	4630      	mov	r0, r6
 8018c84:	f7ff ff16 	bl	8018ab4 <__i2b>
 8018c88:	2300      	movs	r3, #0
 8018c8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8018c8e:	4604      	mov	r4, r0
 8018c90:	6003      	str	r3, [r0, #0]
 8018c92:	f04f 0900 	mov.w	r9, #0
 8018c96:	07eb      	lsls	r3, r5, #31
 8018c98:	d50a      	bpl.n	8018cb0 <__pow5mult+0x84>
 8018c9a:	4639      	mov	r1, r7
 8018c9c:	4622      	mov	r2, r4
 8018c9e:	4630      	mov	r0, r6
 8018ca0:	f7ff ff1e 	bl	8018ae0 <__multiply>
 8018ca4:	4639      	mov	r1, r7
 8018ca6:	4680      	mov	r8, r0
 8018ca8:	4630      	mov	r0, r6
 8018caa:	f7ff fe47 	bl	801893c <_Bfree>
 8018cae:	4647      	mov	r7, r8
 8018cb0:	106d      	asrs	r5, r5, #1
 8018cb2:	d00b      	beq.n	8018ccc <__pow5mult+0xa0>
 8018cb4:	6820      	ldr	r0, [r4, #0]
 8018cb6:	b938      	cbnz	r0, 8018cc8 <__pow5mult+0x9c>
 8018cb8:	4622      	mov	r2, r4
 8018cba:	4621      	mov	r1, r4
 8018cbc:	4630      	mov	r0, r6
 8018cbe:	f7ff ff0f 	bl	8018ae0 <__multiply>
 8018cc2:	6020      	str	r0, [r4, #0]
 8018cc4:	f8c0 9000 	str.w	r9, [r0]
 8018cc8:	4604      	mov	r4, r0
 8018cca:	e7e4      	b.n	8018c96 <__pow5mult+0x6a>
 8018ccc:	4638      	mov	r0, r7
 8018cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018cd2:	bf00      	nop
 8018cd4:	0801cfc0 	.word	0x0801cfc0
 8018cd8:	0801cd89 	.word	0x0801cd89
 8018cdc:	0801ce70 	.word	0x0801ce70

08018ce0 <__lshift>:
 8018ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ce4:	460c      	mov	r4, r1
 8018ce6:	6849      	ldr	r1, [r1, #4]
 8018ce8:	6923      	ldr	r3, [r4, #16]
 8018cea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018cee:	68a3      	ldr	r3, [r4, #8]
 8018cf0:	4607      	mov	r7, r0
 8018cf2:	4691      	mov	r9, r2
 8018cf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018cf8:	f108 0601 	add.w	r6, r8, #1
 8018cfc:	42b3      	cmp	r3, r6
 8018cfe:	db0b      	blt.n	8018d18 <__lshift+0x38>
 8018d00:	4638      	mov	r0, r7
 8018d02:	f7ff fddb 	bl	80188bc <_Balloc>
 8018d06:	4605      	mov	r5, r0
 8018d08:	b948      	cbnz	r0, 8018d1e <__lshift+0x3e>
 8018d0a:	4602      	mov	r2, r0
 8018d0c:	4b28      	ldr	r3, [pc, #160]	; (8018db0 <__lshift+0xd0>)
 8018d0e:	4829      	ldr	r0, [pc, #164]	; (8018db4 <__lshift+0xd4>)
 8018d10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018d14:	f000 fde6 	bl	80198e4 <__assert_func>
 8018d18:	3101      	adds	r1, #1
 8018d1a:	005b      	lsls	r3, r3, #1
 8018d1c:	e7ee      	b.n	8018cfc <__lshift+0x1c>
 8018d1e:	2300      	movs	r3, #0
 8018d20:	f100 0114 	add.w	r1, r0, #20
 8018d24:	f100 0210 	add.w	r2, r0, #16
 8018d28:	4618      	mov	r0, r3
 8018d2a:	4553      	cmp	r3, sl
 8018d2c:	db33      	blt.n	8018d96 <__lshift+0xb6>
 8018d2e:	6920      	ldr	r0, [r4, #16]
 8018d30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018d34:	f104 0314 	add.w	r3, r4, #20
 8018d38:	f019 091f 	ands.w	r9, r9, #31
 8018d3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018d40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018d44:	d02b      	beq.n	8018d9e <__lshift+0xbe>
 8018d46:	f1c9 0e20 	rsb	lr, r9, #32
 8018d4a:	468a      	mov	sl, r1
 8018d4c:	2200      	movs	r2, #0
 8018d4e:	6818      	ldr	r0, [r3, #0]
 8018d50:	fa00 f009 	lsl.w	r0, r0, r9
 8018d54:	4302      	orrs	r2, r0
 8018d56:	f84a 2b04 	str.w	r2, [sl], #4
 8018d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d5e:	459c      	cmp	ip, r3
 8018d60:	fa22 f20e 	lsr.w	r2, r2, lr
 8018d64:	d8f3      	bhi.n	8018d4e <__lshift+0x6e>
 8018d66:	ebac 0304 	sub.w	r3, ip, r4
 8018d6a:	3b15      	subs	r3, #21
 8018d6c:	f023 0303 	bic.w	r3, r3, #3
 8018d70:	3304      	adds	r3, #4
 8018d72:	f104 0015 	add.w	r0, r4, #21
 8018d76:	4584      	cmp	ip, r0
 8018d78:	bf38      	it	cc
 8018d7a:	2304      	movcc	r3, #4
 8018d7c:	50ca      	str	r2, [r1, r3]
 8018d7e:	b10a      	cbz	r2, 8018d84 <__lshift+0xa4>
 8018d80:	f108 0602 	add.w	r6, r8, #2
 8018d84:	3e01      	subs	r6, #1
 8018d86:	4638      	mov	r0, r7
 8018d88:	612e      	str	r6, [r5, #16]
 8018d8a:	4621      	mov	r1, r4
 8018d8c:	f7ff fdd6 	bl	801893c <_Bfree>
 8018d90:	4628      	mov	r0, r5
 8018d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d96:	f842 0f04 	str.w	r0, [r2, #4]!
 8018d9a:	3301      	adds	r3, #1
 8018d9c:	e7c5      	b.n	8018d2a <__lshift+0x4a>
 8018d9e:	3904      	subs	r1, #4
 8018da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8018da4:	f841 2f04 	str.w	r2, [r1, #4]!
 8018da8:	459c      	cmp	ip, r3
 8018daa:	d8f9      	bhi.n	8018da0 <__lshift+0xc0>
 8018dac:	e7ea      	b.n	8018d84 <__lshift+0xa4>
 8018dae:	bf00      	nop
 8018db0:	0801cdff 	.word	0x0801cdff
 8018db4:	0801ce70 	.word	0x0801ce70

08018db8 <__mcmp>:
 8018db8:	b530      	push	{r4, r5, lr}
 8018dba:	6902      	ldr	r2, [r0, #16]
 8018dbc:	690c      	ldr	r4, [r1, #16]
 8018dbe:	1b12      	subs	r2, r2, r4
 8018dc0:	d10e      	bne.n	8018de0 <__mcmp+0x28>
 8018dc2:	f100 0314 	add.w	r3, r0, #20
 8018dc6:	3114      	adds	r1, #20
 8018dc8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018dcc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018dd0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018dd4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018dd8:	42a5      	cmp	r5, r4
 8018dda:	d003      	beq.n	8018de4 <__mcmp+0x2c>
 8018ddc:	d305      	bcc.n	8018dea <__mcmp+0x32>
 8018dde:	2201      	movs	r2, #1
 8018de0:	4610      	mov	r0, r2
 8018de2:	bd30      	pop	{r4, r5, pc}
 8018de4:	4283      	cmp	r3, r0
 8018de6:	d3f3      	bcc.n	8018dd0 <__mcmp+0x18>
 8018de8:	e7fa      	b.n	8018de0 <__mcmp+0x28>
 8018dea:	f04f 32ff 	mov.w	r2, #4294967295
 8018dee:	e7f7      	b.n	8018de0 <__mcmp+0x28>

08018df0 <__mdiff>:
 8018df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018df4:	460c      	mov	r4, r1
 8018df6:	4606      	mov	r6, r0
 8018df8:	4611      	mov	r1, r2
 8018dfa:	4620      	mov	r0, r4
 8018dfc:	4617      	mov	r7, r2
 8018dfe:	f7ff ffdb 	bl	8018db8 <__mcmp>
 8018e02:	1e05      	subs	r5, r0, #0
 8018e04:	d110      	bne.n	8018e28 <__mdiff+0x38>
 8018e06:	4629      	mov	r1, r5
 8018e08:	4630      	mov	r0, r6
 8018e0a:	f7ff fd57 	bl	80188bc <_Balloc>
 8018e0e:	b930      	cbnz	r0, 8018e1e <__mdiff+0x2e>
 8018e10:	4b39      	ldr	r3, [pc, #228]	; (8018ef8 <__mdiff+0x108>)
 8018e12:	4602      	mov	r2, r0
 8018e14:	f240 2132 	movw	r1, #562	; 0x232
 8018e18:	4838      	ldr	r0, [pc, #224]	; (8018efc <__mdiff+0x10c>)
 8018e1a:	f000 fd63 	bl	80198e4 <__assert_func>
 8018e1e:	2301      	movs	r3, #1
 8018e20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018e24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e28:	bfa4      	itt	ge
 8018e2a:	463b      	movge	r3, r7
 8018e2c:	4627      	movge	r7, r4
 8018e2e:	4630      	mov	r0, r6
 8018e30:	6879      	ldr	r1, [r7, #4]
 8018e32:	bfa6      	itte	ge
 8018e34:	461c      	movge	r4, r3
 8018e36:	2500      	movge	r5, #0
 8018e38:	2501      	movlt	r5, #1
 8018e3a:	f7ff fd3f 	bl	80188bc <_Balloc>
 8018e3e:	b920      	cbnz	r0, 8018e4a <__mdiff+0x5a>
 8018e40:	4b2d      	ldr	r3, [pc, #180]	; (8018ef8 <__mdiff+0x108>)
 8018e42:	4602      	mov	r2, r0
 8018e44:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018e48:	e7e6      	b.n	8018e18 <__mdiff+0x28>
 8018e4a:	693e      	ldr	r6, [r7, #16]
 8018e4c:	60c5      	str	r5, [r0, #12]
 8018e4e:	6925      	ldr	r5, [r4, #16]
 8018e50:	f107 0114 	add.w	r1, r7, #20
 8018e54:	f104 0914 	add.w	r9, r4, #20
 8018e58:	f100 0e14 	add.w	lr, r0, #20
 8018e5c:	f107 0210 	add.w	r2, r7, #16
 8018e60:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8018e64:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8018e68:	46f2      	mov	sl, lr
 8018e6a:	2700      	movs	r7, #0
 8018e6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8018e70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018e74:	fa1f f883 	uxth.w	r8, r3
 8018e78:	fa17 f78b 	uxtah	r7, r7, fp
 8018e7c:	0c1b      	lsrs	r3, r3, #16
 8018e7e:	eba7 0808 	sub.w	r8, r7, r8
 8018e82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018e86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018e8a:	fa1f f888 	uxth.w	r8, r8
 8018e8e:	141f      	asrs	r7, r3, #16
 8018e90:	454d      	cmp	r5, r9
 8018e92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018e96:	f84a 3b04 	str.w	r3, [sl], #4
 8018e9a:	d8e7      	bhi.n	8018e6c <__mdiff+0x7c>
 8018e9c:	1b2b      	subs	r3, r5, r4
 8018e9e:	3b15      	subs	r3, #21
 8018ea0:	f023 0303 	bic.w	r3, r3, #3
 8018ea4:	3304      	adds	r3, #4
 8018ea6:	3415      	adds	r4, #21
 8018ea8:	42a5      	cmp	r5, r4
 8018eaa:	bf38      	it	cc
 8018eac:	2304      	movcc	r3, #4
 8018eae:	4419      	add	r1, r3
 8018eb0:	4473      	add	r3, lr
 8018eb2:	469e      	mov	lr, r3
 8018eb4:	460d      	mov	r5, r1
 8018eb6:	4565      	cmp	r5, ip
 8018eb8:	d30e      	bcc.n	8018ed8 <__mdiff+0xe8>
 8018eba:	f10c 0203 	add.w	r2, ip, #3
 8018ebe:	1a52      	subs	r2, r2, r1
 8018ec0:	f022 0203 	bic.w	r2, r2, #3
 8018ec4:	3903      	subs	r1, #3
 8018ec6:	458c      	cmp	ip, r1
 8018ec8:	bf38      	it	cc
 8018eca:	2200      	movcc	r2, #0
 8018ecc:	441a      	add	r2, r3
 8018ece:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018ed2:	b17b      	cbz	r3, 8018ef4 <__mdiff+0x104>
 8018ed4:	6106      	str	r6, [r0, #16]
 8018ed6:	e7a5      	b.n	8018e24 <__mdiff+0x34>
 8018ed8:	f855 8b04 	ldr.w	r8, [r5], #4
 8018edc:	fa17 f488 	uxtah	r4, r7, r8
 8018ee0:	1422      	asrs	r2, r4, #16
 8018ee2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8018ee6:	b2a4      	uxth	r4, r4
 8018ee8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8018eec:	f84e 4b04 	str.w	r4, [lr], #4
 8018ef0:	1417      	asrs	r7, r2, #16
 8018ef2:	e7e0      	b.n	8018eb6 <__mdiff+0xc6>
 8018ef4:	3e01      	subs	r6, #1
 8018ef6:	e7ea      	b.n	8018ece <__mdiff+0xde>
 8018ef8:	0801cdff 	.word	0x0801cdff
 8018efc:	0801ce70 	.word	0x0801ce70

08018f00 <__d2b>:
 8018f00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018f04:	4689      	mov	r9, r1
 8018f06:	2101      	movs	r1, #1
 8018f08:	ec57 6b10 	vmov	r6, r7, d0
 8018f0c:	4690      	mov	r8, r2
 8018f0e:	f7ff fcd5 	bl	80188bc <_Balloc>
 8018f12:	4604      	mov	r4, r0
 8018f14:	b930      	cbnz	r0, 8018f24 <__d2b+0x24>
 8018f16:	4602      	mov	r2, r0
 8018f18:	4b25      	ldr	r3, [pc, #148]	; (8018fb0 <__d2b+0xb0>)
 8018f1a:	4826      	ldr	r0, [pc, #152]	; (8018fb4 <__d2b+0xb4>)
 8018f1c:	f240 310a 	movw	r1, #778	; 0x30a
 8018f20:	f000 fce0 	bl	80198e4 <__assert_func>
 8018f24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018f28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018f2c:	bb35      	cbnz	r5, 8018f7c <__d2b+0x7c>
 8018f2e:	2e00      	cmp	r6, #0
 8018f30:	9301      	str	r3, [sp, #4]
 8018f32:	d028      	beq.n	8018f86 <__d2b+0x86>
 8018f34:	4668      	mov	r0, sp
 8018f36:	9600      	str	r6, [sp, #0]
 8018f38:	f7ff fd8c 	bl	8018a54 <__lo0bits>
 8018f3c:	9900      	ldr	r1, [sp, #0]
 8018f3e:	b300      	cbz	r0, 8018f82 <__d2b+0x82>
 8018f40:	9a01      	ldr	r2, [sp, #4]
 8018f42:	f1c0 0320 	rsb	r3, r0, #32
 8018f46:	fa02 f303 	lsl.w	r3, r2, r3
 8018f4a:	430b      	orrs	r3, r1
 8018f4c:	40c2      	lsrs	r2, r0
 8018f4e:	6163      	str	r3, [r4, #20]
 8018f50:	9201      	str	r2, [sp, #4]
 8018f52:	9b01      	ldr	r3, [sp, #4]
 8018f54:	61a3      	str	r3, [r4, #24]
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	bf14      	ite	ne
 8018f5a:	2202      	movne	r2, #2
 8018f5c:	2201      	moveq	r2, #1
 8018f5e:	6122      	str	r2, [r4, #16]
 8018f60:	b1d5      	cbz	r5, 8018f98 <__d2b+0x98>
 8018f62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018f66:	4405      	add	r5, r0
 8018f68:	f8c9 5000 	str.w	r5, [r9]
 8018f6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018f70:	f8c8 0000 	str.w	r0, [r8]
 8018f74:	4620      	mov	r0, r4
 8018f76:	b003      	add	sp, #12
 8018f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018f80:	e7d5      	b.n	8018f2e <__d2b+0x2e>
 8018f82:	6161      	str	r1, [r4, #20]
 8018f84:	e7e5      	b.n	8018f52 <__d2b+0x52>
 8018f86:	a801      	add	r0, sp, #4
 8018f88:	f7ff fd64 	bl	8018a54 <__lo0bits>
 8018f8c:	9b01      	ldr	r3, [sp, #4]
 8018f8e:	6163      	str	r3, [r4, #20]
 8018f90:	2201      	movs	r2, #1
 8018f92:	6122      	str	r2, [r4, #16]
 8018f94:	3020      	adds	r0, #32
 8018f96:	e7e3      	b.n	8018f60 <__d2b+0x60>
 8018f98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018f9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018fa0:	f8c9 0000 	str.w	r0, [r9]
 8018fa4:	6918      	ldr	r0, [r3, #16]
 8018fa6:	f7ff fd35 	bl	8018a14 <__hi0bits>
 8018faa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018fae:	e7df      	b.n	8018f70 <__d2b+0x70>
 8018fb0:	0801cdff 	.word	0x0801cdff
 8018fb4:	0801ce70 	.word	0x0801ce70

08018fb8 <_calloc_r>:
 8018fb8:	b513      	push	{r0, r1, r4, lr}
 8018fba:	434a      	muls	r2, r1
 8018fbc:	4611      	mov	r1, r2
 8018fbe:	9201      	str	r2, [sp, #4]
 8018fc0:	f000 f85a 	bl	8019078 <_malloc_r>
 8018fc4:	4604      	mov	r4, r0
 8018fc6:	b118      	cbz	r0, 8018fd0 <_calloc_r+0x18>
 8018fc8:	9a01      	ldr	r2, [sp, #4]
 8018fca:	2100      	movs	r1, #0
 8018fcc:	f7fe f818 	bl	8017000 <memset>
 8018fd0:	4620      	mov	r0, r4
 8018fd2:	b002      	add	sp, #8
 8018fd4:	bd10      	pop	{r4, pc}
	...

08018fd8 <_free_r>:
 8018fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018fda:	2900      	cmp	r1, #0
 8018fdc:	d048      	beq.n	8019070 <_free_r+0x98>
 8018fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018fe2:	9001      	str	r0, [sp, #4]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	f1a1 0404 	sub.w	r4, r1, #4
 8018fea:	bfb8      	it	lt
 8018fec:	18e4      	addlt	r4, r4, r3
 8018fee:	f000 fe1d 	bl	8019c2c <__malloc_lock>
 8018ff2:	4a20      	ldr	r2, [pc, #128]	; (8019074 <_free_r+0x9c>)
 8018ff4:	9801      	ldr	r0, [sp, #4]
 8018ff6:	6813      	ldr	r3, [r2, #0]
 8018ff8:	4615      	mov	r5, r2
 8018ffa:	b933      	cbnz	r3, 801900a <_free_r+0x32>
 8018ffc:	6063      	str	r3, [r4, #4]
 8018ffe:	6014      	str	r4, [r2, #0]
 8019000:	b003      	add	sp, #12
 8019002:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019006:	f000 be17 	b.w	8019c38 <__malloc_unlock>
 801900a:	42a3      	cmp	r3, r4
 801900c:	d90b      	bls.n	8019026 <_free_r+0x4e>
 801900e:	6821      	ldr	r1, [r4, #0]
 8019010:	1862      	adds	r2, r4, r1
 8019012:	4293      	cmp	r3, r2
 8019014:	bf04      	itt	eq
 8019016:	681a      	ldreq	r2, [r3, #0]
 8019018:	685b      	ldreq	r3, [r3, #4]
 801901a:	6063      	str	r3, [r4, #4]
 801901c:	bf04      	itt	eq
 801901e:	1852      	addeq	r2, r2, r1
 8019020:	6022      	streq	r2, [r4, #0]
 8019022:	602c      	str	r4, [r5, #0]
 8019024:	e7ec      	b.n	8019000 <_free_r+0x28>
 8019026:	461a      	mov	r2, r3
 8019028:	685b      	ldr	r3, [r3, #4]
 801902a:	b10b      	cbz	r3, 8019030 <_free_r+0x58>
 801902c:	42a3      	cmp	r3, r4
 801902e:	d9fa      	bls.n	8019026 <_free_r+0x4e>
 8019030:	6811      	ldr	r1, [r2, #0]
 8019032:	1855      	adds	r5, r2, r1
 8019034:	42a5      	cmp	r5, r4
 8019036:	d10b      	bne.n	8019050 <_free_r+0x78>
 8019038:	6824      	ldr	r4, [r4, #0]
 801903a:	4421      	add	r1, r4
 801903c:	1854      	adds	r4, r2, r1
 801903e:	42a3      	cmp	r3, r4
 8019040:	6011      	str	r1, [r2, #0]
 8019042:	d1dd      	bne.n	8019000 <_free_r+0x28>
 8019044:	681c      	ldr	r4, [r3, #0]
 8019046:	685b      	ldr	r3, [r3, #4]
 8019048:	6053      	str	r3, [r2, #4]
 801904a:	4421      	add	r1, r4
 801904c:	6011      	str	r1, [r2, #0]
 801904e:	e7d7      	b.n	8019000 <_free_r+0x28>
 8019050:	d902      	bls.n	8019058 <_free_r+0x80>
 8019052:	230c      	movs	r3, #12
 8019054:	6003      	str	r3, [r0, #0]
 8019056:	e7d3      	b.n	8019000 <_free_r+0x28>
 8019058:	6825      	ldr	r5, [r4, #0]
 801905a:	1961      	adds	r1, r4, r5
 801905c:	428b      	cmp	r3, r1
 801905e:	bf04      	itt	eq
 8019060:	6819      	ldreq	r1, [r3, #0]
 8019062:	685b      	ldreq	r3, [r3, #4]
 8019064:	6063      	str	r3, [r4, #4]
 8019066:	bf04      	itt	eq
 8019068:	1949      	addeq	r1, r1, r5
 801906a:	6021      	streq	r1, [r4, #0]
 801906c:	6054      	str	r4, [r2, #4]
 801906e:	e7c7      	b.n	8019000 <_free_r+0x28>
 8019070:	b003      	add	sp, #12
 8019072:	bd30      	pop	{r4, r5, pc}
 8019074:	20009454 	.word	0x20009454

08019078 <_malloc_r>:
 8019078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801907a:	1ccd      	adds	r5, r1, #3
 801907c:	f025 0503 	bic.w	r5, r5, #3
 8019080:	3508      	adds	r5, #8
 8019082:	2d0c      	cmp	r5, #12
 8019084:	bf38      	it	cc
 8019086:	250c      	movcc	r5, #12
 8019088:	2d00      	cmp	r5, #0
 801908a:	4606      	mov	r6, r0
 801908c:	db01      	blt.n	8019092 <_malloc_r+0x1a>
 801908e:	42a9      	cmp	r1, r5
 8019090:	d903      	bls.n	801909a <_malloc_r+0x22>
 8019092:	230c      	movs	r3, #12
 8019094:	6033      	str	r3, [r6, #0]
 8019096:	2000      	movs	r0, #0
 8019098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801909a:	f000 fdc7 	bl	8019c2c <__malloc_lock>
 801909e:	4921      	ldr	r1, [pc, #132]	; (8019124 <_malloc_r+0xac>)
 80190a0:	680a      	ldr	r2, [r1, #0]
 80190a2:	4614      	mov	r4, r2
 80190a4:	b99c      	cbnz	r4, 80190ce <_malloc_r+0x56>
 80190a6:	4f20      	ldr	r7, [pc, #128]	; (8019128 <_malloc_r+0xb0>)
 80190a8:	683b      	ldr	r3, [r7, #0]
 80190aa:	b923      	cbnz	r3, 80190b6 <_malloc_r+0x3e>
 80190ac:	4621      	mov	r1, r4
 80190ae:	4630      	mov	r0, r6
 80190b0:	f000 faf2 	bl	8019698 <_sbrk_r>
 80190b4:	6038      	str	r0, [r7, #0]
 80190b6:	4629      	mov	r1, r5
 80190b8:	4630      	mov	r0, r6
 80190ba:	f000 faed 	bl	8019698 <_sbrk_r>
 80190be:	1c43      	adds	r3, r0, #1
 80190c0:	d123      	bne.n	801910a <_malloc_r+0x92>
 80190c2:	230c      	movs	r3, #12
 80190c4:	6033      	str	r3, [r6, #0]
 80190c6:	4630      	mov	r0, r6
 80190c8:	f000 fdb6 	bl	8019c38 <__malloc_unlock>
 80190cc:	e7e3      	b.n	8019096 <_malloc_r+0x1e>
 80190ce:	6823      	ldr	r3, [r4, #0]
 80190d0:	1b5b      	subs	r3, r3, r5
 80190d2:	d417      	bmi.n	8019104 <_malloc_r+0x8c>
 80190d4:	2b0b      	cmp	r3, #11
 80190d6:	d903      	bls.n	80190e0 <_malloc_r+0x68>
 80190d8:	6023      	str	r3, [r4, #0]
 80190da:	441c      	add	r4, r3
 80190dc:	6025      	str	r5, [r4, #0]
 80190de:	e004      	b.n	80190ea <_malloc_r+0x72>
 80190e0:	6863      	ldr	r3, [r4, #4]
 80190e2:	42a2      	cmp	r2, r4
 80190e4:	bf0c      	ite	eq
 80190e6:	600b      	streq	r3, [r1, #0]
 80190e8:	6053      	strne	r3, [r2, #4]
 80190ea:	4630      	mov	r0, r6
 80190ec:	f000 fda4 	bl	8019c38 <__malloc_unlock>
 80190f0:	f104 000b 	add.w	r0, r4, #11
 80190f4:	1d23      	adds	r3, r4, #4
 80190f6:	f020 0007 	bic.w	r0, r0, #7
 80190fa:	1ac2      	subs	r2, r0, r3
 80190fc:	d0cc      	beq.n	8019098 <_malloc_r+0x20>
 80190fe:	1a1b      	subs	r3, r3, r0
 8019100:	50a3      	str	r3, [r4, r2]
 8019102:	e7c9      	b.n	8019098 <_malloc_r+0x20>
 8019104:	4622      	mov	r2, r4
 8019106:	6864      	ldr	r4, [r4, #4]
 8019108:	e7cc      	b.n	80190a4 <_malloc_r+0x2c>
 801910a:	1cc4      	adds	r4, r0, #3
 801910c:	f024 0403 	bic.w	r4, r4, #3
 8019110:	42a0      	cmp	r0, r4
 8019112:	d0e3      	beq.n	80190dc <_malloc_r+0x64>
 8019114:	1a21      	subs	r1, r4, r0
 8019116:	4630      	mov	r0, r6
 8019118:	f000 fabe 	bl	8019698 <_sbrk_r>
 801911c:	3001      	adds	r0, #1
 801911e:	d1dd      	bne.n	80190dc <_malloc_r+0x64>
 8019120:	e7cf      	b.n	80190c2 <_malloc_r+0x4a>
 8019122:	bf00      	nop
 8019124:	20009454 	.word	0x20009454
 8019128:	20009458 	.word	0x20009458

0801912c <__ssputs_r>:
 801912c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019130:	688e      	ldr	r6, [r1, #8]
 8019132:	429e      	cmp	r6, r3
 8019134:	4682      	mov	sl, r0
 8019136:	460c      	mov	r4, r1
 8019138:	4690      	mov	r8, r2
 801913a:	461f      	mov	r7, r3
 801913c:	d838      	bhi.n	80191b0 <__ssputs_r+0x84>
 801913e:	898a      	ldrh	r2, [r1, #12]
 8019140:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019144:	d032      	beq.n	80191ac <__ssputs_r+0x80>
 8019146:	6825      	ldr	r5, [r4, #0]
 8019148:	6909      	ldr	r1, [r1, #16]
 801914a:	eba5 0901 	sub.w	r9, r5, r1
 801914e:	6965      	ldr	r5, [r4, #20]
 8019150:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019158:	3301      	adds	r3, #1
 801915a:	444b      	add	r3, r9
 801915c:	106d      	asrs	r5, r5, #1
 801915e:	429d      	cmp	r5, r3
 8019160:	bf38      	it	cc
 8019162:	461d      	movcc	r5, r3
 8019164:	0553      	lsls	r3, r2, #21
 8019166:	d531      	bpl.n	80191cc <__ssputs_r+0xa0>
 8019168:	4629      	mov	r1, r5
 801916a:	f7ff ff85 	bl	8019078 <_malloc_r>
 801916e:	4606      	mov	r6, r0
 8019170:	b950      	cbnz	r0, 8019188 <__ssputs_r+0x5c>
 8019172:	230c      	movs	r3, #12
 8019174:	f8ca 3000 	str.w	r3, [sl]
 8019178:	89a3      	ldrh	r3, [r4, #12]
 801917a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801917e:	81a3      	strh	r3, [r4, #12]
 8019180:	f04f 30ff 	mov.w	r0, #4294967295
 8019184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019188:	6921      	ldr	r1, [r4, #16]
 801918a:	464a      	mov	r2, r9
 801918c:	f7fd ff2a 	bl	8016fe4 <memcpy>
 8019190:	89a3      	ldrh	r3, [r4, #12]
 8019192:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801919a:	81a3      	strh	r3, [r4, #12]
 801919c:	6126      	str	r6, [r4, #16]
 801919e:	6165      	str	r5, [r4, #20]
 80191a0:	444e      	add	r6, r9
 80191a2:	eba5 0509 	sub.w	r5, r5, r9
 80191a6:	6026      	str	r6, [r4, #0]
 80191a8:	60a5      	str	r5, [r4, #8]
 80191aa:	463e      	mov	r6, r7
 80191ac:	42be      	cmp	r6, r7
 80191ae:	d900      	bls.n	80191b2 <__ssputs_r+0x86>
 80191b0:	463e      	mov	r6, r7
 80191b2:	4632      	mov	r2, r6
 80191b4:	6820      	ldr	r0, [r4, #0]
 80191b6:	4641      	mov	r1, r8
 80191b8:	f000 fd1e 	bl	8019bf8 <memmove>
 80191bc:	68a3      	ldr	r3, [r4, #8]
 80191be:	6822      	ldr	r2, [r4, #0]
 80191c0:	1b9b      	subs	r3, r3, r6
 80191c2:	4432      	add	r2, r6
 80191c4:	60a3      	str	r3, [r4, #8]
 80191c6:	6022      	str	r2, [r4, #0]
 80191c8:	2000      	movs	r0, #0
 80191ca:	e7db      	b.n	8019184 <__ssputs_r+0x58>
 80191cc:	462a      	mov	r2, r5
 80191ce:	f000 fd39 	bl	8019c44 <_realloc_r>
 80191d2:	4606      	mov	r6, r0
 80191d4:	2800      	cmp	r0, #0
 80191d6:	d1e1      	bne.n	801919c <__ssputs_r+0x70>
 80191d8:	6921      	ldr	r1, [r4, #16]
 80191da:	4650      	mov	r0, sl
 80191dc:	f7ff fefc 	bl	8018fd8 <_free_r>
 80191e0:	e7c7      	b.n	8019172 <__ssputs_r+0x46>
	...

080191e4 <_svfiprintf_r>:
 80191e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191e8:	4698      	mov	r8, r3
 80191ea:	898b      	ldrh	r3, [r1, #12]
 80191ec:	061b      	lsls	r3, r3, #24
 80191ee:	b09d      	sub	sp, #116	; 0x74
 80191f0:	4607      	mov	r7, r0
 80191f2:	460d      	mov	r5, r1
 80191f4:	4614      	mov	r4, r2
 80191f6:	d50e      	bpl.n	8019216 <_svfiprintf_r+0x32>
 80191f8:	690b      	ldr	r3, [r1, #16]
 80191fa:	b963      	cbnz	r3, 8019216 <_svfiprintf_r+0x32>
 80191fc:	2140      	movs	r1, #64	; 0x40
 80191fe:	f7ff ff3b 	bl	8019078 <_malloc_r>
 8019202:	6028      	str	r0, [r5, #0]
 8019204:	6128      	str	r0, [r5, #16]
 8019206:	b920      	cbnz	r0, 8019212 <_svfiprintf_r+0x2e>
 8019208:	230c      	movs	r3, #12
 801920a:	603b      	str	r3, [r7, #0]
 801920c:	f04f 30ff 	mov.w	r0, #4294967295
 8019210:	e0d1      	b.n	80193b6 <_svfiprintf_r+0x1d2>
 8019212:	2340      	movs	r3, #64	; 0x40
 8019214:	616b      	str	r3, [r5, #20]
 8019216:	2300      	movs	r3, #0
 8019218:	9309      	str	r3, [sp, #36]	; 0x24
 801921a:	2320      	movs	r3, #32
 801921c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019220:	f8cd 800c 	str.w	r8, [sp, #12]
 8019224:	2330      	movs	r3, #48	; 0x30
 8019226:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80193d0 <_svfiprintf_r+0x1ec>
 801922a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801922e:	f04f 0901 	mov.w	r9, #1
 8019232:	4623      	mov	r3, r4
 8019234:	469a      	mov	sl, r3
 8019236:	f813 2b01 	ldrb.w	r2, [r3], #1
 801923a:	b10a      	cbz	r2, 8019240 <_svfiprintf_r+0x5c>
 801923c:	2a25      	cmp	r2, #37	; 0x25
 801923e:	d1f9      	bne.n	8019234 <_svfiprintf_r+0x50>
 8019240:	ebba 0b04 	subs.w	fp, sl, r4
 8019244:	d00b      	beq.n	801925e <_svfiprintf_r+0x7a>
 8019246:	465b      	mov	r3, fp
 8019248:	4622      	mov	r2, r4
 801924a:	4629      	mov	r1, r5
 801924c:	4638      	mov	r0, r7
 801924e:	f7ff ff6d 	bl	801912c <__ssputs_r>
 8019252:	3001      	adds	r0, #1
 8019254:	f000 80aa 	beq.w	80193ac <_svfiprintf_r+0x1c8>
 8019258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801925a:	445a      	add	r2, fp
 801925c:	9209      	str	r2, [sp, #36]	; 0x24
 801925e:	f89a 3000 	ldrb.w	r3, [sl]
 8019262:	2b00      	cmp	r3, #0
 8019264:	f000 80a2 	beq.w	80193ac <_svfiprintf_r+0x1c8>
 8019268:	2300      	movs	r3, #0
 801926a:	f04f 32ff 	mov.w	r2, #4294967295
 801926e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019272:	f10a 0a01 	add.w	sl, sl, #1
 8019276:	9304      	str	r3, [sp, #16]
 8019278:	9307      	str	r3, [sp, #28]
 801927a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801927e:	931a      	str	r3, [sp, #104]	; 0x68
 8019280:	4654      	mov	r4, sl
 8019282:	2205      	movs	r2, #5
 8019284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019288:	4851      	ldr	r0, [pc, #324]	; (80193d0 <_svfiprintf_r+0x1ec>)
 801928a:	f7e6 ffb1 	bl	80001f0 <memchr>
 801928e:	9a04      	ldr	r2, [sp, #16]
 8019290:	b9d8      	cbnz	r0, 80192ca <_svfiprintf_r+0xe6>
 8019292:	06d0      	lsls	r0, r2, #27
 8019294:	bf44      	itt	mi
 8019296:	2320      	movmi	r3, #32
 8019298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801929c:	0711      	lsls	r1, r2, #28
 801929e:	bf44      	itt	mi
 80192a0:	232b      	movmi	r3, #43	; 0x2b
 80192a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80192a6:	f89a 3000 	ldrb.w	r3, [sl]
 80192aa:	2b2a      	cmp	r3, #42	; 0x2a
 80192ac:	d015      	beq.n	80192da <_svfiprintf_r+0xf6>
 80192ae:	9a07      	ldr	r2, [sp, #28]
 80192b0:	4654      	mov	r4, sl
 80192b2:	2000      	movs	r0, #0
 80192b4:	f04f 0c0a 	mov.w	ip, #10
 80192b8:	4621      	mov	r1, r4
 80192ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80192be:	3b30      	subs	r3, #48	; 0x30
 80192c0:	2b09      	cmp	r3, #9
 80192c2:	d94e      	bls.n	8019362 <_svfiprintf_r+0x17e>
 80192c4:	b1b0      	cbz	r0, 80192f4 <_svfiprintf_r+0x110>
 80192c6:	9207      	str	r2, [sp, #28]
 80192c8:	e014      	b.n	80192f4 <_svfiprintf_r+0x110>
 80192ca:	eba0 0308 	sub.w	r3, r0, r8
 80192ce:	fa09 f303 	lsl.w	r3, r9, r3
 80192d2:	4313      	orrs	r3, r2
 80192d4:	9304      	str	r3, [sp, #16]
 80192d6:	46a2      	mov	sl, r4
 80192d8:	e7d2      	b.n	8019280 <_svfiprintf_r+0x9c>
 80192da:	9b03      	ldr	r3, [sp, #12]
 80192dc:	1d19      	adds	r1, r3, #4
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	9103      	str	r1, [sp, #12]
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	bfbb      	ittet	lt
 80192e6:	425b      	neglt	r3, r3
 80192e8:	f042 0202 	orrlt.w	r2, r2, #2
 80192ec:	9307      	strge	r3, [sp, #28]
 80192ee:	9307      	strlt	r3, [sp, #28]
 80192f0:	bfb8      	it	lt
 80192f2:	9204      	strlt	r2, [sp, #16]
 80192f4:	7823      	ldrb	r3, [r4, #0]
 80192f6:	2b2e      	cmp	r3, #46	; 0x2e
 80192f8:	d10c      	bne.n	8019314 <_svfiprintf_r+0x130>
 80192fa:	7863      	ldrb	r3, [r4, #1]
 80192fc:	2b2a      	cmp	r3, #42	; 0x2a
 80192fe:	d135      	bne.n	801936c <_svfiprintf_r+0x188>
 8019300:	9b03      	ldr	r3, [sp, #12]
 8019302:	1d1a      	adds	r2, r3, #4
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	9203      	str	r2, [sp, #12]
 8019308:	2b00      	cmp	r3, #0
 801930a:	bfb8      	it	lt
 801930c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019310:	3402      	adds	r4, #2
 8019312:	9305      	str	r3, [sp, #20]
 8019314:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80193e0 <_svfiprintf_r+0x1fc>
 8019318:	7821      	ldrb	r1, [r4, #0]
 801931a:	2203      	movs	r2, #3
 801931c:	4650      	mov	r0, sl
 801931e:	f7e6 ff67 	bl	80001f0 <memchr>
 8019322:	b140      	cbz	r0, 8019336 <_svfiprintf_r+0x152>
 8019324:	2340      	movs	r3, #64	; 0x40
 8019326:	eba0 000a 	sub.w	r0, r0, sl
 801932a:	fa03 f000 	lsl.w	r0, r3, r0
 801932e:	9b04      	ldr	r3, [sp, #16]
 8019330:	4303      	orrs	r3, r0
 8019332:	3401      	adds	r4, #1
 8019334:	9304      	str	r3, [sp, #16]
 8019336:	f814 1b01 	ldrb.w	r1, [r4], #1
 801933a:	4826      	ldr	r0, [pc, #152]	; (80193d4 <_svfiprintf_r+0x1f0>)
 801933c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019340:	2206      	movs	r2, #6
 8019342:	f7e6 ff55 	bl	80001f0 <memchr>
 8019346:	2800      	cmp	r0, #0
 8019348:	d038      	beq.n	80193bc <_svfiprintf_r+0x1d8>
 801934a:	4b23      	ldr	r3, [pc, #140]	; (80193d8 <_svfiprintf_r+0x1f4>)
 801934c:	bb1b      	cbnz	r3, 8019396 <_svfiprintf_r+0x1b2>
 801934e:	9b03      	ldr	r3, [sp, #12]
 8019350:	3307      	adds	r3, #7
 8019352:	f023 0307 	bic.w	r3, r3, #7
 8019356:	3308      	adds	r3, #8
 8019358:	9303      	str	r3, [sp, #12]
 801935a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801935c:	4433      	add	r3, r6
 801935e:	9309      	str	r3, [sp, #36]	; 0x24
 8019360:	e767      	b.n	8019232 <_svfiprintf_r+0x4e>
 8019362:	fb0c 3202 	mla	r2, ip, r2, r3
 8019366:	460c      	mov	r4, r1
 8019368:	2001      	movs	r0, #1
 801936a:	e7a5      	b.n	80192b8 <_svfiprintf_r+0xd4>
 801936c:	2300      	movs	r3, #0
 801936e:	3401      	adds	r4, #1
 8019370:	9305      	str	r3, [sp, #20]
 8019372:	4619      	mov	r1, r3
 8019374:	f04f 0c0a 	mov.w	ip, #10
 8019378:	4620      	mov	r0, r4
 801937a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801937e:	3a30      	subs	r2, #48	; 0x30
 8019380:	2a09      	cmp	r2, #9
 8019382:	d903      	bls.n	801938c <_svfiprintf_r+0x1a8>
 8019384:	2b00      	cmp	r3, #0
 8019386:	d0c5      	beq.n	8019314 <_svfiprintf_r+0x130>
 8019388:	9105      	str	r1, [sp, #20]
 801938a:	e7c3      	b.n	8019314 <_svfiprintf_r+0x130>
 801938c:	fb0c 2101 	mla	r1, ip, r1, r2
 8019390:	4604      	mov	r4, r0
 8019392:	2301      	movs	r3, #1
 8019394:	e7f0      	b.n	8019378 <_svfiprintf_r+0x194>
 8019396:	ab03      	add	r3, sp, #12
 8019398:	9300      	str	r3, [sp, #0]
 801939a:	462a      	mov	r2, r5
 801939c:	4b0f      	ldr	r3, [pc, #60]	; (80193dc <_svfiprintf_r+0x1f8>)
 801939e:	a904      	add	r1, sp, #16
 80193a0:	4638      	mov	r0, r7
 80193a2:	f7fd fed5 	bl	8017150 <_printf_float>
 80193a6:	1c42      	adds	r2, r0, #1
 80193a8:	4606      	mov	r6, r0
 80193aa:	d1d6      	bne.n	801935a <_svfiprintf_r+0x176>
 80193ac:	89ab      	ldrh	r3, [r5, #12]
 80193ae:	065b      	lsls	r3, r3, #25
 80193b0:	f53f af2c 	bmi.w	801920c <_svfiprintf_r+0x28>
 80193b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80193b6:	b01d      	add	sp, #116	; 0x74
 80193b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193bc:	ab03      	add	r3, sp, #12
 80193be:	9300      	str	r3, [sp, #0]
 80193c0:	462a      	mov	r2, r5
 80193c2:	4b06      	ldr	r3, [pc, #24]	; (80193dc <_svfiprintf_r+0x1f8>)
 80193c4:	a904      	add	r1, sp, #16
 80193c6:	4638      	mov	r0, r7
 80193c8:	f7fe f966 	bl	8017698 <_printf_i>
 80193cc:	e7eb      	b.n	80193a6 <_svfiprintf_r+0x1c2>
 80193ce:	bf00      	nop
 80193d0:	0801cfcc 	.word	0x0801cfcc
 80193d4:	0801cfd6 	.word	0x0801cfd6
 80193d8:	08017151 	.word	0x08017151
 80193dc:	0801912d 	.word	0x0801912d
 80193e0:	0801cfd2 	.word	0x0801cfd2

080193e4 <__sfputc_r>:
 80193e4:	6893      	ldr	r3, [r2, #8]
 80193e6:	3b01      	subs	r3, #1
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	b410      	push	{r4}
 80193ec:	6093      	str	r3, [r2, #8]
 80193ee:	da08      	bge.n	8019402 <__sfputc_r+0x1e>
 80193f0:	6994      	ldr	r4, [r2, #24]
 80193f2:	42a3      	cmp	r3, r4
 80193f4:	db01      	blt.n	80193fa <__sfputc_r+0x16>
 80193f6:	290a      	cmp	r1, #10
 80193f8:	d103      	bne.n	8019402 <__sfputc_r+0x1e>
 80193fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80193fe:	f000 b99f 	b.w	8019740 <__swbuf_r>
 8019402:	6813      	ldr	r3, [r2, #0]
 8019404:	1c58      	adds	r0, r3, #1
 8019406:	6010      	str	r0, [r2, #0]
 8019408:	7019      	strb	r1, [r3, #0]
 801940a:	4608      	mov	r0, r1
 801940c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019410:	4770      	bx	lr

08019412 <__sfputs_r>:
 8019412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019414:	4606      	mov	r6, r0
 8019416:	460f      	mov	r7, r1
 8019418:	4614      	mov	r4, r2
 801941a:	18d5      	adds	r5, r2, r3
 801941c:	42ac      	cmp	r4, r5
 801941e:	d101      	bne.n	8019424 <__sfputs_r+0x12>
 8019420:	2000      	movs	r0, #0
 8019422:	e007      	b.n	8019434 <__sfputs_r+0x22>
 8019424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019428:	463a      	mov	r2, r7
 801942a:	4630      	mov	r0, r6
 801942c:	f7ff ffda 	bl	80193e4 <__sfputc_r>
 8019430:	1c43      	adds	r3, r0, #1
 8019432:	d1f3      	bne.n	801941c <__sfputs_r+0xa>
 8019434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019438 <_vfiprintf_r>:
 8019438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801943c:	460d      	mov	r5, r1
 801943e:	b09d      	sub	sp, #116	; 0x74
 8019440:	4614      	mov	r4, r2
 8019442:	4698      	mov	r8, r3
 8019444:	4606      	mov	r6, r0
 8019446:	b118      	cbz	r0, 8019450 <_vfiprintf_r+0x18>
 8019448:	6983      	ldr	r3, [r0, #24]
 801944a:	b90b      	cbnz	r3, 8019450 <_vfiprintf_r+0x18>
 801944c:	f7ff f988 	bl	8018760 <__sinit>
 8019450:	4b89      	ldr	r3, [pc, #548]	; (8019678 <_vfiprintf_r+0x240>)
 8019452:	429d      	cmp	r5, r3
 8019454:	d11b      	bne.n	801948e <_vfiprintf_r+0x56>
 8019456:	6875      	ldr	r5, [r6, #4]
 8019458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801945a:	07d9      	lsls	r1, r3, #31
 801945c:	d405      	bmi.n	801946a <_vfiprintf_r+0x32>
 801945e:	89ab      	ldrh	r3, [r5, #12]
 8019460:	059a      	lsls	r2, r3, #22
 8019462:	d402      	bmi.n	801946a <_vfiprintf_r+0x32>
 8019464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019466:	f7ff fa1e 	bl	80188a6 <__retarget_lock_acquire_recursive>
 801946a:	89ab      	ldrh	r3, [r5, #12]
 801946c:	071b      	lsls	r3, r3, #28
 801946e:	d501      	bpl.n	8019474 <_vfiprintf_r+0x3c>
 8019470:	692b      	ldr	r3, [r5, #16]
 8019472:	b9eb      	cbnz	r3, 80194b0 <_vfiprintf_r+0x78>
 8019474:	4629      	mov	r1, r5
 8019476:	4630      	mov	r0, r6
 8019478:	f000 f9c6 	bl	8019808 <__swsetup_r>
 801947c:	b1c0      	cbz	r0, 80194b0 <_vfiprintf_r+0x78>
 801947e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019480:	07dc      	lsls	r4, r3, #31
 8019482:	d50e      	bpl.n	80194a2 <_vfiprintf_r+0x6a>
 8019484:	f04f 30ff 	mov.w	r0, #4294967295
 8019488:	b01d      	add	sp, #116	; 0x74
 801948a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801948e:	4b7b      	ldr	r3, [pc, #492]	; (801967c <_vfiprintf_r+0x244>)
 8019490:	429d      	cmp	r5, r3
 8019492:	d101      	bne.n	8019498 <_vfiprintf_r+0x60>
 8019494:	68b5      	ldr	r5, [r6, #8]
 8019496:	e7df      	b.n	8019458 <_vfiprintf_r+0x20>
 8019498:	4b79      	ldr	r3, [pc, #484]	; (8019680 <_vfiprintf_r+0x248>)
 801949a:	429d      	cmp	r5, r3
 801949c:	bf08      	it	eq
 801949e:	68f5      	ldreq	r5, [r6, #12]
 80194a0:	e7da      	b.n	8019458 <_vfiprintf_r+0x20>
 80194a2:	89ab      	ldrh	r3, [r5, #12]
 80194a4:	0598      	lsls	r0, r3, #22
 80194a6:	d4ed      	bmi.n	8019484 <_vfiprintf_r+0x4c>
 80194a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80194aa:	f7ff f9fd 	bl	80188a8 <__retarget_lock_release_recursive>
 80194ae:	e7e9      	b.n	8019484 <_vfiprintf_r+0x4c>
 80194b0:	2300      	movs	r3, #0
 80194b2:	9309      	str	r3, [sp, #36]	; 0x24
 80194b4:	2320      	movs	r3, #32
 80194b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80194ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80194be:	2330      	movs	r3, #48	; 0x30
 80194c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019684 <_vfiprintf_r+0x24c>
 80194c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80194c8:	f04f 0901 	mov.w	r9, #1
 80194cc:	4623      	mov	r3, r4
 80194ce:	469a      	mov	sl, r3
 80194d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80194d4:	b10a      	cbz	r2, 80194da <_vfiprintf_r+0xa2>
 80194d6:	2a25      	cmp	r2, #37	; 0x25
 80194d8:	d1f9      	bne.n	80194ce <_vfiprintf_r+0x96>
 80194da:	ebba 0b04 	subs.w	fp, sl, r4
 80194de:	d00b      	beq.n	80194f8 <_vfiprintf_r+0xc0>
 80194e0:	465b      	mov	r3, fp
 80194e2:	4622      	mov	r2, r4
 80194e4:	4629      	mov	r1, r5
 80194e6:	4630      	mov	r0, r6
 80194e8:	f7ff ff93 	bl	8019412 <__sfputs_r>
 80194ec:	3001      	adds	r0, #1
 80194ee:	f000 80aa 	beq.w	8019646 <_vfiprintf_r+0x20e>
 80194f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80194f4:	445a      	add	r2, fp
 80194f6:	9209      	str	r2, [sp, #36]	; 0x24
 80194f8:	f89a 3000 	ldrb.w	r3, [sl]
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	f000 80a2 	beq.w	8019646 <_vfiprintf_r+0x20e>
 8019502:	2300      	movs	r3, #0
 8019504:	f04f 32ff 	mov.w	r2, #4294967295
 8019508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801950c:	f10a 0a01 	add.w	sl, sl, #1
 8019510:	9304      	str	r3, [sp, #16]
 8019512:	9307      	str	r3, [sp, #28]
 8019514:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019518:	931a      	str	r3, [sp, #104]	; 0x68
 801951a:	4654      	mov	r4, sl
 801951c:	2205      	movs	r2, #5
 801951e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019522:	4858      	ldr	r0, [pc, #352]	; (8019684 <_vfiprintf_r+0x24c>)
 8019524:	f7e6 fe64 	bl	80001f0 <memchr>
 8019528:	9a04      	ldr	r2, [sp, #16]
 801952a:	b9d8      	cbnz	r0, 8019564 <_vfiprintf_r+0x12c>
 801952c:	06d1      	lsls	r1, r2, #27
 801952e:	bf44      	itt	mi
 8019530:	2320      	movmi	r3, #32
 8019532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019536:	0713      	lsls	r3, r2, #28
 8019538:	bf44      	itt	mi
 801953a:	232b      	movmi	r3, #43	; 0x2b
 801953c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019540:	f89a 3000 	ldrb.w	r3, [sl]
 8019544:	2b2a      	cmp	r3, #42	; 0x2a
 8019546:	d015      	beq.n	8019574 <_vfiprintf_r+0x13c>
 8019548:	9a07      	ldr	r2, [sp, #28]
 801954a:	4654      	mov	r4, sl
 801954c:	2000      	movs	r0, #0
 801954e:	f04f 0c0a 	mov.w	ip, #10
 8019552:	4621      	mov	r1, r4
 8019554:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019558:	3b30      	subs	r3, #48	; 0x30
 801955a:	2b09      	cmp	r3, #9
 801955c:	d94e      	bls.n	80195fc <_vfiprintf_r+0x1c4>
 801955e:	b1b0      	cbz	r0, 801958e <_vfiprintf_r+0x156>
 8019560:	9207      	str	r2, [sp, #28]
 8019562:	e014      	b.n	801958e <_vfiprintf_r+0x156>
 8019564:	eba0 0308 	sub.w	r3, r0, r8
 8019568:	fa09 f303 	lsl.w	r3, r9, r3
 801956c:	4313      	orrs	r3, r2
 801956e:	9304      	str	r3, [sp, #16]
 8019570:	46a2      	mov	sl, r4
 8019572:	e7d2      	b.n	801951a <_vfiprintf_r+0xe2>
 8019574:	9b03      	ldr	r3, [sp, #12]
 8019576:	1d19      	adds	r1, r3, #4
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	9103      	str	r1, [sp, #12]
 801957c:	2b00      	cmp	r3, #0
 801957e:	bfbb      	ittet	lt
 8019580:	425b      	neglt	r3, r3
 8019582:	f042 0202 	orrlt.w	r2, r2, #2
 8019586:	9307      	strge	r3, [sp, #28]
 8019588:	9307      	strlt	r3, [sp, #28]
 801958a:	bfb8      	it	lt
 801958c:	9204      	strlt	r2, [sp, #16]
 801958e:	7823      	ldrb	r3, [r4, #0]
 8019590:	2b2e      	cmp	r3, #46	; 0x2e
 8019592:	d10c      	bne.n	80195ae <_vfiprintf_r+0x176>
 8019594:	7863      	ldrb	r3, [r4, #1]
 8019596:	2b2a      	cmp	r3, #42	; 0x2a
 8019598:	d135      	bne.n	8019606 <_vfiprintf_r+0x1ce>
 801959a:	9b03      	ldr	r3, [sp, #12]
 801959c:	1d1a      	adds	r2, r3, #4
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	9203      	str	r2, [sp, #12]
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	bfb8      	it	lt
 80195a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80195aa:	3402      	adds	r4, #2
 80195ac:	9305      	str	r3, [sp, #20]
 80195ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019694 <_vfiprintf_r+0x25c>
 80195b2:	7821      	ldrb	r1, [r4, #0]
 80195b4:	2203      	movs	r2, #3
 80195b6:	4650      	mov	r0, sl
 80195b8:	f7e6 fe1a 	bl	80001f0 <memchr>
 80195bc:	b140      	cbz	r0, 80195d0 <_vfiprintf_r+0x198>
 80195be:	2340      	movs	r3, #64	; 0x40
 80195c0:	eba0 000a 	sub.w	r0, r0, sl
 80195c4:	fa03 f000 	lsl.w	r0, r3, r0
 80195c8:	9b04      	ldr	r3, [sp, #16]
 80195ca:	4303      	orrs	r3, r0
 80195cc:	3401      	adds	r4, #1
 80195ce:	9304      	str	r3, [sp, #16]
 80195d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195d4:	482c      	ldr	r0, [pc, #176]	; (8019688 <_vfiprintf_r+0x250>)
 80195d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80195da:	2206      	movs	r2, #6
 80195dc:	f7e6 fe08 	bl	80001f0 <memchr>
 80195e0:	2800      	cmp	r0, #0
 80195e2:	d03f      	beq.n	8019664 <_vfiprintf_r+0x22c>
 80195e4:	4b29      	ldr	r3, [pc, #164]	; (801968c <_vfiprintf_r+0x254>)
 80195e6:	bb1b      	cbnz	r3, 8019630 <_vfiprintf_r+0x1f8>
 80195e8:	9b03      	ldr	r3, [sp, #12]
 80195ea:	3307      	adds	r3, #7
 80195ec:	f023 0307 	bic.w	r3, r3, #7
 80195f0:	3308      	adds	r3, #8
 80195f2:	9303      	str	r3, [sp, #12]
 80195f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195f6:	443b      	add	r3, r7
 80195f8:	9309      	str	r3, [sp, #36]	; 0x24
 80195fa:	e767      	b.n	80194cc <_vfiprintf_r+0x94>
 80195fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8019600:	460c      	mov	r4, r1
 8019602:	2001      	movs	r0, #1
 8019604:	e7a5      	b.n	8019552 <_vfiprintf_r+0x11a>
 8019606:	2300      	movs	r3, #0
 8019608:	3401      	adds	r4, #1
 801960a:	9305      	str	r3, [sp, #20]
 801960c:	4619      	mov	r1, r3
 801960e:	f04f 0c0a 	mov.w	ip, #10
 8019612:	4620      	mov	r0, r4
 8019614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019618:	3a30      	subs	r2, #48	; 0x30
 801961a:	2a09      	cmp	r2, #9
 801961c:	d903      	bls.n	8019626 <_vfiprintf_r+0x1ee>
 801961e:	2b00      	cmp	r3, #0
 8019620:	d0c5      	beq.n	80195ae <_vfiprintf_r+0x176>
 8019622:	9105      	str	r1, [sp, #20]
 8019624:	e7c3      	b.n	80195ae <_vfiprintf_r+0x176>
 8019626:	fb0c 2101 	mla	r1, ip, r1, r2
 801962a:	4604      	mov	r4, r0
 801962c:	2301      	movs	r3, #1
 801962e:	e7f0      	b.n	8019612 <_vfiprintf_r+0x1da>
 8019630:	ab03      	add	r3, sp, #12
 8019632:	9300      	str	r3, [sp, #0]
 8019634:	462a      	mov	r2, r5
 8019636:	4b16      	ldr	r3, [pc, #88]	; (8019690 <_vfiprintf_r+0x258>)
 8019638:	a904      	add	r1, sp, #16
 801963a:	4630      	mov	r0, r6
 801963c:	f7fd fd88 	bl	8017150 <_printf_float>
 8019640:	4607      	mov	r7, r0
 8019642:	1c78      	adds	r0, r7, #1
 8019644:	d1d6      	bne.n	80195f4 <_vfiprintf_r+0x1bc>
 8019646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019648:	07d9      	lsls	r1, r3, #31
 801964a:	d405      	bmi.n	8019658 <_vfiprintf_r+0x220>
 801964c:	89ab      	ldrh	r3, [r5, #12]
 801964e:	059a      	lsls	r2, r3, #22
 8019650:	d402      	bmi.n	8019658 <_vfiprintf_r+0x220>
 8019652:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019654:	f7ff f928 	bl	80188a8 <__retarget_lock_release_recursive>
 8019658:	89ab      	ldrh	r3, [r5, #12]
 801965a:	065b      	lsls	r3, r3, #25
 801965c:	f53f af12 	bmi.w	8019484 <_vfiprintf_r+0x4c>
 8019660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019662:	e711      	b.n	8019488 <_vfiprintf_r+0x50>
 8019664:	ab03      	add	r3, sp, #12
 8019666:	9300      	str	r3, [sp, #0]
 8019668:	462a      	mov	r2, r5
 801966a:	4b09      	ldr	r3, [pc, #36]	; (8019690 <_vfiprintf_r+0x258>)
 801966c:	a904      	add	r1, sp, #16
 801966e:	4630      	mov	r0, r6
 8019670:	f7fe f812 	bl	8017698 <_printf_i>
 8019674:	e7e4      	b.n	8019640 <_vfiprintf_r+0x208>
 8019676:	bf00      	nop
 8019678:	0801ce30 	.word	0x0801ce30
 801967c:	0801ce50 	.word	0x0801ce50
 8019680:	0801ce10 	.word	0x0801ce10
 8019684:	0801cfcc 	.word	0x0801cfcc
 8019688:	0801cfd6 	.word	0x0801cfd6
 801968c:	08017151 	.word	0x08017151
 8019690:	08019413 	.word	0x08019413
 8019694:	0801cfd2 	.word	0x0801cfd2

08019698 <_sbrk_r>:
 8019698:	b538      	push	{r3, r4, r5, lr}
 801969a:	4d06      	ldr	r5, [pc, #24]	; (80196b4 <_sbrk_r+0x1c>)
 801969c:	2300      	movs	r3, #0
 801969e:	4604      	mov	r4, r0
 80196a0:	4608      	mov	r0, r1
 80196a2:	602b      	str	r3, [r5, #0]
 80196a4:	f7e8 f996 	bl	80019d4 <_sbrk>
 80196a8:	1c43      	adds	r3, r0, #1
 80196aa:	d102      	bne.n	80196b2 <_sbrk_r+0x1a>
 80196ac:	682b      	ldr	r3, [r5, #0]
 80196ae:	b103      	cbz	r3, 80196b2 <_sbrk_r+0x1a>
 80196b0:	6023      	str	r3, [r4, #0]
 80196b2:	bd38      	pop	{r3, r4, r5, pc}
 80196b4:	2000c7ac 	.word	0x2000c7ac

080196b8 <__sread>:
 80196b8:	b510      	push	{r4, lr}
 80196ba:	460c      	mov	r4, r1
 80196bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196c0:	f000 fae6 	bl	8019c90 <_read_r>
 80196c4:	2800      	cmp	r0, #0
 80196c6:	bfab      	itete	ge
 80196c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80196ca:	89a3      	ldrhlt	r3, [r4, #12]
 80196cc:	181b      	addge	r3, r3, r0
 80196ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80196d2:	bfac      	ite	ge
 80196d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80196d6:	81a3      	strhlt	r3, [r4, #12]
 80196d8:	bd10      	pop	{r4, pc}

080196da <__swrite>:
 80196da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196de:	461f      	mov	r7, r3
 80196e0:	898b      	ldrh	r3, [r1, #12]
 80196e2:	05db      	lsls	r3, r3, #23
 80196e4:	4605      	mov	r5, r0
 80196e6:	460c      	mov	r4, r1
 80196e8:	4616      	mov	r6, r2
 80196ea:	d505      	bpl.n	80196f8 <__swrite+0x1e>
 80196ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196f0:	2302      	movs	r3, #2
 80196f2:	2200      	movs	r2, #0
 80196f4:	f000 f9f8 	bl	8019ae8 <_lseek_r>
 80196f8:	89a3      	ldrh	r3, [r4, #12]
 80196fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80196fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019702:	81a3      	strh	r3, [r4, #12]
 8019704:	4632      	mov	r2, r6
 8019706:	463b      	mov	r3, r7
 8019708:	4628      	mov	r0, r5
 801970a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801970e:	f000 b869 	b.w	80197e4 <_write_r>

08019712 <__sseek>:
 8019712:	b510      	push	{r4, lr}
 8019714:	460c      	mov	r4, r1
 8019716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801971a:	f000 f9e5 	bl	8019ae8 <_lseek_r>
 801971e:	1c43      	adds	r3, r0, #1
 8019720:	89a3      	ldrh	r3, [r4, #12]
 8019722:	bf15      	itete	ne
 8019724:	6560      	strne	r0, [r4, #84]	; 0x54
 8019726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801972a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801972e:	81a3      	strheq	r3, [r4, #12]
 8019730:	bf18      	it	ne
 8019732:	81a3      	strhne	r3, [r4, #12]
 8019734:	bd10      	pop	{r4, pc}

08019736 <__sclose>:
 8019736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801973a:	f000 b8f1 	b.w	8019920 <_close_r>
	...

08019740 <__swbuf_r>:
 8019740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019742:	460e      	mov	r6, r1
 8019744:	4614      	mov	r4, r2
 8019746:	4605      	mov	r5, r0
 8019748:	b118      	cbz	r0, 8019752 <__swbuf_r+0x12>
 801974a:	6983      	ldr	r3, [r0, #24]
 801974c:	b90b      	cbnz	r3, 8019752 <__swbuf_r+0x12>
 801974e:	f7ff f807 	bl	8018760 <__sinit>
 8019752:	4b21      	ldr	r3, [pc, #132]	; (80197d8 <__swbuf_r+0x98>)
 8019754:	429c      	cmp	r4, r3
 8019756:	d12b      	bne.n	80197b0 <__swbuf_r+0x70>
 8019758:	686c      	ldr	r4, [r5, #4]
 801975a:	69a3      	ldr	r3, [r4, #24]
 801975c:	60a3      	str	r3, [r4, #8]
 801975e:	89a3      	ldrh	r3, [r4, #12]
 8019760:	071a      	lsls	r2, r3, #28
 8019762:	d52f      	bpl.n	80197c4 <__swbuf_r+0x84>
 8019764:	6923      	ldr	r3, [r4, #16]
 8019766:	b36b      	cbz	r3, 80197c4 <__swbuf_r+0x84>
 8019768:	6923      	ldr	r3, [r4, #16]
 801976a:	6820      	ldr	r0, [r4, #0]
 801976c:	1ac0      	subs	r0, r0, r3
 801976e:	6963      	ldr	r3, [r4, #20]
 8019770:	b2f6      	uxtb	r6, r6
 8019772:	4283      	cmp	r3, r0
 8019774:	4637      	mov	r7, r6
 8019776:	dc04      	bgt.n	8019782 <__swbuf_r+0x42>
 8019778:	4621      	mov	r1, r4
 801977a:	4628      	mov	r0, r5
 801977c:	f000 f966 	bl	8019a4c <_fflush_r>
 8019780:	bb30      	cbnz	r0, 80197d0 <__swbuf_r+0x90>
 8019782:	68a3      	ldr	r3, [r4, #8]
 8019784:	3b01      	subs	r3, #1
 8019786:	60a3      	str	r3, [r4, #8]
 8019788:	6823      	ldr	r3, [r4, #0]
 801978a:	1c5a      	adds	r2, r3, #1
 801978c:	6022      	str	r2, [r4, #0]
 801978e:	701e      	strb	r6, [r3, #0]
 8019790:	6963      	ldr	r3, [r4, #20]
 8019792:	3001      	adds	r0, #1
 8019794:	4283      	cmp	r3, r0
 8019796:	d004      	beq.n	80197a2 <__swbuf_r+0x62>
 8019798:	89a3      	ldrh	r3, [r4, #12]
 801979a:	07db      	lsls	r3, r3, #31
 801979c:	d506      	bpl.n	80197ac <__swbuf_r+0x6c>
 801979e:	2e0a      	cmp	r6, #10
 80197a0:	d104      	bne.n	80197ac <__swbuf_r+0x6c>
 80197a2:	4621      	mov	r1, r4
 80197a4:	4628      	mov	r0, r5
 80197a6:	f000 f951 	bl	8019a4c <_fflush_r>
 80197aa:	b988      	cbnz	r0, 80197d0 <__swbuf_r+0x90>
 80197ac:	4638      	mov	r0, r7
 80197ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197b0:	4b0a      	ldr	r3, [pc, #40]	; (80197dc <__swbuf_r+0x9c>)
 80197b2:	429c      	cmp	r4, r3
 80197b4:	d101      	bne.n	80197ba <__swbuf_r+0x7a>
 80197b6:	68ac      	ldr	r4, [r5, #8]
 80197b8:	e7cf      	b.n	801975a <__swbuf_r+0x1a>
 80197ba:	4b09      	ldr	r3, [pc, #36]	; (80197e0 <__swbuf_r+0xa0>)
 80197bc:	429c      	cmp	r4, r3
 80197be:	bf08      	it	eq
 80197c0:	68ec      	ldreq	r4, [r5, #12]
 80197c2:	e7ca      	b.n	801975a <__swbuf_r+0x1a>
 80197c4:	4621      	mov	r1, r4
 80197c6:	4628      	mov	r0, r5
 80197c8:	f000 f81e 	bl	8019808 <__swsetup_r>
 80197cc:	2800      	cmp	r0, #0
 80197ce:	d0cb      	beq.n	8019768 <__swbuf_r+0x28>
 80197d0:	f04f 37ff 	mov.w	r7, #4294967295
 80197d4:	e7ea      	b.n	80197ac <__swbuf_r+0x6c>
 80197d6:	bf00      	nop
 80197d8:	0801ce30 	.word	0x0801ce30
 80197dc:	0801ce50 	.word	0x0801ce50
 80197e0:	0801ce10 	.word	0x0801ce10

080197e4 <_write_r>:
 80197e4:	b538      	push	{r3, r4, r5, lr}
 80197e6:	4d07      	ldr	r5, [pc, #28]	; (8019804 <_write_r+0x20>)
 80197e8:	4604      	mov	r4, r0
 80197ea:	4608      	mov	r0, r1
 80197ec:	4611      	mov	r1, r2
 80197ee:	2200      	movs	r2, #0
 80197f0:	602a      	str	r2, [r5, #0]
 80197f2:	461a      	mov	r2, r3
 80197f4:	f7e8 f89d 	bl	8001932 <_write>
 80197f8:	1c43      	adds	r3, r0, #1
 80197fa:	d102      	bne.n	8019802 <_write_r+0x1e>
 80197fc:	682b      	ldr	r3, [r5, #0]
 80197fe:	b103      	cbz	r3, 8019802 <_write_r+0x1e>
 8019800:	6023      	str	r3, [r4, #0]
 8019802:	bd38      	pop	{r3, r4, r5, pc}
 8019804:	2000c7ac 	.word	0x2000c7ac

08019808 <__swsetup_r>:
 8019808:	4b32      	ldr	r3, [pc, #200]	; (80198d4 <__swsetup_r+0xcc>)
 801980a:	b570      	push	{r4, r5, r6, lr}
 801980c:	681d      	ldr	r5, [r3, #0]
 801980e:	4606      	mov	r6, r0
 8019810:	460c      	mov	r4, r1
 8019812:	b125      	cbz	r5, 801981e <__swsetup_r+0x16>
 8019814:	69ab      	ldr	r3, [r5, #24]
 8019816:	b913      	cbnz	r3, 801981e <__swsetup_r+0x16>
 8019818:	4628      	mov	r0, r5
 801981a:	f7fe ffa1 	bl	8018760 <__sinit>
 801981e:	4b2e      	ldr	r3, [pc, #184]	; (80198d8 <__swsetup_r+0xd0>)
 8019820:	429c      	cmp	r4, r3
 8019822:	d10f      	bne.n	8019844 <__swsetup_r+0x3c>
 8019824:	686c      	ldr	r4, [r5, #4]
 8019826:	89a3      	ldrh	r3, [r4, #12]
 8019828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801982c:	0719      	lsls	r1, r3, #28
 801982e:	d42c      	bmi.n	801988a <__swsetup_r+0x82>
 8019830:	06dd      	lsls	r5, r3, #27
 8019832:	d411      	bmi.n	8019858 <__swsetup_r+0x50>
 8019834:	2309      	movs	r3, #9
 8019836:	6033      	str	r3, [r6, #0]
 8019838:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801983c:	81a3      	strh	r3, [r4, #12]
 801983e:	f04f 30ff 	mov.w	r0, #4294967295
 8019842:	e03e      	b.n	80198c2 <__swsetup_r+0xba>
 8019844:	4b25      	ldr	r3, [pc, #148]	; (80198dc <__swsetup_r+0xd4>)
 8019846:	429c      	cmp	r4, r3
 8019848:	d101      	bne.n	801984e <__swsetup_r+0x46>
 801984a:	68ac      	ldr	r4, [r5, #8]
 801984c:	e7eb      	b.n	8019826 <__swsetup_r+0x1e>
 801984e:	4b24      	ldr	r3, [pc, #144]	; (80198e0 <__swsetup_r+0xd8>)
 8019850:	429c      	cmp	r4, r3
 8019852:	bf08      	it	eq
 8019854:	68ec      	ldreq	r4, [r5, #12]
 8019856:	e7e6      	b.n	8019826 <__swsetup_r+0x1e>
 8019858:	0758      	lsls	r0, r3, #29
 801985a:	d512      	bpl.n	8019882 <__swsetup_r+0x7a>
 801985c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801985e:	b141      	cbz	r1, 8019872 <__swsetup_r+0x6a>
 8019860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019864:	4299      	cmp	r1, r3
 8019866:	d002      	beq.n	801986e <__swsetup_r+0x66>
 8019868:	4630      	mov	r0, r6
 801986a:	f7ff fbb5 	bl	8018fd8 <_free_r>
 801986e:	2300      	movs	r3, #0
 8019870:	6363      	str	r3, [r4, #52]	; 0x34
 8019872:	89a3      	ldrh	r3, [r4, #12]
 8019874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019878:	81a3      	strh	r3, [r4, #12]
 801987a:	2300      	movs	r3, #0
 801987c:	6063      	str	r3, [r4, #4]
 801987e:	6923      	ldr	r3, [r4, #16]
 8019880:	6023      	str	r3, [r4, #0]
 8019882:	89a3      	ldrh	r3, [r4, #12]
 8019884:	f043 0308 	orr.w	r3, r3, #8
 8019888:	81a3      	strh	r3, [r4, #12]
 801988a:	6923      	ldr	r3, [r4, #16]
 801988c:	b94b      	cbnz	r3, 80198a2 <__swsetup_r+0x9a>
 801988e:	89a3      	ldrh	r3, [r4, #12]
 8019890:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019898:	d003      	beq.n	80198a2 <__swsetup_r+0x9a>
 801989a:	4621      	mov	r1, r4
 801989c:	4630      	mov	r0, r6
 801989e:	f000 f959 	bl	8019b54 <__smakebuf_r>
 80198a2:	89a0      	ldrh	r0, [r4, #12]
 80198a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80198a8:	f010 0301 	ands.w	r3, r0, #1
 80198ac:	d00a      	beq.n	80198c4 <__swsetup_r+0xbc>
 80198ae:	2300      	movs	r3, #0
 80198b0:	60a3      	str	r3, [r4, #8]
 80198b2:	6963      	ldr	r3, [r4, #20]
 80198b4:	425b      	negs	r3, r3
 80198b6:	61a3      	str	r3, [r4, #24]
 80198b8:	6923      	ldr	r3, [r4, #16]
 80198ba:	b943      	cbnz	r3, 80198ce <__swsetup_r+0xc6>
 80198bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80198c0:	d1ba      	bne.n	8019838 <__swsetup_r+0x30>
 80198c2:	bd70      	pop	{r4, r5, r6, pc}
 80198c4:	0781      	lsls	r1, r0, #30
 80198c6:	bf58      	it	pl
 80198c8:	6963      	ldrpl	r3, [r4, #20]
 80198ca:	60a3      	str	r3, [r4, #8]
 80198cc:	e7f4      	b.n	80198b8 <__swsetup_r+0xb0>
 80198ce:	2000      	movs	r0, #0
 80198d0:	e7f7      	b.n	80198c2 <__swsetup_r+0xba>
 80198d2:	bf00      	nop
 80198d4:	200013cc 	.word	0x200013cc
 80198d8:	0801ce30 	.word	0x0801ce30
 80198dc:	0801ce50 	.word	0x0801ce50
 80198e0:	0801ce10 	.word	0x0801ce10

080198e4 <__assert_func>:
 80198e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80198e6:	4614      	mov	r4, r2
 80198e8:	461a      	mov	r2, r3
 80198ea:	4b09      	ldr	r3, [pc, #36]	; (8019910 <__assert_func+0x2c>)
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	4605      	mov	r5, r0
 80198f0:	68d8      	ldr	r0, [r3, #12]
 80198f2:	b14c      	cbz	r4, 8019908 <__assert_func+0x24>
 80198f4:	4b07      	ldr	r3, [pc, #28]	; (8019914 <__assert_func+0x30>)
 80198f6:	9100      	str	r1, [sp, #0]
 80198f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80198fc:	4906      	ldr	r1, [pc, #24]	; (8019918 <__assert_func+0x34>)
 80198fe:	462b      	mov	r3, r5
 8019900:	f000 f8e0 	bl	8019ac4 <fiprintf>
 8019904:	f000 f9e3 	bl	8019cce <abort>
 8019908:	4b04      	ldr	r3, [pc, #16]	; (801991c <__assert_func+0x38>)
 801990a:	461c      	mov	r4, r3
 801990c:	e7f3      	b.n	80198f6 <__assert_func+0x12>
 801990e:	bf00      	nop
 8019910:	200013cc 	.word	0x200013cc
 8019914:	0801cfdd 	.word	0x0801cfdd
 8019918:	0801cfea 	.word	0x0801cfea
 801991c:	0801d018 	.word	0x0801d018

08019920 <_close_r>:
 8019920:	b538      	push	{r3, r4, r5, lr}
 8019922:	4d06      	ldr	r5, [pc, #24]	; (801993c <_close_r+0x1c>)
 8019924:	2300      	movs	r3, #0
 8019926:	4604      	mov	r4, r0
 8019928:	4608      	mov	r0, r1
 801992a:	602b      	str	r3, [r5, #0]
 801992c:	f7e8 f81d 	bl	800196a <_close>
 8019930:	1c43      	adds	r3, r0, #1
 8019932:	d102      	bne.n	801993a <_close_r+0x1a>
 8019934:	682b      	ldr	r3, [r5, #0]
 8019936:	b103      	cbz	r3, 801993a <_close_r+0x1a>
 8019938:	6023      	str	r3, [r4, #0]
 801993a:	bd38      	pop	{r3, r4, r5, pc}
 801993c:	2000c7ac 	.word	0x2000c7ac

08019940 <__sflush_r>:
 8019940:	898a      	ldrh	r2, [r1, #12]
 8019942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019946:	4605      	mov	r5, r0
 8019948:	0710      	lsls	r0, r2, #28
 801994a:	460c      	mov	r4, r1
 801994c:	d458      	bmi.n	8019a00 <__sflush_r+0xc0>
 801994e:	684b      	ldr	r3, [r1, #4]
 8019950:	2b00      	cmp	r3, #0
 8019952:	dc05      	bgt.n	8019960 <__sflush_r+0x20>
 8019954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019956:	2b00      	cmp	r3, #0
 8019958:	dc02      	bgt.n	8019960 <__sflush_r+0x20>
 801995a:	2000      	movs	r0, #0
 801995c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019962:	2e00      	cmp	r6, #0
 8019964:	d0f9      	beq.n	801995a <__sflush_r+0x1a>
 8019966:	2300      	movs	r3, #0
 8019968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801996c:	682f      	ldr	r7, [r5, #0]
 801996e:	602b      	str	r3, [r5, #0]
 8019970:	d032      	beq.n	80199d8 <__sflush_r+0x98>
 8019972:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019974:	89a3      	ldrh	r3, [r4, #12]
 8019976:	075a      	lsls	r2, r3, #29
 8019978:	d505      	bpl.n	8019986 <__sflush_r+0x46>
 801997a:	6863      	ldr	r3, [r4, #4]
 801997c:	1ac0      	subs	r0, r0, r3
 801997e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019980:	b10b      	cbz	r3, 8019986 <__sflush_r+0x46>
 8019982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019984:	1ac0      	subs	r0, r0, r3
 8019986:	2300      	movs	r3, #0
 8019988:	4602      	mov	r2, r0
 801998a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801998c:	6a21      	ldr	r1, [r4, #32]
 801998e:	4628      	mov	r0, r5
 8019990:	47b0      	blx	r6
 8019992:	1c43      	adds	r3, r0, #1
 8019994:	89a3      	ldrh	r3, [r4, #12]
 8019996:	d106      	bne.n	80199a6 <__sflush_r+0x66>
 8019998:	6829      	ldr	r1, [r5, #0]
 801999a:	291d      	cmp	r1, #29
 801999c:	d82c      	bhi.n	80199f8 <__sflush_r+0xb8>
 801999e:	4a2a      	ldr	r2, [pc, #168]	; (8019a48 <__sflush_r+0x108>)
 80199a0:	40ca      	lsrs	r2, r1
 80199a2:	07d6      	lsls	r6, r2, #31
 80199a4:	d528      	bpl.n	80199f8 <__sflush_r+0xb8>
 80199a6:	2200      	movs	r2, #0
 80199a8:	6062      	str	r2, [r4, #4]
 80199aa:	04d9      	lsls	r1, r3, #19
 80199ac:	6922      	ldr	r2, [r4, #16]
 80199ae:	6022      	str	r2, [r4, #0]
 80199b0:	d504      	bpl.n	80199bc <__sflush_r+0x7c>
 80199b2:	1c42      	adds	r2, r0, #1
 80199b4:	d101      	bne.n	80199ba <__sflush_r+0x7a>
 80199b6:	682b      	ldr	r3, [r5, #0]
 80199b8:	b903      	cbnz	r3, 80199bc <__sflush_r+0x7c>
 80199ba:	6560      	str	r0, [r4, #84]	; 0x54
 80199bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80199be:	602f      	str	r7, [r5, #0]
 80199c0:	2900      	cmp	r1, #0
 80199c2:	d0ca      	beq.n	801995a <__sflush_r+0x1a>
 80199c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80199c8:	4299      	cmp	r1, r3
 80199ca:	d002      	beq.n	80199d2 <__sflush_r+0x92>
 80199cc:	4628      	mov	r0, r5
 80199ce:	f7ff fb03 	bl	8018fd8 <_free_r>
 80199d2:	2000      	movs	r0, #0
 80199d4:	6360      	str	r0, [r4, #52]	; 0x34
 80199d6:	e7c1      	b.n	801995c <__sflush_r+0x1c>
 80199d8:	6a21      	ldr	r1, [r4, #32]
 80199da:	2301      	movs	r3, #1
 80199dc:	4628      	mov	r0, r5
 80199de:	47b0      	blx	r6
 80199e0:	1c41      	adds	r1, r0, #1
 80199e2:	d1c7      	bne.n	8019974 <__sflush_r+0x34>
 80199e4:	682b      	ldr	r3, [r5, #0]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d0c4      	beq.n	8019974 <__sflush_r+0x34>
 80199ea:	2b1d      	cmp	r3, #29
 80199ec:	d001      	beq.n	80199f2 <__sflush_r+0xb2>
 80199ee:	2b16      	cmp	r3, #22
 80199f0:	d101      	bne.n	80199f6 <__sflush_r+0xb6>
 80199f2:	602f      	str	r7, [r5, #0]
 80199f4:	e7b1      	b.n	801995a <__sflush_r+0x1a>
 80199f6:	89a3      	ldrh	r3, [r4, #12]
 80199f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80199fc:	81a3      	strh	r3, [r4, #12]
 80199fe:	e7ad      	b.n	801995c <__sflush_r+0x1c>
 8019a00:	690f      	ldr	r7, [r1, #16]
 8019a02:	2f00      	cmp	r7, #0
 8019a04:	d0a9      	beq.n	801995a <__sflush_r+0x1a>
 8019a06:	0793      	lsls	r3, r2, #30
 8019a08:	680e      	ldr	r6, [r1, #0]
 8019a0a:	bf08      	it	eq
 8019a0c:	694b      	ldreq	r3, [r1, #20]
 8019a0e:	600f      	str	r7, [r1, #0]
 8019a10:	bf18      	it	ne
 8019a12:	2300      	movne	r3, #0
 8019a14:	eba6 0807 	sub.w	r8, r6, r7
 8019a18:	608b      	str	r3, [r1, #8]
 8019a1a:	f1b8 0f00 	cmp.w	r8, #0
 8019a1e:	dd9c      	ble.n	801995a <__sflush_r+0x1a>
 8019a20:	6a21      	ldr	r1, [r4, #32]
 8019a22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019a24:	4643      	mov	r3, r8
 8019a26:	463a      	mov	r2, r7
 8019a28:	4628      	mov	r0, r5
 8019a2a:	47b0      	blx	r6
 8019a2c:	2800      	cmp	r0, #0
 8019a2e:	dc06      	bgt.n	8019a3e <__sflush_r+0xfe>
 8019a30:	89a3      	ldrh	r3, [r4, #12]
 8019a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a36:	81a3      	strh	r3, [r4, #12]
 8019a38:	f04f 30ff 	mov.w	r0, #4294967295
 8019a3c:	e78e      	b.n	801995c <__sflush_r+0x1c>
 8019a3e:	4407      	add	r7, r0
 8019a40:	eba8 0800 	sub.w	r8, r8, r0
 8019a44:	e7e9      	b.n	8019a1a <__sflush_r+0xda>
 8019a46:	bf00      	nop
 8019a48:	20400001 	.word	0x20400001

08019a4c <_fflush_r>:
 8019a4c:	b538      	push	{r3, r4, r5, lr}
 8019a4e:	690b      	ldr	r3, [r1, #16]
 8019a50:	4605      	mov	r5, r0
 8019a52:	460c      	mov	r4, r1
 8019a54:	b913      	cbnz	r3, 8019a5c <_fflush_r+0x10>
 8019a56:	2500      	movs	r5, #0
 8019a58:	4628      	mov	r0, r5
 8019a5a:	bd38      	pop	{r3, r4, r5, pc}
 8019a5c:	b118      	cbz	r0, 8019a66 <_fflush_r+0x1a>
 8019a5e:	6983      	ldr	r3, [r0, #24]
 8019a60:	b90b      	cbnz	r3, 8019a66 <_fflush_r+0x1a>
 8019a62:	f7fe fe7d 	bl	8018760 <__sinit>
 8019a66:	4b14      	ldr	r3, [pc, #80]	; (8019ab8 <_fflush_r+0x6c>)
 8019a68:	429c      	cmp	r4, r3
 8019a6a:	d11b      	bne.n	8019aa4 <_fflush_r+0x58>
 8019a6c:	686c      	ldr	r4, [r5, #4]
 8019a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d0ef      	beq.n	8019a56 <_fflush_r+0xa>
 8019a76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019a78:	07d0      	lsls	r0, r2, #31
 8019a7a:	d404      	bmi.n	8019a86 <_fflush_r+0x3a>
 8019a7c:	0599      	lsls	r1, r3, #22
 8019a7e:	d402      	bmi.n	8019a86 <_fflush_r+0x3a>
 8019a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019a82:	f7fe ff10 	bl	80188a6 <__retarget_lock_acquire_recursive>
 8019a86:	4628      	mov	r0, r5
 8019a88:	4621      	mov	r1, r4
 8019a8a:	f7ff ff59 	bl	8019940 <__sflush_r>
 8019a8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019a90:	07da      	lsls	r2, r3, #31
 8019a92:	4605      	mov	r5, r0
 8019a94:	d4e0      	bmi.n	8019a58 <_fflush_r+0xc>
 8019a96:	89a3      	ldrh	r3, [r4, #12]
 8019a98:	059b      	lsls	r3, r3, #22
 8019a9a:	d4dd      	bmi.n	8019a58 <_fflush_r+0xc>
 8019a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019a9e:	f7fe ff03 	bl	80188a8 <__retarget_lock_release_recursive>
 8019aa2:	e7d9      	b.n	8019a58 <_fflush_r+0xc>
 8019aa4:	4b05      	ldr	r3, [pc, #20]	; (8019abc <_fflush_r+0x70>)
 8019aa6:	429c      	cmp	r4, r3
 8019aa8:	d101      	bne.n	8019aae <_fflush_r+0x62>
 8019aaa:	68ac      	ldr	r4, [r5, #8]
 8019aac:	e7df      	b.n	8019a6e <_fflush_r+0x22>
 8019aae:	4b04      	ldr	r3, [pc, #16]	; (8019ac0 <_fflush_r+0x74>)
 8019ab0:	429c      	cmp	r4, r3
 8019ab2:	bf08      	it	eq
 8019ab4:	68ec      	ldreq	r4, [r5, #12]
 8019ab6:	e7da      	b.n	8019a6e <_fflush_r+0x22>
 8019ab8:	0801ce30 	.word	0x0801ce30
 8019abc:	0801ce50 	.word	0x0801ce50
 8019ac0:	0801ce10 	.word	0x0801ce10

08019ac4 <fiprintf>:
 8019ac4:	b40e      	push	{r1, r2, r3}
 8019ac6:	b503      	push	{r0, r1, lr}
 8019ac8:	4601      	mov	r1, r0
 8019aca:	ab03      	add	r3, sp, #12
 8019acc:	4805      	ldr	r0, [pc, #20]	; (8019ae4 <fiprintf+0x20>)
 8019ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ad2:	6800      	ldr	r0, [r0, #0]
 8019ad4:	9301      	str	r3, [sp, #4]
 8019ad6:	f7ff fcaf 	bl	8019438 <_vfiprintf_r>
 8019ada:	b002      	add	sp, #8
 8019adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8019ae0:	b003      	add	sp, #12
 8019ae2:	4770      	bx	lr
 8019ae4:	200013cc 	.word	0x200013cc

08019ae8 <_lseek_r>:
 8019ae8:	b538      	push	{r3, r4, r5, lr}
 8019aea:	4d07      	ldr	r5, [pc, #28]	; (8019b08 <_lseek_r+0x20>)
 8019aec:	4604      	mov	r4, r0
 8019aee:	4608      	mov	r0, r1
 8019af0:	4611      	mov	r1, r2
 8019af2:	2200      	movs	r2, #0
 8019af4:	602a      	str	r2, [r5, #0]
 8019af6:	461a      	mov	r2, r3
 8019af8:	f7e7 ff5e 	bl	80019b8 <_lseek>
 8019afc:	1c43      	adds	r3, r0, #1
 8019afe:	d102      	bne.n	8019b06 <_lseek_r+0x1e>
 8019b00:	682b      	ldr	r3, [r5, #0]
 8019b02:	b103      	cbz	r3, 8019b06 <_lseek_r+0x1e>
 8019b04:	6023      	str	r3, [r4, #0]
 8019b06:	bd38      	pop	{r3, r4, r5, pc}
 8019b08:	2000c7ac 	.word	0x2000c7ac

08019b0c <__swhatbuf_r>:
 8019b0c:	b570      	push	{r4, r5, r6, lr}
 8019b0e:	460e      	mov	r6, r1
 8019b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b14:	2900      	cmp	r1, #0
 8019b16:	b096      	sub	sp, #88	; 0x58
 8019b18:	4614      	mov	r4, r2
 8019b1a:	461d      	mov	r5, r3
 8019b1c:	da07      	bge.n	8019b2e <__swhatbuf_r+0x22>
 8019b1e:	2300      	movs	r3, #0
 8019b20:	602b      	str	r3, [r5, #0]
 8019b22:	89b3      	ldrh	r3, [r6, #12]
 8019b24:	061a      	lsls	r2, r3, #24
 8019b26:	d410      	bmi.n	8019b4a <__swhatbuf_r+0x3e>
 8019b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019b2c:	e00e      	b.n	8019b4c <__swhatbuf_r+0x40>
 8019b2e:	466a      	mov	r2, sp
 8019b30:	f000 f8d4 	bl	8019cdc <_fstat_r>
 8019b34:	2800      	cmp	r0, #0
 8019b36:	dbf2      	blt.n	8019b1e <__swhatbuf_r+0x12>
 8019b38:	9a01      	ldr	r2, [sp, #4]
 8019b3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019b3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019b42:	425a      	negs	r2, r3
 8019b44:	415a      	adcs	r2, r3
 8019b46:	602a      	str	r2, [r5, #0]
 8019b48:	e7ee      	b.n	8019b28 <__swhatbuf_r+0x1c>
 8019b4a:	2340      	movs	r3, #64	; 0x40
 8019b4c:	2000      	movs	r0, #0
 8019b4e:	6023      	str	r3, [r4, #0]
 8019b50:	b016      	add	sp, #88	; 0x58
 8019b52:	bd70      	pop	{r4, r5, r6, pc}

08019b54 <__smakebuf_r>:
 8019b54:	898b      	ldrh	r3, [r1, #12]
 8019b56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019b58:	079d      	lsls	r5, r3, #30
 8019b5a:	4606      	mov	r6, r0
 8019b5c:	460c      	mov	r4, r1
 8019b5e:	d507      	bpl.n	8019b70 <__smakebuf_r+0x1c>
 8019b60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019b64:	6023      	str	r3, [r4, #0]
 8019b66:	6123      	str	r3, [r4, #16]
 8019b68:	2301      	movs	r3, #1
 8019b6a:	6163      	str	r3, [r4, #20]
 8019b6c:	b002      	add	sp, #8
 8019b6e:	bd70      	pop	{r4, r5, r6, pc}
 8019b70:	ab01      	add	r3, sp, #4
 8019b72:	466a      	mov	r2, sp
 8019b74:	f7ff ffca 	bl	8019b0c <__swhatbuf_r>
 8019b78:	9900      	ldr	r1, [sp, #0]
 8019b7a:	4605      	mov	r5, r0
 8019b7c:	4630      	mov	r0, r6
 8019b7e:	f7ff fa7b 	bl	8019078 <_malloc_r>
 8019b82:	b948      	cbnz	r0, 8019b98 <__smakebuf_r+0x44>
 8019b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b88:	059a      	lsls	r2, r3, #22
 8019b8a:	d4ef      	bmi.n	8019b6c <__smakebuf_r+0x18>
 8019b8c:	f023 0303 	bic.w	r3, r3, #3
 8019b90:	f043 0302 	orr.w	r3, r3, #2
 8019b94:	81a3      	strh	r3, [r4, #12]
 8019b96:	e7e3      	b.n	8019b60 <__smakebuf_r+0xc>
 8019b98:	4b0d      	ldr	r3, [pc, #52]	; (8019bd0 <__smakebuf_r+0x7c>)
 8019b9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8019b9c:	89a3      	ldrh	r3, [r4, #12]
 8019b9e:	6020      	str	r0, [r4, #0]
 8019ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ba4:	81a3      	strh	r3, [r4, #12]
 8019ba6:	9b00      	ldr	r3, [sp, #0]
 8019ba8:	6163      	str	r3, [r4, #20]
 8019baa:	9b01      	ldr	r3, [sp, #4]
 8019bac:	6120      	str	r0, [r4, #16]
 8019bae:	b15b      	cbz	r3, 8019bc8 <__smakebuf_r+0x74>
 8019bb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019bb4:	4630      	mov	r0, r6
 8019bb6:	f000 f8a3 	bl	8019d00 <_isatty_r>
 8019bba:	b128      	cbz	r0, 8019bc8 <__smakebuf_r+0x74>
 8019bbc:	89a3      	ldrh	r3, [r4, #12]
 8019bbe:	f023 0303 	bic.w	r3, r3, #3
 8019bc2:	f043 0301 	orr.w	r3, r3, #1
 8019bc6:	81a3      	strh	r3, [r4, #12]
 8019bc8:	89a0      	ldrh	r0, [r4, #12]
 8019bca:	4305      	orrs	r5, r0
 8019bcc:	81a5      	strh	r5, [r4, #12]
 8019bce:	e7cd      	b.n	8019b6c <__smakebuf_r+0x18>
 8019bd0:	080186f9 	.word	0x080186f9

08019bd4 <__ascii_mbtowc>:
 8019bd4:	b082      	sub	sp, #8
 8019bd6:	b901      	cbnz	r1, 8019bda <__ascii_mbtowc+0x6>
 8019bd8:	a901      	add	r1, sp, #4
 8019bda:	b142      	cbz	r2, 8019bee <__ascii_mbtowc+0x1a>
 8019bdc:	b14b      	cbz	r3, 8019bf2 <__ascii_mbtowc+0x1e>
 8019bde:	7813      	ldrb	r3, [r2, #0]
 8019be0:	600b      	str	r3, [r1, #0]
 8019be2:	7812      	ldrb	r2, [r2, #0]
 8019be4:	1e10      	subs	r0, r2, #0
 8019be6:	bf18      	it	ne
 8019be8:	2001      	movne	r0, #1
 8019bea:	b002      	add	sp, #8
 8019bec:	4770      	bx	lr
 8019bee:	4610      	mov	r0, r2
 8019bf0:	e7fb      	b.n	8019bea <__ascii_mbtowc+0x16>
 8019bf2:	f06f 0001 	mvn.w	r0, #1
 8019bf6:	e7f8      	b.n	8019bea <__ascii_mbtowc+0x16>

08019bf8 <memmove>:
 8019bf8:	4288      	cmp	r0, r1
 8019bfa:	b510      	push	{r4, lr}
 8019bfc:	eb01 0402 	add.w	r4, r1, r2
 8019c00:	d902      	bls.n	8019c08 <memmove+0x10>
 8019c02:	4284      	cmp	r4, r0
 8019c04:	4623      	mov	r3, r4
 8019c06:	d807      	bhi.n	8019c18 <memmove+0x20>
 8019c08:	1e43      	subs	r3, r0, #1
 8019c0a:	42a1      	cmp	r1, r4
 8019c0c:	d008      	beq.n	8019c20 <memmove+0x28>
 8019c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019c12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019c16:	e7f8      	b.n	8019c0a <memmove+0x12>
 8019c18:	4402      	add	r2, r0
 8019c1a:	4601      	mov	r1, r0
 8019c1c:	428a      	cmp	r2, r1
 8019c1e:	d100      	bne.n	8019c22 <memmove+0x2a>
 8019c20:	bd10      	pop	{r4, pc}
 8019c22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019c26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019c2a:	e7f7      	b.n	8019c1c <memmove+0x24>

08019c2c <__malloc_lock>:
 8019c2c:	4801      	ldr	r0, [pc, #4]	; (8019c34 <__malloc_lock+0x8>)
 8019c2e:	f7fe be3a 	b.w	80188a6 <__retarget_lock_acquire_recursive>
 8019c32:	bf00      	nop
 8019c34:	2000c7a4 	.word	0x2000c7a4

08019c38 <__malloc_unlock>:
 8019c38:	4801      	ldr	r0, [pc, #4]	; (8019c40 <__malloc_unlock+0x8>)
 8019c3a:	f7fe be35 	b.w	80188a8 <__retarget_lock_release_recursive>
 8019c3e:	bf00      	nop
 8019c40:	2000c7a4 	.word	0x2000c7a4

08019c44 <_realloc_r>:
 8019c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c46:	4607      	mov	r7, r0
 8019c48:	4614      	mov	r4, r2
 8019c4a:	460e      	mov	r6, r1
 8019c4c:	b921      	cbnz	r1, 8019c58 <_realloc_r+0x14>
 8019c4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019c52:	4611      	mov	r1, r2
 8019c54:	f7ff ba10 	b.w	8019078 <_malloc_r>
 8019c58:	b922      	cbnz	r2, 8019c64 <_realloc_r+0x20>
 8019c5a:	f7ff f9bd 	bl	8018fd8 <_free_r>
 8019c5e:	4625      	mov	r5, r4
 8019c60:	4628      	mov	r0, r5
 8019c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c64:	f000 f85c 	bl	8019d20 <_malloc_usable_size_r>
 8019c68:	42a0      	cmp	r0, r4
 8019c6a:	d20f      	bcs.n	8019c8c <_realloc_r+0x48>
 8019c6c:	4621      	mov	r1, r4
 8019c6e:	4638      	mov	r0, r7
 8019c70:	f7ff fa02 	bl	8019078 <_malloc_r>
 8019c74:	4605      	mov	r5, r0
 8019c76:	2800      	cmp	r0, #0
 8019c78:	d0f2      	beq.n	8019c60 <_realloc_r+0x1c>
 8019c7a:	4631      	mov	r1, r6
 8019c7c:	4622      	mov	r2, r4
 8019c7e:	f7fd f9b1 	bl	8016fe4 <memcpy>
 8019c82:	4631      	mov	r1, r6
 8019c84:	4638      	mov	r0, r7
 8019c86:	f7ff f9a7 	bl	8018fd8 <_free_r>
 8019c8a:	e7e9      	b.n	8019c60 <_realloc_r+0x1c>
 8019c8c:	4635      	mov	r5, r6
 8019c8e:	e7e7      	b.n	8019c60 <_realloc_r+0x1c>

08019c90 <_read_r>:
 8019c90:	b538      	push	{r3, r4, r5, lr}
 8019c92:	4d07      	ldr	r5, [pc, #28]	; (8019cb0 <_read_r+0x20>)
 8019c94:	4604      	mov	r4, r0
 8019c96:	4608      	mov	r0, r1
 8019c98:	4611      	mov	r1, r2
 8019c9a:	2200      	movs	r2, #0
 8019c9c:	602a      	str	r2, [r5, #0]
 8019c9e:	461a      	mov	r2, r3
 8019ca0:	f7e7 fe2a 	bl	80018f8 <_read>
 8019ca4:	1c43      	adds	r3, r0, #1
 8019ca6:	d102      	bne.n	8019cae <_read_r+0x1e>
 8019ca8:	682b      	ldr	r3, [r5, #0]
 8019caa:	b103      	cbz	r3, 8019cae <_read_r+0x1e>
 8019cac:	6023      	str	r3, [r4, #0]
 8019cae:	bd38      	pop	{r3, r4, r5, pc}
 8019cb0:	2000c7ac 	.word	0x2000c7ac

08019cb4 <__ascii_wctomb>:
 8019cb4:	b149      	cbz	r1, 8019cca <__ascii_wctomb+0x16>
 8019cb6:	2aff      	cmp	r2, #255	; 0xff
 8019cb8:	bf85      	ittet	hi
 8019cba:	238a      	movhi	r3, #138	; 0x8a
 8019cbc:	6003      	strhi	r3, [r0, #0]
 8019cbe:	700a      	strbls	r2, [r1, #0]
 8019cc0:	f04f 30ff 	movhi.w	r0, #4294967295
 8019cc4:	bf98      	it	ls
 8019cc6:	2001      	movls	r0, #1
 8019cc8:	4770      	bx	lr
 8019cca:	4608      	mov	r0, r1
 8019ccc:	4770      	bx	lr

08019cce <abort>:
 8019cce:	b508      	push	{r3, lr}
 8019cd0:	2006      	movs	r0, #6
 8019cd2:	f000 f855 	bl	8019d80 <raise>
 8019cd6:	2001      	movs	r0, #1
 8019cd8:	f7e7 fe04 	bl	80018e4 <_exit>

08019cdc <_fstat_r>:
 8019cdc:	b538      	push	{r3, r4, r5, lr}
 8019cde:	4d07      	ldr	r5, [pc, #28]	; (8019cfc <_fstat_r+0x20>)
 8019ce0:	2300      	movs	r3, #0
 8019ce2:	4604      	mov	r4, r0
 8019ce4:	4608      	mov	r0, r1
 8019ce6:	4611      	mov	r1, r2
 8019ce8:	602b      	str	r3, [r5, #0]
 8019cea:	f7e7 fe4a 	bl	8001982 <_fstat>
 8019cee:	1c43      	adds	r3, r0, #1
 8019cf0:	d102      	bne.n	8019cf8 <_fstat_r+0x1c>
 8019cf2:	682b      	ldr	r3, [r5, #0]
 8019cf4:	b103      	cbz	r3, 8019cf8 <_fstat_r+0x1c>
 8019cf6:	6023      	str	r3, [r4, #0]
 8019cf8:	bd38      	pop	{r3, r4, r5, pc}
 8019cfa:	bf00      	nop
 8019cfc:	2000c7ac 	.word	0x2000c7ac

08019d00 <_isatty_r>:
 8019d00:	b538      	push	{r3, r4, r5, lr}
 8019d02:	4d06      	ldr	r5, [pc, #24]	; (8019d1c <_isatty_r+0x1c>)
 8019d04:	2300      	movs	r3, #0
 8019d06:	4604      	mov	r4, r0
 8019d08:	4608      	mov	r0, r1
 8019d0a:	602b      	str	r3, [r5, #0]
 8019d0c:	f7e7 fe49 	bl	80019a2 <_isatty>
 8019d10:	1c43      	adds	r3, r0, #1
 8019d12:	d102      	bne.n	8019d1a <_isatty_r+0x1a>
 8019d14:	682b      	ldr	r3, [r5, #0]
 8019d16:	b103      	cbz	r3, 8019d1a <_isatty_r+0x1a>
 8019d18:	6023      	str	r3, [r4, #0]
 8019d1a:	bd38      	pop	{r3, r4, r5, pc}
 8019d1c:	2000c7ac 	.word	0x2000c7ac

08019d20 <_malloc_usable_size_r>:
 8019d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d24:	1f18      	subs	r0, r3, #4
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	bfbc      	itt	lt
 8019d2a:	580b      	ldrlt	r3, [r1, r0]
 8019d2c:	18c0      	addlt	r0, r0, r3
 8019d2e:	4770      	bx	lr

08019d30 <_raise_r>:
 8019d30:	291f      	cmp	r1, #31
 8019d32:	b538      	push	{r3, r4, r5, lr}
 8019d34:	4604      	mov	r4, r0
 8019d36:	460d      	mov	r5, r1
 8019d38:	d904      	bls.n	8019d44 <_raise_r+0x14>
 8019d3a:	2316      	movs	r3, #22
 8019d3c:	6003      	str	r3, [r0, #0]
 8019d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8019d42:	bd38      	pop	{r3, r4, r5, pc}
 8019d44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019d46:	b112      	cbz	r2, 8019d4e <_raise_r+0x1e>
 8019d48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019d4c:	b94b      	cbnz	r3, 8019d62 <_raise_r+0x32>
 8019d4e:	4620      	mov	r0, r4
 8019d50:	f000 f830 	bl	8019db4 <_getpid_r>
 8019d54:	462a      	mov	r2, r5
 8019d56:	4601      	mov	r1, r0
 8019d58:	4620      	mov	r0, r4
 8019d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019d5e:	f000 b817 	b.w	8019d90 <_kill_r>
 8019d62:	2b01      	cmp	r3, #1
 8019d64:	d00a      	beq.n	8019d7c <_raise_r+0x4c>
 8019d66:	1c59      	adds	r1, r3, #1
 8019d68:	d103      	bne.n	8019d72 <_raise_r+0x42>
 8019d6a:	2316      	movs	r3, #22
 8019d6c:	6003      	str	r3, [r0, #0]
 8019d6e:	2001      	movs	r0, #1
 8019d70:	e7e7      	b.n	8019d42 <_raise_r+0x12>
 8019d72:	2400      	movs	r4, #0
 8019d74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019d78:	4628      	mov	r0, r5
 8019d7a:	4798      	blx	r3
 8019d7c:	2000      	movs	r0, #0
 8019d7e:	e7e0      	b.n	8019d42 <_raise_r+0x12>

08019d80 <raise>:
 8019d80:	4b02      	ldr	r3, [pc, #8]	; (8019d8c <raise+0xc>)
 8019d82:	4601      	mov	r1, r0
 8019d84:	6818      	ldr	r0, [r3, #0]
 8019d86:	f7ff bfd3 	b.w	8019d30 <_raise_r>
 8019d8a:	bf00      	nop
 8019d8c:	200013cc 	.word	0x200013cc

08019d90 <_kill_r>:
 8019d90:	b538      	push	{r3, r4, r5, lr}
 8019d92:	4d07      	ldr	r5, [pc, #28]	; (8019db0 <_kill_r+0x20>)
 8019d94:	2300      	movs	r3, #0
 8019d96:	4604      	mov	r4, r0
 8019d98:	4608      	mov	r0, r1
 8019d9a:	4611      	mov	r1, r2
 8019d9c:	602b      	str	r3, [r5, #0]
 8019d9e:	f7e7 fd91 	bl	80018c4 <_kill>
 8019da2:	1c43      	adds	r3, r0, #1
 8019da4:	d102      	bne.n	8019dac <_kill_r+0x1c>
 8019da6:	682b      	ldr	r3, [r5, #0]
 8019da8:	b103      	cbz	r3, 8019dac <_kill_r+0x1c>
 8019daa:	6023      	str	r3, [r4, #0]
 8019dac:	bd38      	pop	{r3, r4, r5, pc}
 8019dae:	bf00      	nop
 8019db0:	2000c7ac 	.word	0x2000c7ac

08019db4 <_getpid_r>:
 8019db4:	f7e7 bd7e 	b.w	80018b4 <_getpid>

08019db8 <trunc>:
 8019db8:	ec51 0b10 	vmov	r0, r1, d0
 8019dbc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019dc0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8019dc4:	2b13      	cmp	r3, #19
 8019dc6:	b5d0      	push	{r4, r6, r7, lr}
 8019dc8:	460c      	mov	r4, r1
 8019dca:	dc10      	bgt.n	8019dee <trunc+0x36>
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	bfa5      	ittet	ge
 8019dd0:	4a11      	ldrge	r2, [pc, #68]	; (8019e18 <trunc+0x60>)
 8019dd2:	fa42 f303 	asrge.w	r3, r2, r3
 8019dd6:	2100      	movlt	r1, #0
 8019dd8:	2100      	movge	r1, #0
 8019dda:	bfb9      	ittee	lt
 8019ddc:	2000      	movlt	r0, #0
 8019dde:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8019de2:	2000      	movge	r0, #0
 8019de4:	ea24 0103 	bicge.w	r1, r4, r3
 8019de8:	ec41 0b10 	vmov	d0, r0, r1
 8019dec:	bdd0      	pop	{r4, r6, r7, pc}
 8019dee:	2b33      	cmp	r3, #51	; 0x33
 8019df0:	dd08      	ble.n	8019e04 <trunc+0x4c>
 8019df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019df6:	d1f7      	bne.n	8019de8 <trunc+0x30>
 8019df8:	ee10 2a10 	vmov	r2, s0
 8019dfc:	460b      	mov	r3, r1
 8019dfe:	f7e6 fa4d 	bl	800029c <__adddf3>
 8019e02:	e7f1      	b.n	8019de8 <trunc+0x30>
 8019e04:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8019e08:	f04f 33ff 	mov.w	r3, #4294967295
 8019e0c:	fa23 f202 	lsr.w	r2, r3, r2
 8019e10:	ea20 0602 	bic.w	r6, r0, r2
 8019e14:	4630      	mov	r0, r6
 8019e16:	e7e7      	b.n	8019de8 <trunc+0x30>
 8019e18:	000fffff 	.word	0x000fffff

08019e1c <cosf>:
 8019e1c:	ee10 3a10 	vmov	r3, s0
 8019e20:	b507      	push	{r0, r1, r2, lr}
 8019e22:	4a1c      	ldr	r2, [pc, #112]	; (8019e94 <cosf+0x78>)
 8019e24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019e28:	4293      	cmp	r3, r2
 8019e2a:	dc04      	bgt.n	8019e36 <cosf+0x1a>
 8019e2c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8019e98 <cosf+0x7c>
 8019e30:	f001 fc9a 	bl	801b768 <__kernel_cosf>
 8019e34:	e004      	b.n	8019e40 <cosf+0x24>
 8019e36:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019e3a:	db04      	blt.n	8019e46 <cosf+0x2a>
 8019e3c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019e40:	b003      	add	sp, #12
 8019e42:	f85d fb04 	ldr.w	pc, [sp], #4
 8019e46:	4668      	mov	r0, sp
 8019e48:	f001 fb4e 	bl	801b4e8 <__ieee754_rem_pio2f>
 8019e4c:	f000 0003 	and.w	r0, r0, #3
 8019e50:	2801      	cmp	r0, #1
 8019e52:	d007      	beq.n	8019e64 <cosf+0x48>
 8019e54:	2802      	cmp	r0, #2
 8019e56:	d00e      	beq.n	8019e76 <cosf+0x5a>
 8019e58:	b9a0      	cbnz	r0, 8019e84 <cosf+0x68>
 8019e5a:	eddd 0a01 	vldr	s1, [sp, #4]
 8019e5e:	ed9d 0a00 	vldr	s0, [sp]
 8019e62:	e7e5      	b.n	8019e30 <cosf+0x14>
 8019e64:	eddd 0a01 	vldr	s1, [sp, #4]
 8019e68:	ed9d 0a00 	vldr	s0, [sp]
 8019e6c:	f001 ff66 	bl	801bd3c <__kernel_sinf>
 8019e70:	eeb1 0a40 	vneg.f32	s0, s0
 8019e74:	e7e4      	b.n	8019e40 <cosf+0x24>
 8019e76:	eddd 0a01 	vldr	s1, [sp, #4]
 8019e7a:	ed9d 0a00 	vldr	s0, [sp]
 8019e7e:	f001 fc73 	bl	801b768 <__kernel_cosf>
 8019e82:	e7f5      	b.n	8019e70 <cosf+0x54>
 8019e84:	eddd 0a01 	vldr	s1, [sp, #4]
 8019e88:	ed9d 0a00 	vldr	s0, [sp]
 8019e8c:	2001      	movs	r0, #1
 8019e8e:	f001 ff55 	bl	801bd3c <__kernel_sinf>
 8019e92:	e7d5      	b.n	8019e40 <cosf+0x24>
 8019e94:	3f490fd8 	.word	0x3f490fd8
 8019e98:	00000000 	.word	0x00000000

08019e9c <roundf>:
 8019e9c:	ee10 0a10 	vmov	r0, s0
 8019ea0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8019ea4:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8019ea8:	2a16      	cmp	r2, #22
 8019eaa:	dc15      	bgt.n	8019ed8 <roundf+0x3c>
 8019eac:	2a00      	cmp	r2, #0
 8019eae:	da08      	bge.n	8019ec2 <roundf+0x26>
 8019eb0:	3201      	adds	r2, #1
 8019eb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8019eb6:	d101      	bne.n	8019ebc <roundf+0x20>
 8019eb8:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8019ebc:	ee00 3a10 	vmov	s0, r3
 8019ec0:	4770      	bx	lr
 8019ec2:	4908      	ldr	r1, [pc, #32]	; (8019ee4 <roundf+0x48>)
 8019ec4:	4111      	asrs	r1, r2
 8019ec6:	4208      	tst	r0, r1
 8019ec8:	d0fa      	beq.n	8019ec0 <roundf+0x24>
 8019eca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8019ece:	4113      	asrs	r3, r2
 8019ed0:	4403      	add	r3, r0
 8019ed2:	ea23 0301 	bic.w	r3, r3, r1
 8019ed6:	e7f1      	b.n	8019ebc <roundf+0x20>
 8019ed8:	2a80      	cmp	r2, #128	; 0x80
 8019eda:	d1f1      	bne.n	8019ec0 <roundf+0x24>
 8019edc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019ee0:	4770      	bx	lr
 8019ee2:	bf00      	nop
 8019ee4:	007fffff 	.word	0x007fffff

08019ee8 <asin>:
 8019ee8:	b538      	push	{r3, r4, r5, lr}
 8019eea:	ed2d 8b02 	vpush	{d8}
 8019eee:	ec55 4b10 	vmov	r4, r5, d0
 8019ef2:	f000 f949 	bl	801a188 <__ieee754_asin>
 8019ef6:	4b16      	ldr	r3, [pc, #88]	; (8019f50 <asin+0x68>)
 8019ef8:	eeb0 8a40 	vmov.f32	s16, s0
 8019efc:	eef0 8a60 	vmov.f32	s17, s1
 8019f00:	f993 3000 	ldrsb.w	r3, [r3]
 8019f04:	3301      	adds	r3, #1
 8019f06:	d01c      	beq.n	8019f42 <asin+0x5a>
 8019f08:	4622      	mov	r2, r4
 8019f0a:	462b      	mov	r3, r5
 8019f0c:	4620      	mov	r0, r4
 8019f0e:	4629      	mov	r1, r5
 8019f10:	f7e6 fe14 	bl	8000b3c <__aeabi_dcmpun>
 8019f14:	b9a8      	cbnz	r0, 8019f42 <asin+0x5a>
 8019f16:	ec45 4b10 	vmov	d0, r4, r5
 8019f1a:	f002 f8f9 	bl	801c110 <fabs>
 8019f1e:	4b0d      	ldr	r3, [pc, #52]	; (8019f54 <asin+0x6c>)
 8019f20:	ec51 0b10 	vmov	r0, r1, d0
 8019f24:	2200      	movs	r2, #0
 8019f26:	f7e6 fdff 	bl	8000b28 <__aeabi_dcmpgt>
 8019f2a:	b150      	cbz	r0, 8019f42 <asin+0x5a>
 8019f2c:	f7fd f830 	bl	8016f90 <__errno>
 8019f30:	ecbd 8b02 	vpop	{d8}
 8019f34:	2321      	movs	r3, #33	; 0x21
 8019f36:	6003      	str	r3, [r0, #0]
 8019f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019f3c:	4806      	ldr	r0, [pc, #24]	; (8019f58 <asin+0x70>)
 8019f3e:	f002 b8fb 	b.w	801c138 <nan>
 8019f42:	eeb0 0a48 	vmov.f32	s0, s16
 8019f46:	eef0 0a68 	vmov.f32	s1, s17
 8019f4a:	ecbd 8b02 	vpop	{d8}
 8019f4e:	bd38      	pop	{r3, r4, r5, pc}
 8019f50:	2000159c 	.word	0x2000159c
 8019f54:	3ff00000 	.word	0x3ff00000
 8019f58:	0801d018 	.word	0x0801d018

08019f5c <atan2>:
 8019f5c:	f000 bb28 	b.w	801a5b0 <__ieee754_atan2>

08019f60 <pow>:
 8019f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f64:	ec59 8b10 	vmov	r8, r9, d0
 8019f68:	ec57 6b11 	vmov	r6, r7, d1
 8019f6c:	f000 fbec 	bl	801a748 <__ieee754_pow>
 8019f70:	4b4e      	ldr	r3, [pc, #312]	; (801a0ac <pow+0x14c>)
 8019f72:	f993 3000 	ldrsb.w	r3, [r3]
 8019f76:	3301      	adds	r3, #1
 8019f78:	ec55 4b10 	vmov	r4, r5, d0
 8019f7c:	d015      	beq.n	8019faa <pow+0x4a>
 8019f7e:	4632      	mov	r2, r6
 8019f80:	463b      	mov	r3, r7
 8019f82:	4630      	mov	r0, r6
 8019f84:	4639      	mov	r1, r7
 8019f86:	f7e6 fdd9 	bl	8000b3c <__aeabi_dcmpun>
 8019f8a:	b970      	cbnz	r0, 8019faa <pow+0x4a>
 8019f8c:	4642      	mov	r2, r8
 8019f8e:	464b      	mov	r3, r9
 8019f90:	4640      	mov	r0, r8
 8019f92:	4649      	mov	r1, r9
 8019f94:	f7e6 fdd2 	bl	8000b3c <__aeabi_dcmpun>
 8019f98:	2200      	movs	r2, #0
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	b148      	cbz	r0, 8019fb2 <pow+0x52>
 8019f9e:	4630      	mov	r0, r6
 8019fa0:	4639      	mov	r1, r7
 8019fa2:	f7e6 fd99 	bl	8000ad8 <__aeabi_dcmpeq>
 8019fa6:	2800      	cmp	r0, #0
 8019fa8:	d17d      	bne.n	801a0a6 <pow+0x146>
 8019faa:	ec45 4b10 	vmov	d0, r4, r5
 8019fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019fb2:	4640      	mov	r0, r8
 8019fb4:	4649      	mov	r1, r9
 8019fb6:	f7e6 fd8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8019fba:	b1e0      	cbz	r0, 8019ff6 <pow+0x96>
 8019fbc:	2200      	movs	r2, #0
 8019fbe:	2300      	movs	r3, #0
 8019fc0:	4630      	mov	r0, r6
 8019fc2:	4639      	mov	r1, r7
 8019fc4:	f7e6 fd88 	bl	8000ad8 <__aeabi_dcmpeq>
 8019fc8:	2800      	cmp	r0, #0
 8019fca:	d16c      	bne.n	801a0a6 <pow+0x146>
 8019fcc:	ec47 6b10 	vmov	d0, r6, r7
 8019fd0:	f002 f8a7 	bl	801c122 <finite>
 8019fd4:	2800      	cmp	r0, #0
 8019fd6:	d0e8      	beq.n	8019faa <pow+0x4a>
 8019fd8:	2200      	movs	r2, #0
 8019fda:	2300      	movs	r3, #0
 8019fdc:	4630      	mov	r0, r6
 8019fde:	4639      	mov	r1, r7
 8019fe0:	f7e6 fd84 	bl	8000aec <__aeabi_dcmplt>
 8019fe4:	2800      	cmp	r0, #0
 8019fe6:	d0e0      	beq.n	8019faa <pow+0x4a>
 8019fe8:	f7fc ffd2 	bl	8016f90 <__errno>
 8019fec:	2321      	movs	r3, #33	; 0x21
 8019fee:	6003      	str	r3, [r0, #0]
 8019ff0:	2400      	movs	r4, #0
 8019ff2:	4d2f      	ldr	r5, [pc, #188]	; (801a0b0 <pow+0x150>)
 8019ff4:	e7d9      	b.n	8019faa <pow+0x4a>
 8019ff6:	ec45 4b10 	vmov	d0, r4, r5
 8019ffa:	f002 f892 	bl	801c122 <finite>
 8019ffe:	bbb8      	cbnz	r0, 801a070 <pow+0x110>
 801a000:	ec49 8b10 	vmov	d0, r8, r9
 801a004:	f002 f88d 	bl	801c122 <finite>
 801a008:	b390      	cbz	r0, 801a070 <pow+0x110>
 801a00a:	ec47 6b10 	vmov	d0, r6, r7
 801a00e:	f002 f888 	bl	801c122 <finite>
 801a012:	b368      	cbz	r0, 801a070 <pow+0x110>
 801a014:	4622      	mov	r2, r4
 801a016:	462b      	mov	r3, r5
 801a018:	4620      	mov	r0, r4
 801a01a:	4629      	mov	r1, r5
 801a01c:	f7e6 fd8e 	bl	8000b3c <__aeabi_dcmpun>
 801a020:	b160      	cbz	r0, 801a03c <pow+0xdc>
 801a022:	f7fc ffb5 	bl	8016f90 <__errno>
 801a026:	2321      	movs	r3, #33	; 0x21
 801a028:	6003      	str	r3, [r0, #0]
 801a02a:	2200      	movs	r2, #0
 801a02c:	2300      	movs	r3, #0
 801a02e:	4610      	mov	r0, r2
 801a030:	4619      	mov	r1, r3
 801a032:	f7e6 fc13 	bl	800085c <__aeabi_ddiv>
 801a036:	4604      	mov	r4, r0
 801a038:	460d      	mov	r5, r1
 801a03a:	e7b6      	b.n	8019faa <pow+0x4a>
 801a03c:	f7fc ffa8 	bl	8016f90 <__errno>
 801a040:	2322      	movs	r3, #34	; 0x22
 801a042:	6003      	str	r3, [r0, #0]
 801a044:	2200      	movs	r2, #0
 801a046:	2300      	movs	r3, #0
 801a048:	4640      	mov	r0, r8
 801a04a:	4649      	mov	r1, r9
 801a04c:	f7e6 fd4e 	bl	8000aec <__aeabi_dcmplt>
 801a050:	2400      	movs	r4, #0
 801a052:	b158      	cbz	r0, 801a06c <pow+0x10c>
 801a054:	ec47 6b10 	vmov	d0, r6, r7
 801a058:	f002 f876 	bl	801c148 <rint>
 801a05c:	4632      	mov	r2, r6
 801a05e:	ec51 0b10 	vmov	r0, r1, d0
 801a062:	463b      	mov	r3, r7
 801a064:	f7e6 fd38 	bl	8000ad8 <__aeabi_dcmpeq>
 801a068:	2800      	cmp	r0, #0
 801a06a:	d0c2      	beq.n	8019ff2 <pow+0x92>
 801a06c:	4d11      	ldr	r5, [pc, #68]	; (801a0b4 <pow+0x154>)
 801a06e:	e79c      	b.n	8019faa <pow+0x4a>
 801a070:	2200      	movs	r2, #0
 801a072:	2300      	movs	r3, #0
 801a074:	4620      	mov	r0, r4
 801a076:	4629      	mov	r1, r5
 801a078:	f7e6 fd2e 	bl	8000ad8 <__aeabi_dcmpeq>
 801a07c:	2800      	cmp	r0, #0
 801a07e:	d094      	beq.n	8019faa <pow+0x4a>
 801a080:	ec49 8b10 	vmov	d0, r8, r9
 801a084:	f002 f84d 	bl	801c122 <finite>
 801a088:	2800      	cmp	r0, #0
 801a08a:	d08e      	beq.n	8019faa <pow+0x4a>
 801a08c:	ec47 6b10 	vmov	d0, r6, r7
 801a090:	f002 f847 	bl	801c122 <finite>
 801a094:	2800      	cmp	r0, #0
 801a096:	d088      	beq.n	8019faa <pow+0x4a>
 801a098:	f7fc ff7a 	bl	8016f90 <__errno>
 801a09c:	2322      	movs	r3, #34	; 0x22
 801a09e:	6003      	str	r3, [r0, #0]
 801a0a0:	2400      	movs	r4, #0
 801a0a2:	2500      	movs	r5, #0
 801a0a4:	e781      	b.n	8019faa <pow+0x4a>
 801a0a6:	4d04      	ldr	r5, [pc, #16]	; (801a0b8 <pow+0x158>)
 801a0a8:	2400      	movs	r4, #0
 801a0aa:	e77e      	b.n	8019faa <pow+0x4a>
 801a0ac:	2000159c 	.word	0x2000159c
 801a0b0:	fff00000 	.word	0xfff00000
 801a0b4:	7ff00000 	.word	0x7ff00000
 801a0b8:	3ff00000 	.word	0x3ff00000

0801a0bc <sqrt>:
 801a0bc:	b538      	push	{r3, r4, r5, lr}
 801a0be:	ed2d 8b02 	vpush	{d8}
 801a0c2:	ec55 4b10 	vmov	r4, r5, d0
 801a0c6:	f001 f861 	bl	801b18c <__ieee754_sqrt>
 801a0ca:	4b15      	ldr	r3, [pc, #84]	; (801a120 <sqrt+0x64>)
 801a0cc:	eeb0 8a40 	vmov.f32	s16, s0
 801a0d0:	eef0 8a60 	vmov.f32	s17, s1
 801a0d4:	f993 3000 	ldrsb.w	r3, [r3]
 801a0d8:	3301      	adds	r3, #1
 801a0da:	d019      	beq.n	801a110 <sqrt+0x54>
 801a0dc:	4622      	mov	r2, r4
 801a0de:	462b      	mov	r3, r5
 801a0e0:	4620      	mov	r0, r4
 801a0e2:	4629      	mov	r1, r5
 801a0e4:	f7e6 fd2a 	bl	8000b3c <__aeabi_dcmpun>
 801a0e8:	b990      	cbnz	r0, 801a110 <sqrt+0x54>
 801a0ea:	2200      	movs	r2, #0
 801a0ec:	2300      	movs	r3, #0
 801a0ee:	4620      	mov	r0, r4
 801a0f0:	4629      	mov	r1, r5
 801a0f2:	f7e6 fcfb 	bl	8000aec <__aeabi_dcmplt>
 801a0f6:	b158      	cbz	r0, 801a110 <sqrt+0x54>
 801a0f8:	f7fc ff4a 	bl	8016f90 <__errno>
 801a0fc:	2321      	movs	r3, #33	; 0x21
 801a0fe:	6003      	str	r3, [r0, #0]
 801a100:	2200      	movs	r2, #0
 801a102:	2300      	movs	r3, #0
 801a104:	4610      	mov	r0, r2
 801a106:	4619      	mov	r1, r3
 801a108:	f7e6 fba8 	bl	800085c <__aeabi_ddiv>
 801a10c:	ec41 0b18 	vmov	d8, r0, r1
 801a110:	eeb0 0a48 	vmov.f32	s0, s16
 801a114:	eef0 0a68 	vmov.f32	s1, s17
 801a118:	ecbd 8b02 	vpop	{d8}
 801a11c:	bd38      	pop	{r3, r4, r5, pc}
 801a11e:	bf00      	nop
 801a120:	2000159c 	.word	0x2000159c

0801a124 <acosf>:
 801a124:	b508      	push	{r3, lr}
 801a126:	ed2d 8b02 	vpush	{d8}
 801a12a:	eeb0 8a40 	vmov.f32	s16, s0
 801a12e:	f001 f8e1 	bl	801b2f4 <__ieee754_acosf>
 801a132:	4b13      	ldr	r3, [pc, #76]	; (801a180 <acosf+0x5c>)
 801a134:	f993 3000 	ldrsb.w	r3, [r3]
 801a138:	3301      	adds	r3, #1
 801a13a:	eef0 8a40 	vmov.f32	s17, s0
 801a13e:	d01a      	beq.n	801a176 <acosf+0x52>
 801a140:	eeb4 8a48 	vcmp.f32	s16, s16
 801a144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a148:	d615      	bvs.n	801a176 <acosf+0x52>
 801a14a:	eeb0 0a48 	vmov.f32	s0, s16
 801a14e:	f002 f90d 	bl	801c36c <fabsf>
 801a152:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a156:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a15e:	dd0a      	ble.n	801a176 <acosf+0x52>
 801a160:	f7fc ff16 	bl	8016f90 <__errno>
 801a164:	ecbd 8b02 	vpop	{d8}
 801a168:	2321      	movs	r3, #33	; 0x21
 801a16a:	6003      	str	r3, [r0, #0]
 801a16c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a170:	4804      	ldr	r0, [pc, #16]	; (801a184 <acosf+0x60>)
 801a172:	f002 b945 	b.w	801c400 <nanf>
 801a176:	eeb0 0a68 	vmov.f32	s0, s17
 801a17a:	ecbd 8b02 	vpop	{d8}
 801a17e:	bd08      	pop	{r3, pc}
 801a180:	2000159c 	.word	0x2000159c
 801a184:	0801d018 	.word	0x0801d018

0801a188 <__ieee754_asin>:
 801a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a18c:	ed2d 8b04 	vpush	{d8-d9}
 801a190:	ec55 4b10 	vmov	r4, r5, d0
 801a194:	4bcc      	ldr	r3, [pc, #816]	; (801a4c8 <__ieee754_asin+0x340>)
 801a196:	b083      	sub	sp, #12
 801a198:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801a19c:	4598      	cmp	r8, r3
 801a19e:	9501      	str	r5, [sp, #4]
 801a1a0:	dd35      	ble.n	801a20e <__ieee754_asin+0x86>
 801a1a2:	ee10 3a10 	vmov	r3, s0
 801a1a6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 801a1aa:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 801a1ae:	ea58 0303 	orrs.w	r3, r8, r3
 801a1b2:	d117      	bne.n	801a1e4 <__ieee754_asin+0x5c>
 801a1b4:	a3aa      	add	r3, pc, #680	; (adr r3, 801a460 <__ieee754_asin+0x2d8>)
 801a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ba:	ee10 0a10 	vmov	r0, s0
 801a1be:	4629      	mov	r1, r5
 801a1c0:	f7e6 fa22 	bl	8000608 <__aeabi_dmul>
 801a1c4:	a3a8      	add	r3, pc, #672	; (adr r3, 801a468 <__ieee754_asin+0x2e0>)
 801a1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ca:	4606      	mov	r6, r0
 801a1cc:	460f      	mov	r7, r1
 801a1ce:	4620      	mov	r0, r4
 801a1d0:	4629      	mov	r1, r5
 801a1d2:	f7e6 fa19 	bl	8000608 <__aeabi_dmul>
 801a1d6:	4602      	mov	r2, r0
 801a1d8:	460b      	mov	r3, r1
 801a1da:	4630      	mov	r0, r6
 801a1dc:	4639      	mov	r1, r7
 801a1de:	f7e6 f85d 	bl	800029c <__adddf3>
 801a1e2:	e00b      	b.n	801a1fc <__ieee754_asin+0x74>
 801a1e4:	ee10 2a10 	vmov	r2, s0
 801a1e8:	462b      	mov	r3, r5
 801a1ea:	ee10 0a10 	vmov	r0, s0
 801a1ee:	4629      	mov	r1, r5
 801a1f0:	f7e6 f852 	bl	8000298 <__aeabi_dsub>
 801a1f4:	4602      	mov	r2, r0
 801a1f6:	460b      	mov	r3, r1
 801a1f8:	f7e6 fb30 	bl	800085c <__aeabi_ddiv>
 801a1fc:	4604      	mov	r4, r0
 801a1fe:	460d      	mov	r5, r1
 801a200:	ec45 4b10 	vmov	d0, r4, r5
 801a204:	b003      	add	sp, #12
 801a206:	ecbd 8b04 	vpop	{d8-d9}
 801a20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a20e:	4baf      	ldr	r3, [pc, #700]	; (801a4cc <__ieee754_asin+0x344>)
 801a210:	4598      	cmp	r8, r3
 801a212:	dc11      	bgt.n	801a238 <__ieee754_asin+0xb0>
 801a214:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801a218:	f280 80ae 	bge.w	801a378 <__ieee754_asin+0x1f0>
 801a21c:	a394      	add	r3, pc, #592	; (adr r3, 801a470 <__ieee754_asin+0x2e8>)
 801a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a222:	ee10 0a10 	vmov	r0, s0
 801a226:	4629      	mov	r1, r5
 801a228:	f7e6 f838 	bl	800029c <__adddf3>
 801a22c:	4ba8      	ldr	r3, [pc, #672]	; (801a4d0 <__ieee754_asin+0x348>)
 801a22e:	2200      	movs	r2, #0
 801a230:	f7e6 fc7a 	bl	8000b28 <__aeabi_dcmpgt>
 801a234:	2800      	cmp	r0, #0
 801a236:	d1e3      	bne.n	801a200 <__ieee754_asin+0x78>
 801a238:	ec45 4b10 	vmov	d0, r4, r5
 801a23c:	f001 ff68 	bl	801c110 <fabs>
 801a240:	49a3      	ldr	r1, [pc, #652]	; (801a4d0 <__ieee754_asin+0x348>)
 801a242:	ec53 2b10 	vmov	r2, r3, d0
 801a246:	2000      	movs	r0, #0
 801a248:	f7e6 f826 	bl	8000298 <__aeabi_dsub>
 801a24c:	4ba1      	ldr	r3, [pc, #644]	; (801a4d4 <__ieee754_asin+0x34c>)
 801a24e:	2200      	movs	r2, #0
 801a250:	f7e6 f9da 	bl	8000608 <__aeabi_dmul>
 801a254:	a388      	add	r3, pc, #544	; (adr r3, 801a478 <__ieee754_asin+0x2f0>)
 801a256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a25a:	4604      	mov	r4, r0
 801a25c:	460d      	mov	r5, r1
 801a25e:	f7e6 f9d3 	bl	8000608 <__aeabi_dmul>
 801a262:	a387      	add	r3, pc, #540	; (adr r3, 801a480 <__ieee754_asin+0x2f8>)
 801a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a268:	f7e6 f818 	bl	800029c <__adddf3>
 801a26c:	4622      	mov	r2, r4
 801a26e:	462b      	mov	r3, r5
 801a270:	f7e6 f9ca 	bl	8000608 <__aeabi_dmul>
 801a274:	a384      	add	r3, pc, #528	; (adr r3, 801a488 <__ieee754_asin+0x300>)
 801a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a27a:	f7e6 f80d 	bl	8000298 <__aeabi_dsub>
 801a27e:	4622      	mov	r2, r4
 801a280:	462b      	mov	r3, r5
 801a282:	f7e6 f9c1 	bl	8000608 <__aeabi_dmul>
 801a286:	a382      	add	r3, pc, #520	; (adr r3, 801a490 <__ieee754_asin+0x308>)
 801a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a28c:	f7e6 f806 	bl	800029c <__adddf3>
 801a290:	4622      	mov	r2, r4
 801a292:	462b      	mov	r3, r5
 801a294:	f7e6 f9b8 	bl	8000608 <__aeabi_dmul>
 801a298:	a37f      	add	r3, pc, #508	; (adr r3, 801a498 <__ieee754_asin+0x310>)
 801a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a29e:	f7e5 fffb 	bl	8000298 <__aeabi_dsub>
 801a2a2:	4622      	mov	r2, r4
 801a2a4:	462b      	mov	r3, r5
 801a2a6:	f7e6 f9af 	bl	8000608 <__aeabi_dmul>
 801a2aa:	a37d      	add	r3, pc, #500	; (adr r3, 801a4a0 <__ieee754_asin+0x318>)
 801a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2b0:	f7e5 fff4 	bl	800029c <__adddf3>
 801a2b4:	4622      	mov	r2, r4
 801a2b6:	462b      	mov	r3, r5
 801a2b8:	f7e6 f9a6 	bl	8000608 <__aeabi_dmul>
 801a2bc:	a37a      	add	r3, pc, #488	; (adr r3, 801a4a8 <__ieee754_asin+0x320>)
 801a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2c2:	ec41 0b18 	vmov	d8, r0, r1
 801a2c6:	4620      	mov	r0, r4
 801a2c8:	4629      	mov	r1, r5
 801a2ca:	f7e6 f99d 	bl	8000608 <__aeabi_dmul>
 801a2ce:	a378      	add	r3, pc, #480	; (adr r3, 801a4b0 <__ieee754_asin+0x328>)
 801a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2d4:	f7e5 ffe0 	bl	8000298 <__aeabi_dsub>
 801a2d8:	4622      	mov	r2, r4
 801a2da:	462b      	mov	r3, r5
 801a2dc:	f7e6 f994 	bl	8000608 <__aeabi_dmul>
 801a2e0:	a375      	add	r3, pc, #468	; (adr r3, 801a4b8 <__ieee754_asin+0x330>)
 801a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2e6:	f7e5 ffd9 	bl	800029c <__adddf3>
 801a2ea:	4622      	mov	r2, r4
 801a2ec:	462b      	mov	r3, r5
 801a2ee:	f7e6 f98b 	bl	8000608 <__aeabi_dmul>
 801a2f2:	a373      	add	r3, pc, #460	; (adr r3, 801a4c0 <__ieee754_asin+0x338>)
 801a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2f8:	f7e5 ffce 	bl	8000298 <__aeabi_dsub>
 801a2fc:	4622      	mov	r2, r4
 801a2fe:	462b      	mov	r3, r5
 801a300:	f7e6 f982 	bl	8000608 <__aeabi_dmul>
 801a304:	4b72      	ldr	r3, [pc, #456]	; (801a4d0 <__ieee754_asin+0x348>)
 801a306:	2200      	movs	r2, #0
 801a308:	f7e5 ffc8 	bl	800029c <__adddf3>
 801a30c:	ec45 4b10 	vmov	d0, r4, r5
 801a310:	4606      	mov	r6, r0
 801a312:	460f      	mov	r7, r1
 801a314:	f000 ff3a 	bl	801b18c <__ieee754_sqrt>
 801a318:	4b6f      	ldr	r3, [pc, #444]	; (801a4d8 <__ieee754_asin+0x350>)
 801a31a:	4598      	cmp	r8, r3
 801a31c:	ec5b ab10 	vmov	sl, fp, d0
 801a320:	f340 80dc 	ble.w	801a4dc <__ieee754_asin+0x354>
 801a324:	4632      	mov	r2, r6
 801a326:	463b      	mov	r3, r7
 801a328:	ec51 0b18 	vmov	r0, r1, d8
 801a32c:	f7e6 fa96 	bl	800085c <__aeabi_ddiv>
 801a330:	4652      	mov	r2, sl
 801a332:	465b      	mov	r3, fp
 801a334:	f7e6 f968 	bl	8000608 <__aeabi_dmul>
 801a338:	4652      	mov	r2, sl
 801a33a:	465b      	mov	r3, fp
 801a33c:	f7e5 ffae 	bl	800029c <__adddf3>
 801a340:	4602      	mov	r2, r0
 801a342:	460b      	mov	r3, r1
 801a344:	f7e5 ffaa 	bl	800029c <__adddf3>
 801a348:	a347      	add	r3, pc, #284	; (adr r3, 801a468 <__ieee754_asin+0x2e0>)
 801a34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a34e:	f7e5 ffa3 	bl	8000298 <__aeabi_dsub>
 801a352:	4602      	mov	r2, r0
 801a354:	460b      	mov	r3, r1
 801a356:	a142      	add	r1, pc, #264	; (adr r1, 801a460 <__ieee754_asin+0x2d8>)
 801a358:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a35c:	f7e5 ff9c 	bl	8000298 <__aeabi_dsub>
 801a360:	9b01      	ldr	r3, [sp, #4]
 801a362:	2b00      	cmp	r3, #0
 801a364:	bfdc      	itt	le
 801a366:	4602      	movle	r2, r0
 801a368:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801a36c:	4604      	mov	r4, r0
 801a36e:	460d      	mov	r5, r1
 801a370:	bfdc      	itt	le
 801a372:	4614      	movle	r4, r2
 801a374:	461d      	movle	r5, r3
 801a376:	e743      	b.n	801a200 <__ieee754_asin+0x78>
 801a378:	ee10 2a10 	vmov	r2, s0
 801a37c:	ee10 0a10 	vmov	r0, s0
 801a380:	462b      	mov	r3, r5
 801a382:	4629      	mov	r1, r5
 801a384:	f7e6 f940 	bl	8000608 <__aeabi_dmul>
 801a388:	a33b      	add	r3, pc, #236	; (adr r3, 801a478 <__ieee754_asin+0x2f0>)
 801a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a38e:	4606      	mov	r6, r0
 801a390:	460f      	mov	r7, r1
 801a392:	f7e6 f939 	bl	8000608 <__aeabi_dmul>
 801a396:	a33a      	add	r3, pc, #232	; (adr r3, 801a480 <__ieee754_asin+0x2f8>)
 801a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a39c:	f7e5 ff7e 	bl	800029c <__adddf3>
 801a3a0:	4632      	mov	r2, r6
 801a3a2:	463b      	mov	r3, r7
 801a3a4:	f7e6 f930 	bl	8000608 <__aeabi_dmul>
 801a3a8:	a337      	add	r3, pc, #220	; (adr r3, 801a488 <__ieee754_asin+0x300>)
 801a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3ae:	f7e5 ff73 	bl	8000298 <__aeabi_dsub>
 801a3b2:	4632      	mov	r2, r6
 801a3b4:	463b      	mov	r3, r7
 801a3b6:	f7e6 f927 	bl	8000608 <__aeabi_dmul>
 801a3ba:	a335      	add	r3, pc, #212	; (adr r3, 801a490 <__ieee754_asin+0x308>)
 801a3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3c0:	f7e5 ff6c 	bl	800029c <__adddf3>
 801a3c4:	4632      	mov	r2, r6
 801a3c6:	463b      	mov	r3, r7
 801a3c8:	f7e6 f91e 	bl	8000608 <__aeabi_dmul>
 801a3cc:	a332      	add	r3, pc, #200	; (adr r3, 801a498 <__ieee754_asin+0x310>)
 801a3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3d2:	f7e5 ff61 	bl	8000298 <__aeabi_dsub>
 801a3d6:	4632      	mov	r2, r6
 801a3d8:	463b      	mov	r3, r7
 801a3da:	f7e6 f915 	bl	8000608 <__aeabi_dmul>
 801a3de:	a330      	add	r3, pc, #192	; (adr r3, 801a4a0 <__ieee754_asin+0x318>)
 801a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3e4:	f7e5 ff5a 	bl	800029c <__adddf3>
 801a3e8:	4632      	mov	r2, r6
 801a3ea:	463b      	mov	r3, r7
 801a3ec:	f7e6 f90c 	bl	8000608 <__aeabi_dmul>
 801a3f0:	a32d      	add	r3, pc, #180	; (adr r3, 801a4a8 <__ieee754_asin+0x320>)
 801a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3f6:	4680      	mov	r8, r0
 801a3f8:	4689      	mov	r9, r1
 801a3fa:	4630      	mov	r0, r6
 801a3fc:	4639      	mov	r1, r7
 801a3fe:	f7e6 f903 	bl	8000608 <__aeabi_dmul>
 801a402:	a32b      	add	r3, pc, #172	; (adr r3, 801a4b0 <__ieee754_asin+0x328>)
 801a404:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a408:	f7e5 ff46 	bl	8000298 <__aeabi_dsub>
 801a40c:	4632      	mov	r2, r6
 801a40e:	463b      	mov	r3, r7
 801a410:	f7e6 f8fa 	bl	8000608 <__aeabi_dmul>
 801a414:	a328      	add	r3, pc, #160	; (adr r3, 801a4b8 <__ieee754_asin+0x330>)
 801a416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a41a:	f7e5 ff3f 	bl	800029c <__adddf3>
 801a41e:	4632      	mov	r2, r6
 801a420:	463b      	mov	r3, r7
 801a422:	f7e6 f8f1 	bl	8000608 <__aeabi_dmul>
 801a426:	a326      	add	r3, pc, #152	; (adr r3, 801a4c0 <__ieee754_asin+0x338>)
 801a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a42c:	f7e5 ff34 	bl	8000298 <__aeabi_dsub>
 801a430:	4632      	mov	r2, r6
 801a432:	463b      	mov	r3, r7
 801a434:	f7e6 f8e8 	bl	8000608 <__aeabi_dmul>
 801a438:	4b25      	ldr	r3, [pc, #148]	; (801a4d0 <__ieee754_asin+0x348>)
 801a43a:	2200      	movs	r2, #0
 801a43c:	f7e5 ff2e 	bl	800029c <__adddf3>
 801a440:	4602      	mov	r2, r0
 801a442:	460b      	mov	r3, r1
 801a444:	4640      	mov	r0, r8
 801a446:	4649      	mov	r1, r9
 801a448:	f7e6 fa08 	bl	800085c <__aeabi_ddiv>
 801a44c:	4622      	mov	r2, r4
 801a44e:	462b      	mov	r3, r5
 801a450:	f7e6 f8da 	bl	8000608 <__aeabi_dmul>
 801a454:	4602      	mov	r2, r0
 801a456:	460b      	mov	r3, r1
 801a458:	4620      	mov	r0, r4
 801a45a:	4629      	mov	r1, r5
 801a45c:	e6bf      	b.n	801a1de <__ieee754_asin+0x56>
 801a45e:	bf00      	nop
 801a460:	54442d18 	.word	0x54442d18
 801a464:	3ff921fb 	.word	0x3ff921fb
 801a468:	33145c07 	.word	0x33145c07
 801a46c:	3c91a626 	.word	0x3c91a626
 801a470:	8800759c 	.word	0x8800759c
 801a474:	7e37e43c 	.word	0x7e37e43c
 801a478:	0dfdf709 	.word	0x0dfdf709
 801a47c:	3f023de1 	.word	0x3f023de1
 801a480:	7501b288 	.word	0x7501b288
 801a484:	3f49efe0 	.word	0x3f49efe0
 801a488:	b5688f3b 	.word	0xb5688f3b
 801a48c:	3fa48228 	.word	0x3fa48228
 801a490:	0e884455 	.word	0x0e884455
 801a494:	3fc9c155 	.word	0x3fc9c155
 801a498:	03eb6f7d 	.word	0x03eb6f7d
 801a49c:	3fd4d612 	.word	0x3fd4d612
 801a4a0:	55555555 	.word	0x55555555
 801a4a4:	3fc55555 	.word	0x3fc55555
 801a4a8:	b12e9282 	.word	0xb12e9282
 801a4ac:	3fb3b8c5 	.word	0x3fb3b8c5
 801a4b0:	1b8d0159 	.word	0x1b8d0159
 801a4b4:	3fe6066c 	.word	0x3fe6066c
 801a4b8:	9c598ac8 	.word	0x9c598ac8
 801a4bc:	40002ae5 	.word	0x40002ae5
 801a4c0:	1c8a2d4b 	.word	0x1c8a2d4b
 801a4c4:	40033a27 	.word	0x40033a27
 801a4c8:	3fefffff 	.word	0x3fefffff
 801a4cc:	3fdfffff 	.word	0x3fdfffff
 801a4d0:	3ff00000 	.word	0x3ff00000
 801a4d4:	3fe00000 	.word	0x3fe00000
 801a4d8:	3fef3332 	.word	0x3fef3332
 801a4dc:	ee10 2a10 	vmov	r2, s0
 801a4e0:	ee10 0a10 	vmov	r0, s0
 801a4e4:	465b      	mov	r3, fp
 801a4e6:	4659      	mov	r1, fp
 801a4e8:	f7e5 fed8 	bl	800029c <__adddf3>
 801a4ec:	4632      	mov	r2, r6
 801a4ee:	463b      	mov	r3, r7
 801a4f0:	ec41 0b19 	vmov	d9, r0, r1
 801a4f4:	ec51 0b18 	vmov	r0, r1, d8
 801a4f8:	f7e6 f9b0 	bl	800085c <__aeabi_ddiv>
 801a4fc:	4602      	mov	r2, r0
 801a4fe:	460b      	mov	r3, r1
 801a500:	ec51 0b19 	vmov	r0, r1, d9
 801a504:	f7e6 f880 	bl	8000608 <__aeabi_dmul>
 801a508:	f04f 0800 	mov.w	r8, #0
 801a50c:	4606      	mov	r6, r0
 801a50e:	460f      	mov	r7, r1
 801a510:	4642      	mov	r2, r8
 801a512:	465b      	mov	r3, fp
 801a514:	4640      	mov	r0, r8
 801a516:	4659      	mov	r1, fp
 801a518:	f7e6 f876 	bl	8000608 <__aeabi_dmul>
 801a51c:	4602      	mov	r2, r0
 801a51e:	460b      	mov	r3, r1
 801a520:	4620      	mov	r0, r4
 801a522:	4629      	mov	r1, r5
 801a524:	f7e5 feb8 	bl	8000298 <__aeabi_dsub>
 801a528:	4642      	mov	r2, r8
 801a52a:	4604      	mov	r4, r0
 801a52c:	460d      	mov	r5, r1
 801a52e:	465b      	mov	r3, fp
 801a530:	4650      	mov	r0, sl
 801a532:	4659      	mov	r1, fp
 801a534:	f7e5 feb2 	bl	800029c <__adddf3>
 801a538:	4602      	mov	r2, r0
 801a53a:	460b      	mov	r3, r1
 801a53c:	4620      	mov	r0, r4
 801a53e:	4629      	mov	r1, r5
 801a540:	f7e6 f98c 	bl	800085c <__aeabi_ddiv>
 801a544:	4602      	mov	r2, r0
 801a546:	460b      	mov	r3, r1
 801a548:	f7e5 fea8 	bl	800029c <__adddf3>
 801a54c:	4602      	mov	r2, r0
 801a54e:	460b      	mov	r3, r1
 801a550:	a113      	add	r1, pc, #76	; (adr r1, 801a5a0 <__ieee754_asin+0x418>)
 801a552:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a556:	f7e5 fe9f 	bl	8000298 <__aeabi_dsub>
 801a55a:	4602      	mov	r2, r0
 801a55c:	460b      	mov	r3, r1
 801a55e:	4630      	mov	r0, r6
 801a560:	4639      	mov	r1, r7
 801a562:	f7e5 fe99 	bl	8000298 <__aeabi_dsub>
 801a566:	4642      	mov	r2, r8
 801a568:	4604      	mov	r4, r0
 801a56a:	460d      	mov	r5, r1
 801a56c:	465b      	mov	r3, fp
 801a56e:	4640      	mov	r0, r8
 801a570:	4659      	mov	r1, fp
 801a572:	f7e5 fe93 	bl	800029c <__adddf3>
 801a576:	4602      	mov	r2, r0
 801a578:	460b      	mov	r3, r1
 801a57a:	a10b      	add	r1, pc, #44	; (adr r1, 801a5a8 <__ieee754_asin+0x420>)
 801a57c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a580:	f7e5 fe8a 	bl	8000298 <__aeabi_dsub>
 801a584:	4602      	mov	r2, r0
 801a586:	460b      	mov	r3, r1
 801a588:	4620      	mov	r0, r4
 801a58a:	4629      	mov	r1, r5
 801a58c:	f7e5 fe84 	bl	8000298 <__aeabi_dsub>
 801a590:	4602      	mov	r2, r0
 801a592:	460b      	mov	r3, r1
 801a594:	a104      	add	r1, pc, #16	; (adr r1, 801a5a8 <__ieee754_asin+0x420>)
 801a596:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a59a:	e6df      	b.n	801a35c <__ieee754_asin+0x1d4>
 801a59c:	f3af 8000 	nop.w
 801a5a0:	33145c07 	.word	0x33145c07
 801a5a4:	3c91a626 	.word	0x3c91a626
 801a5a8:	54442d18 	.word	0x54442d18
 801a5ac:	3fe921fb 	.word	0x3fe921fb

0801a5b0 <__ieee754_atan2>:
 801a5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5b4:	ec57 6b11 	vmov	r6, r7, d1
 801a5b8:	4273      	negs	r3, r6
 801a5ba:	f8df e184 	ldr.w	lr, [pc, #388]	; 801a740 <__ieee754_atan2+0x190>
 801a5be:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801a5c2:	4333      	orrs	r3, r6
 801a5c4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a5c8:	4573      	cmp	r3, lr
 801a5ca:	ec51 0b10 	vmov	r0, r1, d0
 801a5ce:	ee11 8a10 	vmov	r8, s2
 801a5d2:	d80a      	bhi.n	801a5ea <__ieee754_atan2+0x3a>
 801a5d4:	4244      	negs	r4, r0
 801a5d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a5da:	4304      	orrs	r4, r0
 801a5dc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a5e0:	4574      	cmp	r4, lr
 801a5e2:	ee10 9a10 	vmov	r9, s0
 801a5e6:	468c      	mov	ip, r1
 801a5e8:	d907      	bls.n	801a5fa <__ieee754_atan2+0x4a>
 801a5ea:	4632      	mov	r2, r6
 801a5ec:	463b      	mov	r3, r7
 801a5ee:	f7e5 fe55 	bl	800029c <__adddf3>
 801a5f2:	ec41 0b10 	vmov	d0, r0, r1
 801a5f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a5fa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801a5fe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a602:	4334      	orrs	r4, r6
 801a604:	d103      	bne.n	801a60e <__ieee754_atan2+0x5e>
 801a606:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a60a:	f001 bbe1 	b.w	801bdd0 <atan>
 801a60e:	17bc      	asrs	r4, r7, #30
 801a610:	f004 0402 	and.w	r4, r4, #2
 801a614:	ea53 0909 	orrs.w	r9, r3, r9
 801a618:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a61c:	d107      	bne.n	801a62e <__ieee754_atan2+0x7e>
 801a61e:	2c02      	cmp	r4, #2
 801a620:	d060      	beq.n	801a6e4 <__ieee754_atan2+0x134>
 801a622:	2c03      	cmp	r4, #3
 801a624:	d1e5      	bne.n	801a5f2 <__ieee754_atan2+0x42>
 801a626:	a142      	add	r1, pc, #264	; (adr r1, 801a730 <__ieee754_atan2+0x180>)
 801a628:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a62c:	e7e1      	b.n	801a5f2 <__ieee754_atan2+0x42>
 801a62e:	ea52 0808 	orrs.w	r8, r2, r8
 801a632:	d106      	bne.n	801a642 <__ieee754_atan2+0x92>
 801a634:	f1bc 0f00 	cmp.w	ip, #0
 801a638:	da5f      	bge.n	801a6fa <__ieee754_atan2+0x14a>
 801a63a:	a13f      	add	r1, pc, #252	; (adr r1, 801a738 <__ieee754_atan2+0x188>)
 801a63c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a640:	e7d7      	b.n	801a5f2 <__ieee754_atan2+0x42>
 801a642:	4572      	cmp	r2, lr
 801a644:	d10f      	bne.n	801a666 <__ieee754_atan2+0xb6>
 801a646:	4293      	cmp	r3, r2
 801a648:	f104 34ff 	add.w	r4, r4, #4294967295
 801a64c:	d107      	bne.n	801a65e <__ieee754_atan2+0xae>
 801a64e:	2c02      	cmp	r4, #2
 801a650:	d84c      	bhi.n	801a6ec <__ieee754_atan2+0x13c>
 801a652:	4b35      	ldr	r3, [pc, #212]	; (801a728 <__ieee754_atan2+0x178>)
 801a654:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801a658:	e9d4 0100 	ldrd	r0, r1, [r4]
 801a65c:	e7c9      	b.n	801a5f2 <__ieee754_atan2+0x42>
 801a65e:	2c02      	cmp	r4, #2
 801a660:	d848      	bhi.n	801a6f4 <__ieee754_atan2+0x144>
 801a662:	4b32      	ldr	r3, [pc, #200]	; (801a72c <__ieee754_atan2+0x17c>)
 801a664:	e7f6      	b.n	801a654 <__ieee754_atan2+0xa4>
 801a666:	4573      	cmp	r3, lr
 801a668:	d0e4      	beq.n	801a634 <__ieee754_atan2+0x84>
 801a66a:	1a9b      	subs	r3, r3, r2
 801a66c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801a670:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a674:	da1e      	bge.n	801a6b4 <__ieee754_atan2+0x104>
 801a676:	2f00      	cmp	r7, #0
 801a678:	da01      	bge.n	801a67e <__ieee754_atan2+0xce>
 801a67a:	323c      	adds	r2, #60	; 0x3c
 801a67c:	db1e      	blt.n	801a6bc <__ieee754_atan2+0x10c>
 801a67e:	4632      	mov	r2, r6
 801a680:	463b      	mov	r3, r7
 801a682:	f7e6 f8eb 	bl	800085c <__aeabi_ddiv>
 801a686:	ec41 0b10 	vmov	d0, r0, r1
 801a68a:	f001 fd41 	bl	801c110 <fabs>
 801a68e:	f001 fb9f 	bl	801bdd0 <atan>
 801a692:	ec51 0b10 	vmov	r0, r1, d0
 801a696:	2c01      	cmp	r4, #1
 801a698:	d013      	beq.n	801a6c2 <__ieee754_atan2+0x112>
 801a69a:	2c02      	cmp	r4, #2
 801a69c:	d015      	beq.n	801a6ca <__ieee754_atan2+0x11a>
 801a69e:	2c00      	cmp	r4, #0
 801a6a0:	d0a7      	beq.n	801a5f2 <__ieee754_atan2+0x42>
 801a6a2:	a319      	add	r3, pc, #100	; (adr r3, 801a708 <__ieee754_atan2+0x158>)
 801a6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6a8:	f7e5 fdf6 	bl	8000298 <__aeabi_dsub>
 801a6ac:	a318      	add	r3, pc, #96	; (adr r3, 801a710 <__ieee754_atan2+0x160>)
 801a6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6b2:	e014      	b.n	801a6de <__ieee754_atan2+0x12e>
 801a6b4:	a118      	add	r1, pc, #96	; (adr r1, 801a718 <__ieee754_atan2+0x168>)
 801a6b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6ba:	e7ec      	b.n	801a696 <__ieee754_atan2+0xe6>
 801a6bc:	2000      	movs	r0, #0
 801a6be:	2100      	movs	r1, #0
 801a6c0:	e7e9      	b.n	801a696 <__ieee754_atan2+0xe6>
 801a6c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a6c6:	4619      	mov	r1, r3
 801a6c8:	e793      	b.n	801a5f2 <__ieee754_atan2+0x42>
 801a6ca:	a30f      	add	r3, pc, #60	; (adr r3, 801a708 <__ieee754_atan2+0x158>)
 801a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6d0:	f7e5 fde2 	bl	8000298 <__aeabi_dsub>
 801a6d4:	4602      	mov	r2, r0
 801a6d6:	460b      	mov	r3, r1
 801a6d8:	a10d      	add	r1, pc, #52	; (adr r1, 801a710 <__ieee754_atan2+0x160>)
 801a6da:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6de:	f7e5 fddb 	bl	8000298 <__aeabi_dsub>
 801a6e2:	e786      	b.n	801a5f2 <__ieee754_atan2+0x42>
 801a6e4:	a10a      	add	r1, pc, #40	; (adr r1, 801a710 <__ieee754_atan2+0x160>)
 801a6e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6ea:	e782      	b.n	801a5f2 <__ieee754_atan2+0x42>
 801a6ec:	a10c      	add	r1, pc, #48	; (adr r1, 801a720 <__ieee754_atan2+0x170>)
 801a6ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6f2:	e77e      	b.n	801a5f2 <__ieee754_atan2+0x42>
 801a6f4:	2000      	movs	r0, #0
 801a6f6:	2100      	movs	r1, #0
 801a6f8:	e77b      	b.n	801a5f2 <__ieee754_atan2+0x42>
 801a6fa:	a107      	add	r1, pc, #28	; (adr r1, 801a718 <__ieee754_atan2+0x168>)
 801a6fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a700:	e777      	b.n	801a5f2 <__ieee754_atan2+0x42>
 801a702:	bf00      	nop
 801a704:	f3af 8000 	nop.w
 801a708:	33145c07 	.word	0x33145c07
 801a70c:	3ca1a626 	.word	0x3ca1a626
 801a710:	54442d18 	.word	0x54442d18
 801a714:	400921fb 	.word	0x400921fb
 801a718:	54442d18 	.word	0x54442d18
 801a71c:	3ff921fb 	.word	0x3ff921fb
 801a720:	54442d18 	.word	0x54442d18
 801a724:	3fe921fb 	.word	0x3fe921fb
 801a728:	0801d128 	.word	0x0801d128
 801a72c:	0801d140 	.word	0x0801d140
 801a730:	54442d18 	.word	0x54442d18
 801a734:	c00921fb 	.word	0xc00921fb
 801a738:	54442d18 	.word	0x54442d18
 801a73c:	bff921fb 	.word	0xbff921fb
 801a740:	7ff00000 	.word	0x7ff00000
 801a744:	00000000 	.word	0x00000000

0801a748 <__ieee754_pow>:
 801a748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a74c:	ed2d 8b06 	vpush	{d8-d10}
 801a750:	b08d      	sub	sp, #52	; 0x34
 801a752:	ed8d 1b02 	vstr	d1, [sp, #8]
 801a756:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801a75a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801a75e:	ea56 0100 	orrs.w	r1, r6, r0
 801a762:	ec53 2b10 	vmov	r2, r3, d0
 801a766:	f000 84d1 	beq.w	801b10c <__ieee754_pow+0x9c4>
 801a76a:	497f      	ldr	r1, [pc, #508]	; (801a968 <__ieee754_pow+0x220>)
 801a76c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801a770:	428c      	cmp	r4, r1
 801a772:	ee10 8a10 	vmov	r8, s0
 801a776:	4699      	mov	r9, r3
 801a778:	dc09      	bgt.n	801a78e <__ieee754_pow+0x46>
 801a77a:	d103      	bne.n	801a784 <__ieee754_pow+0x3c>
 801a77c:	b97a      	cbnz	r2, 801a79e <__ieee754_pow+0x56>
 801a77e:	42a6      	cmp	r6, r4
 801a780:	dd02      	ble.n	801a788 <__ieee754_pow+0x40>
 801a782:	e00c      	b.n	801a79e <__ieee754_pow+0x56>
 801a784:	428e      	cmp	r6, r1
 801a786:	dc02      	bgt.n	801a78e <__ieee754_pow+0x46>
 801a788:	428e      	cmp	r6, r1
 801a78a:	d110      	bne.n	801a7ae <__ieee754_pow+0x66>
 801a78c:	b178      	cbz	r0, 801a7ae <__ieee754_pow+0x66>
 801a78e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a792:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a796:	ea54 0308 	orrs.w	r3, r4, r8
 801a79a:	f000 84b7 	beq.w	801b10c <__ieee754_pow+0x9c4>
 801a79e:	4873      	ldr	r0, [pc, #460]	; (801a96c <__ieee754_pow+0x224>)
 801a7a0:	b00d      	add	sp, #52	; 0x34
 801a7a2:	ecbd 8b06 	vpop	{d8-d10}
 801a7a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7aa:	f001 bcc5 	b.w	801c138 <nan>
 801a7ae:	f1b9 0f00 	cmp.w	r9, #0
 801a7b2:	da36      	bge.n	801a822 <__ieee754_pow+0xda>
 801a7b4:	496e      	ldr	r1, [pc, #440]	; (801a970 <__ieee754_pow+0x228>)
 801a7b6:	428e      	cmp	r6, r1
 801a7b8:	dc51      	bgt.n	801a85e <__ieee754_pow+0x116>
 801a7ba:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801a7be:	428e      	cmp	r6, r1
 801a7c0:	f340 84af 	ble.w	801b122 <__ieee754_pow+0x9da>
 801a7c4:	1531      	asrs	r1, r6, #20
 801a7c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801a7ca:	2914      	cmp	r1, #20
 801a7cc:	dd0f      	ble.n	801a7ee <__ieee754_pow+0xa6>
 801a7ce:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801a7d2:	fa20 fc01 	lsr.w	ip, r0, r1
 801a7d6:	fa0c f101 	lsl.w	r1, ip, r1
 801a7da:	4281      	cmp	r1, r0
 801a7dc:	f040 84a1 	bne.w	801b122 <__ieee754_pow+0x9da>
 801a7e0:	f00c 0c01 	and.w	ip, ip, #1
 801a7e4:	f1cc 0102 	rsb	r1, ip, #2
 801a7e8:	9100      	str	r1, [sp, #0]
 801a7ea:	b180      	cbz	r0, 801a80e <__ieee754_pow+0xc6>
 801a7ec:	e059      	b.n	801a8a2 <__ieee754_pow+0x15a>
 801a7ee:	2800      	cmp	r0, #0
 801a7f0:	d155      	bne.n	801a89e <__ieee754_pow+0x156>
 801a7f2:	f1c1 0114 	rsb	r1, r1, #20
 801a7f6:	fa46 fc01 	asr.w	ip, r6, r1
 801a7fa:	fa0c f101 	lsl.w	r1, ip, r1
 801a7fe:	42b1      	cmp	r1, r6
 801a800:	f040 848c 	bne.w	801b11c <__ieee754_pow+0x9d4>
 801a804:	f00c 0c01 	and.w	ip, ip, #1
 801a808:	f1cc 0102 	rsb	r1, ip, #2
 801a80c:	9100      	str	r1, [sp, #0]
 801a80e:	4959      	ldr	r1, [pc, #356]	; (801a974 <__ieee754_pow+0x22c>)
 801a810:	428e      	cmp	r6, r1
 801a812:	d12d      	bne.n	801a870 <__ieee754_pow+0x128>
 801a814:	2f00      	cmp	r7, #0
 801a816:	da79      	bge.n	801a90c <__ieee754_pow+0x1c4>
 801a818:	4956      	ldr	r1, [pc, #344]	; (801a974 <__ieee754_pow+0x22c>)
 801a81a:	2000      	movs	r0, #0
 801a81c:	f7e6 f81e 	bl	800085c <__aeabi_ddiv>
 801a820:	e016      	b.n	801a850 <__ieee754_pow+0x108>
 801a822:	2100      	movs	r1, #0
 801a824:	9100      	str	r1, [sp, #0]
 801a826:	2800      	cmp	r0, #0
 801a828:	d13b      	bne.n	801a8a2 <__ieee754_pow+0x15a>
 801a82a:	494f      	ldr	r1, [pc, #316]	; (801a968 <__ieee754_pow+0x220>)
 801a82c:	428e      	cmp	r6, r1
 801a82e:	d1ee      	bne.n	801a80e <__ieee754_pow+0xc6>
 801a830:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801a834:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a838:	ea53 0308 	orrs.w	r3, r3, r8
 801a83c:	f000 8466 	beq.w	801b10c <__ieee754_pow+0x9c4>
 801a840:	4b4d      	ldr	r3, [pc, #308]	; (801a978 <__ieee754_pow+0x230>)
 801a842:	429c      	cmp	r4, r3
 801a844:	dd0d      	ble.n	801a862 <__ieee754_pow+0x11a>
 801a846:	2f00      	cmp	r7, #0
 801a848:	f280 8464 	bge.w	801b114 <__ieee754_pow+0x9cc>
 801a84c:	2000      	movs	r0, #0
 801a84e:	2100      	movs	r1, #0
 801a850:	ec41 0b10 	vmov	d0, r0, r1
 801a854:	b00d      	add	sp, #52	; 0x34
 801a856:	ecbd 8b06 	vpop	{d8-d10}
 801a85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a85e:	2102      	movs	r1, #2
 801a860:	e7e0      	b.n	801a824 <__ieee754_pow+0xdc>
 801a862:	2f00      	cmp	r7, #0
 801a864:	daf2      	bge.n	801a84c <__ieee754_pow+0x104>
 801a866:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801a86a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a86e:	e7ef      	b.n	801a850 <__ieee754_pow+0x108>
 801a870:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801a874:	d104      	bne.n	801a880 <__ieee754_pow+0x138>
 801a876:	4610      	mov	r0, r2
 801a878:	4619      	mov	r1, r3
 801a87a:	f7e5 fec5 	bl	8000608 <__aeabi_dmul>
 801a87e:	e7e7      	b.n	801a850 <__ieee754_pow+0x108>
 801a880:	493e      	ldr	r1, [pc, #248]	; (801a97c <__ieee754_pow+0x234>)
 801a882:	428f      	cmp	r7, r1
 801a884:	d10d      	bne.n	801a8a2 <__ieee754_pow+0x15a>
 801a886:	f1b9 0f00 	cmp.w	r9, #0
 801a88a:	db0a      	blt.n	801a8a2 <__ieee754_pow+0x15a>
 801a88c:	ec43 2b10 	vmov	d0, r2, r3
 801a890:	b00d      	add	sp, #52	; 0x34
 801a892:	ecbd 8b06 	vpop	{d8-d10}
 801a896:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a89a:	f000 bc77 	b.w	801b18c <__ieee754_sqrt>
 801a89e:	2100      	movs	r1, #0
 801a8a0:	9100      	str	r1, [sp, #0]
 801a8a2:	ec43 2b10 	vmov	d0, r2, r3
 801a8a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a8aa:	f001 fc31 	bl	801c110 <fabs>
 801a8ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a8b2:	ec51 0b10 	vmov	r0, r1, d0
 801a8b6:	f1b8 0f00 	cmp.w	r8, #0
 801a8ba:	d12a      	bne.n	801a912 <__ieee754_pow+0x1ca>
 801a8bc:	b12c      	cbz	r4, 801a8ca <__ieee754_pow+0x182>
 801a8be:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801a974 <__ieee754_pow+0x22c>
 801a8c2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801a8c6:	45e6      	cmp	lr, ip
 801a8c8:	d123      	bne.n	801a912 <__ieee754_pow+0x1ca>
 801a8ca:	2f00      	cmp	r7, #0
 801a8cc:	da05      	bge.n	801a8da <__ieee754_pow+0x192>
 801a8ce:	4602      	mov	r2, r0
 801a8d0:	460b      	mov	r3, r1
 801a8d2:	2000      	movs	r0, #0
 801a8d4:	4927      	ldr	r1, [pc, #156]	; (801a974 <__ieee754_pow+0x22c>)
 801a8d6:	f7e5 ffc1 	bl	800085c <__aeabi_ddiv>
 801a8da:	f1b9 0f00 	cmp.w	r9, #0
 801a8de:	dab7      	bge.n	801a850 <__ieee754_pow+0x108>
 801a8e0:	9b00      	ldr	r3, [sp, #0]
 801a8e2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a8e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a8ea:	4323      	orrs	r3, r4
 801a8ec:	d108      	bne.n	801a900 <__ieee754_pow+0x1b8>
 801a8ee:	4602      	mov	r2, r0
 801a8f0:	460b      	mov	r3, r1
 801a8f2:	4610      	mov	r0, r2
 801a8f4:	4619      	mov	r1, r3
 801a8f6:	f7e5 fccf 	bl	8000298 <__aeabi_dsub>
 801a8fa:	4602      	mov	r2, r0
 801a8fc:	460b      	mov	r3, r1
 801a8fe:	e78d      	b.n	801a81c <__ieee754_pow+0xd4>
 801a900:	9b00      	ldr	r3, [sp, #0]
 801a902:	2b01      	cmp	r3, #1
 801a904:	d1a4      	bne.n	801a850 <__ieee754_pow+0x108>
 801a906:	4602      	mov	r2, r0
 801a908:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a90c:	4610      	mov	r0, r2
 801a90e:	4619      	mov	r1, r3
 801a910:	e79e      	b.n	801a850 <__ieee754_pow+0x108>
 801a912:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801a916:	f10c 35ff 	add.w	r5, ip, #4294967295
 801a91a:	950a      	str	r5, [sp, #40]	; 0x28
 801a91c:	9d00      	ldr	r5, [sp, #0]
 801a91e:	46ac      	mov	ip, r5
 801a920:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a922:	ea5c 0505 	orrs.w	r5, ip, r5
 801a926:	d0e4      	beq.n	801a8f2 <__ieee754_pow+0x1aa>
 801a928:	4b15      	ldr	r3, [pc, #84]	; (801a980 <__ieee754_pow+0x238>)
 801a92a:	429e      	cmp	r6, r3
 801a92c:	f340 80fc 	ble.w	801ab28 <__ieee754_pow+0x3e0>
 801a930:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801a934:	429e      	cmp	r6, r3
 801a936:	4b10      	ldr	r3, [pc, #64]	; (801a978 <__ieee754_pow+0x230>)
 801a938:	dd07      	ble.n	801a94a <__ieee754_pow+0x202>
 801a93a:	429c      	cmp	r4, r3
 801a93c:	dc0a      	bgt.n	801a954 <__ieee754_pow+0x20c>
 801a93e:	2f00      	cmp	r7, #0
 801a940:	da84      	bge.n	801a84c <__ieee754_pow+0x104>
 801a942:	a307      	add	r3, pc, #28	; (adr r3, 801a960 <__ieee754_pow+0x218>)
 801a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a948:	e795      	b.n	801a876 <__ieee754_pow+0x12e>
 801a94a:	429c      	cmp	r4, r3
 801a94c:	dbf7      	blt.n	801a93e <__ieee754_pow+0x1f6>
 801a94e:	4b09      	ldr	r3, [pc, #36]	; (801a974 <__ieee754_pow+0x22c>)
 801a950:	429c      	cmp	r4, r3
 801a952:	dd17      	ble.n	801a984 <__ieee754_pow+0x23c>
 801a954:	2f00      	cmp	r7, #0
 801a956:	dcf4      	bgt.n	801a942 <__ieee754_pow+0x1fa>
 801a958:	e778      	b.n	801a84c <__ieee754_pow+0x104>
 801a95a:	bf00      	nop
 801a95c:	f3af 8000 	nop.w
 801a960:	8800759c 	.word	0x8800759c
 801a964:	7e37e43c 	.word	0x7e37e43c
 801a968:	7ff00000 	.word	0x7ff00000
 801a96c:	0801d018 	.word	0x0801d018
 801a970:	433fffff 	.word	0x433fffff
 801a974:	3ff00000 	.word	0x3ff00000
 801a978:	3fefffff 	.word	0x3fefffff
 801a97c:	3fe00000 	.word	0x3fe00000
 801a980:	41e00000 	.word	0x41e00000
 801a984:	4b64      	ldr	r3, [pc, #400]	; (801ab18 <__ieee754_pow+0x3d0>)
 801a986:	2200      	movs	r2, #0
 801a988:	f7e5 fc86 	bl	8000298 <__aeabi_dsub>
 801a98c:	a356      	add	r3, pc, #344	; (adr r3, 801aae8 <__ieee754_pow+0x3a0>)
 801a98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a992:	4604      	mov	r4, r0
 801a994:	460d      	mov	r5, r1
 801a996:	f7e5 fe37 	bl	8000608 <__aeabi_dmul>
 801a99a:	a355      	add	r3, pc, #340	; (adr r3, 801aaf0 <__ieee754_pow+0x3a8>)
 801a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9a0:	4606      	mov	r6, r0
 801a9a2:	460f      	mov	r7, r1
 801a9a4:	4620      	mov	r0, r4
 801a9a6:	4629      	mov	r1, r5
 801a9a8:	f7e5 fe2e 	bl	8000608 <__aeabi_dmul>
 801a9ac:	4b5b      	ldr	r3, [pc, #364]	; (801ab1c <__ieee754_pow+0x3d4>)
 801a9ae:	4682      	mov	sl, r0
 801a9b0:	468b      	mov	fp, r1
 801a9b2:	2200      	movs	r2, #0
 801a9b4:	4620      	mov	r0, r4
 801a9b6:	4629      	mov	r1, r5
 801a9b8:	f7e5 fe26 	bl	8000608 <__aeabi_dmul>
 801a9bc:	4602      	mov	r2, r0
 801a9be:	460b      	mov	r3, r1
 801a9c0:	a14d      	add	r1, pc, #308	; (adr r1, 801aaf8 <__ieee754_pow+0x3b0>)
 801a9c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a9c6:	f7e5 fc67 	bl	8000298 <__aeabi_dsub>
 801a9ca:	4622      	mov	r2, r4
 801a9cc:	462b      	mov	r3, r5
 801a9ce:	f7e5 fe1b 	bl	8000608 <__aeabi_dmul>
 801a9d2:	4602      	mov	r2, r0
 801a9d4:	460b      	mov	r3, r1
 801a9d6:	2000      	movs	r0, #0
 801a9d8:	4951      	ldr	r1, [pc, #324]	; (801ab20 <__ieee754_pow+0x3d8>)
 801a9da:	f7e5 fc5d 	bl	8000298 <__aeabi_dsub>
 801a9de:	4622      	mov	r2, r4
 801a9e0:	4680      	mov	r8, r0
 801a9e2:	4689      	mov	r9, r1
 801a9e4:	462b      	mov	r3, r5
 801a9e6:	4620      	mov	r0, r4
 801a9e8:	4629      	mov	r1, r5
 801a9ea:	f7e5 fe0d 	bl	8000608 <__aeabi_dmul>
 801a9ee:	4602      	mov	r2, r0
 801a9f0:	460b      	mov	r3, r1
 801a9f2:	4640      	mov	r0, r8
 801a9f4:	4649      	mov	r1, r9
 801a9f6:	f7e5 fe07 	bl	8000608 <__aeabi_dmul>
 801a9fa:	a341      	add	r3, pc, #260	; (adr r3, 801ab00 <__ieee754_pow+0x3b8>)
 801a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa00:	f7e5 fe02 	bl	8000608 <__aeabi_dmul>
 801aa04:	4602      	mov	r2, r0
 801aa06:	460b      	mov	r3, r1
 801aa08:	4650      	mov	r0, sl
 801aa0a:	4659      	mov	r1, fp
 801aa0c:	f7e5 fc44 	bl	8000298 <__aeabi_dsub>
 801aa10:	4602      	mov	r2, r0
 801aa12:	460b      	mov	r3, r1
 801aa14:	4680      	mov	r8, r0
 801aa16:	4689      	mov	r9, r1
 801aa18:	4630      	mov	r0, r6
 801aa1a:	4639      	mov	r1, r7
 801aa1c:	f7e5 fc3e 	bl	800029c <__adddf3>
 801aa20:	2400      	movs	r4, #0
 801aa22:	4632      	mov	r2, r6
 801aa24:	463b      	mov	r3, r7
 801aa26:	4620      	mov	r0, r4
 801aa28:	460d      	mov	r5, r1
 801aa2a:	f7e5 fc35 	bl	8000298 <__aeabi_dsub>
 801aa2e:	4602      	mov	r2, r0
 801aa30:	460b      	mov	r3, r1
 801aa32:	4640      	mov	r0, r8
 801aa34:	4649      	mov	r1, r9
 801aa36:	f7e5 fc2f 	bl	8000298 <__aeabi_dsub>
 801aa3a:	9b00      	ldr	r3, [sp, #0]
 801aa3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aa3e:	3b01      	subs	r3, #1
 801aa40:	4313      	orrs	r3, r2
 801aa42:	4682      	mov	sl, r0
 801aa44:	468b      	mov	fp, r1
 801aa46:	f040 81f1 	bne.w	801ae2c <__ieee754_pow+0x6e4>
 801aa4a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801ab08 <__ieee754_pow+0x3c0>
 801aa4e:	eeb0 8a47 	vmov.f32	s16, s14
 801aa52:	eef0 8a67 	vmov.f32	s17, s15
 801aa56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801aa5a:	2600      	movs	r6, #0
 801aa5c:	4632      	mov	r2, r6
 801aa5e:	463b      	mov	r3, r7
 801aa60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aa64:	f7e5 fc18 	bl	8000298 <__aeabi_dsub>
 801aa68:	4622      	mov	r2, r4
 801aa6a:	462b      	mov	r3, r5
 801aa6c:	f7e5 fdcc 	bl	8000608 <__aeabi_dmul>
 801aa70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801aa74:	4680      	mov	r8, r0
 801aa76:	4689      	mov	r9, r1
 801aa78:	4650      	mov	r0, sl
 801aa7a:	4659      	mov	r1, fp
 801aa7c:	f7e5 fdc4 	bl	8000608 <__aeabi_dmul>
 801aa80:	4602      	mov	r2, r0
 801aa82:	460b      	mov	r3, r1
 801aa84:	4640      	mov	r0, r8
 801aa86:	4649      	mov	r1, r9
 801aa88:	f7e5 fc08 	bl	800029c <__adddf3>
 801aa8c:	4632      	mov	r2, r6
 801aa8e:	463b      	mov	r3, r7
 801aa90:	4680      	mov	r8, r0
 801aa92:	4689      	mov	r9, r1
 801aa94:	4620      	mov	r0, r4
 801aa96:	4629      	mov	r1, r5
 801aa98:	f7e5 fdb6 	bl	8000608 <__aeabi_dmul>
 801aa9c:	460b      	mov	r3, r1
 801aa9e:	4604      	mov	r4, r0
 801aaa0:	460d      	mov	r5, r1
 801aaa2:	4602      	mov	r2, r0
 801aaa4:	4649      	mov	r1, r9
 801aaa6:	4640      	mov	r0, r8
 801aaa8:	f7e5 fbf8 	bl	800029c <__adddf3>
 801aaac:	4b1d      	ldr	r3, [pc, #116]	; (801ab24 <__ieee754_pow+0x3dc>)
 801aaae:	4299      	cmp	r1, r3
 801aab0:	ec45 4b19 	vmov	d9, r4, r5
 801aab4:	4606      	mov	r6, r0
 801aab6:	460f      	mov	r7, r1
 801aab8:	468b      	mov	fp, r1
 801aaba:	f340 82fe 	ble.w	801b0ba <__ieee754_pow+0x972>
 801aabe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801aac2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801aac6:	4303      	orrs	r3, r0
 801aac8:	f000 81f0 	beq.w	801aeac <__ieee754_pow+0x764>
 801aacc:	a310      	add	r3, pc, #64	; (adr r3, 801ab10 <__ieee754_pow+0x3c8>)
 801aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aad2:	ec51 0b18 	vmov	r0, r1, d8
 801aad6:	f7e5 fd97 	bl	8000608 <__aeabi_dmul>
 801aada:	a30d      	add	r3, pc, #52	; (adr r3, 801ab10 <__ieee754_pow+0x3c8>)
 801aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aae0:	e6cb      	b.n	801a87a <__ieee754_pow+0x132>
 801aae2:	bf00      	nop
 801aae4:	f3af 8000 	nop.w
 801aae8:	60000000 	.word	0x60000000
 801aaec:	3ff71547 	.word	0x3ff71547
 801aaf0:	f85ddf44 	.word	0xf85ddf44
 801aaf4:	3e54ae0b 	.word	0x3e54ae0b
 801aaf8:	55555555 	.word	0x55555555
 801aafc:	3fd55555 	.word	0x3fd55555
 801ab00:	652b82fe 	.word	0x652b82fe
 801ab04:	3ff71547 	.word	0x3ff71547
 801ab08:	00000000 	.word	0x00000000
 801ab0c:	bff00000 	.word	0xbff00000
 801ab10:	8800759c 	.word	0x8800759c
 801ab14:	7e37e43c 	.word	0x7e37e43c
 801ab18:	3ff00000 	.word	0x3ff00000
 801ab1c:	3fd00000 	.word	0x3fd00000
 801ab20:	3fe00000 	.word	0x3fe00000
 801ab24:	408fffff 	.word	0x408fffff
 801ab28:	4bd7      	ldr	r3, [pc, #860]	; (801ae88 <__ieee754_pow+0x740>)
 801ab2a:	ea03 0309 	and.w	r3, r3, r9
 801ab2e:	2200      	movs	r2, #0
 801ab30:	b92b      	cbnz	r3, 801ab3e <__ieee754_pow+0x3f6>
 801ab32:	4bd6      	ldr	r3, [pc, #856]	; (801ae8c <__ieee754_pow+0x744>)
 801ab34:	f7e5 fd68 	bl	8000608 <__aeabi_dmul>
 801ab38:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801ab3c:	460c      	mov	r4, r1
 801ab3e:	1523      	asrs	r3, r4, #20
 801ab40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ab44:	4413      	add	r3, r2
 801ab46:	9309      	str	r3, [sp, #36]	; 0x24
 801ab48:	4bd1      	ldr	r3, [pc, #836]	; (801ae90 <__ieee754_pow+0x748>)
 801ab4a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ab4e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801ab52:	429c      	cmp	r4, r3
 801ab54:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801ab58:	dd08      	ble.n	801ab6c <__ieee754_pow+0x424>
 801ab5a:	4bce      	ldr	r3, [pc, #824]	; (801ae94 <__ieee754_pow+0x74c>)
 801ab5c:	429c      	cmp	r4, r3
 801ab5e:	f340 8163 	ble.w	801ae28 <__ieee754_pow+0x6e0>
 801ab62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab64:	3301      	adds	r3, #1
 801ab66:	9309      	str	r3, [sp, #36]	; 0x24
 801ab68:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801ab6c:	2400      	movs	r4, #0
 801ab6e:	00e3      	lsls	r3, r4, #3
 801ab70:	930b      	str	r3, [sp, #44]	; 0x2c
 801ab72:	4bc9      	ldr	r3, [pc, #804]	; (801ae98 <__ieee754_pow+0x750>)
 801ab74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ab78:	ed93 7b00 	vldr	d7, [r3]
 801ab7c:	4629      	mov	r1, r5
 801ab7e:	ec53 2b17 	vmov	r2, r3, d7
 801ab82:	eeb0 8a47 	vmov.f32	s16, s14
 801ab86:	eef0 8a67 	vmov.f32	s17, s15
 801ab8a:	4682      	mov	sl, r0
 801ab8c:	f7e5 fb84 	bl	8000298 <__aeabi_dsub>
 801ab90:	4652      	mov	r2, sl
 801ab92:	4606      	mov	r6, r0
 801ab94:	460f      	mov	r7, r1
 801ab96:	462b      	mov	r3, r5
 801ab98:	ec51 0b18 	vmov	r0, r1, d8
 801ab9c:	f7e5 fb7e 	bl	800029c <__adddf3>
 801aba0:	4602      	mov	r2, r0
 801aba2:	460b      	mov	r3, r1
 801aba4:	2000      	movs	r0, #0
 801aba6:	49bd      	ldr	r1, [pc, #756]	; (801ae9c <__ieee754_pow+0x754>)
 801aba8:	f7e5 fe58 	bl	800085c <__aeabi_ddiv>
 801abac:	ec41 0b19 	vmov	d9, r0, r1
 801abb0:	4602      	mov	r2, r0
 801abb2:	460b      	mov	r3, r1
 801abb4:	4630      	mov	r0, r6
 801abb6:	4639      	mov	r1, r7
 801abb8:	f7e5 fd26 	bl	8000608 <__aeabi_dmul>
 801abbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801abc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801abc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801abc8:	2300      	movs	r3, #0
 801abca:	9304      	str	r3, [sp, #16]
 801abcc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801abd0:	46ab      	mov	fp, r5
 801abd2:	106d      	asrs	r5, r5, #1
 801abd4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801abd8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801abdc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801abe0:	2200      	movs	r2, #0
 801abe2:	4640      	mov	r0, r8
 801abe4:	4649      	mov	r1, r9
 801abe6:	4614      	mov	r4, r2
 801abe8:	461d      	mov	r5, r3
 801abea:	f7e5 fd0d 	bl	8000608 <__aeabi_dmul>
 801abee:	4602      	mov	r2, r0
 801abf0:	460b      	mov	r3, r1
 801abf2:	4630      	mov	r0, r6
 801abf4:	4639      	mov	r1, r7
 801abf6:	f7e5 fb4f 	bl	8000298 <__aeabi_dsub>
 801abfa:	ec53 2b18 	vmov	r2, r3, d8
 801abfe:	4606      	mov	r6, r0
 801ac00:	460f      	mov	r7, r1
 801ac02:	4620      	mov	r0, r4
 801ac04:	4629      	mov	r1, r5
 801ac06:	f7e5 fb47 	bl	8000298 <__aeabi_dsub>
 801ac0a:	4602      	mov	r2, r0
 801ac0c:	460b      	mov	r3, r1
 801ac0e:	4650      	mov	r0, sl
 801ac10:	4659      	mov	r1, fp
 801ac12:	f7e5 fb41 	bl	8000298 <__aeabi_dsub>
 801ac16:	4642      	mov	r2, r8
 801ac18:	464b      	mov	r3, r9
 801ac1a:	f7e5 fcf5 	bl	8000608 <__aeabi_dmul>
 801ac1e:	4602      	mov	r2, r0
 801ac20:	460b      	mov	r3, r1
 801ac22:	4630      	mov	r0, r6
 801ac24:	4639      	mov	r1, r7
 801ac26:	f7e5 fb37 	bl	8000298 <__aeabi_dsub>
 801ac2a:	ec53 2b19 	vmov	r2, r3, d9
 801ac2e:	f7e5 fceb 	bl	8000608 <__aeabi_dmul>
 801ac32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ac36:	ec41 0b18 	vmov	d8, r0, r1
 801ac3a:	4610      	mov	r0, r2
 801ac3c:	4619      	mov	r1, r3
 801ac3e:	f7e5 fce3 	bl	8000608 <__aeabi_dmul>
 801ac42:	a37d      	add	r3, pc, #500	; (adr r3, 801ae38 <__ieee754_pow+0x6f0>)
 801ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac48:	4604      	mov	r4, r0
 801ac4a:	460d      	mov	r5, r1
 801ac4c:	f7e5 fcdc 	bl	8000608 <__aeabi_dmul>
 801ac50:	a37b      	add	r3, pc, #492	; (adr r3, 801ae40 <__ieee754_pow+0x6f8>)
 801ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac56:	f7e5 fb21 	bl	800029c <__adddf3>
 801ac5a:	4622      	mov	r2, r4
 801ac5c:	462b      	mov	r3, r5
 801ac5e:	f7e5 fcd3 	bl	8000608 <__aeabi_dmul>
 801ac62:	a379      	add	r3, pc, #484	; (adr r3, 801ae48 <__ieee754_pow+0x700>)
 801ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac68:	f7e5 fb18 	bl	800029c <__adddf3>
 801ac6c:	4622      	mov	r2, r4
 801ac6e:	462b      	mov	r3, r5
 801ac70:	f7e5 fcca 	bl	8000608 <__aeabi_dmul>
 801ac74:	a376      	add	r3, pc, #472	; (adr r3, 801ae50 <__ieee754_pow+0x708>)
 801ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac7a:	f7e5 fb0f 	bl	800029c <__adddf3>
 801ac7e:	4622      	mov	r2, r4
 801ac80:	462b      	mov	r3, r5
 801ac82:	f7e5 fcc1 	bl	8000608 <__aeabi_dmul>
 801ac86:	a374      	add	r3, pc, #464	; (adr r3, 801ae58 <__ieee754_pow+0x710>)
 801ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac8c:	f7e5 fb06 	bl	800029c <__adddf3>
 801ac90:	4622      	mov	r2, r4
 801ac92:	462b      	mov	r3, r5
 801ac94:	f7e5 fcb8 	bl	8000608 <__aeabi_dmul>
 801ac98:	a371      	add	r3, pc, #452	; (adr r3, 801ae60 <__ieee754_pow+0x718>)
 801ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac9e:	f7e5 fafd 	bl	800029c <__adddf3>
 801aca2:	4622      	mov	r2, r4
 801aca4:	4606      	mov	r6, r0
 801aca6:	460f      	mov	r7, r1
 801aca8:	462b      	mov	r3, r5
 801acaa:	4620      	mov	r0, r4
 801acac:	4629      	mov	r1, r5
 801acae:	f7e5 fcab 	bl	8000608 <__aeabi_dmul>
 801acb2:	4602      	mov	r2, r0
 801acb4:	460b      	mov	r3, r1
 801acb6:	4630      	mov	r0, r6
 801acb8:	4639      	mov	r1, r7
 801acba:	f7e5 fca5 	bl	8000608 <__aeabi_dmul>
 801acbe:	4642      	mov	r2, r8
 801acc0:	4604      	mov	r4, r0
 801acc2:	460d      	mov	r5, r1
 801acc4:	464b      	mov	r3, r9
 801acc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801acca:	f7e5 fae7 	bl	800029c <__adddf3>
 801acce:	ec53 2b18 	vmov	r2, r3, d8
 801acd2:	f7e5 fc99 	bl	8000608 <__aeabi_dmul>
 801acd6:	4622      	mov	r2, r4
 801acd8:	462b      	mov	r3, r5
 801acda:	f7e5 fadf 	bl	800029c <__adddf3>
 801acde:	4642      	mov	r2, r8
 801ace0:	4682      	mov	sl, r0
 801ace2:	468b      	mov	fp, r1
 801ace4:	464b      	mov	r3, r9
 801ace6:	4640      	mov	r0, r8
 801ace8:	4649      	mov	r1, r9
 801acea:	f7e5 fc8d 	bl	8000608 <__aeabi_dmul>
 801acee:	4b6c      	ldr	r3, [pc, #432]	; (801aea0 <__ieee754_pow+0x758>)
 801acf0:	2200      	movs	r2, #0
 801acf2:	4606      	mov	r6, r0
 801acf4:	460f      	mov	r7, r1
 801acf6:	f7e5 fad1 	bl	800029c <__adddf3>
 801acfa:	4652      	mov	r2, sl
 801acfc:	465b      	mov	r3, fp
 801acfe:	f7e5 facd 	bl	800029c <__adddf3>
 801ad02:	9c04      	ldr	r4, [sp, #16]
 801ad04:	460d      	mov	r5, r1
 801ad06:	4622      	mov	r2, r4
 801ad08:	460b      	mov	r3, r1
 801ad0a:	4640      	mov	r0, r8
 801ad0c:	4649      	mov	r1, r9
 801ad0e:	f7e5 fc7b 	bl	8000608 <__aeabi_dmul>
 801ad12:	4b63      	ldr	r3, [pc, #396]	; (801aea0 <__ieee754_pow+0x758>)
 801ad14:	4680      	mov	r8, r0
 801ad16:	4689      	mov	r9, r1
 801ad18:	2200      	movs	r2, #0
 801ad1a:	4620      	mov	r0, r4
 801ad1c:	4629      	mov	r1, r5
 801ad1e:	f7e5 fabb 	bl	8000298 <__aeabi_dsub>
 801ad22:	4632      	mov	r2, r6
 801ad24:	463b      	mov	r3, r7
 801ad26:	f7e5 fab7 	bl	8000298 <__aeabi_dsub>
 801ad2a:	4602      	mov	r2, r0
 801ad2c:	460b      	mov	r3, r1
 801ad2e:	4650      	mov	r0, sl
 801ad30:	4659      	mov	r1, fp
 801ad32:	f7e5 fab1 	bl	8000298 <__aeabi_dsub>
 801ad36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ad3a:	f7e5 fc65 	bl	8000608 <__aeabi_dmul>
 801ad3e:	4622      	mov	r2, r4
 801ad40:	4606      	mov	r6, r0
 801ad42:	460f      	mov	r7, r1
 801ad44:	462b      	mov	r3, r5
 801ad46:	ec51 0b18 	vmov	r0, r1, d8
 801ad4a:	f7e5 fc5d 	bl	8000608 <__aeabi_dmul>
 801ad4e:	4602      	mov	r2, r0
 801ad50:	460b      	mov	r3, r1
 801ad52:	4630      	mov	r0, r6
 801ad54:	4639      	mov	r1, r7
 801ad56:	f7e5 faa1 	bl	800029c <__adddf3>
 801ad5a:	4606      	mov	r6, r0
 801ad5c:	460f      	mov	r7, r1
 801ad5e:	4602      	mov	r2, r0
 801ad60:	460b      	mov	r3, r1
 801ad62:	4640      	mov	r0, r8
 801ad64:	4649      	mov	r1, r9
 801ad66:	f7e5 fa99 	bl	800029c <__adddf3>
 801ad6a:	9c04      	ldr	r4, [sp, #16]
 801ad6c:	a33e      	add	r3, pc, #248	; (adr r3, 801ae68 <__ieee754_pow+0x720>)
 801ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad72:	4620      	mov	r0, r4
 801ad74:	460d      	mov	r5, r1
 801ad76:	f7e5 fc47 	bl	8000608 <__aeabi_dmul>
 801ad7a:	4642      	mov	r2, r8
 801ad7c:	ec41 0b18 	vmov	d8, r0, r1
 801ad80:	464b      	mov	r3, r9
 801ad82:	4620      	mov	r0, r4
 801ad84:	4629      	mov	r1, r5
 801ad86:	f7e5 fa87 	bl	8000298 <__aeabi_dsub>
 801ad8a:	4602      	mov	r2, r0
 801ad8c:	460b      	mov	r3, r1
 801ad8e:	4630      	mov	r0, r6
 801ad90:	4639      	mov	r1, r7
 801ad92:	f7e5 fa81 	bl	8000298 <__aeabi_dsub>
 801ad96:	a336      	add	r3, pc, #216	; (adr r3, 801ae70 <__ieee754_pow+0x728>)
 801ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad9c:	f7e5 fc34 	bl	8000608 <__aeabi_dmul>
 801ada0:	a335      	add	r3, pc, #212	; (adr r3, 801ae78 <__ieee754_pow+0x730>)
 801ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ada6:	4606      	mov	r6, r0
 801ada8:	460f      	mov	r7, r1
 801adaa:	4620      	mov	r0, r4
 801adac:	4629      	mov	r1, r5
 801adae:	f7e5 fc2b 	bl	8000608 <__aeabi_dmul>
 801adb2:	4602      	mov	r2, r0
 801adb4:	460b      	mov	r3, r1
 801adb6:	4630      	mov	r0, r6
 801adb8:	4639      	mov	r1, r7
 801adba:	f7e5 fa6f 	bl	800029c <__adddf3>
 801adbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801adc0:	4b38      	ldr	r3, [pc, #224]	; (801aea4 <__ieee754_pow+0x75c>)
 801adc2:	4413      	add	r3, r2
 801adc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adc8:	f7e5 fa68 	bl	800029c <__adddf3>
 801adcc:	4682      	mov	sl, r0
 801adce:	9809      	ldr	r0, [sp, #36]	; 0x24
 801add0:	468b      	mov	fp, r1
 801add2:	f7e5 fbaf 	bl	8000534 <__aeabi_i2d>
 801add6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801add8:	4b33      	ldr	r3, [pc, #204]	; (801aea8 <__ieee754_pow+0x760>)
 801adda:	4413      	add	r3, r2
 801addc:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ade0:	4606      	mov	r6, r0
 801ade2:	460f      	mov	r7, r1
 801ade4:	4652      	mov	r2, sl
 801ade6:	465b      	mov	r3, fp
 801ade8:	ec51 0b18 	vmov	r0, r1, d8
 801adec:	f7e5 fa56 	bl	800029c <__adddf3>
 801adf0:	4642      	mov	r2, r8
 801adf2:	464b      	mov	r3, r9
 801adf4:	f7e5 fa52 	bl	800029c <__adddf3>
 801adf8:	4632      	mov	r2, r6
 801adfa:	463b      	mov	r3, r7
 801adfc:	f7e5 fa4e 	bl	800029c <__adddf3>
 801ae00:	9c04      	ldr	r4, [sp, #16]
 801ae02:	4632      	mov	r2, r6
 801ae04:	463b      	mov	r3, r7
 801ae06:	4620      	mov	r0, r4
 801ae08:	460d      	mov	r5, r1
 801ae0a:	f7e5 fa45 	bl	8000298 <__aeabi_dsub>
 801ae0e:	4642      	mov	r2, r8
 801ae10:	464b      	mov	r3, r9
 801ae12:	f7e5 fa41 	bl	8000298 <__aeabi_dsub>
 801ae16:	ec53 2b18 	vmov	r2, r3, d8
 801ae1a:	f7e5 fa3d 	bl	8000298 <__aeabi_dsub>
 801ae1e:	4602      	mov	r2, r0
 801ae20:	460b      	mov	r3, r1
 801ae22:	4650      	mov	r0, sl
 801ae24:	4659      	mov	r1, fp
 801ae26:	e606      	b.n	801aa36 <__ieee754_pow+0x2ee>
 801ae28:	2401      	movs	r4, #1
 801ae2a:	e6a0      	b.n	801ab6e <__ieee754_pow+0x426>
 801ae2c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801ae80 <__ieee754_pow+0x738>
 801ae30:	e60d      	b.n	801aa4e <__ieee754_pow+0x306>
 801ae32:	bf00      	nop
 801ae34:	f3af 8000 	nop.w
 801ae38:	4a454eef 	.word	0x4a454eef
 801ae3c:	3fca7e28 	.word	0x3fca7e28
 801ae40:	93c9db65 	.word	0x93c9db65
 801ae44:	3fcd864a 	.word	0x3fcd864a
 801ae48:	a91d4101 	.word	0xa91d4101
 801ae4c:	3fd17460 	.word	0x3fd17460
 801ae50:	518f264d 	.word	0x518f264d
 801ae54:	3fd55555 	.word	0x3fd55555
 801ae58:	db6fabff 	.word	0xdb6fabff
 801ae5c:	3fdb6db6 	.word	0x3fdb6db6
 801ae60:	33333303 	.word	0x33333303
 801ae64:	3fe33333 	.word	0x3fe33333
 801ae68:	e0000000 	.word	0xe0000000
 801ae6c:	3feec709 	.word	0x3feec709
 801ae70:	dc3a03fd 	.word	0xdc3a03fd
 801ae74:	3feec709 	.word	0x3feec709
 801ae78:	145b01f5 	.word	0x145b01f5
 801ae7c:	be3e2fe0 	.word	0xbe3e2fe0
 801ae80:	00000000 	.word	0x00000000
 801ae84:	3ff00000 	.word	0x3ff00000
 801ae88:	7ff00000 	.word	0x7ff00000
 801ae8c:	43400000 	.word	0x43400000
 801ae90:	0003988e 	.word	0x0003988e
 801ae94:	000bb679 	.word	0x000bb679
 801ae98:	0801d158 	.word	0x0801d158
 801ae9c:	3ff00000 	.word	0x3ff00000
 801aea0:	40080000 	.word	0x40080000
 801aea4:	0801d178 	.word	0x0801d178
 801aea8:	0801d168 	.word	0x0801d168
 801aeac:	a3b5      	add	r3, pc, #724	; (adr r3, 801b184 <__ieee754_pow+0xa3c>)
 801aeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeb2:	4640      	mov	r0, r8
 801aeb4:	4649      	mov	r1, r9
 801aeb6:	f7e5 f9f1 	bl	800029c <__adddf3>
 801aeba:	4622      	mov	r2, r4
 801aebc:	ec41 0b1a 	vmov	d10, r0, r1
 801aec0:	462b      	mov	r3, r5
 801aec2:	4630      	mov	r0, r6
 801aec4:	4639      	mov	r1, r7
 801aec6:	f7e5 f9e7 	bl	8000298 <__aeabi_dsub>
 801aeca:	4602      	mov	r2, r0
 801aecc:	460b      	mov	r3, r1
 801aece:	ec51 0b1a 	vmov	r0, r1, d10
 801aed2:	f7e5 fe29 	bl	8000b28 <__aeabi_dcmpgt>
 801aed6:	2800      	cmp	r0, #0
 801aed8:	f47f adf8 	bne.w	801aacc <__ieee754_pow+0x384>
 801aedc:	4aa4      	ldr	r2, [pc, #656]	; (801b170 <__ieee754_pow+0xa28>)
 801aede:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801aee2:	4293      	cmp	r3, r2
 801aee4:	f340 810b 	ble.w	801b0fe <__ieee754_pow+0x9b6>
 801aee8:	151b      	asrs	r3, r3, #20
 801aeea:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801aeee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801aef2:	fa4a f303 	asr.w	r3, sl, r3
 801aef6:	445b      	add	r3, fp
 801aef8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801aefc:	4e9d      	ldr	r6, [pc, #628]	; (801b174 <__ieee754_pow+0xa2c>)
 801aefe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801af02:	4116      	asrs	r6, r2
 801af04:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801af08:	2000      	movs	r0, #0
 801af0a:	ea23 0106 	bic.w	r1, r3, r6
 801af0e:	f1c2 0214 	rsb	r2, r2, #20
 801af12:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801af16:	fa4a fa02 	asr.w	sl, sl, r2
 801af1a:	f1bb 0f00 	cmp.w	fp, #0
 801af1e:	4602      	mov	r2, r0
 801af20:	460b      	mov	r3, r1
 801af22:	4620      	mov	r0, r4
 801af24:	4629      	mov	r1, r5
 801af26:	bfb8      	it	lt
 801af28:	f1ca 0a00 	rsblt	sl, sl, #0
 801af2c:	f7e5 f9b4 	bl	8000298 <__aeabi_dsub>
 801af30:	ec41 0b19 	vmov	d9, r0, r1
 801af34:	4642      	mov	r2, r8
 801af36:	464b      	mov	r3, r9
 801af38:	ec51 0b19 	vmov	r0, r1, d9
 801af3c:	f7e5 f9ae 	bl	800029c <__adddf3>
 801af40:	2400      	movs	r4, #0
 801af42:	a379      	add	r3, pc, #484	; (adr r3, 801b128 <__ieee754_pow+0x9e0>)
 801af44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af48:	4620      	mov	r0, r4
 801af4a:	460d      	mov	r5, r1
 801af4c:	f7e5 fb5c 	bl	8000608 <__aeabi_dmul>
 801af50:	ec53 2b19 	vmov	r2, r3, d9
 801af54:	4606      	mov	r6, r0
 801af56:	460f      	mov	r7, r1
 801af58:	4620      	mov	r0, r4
 801af5a:	4629      	mov	r1, r5
 801af5c:	f7e5 f99c 	bl	8000298 <__aeabi_dsub>
 801af60:	4602      	mov	r2, r0
 801af62:	460b      	mov	r3, r1
 801af64:	4640      	mov	r0, r8
 801af66:	4649      	mov	r1, r9
 801af68:	f7e5 f996 	bl	8000298 <__aeabi_dsub>
 801af6c:	a370      	add	r3, pc, #448	; (adr r3, 801b130 <__ieee754_pow+0x9e8>)
 801af6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af72:	f7e5 fb49 	bl	8000608 <__aeabi_dmul>
 801af76:	a370      	add	r3, pc, #448	; (adr r3, 801b138 <__ieee754_pow+0x9f0>)
 801af78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af7c:	4680      	mov	r8, r0
 801af7e:	4689      	mov	r9, r1
 801af80:	4620      	mov	r0, r4
 801af82:	4629      	mov	r1, r5
 801af84:	f7e5 fb40 	bl	8000608 <__aeabi_dmul>
 801af88:	4602      	mov	r2, r0
 801af8a:	460b      	mov	r3, r1
 801af8c:	4640      	mov	r0, r8
 801af8e:	4649      	mov	r1, r9
 801af90:	f7e5 f984 	bl	800029c <__adddf3>
 801af94:	4604      	mov	r4, r0
 801af96:	460d      	mov	r5, r1
 801af98:	4602      	mov	r2, r0
 801af9a:	460b      	mov	r3, r1
 801af9c:	4630      	mov	r0, r6
 801af9e:	4639      	mov	r1, r7
 801afa0:	f7e5 f97c 	bl	800029c <__adddf3>
 801afa4:	4632      	mov	r2, r6
 801afa6:	463b      	mov	r3, r7
 801afa8:	4680      	mov	r8, r0
 801afaa:	4689      	mov	r9, r1
 801afac:	f7e5 f974 	bl	8000298 <__aeabi_dsub>
 801afb0:	4602      	mov	r2, r0
 801afb2:	460b      	mov	r3, r1
 801afb4:	4620      	mov	r0, r4
 801afb6:	4629      	mov	r1, r5
 801afb8:	f7e5 f96e 	bl	8000298 <__aeabi_dsub>
 801afbc:	4642      	mov	r2, r8
 801afbe:	4606      	mov	r6, r0
 801afc0:	460f      	mov	r7, r1
 801afc2:	464b      	mov	r3, r9
 801afc4:	4640      	mov	r0, r8
 801afc6:	4649      	mov	r1, r9
 801afc8:	f7e5 fb1e 	bl	8000608 <__aeabi_dmul>
 801afcc:	a35c      	add	r3, pc, #368	; (adr r3, 801b140 <__ieee754_pow+0x9f8>)
 801afce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afd2:	4604      	mov	r4, r0
 801afd4:	460d      	mov	r5, r1
 801afd6:	f7e5 fb17 	bl	8000608 <__aeabi_dmul>
 801afda:	a35b      	add	r3, pc, #364	; (adr r3, 801b148 <__ieee754_pow+0xa00>)
 801afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afe0:	f7e5 f95a 	bl	8000298 <__aeabi_dsub>
 801afe4:	4622      	mov	r2, r4
 801afe6:	462b      	mov	r3, r5
 801afe8:	f7e5 fb0e 	bl	8000608 <__aeabi_dmul>
 801afec:	a358      	add	r3, pc, #352	; (adr r3, 801b150 <__ieee754_pow+0xa08>)
 801afee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aff2:	f7e5 f953 	bl	800029c <__adddf3>
 801aff6:	4622      	mov	r2, r4
 801aff8:	462b      	mov	r3, r5
 801affa:	f7e5 fb05 	bl	8000608 <__aeabi_dmul>
 801affe:	a356      	add	r3, pc, #344	; (adr r3, 801b158 <__ieee754_pow+0xa10>)
 801b000:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b004:	f7e5 f948 	bl	8000298 <__aeabi_dsub>
 801b008:	4622      	mov	r2, r4
 801b00a:	462b      	mov	r3, r5
 801b00c:	f7e5 fafc 	bl	8000608 <__aeabi_dmul>
 801b010:	a353      	add	r3, pc, #332	; (adr r3, 801b160 <__ieee754_pow+0xa18>)
 801b012:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b016:	f7e5 f941 	bl	800029c <__adddf3>
 801b01a:	4622      	mov	r2, r4
 801b01c:	462b      	mov	r3, r5
 801b01e:	f7e5 faf3 	bl	8000608 <__aeabi_dmul>
 801b022:	4602      	mov	r2, r0
 801b024:	460b      	mov	r3, r1
 801b026:	4640      	mov	r0, r8
 801b028:	4649      	mov	r1, r9
 801b02a:	f7e5 f935 	bl	8000298 <__aeabi_dsub>
 801b02e:	4604      	mov	r4, r0
 801b030:	460d      	mov	r5, r1
 801b032:	4602      	mov	r2, r0
 801b034:	460b      	mov	r3, r1
 801b036:	4640      	mov	r0, r8
 801b038:	4649      	mov	r1, r9
 801b03a:	f7e5 fae5 	bl	8000608 <__aeabi_dmul>
 801b03e:	2200      	movs	r2, #0
 801b040:	ec41 0b19 	vmov	d9, r0, r1
 801b044:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b048:	4620      	mov	r0, r4
 801b04a:	4629      	mov	r1, r5
 801b04c:	f7e5 f924 	bl	8000298 <__aeabi_dsub>
 801b050:	4602      	mov	r2, r0
 801b052:	460b      	mov	r3, r1
 801b054:	ec51 0b19 	vmov	r0, r1, d9
 801b058:	f7e5 fc00 	bl	800085c <__aeabi_ddiv>
 801b05c:	4632      	mov	r2, r6
 801b05e:	4604      	mov	r4, r0
 801b060:	460d      	mov	r5, r1
 801b062:	463b      	mov	r3, r7
 801b064:	4640      	mov	r0, r8
 801b066:	4649      	mov	r1, r9
 801b068:	f7e5 face 	bl	8000608 <__aeabi_dmul>
 801b06c:	4632      	mov	r2, r6
 801b06e:	463b      	mov	r3, r7
 801b070:	f7e5 f914 	bl	800029c <__adddf3>
 801b074:	4602      	mov	r2, r0
 801b076:	460b      	mov	r3, r1
 801b078:	4620      	mov	r0, r4
 801b07a:	4629      	mov	r1, r5
 801b07c:	f7e5 f90c 	bl	8000298 <__aeabi_dsub>
 801b080:	4642      	mov	r2, r8
 801b082:	464b      	mov	r3, r9
 801b084:	f7e5 f908 	bl	8000298 <__aeabi_dsub>
 801b088:	460b      	mov	r3, r1
 801b08a:	4602      	mov	r2, r0
 801b08c:	493a      	ldr	r1, [pc, #232]	; (801b178 <__ieee754_pow+0xa30>)
 801b08e:	2000      	movs	r0, #0
 801b090:	f7e5 f902 	bl	8000298 <__aeabi_dsub>
 801b094:	e9cd 0100 	strd	r0, r1, [sp]
 801b098:	9b01      	ldr	r3, [sp, #4]
 801b09a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801b09e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b0a2:	da2f      	bge.n	801b104 <__ieee754_pow+0x9bc>
 801b0a4:	4650      	mov	r0, sl
 801b0a6:	ed9d 0b00 	vldr	d0, [sp]
 801b0aa:	f001 f8d9 	bl	801c260 <scalbn>
 801b0ae:	ec51 0b10 	vmov	r0, r1, d0
 801b0b2:	ec53 2b18 	vmov	r2, r3, d8
 801b0b6:	f7ff bbe0 	b.w	801a87a <__ieee754_pow+0x132>
 801b0ba:	4b30      	ldr	r3, [pc, #192]	; (801b17c <__ieee754_pow+0xa34>)
 801b0bc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801b0c0:	429e      	cmp	r6, r3
 801b0c2:	f77f af0b 	ble.w	801aedc <__ieee754_pow+0x794>
 801b0c6:	4b2e      	ldr	r3, [pc, #184]	; (801b180 <__ieee754_pow+0xa38>)
 801b0c8:	440b      	add	r3, r1
 801b0ca:	4303      	orrs	r3, r0
 801b0cc:	d00b      	beq.n	801b0e6 <__ieee754_pow+0x99e>
 801b0ce:	a326      	add	r3, pc, #152	; (adr r3, 801b168 <__ieee754_pow+0xa20>)
 801b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0d4:	ec51 0b18 	vmov	r0, r1, d8
 801b0d8:	f7e5 fa96 	bl	8000608 <__aeabi_dmul>
 801b0dc:	a322      	add	r3, pc, #136	; (adr r3, 801b168 <__ieee754_pow+0xa20>)
 801b0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0e2:	f7ff bbca 	b.w	801a87a <__ieee754_pow+0x132>
 801b0e6:	4622      	mov	r2, r4
 801b0e8:	462b      	mov	r3, r5
 801b0ea:	f7e5 f8d5 	bl	8000298 <__aeabi_dsub>
 801b0ee:	4642      	mov	r2, r8
 801b0f0:	464b      	mov	r3, r9
 801b0f2:	f7e5 fd0f 	bl	8000b14 <__aeabi_dcmpge>
 801b0f6:	2800      	cmp	r0, #0
 801b0f8:	f43f aef0 	beq.w	801aedc <__ieee754_pow+0x794>
 801b0fc:	e7e7      	b.n	801b0ce <__ieee754_pow+0x986>
 801b0fe:	f04f 0a00 	mov.w	sl, #0
 801b102:	e717      	b.n	801af34 <__ieee754_pow+0x7ec>
 801b104:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b108:	4619      	mov	r1, r3
 801b10a:	e7d2      	b.n	801b0b2 <__ieee754_pow+0x96a>
 801b10c:	491a      	ldr	r1, [pc, #104]	; (801b178 <__ieee754_pow+0xa30>)
 801b10e:	2000      	movs	r0, #0
 801b110:	f7ff bb9e 	b.w	801a850 <__ieee754_pow+0x108>
 801b114:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b118:	f7ff bb9a 	b.w	801a850 <__ieee754_pow+0x108>
 801b11c:	9000      	str	r0, [sp, #0]
 801b11e:	f7ff bb76 	b.w	801a80e <__ieee754_pow+0xc6>
 801b122:	2100      	movs	r1, #0
 801b124:	f7ff bb60 	b.w	801a7e8 <__ieee754_pow+0xa0>
 801b128:	00000000 	.word	0x00000000
 801b12c:	3fe62e43 	.word	0x3fe62e43
 801b130:	fefa39ef 	.word	0xfefa39ef
 801b134:	3fe62e42 	.word	0x3fe62e42
 801b138:	0ca86c39 	.word	0x0ca86c39
 801b13c:	be205c61 	.word	0xbe205c61
 801b140:	72bea4d0 	.word	0x72bea4d0
 801b144:	3e663769 	.word	0x3e663769
 801b148:	c5d26bf1 	.word	0xc5d26bf1
 801b14c:	3ebbbd41 	.word	0x3ebbbd41
 801b150:	af25de2c 	.word	0xaf25de2c
 801b154:	3f11566a 	.word	0x3f11566a
 801b158:	16bebd93 	.word	0x16bebd93
 801b15c:	3f66c16c 	.word	0x3f66c16c
 801b160:	5555553e 	.word	0x5555553e
 801b164:	3fc55555 	.word	0x3fc55555
 801b168:	c2f8f359 	.word	0xc2f8f359
 801b16c:	01a56e1f 	.word	0x01a56e1f
 801b170:	3fe00000 	.word	0x3fe00000
 801b174:	000fffff 	.word	0x000fffff
 801b178:	3ff00000 	.word	0x3ff00000
 801b17c:	4090cbff 	.word	0x4090cbff
 801b180:	3f6f3400 	.word	0x3f6f3400
 801b184:	652b82fe 	.word	0x652b82fe
 801b188:	3c971547 	.word	0x3c971547

0801b18c <__ieee754_sqrt>:
 801b18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b190:	ec55 4b10 	vmov	r4, r5, d0
 801b194:	4e56      	ldr	r6, [pc, #344]	; (801b2f0 <__ieee754_sqrt+0x164>)
 801b196:	43ae      	bics	r6, r5
 801b198:	ee10 0a10 	vmov	r0, s0
 801b19c:	ee10 3a10 	vmov	r3, s0
 801b1a0:	4629      	mov	r1, r5
 801b1a2:	462a      	mov	r2, r5
 801b1a4:	d110      	bne.n	801b1c8 <__ieee754_sqrt+0x3c>
 801b1a6:	ee10 2a10 	vmov	r2, s0
 801b1aa:	462b      	mov	r3, r5
 801b1ac:	f7e5 fa2c 	bl	8000608 <__aeabi_dmul>
 801b1b0:	4602      	mov	r2, r0
 801b1b2:	460b      	mov	r3, r1
 801b1b4:	4620      	mov	r0, r4
 801b1b6:	4629      	mov	r1, r5
 801b1b8:	f7e5 f870 	bl	800029c <__adddf3>
 801b1bc:	4604      	mov	r4, r0
 801b1be:	460d      	mov	r5, r1
 801b1c0:	ec45 4b10 	vmov	d0, r4, r5
 801b1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1c8:	2d00      	cmp	r5, #0
 801b1ca:	dc10      	bgt.n	801b1ee <__ieee754_sqrt+0x62>
 801b1cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b1d0:	4330      	orrs	r0, r6
 801b1d2:	d0f5      	beq.n	801b1c0 <__ieee754_sqrt+0x34>
 801b1d4:	b15d      	cbz	r5, 801b1ee <__ieee754_sqrt+0x62>
 801b1d6:	ee10 2a10 	vmov	r2, s0
 801b1da:	462b      	mov	r3, r5
 801b1dc:	ee10 0a10 	vmov	r0, s0
 801b1e0:	f7e5 f85a 	bl	8000298 <__aeabi_dsub>
 801b1e4:	4602      	mov	r2, r0
 801b1e6:	460b      	mov	r3, r1
 801b1e8:	f7e5 fb38 	bl	800085c <__aeabi_ddiv>
 801b1ec:	e7e6      	b.n	801b1bc <__ieee754_sqrt+0x30>
 801b1ee:	1509      	asrs	r1, r1, #20
 801b1f0:	d076      	beq.n	801b2e0 <__ieee754_sqrt+0x154>
 801b1f2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801b1f6:	07ce      	lsls	r6, r1, #31
 801b1f8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801b1fc:	bf5e      	ittt	pl
 801b1fe:	0fda      	lsrpl	r2, r3, #31
 801b200:	005b      	lslpl	r3, r3, #1
 801b202:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801b206:	0fda      	lsrs	r2, r3, #31
 801b208:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801b20c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801b210:	2000      	movs	r0, #0
 801b212:	106d      	asrs	r5, r5, #1
 801b214:	005b      	lsls	r3, r3, #1
 801b216:	f04f 0e16 	mov.w	lr, #22
 801b21a:	4684      	mov	ip, r0
 801b21c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801b220:	eb0c 0401 	add.w	r4, ip, r1
 801b224:	4294      	cmp	r4, r2
 801b226:	bfde      	ittt	le
 801b228:	1b12      	suble	r2, r2, r4
 801b22a:	eb04 0c01 	addle.w	ip, r4, r1
 801b22e:	1840      	addle	r0, r0, r1
 801b230:	0052      	lsls	r2, r2, #1
 801b232:	f1be 0e01 	subs.w	lr, lr, #1
 801b236:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b23a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b23e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b242:	d1ed      	bne.n	801b220 <__ieee754_sqrt+0x94>
 801b244:	4671      	mov	r1, lr
 801b246:	2720      	movs	r7, #32
 801b248:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801b24c:	4562      	cmp	r2, ip
 801b24e:	eb04 060e 	add.w	r6, r4, lr
 801b252:	dc02      	bgt.n	801b25a <__ieee754_sqrt+0xce>
 801b254:	d113      	bne.n	801b27e <__ieee754_sqrt+0xf2>
 801b256:	429e      	cmp	r6, r3
 801b258:	d811      	bhi.n	801b27e <__ieee754_sqrt+0xf2>
 801b25a:	2e00      	cmp	r6, #0
 801b25c:	eb06 0e04 	add.w	lr, r6, r4
 801b260:	da43      	bge.n	801b2ea <__ieee754_sqrt+0x15e>
 801b262:	f1be 0f00 	cmp.w	lr, #0
 801b266:	db40      	blt.n	801b2ea <__ieee754_sqrt+0x15e>
 801b268:	f10c 0801 	add.w	r8, ip, #1
 801b26c:	eba2 020c 	sub.w	r2, r2, ip
 801b270:	429e      	cmp	r6, r3
 801b272:	bf88      	it	hi
 801b274:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b278:	1b9b      	subs	r3, r3, r6
 801b27a:	4421      	add	r1, r4
 801b27c:	46c4      	mov	ip, r8
 801b27e:	0052      	lsls	r2, r2, #1
 801b280:	3f01      	subs	r7, #1
 801b282:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b286:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801b28a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b28e:	d1dd      	bne.n	801b24c <__ieee754_sqrt+0xc0>
 801b290:	4313      	orrs	r3, r2
 801b292:	d006      	beq.n	801b2a2 <__ieee754_sqrt+0x116>
 801b294:	1c4c      	adds	r4, r1, #1
 801b296:	bf13      	iteet	ne
 801b298:	3101      	addne	r1, #1
 801b29a:	3001      	addeq	r0, #1
 801b29c:	4639      	moveq	r1, r7
 801b29e:	f021 0101 	bicne.w	r1, r1, #1
 801b2a2:	1043      	asrs	r3, r0, #1
 801b2a4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801b2a8:	0849      	lsrs	r1, r1, #1
 801b2aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801b2ae:	07c2      	lsls	r2, r0, #31
 801b2b0:	bf48      	it	mi
 801b2b2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801b2b6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801b2ba:	460c      	mov	r4, r1
 801b2bc:	463d      	mov	r5, r7
 801b2be:	e77f      	b.n	801b1c0 <__ieee754_sqrt+0x34>
 801b2c0:	0ada      	lsrs	r2, r3, #11
 801b2c2:	3815      	subs	r0, #21
 801b2c4:	055b      	lsls	r3, r3, #21
 801b2c6:	2a00      	cmp	r2, #0
 801b2c8:	d0fa      	beq.n	801b2c0 <__ieee754_sqrt+0x134>
 801b2ca:	02d7      	lsls	r7, r2, #11
 801b2cc:	d50a      	bpl.n	801b2e4 <__ieee754_sqrt+0x158>
 801b2ce:	f1c1 0420 	rsb	r4, r1, #32
 801b2d2:	fa23 f404 	lsr.w	r4, r3, r4
 801b2d6:	1e4d      	subs	r5, r1, #1
 801b2d8:	408b      	lsls	r3, r1
 801b2da:	4322      	orrs	r2, r4
 801b2dc:	1b41      	subs	r1, r0, r5
 801b2de:	e788      	b.n	801b1f2 <__ieee754_sqrt+0x66>
 801b2e0:	4608      	mov	r0, r1
 801b2e2:	e7f0      	b.n	801b2c6 <__ieee754_sqrt+0x13a>
 801b2e4:	0052      	lsls	r2, r2, #1
 801b2e6:	3101      	adds	r1, #1
 801b2e8:	e7ef      	b.n	801b2ca <__ieee754_sqrt+0x13e>
 801b2ea:	46e0      	mov	r8, ip
 801b2ec:	e7be      	b.n	801b26c <__ieee754_sqrt+0xe0>
 801b2ee:	bf00      	nop
 801b2f0:	7ff00000 	.word	0x7ff00000

0801b2f4 <__ieee754_acosf>:
 801b2f4:	b508      	push	{r3, lr}
 801b2f6:	ee10 3a10 	vmov	r3, s0
 801b2fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801b2fe:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801b302:	ed2d 8b0c 	vpush	{d8-d13}
 801b306:	d10a      	bne.n	801b31e <__ieee754_acosf+0x2a>
 801b308:	ed9f 0a66 	vldr	s0, [pc, #408]	; 801b4a4 <__ieee754_acosf+0x1b0>
 801b30c:	ed9f 8a66 	vldr	s16, [pc, #408]	; 801b4a8 <__ieee754_acosf+0x1b4>
 801b310:	2b00      	cmp	r3, #0
 801b312:	bfd8      	it	le
 801b314:	eeb0 0a48 	vmovle.f32	s0, s16
 801b318:	ecbd 8b0c 	vpop	{d8-d13}
 801b31c:	bd08      	pop	{r3, pc}
 801b31e:	dd04      	ble.n	801b32a <__ieee754_acosf+0x36>
 801b320:	ee30 8a40 	vsub.f32	s16, s0, s0
 801b324:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801b328:	e7f6      	b.n	801b318 <__ieee754_acosf+0x24>
 801b32a:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 801b32e:	da3e      	bge.n	801b3ae <__ieee754_acosf+0xba>
 801b330:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 801b334:	f340 80b3 	ble.w	801b49e <__ieee754_acosf+0x1aa>
 801b338:	ee60 7a00 	vmul.f32	s15, s0, s0
 801b33c:	eddf 6a5b 	vldr	s13, [pc, #364]	; 801b4ac <__ieee754_acosf+0x1b8>
 801b340:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 801b4b0 <__ieee754_acosf+0x1bc>
 801b344:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 801b4b4 <__ieee754_acosf+0x1c0>
 801b348:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 801b4b8 <__ieee754_acosf+0x1c4>
 801b34c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801b350:	eddf 6a5a 	vldr	s13, [pc, #360]	; 801b4bc <__ieee754_acosf+0x1c8>
 801b354:	eee7 6a27 	vfma.f32	s13, s14, s15
 801b358:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801b4c0 <__ieee754_acosf+0x1cc>
 801b35c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b360:	eddf 6a58 	vldr	s13, [pc, #352]	; 801b4c4 <__ieee754_acosf+0x1d0>
 801b364:	eee7 6a27 	vfma.f32	s13, s14, s15
 801b368:	ed9f 7a57 	vldr	s14, [pc, #348]	; 801b4c8 <__ieee754_acosf+0x1d4>
 801b36c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b370:	eddf 6a56 	vldr	s13, [pc, #344]	; 801b4cc <__ieee754_acosf+0x1d8>
 801b374:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801b378:	eddf 6a55 	vldr	s13, [pc, #340]	; 801b4d0 <__ieee754_acosf+0x1dc>
 801b37c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b380:	ed9f 6a54 	vldr	s12, [pc, #336]	; 801b4d4 <__ieee754_acosf+0x1e0>
 801b384:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801b388:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b38c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b390:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b394:	eef0 7a66 	vmov.f32	s15, s13
 801b398:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b39c:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801b4d8 <__ieee754_acosf+0x1e4>
 801b3a0:	eea0 8a66 	vfms.f32	s16, s0, s13
 801b3a4:	ee30 0a48 	vsub.f32	s0, s0, s16
 801b3a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801b3ac:	e7b4      	b.n	801b318 <__ieee754_acosf+0x24>
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	eddf da3e 	vldr	s27, [pc, #248]	; 801b4ac <__ieee754_acosf+0x1b8>
 801b3b4:	eddf ca3e 	vldr	s25, [pc, #248]	; 801b4b0 <__ieee754_acosf+0x1bc>
 801b3b8:	ed9f ca40 	vldr	s24, [pc, #256]	; 801b4bc <__ieee754_acosf+0x1c8>
 801b3bc:	eddf ba40 	vldr	s23, [pc, #256]	; 801b4c0 <__ieee754_acosf+0x1cc>
 801b3c0:	ed9f ba40 	vldr	s22, [pc, #256]	; 801b4c4 <__ieee754_acosf+0x1d0>
 801b3c4:	eddf 8a40 	vldr	s17, [pc, #256]	; 801b4c8 <__ieee754_acosf+0x1d4>
 801b3c8:	ed9f da40 	vldr	s26, [pc, #256]	; 801b4cc <__ieee754_acosf+0x1d8>
 801b3cc:	eddf aa39 	vldr	s21, [pc, #228]	; 801b4b4 <__ieee754_acosf+0x1c0>
 801b3d0:	ed9f aa3f 	vldr	s20, [pc, #252]	; 801b4d0 <__ieee754_acosf+0x1dc>
 801b3d4:	eddf 9a3f 	vldr	s19, [pc, #252]	; 801b4d4 <__ieee754_acosf+0x1e0>
 801b3d8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801b3dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b3e0:	da28      	bge.n	801b434 <__ieee754_acosf+0x140>
 801b3e2:	ee30 0a09 	vadd.f32	s0, s0, s18
 801b3e6:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b3ea:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801b3ee:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801b3f2:	eeac ca80 	vfma.f32	s24, s25, s0
 801b3f6:	eeaa aa80 	vfma.f32	s20, s21, s0
 801b3fa:	eeec ba00 	vfma.f32	s23, s24, s0
 801b3fe:	eeea 9a00 	vfma.f32	s19, s20, s0
 801b402:	eeab ba80 	vfma.f32	s22, s23, s0
 801b406:	eea9 9a80 	vfma.f32	s18, s19, s0
 801b40a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801b40e:	ee68 8a80 	vmul.f32	s17, s17, s0
 801b412:	f000 f9a5 	bl	801b760 <__ieee754_sqrtf>
 801b416:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801b41a:	eddf 7a30 	vldr	s15, [pc, #192]	; 801b4dc <__ieee754_acosf+0x1e8>
 801b41e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b422:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801b426:	ee77 7a80 	vadd.f32	s15, s15, s0
 801b42a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801b4e0 <__ieee754_acosf+0x1ec>
 801b42e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801b432:	e771      	b.n	801b318 <__ieee754_acosf+0x24>
 801b434:	ee39 8a40 	vsub.f32	s16, s18, s0
 801b438:	ee28 8a27 	vmul.f32	s16, s16, s15
 801b43c:	eeb0 0a48 	vmov.f32	s0, s16
 801b440:	f000 f98e 	bl	801b760 <__ieee754_sqrtf>
 801b444:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801b448:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801b44c:	eeac ca88 	vfma.f32	s24, s25, s16
 801b450:	eeaa aa88 	vfma.f32	s20, s21, s16
 801b454:	eeec ba08 	vfma.f32	s23, s24, s16
 801b458:	ee10 3a10 	vmov	r3, s0
 801b45c:	eeab ba88 	vfma.f32	s22, s23, s16
 801b460:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801b464:	f023 030f 	bic.w	r3, r3, #15
 801b468:	eeea 9a08 	vfma.f32	s19, s20, s16
 801b46c:	ee07 3a90 	vmov	s15, r3
 801b470:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801b474:	eeb0 6a48 	vmov.f32	s12, s16
 801b478:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801b47c:	eea9 9a88 	vfma.f32	s18, s19, s16
 801b480:	ee70 6a27 	vadd.f32	s13, s0, s15
 801b484:	ee68 8a88 	vmul.f32	s17, s17, s16
 801b488:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801b48c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 801b490:	eea0 7a26 	vfma.f32	s14, s0, s13
 801b494:	ee37 0a87 	vadd.f32	s0, s15, s14
 801b498:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b49c:	e73c      	b.n	801b318 <__ieee754_acosf+0x24>
 801b49e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801b4e4 <__ieee754_acosf+0x1f0>
 801b4a2:	e739      	b.n	801b318 <__ieee754_acosf+0x24>
 801b4a4:	00000000 	.word	0x00000000
 801b4a8:	40490fdb 	.word	0x40490fdb
 801b4ac:	3811ef08 	.word	0x3811ef08
 801b4b0:	3a4f7f04 	.word	0x3a4f7f04
 801b4b4:	bf303361 	.word	0xbf303361
 801b4b8:	33a22168 	.word	0x33a22168
 801b4bc:	bd241146 	.word	0xbd241146
 801b4c0:	3e4e0aa8 	.word	0x3e4e0aa8
 801b4c4:	bea6b090 	.word	0xbea6b090
 801b4c8:	3e2aaaab 	.word	0x3e2aaaab
 801b4cc:	3d9dc62e 	.word	0x3d9dc62e
 801b4d0:	4001572d 	.word	0x4001572d
 801b4d4:	c019d139 	.word	0xc019d139
 801b4d8:	3fc90fda 	.word	0x3fc90fda
 801b4dc:	b3a22168 	.word	0xb3a22168
 801b4e0:	40490fda 	.word	0x40490fda
 801b4e4:	3fc90fdb 	.word	0x3fc90fdb

0801b4e8 <__ieee754_rem_pio2f>:
 801b4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4ea:	ee10 6a10 	vmov	r6, s0
 801b4ee:	4b8e      	ldr	r3, [pc, #568]	; (801b728 <__ieee754_rem_pio2f+0x240>)
 801b4f0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801b4f4:	429d      	cmp	r5, r3
 801b4f6:	b087      	sub	sp, #28
 801b4f8:	eef0 7a40 	vmov.f32	s15, s0
 801b4fc:	4604      	mov	r4, r0
 801b4fe:	dc05      	bgt.n	801b50c <__ieee754_rem_pio2f+0x24>
 801b500:	2300      	movs	r3, #0
 801b502:	ed80 0a00 	vstr	s0, [r0]
 801b506:	6043      	str	r3, [r0, #4]
 801b508:	2000      	movs	r0, #0
 801b50a:	e01a      	b.n	801b542 <__ieee754_rem_pio2f+0x5a>
 801b50c:	4b87      	ldr	r3, [pc, #540]	; (801b72c <__ieee754_rem_pio2f+0x244>)
 801b50e:	429d      	cmp	r5, r3
 801b510:	dc46      	bgt.n	801b5a0 <__ieee754_rem_pio2f+0xb8>
 801b512:	2e00      	cmp	r6, #0
 801b514:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801b730 <__ieee754_rem_pio2f+0x248>
 801b518:	4b86      	ldr	r3, [pc, #536]	; (801b734 <__ieee754_rem_pio2f+0x24c>)
 801b51a:	f025 050f 	bic.w	r5, r5, #15
 801b51e:	dd1f      	ble.n	801b560 <__ieee754_rem_pio2f+0x78>
 801b520:	429d      	cmp	r5, r3
 801b522:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b526:	d00e      	beq.n	801b546 <__ieee754_rem_pio2f+0x5e>
 801b528:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801b738 <__ieee754_rem_pio2f+0x250>
 801b52c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801b530:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b534:	ed80 0a00 	vstr	s0, [r0]
 801b538:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b53c:	2001      	movs	r0, #1
 801b53e:	edc4 7a01 	vstr	s15, [r4, #4]
 801b542:	b007      	add	sp, #28
 801b544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b546:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801b73c <__ieee754_rem_pio2f+0x254>
 801b54a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801b740 <__ieee754_rem_pio2f+0x258>
 801b54e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b552:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801b556:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b55a:	edc0 6a00 	vstr	s13, [r0]
 801b55e:	e7eb      	b.n	801b538 <__ieee754_rem_pio2f+0x50>
 801b560:	429d      	cmp	r5, r3
 801b562:	ee77 7a80 	vadd.f32	s15, s15, s0
 801b566:	d00e      	beq.n	801b586 <__ieee754_rem_pio2f+0x9e>
 801b568:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801b738 <__ieee754_rem_pio2f+0x250>
 801b56c:	ee37 0a87 	vadd.f32	s0, s15, s14
 801b570:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b574:	ed80 0a00 	vstr	s0, [r0]
 801b578:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b57c:	f04f 30ff 	mov.w	r0, #4294967295
 801b580:	edc4 7a01 	vstr	s15, [r4, #4]
 801b584:	e7dd      	b.n	801b542 <__ieee754_rem_pio2f+0x5a>
 801b586:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801b73c <__ieee754_rem_pio2f+0x254>
 801b58a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801b740 <__ieee754_rem_pio2f+0x258>
 801b58e:	ee77 7a80 	vadd.f32	s15, s15, s0
 801b592:	ee77 6a87 	vadd.f32	s13, s15, s14
 801b596:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b59a:	edc0 6a00 	vstr	s13, [r0]
 801b59e:	e7eb      	b.n	801b578 <__ieee754_rem_pio2f+0x90>
 801b5a0:	4b68      	ldr	r3, [pc, #416]	; (801b744 <__ieee754_rem_pio2f+0x25c>)
 801b5a2:	429d      	cmp	r5, r3
 801b5a4:	dc72      	bgt.n	801b68c <__ieee754_rem_pio2f+0x1a4>
 801b5a6:	f000 fee1 	bl	801c36c <fabsf>
 801b5aa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801b748 <__ieee754_rem_pio2f+0x260>
 801b5ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b5b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b5b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b5ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b5be:	ee17 0a90 	vmov	r0, s15
 801b5c2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801b730 <__ieee754_rem_pio2f+0x248>
 801b5c6:	eea7 0a67 	vfms.f32	s0, s14, s15
 801b5ca:	281f      	cmp	r0, #31
 801b5cc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801b738 <__ieee754_rem_pio2f+0x250>
 801b5d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b5d4:	eeb1 6a47 	vneg.f32	s12, s14
 801b5d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 801b5dc:	ee16 2a90 	vmov	r2, s13
 801b5e0:	dc1c      	bgt.n	801b61c <__ieee754_rem_pio2f+0x134>
 801b5e2:	495a      	ldr	r1, [pc, #360]	; (801b74c <__ieee754_rem_pio2f+0x264>)
 801b5e4:	1e47      	subs	r7, r0, #1
 801b5e6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801b5ea:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801b5ee:	428b      	cmp	r3, r1
 801b5f0:	d014      	beq.n	801b61c <__ieee754_rem_pio2f+0x134>
 801b5f2:	6022      	str	r2, [r4, #0]
 801b5f4:	ed94 7a00 	vldr	s14, [r4]
 801b5f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b5fc:	2e00      	cmp	r6, #0
 801b5fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b602:	ed84 0a01 	vstr	s0, [r4, #4]
 801b606:	da9c      	bge.n	801b542 <__ieee754_rem_pio2f+0x5a>
 801b608:	eeb1 7a47 	vneg.f32	s14, s14
 801b60c:	eeb1 0a40 	vneg.f32	s0, s0
 801b610:	ed84 7a00 	vstr	s14, [r4]
 801b614:	ed84 0a01 	vstr	s0, [r4, #4]
 801b618:	4240      	negs	r0, r0
 801b61a:	e792      	b.n	801b542 <__ieee754_rem_pio2f+0x5a>
 801b61c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801b620:	15eb      	asrs	r3, r5, #23
 801b622:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801b626:	2d08      	cmp	r5, #8
 801b628:	dde3      	ble.n	801b5f2 <__ieee754_rem_pio2f+0x10a>
 801b62a:	eddf 7a44 	vldr	s15, [pc, #272]	; 801b73c <__ieee754_rem_pio2f+0x254>
 801b62e:	eef0 6a40 	vmov.f32	s13, s0
 801b632:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b636:	ee30 0a66 	vsub.f32	s0, s0, s13
 801b63a:	eea6 0a27 	vfma.f32	s0, s12, s15
 801b63e:	eddf 7a40 	vldr	s15, [pc, #256]	; 801b740 <__ieee754_rem_pio2f+0x258>
 801b642:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801b646:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801b64a:	eef0 7a40 	vmov.f32	s15, s0
 801b64e:	ee15 2a90 	vmov	r2, s11
 801b652:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801b656:	1a5b      	subs	r3, r3, r1
 801b658:	2b19      	cmp	r3, #25
 801b65a:	dc04      	bgt.n	801b666 <__ieee754_rem_pio2f+0x17e>
 801b65c:	edc4 5a00 	vstr	s11, [r4]
 801b660:	eeb0 0a66 	vmov.f32	s0, s13
 801b664:	e7c6      	b.n	801b5f4 <__ieee754_rem_pio2f+0x10c>
 801b666:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801b750 <__ieee754_rem_pio2f+0x268>
 801b66a:	eeb0 0a66 	vmov.f32	s0, s13
 801b66e:	eea6 0a25 	vfma.f32	s0, s12, s11
 801b672:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801b676:	eddf 6a37 	vldr	s13, [pc, #220]	; 801b754 <__ieee754_rem_pio2f+0x26c>
 801b67a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801b67e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801b682:	ee30 7a67 	vsub.f32	s14, s0, s15
 801b686:	ed84 7a00 	vstr	s14, [r4]
 801b68a:	e7b3      	b.n	801b5f4 <__ieee754_rem_pio2f+0x10c>
 801b68c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801b690:	db06      	blt.n	801b6a0 <__ieee754_rem_pio2f+0x1b8>
 801b692:	ee70 7a40 	vsub.f32	s15, s0, s0
 801b696:	edc0 7a01 	vstr	s15, [r0, #4]
 801b69a:	edc0 7a00 	vstr	s15, [r0]
 801b69e:	e733      	b.n	801b508 <__ieee754_rem_pio2f+0x20>
 801b6a0:	15ea      	asrs	r2, r5, #23
 801b6a2:	3a86      	subs	r2, #134	; 0x86
 801b6a4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801b6a8:	ee07 3a90 	vmov	s15, r3
 801b6ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b6b0:	eddf 6a29 	vldr	s13, [pc, #164]	; 801b758 <__ieee754_rem_pio2f+0x270>
 801b6b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b6b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b6bc:	ed8d 7a03 	vstr	s14, [sp, #12]
 801b6c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b6c4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b6c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b6cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b6d0:	ed8d 7a04 	vstr	s14, [sp, #16]
 801b6d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b6d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 801b6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6e0:	edcd 7a05 	vstr	s15, [sp, #20]
 801b6e4:	d11e      	bne.n	801b724 <__ieee754_rem_pio2f+0x23c>
 801b6e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801b6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6ee:	bf14      	ite	ne
 801b6f0:	2302      	movne	r3, #2
 801b6f2:	2301      	moveq	r3, #1
 801b6f4:	4919      	ldr	r1, [pc, #100]	; (801b75c <__ieee754_rem_pio2f+0x274>)
 801b6f6:	9101      	str	r1, [sp, #4]
 801b6f8:	2102      	movs	r1, #2
 801b6fa:	9100      	str	r1, [sp, #0]
 801b6fc:	a803      	add	r0, sp, #12
 801b6fe:	4621      	mov	r1, r4
 801b700:	f000 f892 	bl	801b828 <__kernel_rem_pio2f>
 801b704:	2e00      	cmp	r6, #0
 801b706:	f6bf af1c 	bge.w	801b542 <__ieee754_rem_pio2f+0x5a>
 801b70a:	edd4 7a00 	vldr	s15, [r4]
 801b70e:	eef1 7a67 	vneg.f32	s15, s15
 801b712:	edc4 7a00 	vstr	s15, [r4]
 801b716:	edd4 7a01 	vldr	s15, [r4, #4]
 801b71a:	eef1 7a67 	vneg.f32	s15, s15
 801b71e:	edc4 7a01 	vstr	s15, [r4, #4]
 801b722:	e779      	b.n	801b618 <__ieee754_rem_pio2f+0x130>
 801b724:	2303      	movs	r3, #3
 801b726:	e7e5      	b.n	801b6f4 <__ieee754_rem_pio2f+0x20c>
 801b728:	3f490fd8 	.word	0x3f490fd8
 801b72c:	4016cbe3 	.word	0x4016cbe3
 801b730:	3fc90f80 	.word	0x3fc90f80
 801b734:	3fc90fd0 	.word	0x3fc90fd0
 801b738:	37354443 	.word	0x37354443
 801b73c:	37354400 	.word	0x37354400
 801b740:	2e85a308 	.word	0x2e85a308
 801b744:	43490f80 	.word	0x43490f80
 801b748:	3f22f984 	.word	0x3f22f984
 801b74c:	0801d188 	.word	0x0801d188
 801b750:	2e85a300 	.word	0x2e85a300
 801b754:	248d3132 	.word	0x248d3132
 801b758:	43800000 	.word	0x43800000
 801b75c:	0801d208 	.word	0x0801d208

0801b760 <__ieee754_sqrtf>:
 801b760:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801b764:	4770      	bx	lr
	...

0801b768 <__kernel_cosf>:
 801b768:	ee10 3a10 	vmov	r3, s0
 801b76c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b770:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801b774:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801b778:	da05      	bge.n	801b786 <__kernel_cosf+0x1e>
 801b77a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801b77e:	ee17 2a90 	vmov	r2, s15
 801b782:	2a00      	cmp	r2, #0
 801b784:	d03d      	beq.n	801b802 <__kernel_cosf+0x9a>
 801b786:	ee60 5a00 	vmul.f32	s11, s0, s0
 801b78a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801b808 <__kernel_cosf+0xa0>
 801b78e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801b80c <__kernel_cosf+0xa4>
 801b792:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801b810 <__kernel_cosf+0xa8>
 801b796:	4a1f      	ldr	r2, [pc, #124]	; (801b814 <__kernel_cosf+0xac>)
 801b798:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801b79c:	4293      	cmp	r3, r2
 801b79e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801b818 <__kernel_cosf+0xb0>
 801b7a2:	eee7 7a25 	vfma.f32	s15, s14, s11
 801b7a6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801b81c <__kernel_cosf+0xb4>
 801b7aa:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801b7ae:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801b820 <__kernel_cosf+0xb8>
 801b7b2:	eee7 7a25 	vfma.f32	s15, s14, s11
 801b7b6:	eeb0 7a66 	vmov.f32	s14, s13
 801b7ba:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801b7be:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801b7c2:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801b7c6:	ee67 6a25 	vmul.f32	s13, s14, s11
 801b7ca:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801b7ce:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801b7d2:	dc04      	bgt.n	801b7de <__kernel_cosf+0x76>
 801b7d4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801b7d8:	ee36 0a47 	vsub.f32	s0, s12, s14
 801b7dc:	4770      	bx	lr
 801b7de:	4a11      	ldr	r2, [pc, #68]	; (801b824 <__kernel_cosf+0xbc>)
 801b7e0:	4293      	cmp	r3, r2
 801b7e2:	bfda      	itte	le
 801b7e4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801b7e8:	ee06 3a90 	vmovle	s13, r3
 801b7ec:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801b7f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b7f4:	ee36 0a66 	vsub.f32	s0, s12, s13
 801b7f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b7fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b800:	4770      	bx	lr
 801b802:	eeb0 0a46 	vmov.f32	s0, s12
 801b806:	4770      	bx	lr
 801b808:	ad47d74e 	.word	0xad47d74e
 801b80c:	310f74f6 	.word	0x310f74f6
 801b810:	3d2aaaab 	.word	0x3d2aaaab
 801b814:	3e999999 	.word	0x3e999999
 801b818:	b493f27c 	.word	0xb493f27c
 801b81c:	37d00d01 	.word	0x37d00d01
 801b820:	bab60b61 	.word	0xbab60b61
 801b824:	3f480000 	.word	0x3f480000

0801b828 <__kernel_rem_pio2f>:
 801b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b82c:	ed2d 8b04 	vpush	{d8-d9}
 801b830:	b0d7      	sub	sp, #348	; 0x15c
 801b832:	4616      	mov	r6, r2
 801b834:	4698      	mov	r8, r3
 801b836:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801b838:	4bbb      	ldr	r3, [pc, #748]	; (801bb28 <__kernel_rem_pio2f+0x300>)
 801b83a:	9001      	str	r0, [sp, #4]
 801b83c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801b840:	1d33      	adds	r3, r6, #4
 801b842:	460d      	mov	r5, r1
 801b844:	f108 39ff 	add.w	r9, r8, #4294967295
 801b848:	db29      	blt.n	801b89e <__kernel_rem_pio2f+0x76>
 801b84a:	1ef1      	subs	r1, r6, #3
 801b84c:	bf48      	it	mi
 801b84e:	1d31      	addmi	r1, r6, #4
 801b850:	10c9      	asrs	r1, r1, #3
 801b852:	1c4c      	adds	r4, r1, #1
 801b854:	00e3      	lsls	r3, r4, #3
 801b856:	9302      	str	r3, [sp, #8]
 801b858:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801b85a:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801bb38 <__kernel_rem_pio2f+0x310>
 801b85e:	eba1 0009 	sub.w	r0, r1, r9
 801b862:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801b866:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801b86a:	eb07 0c09 	add.w	ip, r7, r9
 801b86e:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801b872:	2300      	movs	r3, #0
 801b874:	4563      	cmp	r3, ip
 801b876:	dd14      	ble.n	801b8a2 <__kernel_rem_pio2f+0x7a>
 801b878:	ab1a      	add	r3, sp, #104	; 0x68
 801b87a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801b87e:	46cc      	mov	ip, r9
 801b880:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801b884:	f1c8 0b01 	rsb	fp, r8, #1
 801b888:	eb0b 020c 	add.w	r2, fp, ip
 801b88c:	4297      	cmp	r7, r2
 801b88e:	db27      	blt.n	801b8e0 <__kernel_rem_pio2f+0xb8>
 801b890:	f8dd e004 	ldr.w	lr, [sp, #4]
 801b894:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801bb38 <__kernel_rem_pio2f+0x310>
 801b898:	4618      	mov	r0, r3
 801b89a:	2200      	movs	r2, #0
 801b89c:	e016      	b.n	801b8cc <__kernel_rem_pio2f+0xa4>
 801b89e:	2100      	movs	r1, #0
 801b8a0:	e7d7      	b.n	801b852 <__kernel_rem_pio2f+0x2a>
 801b8a2:	42d8      	cmn	r0, r3
 801b8a4:	bf5d      	ittte	pl
 801b8a6:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801b8aa:	ee07 2a90 	vmovpl	s15, r2
 801b8ae:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801b8b2:	eef0 7a47 	vmovmi.f32	s15, s14
 801b8b6:	ecea 7a01 	vstmia	sl!, {s15}
 801b8ba:	3301      	adds	r3, #1
 801b8bc:	e7da      	b.n	801b874 <__kernel_rem_pio2f+0x4c>
 801b8be:	ecfe 6a01 	vldmia	lr!, {s13}
 801b8c2:	ed90 7a00 	vldr	s14, [r0]
 801b8c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b8ca:	3201      	adds	r2, #1
 801b8cc:	454a      	cmp	r2, r9
 801b8ce:	f1a0 0004 	sub.w	r0, r0, #4
 801b8d2:	ddf4      	ble.n	801b8be <__kernel_rem_pio2f+0x96>
 801b8d4:	ecea 7a01 	vstmia	sl!, {s15}
 801b8d8:	3304      	adds	r3, #4
 801b8da:	f10c 0c01 	add.w	ip, ip, #1
 801b8de:	e7d3      	b.n	801b888 <__kernel_rem_pio2f+0x60>
 801b8e0:	ab06      	add	r3, sp, #24
 801b8e2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801b8e6:	9304      	str	r3, [sp, #16]
 801b8e8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801b8ea:	eddf 8a92 	vldr	s17, [pc, #584]	; 801bb34 <__kernel_rem_pio2f+0x30c>
 801b8ee:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801bb30 <__kernel_rem_pio2f+0x308>
 801b8f2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801b8f6:	9303      	str	r3, [sp, #12]
 801b8f8:	46ba      	mov	sl, r7
 801b8fa:	ab56      	add	r3, sp, #344	; 0x158
 801b8fc:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801b900:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801b904:	ab06      	add	r3, sp, #24
 801b906:	4618      	mov	r0, r3
 801b908:	4652      	mov	r2, sl
 801b90a:	2a00      	cmp	r2, #0
 801b90c:	dc51      	bgt.n	801b9b2 <__kernel_rem_pio2f+0x18a>
 801b90e:	4620      	mov	r0, r4
 801b910:	9305      	str	r3, [sp, #20]
 801b912:	f000 fd7b 	bl	801c40c <scalbnf>
 801b916:	eeb0 8a40 	vmov.f32	s16, s0
 801b91a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801b91e:	ee28 0a00 	vmul.f32	s0, s16, s0
 801b922:	f000 fd2b 	bl	801c37c <floorf>
 801b926:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801b92a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801b92e:	2c00      	cmp	r4, #0
 801b930:	9b05      	ldr	r3, [sp, #20]
 801b932:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801b936:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b93a:	edcd 7a00 	vstr	s15, [sp]
 801b93e:	ee38 8a40 	vsub.f32	s16, s16, s0
 801b942:	dd4b      	ble.n	801b9dc <__kernel_rem_pio2f+0x1b4>
 801b944:	f10a 3cff 	add.w	ip, sl, #4294967295
 801b948:	aa06      	add	r2, sp, #24
 801b94a:	f1c4 0e08 	rsb	lr, r4, #8
 801b94e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801b952:	ee17 1a90 	vmov	r1, s15
 801b956:	fa42 f00e 	asr.w	r0, r2, lr
 801b95a:	4401      	add	r1, r0
 801b95c:	9100      	str	r1, [sp, #0]
 801b95e:	fa00 f00e 	lsl.w	r0, r0, lr
 801b962:	a906      	add	r1, sp, #24
 801b964:	1a12      	subs	r2, r2, r0
 801b966:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801b96a:	f1c4 0007 	rsb	r0, r4, #7
 801b96e:	fa42 fb00 	asr.w	fp, r2, r0
 801b972:	f1bb 0f00 	cmp.w	fp, #0
 801b976:	dd43      	ble.n	801ba00 <__kernel_rem_pio2f+0x1d8>
 801b978:	9a00      	ldr	r2, [sp, #0]
 801b97a:	f04f 0e00 	mov.w	lr, #0
 801b97e:	3201      	adds	r2, #1
 801b980:	9200      	str	r2, [sp, #0]
 801b982:	4670      	mov	r0, lr
 801b984:	45f2      	cmp	sl, lr
 801b986:	dc6c      	bgt.n	801ba62 <__kernel_rem_pio2f+0x23a>
 801b988:	2c00      	cmp	r4, #0
 801b98a:	dd04      	ble.n	801b996 <__kernel_rem_pio2f+0x16e>
 801b98c:	2c01      	cmp	r4, #1
 801b98e:	d079      	beq.n	801ba84 <__kernel_rem_pio2f+0x25c>
 801b990:	2c02      	cmp	r4, #2
 801b992:	f000 8082 	beq.w	801ba9a <__kernel_rem_pio2f+0x272>
 801b996:	f1bb 0f02 	cmp.w	fp, #2
 801b99a:	d131      	bne.n	801ba00 <__kernel_rem_pio2f+0x1d8>
 801b99c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b9a0:	ee30 8a48 	vsub.f32	s16, s0, s16
 801b9a4:	b360      	cbz	r0, 801ba00 <__kernel_rem_pio2f+0x1d8>
 801b9a6:	4620      	mov	r0, r4
 801b9a8:	f000 fd30 	bl	801c40c <scalbnf>
 801b9ac:	ee38 8a40 	vsub.f32	s16, s16, s0
 801b9b0:	e026      	b.n	801ba00 <__kernel_rem_pio2f+0x1d8>
 801b9b2:	ee60 7a28 	vmul.f32	s15, s0, s17
 801b9b6:	3a01      	subs	r2, #1
 801b9b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b9bc:	a942      	add	r1, sp, #264	; 0x108
 801b9be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b9c2:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801b9c6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801b9ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b9ce:	eca0 0a01 	vstmia	r0!, {s0}
 801b9d2:	ed9c 0a00 	vldr	s0, [ip]
 801b9d6:	ee37 0a80 	vadd.f32	s0, s15, s0
 801b9da:	e796      	b.n	801b90a <__kernel_rem_pio2f+0xe2>
 801b9dc:	d107      	bne.n	801b9ee <__kernel_rem_pio2f+0x1c6>
 801b9de:	f10a 32ff 	add.w	r2, sl, #4294967295
 801b9e2:	a906      	add	r1, sp, #24
 801b9e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801b9e8:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801b9ec:	e7c1      	b.n	801b972 <__kernel_rem_pio2f+0x14a>
 801b9ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b9f2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9fa:	da2f      	bge.n	801ba5c <__kernel_rem_pio2f+0x234>
 801b9fc:	f04f 0b00 	mov.w	fp, #0
 801ba00:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801ba04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba08:	f040 8098 	bne.w	801bb3c <__kernel_rem_pio2f+0x314>
 801ba0c:	f10a 33ff 	add.w	r3, sl, #4294967295
 801ba10:	469c      	mov	ip, r3
 801ba12:	2200      	movs	r2, #0
 801ba14:	45bc      	cmp	ip, r7
 801ba16:	da48      	bge.n	801baaa <__kernel_rem_pio2f+0x282>
 801ba18:	2a00      	cmp	r2, #0
 801ba1a:	d05f      	beq.n	801badc <__kernel_rem_pio2f+0x2b4>
 801ba1c:	aa06      	add	r2, sp, #24
 801ba1e:	3c08      	subs	r4, #8
 801ba20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801ba24:	2900      	cmp	r1, #0
 801ba26:	d07d      	beq.n	801bb24 <__kernel_rem_pio2f+0x2fc>
 801ba28:	4620      	mov	r0, r4
 801ba2a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ba2e:	9301      	str	r3, [sp, #4]
 801ba30:	f000 fcec 	bl	801c40c <scalbnf>
 801ba34:	9b01      	ldr	r3, [sp, #4]
 801ba36:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801bb34 <__kernel_rem_pio2f+0x30c>
 801ba3a:	4619      	mov	r1, r3
 801ba3c:	2900      	cmp	r1, #0
 801ba3e:	f280 80af 	bge.w	801bba0 <__kernel_rem_pio2f+0x378>
 801ba42:	4618      	mov	r0, r3
 801ba44:	2400      	movs	r4, #0
 801ba46:	2800      	cmp	r0, #0
 801ba48:	f2c0 80d0 	blt.w	801bbec <__kernel_rem_pio2f+0x3c4>
 801ba4c:	a942      	add	r1, sp, #264	; 0x108
 801ba4e:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801ba52:	4a36      	ldr	r2, [pc, #216]	; (801bb2c <__kernel_rem_pio2f+0x304>)
 801ba54:	eddf 7a38 	vldr	s15, [pc, #224]	; 801bb38 <__kernel_rem_pio2f+0x310>
 801ba58:	2100      	movs	r1, #0
 801ba5a:	e0bb      	b.n	801bbd4 <__kernel_rem_pio2f+0x3ac>
 801ba5c:	f04f 0b02 	mov.w	fp, #2
 801ba60:	e78a      	b.n	801b978 <__kernel_rem_pio2f+0x150>
 801ba62:	681a      	ldr	r2, [r3, #0]
 801ba64:	b948      	cbnz	r0, 801ba7a <__kernel_rem_pio2f+0x252>
 801ba66:	b11a      	cbz	r2, 801ba70 <__kernel_rem_pio2f+0x248>
 801ba68:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801ba6c:	601a      	str	r2, [r3, #0]
 801ba6e:	2201      	movs	r2, #1
 801ba70:	f10e 0e01 	add.w	lr, lr, #1
 801ba74:	3304      	adds	r3, #4
 801ba76:	4610      	mov	r0, r2
 801ba78:	e784      	b.n	801b984 <__kernel_rem_pio2f+0x15c>
 801ba7a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801ba7e:	601a      	str	r2, [r3, #0]
 801ba80:	4602      	mov	r2, r0
 801ba82:	e7f5      	b.n	801ba70 <__kernel_rem_pio2f+0x248>
 801ba84:	f10a 3cff 	add.w	ip, sl, #4294967295
 801ba88:	ab06      	add	r3, sp, #24
 801ba8a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ba8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ba92:	aa06      	add	r2, sp, #24
 801ba94:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801ba98:	e77d      	b.n	801b996 <__kernel_rem_pio2f+0x16e>
 801ba9a:	f10a 3cff 	add.w	ip, sl, #4294967295
 801ba9e:	ab06      	add	r3, sp, #24
 801baa0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801baa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801baa8:	e7f3      	b.n	801ba92 <__kernel_rem_pio2f+0x26a>
 801baaa:	a906      	add	r1, sp, #24
 801baac:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801bab0:	f10c 3cff 	add.w	ip, ip, #4294967295
 801bab4:	4302      	orrs	r2, r0
 801bab6:	e7ad      	b.n	801ba14 <__kernel_rem_pio2f+0x1ec>
 801bab8:	3001      	adds	r0, #1
 801baba:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801babe:	2a00      	cmp	r2, #0
 801bac0:	d0fa      	beq.n	801bab8 <__kernel_rem_pio2f+0x290>
 801bac2:	a91a      	add	r1, sp, #104	; 0x68
 801bac4:	eb0a 0208 	add.w	r2, sl, r8
 801bac8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801bacc:	f10a 0301 	add.w	r3, sl, #1
 801bad0:	eb0a 0100 	add.w	r1, sl, r0
 801bad4:	4299      	cmp	r1, r3
 801bad6:	da04      	bge.n	801bae2 <__kernel_rem_pio2f+0x2ba>
 801bad8:	468a      	mov	sl, r1
 801bada:	e70e      	b.n	801b8fa <__kernel_rem_pio2f+0xd2>
 801badc:	9b04      	ldr	r3, [sp, #16]
 801bade:	2001      	movs	r0, #1
 801bae0:	e7eb      	b.n	801baba <__kernel_rem_pio2f+0x292>
 801bae2:	9803      	ldr	r0, [sp, #12]
 801bae4:	f8dd c004 	ldr.w	ip, [sp, #4]
 801bae8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801baec:	9000      	str	r0, [sp, #0]
 801baee:	ee07 0a90 	vmov	s15, r0
 801baf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801baf6:	2000      	movs	r0, #0
 801baf8:	ece2 7a01 	vstmia	r2!, {s15}
 801bafc:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801bb38 <__kernel_rem_pio2f+0x310>
 801bb00:	4696      	mov	lr, r2
 801bb02:	4548      	cmp	r0, r9
 801bb04:	dd06      	ble.n	801bb14 <__kernel_rem_pio2f+0x2ec>
 801bb06:	a842      	add	r0, sp, #264	; 0x108
 801bb08:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801bb0c:	edc0 7a00 	vstr	s15, [r0]
 801bb10:	3301      	adds	r3, #1
 801bb12:	e7df      	b.n	801bad4 <__kernel_rem_pio2f+0x2ac>
 801bb14:	ecfc 6a01 	vldmia	ip!, {s13}
 801bb18:	ed3e 7a01 	vldmdb	lr!, {s14}
 801bb1c:	3001      	adds	r0, #1
 801bb1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801bb22:	e7ee      	b.n	801bb02 <__kernel_rem_pio2f+0x2da>
 801bb24:	3b01      	subs	r3, #1
 801bb26:	e779      	b.n	801ba1c <__kernel_rem_pio2f+0x1f4>
 801bb28:	0801d54c 	.word	0x0801d54c
 801bb2c:	0801d520 	.word	0x0801d520
 801bb30:	43800000 	.word	0x43800000
 801bb34:	3b800000 	.word	0x3b800000
 801bb38:	00000000 	.word	0x00000000
 801bb3c:	9b02      	ldr	r3, [sp, #8]
 801bb3e:	eeb0 0a48 	vmov.f32	s0, s16
 801bb42:	1b98      	subs	r0, r3, r6
 801bb44:	f000 fc62 	bl	801c40c <scalbnf>
 801bb48:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801bb30 <__kernel_rem_pio2f+0x308>
 801bb4c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801bb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb54:	db1b      	blt.n	801bb8e <__kernel_rem_pio2f+0x366>
 801bb56:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801bb34 <__kernel_rem_pio2f+0x30c>
 801bb5a:	ee60 7a27 	vmul.f32	s15, s0, s15
 801bb5e:	aa06      	add	r2, sp, #24
 801bb60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bb64:	a906      	add	r1, sp, #24
 801bb66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bb6a:	3408      	adds	r4, #8
 801bb6c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801bb70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bb74:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bb78:	ee10 3a10 	vmov	r3, s0
 801bb7c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801bb80:	ee17 2a90 	vmov	r2, s15
 801bb84:	f10a 0301 	add.w	r3, sl, #1
 801bb88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801bb8c:	e74c      	b.n	801ba28 <__kernel_rem_pio2f+0x200>
 801bb8e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bb92:	aa06      	add	r2, sp, #24
 801bb94:	ee10 3a10 	vmov	r3, s0
 801bb98:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801bb9c:	4653      	mov	r3, sl
 801bb9e:	e743      	b.n	801ba28 <__kernel_rem_pio2f+0x200>
 801bba0:	aa42      	add	r2, sp, #264	; 0x108
 801bba2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801bba6:	aa06      	add	r2, sp, #24
 801bba8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801bbac:	9201      	str	r2, [sp, #4]
 801bbae:	ee07 2a90 	vmov	s15, r2
 801bbb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bbb6:	3901      	subs	r1, #1
 801bbb8:	ee67 7a80 	vmul.f32	s15, s15, s0
 801bbbc:	ee20 0a07 	vmul.f32	s0, s0, s14
 801bbc0:	edc0 7a00 	vstr	s15, [r0]
 801bbc4:	e73a      	b.n	801ba3c <__kernel_rem_pio2f+0x214>
 801bbc6:	ecf2 6a01 	vldmia	r2!, {s13}
 801bbca:	ecb6 7a01 	vldmia	r6!, {s14}
 801bbce:	eee6 7a87 	vfma.f32	s15, s13, s14
 801bbd2:	3101      	adds	r1, #1
 801bbd4:	42b9      	cmp	r1, r7
 801bbd6:	dc01      	bgt.n	801bbdc <__kernel_rem_pio2f+0x3b4>
 801bbd8:	428c      	cmp	r4, r1
 801bbda:	daf4      	bge.n	801bbc6 <__kernel_rem_pio2f+0x39e>
 801bbdc:	aa56      	add	r2, sp, #344	; 0x158
 801bbde:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801bbe2:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801bbe6:	3801      	subs	r0, #1
 801bbe8:	3401      	adds	r4, #1
 801bbea:	e72c      	b.n	801ba46 <__kernel_rem_pio2f+0x21e>
 801bbec:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801bbee:	2a02      	cmp	r2, #2
 801bbf0:	dc0a      	bgt.n	801bc08 <__kernel_rem_pio2f+0x3e0>
 801bbf2:	2a00      	cmp	r2, #0
 801bbf4:	dc61      	bgt.n	801bcba <__kernel_rem_pio2f+0x492>
 801bbf6:	d03c      	beq.n	801bc72 <__kernel_rem_pio2f+0x44a>
 801bbf8:	9b00      	ldr	r3, [sp, #0]
 801bbfa:	f003 0007 	and.w	r0, r3, #7
 801bbfe:	b057      	add	sp, #348	; 0x15c
 801bc00:	ecbd 8b04 	vpop	{d8-d9}
 801bc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc08:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801bc0a:	2a03      	cmp	r2, #3
 801bc0c:	d1f4      	bne.n	801bbf8 <__kernel_rem_pio2f+0x3d0>
 801bc0e:	aa2e      	add	r2, sp, #184	; 0xb8
 801bc10:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801bc14:	4608      	mov	r0, r1
 801bc16:	461c      	mov	r4, r3
 801bc18:	2c00      	cmp	r4, #0
 801bc1a:	f1a0 0004 	sub.w	r0, r0, #4
 801bc1e:	dc59      	bgt.n	801bcd4 <__kernel_rem_pio2f+0x4ac>
 801bc20:	4618      	mov	r0, r3
 801bc22:	2801      	cmp	r0, #1
 801bc24:	f1a1 0104 	sub.w	r1, r1, #4
 801bc28:	dc64      	bgt.n	801bcf4 <__kernel_rem_pio2f+0x4cc>
 801bc2a:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801bb38 <__kernel_rem_pio2f+0x310>
 801bc2e:	2b01      	cmp	r3, #1
 801bc30:	dc70      	bgt.n	801bd14 <__kernel_rem_pio2f+0x4ec>
 801bc32:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801bc36:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801bc3a:	f1bb 0f00 	cmp.w	fp, #0
 801bc3e:	d172      	bne.n	801bd26 <__kernel_rem_pio2f+0x4fe>
 801bc40:	edc5 6a00 	vstr	s13, [r5]
 801bc44:	ed85 7a01 	vstr	s14, [r5, #4]
 801bc48:	edc5 7a02 	vstr	s15, [r5, #8]
 801bc4c:	e7d4      	b.n	801bbf8 <__kernel_rem_pio2f+0x3d0>
 801bc4e:	aa2e      	add	r2, sp, #184	; 0xb8
 801bc50:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801bc54:	ed91 7a00 	vldr	s14, [r1]
 801bc58:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bc5c:	3b01      	subs	r3, #1
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	daf5      	bge.n	801bc4e <__kernel_rem_pio2f+0x426>
 801bc62:	f1bb 0f00 	cmp.w	fp, #0
 801bc66:	d001      	beq.n	801bc6c <__kernel_rem_pio2f+0x444>
 801bc68:	eef1 7a67 	vneg.f32	s15, s15
 801bc6c:	edc5 7a00 	vstr	s15, [r5]
 801bc70:	e7c2      	b.n	801bbf8 <__kernel_rem_pio2f+0x3d0>
 801bc72:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801bb38 <__kernel_rem_pio2f+0x310>
 801bc76:	e7f2      	b.n	801bc5e <__kernel_rem_pio2f+0x436>
 801bc78:	aa2e      	add	r2, sp, #184	; 0xb8
 801bc7a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801bc7e:	edd0 7a00 	vldr	s15, [r0]
 801bc82:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bc86:	3901      	subs	r1, #1
 801bc88:	2900      	cmp	r1, #0
 801bc8a:	daf5      	bge.n	801bc78 <__kernel_rem_pio2f+0x450>
 801bc8c:	f1bb 0f00 	cmp.w	fp, #0
 801bc90:	d017      	beq.n	801bcc2 <__kernel_rem_pio2f+0x49a>
 801bc92:	eef1 7a47 	vneg.f32	s15, s14
 801bc96:	edc5 7a00 	vstr	s15, [r5]
 801bc9a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801bc9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bca2:	a82f      	add	r0, sp, #188	; 0xbc
 801bca4:	2101      	movs	r1, #1
 801bca6:	428b      	cmp	r3, r1
 801bca8:	da0e      	bge.n	801bcc8 <__kernel_rem_pio2f+0x4a0>
 801bcaa:	f1bb 0f00 	cmp.w	fp, #0
 801bcae:	d001      	beq.n	801bcb4 <__kernel_rem_pio2f+0x48c>
 801bcb0:	eef1 7a67 	vneg.f32	s15, s15
 801bcb4:	edc5 7a01 	vstr	s15, [r5, #4]
 801bcb8:	e79e      	b.n	801bbf8 <__kernel_rem_pio2f+0x3d0>
 801bcba:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801bb38 <__kernel_rem_pio2f+0x310>
 801bcbe:	4619      	mov	r1, r3
 801bcc0:	e7e2      	b.n	801bc88 <__kernel_rem_pio2f+0x460>
 801bcc2:	eef0 7a47 	vmov.f32	s15, s14
 801bcc6:	e7e6      	b.n	801bc96 <__kernel_rem_pio2f+0x46e>
 801bcc8:	ecb0 7a01 	vldmia	r0!, {s14}
 801bccc:	3101      	adds	r1, #1
 801bcce:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bcd2:	e7e8      	b.n	801bca6 <__kernel_rem_pio2f+0x47e>
 801bcd4:	edd0 7a00 	vldr	s15, [r0]
 801bcd8:	edd0 6a01 	vldr	s13, [r0, #4]
 801bcdc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801bce0:	3c01      	subs	r4, #1
 801bce2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bce6:	ed80 7a00 	vstr	s14, [r0]
 801bcea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bcee:	edc0 7a01 	vstr	s15, [r0, #4]
 801bcf2:	e791      	b.n	801bc18 <__kernel_rem_pio2f+0x3f0>
 801bcf4:	edd1 7a00 	vldr	s15, [r1]
 801bcf8:	edd1 6a01 	vldr	s13, [r1, #4]
 801bcfc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801bd00:	3801      	subs	r0, #1
 801bd02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bd06:	ed81 7a00 	vstr	s14, [r1]
 801bd0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bd0e:	edc1 7a01 	vstr	s15, [r1, #4]
 801bd12:	e786      	b.n	801bc22 <__kernel_rem_pio2f+0x3fa>
 801bd14:	aa2e      	add	r2, sp, #184	; 0xb8
 801bd16:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801bd1a:	ed91 7a00 	vldr	s14, [r1]
 801bd1e:	3b01      	subs	r3, #1
 801bd20:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bd24:	e783      	b.n	801bc2e <__kernel_rem_pio2f+0x406>
 801bd26:	eef1 6a66 	vneg.f32	s13, s13
 801bd2a:	eeb1 7a47 	vneg.f32	s14, s14
 801bd2e:	edc5 6a00 	vstr	s13, [r5]
 801bd32:	ed85 7a01 	vstr	s14, [r5, #4]
 801bd36:	eef1 7a67 	vneg.f32	s15, s15
 801bd3a:	e785      	b.n	801bc48 <__kernel_rem_pio2f+0x420>

0801bd3c <__kernel_sinf>:
 801bd3c:	ee10 3a10 	vmov	r3, s0
 801bd40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bd44:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801bd48:	da04      	bge.n	801bd54 <__kernel_sinf+0x18>
 801bd4a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801bd4e:	ee17 3a90 	vmov	r3, s15
 801bd52:	b35b      	cbz	r3, 801bdac <__kernel_sinf+0x70>
 801bd54:	ee20 7a00 	vmul.f32	s14, s0, s0
 801bd58:	eddf 7a15 	vldr	s15, [pc, #84]	; 801bdb0 <__kernel_sinf+0x74>
 801bd5c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801bdb4 <__kernel_sinf+0x78>
 801bd60:	eea7 6a27 	vfma.f32	s12, s14, s15
 801bd64:	eddf 7a14 	vldr	s15, [pc, #80]	; 801bdb8 <__kernel_sinf+0x7c>
 801bd68:	eee6 7a07 	vfma.f32	s15, s12, s14
 801bd6c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801bdbc <__kernel_sinf+0x80>
 801bd70:	eea7 6a87 	vfma.f32	s12, s15, s14
 801bd74:	eddf 7a12 	vldr	s15, [pc, #72]	; 801bdc0 <__kernel_sinf+0x84>
 801bd78:	ee60 6a07 	vmul.f32	s13, s0, s14
 801bd7c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801bd80:	b930      	cbnz	r0, 801bd90 <__kernel_sinf+0x54>
 801bd82:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801bdc4 <__kernel_sinf+0x88>
 801bd86:	eea7 6a27 	vfma.f32	s12, s14, s15
 801bd8a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801bd8e:	4770      	bx	lr
 801bd90:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801bd94:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801bd98:	eee0 7a86 	vfma.f32	s15, s1, s12
 801bd9c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801bda0:	eddf 7a09 	vldr	s15, [pc, #36]	; 801bdc8 <__kernel_sinf+0x8c>
 801bda4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801bda8:	ee30 0a60 	vsub.f32	s0, s0, s1
 801bdac:	4770      	bx	lr
 801bdae:	bf00      	nop
 801bdb0:	2f2ec9d3 	.word	0x2f2ec9d3
 801bdb4:	b2d72f34 	.word	0xb2d72f34
 801bdb8:	3638ef1b 	.word	0x3638ef1b
 801bdbc:	b9500d01 	.word	0xb9500d01
 801bdc0:	3c088889 	.word	0x3c088889
 801bdc4:	be2aaaab 	.word	0xbe2aaaab
 801bdc8:	3e2aaaab 	.word	0x3e2aaaab
 801bdcc:	00000000 	.word	0x00000000

0801bdd0 <atan>:
 801bdd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdd4:	ec55 4b10 	vmov	r4, r5, d0
 801bdd8:	4bc3      	ldr	r3, [pc, #780]	; (801c0e8 <atan+0x318>)
 801bdda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801bdde:	429e      	cmp	r6, r3
 801bde0:	46ab      	mov	fp, r5
 801bde2:	dd18      	ble.n	801be16 <atan+0x46>
 801bde4:	4bc1      	ldr	r3, [pc, #772]	; (801c0ec <atan+0x31c>)
 801bde6:	429e      	cmp	r6, r3
 801bde8:	dc01      	bgt.n	801bdee <atan+0x1e>
 801bdea:	d109      	bne.n	801be00 <atan+0x30>
 801bdec:	b144      	cbz	r4, 801be00 <atan+0x30>
 801bdee:	4622      	mov	r2, r4
 801bdf0:	462b      	mov	r3, r5
 801bdf2:	4620      	mov	r0, r4
 801bdf4:	4629      	mov	r1, r5
 801bdf6:	f7e4 fa51 	bl	800029c <__adddf3>
 801bdfa:	4604      	mov	r4, r0
 801bdfc:	460d      	mov	r5, r1
 801bdfe:	e006      	b.n	801be0e <atan+0x3e>
 801be00:	f1bb 0f00 	cmp.w	fp, #0
 801be04:	f300 8131 	bgt.w	801c06a <atan+0x29a>
 801be08:	a59b      	add	r5, pc, #620	; (adr r5, 801c078 <atan+0x2a8>)
 801be0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801be0e:	ec45 4b10 	vmov	d0, r4, r5
 801be12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be16:	4bb6      	ldr	r3, [pc, #728]	; (801c0f0 <atan+0x320>)
 801be18:	429e      	cmp	r6, r3
 801be1a:	dc14      	bgt.n	801be46 <atan+0x76>
 801be1c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801be20:	429e      	cmp	r6, r3
 801be22:	dc0d      	bgt.n	801be40 <atan+0x70>
 801be24:	a396      	add	r3, pc, #600	; (adr r3, 801c080 <atan+0x2b0>)
 801be26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be2a:	ee10 0a10 	vmov	r0, s0
 801be2e:	4629      	mov	r1, r5
 801be30:	f7e4 fa34 	bl	800029c <__adddf3>
 801be34:	4baf      	ldr	r3, [pc, #700]	; (801c0f4 <atan+0x324>)
 801be36:	2200      	movs	r2, #0
 801be38:	f7e4 fe76 	bl	8000b28 <__aeabi_dcmpgt>
 801be3c:	2800      	cmp	r0, #0
 801be3e:	d1e6      	bne.n	801be0e <atan+0x3e>
 801be40:	f04f 3aff 	mov.w	sl, #4294967295
 801be44:	e02b      	b.n	801be9e <atan+0xce>
 801be46:	f000 f963 	bl	801c110 <fabs>
 801be4a:	4bab      	ldr	r3, [pc, #684]	; (801c0f8 <atan+0x328>)
 801be4c:	429e      	cmp	r6, r3
 801be4e:	ec55 4b10 	vmov	r4, r5, d0
 801be52:	f300 80bf 	bgt.w	801bfd4 <atan+0x204>
 801be56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801be5a:	429e      	cmp	r6, r3
 801be5c:	f300 80a0 	bgt.w	801bfa0 <atan+0x1d0>
 801be60:	ee10 2a10 	vmov	r2, s0
 801be64:	ee10 0a10 	vmov	r0, s0
 801be68:	462b      	mov	r3, r5
 801be6a:	4629      	mov	r1, r5
 801be6c:	f7e4 fa16 	bl	800029c <__adddf3>
 801be70:	4ba0      	ldr	r3, [pc, #640]	; (801c0f4 <atan+0x324>)
 801be72:	2200      	movs	r2, #0
 801be74:	f7e4 fa10 	bl	8000298 <__aeabi_dsub>
 801be78:	2200      	movs	r2, #0
 801be7a:	4606      	mov	r6, r0
 801be7c:	460f      	mov	r7, r1
 801be7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801be82:	4620      	mov	r0, r4
 801be84:	4629      	mov	r1, r5
 801be86:	f7e4 fa09 	bl	800029c <__adddf3>
 801be8a:	4602      	mov	r2, r0
 801be8c:	460b      	mov	r3, r1
 801be8e:	4630      	mov	r0, r6
 801be90:	4639      	mov	r1, r7
 801be92:	f7e4 fce3 	bl	800085c <__aeabi_ddiv>
 801be96:	f04f 0a00 	mov.w	sl, #0
 801be9a:	4604      	mov	r4, r0
 801be9c:	460d      	mov	r5, r1
 801be9e:	4622      	mov	r2, r4
 801bea0:	462b      	mov	r3, r5
 801bea2:	4620      	mov	r0, r4
 801bea4:	4629      	mov	r1, r5
 801bea6:	f7e4 fbaf 	bl	8000608 <__aeabi_dmul>
 801beaa:	4602      	mov	r2, r0
 801beac:	460b      	mov	r3, r1
 801beae:	4680      	mov	r8, r0
 801beb0:	4689      	mov	r9, r1
 801beb2:	f7e4 fba9 	bl	8000608 <__aeabi_dmul>
 801beb6:	a374      	add	r3, pc, #464	; (adr r3, 801c088 <atan+0x2b8>)
 801beb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bebc:	4606      	mov	r6, r0
 801bebe:	460f      	mov	r7, r1
 801bec0:	f7e4 fba2 	bl	8000608 <__aeabi_dmul>
 801bec4:	a372      	add	r3, pc, #456	; (adr r3, 801c090 <atan+0x2c0>)
 801bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beca:	f7e4 f9e7 	bl	800029c <__adddf3>
 801bece:	4632      	mov	r2, r6
 801bed0:	463b      	mov	r3, r7
 801bed2:	f7e4 fb99 	bl	8000608 <__aeabi_dmul>
 801bed6:	a370      	add	r3, pc, #448	; (adr r3, 801c098 <atan+0x2c8>)
 801bed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bedc:	f7e4 f9de 	bl	800029c <__adddf3>
 801bee0:	4632      	mov	r2, r6
 801bee2:	463b      	mov	r3, r7
 801bee4:	f7e4 fb90 	bl	8000608 <__aeabi_dmul>
 801bee8:	a36d      	add	r3, pc, #436	; (adr r3, 801c0a0 <atan+0x2d0>)
 801beea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beee:	f7e4 f9d5 	bl	800029c <__adddf3>
 801bef2:	4632      	mov	r2, r6
 801bef4:	463b      	mov	r3, r7
 801bef6:	f7e4 fb87 	bl	8000608 <__aeabi_dmul>
 801befa:	a36b      	add	r3, pc, #428	; (adr r3, 801c0a8 <atan+0x2d8>)
 801befc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf00:	f7e4 f9cc 	bl	800029c <__adddf3>
 801bf04:	4632      	mov	r2, r6
 801bf06:	463b      	mov	r3, r7
 801bf08:	f7e4 fb7e 	bl	8000608 <__aeabi_dmul>
 801bf0c:	a368      	add	r3, pc, #416	; (adr r3, 801c0b0 <atan+0x2e0>)
 801bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf12:	f7e4 f9c3 	bl	800029c <__adddf3>
 801bf16:	4642      	mov	r2, r8
 801bf18:	464b      	mov	r3, r9
 801bf1a:	f7e4 fb75 	bl	8000608 <__aeabi_dmul>
 801bf1e:	a366      	add	r3, pc, #408	; (adr r3, 801c0b8 <atan+0x2e8>)
 801bf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf24:	4680      	mov	r8, r0
 801bf26:	4689      	mov	r9, r1
 801bf28:	4630      	mov	r0, r6
 801bf2a:	4639      	mov	r1, r7
 801bf2c:	f7e4 fb6c 	bl	8000608 <__aeabi_dmul>
 801bf30:	a363      	add	r3, pc, #396	; (adr r3, 801c0c0 <atan+0x2f0>)
 801bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf36:	f7e4 f9af 	bl	8000298 <__aeabi_dsub>
 801bf3a:	4632      	mov	r2, r6
 801bf3c:	463b      	mov	r3, r7
 801bf3e:	f7e4 fb63 	bl	8000608 <__aeabi_dmul>
 801bf42:	a361      	add	r3, pc, #388	; (adr r3, 801c0c8 <atan+0x2f8>)
 801bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf48:	f7e4 f9a6 	bl	8000298 <__aeabi_dsub>
 801bf4c:	4632      	mov	r2, r6
 801bf4e:	463b      	mov	r3, r7
 801bf50:	f7e4 fb5a 	bl	8000608 <__aeabi_dmul>
 801bf54:	a35e      	add	r3, pc, #376	; (adr r3, 801c0d0 <atan+0x300>)
 801bf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf5a:	f7e4 f99d 	bl	8000298 <__aeabi_dsub>
 801bf5e:	4632      	mov	r2, r6
 801bf60:	463b      	mov	r3, r7
 801bf62:	f7e4 fb51 	bl	8000608 <__aeabi_dmul>
 801bf66:	a35c      	add	r3, pc, #368	; (adr r3, 801c0d8 <atan+0x308>)
 801bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf6c:	f7e4 f994 	bl	8000298 <__aeabi_dsub>
 801bf70:	4632      	mov	r2, r6
 801bf72:	463b      	mov	r3, r7
 801bf74:	f7e4 fb48 	bl	8000608 <__aeabi_dmul>
 801bf78:	4602      	mov	r2, r0
 801bf7a:	460b      	mov	r3, r1
 801bf7c:	4640      	mov	r0, r8
 801bf7e:	4649      	mov	r1, r9
 801bf80:	f7e4 f98c 	bl	800029c <__adddf3>
 801bf84:	4622      	mov	r2, r4
 801bf86:	462b      	mov	r3, r5
 801bf88:	f7e4 fb3e 	bl	8000608 <__aeabi_dmul>
 801bf8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801bf90:	4602      	mov	r2, r0
 801bf92:	460b      	mov	r3, r1
 801bf94:	d14b      	bne.n	801c02e <atan+0x25e>
 801bf96:	4620      	mov	r0, r4
 801bf98:	4629      	mov	r1, r5
 801bf9a:	f7e4 f97d 	bl	8000298 <__aeabi_dsub>
 801bf9e:	e72c      	b.n	801bdfa <atan+0x2a>
 801bfa0:	ee10 0a10 	vmov	r0, s0
 801bfa4:	4b53      	ldr	r3, [pc, #332]	; (801c0f4 <atan+0x324>)
 801bfa6:	2200      	movs	r2, #0
 801bfa8:	4629      	mov	r1, r5
 801bfaa:	f7e4 f975 	bl	8000298 <__aeabi_dsub>
 801bfae:	4b51      	ldr	r3, [pc, #324]	; (801c0f4 <atan+0x324>)
 801bfb0:	4606      	mov	r6, r0
 801bfb2:	460f      	mov	r7, r1
 801bfb4:	2200      	movs	r2, #0
 801bfb6:	4620      	mov	r0, r4
 801bfb8:	4629      	mov	r1, r5
 801bfba:	f7e4 f96f 	bl	800029c <__adddf3>
 801bfbe:	4602      	mov	r2, r0
 801bfc0:	460b      	mov	r3, r1
 801bfc2:	4630      	mov	r0, r6
 801bfc4:	4639      	mov	r1, r7
 801bfc6:	f7e4 fc49 	bl	800085c <__aeabi_ddiv>
 801bfca:	f04f 0a01 	mov.w	sl, #1
 801bfce:	4604      	mov	r4, r0
 801bfd0:	460d      	mov	r5, r1
 801bfd2:	e764      	b.n	801be9e <atan+0xce>
 801bfd4:	4b49      	ldr	r3, [pc, #292]	; (801c0fc <atan+0x32c>)
 801bfd6:	429e      	cmp	r6, r3
 801bfd8:	da1d      	bge.n	801c016 <atan+0x246>
 801bfda:	ee10 0a10 	vmov	r0, s0
 801bfde:	4b48      	ldr	r3, [pc, #288]	; (801c100 <atan+0x330>)
 801bfe0:	2200      	movs	r2, #0
 801bfe2:	4629      	mov	r1, r5
 801bfe4:	f7e4 f958 	bl	8000298 <__aeabi_dsub>
 801bfe8:	4b45      	ldr	r3, [pc, #276]	; (801c100 <atan+0x330>)
 801bfea:	4606      	mov	r6, r0
 801bfec:	460f      	mov	r7, r1
 801bfee:	2200      	movs	r2, #0
 801bff0:	4620      	mov	r0, r4
 801bff2:	4629      	mov	r1, r5
 801bff4:	f7e4 fb08 	bl	8000608 <__aeabi_dmul>
 801bff8:	4b3e      	ldr	r3, [pc, #248]	; (801c0f4 <atan+0x324>)
 801bffa:	2200      	movs	r2, #0
 801bffc:	f7e4 f94e 	bl	800029c <__adddf3>
 801c000:	4602      	mov	r2, r0
 801c002:	460b      	mov	r3, r1
 801c004:	4630      	mov	r0, r6
 801c006:	4639      	mov	r1, r7
 801c008:	f7e4 fc28 	bl	800085c <__aeabi_ddiv>
 801c00c:	f04f 0a02 	mov.w	sl, #2
 801c010:	4604      	mov	r4, r0
 801c012:	460d      	mov	r5, r1
 801c014:	e743      	b.n	801be9e <atan+0xce>
 801c016:	462b      	mov	r3, r5
 801c018:	ee10 2a10 	vmov	r2, s0
 801c01c:	4939      	ldr	r1, [pc, #228]	; (801c104 <atan+0x334>)
 801c01e:	2000      	movs	r0, #0
 801c020:	f7e4 fc1c 	bl	800085c <__aeabi_ddiv>
 801c024:	f04f 0a03 	mov.w	sl, #3
 801c028:	4604      	mov	r4, r0
 801c02a:	460d      	mov	r5, r1
 801c02c:	e737      	b.n	801be9e <atan+0xce>
 801c02e:	4b36      	ldr	r3, [pc, #216]	; (801c108 <atan+0x338>)
 801c030:	4e36      	ldr	r6, [pc, #216]	; (801c10c <atan+0x33c>)
 801c032:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801c036:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801c03a:	e9da 2300 	ldrd	r2, r3, [sl]
 801c03e:	f7e4 f92b 	bl	8000298 <__aeabi_dsub>
 801c042:	4622      	mov	r2, r4
 801c044:	462b      	mov	r3, r5
 801c046:	f7e4 f927 	bl	8000298 <__aeabi_dsub>
 801c04a:	4602      	mov	r2, r0
 801c04c:	460b      	mov	r3, r1
 801c04e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801c052:	f7e4 f921 	bl	8000298 <__aeabi_dsub>
 801c056:	f1bb 0f00 	cmp.w	fp, #0
 801c05a:	4604      	mov	r4, r0
 801c05c:	460d      	mov	r5, r1
 801c05e:	f6bf aed6 	bge.w	801be0e <atan+0x3e>
 801c062:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c066:	461d      	mov	r5, r3
 801c068:	e6d1      	b.n	801be0e <atan+0x3e>
 801c06a:	a51d      	add	r5, pc, #116	; (adr r5, 801c0e0 <atan+0x310>)
 801c06c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c070:	e6cd      	b.n	801be0e <atan+0x3e>
 801c072:	bf00      	nop
 801c074:	f3af 8000 	nop.w
 801c078:	54442d18 	.word	0x54442d18
 801c07c:	bff921fb 	.word	0xbff921fb
 801c080:	8800759c 	.word	0x8800759c
 801c084:	7e37e43c 	.word	0x7e37e43c
 801c088:	e322da11 	.word	0xe322da11
 801c08c:	3f90ad3a 	.word	0x3f90ad3a
 801c090:	24760deb 	.word	0x24760deb
 801c094:	3fa97b4b 	.word	0x3fa97b4b
 801c098:	a0d03d51 	.word	0xa0d03d51
 801c09c:	3fb10d66 	.word	0x3fb10d66
 801c0a0:	c54c206e 	.word	0xc54c206e
 801c0a4:	3fb745cd 	.word	0x3fb745cd
 801c0a8:	920083ff 	.word	0x920083ff
 801c0ac:	3fc24924 	.word	0x3fc24924
 801c0b0:	5555550d 	.word	0x5555550d
 801c0b4:	3fd55555 	.word	0x3fd55555
 801c0b8:	2c6a6c2f 	.word	0x2c6a6c2f
 801c0bc:	bfa2b444 	.word	0xbfa2b444
 801c0c0:	52defd9a 	.word	0x52defd9a
 801c0c4:	3fadde2d 	.word	0x3fadde2d
 801c0c8:	af749a6d 	.word	0xaf749a6d
 801c0cc:	3fb3b0f2 	.word	0x3fb3b0f2
 801c0d0:	fe231671 	.word	0xfe231671
 801c0d4:	3fbc71c6 	.word	0x3fbc71c6
 801c0d8:	9998ebc4 	.word	0x9998ebc4
 801c0dc:	3fc99999 	.word	0x3fc99999
 801c0e0:	54442d18 	.word	0x54442d18
 801c0e4:	3ff921fb 	.word	0x3ff921fb
 801c0e8:	440fffff 	.word	0x440fffff
 801c0ec:	7ff00000 	.word	0x7ff00000
 801c0f0:	3fdbffff 	.word	0x3fdbffff
 801c0f4:	3ff00000 	.word	0x3ff00000
 801c0f8:	3ff2ffff 	.word	0x3ff2ffff
 801c0fc:	40038000 	.word	0x40038000
 801c100:	3ff80000 	.word	0x3ff80000
 801c104:	bff00000 	.word	0xbff00000
 801c108:	0801d578 	.word	0x0801d578
 801c10c:	0801d558 	.word	0x0801d558

0801c110 <fabs>:
 801c110:	ec51 0b10 	vmov	r0, r1, d0
 801c114:	ee10 2a10 	vmov	r2, s0
 801c118:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c11c:	ec43 2b10 	vmov	d0, r2, r3
 801c120:	4770      	bx	lr

0801c122 <finite>:
 801c122:	b082      	sub	sp, #8
 801c124:	ed8d 0b00 	vstr	d0, [sp]
 801c128:	9801      	ldr	r0, [sp, #4]
 801c12a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801c12e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801c132:	0fc0      	lsrs	r0, r0, #31
 801c134:	b002      	add	sp, #8
 801c136:	4770      	bx	lr

0801c138 <nan>:
 801c138:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c140 <nan+0x8>
 801c13c:	4770      	bx	lr
 801c13e:	bf00      	nop
 801c140:	00000000 	.word	0x00000000
 801c144:	7ff80000 	.word	0x7ff80000

0801c148 <rint>:
 801c148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c14a:	ec51 0b10 	vmov	r0, r1, d0
 801c14e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c152:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801c156:	2e13      	cmp	r6, #19
 801c158:	ee10 4a10 	vmov	r4, s0
 801c15c:	460b      	mov	r3, r1
 801c15e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801c162:	dc58      	bgt.n	801c216 <rint+0xce>
 801c164:	2e00      	cmp	r6, #0
 801c166:	da2b      	bge.n	801c1c0 <rint+0x78>
 801c168:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801c16c:	4302      	orrs	r2, r0
 801c16e:	d023      	beq.n	801c1b8 <rint+0x70>
 801c170:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801c174:	4302      	orrs	r2, r0
 801c176:	4254      	negs	r4, r2
 801c178:	4314      	orrs	r4, r2
 801c17a:	0c4b      	lsrs	r3, r1, #17
 801c17c:	0b24      	lsrs	r4, r4, #12
 801c17e:	045b      	lsls	r3, r3, #17
 801c180:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801c184:	ea44 0103 	orr.w	r1, r4, r3
 801c188:	4b32      	ldr	r3, [pc, #200]	; (801c254 <rint+0x10c>)
 801c18a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c18e:	e9d3 6700 	ldrd	r6, r7, [r3]
 801c192:	4602      	mov	r2, r0
 801c194:	460b      	mov	r3, r1
 801c196:	4630      	mov	r0, r6
 801c198:	4639      	mov	r1, r7
 801c19a:	f7e4 f87f 	bl	800029c <__adddf3>
 801c19e:	e9cd 0100 	strd	r0, r1, [sp]
 801c1a2:	463b      	mov	r3, r7
 801c1a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c1a8:	4632      	mov	r2, r6
 801c1aa:	f7e4 f875 	bl	8000298 <__aeabi_dsub>
 801c1ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c1b2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801c1b6:	4639      	mov	r1, r7
 801c1b8:	ec41 0b10 	vmov	d0, r0, r1
 801c1bc:	b003      	add	sp, #12
 801c1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1c0:	4a25      	ldr	r2, [pc, #148]	; (801c258 <rint+0x110>)
 801c1c2:	4132      	asrs	r2, r6
 801c1c4:	ea01 0702 	and.w	r7, r1, r2
 801c1c8:	4307      	orrs	r7, r0
 801c1ca:	d0f5      	beq.n	801c1b8 <rint+0x70>
 801c1cc:	0851      	lsrs	r1, r2, #1
 801c1ce:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801c1d2:	4314      	orrs	r4, r2
 801c1d4:	d00c      	beq.n	801c1f0 <rint+0xa8>
 801c1d6:	ea23 0201 	bic.w	r2, r3, r1
 801c1da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c1de:	2e13      	cmp	r6, #19
 801c1e0:	fa43 f606 	asr.w	r6, r3, r6
 801c1e4:	bf0c      	ite	eq
 801c1e6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801c1ea:	2400      	movne	r4, #0
 801c1ec:	ea42 0306 	orr.w	r3, r2, r6
 801c1f0:	4918      	ldr	r1, [pc, #96]	; (801c254 <rint+0x10c>)
 801c1f2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801c1f6:	4622      	mov	r2, r4
 801c1f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c1fc:	4620      	mov	r0, r4
 801c1fe:	4629      	mov	r1, r5
 801c200:	f7e4 f84c 	bl	800029c <__adddf3>
 801c204:	e9cd 0100 	strd	r0, r1, [sp]
 801c208:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c20c:	4622      	mov	r2, r4
 801c20e:	462b      	mov	r3, r5
 801c210:	f7e4 f842 	bl	8000298 <__aeabi_dsub>
 801c214:	e7d0      	b.n	801c1b8 <rint+0x70>
 801c216:	2e33      	cmp	r6, #51	; 0x33
 801c218:	dd07      	ble.n	801c22a <rint+0xe2>
 801c21a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c21e:	d1cb      	bne.n	801c1b8 <rint+0x70>
 801c220:	ee10 2a10 	vmov	r2, s0
 801c224:	f7e4 f83a 	bl	800029c <__adddf3>
 801c228:	e7c6      	b.n	801c1b8 <rint+0x70>
 801c22a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801c22e:	f04f 36ff 	mov.w	r6, #4294967295
 801c232:	40d6      	lsrs	r6, r2
 801c234:	4230      	tst	r0, r6
 801c236:	d0bf      	beq.n	801c1b8 <rint+0x70>
 801c238:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801c23c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801c240:	bf1f      	itttt	ne
 801c242:	ea24 0101 	bicne.w	r1, r4, r1
 801c246:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801c24a:	fa44 f202 	asrne.w	r2, r4, r2
 801c24e:	ea41 0402 	orrne.w	r4, r1, r2
 801c252:	e7cd      	b.n	801c1f0 <rint+0xa8>
 801c254:	0801d598 	.word	0x0801d598
 801c258:	000fffff 	.word	0x000fffff
 801c25c:	00000000 	.word	0x00000000

0801c260 <scalbn>:
 801c260:	b570      	push	{r4, r5, r6, lr}
 801c262:	ec55 4b10 	vmov	r4, r5, d0
 801c266:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c26a:	4606      	mov	r6, r0
 801c26c:	462b      	mov	r3, r5
 801c26e:	b99a      	cbnz	r2, 801c298 <scalbn+0x38>
 801c270:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c274:	4323      	orrs	r3, r4
 801c276:	d036      	beq.n	801c2e6 <scalbn+0x86>
 801c278:	4b39      	ldr	r3, [pc, #228]	; (801c360 <scalbn+0x100>)
 801c27a:	4629      	mov	r1, r5
 801c27c:	ee10 0a10 	vmov	r0, s0
 801c280:	2200      	movs	r2, #0
 801c282:	f7e4 f9c1 	bl	8000608 <__aeabi_dmul>
 801c286:	4b37      	ldr	r3, [pc, #220]	; (801c364 <scalbn+0x104>)
 801c288:	429e      	cmp	r6, r3
 801c28a:	4604      	mov	r4, r0
 801c28c:	460d      	mov	r5, r1
 801c28e:	da10      	bge.n	801c2b2 <scalbn+0x52>
 801c290:	a32b      	add	r3, pc, #172	; (adr r3, 801c340 <scalbn+0xe0>)
 801c292:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c296:	e03a      	b.n	801c30e <scalbn+0xae>
 801c298:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c29c:	428a      	cmp	r2, r1
 801c29e:	d10c      	bne.n	801c2ba <scalbn+0x5a>
 801c2a0:	ee10 2a10 	vmov	r2, s0
 801c2a4:	4620      	mov	r0, r4
 801c2a6:	4629      	mov	r1, r5
 801c2a8:	f7e3 fff8 	bl	800029c <__adddf3>
 801c2ac:	4604      	mov	r4, r0
 801c2ae:	460d      	mov	r5, r1
 801c2b0:	e019      	b.n	801c2e6 <scalbn+0x86>
 801c2b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c2b6:	460b      	mov	r3, r1
 801c2b8:	3a36      	subs	r2, #54	; 0x36
 801c2ba:	4432      	add	r2, r6
 801c2bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c2c0:	428a      	cmp	r2, r1
 801c2c2:	dd08      	ble.n	801c2d6 <scalbn+0x76>
 801c2c4:	2d00      	cmp	r5, #0
 801c2c6:	a120      	add	r1, pc, #128	; (adr r1, 801c348 <scalbn+0xe8>)
 801c2c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c2cc:	da1c      	bge.n	801c308 <scalbn+0xa8>
 801c2ce:	a120      	add	r1, pc, #128	; (adr r1, 801c350 <scalbn+0xf0>)
 801c2d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c2d4:	e018      	b.n	801c308 <scalbn+0xa8>
 801c2d6:	2a00      	cmp	r2, #0
 801c2d8:	dd08      	ble.n	801c2ec <scalbn+0x8c>
 801c2da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c2de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c2e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c2e6:	ec45 4b10 	vmov	d0, r4, r5
 801c2ea:	bd70      	pop	{r4, r5, r6, pc}
 801c2ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c2f0:	da19      	bge.n	801c326 <scalbn+0xc6>
 801c2f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c2f6:	429e      	cmp	r6, r3
 801c2f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801c2fc:	dd0a      	ble.n	801c314 <scalbn+0xb4>
 801c2fe:	a112      	add	r1, pc, #72	; (adr r1, 801c348 <scalbn+0xe8>)
 801c300:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c304:	2b00      	cmp	r3, #0
 801c306:	d1e2      	bne.n	801c2ce <scalbn+0x6e>
 801c308:	a30f      	add	r3, pc, #60	; (adr r3, 801c348 <scalbn+0xe8>)
 801c30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c30e:	f7e4 f97b 	bl	8000608 <__aeabi_dmul>
 801c312:	e7cb      	b.n	801c2ac <scalbn+0x4c>
 801c314:	a10a      	add	r1, pc, #40	; (adr r1, 801c340 <scalbn+0xe0>)
 801c316:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	d0b8      	beq.n	801c290 <scalbn+0x30>
 801c31e:	a10e      	add	r1, pc, #56	; (adr r1, 801c358 <scalbn+0xf8>)
 801c320:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c324:	e7b4      	b.n	801c290 <scalbn+0x30>
 801c326:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c32a:	3236      	adds	r2, #54	; 0x36
 801c32c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c330:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801c334:	4620      	mov	r0, r4
 801c336:	4b0c      	ldr	r3, [pc, #48]	; (801c368 <scalbn+0x108>)
 801c338:	2200      	movs	r2, #0
 801c33a:	e7e8      	b.n	801c30e <scalbn+0xae>
 801c33c:	f3af 8000 	nop.w
 801c340:	c2f8f359 	.word	0xc2f8f359
 801c344:	01a56e1f 	.word	0x01a56e1f
 801c348:	8800759c 	.word	0x8800759c
 801c34c:	7e37e43c 	.word	0x7e37e43c
 801c350:	8800759c 	.word	0x8800759c
 801c354:	fe37e43c 	.word	0xfe37e43c
 801c358:	c2f8f359 	.word	0xc2f8f359
 801c35c:	81a56e1f 	.word	0x81a56e1f
 801c360:	43500000 	.word	0x43500000
 801c364:	ffff3cb0 	.word	0xffff3cb0
 801c368:	3c900000 	.word	0x3c900000

0801c36c <fabsf>:
 801c36c:	ee10 3a10 	vmov	r3, s0
 801c370:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c374:	ee00 3a10 	vmov	s0, r3
 801c378:	4770      	bx	lr
	...

0801c37c <floorf>:
 801c37c:	ee10 3a10 	vmov	r3, s0
 801c380:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c384:	3a7f      	subs	r2, #127	; 0x7f
 801c386:	2a16      	cmp	r2, #22
 801c388:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801c38c:	dc2a      	bgt.n	801c3e4 <floorf+0x68>
 801c38e:	2a00      	cmp	r2, #0
 801c390:	da11      	bge.n	801c3b6 <floorf+0x3a>
 801c392:	eddf 7a18 	vldr	s15, [pc, #96]	; 801c3f4 <floorf+0x78>
 801c396:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c39a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3a2:	dd05      	ble.n	801c3b0 <floorf+0x34>
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	da23      	bge.n	801c3f0 <floorf+0x74>
 801c3a8:	4a13      	ldr	r2, [pc, #76]	; (801c3f8 <floorf+0x7c>)
 801c3aa:	2900      	cmp	r1, #0
 801c3ac:	bf18      	it	ne
 801c3ae:	4613      	movne	r3, r2
 801c3b0:	ee00 3a10 	vmov	s0, r3
 801c3b4:	4770      	bx	lr
 801c3b6:	4911      	ldr	r1, [pc, #68]	; (801c3fc <floorf+0x80>)
 801c3b8:	4111      	asrs	r1, r2
 801c3ba:	420b      	tst	r3, r1
 801c3bc:	d0fa      	beq.n	801c3b4 <floorf+0x38>
 801c3be:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801c3f4 <floorf+0x78>
 801c3c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c3c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3ce:	ddef      	ble.n	801c3b0 <floorf+0x34>
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	bfbe      	ittt	lt
 801c3d4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801c3d8:	fa40 f202 	asrlt.w	r2, r0, r2
 801c3dc:	189b      	addlt	r3, r3, r2
 801c3de:	ea23 0301 	bic.w	r3, r3, r1
 801c3e2:	e7e5      	b.n	801c3b0 <floorf+0x34>
 801c3e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801c3e8:	d3e4      	bcc.n	801c3b4 <floorf+0x38>
 801c3ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c3ee:	4770      	bx	lr
 801c3f0:	2300      	movs	r3, #0
 801c3f2:	e7dd      	b.n	801c3b0 <floorf+0x34>
 801c3f4:	7149f2ca 	.word	0x7149f2ca
 801c3f8:	bf800000 	.word	0xbf800000
 801c3fc:	007fffff 	.word	0x007fffff

0801c400 <nanf>:
 801c400:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c408 <nanf+0x8>
 801c404:	4770      	bx	lr
 801c406:	bf00      	nop
 801c408:	7fc00000 	.word	0x7fc00000

0801c40c <scalbnf>:
 801c40c:	ee10 3a10 	vmov	r3, s0
 801c410:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801c414:	d025      	beq.n	801c462 <scalbnf+0x56>
 801c416:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801c41a:	d302      	bcc.n	801c422 <scalbnf+0x16>
 801c41c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c420:	4770      	bx	lr
 801c422:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801c426:	d122      	bne.n	801c46e <scalbnf+0x62>
 801c428:	4b2a      	ldr	r3, [pc, #168]	; (801c4d4 <scalbnf+0xc8>)
 801c42a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801c4d8 <scalbnf+0xcc>
 801c42e:	4298      	cmp	r0, r3
 801c430:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c434:	db16      	blt.n	801c464 <scalbnf+0x58>
 801c436:	ee10 3a10 	vmov	r3, s0
 801c43a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c43e:	3a19      	subs	r2, #25
 801c440:	4402      	add	r2, r0
 801c442:	2afe      	cmp	r2, #254	; 0xfe
 801c444:	dd15      	ble.n	801c472 <scalbnf+0x66>
 801c446:	ee10 3a10 	vmov	r3, s0
 801c44a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801c4dc <scalbnf+0xd0>
 801c44e:	eddf 6a24 	vldr	s13, [pc, #144]	; 801c4e0 <scalbnf+0xd4>
 801c452:	2b00      	cmp	r3, #0
 801c454:	eeb0 7a67 	vmov.f32	s14, s15
 801c458:	bfb8      	it	lt
 801c45a:	eef0 7a66 	vmovlt.f32	s15, s13
 801c45e:	ee27 0a27 	vmul.f32	s0, s14, s15
 801c462:	4770      	bx	lr
 801c464:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801c4e4 <scalbnf+0xd8>
 801c468:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c46c:	4770      	bx	lr
 801c46e:	0dd2      	lsrs	r2, r2, #23
 801c470:	e7e6      	b.n	801c440 <scalbnf+0x34>
 801c472:	2a00      	cmp	r2, #0
 801c474:	dd06      	ble.n	801c484 <scalbnf+0x78>
 801c476:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c47a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801c47e:	ee00 3a10 	vmov	s0, r3
 801c482:	4770      	bx	lr
 801c484:	f112 0f16 	cmn.w	r2, #22
 801c488:	da1a      	bge.n	801c4c0 <scalbnf+0xb4>
 801c48a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c48e:	4298      	cmp	r0, r3
 801c490:	ee10 3a10 	vmov	r3, s0
 801c494:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801c498:	dd0a      	ble.n	801c4b0 <scalbnf+0xa4>
 801c49a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801c4dc <scalbnf+0xd0>
 801c49e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801c4e0 <scalbnf+0xd4>
 801c4a2:	eef0 7a40 	vmov.f32	s15, s0
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	bf18      	it	ne
 801c4aa:	eeb0 0a47 	vmovne.f32	s0, s14
 801c4ae:	e7db      	b.n	801c468 <scalbnf+0x5c>
 801c4b0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801c4e4 <scalbnf+0xd8>
 801c4b4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801c4e8 <scalbnf+0xdc>
 801c4b8:	eef0 7a40 	vmov.f32	s15, s0
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	e7f3      	b.n	801c4a8 <scalbnf+0x9c>
 801c4c0:	3219      	adds	r2, #25
 801c4c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c4c6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801c4ca:	eddf 7a08 	vldr	s15, [pc, #32]	; 801c4ec <scalbnf+0xe0>
 801c4ce:	ee07 3a10 	vmov	s14, r3
 801c4d2:	e7c4      	b.n	801c45e <scalbnf+0x52>
 801c4d4:	ffff3cb0 	.word	0xffff3cb0
 801c4d8:	4c000000 	.word	0x4c000000
 801c4dc:	7149f2ca 	.word	0x7149f2ca
 801c4e0:	f149f2ca 	.word	0xf149f2ca
 801c4e4:	0da24260 	.word	0x0da24260
 801c4e8:	8da24260 	.word	0x8da24260
 801c4ec:	33000000 	.word	0x33000000

0801c4f0 <_init>:
 801c4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c4f2:	bf00      	nop
 801c4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c4f6:	bc08      	pop	{r3}
 801c4f8:	469e      	mov	lr, r3
 801c4fa:	4770      	bx	lr

0801c4fc <_fini>:
 801c4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c4fe:	bf00      	nop
 801c500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c502:	bc08      	pop	{r3}
 801c504:	469e      	mov	lr, r3
 801c506:	4770      	bx	lr
