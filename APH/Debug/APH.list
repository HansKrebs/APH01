
APH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ce4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b30  08017e88  08017e88  00027e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080189b8  080189b8  000314d8  2**0
                  CONTENTS
  4 .ARM          00000008  080189b8  080189b8  000289b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080189c0  080189c0  000314d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080189c0  080189c0  000289c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080189c4  080189c4  000289c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000014d8  20000000  080189c8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aebc  200014d8  08019ea0  000314d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000c394  08019ea0  0003c394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000314d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004306d  00000000  00000000  00031508  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005a7f  00000000  00000000  00074575  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002f10  00000000  00000000  00079ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002cd8  00000000  00000000  0007cf08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ce76  00000000  00000000  0007fbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e431  00000000  00000000  0009ca56  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a87e9  00000000  00000000  000bae87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00163670  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000dd10  00000000  00000000  001636ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200014d8 	.word	0x200014d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08017e6c 	.word	0x08017e6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200014dc 	.word	0x200014dc
 80001dc:	08017e6c 	.word	0x08017e6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <Set_Output>:




void Set_Output(GPIO_DebugPins dp, GPIO_PinState st)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	460a      	mov	r2, r1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(dpArray[dp].PORT, dpArray[dp].PIN, st);
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <Set_Output+0x34>)
 8000f6c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <Set_Output+0x34>)
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	4413      	add	r3, r2
 8000f78:	889b      	ldrh	r3, [r3, #4]
 8000f7a:	79ba      	ldrb	r2, [r7, #6]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f005 f933 	bl	80061e8 <HAL_GPIO_WritePin>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20001208 	.word	0x20001208

08000f90 <initFastTask>:
/* Private variables ---------------------------------------------------------*/

static osEventFlagsId_t ntFlag = NULL;

void initFastTask(osEventFlagsId_t normTaskEventHandle)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	ntFlag = normTaskEventHandle;
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <initFastTask+0x1c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	200029ac 	.word	0x200029ac

08000fb0 <StartFastTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFastTask */
void StartFastTask(void *argument)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFastTask */
  uint32_t cnt = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  uint32_t loop = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
  uint32_t test = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]

  while (ntFlag == NULL)
 8000fc4:	e002      	b.n	8000fcc <StartFastTask+0x1c>
  {
	  osDelay(1);
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f007 fdba 	bl	8008b40 <osDelay>
  while (ntFlag == NULL)
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <StartFastTask+0x98>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f8      	beq.n	8000fc6 <StartFastTask+0x16>
  }
 /* Infinite loop */

  for(;;)
  {
  	Set_Output(OUT_TEST_1, 1);
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff ffbe 	bl	8000f58 <Set_Output>
  	for(loop = 0; loop < 2000; loop++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	e005      	b.n	8000fee <StartFastTask+0x3e>
  	{
  		test = test + 3;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3303      	adds	r3, #3
 8000fe6:	60fb      	str	r3, [r7, #12]
  	for(loop = 0; loop < 2000; loop++)
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	3301      	adds	r3, #1
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ff4:	d3f5      	bcc.n	8000fe2 <StartFastTask+0x32>
  	}
  	if(test > 3000)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d902      	bls.n	8001006 <StartFastTask+0x56>
  		test = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	e001      	b.n	800100a <StartFastTask+0x5a>
  	else
  		test = 7;
 8001006:	2307      	movs	r3, #7
 8001008:	60fb      	str	r3, [r7, #12]
  	Set_Output(OUT_TEST_1, 0);
 800100a:	2100      	movs	r1, #0
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff ffa3 	bl	8000f58 <Set_Output>

  	Set_Output(OUT_TEST_2, 1);
 8001012:	2101      	movs	r1, #1
 8001014:	2001      	movs	r0, #1
 8001016:	f7ff ff9f 	bl	8000f58 <Set_Output>
    osDelay(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f007 fd90 	bl	8008b40 <osDelay>
  	Set_Output(OUT_TEST_2, 0);
 8001020:	2100      	movs	r1, #0
 8001022:	2001      	movs	r0, #1
 8001024:	f7ff ff98 	bl	8000f58 <Set_Output>
    cnt++;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3301      	adds	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
    if (cnt >= 10)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	2b09      	cmp	r3, #9
 8001032:	d9cf      	bls.n	8000fd4 <StartFastTask+0x24>
    {
    	cnt = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
    	osEventFlagsSet(ntFlag,1);
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <StartFastTask+0x98>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2101      	movs	r1, #1
 800103e:	4618      	mov	r0, r3
 8001040:	f007 fdfe 	bl	8008c40 <osEventFlagsSet>
  	Set_Output(OUT_TEST_1, 1);
 8001044:	e7c6      	b.n	8000fd4 <StartFastTask+0x24>
 8001046:	bf00      	nop
 8001048:	200029ac 	.word	0x200029ac

0800104c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001050:	f004 fd26 	bl	8005aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001054:	f000 f86a 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001058:	f000 f8e8 	bl	800122c <MX_GPIO_Init>
  MX_CRC_Init();
 800105c:	f000 f8d2 	bl	8001204 <MX_CRC_Init>
 // MX_MEMS_Init();
  /* USER CODE BEGIN 2 */
  position_Init();
 8001060:	f00b f9a6 	bl	800c3b0 <position_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001064:	f007 fc5c 	bl	8008920 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001068:	4a20      	ldr	r2, [pc, #128]	; (80010ec <main+0xa0>)
 800106a:	2100      	movs	r1, #0
 800106c:	4820      	ldr	r0, [pc, #128]	; (80010f0 <main+0xa4>)
 800106e:	f007 fcc1 	bl	80089f4 <osThreadNew>
 8001072:	4602      	mov	r2, r0
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <main+0xa8>)
 8001076:	601a      	str	r2, [r3, #0]

  /* creation of fastTask */
  fastTaskHandle = osThreadNew(StartFastTask, NULL, &fastTask_attributes);
 8001078:	4a1f      	ldr	r2, [pc, #124]	; (80010f8 <main+0xac>)
 800107a:	2100      	movs	r1, #0
 800107c:	481f      	ldr	r0, [pc, #124]	; (80010fc <main+0xb0>)
 800107e:	f007 fcb9 	bl	80089f4 <osThreadNew>
 8001082:	4602      	mov	r2, r0
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <main+0xb4>)
 8001086:	601a      	str	r2, [r3, #0]

  /* creation of normalTask */
  normalTaskHandle = osThreadNew(StartNormalTask, NULL, &normalTask_attributes);
 8001088:	4a1e      	ldr	r2, [pc, #120]	; (8001104 <main+0xb8>)
 800108a:	2100      	movs	r1, #0
 800108c:	481e      	ldr	r0, [pc, #120]	; (8001108 <main+0xbc>)
 800108e:	f007 fcb1 	bl	80089f4 <osThreadNew>
 8001092:	4602      	mov	r2, r0
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <main+0xc0>)
 8001096:	601a      	str	r2, [r3, #0]

  /* creation of slowTask */
  slowTaskHandle = osThreadNew(StartSlowTask, NULL, &slowTask_attributes);
 8001098:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <main+0xc4>)
 800109a:	2100      	movs	r1, #0
 800109c:	481d      	ldr	r0, [pc, #116]	; (8001114 <main+0xc8>)
 800109e:	f007 fca9 	bl	80089f4 <osThreadNew>
 80010a2:	4602      	mov	r2, r0
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <main+0xcc>)
 80010a6:	601a      	str	r2, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of normTaskEvent */
  normTaskEventHandle = osEventFlagsNew(&normTaskEvent_attributes);
 80010a8:	481c      	ldr	r0, [pc, #112]	; (800111c <main+0xd0>)
 80010aa:	f007 fd77 	bl	8008b9c <osEventFlagsNew>
 80010ae:	4602      	mov	r2, r0
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <main+0xd4>)
 80010b2:	601a      	str	r2, [r3, #0]

  /* creation of slowTaskEvent */
  slowTaskEventHandle = osEventFlagsNew(&slowTaskEvent_attributes);
 80010b4:	481b      	ldr	r0, [pc, #108]	; (8001124 <main+0xd8>)
 80010b6:	f007 fd71 	bl	8008b9c <osEventFlagsNew>
 80010ba:	4602      	mov	r2, r0
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <main+0xdc>)
 80010be:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  initFastTask(normTaskEventHandle);
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <main+0xd4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff63 	bl	8000f90 <initFastTask>
  initSlowTask(slowTaskEventHandle);
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <main+0xdc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f97c 	bl	80013cc <initSlowTask>
  initNormalTask(normTaskEventHandle ,slowTaskEventHandle);
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <main+0xd4>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <main+0xdc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	4610      	mov	r0, r2
 80010e0:	f000 f922 	bl	8001328 <initNormalTask>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010e4:	f007 fc50 	bl	8008988 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <main+0x9c>
 80010ea:	bf00      	nop
 80010ec:	0801820c 	.word	0x0801820c
 80010f0:	080012ed 	.word	0x080012ed
 80010f4:	20009074 	.word	0x20009074
 80010f8:	08018230 	.word	0x08018230
 80010fc:	08000fb1 	.word	0x08000fb1
 8001100:	2000a9c0 	.word	0x2000a9c0
 8001104:	08018254 	.word	0x08018254
 8001108:	08001355 	.word	0x08001355
 800110c:	2000a8fc 	.word	0x2000a8fc
 8001110:	08018278 	.word	0x08018278
 8001114:	080013ed 	.word	0x080013ed
 8001118:	2000a904 	.word	0x2000a904
 800111c:	0801829c 	.word	0x0801829c
 8001120:	2000a900 	.word	0x2000a900
 8001124:	080182ac 	.word	0x080182ac
 8001128:	2000a9c4 	.word	0x2000a9c4

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	; 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2230      	movs	r2, #48	; 0x30
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f012 fce5 	bl	8013b0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b29      	ldr	r3, [pc, #164]	; (80011fc <SystemClock_Config+0xd0>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a28      	ldr	r2, [pc, #160]	; (80011fc <SystemClock_Config+0xd0>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b26      	ldr	r3, [pc, #152]	; (80011fc <SystemClock_Config+0xd0>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <SystemClock_Config+0xd4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001178:	4a21      	ldr	r2, [pc, #132]	; (8001200 <SystemClock_Config+0xd4>)
 800117a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <SystemClock_Config+0xd4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800118c:	2302      	movs	r3, #2
 800118e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001190:	2301      	movs	r3, #1
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001194:	2310      	movs	r3, #16
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001198:	2302      	movs	r3, #2
 800119a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800119c:	2300      	movs	r3, #0
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011a0:	2310      	movs	r3, #16
 80011a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011aa:	2304      	movs	r3, #4
 80011ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011ae:	2307      	movs	r3, #7
 80011b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	4618      	mov	r0, r3
 80011b8:	f006 f842 	bl	8007240 <HAL_RCC_OscConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011c2:	f000 f8ad 	bl	8001320 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c6:	230f      	movs	r3, #15
 80011c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ca:	2302      	movs	r3, #2
 80011cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2102      	movs	r1, #2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f006 fa9c 	bl	8007720 <HAL_RCC_ClockConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011ee:	f000 f897 	bl	8001320 <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	3750      	adds	r7, #80	; 0x50
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800
 8001200:	40007000 	.word	0x40007000

08001204 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_CRC_Init+0x20>)
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <MX_CRC_Init+0x24>)
 800120c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_CRC_Init+0x20>)
 8001210:	f004 fd6a 	bl	8005ce8 <HAL_CRC_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800121a:	f000 f881 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20009898 	.word	0x20009898
 8001228:	40023000 	.word	0x40023000

0800122c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a26      	ldr	r2, [pc, #152]	; (80012e4 <MX_GPIO_Init+0xb8>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a1f      	ldr	r2, [pc, #124]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MX_GPIO_Init+0xb8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_GPIO_Init+0xb8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <MX_GPIO_Init+0xb8>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_GPIO_Init+0xb8>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_TEST_1_Pin|OUT_TEST_2_Pin|OUT_TEST_3_Pin|OUT_TEST_4_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 7158 	mov.w	r1, #864	; 0x360
 80012b8:	480b      	ldr	r0, [pc, #44]	; (80012e8 <MX_GPIO_Init+0xbc>)
 80012ba:	f004 ff95 	bl	80061e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT_TEST_1_Pin OUT_TEST_2_Pin OUT_TEST_3_Pin OUT_TEST_4_Pin */
  GPIO_InitStruct.Pin = OUT_TEST_1_Pin|OUT_TEST_2_Pin|OUT_TEST_3_Pin|OUT_TEST_4_Pin;
 80012be:	f44f 7358 	mov.w	r3, #864	; 0x360
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	4804      	ldr	r0, [pc, #16]	; (80012e8 <MX_GPIO_Init+0xbc>)
 80012d8:	f004 fd22 	bl	8005d20 <HAL_GPIO_Init>

}
 80012dc:	bf00      	nop
 80012de:	3728      	adds	r7, #40	; 0x28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020800 	.word	0x40020800

080012ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f007 fc23 	bl	8008b40 <osDelay>
 80012fa:	e7fb      	b.n	80012f4 <StartDefaultTask+0x8>

080012fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800130e:	f004 fbe9 	bl	8005ae4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40014400 	.word	0x40014400

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001326:	e7fe      	b.n	8001326 <Error_Handler+0x6>

08001328 <initNormalTask>:
static osEventFlagsId_t ntFlag = NULL;
static osEventFlagsId_t stFlag = NULL;


void initNormalTask(osEventFlagsId_t normTaskEventHandle, osEventFlagsId_t slowTaskEventHandle)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
	ntFlag = normTaskEventHandle;
 8001332:	4a06      	ldr	r2, [pc, #24]	; (800134c <initNormalTask+0x24>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6013      	str	r3, [r2, #0]
	stFlag = slowTaskEventHandle;
 8001338:	4a05      	ldr	r2, [pc, #20]	; (8001350 <initNormalTask+0x28>)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	6013      	str	r3, [r2, #0]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	200029b0 	.word	0x200029b0
 8001350:	200029b4 	.word	0x200029b4

08001354 <StartNormalTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartNormalTask */
void StartNormalTask(void *argument)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	uint32_t cnt;
	uint32_t blink;



    while ((ntFlag == NULL) || (stFlag == NULL))
 800135c:	e002      	b.n	8001364 <StartNormalTask+0x10>
	{
    	osDelay(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f007 fbee 	bl	8008b40 <osDelay>
    while ((ntFlag == NULL) || (stFlag == NULL))
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <StartNormalTask+0x70>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f8      	beq.n	800135e <StartNormalTask+0xa>
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <StartNormalTask+0x74>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f4      	beq.n	800135e <StartNormalTask+0xa>


  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait (ntFlag,1, 0, 15);
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <StartNormalTask+0x70>)
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	230f      	movs	r3, #15
 800137a:	2200      	movs	r2, #0
 800137c:	2101      	movs	r1, #1
 800137e:	f007 fcfb 	bl	8008d78 <osEventFlagsWait>
	  osEventFlagsClear(ntFlag,1);
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <StartNormalTask+0x70>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2101      	movs	r1, #1
 8001388:	4618      	mov	r0, r3
 800138a:	f007 fcb1 	bl	8008cf0 <osEventFlagsClear>
	  cnt++;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	3301      	adds	r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
	  blink++;
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	3301      	adds	r3, #1
 8001398:	60bb      	str	r3, [r7, #8]
	  Set_Output(OUT_TEST_3,blink & 1);
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fdd6 	bl	8000f58 <Set_Output>
	  if(cnt >= 10)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b09      	cmp	r3, #9
 80013b0:	d9e0      	bls.n	8001374 <StartNormalTask+0x20>
	  {
		  cnt = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
		  osEventFlagsSet(stFlag,1);
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <StartNormalTask+0x74>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2101      	movs	r1, #1
 80013bc:	4618      	mov	r0, r3
 80013be:	f007 fc3f 	bl	8008c40 <osEventFlagsSet>
	  osEventFlagsWait (ntFlag,1, 0, 15);
 80013c2:	e7d7      	b.n	8001374 <StartNormalTask+0x20>
 80013c4:	200029b0 	.word	0x200029b0
 80013c8:	200029b4 	.word	0x200029b4

080013cc <initSlowTask>:
/* Private variables ---------------------------------------------------------*/
static osEventFlagsId_t stFlag = NULL;


void initSlowTask(osEventFlagsId_t slowTaskEventHandle)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	stFlag = slowTaskEventHandle;
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <initSlowTask+0x1c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	200029b8 	.word	0x200029b8

080013ec <StartSlowTask>:

void StartSlowTask(void *argument)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

	uint32_t cnt;
	uint32_t blink;
	//TaskHandle_t stHandle = xTaskGetHandle( "slowTask" );

	while (stFlag == NULL)
 80013f4:	e002      	b.n	80013fc <StartSlowTask+0x10>
    {
	  osDelay(1);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f007 fba2 	bl	8008b40 <osDelay>
	while (stFlag == NULL)
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <StartSlowTask+0x78>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f8      	beq.n	80013f6 <StartSlowTask+0xa>


  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait (stFlag,1, 0, 150);
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <StartSlowTask+0x78>)
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	2396      	movs	r3, #150	; 0x96
 800140a:	2200      	movs	r2, #0
 800140c:	2101      	movs	r1, #1
 800140e:	f007 fcb3 	bl	8008d78 <osEventFlagsWait>
	  osEventFlagsClear(stFlag,1);
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <StartSlowTask+0x78>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2101      	movs	r1, #1
 8001418:	4618      	mov	r0, r3
 800141a:	f007 fc69 	bl	8008cf0 <osEventFlagsClear>
	  if(blink & 8)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <StartSlowTask+0x44>
	  {
		  BSP_LED_On(LED_GREEN);
 8001428:	2000      	movs	r0, #0
 800142a:	f004 fa4b 	bl	80058c4 <BSP_LED_On>
 800142e:	e002      	b.n	8001436 <StartSlowTask+0x4a>
	  }
	  else
	  {
		  BSP_LED_Off(LED_GREEN);
 8001430:	2000      	movs	r0, #0
 8001432:	f004 fa5d 	bl	80058f0 <BSP_LED_Off>
	  }
	  //Set_Output(OUT_TEST_4,blink & 1);
	  cnt++;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3301      	adds	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
	  blink++;
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	3301      	adds	r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
	  Set_Output(OUT_TEST_4, 1);
 8001442:	2101      	movs	r1, #1
 8001444:	2003      	movs	r0, #3
 8001446:	f7ff fd87 	bl	8000f58 <Set_Output>
	  PositionProcess();
 800144a:	f00a ffb9 	bl	800c3c0 <PositionProcess>
	  Set_Output(OUT_TEST_4, 0);
 800144e:	2100      	movs	r1, #0
 8001450:	2003      	movs	r0, #3
 8001452:	f7ff fd81 	bl	8000f58 <Set_Output>
	  if(cnt >= 10)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2b09      	cmp	r3, #9
 800145a:	d9d3      	bls.n	8001404 <StartSlowTask+0x18>
	  {
//		  Set_Output(OUT_TEST_4, 1);
////		  printf("\n\n\n\rHallo\n\n\r");
		  cnt= 0;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
	  osEventFlagsWait (stFlag,1, 0, 150);
 8001460:	e7d0      	b.n	8001404 <StartSlowTask+0x18>
 8001462:	bf00      	nop
 8001464:	200029b8 	.word	0x200029b8

08001468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_MspInit+0x54>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_MspInit+0x54>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_MspInit+0x54>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_MspInit+0x54>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <HAL_MspInit+0x54>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_MspInit+0x54>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	210f      	movs	r1, #15
 80014aa:	f06f 0001 	mvn.w	r0, #1
 80014ae:	f004 fbf1 	bl	8005c94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800

080014c0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <HAL_CRC_MspInit+0x3c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d10d      	bne.n	80014ee <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_CRC_MspInit+0x40>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a09      	ldr	r2, [pc, #36]	; (8001500 <HAL_CRC_MspInit+0x40>)
 80014dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_CRC_MspInit+0x40>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023000 	.word	0x40023000
 8001500:	40023800 	.word	0x40023800

08001504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	; 0x30
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001514:	2200      	movs	r2, #0
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	2019      	movs	r0, #25
 800151a:	f004 fbbb 	bl	8005c94 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800151e:	2019      	movs	r0, #25
 8001520:	f004 fbd4 	bl	8005ccc <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <HAL_InitTick+0xa0>)
 800152a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152c:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <HAL_InitTick+0xa0>)
 800152e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001532:	6453      	str	r3, [r2, #68]	; 0x44
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_InitTick+0xa0>)
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001540:	f107 0210 	add.w	r2, r7, #16
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f006 fada 	bl	8007b04 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001550:	f006 fac4 	bl	8007adc <HAL_RCC_GetPCLK2Freq>
 8001554:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001558:	4a13      	ldr	r2, [pc, #76]	; (80015a8 <HAL_InitTick+0xa4>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	0c9b      	lsrs	r3, r3, #18
 8001560:	3b01      	subs	r3, #1
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_InitTick+0xa8>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <HAL_InitTick+0xac>)
 8001568:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_InitTick+0xa8>)
 800156c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001570:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_InitTick+0xa8>)
 8001574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001576:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_InitTick+0xa8>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_InitTick+0xa8>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001584:	4809      	ldr	r0, [pc, #36]	; (80015ac <HAL_InitTick+0xa8>)
 8001586:	f006 faef 	bl	8007b68 <HAL_TIM_Base_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d104      	bne.n	800159a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <HAL_InitTick+0xa8>)
 8001592:	f006 fb1e 	bl	8007bd2 <HAL_TIM_Base_Start_IT>
 8001596:	4603      	mov	r3, r0
 8001598:	e000      	b.n	800159c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3730      	adds	r7, #48	; 0x30
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	431bde83 	.word	0x431bde83
 80015ac:	2000b9e8 	.word	0x2000b9e8
 80015b0:	40014400 	.word	0x40014400

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <NMI_Handler+0x4>

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80015e6:	f006 fb18 	bl	8007c1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000b9e8 	.word	0x2000b9e8

080015f4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <BSP_I2C1_Init+0x58>)
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <BSP_I2C1_Init+0x5c>)
 8001602:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <BSP_I2C1_Init+0x60>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	4912      	ldr	r1, [pc, #72]	; (8001654 <BSP_I2C1_Init+0x60>)
 800160c:	600a      	str	r2, [r1, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d117      	bne.n	8001642 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001612:	480e      	ldr	r0, [pc, #56]	; (800164c <BSP_I2C1_Init+0x58>)
 8001614:	f005 fa9e 	bl	8006b54 <HAL_I2C_GetState>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d111      	bne.n	8001642 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800161e:	480b      	ldr	r0, [pc, #44]	; (800164c <BSP_I2C1_Init+0x58>)
 8001620:	f000 f8e2 	bl	80017e8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10b      	bne.n	8001642 <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800162a:	4808      	ldr	r0, [pc, #32]	; (800164c <BSP_I2C1_Init+0x58>)
 800162c:	f000 f8a8 	bl	8001780 <MX_I2C1_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8001636:	f06f 0307 	mvn.w	r3, #7
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	e001      	b.n	8001642 <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001642:	687b      	ldr	r3, [r7, #4]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2000ba28 	.word	0x2000ba28
 8001650:	40005400 	.word	0x40005400
 8001654:	200029bc 	.word	0x200029bc

08001658 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <BSP_I2C1_DeInit+0x48>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d014      	beq.n	8001694 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <BSP_I2C1_DeInit+0x48>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3b01      	subs	r3, #1
 8001670:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <BSP_I2C1_DeInit+0x48>)
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <BSP_I2C1_DeInit+0x48>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10b      	bne.n	8001694 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800167c:	4809      	ldr	r0, [pc, #36]	; (80016a4 <BSP_I2C1_DeInit+0x4c>)
 800167e:	f000 f8fd 	bl	800187c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001682:	4808      	ldr	r0, [pc, #32]	; (80016a4 <BSP_I2C1_DeInit+0x4c>)
 8001684:	f004 ff02 	bl	800648c <HAL_I2C_DeInit>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800168e:	f06f 0307 	mvn.w	r3, #7
 8001692:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001694:	687b      	ldr	r3, [r7, #4]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200029bc 	.word	0x200029bc
 80016a4:	2000ba28 	.word	0x2000ba28

080016a8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af04      	add	r7, sp, #16
 80016ae:	60ba      	str	r2, [r7, #8]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4603      	mov	r3, r0
 80016b4:	81fb      	strh	r3, [r7, #14]
 80016b6:	460b      	mov	r3, r1
 80016b8:	81bb      	strh	r3, [r7, #12]
 80016ba:	4613      	mov	r3, r2
 80016bc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80016c2:	89ba      	ldrh	r2, [r7, #12]
 80016c4:	89f9      	ldrh	r1, [r7, #14]
 80016c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ca:	9302      	str	r3, [sp, #8]
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2301      	movs	r3, #1
 80016d6:	480c      	ldr	r0, [pc, #48]	; (8001708 <BSP_I2C1_WriteReg+0x60>)
 80016d8:	f004 ff1c 	bl	8006514 <HAL_I2C_Mem_Write>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00c      	beq.n	80016fc <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80016e2:	4809      	ldr	r0, [pc, #36]	; (8001708 <BSP_I2C1_WriteReg+0x60>)
 80016e4:	f005 fa44 	bl	8006b70 <HAL_I2C_GetError>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d103      	bne.n	80016f6 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80016ee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e002      	b.n	80016fc <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80016f6:	f06f 0303 	mvn.w	r3, #3
 80016fa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80016fc:	697b      	ldr	r3, [r7, #20]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000ba28 	.word	0x2000ba28

0800170c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af04      	add	r7, sp, #16
 8001712:	60ba      	str	r2, [r7, #8]
 8001714:	461a      	mov	r2, r3
 8001716:	4603      	mov	r3, r0
 8001718:	81fb      	strh	r3, [r7, #14]
 800171a:	460b      	mov	r3, r1
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	4613      	mov	r3, r2
 8001720:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001726:	89ba      	ldrh	r2, [r7, #12]
 8001728:	89f9      	ldrh	r1, [r7, #14]
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2301      	movs	r3, #1
 800173a:	480c      	ldr	r0, [pc, #48]	; (800176c <BSP_I2C1_ReadReg+0x60>)
 800173c:	f004 ffe4 	bl	8006708 <HAL_I2C_Mem_Read>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001746:	4809      	ldr	r0, [pc, #36]	; (800176c <BSP_I2C1_ReadReg+0x60>)
 8001748:	f005 fa12 	bl	8006b70 <HAL_I2C_GetError>
 800174c:	4603      	mov	r3, r0
 800174e:	2b04      	cmp	r3, #4
 8001750:	d103      	bne.n	800175a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001752:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e002      	b.n	8001760 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800175a:	f06f 0303 	mvn.w	r3, #3
 800175e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001760:	697b      	ldr	r3, [r7, #20]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000ba28 	.word	0x2000ba28

08001770 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001774:	f004 f9ca 	bl	8005b0c <HAL_GetTick>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <MX_I2C1_Init+0x60>)
 8001790:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <MX_I2C1_Init+0x64>)
 8001796:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017aa:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f004 fd29 	bl	800621c <HAL_I2C_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40005400 	.word	0x40005400
 80017e4:	000186a0 	.word	0x000186a0

080017e8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <I2C1_MspInit+0x8c>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	4a1e      	ldr	r2, [pc, #120]	; (8001874 <I2C1_MspInit+0x8c>)
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <I2C1_MspInit+0x8c>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800180c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001812:	2312      	movs	r3, #18
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001816:	2301      	movs	r3, #1
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800181e:	2304      	movs	r3, #4
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4813      	ldr	r0, [pc, #76]	; (8001878 <I2C1_MspInit+0x90>)
 800182a:	f004 fa79 	bl	8005d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800182e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001834:	2312      	movs	r3, #18
 8001836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001838:	2301      	movs	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001840:	2304      	movs	r3, #4
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	480b      	ldr	r0, [pc, #44]	; (8001878 <I2C1_MspInit+0x90>)
 800184c:	f004 fa68 	bl	8005d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <I2C1_MspInit+0x8c>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <I2C1_MspInit+0x8c>)
 800185a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800185e:	6413      	str	r3, [r2, #64]	; 0x40
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <I2C1_MspInit+0x8c>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800186c:	bf00      	nop
 800186e:	3728      	adds	r7, #40	; 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	40020400 	.word	0x40020400

0800187c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <I2C1_MspDeInit+0x30>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	4a08      	ldr	r2, [pc, #32]	; (80018ac <I2C1_MspDeInit+0x30>)
 800188a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800188e:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001894:	4806      	ldr	r0, [pc, #24]	; (80018b0 <I2C1_MspDeInit+0x34>)
 8001896:	f004 fbc5 	bl	8006024 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800189a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800189e:	4804      	ldr	r0, [pc, #16]	; (80018b0 <I2C1_MspDeInit+0x34>)
 80018a0:	f004 fbc0 	bl	8006024 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020400 	.word	0x40020400

080018b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	e00a      	b.n	80018dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018c6:	f3af 8000 	nop.w
 80018ca:	4601      	mov	r1, r0
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	60ba      	str	r2, [r7, #8]
 80018d2:	b2ca      	uxtb	r2, r1
 80018d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3301      	adds	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	dbf0      	blt.n	80018c6 <_read+0x12>
	}

return len;
 80018e4:	687b      	ldr	r3, [r7, #4]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e009      	b.n	8001914 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	60ba      	str	r2, [r7, #8]
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f004 f869 	bl	80059e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	429a      	cmp	r2, r3
 800191a:	dbf1      	blt.n	8001900 <_write+0x12>
	}
	return len;
 800191c:	687b      	ldr	r3, [r7, #4]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <_close>:

int _close(int file)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
	return -1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194e:	605a      	str	r2, [r3, #4]
	return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_isatty>:

int _isatty(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	return 1;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
	return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001998:	4a14      	ldr	r2, [pc, #80]	; (80019ec <_sbrk+0x5c>)
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <_sbrk+0x60>)
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <_sbrk+0x64>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <_sbrk+0x68>)
 80019b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d207      	bcs.n	80019d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c0:	f012 f86e 	bl	8013aa0 <__errno>
 80019c4:	4602      	mov	r2, r0
 80019c6:	230c      	movs	r3, #12
 80019c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	e009      	b.n	80019e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <_sbrk+0x64>)
 80019e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e2:	68fb      	ldr	r3, [r7, #12]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20018000 	.word	0x20018000
 80019f0:	00000400 	.word	0x00000400
 80019f4:	200029c0 	.word	0x200029c0
 80019f8:	2000c398 	.word	0x2000c398

080019fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <SystemInit+0x28>)
 8001a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a06:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <SystemInit+0x28>)
 8001a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <SystemInit+0x28>)
 8001a12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a16:	609a      	str	r2, [r3, #8]
#endif
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a2e:	e003      	b.n	8001a38 <LoopCopyDataInit>

08001a30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a36:	3104      	adds	r1, #4

08001a38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a38:	480b      	ldr	r0, [pc, #44]	; (8001a68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a40:	d3f6      	bcc.n	8001a30 <CopyDataInit>
  ldr  r2, =_sbss
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a44:	e002      	b.n	8001a4c <LoopFillZerobss>

08001a46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a48:	f842 3b04 	str.w	r3, [r2], #4

08001a4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a50:	d3f9      	bcc.n	8001a46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a52:	f7ff ffd3 	bl	80019fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a56:	f012 f829 	bl	8013aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a5a:	f7ff faf7 	bl	800104c <main>
  bx  lr    
 8001a5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a60:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001a64:	080189c8 	.word	0x080189c8
  ldr  r0, =_sdata
 8001a68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a6c:	200014d8 	.word	0x200014d8
  ldr  r2, =_sbss
 8001a70:	200014d8 	.word	0x200014d8
  ldr  r3, = _ebss
 8001a74:	2000c394 	.word	0x2000c394

08001a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC_IRQHandler>
	...

08001a7c <LIS2DW12_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d103      	bne.n	8001a98 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	e04d      	b.n	8001b34 <LIS2DW12_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	7b1a      	ldrb	r2, [r3, #12]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	699a      	ldr	r2, [r3, #24]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <LIS2DW12_RegisterBusIO+0xc4>)
 8001ad4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a1a      	ldr	r2, [pc, #104]	; (8001b44 <LIS2DW12_RegisterBusIO+0xc8>)
 8001ada:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d103      	bne.n	8001af2 <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	e020      	b.n	8001b34 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4798      	blx	r3
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <LIS2DW12_RegisterBusIO+0x8a>
    {
      ret = LIS2DW12_ERROR;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e016      	b.n	8001b34 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d112      	bne.n	8001b34 <LIS2DW12_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10d      	bne.n	8001b34 <LIS2DW12_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001b18:	2305      	movs	r3, #5
 8001b1a:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001b1c:	7afb      	ldrb	r3, [r7, #11]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	2121      	movs	r1, #33	; 0x21
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fd87 	bl	8002636 <LIS2DW12_Write_Reg>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <LIS2DW12_RegisterBusIO+0xb8>
          {
            ret = LIS2DW12_ERROR;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001b34:	68fb      	ldr	r3, [r7, #12]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	080029c9 	.word	0x080029c9
 8001b44:	080029ff 	.word	0x080029ff

08001b48 <LIS2DW12_Init>:
 * @brief  Initialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	331c      	adds	r3, #28
 8001b54:	2101      	movs	r1, #1
 8001b56:	4618      	mov	r0, r3
 8001b58:	f001 fa94 	bl	8003084 <lis2dw12_auto_increment_set>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	e04b      	b.n	8001c00 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	331c      	adds	r3, #28
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f001 f9a8 	bl	8002ec4 <lis2dw12_block_data_update_set>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	e03f      	b.n	8001c00 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	331c      	adds	r3, #28
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 faa2 	bl	80030d0 <lis2dw12_fifo_mode_set>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e033      	b.n	8001c00 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	331c      	adds	r3, #28
 8001b9c:	2104      	movs	r1, #4
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 ff78 	bl	8002a94 <lis2dw12_power_mode_set>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d002      	beq.n	8001bb0 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	e027      	b.n	8001c00 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <LIS2DW12_Init+0xc0>)
 8001bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	331c      	adds	r3, #28
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f001 f869 	bl	8002ca4 <lis2dw12_data_rate_set>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bdc:	e010      	b.n	8001c00 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	331c      	adds	r3, #28
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f001 f993 	bl	8002f10 <lis2dw12_full_scale_set>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf4:	e004      	b.n	8001c00 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	42c80000 	.word	0x42c80000

08001c0c <LIS2DW12_DeInit>:
 * @brief  Deinitialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f888 	bl	8001d2a <LIS2DW12_ACC_Disable>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
 8001c24:	e010      	b.n	8001c48 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <LIS2DW12_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	331c      	adds	r3, #28
 8001c5e:	6839      	ldr	r1, [r7, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f001 f9fe 	bl	8003062 <lis2dw12_device_id_get>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c70:	e000      	b.n	8001c74 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <LIS2DW12_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2DW12 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2200      	movs	r2, #0
 8001c96:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2210      	movs	r2, #16
 8001ca8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <LIS2DW12_GetCapabilities+0x58>)
 8001cbc:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	44c80000 	.word	0x44c80000

08001cd8 <LIS2DW12_ACC_Enable>:
 * @brief  Enable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e019      	b.n	8001d22 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode, pObj->acc_low_noise) != LIS2DW12_OK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001d00:	461a      	mov	r2, r3
 8001d02:	eeb0 0a67 	vmov.f32	s0, s15
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fcb0 	bl	800266c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <LIS2DW12_ACC_Enable+0x40>
  {
    return LIS2DW12_ERROR;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	e004      	b.n	8001d22 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <LIS2DW12_ACC_Disable>:
 * @brief  Disable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e010      	b.n	8001d62 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	331c      	adds	r3, #28
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 ffac 	bl	8002ca4 <lis2dw12_data_rate_set>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	e004      	b.n	8001d62 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <LIS2DW12_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	331c      	adds	r3, #28
 8001d7e:	f107 020b 	add.w	r2, r7, #11
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f001 f8e9 	bl	8002f5c <lis2dw12_full_scale_get>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295
 8001d94:	e0a0      	b.n	8001ed8 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	331c      	adds	r3, #28
 8001d9a:	f107 020a 	add.w	r2, r7, #10
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fec5 	bl	8002b30 <lis2dw12_power_mode_get>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
 8001db0:	e092      	b.n	8001ed8 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch(mode)
 8001db2:	7abb      	ldrb	r3, [r7, #10]
 8001db4:	2b1b      	cmp	r3, #27
 8001db6:	f200 8087 	bhi.w	8001ec8 <LIS2DW12_ACC_GetSensitivity+0x15c>
 8001dba:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <LIS2DW12_ACC_GetSensitivity+0x54>)
 8001dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc0:	08001e31 	.word	0x08001e31
 8001dc4:	08001e7d 	.word	0x08001e7d
 8001dc8:	08001e7d 	.word	0x08001e7d
 8001dcc:	08001e7d 	.word	0x08001e7d
 8001dd0:	08001e7d 	.word	0x08001e7d
 8001dd4:	08001ec9 	.word	0x08001ec9
 8001dd8:	08001ec9 	.word	0x08001ec9
 8001ddc:	08001ec9 	.word	0x08001ec9
 8001de0:	08001e31 	.word	0x08001e31
 8001de4:	08001e7d 	.word	0x08001e7d
 8001de8:	08001e7d 	.word	0x08001e7d
 8001dec:	08001e7d 	.word	0x08001e7d
 8001df0:	08001ec9 	.word	0x08001ec9
 8001df4:	08001ec9 	.word	0x08001ec9
 8001df8:	08001ec9 	.word	0x08001ec9
 8001dfc:	08001ec9 	.word	0x08001ec9
 8001e00:	08001e31 	.word	0x08001e31
 8001e04:	08001e7d 	.word	0x08001e7d
 8001e08:	08001e7d 	.word	0x08001e7d
 8001e0c:	08001e7d 	.word	0x08001e7d
 8001e10:	08001e7d 	.word	0x08001e7d
 8001e14:	08001ec9 	.word	0x08001ec9
 8001e18:	08001ec9 	.word	0x08001ec9
 8001e1c:	08001ec9 	.word	0x08001ec9
 8001e20:	08001e31 	.word	0x08001e31
 8001e24:	08001e7d 	.word	0x08001e7d
 8001e28:	08001e7d 	.word	0x08001e7d
 8001e2c:	08001e7d 	.word	0x08001e7d
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d81a      	bhi.n	8001e6c <LIS2DW12_ACC_GetSensitivity+0x100>
 8001e36:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001e4d 	.word	0x08001e4d
 8001e40:	08001e55 	.word	0x08001e55
 8001e44:	08001e5d 	.word	0x08001e5d
 8001e48:	08001e65 	.word	0x08001e65
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	4a24      	ldr	r2, [pc, #144]	; (8001ee0 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8001e50:	601a      	str	r2, [r3, #0]
           break;
 8001e52:	e012      	b.n	8001e7a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4a23      	ldr	r2, [pc, #140]	; (8001ee4 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8001e58:	601a      	str	r2, [r3, #0]
          break;
 8001e5a:	e00e      	b.n	8001e7a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4a22      	ldr	r2, [pc, #136]	; (8001ee8 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8001e60:	601a      	str	r2, [r3, #0]
           break;
 8001e62:	e00a      	b.n	8001e7a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	4a21      	ldr	r2, [pc, #132]	; (8001eec <LIS2DW12_ACC_GetSensitivity+0x180>)
 8001e68:	601a      	str	r2, [r3, #0]
          break;
 8001e6a:	e006      	b.n	8001e7a <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	4a20      	ldr	r2, [pc, #128]	; (8001ef0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001e70:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	60fb      	str	r3, [r7, #12]
          break;
 8001e78:	bf00      	nop
      }
      break;
 8001e7a:	e02c      	b.n	8001ed6 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8001e7c:	7afb      	ldrb	r3, [r7, #11]
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d81a      	bhi.n	8001eb8 <LIS2DW12_ACC_GetSensitivity+0x14c>
 8001e82:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8001e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e88:	08001e99 	.word	0x08001e99
 8001e8c:	08001ea1 	.word	0x08001ea1
 8001e90:	08001ea9 	.word	0x08001ea9
 8001e94:	08001eb1 	.word	0x08001eb1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4a16      	ldr	r2, [pc, #88]	; (8001ef4 <LIS2DW12_ACC_GetSensitivity+0x188>)
 8001e9c:	601a      	str	r2, [r3, #0]
           break;
 8001e9e:	e012      	b.n	8001ec6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4a15      	ldr	r2, [pc, #84]	; (8001ef8 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8001ea4:	601a      	str	r2, [r3, #0]
          break;
 8001ea6:	e00e      	b.n	8001ec6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	4a0d      	ldr	r2, [pc, #52]	; (8001ee0 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8001eac:	601a      	str	r2, [r3, #0]
           break;
 8001eae:	e00a      	b.n	8001ec6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8001eb4:	601a      	str	r2, [r3, #0]
          break;
 8001eb6:	e006      	b.n	8001ec6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4a0d      	ldr	r2, [pc, #52]	; (8001ef0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001ebc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	60fb      	str	r3, [r7, #12]
          break;
 8001ec4:	bf00      	nop
      }
      break;
 8001ec6:	e006      	b.n	8001ed6 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001ecc:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	60fb      	str	r3, [r7, #12]
      break;
 8001ed4:	bf00      	nop
  }

  return ret;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	3f79db23 	.word	0x3f79db23
 8001ee4:	3ff9db23 	.word	0x3ff9db23
 8001ee8:	4079db23 	.word	0x4079db23
 8001eec:	40f9db23 	.word	0x40f9db23
 8001ef0:	bf800000 	.word	0xbf800000
 8001ef4:	3e79db23 	.word	0x3e79db23
 8001ef8:	3ef9db23 	.word	0x3ef9db23

08001efc <LIS2DW12_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	331c      	adds	r3, #28
 8001f0e:	f107 020b 	add.w	r2, r7, #11
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 ff0b 	bl	8002d30 <lis2dw12_data_rate_get>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
 8001f24:	e1d4      	b.n	80022d0 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	331c      	adds	r3, #28
 8001f2a:	f107 020a 	add.w	r2, r7, #10
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fdfd 	bl	8002b30 <lis2dw12_power_mode_get>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8001f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f40:	e1c6      	b.n	80022d0 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 8001f42:	7afb      	ldrb	r3, [r7, #11]
 8001f44:	2b32      	cmp	r3, #50	; 0x32
 8001f46:	f200 81bb 	bhi.w	80022c0 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 8001f4a:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8001f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f50:	0800201d 	.word	0x0800201d
 8001f54:	08002027 	.word	0x08002027
 8001f58:	080020c5 	.word	0x080020c5
 8001f5c:	080020cd 	.word	0x080020cd
 8001f60:	080020d5 	.word	0x080020d5
 8001f64:	080020dd 	.word	0x080020dd
 8001f68:	080020e5 	.word	0x080020e5
 8001f6c:	080020ed 	.word	0x080020ed
 8001f70:	08002189 	.word	0x08002189
 8001f74:	08002225 	.word	0x08002225
 8001f78:	080022c1 	.word	0x080022c1
 8001f7c:	080022c1 	.word	0x080022c1
 8001f80:	080022c1 	.word	0x080022c1
 8001f84:	080022c1 	.word	0x080022c1
 8001f88:	080022c1 	.word	0x080022c1
 8001f8c:	080022c1 	.word	0x080022c1
 8001f90:	080022c1 	.word	0x080022c1
 8001f94:	080022c1 	.word	0x080022c1
 8001f98:	0800201d 	.word	0x0800201d
 8001f9c:	080022c1 	.word	0x080022c1
 8001fa0:	080022c1 	.word	0x080022c1
 8001fa4:	080022c1 	.word	0x080022c1
 8001fa8:	080022c1 	.word	0x080022c1
 8001fac:	080022c1 	.word	0x080022c1
 8001fb0:	080022c1 	.word	0x080022c1
 8001fb4:	080022c1 	.word	0x080022c1
 8001fb8:	080022c1 	.word	0x080022c1
 8001fbc:	080022c1 	.word	0x080022c1
 8001fc0:	080022c1 	.word	0x080022c1
 8001fc4:	080022c1 	.word	0x080022c1
 8001fc8:	080022c1 	.word	0x080022c1
 8001fcc:	080022c1 	.word	0x080022c1
 8001fd0:	080022c1 	.word	0x080022c1
 8001fd4:	080022c1 	.word	0x080022c1
 8001fd8:	080022c1 	.word	0x080022c1
 8001fdc:	080022c1 	.word	0x080022c1
 8001fe0:	080022c1 	.word	0x080022c1
 8001fe4:	080022c1 	.word	0x080022c1
 8001fe8:	080022c1 	.word	0x080022c1
 8001fec:	080022c1 	.word	0x080022c1
 8001ff0:	080022c1 	.word	0x080022c1
 8001ff4:	080022c1 	.word	0x080022c1
 8001ff8:	080022c1 	.word	0x080022c1
 8001ffc:	080022c1 	.word	0x080022c1
 8002000:	080022c1 	.word	0x080022c1
 8002004:	080022c1 	.word	0x080022c1
 8002008:	080022c1 	.word	0x080022c1
 800200c:	080022c1 	.word	0x080022c1
 8002010:	080022c1 	.word	0x080022c1
 8002014:	080022c1 	.word	0x080022c1
 8002018:	0800201d 	.word	0x0800201d
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
      break;
 8002024:	e153      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8002026:	7abb      	ldrb	r3, [r7, #10]
 8002028:	2b1b      	cmp	r3, #27
 800202a:	d843      	bhi.n	80020b4 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 800202c:	a201      	add	r2, pc, #4	; (adr r2, 8002034 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 800202e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002032:	bf00      	nop
 8002034:	080020ad 	.word	0x080020ad
 8002038:	080020ad 	.word	0x080020ad
 800203c:	080020ad 	.word	0x080020ad
 8002040:	080020ad 	.word	0x080020ad
 8002044:	080020a5 	.word	0x080020a5
 8002048:	080020b5 	.word	0x080020b5
 800204c:	080020b5 	.word	0x080020b5
 8002050:	080020b5 	.word	0x080020b5
 8002054:	080020ad 	.word	0x080020ad
 8002058:	080020ad 	.word	0x080020ad
 800205c:	080020ad 	.word	0x080020ad
 8002060:	080020ad 	.word	0x080020ad
 8002064:	080020b5 	.word	0x080020b5
 8002068:	080020b5 	.word	0x080020b5
 800206c:	080020b5 	.word	0x080020b5
 8002070:	080020b5 	.word	0x080020b5
 8002074:	080020ad 	.word	0x080020ad
 8002078:	080020ad 	.word	0x080020ad
 800207c:	080020ad 	.word	0x080020ad
 8002080:	080020ad 	.word	0x080020ad
 8002084:	080020a5 	.word	0x080020a5
 8002088:	080020b5 	.word	0x080020b5
 800208c:	080020b5 	.word	0x080020b5
 8002090:	080020b5 	.word	0x080020b5
 8002094:	080020ad 	.word	0x080020ad
 8002098:	080020ad 	.word	0x080020ad
 800209c:	080020ad 	.word	0x080020ad
 80020a0:	080020ad 	.word	0x080020ad
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4a8c      	ldr	r2, [pc, #560]	; (80022d8 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80020a8:	601a      	str	r2, [r3, #0]
           break;
 80020aa:	e00a      	b.n	80020c2 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4a8b      	ldr	r2, [pc, #556]	; (80022dc <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 80020b0:	601a      	str	r2, [r3, #0]
          break;
 80020b2:	e006      	b.n	80020c2 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	4a8a      	ldr	r2, [pc, #552]	; (80022e0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80020b8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
 80020be:	60fb      	str	r3, [r7, #12]
          break;
 80020c0:	bf00      	nop
      }
      break;
 80020c2:	e104      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	4a84      	ldr	r2, [pc, #528]	; (80022d8 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80020c8:	601a      	str	r2, [r3, #0]
      break;
 80020ca:	e100      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4a85      	ldr	r2, [pc, #532]	; (80022e4 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 80020d0:	601a      	str	r2, [r3, #0]
      break;
 80020d2:	e0fc      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4a84      	ldr	r2, [pc, #528]	; (80022e8 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 80020d8:	601a      	str	r2, [r3, #0]
      break;
 80020da:	e0f8      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	4a83      	ldr	r2, [pc, #524]	; (80022ec <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 80020e0:	601a      	str	r2, [r3, #0]
      break;
 80020e2:	e0f4      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	4a82      	ldr	r2, [pc, #520]	; (80022f0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80020e8:	601a      	str	r2, [r3, #0]
      break;
 80020ea:	e0f0      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 80020ec:	7abb      	ldrb	r3, [r7, #10]
 80020ee:	2b1b      	cmp	r3, #27
 80020f0:	d842      	bhi.n	8002178 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 80020f2:	a201      	add	r2, pc, #4	; (adr r2, 80020f8 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 80020f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f8:	08002171 	.word	0x08002171
 80020fc:	08002171 	.word	0x08002171
 8002100:	08002171 	.word	0x08002171
 8002104:	08002171 	.word	0x08002171
 8002108:	08002169 	.word	0x08002169
 800210c:	08002179 	.word	0x08002179
 8002110:	08002179 	.word	0x08002179
 8002114:	08002179 	.word	0x08002179
 8002118:	08002171 	.word	0x08002171
 800211c:	08002171 	.word	0x08002171
 8002120:	08002171 	.word	0x08002171
 8002124:	08002171 	.word	0x08002171
 8002128:	08002179 	.word	0x08002179
 800212c:	08002179 	.word	0x08002179
 8002130:	08002179 	.word	0x08002179
 8002134:	08002179 	.word	0x08002179
 8002138:	08002171 	.word	0x08002171
 800213c:	08002171 	.word	0x08002171
 8002140:	08002171 	.word	0x08002171
 8002144:	08002171 	.word	0x08002171
 8002148:	08002169 	.word	0x08002169
 800214c:	08002179 	.word	0x08002179
 8002150:	08002179 	.word	0x08002179
 8002154:	08002179 	.word	0x08002179
 8002158:	08002171 	.word	0x08002171
 800215c:	08002171 	.word	0x08002171
 8002160:	08002171 	.word	0x08002171
 8002164:	08002171 	.word	0x08002171
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4a62      	ldr	r2, [pc, #392]	; (80022f4 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 800216c:	601a      	str	r2, [r3, #0]
           break;
 800216e:	e00a      	b.n	8002186 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4a5f      	ldr	r2, [pc, #380]	; (80022f0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002174:	601a      	str	r2, [r3, #0]
          break;
 8002176:	e006      	b.n	8002186 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4a59      	ldr	r2, [pc, #356]	; (80022e0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 800217c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
 8002182:	60fb      	str	r3, [r7, #12]
          break;
 8002184:	bf00      	nop
      }
      break;
 8002186:	e0a2      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8002188:	7abb      	ldrb	r3, [r7, #10]
 800218a:	2b1b      	cmp	r3, #27
 800218c:	d842      	bhi.n	8002214 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 800218e:	a201      	add	r2, pc, #4	; (adr r2, 8002194 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8002190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002194:	0800220d 	.word	0x0800220d
 8002198:	0800220d 	.word	0x0800220d
 800219c:	0800220d 	.word	0x0800220d
 80021a0:	0800220d 	.word	0x0800220d
 80021a4:	08002205 	.word	0x08002205
 80021a8:	08002215 	.word	0x08002215
 80021ac:	08002215 	.word	0x08002215
 80021b0:	08002215 	.word	0x08002215
 80021b4:	0800220d 	.word	0x0800220d
 80021b8:	0800220d 	.word	0x0800220d
 80021bc:	0800220d 	.word	0x0800220d
 80021c0:	0800220d 	.word	0x0800220d
 80021c4:	08002215 	.word	0x08002215
 80021c8:	08002215 	.word	0x08002215
 80021cc:	08002215 	.word	0x08002215
 80021d0:	08002215 	.word	0x08002215
 80021d4:	0800220d 	.word	0x0800220d
 80021d8:	0800220d 	.word	0x0800220d
 80021dc:	0800220d 	.word	0x0800220d
 80021e0:	0800220d 	.word	0x0800220d
 80021e4:	08002205 	.word	0x08002205
 80021e8:	08002215 	.word	0x08002215
 80021ec:	08002215 	.word	0x08002215
 80021f0:	08002215 	.word	0x08002215
 80021f4:	0800220d 	.word	0x0800220d
 80021f8:	0800220d 	.word	0x0800220d
 80021fc:	0800220d 	.word	0x0800220d
 8002200:	0800220d 	.word	0x0800220d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4a3c      	ldr	r2, [pc, #240]	; (80022f8 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8002208:	601a      	str	r2, [r3, #0]
           break;
 800220a:	e00a      	b.n	8002222 <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	4a38      	ldr	r2, [pc, #224]	; (80022f0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002210:	601a      	str	r2, [r3, #0]
          break;
 8002212:	e006      	b.n	8002222 <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4a32      	ldr	r2, [pc, #200]	; (80022e0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002218:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	60fb      	str	r3, [r7, #12]
          break;
 8002220:	bf00      	nop
      }
      break;
 8002222:	e054      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8002224:	7abb      	ldrb	r3, [r7, #10]
 8002226:	2b1b      	cmp	r3, #27
 8002228:	d842      	bhi.n	80022b0 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 800222a:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	080022a9 	.word	0x080022a9
 8002234:	080022a9 	.word	0x080022a9
 8002238:	080022a9 	.word	0x080022a9
 800223c:	080022a9 	.word	0x080022a9
 8002240:	080022a1 	.word	0x080022a1
 8002244:	080022b1 	.word	0x080022b1
 8002248:	080022b1 	.word	0x080022b1
 800224c:	080022b1 	.word	0x080022b1
 8002250:	080022a9 	.word	0x080022a9
 8002254:	080022a9 	.word	0x080022a9
 8002258:	080022a9 	.word	0x080022a9
 800225c:	080022a9 	.word	0x080022a9
 8002260:	080022b1 	.word	0x080022b1
 8002264:	080022b1 	.word	0x080022b1
 8002268:	080022b1 	.word	0x080022b1
 800226c:	080022b1 	.word	0x080022b1
 8002270:	080022a9 	.word	0x080022a9
 8002274:	080022a9 	.word	0x080022a9
 8002278:	080022a9 	.word	0x080022a9
 800227c:	080022a9 	.word	0x080022a9
 8002280:	080022a1 	.word	0x080022a1
 8002284:	080022b1 	.word	0x080022b1
 8002288:	080022b1 	.word	0x080022b1
 800228c:	080022b1 	.word	0x080022b1
 8002290:	080022a9 	.word	0x080022a9
 8002294:	080022a9 	.word	0x080022a9
 8002298:	080022a9 	.word	0x080022a9
 800229c:	080022a9 	.word	0x080022a9
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	4a16      	ldr	r2, [pc, #88]	; (80022fc <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 80022a4:	601a      	str	r2, [r3, #0]
           break;
 80022a6:	e00a      	b.n	80022be <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4a11      	ldr	r2, [pc, #68]	; (80022f0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80022ac:	601a      	str	r2, [r3, #0]
          break;
 80022ae:	e006      	b.n	80022be <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80022b4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	60fb      	str	r3, [r7, #12]
          break;
 80022bc:	bf00      	nop
      }
      break;
 80022be:	e006      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80022c4:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ca:	60fb      	str	r3, [r7, #12]
      break;
 80022cc:	bf00      	nop
  }

  return ret;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	41480000 	.word	0x41480000
 80022dc:	3fcccccd 	.word	0x3fcccccd
 80022e0:	bf800000 	.word	0xbf800000
 80022e4:	41c80000 	.word	0x41c80000
 80022e8:	42480000 	.word	0x42480000
 80022ec:	42c80000 	.word	0x42c80000
 80022f0:	43480000 	.word	0x43480000
 80022f4:	43c80000 	.word	0x43c80000
 80022f8:	44480000 	.word	0x44480000
 80022fc:	44c80000 	.word	0x44c80000

08002300 <LIS2DW12_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 800230c:	2200      	movs	r2, #0
 800230e:	2100      	movs	r1, #0
 8002310:	ed97 0a00 	vldr	s0, [r7]
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f805 	bl	8002324 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800231a:	4603      	mov	r3, r0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002330:	460b      	mov	r3, r1
 8002332:	71fb      	strb	r3, [r7, #7]
 8002334:	4613      	mov	r3, r2
 8002336:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800233e:	2b01      	cmp	r3, #1
 8002340:	d109      	bne.n	8002356 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8002342:	79ba      	ldrb	r2, [r7, #6]
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	4619      	mov	r1, r3
 8002348:	ed97 0a02 	vldr	s0, [r7, #8]
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f98d 	bl	800266c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002352:	4603      	mov	r3, r0
 8002354:	e008      	b.n	8002368 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8002356:	79ba      	ldrb	r2, [r7, #6]
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	4619      	mov	r1, r3
 800235c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fa9f 	bl	80028a4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8002366:	4603      	mov	r3, r0
  }
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <LIS2DW12_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	331c      	adds	r3, #28
 8002382:	f107 020b 	add.w	r2, r7, #11
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fde7 	bl	8002f5c <lis2dw12_full_scale_get>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8002394:	f04f 33ff 	mov.w	r3, #4294967295
 8002398:	e027      	b.n	80023ea <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800239a:	7afb      	ldrb	r3, [r7, #11]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d81b      	bhi.n	80023d8 <LIS2DW12_ACC_GetFullScale+0x68>
 80023a0:	a201      	add	r2, pc, #4	; (adr r2, 80023a8 <LIS2DW12_ACC_GetFullScale+0x38>)
 80023a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a6:	bf00      	nop
 80023a8:	080023b9 	.word	0x080023b9
 80023ac:	080023c1 	.word	0x080023c1
 80023b0:	080023c9 	.word	0x080023c9
 80023b4:	080023d1 	.word	0x080023d1
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2202      	movs	r2, #2
 80023bc:	601a      	str	r2, [r3, #0]
      break;
 80023be:	e013      	b.n	80023e8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2204      	movs	r2, #4
 80023c4:	601a      	str	r2, [r3, #0]
      break;
 80023c6:	e00f      	b.n	80023e8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2208      	movs	r2, #8
 80023cc:	601a      	str	r2, [r3, #0]
      break;
 80023ce:	e00b      	b.n	80023e8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2210      	movs	r2, #16
 80023d4:	601a      	str	r2, [r3, #0]
      break;
 80023d6:	e007      	b.n	80023e8 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f04f 32ff 	mov.w	r2, #4294967295
 80023de:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80023e0:	f04f 33ff 	mov.w	r3, #4294967295
 80023e4:	60fb      	str	r3, [r7, #12]
      break;
 80023e6:	bf00      	nop
  }

  return ret;
 80023e8:	68fb      	ldr	r3, [r7, #12]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop

080023f4 <LIS2DW12_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
         : (FullScale <= 4) ? LIS2DW12_4g
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b02      	cmp	r3, #2
 8002402:	dd0b      	ble.n	800241c <LIS2DW12_ACC_SetFullScale+0x28>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b04      	cmp	r3, #4
 8002408:	dd06      	ble.n	8002418 <LIS2DW12_ACC_SetFullScale+0x24>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b08      	cmp	r3, #8
 800240e:	dc01      	bgt.n	8002414 <LIS2DW12_ACC_SetFullScale+0x20>
 8002410:	2302      	movs	r3, #2
 8002412:	e004      	b.n	800241e <LIS2DW12_ACC_SetFullScale+0x2a>
 8002414:	2303      	movs	r3, #3
 8002416:	e002      	b.n	800241e <LIS2DW12_ACC_SetFullScale+0x2a>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <LIS2DW12_ACC_SetFullScale+0x2a>
 800241c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 800241e:	73fb      	strb	r3, [r7, #15]
         : (FullScale <= 8) ? LIS2DW12_8g
         :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	331c      	adds	r3, #28
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f000 fd71 	bl	8002f10 <lis2dw12_full_scale_set>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8002434:	f04f 33ff 	mov.w	r3, #4294967295
 8002438:	e000      	b.n	800243c <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <LIS2DW12_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	331c      	adds	r3, #28
 8002456:	f107 020b 	add.w	r2, r7, #11
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fb67 	bl	8002b30 <lis2dw12_power_mode_get>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8002468:	f04f 33ff 	mov.w	r3, #4294967295
 800246c:	e089      	b.n	8002582 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	331c      	adds	r3, #28
 8002472:	f107 020c 	add.w	r2, r7, #12
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fda7 	bl	8002fcc <lis2dw12_acceleration_raw_get>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	e07b      	b.n	8002582 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch(mode)
 800248a:	7afb      	ldrb	r3, [r7, #11]
 800248c:	2b1b      	cmp	r3, #27
 800248e:	d873      	bhi.n	8002578 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8002490:	a201      	add	r2, pc, #4	; (adr r2, 8002498 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8002492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002496:	bf00      	nop
 8002498:	08002509 	.word	0x08002509
 800249c:	08002541 	.word	0x08002541
 80024a0:	08002541 	.word	0x08002541
 80024a4:	08002541 	.word	0x08002541
 80024a8:	08002541 	.word	0x08002541
 80024ac:	08002579 	.word	0x08002579
 80024b0:	08002579 	.word	0x08002579
 80024b4:	08002579 	.word	0x08002579
 80024b8:	08002509 	.word	0x08002509
 80024bc:	08002541 	.word	0x08002541
 80024c0:	08002541 	.word	0x08002541
 80024c4:	08002541 	.word	0x08002541
 80024c8:	08002579 	.word	0x08002579
 80024cc:	08002579 	.word	0x08002579
 80024d0:	08002579 	.word	0x08002579
 80024d4:	08002579 	.word	0x08002579
 80024d8:	08002509 	.word	0x08002509
 80024dc:	08002541 	.word	0x08002541
 80024e0:	08002541 	.word	0x08002541
 80024e4:	08002541 	.word	0x08002541
 80024e8:	08002541 	.word	0x08002541
 80024ec:	08002579 	.word	0x08002579
 80024f0:	08002579 	.word	0x08002579
 80024f4:	08002579 	.word	0x08002579
 80024f8:	08002509 	.word	0x08002509
 80024fc:	08002541 	.word	0x08002541
 8002500:	08002541 	.word	0x08002541
 8002504:	08002541 	.word	0x08002541
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8002508:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	da00      	bge.n	8002512 <LIS2DW12_ACC_GetAxesRaw+0xce>
 8002510:	330f      	adds	r3, #15
 8002512:	111b      	asrs	r3, r3, #4
 8002514:	b21a      	sxth	r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800251a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800251e:	2b00      	cmp	r3, #0
 8002520:	da00      	bge.n	8002524 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8002522:	330f      	adds	r3, #15
 8002524:	111b      	asrs	r3, r3, #4
 8002526:	b21a      	sxth	r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800252c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	da00      	bge.n	8002536 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8002534:	330f      	adds	r3, #15
 8002536:	111b      	asrs	r3, r3, #4
 8002538:	b21a      	sxth	r2, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	809a      	strh	r2, [r3, #4]
      break;
 800253e:	e01f      	b.n	8002580 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8002540:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	da00      	bge.n	800254a <LIS2DW12_ACC_GetAxesRaw+0x106>
 8002548:	3303      	adds	r3, #3
 800254a:	109b      	asrs	r3, r3, #2
 800254c:	b21a      	sxth	r2, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8002552:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002556:	2b00      	cmp	r3, #0
 8002558:	da00      	bge.n	800255c <LIS2DW12_ACC_GetAxesRaw+0x118>
 800255a:	3303      	adds	r3, #3
 800255c:	109b      	asrs	r3, r3, #2
 800255e:	b21a      	sxth	r2, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8002564:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002568:	2b00      	cmp	r3, #0
 800256a:	da00      	bge.n	800256e <LIS2DW12_ACC_GetAxesRaw+0x12a>
 800256c:	3303      	adds	r3, #3
 800256e:	109b      	asrs	r3, r3, #2
 8002570:	b21a      	sxth	r2, r3
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	809a      	strh	r2, [r3, #4]
      break;
 8002576:	e003      	b.n	8002580 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8002578:	f04f 33ff 	mov.w	r3, #4294967295
 800257c:	617b      	str	r3, [r7, #20]
      break;
 800257e:	bf00      	nop
  }

  return ret;
 8002580:	697b      	ldr	r3, [r7, #20]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop

0800258c <LIS2DW12_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	4619      	mov	r1, r3
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ff4e 	bl	8002444 <LIS2DW12_ACC_GetAxesRaw>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
 80025b2:	e03c      	b.n	800262e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80025b4:	f107 030c 	add.w	r3, r7, #12
 80025b8:	4619      	mov	r1, r3
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff fbd6 	bl	8001d6c <LIS2DW12_ACC_GetSensitivity>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	e030      	b.n	800262e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80025cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80025d0:	ee07 3a90 	vmov	s15, r3
 80025d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e4:	ee17 2a90 	vmov	r2, s15
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80025ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025f0:	ee07 3a90 	vmov	s15, r3
 80025f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002600:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002604:	ee17 2a90 	vmov	r2, s15
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800260c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002610:	ee07 3a90 	vmov	s15, r3
 8002614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002618:	edd7 7a03 	vldr	s15, [r7, #12]
 800261c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002624:	ee17 2a90 	vmov	r2, s15
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <LIS2DW12_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	70fb      	strb	r3, [r7, #3]
 8002642:	4613      	mov	r3, r2
 8002644:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f103 001c 	add.w	r0, r3, #28
 800264c:	1cba      	adds	r2, r7, #2
 800264e:	78f9      	ldrb	r1, [r7, #3]
 8002650:	2301      	movs	r3, #1
 8002652:	f000 fa07 	bl	8002a64 <lis2dw12_write_reg>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 800265c:	f04f 33ff 	mov.w	r3, #4294967295
 8002660:	e000      	b.n	8002664 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	ed87 0a02 	vstr	s0, [r7, #8]
 8002678:	460b      	mov	r3, r1
 800267a:	71fb      	strb	r3, [r7, #7]
 800267c:	4613      	mov	r3, r2
 800267e:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	3b01      	subs	r3, #1
 8002684:	2b03      	cmp	r3, #3
 8002686:	d80b      	bhi.n	80026a0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8002688:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 800268a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268e:	bf00      	nop
 8002690:	080026cd 	.word	0x080026cd
 8002694:	080026f9 	.word	0x080026f9
 8002698:	08002725 	.word	0x08002725
 800269c:	08002751 	.word	0x08002751
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 80026a0:	79bb      	ldrb	r3, [r7, #6]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d002      	beq.n	80026ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 80026a6:	2304      	movs	r3, #4
 80026a8:	75fb      	strb	r3, [r7, #23]
          break;
 80026aa:	e002      	b.n	80026b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80026ac:	2314      	movs	r3, #20
 80026ae:	75fb      	strb	r3, [r7, #23]
          break;
 80026b0:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if(Odr < 12.5f)
 80026b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80026b6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80026ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c2:	d400      	bmi.n	80026c6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80026c4:	e05a      	b.n	800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 80026c6:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80026c8:	60bb      	str	r3, [r7, #8]
      break;
 80026ca:	e057      	b.n	800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80026cc:	79bb      	ldrb	r3, [r7, #6]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d002      	beq.n	80026d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80026d2:	2303      	movs	r3, #3
 80026d4:	75fb      	strb	r3, [r7, #23]
          break;
 80026d6:	e002      	b.n	80026de <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80026d8:	2313      	movs	r3, #19
 80026da:	75fb      	strb	r3, [r7, #23]
          break;
 80026dc:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 80026de:	edd7 7a02 	vldr	s15, [r7, #8]
 80026e2:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002888 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80026e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ee:	dc00      	bgt.n	80026f2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 80026f0:	e044      	b.n	800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80026f2:	4b66      	ldr	r3, [pc, #408]	; (800288c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80026f4:	60bb      	str	r3, [r7, #8]
      break;
 80026f6:	e041      	b.n	800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 80026f8:	79bb      	ldrb	r3, [r7, #6]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d002      	beq.n	8002704 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 80026fe:	2302      	movs	r3, #2
 8002700:	75fb      	strb	r3, [r7, #23]
          break;
 8002702:	e002      	b.n	800270a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002704:	2312      	movs	r3, #18
 8002706:	75fb      	strb	r3, [r7, #23]
          break;
 8002708:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 800270a:	edd7 7a02 	vldr	s15, [r7, #8]
 800270e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002888 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271a:	dc00      	bgt.n	800271e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 800271c:	e02e      	b.n	800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800271e:	4b5b      	ldr	r3, [pc, #364]	; (800288c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002720:	60bb      	str	r3, [r7, #8]
      break;
 8002722:	e02b      	b.n	800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8002724:	79bb      	ldrb	r3, [r7, #6]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d002      	beq.n	8002730 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 800272a:	2301      	movs	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
          break;
 800272e:	e002      	b.n	8002736 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002730:	2311      	movs	r3, #17
 8002732:	75fb      	strb	r3, [r7, #23]
          break;
 8002734:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8002736:	edd7 7a02 	vldr	s15, [r7, #8]
 800273a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002888 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800273e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002746:	dc00      	bgt.n	800274a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002748:	e018      	b.n	800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800274a:	4b50      	ldr	r3, [pc, #320]	; (800288c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800274c:	60bb      	str	r3, [r7, #8]
      break;
 800274e:	e015      	b.n	800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8002750:	79bb      	ldrb	r3, [r7, #6]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d002      	beq.n	800275c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8002756:	2300      	movs	r3, #0
 8002758:	75fb      	strb	r3, [r7, #23]
          break;
 800275a:	e002      	b.n	8002762 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 800275c:	2310      	movs	r3, #16
 800275e:	75fb      	strb	r3, [r7, #23]
          break;
 8002760:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8002762:	edd7 7a02 	vldr	s15, [r7, #8]
 8002766:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002888 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800276a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002772:	dc00      	bgt.n	8002776 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8002774:	e001      	b.n	800277a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8002776:	4b45      	ldr	r3, [pc, #276]	; (800288c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002778:	60bb      	str	r3, [r7, #8]
      break;
 800277a:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 800277c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002780:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002890 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8002784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278c:	d801      	bhi.n	8002792 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 800278e:	2301      	movs	r3, #1
 8002790:	e04d      	b.n	800282e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002792:	edd7 7a02 	vldr	s15, [r7, #8]
 8002796:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800279a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800279e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a2:	d801      	bhi.n	80027a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e042      	b.n	800282e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80027a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ac:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80027b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b8:	d801      	bhi.n	80027be <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80027ba:	2303      	movs	r3, #3
 80027bc:	e037      	b.n	800282e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80027be:	edd7 7a02 	vldr	s15, [r7, #8]
 80027c2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002894 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 80027c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ce:	d801      	bhi.n	80027d4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80027d0:	2304      	movs	r3, #4
 80027d2:	e02c      	b.n	800282e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80027d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80027d8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002898 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 80027dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e4:	d801      	bhi.n	80027ea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 80027e6:	2305      	movs	r3, #5
 80027e8:	e021      	b.n	800282e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80027ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ee:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002888 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80027f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fa:	d801      	bhi.n	8002800 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 80027fc:	2306      	movs	r3, #6
 80027fe:	e016      	b.n	800282e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002800:	edd7 7a02 	vldr	s15, [r7, #8]
 8002804:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800289c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8002808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002810:	d801      	bhi.n	8002816 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8002812:	2307      	movs	r3, #7
 8002814:	e00b      	b.n	800282e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002816:	edd7 7a02 	vldr	s15, [r7, #8]
 800281a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80028a0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 800281e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002826:	d801      	bhi.n	800282c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002828:	2308      	movs	r3, #8
 800282a:	e000      	b.n	800282e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800282c:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 800282e:	75bb      	strb	r3, [r7, #22]
          : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
          : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
          :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	331c      	adds	r3, #28
 8002834:	7dba      	ldrb	r2, [r7, #22]
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fa33 	bl	8002ca4 <lis2dw12_data_rate_set>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8002844:	f04f 33ff 	mov.w	r3, #4294967295
 8002848:	e018      	b.n	800287c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	331c      	adds	r3, #28
 800284e:	7dfa      	ldrb	r2, [r7, #23]
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f91e 	bl	8002a94 <lis2dw12_power_mode_set>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 800285e:	f04f 33ff 	mov.w	r3, #4294967295
 8002862:	e00b      	b.n	800287c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	79fa      	ldrb	r2, [r7, #7]
 800286e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	79ba      	ldrb	r2, [r7, #6]
 8002876:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	41480000 	.word	0x41480000
 8002888:	43480000 	.word	0x43480000
 800288c:	43480000 	.word	0x43480000
 8002890:	3fcccccd 	.word	0x3fcccccd
 8002894:	42480000 	.word	0x42480000
 8002898:	42c80000 	.word	0x42c80000
 800289c:	43c80000 	.word	0x43c80000
 80028a0:	44480000 	.word	0x44480000

080028a4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80028b0:	460b      	mov	r3, r1
 80028b2:	71fb      	strb	r3, [r7, #7]
 80028b4:	4613      	mov	r3, r2
 80028b6:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	79fa      	ldrb	r2, [r7, #7]
 80028bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	79ba      	ldrb	r2, [r7, #6]
 80028c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                : (Odr <=   12.5f) ?   12.5f
 80028c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80028cc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800298c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80028d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	d801      	bhi.n	80028de <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 80028da:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 80028dc:	e04d      	b.n	800297a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   25.0f) ?   25.0f
 80028de:	edd7 7a02 	vldr	s15, [r7, #8]
 80028e2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80028e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ee:	d801      	bhi.n	80028f4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 80028f0:	4b28      	ldr	r3, [pc, #160]	; (8002994 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 80028f2:	e042      	b.n	800297a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   50.0f) ?   50.0f
 80028f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80028f8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80028fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002904:	d801      	bhi.n	800290a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8002908:	e037      	b.n	800297a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  100.0f) ?  100.0f
 800290a:	edd7 7a02 	vldr	s15, [r7, #8]
 800290e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800299c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291a:	d801      	bhi.n	8002920 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 800291c:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 800291e:	e02c      	b.n	800297a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  200.0f) ?  200.0f
 8002920:	edd7 7a02 	vldr	s15, [r7, #8]
 8002924:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80029a4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800292c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002930:	d801      	bhi.n	8002936 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002934:	e021      	b.n	800297a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  400.0f) ?  400.0f
 8002936:	edd7 7a02 	vldr	s15, [r7, #8]
 800293a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80029ac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 800293e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002946:	d801      	bhi.n	800294c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 800294a:	e016      	b.n	800297a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  800.0f) ?  800.0f
 800294c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002950:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80029b4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295c:	d801      	bhi.n	8002962 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 800295e:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002960:	e00b      	b.n	800297a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                :                    1600.0f;
 8002962:	edd7 7a02 	vldr	s15, [r7, #8]
 8002966:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80029bc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 800296a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800296e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002972:	d801      	bhi.n	8002978 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002976:	e000      	b.n	800297a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	3fcccccd 	.word	0x3fcccccd
 8002990:	3fcccccd 	.word	0x3fcccccd
 8002994:	41480000 	.word	0x41480000
 8002998:	41c80000 	.word	0x41c80000
 800299c:	42480000 	.word	0x42480000
 80029a0:	42480000 	.word	0x42480000
 80029a4:	42c80000 	.word	0x42c80000
 80029a8:	42c80000 	.word	0x42c80000
 80029ac:	43480000 	.word	0x43480000
 80029b0:	43480000 	.word	0x43480000
 80029b4:	43c80000 	.word	0x43c80000
 80029b8:	43c80000 	.word	0x43c80000
 80029bc:	44480000 	.word	0x44480000
 80029c0:	44480000 	.word	0x44480000
 80029c4:	44c80000 	.word	0x44c80000

080029c8 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	461a      	mov	r2, r3
 80029d4:	460b      	mov	r3, r1
 80029d6:	72fb      	strb	r3, [r7, #11]
 80029d8:	4613      	mov	r3, r2
 80029da:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	695c      	ldr	r4, [r3, #20]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	7b1b      	ldrb	r3, [r3, #12]
 80029e8:	b298      	uxth	r0, r3
 80029ea:	7afb      	ldrb	r3, [r7, #11]
 80029ec:	b299      	uxth	r1, r3
 80029ee:	893b      	ldrh	r3, [r7, #8]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	47a0      	blx	r4
 80029f4:	4603      	mov	r3, r0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd90      	pop	{r4, r7, pc}

080029fe <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80029fe:	b590      	push	{r4, r7, lr}
 8002a00:	b087      	sub	sp, #28
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	72fb      	strb	r3, [r7, #11]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	691c      	ldr	r4, [r3, #16]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	7b1b      	ldrb	r3, [r3, #12]
 8002a1e:	b298      	uxth	r0, r3
 8002a20:	7afb      	ldrb	r3, [r7, #11]
 8002a22:	b299      	uxth	r1, r3
 8002a24:	893b      	ldrh	r3, [r7, #8]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	47a0      	blx	r4
 8002a2a:	4603      	mov	r3, r0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	371c      	adds	r7, #28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd90      	pop	{r4, r7, pc}

08002a34 <lis2dw12_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	460b      	mov	r3, r1
 8002a42:	72fb      	strb	r3, [r7, #11]
 8002a44:	4613      	mov	r3, r2
 8002a46:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	685c      	ldr	r4, [r3, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6898      	ldr	r0, [r3, #8]
 8002a50:	893b      	ldrh	r3, [r7, #8]
 8002a52:	7af9      	ldrb	r1, [r7, #11]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	47a0      	blx	r4
 8002a58:	6178      	str	r0, [r7, #20]
  return ret;
 8002a5a:	697b      	ldr	r3, [r7, #20]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd90      	pop	{r4, r7, pc}

08002a64 <lis2dw12_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	460b      	mov	r3, r1
 8002a72:	72fb      	strb	r3, [r7, #11]
 8002a74:	4613      	mov	r3, r2
 8002a76:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681c      	ldr	r4, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6898      	ldr	r0, [r3, #8]
 8002a80:	893b      	ldrh	r3, [r7, #8]
 8002a82:	7af9      	ldrb	r1, [r7, #11]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	47a0      	blx	r4
 8002a88:	6178      	str	r0, [r7, #20]
  return ret;
 8002a8a:	697b      	ldr	r3, [r7, #20]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd90      	pop	{r4, r7, pc}

08002a94 <lis2dw12_power_mode_set>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx, lis2dw12_mode_t val)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002aa0:	f107 0210 	add.w	r2, r7, #16
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	2120      	movs	r1, #32
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ffc3 	bl	8002a34 <lis2dw12_read_reg>
 8002aae:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d118      	bne.n	8002ae8 <lis2dw12_power_mode_set+0x54>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	7c3b      	ldrb	r3, [r7, #16]
 8002ac2:	f362 0383 	bfi	r3, r2, #2, #2
 8002ac6:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	7c3b      	ldrb	r3, [r7, #16]
 8002ad2:	f362 0301 	bfi	r3, r2, #0, #2
 8002ad6:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002ad8:	f107 0210 	add.w	r2, r7, #16
 8002adc:	2301      	movs	r3, #1
 8002ade:	2120      	movs	r1, #32
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ffbf 	bl	8002a64 <lis2dw12_write_reg>
 8002ae6:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d107      	bne.n	8002afe <lis2dw12_power_mode_set+0x6a>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8002aee:	f107 020c 	add.w	r2, r7, #12
 8002af2:	2301      	movs	r3, #1
 8002af4:	2125      	movs	r1, #37	; 0x25
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ff9c 	bl	8002a34 <lis2dw12_read_reg>
 8002afc:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d110      	bne.n	8002b26 <lis2dw12_power_mode_set+0x92>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	7b3b      	ldrb	r3, [r7, #12]
 8002b10:	f362 0382 	bfi	r3, r2, #2, #1
 8002b14:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8002b16:	f107 020c 	add.w	r2, r7, #12
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	2125      	movs	r1, #37	; 0x25
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ffa0 	bl	8002a64 <lis2dw12_write_reg>
 8002b24:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8002b26:	697b      	ldr	r3, [r7, #20]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <lis2dw12_power_mode_get>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx, lis2dw12_mode_t *val)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002b3a:	f107 0210 	add.w	r2, r7, #16
 8002b3e:	2301      	movs	r3, #1
 8002b40:	2120      	movs	r1, #32
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff ff76 	bl	8002a34 <lis2dw12_read_reg>
 8002b48:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f040 80a3 	bne.w	8002c98 <lis2dw12_power_mode_get+0x168>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8002b52:	f107 020c 	add.w	r2, r7, #12
 8002b56:	2301      	movs	r3, #1
 8002b58:	2125      	movs	r1, #37	; 0x25
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff ff6a 	bl	8002a34 <lis2dw12_read_reg>
 8002b60:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002b62:	7b3b      	ldrb	r3, [r7, #12]
 8002b64:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	011a      	lsls	r2, r3, #4
 8002b6c:	7c3b      	ldrb	r3, [r7, #16]
 8002b6e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
            ctrl1.lp_mode)) {
 8002b78:	7c3a      	ldrb	r2, [r7, #16]
 8002b7a:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8002b7e:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002b80:	4413      	add	r3, r2
 8002b82:	2b1b      	cmp	r3, #27
 8002b84:	f200 8084 	bhi.w	8002c90 <lis2dw12_power_mode_get+0x160>
 8002b88:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <lis2dw12_power_mode_get+0x60>)
 8002b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8e:	bf00      	nop
 8002b90:	08002c21 	.word	0x08002c21
 8002b94:	08002c19 	.word	0x08002c19
 8002b98:	08002c11 	.word	0x08002c11
 8002b9c:	08002c09 	.word	0x08002c09
 8002ba0:	08002c01 	.word	0x08002c01
 8002ba4:	08002c91 	.word	0x08002c91
 8002ba8:	08002c91 	.word	0x08002c91
 8002bac:	08002c91 	.word	0x08002c91
 8002bb0:	08002c41 	.word	0x08002c41
 8002bb4:	08002c39 	.word	0x08002c39
 8002bb8:	08002c31 	.word	0x08002c31
 8002bbc:	08002c29 	.word	0x08002c29
 8002bc0:	08002c91 	.word	0x08002c91
 8002bc4:	08002c91 	.word	0x08002c91
 8002bc8:	08002c91 	.word	0x08002c91
 8002bcc:	08002c91 	.word	0x08002c91
 8002bd0:	08002c69 	.word	0x08002c69
 8002bd4:	08002c61 	.word	0x08002c61
 8002bd8:	08002c59 	.word	0x08002c59
 8002bdc:	08002c51 	.word	0x08002c51
 8002be0:	08002c49 	.word	0x08002c49
 8002be4:	08002c91 	.word	0x08002c91
 8002be8:	08002c91 	.word	0x08002c91
 8002bec:	08002c91 	.word	0x08002c91
 8002bf0:	08002c89 	.word	0x08002c89
 8002bf4:	08002c81 	.word	0x08002c81
 8002bf8:	08002c79 	.word	0x08002c79
 8002bfc:	08002c71 	.word	0x08002c71
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2204      	movs	r2, #4
 8002c04:	701a      	strb	r2, [r3, #0]
        break;
 8002c06:	e048      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	701a      	strb	r2, [r3, #0]
        break;
 8002c0e:	e044      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2202      	movs	r2, #2
 8002c14:	701a      	strb	r2, [r3, #0]
        break;
 8002c16:	e040      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]
        break;
 8002c1e:	e03c      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
        break;
 8002c26:	e038      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	220b      	movs	r2, #11
 8002c2c:	701a      	strb	r2, [r3, #0]
        break;
 8002c2e:	e034      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	220a      	movs	r2, #10
 8002c34:	701a      	strb	r2, [r3, #0]
        break;
 8002c36:	e030      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2209      	movs	r2, #9
 8002c3c:	701a      	strb	r2, [r3, #0]
        break;
 8002c3e:	e02c      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2208      	movs	r2, #8
 8002c44:	701a      	strb	r2, [r3, #0]
        break;
 8002c46:	e028      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2214      	movs	r2, #20
 8002c4c:	701a      	strb	r2, [r3, #0]
        break;
 8002c4e:	e024      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2213      	movs	r2, #19
 8002c54:	701a      	strb	r2, [r3, #0]
        break;
 8002c56:	e020      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2212      	movs	r2, #18
 8002c5c:	701a      	strb	r2, [r3, #0]
        break;
 8002c5e:	e01c      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2211      	movs	r2, #17
 8002c64:	701a      	strb	r2, [r3, #0]
        break;
 8002c66:	e018      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2210      	movs	r2, #16
 8002c6c:	701a      	strb	r2, [r3, #0]
        break;
 8002c6e:	e014      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	221b      	movs	r2, #27
 8002c74:	701a      	strb	r2, [r3, #0]
        break;
 8002c76:	e010      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	221a      	movs	r2, #26
 8002c7c:	701a      	strb	r2, [r3, #0]
        break;
 8002c7e:	e00c      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2219      	movs	r2, #25
 8002c84:	701a      	strb	r2, [r3, #0]
        break;
 8002c86:	e008      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2218      	movs	r2, #24
 8002c8c:	701a      	strb	r2, [r3, #0]
        break;
 8002c8e:	e004      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2204      	movs	r2, #4
 8002c94:	701a      	strb	r2, [r3, #0]
        break;
 8002c96:	e000      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
    }
  }
 8002c98:	bf00      	nop
  return ret;
 8002c9a:	697b      	ldr	r3, [r7, #20]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002cb0:	f107 0210 	add.w	r2, r7, #16
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	2120      	movs	r1, #32
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff febb 	bl	8002a34 <lis2dw12_read_reg>
 8002cbe:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <lis2dw12_data_rate_set+0x42>
    ctrl1.odr = (uint8_t) val;
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	7c3b      	ldrb	r3, [r7, #16]
 8002cd0:	f362 1307 	bfi	r3, r2, #4, #4
 8002cd4:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002cd6:	f107 0210 	add.w	r2, r7, #16
 8002cda:	2301      	movs	r3, #1
 8002cdc:	2120      	movs	r1, #32
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff fec0 	bl	8002a64 <lis2dw12_write_reg>
 8002ce4:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d107      	bne.n	8002cfc <lis2dw12_data_rate_set+0x58>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8002cec:	f107 020c 	add.w	r2, r7, #12
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	2122      	movs	r1, #34	; 0x22
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff fe9d 	bl	8002a34 <lis2dw12_read_reg>
 8002cfa:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d110      	bne.n	8002d24 <lis2dw12_data_rate_set+0x80>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	7b3b      	ldrb	r3, [r7, #12]
 8002d0e:	f362 0301 	bfi	r3, r2, #0, #2
 8002d12:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8002d14:	f107 020c 	add.w	r2, r7, #12
 8002d18:	2301      	movs	r3, #1
 8002d1a:	2122      	movs	r1, #34	; 0x22
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff fea1 	bl	8002a64 <lis2dw12_write_reg>
 8002d22:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8002d24:	697b      	ldr	r3, [r7, #20]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002d3a:	f107 0210 	add.w	r2, r7, #16
 8002d3e:	2301      	movs	r3, #1
 8002d40:	2120      	movs	r1, #32
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff fe76 	bl	8002a34 <lis2dw12_read_reg>
 8002d48:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f040 80b3 	bne.w	8002eb8 <lis2dw12_data_rate_get+0x188>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8002d52:	f107 020c 	add.w	r2, r7, #12
 8002d56:	2301      	movs	r3, #1
 8002d58:	2122      	movs	r1, #34	; 0x22
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff fe6a 	bl	8002a34 <lis2dw12_read_reg>
 8002d60:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr) {
 8002d62:	7b3b      	ldrb	r3, [r7, #12]
 8002d64:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	7c3a      	ldrb	r2, [r7, #16]
 8002d6e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	4413      	add	r3, r2
 8002d76:	2b32      	cmp	r3, #50	; 0x32
 8002d78:	f200 809a 	bhi.w	8002eb0 <lis2dw12_data_rate_get+0x180>
 8002d7c:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <lis2dw12_data_rate_get+0x54>)
 8002d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d82:	bf00      	nop
 8002d84:	08002e51 	.word	0x08002e51
 8002d88:	08002e59 	.word	0x08002e59
 8002d8c:	08002e61 	.word	0x08002e61
 8002d90:	08002e69 	.word	0x08002e69
 8002d94:	08002e71 	.word	0x08002e71
 8002d98:	08002e79 	.word	0x08002e79
 8002d9c:	08002e81 	.word	0x08002e81
 8002da0:	08002e89 	.word	0x08002e89
 8002da4:	08002e91 	.word	0x08002e91
 8002da8:	08002e99 	.word	0x08002e99
 8002dac:	08002eb1 	.word	0x08002eb1
 8002db0:	08002eb1 	.word	0x08002eb1
 8002db4:	08002eb1 	.word	0x08002eb1
 8002db8:	08002eb1 	.word	0x08002eb1
 8002dbc:	08002eb1 	.word	0x08002eb1
 8002dc0:	08002eb1 	.word	0x08002eb1
 8002dc4:	08002eb1 	.word	0x08002eb1
 8002dc8:	08002eb1 	.word	0x08002eb1
 8002dcc:	08002ea9 	.word	0x08002ea9
 8002dd0:	08002eb1 	.word	0x08002eb1
 8002dd4:	08002eb1 	.word	0x08002eb1
 8002dd8:	08002eb1 	.word	0x08002eb1
 8002ddc:	08002eb1 	.word	0x08002eb1
 8002de0:	08002eb1 	.word	0x08002eb1
 8002de4:	08002eb1 	.word	0x08002eb1
 8002de8:	08002eb1 	.word	0x08002eb1
 8002dec:	08002eb1 	.word	0x08002eb1
 8002df0:	08002eb1 	.word	0x08002eb1
 8002df4:	08002eb1 	.word	0x08002eb1
 8002df8:	08002eb1 	.word	0x08002eb1
 8002dfc:	08002eb1 	.word	0x08002eb1
 8002e00:	08002eb1 	.word	0x08002eb1
 8002e04:	08002eb1 	.word	0x08002eb1
 8002e08:	08002eb1 	.word	0x08002eb1
 8002e0c:	08002eb1 	.word	0x08002eb1
 8002e10:	08002eb1 	.word	0x08002eb1
 8002e14:	08002eb1 	.word	0x08002eb1
 8002e18:	08002eb1 	.word	0x08002eb1
 8002e1c:	08002eb1 	.word	0x08002eb1
 8002e20:	08002eb1 	.word	0x08002eb1
 8002e24:	08002eb1 	.word	0x08002eb1
 8002e28:	08002eb1 	.word	0x08002eb1
 8002e2c:	08002eb1 	.word	0x08002eb1
 8002e30:	08002eb1 	.word	0x08002eb1
 8002e34:	08002eb1 	.word	0x08002eb1
 8002e38:	08002eb1 	.word	0x08002eb1
 8002e3c:	08002eb1 	.word	0x08002eb1
 8002e40:	08002eb1 	.word	0x08002eb1
 8002e44:	08002eb1 	.word	0x08002eb1
 8002e48:	08002eb1 	.word	0x08002eb1
 8002e4c:	08002ea1 	.word	0x08002ea1
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
        break;
 8002e56:	e030      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
        break;
 8002e5e:	e02c      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2202      	movs	r2, #2
 8002e64:	701a      	strb	r2, [r3, #0]
        break;
 8002e66:	e028      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	701a      	strb	r2, [r3, #0]
        break;
 8002e6e:	e024      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
       case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2204      	movs	r2, #4
 8002e74:	701a      	strb	r2, [r3, #0]
        break;
 8002e76:	e020      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2205      	movs	r2, #5
 8002e7c:	701a      	strb	r2, [r3, #0]
        break;
 8002e7e:	e01c      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2206      	movs	r2, #6
 8002e84:	701a      	strb	r2, [r3, #0]
        break;
 8002e86:	e018      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2207      	movs	r2, #7
 8002e8c:	701a      	strb	r2, [r3, #0]
        break;
 8002e8e:	e014      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
       case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2208      	movs	r2, #8
 8002e94:	701a      	strb	r2, [r3, #0]
        break;
 8002e96:	e010      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2209      	movs	r2, #9
 8002e9c:	701a      	strb	r2, [r3, #0]
        break;
 8002e9e:	e00c      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2232      	movs	r2, #50	; 0x32
 8002ea4:	701a      	strb	r2, [r3, #0]
        break;
 8002ea6:	e008      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2212      	movs	r2, #18
 8002eac:	701a      	strb	r2, [r3, #0]
        break;
 8002eae:	e004      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
        break;
 8002eb6:	e000      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
    }
  }
 8002eb8:	bf00      	nop
  return ret;
 8002eba:	697b      	ldr	r3, [r7, #20]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8002ed0:	f107 0208 	add.w	r2, r7, #8
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	2121      	movs	r1, #33	; 0x21
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff fdab 	bl	8002a34 <lis2dw12_read_reg>
 8002ede:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10f      	bne.n	8002f06 <lis2dw12_block_data_update_set+0x42>
    reg.bdu = val;
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	7a3b      	ldrb	r3, [r7, #8]
 8002ef0:	f362 03c3 	bfi	r3, r2, #3, #1
 8002ef4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8002ef6:	f107 0208 	add.w	r2, r7, #8
 8002efa:	2301      	movs	r3, #1
 8002efc:	2121      	movs	r1, #33	; 0x21
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff fdb0 	bl	8002a64 <lis2dw12_write_reg>
 8002f04:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002f06:	68fb      	ldr	r3, [r7, #12]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8002f1c:	f107 0208 	add.w	r2, r7, #8
 8002f20:	2301      	movs	r3, #1
 8002f22:	2125      	movs	r1, #37	; 0x25
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff fd85 	bl	8002a34 <lis2dw12_read_reg>
 8002f2a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10f      	bne.n	8002f52 <lis2dw12_full_scale_set+0x42>
    reg.fs = (uint8_t) val;
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	7a3b      	ldrb	r3, [r7, #8]
 8002f3c:	f362 1305 	bfi	r3, r2, #4, #2
 8002f40:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8002f42:	f107 0208 	add.w	r2, r7, #8
 8002f46:	2301      	movs	r3, #1
 8002f48:	2125      	movs	r1, #37	; 0x25
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff fd8a 	bl	8002a64 <lis2dw12_write_reg>
 8002f50:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002f52:	68fb      	ldr	r3, [r7, #12]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8002f66:	f107 0208 	add.w	r2, r7, #8
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	2125      	movs	r1, #37	; 0x25
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff fd60 	bl	8002a34 <lis2dw12_read_reg>
 8002f74:	60f8      	str	r0, [r7, #12]

  switch (reg.fs) {
 8002f76:	7a3b      	ldrb	r3, [r7, #8]
 8002f78:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d81a      	bhi.n	8002fb8 <lis2dw12_full_scale_get+0x5c>
 8002f82:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <lis2dw12_full_scale_get+0x2c>)
 8002f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f88:	08002f99 	.word	0x08002f99
 8002f8c:	08002fa1 	.word	0x08002fa1
 8002f90:	08002fa9 	.word	0x08002fa9
 8002f94:	08002fb1 	.word	0x08002fb1
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
      break;
 8002f9e:	e00f      	b.n	8002fc0 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	701a      	strb	r2, [r3, #0]
      break;
 8002fa6:	e00b      	b.n	8002fc0 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2202      	movs	r2, #2
 8002fac:	701a      	strb	r2, [r3, #0]
      break;
 8002fae:	e007      	b.n	8002fc0 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	701a      	strb	r2, [r3, #0]
      break;
 8002fb6:	e003      	b.n	8002fc0 <lis2dw12_full_scale_get+0x64>
    default:
      *val = LIS2DW12_2g;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
      break;
 8002fbe:	bf00      	nop
  }
  return ret;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop

08002fcc <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8002fd6:	f107 020c 	add.w	r2, r7, #12
 8002fda:	2306      	movs	r3, #6
 8002fdc:	2128      	movs	r1, #40	; 0x28
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff fd28 	bl	8002a34 <lis2dw12_read_reg>
 8002fe4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002fe6:	7b7b      	ldrb	r3, [r7, #13]
 8002fe8:	b21a      	sxth	r2, r3
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	021b      	lsls	r3, r3, #8
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	7b3b      	ldrb	r3, [r7, #12]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	b29b      	uxth	r3, r3
 8003002:	b21a      	sxth	r2, r3
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003008:	7bfa      	ldrb	r2, [r7, #15]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	3302      	adds	r3, #2
 800300e:	b212      	sxth	r2, r2
 8003010:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	3302      	adds	r3, #2
 8003016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800301a:	b29b      	uxth	r3, r3
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	b29a      	uxth	r2, r3
 8003020:	7bbb      	ldrb	r3, [r7, #14]
 8003022:	b29b      	uxth	r3, r3
 8003024:	4413      	add	r3, r2
 8003026:	b29a      	uxth	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	3302      	adds	r3, #2
 800302c:	b212      	sxth	r2, r2
 800302e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003030:	7c7a      	ldrb	r2, [r7, #17]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	3304      	adds	r3, #4
 8003036:	b212      	sxth	r2, r2
 8003038:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	3304      	adds	r3, #4
 800303e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003042:	b29b      	uxth	r3, r3
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	b29a      	uxth	r2, r3
 8003048:	7c3b      	ldrb	r3, [r7, #16]
 800304a:	b29b      	uxth	r3, r3
 800304c:	4413      	add	r3, r2
 800304e:	b29a      	uxth	r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	3304      	adds	r3, #4
 8003054:	b212      	sxth	r2, r2
 8003056:	801a      	strh	r2, [r3, #0]

  return ret;
 8003058:	697b      	ldr	r3, [r7, #20]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 800306c:	2301      	movs	r3, #1
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	210f      	movs	r1, #15
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fcde 	bl	8002a34 <lis2dw12_read_reg>
 8003078:	60f8      	str	r0, [r7, #12]
  return ret;
 800307a:	68fb      	ldr	r3, [r7, #12]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8003090:	f107 0208 	add.w	r2, r7, #8
 8003094:	2301      	movs	r3, #1
 8003096:	2121      	movs	r1, #33	; 0x21
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff fccb 	bl	8002a34 <lis2dw12_read_reg>
 800309e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10f      	bne.n	80030c6 <lis2dw12_auto_increment_set+0x42>
    reg.if_add_inc = val;
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	7a3b      	ldrb	r3, [r7, #8]
 80030b0:	f362 0382 	bfi	r3, r2, #2, #1
 80030b4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 80030b6:	f107 0208 	add.w	r2, r7, #8
 80030ba:	2301      	movs	r3, #1
 80030bc:	2121      	movs	r1, #33	; 0x21
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff fcd0 	bl	8002a64 <lis2dw12_write_reg>
 80030c4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80030c6:	68fb      	ldr	r3, [r7, #12]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <lis2dw12_fifo_mode_set>:
  * @param  val      change the values of fmode in reg FIFO_CTRL
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx, lis2dw12_fmode_t val)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 80030dc:	f107 0208 	add.w	r2, r7, #8
 80030e0:	2301      	movs	r3, #1
 80030e2:	212e      	movs	r1, #46	; 0x2e
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff fca5 	bl	8002a34 <lis2dw12_read_reg>
 80030ea:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10f      	bne.n	8003112 <lis2dw12_fifo_mode_set+0x42>
    reg.fmode = (uint8_t) val;
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	7a3b      	ldrb	r3, [r7, #8]
 80030fc:	f362 1347 	bfi	r3, r2, #5, #3
 8003100:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 8003102:	f107 0208 	add.w	r2, r7, #8
 8003106:	2301      	movs	r3, #1
 8003108:	212e      	movs	r1, #46	; 0x2e
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff fcaa 	bl	8002a64 <lis2dw12_write_reg>
 8003110:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003112:	68fb      	ldr	r3, [r7, #12]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <LIS2MDL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d103      	bne.n	8003138 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003130:	f04f 33ff 	mov.w	r3, #4294967295
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	e05d      	b.n	80031f4 <LIS2MDL_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	7b1a      	ldrb	r2, [r3, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	699a      	ldr	r2, [r3, #24]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a23      	ldr	r2, [pc, #140]	; (8003200 <LIS2MDL_RegisterBusIO+0xe4>)
 8003174:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a22      	ldr	r2, [pc, #136]	; (8003204 <LIS2MDL_RegisterBusIO+0xe8>)
 800317a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d103      	bne.n	8003192 <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	e030      	b.n	80031f4 <LIS2MDL_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4798      	blx	r3
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <LIS2MDL_RegisterBusIO+0x8a>
    {
      ret = LIS2MDL_ERROR;
 800319e:	f04f 33ff 	mov.w	r3, #4294967295
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e026      	b.n	80031f4 <LIS2MDL_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d022      	beq.n	80031f4 <LIS2MDL_RegisterBusIO+0xd8>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d11d      	bne.n	80031f4 <LIS2MDL_RegisterBusIO+0xd8>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d10d      	bne.n	80031dc <LIS2MDL_RegisterBusIO+0xc0>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80031c0:	2334      	movs	r3, #52	; 0x34
 80031c2:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80031c4:	7afb      	ldrb	r3, [r7, #11]
 80031c6:	461a      	mov	r2, r3
 80031c8:	2162      	movs	r1, #98	; 0x62
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fa15 	bl	80035fa <LIS2MDL_Write_Reg>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00e      	beq.n	80031f4 <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
 80031da:	e00c      	b.n	80031f6 <LIS2MDL_RegisterBusIO+0xda>
            }
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	331c      	adds	r3, #28
 80031e0:	2101      	movs	r1, #1
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fbe2 	bl	80039ac <lis2mdl_i2c_interface_set>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
 80031f2:	e000      	b.n	80031f6 <LIS2MDL_RegisterBusIO+0xda>
        }
      }
    }
  }

  return ret;
 80031f4:	68fb      	ldr	r3, [r7, #12]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	08003631 	.word	0x08003631
 8003204:	08003693 	.word	0x08003693

08003208 <LIS2MDL_Init>:
 * @brief  Initialize the LIS2MDL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	331c      	adds	r3, #28
 8003214:	2101      	movs	r1, #1
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fb20 	bl	800385c <lis2mdl_block_data_update_set>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <LIS2MDL_Init+0x20>
  {
    return LIS2MDL_ERROR;
 8003222:	f04f 33ff 	mov.w	r3, #4294967295
 8003226:	e028      	b.n	800327a <LIS2MDL_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	331c      	adds	r3, #28
 800322c:	2102      	movs	r1, #2
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fa90 	bl	8003754 <lis2mdl_operating_mode_set>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <LIS2MDL_Init+0x38>
  {
    return LIS2MDL_ERROR;
 800323a:	f04f 33ff 	mov.w	r3, #4294967295
 800323e:	e01c      	b.n	800327a <LIS2MDL_Init+0x72>
  }

  /* Output data rate selection */
  if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	331c      	adds	r3, #28
 8003244:	2103      	movs	r1, #3
 8003246:	4618      	mov	r0, r3
 8003248:	f000 faaa 	bl	80037a0 <lis2mdl_data_rate_set>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <LIS2MDL_Init+0x50>
  {
    return LIS2MDL_ERROR;
 8003252:	f04f 33ff 	mov.w	r3, #4294967295
 8003256:	e010      	b.n	800327a <LIS2MDL_Init+0x72>
  }

  /* Self Test disabled. */
  if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	331c      	adds	r3, #28
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fb7e 	bl	8003960 <lis2mdl_self_test_set>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <LIS2MDL_Init+0x68>
  {
    return LIS2MDL_ERROR;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	e004      	b.n	800327a <LIS2MDL_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <LIS2MDL_DeInit>:
 * @brief  Deinitialize the LIS2MDL magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f874 	bl	8003378 <LIS2MDL_MAG_Disable>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003296:	f04f 33ff 	mov.w	r3, #4294967295
 800329a:	e004      	b.n	80032a6 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <LIS2MDL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	6039      	str	r1, [r7, #0]
  if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	331c      	adds	r3, #28
 80032bc:	6839      	ldr	r1, [r7, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fb3d 	bl	800393e <lis2mdl_device_id_get>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <LIS2MDL_ReadID+0x22>
  {
    return LIS2MDL_ERROR;
 80032ca:	f04f 33ff 	mov.w	r3, #4294967295
 80032ce:	e000      	b.n	80032d2 <LIS2MDL_ReadID+0x24>
  }

  return LIS2MDL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <LIS2MDL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2200      	movs	r2, #0
 80032f0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2201      	movs	r2, #1
 80032f6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2200      	movs	r2, #0
 80032fc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2200      	movs	r2, #0
 8003302:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2232      	movs	r2, #50	; 0x32
 800330e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	4a04      	ldr	r2, [pc, #16]	; (8003334 <LIS2MDL_GetCapabilities+0x58>)
 8003324:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	42c80000 	.word	0x42c80000

08003338 <LIS2MDL_MAG_Enable>:
 * @brief Enable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	e010      	b.n	8003370 <LIS2MDL_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	331c      	adds	r3, #28
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f000 f9fd 	bl	8003754 <lis2mdl_operating_mode_set>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <LIS2MDL_MAG_Enable+0x2e>
  {
    return LIS2MDL_ERROR;
 8003360:	f04f 33ff 	mov.w	r3, #4294967295
 8003364:	e004      	b.n	8003370 <LIS2MDL_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <LIS2MDL_MAG_Disable>:
 * @brief Disable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e010      	b.n	80033b0 <LIS2MDL_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	331c      	adds	r3, #28
 8003392:	2102      	movs	r1, #2
 8003394:	4618      	mov	r0, r3
 8003396:	f000 f9dd 	bl	8003754 <lis2mdl_operating_mode_set>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <LIS2MDL_MAG_Disable+0x2e>
  {
    return LIS2MDL_ERROR;
 80033a0:	f04f 33ff 	mov.w	r3, #4294967295
 80033a4:	e004      	b.n	80033b0 <LIS2MDL_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <LIS2MDL_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80033c8:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <LIS2MDL_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	331c      	adds	r3, #28
 80033ea:	f107 020b 	add.w	r2, r7, #11
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 f9fb 	bl	80037ec <lis2mdl_data_rate_get>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80033fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003400:	e023      	b.n	800344a <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003402:	7afb      	ldrb	r3, [r7, #11]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d81b      	bhi.n	8003440 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8003408:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003421 	.word	0x08003421
 8003414:	08003429 	.word	0x08003429
 8003418:	08003431 	.word	0x08003431
 800341c:	08003439 	.word	0x08003439
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4a0c      	ldr	r2, [pc, #48]	; (8003454 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8003424:	601a      	str	r2, [r3, #0]
      break;
 8003426:	e00f      	b.n	8003448 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4a0b      	ldr	r2, [pc, #44]	; (8003458 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 800342c:	601a      	str	r2, [r3, #0]
      break;
 800342e:	e00b      	b.n	8003448 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	4a0a      	ldr	r2, [pc, #40]	; (800345c <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8003434:	601a      	str	r2, [r3, #0]
      break;
 8003436:	e007      	b.n	8003448 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4a09      	ldr	r2, [pc, #36]	; (8003460 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 800343c:	601a      	str	r2, [r3, #0]
      break;
 800343e:	e003      	b.n	8003448 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8003440:	f04f 33ff 	mov.w	r3, #4294967295
 8003444:	60fb      	str	r3, [r7, #12]
      break;
 8003446:	bf00      	nop
  }

  return ret;
 8003448:	68fb      	ldr	r3, [r7, #12]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	41200000 	.word	0x41200000
 8003458:	41a00000 	.word	0x41a00000
 800345c:	42480000 	.word	0x42480000
 8003460:	42c80000 	.word	0x42c80000

08003464 <LIS2MDL_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003470:	edd7 7a00 	vldr	s15, [r7]
 8003474:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800347c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003480:	d801      	bhi.n	8003486 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8003482:	2300      	movs	r3, #0
 8003484:	e016      	b.n	80034b4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003486:	edd7 7a00 	vldr	s15, [r7]
 800348a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800348e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003496:	d801      	bhi.n	800349c <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8003498:	2301      	movs	r3, #1
 800349a:	e00b      	b.n	80034b4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800349c:	edd7 7a00 	vldr	s15, [r7]
 80034a0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80034dc <LIS2MDL_MAG_SetOutputDataRate+0x78>
 80034a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ac:	d801      	bhi.n	80034b2 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e000      	b.n	80034b4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80034b2:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 80034b4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	331c      	adds	r3, #28
 80034ba:	7bfa      	ldrb	r2, [r7, #15]
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f96e 	bl	80037a0 <lis2mdl_data_rate_set>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <LIS2MDL_MAG_SetOutputDataRate+0x6c>
  {
    return LIS2MDL_ERROR;
 80034ca:	f04f 33ff 	mov.w	r3, #4294967295
 80034ce:	e000      	b.n	80034d2 <LIS2MDL_MAG_SetOutputDataRate+0x6e>
  }

  return LIS2MDL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	42480000 	.word	0x42480000

080034e0 <LIS2MDL_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2232      	movs	r2, #50	; 0x32
 80034ee:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <LIS2MDL_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <LIS2MDL_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	331c      	adds	r3, #28
 8003524:	f107 0208 	add.w	r2, r7, #8
 8003528:	4611      	mov	r1, r2
 800352a:	4618      	mov	r0, r3
 800352c:	f000 f9bc 	bl	80038a8 <lis2mdl_magnetic_raw_get>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8003536:	f04f 33ff 	mov.w	r3, #4294967295
 800353a:	e00c      	b.n	8003556 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800353c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003544:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800354c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <LIS2MDL_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	331c      	adds	r3, #28
 800356c:	f107 0210 	add.w	r2, r7, #16
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f998 	bl	80038a8 <lis2mdl_magnetic_raw_get>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <LIS2MDL_MAG_GetAxes+0x26>
  {
    return LIS2MDL_ERROR;
 800357e:	f04f 33ff 	mov.w	r3, #4294967295
 8003582:	e036      	b.n	80035f2 <LIS2MDL_MAG_GetAxes+0x94>
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8003584:	f107 030c 	add.w	r3, r7, #12
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ff14 	bl	80033b8 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003590:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003594:	ee07 3a90 	vmov	s15, r3
 8003598:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800359c:	edd7 7a03 	vldr	s15, [r7, #12]
 80035a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035a8:	ee17 2a90 	vmov	r2, s15
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80035b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80035b4:	ee07 3a90 	vmov	s15, r3
 80035b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80035c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035c8:	ee17 2a90 	vmov	r2, s15
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80035d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80035d4:	ee07 3a90 	vmov	s15, r3
 80035d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80035e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035e8:	ee17 2a90 	vmov	r2, s15
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <LIS2MDL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	70fb      	strb	r3, [r7, #3]
 8003606:	4613      	mov	r3, r2
 8003608:	70bb      	strb	r3, [r7, #2]
  if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f103 001c 	add.w	r0, r3, #28
 8003610:	1cba      	adds	r2, r7, #2
 8003612:	78f9      	ldrb	r1, [r7, #3]
 8003614:	2301      	movs	r3, #1
 8003616:	f000 f885 	bl	8003724 <lis2mdl_write_reg>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <LIS2MDL_Write_Reg+0x2c>
  {
    return LIS2MDL_ERROR;
 8003620:	f04f 33ff 	mov.w	r3, #4294967295
 8003624:	e000      	b.n	8003628 <LIS2MDL_Write_Reg+0x2e>
  }

  return LIS2MDL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003630:	b590      	push	{r4, r7, lr}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	461a      	mov	r2, r3
 800363c:	460b      	mov	r3, r1
 800363e:	72fb      	strb	r3, [r7, #11]
 8003640:	4613      	mov	r3, r2
 8003642:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10e      	bne.n	800366e <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	695c      	ldr	r4, [r3, #20]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	7b1b      	ldrb	r3, [r3, #12]
 8003658:	b298      	uxth	r0, r3
 800365a:	7afb      	ldrb	r3, [r7, #11]
 800365c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003660:	b2db      	uxtb	r3, r3
 8003662:	b299      	uxth	r1, r3
 8003664:	893b      	ldrh	r3, [r7, #8]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	47a0      	blx	r4
 800366a:	4603      	mov	r3, r0
 800366c:	e00d      	b.n	800368a <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	695c      	ldr	r4, [r3, #20]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	7b1b      	ldrb	r3, [r3, #12]
 8003676:	b298      	uxth	r0, r3
 8003678:	7afb      	ldrb	r3, [r7, #11]
 800367a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800367e:	b2db      	uxtb	r3, r3
 8003680:	b299      	uxth	r1, r3
 8003682:	893b      	ldrh	r3, [r7, #8]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	47a0      	blx	r4
 8003688:	4603      	mov	r3, r0
  }
}
 800368a:	4618      	mov	r0, r3
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	bd90      	pop	{r4, r7, pc}

08003692 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003692:	b590      	push	{r4, r7, lr}
 8003694:	b087      	sub	sp, #28
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	461a      	mov	r2, r3
 800369e:	460b      	mov	r3, r1
 80036a0:	72fb      	strb	r3, [r7, #11]
 80036a2:	4613      	mov	r3, r2
 80036a4:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10e      	bne.n	80036d0 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	691c      	ldr	r4, [r3, #16]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	7b1b      	ldrb	r3, [r3, #12]
 80036ba:	b298      	uxth	r0, r3
 80036bc:	7afb      	ldrb	r3, [r7, #11]
 80036be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	b299      	uxth	r1, r3
 80036c6:	893b      	ldrh	r3, [r7, #8]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	47a0      	blx	r4
 80036cc:	4603      	mov	r3, r0
 80036ce:	e00d      	b.n	80036ec <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	691c      	ldr	r4, [r3, #16]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	7b1b      	ldrb	r3, [r3, #12]
 80036d8:	b298      	uxth	r0, r3
 80036da:	7afb      	ldrb	r3, [r7, #11]
 80036dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	b299      	uxth	r1, r3
 80036e4:	893b      	ldrh	r3, [r7, #8]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	47a0      	blx	r4
 80036ea:	4603      	mov	r3, r0
  }
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd90      	pop	{r4, r7, pc}

080036f4 <lis2mdl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	461a      	mov	r2, r3
 8003700:	460b      	mov	r3, r1
 8003702:	72fb      	strb	r3, [r7, #11]
 8003704:	4613      	mov	r3, r2
 8003706:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685c      	ldr	r4, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6898      	ldr	r0, [r3, #8]
 8003710:	893b      	ldrh	r3, [r7, #8]
 8003712:	7af9      	ldrb	r1, [r7, #11]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	47a0      	blx	r4
 8003718:	6178      	str	r0, [r7, #20]
  return ret;
 800371a:	697b      	ldr	r3, [r7, #20]
}
 800371c:	4618      	mov	r0, r3
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	bd90      	pop	{r4, r7, pc}

08003724 <lis2mdl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8003724:	b590      	push	{r4, r7, lr}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	607a      	str	r2, [r7, #4]
 800372e:	461a      	mov	r2, r3
 8003730:	460b      	mov	r3, r1
 8003732:	72fb      	strb	r3, [r7, #11]
 8003734:	4613      	mov	r3, r2
 8003736:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681c      	ldr	r4, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6898      	ldr	r0, [r3, #8]
 8003740:	893b      	ldrh	r3, [r7, #8]
 8003742:	7af9      	ldrb	r1, [r7, #11]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	47a0      	blx	r4
 8003748:	6178      	str	r0, [r7, #20]
  return ret;
 800374a:	697b      	ldr	r3, [r7, #20]
}
 800374c:	4618      	mov	r0, r3
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	bd90      	pop	{r4, r7, pc}

08003754 <lis2mdl_operating_mode_set>:
  * @param  val    change the values of md in reg CFG_REG_A
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx, lis2mdl_md_t val)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8003760:	f107 0208 	add.w	r2, r7, #8
 8003764:	2301      	movs	r3, #1
 8003766:	2160      	movs	r1, #96	; 0x60
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ffc3 	bl	80036f4 <lis2mdl_read_reg>
 800376e:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10f      	bne.n	8003796 <lis2mdl_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 8003776:	78fb      	ldrb	r3, [r7, #3]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	b2da      	uxtb	r2, r3
 800377e:	7a3b      	ldrb	r3, [r7, #8]
 8003780:	f362 0301 	bfi	r3, r2, #0, #2
 8003784:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8003786:	f107 0208 	add.w	r2, r7, #8
 800378a:	2301      	movs	r3, #1
 800378c:	2160      	movs	r1, #96	; 0x60
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ffc8 	bl	8003724 <lis2mdl_write_reg>
 8003794:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003796:	68fb      	ldr	r3, [r7, #12]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 80037ac:	f107 0208 	add.w	r2, r7, #8
 80037b0:	2301      	movs	r3, #1
 80037b2:	2160      	movs	r1, #96	; 0x60
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ff9d 	bl	80036f4 <lis2mdl_read_reg>
 80037ba:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10f      	bne.n	80037e2 <lis2mdl_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	7a3b      	ldrb	r3, [r7, #8]
 80037cc:	f362 0383 	bfi	r3, r2, #2, #2
 80037d0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 80037d2:	f107 0208 	add.w	r2, r7, #8
 80037d6:	2301      	movs	r3, #1
 80037d8:	2160      	movs	r1, #96	; 0x60
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ffa2 	bl	8003724 <lis2mdl_write_reg>
 80037e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80037e2:	68fb      	ldr	r3, [r7, #12]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 80037f6:	f107 0208 	add.w	r2, r7, #8
 80037fa:	2301      	movs	r3, #1
 80037fc:	2160      	movs	r1, #96	; 0x60
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff ff78 	bl	80036f4 <lis2mdl_read_reg>
 8003804:	60f8      	str	r0, [r7, #12]
  switch (reg.odr){
 8003806:	7a3b      	ldrb	r3, [r7, #8]
 8003808:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b03      	cmp	r3, #3
 8003810:	d81a      	bhi.n	8003848 <lis2mdl_data_rate_get+0x5c>
 8003812:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <lis2mdl_data_rate_get+0x2c>)
 8003814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003818:	08003829 	.word	0x08003829
 800381c:	08003831 	.word	0x08003831
 8003820:	08003839 	.word	0x08003839
 8003824:	08003841 	.word	0x08003841
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
      break;
 800382e:	e00f      	b.n	8003850 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
      break;
 8003836:	e00b      	b.n	8003850 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2202      	movs	r2, #2
 800383c:	701a      	strb	r2, [r3, #0]
      break;
 800383e:	e007      	b.n	8003850 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2203      	movs	r2, #3
 8003844:	701a      	strb	r2, [r3, #0]
      break;
 8003846:	e003      	b.n	8003850 <lis2mdl_data_rate_get+0x64>
    default:
      *val = LIS2MDL_ODR_10Hz;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
      break;
 800384e:	bf00      	nop
  }
  return ret;
 8003850:	68fb      	ldr	r3, [r7, #12]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop

0800385c <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8003868:	f107 0208 	add.w	r2, r7, #8
 800386c:	2301      	movs	r3, #1
 800386e:	2162      	movs	r1, #98	; 0x62
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff ff3f 	bl	80036f4 <lis2mdl_read_reg>
 8003876:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10f      	bne.n	800389e <lis2mdl_block_data_update_set+0x42>
    reg.bdu = val;
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	b2da      	uxtb	r2, r3
 8003886:	7a3b      	ldrb	r3, [r7, #8]
 8003888:	f362 1304 	bfi	r3, r2, #4, #1
 800388c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 800388e:	f107 0208 	add.w	r2, r7, #8
 8003892:	2301      	movs	r3, #1
 8003894:	2162      	movs	r1, #98	; 0x62
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ff44 	bl	8003724 <lis2mdl_write_reg>
 800389c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800389e:	68fb      	ldr	r3, [r7, #12]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80038b2:	f107 020c 	add.w	r2, r7, #12
 80038b6:	2306      	movs	r3, #6
 80038b8:	2168      	movs	r1, #104	; 0x68
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff ff1a 	bl	80036f4 <lis2mdl_read_reg>
 80038c0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80038c2:	7b7b      	ldrb	r3, [r7, #13]
 80038c4:	b21a      	sxth	r2, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	7b3b      	ldrb	r3, [r7, #12]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	4413      	add	r3, r2
 80038dc:	b29b      	uxth	r3, r3
 80038de:	b21a      	sxth	r2, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80038e4:	7bfa      	ldrb	r2, [r7, #15]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	3302      	adds	r3, #2
 80038ea:	b212      	sxth	r2, r2
 80038ec:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	3302      	adds	r3, #2
 80038f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	7bbb      	ldrb	r3, [r7, #14]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	4413      	add	r3, r2
 8003902:	b29a      	uxth	r2, r3
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	3302      	adds	r3, #2
 8003908:	b212      	sxth	r2, r2
 800390a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800390c:	7c7a      	ldrb	r2, [r7, #17]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	3304      	adds	r3, #4
 8003912:	b212      	sxth	r2, r2
 8003914:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	3304      	adds	r3, #4
 800391a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800391e:	b29b      	uxth	r3, r3
 8003920:	021b      	lsls	r3, r3, #8
 8003922:	b29a      	uxth	r2, r3
 8003924:	7c3b      	ldrb	r3, [r7, #16]
 8003926:	b29b      	uxth	r3, r3
 8003928:	4413      	add	r3, r2
 800392a:	b29a      	uxth	r2, r3
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	3304      	adds	r3, #4
 8003930:	b212      	sxth	r2, r2
 8003932:	801a      	strh	r2, [r3, #0]

  return ret;
 8003934:	697b      	ldr	r3, [r7, #20]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8003948:	2301      	movs	r3, #1
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	214f      	movs	r1, #79	; 0x4f
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff fed0 	bl	80036f4 <lis2mdl_read_reg>
 8003954:	60f8      	str	r0, [r7, #12]
  return ret;
 8003956:	68fb      	ldr	r3, [r7, #12]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 800396c:	f107 0208 	add.w	r2, r7, #8
 8003970:	2301      	movs	r3, #1
 8003972:	2162      	movs	r1, #98	; 0x62
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff febd 	bl	80036f4 <lis2mdl_read_reg>
 800397a:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <lis2mdl_self_test_set+0x42>
    reg.self_test = val;
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	b2da      	uxtb	r2, r3
 800398a:	7a3b      	ldrb	r3, [r7, #8]
 800398c:	f362 0341 	bfi	r3, r2, #1, #1
 8003990:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8003992:	f107 0208 	add.w	r2, r7, #8
 8003996:	2301      	movs	r3, #1
 8003998:	2162      	movs	r1, #98	; 0x62
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff fec2 	bl	8003724 <lis2mdl_write_reg>
 80039a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80039a2:	68fb      	ldr	r3, [r7, #12]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <lis2mdl_i2c_interface_set>:
  * @param  val   change the values of i2c_dis in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx, lis2mdl_i2c_dis_t val)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 80039b8:	f107 0208 	add.w	r2, r7, #8
 80039bc:	2301      	movs	r3, #1
 80039be:	2162      	movs	r1, #98	; 0x62
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff fe97 	bl	80036f4 <lis2mdl_read_reg>
 80039c6:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <lis2mdl_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	7a3b      	ldrb	r3, [r7, #8]
 80039d8:	f362 1345 	bfi	r3, r2, #5, #1
 80039dc:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 80039de:	f107 0208 	add.w	r2, r7, #8
 80039e2:	2301      	movs	r3, #1
 80039e4:	2162      	movs	r1, #98	; 0x62
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff fe9c 	bl	8003724 <lis2mdl_write_reg>
 80039ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80039ee:	68fb      	ldr	r3, [r7, #12]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <LSM6DSO_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d103      	bne.n	8003a14 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8003a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	e04d      	b.n	8003ab0 <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	7b1a      	ldrb	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a1b      	ldr	r2, [pc, #108]	; (8003abc <LSM6DSO_RegisterBusIO+0xc4>)
 8003a50:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a1a      	ldr	r2, [pc, #104]	; (8003ac0 <LSM6DSO_RegisterBusIO+0xc8>)
 8003a56:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d103      	bne.n	8003a6e <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e020      	b.n	8003ab0 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4798      	blx	r3
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	e016      	b.n	8003ab0 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d112      	bne.n	8003ab0 <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10d      	bne.n	8003ab0 <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003a94:	230c      	movs	r3, #12
 8003a96:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8003a98:	7afb      	ldrb	r3, [r7, #11]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2112      	movs	r1, #18
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 ff57 	bl	8004952 <LSM6DSO_Write_Reg>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 8003aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003aae:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	08004df5 	.word	0x08004df5
 8003ac0:	08004e2b 	.word	0x08004e2b

08003ac4 <LSM6DSO_Init>:
 * @brief  Initialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	331c      	adds	r3, #28
 8003ad0:	2180      	movs	r1, #128	; 0x80
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f001 fe21 	bl	800571a <lsm6dso_i3c_disable_set>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8003ade:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae2:	e060      	b.n	8003ba6 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	331c      	adds	r3, #28
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 fdef 	bl	80056ce <lsm6dso_auto_increment_set>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 8003af6:	f04f 33ff 	mov.w	r3, #4294967295
 8003afa:	e054      	b.n	8003ba6 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	331c      	adds	r3, #28
 8003b00:	2101      	movs	r1, #1
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 fd64 	bl	80055d0 <lsm6dso_block_data_update_set>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b12:	e048      	b.n	8003ba6 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	331c      	adds	r3, #28
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 fe43 	bl	80057a6 <lsm6dso_fifo_mode_set>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	e03c      	b.n	8003ba6 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2204      	movs	r2, #4
 8003b30:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	331c      	adds	r3, #28
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 fa1e 	bl	8004f7c <lsm6dso_xl_data_rate_set>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8003b46:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4a:	e02c      	b.n	8003ba6 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	331c      	adds	r3, #28
 8003b50:	2100      	movs	r1, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 f9b4 	bl	8004ec0 <lsm6dso_xl_full_scale_set>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8003b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b62:	e020      	b.n	8003ba6 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2204      	movs	r2, #4
 8003b68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	331c      	adds	r3, #28
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 fbce 	bl	8005314 <lsm6dso_gy_data_rate_set>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8003b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b82:	e010      	b.n	8003ba6 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	331c      	adds	r3, #28
 8003b88:	2106      	movs	r1, #6
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 fb5a 	bl	8005244 <lsm6dso_gy_full_scale_set>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8003b96:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9a:	e004      	b.n	8003ba6 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <LSM6DSO_DeInit>:
 * @brief  Deinitialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f888 	bl	8003ccc <LSM6DSO_ACC_Disable>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8003bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc6:	e015      	b.n	8003bf4 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fc2c 	bl	8004426 <LSM6DSO_GYRO_Disable>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8003bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd8:	e00c      	b.n	8003bf4 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <LSM6DSO_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	331c      	adds	r3, #28
 8003c0a:	6839      	ldr	r1, [r7, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 fd4d 	bl	80056ac <lsm6dso_device_id_get>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8003c18:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1c:	e000      	b.n	8003c20 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <LSM6DSO_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSO sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2200      	movs	r2, #0
 8003c42:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2200      	movs	r2, #0
 8003c48:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003c50:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2210      	movs	r2, #16
 8003c56:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	4a07      	ldr	r2, [pc, #28]	; (8003c80 <LSM6DSO_GetCapabilities+0x58>)
 8003c62:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4a06      	ldr	r2, [pc, #24]	; (8003c80 <LSM6DSO_GetCapabilities+0x58>)
 8003c68:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	45d02000 	.word	0x45d02000

08003c84 <LSM6DSO_ACC_Enable>:
 * @brief  Enable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d101      	bne.n	8003c9a <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e014      	b.n	8003cc4 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f103 021c 	add.w	r2, r3, #28
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f001 f967 	bl	8004f7c <lsm6dso_xl_data_rate_set>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8003cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb8:	e004      	b.n	8003cc4 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <LSM6DSO_ACC_Disable>:
 * @brief  Disable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e01f      	b.n	8003d22 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f103 021c 	add.w	r2, r3, #28
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	332b      	adds	r3, #43	; 0x2b
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f001 fa40 	bl	8005174 <lsm6dso_xl_data_rate_get>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfe:	e010      	b.n	8003d22 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	331c      	adds	r3, #28
 8003d04:	2100      	movs	r1, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f001 f938 	bl	8004f7c <lsm6dso_xl_data_rate_set>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295
 8003d16:	e004      	b.n	8003d22 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <LSM6DSO_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	331c      	adds	r3, #28
 8003d3e:	f107 020b 	add.w	r2, r7, #11
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 f8e1 	bl	8004f0c <lsm6dso_xl_full_scale_get>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8003d50:	f04f 33ff 	mov.w	r3, #4294967295
 8003d54:	e023      	b.n	8003d9e <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003d56:	7afb      	ldrb	r3, [r7, #11]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d81b      	bhi.n	8003d94 <LSM6DSO_ACC_GetSensitivity+0x68>
 8003d5c:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003d75 	.word	0x08003d75
 8003d68:	08003d8d 	.word	0x08003d8d
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d85 	.word	0x08003d85
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4a0c      	ldr	r2, [pc, #48]	; (8003da8 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8003d78:	601a      	str	r2, [r3, #0]
      break;
 8003d7a:	e00f      	b.n	8003d9c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	4a0b      	ldr	r2, [pc, #44]	; (8003dac <LSM6DSO_ACC_GetSensitivity+0x80>)
 8003d80:	601a      	str	r2, [r3, #0]
      break;
 8003d82:	e00b      	b.n	8003d9c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8003d88:	601a      	str	r2, [r3, #0]
      break;
 8003d8a:	e007      	b.n	8003d9c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	4a09      	ldr	r2, [pc, #36]	; (8003db4 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8003d90:	601a      	str	r2, [r3, #0]
      break;
 8003d92:	e003      	b.n	8003d9c <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003d94:	f04f 33ff 	mov.w	r3, #4294967295
 8003d98:	60fb      	str	r3, [r7, #12]
      break;
 8003d9a:	bf00      	nop
  }

  return ret;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	3d79db23 	.word	0x3d79db23
 8003dac:	3df9db23 	.word	0x3df9db23
 8003db0:	3e79db23 	.word	0x3e79db23
 8003db4:	3ef9db23 	.word	0x3ef9db23

08003db8 <LSM6DSO_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	331c      	adds	r3, #28
 8003dca:	f107 020b 	add.w	r2, r7, #11
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 f9cf 	bl	8005174 <lsm6dso_xl_data_rate_get>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8003ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8003de0:	e054      	b.n	8003e8c <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003de2:	7afb      	ldrb	r3, [r7, #11]
 8003de4:	2b0b      	cmp	r3, #11
 8003de6:	d84c      	bhi.n	8003e82 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8003de8:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8003dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dee:	bf00      	nop
 8003df0:	08003e21 	.word	0x08003e21
 8003df4:	08003e33 	.word	0x08003e33
 8003df8:	08003e3b 	.word	0x08003e3b
 8003dfc:	08003e43 	.word	0x08003e43
 8003e00:	08003e4b 	.word	0x08003e4b
 8003e04:	08003e53 	.word	0x08003e53
 8003e08:	08003e5b 	.word	0x08003e5b
 8003e0c:	08003e63 	.word	0x08003e63
 8003e10:	08003e6b 	.word	0x08003e6b
 8003e14:	08003e73 	.word	0x08003e73
 8003e18:	08003e7b 	.word	0x08003e7b
 8003e1c:	08003e2b 	.word	0x08003e2b
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
      break;
 8003e28:	e02f      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	4a19      	ldr	r2, [pc, #100]	; (8003e94 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8003e2e:	601a      	str	r2, [r3, #0]
      break;
 8003e30:	e02b      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	4a18      	ldr	r2, [pc, #96]	; (8003e98 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8003e36:	601a      	str	r2, [r3, #0]
      break;
 8003e38:	e027      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8003e3e:	601a      	str	r2, [r3, #0]
      break;
 8003e40:	e023      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	4a16      	ldr	r2, [pc, #88]	; (8003ea0 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8003e46:	601a      	str	r2, [r3, #0]
      break;
 8003e48:	e01f      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	4a15      	ldr	r2, [pc, #84]	; (8003ea4 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8003e4e:	601a      	str	r2, [r3, #0]
      break;
 8003e50:	e01b      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	4a14      	ldr	r2, [pc, #80]	; (8003ea8 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8003e56:	601a      	str	r2, [r3, #0]
      break;
 8003e58:	e017      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	4a13      	ldr	r2, [pc, #76]	; (8003eac <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8003e5e:	601a      	str	r2, [r3, #0]
      break;
 8003e60:	e013      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	4a12      	ldr	r2, [pc, #72]	; (8003eb0 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8003e66:	601a      	str	r2, [r3, #0]
      break;
 8003e68:	e00f      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	4a11      	ldr	r2, [pc, #68]	; (8003eb4 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8003e6e:	601a      	str	r2, [r3, #0]
      break;
 8003e70:	e00b      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	4a10      	ldr	r2, [pc, #64]	; (8003eb8 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8003e76:	601a      	str	r2, [r3, #0]
      break;
 8003e78:	e007      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	4a0f      	ldr	r2, [pc, #60]	; (8003ebc <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8003e7e:	601a      	str	r2, [r3, #0]
      break;
 8003e80:	e003      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295
 8003e86:	60fb      	str	r3, [r7, #12]
      break;
 8003e88:	bf00      	nop
  }

  return ret;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	3fcccccd 	.word	0x3fcccccd
 8003e98:	41480000 	.word	0x41480000
 8003e9c:	41d00000 	.word	0x41d00000
 8003ea0:	42500000 	.word	0x42500000
 8003ea4:	42d00000 	.word	0x42d00000
 8003ea8:	43500000 	.word	0x43500000
 8003eac:	43d08000 	.word	0x43d08000
 8003eb0:	44504000 	.word	0x44504000
 8003eb4:	44d06000 	.word	0x44d06000
 8003eb8:	45505000 	.word	0x45505000
 8003ebc:	45d05800 	.word	0x45d05800

08003ec0 <LSM6DSO_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8003ecc:	2100      	movs	r1, #0
 8003ece:	ed97 0a00 	vldr	s0, [r7]
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f806 	bl	8003ee4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8003ed8:	4603      	mov	r3, r0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the accelerometer operating mode
 * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08c      	sub	sp, #48	; 0x30
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  switch (Mode)
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d079      	beq.n	8003ff6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	f000 80e5 	beq.w	80040d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f040 815e 	bne.w	80041ca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f103 001c 	add.w	r0, r3, #28
 8003f14:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003f18:	2301      	movs	r3, #1
 8003f1a:	2114      	movs	r1, #20
 8003f1c:	f000 ffa0 	bl	8004e60 <lsm6dso_read_reg>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x48>
      {
        return LSM6DSO_ERROR;
 8003f26:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2a:	e16c      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val1.xl_ulp_en != 0U)
 8003f2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d025      	beq.n	8003f86 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d10b      	bne.n	8003f5c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x78>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	331c      	adds	r3, #28
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 f816 	bl	8004f7c <lsm6dso_xl_data_rate_set>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x78>
          {
            return LSM6DSO_ERROR;
 8003f56:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5a:	e154      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
          }
        }

        val1.xl_ulp_en = 0;
 8003f5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f60:	f36f 13c7 	bfc	r3, #7, #1
 8003f64:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f103 001c 	add.w	r0, r3, #28
 8003f6e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003f72:	2301      	movs	r3, #1
 8003f74:	2114      	movs	r1, #20
 8003f76:	f000 ff8b 	bl	8004e90 <lsm6dso_write_reg>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
        {
          return LSM6DSO_ERROR;
 8003f80:	f04f 33ff 	mov.w	r3, #4294967295
 8003f84:	e13f      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f103 001c 	add.w	r0, r3, #28
 8003f8c:	f107 0220 	add.w	r2, r7, #32
 8003f90:	2301      	movs	r3, #1
 8003f92:	2115      	movs	r1, #21
 8003f94:	f000 ff64 	bl	8004e60 <lsm6dso_read_reg>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc0>
      {
        return LSM6DSO_ERROR;
 8003f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa2:	e130      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val2.xl_hm_mode != 0U)
 8003fa4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d014      	beq.n	8003fdc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf8>
      {
        val2.xl_hm_mode = 0U;
 8003fb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fb6:	f36f 1304 	bfc	r3, #4, #1
 8003fba:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f103 001c 	add.w	r0, r3, #28
 8003fc4:	f107 0220 	add.w	r2, r7, #32
 8003fc8:	2301      	movs	r3, #1
 8003fca:	2115      	movs	r1, #21
 8003fcc:	f000 ff60 	bl	8004e90 <lsm6dso_write_reg>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf8>
        {
          return LSM6DSO_ERROR;
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fda:	e114      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8003fdc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003fe0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fec:	d400      	bmi.n	8003ff0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x10c>
      {
        newOdr = 12.5f;
      }
      break;
 8003fee:	e0f0      	b.n	80041d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
        newOdr = 12.5f;
 8003ff0:	4b87      	ldr	r3, [pc, #540]	; (8004210 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x32c>)
 8003ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff4:	e0ed      	b.n	80041d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f103 001c 	add.w	r0, r3, #28
 8003ffc:	f107 021c 	add.w	r2, r7, #28
 8004000:	2301      	movs	r3, #1
 8004002:	2114      	movs	r1, #20
 8004004:	f000 ff2c 	bl	8004e60 <lsm6dso_read_reg>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x130>
      {
        return LSM6DSO_ERROR;
 800400e:	f04f 33ff 	mov.w	r3, #4294967295
 8004012:	e0f8      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val1.xl_ulp_en != 0U)
 8004014:	7f3b      	ldrb	r3, [r7, #28]
 8004016:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d023      	beq.n	8004068 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004026:	2b01      	cmp	r3, #1
 8004028:	d10b      	bne.n	8004042 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	331c      	adds	r3, #28
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f000 ffa3 	bl	8004f7c <lsm6dso_xl_data_rate_set>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
          {
            return LSM6DSO_ERROR;
 800403c:	f04f 33ff 	mov.w	r3, #4294967295
 8004040:	e0e1      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
          }
        }

        val1.xl_ulp_en = 0;
 8004042:	7f3b      	ldrb	r3, [r7, #28]
 8004044:	f36f 13c7 	bfc	r3, #7, #1
 8004048:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f103 001c 	add.w	r0, r3, #28
 8004050:	f107 021c 	add.w	r2, r7, #28
 8004054:	2301      	movs	r3, #1
 8004056:	2114      	movs	r1, #20
 8004058:	f000 ff1a 	bl	8004e90 <lsm6dso_write_reg>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
        {
          return LSM6DSO_ERROR;
 8004062:	f04f 33ff 	mov.w	r3, #4294967295
 8004066:	e0ce      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f103 001c 	add.w	r0, r3, #28
 800406e:	f107 0218 	add.w	r2, r7, #24
 8004072:	2301      	movs	r3, #1
 8004074:	2115      	movs	r1, #21
 8004076:	f000 fef3 	bl	8004e60 <lsm6dso_read_reg>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a2>
      {
        return LSM6DSO_ERROR;
 8004080:	f04f 33ff 	mov.w	r3, #4294967295
 8004084:	e0bf      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val2.xl_hm_mode == 0U)
 8004086:	7e3b      	ldrb	r3, [r7, #24]
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d112      	bne.n	80040b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
      {
        val2.xl_hm_mode = 1U;
 8004092:	7e3b      	ldrb	r3, [r7, #24]
 8004094:	f043 0310 	orr.w	r3, r3, #16
 8004098:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f103 001c 	add.w	r0, r3, #28
 80040a0:	f107 0218 	add.w	r2, r7, #24
 80040a4:	2301      	movs	r3, #1
 80040a6:	2115      	movs	r1, #21
 80040a8:	f000 fef2 	bl	8004e90 <lsm6dso_write_reg>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
        {
          return LSM6DSO_ERROR;
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295
 80040b6:	e0a6      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80040b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80040bc:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004214 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>
 80040c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c8:	dc00      	bgt.n	80040cc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e8>
      {
        newOdr = 208.0f;
      }
      break;
 80040ca:	e082      	b.n	80041d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
        newOdr = 208.0f;
 80040cc:	4b52      	ldr	r3, [pc, #328]	; (8004218 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>)
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80040d0:	e07f      	b.n	80041d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f103 001c 	add.w	r0, r3, #28
 80040d8:	f107 0210 	add.w	r2, r7, #16
 80040dc:	2301      	movs	r3, #1
 80040de:	2115      	movs	r1, #21
 80040e0:	f000 febe 	bl	8004e60 <lsm6dso_read_reg>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20c>
      {
        return LSM6DSO_ERROR;
 80040ea:	f04f 33ff 	mov.w	r3, #4294967295
 80040ee:	e08a      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val2.xl_hm_mode != 0U)
 80040f0:	7c3b      	ldrb	r3, [r7, #16]
 80040f2:	f003 0310 	and.w	r3, r3, #16
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d012      	beq.n	8004122 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23e>
      {
        val2.xl_hm_mode = 0U;
 80040fc:	7c3b      	ldrb	r3, [r7, #16]
 80040fe:	f36f 1304 	bfc	r3, #4, #1
 8004102:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f103 001c 	add.w	r0, r3, #28
 800410a:	f107 0210 	add.w	r2, r7, #16
 800410e:	2301      	movs	r3, #1
 8004110:	2115      	movs	r1, #21
 8004112:	f000 febd 	bl	8004e90 <lsm6dso_write_reg>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23e>
        {
          return LSM6DSO_ERROR;
 800411c:	f04f 33ff 	mov.w	r3, #4294967295
 8004120:	e071      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004128:	2b01      	cmp	r3, #1
 800412a:	d108      	bne.n	800413e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x25a>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f97a 	bl	8004426 <LSM6DSO_GYRO_Disable>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x25a>
        {
          return LSM6DSO_ERROR;
 8004138:	f04f 33ff 	mov.w	r3, #4294967295
 800413c:	e063      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f103 001c 	add.w	r0, r3, #28
 8004144:	f107 0214 	add.w	r2, r7, #20
 8004148:	2301      	movs	r3, #1
 800414a:	2114      	movs	r1, #20
 800414c:	f000 fe88 	bl	8004e60 <lsm6dso_read_reg>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x278>
      {
        return LSM6DSO_ERROR;
 8004156:	f04f 33ff 	mov.w	r3, #4294967295
 800415a:	e054      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val1.xl_ulp_en == 0U)
 800415c:	7d3b      	ldrb	r3, [r7, #20]
 800415e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d123      	bne.n	80041b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2cc>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800416e:	2b01      	cmp	r3, #1
 8004170:	d10b      	bne.n	800418a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a6>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	331c      	adds	r3, #28
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f000 feff 	bl	8004f7c <lsm6dso_xl_data_rate_set>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a6>
          {
            return LSM6DSO_ERROR;
 8004184:	f04f 33ff 	mov.w	r3, #4294967295
 8004188:	e03d      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
          }
        }

        val1.xl_ulp_en = 1U;
 800418a:	7d3b      	ldrb	r3, [r7, #20]
 800418c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004190:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f103 001c 	add.w	r0, r3, #28
 8004198:	f107 0214 	add.w	r2, r7, #20
 800419c:	2301      	movs	r3, #1
 800419e:	2114      	movs	r1, #20
 80041a0:	f000 fe76 	bl	8004e90 <lsm6dso_write_reg>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2cc>
        {
          return LSM6DSO_ERROR;
 80041aa:	f04f 33ff 	mov.w	r3, #4294967295
 80041ae:	e02a      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80041b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80041b4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004214 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>
 80041b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c0:	dc00      	bgt.n	80041c4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e0>
      {
        newOdr = 208.0f;
      }
      break;
 80041c2:	e006      	b.n	80041d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
        newOdr = 208.0f;
 80041c4:	4b14      	ldr	r3, [pc, #80]	; (8004218 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>)
 80041c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80041c8:	e003      	b.n	80041d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
    }
    default:
      ret = LSM6DSO_ERROR;
 80041ca:	f04f 33ff 	mov.w	r3, #4294967295
 80041ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80041d0:	bf00      	nop
  }

  if(ret == LSM6DSO_ERROR)
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d102      	bne.n	80041e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2fc>
  {
    return LSM6DSO_ERROR;
 80041da:	f04f 33ff 	mov.w	r3, #4294967295
 80041de:	e012      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
  }

  if (pObj->acc_is_enabled == 1U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d106      	bne.n	80041f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x314>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80041ea:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fbca 	bl	8004988 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 80041f4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80041f6:	e005      	b.n	8004204 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80041f8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 fc5b 	bl	8004ab8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8004202:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8004204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004206:	4618      	mov	r0, r3
 8004208:	3730      	adds	r7, #48	; 0x30
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	41480000 	.word	0x41480000
 8004214:	43500000 	.word	0x43500000
 8004218:	43500000 	.word	0x43500000

0800421c <LSM6DSO_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	331c      	adds	r3, #28
 800422e:	f107 020b 	add.w	r2, r7, #11
 8004232:	4611      	mov	r1, r2
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fe69 	bl	8004f0c <lsm6dso_xl_full_scale_get>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004240:	f04f 33ff 	mov.w	r3, #4294967295
 8004244:	e023      	b.n	800428e <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004246:	7afb      	ldrb	r3, [r7, #11]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d81b      	bhi.n	8004284 <LSM6DSO_ACC_GetFullScale+0x68>
 800424c:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <LSM6DSO_ACC_GetFullScale+0x38>)
 800424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004252:	bf00      	nop
 8004254:	08004265 	.word	0x08004265
 8004258:	0800427d 	.word	0x0800427d
 800425c:	0800426d 	.word	0x0800426d
 8004260:	08004275 	.word	0x08004275
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2202      	movs	r2, #2
 8004268:	601a      	str	r2, [r3, #0]
      break;
 800426a:	e00f      	b.n	800428c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2204      	movs	r2, #4
 8004270:	601a      	str	r2, [r3, #0]
      break;
 8004272:	e00b      	b.n	800428c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2208      	movs	r2, #8
 8004278:	601a      	str	r2, [r3, #0]
      break;
 800427a:	e007      	b.n	800428c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2210      	movs	r2, #16
 8004280:	601a      	str	r2, [r3, #0]
      break;
 8004282:	e003      	b.n	800428c <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8004284:	f04f 33ff 	mov.w	r3, #4294967295
 8004288:	60fb      	str	r3, [r7, #12]
      break;
 800428a:	bf00      	nop
  }

  return ret;
 800428c:	68fb      	ldr	r3, [r7, #12]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop

08004298 <LSM6DSO_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	dd0b      	ble.n	80042c0 <LSM6DSO_ACC_SetFullScale+0x28>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	dd06      	ble.n	80042bc <LSM6DSO_ACC_SetFullScale+0x24>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	dc01      	bgt.n	80042b8 <LSM6DSO_ACC_SetFullScale+0x20>
 80042b4:	2303      	movs	r3, #3
 80042b6:	e004      	b.n	80042c2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e002      	b.n	80042c2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80042bc:	2302      	movs	r3, #2
 80042be:	e000      	b.n	80042c2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80042c0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 80042c2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	331c      	adds	r3, #28
 80042c8:	7bfa      	ldrb	r2, [r7, #15]
 80042ca:	4611      	mov	r1, r2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fdf7 	bl	8004ec0 <lsm6dso_xl_full_scale_set>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 80042d8:	f04f 33ff 	mov.w	r3, #4294967295
 80042dc:	e000      	b.n	80042e0 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <LSM6DSO_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	331c      	adds	r3, #28
 80042f6:	f107 0208 	add.w	r2, r7, #8
 80042fa:	4611      	mov	r1, r2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 f99e 	bl	800563e <lsm6dso_acceleration_raw_get>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004308:	f04f 33ff 	mov.w	r3, #4294967295
 800430c:	e00c      	b.n	8004328 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800430e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004316:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800431e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <LSM6DSO_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	331c      	adds	r3, #28
 8004344:	f107 0210 	add.w	r2, r7, #16
 8004348:	4611      	mov	r1, r2
 800434a:	4618      	mov	r0, r3
 800434c:	f001 f977 	bl	800563e <lsm6dso_acceleration_raw_get>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8004356:	f04f 33ff 	mov.w	r3, #4294967295
 800435a:	e03c      	b.n	80043d6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800435c:	f107 030c 	add.w	r3, r7, #12
 8004360:	4619      	mov	r1, r3
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff fce2 	bl	8003d2c <LSM6DSO_ACC_GetSensitivity>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 800436e:	f04f 33ff 	mov.w	r3, #4294967295
 8004372:	e030      	b.n	80043d6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004374:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004378:	ee07 3a90 	vmov	s15, r3
 800437c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004380:	edd7 7a03 	vldr	s15, [r7, #12]
 8004384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800438c:	ee17 2a90 	vmov	r2, s15
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004394:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004398:	ee07 3a90 	vmov	s15, r3
 800439c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80043a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043ac:	ee17 2a90 	vmov	r2, s15
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80043b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80043b8:	ee07 3a90 	vmov	s15, r3
 80043bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80043c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043cc:	ee17 2a90 	vmov	r2, s15
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <LSM6DSO_GYRO_Enable>:
 * @brief  Enable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e014      	b.n	800441e <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f103 021c 	add.w	r2, r3, #28
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f000 ff86 	bl	8005314 <lsm6dso_gy_data_rate_set>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800440e:	f04f 33ff 	mov.w	r3, #4294967295
 8004412:	e004      	b.n	800441e <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <LSM6DSO_GYRO_Disable>:
 * @brief  Disable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	e01f      	b.n	800447c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f103 021c 	add.w	r2, r3, #28
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	332c      	adds	r3, #44	; 0x2c
 8004446:	4619      	mov	r1, r3
 8004448:	4610      	mov	r0, r2
 800444a:	f001 f85f 	bl	800550c <lsm6dso_gy_data_rate_get>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004454:	f04f 33ff 	mov.w	r3, #4294967295
 8004458:	e010      	b.n	800447c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	331c      	adds	r3, #28
 800445e:	2100      	movs	r1, #0
 8004460:	4618      	mov	r0, r3
 8004462:	f000 ff57 	bl	8005314 <lsm6dso_gy_data_rate_set>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800446c:	f04f 33ff 	mov.w	r3, #4294967295
 8004470:	e004      	b.n	800447c <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <LSM6DSO_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	331c      	adds	r3, #28
 8004496:	f107 020b 	add.w	r2, r7, #11
 800449a:	4611      	mov	r1, r2
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fef7 	bl	8005290 <lsm6dso_gy_full_scale_get>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80044a8:	f04f 33ff 	mov.w	r3, #4294967295
 80044ac:	e02d      	b.n	800450a <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80044ae:	7afb      	ldrb	r3, [r7, #11]
 80044b0:	2b06      	cmp	r3, #6
 80044b2:	d825      	bhi.n	8004500 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 80044b4:	a201      	add	r2, pc, #4	; (adr r2, 80044bc <LSM6DSO_GYRO_GetSensitivity+0x38>)
 80044b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ba:	bf00      	nop
 80044bc:	080044e1 	.word	0x080044e1
 80044c0:	080044d9 	.word	0x080044d9
 80044c4:	080044e9 	.word	0x080044e9
 80044c8:	08004501 	.word	0x08004501
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	08004501 	.word	0x08004501
 80044d4:	080044f9 	.word	0x080044f9
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	4a0e      	ldr	r2, [pc, #56]	; (8004514 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 80044dc:	601a      	str	r2, [r3, #0]
      break;
 80044de:	e013      	b.n	8004508 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	4a0d      	ldr	r2, [pc, #52]	; (8004518 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 80044e4:	601a      	str	r2, [r3, #0]
      break;
 80044e6:	e00f      	b.n	8004508 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4a0c      	ldr	r2, [pc, #48]	; (800451c <LSM6DSO_GYRO_GetSensitivity+0x98>)
 80044ec:	601a      	str	r2, [r3, #0]
      break;
 80044ee:	e00b      	b.n	8004508 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	4a0b      	ldr	r2, [pc, #44]	; (8004520 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 80044f4:	601a      	str	r2, [r3, #0]
      break;
 80044f6:	e007      	b.n	8004508 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	4a0a      	ldr	r2, [pc, #40]	; (8004524 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 80044fc:	601a      	str	r2, [r3, #0]
      break;
 80044fe:	e003      	b.n	8004508 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8004500:	f04f 33ff 	mov.w	r3, #4294967295
 8004504:	60fb      	str	r3, [r7, #12]
      break;
 8004506:	bf00      	nop
  }

  return ret;
 8004508:	68fb      	ldr	r3, [r7, #12]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	408c0000 	.word	0x408c0000
 8004518:	410c0000 	.word	0x410c0000
 800451c:	418c0000 	.word	0x418c0000
 8004520:	420c0000 	.word	0x420c0000
 8004524:	428c0000 	.word	0x428c0000

08004528 <LSM6DSO_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	331c      	adds	r3, #28
 800453a:	f107 020b 	add.w	r2, r7, #11
 800453e:	4611      	mov	r1, r2
 8004540:	4618      	mov	r0, r3
 8004542:	f000 ffe3 	bl	800550c <lsm6dso_gy_data_rate_get>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 800454c:	f04f 33ff 	mov.w	r3, #4294967295
 8004550:	e04e      	b.n	80045f0 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004552:	7afb      	ldrb	r3, [r7, #11]
 8004554:	2b0a      	cmp	r3, #10
 8004556:	d846      	bhi.n	80045e6 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8004558:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	0800458d 	.word	0x0800458d
 8004564:	08004597 	.word	0x08004597
 8004568:	0800459f 	.word	0x0800459f
 800456c:	080045a7 	.word	0x080045a7
 8004570:	080045af 	.word	0x080045af
 8004574:	080045b7 	.word	0x080045b7
 8004578:	080045bf 	.word	0x080045bf
 800457c:	080045c7 	.word	0x080045c7
 8004580:	080045cf 	.word	0x080045cf
 8004584:	080045d7 	.word	0x080045d7
 8004588:	080045df 	.word	0x080045df
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
      break;
 8004594:	e02b      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 800459a:	601a      	str	r2, [r3, #0]
      break;
 800459c:	e027      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	4a16      	ldr	r2, [pc, #88]	; (80045fc <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 80045a2:	601a      	str	r2, [r3, #0]
      break;
 80045a4:	e023      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	4a15      	ldr	r2, [pc, #84]	; (8004600 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 80045aa:	601a      	str	r2, [r3, #0]
      break;
 80045ac:	e01f      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	4a14      	ldr	r2, [pc, #80]	; (8004604 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 80045b2:	601a      	str	r2, [r3, #0]
      break;
 80045b4:	e01b      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	4a13      	ldr	r2, [pc, #76]	; (8004608 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 80045ba:	601a      	str	r2, [r3, #0]
      break;
 80045bc:	e017      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	4a12      	ldr	r2, [pc, #72]	; (800460c <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 80045c2:	601a      	str	r2, [r3, #0]
      break;
 80045c4:	e013      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	4a11      	ldr	r2, [pc, #68]	; (8004610 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 80045ca:	601a      	str	r2, [r3, #0]
      break;
 80045cc:	e00f      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	4a10      	ldr	r2, [pc, #64]	; (8004614 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 80045d2:	601a      	str	r2, [r3, #0]
      break;
 80045d4:	e00b      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	4a0f      	ldr	r2, [pc, #60]	; (8004618 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 80045da:	601a      	str	r2, [r3, #0]
      break;
 80045dc:	e007      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	4a0e      	ldr	r2, [pc, #56]	; (800461c <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 80045e2:	601a      	str	r2, [r3, #0]
      break;
 80045e4:	e003      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 80045e6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ea:	60fb      	str	r3, [r7, #12]
      break;
 80045ec:	bf00      	nop
  }

  return ret;
 80045ee:	68fb      	ldr	r3, [r7, #12]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	41480000 	.word	0x41480000
 80045fc:	41d00000 	.word	0x41d00000
 8004600:	42500000 	.word	0x42500000
 8004604:	42d00000 	.word	0x42d00000
 8004608:	43500000 	.word	0x43500000
 800460c:	43d08000 	.word	0x43d08000
 8004610:	44504000 	.word	0x44504000
 8004614:	44d06000 	.word	0x44d06000
 8004618:	45505000 	.word	0x45505000
 800461c:	45d05800 	.word	0x45d05800

08004620 <LSM6DSO_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 800462c:	2100      	movs	r1, #0
 800462e:	ed97 0a00 	vldr	s0, [r7]
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f806 	bl	8004644 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8004638:	4603      	mov	r3, r0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
 * @param  Odr the output data rate value to be set
 * @param  Mode the gyroscope operating mode
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004650:	460b      	mov	r3, r1
 8004652:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8004662:	2b01      	cmp	r3, #1
 8004664:	d028      	beq.n	80046b8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8004666:	e05c      	b.n	8004722 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f103 001c 	add.w	r0, r3, #28
 800466e:	f107 0214 	add.w	r2, r7, #20
 8004672:	2301      	movs	r3, #1
 8004674:	2116      	movs	r1, #22
 8004676:	f000 fbf3 	bl	8004e60 <lsm6dso_read_reg>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8004680:	f04f 33ff 	mov.w	r3, #4294967295
 8004684:	e06c      	b.n	8004760 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8004686:	7d3b      	ldrb	r3, [r7, #20]
 8004688:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d04b      	beq.n	800472a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8004692:	7d3b      	ldrb	r3, [r7, #20]
 8004694:	f36f 13c7 	bfc	r3, #7, #1
 8004698:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f103 001c 	add.w	r0, r3, #28
 80046a0:	f107 0214 	add.w	r2, r7, #20
 80046a4:	2301      	movs	r3, #1
 80046a6:	2116      	movs	r1, #22
 80046a8:	f000 fbf2 	bl	8004e90 <lsm6dso_write_reg>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d03b      	beq.n	800472a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 80046b2:	f04f 33ff 	mov.w	r3, #4294967295
 80046b6:	e053      	b.n	8004760 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f103 001c 	add.w	r0, r3, #28
 80046be:	f107 0210 	add.w	r2, r7, #16
 80046c2:	2301      	movs	r3, #1
 80046c4:	2116      	movs	r1, #22
 80046c6:	f000 fbcb 	bl	8004e60 <lsm6dso_read_reg>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 80046d0:	f04f 33ff 	mov.w	r3, #4294967295
 80046d4:	e044      	b.n	8004760 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 80046d6:	7c3b      	ldrb	r3, [r7, #16]
 80046d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d112      	bne.n	8004708 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 80046e2:	7c3b      	ldrb	r3, [r7, #16]
 80046e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e8:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f103 001c 	add.w	r0, r3, #28
 80046f0:	f107 0210 	add.w	r2, r7, #16
 80046f4:	2301      	movs	r3, #1
 80046f6:	2116      	movs	r1, #22
 80046f8:	f000 fbca 	bl	8004e90 <lsm6dso_write_reg>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8004702:	f04f 33ff 	mov.w	r3, #4294967295
 8004706:	e02b      	b.n	8004760 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004708:	edd7 7a06 	vldr	s15, [r7, #24]
 800470c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004768 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8004710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004718:	dc00      	bgt.n	800471c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 800471a:	e007      	b.n	800472c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 800471c:	4b13      	ldr	r3, [pc, #76]	; (800476c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 800471e:	61bb      	str	r3, [r7, #24]
 8004720:	e004      	b.n	800472c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004722:	f04f 33ff 	mov.w	r3, #4294967295
 8004726:	61fb      	str	r3, [r7, #28]
      break;
 8004728:	e000      	b.n	800472c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 800472a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d102      	bne.n	800473a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8004734:	f04f 33ff 	mov.w	r3, #4294967295
 8004738:	e012      	b.n	8004760 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004740:	2b01      	cmp	r3, #1
 8004742:	d106      	bne.n	8004752 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004744:	ed97 0a06 	vldr	s0, [r7, #24]
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 fa45 	bl	8004bd8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800474e:	61f8      	str	r0, [r7, #28]
 8004750:	e005      	b.n	800475e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004752:	ed97 0a06 	vldr	s0, [r7, #24]
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 faca 	bl	8004cf0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 800475c:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800475e:	69fb      	ldr	r3, [r7, #28]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3720      	adds	r7, #32
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	43500000 	.word	0x43500000
 800476c:	43500000 	.word	0x43500000

08004770 <LSM6DSO_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	331c      	adds	r3, #28
 8004782:	f107 020b 	add.w	r2, r7, #11
 8004786:	4611      	mov	r1, r2
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fd81 	bl	8005290 <lsm6dso_gy_full_scale_get>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004794:	f04f 33ff 	mov.w	r3, #4294967295
 8004798:	e030      	b.n	80047fc <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800479a:	7afb      	ldrb	r3, [r7, #11]
 800479c:	2b06      	cmp	r3, #6
 800479e:	d828      	bhi.n	80047f2 <LSM6DSO_GYRO_GetFullScale+0x82>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <LSM6DSO_GYRO_GetFullScale+0x38>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047c5 	.word	0x080047c5
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	080047f3 	.word	0x080047f3
 80047b8:	080047df 	.word	0x080047df
 80047bc:	080047f3 	.word	0x080047f3
 80047c0:	080047e9 	.word	0x080047e9
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	227d      	movs	r2, #125	; 0x7d
 80047c8:	601a      	str	r2, [r3, #0]
      break;
 80047ca:	e016      	b.n	80047fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	22fa      	movs	r2, #250	; 0xfa
 80047d0:	601a      	str	r2, [r3, #0]
      break;
 80047d2:	e012      	b.n	80047fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80047da:	601a      	str	r2, [r3, #0]
      break;
 80047dc:	e00d      	b.n	80047fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047e4:	601a      	str	r2, [r3, #0]
      break;
 80047e6:	e008      	b.n	80047fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80047ee:	601a      	str	r2, [r3, #0]
      break;
 80047f0:	e003      	b.n	80047fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 80047f2:	f04f 33ff 	mov.w	r3, #4294967295
 80047f6:	60fb      	str	r3, [r7, #12]
      break;
 80047f8:	bf00      	nop
  }

  return ret;
 80047fa:	68fb      	ldr	r3, [r7, #12]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <LSM6DSO_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b7d      	cmp	r3, #125	; 0x7d
 8004812:	dd12      	ble.n	800483a <LSM6DSO_GYRO_SetFullScale+0x36>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2bfa      	cmp	r3, #250	; 0xfa
 8004818:	dd0d      	ble.n	8004836 <LSM6DSO_GYRO_SetFullScale+0x32>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004820:	dd07      	ble.n	8004832 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004828:	dc01      	bgt.n	800482e <LSM6DSO_GYRO_SetFullScale+0x2a>
 800482a:	2304      	movs	r3, #4
 800482c:	e006      	b.n	800483c <LSM6DSO_GYRO_SetFullScale+0x38>
 800482e:	2306      	movs	r3, #6
 8004830:	e004      	b.n	800483c <LSM6DSO_GYRO_SetFullScale+0x38>
 8004832:	2302      	movs	r3, #2
 8004834:	e002      	b.n	800483c <LSM6DSO_GYRO_SetFullScale+0x38>
 8004836:	2300      	movs	r3, #0
 8004838:	e000      	b.n	800483c <LSM6DSO_GYRO_SetFullScale+0x38>
 800483a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 800483c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	331c      	adds	r3, #28
 8004842:	7bfa      	ldrb	r2, [r7, #15]
 8004844:	4611      	mov	r1, r2
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fcfc 	bl	8005244 <lsm6dso_gy_full_scale_set>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8004852:	f04f 33ff 	mov.w	r3, #4294967295
 8004856:	e000      	b.n	800485a <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <LSM6DSO_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	331c      	adds	r3, #28
 8004870:	f107 0208 	add.w	r2, r7, #8
 8004874:	4611      	mov	r1, r2
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fed0 	bl	800561c <lsm6dso_angular_rate_raw_get>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004882:	f04f 33ff 	mov.w	r3, #4294967295
 8004886:	e00c      	b.n	80048a2 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004888:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004890:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004898:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <LSM6DSO_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b086      	sub	sp, #24
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	331c      	adds	r3, #28
 80048b8:	f107 0210 	add.w	r2, r7, #16
 80048bc:	4611      	mov	r1, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 feac 	bl	800561c <lsm6dso_angular_rate_raw_get>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80048ca:	f04f 33ff 	mov.w	r3, #4294967295
 80048ce:	e03c      	b.n	800494a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80048d0:	f107 030c 	add.w	r3, r7, #12
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff fdd4 	bl	8004484 <LSM6DSO_GYRO_GetSensitivity>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80048e2:	f04f 33ff 	mov.w	r3, #4294967295
 80048e6:	e030      	b.n	800494a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80048e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80048ec:	ee07 3a90 	vmov	s15, r3
 80048f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80048f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004900:	ee17 2a90 	vmov	r2, s15
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004908:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800490c:	ee07 3a90 	vmov	s15, r3
 8004910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004914:	edd7 7a03 	vldr	s15, [r7, #12]
 8004918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004920:	ee17 2a90 	vmov	r2, s15
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004928:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800492c:	ee07 3a90 	vmov	s15, r3
 8004930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004934:	edd7 7a03 	vldr	s15, [r7, #12]
 8004938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800493c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004940:	ee17 2a90 	vmov	r2, s15
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <LSM6DSO_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	460b      	mov	r3, r1
 800495c:	70fb      	strb	r3, [r7, #3]
 800495e:	4613      	mov	r3, r2
 8004960:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f103 001c 	add.w	r0, r3, #28
 8004968:	1cba      	adds	r2, r7, #2
 800496a:	78f9      	ldrb	r1, [r7, #3]
 800496c:	2301      	movs	r3, #1
 800496e:	f000 fa8f 	bl	8004e90 <lsm6dso_write_reg>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8004978:	f04f 33ff 	mov.w	r3, #4294967295
 800497c:	e000      	b.n	8004980 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004994:	edd7 7a00 	vldr	s15, [r7]
 8004998:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004a98 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 800499c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a4:	d801      	bhi.n	80049aa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 80049a6:	230b      	movs	r3, #11
 80049a8:	e063      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80049aa:	edd7 7a00 	vldr	s15, [r7]
 80049ae:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80049b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ba:	d801      	bhi.n	80049c0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 80049bc:	2301      	movs	r3, #1
 80049be:	e058      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80049c0:	edd7 7a00 	vldr	s15, [r7]
 80049c4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80049c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d0:	d801      	bhi.n	80049d6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e04d      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80049d6:	edd7 7a00 	vldr	s15, [r7]
 80049da:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004a9c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 80049de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e6:	d801      	bhi.n	80049ec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80049e8:	2303      	movs	r3, #3
 80049ea:	e042      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80049ec:	edd7 7a00 	vldr	s15, [r7]
 80049f0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004aa0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80049f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049fc:	d801      	bhi.n	8004a02 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80049fe:	2304      	movs	r3, #4
 8004a00:	e037      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004a02:	edd7 7a00 	vldr	s15, [r7]
 8004a06:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004aa4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8004a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a12:	d801      	bhi.n	8004a18 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004a14:	2305      	movs	r3, #5
 8004a16:	e02c      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004a18:	edd7 7a00 	vldr	s15, [r7]
 8004a1c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004aa8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8004a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a28:	d801      	bhi.n	8004a2e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004a2a:	2306      	movs	r3, #6
 8004a2c:	e021      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004a2e:	edd7 7a00 	vldr	s15, [r7]
 8004a32:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004aac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8004a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3e:	d801      	bhi.n	8004a44 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004a40:	2307      	movs	r3, #7
 8004a42:	e016      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004a44:	edd7 7a00 	vldr	s15, [r7]
 8004a48:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004ab0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8004a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a54:	d801      	bhi.n	8004a5a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004a56:	2308      	movs	r3, #8
 8004a58:	e00b      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004a5a:	edd7 7a00 	vldr	s15, [r7]
 8004a5e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004ab4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8004a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6a:	d801      	bhi.n	8004a70 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8004a6c:	2309      	movs	r3, #9
 8004a6e:	e000      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004a70:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004a72:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
          :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	331c      	adds	r3, #28
 8004a78:	7bfa      	ldrb	r2, [r7, #15]
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fa7d 	bl	8004f7c <lsm6dso_xl_data_rate_set>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8004a88:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8c:	e000      	b.n	8004a90 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	3fcccccd 	.word	0x3fcccccd
 8004a9c:	42500000 	.word	0x42500000
 8004aa0:	42d00000 	.word	0x42d00000
 8004aa4:	43500000 	.word	0x43500000
 8004aa8:	43d08000 	.word	0x43d08000
 8004aac:	44504000 	.word	0x44504000
 8004ab0:	44d06000 	.word	0x44d06000
 8004ab4:	45505000 	.word	0x45505000

08004ab8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004ac4:	edd7 7a00 	vldr	s15, [r7]
 8004ac8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004bb8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004acc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad4:	d801      	bhi.n	8004ada <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004ad6:	230b      	movs	r3, #11
 8004ad8:	e063      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004ada:	edd7 7a00 	vldr	s15, [r7]
 8004ade:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aea:	d801      	bhi.n	8004af0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e058      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004af0:	edd7 7a00 	vldr	s15, [r7]
 8004af4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b00:	d801      	bhi.n	8004b06 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e04d      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004b06:	edd7 7a00 	vldr	s15, [r7]
 8004b0a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004bbc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8004b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b16:	d801      	bhi.n	8004b1c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e042      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004b1c:	edd7 7a00 	vldr	s15, [r7]
 8004b20:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004bc0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8004b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b2c:	d801      	bhi.n	8004b32 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004b2e:	2304      	movs	r3, #4
 8004b30:	e037      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004b32:	edd7 7a00 	vldr	s15, [r7]
 8004b36:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004bc4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8004b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b42:	d801      	bhi.n	8004b48 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004b44:	2305      	movs	r3, #5
 8004b46:	e02c      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004b48:	edd7 7a00 	vldr	s15, [r7]
 8004b4c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004bc8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8004b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b58:	d801      	bhi.n	8004b5e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004b5a:	2306      	movs	r3, #6
 8004b5c:	e021      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004b5e:	edd7 7a00 	vldr	s15, [r7]
 8004b62:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004bcc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8004b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6e:	d801      	bhi.n	8004b74 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004b70:	2307      	movs	r3, #7
 8004b72:	e016      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004b74:	edd7 7a00 	vldr	s15, [r7]
 8004b78:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004bd0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8004b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b84:	d801      	bhi.n	8004b8a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004b86:	2308      	movs	r3, #8
 8004b88:	e00b      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004b8a:	edd7 7a00 	vldr	s15, [r7]
 8004b8e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004bd4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8004b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b9a:	d801      	bhi.n	8004ba0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004b9c:	2309      	movs	r3, #9
 8004b9e:	e000      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004ba0:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	3fcccccd 	.word	0x3fcccccd
 8004bbc:	42500000 	.word	0x42500000
 8004bc0:	42d00000 	.word	0x42d00000
 8004bc4:	43500000 	.word	0x43500000
 8004bc8:	43d08000 	.word	0x43d08000
 8004bcc:	44504000 	.word	0x44504000
 8004bd0:	44d06000 	.word	0x44d06000
 8004bd4:	45505000 	.word	0x45505000

08004bd8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004be4:	edd7 7a00 	vldr	s15, [r7]
 8004be8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf4:	d801      	bhi.n	8004bfa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e058      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004bfa:	edd7 7a00 	vldr	s15, [r7]
 8004bfe:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0a:	d801      	bhi.n	8004c10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e04d      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c10:	edd7 7a00 	vldr	s15, [r7]
 8004c14:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004cd4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c20:	d801      	bhi.n	8004c26 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004c22:	2303      	movs	r3, #3
 8004c24:	e042      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c26:	edd7 7a00 	vldr	s15, [r7]
 8004c2a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004cd8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c36:	d801      	bhi.n	8004c3c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004c38:	2304      	movs	r3, #4
 8004c3a:	e037      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c3c:	edd7 7a00 	vldr	s15, [r7]
 8004c40:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004cdc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4c:	d801      	bhi.n	8004c52 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004c4e:	2305      	movs	r3, #5
 8004c50:	e02c      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c52:	edd7 7a00 	vldr	s15, [r7]
 8004c56:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004ce0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c62:	d801      	bhi.n	8004c68 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004c64:	2306      	movs	r3, #6
 8004c66:	e021      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c68:	edd7 7a00 	vldr	s15, [r7]
 8004c6c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004ce4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c78:	d801      	bhi.n	8004c7e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004c7a:	2307      	movs	r3, #7
 8004c7c:	e016      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c7e:	edd7 7a00 	vldr	s15, [r7]
 8004c82:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004ce8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8e:	d801      	bhi.n	8004c94 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004c90:	2308      	movs	r3, #8
 8004c92:	e00b      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c94:	edd7 7a00 	vldr	s15, [r7]
 8004c98:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004cec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004c9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca4:	d801      	bhi.n	8004caa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004ca6:	2309      	movs	r3, #9
 8004ca8:	e000      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004caa:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004cac:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
          :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	331c      	adds	r3, #28
 8004cb2:	7bfa      	ldrb	r2, [r7, #15]
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fb2c 	bl	8005314 <lsm6dso_gy_data_rate_set>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8004cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc6:	e000      	b.n	8004cca <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	42500000 	.word	0x42500000
 8004cd8:	42d00000 	.word	0x42d00000
 8004cdc:	43500000 	.word	0x43500000
 8004ce0:	43d08000 	.word	0x43d08000
 8004ce4:	44504000 	.word	0x44504000
 8004ce8:	44d06000 	.word	0x44d06000
 8004cec:	45505000 	.word	0x45505000

08004cf0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004cfc:	edd7 7a00 	vldr	s15, [r7]
 8004d00:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0c:	d801      	bhi.n	8004d12 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e058      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004d12:	edd7 7a00 	vldr	s15, [r7]
 8004d16:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d22:	d801      	bhi.n	8004d28 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e04d      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004d28:	edd7 7a00 	vldr	s15, [r7]
 8004d2c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004dd8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d38:	d801      	bhi.n	8004d3e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e042      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004d3e:	edd7 7a00 	vldr	s15, [r7]
 8004d42:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004ddc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4e:	d801      	bhi.n	8004d54 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004d50:	2304      	movs	r3, #4
 8004d52:	e037      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004d54:	edd7 7a00 	vldr	s15, [r7]
 8004d58:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004de0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d64:	d801      	bhi.n	8004d6a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004d66:	2305      	movs	r3, #5
 8004d68:	e02c      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004d6a:	edd7 7a00 	vldr	s15, [r7]
 8004d6e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004de4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7a:	d801      	bhi.n	8004d80 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004d7c:	2306      	movs	r3, #6
 8004d7e:	e021      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004d80:	edd7 7a00 	vldr	s15, [r7]
 8004d84:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004de8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d90:	d801      	bhi.n	8004d96 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004d92:	2307      	movs	r3, #7
 8004d94:	e016      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004d96:	edd7 7a00 	vldr	s15, [r7]
 8004d9a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004dec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da6:	d801      	bhi.n	8004dac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004da8:	2308      	movs	r3, #8
 8004daa:	e00b      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004dac:	edd7 7a00 	vldr	s15, [r7]
 8004db0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004df0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dbc:	d801      	bhi.n	8004dc2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004dbe:	2309      	movs	r3, #9
 8004dc0:	e000      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004dc2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                 :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	42500000 	.word	0x42500000
 8004ddc:	42d00000 	.word	0x42d00000
 8004de0:	43500000 	.word	0x43500000
 8004de4:	43d08000 	.word	0x43d08000
 8004de8:	44504000 	.word	0x44504000
 8004dec:	44d06000 	.word	0x44d06000
 8004df0:	45505000 	.word	0x45505000

08004df4 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	607a      	str	r2, [r7, #4]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	460b      	mov	r3, r1
 8004e02:	72fb      	strb	r3, [r7, #11]
 8004e04:	4613      	mov	r3, r2
 8004e06:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	695c      	ldr	r4, [r3, #20]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	7b1b      	ldrb	r3, [r3, #12]
 8004e14:	b298      	uxth	r0, r3
 8004e16:	7afb      	ldrb	r3, [r7, #11]
 8004e18:	b299      	uxth	r1, r3
 8004e1a:	893b      	ldrh	r3, [r7, #8]
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	47a0      	blx	r4
 8004e20:	4603      	mov	r3, r0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd90      	pop	{r4, r7, pc}

08004e2a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004e2a:	b590      	push	{r4, r7, lr}
 8004e2c:	b087      	sub	sp, #28
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	461a      	mov	r2, r3
 8004e36:	460b      	mov	r3, r1
 8004e38:	72fb      	strb	r3, [r7, #11]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	691c      	ldr	r4, [r3, #16]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	7b1b      	ldrb	r3, [r3, #12]
 8004e4a:	b298      	uxth	r0, r3
 8004e4c:	7afb      	ldrb	r3, [r7, #11]
 8004e4e:	b299      	uxth	r1, r3
 8004e50:	893b      	ldrh	r3, [r7, #8]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	47a0      	blx	r4
 8004e56:	4603      	mov	r3, r0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	371c      	adds	r7, #28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd90      	pop	{r4, r7, pc}

08004e60 <lsm6dso_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004e60:	b590      	push	{r4, r7, lr}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	607a      	str	r2, [r7, #4]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	72fb      	strb	r3, [r7, #11]
 8004e70:	4613      	mov	r3, r2
 8004e72:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	685c      	ldr	r4, [r3, #4]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6898      	ldr	r0, [r3, #8]
 8004e7c:	893b      	ldrh	r3, [r7, #8]
 8004e7e:	7af9      	ldrb	r1, [r7, #11]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	47a0      	blx	r4
 8004e84:	6178      	str	r0, [r7, #20]
  return ret;
 8004e86:	697b      	ldr	r3, [r7, #20]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd90      	pop	{r4, r7, pc}

08004e90 <lsm6dso_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	607a      	str	r2, [r7, #4]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	72fb      	strb	r3, [r7, #11]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681c      	ldr	r4, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6898      	ldr	r0, [r3, #8]
 8004eac:	893b      	ldrh	r3, [r7, #8]
 8004eae:	7af9      	ldrb	r1, [r7, #11]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	47a0      	blx	r4
 8004eb4:	6178      	str	r0, [r7, #20]
  return ret;
 8004eb6:	697b      	ldr	r3, [r7, #20]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd90      	pop	{r4, r7, pc}

08004ec0 <lsm6dso_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8004ecc:	f107 0208 	add.w	r2, r7, #8
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	2110      	movs	r1, #16
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff ffc3 	bl	8004e60 <lsm6dso_read_reg>
 8004eda:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10f      	bne.n	8004f02 <lsm6dso_xl_full_scale_set+0x42>
    reg.fs_xl = (uint8_t) val;
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	7a3b      	ldrb	r3, [r7, #8]
 8004eec:	f362 0383 	bfi	r3, r2, #2, #2
 8004ef0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8004ef2:	f107 0208 	add.w	r2, r7, #8
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	2110      	movs	r1, #16
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff ffc8 	bl	8004e90 <lsm6dso_write_reg>
 8004f00:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004f02:	68fb      	ldr	r3, [r7, #12]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <lsm6dso_xl_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dso_fs_xl_t *val)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8004f16:	f107 0208 	add.w	r2, r7, #8
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	2110      	movs	r1, #16
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7ff ff9e 	bl	8004e60 <lsm6dso_read_reg>
 8004f24:	60f8      	str	r0, [r7, #12]
  switch (reg.fs_xl) {
 8004f26:	7a3b      	ldrb	r3, [r7, #8]
 8004f28:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d81a      	bhi.n	8004f68 <lsm6dso_xl_full_scale_get+0x5c>
 8004f32:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <lsm6dso_xl_full_scale_get+0x2c>)
 8004f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f38:	08004f49 	.word	0x08004f49
 8004f3c:	08004f51 	.word	0x08004f51
 8004f40:	08004f59 	.word	0x08004f59
 8004f44:	08004f61 	.word	0x08004f61
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	701a      	strb	r2, [r3, #0]
      break;
 8004f4e:	e00f      	b.n	8004f70 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2201      	movs	r2, #1
 8004f54:	701a      	strb	r2, [r3, #0]
      break;
 8004f56:	e00b      	b.n	8004f70 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	701a      	strb	r2, [r3, #0]
      break;
 8004f5e:	e007      	b.n	8004f70 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2203      	movs	r2, #3
 8004f64:	701a      	strb	r2, [r3, #0]
      break;
 8004f66:	e003      	b.n	8004f70 <lsm6dso_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSO_2g;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
      break;
 8004f6e:	bf00      	nop
  }

  return ret;
 8004f70:	68fb      	ldr	r3, [r7, #12]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop

08004f7c <lsm6dso_xl_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dso_odr_xl_t val)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004f8c:	f107 030c 	add.w	r3, r7, #12
 8004f90:	4619      	mov	r1, r3
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fc2d 	bl	80057f2 <lsm6dso_fsm_enable_get>
 8004f98:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f040 80c4 	bne.w	800512a <lsm6dso_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004fa2:	7b3b      	ldrb	r3, [r7, #12]
 8004fa4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004fa8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004faa:	7b3b      	ldrb	r3, [r7, #12]
 8004fac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004fb0:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004fb6:	7b3b      	ldrb	r3, [r7, #12]
 8004fb8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004fbc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004fc2:	7b3b      	ldrb	r3, [r7, #12]
 8004fc4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004fc8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004fce:	7b3b      	ldrb	r3, [r7, #12]
 8004fd0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004fd4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004fda:	7b3b      	ldrb	r3, [r7, #12]
 8004fdc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004fe0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004fe6:	7b3b      	ldrb	r3, [r7, #12]
 8004fe8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004fec:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8004ff2:	7b3b      	ldrb	r3, [r7, #12]
 8004ff4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ff8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004ffe:	7b7b      	ldrb	r3, [r7, #13]
 8005000:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005004:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8005006:	4313      	orrs	r3, r2
 8005008:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800500a:	7b7b      	ldrb	r3, [r7, #13]
 800500c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005010:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8005012:	4313      	orrs	r3, r2
 8005014:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8005016:	7b7b      	ldrb	r3, [r7, #13]
 8005018:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800501c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800501e:	4313      	orrs	r3, r2
 8005020:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8005022:	7b7b      	ldrb	r3, [r7, #13]
 8005024:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005028:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800502a:	4313      	orrs	r3, r2
 800502c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800502e:	7b7b      	ldrb	r3, [r7, #13]
 8005030:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005034:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8005036:	4313      	orrs	r3, r2
 8005038:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800503a:	7b7b      	ldrb	r3, [r7, #13]
 800503c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005040:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8005042:	4313      	orrs	r3, r2
 8005044:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8005046:	7b7b      	ldrb	r3, [r7, #13]
 8005048:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800504c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800504e:	4313      	orrs	r3, r2
 8005050:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 8005052:	7b7b      	ldrb	r3, [r7, #13]
 8005054:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005058:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800505a:	4313      	orrs	r3, r2
 800505c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800505e:	2b01      	cmp	r3, #1
 8005060:	d163      	bne.n	800512a <lsm6dso_xl_data_rate_set+0x1ae>

      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005062:	f107 030b 	add.w	r3, r7, #11
 8005066:	4619      	mov	r1, r3
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fbe3 	bl	8005834 <lsm6dso_fsm_data_rate_get>
 800506e:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d159      	bne.n	800512a <lsm6dso_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8005076:	7afb      	ldrb	r3, [r7, #11]
 8005078:	2b03      	cmp	r3, #3
 800507a:	d853      	bhi.n	8005124 <lsm6dso_xl_data_rate_set+0x1a8>
 800507c:	a201      	add	r2, pc, #4	; (adr r2, 8005084 <lsm6dso_xl_data_rate_set+0x108>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	08005095 	.word	0x08005095
 8005088:	080050a7 	.word	0x080050a7
 800508c:	080050c5 	.word	0x080050c5
 8005090:	080050ef 	.word	0x080050ef
          case LSM6DSO_ODR_FSM_12Hz5:

            if (val == LSM6DSO_XL_ODR_OFF){
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <lsm6dso_xl_data_rate_set+0x124>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 800509a:	2301      	movs	r3, #1
 800509c:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 800509e:	e045      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	75fb      	strb	r3, [r7, #23]
            break;
 80050a4:	e042      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_26Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d102      	bne.n	80050b2 <lsm6dso_xl_data_rate_set+0x136>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80050ac:	2302      	movs	r3, #2
 80050ae:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 80050b0:	e03c      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d102      	bne.n	80050be <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80050b8:	2302      	movs	r3, #2
 80050ba:	75fb      	strb	r3, [r7, #23]
            break;
 80050bc:	e036      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	75fb      	strb	r3, [r7, #23]
            break;
 80050c2:	e033      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_52Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d102      	bne.n	80050d0 <lsm6dso_xl_data_rate_set+0x154>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80050ca:	2303      	movs	r3, #3
 80050cc:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 80050ce:	e02d      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d102      	bne.n	80050dc <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80050d6:	2303      	movs	r3, #3
 80050d8:	75fb      	strb	r3, [r7, #23]
            break;
 80050da:	e027      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_26Hz){
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d102      	bne.n	80050e8 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80050e2:	2303      	movs	r3, #3
 80050e4:	75fb      	strb	r3, [r7, #23]
            break;
 80050e6:	e021      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	75fb      	strb	r3, [r7, #23]
            break;
 80050ec:	e01e      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_104Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d102      	bne.n	80050fa <lsm6dso_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80050f4:	2304      	movs	r3, #4
 80050f6:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 80050f8:	e018      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d102      	bne.n	8005106 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005100:	2304      	movs	r3, #4
 8005102:	75fb      	strb	r3, [r7, #23]
            break;
 8005104:	e012      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_26Hz){
 8005106:	78fb      	ldrb	r3, [r7, #3]
 8005108:	2b02      	cmp	r3, #2
 800510a:	d102      	bne.n	8005112 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800510c:	2304      	movs	r3, #4
 800510e:	75fb      	strb	r3, [r7, #23]
            break;
 8005110:	e00c      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_52Hz){
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	2b03      	cmp	r3, #3
 8005116:	d102      	bne.n	800511e <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005118:	2304      	movs	r3, #4
 800511a:	75fb      	strb	r3, [r7, #23]
            break;
 800511c:	e006      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800511e:	78fb      	ldrb	r3, [r7, #3]
 8005120:	75fb      	strb	r3, [r7, #23]
            break;
 8005122:	e003      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
          default:
            odr_xl = val;
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	75fb      	strb	r3, [r7, #23]
            break;
 8005128:	e000      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 800512a:	bf00      	nop
    }
  }
  if (ret == 0) {
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d107      	bne.n	8005142 <lsm6dso_xl_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8005132:	f107 0208 	add.w	r2, r7, #8
 8005136:	2301      	movs	r3, #1
 8005138:	2110      	movs	r1, #16
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff fe90 	bl	8004e60 <lsm6dso_read_reg>
 8005140:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10f      	bne.n	8005168 <lsm6dso_xl_data_rate_set+0x1ec>
    reg.odr_xl = (uint8_t) odr_xl;
 8005148:	7dfb      	ldrb	r3, [r7, #23]
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	b2da      	uxtb	r2, r3
 8005150:	7a3b      	ldrb	r3, [r7, #8]
 8005152:	f362 1307 	bfi	r3, r2, #4, #4
 8005156:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8005158:	f107 0208 	add.w	r2, r7, #8
 800515c:	2301      	movs	r3, #1
 800515e:	2110      	movs	r1, #16
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7ff fe95 	bl	8004e90 <lsm6dso_write_reg>
 8005166:	6138      	str	r0, [r7, #16]
  }
  return ret;
 8005168:	693b      	ldr	r3, [r7, #16]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop

08005174 <lsm6dso_xl_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_odr_xl_t *val)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 800517e:	f107 0208 	add.w	r2, r7, #8
 8005182:	2301      	movs	r3, #1
 8005184:	2110      	movs	r1, #16
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff fe6a 	bl	8004e60 <lsm6dso_read_reg>
 800518c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl) {
 800518e:	7a3b      	ldrb	r3, [r7, #8]
 8005190:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b0b      	cmp	r3, #11
 8005198:	d84a      	bhi.n	8005230 <lsm6dso_xl_data_rate_get+0xbc>
 800519a:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <lsm6dso_xl_data_rate_get+0x2c>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	080051d1 	.word	0x080051d1
 80051a4:	080051d9 	.word	0x080051d9
 80051a8:	080051e1 	.word	0x080051e1
 80051ac:	080051e9 	.word	0x080051e9
 80051b0:	080051f1 	.word	0x080051f1
 80051b4:	080051f9 	.word	0x080051f9
 80051b8:	08005201 	.word	0x08005201
 80051bc:	08005209 	.word	0x08005209
 80051c0:	08005211 	.word	0x08005211
 80051c4:	08005219 	.word	0x08005219
 80051c8:	08005221 	.word	0x08005221
 80051cc:	08005229 	.word	0x08005229
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
      break;
 80051d6:	e02f      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2201      	movs	r2, #1
 80051dc:	701a      	strb	r2, [r3, #0]
      break;
 80051de:	e02b      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2202      	movs	r2, #2
 80051e4:	701a      	strb	r2, [r3, #0]
      break;
 80051e6:	e027      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2203      	movs	r2, #3
 80051ec:	701a      	strb	r2, [r3, #0]
      break;
 80051ee:	e023      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2204      	movs	r2, #4
 80051f4:	701a      	strb	r2, [r3, #0]
      break;
 80051f6:	e01f      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2205      	movs	r2, #5
 80051fc:	701a      	strb	r2, [r3, #0]
      break;
 80051fe:	e01b      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2206      	movs	r2, #6
 8005204:	701a      	strb	r2, [r3, #0]
      break;
 8005206:	e017      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2207      	movs	r2, #7
 800520c:	701a      	strb	r2, [r3, #0]
      break;
 800520e:	e013      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2208      	movs	r2, #8
 8005214:	701a      	strb	r2, [r3, #0]
      break;
 8005216:	e00f      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2209      	movs	r2, #9
 800521c:	701a      	strb	r2, [r3, #0]
      break;
 800521e:	e00b      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	220a      	movs	r2, #10
 8005224:	701a      	strb	r2, [r3, #0]
      break;
 8005226:	e007      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	220b      	movs	r2, #11
 800522c:	701a      	strb	r2, [r3, #0]
      break;
 800522e:	e003      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2200      	movs	r2, #0
 8005234:	701a      	strb	r2, [r3, #0]
      break;
 8005236:	bf00      	nop
  }
  return ret;
 8005238:	68fb      	ldr	r3, [r7, #12]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop

08005244 <lsm6dso_gy_full_scale_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dso_fs_g_t val)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8005250:	f107 0208 	add.w	r2, r7, #8
 8005254:	2301      	movs	r3, #1
 8005256:	2111      	movs	r1, #17
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff fe01 	bl	8004e60 <lsm6dso_read_reg>
 800525e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10f      	bne.n	8005286 <lsm6dso_gy_full_scale_set+0x42>
    reg.fs_g = (uint8_t) val;
 8005266:	78fb      	ldrb	r3, [r7, #3]
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	b2da      	uxtb	r2, r3
 800526e:	7a3b      	ldrb	r3, [r7, #8]
 8005270:	f362 0343 	bfi	r3, r2, #1, #3
 8005274:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8005276:	f107 0208 	add.w	r2, r7, #8
 800527a:	2301      	movs	r3, #1
 800527c:	2111      	movs	r1, #17
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff fe06 	bl	8004e90 <lsm6dso_write_reg>
 8005284:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005286:	68fb      	ldr	r3, [r7, #12]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <lsm6dso_gy_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dso_fs_g_t *val)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 800529a:	f107 0208 	add.w	r2, r7, #8
 800529e:	2301      	movs	r3, #1
 80052a0:	2111      	movs	r1, #17
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff fddc 	bl	8004e60 <lsm6dso_read_reg>
 80052a8:	60f8      	str	r0, [r7, #12]
  switch (reg.fs_g) {
 80052aa:	7a3b      	ldrb	r3, [r7, #8]
 80052ac:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b06      	cmp	r3, #6
 80052b4:	d824      	bhi.n	8005300 <lsm6dso_gy_full_scale_get+0x70>
 80052b6:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <lsm6dso_gy_full_scale_get+0x2c>)
 80052b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052bc:	080052d9 	.word	0x080052d9
 80052c0:	080052e1 	.word	0x080052e1
 80052c4:	080052e9 	.word	0x080052e9
 80052c8:	08005301 	.word	0x08005301
 80052cc:	080052f1 	.word	0x080052f1
 80052d0:	08005301 	.word	0x08005301
 80052d4:	080052f9 	.word	0x080052f9
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2200      	movs	r2, #0
 80052dc:	701a      	strb	r2, [r3, #0]
      break;
 80052de:	e013      	b.n	8005308 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2201      	movs	r2, #1
 80052e4:	701a      	strb	r2, [r3, #0]
      break;
 80052e6:	e00f      	b.n	8005308 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2202      	movs	r2, #2
 80052ec:	701a      	strb	r2, [r3, #0]
      break;
 80052ee:	e00b      	b.n	8005308 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2204      	movs	r2, #4
 80052f4:	701a      	strb	r2, [r3, #0]
      break;
 80052f6:	e007      	b.n	8005308 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2206      	movs	r2, #6
 80052fc:	701a      	strb	r2, [r3, #0]
      break;
 80052fe:	e003      	b.n	8005308 <lsm6dso_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSO_250dps;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2200      	movs	r2, #0
 8005304:	701a      	strb	r2, [r3, #0]
      break;
 8005306:	bf00      	nop
  }

  return ret;
 8005308:	68fb      	ldr	r3, [r7, #12]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop

08005314 <lsm6dso_gy_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dso_odr_g_t val)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005324:	f107 030c 	add.w	r3, r7, #12
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fa61 	bl	80057f2 <lsm6dso_fsm_enable_get>
 8005330:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f040 80c4 	bne.w	80054c2 <lsm6dso_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800533a:	7b3b      	ldrb	r3, [r7, #12]
 800533c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005340:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8005342:	7b3b      	ldrb	r3, [r7, #12]
 8005344:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005348:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800534a:	4313      	orrs	r3, r2
 800534c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800534e:	7b3b      	ldrb	r3, [r7, #12]
 8005350:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005354:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8005356:	4313      	orrs	r3, r2
 8005358:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800535a:	7b3b      	ldrb	r3, [r7, #12]
 800535c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005360:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8005362:	4313      	orrs	r3, r2
 8005364:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8005366:	7b3b      	ldrb	r3, [r7, #12]
 8005368:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800536c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800536e:	4313      	orrs	r3, r2
 8005370:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8005372:	7b3b      	ldrb	r3, [r7, #12]
 8005374:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005378:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 800537a:	4313      	orrs	r3, r2
 800537c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800537e:	7b3b      	ldrb	r3, [r7, #12]
 8005380:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005384:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8005386:	4313      	orrs	r3, r2
 8005388:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 800538a:	7b3b      	ldrb	r3, [r7, #12]
 800538c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005390:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8005392:	4313      	orrs	r3, r2
 8005394:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8005396:	7b7b      	ldrb	r3, [r7, #13]
 8005398:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800539c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 800539e:	4313      	orrs	r3, r2
 80053a0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80053a2:	7b7b      	ldrb	r3, [r7, #13]
 80053a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80053a8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80053aa:	4313      	orrs	r3, r2
 80053ac:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80053ae:	7b7b      	ldrb	r3, [r7, #13]
 80053b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80053b4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80053b6:	4313      	orrs	r3, r2
 80053b8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80053ba:	7b7b      	ldrb	r3, [r7, #13]
 80053bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80053c0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80053c2:	4313      	orrs	r3, r2
 80053c4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80053c6:	7b7b      	ldrb	r3, [r7, #13]
 80053c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80053cc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80053ce:	4313      	orrs	r3, r2
 80053d0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80053d2:	7b7b      	ldrb	r3, [r7, #13]
 80053d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80053d8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80053da:	4313      	orrs	r3, r2
 80053dc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80053de:	7b7b      	ldrb	r3, [r7, #13]
 80053e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80053e4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80053e6:	4313      	orrs	r3, r2
 80053e8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 80053ea:	7b7b      	ldrb	r3, [r7, #13]
 80053ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80053f0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80053f2:	4313      	orrs	r3, r2
 80053f4:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d163      	bne.n	80054c2 <lsm6dso_gy_data_rate_set+0x1ae>

      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80053fa:	f107 030b 	add.w	r3, r7, #11
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fa17 	bl	8005834 <lsm6dso_fsm_data_rate_get>
 8005406:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d159      	bne.n	80054c2 <lsm6dso_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 800540e:	7afb      	ldrb	r3, [r7, #11]
 8005410:	2b03      	cmp	r3, #3
 8005412:	d853      	bhi.n	80054bc <lsm6dso_gy_data_rate_set+0x1a8>
 8005414:	a201      	add	r2, pc, #4	; (adr r2, 800541c <lsm6dso_gy_data_rate_set+0x108>)
 8005416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541a:	bf00      	nop
 800541c:	0800542d 	.word	0x0800542d
 8005420:	0800543f 	.word	0x0800543f
 8005424:	0800545d 	.word	0x0800545d
 8005428:	08005487 	.word	0x08005487
          case LSM6DSO_ODR_FSM_12Hz5:

            if (val == LSM6DSO_GY_ODR_OFF){
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d102      	bne.n	8005438 <lsm6dso_gy_data_rate_set+0x124>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8005432:	2301      	movs	r3, #1
 8005434:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 8005436:	e045      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	75fb      	strb	r3, [r7, #23]
            break;
 800543c:	e042      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_26Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <lsm6dso_gy_data_rate_set+0x136>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005444:	2302      	movs	r3, #2
 8005446:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 8005448:	e03c      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 800544a:	78fb      	ldrb	r3, [r7, #3]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d102      	bne.n	8005456 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005450:	2302      	movs	r3, #2
 8005452:	75fb      	strb	r3, [r7, #23]
            break;
 8005454:	e036      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	75fb      	strb	r3, [r7, #23]
            break;
 800545a:	e033      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_52Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d102      	bne.n	8005468 <lsm6dso_gy_data_rate_set+0x154>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005462:	2303      	movs	r3, #3
 8005464:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 8005466:	e02d      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d102      	bne.n	8005474 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800546e:	2303      	movs	r3, #3
 8005470:	75fb      	strb	r3, [r7, #23]
            break;
 8005472:	e027      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_26Hz){
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d102      	bne.n	8005480 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800547a:	2303      	movs	r3, #3
 800547c:	75fb      	strb	r3, [r7, #23]
            break;
 800547e:	e021      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	75fb      	strb	r3, [r7, #23]
            break;
 8005484:	e01e      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_104Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 8005486:	78fb      	ldrb	r3, [r7, #3]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <lsm6dso_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800548c:	2304      	movs	r3, #4
 800548e:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 8005490:	e018      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d102      	bne.n	800549e <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005498:	2304      	movs	r3, #4
 800549a:	75fb      	strb	r3, [r7, #23]
            break;
 800549c:	e012      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_26Hz){
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d102      	bne.n	80054aa <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80054a4:	2304      	movs	r3, #4
 80054a6:	75fb      	strb	r3, [r7, #23]
            break;
 80054a8:	e00c      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_52Hz){
 80054aa:	78fb      	ldrb	r3, [r7, #3]
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d102      	bne.n	80054b6 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80054b0:	2304      	movs	r3, #4
 80054b2:	75fb      	strb	r3, [r7, #23]
            break;
 80054b4:	e006      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80054b6:	78fb      	ldrb	r3, [r7, #3]
 80054b8:	75fb      	strb	r3, [r7, #23]
            break;
 80054ba:	e003      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
          default:
            odr_gy = val;
 80054bc:	78fb      	ldrb	r3, [r7, #3]
 80054be:	75fb      	strb	r3, [r7, #23]
            break;
 80054c0:	e000      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 80054c2:	bf00      	nop
    }
  }

  if (ret == 0) {
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d107      	bne.n	80054da <lsm6dso_gy_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 80054ca:	f107 0208 	add.w	r2, r7, #8
 80054ce:	2301      	movs	r3, #1
 80054d0:	2111      	movs	r1, #17
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff fcc4 	bl	8004e60 <lsm6dso_read_reg>
 80054d8:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10f      	bne.n	8005500 <lsm6dso_gy_data_rate_set+0x1ec>
    reg.odr_g = (uint8_t) odr_gy;
 80054e0:	7dfb      	ldrb	r3, [r7, #23]
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	7a3b      	ldrb	r3, [r7, #8]
 80054ea:	f362 1307 	bfi	r3, r2, #4, #4
 80054ee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 80054f0:	f107 0208 	add.w	r2, r7, #8
 80054f4:	2301      	movs	r3, #1
 80054f6:	2111      	movs	r1, #17
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff fcc9 	bl	8004e90 <lsm6dso_write_reg>
 80054fe:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005500:	693b      	ldr	r3, [r7, #16]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop

0800550c <lsm6dso_gy_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_odr_g_t *val)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8005516:	f107 0208 	add.w	r2, r7, #8
 800551a:	2301      	movs	r3, #1
 800551c:	2111      	movs	r1, #17
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff fc9e 	bl	8004e60 <lsm6dso_read_reg>
 8005524:	60f8      	str	r0, [r7, #12]
  switch (reg.odr_g) {
 8005526:	7a3b      	ldrb	r3, [r7, #8]
 8005528:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b0a      	cmp	r3, #10
 8005530:	d844      	bhi.n	80055bc <lsm6dso_gy_data_rate_get+0xb0>
 8005532:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <lsm6dso_gy_data_rate_get+0x2c>)
 8005534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005538:	08005565 	.word	0x08005565
 800553c:	0800556d 	.word	0x0800556d
 8005540:	08005575 	.word	0x08005575
 8005544:	0800557d 	.word	0x0800557d
 8005548:	08005585 	.word	0x08005585
 800554c:	0800558d 	.word	0x0800558d
 8005550:	08005595 	.word	0x08005595
 8005554:	0800559d 	.word	0x0800559d
 8005558:	080055a5 	.word	0x080055a5
 800555c:	080055ad 	.word	0x080055ad
 8005560:	080055b5 	.word	0x080055b5
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
      break;
 800556a:	e02b      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2201      	movs	r2, #1
 8005570:	701a      	strb	r2, [r3, #0]
      break;
 8005572:	e027      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2202      	movs	r2, #2
 8005578:	701a      	strb	r2, [r3, #0]
      break;
 800557a:	e023      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2203      	movs	r2, #3
 8005580:	701a      	strb	r2, [r3, #0]
      break;
 8005582:	e01f      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2204      	movs	r2, #4
 8005588:	701a      	strb	r2, [r3, #0]
      break;
 800558a:	e01b      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2205      	movs	r2, #5
 8005590:	701a      	strb	r2, [r3, #0]
      break;
 8005592:	e017      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2206      	movs	r2, #6
 8005598:	701a      	strb	r2, [r3, #0]
      break;
 800559a:	e013      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2207      	movs	r2, #7
 80055a0:	701a      	strb	r2, [r3, #0]
      break;
 80055a2:	e00f      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2208      	movs	r2, #8
 80055a8:	701a      	strb	r2, [r3, #0]
      break;
 80055aa:	e00b      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2209      	movs	r2, #9
 80055b0:	701a      	strb	r2, [r3, #0]
      break;
 80055b2:	e007      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	220a      	movs	r2, #10
 80055b8:	701a      	strb	r2, [r3, #0]
      break;
 80055ba:	e003      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSO_GY_ODR_OFF;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
      break;
 80055c2:	bf00      	nop
  }
  return ret;
 80055c4:	68fb      	ldr	r3, [r7, #12]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop

080055d0 <lsm6dso_block_data_update_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of bdu in reg CTRL3_C
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 80055dc:	f107 0208 	add.w	r2, r7, #8
 80055e0:	2301      	movs	r3, #1
 80055e2:	2112      	movs	r1, #18
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff fc3b 	bl	8004e60 <lsm6dso_read_reg>
 80055ea:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10f      	bne.n	8005612 <lsm6dso_block_data_update_set+0x42>
    reg.bdu = val;
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	7a3b      	ldrb	r3, [r7, #8]
 80055fc:	f362 1386 	bfi	r3, r2, #6, #1
 8005600:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8005602:	f107 0208 	add.w	r2, r7, #8
 8005606:	2301      	movs	r3, #1
 8005608:	2112      	movs	r1, #18
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff fc40 	bl	8004e90 <lsm6dso_write_reg>
 8005610:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005612:	68fb      	ldr	r3, [r7, #12]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <lsm6dso_angular_rate_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8005626:	2306      	movs	r3, #6
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	2122      	movs	r1, #34	; 0x22
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff fc17 	bl	8004e60 <lsm6dso_read_reg>
 8005632:	60f8      	str	r0, [r7, #12]
  return ret;
 8005634:	68fb      	ldr	r3, [r7, #12]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <lsm6dso_acceleration_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8005648:	2306      	movs	r3, #6
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	2128      	movs	r1, #40	; 0x28
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff fc06 	bl	8004e60 <lsm6dso_read_reg>
 8005654:	60f8      	str	r0, [r7, #12]
  return ret;
 8005656:	68fb      	ldr	r3, [r7, #12]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <lsm6dso_mem_bank_set>:
  * @param  val      change the values of reg_access in
  *                               reg FUNC_CFG_ACCESS
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx, lsm6dso_reg_access_t val)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 800566c:	f107 0208 	add.w	r2, r7, #8
 8005670:	2301      	movs	r3, #1
 8005672:	2101      	movs	r1, #1
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff fbf3 	bl	8004e60 <lsm6dso_read_reg>
 800567a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10f      	bne.n	80056a2 <lsm6dso_mem_bank_set+0x42>
    reg.reg_access = (uint8_t)val;
 8005682:	78fb      	ldrb	r3, [r7, #3]
 8005684:	f003 0303 	and.w	r3, r3, #3
 8005688:	b2da      	uxtb	r2, r3
 800568a:	7a3b      	ldrb	r3, [r7, #8]
 800568c:	f362 1387 	bfi	r3, r2, #6, #2
 8005690:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 8005692:	f107 0208 	add.w	r2, r7, #8
 8005696:	2301      	movs	r3, #1
 8005698:	2101      	movs	r1, #1
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff fbf8 	bl	8004e90 <lsm6dso_write_reg>
 80056a0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80056a2:	68fb      	ldr	r3, [r7, #12]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <lsm6dso_device_id_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80056b6:	2301      	movs	r3, #1
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	210f      	movs	r1, #15
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff fbcf 	bl	8004e60 <lsm6dso_read_reg>
 80056c2:	60f8      	str	r0, [r7, #12]
  return ret;
 80056c4:	68fb      	ldr	r3, [r7, #12]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <lsm6dso_auto_increment_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of if_inc in reg CTRL3_C
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	460b      	mov	r3, r1
 80056d8:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 80056da:	f107 0208 	add.w	r2, r7, #8
 80056de:	2301      	movs	r3, #1
 80056e0:	2112      	movs	r1, #18
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff fbbc 	bl	8004e60 <lsm6dso_read_reg>
 80056e8:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10f      	bne.n	8005710 <lsm6dso_auto_increment_set+0x42>
    reg.if_inc = val;
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	7a3b      	ldrb	r3, [r7, #8]
 80056fa:	f362 0382 	bfi	r3, r2, #2, #1
 80056fe:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8005700:	f107 0208 	add.w	r2, r7, #8
 8005704:	2301      	movs	r3, #1
 8005706:	2112      	movs	r1, #18
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff fbc1 	bl	8004e90 <lsm6dso_write_reg>
 800570e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005710:	68fb      	ldr	r3, [r7, #12]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <lsm6dso_i3c_disable_set>:
  * @param  val      change the values of i3c_disable
  *                                    in reg CTRL9_XL
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx, lsm6dso_i3c_disable_t val)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b086      	sub	sp, #24
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	460b      	mov	r3, r1
 8005724:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 8005726:	f107 020c 	add.w	r2, r7, #12
 800572a:	2301      	movs	r3, #1
 800572c:	2118      	movs	r1, #24
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff fb96 	bl	8004e60 <lsm6dso_read_reg>
 8005734:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d111      	bne.n	8005760 <lsm6dso_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	09db      	lsrs	r3, r3, #7
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	b2da      	uxtb	r2, r3
 8005748:	7b3b      	ldrb	r3, [r7, #12]
 800574a:	f362 0341 	bfi	r3, r2, #1, #1
 800574e:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 8005750:	f107 020c 	add.w	r2, r7, #12
 8005754:	2301      	movs	r3, #1
 8005756:	2118      	movs	r1, #24
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff fb99 	bl	8004e90 <lsm6dso_write_reg>
 800575e:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d107      	bne.n	8005776 <lsm6dso_i3c_disable_set+0x5c>

    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8005766:	f107 0210 	add.w	r2, r7, #16
 800576a:	2301      	movs	r3, #1
 800576c:	2162      	movs	r1, #98	; 0x62
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff fb76 	bl	8004e60 <lsm6dso_read_reg>
 8005774:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&i3c_bus_avb, 1);
  }
  if (ret == 0) {
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10f      	bne.n	800579c <lsm6dso_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	b2da      	uxtb	r2, r3
 8005784:	7c3b      	ldrb	r3, [r7, #16]
 8005786:	f362 03c4 	bfi	r3, r2, #3, #2
 800578a:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800578c:	f107 0210 	add.w	r2, r7, #16
 8005790:	2301      	movs	r3, #1
 8005792:	2162      	movs	r1, #98	; 0x62
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff fb7b 	bl	8004e90 <lsm6dso_write_reg>
 800579a:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&i3c_bus_avb, 1);
  }

  return ret;
 800579c:	697b      	ldr	r3, [r7, #20]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <lsm6dso_fifo_mode_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fifo_mode in reg FIFO_CTRL4
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dso_fifo_mode_t val)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	460b      	mov	r3, r1
 80057b0:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 80057b2:	f107 0208 	add.w	r2, r7, #8
 80057b6:	2301      	movs	r3, #1
 80057b8:	210a      	movs	r1, #10
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7ff fb50 	bl	8004e60 <lsm6dso_read_reg>
 80057c0:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10f      	bne.n	80057e8 <lsm6dso_fifo_mode_set+0x42>
    reg.fifo_mode = (uint8_t)val;
 80057c8:	78fb      	ldrb	r3, [r7, #3]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	7a3b      	ldrb	r3, [r7, #8]
 80057d2:	f362 0302 	bfi	r3, r2, #0, #3
 80057d6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 80057d8:	f107 0208 	add.w	r2, r7, #8
 80057dc:	2301      	movs	r3, #1
 80057de:	210a      	movs	r1, #10
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff fb55 	bl	8004e90 <lsm6dso_write_reg>
 80057e6:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80057e8:	68fb      	ldr	r3, [r7, #12]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <lsm6dso_fsm_enable_get>:
  * @param  val      union of registers from FSM_ENABLE_A to FSM_ENABLE_B
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80057fc:	2102      	movs	r1, #2
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff ff2e 	bl	8005660 <lsm6dso_mem_bank_set>
 8005804:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d106      	bne.n	800581a <lsm6dso_fsm_enable_get+0x28>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t*) val, 2);
 800580c:	2302      	movs	r3, #2
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	2146      	movs	r1, #70	; 0x46
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff fb24 	bl	8004e60 <lsm6dso_read_reg>
 8005818:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d104      	bne.n	800582a <lsm6dso_fsm_enable_get+0x38>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005820:	2100      	movs	r1, #0
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff ff1c 	bl	8005660 <lsm6dso_mem_bank_set>
 8005828:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800582a:	68fb      	ldr	r3, [r7, #12]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <lsm6dso_fsm_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fsm_odr in reg EMB_FUNC_ODR_CFG_B
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_fsm_odr_t *val)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800583e:	2102      	movs	r1, #2
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff ff0d 	bl	8005660 <lsm6dso_mem_bank_set>
 8005846:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d107      	bne.n	800585e <lsm6dso_fsm_data_rate_get+0x2a>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 800584e:	f107 0208 	add.w	r2, r7, #8
 8005852:	2301      	movs	r3, #1
 8005854:	215f      	movs	r1, #95	; 0x5f
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff fb02 	bl	8004e60 <lsm6dso_read_reg>
 800585c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&reg, 1);
  }
  if (ret == 0) {
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d12a      	bne.n	80058ba <lsm6dso_fsm_data_rate_get+0x86>
    switch (reg.fsm_odr) {
 8005864:	7a3b      	ldrb	r3, [r7, #8]
 8005866:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b03      	cmp	r3, #3
 800586e:	d81b      	bhi.n	80058a8 <lsm6dso_fsm_data_rate_get+0x74>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <lsm6dso_fsm_data_rate_get+0x44>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	08005889 	.word	0x08005889
 800587c:	08005891 	.word	0x08005891
 8005880:	08005899 	.word	0x08005899
 8005884:	080058a1 	.word	0x080058a1
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2200      	movs	r2, #0
 800588c:	701a      	strb	r2, [r3, #0]
        break;
 800588e:	e00f      	b.n	80058b0 <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2201      	movs	r2, #1
 8005894:	701a      	strb	r2, [r3, #0]
        break;
 8005896:	e00b      	b.n	80058b0 <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2202      	movs	r2, #2
 800589c:	701a      	strb	r2, [r3, #0]
        break;
 800589e:	e007      	b.n	80058b0 <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2203      	movs	r2, #3
 80058a4:	701a      	strb	r2, [r3, #0]
        break;
 80058a6:	e003      	b.n	80058b0 <lsm6dso_fsm_data_rate_get+0x7c>
      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2200      	movs	r2, #0
 80058ac:	701a      	strb	r2, [r3, #0]
        break;
 80058ae:	bf00      	nop
    }
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80058b0:	2100      	movs	r1, #0
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff fed4 	bl	8005660 <lsm6dso_mem_bank_set>
 80058b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80058ba:	68fb      	ldr	r3, [r7, #12]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	4a06      	ldr	r2, [pc, #24]	; (80058ec <BSP_LED_On+0x28>)
 80058d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d6:	2120      	movs	r1, #32
 80058d8:	2201      	movs	r2, #1
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fc84 	bl	80061e8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	200012ec 	.word	0x200012ec

080058f0 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	4603      	mov	r3, r0
 80058f8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	4a06      	ldr	r2, [pc, #24]	; (8005918 <BSP_LED_Off+0x28>)
 80058fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005902:	2120      	movs	r1, #32
 8005904:	2200      	movs	r2, #0
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fc6e 	bl	80061e8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	200012ec 	.word	0x200012ec

0800591c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800592a:	79fb      	ldrb	r3, [r7, #7]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d903      	bls.n	8005938 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005930:	f06f 0301 	mvn.w	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	e01c      	b.n	8005972 <BSP_COM_Init+0x56>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8005938:	79fa      	ldrb	r2, [r7, #7]
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	490f      	ldr	r1, [pc, #60]	; (800597c <BSP_COM_Init+0x60>)
 800593e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005942:	490f      	ldr	r1, [pc, #60]	; (8005980 <BSP_COM_Init+0x64>)
 8005944:	019b      	lsls	r3, r3, #6
 8005946:	440b      	add	r3, r1
 8005948:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	019b      	lsls	r3, r3, #6
 800594e:	4a0c      	ldr	r2, [pc, #48]	; (8005980 <BSP_COM_Init+0x64>)
 8005950:	4413      	add	r3, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f000 f85c 	bl	8005a10 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	019b      	lsls	r3, r3, #6
 800595c:	4a08      	ldr	r2, [pc, #32]	; (8005980 <BSP_COM_Init+0x64>)
 800595e:	4413      	add	r3, r2
 8005960:	4618      	mov	r0, r3
 8005962:	f000 f80f 	bl	8005984 <MX_USART2_UART_Init>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <BSP_COM_Init+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800596c:	f06f 0303 	mvn.w	r3, #3
 8005970:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005972:	68fb      	ldr	r3, [r7, #12]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	200012f0 	.word	0x200012f0
 8005980:	2000ba7c 	.word	0x2000ba7c

08005984 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800598c:	2300      	movs	r3, #0
 800598e:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a12      	ldr	r2, [pc, #72]	; (80059dc <MX_USART2_UART_Init+0x58>)
 8005994:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800599c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	220c      	movs	r2, #12
 80059b4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f002 faee 	bl	8007fa4 <HAL_UART_Init>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	40004400 	.word	0x40004400

080059e0 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) /* For IAR and MDK-ARM */
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80059e8:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <__io_putchar+0x28>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	019b      	lsls	r3, r3, #6
 80059ee:	4a07      	ldr	r2, [pc, #28]	; (8005a0c <__io_putchar+0x2c>)
 80059f0:	1898      	adds	r0, r3, r2
 80059f2:	1d39      	adds	r1, r7, #4
 80059f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059f8:	2201      	movs	r2, #1
 80059fa:	f002 fb2a 	bl	8008052 <HAL_UART_Transmit>
  return ch;
 80059fe:	687b      	ldr	r3, [r7, #4]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	200029c4 	.word	0x200029c4
 8005a0c:	2000ba7c 	.word	0x2000ba7c

08005a10 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08a      	sub	sp, #40	; 0x28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005a18:	2300      	movs	r3, #0
 8005a1a:	613b      	str	r3, [r7, #16]
 8005a1c:	4b1e      	ldr	r3, [pc, #120]	; (8005a98 <USART2_MspInit+0x88>)
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	4a1d      	ldr	r2, [pc, #116]	; (8005a98 <USART2_MspInit+0x88>)
 8005a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a26:	6413      	str	r3, [r2, #64]	; 0x40
 8005a28:	4b1b      	ldr	r3, [pc, #108]	; (8005a98 <USART2_MspInit+0x88>)
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <USART2_MspInit+0x88>)
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3c:	4a16      	ldr	r2, [pc, #88]	; (8005a98 <USART2_MspInit+0x88>)
 8005a3e:	f043 0301 	orr.w	r3, r3, #1
 8005a42:	6313      	str	r3, [r2, #48]	; 0x30
 8005a44:	4b14      	ldr	r3, [pc, #80]	; (8005a98 <USART2_MspInit+0x88>)
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8005a50:	2304      	movs	r3, #4
 8005a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a54:	2302      	movs	r3, #2
 8005a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8005a60:	2307      	movs	r3, #7
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8005a64:	f107 0314 	add.w	r3, r7, #20
 8005a68:	4619      	mov	r1, r3
 8005a6a:	480c      	ldr	r0, [pc, #48]	; (8005a9c <USART2_MspInit+0x8c>)
 8005a6c:	f000 f958 	bl	8005d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8005a70:	2308      	movs	r3, #8
 8005a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a74:	2302      	movs	r3, #2
 8005a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8005a80:	2307      	movs	r3, #7
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8005a84:	f107 0314 	add.w	r3, r7, #20
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4804      	ldr	r0, [pc, #16]	; (8005a9c <USART2_MspInit+0x8c>)
 8005a8c:	f000 f948 	bl	8005d20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8005a90:	bf00      	nop
 8005a92:	3728      	adds	r7, #40	; 0x28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	40020000 	.word	0x40020000

08005aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005aa4:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <HAL_Init+0x40>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a0d      	ldr	r2, [pc, #52]	; (8005ae0 <HAL_Init+0x40>)
 8005aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005aae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <HAL_Init+0x40>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a0a      	ldr	r2, [pc, #40]	; (8005ae0 <HAL_Init+0x40>)
 8005ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005aba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005abc:	4b08      	ldr	r3, [pc, #32]	; (8005ae0 <HAL_Init+0x40>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a07      	ldr	r2, [pc, #28]	; (8005ae0 <HAL_Init+0x40>)
 8005ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ac8:	2003      	movs	r0, #3
 8005aca:	f000 f8d8 	bl	8005c7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ace:	2000      	movs	r0, #0
 8005ad0:	f7fb fd18 	bl	8001504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ad4:	f7fb fcc8 	bl	8001468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	40023c00 	.word	0x40023c00

08005ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ae8:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <HAL_IncTick+0x20>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	461a      	mov	r2, r3
 8005aee:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <HAL_IncTick+0x24>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4413      	add	r3, r2
 8005af4:	4a04      	ldr	r2, [pc, #16]	; (8005b08 <HAL_IncTick+0x24>)
 8005af6:	6013      	str	r3, [r2, #0]
}
 8005af8:	bf00      	nop
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	200012f8 	.word	0x200012f8
 8005b08:	2000babc 	.word	0x2000babc

08005b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b10:	4b03      	ldr	r3, [pc, #12]	; (8005b20 <HAL_GetTick+0x14>)
 8005b12:	681b      	ldr	r3, [r3, #0]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	2000babc 	.word	0x2000babc

08005b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b34:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <__NVIC_SetPriorityGrouping+0x44>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b40:	4013      	ands	r3, r2
 8005b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b56:	4a04      	ldr	r2, [pc, #16]	; (8005b68 <__NVIC_SetPriorityGrouping+0x44>)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	60d3      	str	r3, [r2, #12]
}
 8005b5c:	bf00      	nop
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	e000ed00 	.word	0xe000ed00

08005b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b70:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <__NVIC_GetPriorityGrouping+0x18>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	0a1b      	lsrs	r3, r3, #8
 8005b76:	f003 0307 	and.w	r3, r3, #7
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	e000ed00 	.word	0xe000ed00

08005b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	db0b      	blt.n	8005bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	f003 021f 	and.w	r2, r3, #31
 8005ba0:	4907      	ldr	r1, [pc, #28]	; (8005bc0 <__NVIC_EnableIRQ+0x38>)
 8005ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	2001      	movs	r0, #1
 8005baa:	fa00 f202 	lsl.w	r2, r0, r2
 8005bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	e000e100 	.word	0xe000e100

08005bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	6039      	str	r1, [r7, #0]
 8005bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	db0a      	blt.n	8005bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	490c      	ldr	r1, [pc, #48]	; (8005c10 <__NVIC_SetPriority+0x4c>)
 8005bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be2:	0112      	lsls	r2, r2, #4
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	440b      	add	r3, r1
 8005be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bec:	e00a      	b.n	8005c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	4908      	ldr	r1, [pc, #32]	; (8005c14 <__NVIC_SetPriority+0x50>)
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	3b04      	subs	r3, #4
 8005bfc:	0112      	lsls	r2, r2, #4
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	440b      	add	r3, r1
 8005c02:	761a      	strb	r2, [r3, #24]
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	e000e100 	.word	0xe000e100
 8005c14:	e000ed00 	.word	0xe000ed00

08005c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b089      	sub	sp, #36	; 0x24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f1c3 0307 	rsb	r3, r3, #7
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	bf28      	it	cs
 8005c36:	2304      	movcs	r3, #4
 8005c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	2b06      	cmp	r3, #6
 8005c40:	d902      	bls.n	8005c48 <NVIC_EncodePriority+0x30>
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	3b03      	subs	r3, #3
 8005c46:	e000      	b.n	8005c4a <NVIC_EncodePriority+0x32>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43da      	mvns	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	401a      	ands	r2, r3
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c60:	f04f 31ff 	mov.w	r1, #4294967295
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6a:	43d9      	mvns	r1, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c70:	4313      	orrs	r3, r2
         );
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3724      	adds	r7, #36	; 0x24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b082      	sub	sp, #8
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff ff4c 	bl	8005b24 <__NVIC_SetPriorityGrouping>
}
 8005c8c:	bf00      	nop
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ca6:	f7ff ff61 	bl	8005b6c <__NVIC_GetPriorityGrouping>
 8005caa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	6978      	ldr	r0, [r7, #20]
 8005cb2:	f7ff ffb1 	bl	8005c18 <NVIC_EncodePriority>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff ff80 	bl	8005bc4 <__NVIC_SetPriority>
}
 8005cc4:	bf00      	nop
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff ff54 	bl	8005b88 <__NVIC_EnableIRQ>
}
 8005ce0:	bf00      	nop
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e00e      	b.n	8005d18 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	795b      	ldrb	r3, [r3, #5]
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d105      	bne.n	8005d10 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fb fbd8 	bl	80014c0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b089      	sub	sp, #36	; 0x24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d36:	2300      	movs	r3, #0
 8005d38:	61fb      	str	r3, [r7, #28]
 8005d3a:	e159      	b.n	8005ff0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	f040 8148 	bne.w	8005fea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d00b      	beq.n	8005d7a <HAL_GPIO_Init+0x5a>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d007      	beq.n	8005d7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d6e:	2b11      	cmp	r3, #17
 8005d70:	d003      	beq.n	8005d7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b12      	cmp	r3, #18
 8005d78:	d130      	bne.n	8005ddc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	2203      	movs	r2, #3
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	43db      	mvns	r3, r3
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005db0:	2201      	movs	r2, #1
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	43db      	mvns	r3, r3
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	091b      	lsrs	r3, r3, #4
 8005dc6:	f003 0201 	and.w	r2, r3, #1
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	2203      	movs	r2, #3
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	43db      	mvns	r3, r3
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	4013      	ands	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d003      	beq.n	8005e1c <HAL_GPIO_Init+0xfc>
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2b12      	cmp	r3, #18
 8005e1a:	d123      	bne.n	8005e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	08da      	lsrs	r2, r3, #3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3208      	adds	r2, #8
 8005e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	220f      	movs	r2, #15
 8005e34:	fa02 f303 	lsl.w	r3, r2, r3
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	08da      	lsrs	r2, r3, #3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3208      	adds	r2, #8
 8005e5e:	69b9      	ldr	r1, [r7, #24]
 8005e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	2203      	movs	r2, #3
 8005e70:	fa02 f303 	lsl.w	r3, r2, r3
 8005e74:	43db      	mvns	r3, r3
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f003 0203 	and.w	r2, r3, #3
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 80a2 	beq.w	8005fea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	4b56      	ldr	r3, [pc, #344]	; (8006004 <HAL_GPIO_Init+0x2e4>)
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	4a55      	ldr	r2, [pc, #340]	; (8006004 <HAL_GPIO_Init+0x2e4>)
 8005eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8005eb6:	4b53      	ldr	r3, [pc, #332]	; (8006004 <HAL_GPIO_Init+0x2e4>)
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ec2:	4a51      	ldr	r2, [pc, #324]	; (8006008 <HAL_GPIO_Init+0x2e8>)
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	089b      	lsrs	r3, r3, #2
 8005ec8:	3302      	adds	r3, #2
 8005eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	220f      	movs	r2, #15
 8005eda:	fa02 f303 	lsl.w	r3, r2, r3
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a48      	ldr	r2, [pc, #288]	; (800600c <HAL_GPIO_Init+0x2ec>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d019      	beq.n	8005f22 <HAL_GPIO_Init+0x202>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a47      	ldr	r2, [pc, #284]	; (8006010 <HAL_GPIO_Init+0x2f0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d013      	beq.n	8005f1e <HAL_GPIO_Init+0x1fe>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a46      	ldr	r2, [pc, #280]	; (8006014 <HAL_GPIO_Init+0x2f4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00d      	beq.n	8005f1a <HAL_GPIO_Init+0x1fa>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a45      	ldr	r2, [pc, #276]	; (8006018 <HAL_GPIO_Init+0x2f8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d007      	beq.n	8005f16 <HAL_GPIO_Init+0x1f6>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a44      	ldr	r2, [pc, #272]	; (800601c <HAL_GPIO_Init+0x2fc>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d101      	bne.n	8005f12 <HAL_GPIO_Init+0x1f2>
 8005f0e:	2304      	movs	r3, #4
 8005f10:	e008      	b.n	8005f24 <HAL_GPIO_Init+0x204>
 8005f12:	2307      	movs	r3, #7
 8005f14:	e006      	b.n	8005f24 <HAL_GPIO_Init+0x204>
 8005f16:	2303      	movs	r3, #3
 8005f18:	e004      	b.n	8005f24 <HAL_GPIO_Init+0x204>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e002      	b.n	8005f24 <HAL_GPIO_Init+0x204>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <HAL_GPIO_Init+0x204>
 8005f22:	2300      	movs	r3, #0
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	f002 0203 	and.w	r2, r2, #3
 8005f2a:	0092      	lsls	r2, r2, #2
 8005f2c:	4093      	lsls	r3, r2
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f34:	4934      	ldr	r1, [pc, #208]	; (8006008 <HAL_GPIO_Init+0x2e8>)
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	089b      	lsrs	r3, r3, #2
 8005f3a:	3302      	adds	r3, #2
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f42:	4b37      	ldr	r3, [pc, #220]	; (8006020 <HAL_GPIO_Init+0x300>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	43db      	mvns	r3, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f66:	4a2e      	ldr	r2, [pc, #184]	; (8006020 <HAL_GPIO_Init+0x300>)
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005f6c:	4b2c      	ldr	r3, [pc, #176]	; (8006020 <HAL_GPIO_Init+0x300>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	43db      	mvns	r3, r3
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f90:	4a23      	ldr	r2, [pc, #140]	; (8006020 <HAL_GPIO_Init+0x300>)
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f96:	4b22      	ldr	r3, [pc, #136]	; (8006020 <HAL_GPIO_Init+0x300>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	43db      	mvns	r3, r3
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005fba:	4a19      	ldr	r2, [pc, #100]	; (8006020 <HAL_GPIO_Init+0x300>)
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005fc0:	4b17      	ldr	r3, [pc, #92]	; (8006020 <HAL_GPIO_Init+0x300>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	43db      	mvns	r3, r3
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fe4:	4a0e      	ldr	r2, [pc, #56]	; (8006020 <HAL_GPIO_Init+0x300>)
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	3301      	adds	r3, #1
 8005fee:	61fb      	str	r3, [r7, #28]
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	2b0f      	cmp	r3, #15
 8005ff4:	f67f aea2 	bls.w	8005d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ff8:	bf00      	nop
 8005ffa:	3724      	adds	r7, #36	; 0x24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	40023800 	.word	0x40023800
 8006008:	40013800 	.word	0x40013800
 800600c:	40020000 	.word	0x40020000
 8006010:	40020400 	.word	0x40020400
 8006014:	40020800 	.word	0x40020800
 8006018:	40020c00 	.word	0x40020c00
 800601c:	40021000 	.word	0x40021000
 8006020:	40013c00 	.word	0x40013c00

08006024 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800602e:	2300      	movs	r3, #0
 8006030:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006036:	2300      	movs	r3, #0
 8006038:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	e0bb      	b.n	80061b8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006040:	2201      	movs	r2, #1
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	fa02 f303 	lsl.w	r3, r2, r3
 8006048:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	4013      	ands	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	429a      	cmp	r2, r3
 8006058:	f040 80ab 	bne.w	80061b2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800605c:	4a5b      	ldr	r2, [pc, #364]	; (80061cc <HAL_GPIO_DeInit+0x1a8>)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	089b      	lsrs	r3, r3, #2
 8006062:	3302      	adds	r3, #2
 8006064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006068:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f003 0303 	and.w	r3, r3, #3
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	220f      	movs	r2, #15
 8006074:	fa02 f303 	lsl.w	r3, r2, r3
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	4013      	ands	r3, r2
 800607c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a53      	ldr	r2, [pc, #332]	; (80061d0 <HAL_GPIO_DeInit+0x1ac>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d019      	beq.n	80060ba <HAL_GPIO_DeInit+0x96>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a52      	ldr	r2, [pc, #328]	; (80061d4 <HAL_GPIO_DeInit+0x1b0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d013      	beq.n	80060b6 <HAL_GPIO_DeInit+0x92>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a51      	ldr	r2, [pc, #324]	; (80061d8 <HAL_GPIO_DeInit+0x1b4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00d      	beq.n	80060b2 <HAL_GPIO_DeInit+0x8e>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a50      	ldr	r2, [pc, #320]	; (80061dc <HAL_GPIO_DeInit+0x1b8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d007      	beq.n	80060ae <HAL_GPIO_DeInit+0x8a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a4f      	ldr	r2, [pc, #316]	; (80061e0 <HAL_GPIO_DeInit+0x1bc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d101      	bne.n	80060aa <HAL_GPIO_DeInit+0x86>
 80060a6:	2304      	movs	r3, #4
 80060a8:	e008      	b.n	80060bc <HAL_GPIO_DeInit+0x98>
 80060aa:	2307      	movs	r3, #7
 80060ac:	e006      	b.n	80060bc <HAL_GPIO_DeInit+0x98>
 80060ae:	2303      	movs	r3, #3
 80060b0:	e004      	b.n	80060bc <HAL_GPIO_DeInit+0x98>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e002      	b.n	80060bc <HAL_GPIO_DeInit+0x98>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <HAL_GPIO_DeInit+0x98>
 80060ba:	2300      	movs	r3, #0
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	f002 0203 	and.w	r2, r2, #3
 80060c2:	0092      	lsls	r2, r2, #2
 80060c4:	4093      	lsls	r3, r2
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d132      	bne.n	8006132 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80060cc:	4b45      	ldr	r3, [pc, #276]	; (80061e4 <HAL_GPIO_DeInit+0x1c0>)
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	43db      	mvns	r3, r3
 80060d4:	4943      	ldr	r1, [pc, #268]	; (80061e4 <HAL_GPIO_DeInit+0x1c0>)
 80060d6:	4013      	ands	r3, r2
 80060d8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80060da:	4b42      	ldr	r3, [pc, #264]	; (80061e4 <HAL_GPIO_DeInit+0x1c0>)
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	43db      	mvns	r3, r3
 80060e2:	4940      	ldr	r1, [pc, #256]	; (80061e4 <HAL_GPIO_DeInit+0x1c0>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80060e8:	4b3e      	ldr	r3, [pc, #248]	; (80061e4 <HAL_GPIO_DeInit+0x1c0>)
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	43db      	mvns	r3, r3
 80060f0:	493c      	ldr	r1, [pc, #240]	; (80061e4 <HAL_GPIO_DeInit+0x1c0>)
 80060f2:	4013      	ands	r3, r2
 80060f4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80060f6:	4b3b      	ldr	r3, [pc, #236]	; (80061e4 <HAL_GPIO_DeInit+0x1c0>)
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	43db      	mvns	r3, r3
 80060fe:	4939      	ldr	r1, [pc, #228]	; (80061e4 <HAL_GPIO_DeInit+0x1c0>)
 8006100:	4013      	ands	r3, r2
 8006102:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	220f      	movs	r2, #15
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006114:	4a2d      	ldr	r2, [pc, #180]	; (80061cc <HAL_GPIO_DeInit+0x1a8>)
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	089b      	lsrs	r3, r3, #2
 800611a:	3302      	adds	r3, #2
 800611c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	43da      	mvns	r2, r3
 8006124:	4829      	ldr	r0, [pc, #164]	; (80061cc <HAL_GPIO_DeInit+0x1a8>)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	089b      	lsrs	r3, r3, #2
 800612a:	400a      	ands	r2, r1
 800612c:	3302      	adds	r3, #2
 800612e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	2103      	movs	r1, #3
 800613c:	fa01 f303 	lsl.w	r3, r1, r3
 8006140:	43db      	mvns	r3, r3
 8006142:	401a      	ands	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	08da      	lsrs	r2, r3, #3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3208      	adds	r2, #8
 8006150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	220f      	movs	r2, #15
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	43db      	mvns	r3, r3
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	08d2      	lsrs	r2, r2, #3
 8006168:	4019      	ands	r1, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3208      	adds	r2, #8
 800616e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	2103      	movs	r1, #3
 800617c:	fa01 f303 	lsl.w	r3, r1, r3
 8006180:	43db      	mvns	r3, r3
 8006182:	401a      	ands	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	2101      	movs	r1, #1
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	fa01 f303 	lsl.w	r3, r1, r3
 8006194:	43db      	mvns	r3, r3
 8006196:	401a      	ands	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	2103      	movs	r1, #3
 80061a6:	fa01 f303 	lsl.w	r3, r1, r3
 80061aa:	43db      	mvns	r3, r3
 80061ac:	401a      	ands	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	3301      	adds	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2b0f      	cmp	r3, #15
 80061bc:	f67f af40 	bls.w	8006040 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80061c0:	bf00      	nop
 80061c2:	371c      	adds	r7, #28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	40013800 	.word	0x40013800
 80061d0:	40020000 	.word	0x40020000
 80061d4:	40020400 	.word	0x40020400
 80061d8:	40020800 	.word	0x40020800
 80061dc:	40020c00 	.word	0x40020c00
 80061e0:	40021000 	.word	0x40021000
 80061e4:	40013c00 	.word	0x40013c00

080061e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	807b      	strh	r3, [r7, #2]
 80061f4:	4613      	mov	r3, r2
 80061f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061f8:	787b      	ldrb	r3, [r7, #1]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061fe:	887a      	ldrh	r2, [r7, #2]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006204:	e003      	b.n	800620e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006206:	887b      	ldrh	r3, [r7, #2]
 8006208:	041a      	lsls	r2, r3, #16
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	619a      	str	r2, [r3, #24]
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
	...

0800621c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e11f      	b.n	800646e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f951 	bl	80064ea <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2224      	movs	r2, #36	; 0x24
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0201 	bic.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800626e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800627e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006280:	f001 fc18 	bl	8007ab4 <HAL_RCC_GetPCLK1Freq>
 8006284:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	4a7b      	ldr	r2, [pc, #492]	; (8006478 <HAL_I2C_Init+0x25c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d807      	bhi.n	80062a0 <HAL_I2C_Init+0x84>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4a7a      	ldr	r2, [pc, #488]	; (800647c <HAL_I2C_Init+0x260>)
 8006294:	4293      	cmp	r3, r2
 8006296:	bf94      	ite	ls
 8006298:	2301      	movls	r3, #1
 800629a:	2300      	movhi	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	e006      	b.n	80062ae <HAL_I2C_Init+0x92>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4a77      	ldr	r2, [pc, #476]	; (8006480 <HAL_I2C_Init+0x264>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	bf94      	ite	ls
 80062a8:	2301      	movls	r3, #1
 80062aa:	2300      	movhi	r3, #0
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e0db      	b.n	800646e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4a72      	ldr	r2, [pc, #456]	; (8006484 <HAL_I2C_Init+0x268>)
 80062ba:	fba2 2303 	umull	r2, r3, r2, r3
 80062be:	0c9b      	lsrs	r3, r3, #18
 80062c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	4a64      	ldr	r2, [pc, #400]	; (8006478 <HAL_I2C_Init+0x25c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d802      	bhi.n	80062f0 <HAL_I2C_Init+0xd4>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	3301      	adds	r3, #1
 80062ee:	e009      	b.n	8006304 <HAL_I2C_Init+0xe8>
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80062f6:	fb02 f303 	mul.w	r3, r2, r3
 80062fa:	4a63      	ldr	r2, [pc, #396]	; (8006488 <HAL_I2C_Init+0x26c>)
 80062fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006300:	099b      	lsrs	r3, r3, #6
 8006302:	3301      	adds	r3, #1
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6812      	ldr	r2, [r2, #0]
 8006308:	430b      	orrs	r3, r1
 800630a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006316:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	4956      	ldr	r1, [pc, #344]	; (8006478 <HAL_I2C_Init+0x25c>)
 8006320:	428b      	cmp	r3, r1
 8006322:	d80d      	bhi.n	8006340 <HAL_I2C_Init+0x124>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	1e59      	subs	r1, r3, #1
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006332:	3301      	adds	r3, #1
 8006334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006338:	2b04      	cmp	r3, #4
 800633a:	bf38      	it	cc
 800633c:	2304      	movcc	r3, #4
 800633e:	e04f      	b.n	80063e0 <HAL_I2C_Init+0x1c4>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d111      	bne.n	800636c <HAL_I2C_Init+0x150>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	1e58      	subs	r0, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6859      	ldr	r1, [r3, #4]
 8006350:	460b      	mov	r3, r1
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	440b      	add	r3, r1
 8006356:	fbb0 f3f3 	udiv	r3, r0, r3
 800635a:	3301      	adds	r3, #1
 800635c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006360:	2b00      	cmp	r3, #0
 8006362:	bf0c      	ite	eq
 8006364:	2301      	moveq	r3, #1
 8006366:	2300      	movne	r3, #0
 8006368:	b2db      	uxtb	r3, r3
 800636a:	e012      	b.n	8006392 <HAL_I2C_Init+0x176>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	1e58      	subs	r0, r3, #1
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6859      	ldr	r1, [r3, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	440b      	add	r3, r1
 800637a:	0099      	lsls	r1, r3, #2
 800637c:	440b      	add	r3, r1
 800637e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006382:	3301      	adds	r3, #1
 8006384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006388:	2b00      	cmp	r3, #0
 800638a:	bf0c      	ite	eq
 800638c:	2301      	moveq	r3, #1
 800638e:	2300      	movne	r3, #0
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <HAL_I2C_Init+0x17e>
 8006396:	2301      	movs	r3, #1
 8006398:	e022      	b.n	80063e0 <HAL_I2C_Init+0x1c4>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10e      	bne.n	80063c0 <HAL_I2C_Init+0x1a4>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	1e58      	subs	r0, r3, #1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6859      	ldr	r1, [r3, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	440b      	add	r3, r1
 80063b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80063b4:	3301      	adds	r3, #1
 80063b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063be:	e00f      	b.n	80063e0 <HAL_I2C_Init+0x1c4>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	1e58      	subs	r0, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6859      	ldr	r1, [r3, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	440b      	add	r3, r1
 80063ce:	0099      	lsls	r1, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80063d6:	3301      	adds	r3, #1
 80063d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063e0:	6879      	ldr	r1, [r7, #4]
 80063e2:	6809      	ldr	r1, [r1, #0]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69da      	ldr	r2, [r3, #28]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800640e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6911      	ldr	r1, [r2, #16]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	68d2      	ldr	r2, [r2, #12]
 800641a:	4311      	orrs	r1, r2
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6812      	ldr	r2, [r2, #0]
 8006420:	430b      	orrs	r3, r1
 8006422:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	695a      	ldr	r2, [r3, #20]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0201 	orr.w	r2, r2, #1
 800644e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	000186a0 	.word	0x000186a0
 800647c:	001e847f 	.word	0x001e847f
 8006480:	003d08ff 	.word	0x003d08ff
 8006484:	431bde83 	.word	0x431bde83
 8006488:	10624dd3 	.word	0x10624dd3

0800648c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e021      	b.n	80064e2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2224      	movs	r2, #36	; 0x24
 80064a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 0201 	bic.w	r2, r2, #1
 80064b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f821 	bl	80064fe <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
	...

08006514 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af02      	add	r7, sp, #8
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	4608      	mov	r0, r1
 800651e:	4611      	mov	r1, r2
 8006520:	461a      	mov	r2, r3
 8006522:	4603      	mov	r3, r0
 8006524:	817b      	strh	r3, [r7, #10]
 8006526:	460b      	mov	r3, r1
 8006528:	813b      	strh	r3, [r7, #8]
 800652a:	4613      	mov	r3, r2
 800652c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800652e:	f7ff faed 	bl	8005b0c <HAL_GetTick>
 8006532:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b20      	cmp	r3, #32
 800653e:	f040 80d9 	bne.w	80066f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	2319      	movs	r3, #25
 8006548:	2201      	movs	r2, #1
 800654a:	496d      	ldr	r1, [pc, #436]	; (8006700 <HAL_I2C_Mem_Write+0x1ec>)
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 fc99 	bl	8006e84 <I2C_WaitOnFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006558:	2302      	movs	r3, #2
 800655a:	e0cc      	b.n	80066f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006562:	2b01      	cmp	r3, #1
 8006564:	d101      	bne.n	800656a <HAL_I2C_Mem_Write+0x56>
 8006566:	2302      	movs	r3, #2
 8006568:	e0c5      	b.n	80066f6 <HAL_I2C_Mem_Write+0x1e2>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b01      	cmp	r3, #1
 800657e:	d007      	beq.n	8006590 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f042 0201 	orr.w	r2, r2, #1
 800658e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800659e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2221      	movs	r2, #33	; 0x21
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2240      	movs	r2, #64	; 0x40
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6a3a      	ldr	r2, [r7, #32]
 80065ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4a4d      	ldr	r2, [pc, #308]	; (8006704 <HAL_I2C_Mem_Write+0x1f0>)
 80065d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065d2:	88f8      	ldrh	r0, [r7, #6]
 80065d4:	893a      	ldrh	r2, [r7, #8]
 80065d6:	8979      	ldrh	r1, [r7, #10]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	9301      	str	r3, [sp, #4]
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	4603      	mov	r3, r0
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 fad0 	bl	8006b88 <I2C_RequestMemoryWrite>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d052      	beq.n	8006694 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e081      	b.n	80066f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 fd1a 	bl	8007030 <I2C_WaitOnTXEFlagUntilTimeout>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00d      	beq.n	800661e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	2b04      	cmp	r3, #4
 8006608:	d107      	bne.n	800661a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006618:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e06b      	b.n	80066f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	781a      	ldrb	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b04      	cmp	r3, #4
 800665a:	d11b      	bne.n	8006694 <HAL_I2C_Mem_Write+0x180>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006660:	2b00      	cmp	r3, #0
 8006662:	d017      	beq.n	8006694 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	781a      	ldrb	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800667e:	3b01      	subs	r3, #1
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668a:	b29b      	uxth	r3, r3
 800668c:	3b01      	subs	r3, #1
 800668e:	b29a      	uxth	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1aa      	bne.n	80065f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 fd06 	bl	80070b2 <I2C_WaitOnBTFFlagUntilTimeout>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00d      	beq.n	80066c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d107      	bne.n	80066c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e016      	b.n	80066f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	e000      	b.n	80066f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80066f4:	2302      	movs	r3, #2
  }
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	00100002 	.word	0x00100002
 8006704:	ffff0000 	.word	0xffff0000

08006708 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08c      	sub	sp, #48	; 0x30
 800670c:	af02      	add	r7, sp, #8
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	4608      	mov	r0, r1
 8006712:	4611      	mov	r1, r2
 8006714:	461a      	mov	r2, r3
 8006716:	4603      	mov	r3, r0
 8006718:	817b      	strh	r3, [r7, #10]
 800671a:	460b      	mov	r3, r1
 800671c:	813b      	strh	r3, [r7, #8]
 800671e:	4613      	mov	r3, r2
 8006720:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006722:	f7ff f9f3 	bl	8005b0c <HAL_GetTick>
 8006726:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b20      	cmp	r3, #32
 8006732:	f040 8208 	bne.w	8006b46 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	2319      	movs	r3, #25
 800673c:	2201      	movs	r2, #1
 800673e:	497b      	ldr	r1, [pc, #492]	; (800692c <HAL_I2C_Mem_Read+0x224>)
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 fb9f 	bl	8006e84 <I2C_WaitOnFlagUntilTimeout>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800674c:	2302      	movs	r3, #2
 800674e:	e1fb      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006756:	2b01      	cmp	r3, #1
 8006758:	d101      	bne.n	800675e <HAL_I2C_Mem_Read+0x56>
 800675a:	2302      	movs	r3, #2
 800675c:	e1f4      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b01      	cmp	r3, #1
 8006772:	d007      	beq.n	8006784 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0201 	orr.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006792:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2222      	movs	r2, #34	; 0x22
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2240      	movs	r2, #64	; 0x40
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80067b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4a5b      	ldr	r2, [pc, #364]	; (8006930 <HAL_I2C_Mem_Read+0x228>)
 80067c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067c6:	88f8      	ldrh	r0, [r7, #6]
 80067c8:	893a      	ldrh	r2, [r7, #8]
 80067ca:	8979      	ldrh	r1, [r7, #10]
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	9301      	str	r3, [sp, #4]
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	4603      	mov	r3, r0
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 fa6c 	bl	8006cb4 <I2C_RequestMemoryRead>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e1b0      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d113      	bne.n	8006816 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ee:	2300      	movs	r3, #0
 80067f0:	623b      	str	r3, [r7, #32]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	623b      	str	r3, [r7, #32]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	623b      	str	r3, [r7, #32]
 8006802:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	e184      	b.n	8006b20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681a:	2b01      	cmp	r3, #1
 800681c:	d11b      	bne.n	8006856 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800682c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800682e:	2300      	movs	r3, #0
 8006830:	61fb      	str	r3, [r7, #28]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	61fb      	str	r3, [r7, #28]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	61fb      	str	r3, [r7, #28]
 8006842:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	e164      	b.n	8006b20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685a:	2b02      	cmp	r3, #2
 800685c:	d11b      	bne.n	8006896 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800686c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800687c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800687e:	2300      	movs	r3, #0
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	61bb      	str	r3, [r7, #24]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	e144      	b.n	8006b20 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	617b      	str	r3, [r7, #20]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80068ac:	e138      	b.n	8006b20 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	f200 80f1 	bhi.w	8006a9a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d123      	bne.n	8006908 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 fc35 	bl	8007134 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e139      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691a      	ldr	r2, [r3, #16]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006906:	e10b      	b.n	8006b20 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800690c:	2b02      	cmp	r3, #2
 800690e:	d14e      	bne.n	80069ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	2200      	movs	r2, #0
 8006918:	4906      	ldr	r1, [pc, #24]	; (8006934 <HAL_I2C_Mem_Read+0x22c>)
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 fab2 	bl	8006e84 <I2C_WaitOnFlagUntilTimeout>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d008      	beq.n	8006938 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e10e      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
 800692a:	bf00      	nop
 800692c:	00100002 	.word	0x00100002
 8006930:	ffff0000 	.word	0xffff0000
 8006934:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006946:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691a      	ldr	r2, [r3, #16]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006964:	3b01      	subs	r3, #1
 8006966:	b29a      	uxth	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	691a      	ldr	r2, [r3, #16]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	3b01      	subs	r3, #1
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069ac:	e0b8      	b.n	8006b20 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b4:	2200      	movs	r2, #0
 80069b6:	4966      	ldr	r1, [pc, #408]	; (8006b50 <HAL_I2C_Mem_Read+0x448>)
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fa63 	bl	8006e84 <I2C_WaitOnFlagUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e0bf      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691a      	ldr	r2, [r3, #16]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	b2d2      	uxtb	r2, r2
 80069e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	3b01      	subs	r3, #1
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a10:	2200      	movs	r2, #0
 8006a12:	494f      	ldr	r1, [pc, #316]	; (8006b50 <HAL_I2C_Mem_Read+0x448>)
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 fa35 	bl	8006e84 <I2C_WaitOnFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e091      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	691a      	ldr	r2, [r3, #16]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a50:	3b01      	subs	r3, #1
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	691a      	ldr	r2, [r3, #16]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a98:	e042      	b.n	8006b20 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fb48 	bl	8007134 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e04c      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aca:	3b01      	subs	r3, #1
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f003 0304 	and.w	r3, r3, #4
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d118      	bne.n	8006b20 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	1c5a      	adds	r2, r3, #1
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f47f aec2 	bne.w	80068ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	e000      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006b46:	2302      	movs	r3, #2
  }
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3728      	adds	r7, #40	; 0x28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	00010004 	.word	0x00010004

08006b54 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b62:	b2db      	uxtb	r3, r3
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	4608      	mov	r0, r1
 8006b92:	4611      	mov	r1, r2
 8006b94:	461a      	mov	r2, r3
 8006b96:	4603      	mov	r3, r0
 8006b98:	817b      	strh	r3, [r7, #10]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	813b      	strh	r3, [r7, #8]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 f960 	bl	8006e84 <I2C_WaitOnFlagUntilTimeout>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00d      	beq.n	8006be6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd8:	d103      	bne.n	8006be2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006be0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e05f      	b.n	8006ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006be6:	897b      	ldrh	r3, [r7, #10]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	461a      	mov	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bf4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	6a3a      	ldr	r2, [r7, #32]
 8006bfa:	492d      	ldr	r1, [pc, #180]	; (8006cb0 <I2C_RequestMemoryWrite+0x128>)
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 f998 	bl	8006f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e04c      	b.n	8006ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c24:	6a39      	ldr	r1, [r7, #32]
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 fa02 	bl	8007030 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00d      	beq.n	8006c4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d107      	bne.n	8006c4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e02b      	b.n	8006ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c4e:	88fb      	ldrh	r3, [r7, #6]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d105      	bne.n	8006c60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c54:	893b      	ldrh	r3, [r7, #8]
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	611a      	str	r2, [r3, #16]
 8006c5e:	e021      	b.n	8006ca4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c60:	893b      	ldrh	r3, [r7, #8]
 8006c62:	0a1b      	lsrs	r3, r3, #8
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c70:	6a39      	ldr	r1, [r7, #32]
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 f9dc 	bl	8007030 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00d      	beq.n	8006c9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	d107      	bne.n	8006c96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e005      	b.n	8006ca6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c9a:	893b      	ldrh	r3, [r7, #8]
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	00010002 	.word	0x00010002

08006cb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b088      	sub	sp, #32
 8006cb8:	af02      	add	r7, sp, #8
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	4608      	mov	r0, r1
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	817b      	strh	r3, [r7, #10]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	813b      	strh	r3, [r7, #8]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cdc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 f8c2 	bl	8006e84 <I2C_WaitOnFlagUntilTimeout>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00d      	beq.n	8006d22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d14:	d103      	bne.n	8006d1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e0aa      	b.n	8006e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d22:	897b      	ldrh	r3, [r7, #10]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	461a      	mov	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	6a3a      	ldr	r2, [r7, #32]
 8006d36:	4952      	ldr	r1, [pc, #328]	; (8006e80 <I2C_RequestMemoryRead+0x1cc>)
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f8fa 	bl	8006f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e097      	b.n	8006e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d48:	2300      	movs	r3, #0
 8006d4a:	617b      	str	r3, [r7, #20]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d60:	6a39      	ldr	r1, [r7, #32]
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 f964 	bl	8007030 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00d      	beq.n	8006d8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d107      	bne.n	8006d86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e076      	b.n	8006e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d8a:	88fb      	ldrh	r3, [r7, #6]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d105      	bne.n	8006d9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d90:	893b      	ldrh	r3, [r7, #8]
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	611a      	str	r2, [r3, #16]
 8006d9a:	e021      	b.n	8006de0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d9c:	893b      	ldrh	r3, [r7, #8]
 8006d9e:	0a1b      	lsrs	r3, r3, #8
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dac:	6a39      	ldr	r1, [r7, #32]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 f93e 	bl	8007030 <I2C_WaitOnTXEFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00d      	beq.n	8006dd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d107      	bne.n	8006dd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e050      	b.n	8006e78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006dd6:	893b      	ldrh	r3, [r7, #8]
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de2:	6a39      	ldr	r1, [r7, #32]
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 f923 	bl	8007030 <I2C_WaitOnTXEFlagUntilTimeout>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00d      	beq.n	8006e0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d107      	bne.n	8006e08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e035      	b.n	8006e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 f82b 	bl	8006e84 <I2C_WaitOnFlagUntilTimeout>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00d      	beq.n	8006e50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e42:	d103      	bne.n	8006e4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e013      	b.n	8006e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e50:	897b      	ldrh	r3, [r7, #10]
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	f043 0301 	orr.w	r3, r3, #1
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	6a3a      	ldr	r2, [r7, #32]
 8006e64:	4906      	ldr	r1, [pc, #24]	; (8006e80 <I2C_RequestMemoryRead+0x1cc>)
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 f863 	bl	8006f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e000      	b.n	8006e78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3718      	adds	r7, #24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	00010002 	.word	0x00010002

08006e84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	603b      	str	r3, [r7, #0]
 8006e90:	4613      	mov	r3, r2
 8006e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e94:	e025      	b.n	8006ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9c:	d021      	beq.n	8006ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e9e:	f7fe fe35 	bl	8005b0c <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d302      	bcc.n	8006eb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d116      	bne.n	8006ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2220      	movs	r2, #32
 8006ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	f043 0220 	orr.w	r2, r3, #32
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e023      	b.n	8006f2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	0c1b      	lsrs	r3, r3, #16
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d10d      	bne.n	8006f08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	43da      	mvns	r2, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bf0c      	ite	eq
 8006efe:	2301      	moveq	r3, #1
 8006f00:	2300      	movne	r3, #0
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	e00c      	b.n	8006f22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	43da      	mvns	r2, r3
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4013      	ands	r3, r2
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bf0c      	ite	eq
 8006f1a:	2301      	moveq	r3, #1
 8006f1c:	2300      	movne	r3, #0
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	461a      	mov	r2, r3
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d0b6      	beq.n	8006e96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	607a      	str	r2, [r7, #4]
 8006f3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f40:	e051      	b.n	8006fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f50:	d123      	bne.n	8006f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	f043 0204 	orr.w	r2, r3, #4
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e046      	b.n	8007028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa0:	d021      	beq.n	8006fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fa2:	f7fe fdb3 	bl	8005b0c <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d302      	bcc.n	8006fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d116      	bne.n	8006fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f043 0220 	orr.w	r2, r3, #32
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e020      	b.n	8007028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	0c1b      	lsrs	r3, r3, #16
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d10c      	bne.n	800700a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	43da      	mvns	r2, r3
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	bf14      	ite	ne
 8007002:	2301      	movne	r3, #1
 8007004:	2300      	moveq	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	e00b      	b.n	8007022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	43da      	mvns	r2, r3
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	4013      	ands	r3, r2
 8007016:	b29b      	uxth	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	bf14      	ite	ne
 800701c:	2301      	movne	r3, #1
 800701e:	2300      	moveq	r3, #0
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d18d      	bne.n	8006f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800703c:	e02d      	b.n	800709a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 f8ce 	bl	80071e0 <I2C_IsAcknowledgeFailed>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e02d      	b.n	80070aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007054:	d021      	beq.n	800709a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007056:	f7fe fd59 	bl	8005b0c <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	429a      	cmp	r2, r3
 8007064:	d302      	bcc.n	800706c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d116      	bne.n	800709a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2220      	movs	r2, #32
 8007076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	f043 0220 	orr.w	r2, r3, #32
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e007      	b.n	80070aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a4:	2b80      	cmp	r3, #128	; 0x80
 80070a6:	d1ca      	bne.n	800703e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070be:	e02d      	b.n	800711c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 f88d 	bl	80071e0 <I2C_IsAcknowledgeFailed>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e02d      	b.n	800712c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d6:	d021      	beq.n	800711c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070d8:	f7fe fd18 	bl	8005b0c <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d302      	bcc.n	80070ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d116      	bne.n	800711c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007108:	f043 0220 	orr.w	r2, r3, #32
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e007      	b.n	800712c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	f003 0304 	and.w	r3, r3, #4
 8007126:	2b04      	cmp	r3, #4
 8007128:	d1ca      	bne.n	80070c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007140:	e042      	b.n	80071c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	f003 0310 	and.w	r3, r3, #16
 800714c:	2b10      	cmp	r3, #16
 800714e:	d119      	bne.n	8007184 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f06f 0210 	mvn.w	r2, #16
 8007158:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2220      	movs	r2, #32
 8007164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e029      	b.n	80071d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007184:	f7fe fcc2 	bl	8005b0c <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	429a      	cmp	r2, r3
 8007192:	d302      	bcc.n	800719a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d116      	bne.n	80071c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b4:	f043 0220 	orr.w	r2, r3, #32
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e007      	b.n	80071d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d2:	2b40      	cmp	r3, #64	; 0x40
 80071d4:	d1b5      	bne.n	8007142 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f6:	d11b      	bne.n	8007230 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007200:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721c:	f043 0204 	orr.w	r2, r3, #4
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e000      	b.n	8007232 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
	...

08007240 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e25b      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d075      	beq.n	800734a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800725e:	4ba3      	ldr	r3, [pc, #652]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f003 030c 	and.w	r3, r3, #12
 8007266:	2b04      	cmp	r3, #4
 8007268:	d00c      	beq.n	8007284 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800726a:	4ba0      	ldr	r3, [pc, #640]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007272:	2b08      	cmp	r3, #8
 8007274:	d112      	bne.n	800729c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007276:	4b9d      	ldr	r3, [pc, #628]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800727e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007282:	d10b      	bne.n	800729c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007284:	4b99      	ldr	r3, [pc, #612]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d05b      	beq.n	8007348 <HAL_RCC_OscConfig+0x108>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d157      	bne.n	8007348 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e236      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a4:	d106      	bne.n	80072b4 <HAL_RCC_OscConfig+0x74>
 80072a6:	4b91      	ldr	r3, [pc, #580]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a90      	ldr	r2, [pc, #576]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072b0:	6013      	str	r3, [r2, #0]
 80072b2:	e01d      	b.n	80072f0 <HAL_RCC_OscConfig+0xb0>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072bc:	d10c      	bne.n	80072d8 <HAL_RCC_OscConfig+0x98>
 80072be:	4b8b      	ldr	r3, [pc, #556]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a8a      	ldr	r2, [pc, #552]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	4b88      	ldr	r3, [pc, #544]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a87      	ldr	r2, [pc, #540]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	e00b      	b.n	80072f0 <HAL_RCC_OscConfig+0xb0>
 80072d8:	4b84      	ldr	r3, [pc, #528]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a83      	ldr	r2, [pc, #524]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072e2:	6013      	str	r3, [r2, #0]
 80072e4:	4b81      	ldr	r3, [pc, #516]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a80      	ldr	r2, [pc, #512]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d013      	beq.n	8007320 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072f8:	f7fe fc08 	bl	8005b0c <HAL_GetTick>
 80072fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072fe:	e008      	b.n	8007312 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007300:	f7fe fc04 	bl	8005b0c <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	2b64      	cmp	r3, #100	; 0x64
 800730c:	d901      	bls.n	8007312 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e1fb      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007312:	4b76      	ldr	r3, [pc, #472]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0f0      	beq.n	8007300 <HAL_RCC_OscConfig+0xc0>
 800731e:	e014      	b.n	800734a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007320:	f7fe fbf4 	bl	8005b0c <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007328:	f7fe fbf0 	bl	8005b0c <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b64      	cmp	r3, #100	; 0x64
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e1e7      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800733a:	4b6c      	ldr	r3, [pc, #432]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f0      	bne.n	8007328 <HAL_RCC_OscConfig+0xe8>
 8007346:	e000      	b.n	800734a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d063      	beq.n	800741e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007356:	4b65      	ldr	r3, [pc, #404]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f003 030c 	and.w	r3, r3, #12
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00b      	beq.n	800737a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007362:	4b62      	ldr	r3, [pc, #392]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800736a:	2b08      	cmp	r3, #8
 800736c:	d11c      	bne.n	80073a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800736e:	4b5f      	ldr	r3, [pc, #380]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d116      	bne.n	80073a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800737a:	4b5c      	ldr	r3, [pc, #368]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d005      	beq.n	8007392 <HAL_RCC_OscConfig+0x152>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d001      	beq.n	8007392 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e1bb      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007392:	4b56      	ldr	r3, [pc, #344]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	4952      	ldr	r1, [pc, #328]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073a6:	e03a      	b.n	800741e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d020      	beq.n	80073f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073b0:	4b4f      	ldr	r3, [pc, #316]	; (80074f0 <HAL_RCC_OscConfig+0x2b0>)
 80073b2:	2201      	movs	r2, #1
 80073b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b6:	f7fe fba9 	bl	8005b0c <HAL_GetTick>
 80073ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073bc:	e008      	b.n	80073d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073be:	f7fe fba5 	bl	8005b0c <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d901      	bls.n	80073d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e19c      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073d0:	4b46      	ldr	r3, [pc, #280]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0f0      	beq.n	80073be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073dc:	4b43      	ldr	r3, [pc, #268]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	00db      	lsls	r3, r3, #3
 80073ea:	4940      	ldr	r1, [pc, #256]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	600b      	str	r3, [r1, #0]
 80073f0:	e015      	b.n	800741e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073f2:	4b3f      	ldr	r3, [pc, #252]	; (80074f0 <HAL_RCC_OscConfig+0x2b0>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f8:	f7fe fb88 	bl	8005b0c <HAL_GetTick>
 80073fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073fe:	e008      	b.n	8007412 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007400:	f7fe fb84 	bl	8005b0c <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d901      	bls.n	8007412 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e17b      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007412:	4b36      	ldr	r3, [pc, #216]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1f0      	bne.n	8007400 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0308 	and.w	r3, r3, #8
 8007426:	2b00      	cmp	r3, #0
 8007428:	d030      	beq.n	800748c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d016      	beq.n	8007460 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007432:	4b30      	ldr	r3, [pc, #192]	; (80074f4 <HAL_RCC_OscConfig+0x2b4>)
 8007434:	2201      	movs	r2, #1
 8007436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007438:	f7fe fb68 	bl	8005b0c <HAL_GetTick>
 800743c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800743e:	e008      	b.n	8007452 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007440:	f7fe fb64 	bl	8005b0c <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b02      	cmp	r3, #2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e15b      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007452:	4b26      	ldr	r3, [pc, #152]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0f0      	beq.n	8007440 <HAL_RCC_OscConfig+0x200>
 800745e:	e015      	b.n	800748c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007460:	4b24      	ldr	r3, [pc, #144]	; (80074f4 <HAL_RCC_OscConfig+0x2b4>)
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007466:	f7fe fb51 	bl	8005b0c <HAL_GetTick>
 800746a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800746c:	e008      	b.n	8007480 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800746e:	f7fe fb4d 	bl	8005b0c <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d901      	bls.n	8007480 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e144      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007480:	4b1a      	ldr	r3, [pc, #104]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1f0      	bne.n	800746e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 80a0 	beq.w	80075da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800749a:	2300      	movs	r3, #0
 800749c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800749e:	4b13      	ldr	r3, [pc, #76]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10f      	bne.n	80074ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074aa:	2300      	movs	r3, #0
 80074ac:	60bb      	str	r3, [r7, #8]
 80074ae:	4b0f      	ldr	r3, [pc, #60]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	4a0e      	ldr	r2, [pc, #56]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80074b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074b8:	6413      	str	r3, [r2, #64]	; 0x40
 80074ba:	4b0c      	ldr	r3, [pc, #48]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074c2:	60bb      	str	r3, [r7, #8]
 80074c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074c6:	2301      	movs	r3, #1
 80074c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074ca:	4b0b      	ldr	r3, [pc, #44]	; (80074f8 <HAL_RCC_OscConfig+0x2b8>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d121      	bne.n	800751a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074d6:	4b08      	ldr	r3, [pc, #32]	; (80074f8 <HAL_RCC_OscConfig+0x2b8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a07      	ldr	r2, [pc, #28]	; (80074f8 <HAL_RCC_OscConfig+0x2b8>)
 80074dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074e2:	f7fe fb13 	bl	8005b0c <HAL_GetTick>
 80074e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074e8:	e011      	b.n	800750e <HAL_RCC_OscConfig+0x2ce>
 80074ea:	bf00      	nop
 80074ec:	40023800 	.word	0x40023800
 80074f0:	42470000 	.word	0x42470000
 80074f4:	42470e80 	.word	0x42470e80
 80074f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074fc:	f7fe fb06 	bl	8005b0c <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d901      	bls.n	800750e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e0fd      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800750e:	4b81      	ldr	r3, [pc, #516]	; (8007714 <HAL_RCC_OscConfig+0x4d4>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0f0      	beq.n	80074fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d106      	bne.n	8007530 <HAL_RCC_OscConfig+0x2f0>
 8007522:	4b7d      	ldr	r3, [pc, #500]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007526:	4a7c      	ldr	r2, [pc, #496]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007528:	f043 0301 	orr.w	r3, r3, #1
 800752c:	6713      	str	r3, [r2, #112]	; 0x70
 800752e:	e01c      	b.n	800756a <HAL_RCC_OscConfig+0x32a>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	2b05      	cmp	r3, #5
 8007536:	d10c      	bne.n	8007552 <HAL_RCC_OscConfig+0x312>
 8007538:	4b77      	ldr	r3, [pc, #476]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 800753a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753c:	4a76      	ldr	r2, [pc, #472]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 800753e:	f043 0304 	orr.w	r3, r3, #4
 8007542:	6713      	str	r3, [r2, #112]	; 0x70
 8007544:	4b74      	ldr	r3, [pc, #464]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007548:	4a73      	ldr	r2, [pc, #460]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 800754a:	f043 0301 	orr.w	r3, r3, #1
 800754e:	6713      	str	r3, [r2, #112]	; 0x70
 8007550:	e00b      	b.n	800756a <HAL_RCC_OscConfig+0x32a>
 8007552:	4b71      	ldr	r3, [pc, #452]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007556:	4a70      	ldr	r2, [pc, #448]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007558:	f023 0301 	bic.w	r3, r3, #1
 800755c:	6713      	str	r3, [r2, #112]	; 0x70
 800755e:	4b6e      	ldr	r3, [pc, #440]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007562:	4a6d      	ldr	r2, [pc, #436]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007564:	f023 0304 	bic.w	r3, r3, #4
 8007568:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d015      	beq.n	800759e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007572:	f7fe facb 	bl	8005b0c <HAL_GetTick>
 8007576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007578:	e00a      	b.n	8007590 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800757a:	f7fe fac7 	bl	8005b0c <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	f241 3288 	movw	r2, #5000	; 0x1388
 8007588:	4293      	cmp	r3, r2
 800758a:	d901      	bls.n	8007590 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e0bc      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007590:	4b61      	ldr	r3, [pc, #388]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007594:	f003 0302 	and.w	r3, r3, #2
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0ee      	beq.n	800757a <HAL_RCC_OscConfig+0x33a>
 800759c:	e014      	b.n	80075c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800759e:	f7fe fab5 	bl	8005b0c <HAL_GetTick>
 80075a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075a4:	e00a      	b.n	80075bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075a6:	f7fe fab1 	bl	8005b0c <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d901      	bls.n	80075bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e0a6      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075bc:	4b56      	ldr	r3, [pc, #344]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 80075be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1ee      	bne.n	80075a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d105      	bne.n	80075da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075ce:	4b52      	ldr	r3, [pc, #328]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	4a51      	ldr	r2, [pc, #324]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 80075d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 8092 	beq.w	8007708 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075e4:	4b4c      	ldr	r3, [pc, #304]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f003 030c 	and.w	r3, r3, #12
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d05c      	beq.n	80076aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d141      	bne.n	800767c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075f8:	4b48      	ldr	r3, [pc, #288]	; (800771c <HAL_RCC_OscConfig+0x4dc>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075fe:	f7fe fa85 	bl	8005b0c <HAL_GetTick>
 8007602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007604:	e008      	b.n	8007618 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007606:	f7fe fa81 	bl	8005b0c <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	2b02      	cmp	r3, #2
 8007612:	d901      	bls.n	8007618 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e078      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007618:	4b3f      	ldr	r3, [pc, #252]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1f0      	bne.n	8007606 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	69da      	ldr	r2, [r3, #28]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	431a      	orrs	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	019b      	lsls	r3, r3, #6
 8007634:	431a      	orrs	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763a:	085b      	lsrs	r3, r3, #1
 800763c:	3b01      	subs	r3, #1
 800763e:	041b      	lsls	r3, r3, #16
 8007640:	431a      	orrs	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	061b      	lsls	r3, r3, #24
 8007648:	4933      	ldr	r1, [pc, #204]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 800764a:	4313      	orrs	r3, r2
 800764c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800764e:	4b33      	ldr	r3, [pc, #204]	; (800771c <HAL_RCC_OscConfig+0x4dc>)
 8007650:	2201      	movs	r2, #1
 8007652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007654:	f7fe fa5a 	bl	8005b0c <HAL_GetTick>
 8007658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800765c:	f7fe fa56 	bl	8005b0c <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e04d      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800766e:	4b2a      	ldr	r3, [pc, #168]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0f0      	beq.n	800765c <HAL_RCC_OscConfig+0x41c>
 800767a:	e045      	b.n	8007708 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800767c:	4b27      	ldr	r3, [pc, #156]	; (800771c <HAL_RCC_OscConfig+0x4dc>)
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007682:	f7fe fa43 	bl	8005b0c <HAL_GetTick>
 8007686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007688:	e008      	b.n	800769c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800768a:	f7fe fa3f 	bl	8005b0c <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d901      	bls.n	800769c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e036      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800769c:	4b1e      	ldr	r3, [pc, #120]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1f0      	bne.n	800768a <HAL_RCC_OscConfig+0x44a>
 80076a8:	e02e      	b.n	8007708 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d101      	bne.n	80076b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e029      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80076b6:	4b18      	ldr	r3, [pc, #96]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d11c      	bne.n	8007704 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d115      	bne.n	8007704 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076de:	4013      	ands	r3, r2
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d10d      	bne.n	8007704 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d106      	bne.n	8007704 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007700:	429a      	cmp	r2, r3
 8007702:	d001      	beq.n	8007708 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e000      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	40007000 	.word	0x40007000
 8007718:	40023800 	.word	0x40023800
 800771c:	42470060 	.word	0x42470060

08007720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e0cc      	b.n	80078ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007734:	4b68      	ldr	r3, [pc, #416]	; (80078d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 030f 	and.w	r3, r3, #15
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	429a      	cmp	r2, r3
 8007740:	d90c      	bls.n	800775c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007742:	4b65      	ldr	r3, [pc, #404]	; (80078d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	b2d2      	uxtb	r2, r2
 8007748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800774a:	4b63      	ldr	r3, [pc, #396]	; (80078d8 <HAL_RCC_ClockConfig+0x1b8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	429a      	cmp	r2, r3
 8007756:	d001      	beq.n	800775c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e0b8      	b.n	80078ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d020      	beq.n	80077aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0304 	and.w	r3, r3, #4
 8007770:	2b00      	cmp	r3, #0
 8007772:	d005      	beq.n	8007780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007774:	4b59      	ldr	r3, [pc, #356]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	4a58      	ldr	r2, [pc, #352]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 800777a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800777e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0308 	and.w	r3, r3, #8
 8007788:	2b00      	cmp	r3, #0
 800778a:	d005      	beq.n	8007798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800778c:	4b53      	ldr	r3, [pc, #332]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	4a52      	ldr	r2, [pc, #328]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 8007792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007798:	4b50      	ldr	r3, [pc, #320]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	494d      	ldr	r1, [pc, #308]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d044      	beq.n	8007840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d107      	bne.n	80077ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077be:	4b47      	ldr	r3, [pc, #284]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d119      	bne.n	80077fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e07f      	b.n	80078ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d003      	beq.n	80077de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d107      	bne.n	80077ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077de:	4b3f      	ldr	r3, [pc, #252]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d109      	bne.n	80077fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e06f      	b.n	80078ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077ee:	4b3b      	ldr	r3, [pc, #236]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e067      	b.n	80078ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80077fe:	4b37      	ldr	r3, [pc, #220]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f023 0203 	bic.w	r2, r3, #3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	4934      	ldr	r1, [pc, #208]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 800780c:	4313      	orrs	r3, r2
 800780e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007810:	f7fe f97c 	bl	8005b0c <HAL_GetTick>
 8007814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007816:	e00a      	b.n	800782e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007818:	f7fe f978 	bl	8005b0c <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	f241 3288 	movw	r2, #5000	; 0x1388
 8007826:	4293      	cmp	r3, r2
 8007828:	d901      	bls.n	800782e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e04f      	b.n	80078ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800782e:	4b2b      	ldr	r3, [pc, #172]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f003 020c 	and.w	r2, r3, #12
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	429a      	cmp	r2, r3
 800783e:	d1eb      	bne.n	8007818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007840:	4b25      	ldr	r3, [pc, #148]	; (80078d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 030f 	and.w	r3, r3, #15
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	429a      	cmp	r2, r3
 800784c:	d20c      	bcs.n	8007868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800784e:	4b22      	ldr	r3, [pc, #136]	; (80078d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	b2d2      	uxtb	r2, r2
 8007854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007856:	4b20      	ldr	r3, [pc, #128]	; (80078d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 030f 	and.w	r3, r3, #15
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d001      	beq.n	8007868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e032      	b.n	80078ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b00      	cmp	r3, #0
 8007872:	d008      	beq.n	8007886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007874:	4b19      	ldr	r3, [pc, #100]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	4916      	ldr	r1, [pc, #88]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 8007882:	4313      	orrs	r3, r2
 8007884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0308 	and.w	r3, r3, #8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d009      	beq.n	80078a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007892:	4b12      	ldr	r3, [pc, #72]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	00db      	lsls	r3, r3, #3
 80078a0:	490e      	ldr	r1, [pc, #56]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80078a6:	f000 f821 	bl	80078ec <HAL_RCC_GetSysClockFreq>
 80078aa:	4601      	mov	r1, r0
 80078ac:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	091b      	lsrs	r3, r3, #4
 80078b2:	f003 030f 	and.w	r3, r3, #15
 80078b6:	4a0a      	ldr	r2, [pc, #40]	; (80078e0 <HAL_RCC_ClockConfig+0x1c0>)
 80078b8:	5cd3      	ldrb	r3, [r2, r3]
 80078ba:	fa21 f303 	lsr.w	r3, r1, r3
 80078be:	4a09      	ldr	r2, [pc, #36]	; (80078e4 <HAL_RCC_ClockConfig+0x1c4>)
 80078c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80078c2:	4b09      	ldr	r3, [pc, #36]	; (80078e8 <HAL_RCC_ClockConfig+0x1c8>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7f9 fe1c 	bl	8001504 <HAL_InitTick>

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	40023c00 	.word	0x40023c00
 80078dc:	40023800 	.word	0x40023800
 80078e0:	080182bc 	.word	0x080182bc
 80078e4:	20001228 	.word	0x20001228
 80078e8:	200012f4 	.word	0x200012f4

080078ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	607b      	str	r3, [r7, #4]
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	2300      	movs	r3, #0
 80078fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007902:	4b63      	ldr	r3, [pc, #396]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f003 030c 	and.w	r3, r3, #12
 800790a:	2b04      	cmp	r3, #4
 800790c:	d007      	beq.n	800791e <HAL_RCC_GetSysClockFreq+0x32>
 800790e:	2b08      	cmp	r3, #8
 8007910:	d008      	beq.n	8007924 <HAL_RCC_GetSysClockFreq+0x38>
 8007912:	2b00      	cmp	r3, #0
 8007914:	f040 80b4 	bne.w	8007a80 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007918:	4b5e      	ldr	r3, [pc, #376]	; (8007a94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800791a:	60bb      	str	r3, [r7, #8]
       break;
 800791c:	e0b3      	b.n	8007a86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800791e:	4b5e      	ldr	r3, [pc, #376]	; (8007a98 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007920:	60bb      	str	r3, [r7, #8]
      break;
 8007922:	e0b0      	b.n	8007a86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007924:	4b5a      	ldr	r3, [pc, #360]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800792c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800792e:	4b58      	ldr	r3, [pc, #352]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d04a      	beq.n	80079d0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800793a:	4b55      	ldr	r3, [pc, #340]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	099b      	lsrs	r3, r3, #6
 8007940:	f04f 0400 	mov.w	r4, #0
 8007944:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007948:	f04f 0200 	mov.w	r2, #0
 800794c:	ea03 0501 	and.w	r5, r3, r1
 8007950:	ea04 0602 	and.w	r6, r4, r2
 8007954:	4629      	mov	r1, r5
 8007956:	4632      	mov	r2, r6
 8007958:	f04f 0300 	mov.w	r3, #0
 800795c:	f04f 0400 	mov.w	r4, #0
 8007960:	0154      	lsls	r4, r2, #5
 8007962:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007966:	014b      	lsls	r3, r1, #5
 8007968:	4619      	mov	r1, r3
 800796a:	4622      	mov	r2, r4
 800796c:	1b49      	subs	r1, r1, r5
 800796e:	eb62 0206 	sbc.w	r2, r2, r6
 8007972:	f04f 0300 	mov.w	r3, #0
 8007976:	f04f 0400 	mov.w	r4, #0
 800797a:	0194      	lsls	r4, r2, #6
 800797c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007980:	018b      	lsls	r3, r1, #6
 8007982:	1a5b      	subs	r3, r3, r1
 8007984:	eb64 0402 	sbc.w	r4, r4, r2
 8007988:	f04f 0100 	mov.w	r1, #0
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	00e2      	lsls	r2, r4, #3
 8007992:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007996:	00d9      	lsls	r1, r3, #3
 8007998:	460b      	mov	r3, r1
 800799a:	4614      	mov	r4, r2
 800799c:	195b      	adds	r3, r3, r5
 800799e:	eb44 0406 	adc.w	r4, r4, r6
 80079a2:	f04f 0100 	mov.w	r1, #0
 80079a6:	f04f 0200 	mov.w	r2, #0
 80079aa:	0262      	lsls	r2, r4, #9
 80079ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80079b0:	0259      	lsls	r1, r3, #9
 80079b2:	460b      	mov	r3, r1
 80079b4:	4614      	mov	r4, r2
 80079b6:	4618      	mov	r0, r3
 80079b8:	4621      	mov	r1, r4
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f04f 0400 	mov.w	r4, #0
 80079c0:	461a      	mov	r2, r3
 80079c2:	4623      	mov	r3, r4
 80079c4:	f7f9 f948 	bl	8000c58 <__aeabi_uldivmod>
 80079c8:	4603      	mov	r3, r0
 80079ca:	460c      	mov	r4, r1
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	e049      	b.n	8007a64 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079d0:	4b2f      	ldr	r3, [pc, #188]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	099b      	lsrs	r3, r3, #6
 80079d6:	f04f 0400 	mov.w	r4, #0
 80079da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80079de:	f04f 0200 	mov.w	r2, #0
 80079e2:	ea03 0501 	and.w	r5, r3, r1
 80079e6:	ea04 0602 	and.w	r6, r4, r2
 80079ea:	4629      	mov	r1, r5
 80079ec:	4632      	mov	r2, r6
 80079ee:	f04f 0300 	mov.w	r3, #0
 80079f2:	f04f 0400 	mov.w	r4, #0
 80079f6:	0154      	lsls	r4, r2, #5
 80079f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80079fc:	014b      	lsls	r3, r1, #5
 80079fe:	4619      	mov	r1, r3
 8007a00:	4622      	mov	r2, r4
 8007a02:	1b49      	subs	r1, r1, r5
 8007a04:	eb62 0206 	sbc.w	r2, r2, r6
 8007a08:	f04f 0300 	mov.w	r3, #0
 8007a0c:	f04f 0400 	mov.w	r4, #0
 8007a10:	0194      	lsls	r4, r2, #6
 8007a12:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007a16:	018b      	lsls	r3, r1, #6
 8007a18:	1a5b      	subs	r3, r3, r1
 8007a1a:	eb64 0402 	sbc.w	r4, r4, r2
 8007a1e:	f04f 0100 	mov.w	r1, #0
 8007a22:	f04f 0200 	mov.w	r2, #0
 8007a26:	00e2      	lsls	r2, r4, #3
 8007a28:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007a2c:	00d9      	lsls	r1, r3, #3
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4614      	mov	r4, r2
 8007a32:	195b      	adds	r3, r3, r5
 8007a34:	eb44 0406 	adc.w	r4, r4, r6
 8007a38:	f04f 0100 	mov.w	r1, #0
 8007a3c:	f04f 0200 	mov.w	r2, #0
 8007a40:	02a2      	lsls	r2, r4, #10
 8007a42:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007a46:	0299      	lsls	r1, r3, #10
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4614      	mov	r4, r2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	4621      	mov	r1, r4
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f04f 0400 	mov.w	r4, #0
 8007a56:	461a      	mov	r2, r3
 8007a58:	4623      	mov	r3, r4
 8007a5a:	f7f9 f8fd 	bl	8000c58 <__aeabi_uldivmod>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	460c      	mov	r4, r1
 8007a62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a64:	4b0a      	ldr	r3, [pc, #40]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	0c1b      	lsrs	r3, r3, #16
 8007a6a:	f003 0303 	and.w	r3, r3, #3
 8007a6e:	3301      	adds	r3, #1
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a7c:	60bb      	str	r3, [r7, #8]
      break;
 8007a7e:	e002      	b.n	8007a86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a80:	4b04      	ldr	r3, [pc, #16]	; (8007a94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007a82:	60bb      	str	r3, [r7, #8]
      break;
 8007a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a86:	68bb      	ldr	r3, [r7, #8]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a90:	40023800 	.word	0x40023800
 8007a94:	00f42400 	.word	0x00f42400
 8007a98:	007a1200 	.word	0x007a1200

08007a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007aa0:	4b03      	ldr	r3, [pc, #12]	; (8007ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	20001228 	.word	0x20001228

08007ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ab8:	f7ff fff0 	bl	8007a9c <HAL_RCC_GetHCLKFreq>
 8007abc:	4601      	mov	r1, r0
 8007abe:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	0a9b      	lsrs	r3, r3, #10
 8007ac4:	f003 0307 	and.w	r3, r3, #7
 8007ac8:	4a03      	ldr	r2, [pc, #12]	; (8007ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007aca:	5cd3      	ldrb	r3, [r2, r3]
 8007acc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	40023800 	.word	0x40023800
 8007ad8:	080182cc 	.word	0x080182cc

08007adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ae0:	f7ff ffdc 	bl	8007a9c <HAL_RCC_GetHCLKFreq>
 8007ae4:	4601      	mov	r1, r0
 8007ae6:	4b05      	ldr	r3, [pc, #20]	; (8007afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	0b5b      	lsrs	r3, r3, #13
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	4a03      	ldr	r2, [pc, #12]	; (8007b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007af2:	5cd3      	ldrb	r3, [r2, r3]
 8007af4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	40023800 	.word	0x40023800
 8007b00:	080182cc 	.word	0x080182cc

08007b04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	220f      	movs	r2, #15
 8007b12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b14:	4b12      	ldr	r3, [pc, #72]	; (8007b60 <HAL_RCC_GetClockConfig+0x5c>)
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f003 0203 	and.w	r2, r3, #3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007b20:	4b0f      	ldr	r3, [pc, #60]	; (8007b60 <HAL_RCC_GetClockConfig+0x5c>)
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007b2c:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <HAL_RCC_GetClockConfig+0x5c>)
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007b38:	4b09      	ldr	r3, [pc, #36]	; (8007b60 <HAL_RCC_GetClockConfig+0x5c>)
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	08db      	lsrs	r3, r3, #3
 8007b3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b46:	4b07      	ldr	r3, [pc, #28]	; (8007b64 <HAL_RCC_GetClockConfig+0x60>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 020f 	and.w	r2, r3, #15
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	601a      	str	r2, [r3, #0]
}
 8007b52:	bf00      	nop
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	40023800 	.word	0x40023800
 8007b64:	40023c00 	.word	0x40023c00

08007b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e01d      	b.n	8007bb6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d106      	bne.n	8007b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f815 	bl	8007bbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	f000 f968 	bl	8007e7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b085      	sub	sp, #20
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f042 0201 	orr.w	r2, r2, #1
 8007be8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 0307 	and.w	r3, r3, #7
 8007bf4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b06      	cmp	r3, #6
 8007bfa:	d007      	beq.n	8007c0c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f042 0201 	orr.w	r2, r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d122      	bne.n	8007c76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d11b      	bne.n	8007c76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f06f 0202 	mvn.w	r2, #2
 8007c46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	f003 0303 	and.w	r3, r3, #3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f8ee 	bl	8007e3e <HAL_TIM_IC_CaptureCallback>
 8007c62:	e005      	b.n	8007c70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f8e0 	bl	8007e2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f8f1 	bl	8007e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b04      	cmp	r3, #4
 8007c82:	d122      	bne.n	8007cca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f003 0304 	and.w	r3, r3, #4
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	d11b      	bne.n	8007cca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f06f 0204 	mvn.w	r2, #4
 8007c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f8c4 	bl	8007e3e <HAL_TIM_IC_CaptureCallback>
 8007cb6:	e005      	b.n	8007cc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f8b6 	bl	8007e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f8c7 	bl	8007e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b08      	cmp	r3, #8
 8007cd6:	d122      	bne.n	8007d1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f003 0308 	and.w	r3, r3, #8
 8007ce2:	2b08      	cmp	r3, #8
 8007ce4:	d11b      	bne.n	8007d1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f06f 0208 	mvn.w	r2, #8
 8007cee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2204      	movs	r2, #4
 8007cf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	f003 0303 	and.w	r3, r3, #3
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f89a 	bl	8007e3e <HAL_TIM_IC_CaptureCallback>
 8007d0a:	e005      	b.n	8007d18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f88c 	bl	8007e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f89d 	bl	8007e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	f003 0310 	and.w	r3, r3, #16
 8007d28:	2b10      	cmp	r3, #16
 8007d2a:	d122      	bne.n	8007d72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	f003 0310 	and.w	r3, r3, #16
 8007d36:	2b10      	cmp	r3, #16
 8007d38:	d11b      	bne.n	8007d72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f06f 0210 	mvn.w	r2, #16
 8007d42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2208      	movs	r2, #8
 8007d48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f870 	bl	8007e3e <HAL_TIM_IC_CaptureCallback>
 8007d5e:	e005      	b.n	8007d6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f862 	bl	8007e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f873 	bl	8007e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d10e      	bne.n	8007d9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d107      	bne.n	8007d9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f06f 0201 	mvn.w	r2, #1
 8007d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7f9 faaf 	bl	80012fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da8:	2b80      	cmp	r3, #128	; 0x80
 8007daa:	d10e      	bne.n	8007dca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db6:	2b80      	cmp	r3, #128	; 0x80
 8007db8:	d107      	bne.n	8007dca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f8e3 	bl	8007f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd4:	2b40      	cmp	r3, #64	; 0x40
 8007dd6:	d10e      	bne.n	8007df6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de2:	2b40      	cmp	r3, #64	; 0x40
 8007de4:	d107      	bne.n	8007df6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f838 	bl	8007e66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	f003 0320 	and.w	r3, r3, #32
 8007e00:	2b20      	cmp	r3, #32
 8007e02:	d10e      	bne.n	8007e22 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b20      	cmp	r3, #32
 8007e10:	d107      	bne.n	8007e22 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f06f 0220 	mvn.w	r2, #32
 8007e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f8ad 	bl	8007f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e22:	bf00      	nop
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e32:	bf00      	nop
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b083      	sub	sp, #12
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b083      	sub	sp, #12
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e5a:	bf00      	nop
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e6e:	bf00      	nop
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
	...

08007e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a34      	ldr	r2, [pc, #208]	; (8007f60 <TIM_Base_SetConfig+0xe4>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d00f      	beq.n	8007eb4 <TIM_Base_SetConfig+0x38>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e9a:	d00b      	beq.n	8007eb4 <TIM_Base_SetConfig+0x38>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a31      	ldr	r2, [pc, #196]	; (8007f64 <TIM_Base_SetConfig+0xe8>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d007      	beq.n	8007eb4 <TIM_Base_SetConfig+0x38>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a30      	ldr	r2, [pc, #192]	; (8007f68 <TIM_Base_SetConfig+0xec>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d003      	beq.n	8007eb4 <TIM_Base_SetConfig+0x38>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a2f      	ldr	r2, [pc, #188]	; (8007f6c <TIM_Base_SetConfig+0xf0>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d108      	bne.n	8007ec6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a25      	ldr	r2, [pc, #148]	; (8007f60 <TIM_Base_SetConfig+0xe4>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d01b      	beq.n	8007f06 <TIM_Base_SetConfig+0x8a>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ed4:	d017      	beq.n	8007f06 <TIM_Base_SetConfig+0x8a>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a22      	ldr	r2, [pc, #136]	; (8007f64 <TIM_Base_SetConfig+0xe8>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d013      	beq.n	8007f06 <TIM_Base_SetConfig+0x8a>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a21      	ldr	r2, [pc, #132]	; (8007f68 <TIM_Base_SetConfig+0xec>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d00f      	beq.n	8007f06 <TIM_Base_SetConfig+0x8a>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a20      	ldr	r2, [pc, #128]	; (8007f6c <TIM_Base_SetConfig+0xf0>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d00b      	beq.n	8007f06 <TIM_Base_SetConfig+0x8a>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a1f      	ldr	r2, [pc, #124]	; (8007f70 <TIM_Base_SetConfig+0xf4>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d007      	beq.n	8007f06 <TIM_Base_SetConfig+0x8a>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a1e      	ldr	r2, [pc, #120]	; (8007f74 <TIM_Base_SetConfig+0xf8>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d003      	beq.n	8007f06 <TIM_Base_SetConfig+0x8a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a1d      	ldr	r2, [pc, #116]	; (8007f78 <TIM_Base_SetConfig+0xfc>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d108      	bne.n	8007f18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a08      	ldr	r2, [pc, #32]	; (8007f60 <TIM_Base_SetConfig+0xe4>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d103      	bne.n	8007f4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	615a      	str	r2, [r3, #20]
}
 8007f52:	bf00      	nop
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	40010000 	.word	0x40010000
 8007f64:	40000400 	.word	0x40000400
 8007f68:	40000800 	.word	0x40000800
 8007f6c:	40000c00 	.word	0x40000c00
 8007f70:	40014000 	.word	0x40014000
 8007f74:	40014400 	.word	0x40014400
 8007f78:	40014800 	.word	0x40014800

08007f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e03f      	b.n	8008036 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d106      	bne.n	8007fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f837 	bl	800803e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2224      	movs	r2, #36	; 0x24
 8007fd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f915 	bl	8008218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	691a      	ldr	r2, [r3, #16]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	695a      	ldr	r2, [r3, #20]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800800c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68da      	ldr	r2, [r3, #12]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800801c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2220      	movs	r2, #32
 8008028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2220      	movs	r2, #32
 8008030:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b088      	sub	sp, #32
 8008056:	af02      	add	r7, sp, #8
 8008058:	60f8      	str	r0, [r7, #12]
 800805a:	60b9      	str	r1, [r7, #8]
 800805c:	603b      	str	r3, [r7, #0]
 800805e:	4613      	mov	r3, r2
 8008060:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b20      	cmp	r3, #32
 8008070:	f040 8083 	bne.w	800817a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <HAL_UART_Transmit+0x2e>
 800807a:	88fb      	ldrh	r3, [r7, #6]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e07b      	b.n	800817c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800808a:	2b01      	cmp	r3, #1
 800808c:	d101      	bne.n	8008092 <HAL_UART_Transmit+0x40>
 800808e:	2302      	movs	r3, #2
 8008090:	e074      	b.n	800817c <HAL_UART_Transmit+0x12a>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2221      	movs	r2, #33	; 0x21
 80080a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80080a8:	f7fd fd30 	bl	8005b0c <HAL_GetTick>
 80080ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	88fa      	ldrh	r2, [r7, #6]
 80080b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	88fa      	ldrh	r2, [r7, #6]
 80080b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80080c2:	e042      	b.n	800814a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	3b01      	subs	r3, #1
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080da:	d122      	bne.n	8008122 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	2200      	movs	r2, #0
 80080e4:	2180      	movs	r1, #128	; 0x80
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 f84c 	bl	8008184 <UART_WaitOnFlagUntilTimeout>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e042      	b.n	800817c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008108:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d103      	bne.n	800811a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	3302      	adds	r3, #2
 8008116:	60bb      	str	r3, [r7, #8]
 8008118:	e017      	b.n	800814a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	3301      	adds	r3, #1
 800811e:	60bb      	str	r3, [r7, #8]
 8008120:	e013      	b.n	800814a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2200      	movs	r2, #0
 800812a:	2180      	movs	r1, #128	; 0x80
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 f829 	bl	8008184 <UART_WaitOnFlagUntilTimeout>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e01f      	b.n	800817c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	60ba      	str	r2, [r7, #8]
 8008142:	781a      	ldrb	r2, [r3, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800814e:	b29b      	uxth	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1b7      	bne.n	80080c4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	2200      	movs	r2, #0
 800815c:	2140      	movs	r1, #64	; 0x40
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 f810 	bl	8008184 <UART_WaitOnFlagUntilTimeout>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e006      	b.n	800817c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2220      	movs	r2, #32
 8008172:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	e000      	b.n	800817c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800817a:	2302      	movs	r3, #2
  }
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	603b      	str	r3, [r7, #0]
 8008190:	4613      	mov	r3, r2
 8008192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008194:	e02c      	b.n	80081f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819c:	d028      	beq.n	80081f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d007      	beq.n	80081b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80081a4:	f7fd fcb2 	bl	8005b0c <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	69ba      	ldr	r2, [r7, #24]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d21d      	bcs.n	80081f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68da      	ldr	r2, [r3, #12]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80081c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	695a      	ldr	r2, [r3, #20]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f022 0201 	bic.w	r2, r2, #1
 80081d2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2220      	movs	r2, #32
 80081d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2220      	movs	r2, #32
 80081e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e00f      	b.n	8008210 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	4013      	ands	r3, r2
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	bf0c      	ite	eq
 8008200:	2301      	moveq	r3, #1
 8008202:	2300      	movne	r3, #0
 8008204:	b2db      	uxtb	r3, r3
 8008206:	461a      	mov	r2, r3
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	429a      	cmp	r2, r3
 800820c:	d0c3      	beq.n	8008196 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	b085      	sub	sp, #20
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68da      	ldr	r2, [r3, #12]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689a      	ldr	r2, [r3, #8]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	431a      	orrs	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	431a      	orrs	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	4313      	orrs	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800825a:	f023 030c 	bic.w	r3, r3, #12
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	6812      	ldr	r2, [r2, #0]
 8008262:	68f9      	ldr	r1, [r7, #12]
 8008264:	430b      	orrs	r3, r1
 8008266:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	699a      	ldr	r2, [r3, #24]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008286:	f040 818b 	bne.w	80085a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4ac1      	ldr	r2, [pc, #772]	; (8008594 <UART_SetConfig+0x37c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d005      	beq.n	80082a0 <UART_SetConfig+0x88>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4abf      	ldr	r2, [pc, #764]	; (8008598 <UART_SetConfig+0x380>)
 800829a:	4293      	cmp	r3, r2
 800829c:	f040 80bd 	bne.w	800841a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082a0:	f7ff fc1c 	bl	8007adc <HAL_RCC_GetPCLK2Freq>
 80082a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	461d      	mov	r5, r3
 80082aa:	f04f 0600 	mov.w	r6, #0
 80082ae:	46a8      	mov	r8, r5
 80082b0:	46b1      	mov	r9, r6
 80082b2:	eb18 0308 	adds.w	r3, r8, r8
 80082b6:	eb49 0409 	adc.w	r4, r9, r9
 80082ba:	4698      	mov	r8, r3
 80082bc:	46a1      	mov	r9, r4
 80082be:	eb18 0805 	adds.w	r8, r8, r5
 80082c2:	eb49 0906 	adc.w	r9, r9, r6
 80082c6:	f04f 0100 	mov.w	r1, #0
 80082ca:	f04f 0200 	mov.w	r2, #0
 80082ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80082d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80082d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80082da:	4688      	mov	r8, r1
 80082dc:	4691      	mov	r9, r2
 80082de:	eb18 0005 	adds.w	r0, r8, r5
 80082e2:	eb49 0106 	adc.w	r1, r9, r6
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	461d      	mov	r5, r3
 80082ec:	f04f 0600 	mov.w	r6, #0
 80082f0:	196b      	adds	r3, r5, r5
 80082f2:	eb46 0406 	adc.w	r4, r6, r6
 80082f6:	461a      	mov	r2, r3
 80082f8:	4623      	mov	r3, r4
 80082fa:	f7f8 fcad 	bl	8000c58 <__aeabi_uldivmod>
 80082fe:	4603      	mov	r3, r0
 8008300:	460c      	mov	r4, r1
 8008302:	461a      	mov	r2, r3
 8008304:	4ba5      	ldr	r3, [pc, #660]	; (800859c <UART_SetConfig+0x384>)
 8008306:	fba3 2302 	umull	r2, r3, r3, r2
 800830a:	095b      	lsrs	r3, r3, #5
 800830c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	461d      	mov	r5, r3
 8008314:	f04f 0600 	mov.w	r6, #0
 8008318:	46a9      	mov	r9, r5
 800831a:	46b2      	mov	sl, r6
 800831c:	eb19 0309 	adds.w	r3, r9, r9
 8008320:	eb4a 040a 	adc.w	r4, sl, sl
 8008324:	4699      	mov	r9, r3
 8008326:	46a2      	mov	sl, r4
 8008328:	eb19 0905 	adds.w	r9, r9, r5
 800832c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008330:	f04f 0100 	mov.w	r1, #0
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800833c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008340:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008344:	4689      	mov	r9, r1
 8008346:	4692      	mov	sl, r2
 8008348:	eb19 0005 	adds.w	r0, r9, r5
 800834c:	eb4a 0106 	adc.w	r1, sl, r6
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	461d      	mov	r5, r3
 8008356:	f04f 0600 	mov.w	r6, #0
 800835a:	196b      	adds	r3, r5, r5
 800835c:	eb46 0406 	adc.w	r4, r6, r6
 8008360:	461a      	mov	r2, r3
 8008362:	4623      	mov	r3, r4
 8008364:	f7f8 fc78 	bl	8000c58 <__aeabi_uldivmod>
 8008368:	4603      	mov	r3, r0
 800836a:	460c      	mov	r4, r1
 800836c:	461a      	mov	r2, r3
 800836e:	4b8b      	ldr	r3, [pc, #556]	; (800859c <UART_SetConfig+0x384>)
 8008370:	fba3 1302 	umull	r1, r3, r3, r2
 8008374:	095b      	lsrs	r3, r3, #5
 8008376:	2164      	movs	r1, #100	; 0x64
 8008378:	fb01 f303 	mul.w	r3, r1, r3
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	3332      	adds	r3, #50	; 0x32
 8008382:	4a86      	ldr	r2, [pc, #536]	; (800859c <UART_SetConfig+0x384>)
 8008384:	fba2 2303 	umull	r2, r3, r2, r3
 8008388:	095b      	lsrs	r3, r3, #5
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008390:	4498      	add	r8, r3
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	461d      	mov	r5, r3
 8008396:	f04f 0600 	mov.w	r6, #0
 800839a:	46a9      	mov	r9, r5
 800839c:	46b2      	mov	sl, r6
 800839e:	eb19 0309 	adds.w	r3, r9, r9
 80083a2:	eb4a 040a 	adc.w	r4, sl, sl
 80083a6:	4699      	mov	r9, r3
 80083a8:	46a2      	mov	sl, r4
 80083aa:	eb19 0905 	adds.w	r9, r9, r5
 80083ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80083b2:	f04f 0100 	mov.w	r1, #0
 80083b6:	f04f 0200 	mov.w	r2, #0
 80083ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083c6:	4689      	mov	r9, r1
 80083c8:	4692      	mov	sl, r2
 80083ca:	eb19 0005 	adds.w	r0, r9, r5
 80083ce:	eb4a 0106 	adc.w	r1, sl, r6
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	461d      	mov	r5, r3
 80083d8:	f04f 0600 	mov.w	r6, #0
 80083dc:	196b      	adds	r3, r5, r5
 80083de:	eb46 0406 	adc.w	r4, r6, r6
 80083e2:	461a      	mov	r2, r3
 80083e4:	4623      	mov	r3, r4
 80083e6:	f7f8 fc37 	bl	8000c58 <__aeabi_uldivmod>
 80083ea:	4603      	mov	r3, r0
 80083ec:	460c      	mov	r4, r1
 80083ee:	461a      	mov	r2, r3
 80083f0:	4b6a      	ldr	r3, [pc, #424]	; (800859c <UART_SetConfig+0x384>)
 80083f2:	fba3 1302 	umull	r1, r3, r3, r2
 80083f6:	095b      	lsrs	r3, r3, #5
 80083f8:	2164      	movs	r1, #100	; 0x64
 80083fa:	fb01 f303 	mul.w	r3, r1, r3
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	00db      	lsls	r3, r3, #3
 8008402:	3332      	adds	r3, #50	; 0x32
 8008404:	4a65      	ldr	r2, [pc, #404]	; (800859c <UART_SetConfig+0x384>)
 8008406:	fba2 2303 	umull	r2, r3, r2, r3
 800840a:	095b      	lsrs	r3, r3, #5
 800840c:	f003 0207 	and.w	r2, r3, #7
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4442      	add	r2, r8
 8008416:	609a      	str	r2, [r3, #8]
 8008418:	e26f      	b.n	80088fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800841a:	f7ff fb4b 	bl	8007ab4 <HAL_RCC_GetPCLK1Freq>
 800841e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	461d      	mov	r5, r3
 8008424:	f04f 0600 	mov.w	r6, #0
 8008428:	46a8      	mov	r8, r5
 800842a:	46b1      	mov	r9, r6
 800842c:	eb18 0308 	adds.w	r3, r8, r8
 8008430:	eb49 0409 	adc.w	r4, r9, r9
 8008434:	4698      	mov	r8, r3
 8008436:	46a1      	mov	r9, r4
 8008438:	eb18 0805 	adds.w	r8, r8, r5
 800843c:	eb49 0906 	adc.w	r9, r9, r6
 8008440:	f04f 0100 	mov.w	r1, #0
 8008444:	f04f 0200 	mov.w	r2, #0
 8008448:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800844c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008450:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008454:	4688      	mov	r8, r1
 8008456:	4691      	mov	r9, r2
 8008458:	eb18 0005 	adds.w	r0, r8, r5
 800845c:	eb49 0106 	adc.w	r1, r9, r6
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	461d      	mov	r5, r3
 8008466:	f04f 0600 	mov.w	r6, #0
 800846a:	196b      	adds	r3, r5, r5
 800846c:	eb46 0406 	adc.w	r4, r6, r6
 8008470:	461a      	mov	r2, r3
 8008472:	4623      	mov	r3, r4
 8008474:	f7f8 fbf0 	bl	8000c58 <__aeabi_uldivmod>
 8008478:	4603      	mov	r3, r0
 800847a:	460c      	mov	r4, r1
 800847c:	461a      	mov	r2, r3
 800847e:	4b47      	ldr	r3, [pc, #284]	; (800859c <UART_SetConfig+0x384>)
 8008480:	fba3 2302 	umull	r2, r3, r3, r2
 8008484:	095b      	lsrs	r3, r3, #5
 8008486:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	461d      	mov	r5, r3
 800848e:	f04f 0600 	mov.w	r6, #0
 8008492:	46a9      	mov	r9, r5
 8008494:	46b2      	mov	sl, r6
 8008496:	eb19 0309 	adds.w	r3, r9, r9
 800849a:	eb4a 040a 	adc.w	r4, sl, sl
 800849e:	4699      	mov	r9, r3
 80084a0:	46a2      	mov	sl, r4
 80084a2:	eb19 0905 	adds.w	r9, r9, r5
 80084a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80084aa:	f04f 0100 	mov.w	r1, #0
 80084ae:	f04f 0200 	mov.w	r2, #0
 80084b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80084ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084be:	4689      	mov	r9, r1
 80084c0:	4692      	mov	sl, r2
 80084c2:	eb19 0005 	adds.w	r0, r9, r5
 80084c6:	eb4a 0106 	adc.w	r1, sl, r6
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	461d      	mov	r5, r3
 80084d0:	f04f 0600 	mov.w	r6, #0
 80084d4:	196b      	adds	r3, r5, r5
 80084d6:	eb46 0406 	adc.w	r4, r6, r6
 80084da:	461a      	mov	r2, r3
 80084dc:	4623      	mov	r3, r4
 80084de:	f7f8 fbbb 	bl	8000c58 <__aeabi_uldivmod>
 80084e2:	4603      	mov	r3, r0
 80084e4:	460c      	mov	r4, r1
 80084e6:	461a      	mov	r2, r3
 80084e8:	4b2c      	ldr	r3, [pc, #176]	; (800859c <UART_SetConfig+0x384>)
 80084ea:	fba3 1302 	umull	r1, r3, r3, r2
 80084ee:	095b      	lsrs	r3, r3, #5
 80084f0:	2164      	movs	r1, #100	; 0x64
 80084f2:	fb01 f303 	mul.w	r3, r1, r3
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	00db      	lsls	r3, r3, #3
 80084fa:	3332      	adds	r3, #50	; 0x32
 80084fc:	4a27      	ldr	r2, [pc, #156]	; (800859c <UART_SetConfig+0x384>)
 80084fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008502:	095b      	lsrs	r3, r3, #5
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800850a:	4498      	add	r8, r3
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	461d      	mov	r5, r3
 8008510:	f04f 0600 	mov.w	r6, #0
 8008514:	46a9      	mov	r9, r5
 8008516:	46b2      	mov	sl, r6
 8008518:	eb19 0309 	adds.w	r3, r9, r9
 800851c:	eb4a 040a 	adc.w	r4, sl, sl
 8008520:	4699      	mov	r9, r3
 8008522:	46a2      	mov	sl, r4
 8008524:	eb19 0905 	adds.w	r9, r9, r5
 8008528:	eb4a 0a06 	adc.w	sl, sl, r6
 800852c:	f04f 0100 	mov.w	r1, #0
 8008530:	f04f 0200 	mov.w	r2, #0
 8008534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008538:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800853c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008540:	4689      	mov	r9, r1
 8008542:	4692      	mov	sl, r2
 8008544:	eb19 0005 	adds.w	r0, r9, r5
 8008548:	eb4a 0106 	adc.w	r1, sl, r6
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	461d      	mov	r5, r3
 8008552:	f04f 0600 	mov.w	r6, #0
 8008556:	196b      	adds	r3, r5, r5
 8008558:	eb46 0406 	adc.w	r4, r6, r6
 800855c:	461a      	mov	r2, r3
 800855e:	4623      	mov	r3, r4
 8008560:	f7f8 fb7a 	bl	8000c58 <__aeabi_uldivmod>
 8008564:	4603      	mov	r3, r0
 8008566:	460c      	mov	r4, r1
 8008568:	461a      	mov	r2, r3
 800856a:	4b0c      	ldr	r3, [pc, #48]	; (800859c <UART_SetConfig+0x384>)
 800856c:	fba3 1302 	umull	r1, r3, r3, r2
 8008570:	095b      	lsrs	r3, r3, #5
 8008572:	2164      	movs	r1, #100	; 0x64
 8008574:	fb01 f303 	mul.w	r3, r1, r3
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	00db      	lsls	r3, r3, #3
 800857c:	3332      	adds	r3, #50	; 0x32
 800857e:	4a07      	ldr	r2, [pc, #28]	; (800859c <UART_SetConfig+0x384>)
 8008580:	fba2 2303 	umull	r2, r3, r2, r3
 8008584:	095b      	lsrs	r3, r3, #5
 8008586:	f003 0207 	and.w	r2, r3, #7
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4442      	add	r2, r8
 8008590:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008592:	e1b2      	b.n	80088fa <UART_SetConfig+0x6e2>
 8008594:	40011000 	.word	0x40011000
 8008598:	40011400 	.word	0x40011400
 800859c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4ad7      	ldr	r2, [pc, #860]	; (8008904 <UART_SetConfig+0x6ec>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d005      	beq.n	80085b6 <UART_SetConfig+0x39e>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4ad6      	ldr	r2, [pc, #856]	; (8008908 <UART_SetConfig+0x6f0>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	f040 80d1 	bne.w	8008758 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80085b6:	f7ff fa91 	bl	8007adc <HAL_RCC_GetPCLK2Freq>
 80085ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	469a      	mov	sl, r3
 80085c0:	f04f 0b00 	mov.w	fp, #0
 80085c4:	46d0      	mov	r8, sl
 80085c6:	46d9      	mov	r9, fp
 80085c8:	eb18 0308 	adds.w	r3, r8, r8
 80085cc:	eb49 0409 	adc.w	r4, r9, r9
 80085d0:	4698      	mov	r8, r3
 80085d2:	46a1      	mov	r9, r4
 80085d4:	eb18 080a 	adds.w	r8, r8, sl
 80085d8:	eb49 090b 	adc.w	r9, r9, fp
 80085dc:	f04f 0100 	mov.w	r1, #0
 80085e0:	f04f 0200 	mov.w	r2, #0
 80085e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80085e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80085ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80085f0:	4688      	mov	r8, r1
 80085f2:	4691      	mov	r9, r2
 80085f4:	eb1a 0508 	adds.w	r5, sl, r8
 80085f8:	eb4b 0609 	adc.w	r6, fp, r9
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	4619      	mov	r1, r3
 8008602:	f04f 0200 	mov.w	r2, #0
 8008606:	f04f 0300 	mov.w	r3, #0
 800860a:	f04f 0400 	mov.w	r4, #0
 800860e:	0094      	lsls	r4, r2, #2
 8008610:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008614:	008b      	lsls	r3, r1, #2
 8008616:	461a      	mov	r2, r3
 8008618:	4623      	mov	r3, r4
 800861a:	4628      	mov	r0, r5
 800861c:	4631      	mov	r1, r6
 800861e:	f7f8 fb1b 	bl	8000c58 <__aeabi_uldivmod>
 8008622:	4603      	mov	r3, r0
 8008624:	460c      	mov	r4, r1
 8008626:	461a      	mov	r2, r3
 8008628:	4bb8      	ldr	r3, [pc, #736]	; (800890c <UART_SetConfig+0x6f4>)
 800862a:	fba3 2302 	umull	r2, r3, r3, r2
 800862e:	095b      	lsrs	r3, r3, #5
 8008630:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	469b      	mov	fp, r3
 8008638:	f04f 0c00 	mov.w	ip, #0
 800863c:	46d9      	mov	r9, fp
 800863e:	46e2      	mov	sl, ip
 8008640:	eb19 0309 	adds.w	r3, r9, r9
 8008644:	eb4a 040a 	adc.w	r4, sl, sl
 8008648:	4699      	mov	r9, r3
 800864a:	46a2      	mov	sl, r4
 800864c:	eb19 090b 	adds.w	r9, r9, fp
 8008650:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008654:	f04f 0100 	mov.w	r1, #0
 8008658:	f04f 0200 	mov.w	r2, #0
 800865c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008660:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008664:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008668:	4689      	mov	r9, r1
 800866a:	4692      	mov	sl, r2
 800866c:	eb1b 0509 	adds.w	r5, fp, r9
 8008670:	eb4c 060a 	adc.w	r6, ip, sl
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	4619      	mov	r1, r3
 800867a:	f04f 0200 	mov.w	r2, #0
 800867e:	f04f 0300 	mov.w	r3, #0
 8008682:	f04f 0400 	mov.w	r4, #0
 8008686:	0094      	lsls	r4, r2, #2
 8008688:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800868c:	008b      	lsls	r3, r1, #2
 800868e:	461a      	mov	r2, r3
 8008690:	4623      	mov	r3, r4
 8008692:	4628      	mov	r0, r5
 8008694:	4631      	mov	r1, r6
 8008696:	f7f8 fadf 	bl	8000c58 <__aeabi_uldivmod>
 800869a:	4603      	mov	r3, r0
 800869c:	460c      	mov	r4, r1
 800869e:	461a      	mov	r2, r3
 80086a0:	4b9a      	ldr	r3, [pc, #616]	; (800890c <UART_SetConfig+0x6f4>)
 80086a2:	fba3 1302 	umull	r1, r3, r3, r2
 80086a6:	095b      	lsrs	r3, r3, #5
 80086a8:	2164      	movs	r1, #100	; 0x64
 80086aa:	fb01 f303 	mul.w	r3, r1, r3
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	011b      	lsls	r3, r3, #4
 80086b2:	3332      	adds	r3, #50	; 0x32
 80086b4:	4a95      	ldr	r2, [pc, #596]	; (800890c <UART_SetConfig+0x6f4>)
 80086b6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ba:	095b      	lsrs	r3, r3, #5
 80086bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086c0:	4498      	add	r8, r3
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	469b      	mov	fp, r3
 80086c6:	f04f 0c00 	mov.w	ip, #0
 80086ca:	46d9      	mov	r9, fp
 80086cc:	46e2      	mov	sl, ip
 80086ce:	eb19 0309 	adds.w	r3, r9, r9
 80086d2:	eb4a 040a 	adc.w	r4, sl, sl
 80086d6:	4699      	mov	r9, r3
 80086d8:	46a2      	mov	sl, r4
 80086da:	eb19 090b 	adds.w	r9, r9, fp
 80086de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80086e2:	f04f 0100 	mov.w	r1, #0
 80086e6:	f04f 0200 	mov.w	r2, #0
 80086ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086f6:	4689      	mov	r9, r1
 80086f8:	4692      	mov	sl, r2
 80086fa:	eb1b 0509 	adds.w	r5, fp, r9
 80086fe:	eb4c 060a 	adc.w	r6, ip, sl
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	4619      	mov	r1, r3
 8008708:	f04f 0200 	mov.w	r2, #0
 800870c:	f04f 0300 	mov.w	r3, #0
 8008710:	f04f 0400 	mov.w	r4, #0
 8008714:	0094      	lsls	r4, r2, #2
 8008716:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800871a:	008b      	lsls	r3, r1, #2
 800871c:	461a      	mov	r2, r3
 800871e:	4623      	mov	r3, r4
 8008720:	4628      	mov	r0, r5
 8008722:	4631      	mov	r1, r6
 8008724:	f7f8 fa98 	bl	8000c58 <__aeabi_uldivmod>
 8008728:	4603      	mov	r3, r0
 800872a:	460c      	mov	r4, r1
 800872c:	461a      	mov	r2, r3
 800872e:	4b77      	ldr	r3, [pc, #476]	; (800890c <UART_SetConfig+0x6f4>)
 8008730:	fba3 1302 	umull	r1, r3, r3, r2
 8008734:	095b      	lsrs	r3, r3, #5
 8008736:	2164      	movs	r1, #100	; 0x64
 8008738:	fb01 f303 	mul.w	r3, r1, r3
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	3332      	adds	r3, #50	; 0x32
 8008742:	4a72      	ldr	r2, [pc, #456]	; (800890c <UART_SetConfig+0x6f4>)
 8008744:	fba2 2303 	umull	r2, r3, r2, r3
 8008748:	095b      	lsrs	r3, r3, #5
 800874a:	f003 020f 	and.w	r2, r3, #15
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4442      	add	r2, r8
 8008754:	609a      	str	r2, [r3, #8]
 8008756:	e0d0      	b.n	80088fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008758:	f7ff f9ac 	bl	8007ab4 <HAL_RCC_GetPCLK1Freq>
 800875c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	469a      	mov	sl, r3
 8008762:	f04f 0b00 	mov.w	fp, #0
 8008766:	46d0      	mov	r8, sl
 8008768:	46d9      	mov	r9, fp
 800876a:	eb18 0308 	adds.w	r3, r8, r8
 800876e:	eb49 0409 	adc.w	r4, r9, r9
 8008772:	4698      	mov	r8, r3
 8008774:	46a1      	mov	r9, r4
 8008776:	eb18 080a 	adds.w	r8, r8, sl
 800877a:	eb49 090b 	adc.w	r9, r9, fp
 800877e:	f04f 0100 	mov.w	r1, #0
 8008782:	f04f 0200 	mov.w	r2, #0
 8008786:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800878a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800878e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008792:	4688      	mov	r8, r1
 8008794:	4691      	mov	r9, r2
 8008796:	eb1a 0508 	adds.w	r5, sl, r8
 800879a:	eb4b 0609 	adc.w	r6, fp, r9
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	4619      	mov	r1, r3
 80087a4:	f04f 0200 	mov.w	r2, #0
 80087a8:	f04f 0300 	mov.w	r3, #0
 80087ac:	f04f 0400 	mov.w	r4, #0
 80087b0:	0094      	lsls	r4, r2, #2
 80087b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80087b6:	008b      	lsls	r3, r1, #2
 80087b8:	461a      	mov	r2, r3
 80087ba:	4623      	mov	r3, r4
 80087bc:	4628      	mov	r0, r5
 80087be:	4631      	mov	r1, r6
 80087c0:	f7f8 fa4a 	bl	8000c58 <__aeabi_uldivmod>
 80087c4:	4603      	mov	r3, r0
 80087c6:	460c      	mov	r4, r1
 80087c8:	461a      	mov	r2, r3
 80087ca:	4b50      	ldr	r3, [pc, #320]	; (800890c <UART_SetConfig+0x6f4>)
 80087cc:	fba3 2302 	umull	r2, r3, r3, r2
 80087d0:	095b      	lsrs	r3, r3, #5
 80087d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	469b      	mov	fp, r3
 80087da:	f04f 0c00 	mov.w	ip, #0
 80087de:	46d9      	mov	r9, fp
 80087e0:	46e2      	mov	sl, ip
 80087e2:	eb19 0309 	adds.w	r3, r9, r9
 80087e6:	eb4a 040a 	adc.w	r4, sl, sl
 80087ea:	4699      	mov	r9, r3
 80087ec:	46a2      	mov	sl, r4
 80087ee:	eb19 090b 	adds.w	r9, r9, fp
 80087f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80087f6:	f04f 0100 	mov.w	r1, #0
 80087fa:	f04f 0200 	mov.w	r2, #0
 80087fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008802:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008806:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800880a:	4689      	mov	r9, r1
 800880c:	4692      	mov	sl, r2
 800880e:	eb1b 0509 	adds.w	r5, fp, r9
 8008812:	eb4c 060a 	adc.w	r6, ip, sl
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	4619      	mov	r1, r3
 800881c:	f04f 0200 	mov.w	r2, #0
 8008820:	f04f 0300 	mov.w	r3, #0
 8008824:	f04f 0400 	mov.w	r4, #0
 8008828:	0094      	lsls	r4, r2, #2
 800882a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800882e:	008b      	lsls	r3, r1, #2
 8008830:	461a      	mov	r2, r3
 8008832:	4623      	mov	r3, r4
 8008834:	4628      	mov	r0, r5
 8008836:	4631      	mov	r1, r6
 8008838:	f7f8 fa0e 	bl	8000c58 <__aeabi_uldivmod>
 800883c:	4603      	mov	r3, r0
 800883e:	460c      	mov	r4, r1
 8008840:	461a      	mov	r2, r3
 8008842:	4b32      	ldr	r3, [pc, #200]	; (800890c <UART_SetConfig+0x6f4>)
 8008844:	fba3 1302 	umull	r1, r3, r3, r2
 8008848:	095b      	lsrs	r3, r3, #5
 800884a:	2164      	movs	r1, #100	; 0x64
 800884c:	fb01 f303 	mul.w	r3, r1, r3
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	011b      	lsls	r3, r3, #4
 8008854:	3332      	adds	r3, #50	; 0x32
 8008856:	4a2d      	ldr	r2, [pc, #180]	; (800890c <UART_SetConfig+0x6f4>)
 8008858:	fba2 2303 	umull	r2, r3, r2, r3
 800885c:	095b      	lsrs	r3, r3, #5
 800885e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008862:	4498      	add	r8, r3
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	469b      	mov	fp, r3
 8008868:	f04f 0c00 	mov.w	ip, #0
 800886c:	46d9      	mov	r9, fp
 800886e:	46e2      	mov	sl, ip
 8008870:	eb19 0309 	adds.w	r3, r9, r9
 8008874:	eb4a 040a 	adc.w	r4, sl, sl
 8008878:	4699      	mov	r9, r3
 800887a:	46a2      	mov	sl, r4
 800887c:	eb19 090b 	adds.w	r9, r9, fp
 8008880:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008884:	f04f 0100 	mov.w	r1, #0
 8008888:	f04f 0200 	mov.w	r2, #0
 800888c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008890:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008894:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008898:	4689      	mov	r9, r1
 800889a:	4692      	mov	sl, r2
 800889c:	eb1b 0509 	adds.w	r5, fp, r9
 80088a0:	eb4c 060a 	adc.w	r6, ip, sl
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	4619      	mov	r1, r3
 80088aa:	f04f 0200 	mov.w	r2, #0
 80088ae:	f04f 0300 	mov.w	r3, #0
 80088b2:	f04f 0400 	mov.w	r4, #0
 80088b6:	0094      	lsls	r4, r2, #2
 80088b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088bc:	008b      	lsls	r3, r1, #2
 80088be:	461a      	mov	r2, r3
 80088c0:	4623      	mov	r3, r4
 80088c2:	4628      	mov	r0, r5
 80088c4:	4631      	mov	r1, r6
 80088c6:	f7f8 f9c7 	bl	8000c58 <__aeabi_uldivmod>
 80088ca:	4603      	mov	r3, r0
 80088cc:	460c      	mov	r4, r1
 80088ce:	461a      	mov	r2, r3
 80088d0:	4b0e      	ldr	r3, [pc, #56]	; (800890c <UART_SetConfig+0x6f4>)
 80088d2:	fba3 1302 	umull	r1, r3, r3, r2
 80088d6:	095b      	lsrs	r3, r3, #5
 80088d8:	2164      	movs	r1, #100	; 0x64
 80088da:	fb01 f303 	mul.w	r3, r1, r3
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	011b      	lsls	r3, r3, #4
 80088e2:	3332      	adds	r3, #50	; 0x32
 80088e4:	4a09      	ldr	r2, [pc, #36]	; (800890c <UART_SetConfig+0x6f4>)
 80088e6:	fba2 2303 	umull	r2, r3, r2, r3
 80088ea:	095b      	lsrs	r3, r3, #5
 80088ec:	f003 020f 	and.w	r2, r3, #15
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4442      	add	r2, r8
 80088f6:	609a      	str	r2, [r3, #8]
}
 80088f8:	e7ff      	b.n	80088fa <UART_SetConfig+0x6e2>
 80088fa:	bf00      	nop
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008904:	40011000 	.word	0x40011000
 8008908:	40011400 	.word	0x40011400
 800890c:	51eb851f 	.word	0x51eb851f

08008910 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008910:	b480      	push	{r7}
 8008912:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008914:	bf00      	nop
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
	...

08008920 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008926:	f3ef 8305 	mrs	r3, IPSR
 800892a:	60bb      	str	r3, [r7, #8]
  return(result);
 800892c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10f      	bne.n	8008952 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008932:	f3ef 8310 	mrs	r3, PRIMASK
 8008936:	607b      	str	r3, [r7, #4]
  return(result);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d105      	bne.n	800894a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800893e:	f3ef 8311 	mrs	r3, BASEPRI
 8008942:	603b      	str	r3, [r7, #0]
  return(result);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d007      	beq.n	800895a <osKernelInitialize+0x3a>
 800894a:	4b0e      	ldr	r3, [pc, #56]	; (8008984 <osKernelInitialize+0x64>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b02      	cmp	r3, #2
 8008950:	d103      	bne.n	800895a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008952:	f06f 0305 	mvn.w	r3, #5
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	e00c      	b.n	8008974 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800895a:	4b0a      	ldr	r3, [pc, #40]	; (8008984 <osKernelInitialize+0x64>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d105      	bne.n	800896e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008962:	4b08      	ldr	r3, [pc, #32]	; (8008984 <osKernelInitialize+0x64>)
 8008964:	2201      	movs	r2, #1
 8008966:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008968:	2300      	movs	r3, #0
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	e002      	b.n	8008974 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800896e:	f04f 33ff 	mov.w	r3, #4294967295
 8008972:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008974:	68fb      	ldr	r3, [r7, #12]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	200029c8 	.word	0x200029c8

08008988 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800898e:	f3ef 8305 	mrs	r3, IPSR
 8008992:	60bb      	str	r3, [r7, #8]
  return(result);
 8008994:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10f      	bne.n	80089ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800899a:	f3ef 8310 	mrs	r3, PRIMASK
 800899e:	607b      	str	r3, [r7, #4]
  return(result);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d105      	bne.n	80089b2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089a6:	f3ef 8311 	mrs	r3, BASEPRI
 80089aa:	603b      	str	r3, [r7, #0]
  return(result);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d007      	beq.n	80089c2 <osKernelStart+0x3a>
 80089b2:	4b0f      	ldr	r3, [pc, #60]	; (80089f0 <osKernelStart+0x68>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d103      	bne.n	80089c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80089ba:	f06f 0305 	mvn.w	r3, #5
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	e010      	b.n	80089e4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80089c2:	4b0b      	ldr	r3, [pc, #44]	; (80089f0 <osKernelStart+0x68>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d109      	bne.n	80089de <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80089ca:	f7ff ffa1 	bl	8008910 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80089ce:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <osKernelStart+0x68>)
 80089d0:	2202      	movs	r2, #2
 80089d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80089d4:	f001 fc34 	bl	800a240 <vTaskStartScheduler>
      stat = osOK;
 80089d8:	2300      	movs	r3, #0
 80089da:	60fb      	str	r3, [r7, #12]
 80089dc:	e002      	b.n	80089e4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80089de:	f04f 33ff 	mov.w	r3, #4294967295
 80089e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80089e4:	68fb      	ldr	r3, [r7, #12]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	200029c8 	.word	0x200029c8

080089f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b090      	sub	sp, #64	; 0x40
 80089f8:	af04      	add	r7, sp, #16
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008a00:	2300      	movs	r3, #0
 8008a02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a04:	f3ef 8305 	mrs	r3, IPSR
 8008a08:	61fb      	str	r3, [r7, #28]
  return(result);
 8008a0a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f040 808f 	bne.w	8008b30 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a12:	f3ef 8310 	mrs	r3, PRIMASK
 8008a16:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d105      	bne.n	8008a2a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8008a22:	617b      	str	r3, [r7, #20]
  return(result);
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <osThreadNew+0x3e>
 8008a2a:	4b44      	ldr	r3, [pc, #272]	; (8008b3c <osThreadNew+0x148>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d07e      	beq.n	8008b30 <osThreadNew+0x13c>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d07b      	beq.n	8008b30 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008a38:	2380      	movs	r3, #128	; 0x80
 8008a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008a3c:	2318      	movs	r3, #24
 8008a3e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008a40:	2300      	movs	r3, #0
 8008a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008a44:	f04f 33ff 	mov.w	r3, #4294967295
 8008a48:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d045      	beq.n	8008adc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <osThreadNew+0x6a>
        name = attr->name;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d002      	beq.n	8008a6c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d008      	beq.n	8008a84 <osThreadNew+0x90>
 8008a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a74:	2b38      	cmp	r3, #56	; 0x38
 8008a76:	d805      	bhi.n	8008a84 <osThreadNew+0x90>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <osThreadNew+0x94>
        return (NULL);
 8008a84:	2300      	movs	r3, #0
 8008a86:	e054      	b.n	8008b32 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	695b      	ldr	r3, [r3, #20]
 8008a94:	089b      	lsrs	r3, r3, #2
 8008a96:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00e      	beq.n	8008abe <osThreadNew+0xca>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	2b5b      	cmp	r3, #91	; 0x5b
 8008aa6:	d90a      	bls.n	8008abe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d006      	beq.n	8008abe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <osThreadNew+0xca>
        mem = 1;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	623b      	str	r3, [r7, #32]
 8008abc:	e010      	b.n	8008ae0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10c      	bne.n	8008ae0 <osThreadNew+0xec>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d108      	bne.n	8008ae0 <osThreadNew+0xec>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d104      	bne.n	8008ae0 <osThreadNew+0xec>
          mem = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	623b      	str	r3, [r7, #32]
 8008ada:	e001      	b.n	8008ae0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d110      	bne.n	8008b08 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008aee:	9202      	str	r2, [sp, #8]
 8008af0:	9301      	str	r3, [sp, #4]
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f001 f9cd 	bl	8009e9c <xTaskCreateStatic>
 8008b02:	4603      	mov	r3, r0
 8008b04:	613b      	str	r3, [r7, #16]
 8008b06:	e013      	b.n	8008b30 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d110      	bne.n	8008b30 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	f107 0310 	add.w	r3, r7, #16
 8008b16:	9301      	str	r3, [sp, #4]
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f001 fa15 	bl	8009f50 <xTaskCreate>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d001      	beq.n	8008b30 <osThreadNew+0x13c>
          hTask = NULL;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b30:	693b      	ldr	r3, [r7, #16]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3730      	adds	r7, #48	; 0x30
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	200029c8 	.word	0x200029c8

08008b40 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b48:	f3ef 8305 	mrs	r3, IPSR
 8008b4c:	613b      	str	r3, [r7, #16]
  return(result);
 8008b4e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10f      	bne.n	8008b74 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b54:	f3ef 8310 	mrs	r3, PRIMASK
 8008b58:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d105      	bne.n	8008b6c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b60:	f3ef 8311 	mrs	r3, BASEPRI
 8008b64:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d007      	beq.n	8008b7c <osDelay+0x3c>
 8008b6c:	4b0a      	ldr	r3, [pc, #40]	; (8008b98 <osDelay+0x58>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d103      	bne.n	8008b7c <osDelay+0x3c>
    stat = osErrorISR;
 8008b74:	f06f 0305 	mvn.w	r3, #5
 8008b78:	617b      	str	r3, [r7, #20]
 8008b7a:	e007      	b.n	8008b8c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d002      	beq.n	8008b8c <osDelay+0x4c>
      vTaskDelay(ticks);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f001 fb26 	bl	800a1d8 <vTaskDelay>
    }
  }

  return (stat);
 8008b8c:	697b      	ldr	r3, [r7, #20]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	200029c8 	.word	0x200029c8

08008b9c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b088      	sub	sp, #32
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ba8:	f3ef 8305 	mrs	r3, IPSR
 8008bac:	617b      	str	r3, [r7, #20]
  return(result);
 8008bae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d13d      	bne.n	8008c30 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8008bb8:	613b      	str	r3, [r7, #16]
  return(result);
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d105      	bne.n	8008bcc <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008bc0:	f3ef 8311 	mrs	r3, BASEPRI
 8008bc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d003      	beq.n	8008bd4 <osEventFlagsNew+0x38>
 8008bcc:	4b1b      	ldr	r3, [pc, #108]	; (8008c3c <osEventFlagsNew+0xa0>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d02d      	beq.n	8008c30 <osEventFlagsNew+0x94>
    mem = -1;
 8008bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d015      	beq.n	8008c0c <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d006      	beq.n	8008bf6 <osEventFlagsNew+0x5a>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	2b1f      	cmp	r3, #31
 8008bee:	d902      	bls.n	8008bf6 <osEventFlagsNew+0x5a>
        mem = 1;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	61bb      	str	r3, [r7, #24]
 8008bf4:	e00c      	b.n	8008c10 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d108      	bne.n	8008c10 <osEventFlagsNew+0x74>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d104      	bne.n	8008c10 <osEventFlagsNew+0x74>
          mem = 0;
 8008c06:	2300      	movs	r3, #0
 8008c08:	61bb      	str	r3, [r7, #24]
 8008c0a:	e001      	b.n	8008c10 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d106      	bne.n	8008c24 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 f956 	bl	8008ecc <xEventGroupCreateStatic>
 8008c20:	61f8      	str	r0, [r7, #28]
 8008c22:	e005      	b.n	8008c30 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d102      	bne.n	8008c30 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8008c2a:	f000 f984 	bl	8008f36 <xEventGroupCreate>
 8008c2e:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8008c30:	69fb      	ldr	r3, [r7, #28]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3720      	adds	r7, #32
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	200029c8 	.word	0x200029c8

08008c40 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d004      	beq.n	8008c5e <osEventFlagsSet+0x1e>
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d003      	beq.n	8008c66 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8008c5e:	f06f 0303 	mvn.w	r3, #3
 8008c62:	61fb      	str	r3, [r7, #28]
 8008c64:	e03a      	b.n	8008cdc <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c66:	f3ef 8305 	mrs	r3, IPSR
 8008c6a:	617b      	str	r3, [r7, #20]
  return(result);
 8008c6c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10f      	bne.n	8008c92 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c72:	f3ef 8310 	mrs	r3, PRIMASK
 8008c76:	613b      	str	r3, [r7, #16]
  return(result);
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d105      	bne.n	8008c8a <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c7e:	f3ef 8311 	mrs	r3, BASEPRI
 8008c82:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d021      	beq.n	8008cce <osEventFlagsSet+0x8e>
 8008c8a:	4b17      	ldr	r3, [pc, #92]	; (8008ce8 <osEventFlagsSet+0xa8>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d11d      	bne.n	8008cce <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8008c92:	2300      	movs	r3, #0
 8008c94:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8008c96:	f107 0308 	add.w	r3, r7, #8
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	69b8      	ldr	r0, [r7, #24]
 8008ca0:	f000 fb60 	bl	8009364 <xEventGroupSetBitsFromISR>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d103      	bne.n	8008cb2 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8008caa:	f06f 0302 	mvn.w	r3, #2
 8008cae:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8008cb0:	e013      	b.n	8008cda <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00e      	beq.n	8008cda <osEventFlagsSet+0x9a>
 8008cbc:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <osEventFlagsSet+0xac>)
 8008cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8008ccc:	e005      	b.n	8008cda <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	69b8      	ldr	r0, [r7, #24]
 8008cd2:	f000 fa82 	bl	80091da <xEventGroupSetBits>
 8008cd6:	61f8      	str	r0, [r7, #28]
 8008cd8:	e000      	b.n	8008cdc <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8008cda:	bf00      	nop
  }

  return (rflags);
 8008cdc:	69fb      	ldr	r3, [r7, #28]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3720      	adds	r7, #32
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	200029c8 	.word	0x200029c8
 8008cec:	e000ed04 	.word	0xe000ed04

08008cf0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b088      	sub	sp, #32
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d004      	beq.n	8008d0e <osEventFlagsClear+0x1e>
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8008d0e:	f06f 0303 	mvn.w	r3, #3
 8008d12:	61fb      	str	r3, [r7, #28]
 8008d14:	e029      	b.n	8008d6a <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d16:	f3ef 8305 	mrs	r3, IPSR
 8008d1a:	617b      	str	r3, [r7, #20]
  return(result);
 8008d1c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10f      	bne.n	8008d42 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d22:	f3ef 8310 	mrs	r3, PRIMASK
 8008d26:	613b      	str	r3, [r7, #16]
  return(result);
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d105      	bne.n	8008d3a <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d2e:	f3ef 8311 	mrs	r3, BASEPRI
 8008d32:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d012      	beq.n	8008d60 <osEventFlagsClear+0x70>
 8008d3a:	4b0e      	ldr	r3, [pc, #56]	; (8008d74 <osEventFlagsClear+0x84>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d10e      	bne.n	8008d60 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8008d42:	69b8      	ldr	r0, [r7, #24]
 8008d44:	f000 fa26 	bl	8009194 <xEventGroupGetBitsFromISR>
 8008d48:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	69b8      	ldr	r0, [r7, #24]
 8008d4e:	f000 fa0d 	bl	800916c <xEventGroupClearBitsFromISR>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d108      	bne.n	8008d6a <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 8008d58:	f06f 0302 	mvn.w	r3, #2
 8008d5c:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8008d5e:	e004      	b.n	8008d6a <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	69b8      	ldr	r0, [r7, #24]
 8008d64:	f000 f9cc 	bl	8009100 <xEventGroupClearBits>
 8008d68:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8008d6a:	69fb      	ldr	r3, [r7, #28]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3720      	adds	r7, #32
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	200029c8 	.word	0x200029c8

08008d78 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b08e      	sub	sp, #56	; 0x38
 8008d7c:	af02      	add	r7, sp, #8
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
 8008d84:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008d8a:	6a3b      	ldr	r3, [r7, #32]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d004      	beq.n	8008d9a <osEventFlagsWait+0x22>
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d003      	beq.n	8008da2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8008d9a:	f06f 0303 	mvn.w	r3, #3
 8008d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8008da0:	e059      	b.n	8008e56 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008da2:	f3ef 8305 	mrs	r3, IPSR
 8008da6:	61fb      	str	r3, [r7, #28]
  return(result);
 8008da8:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10f      	bne.n	8008dce <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dae:	f3ef 8310 	mrs	r3, PRIMASK
 8008db2:	61bb      	str	r3, [r7, #24]
  return(result);
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d105      	bne.n	8008dc6 <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008dba:	f3ef 8311 	mrs	r3, BASEPRI
 8008dbe:	617b      	str	r3, [r7, #20]
  return(result);
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d007      	beq.n	8008dd6 <osEventFlagsWait+0x5e>
 8008dc6:	4b26      	ldr	r3, [pc, #152]	; (8008e60 <osEventFlagsWait+0xe8>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d103      	bne.n	8008dd6 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8008dce:	f06f 0305 	mvn.w	r3, #5
 8008dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8008dd4:	e03f      	b.n	8008e56 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f003 0301 	and.w	r3, r3, #1
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8008de0:	2301      	movs	r3, #1
 8008de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008de4:	e001      	b.n	8008dea <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f003 0302 	and.w	r3, r3, #2
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8008df4:	2300      	movs	r3, #0
 8008df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008df8:	e001      	b.n	8008dfe <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e06:	68b9      	ldr	r1, [r7, #8]
 8008e08:	6a38      	ldr	r0, [r7, #32]
 8008e0a:	f000 f8af 	bl	8008f6c <xEventGroupWaitBits>
 8008e0e:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00e      	beq.n	8008e38 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d019      	beq.n	8008e56 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d003      	beq.n	8008e30 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8008e28:	f06f 0301 	mvn.w	r3, #1
 8008e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e2e:	e012      	b.n	8008e56 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8008e30:	f06f 0302 	mvn.w	r3, #2
 8008e34:	627b      	str	r3, [r7, #36]	; 0x24
 8008e36:	e00e      	b.n	8008e56 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d109      	bne.n	8008e56 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d003      	beq.n	8008e50 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8008e48:	f06f 0301 	mvn.w	r3, #1
 8008e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e4e:	e002      	b.n	8008e56 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8008e50:	f06f 0302 	mvn.w	r3, #2
 8008e54:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3730      	adds	r7, #48	; 0x30
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	200029c8 	.word	0x200029c8

08008e64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4a07      	ldr	r2, [pc, #28]	; (8008e90 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	4a06      	ldr	r2, [pc, #24]	; (8008e94 <vApplicationGetIdleTaskMemory+0x30>)
 8008e7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2280      	movs	r2, #128	; 0x80
 8008e80:	601a      	str	r2, [r3, #0]
}
 8008e82:	bf00      	nop
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	200029cc 	.word	0x200029cc
 8008e94:	20002a28 	.word	0x20002a28

08008e98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	4a07      	ldr	r2, [pc, #28]	; (8008ec4 <vApplicationGetTimerTaskMemory+0x2c>)
 8008ea8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	4a06      	ldr	r2, [pc, #24]	; (8008ec8 <vApplicationGetTimerTaskMemory+0x30>)
 8008eae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008eb6:	601a      	str	r2, [r3, #0]
}
 8008eb8:	bf00      	nop
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	20002c28 	.word	0x20002c28
 8008ec8:	20002c84 	.word	0x20002c84

08008ecc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d109      	bne.n	8008eee <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	613b      	str	r3, [r7, #16]
 8008eec:	e7fe      	b.n	8008eec <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008eee:	2320      	movs	r3, #32
 8008ef0:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	2b20      	cmp	r3, #32
 8008ef6:	d009      	beq.n	8008f0c <xEventGroupCreateStatic+0x40>
 8008ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efc:	f383 8811 	msr	BASEPRI, r3
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	60fb      	str	r3, [r7, #12]
 8008f0a:	e7fe      	b.n	8008f0a <xEventGroupCreateStatic+0x3e>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00a      	beq.n	8008f2c <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	3304      	adds	r3, #4
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 fa33 	bl	800938c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8008f2c:	697b      	ldr	r3, [r7, #20]
	}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3718      	adds	r7, #24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b082      	sub	sp, #8
 8008f3a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8008f3c:	2020      	movs	r0, #32
 8008f3e:	f002 fcef 	bl	800b920 <pvPortMalloc>
 8008f42:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00a      	beq.n	8008f60 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3304      	adds	r3, #4
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 fa19 	bl	800938c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8008f60:	687b      	ldr	r3, [r7, #4]
	}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b090      	sub	sp, #64	; 0x40
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8008f82:	2300      	movs	r3, #0
 8008f84:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d109      	bne.n	8008fa0 <xEventGroupWaitBits+0x34>
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	623b      	str	r3, [r7, #32]
 8008f9e:	e7fe      	b.n	8008f9e <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d009      	beq.n	8008fbe <xEventGroupWaitBits+0x52>
 8008faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	61fb      	str	r3, [r7, #28]
 8008fbc:	e7fe      	b.n	8008fbc <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d109      	bne.n	8008fd8 <xEventGroupWaitBits+0x6c>
 8008fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	61bb      	str	r3, [r7, #24]
 8008fd6:	e7fe      	b.n	8008fd6 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fd8:	f001 fe02 	bl	800abe0 <xTaskGetSchedulerState>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d102      	bne.n	8008fe8 <xEventGroupWaitBits+0x7c>
 8008fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <xEventGroupWaitBits+0x80>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e000      	b.n	8008fee <xEventGroupWaitBits+0x82>
 8008fec:	2300      	movs	r3, #0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d109      	bne.n	8009006 <xEventGroupWaitBits+0x9a>
 8008ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	617b      	str	r3, [r7, #20]
 8009004:	e7fe      	b.n	8009004 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8009006:	f001 f97f 	bl	800a308 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800900a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8009010:	683a      	ldr	r2, [r7, #0]
 8009012:	68b9      	ldr	r1, [r7, #8]
 8009014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009016:	f000 f983 	bl	8009320 <prvTestWaitCondition>
 800901a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00e      	beq.n	8009040 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8009022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009024:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8009026:	2300      	movs	r3, #0
 8009028:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d028      	beq.n	8009082 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	43db      	mvns	r3, r3
 8009038:	401a      	ands	r2, r3
 800903a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903c:	601a      	str	r2, [r3, #0]
 800903e:	e020      	b.n	8009082 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8009040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009042:	2b00      	cmp	r3, #0
 8009044:	d104      	bne.n	8009050 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800904a:	2301      	movs	r3, #1
 800904c:	633b      	str	r3, [r7, #48]	; 0x30
 800904e:	e018      	b.n	8009082 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800905c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d003      	beq.n	800906c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8009064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009066:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800906a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800906c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906e:	1d18      	adds	r0, r3, #4
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009074:	4313      	orrs	r3, r2
 8009076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009078:	4619      	mov	r1, r3
 800907a:	f001 fb37 	bl	800a6ec <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8009082:	f001 f94f 	bl	800a324 <xTaskResumeAll>
 8009086:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8009088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800908a:	2b00      	cmp	r3, #0
 800908c:	d031      	beq.n	80090f2 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	2b00      	cmp	r3, #0
 8009092:	d107      	bne.n	80090a4 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8009094:	4b19      	ldr	r3, [pc, #100]	; (80090fc <xEventGroupWaitBits+0x190>)
 8009096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80090a4:	f001 fe26 	bl	800acf4 <uxTaskResetEventItemValue>
 80090a8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80090aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d11a      	bne.n	80090ea <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 80090b4:	f002 fb1a 	bl	800b6ec <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80090b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80090be:	683a      	ldr	r2, [r7, #0]
 80090c0:	68b9      	ldr	r1, [r7, #8]
 80090c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090c4:	f000 f92c 	bl	8009320 <prvTestWaitCondition>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d009      	beq.n	80090e2 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d006      	beq.n	80090e2 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80090d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	43db      	mvns	r3, r3
 80090dc:	401a      	ands	r2, r3
 80090de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80090e2:	2301      	movs	r3, #1
 80090e4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80090e6:	f002 fb2f 	bl	800b748 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80090ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80090f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80090f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3740      	adds	r7, #64	; 0x40
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	e000ed04 	.word	0xe000ed04

08009100 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d109      	bne.n	8009128 <xEventGroupClearBits+0x28>
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	e7fe      	b.n	8009126 <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d009      	beq.n	8009146 <xEventGroupClearBits+0x46>
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	60bb      	str	r3, [r7, #8]
 8009144:	e7fe      	b.n	8009144 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 8009146:	f002 fad1 	bl	800b6ec <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	43db      	mvns	r3, r3
 8009158:	401a      	ands	r2, r3
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800915e:	f002 faf3 	bl	800b748 <vPortExitCritical>

	return uxReturn;
 8009162:	693b      	ldr	r3, [r7, #16]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8009176:	2300      	movs	r3, #0
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	6879      	ldr	r1, [r7, #4]
 800917c:	4804      	ldr	r0, [pc, #16]	; (8009190 <xEventGroupClearBitsFromISR+0x24>)
 800917e:	f002 f96b 	bl	800b458 <xTimerPendFunctionCallFromISR>
 8009182:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8009184:	68fb      	ldr	r3, [r7, #12]
	}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	08009307 	.word	0x08009307

08009194 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8009194:	b480      	push	{r7}
 8009196:	b089      	sub	sp, #36	; 0x24
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80091a0:	f3ef 8211 	mrs	r2, BASEPRI
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	60fa      	str	r2, [r7, #12]
 80091b6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80091b8:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091ba:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	617b      	str	r3, [r7, #20]
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f383 8811 	msr	BASEPRI, r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80091cc:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80091ce:	4618      	mov	r0, r3
 80091d0:	3724      	adds	r7, #36	; 0x24
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b08e      	sub	sp, #56	; 0x38
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80091e4:	2300      	movs	r3, #0
 80091e6:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80091ec:	2300      	movs	r3, #0
 80091ee:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d109      	bne.n	800920a <xEventGroupSetBits+0x30>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	613b      	str	r3, [r7, #16]
 8009208:	e7fe      	b.n	8009208 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d009      	beq.n	8009228 <xEventGroupSetBits+0x4e>
 8009214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	e7fe      	b.n	8009226 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8009228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922a:	3304      	adds	r3, #4
 800922c:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	3308      	adds	r3, #8
 8009232:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8009234:	f001 f868 	bl	800a308 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	431a      	orrs	r2, r3
 8009246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009248:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800924a:	e03c      	b.n	80092c6 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 800924c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8009252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8009258:	2300      	movs	r3, #0
 800925a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009262:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800926a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d108      	bne.n	8009288 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8009276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	4013      	ands	r3, r2
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00b      	beq.n	800929a <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8009282:	2301      	movs	r3, #1
 8009284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009286:	e008      	b.n	800929a <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8009288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	4013      	ands	r3, r2
 8009290:	69ba      	ldr	r2, [r7, #24]
 8009292:	429a      	cmp	r2, r3
 8009294:	d101      	bne.n	800929a <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8009296:	2301      	movs	r3, #1
 8009298:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800929a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929c:	2b00      	cmp	r3, #0
 800929e:	d010      	beq.n	80092c2 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80092aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80092b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80092ba:	4619      	mov	r1, r3
 80092bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80092be:	f001 fadb 	bl	800a878 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80092c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d1be      	bne.n	800924c <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80092ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	43db      	mvns	r3, r3
 80092d6:	401a      	ands	r2, r3
 80092d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092da:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80092dc:	f001 f822 	bl	800a324 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80092e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e2:	681b      	ldr	r3, [r3, #0]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3738      	adds	r7, #56	; 0x38
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7ff ff6e 	bl	80091da <xEventGroupSetBits>
}
 80092fe:	bf00      	nop
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b082      	sub	sp, #8
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7ff fef4 	bl	8009100 <xEventGroupClearBits>
}
 8009318:	bf00      	nop
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8009320:	b480      	push	{r7}
 8009322:	b087      	sub	sp, #28
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800932c:	2300      	movs	r3, #0
 800932e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d107      	bne.n	8009346 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	4013      	ands	r3, r2
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00a      	beq.n	8009356 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009340:	2301      	movs	r3, #1
 8009342:	617b      	str	r3, [r7, #20]
 8009344:	e007      	b.n	8009356 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	4013      	ands	r3, r2
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	429a      	cmp	r2, r3
 8009350:	d101      	bne.n	8009356 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009352:	2301      	movs	r3, #1
 8009354:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8009356:	697b      	ldr	r3, [r7, #20]
}
 8009358:	4618      	mov	r0, r3
 800935a:	371c      	adds	r7, #28
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	68f9      	ldr	r1, [r7, #12]
 8009376:	4804      	ldr	r0, [pc, #16]	; (8009388 <xEventGroupSetBitsFromISR+0x24>)
 8009378:	f002 f86e 	bl	800b458 <xTimerPendFunctionCallFromISR>
 800937c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800937e:	697b      	ldr	r3, [r7, #20]
	}
 8009380:	4618      	mov	r0, r3
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	080092ed 	.word	0x080092ed

0800938c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f103 0208 	add.w	r2, r3, #8
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f04f 32ff 	mov.w	r2, #4294967295
 80093a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f103 0208 	add.w	r2, r3, #8
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f103 0208 	add.w	r2, r3, #8
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80093da:	bf00      	nop
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093e6:	b480      	push	{r7}
 80093e8:	b085      	sub	sp, #20
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	689a      	ldr	r2, [r3, #8]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	1c5a      	adds	r2, r3, #1
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	601a      	str	r2, [r3, #0]
}
 8009422:	bf00      	nop
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800942e:	b480      	push	{r7}
 8009430:	b085      	sub	sp, #20
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009444:	d103      	bne.n	800944e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	60fb      	str	r3, [r7, #12]
 800944c:	e00c      	b.n	8009468 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	3308      	adds	r3, #8
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	e002      	b.n	800945c <vListInsert+0x2e>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	429a      	cmp	r2, r3
 8009466:	d2f6      	bcs.n	8009456 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	685a      	ldr	r2, [r3, #4]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	1c5a      	adds	r2, r3, #1
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	601a      	str	r2, [r3, #0]
}
 8009494:	bf00      	nop
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	6892      	ldr	r2, [r2, #8]
 80094b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	6852      	ldr	r2, [r2, #4]
 80094c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d103      	bne.n	80094d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	689a      	ldr	r2, [r3, #8]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	1e5a      	subs	r2, r3, #1
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3714      	adds	r7, #20
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d109      	bne.n	800951c <xQueueGenericReset+0x28>
 8009508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	60bb      	str	r3, [r7, #8]
 800951a:	e7fe      	b.n	800951a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800951c:	f002 f8e6 	bl	800b6ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009528:	68f9      	ldr	r1, [r7, #12]
 800952a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800952c:	fb01 f303 	mul.w	r3, r1, r3
 8009530:	441a      	add	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954c:	3b01      	subs	r3, #1
 800954e:	68f9      	ldr	r1, [r7, #12]
 8009550:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009552:	fb01 f303 	mul.w	r3, r1, r3
 8009556:	441a      	add	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	22ff      	movs	r2, #255	; 0xff
 8009560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	22ff      	movs	r2, #255	; 0xff
 8009568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d114      	bne.n	800959c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d01a      	beq.n	80095b0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	3310      	adds	r3, #16
 800957e:	4618      	mov	r0, r3
 8009580:	f001 f918 	bl	800a7b4 <xTaskRemoveFromEventList>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d012      	beq.n	80095b0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800958a:	4b0d      	ldr	r3, [pc, #52]	; (80095c0 <xQueueGenericReset+0xcc>)
 800958c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009590:	601a      	str	r2, [r3, #0]
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	e009      	b.n	80095b0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	3310      	adds	r3, #16
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7ff fef3 	bl	800938c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3324      	adds	r3, #36	; 0x24
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7ff feee 	bl	800938c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80095b0:	f002 f8ca 	bl	800b748 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80095b4:	2301      	movs	r3, #1
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	e000ed04 	.word	0xe000ed04

080095c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08e      	sub	sp, #56	; 0x38
 80095c8:	af02      	add	r7, sp, #8
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
 80095d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d109      	bne.n	80095ec <xQueueGenericCreateStatic+0x28>
 80095d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095dc:	f383 8811 	msr	BASEPRI, r3
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80095ea:	e7fe      	b.n	80095ea <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d109      	bne.n	8009606 <xQueueGenericCreateStatic+0x42>
 80095f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	627b      	str	r3, [r7, #36]	; 0x24
 8009604:	e7fe      	b.n	8009604 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <xQueueGenericCreateStatic+0x4e>
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <xQueueGenericCreateStatic+0x52>
 8009612:	2301      	movs	r3, #1
 8009614:	e000      	b.n	8009618 <xQueueGenericCreateStatic+0x54>
 8009616:	2300      	movs	r3, #0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d109      	bne.n	8009630 <xQueueGenericCreateStatic+0x6c>
 800961c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	623b      	str	r3, [r7, #32]
 800962e:	e7fe      	b.n	800962e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d102      	bne.n	800963c <xQueueGenericCreateStatic+0x78>
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d101      	bne.n	8009640 <xQueueGenericCreateStatic+0x7c>
 800963c:	2301      	movs	r3, #1
 800963e:	e000      	b.n	8009642 <xQueueGenericCreateStatic+0x7e>
 8009640:	2300      	movs	r3, #0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d109      	bne.n	800965a <xQueueGenericCreateStatic+0x96>
 8009646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	61fb      	str	r3, [r7, #28]
 8009658:	e7fe      	b.n	8009658 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800965a:	2350      	movs	r3, #80	; 0x50
 800965c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2b50      	cmp	r3, #80	; 0x50
 8009662:	d009      	beq.n	8009678 <xQueueGenericCreateStatic+0xb4>
 8009664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009668:	f383 8811 	msr	BASEPRI, r3
 800966c:	f3bf 8f6f 	isb	sy
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	61bb      	str	r3, [r7, #24]
 8009676:	e7fe      	b.n	8009676 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009678:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800967e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00d      	beq.n	80096a0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800968c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	4613      	mov	r3, r2
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	68b9      	ldr	r1, [r7, #8]
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f000 f805 	bl	80096aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3730      	adds	r7, #48	; 0x30
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b084      	sub	sp, #16
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	60f8      	str	r0, [r7, #12]
 80096b2:	60b9      	str	r1, [r7, #8]
 80096b4:	607a      	str	r2, [r7, #4]
 80096b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d103      	bne.n	80096c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	69ba      	ldr	r2, [r7, #24]
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	e002      	b.n	80096cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80096d8:	2101      	movs	r1, #1
 80096da:	69b8      	ldr	r0, [r7, #24]
 80096dc:	f7ff ff0a 	bl	80094f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	78fa      	ldrb	r2, [r7, #3]
 80096e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80096e8:	bf00      	nop
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b08e      	sub	sp, #56	; 0x38
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
 80096fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80096fe:	2300      	movs	r3, #0
 8009700:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	2b00      	cmp	r3, #0
 800970a:	d109      	bne.n	8009720 <xQueueGenericSend+0x30>
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	62bb      	str	r3, [r7, #40]	; 0x28
 800971e:	e7fe      	b.n	800971e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d103      	bne.n	800972e <xQueueGenericSend+0x3e>
 8009726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <xQueueGenericSend+0x42>
 800972e:	2301      	movs	r3, #1
 8009730:	e000      	b.n	8009734 <xQueueGenericSend+0x44>
 8009732:	2300      	movs	r3, #0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d109      	bne.n	800974c <xQueueGenericSend+0x5c>
 8009738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	627b      	str	r3, [r7, #36]	; 0x24
 800974a:	e7fe      	b.n	800974a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	2b02      	cmp	r3, #2
 8009750:	d103      	bne.n	800975a <xQueueGenericSend+0x6a>
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009756:	2b01      	cmp	r3, #1
 8009758:	d101      	bne.n	800975e <xQueueGenericSend+0x6e>
 800975a:	2301      	movs	r3, #1
 800975c:	e000      	b.n	8009760 <xQueueGenericSend+0x70>
 800975e:	2300      	movs	r3, #0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d109      	bne.n	8009778 <xQueueGenericSend+0x88>
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	623b      	str	r3, [r7, #32]
 8009776:	e7fe      	b.n	8009776 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009778:	f001 fa32 	bl	800abe0 <xTaskGetSchedulerState>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d102      	bne.n	8009788 <xQueueGenericSend+0x98>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <xQueueGenericSend+0x9c>
 8009788:	2301      	movs	r3, #1
 800978a:	e000      	b.n	800978e <xQueueGenericSend+0x9e>
 800978c:	2300      	movs	r3, #0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d109      	bne.n	80097a6 <xQueueGenericSend+0xb6>
 8009792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	61fb      	str	r3, [r7, #28]
 80097a4:	e7fe      	b.n	80097a4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097a6:	f001 ffa1 	bl	800b6ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d302      	bcc.n	80097bc <xQueueGenericSend+0xcc>
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d129      	bne.n	8009810 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097bc:	683a      	ldr	r2, [r7, #0]
 80097be:	68b9      	ldr	r1, [r7, #8]
 80097c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097c2:	f000 f9ff 	bl	8009bc4 <prvCopyDataToQueue>
 80097c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d010      	beq.n	80097f2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d2:	3324      	adds	r3, #36	; 0x24
 80097d4:	4618      	mov	r0, r3
 80097d6:	f000 ffed 	bl	800a7b4 <xTaskRemoveFromEventList>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d013      	beq.n	8009808 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80097e0:	4b3f      	ldr	r3, [pc, #252]	; (80098e0 <xQueueGenericSend+0x1f0>)
 80097e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097e6:	601a      	str	r2, [r3, #0]
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	e00a      	b.n	8009808 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80097f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d007      	beq.n	8009808 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80097f8:	4b39      	ldr	r3, [pc, #228]	; (80098e0 <xQueueGenericSend+0x1f0>)
 80097fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097fe:	601a      	str	r2, [r3, #0]
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009808:	f001 ff9e 	bl	800b748 <vPortExitCritical>
				return pdPASS;
 800980c:	2301      	movs	r3, #1
 800980e:	e063      	b.n	80098d8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d103      	bne.n	800981e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009816:	f001 ff97 	bl	800b748 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800981a:	2300      	movs	r3, #0
 800981c:	e05c      	b.n	80098d8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800981e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009820:	2b00      	cmp	r3, #0
 8009822:	d106      	bne.n	8009832 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009824:	f107 0314 	add.w	r3, r7, #20
 8009828:	4618      	mov	r0, r3
 800982a:	f001 f885 	bl	800a938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800982e:	2301      	movs	r3, #1
 8009830:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009832:	f001 ff89 	bl	800b748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009836:	f000 fd67 	bl	800a308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800983a:	f001 ff57 	bl	800b6ec <vPortEnterCritical>
 800983e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009844:	b25b      	sxtb	r3, r3
 8009846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984a:	d103      	bne.n	8009854 <xQueueGenericSend+0x164>
 800984c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984e:	2200      	movs	r2, #0
 8009850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800985a:	b25b      	sxtb	r3, r3
 800985c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009860:	d103      	bne.n	800986a <xQueueGenericSend+0x17a>
 8009862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009864:	2200      	movs	r2, #0
 8009866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800986a:	f001 ff6d 	bl	800b748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800986e:	1d3a      	adds	r2, r7, #4
 8009870:	f107 0314 	add.w	r3, r7, #20
 8009874:	4611      	mov	r1, r2
 8009876:	4618      	mov	r0, r3
 8009878:	f001 f874 	bl	800a964 <xTaskCheckForTimeOut>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d124      	bne.n	80098cc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009882:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009884:	f000 fa96 	bl	8009db4 <prvIsQueueFull>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d018      	beq.n	80098c0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800988e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009890:	3310      	adds	r3, #16
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	4611      	mov	r1, r2
 8009896:	4618      	mov	r0, r3
 8009898:	f000 ff04 	bl	800a6a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800989c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800989e:	f000 fa21 	bl	8009ce4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80098a2:	f000 fd3f 	bl	800a324 <xTaskResumeAll>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f47f af7c 	bne.w	80097a6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80098ae:	4b0c      	ldr	r3, [pc, #48]	; (80098e0 <xQueueGenericSend+0x1f0>)
 80098b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	e772      	b.n	80097a6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80098c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098c2:	f000 fa0f 	bl	8009ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098c6:	f000 fd2d 	bl	800a324 <xTaskResumeAll>
 80098ca:	e76c      	b.n	80097a6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80098cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098ce:	f000 fa09 	bl	8009ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098d2:	f000 fd27 	bl	800a324 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80098d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3738      	adds	r7, #56	; 0x38
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	e000ed04 	.word	0xe000ed04

080098e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b08e      	sub	sp, #56	; 0x38
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80098f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d109      	bne.n	8009910 <xQueueGenericSendFromISR+0x2c>
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	627b      	str	r3, [r7, #36]	; 0x24
 800990e:	e7fe      	b.n	800990e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d103      	bne.n	800991e <xQueueGenericSendFromISR+0x3a>
 8009916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991a:	2b00      	cmp	r3, #0
 800991c:	d101      	bne.n	8009922 <xQueueGenericSendFromISR+0x3e>
 800991e:	2301      	movs	r3, #1
 8009920:	e000      	b.n	8009924 <xQueueGenericSendFromISR+0x40>
 8009922:	2300      	movs	r3, #0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d109      	bne.n	800993c <xQueueGenericSendFromISR+0x58>
 8009928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	623b      	str	r3, [r7, #32]
 800993a:	e7fe      	b.n	800993a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	2b02      	cmp	r3, #2
 8009940:	d103      	bne.n	800994a <xQueueGenericSendFromISR+0x66>
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009946:	2b01      	cmp	r3, #1
 8009948:	d101      	bne.n	800994e <xQueueGenericSendFromISR+0x6a>
 800994a:	2301      	movs	r3, #1
 800994c:	e000      	b.n	8009950 <xQueueGenericSendFromISR+0x6c>
 800994e:	2300      	movs	r3, #0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d109      	bne.n	8009968 <xQueueGenericSendFromISR+0x84>
 8009954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	61fb      	str	r3, [r7, #28]
 8009966:	e7fe      	b.n	8009966 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009968:	f001 ff9c 	bl	800b8a4 <vPortValidateInterruptPriority>
	__asm volatile
 800996c:	f3ef 8211 	mrs	r2, BASEPRI
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	61ba      	str	r2, [r7, #24]
 8009982:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009984:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009986:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800998c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009990:	429a      	cmp	r2, r3
 8009992:	d302      	bcc.n	800999a <xQueueGenericSendFromISR+0xb6>
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	2b02      	cmp	r3, #2
 8009998:	d12c      	bne.n	80099f4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800999a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	68b9      	ldr	r1, [r7, #8]
 80099a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099aa:	f000 f90b 	bl	8009bc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80099ae:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80099b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b6:	d112      	bne.n	80099de <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d016      	beq.n	80099ee <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c2:	3324      	adds	r3, #36	; 0x24
 80099c4:	4618      	mov	r0, r3
 80099c6:	f000 fef5 	bl	800a7b4 <xTaskRemoveFromEventList>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00e      	beq.n	80099ee <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00b      	beq.n	80099ee <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2201      	movs	r2, #1
 80099da:	601a      	str	r2, [r3, #0]
 80099dc:	e007      	b.n	80099ee <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80099de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80099e2:	3301      	adds	r3, #1
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	b25a      	sxtb	r2, r3
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80099ee:	2301      	movs	r3, #1
 80099f0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80099f2:	e001      	b.n	80099f8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099f4:	2300      	movs	r3, #0
 80099f6:	637b      	str	r3, [r7, #52]	; 0x34
 80099f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fa:	613b      	str	r3, [r7, #16]
	__asm volatile
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3738      	adds	r7, #56	; 0x38
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b08c      	sub	sp, #48	; 0x30
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d109      	bne.n	8009a3a <xQueueReceive+0x2e>
	__asm volatile
 8009a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	623b      	str	r3, [r7, #32]
 8009a38:	e7fe      	b.n	8009a38 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d103      	bne.n	8009a48 <xQueueReceive+0x3c>
 8009a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d101      	bne.n	8009a4c <xQueueReceive+0x40>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e000      	b.n	8009a4e <xQueueReceive+0x42>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d109      	bne.n	8009a66 <xQueueReceive+0x5a>
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	61fb      	str	r3, [r7, #28]
 8009a64:	e7fe      	b.n	8009a64 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a66:	f001 f8bb 	bl	800abe0 <xTaskGetSchedulerState>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d102      	bne.n	8009a76 <xQueueReceive+0x6a>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <xQueueReceive+0x6e>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e000      	b.n	8009a7c <xQueueReceive+0x70>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d109      	bne.n	8009a94 <xQueueReceive+0x88>
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	61bb      	str	r3, [r7, #24]
 8009a92:	e7fe      	b.n	8009a92 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a94:	f001 fe2a 	bl	800b6ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d01f      	beq.n	8009ae4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009aa4:	68b9      	ldr	r1, [r7, #8]
 8009aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aa8:	f000 f8f6 	bl	8009c98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	1e5a      	subs	r2, r3, #1
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00f      	beq.n	8009adc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	3310      	adds	r3, #16
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f000 fe77 	bl	800a7b4 <xTaskRemoveFromEventList>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d007      	beq.n	8009adc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009acc:	4b3c      	ldr	r3, [pc, #240]	; (8009bc0 <xQueueReceive+0x1b4>)
 8009ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009adc:	f001 fe34 	bl	800b748 <vPortExitCritical>
				return pdPASS;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e069      	b.n	8009bb8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d103      	bne.n	8009af2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009aea:	f001 fe2d 	bl	800b748 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009aee:	2300      	movs	r3, #0
 8009af0:	e062      	b.n	8009bb8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d106      	bne.n	8009b06 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009af8:	f107 0310 	add.w	r3, r7, #16
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 ff1b 	bl	800a938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b02:	2301      	movs	r3, #1
 8009b04:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b06:	f001 fe1f 	bl	800b748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b0a:	f000 fbfd 	bl	800a308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b0e:	f001 fded 	bl	800b6ec <vPortEnterCritical>
 8009b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b18:	b25b      	sxtb	r3, r3
 8009b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1e:	d103      	bne.n	8009b28 <xQueueReceive+0x11c>
 8009b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b22:	2200      	movs	r2, #0
 8009b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b2e:	b25b      	sxtb	r3, r3
 8009b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b34:	d103      	bne.n	8009b3e <xQueueReceive+0x132>
 8009b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b3e:	f001 fe03 	bl	800b748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b42:	1d3a      	adds	r2, r7, #4
 8009b44:	f107 0310 	add.w	r3, r7, #16
 8009b48:	4611      	mov	r1, r2
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 ff0a 	bl	800a964 <xTaskCheckForTimeOut>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d123      	bne.n	8009b9e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b58:	f000 f916 	bl	8009d88 <prvIsQueueEmpty>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d017      	beq.n	8009b92 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b64:	3324      	adds	r3, #36	; 0x24
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	4611      	mov	r1, r2
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f000 fd9a 	bl	800a6a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b72:	f000 f8b7 	bl	8009ce4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b76:	f000 fbd5 	bl	800a324 <xTaskResumeAll>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d189      	bne.n	8009a94 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009b80:	4b0f      	ldr	r3, [pc, #60]	; (8009bc0 <xQueueReceive+0x1b4>)
 8009b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b86:	601a      	str	r2, [r3, #0]
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	e780      	b.n	8009a94 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b94:	f000 f8a6 	bl	8009ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b98:	f000 fbc4 	bl	800a324 <xTaskResumeAll>
 8009b9c:	e77a      	b.n	8009a94 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ba0:	f000 f8a0 	bl	8009ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ba4:	f000 fbbe 	bl	800a324 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009baa:	f000 f8ed 	bl	8009d88 <prvIsQueueEmpty>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f43f af6f 	beq.w	8009a94 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009bb6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3730      	adds	r7, #48	; 0x30
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	e000ed04 	.word	0xe000ed04

08009bc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10d      	bne.n	8009bfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d14d      	bne.n	8009c86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f001 f814 	bl	800ac1c <xTaskPriorityDisinherit>
 8009bf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	609a      	str	r2, [r3, #8]
 8009bfc:	e043      	b.n	8009c86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d119      	bne.n	8009c38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6858      	ldr	r0, [r3, #4]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	68b9      	ldr	r1, [r7, #8]
 8009c10:	f009 ff70 	bl	8013af4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1c:	441a      	add	r2, r3
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	685a      	ldr	r2, [r3, #4]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d32b      	bcc.n	8009c86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	605a      	str	r2, [r3, #4]
 8009c36:	e026      	b.n	8009c86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	68d8      	ldr	r0, [r3, #12]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c40:	461a      	mov	r2, r3
 8009c42:	68b9      	ldr	r1, [r7, #8]
 8009c44:	f009 ff56 	bl	8013af4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	68da      	ldr	r2, [r3, #12]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c50:	425b      	negs	r3, r3
 8009c52:	441a      	add	r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	68da      	ldr	r2, [r3, #12]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d207      	bcs.n	8009c74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	689a      	ldr	r2, [r3, #8]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6c:	425b      	negs	r3, r3
 8009c6e:	441a      	add	r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d105      	bne.n	8009c86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d002      	beq.n	8009c86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	3b01      	subs	r3, #1
 8009c84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	1c5a      	adds	r2, r3, #1
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009c8e:	697b      	ldr	r3, [r7, #20]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3718      	adds	r7, #24
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d018      	beq.n	8009cdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68da      	ldr	r2, [r3, #12]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb2:	441a      	add	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68da      	ldr	r2, [r3, #12]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d303      	bcc.n	8009ccc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	68d9      	ldr	r1, [r3, #12]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	6838      	ldr	r0, [r7, #0]
 8009cd8:	f009 ff0c 	bl	8013af4 <memcpy>
	}
}
 8009cdc:	bf00      	nop
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009cec:	f001 fcfe 	bl	800b6ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009cf8:	e011      	b.n	8009d1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d012      	beq.n	8009d28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	3324      	adds	r3, #36	; 0x24
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 fd54 	bl	800a7b4 <xTaskRemoveFromEventList>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009d12:	f000 fe87 	bl	800aa24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	dce9      	bgt.n	8009cfa <prvUnlockQueue+0x16>
 8009d26:	e000      	b.n	8009d2a <prvUnlockQueue+0x46>
					break;
 8009d28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	22ff      	movs	r2, #255	; 0xff
 8009d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009d32:	f001 fd09 	bl	800b748 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009d36:	f001 fcd9 	bl	800b6ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d42:	e011      	b.n	8009d68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d012      	beq.n	8009d72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	3310      	adds	r3, #16
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 fd2f 	bl	800a7b4 <xTaskRemoveFromEventList>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d001      	beq.n	8009d60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009d5c:	f000 fe62 	bl	800aa24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009d60:	7bbb      	ldrb	r3, [r7, #14]
 8009d62:	3b01      	subs	r3, #1
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	dce9      	bgt.n	8009d44 <prvUnlockQueue+0x60>
 8009d70:	e000      	b.n	8009d74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009d72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	22ff      	movs	r2, #255	; 0xff
 8009d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009d7c:	f001 fce4 	bl	800b748 <vPortExitCritical>
}
 8009d80:	bf00      	nop
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d90:	f001 fcac 	bl	800b6ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d102      	bne.n	8009da2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	60fb      	str	r3, [r7, #12]
 8009da0:	e001      	b.n	8009da6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009da2:	2300      	movs	r3, #0
 8009da4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009da6:	f001 fccf 	bl	800b748 <vPortExitCritical>

	return xReturn;
 8009daa:	68fb      	ldr	r3, [r7, #12]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009dbc:	f001 fc96 	bl	800b6ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d102      	bne.n	8009dd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	e001      	b.n	8009dd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009dd6:	f001 fcb7 	bl	800b748 <vPortExitCritical>

	return xReturn;
 8009dda:	68fb      	ldr	r3, [r7, #12]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009dee:	2300      	movs	r3, #0
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	e014      	b.n	8009e1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009df4:	4a0e      	ldr	r2, [pc, #56]	; (8009e30 <vQueueAddToRegistry+0x4c>)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10b      	bne.n	8009e18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009e00:	490b      	ldr	r1, [pc, #44]	; (8009e30 <vQueueAddToRegistry+0x4c>)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009e0a:	4a09      	ldr	r2, [pc, #36]	; (8009e30 <vQueueAddToRegistry+0x4c>)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	00db      	lsls	r3, r3, #3
 8009e10:	4413      	add	r3, r2
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009e16:	e005      	b.n	8009e24 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2b07      	cmp	r3, #7
 8009e22:	d9e7      	bls.n	8009df4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009e24:	bf00      	nop
 8009e26:	3714      	adds	r7, #20
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr
 8009e30:	2000bac0 	.word	0x2000bac0

08009e34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009e44:	f001 fc52 	bl	800b6ec <vPortEnterCritical>
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e4e:	b25b      	sxtb	r3, r3
 8009e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e54:	d103      	bne.n	8009e5e <vQueueWaitForMessageRestricted+0x2a>
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e64:	b25b      	sxtb	r3, r3
 8009e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e6a:	d103      	bne.n	8009e74 <vQueueWaitForMessageRestricted+0x40>
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e74:	f001 fc68 	bl	800b748 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d106      	bne.n	8009e8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	3324      	adds	r3, #36	; 0x24
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	68b9      	ldr	r1, [r7, #8]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 fc69 	bl	800a760 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009e8e:	6978      	ldr	r0, [r7, #20]
 8009e90:	f7ff ff28 	bl	8009ce4 <prvUnlockQueue>
	}
 8009e94:	bf00      	nop
 8009e96:	3718      	adds	r7, #24
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08e      	sub	sp, #56	; 0x38
 8009ea0:	af04      	add	r7, sp, #16
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
 8009ea8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d109      	bne.n	8009ec4 <xTaskCreateStatic+0x28>
 8009eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	623b      	str	r3, [r7, #32]
 8009ec2:	e7fe      	b.n	8009ec2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d109      	bne.n	8009ede <xTaskCreateStatic+0x42>
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	61fb      	str	r3, [r7, #28]
 8009edc:	e7fe      	b.n	8009edc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ede:	235c      	movs	r3, #92	; 0x5c
 8009ee0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	2b5c      	cmp	r3, #92	; 0x5c
 8009ee6:	d009      	beq.n	8009efc <xTaskCreateStatic+0x60>
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	61bb      	str	r3, [r7, #24]
 8009efa:	e7fe      	b.n	8009efa <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009efc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d01e      	beq.n	8009f42 <xTaskCreateStatic+0xa6>
 8009f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d01b      	beq.n	8009f42 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f12:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	2202      	movs	r2, #2
 8009f18:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	9303      	str	r3, [sp, #12]
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	9302      	str	r3, [sp, #8]
 8009f24:	f107 0314 	add.w	r3, r7, #20
 8009f28:	9301      	str	r3, [sp, #4]
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	68b9      	ldr	r1, [r7, #8]
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 f850 	bl	8009fda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f3c:	f000 f8dc 	bl	800a0f8 <prvAddNewTaskToReadyList>
 8009f40:	e001      	b.n	8009f46 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f46:	697b      	ldr	r3, [r7, #20]
	}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3728      	adds	r7, #40	; 0x28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b08c      	sub	sp, #48	; 0x30
 8009f54:	af04      	add	r7, sp, #16
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	603b      	str	r3, [r7, #0]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f60:	88fb      	ldrh	r3, [r7, #6]
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4618      	mov	r0, r3
 8009f66:	f001 fcdb 	bl	800b920 <pvPortMalloc>
 8009f6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00e      	beq.n	8009f90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f72:	205c      	movs	r0, #92	; 0x5c
 8009f74:	f001 fcd4 	bl	800b920 <pvPortMalloc>
 8009f78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	631a      	str	r2, [r3, #48]	; 0x30
 8009f86:	e005      	b.n	8009f94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f88:	6978      	ldr	r0, [r7, #20]
 8009f8a:	f001 fd8b 	bl	800baa4 <vPortFree>
 8009f8e:	e001      	b.n	8009f94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f90:	2300      	movs	r3, #0
 8009f92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d017      	beq.n	8009fca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fa2:	88fa      	ldrh	r2, [r7, #6]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	9303      	str	r3, [sp, #12]
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	9302      	str	r3, [sp, #8]
 8009fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fae:	9301      	str	r3, [sp, #4]
 8009fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	68b9      	ldr	r1, [r7, #8]
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f000 f80e 	bl	8009fda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fbe:	69f8      	ldr	r0, [r7, #28]
 8009fc0:	f000 f89a 	bl	800a0f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	61bb      	str	r3, [r7, #24]
 8009fc8:	e002      	b.n	8009fd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009fca:	f04f 33ff 	mov.w	r3, #4294967295
 8009fce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009fd0:	69bb      	ldr	r3, [r7, #24]
	}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3720      	adds	r7, #32
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b088      	sub	sp, #32
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	60f8      	str	r0, [r7, #12]
 8009fe2:	60b9      	str	r1, [r7, #8]
 8009fe4:	607a      	str	r2, [r7, #4]
 8009fe6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	21a5      	movs	r1, #165	; 0xa5
 8009ff4:	f009 fd89 	bl	8013b0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a002:	3b01      	subs	r3, #1
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	f023 0307 	bic.w	r3, r3, #7
 800a010:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	f003 0307 	and.w	r3, r3, #7
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d009      	beq.n	800a030 <prvInitialiseNewTask+0x56>
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	617b      	str	r3, [r7, #20]
 800a02e:	e7fe      	b.n	800a02e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d01f      	beq.n	800a076 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a036:	2300      	movs	r3, #0
 800a038:	61fb      	str	r3, [r7, #28]
 800a03a:	e012      	b.n	800a062 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	4413      	add	r3, r2
 800a042:	7819      	ldrb	r1, [r3, #0]
 800a044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	4413      	add	r3, r2
 800a04a:	3334      	adds	r3, #52	; 0x34
 800a04c:	460a      	mov	r2, r1
 800a04e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	4413      	add	r3, r2
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d006      	beq.n	800a06a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	3301      	adds	r3, #1
 800a060:	61fb      	str	r3, [r7, #28]
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	2b0f      	cmp	r3, #15
 800a066:	d9e9      	bls.n	800a03c <prvInitialiseNewTask+0x62>
 800a068:	e000      	b.n	800a06c <prvInitialiseNewTask+0x92>
			{
				break;
 800a06a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a074:	e003      	b.n	800a07e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a080:	2b37      	cmp	r3, #55	; 0x37
 800a082:	d901      	bls.n	800a088 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a084:	2337      	movs	r3, #55	; 0x37
 800a086:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a08c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a092:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	2200      	movs	r2, #0
 800a098:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	3304      	adds	r3, #4
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7ff f994 	bl	80093cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	3318      	adds	r3, #24
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7ff f98f 	bl	80093cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	68f9      	ldr	r1, [r7, #12]
 800a0d6:	69b8      	ldr	r0, [r7, #24]
 800a0d8:	f001 f9de 	bl	800b498 <pxPortInitialiseStack>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0ee:	bf00      	nop
 800a0f0:	3720      	adds	r7, #32
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
	...

0800a0f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a100:	f001 faf4 	bl	800b6ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a104:	4b2d      	ldr	r3, [pc, #180]	; (800a1bc <prvAddNewTaskToReadyList+0xc4>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3301      	adds	r3, #1
 800a10a:	4a2c      	ldr	r2, [pc, #176]	; (800a1bc <prvAddNewTaskToReadyList+0xc4>)
 800a10c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a10e:	4b2c      	ldr	r3, [pc, #176]	; (800a1c0 <prvAddNewTaskToReadyList+0xc8>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d109      	bne.n	800a12a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a116:	4a2a      	ldr	r2, [pc, #168]	; (800a1c0 <prvAddNewTaskToReadyList+0xc8>)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a11c:	4b27      	ldr	r3, [pc, #156]	; (800a1bc <prvAddNewTaskToReadyList+0xc4>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d110      	bne.n	800a146 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a124:	f000 fca2 	bl	800aa6c <prvInitialiseTaskLists>
 800a128:	e00d      	b.n	800a146 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a12a:	4b26      	ldr	r3, [pc, #152]	; (800a1c4 <prvAddNewTaskToReadyList+0xcc>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d109      	bne.n	800a146 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a132:	4b23      	ldr	r3, [pc, #140]	; (800a1c0 <prvAddNewTaskToReadyList+0xc8>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d802      	bhi.n	800a146 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a140:	4a1f      	ldr	r2, [pc, #124]	; (800a1c0 <prvAddNewTaskToReadyList+0xc8>)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a146:	4b20      	ldr	r3, [pc, #128]	; (800a1c8 <prvAddNewTaskToReadyList+0xd0>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3301      	adds	r3, #1
 800a14c:	4a1e      	ldr	r2, [pc, #120]	; (800a1c8 <prvAddNewTaskToReadyList+0xd0>)
 800a14e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a150:	4b1d      	ldr	r3, [pc, #116]	; (800a1c8 <prvAddNewTaskToReadyList+0xd0>)
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a15c:	4b1b      	ldr	r3, [pc, #108]	; (800a1cc <prvAddNewTaskToReadyList+0xd4>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	429a      	cmp	r2, r3
 800a162:	d903      	bls.n	800a16c <prvAddNewTaskToReadyList+0x74>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a168:	4a18      	ldr	r2, [pc, #96]	; (800a1cc <prvAddNewTaskToReadyList+0xd4>)
 800a16a:	6013      	str	r3, [r2, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4a15      	ldr	r2, [pc, #84]	; (800a1d0 <prvAddNewTaskToReadyList+0xd8>)
 800a17a:	441a      	add	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	3304      	adds	r3, #4
 800a180:	4619      	mov	r1, r3
 800a182:	4610      	mov	r0, r2
 800a184:	f7ff f92f 	bl	80093e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a188:	f001 fade 	bl	800b748 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a18c:	4b0d      	ldr	r3, [pc, #52]	; (800a1c4 <prvAddNewTaskToReadyList+0xcc>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00e      	beq.n	800a1b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a194:	4b0a      	ldr	r3, [pc, #40]	; (800a1c0 <prvAddNewTaskToReadyList+0xc8>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d207      	bcs.n	800a1b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1a2:	4b0c      	ldr	r3, [pc, #48]	; (800a1d4 <prvAddNewTaskToReadyList+0xdc>)
 800a1a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1a8:	601a      	str	r2, [r3, #0]
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1b2:	bf00      	nop
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20005158 	.word	0x20005158
 800a1c0:	20004c84 	.word	0x20004c84
 800a1c4:	20005164 	.word	0x20005164
 800a1c8:	20005174 	.word	0x20005174
 800a1cc:	20005160 	.word	0x20005160
 800a1d0:	20004c88 	.word	0x20004c88
 800a1d4:	e000ed04 	.word	0xe000ed04

0800a1d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d016      	beq.n	800a218 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a1ea:	4b13      	ldr	r3, [pc, #76]	; (800a238 <vTaskDelay+0x60>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d009      	beq.n	800a206 <vTaskDelay+0x2e>
 800a1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f6:	f383 8811 	msr	BASEPRI, r3
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	60bb      	str	r3, [r7, #8]
 800a204:	e7fe      	b.n	800a204 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a206:	f000 f87f 	bl	800a308 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a20a:	2100      	movs	r1, #0
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fd89 	bl	800ad24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a212:	f000 f887 	bl	800a324 <xTaskResumeAll>
 800a216:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d107      	bne.n	800a22e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a21e:	4b07      	ldr	r3, [pc, #28]	; (800a23c <vTaskDelay+0x64>)
 800a220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a224:	601a      	str	r2, [r3, #0]
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a22e:	bf00      	nop
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20005180 	.word	0x20005180
 800a23c:	e000ed04 	.word	0xe000ed04

0800a240 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08a      	sub	sp, #40	; 0x28
 800a244:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a246:	2300      	movs	r3, #0
 800a248:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a24e:	463a      	mov	r2, r7
 800a250:	1d39      	adds	r1, r7, #4
 800a252:	f107 0308 	add.w	r3, r7, #8
 800a256:	4618      	mov	r0, r3
 800a258:	f7fe fe04 	bl	8008e64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	9202      	str	r2, [sp, #8]
 800a264:	9301      	str	r3, [sp, #4]
 800a266:	2300      	movs	r3, #0
 800a268:	9300      	str	r3, [sp, #0]
 800a26a:	2300      	movs	r3, #0
 800a26c:	460a      	mov	r2, r1
 800a26e:	4920      	ldr	r1, [pc, #128]	; (800a2f0 <vTaskStartScheduler+0xb0>)
 800a270:	4820      	ldr	r0, [pc, #128]	; (800a2f4 <vTaskStartScheduler+0xb4>)
 800a272:	f7ff fe13 	bl	8009e9c <xTaskCreateStatic>
 800a276:	4602      	mov	r2, r0
 800a278:	4b1f      	ldr	r3, [pc, #124]	; (800a2f8 <vTaskStartScheduler+0xb8>)
 800a27a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a27c:	4b1e      	ldr	r3, [pc, #120]	; (800a2f8 <vTaskStartScheduler+0xb8>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a284:	2301      	movs	r3, #1
 800a286:	617b      	str	r3, [r7, #20]
 800a288:	e001      	b.n	800a28e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d102      	bne.n	800a29a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a294:	f000 fd9a 	bl	800adcc <xTimerCreateTimerTask>
 800a298:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d115      	bne.n	800a2cc <vTaskStartScheduler+0x8c>
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a2b2:	4b12      	ldr	r3, [pc, #72]	; (800a2fc <vTaskStartScheduler+0xbc>)
 800a2b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a2ba:	4b11      	ldr	r3, [pc, #68]	; (800a300 <vTaskStartScheduler+0xc0>)
 800a2bc:	2201      	movs	r2, #1
 800a2be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a2c0:	4b10      	ldr	r3, [pc, #64]	; (800a304 <vTaskStartScheduler+0xc4>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2c6:	f001 f973 	bl	800b5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a2ca:	e00d      	b.n	800a2e8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d2:	d109      	bne.n	800a2e8 <vTaskStartScheduler+0xa8>
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	e7fe      	b.n	800a2e6 <vTaskStartScheduler+0xa6>
}
 800a2e8:	bf00      	nop
 800a2ea:	3718      	adds	r7, #24
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	08017ed8 	.word	0x08017ed8
 800a2f4:	0800aa3d 	.word	0x0800aa3d
 800a2f8:	2000517c 	.word	0x2000517c
 800a2fc:	20005178 	.word	0x20005178
 800a300:	20005164 	.word	0x20005164
 800a304:	2000515c 	.word	0x2000515c

0800a308 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a308:	b480      	push	{r7}
 800a30a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a30c:	4b04      	ldr	r3, [pc, #16]	; (800a320 <vTaskSuspendAll+0x18>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3301      	adds	r3, #1
 800a312:	4a03      	ldr	r2, [pc, #12]	; (800a320 <vTaskSuspendAll+0x18>)
 800a314:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a316:	bf00      	nop
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	20005180 	.word	0x20005180

0800a324 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a32a:	2300      	movs	r3, #0
 800a32c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a32e:	2300      	movs	r3, #0
 800a330:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a332:	4b41      	ldr	r3, [pc, #260]	; (800a438 <xTaskResumeAll+0x114>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d109      	bne.n	800a34e <xTaskResumeAll+0x2a>
 800a33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33e:	f383 8811 	msr	BASEPRI, r3
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	e7fe      	b.n	800a34c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a34e:	f001 f9cd 	bl	800b6ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a352:	4b39      	ldr	r3, [pc, #228]	; (800a438 <xTaskResumeAll+0x114>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3b01      	subs	r3, #1
 800a358:	4a37      	ldr	r2, [pc, #220]	; (800a438 <xTaskResumeAll+0x114>)
 800a35a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a35c:	4b36      	ldr	r3, [pc, #216]	; (800a438 <xTaskResumeAll+0x114>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d162      	bne.n	800a42a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a364:	4b35      	ldr	r3, [pc, #212]	; (800a43c <xTaskResumeAll+0x118>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d05e      	beq.n	800a42a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a36c:	e02f      	b.n	800a3ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a36e:	4b34      	ldr	r3, [pc, #208]	; (800a440 <xTaskResumeAll+0x11c>)
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3318      	adds	r3, #24
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff f890 	bl	80094a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	3304      	adds	r3, #4
 800a384:	4618      	mov	r0, r3
 800a386:	f7ff f88b 	bl	80094a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38e:	4b2d      	ldr	r3, [pc, #180]	; (800a444 <xTaskResumeAll+0x120>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	429a      	cmp	r2, r3
 800a394:	d903      	bls.n	800a39e <xTaskResumeAll+0x7a>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39a:	4a2a      	ldr	r2, [pc, #168]	; (800a444 <xTaskResumeAll+0x120>)
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	4a27      	ldr	r2, [pc, #156]	; (800a448 <xTaskResumeAll+0x124>)
 800a3ac:	441a      	add	r2, r3
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	f7ff f816 	bl	80093e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3be:	4b23      	ldr	r3, [pc, #140]	; (800a44c <xTaskResumeAll+0x128>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d302      	bcc.n	800a3ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a3c8:	4b21      	ldr	r3, [pc, #132]	; (800a450 <xTaskResumeAll+0x12c>)
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3ce:	4b1c      	ldr	r3, [pc, #112]	; (800a440 <xTaskResumeAll+0x11c>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1cb      	bne.n	800a36e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a3dc:	f000 fbe0 	bl	800aba0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a3e0:	4b1c      	ldr	r3, [pc, #112]	; (800a454 <xTaskResumeAll+0x130>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d010      	beq.n	800a40e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3ec:	f000 f846 	bl	800a47c <xTaskIncrementTick>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d002      	beq.n	800a3fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a3f6:	4b16      	ldr	r3, [pc, #88]	; (800a450 <xTaskResumeAll+0x12c>)
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	3b01      	subs	r3, #1
 800a400:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1f1      	bne.n	800a3ec <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a408:	4b12      	ldr	r3, [pc, #72]	; (800a454 <xTaskResumeAll+0x130>)
 800a40a:	2200      	movs	r2, #0
 800a40c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a40e:	4b10      	ldr	r3, [pc, #64]	; (800a450 <xTaskResumeAll+0x12c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d009      	beq.n	800a42a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a416:	2301      	movs	r3, #1
 800a418:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a41a:	4b0f      	ldr	r3, [pc, #60]	; (800a458 <xTaskResumeAll+0x134>)
 800a41c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a42a:	f001 f98d 	bl	800b748 <vPortExitCritical>

	return xAlreadyYielded;
 800a42e:	68bb      	ldr	r3, [r7, #8]
}
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	20005180 	.word	0x20005180
 800a43c:	20005158 	.word	0x20005158
 800a440:	20005118 	.word	0x20005118
 800a444:	20005160 	.word	0x20005160
 800a448:	20004c88 	.word	0x20004c88
 800a44c:	20004c84 	.word	0x20004c84
 800a450:	2000516c 	.word	0x2000516c
 800a454:	20005168 	.word	0x20005168
 800a458:	e000ed04 	.word	0xe000ed04

0800a45c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a462:	4b05      	ldr	r3, [pc, #20]	; (800a478 <xTaskGetTickCount+0x1c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a468:	687b      	ldr	r3, [r7, #4]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	370c      	adds	r7, #12
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	2000515c 	.word	0x2000515c

0800a47c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a482:	2300      	movs	r3, #0
 800a484:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a486:	4b4e      	ldr	r3, [pc, #312]	; (800a5c0 <xTaskIncrementTick+0x144>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f040 8088 	bne.w	800a5a0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a490:	4b4c      	ldr	r3, [pc, #304]	; (800a5c4 <xTaskIncrementTick+0x148>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3301      	adds	r3, #1
 800a496:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a498:	4a4a      	ldr	r2, [pc, #296]	; (800a5c4 <xTaskIncrementTick+0x148>)
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d11f      	bne.n	800a4e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a4a4:	4b48      	ldr	r3, [pc, #288]	; (800a5c8 <xTaskIncrementTick+0x14c>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d009      	beq.n	800a4c2 <xTaskIncrementTick+0x46>
 800a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	603b      	str	r3, [r7, #0]
 800a4c0:	e7fe      	b.n	800a4c0 <xTaskIncrementTick+0x44>
 800a4c2:	4b41      	ldr	r3, [pc, #260]	; (800a5c8 <xTaskIncrementTick+0x14c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	4b40      	ldr	r3, [pc, #256]	; (800a5cc <xTaskIncrementTick+0x150>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a3e      	ldr	r2, [pc, #248]	; (800a5c8 <xTaskIncrementTick+0x14c>)
 800a4ce:	6013      	str	r3, [r2, #0]
 800a4d0:	4a3e      	ldr	r2, [pc, #248]	; (800a5cc <xTaskIncrementTick+0x150>)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	4b3e      	ldr	r3, [pc, #248]	; (800a5d0 <xTaskIncrementTick+0x154>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	4a3c      	ldr	r2, [pc, #240]	; (800a5d0 <xTaskIncrementTick+0x154>)
 800a4de:	6013      	str	r3, [r2, #0]
 800a4e0:	f000 fb5e 	bl	800aba0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4e4:	4b3b      	ldr	r3, [pc, #236]	; (800a5d4 <xTaskIncrementTick+0x158>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d349      	bcc.n	800a582 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4ee:	4b36      	ldr	r3, [pc, #216]	; (800a5c8 <xTaskIncrementTick+0x14c>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d104      	bne.n	800a502 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4f8:	4b36      	ldr	r3, [pc, #216]	; (800a5d4 <xTaskIncrementTick+0x158>)
 800a4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a4fe:	601a      	str	r2, [r3, #0]
					break;
 800a500:	e03f      	b.n	800a582 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a502:	4b31      	ldr	r3, [pc, #196]	; (800a5c8 <xTaskIncrementTick+0x14c>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a512:	693a      	ldr	r2, [r7, #16]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	429a      	cmp	r2, r3
 800a518:	d203      	bcs.n	800a522 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a51a:	4a2e      	ldr	r2, [pc, #184]	; (800a5d4 <xTaskIncrementTick+0x158>)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a520:	e02f      	b.n	800a582 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	3304      	adds	r3, #4
 800a526:	4618      	mov	r0, r3
 800a528:	f7fe ffba 	bl	80094a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a530:	2b00      	cmp	r3, #0
 800a532:	d004      	beq.n	800a53e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	3318      	adds	r3, #24
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe ffb1 	bl	80094a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a542:	4b25      	ldr	r3, [pc, #148]	; (800a5d8 <xTaskIncrementTick+0x15c>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	429a      	cmp	r2, r3
 800a548:	d903      	bls.n	800a552 <xTaskIncrementTick+0xd6>
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a54e:	4a22      	ldr	r2, [pc, #136]	; (800a5d8 <xTaskIncrementTick+0x15c>)
 800a550:	6013      	str	r3, [r2, #0]
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a556:	4613      	mov	r3, r2
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	4413      	add	r3, r2
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	4a1f      	ldr	r2, [pc, #124]	; (800a5dc <xTaskIncrementTick+0x160>)
 800a560:	441a      	add	r2, r3
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	3304      	adds	r3, #4
 800a566:	4619      	mov	r1, r3
 800a568:	4610      	mov	r0, r2
 800a56a:	f7fe ff3c 	bl	80093e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a572:	4b1b      	ldr	r3, [pc, #108]	; (800a5e0 <xTaskIncrementTick+0x164>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a578:	429a      	cmp	r2, r3
 800a57a:	d3b8      	bcc.n	800a4ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a57c:	2301      	movs	r3, #1
 800a57e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a580:	e7b5      	b.n	800a4ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a582:	4b17      	ldr	r3, [pc, #92]	; (800a5e0 <xTaskIncrementTick+0x164>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a588:	4914      	ldr	r1, [pc, #80]	; (800a5dc <xTaskIncrementTick+0x160>)
 800a58a:	4613      	mov	r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4413      	add	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	440b      	add	r3, r1
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2b01      	cmp	r3, #1
 800a598:	d907      	bls.n	800a5aa <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a59a:	2301      	movs	r3, #1
 800a59c:	617b      	str	r3, [r7, #20]
 800a59e:	e004      	b.n	800a5aa <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a5a0:	4b10      	ldr	r3, [pc, #64]	; (800a5e4 <xTaskIncrementTick+0x168>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	4a0f      	ldr	r2, [pc, #60]	; (800a5e4 <xTaskIncrementTick+0x168>)
 800a5a8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a5aa:	4b0f      	ldr	r3, [pc, #60]	; (800a5e8 <xTaskIncrementTick+0x16c>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d001      	beq.n	800a5b6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a5b6:	697b      	ldr	r3, [r7, #20]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3718      	adds	r7, #24
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	20005180 	.word	0x20005180
 800a5c4:	2000515c 	.word	0x2000515c
 800a5c8:	20005110 	.word	0x20005110
 800a5cc:	20005114 	.word	0x20005114
 800a5d0:	20005170 	.word	0x20005170
 800a5d4:	20005178 	.word	0x20005178
 800a5d8:	20005160 	.word	0x20005160
 800a5dc:	20004c88 	.word	0x20004c88
 800a5e0:	20004c84 	.word	0x20004c84
 800a5e4:	20005168 	.word	0x20005168
 800a5e8:	2000516c 	.word	0x2000516c

0800a5ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5f2:	4b27      	ldr	r3, [pc, #156]	; (800a690 <vTaskSwitchContext+0xa4>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d003      	beq.n	800a602 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5fa:	4b26      	ldr	r3, [pc, #152]	; (800a694 <vTaskSwitchContext+0xa8>)
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a600:	e040      	b.n	800a684 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a602:	4b24      	ldr	r3, [pc, #144]	; (800a694 <vTaskSwitchContext+0xa8>)
 800a604:	2200      	movs	r2, #0
 800a606:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a608:	4b23      	ldr	r3, [pc, #140]	; (800a698 <vTaskSwitchContext+0xac>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	e00f      	b.n	800a630 <vTaskSwitchContext+0x44>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d109      	bne.n	800a62a <vTaskSwitchContext+0x3e>
 800a616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61a:	f383 8811 	msr	BASEPRI, r3
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	f3bf 8f4f 	dsb	sy
 800a626:	607b      	str	r3, [r7, #4]
 800a628:	e7fe      	b.n	800a628 <vTaskSwitchContext+0x3c>
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	3b01      	subs	r3, #1
 800a62e:	60fb      	str	r3, [r7, #12]
 800a630:	491a      	ldr	r1, [pc, #104]	; (800a69c <vTaskSwitchContext+0xb0>)
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	4613      	mov	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	440b      	add	r3, r1
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d0e5      	beq.n	800a610 <vTaskSwitchContext+0x24>
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	4613      	mov	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4a13      	ldr	r2, [pc, #76]	; (800a69c <vTaskSwitchContext+0xb0>)
 800a650:	4413      	add	r3, r2
 800a652:	60bb      	str	r3, [r7, #8]
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	685a      	ldr	r2, [r3, #4]
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	605a      	str	r2, [r3, #4]
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	3308      	adds	r3, #8
 800a666:	429a      	cmp	r2, r3
 800a668:	d104      	bne.n	800a674 <vTaskSwitchContext+0x88>
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	605a      	str	r2, [r3, #4]
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	4a09      	ldr	r2, [pc, #36]	; (800a6a0 <vTaskSwitchContext+0xb4>)
 800a67c:	6013      	str	r3, [r2, #0]
 800a67e:	4a06      	ldr	r2, [pc, #24]	; (800a698 <vTaskSwitchContext+0xac>)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6013      	str	r3, [r2, #0]
}
 800a684:	bf00      	nop
 800a686:	3714      	adds	r7, #20
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	20005180 	.word	0x20005180
 800a694:	2000516c 	.word	0x2000516c
 800a698:	20005160 	.word	0x20005160
 800a69c:	20004c88 	.word	0x20004c88
 800a6a0:	20004c84 	.word	0x20004c84

0800a6a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d109      	bne.n	800a6c8 <vTaskPlaceOnEventList+0x24>
 800a6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b8:	f383 8811 	msr	BASEPRI, r3
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	60fb      	str	r3, [r7, #12]
 800a6c6:	e7fe      	b.n	800a6c6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6c8:	4b07      	ldr	r3, [pc, #28]	; (800a6e8 <vTaskPlaceOnEventList+0x44>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3318      	adds	r3, #24
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7fe feac 	bl	800942e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6d6:	2101      	movs	r1, #1
 800a6d8:	6838      	ldr	r0, [r7, #0]
 800a6da:	f000 fb23 	bl	800ad24 <prvAddCurrentTaskToDelayedList>
}
 800a6de:	bf00      	nop
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	20004c84 	.word	0x20004c84

0800a6ec <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d109      	bne.n	800a712 <vTaskPlaceOnUnorderedEventList+0x26>
 800a6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	617b      	str	r3, [r7, #20]
 800a710:	e7fe      	b.n	800a710 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800a712:	4b11      	ldr	r3, [pc, #68]	; (800a758 <vTaskPlaceOnUnorderedEventList+0x6c>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d109      	bne.n	800a72e <vTaskPlaceOnUnorderedEventList+0x42>
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	613b      	str	r3, [r7, #16]
 800a72c:	e7fe      	b.n	800a72c <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a72e:	4b0b      	ldr	r3, [pc, #44]	; (800a75c <vTaskPlaceOnUnorderedEventList+0x70>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800a738:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a73a:	4b08      	ldr	r3, [pc, #32]	; (800a75c <vTaskPlaceOnUnorderedEventList+0x70>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	3318      	adds	r3, #24
 800a740:	4619      	mov	r1, r3
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f7fe fe4f 	bl	80093e6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a748:	2101      	movs	r1, #1
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 faea 	bl	800ad24 <prvAddCurrentTaskToDelayedList>
}
 800a750:	bf00      	nop
 800a752:	3718      	adds	r7, #24
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	20005180 	.word	0x20005180
 800a75c:	20004c84 	.word	0x20004c84

0800a760 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d109      	bne.n	800a786 <vTaskPlaceOnEventListRestricted+0x26>
 800a772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a776:	f383 8811 	msr	BASEPRI, r3
 800a77a:	f3bf 8f6f 	isb	sy
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	617b      	str	r3, [r7, #20]
 800a784:	e7fe      	b.n	800a784 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a786:	4b0a      	ldr	r3, [pc, #40]	; (800a7b0 <vTaskPlaceOnEventListRestricted+0x50>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	3318      	adds	r3, #24
 800a78c:	4619      	mov	r1, r3
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	f7fe fe29 	bl	80093e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d002      	beq.n	800a7a0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a79a:	f04f 33ff 	mov.w	r3, #4294967295
 800a79e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a7a0:	6879      	ldr	r1, [r7, #4]
 800a7a2:	68b8      	ldr	r0, [r7, #8]
 800a7a4:	f000 fabe 	bl	800ad24 <prvAddCurrentTaskToDelayedList>
	}
 800a7a8:	bf00      	nop
 800a7aa:	3718      	adds	r7, #24
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	20004c84 	.word	0x20004c84

0800a7b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d109      	bne.n	800a7de <xTaskRemoveFromEventList+0x2a>
 800a7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	60fb      	str	r3, [r7, #12]
 800a7dc:	e7fe      	b.n	800a7dc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	3318      	adds	r3, #24
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fe fe5c 	bl	80094a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7e8:	4b1d      	ldr	r3, [pc, #116]	; (800a860 <xTaskRemoveFromEventList+0xac>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d11d      	bne.n	800a82c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fe fe53 	bl	80094a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7fe:	4b19      	ldr	r3, [pc, #100]	; (800a864 <xTaskRemoveFromEventList+0xb0>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	429a      	cmp	r2, r3
 800a804:	d903      	bls.n	800a80e <xTaskRemoveFromEventList+0x5a>
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80a:	4a16      	ldr	r2, [pc, #88]	; (800a864 <xTaskRemoveFromEventList+0xb0>)
 800a80c:	6013      	str	r3, [r2, #0]
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a812:	4613      	mov	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	4a13      	ldr	r2, [pc, #76]	; (800a868 <xTaskRemoveFromEventList+0xb4>)
 800a81c:	441a      	add	r2, r3
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	3304      	adds	r3, #4
 800a822:	4619      	mov	r1, r3
 800a824:	4610      	mov	r0, r2
 800a826:	f7fe fdde 	bl	80093e6 <vListInsertEnd>
 800a82a:	e005      	b.n	800a838 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	3318      	adds	r3, #24
 800a830:	4619      	mov	r1, r3
 800a832:	480e      	ldr	r0, [pc, #56]	; (800a86c <xTaskRemoveFromEventList+0xb8>)
 800a834:	f7fe fdd7 	bl	80093e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a83c:	4b0c      	ldr	r3, [pc, #48]	; (800a870 <xTaskRemoveFromEventList+0xbc>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a842:	429a      	cmp	r2, r3
 800a844:	d905      	bls.n	800a852 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a846:	2301      	movs	r3, #1
 800a848:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a84a:	4b0a      	ldr	r3, [pc, #40]	; (800a874 <xTaskRemoveFromEventList+0xc0>)
 800a84c:	2201      	movs	r2, #1
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	e001      	b.n	800a856 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a852:	2300      	movs	r3, #0
 800a854:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a856:	697b      	ldr	r3, [r7, #20]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	20005180 	.word	0x20005180
 800a864:	20005160 	.word	0x20005160
 800a868:	20004c88 	.word	0x20004c88
 800a86c:	20005118 	.word	0x20005118
 800a870:	20004c84 	.word	0x20004c84
 800a874:	2000516c 	.word	0x2000516c

0800a878 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a882:	4b28      	ldr	r3, [pc, #160]	; (800a924 <vTaskRemoveFromUnorderedEventList+0xac>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d109      	bne.n	800a89e <vTaskRemoveFromUnorderedEventList+0x26>
 800a88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	613b      	str	r3, [r7, #16]
 800a89c:	e7fe      	b.n	800a89c <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d109      	bne.n	800a8c8 <vTaskRemoveFromUnorderedEventList+0x50>
 800a8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b8:	f383 8811 	msr	BASEPRI, r3
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	60fb      	str	r3, [r7, #12]
 800a8c6:	e7fe      	b.n	800a8c6 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f7fe fde9 	bl	80094a0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	3304      	adds	r3, #4
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fe fde4 	bl	80094a0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8dc:	4b12      	ldr	r3, [pc, #72]	; (800a928 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d903      	bls.n	800a8ec <vTaskRemoveFromUnorderedEventList+0x74>
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e8:	4a0f      	ldr	r2, [pc, #60]	; (800a928 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800a8ea:	6013      	str	r3, [r2, #0]
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4a0c      	ldr	r2, [pc, #48]	; (800a92c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a8fa:	441a      	add	r2, r3
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	3304      	adds	r3, #4
 800a900:	4619      	mov	r1, r3
 800a902:	4610      	mov	r0, r2
 800a904:	f7fe fd6f 	bl	80093e6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a90c:	4b08      	ldr	r3, [pc, #32]	; (800a930 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a912:	429a      	cmp	r2, r3
 800a914:	d902      	bls.n	800a91c <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a916:	4b07      	ldr	r3, [pc, #28]	; (800a934 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a918:	2201      	movs	r2, #1
 800a91a:	601a      	str	r2, [r3, #0]
	}
}
 800a91c:	bf00      	nop
 800a91e:	3718      	adds	r7, #24
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	20005180 	.word	0x20005180
 800a928:	20005160 	.word	0x20005160
 800a92c:	20004c88 	.word	0x20004c88
 800a930:	20004c84 	.word	0x20004c84
 800a934:	2000516c 	.word	0x2000516c

0800a938 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a940:	4b06      	ldr	r3, [pc, #24]	; (800a95c <vTaskInternalSetTimeOutState+0x24>)
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a948:	4b05      	ldr	r3, [pc, #20]	; (800a960 <vTaskInternalSetTimeOutState+0x28>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	605a      	str	r2, [r3, #4]
}
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	20005170 	.word	0x20005170
 800a960:	2000515c 	.word	0x2000515c

0800a964 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b088      	sub	sp, #32
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d109      	bne.n	800a988 <xTaskCheckForTimeOut+0x24>
 800a974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a978:	f383 8811 	msr	BASEPRI, r3
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	613b      	str	r3, [r7, #16]
 800a986:	e7fe      	b.n	800a986 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d109      	bne.n	800a9a2 <xTaskCheckForTimeOut+0x3e>
 800a98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	60fb      	str	r3, [r7, #12]
 800a9a0:	e7fe      	b.n	800a9a0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a9a2:	f000 fea3 	bl	800b6ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a9a6:	4b1d      	ldr	r3, [pc, #116]	; (800aa1c <xTaskCheckForTimeOut+0xb8>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	69ba      	ldr	r2, [r7, #24]
 800a9b2:	1ad3      	subs	r3, r2, r3
 800a9b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9be:	d102      	bne.n	800a9c6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	61fb      	str	r3, [r7, #28]
 800a9c4:	e023      	b.n	800aa0e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	4b15      	ldr	r3, [pc, #84]	; (800aa20 <xTaskCheckForTimeOut+0xbc>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d007      	beq.n	800a9e2 <xTaskCheckForTimeOut+0x7e>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	69ba      	ldr	r2, [r7, #24]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d302      	bcc.n	800a9e2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	61fb      	str	r3, [r7, #28]
 800a9e0:	e015      	b.n	800aa0e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d20b      	bcs.n	800aa04 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	1ad2      	subs	r2, r2, r3
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f7ff ff9d 	bl	800a938 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	61fb      	str	r3, [r7, #28]
 800aa02:	e004      	b.n	800aa0e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	2200      	movs	r2, #0
 800aa08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa0e:	f000 fe9b 	bl	800b748 <vPortExitCritical>

	return xReturn;
 800aa12:	69fb      	ldr	r3, [r7, #28]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3720      	adds	r7, #32
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	2000515c 	.word	0x2000515c
 800aa20:	20005170 	.word	0x20005170

0800aa24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa24:	b480      	push	{r7}
 800aa26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa28:	4b03      	ldr	r3, [pc, #12]	; (800aa38 <vTaskMissedYield+0x14>)
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	601a      	str	r2, [r3, #0]
}
 800aa2e:	bf00      	nop
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr
 800aa38:	2000516c 	.word	0x2000516c

0800aa3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa44:	f000 f852 	bl	800aaec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa48:	4b06      	ldr	r3, [pc, #24]	; (800aa64 <prvIdleTask+0x28>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d9f9      	bls.n	800aa44 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa50:	4b05      	ldr	r3, [pc, #20]	; (800aa68 <prvIdleTask+0x2c>)
 800aa52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa56:	601a      	str	r2, [r3, #0]
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa60:	e7f0      	b.n	800aa44 <prvIdleTask+0x8>
 800aa62:	bf00      	nop
 800aa64:	20004c88 	.word	0x20004c88
 800aa68:	e000ed04 	.word	0xe000ed04

0800aa6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa72:	2300      	movs	r3, #0
 800aa74:	607b      	str	r3, [r7, #4]
 800aa76:	e00c      	b.n	800aa92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4413      	add	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4a12      	ldr	r2, [pc, #72]	; (800aacc <prvInitialiseTaskLists+0x60>)
 800aa84:	4413      	add	r3, r2
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7fe fc80 	bl	800938c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	607b      	str	r3, [r7, #4]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2b37      	cmp	r3, #55	; 0x37
 800aa96:	d9ef      	bls.n	800aa78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aa98:	480d      	ldr	r0, [pc, #52]	; (800aad0 <prvInitialiseTaskLists+0x64>)
 800aa9a:	f7fe fc77 	bl	800938c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa9e:	480d      	ldr	r0, [pc, #52]	; (800aad4 <prvInitialiseTaskLists+0x68>)
 800aaa0:	f7fe fc74 	bl	800938c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aaa4:	480c      	ldr	r0, [pc, #48]	; (800aad8 <prvInitialiseTaskLists+0x6c>)
 800aaa6:	f7fe fc71 	bl	800938c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aaaa:	480c      	ldr	r0, [pc, #48]	; (800aadc <prvInitialiseTaskLists+0x70>)
 800aaac:	f7fe fc6e 	bl	800938c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aab0:	480b      	ldr	r0, [pc, #44]	; (800aae0 <prvInitialiseTaskLists+0x74>)
 800aab2:	f7fe fc6b 	bl	800938c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aab6:	4b0b      	ldr	r3, [pc, #44]	; (800aae4 <prvInitialiseTaskLists+0x78>)
 800aab8:	4a05      	ldr	r2, [pc, #20]	; (800aad0 <prvInitialiseTaskLists+0x64>)
 800aaba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aabc:	4b0a      	ldr	r3, [pc, #40]	; (800aae8 <prvInitialiseTaskLists+0x7c>)
 800aabe:	4a05      	ldr	r2, [pc, #20]	; (800aad4 <prvInitialiseTaskLists+0x68>)
 800aac0:	601a      	str	r2, [r3, #0]
}
 800aac2:	bf00      	nop
 800aac4:	3708      	adds	r7, #8
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	20004c88 	.word	0x20004c88
 800aad0:	200050e8 	.word	0x200050e8
 800aad4:	200050fc 	.word	0x200050fc
 800aad8:	20005118 	.word	0x20005118
 800aadc:	2000512c 	.word	0x2000512c
 800aae0:	20005144 	.word	0x20005144
 800aae4:	20005110 	.word	0x20005110
 800aae8:	20005114 	.word	0x20005114

0800aaec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aaf2:	e019      	b.n	800ab28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aaf4:	f000 fdfa 	bl	800b6ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaf8:	4b0f      	ldr	r3, [pc, #60]	; (800ab38 <prvCheckTasksWaitingTermination+0x4c>)
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	3304      	adds	r3, #4
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fe fccb 	bl	80094a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab0a:	4b0c      	ldr	r3, [pc, #48]	; (800ab3c <prvCheckTasksWaitingTermination+0x50>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	4a0a      	ldr	r2, [pc, #40]	; (800ab3c <prvCheckTasksWaitingTermination+0x50>)
 800ab12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab14:	4b0a      	ldr	r3, [pc, #40]	; (800ab40 <prvCheckTasksWaitingTermination+0x54>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	4a09      	ldr	r2, [pc, #36]	; (800ab40 <prvCheckTasksWaitingTermination+0x54>)
 800ab1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab1e:	f000 fe13 	bl	800b748 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 f80e 	bl	800ab44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab28:	4b05      	ldr	r3, [pc, #20]	; (800ab40 <prvCheckTasksWaitingTermination+0x54>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d1e1      	bne.n	800aaf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	2000512c 	.word	0x2000512c
 800ab3c:	20005158 	.word	0x20005158
 800ab40:	20005140 	.word	0x20005140

0800ab44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d108      	bne.n	800ab68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f000 ffa2 	bl	800baa4 <vPortFree>
				vPortFree( pxTCB );
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 ff9f 	bl	800baa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab66:	e017      	b.n	800ab98 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d103      	bne.n	800ab7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 ff96 	bl	800baa4 <vPortFree>
	}
 800ab78:	e00e      	b.n	800ab98 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d009      	beq.n	800ab98 <prvDeleteTCB+0x54>
 800ab84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab88:	f383 8811 	msr	BASEPRI, r3
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	60fb      	str	r3, [r7, #12]
 800ab96:	e7fe      	b.n	800ab96 <prvDeleteTCB+0x52>
	}
 800ab98:	bf00      	nop
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aba6:	4b0c      	ldr	r3, [pc, #48]	; (800abd8 <prvResetNextTaskUnblockTime+0x38>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d104      	bne.n	800abba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800abb0:	4b0a      	ldr	r3, [pc, #40]	; (800abdc <prvResetNextTaskUnblockTime+0x3c>)
 800abb2:	f04f 32ff 	mov.w	r2, #4294967295
 800abb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800abb8:	e008      	b.n	800abcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abba:	4b07      	ldr	r3, [pc, #28]	; (800abd8 <prvResetNextTaskUnblockTime+0x38>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	4a04      	ldr	r2, [pc, #16]	; (800abdc <prvResetNextTaskUnblockTime+0x3c>)
 800abca:	6013      	str	r3, [r2, #0]
}
 800abcc:	bf00      	nop
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr
 800abd8:	20005110 	.word	0x20005110
 800abdc:	20005178 	.word	0x20005178

0800abe0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800abe6:	4b0b      	ldr	r3, [pc, #44]	; (800ac14 <xTaskGetSchedulerState+0x34>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d102      	bne.n	800abf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800abee:	2301      	movs	r3, #1
 800abf0:	607b      	str	r3, [r7, #4]
 800abf2:	e008      	b.n	800ac06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abf4:	4b08      	ldr	r3, [pc, #32]	; (800ac18 <xTaskGetSchedulerState+0x38>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d102      	bne.n	800ac02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800abfc:	2302      	movs	r3, #2
 800abfe:	607b      	str	r3, [r7, #4]
 800ac00:	e001      	b.n	800ac06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac02:	2300      	movs	r3, #0
 800ac04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac06:	687b      	ldr	r3, [r7, #4]
	}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr
 800ac14:	20005164 	.word	0x20005164
 800ac18:	20005180 	.word	0x20005180

0800ac1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b086      	sub	sp, #24
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d054      	beq.n	800acdc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac32:	4b2d      	ldr	r3, [pc, #180]	; (800ace8 <xTaskPriorityDisinherit+0xcc>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d009      	beq.n	800ac50 <xTaskPriorityDisinherit+0x34>
 800ac3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	60fb      	str	r3, [r7, #12]
 800ac4e:	e7fe      	b.n	800ac4e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d109      	bne.n	800ac6c <xTaskPriorityDisinherit+0x50>
 800ac58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5c:	f383 8811 	msr	BASEPRI, r3
 800ac60:	f3bf 8f6f 	isb	sy
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	60bb      	str	r3, [r7, #8]
 800ac6a:	e7fe      	b.n	800ac6a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac70:	1e5a      	subs	r2, r3, #1
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d02c      	beq.n	800acdc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d128      	bne.n	800acdc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fe fc06 	bl	80094a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acac:	4b0f      	ldr	r3, [pc, #60]	; (800acec <xTaskPriorityDisinherit+0xd0>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d903      	bls.n	800acbc <xTaskPriorityDisinherit+0xa0>
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb8:	4a0c      	ldr	r2, [pc, #48]	; (800acec <xTaskPriorityDisinherit+0xd0>)
 800acba:	6013      	str	r3, [r2, #0]
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc0:	4613      	mov	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	4413      	add	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4a09      	ldr	r2, [pc, #36]	; (800acf0 <xTaskPriorityDisinherit+0xd4>)
 800acca:	441a      	add	r2, r3
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	3304      	adds	r3, #4
 800acd0:	4619      	mov	r1, r3
 800acd2:	4610      	mov	r0, r2
 800acd4:	f7fe fb87 	bl	80093e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800acd8:	2301      	movs	r3, #1
 800acda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800acdc:	697b      	ldr	r3, [r7, #20]
	}
 800acde:	4618      	mov	r0, r3
 800ace0:	3718      	adds	r7, #24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	20004c84 	.word	0x20004c84
 800acec:	20005160 	.word	0x20005160
 800acf0:	20004c88 	.word	0x20004c88

0800acf4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800acfa:	4b09      	ldr	r3, [pc, #36]	; (800ad20 <uxTaskResetEventItemValue+0x2c>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	699b      	ldr	r3, [r3, #24]
 800ad00:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad02:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <uxTaskResetEventItemValue+0x2c>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad08:	4b05      	ldr	r3, [pc, #20]	; (800ad20 <uxTaskResetEventItemValue+0x2c>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ad10:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ad12:	687b      	ldr	r3, [r7, #4]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	20004c84 	.word	0x20004c84

0800ad24 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad2e:	4b21      	ldr	r3, [pc, #132]	; (800adb4 <prvAddCurrentTaskToDelayedList+0x90>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad34:	4b20      	ldr	r3, [pc, #128]	; (800adb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	3304      	adds	r3, #4
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fe fbb0 	bl	80094a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad46:	d10a      	bne.n	800ad5e <prvAddCurrentTaskToDelayedList+0x3a>
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d007      	beq.n	800ad5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad4e:	4b1a      	ldr	r3, [pc, #104]	; (800adb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	3304      	adds	r3, #4
 800ad54:	4619      	mov	r1, r3
 800ad56:	4819      	ldr	r0, [pc, #100]	; (800adbc <prvAddCurrentTaskToDelayedList+0x98>)
 800ad58:	f7fe fb45 	bl	80093e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad5c:	e026      	b.n	800adac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4413      	add	r3, r2
 800ad64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad66:	4b14      	ldr	r3, [pc, #80]	; (800adb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d209      	bcs.n	800ad8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad76:	4b12      	ldr	r3, [pc, #72]	; (800adc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	4b0f      	ldr	r3, [pc, #60]	; (800adb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	3304      	adds	r3, #4
 800ad80:	4619      	mov	r1, r3
 800ad82:	4610      	mov	r0, r2
 800ad84:	f7fe fb53 	bl	800942e <vListInsert>
}
 800ad88:	e010      	b.n	800adac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad8a:	4b0e      	ldr	r3, [pc, #56]	; (800adc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	4b0a      	ldr	r3, [pc, #40]	; (800adb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	3304      	adds	r3, #4
 800ad94:	4619      	mov	r1, r3
 800ad96:	4610      	mov	r0, r2
 800ad98:	f7fe fb49 	bl	800942e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad9c:	4b0a      	ldr	r3, [pc, #40]	; (800adc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d202      	bcs.n	800adac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ada6:	4a08      	ldr	r2, [pc, #32]	; (800adc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	6013      	str	r3, [r2, #0]
}
 800adac:	bf00      	nop
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	2000515c 	.word	0x2000515c
 800adb8:	20004c84 	.word	0x20004c84
 800adbc:	20005144 	.word	0x20005144
 800adc0:	20005114 	.word	0x20005114
 800adc4:	20005110 	.word	0x20005110
 800adc8:	20005178 	.word	0x20005178

0800adcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b08a      	sub	sp, #40	; 0x28
 800add0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800add2:	2300      	movs	r3, #0
 800add4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800add6:	f000 faff 	bl	800b3d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800adda:	4b1c      	ldr	r3, [pc, #112]	; (800ae4c <xTimerCreateTimerTask+0x80>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d021      	beq.n	800ae26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ade2:	2300      	movs	r3, #0
 800ade4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800adea:	1d3a      	adds	r2, r7, #4
 800adec:	f107 0108 	add.w	r1, r7, #8
 800adf0:	f107 030c 	add.w	r3, r7, #12
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fe f84f 	bl	8008e98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800adfa:	6879      	ldr	r1, [r7, #4]
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	9202      	str	r2, [sp, #8]
 800ae02:	9301      	str	r3, [sp, #4]
 800ae04:	2302      	movs	r3, #2
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	2300      	movs	r3, #0
 800ae0a:	460a      	mov	r2, r1
 800ae0c:	4910      	ldr	r1, [pc, #64]	; (800ae50 <xTimerCreateTimerTask+0x84>)
 800ae0e:	4811      	ldr	r0, [pc, #68]	; (800ae54 <xTimerCreateTimerTask+0x88>)
 800ae10:	f7ff f844 	bl	8009e9c <xTaskCreateStatic>
 800ae14:	4602      	mov	r2, r0
 800ae16:	4b10      	ldr	r3, [pc, #64]	; (800ae58 <xTimerCreateTimerTask+0x8c>)
 800ae18:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae1a:	4b0f      	ldr	r3, [pc, #60]	; (800ae58 <xTimerCreateTimerTask+0x8c>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae22:	2301      	movs	r3, #1
 800ae24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d109      	bne.n	800ae40 <xTimerCreateTimerTask+0x74>
 800ae2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae30:	f383 8811 	msr	BASEPRI, r3
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	613b      	str	r3, [r7, #16]
 800ae3e:	e7fe      	b.n	800ae3e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800ae40:	697b      	ldr	r3, [r7, #20]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3718      	adds	r7, #24
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	200051b4 	.word	0x200051b4
 800ae50:	08017ee0 	.word	0x08017ee0
 800ae54:	0800af8d 	.word	0x0800af8d
 800ae58:	200051b8 	.word	0x200051b8

0800ae5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b08a      	sub	sp, #40	; 0x28
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
 800ae68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d109      	bne.n	800ae88 <xTimerGenericCommand+0x2c>
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	623b      	str	r3, [r7, #32]
 800ae86:	e7fe      	b.n	800ae86 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae88:	4b19      	ldr	r3, [pc, #100]	; (800aef0 <xTimerGenericCommand+0x94>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d02a      	beq.n	800aee6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	2b05      	cmp	r3, #5
 800aea0:	dc18      	bgt.n	800aed4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aea2:	f7ff fe9d 	bl	800abe0 <xTaskGetSchedulerState>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d109      	bne.n	800aec0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aeac:	4b10      	ldr	r3, [pc, #64]	; (800aef0 <xTimerGenericCommand+0x94>)
 800aeae:	6818      	ldr	r0, [r3, #0]
 800aeb0:	f107 0110 	add.w	r1, r7, #16
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeb8:	f7fe fc1a 	bl	80096f0 <xQueueGenericSend>
 800aebc:	6278      	str	r0, [r7, #36]	; 0x24
 800aebe:	e012      	b.n	800aee6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aec0:	4b0b      	ldr	r3, [pc, #44]	; (800aef0 <xTimerGenericCommand+0x94>)
 800aec2:	6818      	ldr	r0, [r3, #0]
 800aec4:	f107 0110 	add.w	r1, r7, #16
 800aec8:	2300      	movs	r3, #0
 800aeca:	2200      	movs	r2, #0
 800aecc:	f7fe fc10 	bl	80096f0 <xQueueGenericSend>
 800aed0:	6278      	str	r0, [r7, #36]	; 0x24
 800aed2:	e008      	b.n	800aee6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aed4:	4b06      	ldr	r3, [pc, #24]	; (800aef0 <xTimerGenericCommand+0x94>)
 800aed6:	6818      	ldr	r0, [r3, #0]
 800aed8:	f107 0110 	add.w	r1, r7, #16
 800aedc:	2300      	movs	r3, #0
 800aede:	683a      	ldr	r2, [r7, #0]
 800aee0:	f7fe fd00 	bl	80098e4 <xQueueGenericSendFromISR>
 800aee4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3728      	adds	r7, #40	; 0x28
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	200051b4 	.word	0x200051b4

0800aef4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b088      	sub	sp, #32
 800aef8:	af02      	add	r7, sp, #8
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aefe:	4b22      	ldr	r3, [pc, #136]	; (800af88 <prvProcessExpiredTimer+0x94>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	3304      	adds	r3, #4
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7fe fac7 	bl	80094a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af18:	f003 0304 	and.w	r3, r3, #4
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d021      	beq.n	800af64 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	699a      	ldr	r2, [r3, #24]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	18d1      	adds	r1, r2, r3
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	6978      	ldr	r0, [r7, #20]
 800af2e:	f000 f8d1 	bl	800b0d4 <prvInsertTimerInActiveList>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d01e      	beq.n	800af76 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af38:	2300      	movs	r3, #0
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	2300      	movs	r3, #0
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	2100      	movs	r1, #0
 800af42:	6978      	ldr	r0, [r7, #20]
 800af44:	f7ff ff8a 	bl	800ae5c <xTimerGenericCommand>
 800af48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d112      	bne.n	800af76 <prvProcessExpiredTimer+0x82>
 800af50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af54:	f383 8811 	msr	BASEPRI, r3
 800af58:	f3bf 8f6f 	isb	sy
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	60fb      	str	r3, [r7, #12]
 800af62:	e7fe      	b.n	800af62 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af6a:	f023 0301 	bic.w	r3, r3, #1
 800af6e:	b2da      	uxtb	r2, r3
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	6978      	ldr	r0, [r7, #20]
 800af7c:	4798      	blx	r3
}
 800af7e:	bf00      	nop
 800af80:	3718      	adds	r7, #24
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	200051ac 	.word	0x200051ac

0800af8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af94:	f107 0308 	add.w	r3, r7, #8
 800af98:	4618      	mov	r0, r3
 800af9a:	f000 f857 	bl	800b04c <prvGetNextExpireTime>
 800af9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	4619      	mov	r1, r3
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f000 f803 	bl	800afb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800afaa:	f000 f8d5 	bl	800b158 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afae:	e7f1      	b.n	800af94 <prvTimerTask+0x8>

0800afb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800afba:	f7ff f9a5 	bl	800a308 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afbe:	f107 0308 	add.w	r3, r7, #8
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 f866 	bl	800b094 <prvSampleTimeNow>
 800afc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d130      	bne.n	800b032 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d10a      	bne.n	800afec <prvProcessTimerOrBlockTask+0x3c>
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d806      	bhi.n	800afec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800afde:	f7ff f9a1 	bl	800a324 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800afe2:	68f9      	ldr	r1, [r7, #12]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7ff ff85 	bl	800aef4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800afea:	e024      	b.n	800b036 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d008      	beq.n	800b004 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aff2:	4b13      	ldr	r3, [pc, #76]	; (800b040 <prvProcessTimerOrBlockTask+0x90>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <prvProcessTimerOrBlockTask+0x50>
 800affc:	2301      	movs	r3, #1
 800affe:	e000      	b.n	800b002 <prvProcessTimerOrBlockTask+0x52>
 800b000:	2300      	movs	r3, #0
 800b002:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b004:	4b0f      	ldr	r3, [pc, #60]	; (800b044 <prvProcessTimerOrBlockTask+0x94>)
 800b006:	6818      	ldr	r0, [r3, #0]
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	4619      	mov	r1, r3
 800b012:	f7fe ff0f 	bl	8009e34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b016:	f7ff f985 	bl	800a324 <xTaskResumeAll>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10a      	bne.n	800b036 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b020:	4b09      	ldr	r3, [pc, #36]	; (800b048 <prvProcessTimerOrBlockTask+0x98>)
 800b022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b026:	601a      	str	r2, [r3, #0]
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	f3bf 8f6f 	isb	sy
}
 800b030:	e001      	b.n	800b036 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b032:	f7ff f977 	bl	800a324 <xTaskResumeAll>
}
 800b036:	bf00      	nop
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	200051b0 	.word	0x200051b0
 800b044:	200051b4 	.word	0x200051b4
 800b048:	e000ed04 	.word	0xe000ed04

0800b04c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b04c:	b480      	push	{r7}
 800b04e:	b085      	sub	sp, #20
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b054:	4b0e      	ldr	r3, [pc, #56]	; (800b090 <prvGetNextExpireTime+0x44>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <prvGetNextExpireTime+0x16>
 800b05e:	2201      	movs	r2, #1
 800b060:	e000      	b.n	800b064 <prvGetNextExpireTime+0x18>
 800b062:	2200      	movs	r2, #0
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d105      	bne.n	800b07c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b070:	4b07      	ldr	r3, [pc, #28]	; (800b090 <prvGetNextExpireTime+0x44>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	60fb      	str	r3, [r7, #12]
 800b07a:	e001      	b.n	800b080 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b07c:	2300      	movs	r3, #0
 800b07e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b080:	68fb      	ldr	r3, [r7, #12]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	200051ac 	.word	0x200051ac

0800b094 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b09c:	f7ff f9de 	bl	800a45c <xTaskGetTickCount>
 800b0a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b0a2:	4b0b      	ldr	r3, [pc, #44]	; (800b0d0 <prvSampleTimeNow+0x3c>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d205      	bcs.n	800b0b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b0ac:	f000 f930 	bl	800b310 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	601a      	str	r2, [r3, #0]
 800b0b6:	e002      	b.n	800b0be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b0be:	4a04      	ldr	r2, [pc, #16]	; (800b0d0 <prvSampleTimeNow+0x3c>)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	200051bc 	.word	0x200051bc

0800b0d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
 800b0e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	68ba      	ldr	r2, [r7, #8]
 800b0ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b0f2:	68ba      	ldr	r2, [r7, #8]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d812      	bhi.n	800b120 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	1ad2      	subs	r2, r2, r3
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	429a      	cmp	r2, r3
 800b106:	d302      	bcc.n	800b10e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b108:	2301      	movs	r3, #1
 800b10a:	617b      	str	r3, [r7, #20]
 800b10c:	e01b      	b.n	800b146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b10e:	4b10      	ldr	r3, [pc, #64]	; (800b150 <prvInsertTimerInActiveList+0x7c>)
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	3304      	adds	r3, #4
 800b116:	4619      	mov	r1, r3
 800b118:	4610      	mov	r0, r2
 800b11a:	f7fe f988 	bl	800942e <vListInsert>
 800b11e:	e012      	b.n	800b146 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	429a      	cmp	r2, r3
 800b126:	d206      	bcs.n	800b136 <prvInsertTimerInActiveList+0x62>
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d302      	bcc.n	800b136 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b130:	2301      	movs	r3, #1
 800b132:	617b      	str	r3, [r7, #20]
 800b134:	e007      	b.n	800b146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b136:	4b07      	ldr	r3, [pc, #28]	; (800b154 <prvInsertTimerInActiveList+0x80>)
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	3304      	adds	r3, #4
 800b13e:	4619      	mov	r1, r3
 800b140:	4610      	mov	r0, r2
 800b142:	f7fe f974 	bl	800942e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b146:	697b      	ldr	r3, [r7, #20]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	200051b0 	.word	0x200051b0
 800b154:	200051ac 	.word	0x200051ac

0800b158 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b08e      	sub	sp, #56	; 0x38
 800b15c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b15e:	e0c6      	b.n	800b2ee <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	da17      	bge.n	800b196 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b166:	1d3b      	adds	r3, r7, #4
 800b168:	3304      	adds	r3, #4
 800b16a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d109      	bne.n	800b186 <prvProcessReceivedCommands+0x2e>
 800b172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	61fb      	str	r3, [r7, #28]
 800b184:	e7fe      	b.n	800b184 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b18c:	6850      	ldr	r0, [r2, #4]
 800b18e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b190:	6892      	ldr	r2, [r2, #8]
 800b192:	4611      	mov	r1, r2
 800b194:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f2c0 80a7 	blt.w	800b2ec <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a4:	695b      	ldr	r3, [r3, #20]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d004      	beq.n	800b1b4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fe f976 	bl	80094a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1b4:	463b      	mov	r3, r7
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7ff ff6c 	bl	800b094 <prvSampleTimeNow>
 800b1bc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2b09      	cmp	r3, #9
 800b1c2:	f200 8094 	bhi.w	800b2ee <prvProcessReceivedCommands+0x196>
 800b1c6:	a201      	add	r2, pc, #4	; (adr r2, 800b1cc <prvProcessReceivedCommands+0x74>)
 800b1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1cc:	0800b1f5 	.word	0x0800b1f5
 800b1d0:	0800b1f5 	.word	0x0800b1f5
 800b1d4:	0800b1f5 	.word	0x0800b1f5
 800b1d8:	0800b267 	.word	0x0800b267
 800b1dc:	0800b27b 	.word	0x0800b27b
 800b1e0:	0800b2c3 	.word	0x0800b2c3
 800b1e4:	0800b1f5 	.word	0x0800b1f5
 800b1e8:	0800b1f5 	.word	0x0800b1f5
 800b1ec:	0800b267 	.word	0x0800b267
 800b1f0:	0800b27b 	.word	0x0800b27b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1fa:	f043 0301 	orr.w	r3, r3, #1
 800b1fe:	b2da      	uxtb	r2, r3
 800b200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b202:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b206:	68ba      	ldr	r2, [r7, #8]
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	699b      	ldr	r3, [r3, #24]
 800b20c:	18d1      	adds	r1, r2, r3
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b214:	f7ff ff5e 	bl	800b0d4 <prvInsertTimerInActiveList>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d067      	beq.n	800b2ee <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b220:	6a1b      	ldr	r3, [r3, #32]
 800b222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b224:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b22c:	f003 0304 	and.w	r3, r3, #4
 800b230:	2b00      	cmp	r3, #0
 800b232:	d05c      	beq.n	800b2ee <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b238:	699b      	ldr	r3, [r3, #24]
 800b23a:	441a      	add	r2, r3
 800b23c:	2300      	movs	r3, #0
 800b23e:	9300      	str	r3, [sp, #0]
 800b240:	2300      	movs	r3, #0
 800b242:	2100      	movs	r1, #0
 800b244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b246:	f7ff fe09 	bl	800ae5c <xTimerGenericCommand>
 800b24a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d14d      	bne.n	800b2ee <prvProcessReceivedCommands+0x196>
 800b252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b256:	f383 8811 	msr	BASEPRI, r3
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	61bb      	str	r3, [r7, #24]
 800b264:	e7fe      	b.n	800b264 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b26c:	f023 0301 	bic.w	r3, r3, #1
 800b270:	b2da      	uxtb	r2, r3
 800b272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b274:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b278:	e039      	b.n	800b2ee <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b280:	f043 0301 	orr.w	r3, r3, #1
 800b284:	b2da      	uxtb	r2, r3
 800b286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b288:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b290:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b294:	699b      	ldr	r3, [r3, #24]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d109      	bne.n	800b2ae <prvProcessReceivedCommands+0x156>
 800b29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	617b      	str	r3, [r7, #20]
 800b2ac:	e7fe      	b.n	800b2ac <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b0:	699a      	ldr	r2, [r3, #24]
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b4:	18d1      	adds	r1, r2, r3
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2bc:	f7ff ff0a 	bl	800b0d4 <prvInsertTimerInActiveList>
					break;
 800b2c0:	e015      	b.n	800b2ee <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2c8:	f003 0302 	and.w	r3, r3, #2
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d103      	bne.n	800b2d8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800b2d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2d2:	f000 fbe7 	bl	800baa4 <vPortFree>
 800b2d6:	e00a      	b.n	800b2ee <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2de:	f023 0301 	bic.w	r3, r3, #1
 800b2e2:	b2da      	uxtb	r2, r3
 800b2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b2ea:	e000      	b.n	800b2ee <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b2ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2ee:	4b07      	ldr	r3, [pc, #28]	; (800b30c <prvProcessReceivedCommands+0x1b4>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	1d39      	adds	r1, r7, #4
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7fe fb88 	bl	8009a0c <xQueueReceive>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f47f af2e 	bne.w	800b160 <prvProcessReceivedCommands+0x8>
	}
}
 800b304:	bf00      	nop
 800b306:	3730      	adds	r7, #48	; 0x30
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	200051b4 	.word	0x200051b4

0800b310 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b088      	sub	sp, #32
 800b314:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b316:	e047      	b.n	800b3a8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b318:	4b2d      	ldr	r3, [pc, #180]	; (800b3d0 <prvSwitchTimerLists+0xc0>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b322:	4b2b      	ldr	r3, [pc, #172]	; (800b3d0 <prvSwitchTimerLists+0xc0>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	3304      	adds	r3, #4
 800b330:	4618      	mov	r0, r3
 800b332:	f7fe f8b5 	bl	80094a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b344:	f003 0304 	and.w	r3, r3, #4
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d02d      	beq.n	800b3a8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	699b      	ldr	r3, [r3, #24]
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	4413      	add	r3, r2
 800b354:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d90e      	bls.n	800b37c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b36a:	4b19      	ldr	r3, [pc, #100]	; (800b3d0 <prvSwitchTimerLists+0xc0>)
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	3304      	adds	r3, #4
 800b372:	4619      	mov	r1, r3
 800b374:	4610      	mov	r0, r2
 800b376:	f7fe f85a 	bl	800942e <vListInsert>
 800b37a:	e015      	b.n	800b3a8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b37c:	2300      	movs	r3, #0
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	2300      	movs	r3, #0
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	2100      	movs	r1, #0
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f7ff fd68 	bl	800ae5c <xTimerGenericCommand>
 800b38c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d109      	bne.n	800b3a8 <prvSwitchTimerLists+0x98>
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	603b      	str	r3, [r7, #0]
 800b3a6:	e7fe      	b.n	800b3a6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3a8:	4b09      	ldr	r3, [pc, #36]	; (800b3d0 <prvSwitchTimerLists+0xc0>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1b2      	bne.n	800b318 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3b2:	4b07      	ldr	r3, [pc, #28]	; (800b3d0 <prvSwitchTimerLists+0xc0>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3b8:	4b06      	ldr	r3, [pc, #24]	; (800b3d4 <prvSwitchTimerLists+0xc4>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a04      	ldr	r2, [pc, #16]	; (800b3d0 <prvSwitchTimerLists+0xc0>)
 800b3be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3c0:	4a04      	ldr	r2, [pc, #16]	; (800b3d4 <prvSwitchTimerLists+0xc4>)
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	6013      	str	r3, [r2, #0]
}
 800b3c6:	bf00      	nop
 800b3c8:	3718      	adds	r7, #24
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	200051ac 	.word	0x200051ac
 800b3d4:	200051b0 	.word	0x200051b0

0800b3d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b3de:	f000 f985 	bl	800b6ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b3e2:	4b15      	ldr	r3, [pc, #84]	; (800b438 <prvCheckForValidListAndQueue+0x60>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d120      	bne.n	800b42c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b3ea:	4814      	ldr	r0, [pc, #80]	; (800b43c <prvCheckForValidListAndQueue+0x64>)
 800b3ec:	f7fd ffce 	bl	800938c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b3f0:	4813      	ldr	r0, [pc, #76]	; (800b440 <prvCheckForValidListAndQueue+0x68>)
 800b3f2:	f7fd ffcb 	bl	800938c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b3f6:	4b13      	ldr	r3, [pc, #76]	; (800b444 <prvCheckForValidListAndQueue+0x6c>)
 800b3f8:	4a10      	ldr	r2, [pc, #64]	; (800b43c <prvCheckForValidListAndQueue+0x64>)
 800b3fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b3fc:	4b12      	ldr	r3, [pc, #72]	; (800b448 <prvCheckForValidListAndQueue+0x70>)
 800b3fe:	4a10      	ldr	r2, [pc, #64]	; (800b440 <prvCheckForValidListAndQueue+0x68>)
 800b400:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b402:	2300      	movs	r3, #0
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	4b11      	ldr	r3, [pc, #68]	; (800b44c <prvCheckForValidListAndQueue+0x74>)
 800b408:	4a11      	ldr	r2, [pc, #68]	; (800b450 <prvCheckForValidListAndQueue+0x78>)
 800b40a:	2110      	movs	r1, #16
 800b40c:	200a      	movs	r0, #10
 800b40e:	f7fe f8d9 	bl	80095c4 <xQueueGenericCreateStatic>
 800b412:	4602      	mov	r2, r0
 800b414:	4b08      	ldr	r3, [pc, #32]	; (800b438 <prvCheckForValidListAndQueue+0x60>)
 800b416:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b418:	4b07      	ldr	r3, [pc, #28]	; (800b438 <prvCheckForValidListAndQueue+0x60>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d005      	beq.n	800b42c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b420:	4b05      	ldr	r3, [pc, #20]	; (800b438 <prvCheckForValidListAndQueue+0x60>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	490b      	ldr	r1, [pc, #44]	; (800b454 <prvCheckForValidListAndQueue+0x7c>)
 800b426:	4618      	mov	r0, r3
 800b428:	f7fe fcdc 	bl	8009de4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b42c:	f000 f98c 	bl	800b748 <vPortExitCritical>
}
 800b430:	bf00      	nop
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	200051b4 	.word	0x200051b4
 800b43c:	20005184 	.word	0x20005184
 800b440:	20005198 	.word	0x20005198
 800b444:	200051ac 	.word	0x200051ac
 800b448:	200051b0 	.word	0x200051b0
 800b44c:	20005260 	.word	0x20005260
 800b450:	200051c0 	.word	0x200051c0
 800b454:	08017ee8 	.word	0x08017ee8

0800b458 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b08a      	sub	sp, #40	; 0x28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
 800b464:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800b466:	f06f 0301 	mvn.w	r3, #1
 800b46a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b478:	4b06      	ldr	r3, [pc, #24]	; (800b494 <xTimerPendFunctionCallFromISR+0x3c>)
 800b47a:	6818      	ldr	r0, [r3, #0]
 800b47c:	f107 0114 	add.w	r1, r7, #20
 800b480:	2300      	movs	r3, #0
 800b482:	683a      	ldr	r2, [r7, #0]
 800b484:	f7fe fa2e 	bl	80098e4 <xQueueGenericSendFromISR>
 800b488:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3728      	adds	r7, #40	; 0x28
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	200051b4 	.word	0x200051b4

0800b498 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	3b04      	subs	r3, #4
 800b4a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b4b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	3b04      	subs	r3, #4
 800b4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	f023 0201 	bic.w	r2, r3, #1
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	3b04      	subs	r3, #4
 800b4c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4c8:	4a0c      	ldr	r2, [pc, #48]	; (800b4fc <pxPortInitialiseStack+0x64>)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3b14      	subs	r3, #20
 800b4d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	3b04      	subs	r3, #4
 800b4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f06f 0202 	mvn.w	r2, #2
 800b4e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	3b20      	subs	r3, #32
 800b4ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3714      	adds	r7, #20
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	0800b501 	.word	0x0800b501

0800b500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b506:	2300      	movs	r3, #0
 800b508:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b50a:	4b11      	ldr	r3, [pc, #68]	; (800b550 <prvTaskExitError+0x50>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b512:	d009      	beq.n	800b528 <prvTaskExitError+0x28>
 800b514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b518:	f383 8811 	msr	BASEPRI, r3
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	60fb      	str	r3, [r7, #12]
 800b526:	e7fe      	b.n	800b526 <prvTaskExitError+0x26>
 800b528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52c:	f383 8811 	msr	BASEPRI, r3
 800b530:	f3bf 8f6f 	isb	sy
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b53a:	bf00      	nop
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d0fc      	beq.n	800b53c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b542:	bf00      	nop
 800b544:	3714      	adds	r7, #20
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	200012fc 	.word	0x200012fc
	...

0800b560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b560:	4b07      	ldr	r3, [pc, #28]	; (800b580 <pxCurrentTCBConst2>)
 800b562:	6819      	ldr	r1, [r3, #0]
 800b564:	6808      	ldr	r0, [r1, #0]
 800b566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56a:	f380 8809 	msr	PSP, r0
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f04f 0000 	mov.w	r0, #0
 800b576:	f380 8811 	msr	BASEPRI, r0
 800b57a:	4770      	bx	lr
 800b57c:	f3af 8000 	nop.w

0800b580 <pxCurrentTCBConst2>:
 800b580:	20004c84 	.word	0x20004c84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b584:	bf00      	nop
 800b586:	bf00      	nop

0800b588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b588:	4808      	ldr	r0, [pc, #32]	; (800b5ac <prvPortStartFirstTask+0x24>)
 800b58a:	6800      	ldr	r0, [r0, #0]
 800b58c:	6800      	ldr	r0, [r0, #0]
 800b58e:	f380 8808 	msr	MSP, r0
 800b592:	f04f 0000 	mov.w	r0, #0
 800b596:	f380 8814 	msr	CONTROL, r0
 800b59a:	b662      	cpsie	i
 800b59c:	b661      	cpsie	f
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	df00      	svc	0
 800b5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5aa:	bf00      	nop
 800b5ac:	e000ed08 	.word	0xe000ed08

0800b5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5b6:	4b44      	ldr	r3, [pc, #272]	; (800b6c8 <xPortStartScheduler+0x118>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a44      	ldr	r2, [pc, #272]	; (800b6cc <xPortStartScheduler+0x11c>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d109      	bne.n	800b5d4 <xPortStartScheduler+0x24>
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	613b      	str	r3, [r7, #16]
 800b5d2:	e7fe      	b.n	800b5d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5d4:	4b3c      	ldr	r3, [pc, #240]	; (800b6c8 <xPortStartScheduler+0x118>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4a3d      	ldr	r2, [pc, #244]	; (800b6d0 <xPortStartScheduler+0x120>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d109      	bne.n	800b5f2 <xPortStartScheduler+0x42>
 800b5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	60fb      	str	r3, [r7, #12]
 800b5f0:	e7fe      	b.n	800b5f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5f2:	4b38      	ldr	r3, [pc, #224]	; (800b6d4 <xPortStartScheduler+0x124>)
 800b5f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	22ff      	movs	r2, #255	; 0xff
 800b602:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b60c:	78fb      	ldrb	r3, [r7, #3]
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b614:	b2da      	uxtb	r2, r3
 800b616:	4b30      	ldr	r3, [pc, #192]	; (800b6d8 <xPortStartScheduler+0x128>)
 800b618:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b61a:	4b30      	ldr	r3, [pc, #192]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b61c:	2207      	movs	r2, #7
 800b61e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b620:	e009      	b.n	800b636 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b622:	4b2e      	ldr	r3, [pc, #184]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	3b01      	subs	r3, #1
 800b628:	4a2c      	ldr	r2, [pc, #176]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b62a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b62c:	78fb      	ldrb	r3, [r7, #3]
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	005b      	lsls	r3, r3, #1
 800b632:	b2db      	uxtb	r3, r3
 800b634:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b636:	78fb      	ldrb	r3, [r7, #3]
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b63e:	2b80      	cmp	r3, #128	; 0x80
 800b640:	d0ef      	beq.n	800b622 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b642:	4b26      	ldr	r3, [pc, #152]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f1c3 0307 	rsb	r3, r3, #7
 800b64a:	2b04      	cmp	r3, #4
 800b64c:	d009      	beq.n	800b662 <xPortStartScheduler+0xb2>
 800b64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	60bb      	str	r3, [r7, #8]
 800b660:	e7fe      	b.n	800b660 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b662:	4b1e      	ldr	r3, [pc, #120]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	021b      	lsls	r3, r3, #8
 800b668:	4a1c      	ldr	r2, [pc, #112]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b66a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b66c:	4b1b      	ldr	r3, [pc, #108]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b674:	4a19      	ldr	r2, [pc, #100]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b676:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	b2da      	uxtb	r2, r3
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b680:	4b17      	ldr	r3, [pc, #92]	; (800b6e0 <xPortStartScheduler+0x130>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a16      	ldr	r2, [pc, #88]	; (800b6e0 <xPortStartScheduler+0x130>)
 800b686:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b68a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b68c:	4b14      	ldr	r3, [pc, #80]	; (800b6e0 <xPortStartScheduler+0x130>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a13      	ldr	r2, [pc, #76]	; (800b6e0 <xPortStartScheduler+0x130>)
 800b692:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b696:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b698:	f000 f8d6 	bl	800b848 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b69c:	4b11      	ldr	r3, [pc, #68]	; (800b6e4 <xPortStartScheduler+0x134>)
 800b69e:	2200      	movs	r2, #0
 800b6a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b6a2:	f000 f8f5 	bl	800b890 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b6a6:	4b10      	ldr	r3, [pc, #64]	; (800b6e8 <xPortStartScheduler+0x138>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a0f      	ldr	r2, [pc, #60]	; (800b6e8 <xPortStartScheduler+0x138>)
 800b6ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b6b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b6b2:	f7ff ff69 	bl	800b588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b6b6:	f7fe ff99 	bl	800a5ec <vTaskSwitchContext>
	prvTaskExitError();
 800b6ba:	f7ff ff21 	bl	800b500 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	e000ed00 	.word	0xe000ed00
 800b6cc:	410fc271 	.word	0x410fc271
 800b6d0:	410fc270 	.word	0x410fc270
 800b6d4:	e000e400 	.word	0xe000e400
 800b6d8:	200052b0 	.word	0x200052b0
 800b6dc:	200052b4 	.word	0x200052b4
 800b6e0:	e000ed20 	.word	0xe000ed20
 800b6e4:	200012fc 	.word	0x200012fc
 800b6e8:	e000ef34 	.word	0xe000ef34

0800b6ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f6:	f383 8811 	msr	BASEPRI, r3
 800b6fa:	f3bf 8f6f 	isb	sy
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b704:	4b0e      	ldr	r3, [pc, #56]	; (800b740 <vPortEnterCritical+0x54>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	3301      	adds	r3, #1
 800b70a:	4a0d      	ldr	r2, [pc, #52]	; (800b740 <vPortEnterCritical+0x54>)
 800b70c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b70e:	4b0c      	ldr	r3, [pc, #48]	; (800b740 <vPortEnterCritical+0x54>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d10e      	bne.n	800b734 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b716:	4b0b      	ldr	r3, [pc, #44]	; (800b744 <vPortEnterCritical+0x58>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d009      	beq.n	800b734 <vPortEnterCritical+0x48>
 800b720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b724:	f383 8811 	msr	BASEPRI, r3
 800b728:	f3bf 8f6f 	isb	sy
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	603b      	str	r3, [r7, #0]
 800b732:	e7fe      	b.n	800b732 <vPortEnterCritical+0x46>
	}
}
 800b734:	bf00      	nop
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr
 800b740:	200012fc 	.word	0x200012fc
 800b744:	e000ed04 	.word	0xe000ed04

0800b748 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b74e:	4b11      	ldr	r3, [pc, #68]	; (800b794 <vPortExitCritical+0x4c>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d109      	bne.n	800b76a <vPortExitCritical+0x22>
 800b756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75a:	f383 8811 	msr	BASEPRI, r3
 800b75e:	f3bf 8f6f 	isb	sy
 800b762:	f3bf 8f4f 	dsb	sy
 800b766:	607b      	str	r3, [r7, #4]
 800b768:	e7fe      	b.n	800b768 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b76a:	4b0a      	ldr	r3, [pc, #40]	; (800b794 <vPortExitCritical+0x4c>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3b01      	subs	r3, #1
 800b770:	4a08      	ldr	r2, [pc, #32]	; (800b794 <vPortExitCritical+0x4c>)
 800b772:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b774:	4b07      	ldr	r3, [pc, #28]	; (800b794 <vPortExitCritical+0x4c>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d104      	bne.n	800b786 <vPortExitCritical+0x3e>
 800b77c:	2300      	movs	r3, #0
 800b77e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	200012fc 	.word	0x200012fc
	...

0800b7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b7a0:	f3ef 8009 	mrs	r0, PSP
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	4b15      	ldr	r3, [pc, #84]	; (800b800 <pxCurrentTCBConst>)
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	f01e 0f10 	tst.w	lr, #16
 800b7b0:	bf08      	it	eq
 800b7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ba:	6010      	str	r0, [r2, #0]
 800b7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b7c4:	f380 8811 	msr	BASEPRI, r0
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f7fe ff0c 	bl	800a5ec <vTaskSwitchContext>
 800b7d4:	f04f 0000 	mov.w	r0, #0
 800b7d8:	f380 8811 	msr	BASEPRI, r0
 800b7dc:	bc09      	pop	{r0, r3}
 800b7de:	6819      	ldr	r1, [r3, #0]
 800b7e0:	6808      	ldr	r0, [r1, #0]
 800b7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e6:	f01e 0f10 	tst.w	lr, #16
 800b7ea:	bf08      	it	eq
 800b7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7f0:	f380 8809 	msr	PSP, r0
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	f3af 8000 	nop.w

0800b800 <pxCurrentTCBConst>:
 800b800:	20004c84 	.word	0x20004c84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b804:	bf00      	nop
 800b806:	bf00      	nop

0800b808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b820:	f7fe fe2c 	bl	800a47c <xTaskIncrementTick>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d003      	beq.n	800b832 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b82a:	4b06      	ldr	r3, [pc, #24]	; (800b844 <SysTick_Handler+0x3c>)
 800b82c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b830:	601a      	str	r2, [r3, #0]
 800b832:	2300      	movs	r3, #0
 800b834:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b83c:	bf00      	nop
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	e000ed04 	.word	0xe000ed04

0800b848 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b848:	b480      	push	{r7}
 800b84a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b84c:	4b0b      	ldr	r3, [pc, #44]	; (800b87c <vPortSetupTimerInterrupt+0x34>)
 800b84e:	2200      	movs	r2, #0
 800b850:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b852:	4b0b      	ldr	r3, [pc, #44]	; (800b880 <vPortSetupTimerInterrupt+0x38>)
 800b854:	2200      	movs	r2, #0
 800b856:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b858:	4b0a      	ldr	r3, [pc, #40]	; (800b884 <vPortSetupTimerInterrupt+0x3c>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a0a      	ldr	r2, [pc, #40]	; (800b888 <vPortSetupTimerInterrupt+0x40>)
 800b85e:	fba2 2303 	umull	r2, r3, r2, r3
 800b862:	099b      	lsrs	r3, r3, #6
 800b864:	4a09      	ldr	r2, [pc, #36]	; (800b88c <vPortSetupTimerInterrupt+0x44>)
 800b866:	3b01      	subs	r3, #1
 800b868:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b86a:	4b04      	ldr	r3, [pc, #16]	; (800b87c <vPortSetupTimerInterrupt+0x34>)
 800b86c:	2207      	movs	r2, #7
 800b86e:	601a      	str	r2, [r3, #0]
}
 800b870:	bf00      	nop
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	e000e010 	.word	0xe000e010
 800b880:	e000e018 	.word	0xe000e018
 800b884:	20001228 	.word	0x20001228
 800b888:	10624dd3 	.word	0x10624dd3
 800b88c:	e000e014 	.word	0xe000e014

0800b890 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b890:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b8a0 <vPortEnableVFP+0x10>
 800b894:	6801      	ldr	r1, [r0, #0]
 800b896:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b89a:	6001      	str	r1, [r0, #0]
 800b89c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b89e:	bf00      	nop
 800b8a0:	e000ed88 	.word	0xe000ed88

0800b8a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b8aa:	f3ef 8305 	mrs	r3, IPSR
 800b8ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2b0f      	cmp	r3, #15
 800b8b4:	d913      	bls.n	800b8de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b8b6:	4a16      	ldr	r2, [pc, #88]	; (800b910 <vPortValidateInterruptPriority+0x6c>)
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8c0:	4b14      	ldr	r3, [pc, #80]	; (800b914 <vPortValidateInterruptPriority+0x70>)
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	7afa      	ldrb	r2, [r7, #11]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d209      	bcs.n	800b8de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	607b      	str	r3, [r7, #4]
 800b8dc:	e7fe      	b.n	800b8dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8de:	4b0e      	ldr	r3, [pc, #56]	; (800b918 <vPortValidateInterruptPriority+0x74>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8e6:	4b0d      	ldr	r3, [pc, #52]	; (800b91c <vPortValidateInterruptPriority+0x78>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d909      	bls.n	800b902 <vPortValidateInterruptPriority+0x5e>
 800b8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	603b      	str	r3, [r7, #0]
 800b900:	e7fe      	b.n	800b900 <vPortValidateInterruptPriority+0x5c>
	}
 800b902:	bf00      	nop
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	e000e3f0 	.word	0xe000e3f0
 800b914:	200052b0 	.word	0x200052b0
 800b918:	e000ed0c 	.word	0xe000ed0c
 800b91c:	200052b4 	.word	0x200052b4

0800b920 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b08a      	sub	sp, #40	; 0x28
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b928:	2300      	movs	r3, #0
 800b92a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b92c:	f7fe fcec 	bl	800a308 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b930:	4b57      	ldr	r3, [pc, #348]	; (800ba90 <pvPortMalloc+0x170>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d101      	bne.n	800b93c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b938:	f000 f90c 	bl	800bb54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b93c:	4b55      	ldr	r3, [pc, #340]	; (800ba94 <pvPortMalloc+0x174>)
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4013      	ands	r3, r2
 800b944:	2b00      	cmp	r3, #0
 800b946:	f040 808c 	bne.w	800ba62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d01c      	beq.n	800b98a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b950:	2208      	movs	r2, #8
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4413      	add	r3, r2
 800b956:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f003 0307 	and.w	r3, r3, #7
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d013      	beq.n	800b98a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f023 0307 	bic.w	r3, r3, #7
 800b968:	3308      	adds	r3, #8
 800b96a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f003 0307 	and.w	r3, r3, #7
 800b972:	2b00      	cmp	r3, #0
 800b974:	d009      	beq.n	800b98a <pvPortMalloc+0x6a>
 800b976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	617b      	str	r3, [r7, #20]
 800b988:	e7fe      	b.n	800b988 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d068      	beq.n	800ba62 <pvPortMalloc+0x142>
 800b990:	4b41      	ldr	r3, [pc, #260]	; (800ba98 <pvPortMalloc+0x178>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	429a      	cmp	r2, r3
 800b998:	d863      	bhi.n	800ba62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b99a:	4b40      	ldr	r3, [pc, #256]	; (800ba9c <pvPortMalloc+0x17c>)
 800b99c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b99e:	4b3f      	ldr	r3, [pc, #252]	; (800ba9c <pvPortMalloc+0x17c>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9a4:	e004      	b.n	800b9b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d903      	bls.n	800b9c2 <pvPortMalloc+0xa2>
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1f1      	bne.n	800b9a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9c2:	4b33      	ldr	r3, [pc, #204]	; (800ba90 <pvPortMalloc+0x170>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d04a      	beq.n	800ba62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9cc:	6a3b      	ldr	r3, [r7, #32]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2208      	movs	r2, #8
 800b9d2:	4413      	add	r3, r2
 800b9d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	6a3b      	ldr	r3, [r7, #32]
 800b9dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e0:	685a      	ldr	r2, [r3, #4]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	1ad2      	subs	r2, r2, r3
 800b9e6:	2308      	movs	r3, #8
 800b9e8:	005b      	lsls	r3, r3, #1
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d91e      	bls.n	800ba2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	f003 0307 	and.w	r3, r3, #7
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d009      	beq.n	800ba14 <pvPortMalloc+0xf4>
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	613b      	str	r3, [r7, #16]
 800ba12:	e7fe      	b.n	800ba12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba16:	685a      	ldr	r2, [r3, #4]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	1ad2      	subs	r2, r2, r3
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba26:	69b8      	ldr	r0, [r7, #24]
 800ba28:	f000 f8f6 	bl	800bc18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba2c:	4b1a      	ldr	r3, [pc, #104]	; (800ba98 <pvPortMalloc+0x178>)
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	4a18      	ldr	r2, [pc, #96]	; (800ba98 <pvPortMalloc+0x178>)
 800ba38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba3a:	4b17      	ldr	r3, [pc, #92]	; (800ba98 <pvPortMalloc+0x178>)
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	4b18      	ldr	r3, [pc, #96]	; (800baa0 <pvPortMalloc+0x180>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d203      	bcs.n	800ba4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba46:	4b14      	ldr	r3, [pc, #80]	; (800ba98 <pvPortMalloc+0x178>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a15      	ldr	r2, [pc, #84]	; (800baa0 <pvPortMalloc+0x180>)
 800ba4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba50:	685a      	ldr	r2, [r3, #4]
 800ba52:	4b10      	ldr	r3, [pc, #64]	; (800ba94 <pvPortMalloc+0x174>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	431a      	orrs	r2, r3
 800ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5e:	2200      	movs	r2, #0
 800ba60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba62:	f7fe fc5f 	bl	800a324 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba66:	69fb      	ldr	r3, [r7, #28]
 800ba68:	f003 0307 	and.w	r3, r3, #7
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d009      	beq.n	800ba84 <pvPortMalloc+0x164>
 800ba70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba74:	f383 8811 	msr	BASEPRI, r3
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	60fb      	str	r3, [r7, #12]
 800ba82:	e7fe      	b.n	800ba82 <pvPortMalloc+0x162>
	return pvReturn;
 800ba84:	69fb      	ldr	r3, [r7, #28]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3728      	adds	r7, #40	; 0x28
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	20008ec0 	.word	0x20008ec0
 800ba94:	20008ecc 	.word	0x20008ecc
 800ba98:	20008ec4 	.word	0x20008ec4
 800ba9c:	20008eb8 	.word	0x20008eb8
 800baa0:	20008ec8 	.word	0x20008ec8

0800baa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d046      	beq.n	800bb44 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bab6:	2308      	movs	r3, #8
 800bab8:	425b      	negs	r3, r3
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	4413      	add	r3, r2
 800babe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	685a      	ldr	r2, [r3, #4]
 800bac8:	4b20      	ldr	r3, [pc, #128]	; (800bb4c <vPortFree+0xa8>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4013      	ands	r3, r2
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d109      	bne.n	800bae6 <vPortFree+0x42>
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	60fb      	str	r3, [r7, #12]
 800bae4:	e7fe      	b.n	800bae4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d009      	beq.n	800bb02 <vPortFree+0x5e>
 800baee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	60bb      	str	r3, [r7, #8]
 800bb00:	e7fe      	b.n	800bb00 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	685a      	ldr	r2, [r3, #4]
 800bb06:	4b11      	ldr	r3, [pc, #68]	; (800bb4c <vPortFree+0xa8>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4013      	ands	r3, r2
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d019      	beq.n	800bb44 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d115      	bne.n	800bb44 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	685a      	ldr	r2, [r3, #4]
 800bb1c:	4b0b      	ldr	r3, [pc, #44]	; (800bb4c <vPortFree+0xa8>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	43db      	mvns	r3, r3
 800bb22:	401a      	ands	r2, r3
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb28:	f7fe fbee 	bl	800a308 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	685a      	ldr	r2, [r3, #4]
 800bb30:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <vPortFree+0xac>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4413      	add	r3, r2
 800bb36:	4a06      	ldr	r2, [pc, #24]	; (800bb50 <vPortFree+0xac>)
 800bb38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb3a:	6938      	ldr	r0, [r7, #16]
 800bb3c:	f000 f86c 	bl	800bc18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bb40:	f7fe fbf0 	bl	800a324 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb44:	bf00      	nop
 800bb46:	3718      	adds	r7, #24
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	20008ecc 	.word	0x20008ecc
 800bb50:	20008ec4 	.word	0x20008ec4

0800bb54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bb5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb60:	4b27      	ldr	r3, [pc, #156]	; (800bc00 <prvHeapInit+0xac>)
 800bb62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f003 0307 	and.w	r3, r3, #7
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00c      	beq.n	800bb88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3307      	adds	r3, #7
 800bb72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f023 0307 	bic.w	r3, r3, #7
 800bb7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	4a1f      	ldr	r2, [pc, #124]	; (800bc00 <prvHeapInit+0xac>)
 800bb84:	4413      	add	r3, r2
 800bb86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb8c:	4a1d      	ldr	r2, [pc, #116]	; (800bc04 <prvHeapInit+0xb0>)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb92:	4b1c      	ldr	r3, [pc, #112]	; (800bc04 <prvHeapInit+0xb0>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bba0:	2208      	movs	r2, #8
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	1a9b      	subs	r3, r3, r2
 800bba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f023 0307 	bic.w	r3, r3, #7
 800bbae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	4a15      	ldr	r2, [pc, #84]	; (800bc08 <prvHeapInit+0xb4>)
 800bbb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbb6:	4b14      	ldr	r3, [pc, #80]	; (800bc08 <prvHeapInit+0xb4>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbbe:	4b12      	ldr	r3, [pc, #72]	; (800bc08 <prvHeapInit+0xb4>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	1ad2      	subs	r2, r2, r3
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bbd4:	4b0c      	ldr	r3, [pc, #48]	; (800bc08 <prvHeapInit+0xb4>)
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	4a0a      	ldr	r2, [pc, #40]	; (800bc0c <prvHeapInit+0xb8>)
 800bbe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	4a09      	ldr	r2, [pc, #36]	; (800bc10 <prvHeapInit+0xbc>)
 800bbea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bbec:	4b09      	ldr	r3, [pc, #36]	; (800bc14 <prvHeapInit+0xc0>)
 800bbee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bbf2:	601a      	str	r2, [r3, #0]
}
 800bbf4:	bf00      	nop
 800bbf6:	3714      	adds	r7, #20
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	200052b8 	.word	0x200052b8
 800bc04:	20008eb8 	.word	0x20008eb8
 800bc08:	20008ec0 	.word	0x20008ec0
 800bc0c:	20008ec8 	.word	0x20008ec8
 800bc10:	20008ec4 	.word	0x20008ec4
 800bc14:	20008ecc 	.word	0x20008ecc

0800bc18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc20:	4b28      	ldr	r3, [pc, #160]	; (800bcc4 <prvInsertBlockIntoFreeList+0xac>)
 800bc22:	60fb      	str	r3, [r7, #12]
 800bc24:	e002      	b.n	800bc2c <prvInsertBlockIntoFreeList+0x14>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d8f7      	bhi.n	800bc26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	4413      	add	r3, r2
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d108      	bne.n	800bc5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	441a      	add	r2, r3
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	68ba      	ldr	r2, [r7, #8]
 800bc64:	441a      	add	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d118      	bne.n	800bca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	4b15      	ldr	r3, [pc, #84]	; (800bcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d00d      	beq.n	800bc96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	441a      	add	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	601a      	str	r2, [r3, #0]
 800bc94:	e008      	b.n	800bca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc96:	4b0c      	ldr	r3, [pc, #48]	; (800bcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	e003      	b.n	800bca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d002      	beq.n	800bcb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcb6:	bf00      	nop
 800bcb8:	3714      	adds	r7, #20
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	20008eb8 	.word	0x20008eb8
 800bcc8:	20008ec0 	.word	0x20008ec0

0800bccc <compass_init>:
static MMC_Output_t data_out;



void compass_init(void)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b082      	sub	sp, #8
 800bcd0:	af00      	add	r7, sp, #0
	float_t freq = SAMPLE_FREQ;
 800bcd2:	4b2b      	ldr	r3, [pc, #172]	; (800bd80 <compass_init+0xb4>)
 800bcd4:	603b      	str	r3, [r7, #0]

	MEC_state_t orientation = MEC_ENABLE;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	71fb      	strb	r3, [r7, #7]
	MEC_state_t virtGyro = MEC_DISABLE;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	71bb      	strb	r3, [r7, #6]
	MEC_state_t gravity = MEC_DISABLE;
 800bcde:	2300      	movs	r3, #0
 800bce0:	717b      	strb	r3, [r7, #5]
	MEC_state_t linearAcc = MEC_ENABLE;
 800bce2:	2301      	movs	r3, #1
 800bce4:	713b      	strb	r3, [r7, #4]


	/* E-Compass API initialization function */
	MotionEC_Initialize(&freq);
 800bce6:	463b      	mov	r3, r7
 800bce8:	4618      	mov	r0, r3
 800bcea:	f000 fdb9 	bl	800c860 <MotionEC_Initialize>
	MotionGC_Initialize(&freq);
 800bcee:	463b      	mov	r3, r7
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f001 fb5b 	bl	800d3ac <MotionGC_Initialize>
	MotionAC_Initialize(1);
 800bcf6:	2001      	movs	r0, #1
 800bcf8:	f001 fa62 	bl	800d1c0 <MotionAC_Initialize>

	MotionMC_Initialize(100,1);
 800bcfc:	2101      	movs	r1, #1
 800bcfe:	2064      	movs	r0, #100	; 0x64
 800bd00:	f006 fdd2 	bl	80128a8 <MotionMC_Initialize>
	MotionFX_initialize();
 800bd04:	f007 fc44 	bl	8013590 <MotionFX_initialize>
	/* Optional: Get version */
	MotionEC_GetLibVersion(lib_version_ec);
 800bd08:	481e      	ldr	r0, [pc, #120]	; (800bd84 <compass_init+0xb8>)
 800bd0a:	f001 fa35 	bl	800d178 <MotionEC_GetLibVersion>
	MotionAC_GetLibVersion(lib_version_ac);
 800bd0e:	481e      	ldr	r0, [pc, #120]	; (800bd88 <compass_init+0xbc>)
 800bd10:	f001 fb28 	bl	800d364 <MotionAC_GetLibVersion>
	MotionGC_GetLibVersion(lib_version_gc);
 800bd14:	481d      	ldr	r0, [pc, #116]	; (800bd8c <compass_init+0xc0>)
 800bd16:	f001 fbd7 	bl	800d4c8 <MotionGC_GetLibVersion>
	MotionMC_GetLibVersion(lib_version_mc);
 800bd1a:	481d      	ldr	r0, [pc, #116]	; (800bd90 <compass_init+0xc4>)
 800bd1c:	f007 f852 	bl	8012dc4 <MotionMC_GetLibVersion>
	MotionFX_GetLibVersion(lib_version_fx);
 800bd20:	481c      	ldr	r0, [pc, #112]	; (800bd94 <compass_init+0xc8>)
 800bd22:	f007 fe97 	bl	8013a54 <MotionFX_GetLibVersion>

	printf("\n\r%s",lib_version_ec);
 800bd26:	4917      	ldr	r1, [pc, #92]	; (800bd84 <compass_init+0xb8>)
 800bd28:	481b      	ldr	r0, [pc, #108]	; (800bd98 <compass_init+0xcc>)
 800bd2a:	f008 fb53 	bl	80143d4 <iprintf>
	printf("\n\r%s",lib_version_ac);
 800bd2e:	4916      	ldr	r1, [pc, #88]	; (800bd88 <compass_init+0xbc>)
 800bd30:	4819      	ldr	r0, [pc, #100]	; (800bd98 <compass_init+0xcc>)
 800bd32:	f008 fb4f 	bl	80143d4 <iprintf>
	printf("\n\r%s",lib_version_gc);
 800bd36:	4915      	ldr	r1, [pc, #84]	; (800bd8c <compass_init+0xc0>)
 800bd38:	4817      	ldr	r0, [pc, #92]	; (800bd98 <compass_init+0xcc>)
 800bd3a:	f008 fb4b 	bl	80143d4 <iprintf>
	printf("\n\r%s",lib_version_mc);
 800bd3e:	4914      	ldr	r1, [pc, #80]	; (800bd90 <compass_init+0xc4>)
 800bd40:	4815      	ldr	r0, [pc, #84]	; (800bd98 <compass_init+0xcc>)
 800bd42:	f008 fb47 	bl	80143d4 <iprintf>
	printf("\n\r%s",lib_version_fx);
 800bd46:	4913      	ldr	r1, [pc, #76]	; (800bd94 <compass_init+0xc8>)
 800bd48:	4813      	ldr	r0, [pc, #76]	; (800bd98 <compass_init+0xcc>)
 800bd4a:	f008 fb43 	bl	80143d4 <iprintf>

	MotionEC_SetOrientationEnable(orientation);
 800bd4e:	79fb      	ldrb	r3, [r7, #7]
 800bd50:	4618      	mov	r0, r3
 800bd52:	f001 f9d9 	bl	800d108 <MotionEC_SetOrientationEnable>
	MotionEC_SetVirtualGyroEnable(virtGyro);
 800bd56:	79bb      	ldrb	r3, [r7, #6]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f001 f9e5 	bl	800d128 <MotionEC_SetVirtualGyroEnable>
	MotionEC_SetGravityEnable(gravity);
 800bd5e:	797b      	ldrb	r3, [r7, #5]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f001 f9f1 	bl	800d148 <MotionEC_SetGravityEnable>
	MotionEC_SetLinearAccEnable(linearAcc);
 800bd66:	793b      	ldrb	r3, [r7, #4]
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f001 f9fd 	bl	800d168 <MotionEC_SetLinearAccEnable>

	data_out.CalQuality = MMC_CALQSTATUSGOOD;
 800bd6e:	4b0b      	ldr	r3, [pc, #44]	; (800bd9c <compass_init+0xd0>)
 800bd70:	2203      	movs	r2, #3
 800bd72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

}
 800bd76:	bf00      	nop
 800bd78:	3708      	adds	r7, #8
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	41200000 	.word	0x41200000
 800bd84:	20008ed0 	.word	0x20008ed0
 800bd88:	20008ef4 	.word	0x20008ef4
 800bd8c:	20008f3c 	.word	0x20008f3c
 800bd90:	20008f60 	.word	0x20008f60
 800bd94:	20008f18 	.word	0x20008f18
 800bd98:	08017ef0 	.word	0x08017ef0
 800bd9c:	20008f84 	.word	0x20008f84

0800bda0 <setEcParameter>:

static void setEcParameter(POS_MOTION_SENSOR_Axes_t *acc, POS_MOTION_SENSOR_Axes_t *mag, MEC_input_t *in, float timeS)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	607a      	str	r2, [r7, #4]
 800bdac:	ed87 0a00 	vstr	s0, [r7]
	in->acc[0] = (float)((float)acc->x) / 1000;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	ee07 3a90 	vmov	s15, r3
 800bdb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bdbc:	eddf 6a28 	vldr	s13, [pc, #160]	; 800be60 <setEcParameter+0xc0>
 800bdc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	edc3 7a00 	vstr	s15, [r3]
	in->acc[1] = (float)acc->y / 1000;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	ee07 3a90 	vmov	s15, r3
 800bdd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bdd6:	eddf 6a22 	vldr	s13, [pc, #136]	; 800be60 <setEcParameter+0xc0>
 800bdda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	edc3 7a01 	vstr	s15, [r3, #4]
	in->acc[2] = (float)acc->z / 1000;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	ee07 3a90 	vmov	s15, r3
 800bdec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bdf0:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800be60 <setEcParameter+0xc0>
 800bdf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	edc3 7a02 	vstr	s15, [r3, #8]

	in->mag[0] = (float)mag->x / 50;
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	ee07 3a90 	vmov	s15, r3
 800be06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800be0a:	eddf 6a16 	vldr	s13, [pc, #88]	; 800be64 <setEcParameter+0xc4>
 800be0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	edc3 7a03 	vstr	s15, [r3, #12]
	in->mag[1] = (float)mag->y / 50;
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	ee07 3a90 	vmov	s15, r3
 800be20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800be24:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800be64 <setEcParameter+0xc4>
 800be28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	edc3 7a04 	vstr	s15, [r3, #16]
	in->mag[2] = (float)mag->z / 50;
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	ee07 3a90 	vmov	s15, r3
 800be3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800be3e:	eddf 6a09 	vldr	s13, [pc, #36]	; 800be64 <setEcParameter+0xc4>
 800be42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	edc3 7a05 	vstr	s15, [r3, #20]

	in->deltatime_s = timeS;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	683a      	ldr	r2, [r7, #0]
 800be50:	619a      	str	r2, [r3, #24]
}
 800be52:	bf00      	nop
 800be54:	3714      	adds	r7, #20
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	447a0000 	.word	0x447a0000
 800be64:	42480000 	.word	0x42480000

0800be68 <sensorCompensation>:

//	POS_MOTION_SENSOR_GetAxes(MAG_LIS2MDL, &MagAxes);


static void sensorCompensation(POS_MOTION_SENSORS no,POS_MOTION_SENSOR_Axes_t *ax)
{
 800be68:	b4b0      	push	{r4, r5, r7}
 800be6a:	b09f      	sub	sp, #124	; 0x7c
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	4603      	mov	r3, r0
 800be70:	6039      	str	r1, [r7, #0]
 800be72:	71fb      	strb	r3, [r7, #7]
	const POS_MOTION_SENSOR_Axes_t max[POS_MOTION_SENSORS_MAX] = {
 800be74:	4b3c      	ldr	r3, [pc, #240]	; (800bf68 <sensorCompensation+0x100>)
 800be76:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800be7a:	461d      	mov	r5, r3
 800be7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800be88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{992	,995	,1018},	//ACC_LSM6DSO = 0,
	{0	,0	,0},	//GYR_LSM6DSO,
	{0	,0	,0},	//MAG_LIS2MDL,
	{1008	,942	,1012}	//ACC_LIS2DW12,
	};
	const POS_MOTION_SENSOR_Axes_t min[POS_MOTION_SENSORS_MAX] = {
 800be8c:	4b37      	ldr	r3, [pc, #220]	; (800bf6c <sensorCompensation+0x104>)
 800be8e:	f107 0418 	add.w	r4, r7, #24
 800be92:	461d      	mov	r5, r3
 800be94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800bea0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{0	,0	,0},	//MAG_LIS2MDL,
	{-1005	,-1042	,-995}	//ACC_LIS2DW12,
	};
	POS_MOTION_SENSOR_Axes_t offset;

	offset.x = (max[no].x + min[no].x) / 2;
 800bea4:	79fa      	ldrb	r2, [r7, #7]
 800bea6:	4613      	mov	r3, r2
 800bea8:	005b      	lsls	r3, r3, #1
 800beaa:	4413      	add	r3, r2
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800beb2:	4413      	add	r3, r2
 800beb4:	3b30      	subs	r3, #48	; 0x30
 800beb6:	6819      	ldr	r1, [r3, #0]
 800beb8:	79fa      	ldrb	r2, [r7, #7]
 800beba:	4613      	mov	r3, r2
 800bebc:	005b      	lsls	r3, r3, #1
 800bebe:	4413      	add	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800bec6:	4413      	add	r3, r2
 800bec8:	3b60      	subs	r3, #96	; 0x60
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	440b      	add	r3, r1
 800bece:	0fda      	lsrs	r2, r3, #31
 800bed0:	4413      	add	r3, r2
 800bed2:	105b      	asrs	r3, r3, #1
 800bed4:	60fb      	str	r3, [r7, #12]
	offset.y = (max[no].y + min[no].y) / 2;
 800bed6:	79fa      	ldrb	r2, [r7, #7]
 800bed8:	4613      	mov	r3, r2
 800beda:	005b      	lsls	r3, r3, #1
 800bedc:	4413      	add	r3, r2
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800bee4:	4413      	add	r3, r2
 800bee6:	3b2c      	subs	r3, #44	; 0x2c
 800bee8:	6819      	ldr	r1, [r3, #0]
 800beea:	79fa      	ldrb	r2, [r7, #7]
 800beec:	4613      	mov	r3, r2
 800beee:	005b      	lsls	r3, r3, #1
 800bef0:	4413      	add	r3, r2
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800bef8:	4413      	add	r3, r2
 800befa:	3b5c      	subs	r3, #92	; 0x5c
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	440b      	add	r3, r1
 800bf00:	0fda      	lsrs	r2, r3, #31
 800bf02:	4413      	add	r3, r2
 800bf04:	105b      	asrs	r3, r3, #1
 800bf06:	613b      	str	r3, [r7, #16]
	offset.z = (max[no].z + min[no].z) / 2;
 800bf08:	79fa      	ldrb	r2, [r7, #7]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	005b      	lsls	r3, r3, #1
 800bf0e:	4413      	add	r3, r2
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800bf16:	4413      	add	r3, r2
 800bf18:	3b28      	subs	r3, #40	; 0x28
 800bf1a:	6819      	ldr	r1, [r3, #0]
 800bf1c:	79fa      	ldrb	r2, [r7, #7]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	005b      	lsls	r3, r3, #1
 800bf22:	4413      	add	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800bf2a:	4413      	add	r3, r2
 800bf2c:	3b58      	subs	r3, #88	; 0x58
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	440b      	add	r3, r1
 800bf32:	0fda      	lsrs	r2, r3, #31
 800bf34:	4413      	add	r3, r2
 800bf36:	105b      	asrs	r3, r3, #1
 800bf38:	617b      	str	r3, [r7, #20]
	ax->x -= offset.x;
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	1ad2      	subs	r2, r2, r3
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	601a      	str	r2, [r3, #0]
	ax->y -= offset.y;
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	685a      	ldr	r2, [r3, #4]
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	1ad2      	subs	r2, r2, r3
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	605a      	str	r2, [r3, #4]
	ax->z -= offset.z;
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	689a      	ldr	r2, [r3, #8]
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	1ad2      	subs	r2, r2, r3
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	609a      	str	r2, [r3, #8]
}
 800bf5e:	bf00      	nop
 800bf60:	377c      	adds	r7, #124	; 0x7c
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bcb0      	pop	{r4, r5, r7}
 800bf66:	4770      	bx	lr
 800bf68:	08017ef8 	.word	0x08017ef8
 800bf6c:	08017f28 	.word	0x08017f28

0800bf70 <GetCalibratedMagAxses>:

static int32_t GetCalibratedMagAxses(POS_MOTION_SENSORS sensor, POS_MOTION_SENSOR_Axes_t *Axes, int timeMs)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b08c      	sub	sp, #48	; 0x30
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	4603      	mov	r3, r0
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	607a      	str	r2, [r7, #4]
 800bf7c:	73fb      	strb	r3, [r7, #15]
	float mag_cal_x, mag_cal_y, mag_cal_z;

	static int32_t test = 0;

	/* Get magnetic field X/Y/Z in [uT] */
	ret = POS_MOTION_SENSOR_GetAxes(sensor, Axes);
 800bf7e:	7bfb      	ldrb	r3, [r7, #15]
 800bf80:	68b9      	ldr	r1, [r7, #8]
 800bf82:	4618      	mov	r0, r3
 800bf84:	f000 fa48 	bl	800c418 <POS_MOTION_SENSOR_GetAxes>
 800bf88:	62f8      	str	r0, [r7, #44]	; 0x2c

	//MEMS_Read_MagValue(&data_in.Mag[0], &data_in.Mag[1], &data_in.Mag[2]);
	data_in.Mag[0] = Axes->x;
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	ee07 3a90 	vmov	s15, r3
 800bf92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf96:	edc7 7a04 	vstr	s15, [r7, #16]
	data_in.Mag[1] = Axes->y;
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	ee07 3a90 	vmov	s15, r3
 800bfa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfa6:	edc7 7a05 	vstr	s15, [r7, #20]
	data_in.Mag[2] = Axes->z;
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	ee07 3a90 	vmov	s15, r3
 800bfb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfb6:	edc7 7a06 	vstr	s15, [r7, #24]
	/* Get current sample time in [ms] */
	data_in.TimeStamp = timeMs;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	61fb      	str	r3, [r7, #28]
	/* Magnetometer calibration algorithm update */
	MotionMC_Update(&data_in);
 800bfbe:	f107 0310 	add.w	r3, r7, #16
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f006 fdba 	bl	8012b3c <MotionMC_Update>
	/* Get the magnetometer calibration coefficients */
	MotionMC_GetCalParams(&data_out);
 800bfc8:	484d      	ldr	r0, [pc, #308]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800bfca:	f006 fea9 	bl	8012d20 <MotionMC_GetCalParams>
	/* Apply calibration coefficients */
	mag_cal_x = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[0][0]
 800bfce:	ed97 7a04 	vldr	s14, [r7, #16]
 800bfd2:	4b4b      	ldr	r3, [pc, #300]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800bfd4:	edd3 7a00 	vldr	s15, [r3]
 800bfd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bfdc:	4b48      	ldr	r3, [pc, #288]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800bfde:	edd3 7a03 	vldr	s15, [r3, #12]
 800bfe2:	ee27 7a27 	vmul.f32	s14, s14, s15
	 + (data_in.Mag[1] - data_out.HI_Bias[1]) * data_out.SF_Matrix[0][1]
 800bfe6:	edd7 6a05 	vldr	s13, [r7, #20]
 800bfea:	4b45      	ldr	r3, [pc, #276]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800bfec:	edd3 7a01 	vldr	s15, [r3, #4]
 800bff0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800bff4:	4b42      	ldr	r3, [pc, #264]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800bff6:	edd3 7a04 	vldr	s15, [r3, #16]
 800bffa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bffe:	ee37 7a27 	vadd.f32	s14, s14, s15
	 + (data_in.Mag[2] - data_out.HI_Bias[2]) * data_out.SF_Matrix[0][2]);
 800c002:	edd7 6a06 	vldr	s13, [r7, #24]
 800c006:	4b3e      	ldr	r3, [pc, #248]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800c008:	edd3 7a02 	vldr	s15, [r3, #8]
 800c00c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c010:	4b3b      	ldr	r3, [pc, #236]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800c012:	edd3 7a05 	vldr	s15, [r3, #20]
 800c016:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c01a:	ee77 7a27 	vadd.f32	s15, s14, s15
	mag_cal_x = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[0][0]
 800c01e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c026:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	mag_cal_y = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[1][0]
 800c02a:	ed97 7a04 	vldr	s14, [r7, #16]
 800c02e:	4b34      	ldr	r3, [pc, #208]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800c030:	edd3 7a00 	vldr	s15, [r3]
 800c034:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c038:	4b31      	ldr	r3, [pc, #196]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800c03a:	edd3 7a06 	vldr	s15, [r3, #24]
 800c03e:	ee27 7a27 	vmul.f32	s14, s14, s15
	 + (data_in.Mag[1] - data_out.HI_Bias[1]) * data_out.SF_Matrix[1][1]
 800c042:	edd7 6a05 	vldr	s13, [r7, #20]
 800c046:	4b2e      	ldr	r3, [pc, #184]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800c048:	edd3 7a01 	vldr	s15, [r3, #4]
 800c04c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c050:	4b2b      	ldr	r3, [pc, #172]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800c052:	edd3 7a07 	vldr	s15, [r3, #28]
 800c056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c05a:	ee37 7a27 	vadd.f32	s14, s14, s15
	 + (data_in.Mag[2] - data_out.HI_Bias[2]) * data_out.SF_Matrix[1][2]);
 800c05e:	edd7 6a06 	vldr	s13, [r7, #24]
 800c062:	4b27      	ldr	r3, [pc, #156]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800c064:	edd3 7a02 	vldr	s15, [r3, #8]
 800c068:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c06c:	4b24      	ldr	r3, [pc, #144]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800c06e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c076:	ee77 7a27 	vadd.f32	s15, s14, s15
	mag_cal_y = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[1][0]
 800c07a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c07e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c082:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	mag_cal_z = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[2][0]
 800c086:	ed97 7a04 	vldr	s14, [r7, #16]
 800c08a:	4b1d      	ldr	r3, [pc, #116]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800c08c:	edd3 7a00 	vldr	s15, [r3]
 800c090:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c094:	4b1a      	ldr	r3, [pc, #104]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800c096:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c09a:	ee27 7a27 	vmul.f32	s14, s14, s15
	 + (data_in.Mag[1] - data_out.HI_Bias[1]) * data_out.SF_Matrix[2][1]
 800c09e:	edd7 6a05 	vldr	s13, [r7, #20]
 800c0a2:	4b17      	ldr	r3, [pc, #92]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800c0a4:	edd3 7a01 	vldr	s15, [r3, #4]
 800c0a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c0ac:	4b14      	ldr	r3, [pc, #80]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800c0ae:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800c0b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0b6:	ee37 7a27 	vadd.f32	s14, s14, s15
	 + (data_in.Mag[2] - data_out.HI_Bias[2]) * data_out.SF_Matrix[2][2]);
 800c0ba:	edd7 6a06 	vldr	s13, [r7, #24]
 800c0be:	4b10      	ldr	r3, [pc, #64]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800c0c0:	edd3 7a02 	vldr	s15, [r3, #8]
 800c0c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c0c8:	4b0d      	ldr	r3, [pc, #52]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800c0ca:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800c0ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0d2:	ee77 7a27 	vadd.f32	s15, s14, s15
	mag_cal_z = (int)((data_in.Mag[0] - data_out.HI_Bias[0]) * data_out.SF_Matrix[2][0]
 800c0d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0de:	edc7 7a08 	vstr	s15, [r7, #32]

	if (MMC_CALQSTATUSUNKNOWN != data_out.CalQuality)
 800c0e2:	4b07      	ldr	r3, [pc, #28]	; (800c100 <GetCalibratedMagAxses+0x190>)
 800c0e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d004      	beq.n	800c0f6 <GetCalibratedMagAxses+0x186>
	{
		test++;
 800c0ec:	4b05      	ldr	r3, [pc, #20]	; (800c104 <GetCalibratedMagAxses+0x194>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	4a04      	ldr	r2, [pc, #16]	; (800c104 <GetCalibratedMagAxses+0x194>)
 800c0f4:	6013      	str	r3, [r2, #0]
	}
}
 800c0f6:	bf00      	nop
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3730      	adds	r7, #48	; 0x30
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	20008f84 	.word	0x20008f84
 800c104:	20008fb8 	.word	0x20008fb8

0800c108 <GetCompassData>:

void GetCompassData()
{
 800c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c10c:	b0d3      	sub	sp, #332	; 0x14c
 800c10e:	af06      	add	r7, sp, #24
	MEC_input_t in;
	MEC_output_t out;

	char printOut[150];

	MEC_state_t orientation = MEC_ENABLE;
 800c110:	2301      	movs	r3, #1
 800c112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	MEC_state_t virtGyro = MEC_DISABLE;
 800c116:	2300      	movs	r3, #0
 800c118:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	MEC_state_t gravity = MEC_DISABLE;
 800c11c:	2300      	movs	r3, #0
 800c11e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	MEC_state_t linearAcc = MEC_ENABLE;
 800c122:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c126:	2201      	movs	r2, #1
 800c128:	701a      	strb	r2, [r3, #0]
	POS_MOTION_SENSOR_Axes_t AccAxesLsm6dso;
	POS_MOTION_SENSOR_Axes_t GyrAxesLsm6dso;
	POS_MOTION_SENSOR_Axes_t MagAxes;
	POS_MOTION_SENSOR_Axes_t AccAxesLis2dw12;

	GetCalibratedMagAxses(MAG_LIS2MDL, &MagAxes, 100);
 800c12a:	f107 030c 	add.w	r3, r7, #12
 800c12e:	2264      	movs	r2, #100	; 0x64
 800c130:	4619      	mov	r1, r3
 800c132:	2002      	movs	r0, #2
 800c134:	f7ff ff1c 	bl	800bf70 <GetCalibratedMagAxses>

//	POS_MOTION_SENSOR_GetAxes(MAG_LIS2MDL, &MagAxes);
	POS_MOTION_SENSOR_GetAxes(ACC_LSM6DSO, &AccAxesLsm6dso);
 800c138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c13c:	4619      	mov	r1, r3
 800c13e:	2000      	movs	r0, #0
 800c140:	f000 f96a 	bl	800c418 <POS_MOTION_SENSOR_GetAxes>
	POS_MOTION_SENSOR_GetAxes(GYR_LSM6DSO, &GyrAxesLsm6dso);
 800c144:	f107 0318 	add.w	r3, r7, #24
 800c148:	4619      	mov	r1, r3
 800c14a:	2001      	movs	r0, #1
 800c14c:	f000 f964 	bl	800c418 <POS_MOTION_SENSOR_GetAxes>
	POS_MOTION_SENSOR_GetAxes(ACC_LIS2DW12, &AccAxesLis2dw12);
 800c150:	463b      	mov	r3, r7
 800c152:	4619      	mov	r1, r3
 800c154:	2003      	movs	r0, #3
 800c156:	f000 f95f 	bl	800c418 <POS_MOTION_SENSOR_GetAxes>

	// LIS2DW12 like LSM6DSO
	int32_t h = AccAxesLis2dw12.x;
 800c15a:	463b      	mov	r3, r7
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	AccAxesLis2dw12.x = -AccAxesLis2dw12.y;
 800c162:	463b      	mov	r3, r7
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	425a      	negs	r2, r3
 800c168:	463b      	mov	r3, r7
 800c16a:	601a      	str	r2, [r3, #0]
	AccAxesLis2dw12.y = h;
 800c16c:	463b      	mov	r3, r7
 800c16e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800c172:	605a      	str	r2, [r3, #4]


	sensorCompensation(ACC_LSM6DSO, &AccAxesLsm6dso);
 800c174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c178:	4619      	mov	r1, r3
 800c17a:	2000      	movs	r0, #0
 800c17c:	f7ff fe74 	bl	800be68 <sensorCompensation>
	sensorCompensation(ACC_LSM6DSO, &AccAxesLis2dw12);
 800c180:	463b      	mov	r3, r7
 800c182:	4619      	mov	r1, r3
 800c184:	2000      	movs	r0, #0
 800c186:	f7ff fe6f 	bl	800be68 <sensorCompensation>

	setEcParameter(&AccAxesLsm6dso, &MagAxes, &in, 0.1);
 800c18a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800c18e:	f107 010c 	add.w	r1, r7, #12
 800c192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c196:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800c330 <GetCompassData+0x228>
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7ff fe00 	bl	800bda0 <setEcParameter>
	MotionEC_Run(&in, &out);
 800c1a0:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800c1a4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800c1a8:	4611      	mov	r1, r2
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f000 fbe6 	bl	800c97c <MotionEC_Run>

	MotionEC_GetOrientationEnable(&orientation);
 800c1b0:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f000 ff9f 	bl	800d0f8 <MotionEC_GetOrientationEnable>
	MotionEC_GetVirtualGyroEnable(&virtGyro);
 800c1ba:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f000 ffaa 	bl	800d118 <MotionEC_GetVirtualGyroEnable>
	MotionEC_GetGravityEnable(&gravity);
 800c1c4:	f107 0331 	add.w	r3, r7, #49	; 0x31
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f000 ffb5 	bl	800d138 <MotionEC_GetGravityEnable>
	MotionEC_GetLinearAccEnable(&linearAcc);
 800c1ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f000 ffc0 	bl	800d158 <MotionEC_GetLinearAccEnable>

	printOut[0] = 0;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	size_t len = strlen(printOut);
 800c1de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7f3 fffc 	bl	80001e0 <strlen>
 800c1e8:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
	if(prAllow & 1)
 800c1ec:	4b51      	ldr	r3, [pc, #324]	; (800c334 <GetCompassData+0x22c>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f003 0301 	and.w	r3, r3, #1
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d023      	beq.n	800c240 <GetCompassData+0x138>
	{
		sprintf(printOut + len,"euler %2.2f %2.2f %2.2f ",out.euler[0],out.euler[1],out.euler[2]);
 800c1f8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c1fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c200:	18d6      	adds	r6, r2, r3
 800c202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c206:	4618      	mov	r0, r3
 800c208:	f7f4 f9a6 	bl	8000558 <__aeabi_f2d>
 800c20c:	4680      	mov	r8, r0
 800c20e:	4689      	mov	r9, r1
 800c210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c214:	4618      	mov	r0, r3
 800c216:	f7f4 f99f 	bl	8000558 <__aeabi_f2d>
 800c21a:	4604      	mov	r4, r0
 800c21c:	460d      	mov	r5, r1
 800c21e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c222:	4618      	mov	r0, r3
 800c224:	f7f4 f998 	bl	8000558 <__aeabi_f2d>
 800c228:	4602      	mov	r2, r0
 800c22a:	460b      	mov	r3, r1
 800c22c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c230:	e9cd 4500 	strd	r4, r5, [sp]
 800c234:	4642      	mov	r2, r8
 800c236:	464b      	mov	r3, r9
 800c238:	493f      	ldr	r1, [pc, #252]	; (800c338 <GetCompassData+0x230>)
 800c23a:	4630      	mov	r0, r6
 800c23c:	f008 f8e2 	bl	8014404 <siprintf>
	}
	if(prAllow & 2)
 800c240:	4b3c      	ldr	r3, [pc, #240]	; (800c334 <GetCompassData+0x22c>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f003 0302 	and.w	r3, r3, #2
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d033      	beq.n	800c2b4 <GetCompassData+0x1ac>
	{
		len = strlen(printOut);
 800c24c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c250:	4618      	mov	r0, r3
 800c252:	f7f3 ffc5 	bl	80001e0 <strlen>
 800c256:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
		sprintf(printOut + len,"Q %2.2f %2.2f %2.2f %2.2f ",out.quaternion[0],out.quaternion[1],out.quaternion[2],out.quaternion[3]);
 800c25a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c25e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c262:	18d6      	adds	r6, r2, r3
 800c264:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c268:	4618      	mov	r0, r3
 800c26a:	f7f4 f975 	bl	8000558 <__aeabi_f2d>
 800c26e:	4682      	mov	sl, r0
 800c270:	468b      	mov	fp, r1
 800c272:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c276:	4618      	mov	r0, r3
 800c278:	f7f4 f96e 	bl	8000558 <__aeabi_f2d>
 800c27c:	4604      	mov	r4, r0
 800c27e:	460d      	mov	r5, r1
 800c280:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c284:	4618      	mov	r0, r3
 800c286:	f7f4 f967 	bl	8000558 <__aeabi_f2d>
 800c28a:	4680      	mov	r8, r0
 800c28c:	4689      	mov	r9, r1
 800c28e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c292:	4618      	mov	r0, r3
 800c294:	f7f4 f960 	bl	8000558 <__aeabi_f2d>
 800c298:	4602      	mov	r2, r0
 800c29a:	460b      	mov	r3, r1
 800c29c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c2a0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c2a4:	e9cd 4500 	strd	r4, r5, [sp]
 800c2a8:	4652      	mov	r2, sl
 800c2aa:	465b      	mov	r3, fp
 800c2ac:	4923      	ldr	r1, [pc, #140]	; (800c33c <GetCompassData+0x234>)
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	f008 f8a8 	bl	8014404 <siprintf>
	}
	if(prAllow & 4)
 800c2b4:	4b1f      	ldr	r3, [pc, #124]	; (800c334 <GetCompassData+0x22c>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f003 0304 	and.w	r3, r3, #4
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d02a      	beq.n	800c316 <GetCompassData+0x20e>
	{
		len = strlen(printOut);
 800c2c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7f3 ff8b 	bl	80001e0 <strlen>
 800c2ca:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
		sprintf(printOut + len,"linear %2.2f %2.2f %2.2f ",out.linear[0],out.linear[1],out.linear[2]);
 800c2ce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c2d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c2d6:	18d6      	adds	r6, r2, r3
 800c2d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7f4 f93b 	bl	8000558 <__aeabi_f2d>
 800c2e2:	4680      	mov	r8, r0
 800c2e4:	4689      	mov	r9, r1
 800c2e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7f4 f934 	bl	8000558 <__aeabi_f2d>
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	460d      	mov	r5, r1
 800c2f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7f4 f92d 	bl	8000558 <__aeabi_f2d>
 800c2fe:	4602      	mov	r2, r0
 800c300:	460b      	mov	r3, r1
 800c302:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c306:	e9cd 4500 	strd	r4, r5, [sp]
 800c30a:	4642      	mov	r2, r8
 800c30c:	464b      	mov	r3, r9
 800c30e:	490c      	ldr	r1, [pc, #48]	; (800c340 <GetCompassData+0x238>)
 800c310:	4630      	mov	r0, r6
 800c312:	f008 f877 	bl	8014404 <siprintf>
	}
	printf("\n\r%s",printOut);
 800c316:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c31a:	4619      	mov	r1, r3
 800c31c:	4809      	ldr	r0, [pc, #36]	; (800c344 <GetCompassData+0x23c>)
 800c31e:	f008 f859 	bl	80143d4 <iprintf>

}
 800c322:	bf00      	nop
 800c324:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800c328:	46bd      	mov	sp, r7
 800c32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c32e:	bf00      	nop
 800c330:	3dcccccd 	.word	0x3dcccccd
 800c334:	20001300 	.word	0x20001300
 800c338:	08017f58 	.word	0x08017f58
 800c33c:	08017f74 	.word	0x08017f74
 800c340:	08017f90 	.word	0x08017f90
 800c344:	08017ef0 	.word	0x08017ef0

0800c348 <MotionAC_LoadCalFromNVM>:

///////////////////////////

char MotionAC_LoadCalFromNVM (unsigned short intdataSize, unsigned int *data)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	6039      	str	r1, [r7, #0]
 800c352:	80fb      	strh	r3, [r7, #6]
	return 0;
 800c354:	2300      	movs	r3, #0

}
 800c356:	4618      	mov	r0, r3
 800c358:	370c      	adds	r7, #12
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr

0800c362 <MotionAC_SaveCalInNVM>:
char MotionAC_SaveCalInNVM (unsigned short intdataSize, unsigned int *data)
{
 800c362:	b480      	push	{r7}
 800c364:	b083      	sub	sp, #12
 800c366:	af00      	add	r7, sp, #0
 800c368:	4603      	mov	r3, r0
 800c36a:	6039      	str	r1, [r7, #0]
 800c36c:	80fb      	strh	r3, [r7, #6]
	return 0;
 800c36e:	2300      	movs	r3, #0
}
 800c370:	4618      	mov	r0, r3
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <MotionMC_LoadCalFromNVM>:

char MotionMC_LoadCalFromNVM (unsigned short intdataSize, unsigned int *data)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	4603      	mov	r3, r0
 800c384:	6039      	str	r1, [r7, #0]
 800c386:	80fb      	strh	r3, [r7, #6]
	return 0;
 800c388:	2300      	movs	r3, #0

}
 800c38a:	4618      	mov	r0, r3
 800c38c:	370c      	adds	r7, #12
 800c38e:	46bd      	mov	sp, r7
 800c390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c394:	4770      	bx	lr

0800c396 <MotionMC_SaveCalInNVM>:
char MotionMC_SaveCalInNVM (unsigned short intdataSize, unsigned int *data)
{
 800c396:	b480      	push	{r7}
 800c398:	b083      	sub	sp, #12
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	4603      	mov	r3, r0
 800c39e:	6039      	str	r1, [r7, #0]
 800c3a0:	80fb      	strh	r3, [r7, #6]
	return 0;
 800c3a2:	2300      	movs	r3, #0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <position_Init>:
static void motionSensor_Init(void);



void position_Init(void)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	af00      	add	r7, sp, #0
	motionSensor_Init();
 800c3b4:	f000 f80a 	bl	800c3cc <motionSensor_Init>
	compass_init();
 800c3b8:	f7ff fc88 	bl	800bccc <compass_init>


	/////
//	POS_MOTION_SENSOR_Axes_t AccAxesLsm6dso;
//	POS_MOTION_SENSOR_GetAxes(ACC_LSM6DSO, &AccAxesLsm6dso);
}
 800c3bc:	bf00      	nop
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <PositionProcess>:

void PositionProcess(void)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	af00      	add	r7, sp, #0
	GetCompassData();
 800c3c4:	f7ff fea0 	bl	800c108 <GetCompassData>
//	POS_MOTION_SENSOR_GetAxes(ACC_LSM6DSO, &AccAxesLsm6dso);
//	POS_MOTION_SENSOR_GetAxes(GYR_LSM6DSO, &GyrAxesLsm6dso);
//
//	printf("\n\rACC x = %5d y = %5d z = %5d MAG x = %5d y = %5d z = %5d",(int)AccAxesLis2dw.x,(int)AccAxesLis2dw.y,(int)AccAxesLis2dw.z,(int)MagAxes.x,(int)MagAxes.y,(int)MagAxes.z);
//	printf("\n\rACC x = %5d y = %5d z = %5d GYR x = %5d y = %5d z = %5d\n\r",(int)AccAxesLsm6dso.x,(int)AccAxesLsm6dso.y,(int)AccAxesLsm6dso.z,(int)GyrAxesLsm6dso.x,(int)GyrAxesLsm6dso.y,(int)GyrAxesLsm6dso.z);
}
 800c3c8:	bf00      	nop
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <motionSensor_Init>:
/**
  * @brief  Initialize the accelerometer and  magnetometer
  * @retval None
  */
static void motionSensor_Init(void)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	af00      	add	r7, sp, #0
//  displayFloatToInt_t out_value_odr;
//  int i;

	  /* Initialize Virtual COM Port */
	  BSP_COM_Init(COM1);
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	f7f9 faa3 	bl	800591c <BSP_COM_Init>


	POS_MOTION_SENSOR_Init();
 800c3d6:	f000 f802 	bl	800c3de <POS_MOTION_SENSOR_Init>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
    printf("%s", dataOut);
  }
  */
}
 800c3da:	bf00      	nop
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <POS_MOTION_SENSOR_Init>:
 * @brief  Initializes the motion sensors
 * @retval BSP status
 */
#include "position.h"
int32_t POS_MOTION_SENSOR_Init(void)
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b082      	sub	sp, #8
 800c3e2:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	607b      	str	r3, [r7, #4]

  ret = LIS2DW12_0_Probe(ACC_LIS2DW12);
 800c3e8:	2003      	movs	r0, #3
 800c3ea:	f000 f8df 	bl	800c5ac <LIS2DW12_0_Probe>
 800c3ee:	6078      	str	r0, [r7, #4]
  if (BSP_ERROR_NONE == ret)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d103      	bne.n	800c3fe <POS_MOTION_SENSOR_Init+0x20>
  {
	  ret = LIS2MDL_0_Probe(MAG_LIS2MDL);
 800c3f6:	2002      	movs	r0, #2
 800c3f8:	f000 f950 	bl	800c69c <LIS2MDL_0_Probe>
 800c3fc:	6078      	str	r0, [r7, #4]
  }

  if (BSP_ERROR_NONE == ret)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d103      	bne.n	800c40c <POS_MOTION_SENSOR_Init+0x2e>
  {
	  ret = LSM6DSO_0_Probe(GYR_LSM6DSO);
 800c404:	2001      	movs	r0, #1
 800c406:	f000 f833 	bl	800c470 <LSM6DSO_0_Probe>
 800c40a:	6078      	str	r0, [r7, #4]
  }
  return ret;
 800c40c:	687b      	ldr	r3, [r7, #4]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3708      	adds	r7, #8
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
	...

0800c418 <POS_MOTION_SENSOR_GetAxes>:
 * @param  Sensor Motion sensor instance
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t POS_MOTION_SENSOR_GetAxes(POS_MOTION_SENSORS sensor, POS_MOTION_SENSOR_Axes_t *Axes)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	4603      	mov	r3, r0
 800c420:	6039      	str	r1, [r7, #0]
 800c422:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if (sensor >= POS_MOTION_SENSORS_MAX)
 800c424:	79fb      	ldrb	r3, [r7, #7]
 800c426:	2b03      	cmp	r3, #3
 800c428:	d903      	bls.n	800c432 <POS_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c42a:	f06f 0301 	mvn.w	r3, #1
 800c42e:	60fb      	str	r3, [r7, #12]
 800c430:	e014      	b.n	800c45c <POS_MOTION_SENSOR_GetAxes+0x44>
  }
  else
  {
    if (PosMotionFuncDrv[sensor]->GetAxes(PosMotionCompObj[sensor], Axes) != BSP_ERROR_NONE)
 800c432:	79fb      	ldrb	r3, [r7, #7]
 800c434:	4a0c      	ldr	r2, [pc, #48]	; (800c468 <POS_MOTION_SENSOR_GetAxes+0x50>)
 800c436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c43a:	69db      	ldr	r3, [r3, #28]
 800c43c:	79fa      	ldrb	r2, [r7, #7]
 800c43e:	490b      	ldr	r1, [pc, #44]	; (800c46c <POS_MOTION_SENSOR_GetAxes+0x54>)
 800c440:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c444:	6839      	ldr	r1, [r7, #0]
 800c446:	4610      	mov	r0, r2
 800c448:	4798      	blx	r3
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d003      	beq.n	800c458 <POS_MOTION_SENSOR_GetAxes+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c450:	f06f 0304 	mvn.w	r3, #4
 800c454:	60fb      	str	r3, [r7, #12]
 800c456:	e001      	b.n	800c45c <POS_MOTION_SENSOR_GetAxes+0x44>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800c458:	2300      	movs	r3, #0
 800c45a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800c45c:	68fb      	ldr	r3, [r7, #12]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3710      	adds	r7, #16
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	20008fbc 	.word	0x20008fbc
 800c46c:	2000bb00 	.word	0x2000bb00

0800c470 <LSM6DSO_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSO_0_Probe(POS_MOTION_SENSORS sensor)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b08c      	sub	sp, #48	; 0x30
 800c474:	af00      	add	r7, sp, #0
 800c476:	4603      	mov	r3, r0
 800c478:	71fb      	strb	r3, [r7, #7]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  int32_t ret = BSP_ERROR_NONE;
 800c47a:	2300      	movs	r3, #0
 800c47c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800c47e:	2300      	movs	r3, #0
 800c480:	61bb      	str	r3, [r7, #24]
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800c482:	23d7      	movs	r3, #215	; 0xd7
 800c484:	773b      	strb	r3, [r7, #28]
  io_ctx.Init        = POS_I2C_Init;
 800c486:	4b3d      	ldr	r3, [pc, #244]	; (800c57c <LSM6DSO_0_Probe+0x10c>)
 800c488:	613b      	str	r3, [r7, #16]
  io_ctx.DeInit      = POS_I2C_DeInit;
 800c48a:	4b3d      	ldr	r3, [pc, #244]	; (800c580 <LSM6DSO_0_Probe+0x110>)
 800c48c:	617b      	str	r3, [r7, #20]
  io_ctx.ReadReg     = POS_I2C_ReadReg;
 800c48e:	4b3d      	ldr	r3, [pc, #244]	; (800c584 <LSM6DSO_0_Probe+0x114>)
 800c490:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.WriteReg    = POS_I2C_WriteReg;
 800c492:	4b3d      	ldr	r3, [pc, #244]	; (800c588 <LSM6DSO_0_Probe+0x118>)
 800c494:	623b      	str	r3, [r7, #32]
  io_ctx.GetTick     = POS_GetTick;
 800c496:	4b3d      	ldr	r3, [pc, #244]	; (800c58c <LSM6DSO_0_Probe+0x11c>)
 800c498:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800c49a:	f107 0310 	add.w	r3, r7, #16
 800c49e:	4619      	mov	r1, r3
 800c4a0:	483b      	ldr	r0, [pc, #236]	; (800c590 <LSM6DSO_0_Probe+0x120>)
 800c4a2:	f7f7 faa9 	bl	80039f8 <LSM6DSO_RegisterBusIO>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d003      	beq.n	800c4b4 <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c4ac:	f06f 0306 	mvn.w	r3, #6
 800c4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4b2:	e05e      	b.n	800c572 <LSM6DSO_0_Probe+0x102>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800c4b4:	f107 030f 	add.w	r3, r7, #15
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	4835      	ldr	r0, [pc, #212]	; (800c590 <LSM6DSO_0_Probe+0x120>)
 800c4bc:	f7f7 fb9e 	bl	8003bfc <LSM6DSO_ReadID>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d003      	beq.n	800c4ce <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c4c6:	f06f 0306 	mvn.w	r3, #6
 800c4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4cc:	e051      	b.n	800c572 <LSM6DSO_0_Probe+0x102>
  }
  else if (id != LSM6DSO_ID)
 800c4ce:	7bfb      	ldrb	r3, [r7, #15]
 800c4d0:	2b6c      	cmp	r3, #108	; 0x6c
 800c4d2:	d003      	beq.n	800c4dc <LSM6DSO_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c4d4:	f06f 0306 	mvn.w	r3, #6
 800c4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4da:	e04a      	b.n	800c572 <LSM6DSO_0_Probe+0x102>
  }
  else
  {
	PosMotionCompObj[ACC_LSM6DSO] = &lsm6dso_obj_0;
 800c4dc:	4b2d      	ldr	r3, [pc, #180]	; (800c594 <LSM6DSO_0_Probe+0x124>)
 800c4de:	4a2c      	ldr	r2, [pc, #176]	; (800c590 <LSM6DSO_0_Probe+0x120>)
 800c4e0:	601a      	str	r2, [r3, #0]
	PosMotionCompObj[GYR_LSM6DSO] = &lsm6dso_obj_0;
 800c4e2:	4b2c      	ldr	r3, [pc, #176]	; (800c594 <LSM6DSO_0_Probe+0x124>)
 800c4e4:	4a2a      	ldr	r2, [pc, #168]	; (800c590 <LSM6DSO_0_Probe+0x120>)
 800c4e6:	605a      	str	r2, [r3, #4]
	/* The second cast (void *) is added to bypass Misra R11.3 rule */
	PosMotionDrv[ACC_LSM6DSO] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800c4e8:	4b2b      	ldr	r3, [pc, #172]	; (800c598 <LSM6DSO_0_Probe+0x128>)
 800c4ea:	4a2c      	ldr	r2, [pc, #176]	; (800c59c <LSM6DSO_0_Probe+0x12c>)
 800c4ec:	601a      	str	r2, [r3, #0]
	PosMotionDrv[GYR_LSM6DSO] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800c4ee:	4b2a      	ldr	r3, [pc, #168]	; (800c598 <LSM6DSO_0_Probe+0x128>)
 800c4f0:	4a2a      	ldr	r2, [pc, #168]	; (800c59c <LSM6DSO_0_Probe+0x12c>)
 800c4f2:	605a      	str	r2, [r3, #4]

	/* The second cast (void *) is added to bypass Misra R11.3 rule */
	PosMotionFuncDrv[ACC_LSM6DSO] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_ACC_Driver;
 800c4f4:	4b2a      	ldr	r3, [pc, #168]	; (800c5a0 <LSM6DSO_0_Probe+0x130>)
 800c4f6:	4a2b      	ldr	r2, [pc, #172]	; (800c5a4 <LSM6DSO_0_Probe+0x134>)
 800c4f8:	601a      	str	r2, [r3, #0]
	PosMotionFuncDrv[GYR_LSM6DSO] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800c4fa:	4b29      	ldr	r3, [pc, #164]	; (800c5a0 <LSM6DSO_0_Probe+0x130>)
 800c4fc:	4a2a      	ldr	r2, [pc, #168]	; (800c5a8 <LSM6DSO_0_Probe+0x138>)
 800c4fe:	605a      	str	r2, [r3, #4]

	if (PosMotionDrv[ACC_LSM6DSO]->Init(PosMotionCompObj[ACC_LSM6DSO]) != LSM6DSO_OK)
 800c500:	4b25      	ldr	r3, [pc, #148]	; (800c598 <LSM6DSO_0_Probe+0x128>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a23      	ldr	r2, [pc, #140]	; (800c594 <LSM6DSO_0_Probe+0x124>)
 800c508:	6812      	ldr	r2, [r2, #0]
 800c50a:	4610      	mov	r0, r2
 800c50c:	4798      	blx	r3
 800c50e:	4603      	mov	r3, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	d003      	beq.n	800c51c <LSM6DSO_0_Probe+0xac>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 800c514:	f06f 0304 	mvn.w	r3, #4
 800c518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c51a:	e02a      	b.n	800c572 <LSM6DSO_0_Probe+0x102>
	}
	else if (PosMotionDrv[GYR_LSM6DSO]->Init(PosMotionCompObj[GYR_LSM6DSO]) != LSM6DSO_OK)
 800c51c:	4b1e      	ldr	r3, [pc, #120]	; (800c598 <LSM6DSO_0_Probe+0x128>)
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a1c      	ldr	r2, [pc, #112]	; (800c594 <LSM6DSO_0_Probe+0x124>)
 800c524:	6852      	ldr	r2, [r2, #4]
 800c526:	4610      	mov	r0, r2
 800c528:	4798      	blx	r3
 800c52a:	4603      	mov	r3, r0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d003      	beq.n	800c538 <LSM6DSO_0_Probe+0xc8>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 800c530:	f06f 0304 	mvn.w	r3, #4
 800c534:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c536:	e01c      	b.n	800c572 <LSM6DSO_0_Probe+0x102>
	}
	else
	{
		ret = BSP_ERROR_NONE;
 800c538:	2300      	movs	r3, #0
 800c53a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (PosMotionFuncDrv[ACC_LSM6DSO]->Enable(PosMotionCompObj[ACC_LSM6DSO]) != LSM6DSO_OK)
 800c53c:	4b18      	ldr	r3, [pc, #96]	; (800c5a0 <LSM6DSO_0_Probe+0x130>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4a14      	ldr	r2, [pc, #80]	; (800c594 <LSM6DSO_0_Probe+0x124>)
 800c544:	6812      	ldr	r2, [r2, #0]
 800c546:	4610      	mov	r0, r2
 800c548:	4798      	blx	r3
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d003      	beq.n	800c558 <LSM6DSO_0_Probe+0xe8>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800c550:	f06f 0304 	mvn.w	r3, #4
 800c554:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c556:	e00c      	b.n	800c572 <LSM6DSO_0_Probe+0x102>
		}
		else if (PosMotionFuncDrv[GYR_LSM6DSO]->Enable(PosMotionCompObj[GYR_LSM6DSO]) != LSM6DSO_OK)
 800c558:	4b11      	ldr	r3, [pc, #68]	; (800c5a0 <LSM6DSO_0_Probe+0x130>)
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4a0d      	ldr	r2, [pc, #52]	; (800c594 <LSM6DSO_0_Probe+0x124>)
 800c560:	6852      	ldr	r2, [r2, #4]
 800c562:	4610      	mov	r0, r2
 800c564:	4798      	blx	r3
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d002      	beq.n	800c572 <LSM6DSO_0_Probe+0x102>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800c56c:	f06f 0304 	mvn.w	r3, #4
 800c570:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
	}
  }
	  return ret;
 800c572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c574:	4618      	mov	r0, r3
 800c576:	3730      	adds	r7, #48	; 0x30
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	080015f5 	.word	0x080015f5
 800c580:	08001659 	.word	0x08001659
 800c584:	0800170d 	.word	0x0800170d
 800c588:	080016a9 	.word	0x080016a9
 800c58c:	08001771 	.word	0x08001771
 800c590:	20008fdc 	.word	0x20008fdc
 800c594:	2000bb00 	.word	0x2000bb00
 800c598:	20008fcc 	.word	0x20008fcc
 800c59c:	20001294 	.word	0x20001294
 800c5a0:	20008fbc 	.word	0x20008fbc
 800c5a4:	200012a4 	.word	0x200012a4
 800c5a8:	200012c8 	.word	0x200012c8

0800c5ac <LIS2DW12_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2DW12_0_Probe(POS_MOTION_SENSORS sensor)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b08c      	sub	sp, #48	; 0x30
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	71fb      	strb	r3, [r7, #7]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  int32_t ret = BSP_ERROR_NONE;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	61bb      	str	r3, [r7, #24]
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800c5be:	2333      	movs	r3, #51	; 0x33
 800c5c0:	773b      	strb	r3, [r7, #28]
  io_ctx.Init        = POS_I2C_Init;
 800c5c2:	4b2b      	ldr	r3, [pc, #172]	; (800c670 <LIS2DW12_0_Probe+0xc4>)
 800c5c4:	613b      	str	r3, [r7, #16]
  io_ctx.DeInit      = POS_I2C_DeInit;
 800c5c6:	4b2b      	ldr	r3, [pc, #172]	; (800c674 <LIS2DW12_0_Probe+0xc8>)
 800c5c8:	617b      	str	r3, [r7, #20]
  io_ctx.ReadReg     = POS_I2C_ReadReg;
 800c5ca:	4b2b      	ldr	r3, [pc, #172]	; (800c678 <LIS2DW12_0_Probe+0xcc>)
 800c5cc:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.WriteReg    = POS_I2C_WriteReg;
 800c5ce:	4b2b      	ldr	r3, [pc, #172]	; (800c67c <LIS2DW12_0_Probe+0xd0>)
 800c5d0:	623b      	str	r3, [r7, #32]
  io_ctx.GetTick     = POS_GetTick;
 800c5d2:	4b2b      	ldr	r3, [pc, #172]	; (800c680 <LIS2DW12_0_Probe+0xd4>)
 800c5d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800c5d6:	f107 0310 	add.w	r3, r7, #16
 800c5da:	4619      	mov	r1, r3
 800c5dc:	4829      	ldr	r0, [pc, #164]	; (800c684 <LIS2DW12_0_Probe+0xd8>)
 800c5de:	f7f5 fa4d 	bl	8001a7c <LIS2DW12_RegisterBusIO>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d003      	beq.n	800c5f0 <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c5e8:	f06f 0306 	mvn.w	r3, #6
 800c5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5ee:	e039      	b.n	800c664 <LIS2DW12_0_Probe+0xb8>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800c5f0:	f107 030f 	add.w	r3, r7, #15
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	4823      	ldr	r0, [pc, #140]	; (800c684 <LIS2DW12_0_Probe+0xd8>)
 800c5f8:	f7f5 fb2a 	bl	8001c50 <LIS2DW12_ReadID>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d003      	beq.n	800c60a <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c602:	f06f 0306 	mvn.w	r3, #6
 800c606:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c608:	e02c      	b.n	800c664 <LIS2DW12_0_Probe+0xb8>
  }
  else if (id != LIS2DW12_ID)
 800c60a:	7bfb      	ldrb	r3, [r7, #15]
 800c60c:	2b44      	cmp	r3, #68	; 0x44
 800c60e:	d003      	beq.n	800c618 <LIS2DW12_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c610:	f06f 0306 	mvn.w	r3, #6
 800c614:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c616:	e025      	b.n	800c664 <LIS2DW12_0_Probe+0xb8>
  }
  else
  {
    PosMotionCompObj[ACC_LIS2DW12] = &lis2dw12_obj_0;
 800c618:	4b1b      	ldr	r3, [pc, #108]	; (800c688 <LIS2DW12_0_Probe+0xdc>)
 800c61a:	4a1a      	ldr	r2, [pc, #104]	; (800c684 <LIS2DW12_0_Probe+0xd8>)
 800c61c:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionDrv[ACC_LIS2DW12] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800c61e:	4b1b      	ldr	r3, [pc, #108]	; (800c68c <LIS2DW12_0_Probe+0xe0>)
 800c620:	4a1b      	ldr	r2, [pc, #108]	; (800c690 <LIS2DW12_0_Probe+0xe4>)
 800c622:	60da      	str	r2, [r3, #12]

	/* The second cast (void *) is added to bypass Misra R11.3 rule */
	PosMotionFuncDrv[ACC_LIS2DW12] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2DW12_ACC_Driver;
 800c624:	4b1b      	ldr	r3, [pc, #108]	; (800c694 <LIS2DW12_0_Probe+0xe8>)
 800c626:	4a1c      	ldr	r2, [pc, #112]	; (800c698 <LIS2DW12_0_Probe+0xec>)
 800c628:	60da      	str	r2, [r3, #12]

	if (PosMotionDrv[ACC_LIS2DW12]->Init(PosMotionCompObj[ACC_LIS2DW12]) != LIS2DW12_OK)
 800c62a:	4b18      	ldr	r3, [pc, #96]	; (800c68c <LIS2DW12_0_Probe+0xe0>)
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a15      	ldr	r2, [pc, #84]	; (800c688 <LIS2DW12_0_Probe+0xdc>)
 800c632:	68d2      	ldr	r2, [r2, #12]
 800c634:	4610      	mov	r0, r2
 800c636:	4798      	blx	r3
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d003      	beq.n	800c646 <LIS2DW12_0_Probe+0x9a>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 800c63e:	f06f 0304 	mvn.w	r3, #4
 800c642:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c644:	e00e      	b.n	800c664 <LIS2DW12_0_Probe+0xb8>
	}
	else
	{
		ret = BSP_ERROR_NONE;
 800c646:	2300      	movs	r3, #0
 800c648:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (PosMotionFuncDrv[ACC_LIS2DW12]->Enable(PosMotionCompObj[ACC_LIS2DW12]) != LSM6DSO_OK)
 800c64a:	4b12      	ldr	r3, [pc, #72]	; (800c694 <LIS2DW12_0_Probe+0xe8>)
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a0d      	ldr	r2, [pc, #52]	; (800c688 <LIS2DW12_0_Probe+0xdc>)
 800c652:	68d2      	ldr	r2, [r2, #12]
 800c654:	4610      	mov	r0, r2
 800c656:	4798      	blx	r3
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d002      	beq.n	800c664 <LIS2DW12_0_Probe+0xb8>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800c65e:	f06f 0304 	mvn.w	r3, #4
 800c662:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
	}
  }
  return ret;
 800c664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c666:	4618      	mov	r0, r3
 800c668:	3730      	adds	r7, #48	; 0x30
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	080015f5 	.word	0x080015f5
 800c674:	08001659 	.word	0x08001659
 800c678:	0800170d 	.word	0x0800170d
 800c67c:	080016a9 	.word	0x080016a9
 800c680:	08001771 	.word	0x08001771
 800c684:	2000900c 	.word	0x2000900c
 800c688:	2000bb00 	.word	0x2000bb00
 800c68c:	20008fcc 	.word	0x20008fcc
 800c690:	2000122c 	.word	0x2000122c
 800c694:	20008fbc 	.word	0x20008fbc
 800c698:	2000123c 	.word	0x2000123c

0800c69c <LIS2MDL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2MDL_0_Probe(POS_MOTION_SENSORS sensor)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b08c      	sub	sp, #48	; 0x30
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	71fb      	strb	r3, [r7, #7]

  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  int32_t                 ret = BSP_ERROR_NONE;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the magneto driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	61bb      	str	r3, [r7, #24]
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800c6ae:	233d      	movs	r3, #61	; 0x3d
 800c6b0:	773b      	strb	r3, [r7, #28]
  io_ctx.Init        = POS_I2C_Init;
 800c6b2:	4b2b      	ldr	r3, [pc, #172]	; (800c760 <LIS2MDL_0_Probe+0xc4>)
 800c6b4:	613b      	str	r3, [r7, #16]
  io_ctx.DeInit      = POS_I2C_DeInit;
 800c6b6:	4b2b      	ldr	r3, [pc, #172]	; (800c764 <LIS2MDL_0_Probe+0xc8>)
 800c6b8:	617b      	str	r3, [r7, #20]
  io_ctx.ReadReg     = POS_I2C_ReadReg;
 800c6ba:	4b2b      	ldr	r3, [pc, #172]	; (800c768 <LIS2MDL_0_Probe+0xcc>)
 800c6bc:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.WriteReg    = POS_I2C_WriteReg;
 800c6be:	4b2b      	ldr	r3, [pc, #172]	; (800c76c <LIS2MDL_0_Probe+0xd0>)
 800c6c0:	623b      	str	r3, [r7, #32]
  io_ctx.GetTick     = POS_GetTick;
 800c6c2:	4b2b      	ldr	r3, [pc, #172]	; (800c770 <LIS2MDL_0_Probe+0xd4>)
 800c6c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800c6c6:	f107 0310 	add.w	r3, r7, #16
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	4829      	ldr	r0, [pc, #164]	; (800c774 <LIS2MDL_0_Probe+0xd8>)
 800c6ce:	f7f6 fd25 	bl	800311c <LIS2MDL_RegisterBusIO>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d003      	beq.n	800c6e0 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c6d8:	f06f 0306 	mvn.w	r3, #6
 800c6dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6de:	e039      	b.n	800c754 <LIS2MDL_0_Probe+0xb8>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800c6e0:	f107 030f 	add.w	r3, r7, #15
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	4823      	ldr	r0, [pc, #140]	; (800c774 <LIS2MDL_0_Probe+0xd8>)
 800c6e8:	f7f6 fde1 	bl	80032ae <LIS2MDL_ReadID>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d003      	beq.n	800c6fa <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c6f2:	f06f 0306 	mvn.w	r3, #6
 800c6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6f8:	e02c      	b.n	800c754 <LIS2MDL_0_Probe+0xb8>
  }
  else if (id != LIS2MDL_ID)
 800c6fa:	7bfb      	ldrb	r3, [r7, #15]
 800c6fc:	2b40      	cmp	r3, #64	; 0x40
 800c6fe:	d003      	beq.n	800c708 <LIS2MDL_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c700:	f06f 0306 	mvn.w	r3, #6
 800c704:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c706:	e025      	b.n	800c754 <LIS2MDL_0_Probe+0xb8>
  }
  else
  {

    PosMotionCompObj[MAG_LIS2MDL] = &lis2mdl_obj_0;
 800c708:	4b1b      	ldr	r3, [pc, #108]	; (800c778 <LIS2MDL_0_Probe+0xdc>)
 800c70a:	4a1a      	ldr	r2, [pc, #104]	; (800c774 <LIS2MDL_0_Probe+0xd8>)
 800c70c:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionDrv[MAG_LIS2MDL] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800c70e:	4b1b      	ldr	r3, [pc, #108]	; (800c77c <LIS2MDL_0_Probe+0xe0>)
 800c710:	4a1b      	ldr	r2, [pc, #108]	; (800c780 <LIS2MDL_0_Probe+0xe4>)
 800c712:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionFuncDrv[MAG_LIS2MDL] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2MDL_MAG_Driver;
 800c714:	4b1b      	ldr	r3, [pc, #108]	; (800c784 <LIS2MDL_0_Probe+0xe8>)
 800c716:	4a1c      	ldr	r2, [pc, #112]	; (800c788 <LIS2MDL_0_Probe+0xec>)
 800c718:	609a      	str	r2, [r3, #8]

    if (PosMotionDrv[MAG_LIS2MDL]->Init(PosMotionCompObj[MAG_LIS2MDL]) != LIS2MDL_OK)
 800c71a:	4b18      	ldr	r3, [pc, #96]	; (800c77c <LIS2MDL_0_Probe+0xe0>)
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a15      	ldr	r2, [pc, #84]	; (800c778 <LIS2MDL_0_Probe+0xdc>)
 800c722:	6892      	ldr	r2, [r2, #8]
 800c724:	4610      	mov	r0, r2
 800c726:	4798      	blx	r3
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d003      	beq.n	800c736 <LIS2MDL_0_Probe+0x9a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c72e:	f06f 0304 	mvn.w	r3, #4
 800c732:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c734:	e00e      	b.n	800c754 <LIS2MDL_0_Probe+0xb8>
    }
	else
	{
		ret = BSP_ERROR_NONE;
 800c736:	2300      	movs	r3, #0
 800c738:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (PosMotionFuncDrv[MAG_LIS2MDL]->Enable(PosMotionCompObj[MAG_LIS2MDL]) != LSM6DSO_OK)
 800c73a:	4b12      	ldr	r3, [pc, #72]	; (800c784 <LIS2MDL_0_Probe+0xe8>)
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a0d      	ldr	r2, [pc, #52]	; (800c778 <LIS2MDL_0_Probe+0xdc>)
 800c742:	6892      	ldr	r2, [r2, #8]
 800c744:	4610      	mov	r0, r2
 800c746:	4798      	blx	r3
 800c748:	4603      	mov	r3, r0
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d002      	beq.n	800c754 <LIS2MDL_0_Probe+0xb8>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800c74e:	f06f 0304 	mvn.w	r3, #4
 800c752:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
	}
  }
  return ret;
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c756:	4618      	mov	r0, r3
 800c758:	3730      	adds	r7, #48	; 0x30
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	080015f5 	.word	0x080015f5
 800c764:	08001659 	.word	0x08001659
 800c768:	0800170d 	.word	0x0800170d
 800c76c:	080016a9 	.word	0x080016a9
 800c770:	08001771 	.word	0x08001771
 800c774:	20009040 	.word	0x20009040
 800c778:	2000bb00 	.word	0x2000bb00
 800c77c:	20008fcc 	.word	0x20008fcc
 800c780:	20001260 	.word	0x20001260
 800c784:	20008fbc 	.word	0x20008fbc
 800c788:	20001270 	.word	0x20001270

0800c78c <quaternionsMult>:
 800c78c:	ed90 4a01 	vldr	s8, [r0, #4]
 800c790:	edd1 7a01 	vldr	s15, [r1, #4]
 800c794:	edd0 4a00 	vldr	s9, [r0]
 800c798:	ed91 5a00 	vldr	s10, [r1]
 800c79c:	edd0 5a02 	vldr	s11, [r0, #8]
 800c7a0:	ed91 6a02 	vldr	s12, [r1, #8]
 800c7a4:	edd0 6a03 	vldr	s13, [r0, #12]
 800c7a8:	ed91 7a03 	vldr	s14, [r1, #12]
 800c7ac:	ee67 7ac4 	vnmul.f32	s15, s15, s8
 800c7b0:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c7b4:	eee5 7ac6 	vfms.f32	s15, s11, s12
 800c7b8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c7bc:	edc2 7a00 	vstr	s15, [r2]
 800c7c0:	ed91 4a00 	vldr	s8, [r1]
 800c7c4:	edd0 7a01 	vldr	s15, [r0, #4]
 800c7c8:	edd0 4a00 	vldr	s9, [r0]
 800c7cc:	ed91 5a01 	vldr	s10, [r1, #4]
 800c7d0:	edd0 5a02 	vldr	s11, [r0, #8]
 800c7d4:	ed91 6a03 	vldr	s12, [r1, #12]
 800c7d8:	edd0 6a03 	vldr	s13, [r0, #12]
 800c7dc:	ed91 7a02 	vldr	s14, [r1, #8]
 800c7e0:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c7e4:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c7e8:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c7ec:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c7f0:	edc2 7a01 	vstr	s15, [r2, #4]
 800c7f4:	ed91 4a00 	vldr	s8, [r1]
 800c7f8:	edd0 7a02 	vldr	s15, [r0, #8]
 800c7fc:	edd0 4a00 	vldr	s9, [r0]
 800c800:	ed91 5a02 	vldr	s10, [r1, #8]
 800c804:	ed91 6a01 	vldr	s12, [r1, #4]
 800c808:	edd0 5a03 	vldr	s11, [r0, #12]
 800c80c:	edd0 6a01 	vldr	s13, [r0, #4]
 800c810:	ed91 7a03 	vldr	s14, [r1, #12]
 800c814:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c818:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c81c:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c820:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c824:	edc2 7a02 	vstr	s15, [r2, #8]
 800c828:	edd0 7a01 	vldr	s15, [r0, #4]
 800c82c:	ed91 4a02 	vldr	s8, [r1, #8]
 800c830:	edd0 4a00 	vldr	s9, [r0]
 800c834:	ed91 5a03 	vldr	s10, [r1, #12]
 800c838:	edd0 6a02 	vldr	s13, [r0, #8]
 800c83c:	edd0 5a03 	vldr	s11, [r0, #12]
 800c840:	ed91 6a00 	vldr	s12, [r1]
 800c844:	ed91 7a01 	vldr	s14, [r1, #4]
 800c848:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c84c:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c850:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c854:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c858:	edc2 7a03 	vstr	s15, [r2, #12]
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop

0800c860 <MotionEC_Initialize>:
 800c860:	4a3a      	ldr	r2, [pc, #232]	; (800c94c <MotionEC_Initialize+0xec>)
 800c862:	493b      	ldr	r1, [pc, #236]	; (800c950 <MotionEC_Initialize+0xf0>)
 800c864:	6813      	ldr	r3, [r2, #0]
 800c866:	f023 0301 	bic.w	r3, r3, #1
 800c86a:	b410      	push	{r4}
 800c86c:	6013      	str	r3, [r2, #0]
 800c86e:	680b      	ldr	r3, [r1, #0]
 800c870:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800c874:	4013      	ands	r3, r2
 800c876:	f24c 2440 	movw	r4, #49728	; 0xc240
 800c87a:	42a3      	cmp	r3, r4
 800c87c:	d013      	beq.n	800c8a6 <MotionEC_Initialize+0x46>
 800c87e:	680b      	ldr	r3, [r1, #0]
 800c880:	f24c 2170 	movw	r1, #49776	; 0xc270
 800c884:	4013      	ands	r3, r2
 800c886:	428b      	cmp	r3, r1
 800c888:	d00d      	beq.n	800c8a6 <MotionEC_Initialize+0x46>
 800c88a:	4b32      	ldr	r3, [pc, #200]	; (800c954 <MotionEC_Initialize+0xf4>)
 800c88c:	2201      	movs	r2, #1
 800c88e:	601a      	str	r2, [r3, #0]
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	2a00      	cmp	r2, #0
 800c894:	d1fc      	bne.n	800c890 <MotionEC_Initialize+0x30>
 800c896:	4b30      	ldr	r3, [pc, #192]	; (800c958 <MotionEC_Initialize+0xf8>)
 800c898:	4a30      	ldr	r2, [pc, #192]	; (800c95c <MotionEC_Initialize+0xfc>)
 800c89a:	601a      	str	r2, [r3, #0]
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	4b30      	ldr	r3, [pc, #192]	; (800c960 <MotionEC_Initialize+0x100>)
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d01f      	beq.n	800c8e4 <MotionEC_Initialize+0x84>
 800c8a4:	e7fe      	b.n	800c8a4 <MotionEC_Initialize+0x44>
 800c8a6:	4b2f      	ldr	r3, [pc, #188]	; (800c964 <MotionEC_Initialize+0x104>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1ed      	bne.n	800c88a <MotionEC_Initialize+0x2a>
 800c8ae:	4a2e      	ldr	r2, [pc, #184]	; (800c968 <MotionEC_Initialize+0x108>)
 800c8b0:	6813      	ldr	r3, [r2, #0]
 800c8b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c8b6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c8ba:	d006      	beq.n	800c8ca <MotionEC_Initialize+0x6a>
 800c8bc:	6813      	ldr	r3, [r2, #0]
 800c8be:	f240 4283 	movw	r2, #1155	; 0x483
 800c8c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d1df      	bne.n	800c88a <MotionEC_Initialize+0x2a>
 800c8ca:	4b28      	ldr	r3, [pc, #160]	; (800c96c <MotionEC_Initialize+0x10c>)
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	601a      	str	r2, [r3, #0]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	2a00      	cmp	r2, #0
 800c8d4:	d1fc      	bne.n	800c8d0 <MotionEC_Initialize+0x70>
 800c8d6:	4b26      	ldr	r3, [pc, #152]	; (800c970 <MotionEC_Initialize+0x110>)
 800c8d8:	4a20      	ldr	r2, [pc, #128]	; (800c95c <MotionEC_Initialize+0xfc>)
 800c8da:	601a      	str	r2, [r3, #0]
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	4b20      	ldr	r3, [pc, #128]	; (800c960 <MotionEC_Initialize+0x100>)
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d1df      	bne.n	800c8a4 <MotionEC_Initialize+0x44>
 800c8e4:	edd0 6a00 	vldr	s13, [r0]
 800c8e8:	4822      	ldr	r0, [pc, #136]	; (800c974 <MotionEC_Initialize+0x114>)
 800c8ea:	4a23      	ldr	r2, [pc, #140]	; (800c978 <MotionEC_Initialize+0x118>)
 800c8ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c8f0:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 800c8f4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800c8f8:	4601      	mov	r1, r0
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	f801 3b04 	strb.w	r3, [r1], #4
 800c900:	f100 0410 	add.w	r4, r0, #16
 800c904:	7313      	strb	r3, [r2, #12]
 800c906:	2300      	movs	r3, #0
 800c908:	6043      	str	r3, [r0, #4]
 800c90a:	6103      	str	r3, [r0, #16]
 800c90c:	e9c1 3301 	strd	r3, r3, [r1, #4]
 800c910:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800c914:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800c918:	e9c2 3305 	strd	r3, r3, [r2, #20]
 800c91c:	e9c2 330a 	strd	r3, r3, [r2, #40]	; 0x28
 800c920:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 800c924:	6113      	str	r3, [r2, #16]
 800c926:	6253      	str	r3, [r2, #36]	; 0x24
 800c928:	63d3      	str	r3, [r2, #60]	; 0x3c
 800c92a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c92e:	edc2 7a07 	vstr	s15, [r2, #28]
 800c932:	edc2 7a08 	vstr	s15, [r2, #32]
 800c936:	edc2 7a0c 	vstr	s15, [r2, #48]	; 0x30
 800c93a:	edc2 7a10 	vstr	s15, [r2, #64]	; 0x40
 800c93e:	ed82 6a02 	vstr	s12, [r2, #8]
 800c942:	ed82 7a00 	vstr	s14, [r2]
 800c946:	ed82 7a01 	vstr	s14, [r2, #4]
 800c94a:	4770      	bx	lr
 800c94c:	e0002000 	.word	0xe0002000
 800c950:	e000ed00 	.word	0xe000ed00
 800c954:	40023008 	.word	0x40023008
 800c958:	40023000 	.word	0x40023000
 800c95c:	f407a5c2 	.word	0xf407a5c2
 800c960:	b5e8b5cd 	.word	0xb5e8b5cd
 800c964:	e0042000 	.word	0xe0042000
 800c968:	5c001000 	.word	0x5c001000
 800c96c:	58024c08 	.word	0x58024c08
 800c970:	58024c00 	.word	0x58024c00
 800c974:	200014f4 	.word	0x200014f4
 800c978:	20000000 	.word	0x20000000

0800c97c <MotionEC_Run>:
 800c97c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c980:	ed2d 8b10 	vpush	{d8-d15}
 800c984:	4c04      	ldr	r4, [pc, #16]	; (800c998 <MotionEC_Run+0x1c>)
 800c986:	7823      	ldrb	r3, [r4, #0]
 800c988:	b09f      	sub	sp, #124	; 0x7c
 800c98a:	b93b      	cbnz	r3, 800c99c <MotionEC_Run+0x20>
 800c98c:	b01f      	add	sp, #124	; 0x7c
 800c98e:	ecbd 8b10 	vpop	{d8-d15}
 800c992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c996:	bf00      	nop
 800c998:	200014f4 	.word	0x200014f4
 800c99c:	4607      	mov	r7, r0
 800c99e:	460d      	mov	r5, r1
 800c9a0:	6800      	ldr	r0, [r0, #0]
 800c9a2:	6879      	ldr	r1, [r7, #4]
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	4ef7      	ldr	r6, [pc, #988]	; (800cd84 <MotionEC_Run+0x408>)
 800c9a8:	f10d 0910 	add.w	r9, sp, #16
 800c9ac:	464b      	mov	r3, r9
 800c9ae:	c307      	stmia	r3!, {r0, r1, r2}
 800c9b0:	ed9d ba05 	vldr	s22, [sp, #20]
 800c9b4:	eddd ba04 	vldr	s23, [sp, #16]
 800c9b8:	eddd 9a06 	vldr	s19, [sp, #24]
 800c9bc:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 800c9c0:	463b      	mov	r3, r7
 800c9c2:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800c9c6:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 800c9ca:	f10d 081c 	add.w	r8, sp, #28
 800c9ce:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800c9d2:	689a      	ldr	r2, [r3, #8]
 800c9d4:	6859      	ldr	r1, [r3, #4]
 800c9d6:	4643      	mov	r3, r8
 800c9d8:	c307      	stmia	r3!, {r0, r1, r2}
 800c9da:	ee17 0a90 	vmov	r0, s15
 800c9de:	f7f3 fdbb 	bl	8000558 <__aeabi_f2d>
 800c9e2:	ec41 0b10 	vmov	d0, r0, r1
 800c9e6:	f009 fe31 	bl	801664c <sqrt>
 800c9ea:	ec51 0b10 	vmov	r0, r1, d0
 800c9ee:	f7f4 f8e3 	bl	8000bb8 <__aeabi_d2f>
 800c9f2:	ed9d 8a08 	vldr	s16, [sp, #32]
 800c9f6:	ed9d 9a07 	vldr	s18, [sp, #28]
 800c9fa:	eddd 8a09 	vldr	s17, [sp, #36]	; 0x24
 800c9fe:	ee68 7a08 	vmul.f32	s15, s16, s16
 800ca02:	ee0a 0a10 	vmov	s20, r0
 800ca06:	eee9 7a09 	vfma.f32	s15, s18, s18
 800ca0a:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800ca0e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800ca12:	eecc aa0a 	vdiv.f32	s21, s24, s20
 800ca16:	ee17 0a90 	vmov	r0, s15
 800ca1a:	f7f3 fd9d 	bl	8000558 <__aeabi_f2d>
 800ca1e:	ec41 0b10 	vmov	d0, r0, r1
 800ca22:	f009 fe13 	bl	801664c <sqrt>
 800ca26:	ec51 0b10 	vmov	r0, r1, d0
 800ca2a:	f7f4 f8c5 	bl	8000bb8 <__aeabi_d2f>
 800ca2e:	ee07 0a90 	vmov	s15, r0
 800ca32:	eecc 7a27 	vdiv.f32	s15, s24, s15
 800ca36:	7b33      	ldrb	r3, [r6, #12]
 800ca38:	ee6b baaa 	vmul.f32	s23, s23, s21
 800ca3c:	ee29 9a27 	vmul.f32	s18, s18, s15
 800ca40:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ca44:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800ca48:	ee69 9aaa 	vmul.f32	s19, s19, s21
 800ca4c:	ee6b 7a2a 	vmul.f32	s15, s22, s21
 800ca50:	ed8d 9a07 	vstr	s18, [sp, #28]
 800ca54:	ed8d 8a08 	vstr	s16, [sp, #32]
 800ca58:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 800ca5c:	edcd ba04 	vstr	s23, [sp, #16]
 800ca60:	edcd 7a05 	vstr	s15, [sp, #20]
 800ca64:	edcd 9a06 	vstr	s19, [sp, #24]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f040 822f 	bne.w	800cecc <MotionEC_Run+0x550>
 800ca6e:	ee7a 6a4c 	vsub.f32	s13, s20, s24
 800ca72:	ed96 7a01 	vldr	s14, [r6, #4]
 800ca76:	ed96 5a00 	vldr	s10, [r6]
 800ca7a:	edd4 2a04 	vldr	s5, [r4, #16]
 800ca7e:	ed94 3a05 	vldr	s6, [r4, #20]
 800ca82:	edd4 3a06 	vldr	s7, [r4, #24]
 800ca86:	ed94 4a01 	vldr	s8, [r4, #4]
 800ca8a:	edd4 4a02 	vldr	s9, [r4, #8]
 800ca8e:	eef0 6ae6 	vabs.f32	s13, s13
 800ca92:	ee7c 6a66 	vsub.f32	s13, s24, s13
 800ca96:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
 800ca9a:	ee26 6a87 	vmul.f32	s12, s13, s14
 800ca9e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800caa2:	ee66 6a85 	vmul.f32	s13, s13, s10
 800caa6:	ee25 5a25 	vmul.f32	s10, s10, s11
 800caaa:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800caae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab2:	eeb4 5ae6 	vcmpe.f32	s10, s13
 800cab6:	bfb8      	it	lt
 800cab8:	eeb0 7a46 	vmovlt.f32	s14, s12
 800cabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac0:	bfa8      	it	ge
 800cac2:	eef0 6a45 	vmovge.f32	s13, s10
 800cac6:	ee27 9a09 	vmul.f32	s18, s14, s18
 800caca:	ee27 8a08 	vmul.f32	s16, s14, s16
 800cace:	ee68 8a87 	vmul.f32	s17, s17, s14
 800cad2:	ee26 6aab 	vmul.f32	s12, s13, s23
 800cad6:	ee3c 7a47 	vsub.f32	s14, s24, s14
 800cada:	ee7c 5a66 	vsub.f32	s11, s24, s13
 800cade:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cae2:	ee69 9aa6 	vmul.f32	s19, s19, s13
 800cae6:	edd4 6a03 	vldr	s13, [r4, #12]
 800caea:	eea7 9a22 	vfma.f32	s18, s14, s5
 800caee:	eea7 8a03 	vfma.f32	s16, s14, s6
 800caf2:	eee7 8a23 	vfma.f32	s17, s14, s7
 800caf6:	eeb0 7a46 	vmov.f32	s14, s12
 800cafa:	eea5 7a84 	vfma.f32	s14, s11, s8
 800cafe:	eee5 7aa4 	vfma.f32	s15, s11, s9
 800cb02:	eee5 9aa6 	vfma.f32	s19, s11, s13
 800cb06:	ed84 9a04 	vstr	s18, [r4, #16]
 800cb0a:	ed84 8a05 	vstr	s16, [r4, #20]
 800cb0e:	edc4 8a06 	vstr	s17, [r4, #24]
 800cb12:	ed84 7a01 	vstr	s14, [r4, #4]
 800cb16:	edc4 7a02 	vstr	s15, [r4, #8]
 800cb1a:	edc4 9a03 	vstr	s19, [r4, #12]
 800cb1e:	eef0 aa47 	vmov.f32	s21, s14
 800cb22:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cb26:	ee28 8a08 	vmul.f32	s16, s16, s16
 800cb2a:	eee7 7a07 	vfma.f32	s15, s14, s14
 800cb2e:	eea9 8a09 	vfma.f32	s16, s18, s18
 800cb32:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800cb36:	eea8 8aa8 	vfma.f32	s16, s17, s17
 800cb3a:	ee17 0a90 	vmov	r0, s15
 800cb3e:	f7f3 fd0b 	bl	8000558 <__aeabi_f2d>
 800cb42:	ec41 0b10 	vmov	d0, r0, r1
 800cb46:	f009 fd81 	bl	801664c <sqrt>
 800cb4a:	ee18 0a10 	vmov	r0, s16
 800cb4e:	ec59 8b10 	vmov	r8, r9, d0
 800cb52:	f7f3 fd01 	bl	8000558 <__aeabi_f2d>
 800cb56:	ec41 0b10 	vmov	d0, r0, r1
 800cb5a:	f009 fd77 	bl	801664c <sqrt>
 800cb5e:	4649      	mov	r1, r9
 800cb60:	4640      	mov	r0, r8
 800cb62:	ed8d 0b00 	vstr	d0, [sp]
 800cb66:	f7f4 f827 	bl	8000bb8 <__aeabi_d2f>
 800cb6a:	ed9d 0b00 	vldr	d0, [sp]
 800cb6e:	ee07 0a90 	vmov	s15, r0
 800cb72:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 800cb76:	ec51 0b10 	vmov	r0, r1, d0
 800cb7a:	ee8b 9aa7 	vdiv.f32	s18, s23, s15
 800cb7e:	f7f4 f81b 	bl	8000bb8 <__aeabi_d2f>
 800cb82:	ee07 0a90 	vmov	s15, r0
 800cb86:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 800cb8a:	edd4 6a04 	vldr	s13, [r4, #16]
 800cb8e:	edd4 8a03 	vldr	s17, [r4, #12]
 800cb92:	edd4 5a02 	vldr	s11, [r4, #8]
 800cb96:	ed94 7a06 	vldr	s14, [r4, #24]
 800cb9a:	ed94 6a05 	vldr	s12, [r4, #20]
 800cb9e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800cba2:	ee69 8a28 	vmul.f32	s17, s18, s17
 800cba6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cbaa:	ee69 aa2a 	vmul.f32	s21, s18, s21
 800cbae:	ee66 9ae8 	vnmul.f32	s19, s13, s17
 800cbb2:	ee29 9a25 	vmul.f32	s18, s18, s11
 800cbb6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cbba:	eee7 9a2a 	vfma.f32	s19, s14, s21
 800cbbe:	ee29 8a47 	vnmul.f32	s16, s18, s14
 800cbc2:	ee27 aaea 	vnmul.f32	s20, s15, s21
 800cbc6:	eea8 8aa7 	vfma.f32	s16, s17, s15
 800cbca:	ee29 6aa9 	vmul.f32	s12, s19, s19
 800cbce:	eea9 aa26 	vfma.f32	s20, s18, s13
 800cbd2:	eea8 6a08 	vfma.f32	s12, s16, s16
 800cbd6:	edc4 7a05 	vstr	s15, [r4, #20]
 800cbda:	eeaa 6a0a 	vfma.f32	s12, s20, s20
 800cbde:	ed84 7a06 	vstr	s14, [r4, #24]
 800cbe2:	edc4 6a04 	vstr	s13, [r4, #16]
 800cbe6:	ee16 0a10 	vmov	r0, s12
 800cbea:	edc4 8a03 	vstr	s17, [r4, #12]
 800cbee:	edc4 aa01 	vstr	s21, [r4, #4]
 800cbf2:	ed84 9a02 	vstr	s18, [r4, #8]
 800cbf6:	f7f3 fcaf 	bl	8000558 <__aeabi_f2d>
 800cbfa:	ec41 0b10 	vmov	d0, r0, r1
 800cbfe:	f009 fd25 	bl	801664c <sqrt>
 800cc02:	ec51 0b10 	vmov	r0, r1, d0
 800cc06:	f7f3 ffd7 	bl	8000bb8 <__aeabi_d2f>
 800cc0a:	ee07 0a90 	vmov	s15, r0
 800cc0e:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 800cc12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cc16:	ee2a aa27 	vmul.f32	s20, s20, s15
 800cc1a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800cc1e:	ee2a baca 	vnmul.f32	s22, s21, s20
 800cc22:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800cc26:	eea8 ba28 	vfma.f32	s22, s16, s17
 800cc2a:	ee29 cae8 	vnmul.f32	s24, s19, s17
 800cc2e:	ee78 7a4b 	vsub.f32	s15, s16, s22
 800cc32:	ee69 ca48 	vnmul.f32	s25, s18, s16
 800cc36:	ee77 7ae8 	vsub.f32	s15, s15, s17
 800cc3a:	eeaa ca09 	vfma.f32	s24, s20, s18
 800cc3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc46:	eee9 caaa 	vfma.f32	s25, s19, s21
 800cc4a:	f2c0 815b 	blt.w	800cf04 <MotionEC_Run+0x588>
 800cc4e:	ee77 7aab 	vadd.f32	s15, s15, s23
 800cc52:	ee17 0a90 	vmov	r0, s15
 800cc56:	f7f3 fc7f 	bl	8000558 <__aeabi_f2d>
 800cc5a:	ec41 0b10 	vmov	d0, r0, r1
 800cc5e:	f009 fcf5 	bl	801664c <sqrt>
 800cc62:	2200      	movs	r2, #0
 800cc64:	4b48      	ldr	r3, [pc, #288]	; (800cd88 <MotionEC_Run+0x40c>)
 800cc66:	ec51 0b10 	vmov	r0, r1, d0
 800cc6a:	f7f3 fccd 	bl	8000608 <__aeabi_dmul>
 800cc6e:	ee79 7a6c 	vsub.f32	s15, s18, s25
 800cc72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc7a:	da02      	bge.n	800cc82 <MotionEC_Run+0x306>
 800cc7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc80:	4619      	mov	r1, r3
 800cc82:	f7f3 ff99 	bl	8000bb8 <__aeabi_d2f>
 800cc86:	ee7b 7a48 	vsub.f32	s15, s22, s16
 800cc8a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cc8e:	ee77 7ae8 	vsub.f32	s15, s15, s17
 800cc92:	ee0b 0a90 	vmov	s23, r0
 800cc96:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc9e:	6028      	str	r0, [r5, #0]
 800cca0:	f2c0 8136 	blt.w	800cf10 <MotionEC_Run+0x594>
 800cca4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cca8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ccac:	ee17 0a90 	vmov	r0, s15
 800ccb0:	f7f3 fc52 	bl	8000558 <__aeabi_f2d>
 800ccb4:	ec41 0b10 	vmov	d0, r0, r1
 800ccb8:	f009 fcc8 	bl	801664c <sqrt>
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	4b32      	ldr	r3, [pc, #200]	; (800cd88 <MotionEC_Run+0x40c>)
 800ccc0:	ec51 0b10 	vmov	r0, r1, d0
 800ccc4:	f7f3 fca0 	bl	8000608 <__aeabi_dmul>
 800ccc8:	ee7a 7a6a 	vsub.f32	s15, s20, s21
 800cccc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ccd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd4:	da02      	bge.n	800ccdc <MotionEC_Run+0x360>
 800ccd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ccda:	4619      	mov	r1, r3
 800ccdc:	f7f3 ff6c 	bl	8000bb8 <__aeabi_d2f>
 800cce0:	ee78 7ac8 	vsub.f32	s15, s17, s16
 800cce4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cce8:	ee77 7acb 	vsub.f32	s15, s15, s22
 800ccec:	ee0d 0a10 	vmov	s26, r0
 800ccf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ccf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccf8:	6068      	str	r0, [r5, #4]
 800ccfa:	f2c0 8106 	blt.w	800cf0a <MotionEC_Run+0x58e>
 800ccfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd02:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd06:	ee17 0a90 	vmov	r0, s15
 800cd0a:	f7f3 fc25 	bl	8000558 <__aeabi_f2d>
 800cd0e:	ec41 0b10 	vmov	d0, r0, r1
 800cd12:	f009 fc9b 	bl	801664c <sqrt>
 800cd16:	2200      	movs	r2, #0
 800cd18:	4b1b      	ldr	r3, [pc, #108]	; (800cd88 <MotionEC_Run+0x40c>)
 800cd1a:	ec51 0b10 	vmov	r0, r1, d0
 800cd1e:	f7f3 fc73 	bl	8000608 <__aeabi_dmul>
 800cd22:	ee7c 7a69 	vsub.f32	s15, s24, s19
 800cd26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd2e:	da02      	bge.n	800cd36 <MotionEC_Run+0x3ba>
 800cd30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd34:	4619      	mov	r1, r3
 800cd36:	f7f3 ff3f 	bl	8000bb8 <__aeabi_d2f>
 800cd3a:	ee78 7a28 	vadd.f32	s15, s16, s17
 800cd3e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cd42:	ee77 7a8b 	vadd.f32	s15, s15, s22
 800cd46:	ee0d 0a90 	vmov	s27, r0
 800cd4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd52:	60a8      	str	r0, [r5, #8]
 800cd54:	f2c0 81c3 	blt.w	800d0de <MotionEC_Run+0x762>
 800cd58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd60:	ee17 0a90 	vmov	r0, s15
 800cd64:	f7f3 fbf8 	bl	8000558 <__aeabi_f2d>
 800cd68:	ec41 0b10 	vmov	d0, r0, r1
 800cd6c:	f009 fc6e 	bl	801664c <sqrt>
 800cd70:	2200      	movs	r2, #0
 800cd72:	4b05      	ldr	r3, [pc, #20]	; (800cd88 <MotionEC_Run+0x40c>)
 800cd74:	ec51 0b10 	vmov	r0, r1, d0
 800cd78:	f7f3 fc46 	bl	8000608 <__aeabi_dmul>
 800cd7c:	f7f3 ff1c 	bl	8000bb8 <__aeabi_d2f>
 800cd80:	e006      	b.n	800cd90 <MotionEC_Run+0x414>
 800cd82:	bf00      	nop
 800cd84:	20000000 	.word	0x20000000
 800cd88:	3fe00000 	.word	0x3fe00000
 800cd8c:	42652edf 	.word	0x42652edf
 800cd90:	ee0e 0a10 	vmov	s28, r0
 800cd94:	7fe3      	ldrb	r3, [r4, #31]
 800cd96:	ed85 ea03 	vstr	s28, [r5, #12]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f040 8116 	bne.w	800cfcc <MotionEC_Run+0x650>
 800cda0:	7f23      	ldrb	r3, [r4, #28]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d06a      	beq.n	800ce7c <MotionEC_Run+0x500>
 800cda6:	ed96 5a0d 	vldr	s10, [r6, #52]	; 0x34
 800cdaa:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 800cdae:	edd6 5a10 	vldr	s11, [r6, #64]	; 0x40
 800cdb2:	ed97 6a06 	vldr	s12, [r7, #24]
 800cdb6:	edd6 4a0b 	vldr	s9, [r6, #44]	; 0x2c
 800cdba:	ed96 4a0e 	vldr	s8, [r6, #56]	; 0x38
 800cdbe:	ed86 9a0d 	vstr	s18, [r6, #52]	; 0x34
 800cdc2:	ee65 6a68 	vnmul.f32	s13, s10, s17
 800cdc6:	ee29 7a67 	vnmul.f32	s14, s18, s15
 800cdca:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800cdce:	eea5 7a2a 	vfma.f32	s14, s10, s21
 800cdd2:	eee5 6a89 	vfma.f32	s13, s11, s18
 800cdd6:	eee5 7aea 	vfms.f32	s15, s11, s21
 800cdda:	ed96 5a08 	vldr	s10, [r6, #32]
 800cdde:	edc6 aa0a 	vstr	s21, [r6, #40]	; 0x28
 800cde2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800cde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdea:	eee5 7a0a 	vfma.f32	s15, s10, s20
 800cdee:	eea8 7a24 	vfma.f32	s14, s16, s9
 800cdf2:	eee9 6a84 	vfma.f32	s13, s19, s8
 800cdf6:	bf0c      	ite	eq
 800cdf8:	ed96 6a02 	vldreq	s12, [r6, #8]
 800cdfc:	ed86 6a02 	vstrne	s12, [r6, #8]
 800ce00:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800ce04:	eec3 5a86 	vdiv.f32	s11, s7, s12
 800ce08:	eee4 6aca 	vfms.f32	s13, s9, s20
 800ce0c:	eea9 7ac5 	vfms.f32	s14, s19, s10
 800ce10:	eee8 7a44 	vfms.f32	s15, s16, s8
 800ce14:	edd6 4a0f 	vldr	s9, [r6, #60]	; 0x3c
 800ce18:	ed96 6a09 	vldr	s12, [r6, #36]	; 0x24
 800ce1c:	ed96 5a0c 	vldr	s10, [r6, #48]	; 0x30
 800ce20:	ed86 aa0e 	vstr	s20, [r6, #56]	; 0x38
 800ce24:	eeec 7a86 	vfma.f32	s15, s25, s12
 800ce28:	eeeb 6a24 	vfma.f32	s13, s22, s9
 800ce2c:	eeac 7a05 	vfma.f32	s14, s24, s10
 800ce30:	eeec 7a64 	vfms.f32	s15, s24, s9
 800ce34:	eeab 7a46 	vfms.f32	s14, s22, s12
 800ce38:	eeec 6ac5 	vfms.f32	s13, s25, s10
 800ce3c:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 800cd8c <MotionEC_Run+0x410>
 800ce40:	ed86 8a08 	vstr	s16, [r6, #32]
 800ce44:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ce48:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ce4c:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ce50:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ce54:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ce58:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ce5c:	edc5 6a07 	vstr	s13, [r5, #28]
 800ce60:	edc5 7a08 	vstr	s15, [r5, #32]
 800ce64:	edc6 9a0b 	vstr	s19, [r6, #44]	; 0x2c
 800ce68:	ed86 ca09 	vstr	s24, [r6, #36]	; 0x24
 800ce6c:	ed86 ba0c 	vstr	s22, [r6, #48]	; 0x30
 800ce70:	ed85 7a09 	vstr	s14, [r5, #36]	; 0x24
 800ce74:	edc6 ca0f 	vstr	s25, [r6, #60]	; 0x3c
 800ce78:	edc6 8a10 	vstr	s17, [r6, #64]	; 0x40
 800ce7c:	7f63      	ldrb	r3, [r4, #29]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d149      	bne.n	800cf16 <MotionEC_Run+0x59a>
 800ce82:	7fa3      	ldrb	r3, [r4, #30]
 800ce84:	b1bb      	cbz	r3, 800ceb6 <MotionEC_Run+0x53a>
 800ce86:	edd7 6a00 	vldr	s13, [r7]
 800ce8a:	ed97 7a01 	vldr	s14, [r7, #4]
 800ce8e:	edd7 7a02 	vldr	s15, [r7, #8]
 800ce92:	ed95 5a0a 	vldr	s10, [r5, #40]	; 0x28
 800ce96:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 800ce9a:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 800ce9e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800cea2:	ee37 7a65 	vsub.f32	s14, s14, s11
 800cea6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ceaa:	edc5 6a0d 	vstr	s13, [r5, #52]	; 0x34
 800ceae:	ed85 7a0e 	vstr	s14, [r5, #56]	; 0x38
 800ceb2:	edc5 7a0f 	vstr	s15, [r5, #60]	; 0x3c
 800ceb6:	6828      	ldr	r0, [r5, #0]
 800ceb8:	6869      	ldr	r1, [r5, #4]
 800ceba:	68aa      	ldr	r2, [r5, #8]
 800cebc:	68eb      	ldr	r3, [r5, #12]
 800cebe:	4c89      	ldr	r4, [pc, #548]	; (800d0e4 <MotionEC_Run+0x768>)
 800cec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cec2:	b01f      	add	sp, #124	; 0x7c
 800cec4:	ecbd 8b10 	vpop	{d8-d15}
 800cec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cecc:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800ced0:	1d23      	adds	r3, r4, #4
 800ced2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ced6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800ceda:	f104 0310 	add.w	r3, r4, #16
 800cede:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cee2:	2300      	movs	r3, #0
 800cee4:	ed94 7a01 	vldr	s14, [r4, #4]
 800cee8:	edd4 7a02 	vldr	s15, [r4, #8]
 800ceec:	edd4 9a03 	vldr	s19, [r4, #12]
 800cef0:	ed94 9a04 	vldr	s18, [r4, #16]
 800cef4:	ed94 8a05 	vldr	s16, [r4, #20]
 800cef8:	edd4 8a06 	vldr	s17, [r4, #24]
 800cefc:	7333      	strb	r3, [r6, #12]
 800cefe:	edd4 aa01 	vldr	s21, [r4, #4]
 800cf02:	e60e      	b.n	800cb22 <MotionEC_Run+0x1a6>
 800cf04:	2000      	movs	r0, #0
 800cf06:	2100      	movs	r1, #0
 800cf08:	e6b1      	b.n	800cc6e <MotionEC_Run+0x2f2>
 800cf0a:	2000      	movs	r0, #0
 800cf0c:	2100      	movs	r1, #0
 800cf0e:	e708      	b.n	800cd22 <MotionEC_Run+0x3a6>
 800cf10:	2000      	movs	r0, #0
 800cf12:	2100      	movs	r1, #0
 800cf14:	e6d8      	b.n	800ccc8 <MotionEC_Run+0x34c>
 800cf16:	2300      	movs	r3, #0
 800cf18:	eef1 6a6b 	vneg.f32	s13, s23
 800cf1c:	eeb1 7a4d 	vneg.f32	s14, s26
 800cf20:	eef1 7a6d 	vneg.f32	s15, s27
 800cf24:	aa12      	add	r2, sp, #72	; 0x48
 800cf26:	a916      	add	r1, sp, #88	; 0x58
 800cf28:	a80a      	add	r0, sp, #40	; 0x28
 800cf2a:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 800cf2e:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 800cf32:	9316      	str	r3, [sp, #88]	; 0x58
 800cf34:	9317      	str	r3, [sp, #92]	; 0x5c
 800cf36:	9318      	str	r3, [sp, #96]	; 0x60
 800cf38:	ed8d 7a0c 	vstr	s14, [sp, #48]	; 0x30
 800cf3c:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 800cf40:	ed8d ea0a 	vstr	s28, [sp, #40]	; 0x28
 800cf44:	ed8d ea0e 	vstr	s28, [sp, #56]	; 0x38
 800cf48:	edcd ba0f 	vstr	s23, [sp, #60]	; 0x3c
 800cf4c:	ed8d da10 	vstr	s26, [sp, #64]	; 0x40
 800cf50:	edcd da11 	vstr	s27, [sp, #68]	; 0x44
 800cf54:	9619      	str	r6, [sp, #100]	; 0x64
 800cf56:	f7ff fc19 	bl	800c78c <quaternionsMult>
 800cf5a:	aa1a      	add	r2, sp, #104	; 0x68
 800cf5c:	a812      	add	r0, sp, #72	; 0x48
 800cf5e:	a90e      	add	r1, sp, #56	; 0x38
 800cf60:	f7ff fc14 	bl	800c78c <quaternionsMult>
 800cf64:	ed9d 9a1b 	vldr	s18, [sp, #108]	; 0x6c
 800cf68:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 800cf6c:	eddd 8a1c 	vldr	s17, [sp, #112]	; 0x70
 800cf70:	ed9d 8a1d 	vldr	s16, [sp, #116]	; 0x74
 800cf74:	ee69 7a09 	vmul.f32	s15, s18, s18
 800cf78:	eee7 7a07 	vfma.f32	s15, s14, s14
 800cf7c:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800cf80:	eee8 7a08 	vfma.f32	s15, s16, s16
 800cf84:	ee17 0a90 	vmov	r0, s15
 800cf88:	f7f3 fae6 	bl	8000558 <__aeabi_f2d>
 800cf8c:	ec41 0b10 	vmov	d0, r0, r1
 800cf90:	f009 fb5c 	bl	801664c <sqrt>
 800cf94:	2000      	movs	r0, #0
 800cf96:	ec53 2b10 	vmov	r2, r3, d0
 800cf9a:	4953      	ldr	r1, [pc, #332]	; (800d0e8 <MotionEC_Run+0x76c>)
 800cf9c:	f7f3 fc5e 	bl	800085c <__aeabi_ddiv>
 800cfa0:	f7f3 fe0a 	bl	8000bb8 <__aeabi_d2f>
 800cfa4:	ee07 0a90 	vmov	s15, r0
 800cfa8:	ee29 9a27 	vmul.f32	s18, s18, s15
 800cfac:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800cfb0:	ee28 8a27 	vmul.f32	s16, s16, s15
 800cfb4:	ed8d 9a1b 	vstr	s18, [sp, #108]	; 0x6c
 800cfb8:	edcd 8a1c 	vstr	s17, [sp, #112]	; 0x70
 800cfbc:	ed8d 8a1d 	vstr	s16, [sp, #116]	; 0x74
 800cfc0:	ab1b      	add	r3, sp, #108	; 0x6c
 800cfc2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cfc4:	62a8      	str	r0, [r5, #40]	; 0x28
 800cfc6:	62e9      	str	r1, [r5, #44]	; 0x2c
 800cfc8:	632a      	str	r2, [r5, #48]	; 0x30
 800cfca:	e75a      	b.n	800ce82 <MotionEC_Run+0x506>
 800cfcc:	ee6d 6a4d 	vnmul.f32	s13, s26, s26
 800cfd0:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
 800cfd4:	eef0 fa00 	vmov.f32	s31, #0	; 0x40000000  2.0
 800cfd8:	eef0 7a4f 	vmov.f32	s15, s30
 800cfdc:	eee6 7aaf 	vfma.f32	s15, s13, s31
 800cfe0:	ee2d 7aed 	vnmul.f32	s14, s27, s27
 800cfe4:	edcd 6a03 	vstr	s13, [sp, #12]
 800cfe8:	eee7 7a2f 	vfma.f32	s15, s14, s31
 800cfec:	ee17 0a90 	vmov	r0, s15
 800cff0:	f7f3 fab2 	bl	8000558 <__aeabi_f2d>
 800cff4:	ee6b 7a8d 	vmul.f32	s15, s23, s26
 800cff8:	e9cd 0100 	strd	r0, r1, [sp]
 800cffc:	eeed 7a8e 	vfma.f32	s15, s27, s28
 800d000:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d004:	ee17 0a90 	vmov	r0, s15
 800d008:	f7f3 faa6 	bl	8000558 <__aeabi_f2d>
 800d00c:	ed9d 1b00 	vldr	d1, [sp]
 800d010:	ec41 0b10 	vmov	d0, r0, r1
 800d014:	f009 fb18 	bl	8016648 <atan2>
 800d018:	ec51 0b10 	vmov	r0, r1, d0
 800d01c:	f7f3 fdcc 	bl	8000bb8 <__aeabi_d2f>
 800d020:	ee6b 7aeb 	vnmul.f32	s15, s23, s23
 800d024:	eddd 6a03 	vldr	s13, [sp, #12]
 800d028:	9002      	str	r0, [sp, #8]
 800d02a:	eea7 faaf 	vfma.f32	s30, s15, s31
 800d02e:	ee07 0a10 	vmov	s14, r0
 800d032:	eea6 faaf 	vfma.f32	s30, s13, s31
 800d036:	eef1 ea47 	vneg.f32	s29, s14
 800d03a:	edc5 ea04 	vstr	s29, [r5, #16]
 800d03e:	ee1f 0a10 	vmov	r0, s30
 800d042:	f7f3 fa89 	bl	8000558 <__aeabi_f2d>
 800d046:	ee6b 7a8e 	vmul.f32	s15, s23, s28
 800d04a:	e9cd 0100 	strd	r0, r1, [sp]
 800d04e:	eeed 7a2d 	vfma.f32	s15, s26, s27
 800d052:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d056:	ee17 0a90 	vmov	r0, s15
 800d05a:	f7f3 fa7d 	bl	8000558 <__aeabi_f2d>
 800d05e:	ed9d 1b00 	vldr	d1, [sp]
 800d062:	ec41 0b10 	vmov	d0, r0, r1
 800d066:	f009 faef 	bl	8016648 <atan2>
 800d06a:	ec51 0b10 	vmov	r0, r1, d0
 800d06e:	f7f3 fda3 	bl	8000bb8 <__aeabi_d2f>
 800d072:	ee6e 7a4d 	vnmul.f32	s15, s28, s26
 800d076:	ee07 0a10 	vmov	s14, r0
 800d07a:	eeeb 7aad 	vfma.f32	s15, s23, s27
 800d07e:	eeb1 fa47 	vneg.f32	s30, s14
 800d082:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d086:	ed85 fa05 	vstr	s30, [r5, #20]
 800d08a:	ee17 0a90 	vmov	r0, s15
 800d08e:	f7f3 fa63 	bl	8000558 <__aeabi_f2d>
 800d092:	ec41 0b10 	vmov	d0, r0, r1
 800d096:	f009 fa7f 	bl	8016598 <asin>
 800d09a:	ec51 0b10 	vmov	r0, r1, d0
 800d09e:	f7f3 fd8b 	bl	8000bb8 <__aeabi_d2f>
 800d0a2:	ed9d 7a02 	vldr	s14, [sp, #8]
 800d0a6:	61a8      	str	r0, [r5, #24]
 800d0a8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800d0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0b0:	bfc8      	it	gt
 800d0b2:	eddf ea0e 	vldrgt	s29, [pc, #56]	; 800d0ec <MotionEC_Run+0x770>
 800d0b6:	ee07 0a90 	vmov	s15, r0
 800d0ba:	bfc8      	it	gt
 800d0bc:	ee7e eac7 	vsubgt.f32	s29, s29, s14
 800d0c0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800d0f0 <MotionEC_Run+0x774>
 800d0c4:	ee6e ea87 	vmul.f32	s29, s29, s14
 800d0c8:	ee2f fa07 	vmul.f32	s30, s30, s14
 800d0cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0d0:	edc5 ea04 	vstr	s29, [r5, #16]
 800d0d4:	ed85 fa05 	vstr	s30, [r5, #20]
 800d0d8:	edc5 7a06 	vstr	s15, [r5, #24]
 800d0dc:	e660      	b.n	800cda0 <MotionEC_Run+0x424>
 800d0de:	ed9f ea05 	vldr	s28, [pc, #20]	; 800d0f4 <MotionEC_Run+0x778>
 800d0e2:	e657      	b.n	800cd94 <MotionEC_Run+0x418>
 800d0e4:	20000010 	.word	0x20000010
 800d0e8:	3ff00000 	.word	0x3ff00000
 800d0ec:	40c90fdc 	.word	0x40c90fdc
 800d0f0:	42652edf 	.word	0x42652edf
 800d0f4:	00000000 	.word	0x00000000

0800d0f8 <MotionEC_GetOrientationEnable>:
 800d0f8:	4b02      	ldr	r3, [pc, #8]	; (800d104 <MotionEC_GetOrientationEnable+0xc>)
 800d0fa:	781a      	ldrb	r2, [r3, #0]
 800d0fc:	b10a      	cbz	r2, 800d102 <MotionEC_GetOrientationEnable+0xa>
 800d0fe:	7fdb      	ldrb	r3, [r3, #31]
 800d100:	7003      	strb	r3, [r0, #0]
 800d102:	4770      	bx	lr
 800d104:	200014f4 	.word	0x200014f4

0800d108 <MotionEC_SetOrientationEnable>:
 800d108:	4b02      	ldr	r3, [pc, #8]	; (800d114 <MotionEC_SetOrientationEnable+0xc>)
 800d10a:	781a      	ldrb	r2, [r3, #0]
 800d10c:	b102      	cbz	r2, 800d110 <MotionEC_SetOrientationEnable+0x8>
 800d10e:	77d8      	strb	r0, [r3, #31]
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	200014f4 	.word	0x200014f4

0800d118 <MotionEC_GetVirtualGyroEnable>:
 800d118:	4b02      	ldr	r3, [pc, #8]	; (800d124 <MotionEC_GetVirtualGyroEnable+0xc>)
 800d11a:	781a      	ldrb	r2, [r3, #0]
 800d11c:	b10a      	cbz	r2, 800d122 <MotionEC_GetVirtualGyroEnable+0xa>
 800d11e:	7f1b      	ldrb	r3, [r3, #28]
 800d120:	7003      	strb	r3, [r0, #0]
 800d122:	4770      	bx	lr
 800d124:	200014f4 	.word	0x200014f4

0800d128 <MotionEC_SetVirtualGyroEnable>:
 800d128:	4b02      	ldr	r3, [pc, #8]	; (800d134 <MotionEC_SetVirtualGyroEnable+0xc>)
 800d12a:	781a      	ldrb	r2, [r3, #0]
 800d12c:	b102      	cbz	r2, 800d130 <MotionEC_SetVirtualGyroEnable+0x8>
 800d12e:	7718      	strb	r0, [r3, #28]
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	200014f4 	.word	0x200014f4

0800d138 <MotionEC_GetGravityEnable>:
 800d138:	4b02      	ldr	r3, [pc, #8]	; (800d144 <MotionEC_GetGravityEnable+0xc>)
 800d13a:	781a      	ldrb	r2, [r3, #0]
 800d13c:	b10a      	cbz	r2, 800d142 <MotionEC_GetGravityEnable+0xa>
 800d13e:	7f5b      	ldrb	r3, [r3, #29]
 800d140:	7003      	strb	r3, [r0, #0]
 800d142:	4770      	bx	lr
 800d144:	200014f4 	.word	0x200014f4

0800d148 <MotionEC_SetGravityEnable>:
 800d148:	4b02      	ldr	r3, [pc, #8]	; (800d154 <MotionEC_SetGravityEnable+0xc>)
 800d14a:	781a      	ldrb	r2, [r3, #0]
 800d14c:	b102      	cbz	r2, 800d150 <MotionEC_SetGravityEnable+0x8>
 800d14e:	7758      	strb	r0, [r3, #29]
 800d150:	4770      	bx	lr
 800d152:	bf00      	nop
 800d154:	200014f4 	.word	0x200014f4

0800d158 <MotionEC_GetLinearAccEnable>:
 800d158:	4b02      	ldr	r3, [pc, #8]	; (800d164 <MotionEC_GetLinearAccEnable+0xc>)
 800d15a:	781a      	ldrb	r2, [r3, #0]
 800d15c:	b10a      	cbz	r2, 800d162 <MotionEC_GetLinearAccEnable+0xa>
 800d15e:	7f9b      	ldrb	r3, [r3, #30]
 800d160:	7003      	strb	r3, [r0, #0]
 800d162:	4770      	bx	lr
 800d164:	200014f4 	.word	0x200014f4

0800d168 <MotionEC_SetLinearAccEnable>:
 800d168:	4b02      	ldr	r3, [pc, #8]	; (800d174 <MotionEC_SetLinearAccEnable+0xc>)
 800d16a:	781a      	ldrb	r2, [r3, #0]
 800d16c:	b102      	cbz	r2, 800d170 <MotionEC_SetLinearAccEnable+0x8>
 800d16e:	7798      	strb	r0, [r3, #30]
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop
 800d174:	200014f4 	.word	0x200014f4

0800d178 <MotionEC_GetLibVersion>:
 800d178:	4b0f      	ldr	r3, [pc, #60]	; (800d1b8 <MotionEC_GetLibVersion+0x40>)
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	b90b      	cbnz	r3, 800d182 <MotionEC_GetLibVersion+0xa>
 800d17e:	4618      	mov	r0, r3
 800d180:	4770      	bx	lr
 800d182:	b470      	push	{r4, r5, r6}
 800d184:	4e0d      	ldr	r6, [pc, #52]	; (800d1bc <MotionEC_GetLibVersion+0x44>)
 800d186:	4605      	mov	r5, r0
 800d188:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d18a:	b08b      	sub	sp, #44	; 0x2c
 800d18c:	ac01      	add	r4, sp, #4
 800d18e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d190:	6833      	ldr	r3, [r6, #0]
 800d192:	f824 3b02 	strh.w	r3, [r4], #2
 800d196:	0c1b      	lsrs	r3, r3, #16
 800d198:	7023      	strb	r3, [r4, #0]
 800d19a:	ac01      	add	r4, sp, #4
 800d19c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d19e:	8826      	ldrh	r6, [r4, #0]
 800d1a0:	60eb      	str	r3, [r5, #12]
 800d1a2:	78a4      	ldrb	r4, [r4, #2]
 800d1a4:	6028      	str	r0, [r5, #0]
 800d1a6:	2312      	movs	r3, #18
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	6069      	str	r1, [r5, #4]
 800d1ac:	60aa      	str	r2, [r5, #8]
 800d1ae:	822e      	strh	r6, [r5, #16]
 800d1b0:	74ac      	strb	r4, [r5, #18]
 800d1b2:	b00b      	add	sp, #44	; 0x2c
 800d1b4:	bc70      	pop	{r4, r5, r6}
 800d1b6:	4770      	bx	lr
 800d1b8:	200014f4 	.word	0x200014f4
 800d1bc:	08017fac 	.word	0x08017fac

0800d1c0 <MotionAC_Initialize>:
 800d1c0:	4a5a      	ldr	r2, [pc, #360]	; (800d32c <MotionAC_Initialize+0x16c>)
 800d1c2:	495b      	ldr	r1, [pc, #364]	; (800d330 <MotionAC_Initialize+0x170>)
 800d1c4:	6813      	ldr	r3, [r2, #0]
 800d1c6:	f023 0301 	bic.w	r3, r3, #1
 800d1ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1ce:	6013      	str	r3, [r2, #0]
 800d1d0:	680b      	ldr	r3, [r1, #0]
 800d1d2:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800d1d6:	4013      	ands	r3, r2
 800d1d8:	f24c 2440 	movw	r4, #49728	; 0xc240
 800d1dc:	42a3      	cmp	r3, r4
 800d1de:	b091      	sub	sp, #68	; 0x44
 800d1e0:	d013      	beq.n	800d20a <MotionAC_Initialize+0x4a>
 800d1e2:	680b      	ldr	r3, [r1, #0]
 800d1e4:	f24c 2170 	movw	r1, #49776	; 0xc270
 800d1e8:	4013      	ands	r3, r2
 800d1ea:	428b      	cmp	r3, r1
 800d1ec:	d00d      	beq.n	800d20a <MotionAC_Initialize+0x4a>
 800d1ee:	4b51      	ldr	r3, [pc, #324]	; (800d334 <MotionAC_Initialize+0x174>)
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	601a      	str	r2, [r3, #0]
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	2a00      	cmp	r2, #0
 800d1f8:	d1fc      	bne.n	800d1f4 <MotionAC_Initialize+0x34>
 800d1fa:	4b4f      	ldr	r3, [pc, #316]	; (800d338 <MotionAC_Initialize+0x178>)
 800d1fc:	4a4f      	ldr	r2, [pc, #316]	; (800d33c <MotionAC_Initialize+0x17c>)
 800d1fe:	601a      	str	r2, [r3, #0]
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	4b4f      	ldr	r3, [pc, #316]	; (800d340 <MotionAC_Initialize+0x180>)
 800d204:	429a      	cmp	r2, r3
 800d206:	d01f      	beq.n	800d248 <MotionAC_Initialize+0x88>
 800d208:	e7fe      	b.n	800d208 <MotionAC_Initialize+0x48>
 800d20a:	4b4e      	ldr	r3, [pc, #312]	; (800d344 <MotionAC_Initialize+0x184>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d1ed      	bne.n	800d1ee <MotionAC_Initialize+0x2e>
 800d212:	4a4d      	ldr	r2, [pc, #308]	; (800d348 <MotionAC_Initialize+0x188>)
 800d214:	6813      	ldr	r3, [r2, #0]
 800d216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d21a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d21e:	d006      	beq.n	800d22e <MotionAC_Initialize+0x6e>
 800d220:	6813      	ldr	r3, [r2, #0]
 800d222:	f240 4283 	movw	r2, #1155	; 0x483
 800d226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d1df      	bne.n	800d1ee <MotionAC_Initialize+0x2e>
 800d22e:	4b47      	ldr	r3, [pc, #284]	; (800d34c <MotionAC_Initialize+0x18c>)
 800d230:	2201      	movs	r2, #1
 800d232:	601a      	str	r2, [r3, #0]
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	2a00      	cmp	r2, #0
 800d238:	d1fc      	bne.n	800d234 <MotionAC_Initialize+0x74>
 800d23a:	4b45      	ldr	r3, [pc, #276]	; (800d350 <MotionAC_Initialize+0x190>)
 800d23c:	4a3f      	ldr	r2, [pc, #252]	; (800d33c <MotionAC_Initialize+0x17c>)
 800d23e:	601a      	str	r2, [r3, #0]
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	4b3f      	ldr	r3, [pc, #252]	; (800d340 <MotionAC_Initialize+0x180>)
 800d244:	429a      	cmp	r2, r3
 800d246:	d1df      	bne.n	800d208 <MotionAC_Initialize+0x48>
 800d248:	4f42      	ldr	r7, [pc, #264]	; (800d354 <MotionAC_Initialize+0x194>)
 800d24a:	f04f 0901 	mov.w	r9, #1
 800d24e:	4606      	mov	r6, r0
 800d250:	f887 9000 	strb.w	r9, [r7]
 800d254:	b9e0      	cbnz	r0, 800d290 <MotionAC_Initialize+0xd0>
 800d256:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800d358 <MotionAC_Initialize+0x198>
 800d25a:	f88d 9004 	strb.w	r9, [sp, #4]
 800d25e:	f108 0514 	add.w	r5, r8, #20
 800d262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d264:	ac03      	add	r4, sp, #12
 800d266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d26a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d26c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d26e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d270:	682a      	ldr	r2, [r5, #0]
 800d272:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 800d276:	6022      	str	r2, [r4, #0]
 800d278:	a901      	add	r1, sp, #4
 800d27a:	203c      	movs	r0, #60	; 0x3c
 800d27c:	9302      	str	r3, [sp, #8]
 800d27e:	f7ff f870 	bl	800c362 <MotionAC_SaveCalInNVM>
 800d282:	f888 6000 	strb.w	r6, [r8]
 800d286:	2300      	movs	r3, #0
 800d288:	707b      	strb	r3, [r7, #1]
 800d28a:	b011      	add	sp, #68	; 0x44
 800d28c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d290:	4c31      	ldr	r4, [pc, #196]	; (800d358 <MotionAC_Initialize+0x198>)
 800d292:	4832      	ldr	r0, [pc, #200]	; (800d35c <MotionAC_Initialize+0x19c>)
 800d294:	4a32      	ldr	r2, [pc, #200]	; (800d360 <MotionAC_Initialize+0x1a0>)
 800d296:	2114      	movs	r1, #20
 800d298:	f44f 13f0 	mov.w	r3, #1966080	; 0x1e0000
 800d29c:	f8c4 1464 	str.w	r1, [r4, #1124]	; 0x464
 800d2a0:	6523      	str	r3, [r4, #80]	; 0x50
 800d2a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d2a6:	f44f 03dc 	mov.w	r3, #7208960	; 0x6e0000
 800d2aa:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
 800d2ae:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
 800d2b2:	f504 618c 	add.w	r1, r4, #1120	; 0x460
 800d2b6:	f504 638d 	add.w	r3, r4, #1128	; 0x468
 800d2ba:	2500      	movs	r5, #0
 800d2bc:	6008      	str	r0, [r1, #0]
 800d2be:	601a      	str	r2, [r3, #0]
 800d2c0:	4629      	mov	r1, r5
 800d2c2:	222e      	movs	r2, #46	; 0x2e
 800d2c4:	f104 0016 	add.w	r0, r4, #22
 800d2c8:	7025      	strb	r5, [r4, #0]
 800d2ca:	f884 546c 	strb.w	r5, [r4, #1132]	; 0x46c
 800d2ce:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 800d2d2:	6565      	str	r5, [r4, #84]	; 0x54
 800d2d4:	6125      	str	r5, [r4, #16]
 800d2d6:	64a5      	str	r5, [r4, #72]	; 0x48
 800d2d8:	f006 fc17 	bl	8013b0a <memset>
 800d2dc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800d2e0:	2202      	movs	r2, #2
 800d2e2:	a901      	add	r1, sp, #4
 800d2e4:	203c      	movs	r0, #60	; 0x3c
 800d2e6:	f884 9015 	strb.w	r9, [r4, #21]
 800d2ea:	7522      	strb	r2, [r4, #20]
 800d2ec:	6263      	str	r3, [r4, #36]	; 0x24
 800d2ee:	6363      	str	r3, [r4, #52]	; 0x34
 800d2f0:	6463      	str	r3, [r4, #68]	; 0x44
 800d2f2:	f7ff f829 	bl	800c348 <MotionAC_LoadCalFromNVM>
 800d2f6:	4548      	cmp	r0, r9
 800d2f8:	d0c5      	beq.n	800d286 <MotionAC_Initialize+0xc6>
 800d2fa:	f8dd c008 	ldr.w	ip, [sp, #8]
 800d2fe:	f88d 5004 	strb.w	r5, [sp, #4]
 800d302:	f1bc 0f00 	cmp.w	ip, #0
 800d306:	d0be      	beq.n	800d286 <MotionAC_Initialize+0xc6>
 800d308:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d0ba      	beq.n	800d286 <MotionAC_Initialize+0xc6>
 800d310:	ae03      	add	r6, sp, #12
 800d312:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d314:	f104 0514 	add.w	r5, r4, #20
 800d318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d31a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d31c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d31e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d322:	6833      	ldr	r3, [r6, #0]
 800d324:	602b      	str	r3, [r5, #0]
 800d326:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
 800d32a:	e7ac      	b.n	800d286 <MotionAC_Initialize+0xc6>
 800d32c:	e0002000 	.word	0xe0002000
 800d330:	e000ed00 	.word	0xe000ed00
 800d334:	40023008 	.word	0x40023008
 800d338:	40023000 	.word	0x40023000
 800d33c:	f407a5c2 	.word	0xf407a5c2
 800d340:	b5e8b5cd 	.word	0xb5e8b5cd
 800d344:	e0042000 	.word	0xe0042000
 800d348:	5c001000 	.word	0x5c001000
 800d34c:	58024c08 	.word	0x58024c08
 800d350:	58024c00 	.word	0x58024c00
 800d354:	20001514 	.word	0x20001514
 800d358:	2000bb10 	.word	0x2000bb10
 800d35c:	3a83126f 	.word	0x3a83126f
 800d360:	3e4ccccd 	.word	0x3e4ccccd

0800d364 <MotionAC_GetLibVersion>:
 800d364:	4b0f      	ldr	r3, [pc, #60]	; (800d3a4 <MotionAC_GetLibVersion+0x40>)
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	b90b      	cbnz	r3, 800d36e <MotionAC_GetLibVersion+0xa>
 800d36a:	4618      	mov	r0, r3
 800d36c:	4770      	bx	lr
 800d36e:	b470      	push	{r4, r5, r6}
 800d370:	4e0d      	ldr	r6, [pc, #52]	; (800d3a8 <MotionAC_GetLibVersion+0x44>)
 800d372:	4605      	mov	r5, r0
 800d374:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d376:	b08b      	sub	sp, #44	; 0x2c
 800d378:	ac01      	add	r4, sp, #4
 800d37a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d37c:	6833      	ldr	r3, [r6, #0]
 800d37e:	f824 3b02 	strh.w	r3, [r4], #2
 800d382:	0c1b      	lsrs	r3, r3, #16
 800d384:	7023      	strb	r3, [r4, #0]
 800d386:	ac01      	add	r4, sp, #4
 800d388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d38a:	8826      	ldrh	r6, [r4, #0]
 800d38c:	60eb      	str	r3, [r5, #12]
 800d38e:	78a4      	ldrb	r4, [r4, #2]
 800d390:	6028      	str	r0, [r5, #0]
 800d392:	2312      	movs	r3, #18
 800d394:	4618      	mov	r0, r3
 800d396:	6069      	str	r1, [r5, #4]
 800d398:	60aa      	str	r2, [r5, #8]
 800d39a:	822e      	strh	r6, [r5, #16]
 800d39c:	74ac      	strb	r4, [r5, #18]
 800d39e:	b00b      	add	sp, #44	; 0x2c
 800d3a0:	bc70      	pop	{r4, r5, r6}
 800d3a2:	4770      	bx	lr
 800d3a4:	20001514 	.word	0x20001514
 800d3a8:	08017fd0 	.word	0x08017fd0

0800d3ac <MotionGC_Initialize>:
 800d3ac:	4a35      	ldr	r2, [pc, #212]	; (800d484 <MotionGC_Initialize+0xd8>)
 800d3ae:	4936      	ldr	r1, [pc, #216]	; (800d488 <MotionGC_Initialize+0xdc>)
 800d3b0:	6813      	ldr	r3, [r2, #0]
 800d3b2:	f023 0301 	bic.w	r3, r3, #1
 800d3b6:	b470      	push	{r4, r5, r6}
 800d3b8:	6013      	str	r3, [r2, #0]
 800d3ba:	680b      	ldr	r3, [r1, #0]
 800d3bc:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800d3c0:	4013      	ands	r3, r2
 800d3c2:	f24c 2440 	movw	r4, #49728	; 0xc240
 800d3c6:	42a3      	cmp	r3, r4
 800d3c8:	d013      	beq.n	800d3f2 <MotionGC_Initialize+0x46>
 800d3ca:	680b      	ldr	r3, [r1, #0]
 800d3cc:	f24c 2170 	movw	r1, #49776	; 0xc270
 800d3d0:	4013      	ands	r3, r2
 800d3d2:	428b      	cmp	r3, r1
 800d3d4:	d00d      	beq.n	800d3f2 <MotionGC_Initialize+0x46>
 800d3d6:	4b2d      	ldr	r3, [pc, #180]	; (800d48c <MotionGC_Initialize+0xe0>)
 800d3d8:	2201      	movs	r2, #1
 800d3da:	601a      	str	r2, [r3, #0]
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	2a00      	cmp	r2, #0
 800d3e0:	d1fc      	bne.n	800d3dc <MotionGC_Initialize+0x30>
 800d3e2:	4b2b      	ldr	r3, [pc, #172]	; (800d490 <MotionGC_Initialize+0xe4>)
 800d3e4:	4a2b      	ldr	r2, [pc, #172]	; (800d494 <MotionGC_Initialize+0xe8>)
 800d3e6:	601a      	str	r2, [r3, #0]
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	4b2b      	ldr	r3, [pc, #172]	; (800d498 <MotionGC_Initialize+0xec>)
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d01f      	beq.n	800d430 <MotionGC_Initialize+0x84>
 800d3f0:	e7fe      	b.n	800d3f0 <MotionGC_Initialize+0x44>
 800d3f2:	4b2a      	ldr	r3, [pc, #168]	; (800d49c <MotionGC_Initialize+0xf0>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d1ed      	bne.n	800d3d6 <MotionGC_Initialize+0x2a>
 800d3fa:	4a29      	ldr	r2, [pc, #164]	; (800d4a0 <MotionGC_Initialize+0xf4>)
 800d3fc:	6813      	ldr	r3, [r2, #0]
 800d3fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d402:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d406:	d006      	beq.n	800d416 <MotionGC_Initialize+0x6a>
 800d408:	6813      	ldr	r3, [r2, #0]
 800d40a:	f240 4283 	movw	r2, #1155	; 0x483
 800d40e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d412:	4293      	cmp	r3, r2
 800d414:	d1df      	bne.n	800d3d6 <MotionGC_Initialize+0x2a>
 800d416:	4b23      	ldr	r3, [pc, #140]	; (800d4a4 <MotionGC_Initialize+0xf8>)
 800d418:	2201      	movs	r2, #1
 800d41a:	601a      	str	r2, [r3, #0]
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	2a00      	cmp	r2, #0
 800d420:	d1fc      	bne.n	800d41c <MotionGC_Initialize+0x70>
 800d422:	4b21      	ldr	r3, [pc, #132]	; (800d4a8 <MotionGC_Initialize+0xfc>)
 800d424:	4a1b      	ldr	r2, [pc, #108]	; (800d494 <MotionGC_Initialize+0xe8>)
 800d426:	601a      	str	r2, [r3, #0]
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	4b1b      	ldr	r3, [pc, #108]	; (800d498 <MotionGC_Initialize+0xec>)
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d1df      	bne.n	800d3f0 <MotionGC_Initialize+0x44>
 800d430:	ed90 7a00 	vldr	s14, [r0]
 800d434:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800d4ac <MotionGC_Initialize+0x100>
 800d438:	4b1d      	ldr	r3, [pc, #116]	; (800d4b0 <MotionGC_Initialize+0x104>)
 800d43a:	4a1e      	ldr	r2, [pc, #120]	; (800d4b4 <MotionGC_Initialize+0x108>)
 800d43c:	605a      	str	r2, [r3, #4]
 800d43e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d442:	2200      	movs	r2, #0
 800d444:	2101      	movs	r1, #1
 800d446:	4e1c      	ldr	r6, [pc, #112]	; (800d4b8 <MotionGC_Initialize+0x10c>)
 800d448:	4c1c      	ldr	r4, [pc, #112]	; (800d4bc <MotionGC_Initialize+0x110>)
 800d44a:	7019      	strb	r1, [r3, #0]
 800d44c:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 800d450:	f04f 557c 	mov.w	r5, #1056964608	; 0x3f000000
 800d454:	481a      	ldr	r0, [pc, #104]	; (800d4c0 <MotionGC_Initialize+0x114>)
 800d456:	6159      	str	r1, [r3, #20]
 800d458:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 800d45c:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
 800d460:	4918      	ldr	r1, [pc, #96]	; (800d4c4 <MotionGC_Initialize+0x118>)
 800d462:	609e      	str	r6, [r3, #8]
 800d464:	2200      	movs	r2, #0
 800d466:	60dd      	str	r5, [r3, #12]
 800d468:	611c      	str	r4, [r3, #16]
 800d46a:	edc3 7a08 	vstr	s15, [r3, #32]
 800d46e:	6199      	str	r1, [r3, #24]
 800d470:	61d8      	str	r0, [r3, #28]
 800d472:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800d476:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 800d47a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 800d47e:	bc70      	pop	{r4, r5, r6}
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	e0002000 	.word	0xe0002000
 800d488:	e000ed00 	.word	0xe000ed00
 800d48c:	40023008 	.word	0x40023008
 800d490:	40023000 	.word	0x40023000
 800d494:	f407a5c2 	.word	0xf407a5c2
 800d498:	b5e8b5cd 	.word	0xb5e8b5cd
 800d49c:	e0042000 	.word	0xe0042000
 800d4a0:	5c001000 	.word	0x5c001000
 800d4a4:	58024c08 	.word	0x58024c08
 800d4a8:	58024c00 	.word	0x58024c00
 800d4ac:	3e4ccccd 	.word	0x3e4ccccd
 800d4b0:	20001518 	.word	0x20001518
 800d4b4:	3b83126f 	.word	0x3b83126f
 800d4b8:	3dcccccd 	.word	0x3dcccccd
 800d4bc:	3b03126f 	.word	0x3b03126f
 800d4c0:	3fa66666 	.word	0x3fa66666
 800d4c4:	41700000 	.word	0x41700000

0800d4c8 <MotionGC_GetLibVersion>:
 800d4c8:	4b0f      	ldr	r3, [pc, #60]	; (800d508 <MotionGC_GetLibVersion+0x40>)
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	b90b      	cbnz	r3, 800d4d2 <MotionGC_GetLibVersion+0xa>
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	4770      	bx	lr
 800d4d2:	b470      	push	{r4, r5, r6}
 800d4d4:	4e0d      	ldr	r6, [pc, #52]	; (800d50c <MotionGC_GetLibVersion+0x44>)
 800d4d6:	4605      	mov	r5, r0
 800d4d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d4da:	b08b      	sub	sp, #44	; 0x2c
 800d4dc:	ac01      	add	r4, sp, #4
 800d4de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4e0:	6833      	ldr	r3, [r6, #0]
 800d4e2:	f824 3b02 	strh.w	r3, [r4], #2
 800d4e6:	0c1b      	lsrs	r3, r3, #16
 800d4e8:	7023      	strb	r3, [r4, #0]
 800d4ea:	ac01      	add	r4, sp, #4
 800d4ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d4ee:	8826      	ldrh	r6, [r4, #0]
 800d4f0:	60eb      	str	r3, [r5, #12]
 800d4f2:	78a4      	ldrb	r4, [r4, #2]
 800d4f4:	6028      	str	r0, [r5, #0]
 800d4f6:	2312      	movs	r3, #18
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	6069      	str	r1, [r5, #4]
 800d4fc:	60aa      	str	r2, [r5, #8]
 800d4fe:	822e      	strh	r6, [r5, #16]
 800d500:	74ac      	strb	r4, [r5, #18]
 800d502:	b00b      	add	sp, #44	; 0x2c
 800d504:	bc70      	pop	{r4, r5, r6}
 800d506:	4770      	bx	lr
 800d508:	20001518 	.word	0x20001518
 800d50c:	08017ffc 	.word	0x08017ffc

0800d510 <MEMS_INV3x3>:
 800d510:	ed90 6a01 	vldr	s12, [r0, #4]
 800d514:	edd0 6a03 	vldr	s13, [r0, #12]
 800d518:	ed90 7a05 	vldr	s14, [r0, #20]
 800d51c:	edd0 7a07 	vldr	s15, [r0, #28]
 800d520:	eeb4 6a66 	vcmp.f32	s12, s13
 800d524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d528:	b430      	push	{r4, r5}
 800d52a:	d110      	bne.n	800d54e <MEMS_INV3x3+0x3e>
 800d52c:	ed90 6a02 	vldr	s12, [r0, #8]
 800d530:	edd0 6a06 	vldr	s13, [r0, #24]
 800d534:	eeb4 6a66 	vcmp.f32	s12, s13
 800d538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d53c:	d107      	bne.n	800d54e <MEMS_INV3x3+0x3e>
 800d53e:	eeb4 7a67 	vcmp.f32	s14, s15
 800d542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d546:	bf0c      	ite	eq
 800d548:	2501      	moveq	r5, #1
 800d54a:	2500      	movne	r5, #0
 800d54c:	e000      	b.n	800d550 <MEMS_INV3x3+0x40>
 800d54e:	2500      	movs	r5, #0
 800d550:	edd0 6a04 	vldr	s13, [r0, #16]
 800d554:	688c      	ldr	r4, [r1, #8]
 800d556:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800d55a:	ed90 7a08 	vldr	s14, [r0, #32]
 800d55e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d562:	e9d1 2300 	ldrd	r2, r3, [r1]
 800d566:	edc2 7a00 	vstr	s15, [r2]
 800d56a:	ed90 6a03 	vldr	s12, [r0, #12]
 800d56e:	edd0 7a08 	vldr	s15, [r0, #32]
 800d572:	edd0 6a05 	vldr	s13, [r0, #20]
 800d576:	ed90 7a06 	vldr	s14, [r0, #24]
 800d57a:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800d57e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d582:	edc3 7a00 	vstr	s15, [r3]
 800d586:	ed90 6a04 	vldr	s12, [r0, #16]
 800d58a:	ed90 7a06 	vldr	s14, [r0, #24]
 800d58e:	edd0 6a03 	vldr	s13, [r0, #12]
 800d592:	edd0 7a07 	vldr	s15, [r0, #28]
 800d596:	ee27 7a46 	vnmul.f32	s14, s14, s12
 800d59a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d59e:	ed84 7a00 	vstr	s14, [r4]
 800d5a2:	edd0 7a01 	vldr	s15, [r0, #4]
 800d5a6:	ed93 5a00 	vldr	s10, [r3]
 800d5aa:	edd0 6a00 	vldr	s13, [r0]
 800d5ae:	edd2 5a00 	vldr	s11, [r2]
 800d5b2:	ed90 6a02 	vldr	s12, [r0, #8]
 800d5b6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800d5ba:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800d5be:	eee7 7a06 	vfma.f32	s15, s14, s12
 800d5c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ca:	d075      	beq.n	800d6b8 <MEMS_INV3x3+0x1a8>
 800d5cc:	ed90 7a06 	vldr	s14, [r0, #24]
 800d5d0:	edd0 5a08 	vldr	s11, [r0, #32]
 800d5d4:	ee27 7a46 	vnmul.f32	s14, s14, s12
 800d5d8:	eea6 7aa5 	vfma.f32	s14, s13, s11
 800d5dc:	ed83 7a01 	vstr	s14, [r3, #4]
 800d5e0:	edd0 5a07 	vldr	s11, [r0, #28]
 800d5e4:	ed90 7a00 	vldr	s14, [r0]
 800d5e8:	ed90 6a06 	vldr	s12, [r0, #24]
 800d5ec:	edd0 6a01 	vldr	s13, [r0, #4]
 800d5f0:	ee27 7a65 	vnmul.f32	s14, s14, s11
 800d5f4:	eea6 7a26 	vfma.f32	s14, s12, s13
 800d5f8:	ed84 7a01 	vstr	s14, [r4, #4]
 800d5fc:	edd0 5a03 	vldr	s11, [r0, #12]
 800d600:	ed90 7a01 	vldr	s14, [r0, #4]
 800d604:	ed90 6a04 	vldr	s12, [r0, #16]
 800d608:	edd0 6a00 	vldr	s13, [r0]
 800d60c:	ee27 7a65 	vnmul.f32	s14, s14, s11
 800d610:	eea6 7a26 	vfma.f32	s14, s12, s13
 800d614:	ed84 7a02 	vstr	s14, [r4, #8]
 800d618:	bb55      	cbnz	r5, 800d670 <MEMS_INV3x3+0x160>
 800d61a:	edd0 5a08 	vldr	s11, [r0, #32]
 800d61e:	ed90 7a01 	vldr	s14, [r0, #4]
 800d622:	ed90 6a07 	vldr	s12, [r0, #28]
 800d626:	edd0 6a02 	vldr	s13, [r0, #8]
 800d62a:	ee27 7a65 	vnmul.f32	s14, s14, s11
 800d62e:	eea6 7a26 	vfma.f32	s14, s12, s13
 800d632:	ed82 7a01 	vstr	s14, [r2, #4]
 800d636:	edd0 5a04 	vldr	s11, [r0, #16]
 800d63a:	ed90 7a02 	vldr	s14, [r0, #8]
 800d63e:	ed90 6a05 	vldr	s12, [r0, #20]
 800d642:	edd0 6a01 	vldr	s13, [r0, #4]
 800d646:	ee27 7a65 	vnmul.f32	s14, s14, s11
 800d64a:	eea6 7a26 	vfma.f32	s14, s12, s13
 800d64e:	ed82 7a02 	vstr	s14, [r2, #8]
 800d652:	edd0 5a05 	vldr	s11, [r0, #20]
 800d656:	ed90 7a00 	vldr	s14, [r0]
 800d65a:	ed90 6a03 	vldr	s12, [r0, #12]
 800d65e:	edd0 6a02 	vldr	s13, [r0, #8]
 800d662:	ee27 7a65 	vnmul.f32	s14, s14, s11
 800d666:	eea6 7a26 	vfma.f32	s14, s12, s13
 800d66a:	ed83 7a02 	vstr	s14, [r3, #8]
 800d66e:	e005      	b.n	800d67c <MEMS_INV3x3+0x16c>
 800d670:	6818      	ldr	r0, [r3, #0]
 800d672:	6050      	str	r0, [r2, #4]
 800d674:	6820      	ldr	r0, [r4, #0]
 800d676:	6090      	str	r0, [r2, #8]
 800d678:	6862      	ldr	r2, [r4, #4]
 800d67a:	609a      	str	r2, [r3, #8]
 800d67c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d684:	1f0a      	subs	r2, r1, #4
 800d686:	3108      	adds	r1, #8
 800d688:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800d68c:	4291      	cmp	r1, r2
 800d68e:	ed93 6a00 	vldr	s12, [r3]
 800d692:	edd3 6a01 	vldr	s13, [r3, #4]
 800d696:	edd3 7a02 	vldr	s15, [r3, #8]
 800d69a:	ee26 6a07 	vmul.f32	s12, s12, s14
 800d69e:	ee66 6a87 	vmul.f32	s13, s13, s14
 800d6a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d6a6:	ed83 6a00 	vstr	s12, [r3]
 800d6aa:	edc3 6a01 	vstr	s13, [r3, #4]
 800d6ae:	edc3 7a02 	vstr	s15, [r3, #8]
 800d6b2:	d1e9      	bne.n	800d688 <MEMS_INV3x3+0x178>
 800d6b4:	2001      	movs	r0, #1
 800d6b6:	e000      	b.n	800d6ba <MEMS_INV3x3+0x1aa>
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	bc30      	pop	{r4, r5}
 800d6bc:	4770      	bx	lr
	...

0800d6c0 <Hessenberg_Form_Orthogonal>:
 800d6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c4:	b08f      	sub	sp, #60	; 0x3c
 800d6c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6ca:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800d6ce:	460c      	mov	r4, r1
 800d6d0:	2000      	movs	r0, #0
 800d6d2:	2700      	movs	r7, #0
 800d6d4:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 800d6d8:	b205      	sxth	r5, r0
 800d6da:	42aa      	cmp	r2, r5
 800d6dc:	dd11      	ble.n	800d702 <Hessenberg_Form_Orthogonal+0x42>
 800d6de:	4621      	mov	r1, r4
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	fa0f fc83 	sxth.w	ip, r3
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	4565      	cmp	r5, ip
 800d6ea:	fa0f fc83 	sxth.w	ip, r3
 800d6ee:	bf0c      	ite	eq
 800d6f0:	600e      	streq	r6, [r1, #0]
 800d6f2:	600f      	strne	r7, [r1, #0]
 800d6f4:	4562      	cmp	r2, ip
 800d6f6:	f101 0104 	add.w	r1, r1, #4
 800d6fa:	dcf2      	bgt.n	800d6e2 <Hessenberg_Form_Orthogonal+0x22>
 800d6fc:	3001      	adds	r0, #1
 800d6fe:	445c      	add	r4, fp
 800d700:	e7ea      	b.n	800d6d8 <Hessenberg_Form_Orthogonal+0x18>
 800d702:	2a02      	cmp	r2, #2
 800d704:	f340 811b 	ble.w	800d93e <Hessenberg_Form_Orthogonal+0x27e>
 800d708:	9902      	ldr	r1, [sp, #8]
 800d70a:	ed9f 5a8f 	vldr	s10, [pc, #572]	; 800d948 <Hessenberg_Form_Orthogonal+0x288>
 800d70e:	eddf 5a8f 	vldr	s11, [pc, #572]	; 800d94c <Hessenberg_Form_Orthogonal+0x28c>
 800d712:	4459      	add	r1, fp
 800d714:	4608      	mov	r0, r1
 800d716:	f10b 0104 	add.w	r1, fp, #4
 800d71a:	2300      	movs	r3, #0
 800d71c:	9104      	str	r1, [sp, #16]
 800d71e:	1e91      	subs	r1, r2, #2
 800d720:	9301      	str	r3, [sp, #4]
 800d722:	9106      	str	r1, [sp, #24]
 800d724:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800d728:	4682      	mov	sl, r0
 800d72a:	9906      	ldr	r1, [sp, #24]
 800d72c:	428b      	cmp	r3, r1
 800d72e:	f280 8106 	bge.w	800d93e <Hessenberg_Form_Orthogonal+0x27e>
 800d732:	1c59      	adds	r1, r3, #1
 800d734:	b20b      	sxth	r3, r1
 800d736:	eddf 6a85 	vldr	s13, [pc, #532]	; 800d94c <Hessenberg_Form_Orthogonal+0x28c>
 800d73a:	4618      	mov	r0, r3
 800d73c:	4654      	mov	r4, sl
 800d73e:	4290      	cmp	r0, r2
 800d740:	da07      	bge.n	800d752 <Hessenberg_Form_Orthogonal+0x92>
 800d742:	edd4 7a00 	vldr	s15, [r4]
 800d746:	3001      	adds	r0, #1
 800d748:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800d74c:	b200      	sxth	r0, r0
 800d74e:	445c      	add	r4, fp
 800d750:	e7f5      	b.n	800d73e <Hessenberg_Form_Orthogonal+0x7e>
 800d752:	eef0 7ae6 	vabs.f32	s15, s13
 800d756:	eef4 7ac5 	vcmpe.f32	s15, s10
 800d75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d75e:	f100 80e8 	bmi.w	800d932 <Hessenberg_Form_Orthogonal+0x272>
 800d762:	eef1 7ae6 	vsqrt.f32	s15, s13
 800d766:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800d76a:	9300      	str	r3, [sp, #0]
 800d76c:	1c87      	adds	r7, r0, #2
 800d76e:	ad08      	add	r5, sp, #32
 800d770:	008c      	lsls	r4, r1, #2
 800d772:	b2bf      	uxth	r7, r7
 800d774:	eb05 0804 	add.w	r8, r5, r4
 800d778:	fa0f fc87 	sxth.w	ip, r7
 800d77c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800d780:	eb0a 060b 	add.w	r6, sl, fp
 800d784:	2500      	movs	r5, #0
 800d786:	ed9a 7a00 	vldr	s14, [sl]
 800d78a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800d78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d792:	bfa8      	it	ge
 800d794:	eef1 7a67 	vnegge.f32	s15, s15
 800d798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d79c:	edca 7a00 	vstr	s15, [sl]
 800d7a0:	ed88 7a00 	vstr	s14, [r8]
 800d7a4:	eb07 0e05 	add.w	lr, r7, r5
 800d7a8:	fa0f fe8e 	sxth.w	lr, lr
 800d7ac:	4572      	cmp	r2, lr
 800d7ae:	dd0c      	ble.n	800d7ca <Hessenberg_Form_Orthogonal+0x10a>
 800d7b0:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800d7b4:	ab08      	add	r3, sp, #32
 800d7b6:	449e      	add	lr, r3
 800d7b8:	f8d6 9000 	ldr.w	r9, [r6]
 800d7bc:	f8ce 9000 	str.w	r9, [lr]
 800d7c0:	edc6 5a00 	vstr	s11, [r6]
 800d7c4:	3501      	adds	r5, #1
 800d7c6:	445e      	add	r6, fp
 800d7c8:	e7ec      	b.n	800d7a4 <Hessenberg_Form_Orthogonal+0xe4>
 800d7ca:	ed98 7a00 	vldr	s14, [r8]
 800d7ce:	9b00      	ldr	r3, [sp, #0]
 800d7d0:	9f02      	ldr	r7, [sp, #8]
 800d7d2:	9307      	str	r3, [sp, #28]
 800d7d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d7d8:	fb02 3501 	mla	r5, r2, r1, r3
 800d7dc:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800d7e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d7e4:	3c04      	subs	r4, #4
 800d7e6:	0099      	lsls	r1, r3, #2
 800d7e8:	ebaa 0404 	sub.w	r4, sl, r4
 800d7ec:	1c46      	adds	r6, r0, #1
 800d7ee:	9505      	str	r5, [sp, #20]
 800d7f0:	ad08      	add	r5, sp, #32
 800d7f2:	440c      	add	r4, r1
 800d7f4:	440d      	add	r5, r1
 800d7f6:	b2b6      	uxth	r6, r6
 800d7f8:	461f      	mov	r7, r3
 800d7fa:	f04f 0c00 	mov.w	ip, #0
 800d7fe:	4297      	cmp	r7, r2
 800d800:	da33      	bge.n	800d86a <Hessenberg_Form_Orthogonal+0x1aa>
 800d802:	9b05      	ldr	r3, [sp, #20]
 800d804:	eddf 7a51 	vldr	s15, [pc, #324]	; 800d94c <Hessenberg_Form_Orthogonal+0x28c>
 800d808:	eb0c 0e03 	add.w	lr, ip, r3
 800d80c:	2300      	movs	r3, #0
 800d80e:	eb06 0803 	add.w	r8, r6, r3
 800d812:	fa0f f888 	sxth.w	r8, r8
 800d816:	4542      	cmp	r2, r8
 800d818:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800d81c:	dd08      	ble.n	800d830 <Hessenberg_Form_Orthogonal+0x170>
 800d81e:	edde 6a00 	vldr	s13, [lr]
 800d822:	edd9 4a00 	vldr	s9, [r9]
 800d826:	3301      	adds	r3, #1
 800d828:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800d82c:	44de      	add	lr, fp
 800d82e:	e7ee      	b.n	800d80e <Hessenberg_Form_Orthogonal+0x14e>
 800d830:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d834:	eb0c 0e04 	add.w	lr, ip, r4
 800d838:	2300      	movs	r3, #0
 800d83a:	eb06 0803 	add.w	r8, r6, r3
 800d83e:	fa0f f888 	sxth.w	r8, r8
 800d842:	4542      	cmp	r2, r8
 800d844:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800d848:	dd0a      	ble.n	800d860 <Hessenberg_Form_Orthogonal+0x1a0>
 800d84a:	edde 6a00 	vldr	s13, [lr]
 800d84e:	edd9 4a00 	vldr	s9, [r9]
 800d852:	eee4 6ae7 	vfms.f32	s13, s9, s15
 800d856:	3301      	adds	r3, #1
 800d858:	edce 6a00 	vstr	s13, [lr]
 800d85c:	44de      	add	lr, fp
 800d85e:	e7ec      	b.n	800d83a <Hessenberg_Form_Orthogonal+0x17a>
 800d860:	3701      	adds	r7, #1
 800d862:	b23f      	sxth	r7, r7
 800d864:	f10c 0c04 	add.w	ip, ip, #4
 800d868:	e7c9      	b.n	800d7fe <Hessenberg_Form_Orthogonal+0x13e>
 800d86a:	9c02      	ldr	r4, [sp, #8]
 800d86c:	9b07      	ldr	r3, [sp, #28]
 800d86e:	3001      	adds	r0, #1
 800d870:	b280      	uxth	r0, r0
 800d872:	440c      	add	r4, r1
 800d874:	f04f 0c00 	mov.w	ip, #0
 800d878:	eddf 7a34 	vldr	s15, [pc, #208]	; 800d94c <Hessenberg_Form_Orthogonal+0x28c>
 800d87c:	2600      	movs	r6, #0
 800d87e:	eb00 0e06 	add.w	lr, r0, r6
 800d882:	fa0f fe8e 	sxth.w	lr, lr
 800d886:	00b7      	lsls	r7, r6, #2
 800d888:	4572      	cmp	r2, lr
 800d88a:	eb05 0807 	add.w	r8, r5, r7
 800d88e:	4427      	add	r7, r4
 800d890:	dd07      	ble.n	800d8a2 <Hessenberg_Form_Orthogonal+0x1e2>
 800d892:	edd8 4a00 	vldr	s9, [r8]
 800d896:	edd7 6a00 	vldr	s13, [r7]
 800d89a:	3601      	adds	r6, #1
 800d89c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800d8a0:	e7ed      	b.n	800d87e <Hessenberg_Form_Orthogonal+0x1be>
 800d8a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d8a6:	46ae      	mov	lr, r5
 800d8a8:	4627      	mov	r7, r4
 800d8aa:	461e      	mov	r6, r3
 800d8ac:	4296      	cmp	r6, r2
 800d8ae:	da0a      	bge.n	800d8c6 <Hessenberg_Form_Orthogonal+0x206>
 800d8b0:	edd7 6a00 	vldr	s13, [r7]
 800d8b4:	ecfe 4a01 	vldmia	lr!, {s9}
 800d8b8:	eee4 6ae7 	vfms.f32	s13, s9, s15
 800d8bc:	3601      	adds	r6, #1
 800d8be:	b236      	sxth	r6, r6
 800d8c0:	ece7 6a01 	vstmia	r7!, {s13}
 800d8c4:	e7f2      	b.n	800d8ac <Hessenberg_Form_Orthogonal+0x1ec>
 800d8c6:	f10c 0c01 	add.w	ip, ip, #1
 800d8ca:	fa0f f68c 	sxth.w	r6, ip
 800d8ce:	42b2      	cmp	r2, r6
 800d8d0:	445c      	add	r4, fp
 800d8d2:	dcd1      	bgt.n	800d878 <Hessenberg_Form_Orthogonal+0x1b8>
 800d8d4:	9c03      	ldr	r4, [sp, #12]
 800d8d6:	2700      	movs	r7, #0
 800d8d8:	4421      	add	r1, r4
 800d8da:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800d94c <Hessenberg_Form_Orthogonal+0x28c>
 800d8de:	2400      	movs	r4, #0
 800d8e0:	eb00 0c04 	add.w	ip, r0, r4
 800d8e4:	fa0f fc8c 	sxth.w	ip, ip
 800d8e8:	00a6      	lsls	r6, r4, #2
 800d8ea:	4562      	cmp	r2, ip
 800d8ec:	eb05 0e06 	add.w	lr, r5, r6
 800d8f0:	440e      	add	r6, r1
 800d8f2:	dd07      	ble.n	800d904 <Hessenberg_Form_Orthogonal+0x244>
 800d8f4:	edde 4a00 	vldr	s9, [lr]
 800d8f8:	edd6 6a00 	vldr	s13, [r6]
 800d8fc:	3401      	adds	r4, #1
 800d8fe:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800d902:	e7ed      	b.n	800d8e0 <Hessenberg_Form_Orthogonal+0x220>
 800d904:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d908:	46ac      	mov	ip, r5
 800d90a:	460e      	mov	r6, r1
 800d90c:	461c      	mov	r4, r3
 800d90e:	4294      	cmp	r4, r2
 800d910:	da0a      	bge.n	800d928 <Hessenberg_Form_Orthogonal+0x268>
 800d912:	edd6 6a00 	vldr	s13, [r6]
 800d916:	ecfc 4a01 	vldmia	ip!, {s9}
 800d91a:	eee4 6ae7 	vfms.f32	s13, s9, s15
 800d91e:	3401      	adds	r4, #1
 800d920:	b224      	sxth	r4, r4
 800d922:	ece6 6a01 	vstmia	r6!, {s13}
 800d926:	e7f2      	b.n	800d90e <Hessenberg_Form_Orthogonal+0x24e>
 800d928:	3701      	adds	r7, #1
 800d92a:	b23c      	sxth	r4, r7
 800d92c:	42a2      	cmp	r2, r4
 800d92e:	4459      	add	r1, fp
 800d930:	dcd3      	bgt.n	800d8da <Hessenberg_Form_Orthogonal+0x21a>
 800d932:	9904      	ldr	r1, [sp, #16]
 800d934:	448a      	add	sl, r1
 800d936:	9901      	ldr	r1, [sp, #4]
 800d938:	3101      	adds	r1, #1
 800d93a:	9101      	str	r1, [sp, #4]
 800d93c:	e6f5      	b.n	800d72a <Hessenberg_Form_Orthogonal+0x6a>
 800d93e:	2000      	movs	r0, #0
 800d940:	b00f      	add	sp, #60	; 0x3c
 800d942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d946:	bf00      	nop
 800d948:	358637bd 	.word	0x358637bd
 800d94c:	00000000 	.word	0x00000000

0800d950 <QR_Hessenberg_Matrix.constprop.27>:
 800d950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d954:	ed2d 8b02 	vpush	{d8}
 800d958:	461c      	mov	r4, r3
 800d95a:	b0a5      	sub	sp, #148	; 0x94
 800d95c:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800d960:	3b01      	subs	r3, #1
 800d962:	e9cd 1205 	strd	r1, r2, [sp, #20]
 800d966:	f1ce 0100 	rsb	r1, lr, #0
 800d96a:	9307      	str	r3, [sp, #28]
 800d96c:	910a      	str	r1, [sp, #40]	; 0x28
 800d96e:	00e3      	lsls	r3, r4, #3
 800d970:	00e1      	lsls	r1, r4, #3
 800d972:	ed9f 5ac6 	vldr	s10, [pc, #792]	; 800dc8c <QR_Hessenberg_Matrix.constprop.27+0x33c>
 800d976:	931d      	str	r3, [sp, #116]	; 0x74
 800d978:	3104      	adds	r1, #4
 800d97a:	f06f 0303 	mvn.w	r3, #3
 800d97e:	9a07      	ldr	r2, [sp, #28]
 800d980:	9121      	str	r1, [sp, #132]	; 0x84
 800d982:	fb03 f304 	mul.w	r3, r3, r4
 800d986:	0061      	lsls	r1, r4, #1
 800d988:	ed9f 4abe 	vldr	s8, [pc, #760]	; 800dc84 <QR_Hessenberg_Matrix.constprop.27+0x334>
 800d98c:	ed9f 3abe 	vldr	s6, [pc, #760]	; 800dc88 <QR_Hessenberg_Matrix.constprop.27+0x338>
 800d990:	9000      	str	r0, [sp, #0]
 800d992:	9110      	str	r1, [sp, #64]	; 0x40
 800d994:	9308      	str	r3, [sp, #32]
 800d996:	eef0 4a45 	vmov.f32	s9, s10
 800d99a:	eef0 3a45 	vmov.f32	s7, s10
 800d99e:	46f2      	mov	sl, lr
 800d9a0:	4693      	mov	fp, r2
 800d9a2:	46a1      	mov	r9, r4
 800d9a4:	9900      	ldr	r1, [sp, #0]
 800d9a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d9a8:	fb0b f309 	mul.w	r3, fp, r9
 800d9ac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d9b0:	9301      	str	r3, [sp, #4]
 800d9b2:	f1ab 0302 	sub.w	r3, fp, #2
 800d9b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d9b8:	f10b 3eff 	add.w	lr, fp, #4294967295
 800d9bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d9be:	eb09 060b 	add.w	r6, r9, fp
 800d9c2:	ea4f 078e 	mov.w	r7, lr, lsl #2
 800d9c6:	00b6      	lsls	r6, r6, #2
 800d9c8:	eb03 010b 	add.w	r1, r3, fp
 800d9cc:	960f      	str	r6, [sp, #60]	; 0x3c
 800d9ce:	9b01      	ldr	r3, [sp, #4]
 800d9d0:	9e01      	ldr	r6, [sp, #4]
 800d9d2:	9722      	str	r7, [sp, #136]	; 0x88
 800d9d4:	1f3a      	subs	r2, r7, #4
 800d9d6:	eba2 020a 	sub.w	r2, r2, sl
 800d9da:	181d      	adds	r5, r3, r0
 800d9dc:	18b2      	adds	r2, r6, r2
 800d9de:	ea4f 088b 	mov.w	r8, fp, lsl #2
 800d9e2:	9212      	str	r2, [sp, #72]	; 0x48
 800d9e4:	19ea      	adds	r2, r5, r7
 800d9e6:	9213      	str	r2, [sp, #76]	; 0x4c
 800d9e8:	eb05 0208 	add.w	r2, r5, r8
 800d9ec:	9214      	str	r2, [sp, #80]	; 0x50
 800d9ee:	4632      	mov	r2, r6
 800d9f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9f2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800d9f6:	4442      	add	r2, r8
 800d9f8:	920c      	str	r2, [sp, #48]	; 0x30
 800d9fa:	4632      	mov	r2, r6
 800d9fc:	469c      	mov	ip, r3
 800d9fe:	443a      	add	r2, r7
 800da00:	9b00      	ldr	r3, [sp, #0]
 800da02:	920d      	str	r2, [sp, #52]	; 0x34
 800da04:	f1a8 0404 	sub.w	r4, r8, #4
 800da08:	4632      	mov	r2, r6
 800da0a:	fb0c 330a 	mla	r3, ip, sl, r3
 800da0e:	4422      	add	r2, r4
 800da10:	eba8 000a 	sub.w	r0, r8, sl
 800da14:	9215      	str	r2, [sp, #84]	; 0x54
 800da16:	18c2      	adds	r2, r0, r3
 800da18:	9218      	str	r2, [sp, #96]	; 0x60
 800da1a:	eb03 0208 	add.w	r2, r3, r8
 800da1e:	921c      	str	r2, [sp, #112]	; 0x70
 800da20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da22:	0089      	lsls	r1, r1, #2
 800da24:	189a      	adds	r2, r3, r2
 800da26:	910e      	str	r1, [sp, #56]	; 0x38
 800da28:	9217      	str	r2, [sp, #92]	; 0x5c
 800da2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da2c:	f06f 0103 	mvn.w	r1, #3
 800da30:	4413      	add	r3, r2
 800da32:	9316      	str	r3, [sp, #88]	; 0x58
 800da34:	eba1 030a 	sub.w	r3, r1, sl
 800da38:	9304      	str	r3, [sp, #16]
 800da3a:	2301      	movs	r3, #1
 800da3c:	9302      	str	r3, [sp, #8]
 800da3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800da40:	9b01      	ldr	r3, [sp, #4]
 800da42:	4659      	mov	r1, fp
 800da44:	9808      	ldr	r0, [sp, #32]
 800da46:	2900      	cmp	r1, #0
 800da48:	4410      	add	r0, r2
 800da4a:	dd1a      	ble.n	800da82 <QR_Hessenberg_Matrix.constprop.27+0x132>
 800da4c:	ed90 7a00 	vldr	s14, [r0]
 800da50:	edd2 7a01 	vldr	s15, [r2, #4]
 800da54:	edd2 6a00 	vldr	s13, [r2]
 800da58:	9804      	ldr	r0, [sp, #16]
 800da5a:	eeb0 7ac7 	vabs.f32	s14, s14
 800da5e:	eef0 7ae7 	vabs.f32	s15, s15
 800da62:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da66:	eeb0 7ae6 	vabs.f32	s14, s13
 800da6a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800da6e:	4402      	add	r2, r0
 800da70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da78:	d903      	bls.n	800da82 <QR_Hessenberg_Matrix.constprop.27+0x132>
 800da7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da7c:	3901      	subs	r1, #1
 800da7e:	4403      	add	r3, r0
 800da80:	e7e0      	b.n	800da44 <QR_Hessenberg_Matrix.constprop.27+0xf4>
 800da82:	ebbb 0201 	subs.w	r2, fp, r1
 800da86:	9103      	str	r1, [sp, #12]
 800da88:	d002      	beq.n	800da90 <QR_Hessenberg_Matrix.constprop.27+0x140>
 800da8a:	2a01      	cmp	r2, #1
 800da8c:	d00f      	beq.n	800daae <QR_Hessenberg_Matrix.constprop.27+0x15e>
 800da8e:	e0c8      	b.n	800dc22 <QR_Hessenberg_Matrix.constprop.27+0x2d2>
 800da90:	9a03      	ldr	r2, [sp, #12]
 800da92:	9906      	ldr	r1, [sp, #24]
 800da94:	0092      	lsls	r2, r2, #2
 800da96:	4413      	add	r3, r2
 800da98:	edd3 7a00 	vldr	s15, [r3]
 800da9c:	ee75 7a27 	vadd.f32	s15, s10, s15
 800daa0:	440a      	add	r2, r1
 800daa2:	edc3 7a00 	vstr	s15, [r3]
 800daa6:	46de      	mov	lr, fp
 800daa8:	edc2 7a00 	vstr	s15, [r2]
 800daac:	e2c5      	b.n	800e03a <QR_Hessenberg_Matrix.constprop.27+0x6ea>
 800daae:	9a00      	ldr	r2, [sp, #0]
 800dab0:	9f22      	ldr	r7, [sp, #136]	; 0x88
 800dab2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800dab6:	fb0e f309 	mul.w	r3, lr, r9
 800daba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dabe:	eb03 020a 	add.w	r2, r3, sl
 800dac2:	eb02 0008 	add.w	r0, r2, r8
 800dac6:	19d9      	adds	r1, r3, r7
 800dac8:	edd1 5a00 	vldr	s11, [r1]
 800dacc:	edd0 7a00 	vldr	s15, [r0]
 800dad0:	eb03 0408 	add.w	r4, r3, r8
 800dad4:	443a      	add	r2, r7
 800dad6:	ed94 6a00 	vldr	s12, [r4]
 800dada:	edd2 6a00 	vldr	s13, [r2]
 800dade:	ee35 7ae7 	vsub.f32	s14, s11, s15
 800dae2:	ee26 6a26 	vmul.f32	s12, s12, s13
 800dae6:	ee75 5a85 	vadd.f32	s11, s11, s10
 800daea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800daee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daf2:	edc1 5a00 	vstr	s11, [r1]
 800daf6:	eef0 5a46 	vmov.f32	s11, s12
 800dafa:	eee7 5aa7 	vfma.f32	s11, s15, s15
 800dafe:	9906      	ldr	r1, [sp, #24]
 800db00:	ed90 7a00 	vldr	s14, [r0]
 800db04:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800db08:	ee35 7a07 	vadd.f32	s14, s10, s14
 800db0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db10:	eb01 0507 	add.w	r5, r1, r7
 800db14:	eb01 0408 	add.w	r4, r1, r8
 800db18:	ed80 7a00 	vstr	s14, [r0]
 800db1c:	dd7a      	ble.n	800dc14 <QR_Hessenberg_Matrix.constprop.27+0x2c4>
 800db1e:	eef1 6ae5 	vsqrt.f32	s13, s11
 800db22:	f1a8 0104 	sub.w	r1, r8, #4
 800db26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800db2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db2e:	bf4c      	ite	mi
 800db30:	ee77 7ae6 	vsubmi.f32	s15, s15, s13
 800db34:	ee77 7aa6 	vaddpl.f32	s15, s15, s13
 800db38:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800db3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800db40:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800db44:	ed85 7a00 	vstr	s14, [r5]
 800db48:	ed90 7a00 	vldr	s14, [r0]
 800db4c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800db50:	eb0a 0001 	add.w	r0, sl, r1
 800db54:	ed84 7a00 	vstr	s14, [r4]
 800db58:	edd2 6a00 	vldr	s13, [r2]
 800db5c:	eeb0 7a46 	vmov.f32	s14, s12
 800db60:	eea6 7aa6 	vfma.f32	s14, s13, s13
 800db64:	4418      	add	r0, r3
 800db66:	4419      	add	r1, r3
 800db68:	4673      	mov	r3, lr
 800db6a:	eeb1 6ac7 	vsqrt.f32	s12, s14
 800db6e:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800db72:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800db76:	4599      	cmp	r9, r3
 800db78:	dd13      	ble.n	800dba2 <QR_Hessenberg_Matrix.constprop.27+0x252>
 800db7a:	3301      	adds	r3, #1
 800db7c:	edd0 7a00 	vldr	s15, [r0]
 800db80:	edd1 5a00 	vldr	s11, [r1]
 800db84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db88:	ee25 6ac7 	vnmul.f32	s12, s11, s14
 800db8c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800db90:	ece1 7a01 	vstmia	r1!, {s15}
 800db94:	edd0 7a00 	vldr	s15, [r0]
 800db98:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800db9c:	eca0 6a01 	vstmia	r0!, {s12}
 800dba0:	e7e9      	b.n	800db76 <QR_Hessenberg_Matrix.constprop.27+0x226>
 800dba2:	9b00      	ldr	r3, [sp, #0]
 800dba4:	2200      	movs	r2, #0
 800dba6:	443b      	add	r3, r7
 800dba8:	eba8 0007 	sub.w	r0, r8, r7
 800dbac:	18c1      	adds	r1, r0, r3
 800dbae:	edd1 7a00 	vldr	s15, [r1]
 800dbb2:	edd3 5a00 	vldr	s11, [r3]
 800dbb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbba:	ee25 6ac7 	vnmul.f32	s12, s11, s14
 800dbbe:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800dbc2:	3201      	adds	r2, #1
 800dbc4:	455a      	cmp	r2, fp
 800dbc6:	edc3 7a00 	vstr	s15, [r3]
 800dbca:	edd1 7a00 	vldr	s15, [r1]
 800dbce:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800dbd2:	4453      	add	r3, sl
 800dbd4:	ed81 6a00 	vstr	s12, [r1]
 800dbd8:	dde8      	ble.n	800dbac <QR_Hessenberg_Matrix.constprop.27+0x25c>
 800dbda:	9b05      	ldr	r3, [sp, #20]
 800dbdc:	eba8 0007 	sub.w	r0, r8, r7
 800dbe0:	443b      	add	r3, r7
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	18c1      	adds	r1, r0, r3
 800dbe6:	edd1 7a00 	vldr	s15, [r1]
 800dbea:	edd3 5a00 	vldr	s11, [r3]
 800dbee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbf2:	ee25 6ac7 	vnmul.f32	s12, s11, s14
 800dbf6:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800dbfa:	3201      	adds	r2, #1
 800dbfc:	4591      	cmp	r9, r2
 800dbfe:	edc3 7a00 	vstr	s15, [r3]
 800dc02:	edd1 7a00 	vldr	s15, [r1]
 800dc06:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800dc0a:	4453      	add	r3, sl
 800dc0c:	ed81 6a00 	vstr	s12, [r1]
 800dc10:	d1e8      	bne.n	800dbe4 <QR_Hessenberg_Matrix.constprop.27+0x294>
 800dc12:	e212      	b.n	800e03a <QR_Hessenberg_Matrix.constprop.27+0x6ea>
 800dc14:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc18:	edc5 7a00 	vstr	s15, [r5]
 800dc1c:	edc4 7a00 	vstr	s15, [r4]
 800dc20:	e20b      	b.n	800e03a <QR_Hessenberg_Matrix.constprop.27+0x6ea>
 800dc22:	9a02      	ldr	r2, [sp, #8]
 800dc24:	9b02      	ldr	r3, [sp, #8]
 800dc26:	210a      	movs	r1, #10
 800dc28:	fb93 f3f1 	sdiv	r3, r3, r1
 800dc2c:	fb01 2313 	mls	r3, r1, r3, r2
 800dc30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc32:	ed92 7a00 	vldr	s14, [r2]
 800dc36:	bb5b      	cbnz	r3, 800dc90 <QR_Hessenberg_Matrix.constprop.27+0x340>
 800dc38:	ee35 5a07 	vadd.f32	s10, s10, s14
 800dc3c:	9a00      	ldr	r2, [sp, #0]
 800dc3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dc40:	f10a 0104 	add.w	r1, sl, #4
 800dc44:	ed92 7a00 	vldr	s14, [r2]
 800dc48:	edd0 7a00 	vldr	s15, [r0]
 800dc4c:	3301      	adds	r3, #1
 800dc4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc52:	455b      	cmp	r3, fp
 800dc54:	edc2 7a00 	vstr	s15, [r2]
 800dc58:	440a      	add	r2, r1
 800dc5a:	ddf3      	ble.n	800dc44 <QR_Hessenberg_Matrix.constprop.27+0x2f4>
 800dc5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc5e:	ed93 7a00 	vldr	s14, [r3]
 800dc62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc64:	edd3 7a00 	vldr	s15, [r3]
 800dc68:	eeb0 7ac7 	vabs.f32	s14, s14
 800dc6c:	eef0 7ae7 	vabs.f32	s15, s15
 800dc70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc74:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800dc78:	ee67 1aa7 	vmul.f32	s3, s15, s15
 800dc7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc80:	e015      	b.n	800dcae <QR_Hessenberg_Matrix.constprop.27+0x35e>
 800dc82:	bf00      	nop
 800dc84:	34000000 	.word	0x34000000
 800dc88:	358637bd 	.word	0x358637bd
 800dc8c:	00000000 	.word	0x00000000
 800dc90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc92:	edd3 7a00 	vldr	s15, [r3]
 800dc96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc98:	edd3 1a00 	vldr	s3, [r3]
 800dc9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dc9e:	ee61 1ae7 	vnmul.f32	s3, s3, s15
 800dca2:	edd3 6a00 	vldr	s13, [r3]
 800dca6:	eee6 1a87 	vfma.f32	s3, s13, s14
 800dcaa:	ee76 7a87 	vadd.f32	s15, s13, s14
 800dcae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800dcb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dcb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dcb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcb6:	3c08      	subs	r4, #8
 800dcb8:	9420      	str	r4, [sp, #128]	; 0x80
 800dcba:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800dcbc:	f1a4 0c04 	sub.w	ip, r4, #4
 800dcc0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	1f27      	subs	r7, r4, #4
 800dcc6:	4610      	mov	r0, r2
 800dcc8:	9723      	str	r7, [sp, #140]	; 0x8c
 800dcca:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800dccc:	1826      	adds	r6, r4, r0
 800dcce:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800dcd0:	4404      	add	r4, r0
 800dcd2:	941f      	str	r4, [sp, #124]	; 0x7c
 800dcd4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800dcd6:	eb04 0800 	add.w	r8, r4, r0
 800dcda:	1e5c      	subs	r4, r3, #1
 800dcdc:	eb0c 0702 	add.w	r7, ip, r2
 800dce0:	9411      	str	r4, [sp, #68]	; 0x44
 800dce2:	9c04      	ldr	r4, [sp, #16]
 800dce4:	971a      	str	r7, [sp, #104]	; 0x68
 800dce6:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800dce8:	4420      	add	r0, r4
 800dcea:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800dcec:	4417      	add	r7, r2
 800dcee:	4414      	add	r4, r2
 800dcf0:	9719      	str	r7, [sp, #100]	; 0x64
 800dcf2:	9f03      	ldr	r7, [sp, #12]
 800dcf4:	941b      	str	r4, [sp, #108]	; 0x6c
 800dcf6:	f1a5 0408 	sub.w	r4, r5, #8
 800dcfa:	941e      	str	r4, [sp, #120]	; 0x78
 800dcfc:	429f      	cmp	r7, r3
 800dcfe:	f1a5 0404 	sub.w	r4, r5, #4
 800dd02:	4625      	mov	r5, r4
 800dd04:	f1a2 0204 	sub.w	r2, r2, #4
 800dd08:	dc4e      	bgt.n	800dda8 <QR_Hessenberg_Matrix.constprop.27+0x458>
 800dd0a:	ed11 7a02 	vldr	s14, [r1, #-8]
 800dd0e:	ed16 0a02 	vldr	s0, [r6, #-8]
 800dd12:	ed56 6a01 	vldr	s13, [r6, #-4]
 800dd16:	ed58 0a01 	vldr	s1, [r8, #-4]
 800dd1a:	ed51 5a01 	vldr	s11, [r1, #-4]
 800dd1e:	ee37 2a67 	vsub.f32	s4, s14, s15
 800dd22:	eeb0 8a61 	vmov.f32	s16, s3
 800dd26:	eea7 8a02 	vfma.f32	s16, s14, s4
 800dd2a:	ee32 2a26 	vadd.f32	s4, s4, s13
 800dd2e:	eec8 2a00 	vdiv.f32	s5, s16, s0
 800dd32:	eeb0 6ae6 	vabs.f32	s12, s13
 800dd36:	ee72 5aa5 	vadd.f32	s11, s5, s11
 800dd3a:	eef0 6ae0 	vabs.f32	s13, s1
 800dd3e:	eef0 2ac2 	vabs.f32	s5, s4
 800dd42:	ee72 2aa6 	vadd.f32	s5, s5, s13
 800dd46:	eef0 6ae5 	vabs.f32	s13, s11
 800dd4a:	ee72 2aa6 	vadd.f32	s5, s5, s13
 800dd4e:	eeb0 1ac7 	vabs.f32	s2, s14
 800dd52:	eec5 6aa2 	vdiv.f32	s13, s11, s5
 800dd56:	eec2 5a22 	vdiv.f32	s11, s4, s5
 800dd5a:	eef0 6ae6 	vabs.f32	s13, s13
 800dd5e:	eeb0 2ae5 	vabs.f32	s4, s11
 800dd62:	eec0 5aa2 	vdiv.f32	s11, s1, s5
 800dd66:	d01f      	beq.n	800dda8 <QR_Hessenberg_Matrix.constprop.27+0x458>
 800dd68:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 800dd6a:	ed16 7a03 	vldr	s14, [r6, #-12]
 800dd6e:	ed51 2a03 	vldr	s5, [r1, #-12]
 800dd72:	9e04      	ldr	r6, [sp, #16]
 800dd74:	eeb0 7ac7 	vabs.f32	s14, s14
 800dd78:	ee37 7a06 	vadd.f32	s14, s14, s12
 800dd7c:	eeb0 6ae5 	vabs.f32	s12, s11
 800dd80:	ee37 7a01 	vadd.f32	s14, s14, s2
 800dd84:	ee72 5a06 	vadd.f32	s11, s4, s12
 800dd88:	ee27 7a04 	vmul.f32	s14, s14, s8
 800dd8c:	eeb0 6ae2 	vabs.f32	s12, s5
 800dd90:	ee26 6a25 	vmul.f32	s12, s12, s11
 800dd94:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dd98:	4431      	add	r1, r6
 800dd9a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800dd9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dda2:	d901      	bls.n	800dda8 <QR_Hessenberg_Matrix.constprop.27+0x458>
 800dda4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dda6:	e790      	b.n	800dcca <QR_Hessenberg_Matrix.constprop.27+0x37a>
 800dda8:	1c98      	adds	r0, r3, #2
 800ddaa:	fb00 f209 	mul.w	r2, r0, r9
 800ddae:	009d      	lsls	r5, r3, #2
 800ddb0:	9e00      	ldr	r6, [sp, #0]
 800ddb2:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 800ddb6:	4431      	add	r1, r6
 800ddb8:	f10a 0804 	add.w	r8, sl, #4
 800ddbc:	4558      	cmp	r0, fp
 800ddbe:	dc04      	bgt.n	800ddca <QR_Hessenberg_Matrix.constprop.27+0x47a>
 800ddc0:	edc1 4a00 	vstr	s9, [r1]
 800ddc4:	3001      	adds	r0, #1
 800ddc6:	4441      	add	r1, r8
 800ddc8:	e7f8      	b.n	800ddbc <QR_Hessenberg_Matrix.constprop.27+0x46c>
 800ddca:	9900      	ldr	r1, [sp, #0]
 800ddcc:	444a      	add	r2, r9
 800ddce:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800ddd2:	440a      	add	r2, r1
 800ddd4:	1cd9      	adds	r1, r3, #3
 800ddd6:	4559      	cmp	r1, fp
 800ddd8:	dc04      	bgt.n	800dde4 <QR_Hessenberg_Matrix.constprop.27+0x494>
 800ddda:	edc2 4a00 	vstr	s9, [r2]
 800ddde:	3101      	adds	r1, #1
 800dde0:	4442      	add	r2, r8
 800dde2:	e7f8      	b.n	800ddd6 <QR_Hessenberg_Matrix.constprop.27+0x486>
 800dde4:	9900      	ldr	r1, [sp, #0]
 800dde6:	981a      	ldr	r0, [sp, #104]	; 0x68
 800dde8:	fb03 f209 	mul.w	r2, r3, r9
 800ddec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ddf0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ddf2:	4411      	add	r1, r2
 800ddf4:	ed91 7a00 	vldr	s14, [r1]
 800ddf8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ddfa:	ee77 6a67 	vsub.f32	s13, s14, s15
 800ddfe:	4411      	add	r1, r2
 800de00:	eee7 1a26 	vfma.f32	s3, s14, s13
 800de04:	4414      	add	r4, r2
 800de06:	4410      	add	r0, r2
 800de08:	edd1 2a00 	vldr	s5, [r1]
 800de0c:	edd4 6a00 	vldr	s13, [r4]
 800de10:	9919      	ldr	r1, [sp, #100]	; 0x64
 800de12:	ed90 6a00 	vldr	s12, [r0]
 800de16:	9c00      	ldr	r4, [sp, #0]
 800de18:	eec1 5aa2 	vdiv.f32	s11, s3, s5
 800de1c:	4411      	add	r1, r2
 800de1e:	4608      	mov	r0, r1
 800de20:	3404      	adds	r4, #4
 800de22:	1f29      	subs	r1, r5, #4
 800de24:	440a      	add	r2, r1
 800de26:	9411      	str	r4, [sp, #68]	; 0x44
 800de28:	4619      	mov	r1, r3
 800de2a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800de2e:	ed90 2a00 	vldr	s4, [r0]
 800de32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de36:	ee35 6a86 	vadd.f32	s12, s11, s12
 800de3a:	eeb0 7ac2 	vabs.f32	s14, s4
 800de3e:	eef0 6ae7 	vabs.f32	s13, s15
 800de42:	ee76 6a87 	vadd.f32	s13, s13, s14
 800de46:	eeb0 7ac6 	vabs.f32	s14, s12
 800de4a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800de4e:	eef0 6a63 	vmov.f32	s13, s7
 800de52:	eec6 2a07 	vdiv.f32	s5, s12, s14
 800de56:	eec2 5a07 	vdiv.f32	s11, s4, s14
 800de5a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800de5e:	4571      	cmp	r1, lr
 800de60:	f300 80e2 	bgt.w	800e028 <QR_Hessenberg_Matrix.constprop.27+0x6d8>
 800de64:	4299      	cmp	r1, r3
 800de66:	dd24      	ble.n	800deb2 <QR_Hessenberg_Matrix.constprop.27+0x562>
 800de68:	4571      	cmp	r1, lr
 800de6a:	bf1e      	ittt	ne
 800de6c:	981d      	ldrne	r0, [sp, #116]	; 0x74
 800de6e:	1880      	addne	r0, r0, r2
 800de70:	edd0 5a00 	vldrne	s11, [r0]
 800de74:	edd2 1a00 	vldr	s3, [r2]
 800de78:	bf08      	it	eq
 800de7a:	ed5f 5a7c 	vldreq	s11, [pc, #-496]	; 800dc8c <QR_Hessenberg_Matrix.constprop.27+0x33c>
 800de7e:	eb0a 0002 	add.w	r0, sl, r2
 800de82:	ed90 2a00 	vldr	s4, [r0]
 800de86:	eeb0 7ae1 	vabs.f32	s14, s3
 800de8a:	eef0 7ac2 	vabs.f32	s15, s4
 800de8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de92:	eef0 6ae5 	vabs.f32	s13, s11
 800de96:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800de9a:	eef4 6ac3 	vcmpe.f32	s13, s6
 800de9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dea2:	f100 80bd 	bmi.w	800e020 <QR_Hessenberg_Matrix.constprop.27+0x6d0>
 800dea6:	eec1 2aa6 	vdiv.f32	s5, s3, s13
 800deaa:	ee82 6a26 	vdiv.f32	s12, s4, s13
 800deae:	eec5 5aa6 	vdiv.f32	s11, s11, s13
 800deb2:	ee26 7a06 	vmul.f32	s14, s12, s12
 800deb6:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 800deba:	eea2 7aa2 	vfma.f32	s14, s5, s5
 800debe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dec2:	eea5 7aa5 	vfma.f32	s14, s11, s11
 800dec6:	eef1 7ac7 	vsqrt.f32	s15, s14
 800deca:	bf48      	it	mi
 800decc:	eef1 7a67 	vnegmi.f32	s15, s15
 800ded0:	4299      	cmp	r1, r3
 800ded2:	dd04      	ble.n	800dede <QR_Hessenberg_Matrix.constprop.27+0x58e>
 800ded4:	ee66 6ae7 	vnmul.f32	s13, s13, s15
 800ded8:	edc2 6a00 	vstr	s13, [r2]
 800dedc:	e008      	b.n	800def0 <QR_Hessenberg_Matrix.constprop.27+0x5a0>
 800dede:	9803      	ldr	r0, [sp, #12]
 800dee0:	4298      	cmp	r0, r3
 800dee2:	d005      	beq.n	800def0 <QR_Hessenberg_Matrix.constprop.27+0x5a0>
 800dee4:	edd2 6a00 	vldr	s13, [r2]
 800dee8:	eef1 6a66 	vneg.f32	s13, s13
 800deec:	edc2 6a00 	vstr	s13, [r2]
 800def0:	ee32 7aa7 	vadd.f32	s14, s5, s15
 800def4:	ee86 2a27 	vdiv.f32	s4, s12, s15
 800def8:	9821      	ldr	r0, [sp, #132]	; 0x84
 800defa:	eb08 0602 	add.w	r6, r8, r2
 800defe:	1d14      	adds	r4, r2, #4
 800df00:	4410      	add	r0, r2
 800df02:	460f      	mov	r7, r1
 800df04:	eec5 1aa7 	vdiv.f32	s3, s11, s15
 800df08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800df0c:	ee86 6a07 	vdiv.f32	s12, s12, s14
 800df10:	eec5 5a87 	vdiv.f32	s11, s11, s14
 800df14:	eef1 0a66 	vneg.f32	s1, s13
 800df18:	eeb1 1a61 	vneg.f32	s2, s3
 800df1c:	eef1 2a42 	vneg.f32	s5, s4
 800df20:	45b9      	cmp	r9, r7
 800df22:	dd1e      	ble.n	800df62 <QR_Hessenberg_Matrix.constprop.27+0x612>
 800df24:	ed96 7a00 	vldr	s14, [r6]
 800df28:	edd4 7a00 	vldr	s15, [r4]
 800df2c:	4571      	cmp	r1, lr
 800df2e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800df32:	d007      	beq.n	800df44 <QR_Hessenberg_Matrix.constprop.27+0x5f4>
 800df34:	ed90 7a00 	vldr	s14, [r0]
 800df38:	eee5 7a87 	vfma.f32	s15, s11, s14
 800df3c:	eea1 7a27 	vfma.f32	s14, s2, s15
 800df40:	ed80 7a00 	vstr	s14, [r0]
 800df44:	ed96 7a00 	vldr	s14, [r6]
 800df48:	eea2 7aa7 	vfma.f32	s14, s5, s15
 800df4c:	3004      	adds	r0, #4
 800df4e:	3701      	adds	r7, #1
 800df50:	eca6 7a01 	vstmia	r6!, {s14}
 800df54:	ed94 7a00 	vldr	s14, [r4]
 800df58:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800df5c:	eca4 7a01 	vstmia	r4!, {s14}
 800df60:	e7de      	b.n	800df20 <QR_Hessenberg_Matrix.constprop.27+0x5d0>
 800df62:	1cce      	adds	r6, r1, #3
 800df64:	9811      	ldr	r0, [sp, #68]	; 0x44
 800df66:	455e      	cmp	r6, fp
 800df68:	bfa8      	it	ge
 800df6a:	465e      	movge	r6, fp
 800df6c:	4428      	add	r0, r5
 800df6e:	2400      	movs	r4, #0
 800df70:	eeb1 1a46 	vneg.f32	s2, s12
 800df74:	eef1 2a65 	vneg.f32	s5, s11
 800df78:	42b4      	cmp	r4, r6
 800df7a:	f100 0c04 	add.w	ip, r0, #4
 800df7e:	f1a0 0704 	sub.w	r7, r0, #4
 800df82:	dc21      	bgt.n	800dfc8 <QR_Hessenberg_Matrix.constprop.27+0x678>
 800df84:	edd0 7a00 	vldr	s15, [r0]
 800df88:	ed10 7a01 	vldr	s14, [r0, #-4]
 800df8c:	ee62 7a27 	vmul.f32	s15, s4, s15
 800df90:	4571      	cmp	r1, lr
 800df92:	f104 0401 	add.w	r4, r4, #1
 800df96:	eee6 7a87 	vfma.f32	s15, s13, s14
 800df9a:	d007      	beq.n	800dfac <QR_Hessenberg_Matrix.constprop.27+0x65c>
 800df9c:	ed9c 7a00 	vldr	s14, [ip]
 800dfa0:	eee1 7a87 	vfma.f32	s15, s3, s14
 800dfa4:	eea2 7aa7 	vfma.f32	s14, s5, s15
 800dfa8:	ed8c 7a00 	vstr	s14, [ip]
 800dfac:	ed90 7a00 	vldr	s14, [r0]
 800dfb0:	eea1 7a27 	vfma.f32	s14, s2, s15
 800dfb4:	ed80 7a00 	vstr	s14, [r0]
 800dfb8:	ed97 7a00 	vldr	s14, [r7]
 800dfbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dfc0:	4450      	add	r0, sl
 800dfc2:	edc7 7a00 	vstr	s15, [r7]
 800dfc6:	e7d7      	b.n	800df78 <QR_Hessenberg_Matrix.constprop.27+0x628>
 800dfc8:	9805      	ldr	r0, [sp, #20]
 800dfca:	2400      	movs	r4, #0
 800dfcc:	4428      	add	r0, r5
 800dfce:	eef1 0a65 	vneg.f32	s1, s11
 800dfd2:	ed90 7a01 	vldr	s14, [r0, #4]
 800dfd6:	edd0 7a00 	vldr	s15, [r0]
 800dfda:	ee22 7a07 	vmul.f32	s14, s4, s14
 800dfde:	4571      	cmp	r1, lr
 800dfe0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dfe4:	f104 0401 	add.w	r4, r4, #1
 800dfe8:	f100 0604 	add.w	r6, r0, #4
 800dfec:	eef0 2a47 	vmov.f32	s5, s14
 800dff0:	d007      	beq.n	800e002 <QR_Hessenberg_Matrix.constprop.27+0x6b2>
 800dff2:	ed90 7a02 	vldr	s14, [r0, #8]
 800dff6:	eee1 2a87 	vfma.f32	s5, s3, s14
 800dffa:	eea0 7aa2 	vfma.f32	s14, s1, s5
 800dffe:	ed80 7a02 	vstr	s14, [r0, #8]
 800e002:	edd6 7a00 	vldr	s15, [r6]
 800e006:	eee1 7a22 	vfma.f32	s15, s2, s5
 800e00a:	45a1      	cmp	r9, r4
 800e00c:	edc6 7a00 	vstr	s15, [r6]
 800e010:	edd0 7a00 	vldr	s15, [r0]
 800e014:	ee77 7ae2 	vsub.f32	s15, s15, s5
 800e018:	edc0 7a00 	vstr	s15, [r0]
 800e01c:	4450      	add	r0, sl
 800e01e:	d1d8      	bne.n	800dfd2 <QR_Hessenberg_Matrix.constprop.27+0x682>
 800e020:	3101      	adds	r1, #1
 800e022:	4442      	add	r2, r8
 800e024:	3504      	adds	r5, #4
 800e026:	e71a      	b.n	800de5e <QR_Hessenberg_Matrix.constprop.27+0x50e>
 800e028:	9b02      	ldr	r3, [sp, #8]
 800e02a:	3301      	adds	r3, #1
 800e02c:	2b0b      	cmp	r3, #11
 800e02e:	9302      	str	r3, [sp, #8]
 800e030:	f47f ad05 	bne.w	800da3e <QR_Hessenberg_Matrix.constprop.27+0xee>
 800e034:	f04f 30ff 	mov.w	r0, #4294967295
 800e038:	e0c6      	b.n	800e1c8 <QR_Hessenberg_Matrix.constprop.27+0x878>
 800e03a:	f1be 0b01 	subs.w	fp, lr, #1
 800e03e:	f57f acb1 	bpl.w	800d9a4 <QR_Hessenberg_Matrix.constprop.27+0x54>
 800e042:	9b00      	ldr	r3, [sp, #0]
 800e044:	edd3 7a00 	vldr	s15, [r3]
 800e048:	eb03 020a 	add.w	r2, r3, sl
 800e04c:	46d6      	mov	lr, sl
 800e04e:	464c      	mov	r4, r9
 800e050:	f10a 0504 	add.w	r5, sl, #4
 800e054:	eef0 7ae7 	vabs.f32	s15, s15
 800e058:	2301      	movs	r3, #1
 800e05a:	1e59      	subs	r1, r3, #1
 800e05c:	4610      	mov	r0, r2
 800e05e:	428c      	cmp	r4, r1
 800e060:	dd07      	ble.n	800e072 <QR_Hessenberg_Matrix.constprop.27+0x722>
 800e062:	ecb0 7a01 	vldmia	r0!, {s14}
 800e066:	eeb0 7ac7 	vabs.f32	s14, s14
 800e06a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e06e:	3101      	adds	r1, #1
 800e070:	e7f5      	b.n	800e05e <QR_Hessenberg_Matrix.constprop.27+0x70e>
 800e072:	1c58      	adds	r0, r3, #1
 800e074:	4284      	cmp	r4, r0
 800e076:	442a      	add	r2, r5
 800e078:	d001      	beq.n	800e07e <QR_Hessenberg_Matrix.constprop.27+0x72e>
 800e07a:	4603      	mov	r3, r0
 800e07c:	e7ed      	b.n	800e05a <QR_Hessenberg_Matrix.constprop.27+0x70a>
 800e07e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800e1d4 <QR_Hessenberg_Matrix.constprop.27+0x884>
 800e082:	9a00      	ldr	r2, [sp, #0]
 800e084:	9908      	ldr	r1, [sp, #32]
 800e086:	eddf 4a54 	vldr	s9, [pc, #336]	; 800e1d8 <QR_Hessenberg_Matrix.constprop.27+0x888>
 800e08a:	9c07      	ldr	r4, [sp, #28]
 800e08c:	ee87 5a27 	vdiv.f32	s10, s14, s15
 800e090:	fb03 3300 	mla	r3, r3, r0, r3
 800e094:	ebce 0383 	rsb	r3, lr, r3, lsl #2
 800e098:	4413      	add	r3, r2
 800e09a:	9a06      	ldr	r2, [sp, #24]
 800e09c:	f1a1 0a04 	sub.w	sl, r1, #4
 800e0a0:	4472      	add	r2, lr
 800e0a2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e0a6:	eef0 5a46 	vmov.f32	s11, s12
 800e0aa:	eb03 010e 	add.w	r1, r3, lr
 800e0ae:	f104 38ff 	add.w	r8, r4, #4294967295
 800e0b2:	ed81 6a00 	vstr	s12, [r1]
 800e0b6:	4647      	mov	r7, r8
 800e0b8:	461e      	mov	r6, r3
 800e0ba:	461d      	mov	r5, r3
 800e0bc:	9401      	str	r4, [sp, #4]
 800e0be:	2f00      	cmp	r7, #0
 800e0c0:	f107 0c01 	add.w	ip, r7, #1
 800e0c4:	db30      	blt.n	800e128 <QR_Hessenberg_Matrix.constprop.27+0x7d8>
 800e0c6:	ed56 6a01 	vldr	s13, [r6, #-4]
 800e0ca:	ed12 7a01 	vldr	s14, [r2, #-4]
 800e0ce:	edd5 7a00 	vldr	s15, [r5]
 800e0d2:	9c01      	ldr	r4, [sp, #4]
 800e0d4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e0d8:	4689      	mov	r9, r1
 800e0da:	46b3      	mov	fp, r6
 800e0dc:	45a4      	cmp	ip, r4
 800e0de:	da09      	bge.n	800e0f4 <QR_Hessenberg_Matrix.constprop.27+0x7a4>
 800e0e0:	edd9 6a00 	vldr	s13, [r9]
 800e0e4:	ecbb 4a01 	vldmia	fp!, {s8}
 800e0e8:	f10c 0c01 	add.w	ip, ip, #1
 800e0ec:	eee4 7a26 	vfma.f32	s15, s8, s13
 800e0f0:	44f1      	add	r9, lr
 800e0f2:	e7f3      	b.n	800e0dc <QR_Hessenberg_Matrix.constprop.27+0x78c>
 800e0f4:	eef0 6ac7 	vabs.f32	s13, s14
 800e0f8:	eef4 6ae4 	vcmpe.f32	s13, s9
 800e0fc:	eef1 7a67 	vneg.f32	s15, s15
 800e100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e104:	bfc8      	it	gt
 800e106:	eec7 6a87 	vdivgt.f32	s13, s15, s14
 800e10a:	9401      	str	r4, [sp, #4]
 800e10c:	9c04      	ldr	r4, [sp, #16]
 800e10e:	4426      	add	r6, r4
 800e110:	9c08      	ldr	r4, [sp, #32]
 800e112:	f107 37ff 	add.w	r7, r7, #4294967295
 800e116:	4421      	add	r1, r4
 800e118:	bfd8      	it	le
 800e11a:	ee65 6a27 	vmulle.f32	s13, s10, s15
 800e11e:	edc5 6a00 	vstr	s13, [r5]
 800e122:	eba5 050e 	sub.w	r5, r5, lr
 800e126:	e7ca      	b.n	800e0be <QR_Hessenberg_Matrix.constprop.27+0x76e>
 800e128:	f118 0101 	adds.w	r1, r8, #1
 800e12c:	4453      	add	r3, sl
 800e12e:	f1a2 0204 	sub.w	r2, r2, #4
 800e132:	4644      	mov	r4, r8
 800e134:	d1b9      	bne.n	800e0aa <QR_Hessenberg_Matrix.constprop.27+0x75a>
 800e136:	9a00      	ldr	r2, [sp, #0]
 800e138:	9907      	ldr	r1, [sp, #28]
 800e13a:	f1ae 0304 	sub.w	r3, lr, #4
 800e13e:	4413      	add	r3, r2
 800e140:	9a00      	ldr	r2, [sp, #0]
 800e142:	eba3 0c02 	sub.w	ip, r3, r2
 800e146:	9a05      	ldr	r2, [sp, #20]
 800e148:	2400      	movs	r4, #0
 800e14a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800e1dc <QR_Hessenberg_Matrix.constprop.27+0x88c>
 800e14e:	461e      	mov	r6, r3
 800e150:	4617      	mov	r7, r2
 800e152:	2500      	movs	r5, #0
 800e154:	ed96 7a00 	vldr	s14, [r6]
 800e158:	ecf7 6a01 	vldmia	r7!, {s13}
 800e15c:	3501      	adds	r5, #1
 800e15e:	428d      	cmp	r5, r1
 800e160:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e164:	4476      	add	r6, lr
 800e166:	ddf5      	ble.n	800e154 <QR_Hessenberg_Matrix.constprop.27+0x804>
 800e168:	3401      	adds	r4, #1
 800e16a:	eb02 050c 	add.w	r5, r2, ip
 800e16e:	4284      	cmp	r4, r0
 800e170:	edc5 7a00 	vstr	s15, [r5]
 800e174:	4472      	add	r2, lr
 800e176:	d1e8      	bne.n	800e14a <QR_Hessenberg_Matrix.constprop.27+0x7fa>
 800e178:	3901      	subs	r1, #1
 800e17a:	1c4a      	adds	r2, r1, #1
 800e17c:	f1a3 0304 	sub.w	r3, r3, #4
 800e180:	d1de      	bne.n	800e140 <QR_Hessenberg_Matrix.constprop.27+0x7f0>
 800e182:	9905      	ldr	r1, [sp, #20]
 800e184:	eb01 040e 	add.w	r4, r1, lr
 800e188:	eddf 7a14 	vldr	s15, [pc, #80]	; 800e1dc <QR_Hessenberg_Matrix.constprop.27+0x88c>
 800e18c:	460a      	mov	r2, r1
 800e18e:	2300      	movs	r3, #0
 800e190:	ed92 7a00 	vldr	s14, [r2]
 800e194:	3301      	adds	r3, #1
 800e196:	4283      	cmp	r3, r0
 800e198:	eee7 7a07 	vfma.f32	s15, s14, s14
 800e19c:	4472      	add	r2, lr
 800e19e:	d1f7      	bne.n	800e190 <QR_Hessenberg_Matrix.constprop.27+0x840>
 800e1a0:	eef1 6ae7 	vsqrt.f32	s13, s15
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800e1ac:	3201      	adds	r2, #1
 800e1ae:	4282      	cmp	r2, r0
 800e1b0:	edd3 7a00 	vldr	s15, [r3]
 800e1b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e1b8:	edc3 7a00 	vstr	s15, [r3]
 800e1bc:	4473      	add	r3, lr
 800e1be:	d1f5      	bne.n	800e1ac <QR_Hessenberg_Matrix.constprop.27+0x85c>
 800e1c0:	3104      	adds	r1, #4
 800e1c2:	428c      	cmp	r4, r1
 800e1c4:	d1e0      	bne.n	800e188 <QR_Hessenberg_Matrix.constprop.27+0x838>
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	b025      	add	sp, #148	; 0x94
 800e1ca:	ecbd 8b02 	vpop	{d8}
 800e1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d2:	bf00      	nop
 800e1d4:	4b000000 	.word	0x4b000000
 800e1d8:	358637bd 	.word	0x358637bd
 800e1dc:	00000000 	.word	0x00000000

0800e1e0 <MEMS_checkConsistency.constprop.32>:
 800e1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e4:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800e1e8:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800e1ec:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 800e1f0:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
 800e1f4:	1b67      	subs	r7, r4, r5
 800e1f6:	1ad6      	subs	r6, r2, r3
 800e1f8:	ea87 7ee7 	eor.w	lr, r7, r7, asr #31
 800e1fc:	ea86 7ce6 	eor.w	ip, r6, r6, asr #31
 800e200:	ebae 7ee7 	sub.w	lr, lr, r7, asr #31
 800e204:	ebac 7ce6 	sub.w	ip, ip, r6, asr #31
 800e208:	45e6      	cmp	lr, ip
 800e20a:	dd5f      	ble.n	800e2cc <MEMS_checkConsistency.constprop.32+0xec>
 800e20c:	b2a4      	uxth	r4, r4
 800e20e:	b2ab      	uxth	r3, r5
 800e210:	2f00      	cmp	r7, #0
 800e212:	bfb4      	ite	lt
 800e214:	1b1c      	sublt	r4, r3, r4
 800e216:	1ae4      	subge	r4, r4, r3
 800e218:	b223      	sxth	r3, r4
 800e21a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e21e:	f9b1 400a 	ldrsh.w	r4, [r1, #10]
 800e222:	1b15      	subs	r5, r2, r4
 800e224:	ea85 76e5 	eor.w	r6, r5, r5, asr #31
 800e228:	eba6 76e5 	sub.w	r6, r6, r5, asr #31
 800e22c:	42b3      	cmp	r3, r6
 800e22e:	dc06      	bgt.n	800e23e <MEMS_checkConsistency.constprop.32+0x5e>
 800e230:	b292      	uxth	r2, r2
 800e232:	b2a3      	uxth	r3, r4
 800e234:	2d00      	cmp	r5, #0
 800e236:	bfb4      	ite	lt
 800e238:	1a9a      	sublt	r2, r3, r2
 800e23a:	1ad2      	subge	r2, r2, r3
 800e23c:	b213      	sxth	r3, r2
 800e23e:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 800e242:	898e      	ldrh	r6, [r1, #12]
 800e244:	89c7      	ldrh	r7, [r0, #14]
 800e246:	89cd      	ldrh	r5, [r1, #14]
 800e248:	ebac 0406 	sub.w	r4, ip, r6
 800e24c:	1b7a      	subs	r2, r7, r5
 800e24e:	ea84 78e4 	eor.w	r8, r4, r4, asr #31
 800e252:	ea82 7ee2 	eor.w	lr, r2, r2, asr #31
 800e256:	eba8 78e4 	sub.w	r8, r8, r4, asr #31
 800e25a:	ebae 7ee2 	sub.w	lr, lr, r2, asr #31
 800e25e:	45f0      	cmp	r8, lr
 800e260:	dd2f      	ble.n	800e2c2 <MEMS_checkConsistency.constprop.32+0xe2>
 800e262:	2c00      	cmp	r4, #0
 800e264:	bfba      	itte	lt
 800e266:	eba6 020c 	sublt.w	r2, r6, ip
 800e26a:	b212      	sxthlt	r2, r2
 800e26c:	b222      	sxthge	r2, r4
 800e26e:	8a04      	ldrh	r4, [r0, #16]
 800e270:	8a08      	ldrh	r0, [r1, #16]
 800e272:	1a21      	subs	r1, r4, r0
 800e274:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
 800e278:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
 800e27c:	42aa      	cmp	r2, r5
 800e27e:	dc04      	bgt.n	800e28a <MEMS_checkConsistency.constprop.32+0xaa>
 800e280:	2900      	cmp	r1, #0
 800e282:	bfba      	itte	lt
 800e284:	1b02      	sublt	r2, r0, r4
 800e286:	b212      	sxthlt	r2, r2
 800e288:	b20a      	sxthge	r2, r1
 800e28a:	ee07 3a90 	vmov	s15, r3
 800e28e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e292:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e296:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e29a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2a2:	d51c      	bpl.n	800e2de <MEMS_checkConsistency.constprop.32+0xfe>
 800e2a4:	ee07 2a90 	vmov	s15, r2
 800e2a8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800e2e4 <MEMS_checkConsistency.constprop.32+0x104>
 800e2ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e2b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e2b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b8:	bf4c      	ite	mi
 800e2ba:	2001      	movmi	r0, #1
 800e2bc:	2000      	movpl	r0, #0
 800e2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2c2:	2a00      	cmp	r2, #0
 800e2c4:	bfb8      	it	lt
 800e2c6:	1bea      	sublt	r2, r5, r7
 800e2c8:	b212      	sxth	r2, r2
 800e2ca:	e7d0      	b.n	800e26e <MEMS_checkConsistency.constprop.32+0x8e>
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	2e00      	cmp	r6, #0
 800e2d0:	b292      	uxth	r2, r2
 800e2d2:	bfb5      	itete	lt
 800e2d4:	1a9b      	sublt	r3, r3, r2
 800e2d6:	1ad2      	subge	r2, r2, r3
 800e2d8:	b21b      	sxthlt	r3, r3
 800e2da:	b213      	sxthge	r3, r2
 800e2dc:	e79d      	b.n	800e21a <MEMS_checkConsistency.constprop.32+0x3a>
 800e2de:	2000      	movs	r0, #0
 800e2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e4:	43480000 	.word	0x43480000

0800e2e8 <MEMS_updateMagBufferIndex.constprop.22>:
 800e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ec:	4d76      	ldr	r5, [pc, #472]	; (800e4c8 <MEMS_updateMagBufferIndex.constprop.22+0x1e0>)
 800e2ee:	ed2d 8b02 	vpush	{d8}
 800e2f2:	f895 10e0 	ldrb.w	r1, [r5, #224]	; 0xe0
 800e2f6:	f895 80e1 	ldrb.w	r8, [r5, #225]	; 0xe1
 800e2fa:	f995 20e2 	ldrsb.w	r2, [r5, #226]	; 0xe2
 800e2fe:	b089      	sub	sp, #36	; 0x24
 800e300:	2300      	movs	r3, #0
 800e302:	4541      	cmp	r1, r8
 800e304:	9101      	str	r1, [sp, #4]
 800e306:	f102 0201 	add.w	r2, r2, #1
 800e30a:	e9c5 333a 	strd	r3, r3, [r5, #232]	; 0xe8
 800e30e:	e9c5 333c 	strd	r3, r3, [r5, #240]	; 0xf0
 800e312:	e9c5 333e 	strd	r3, r3, [r5, #248]	; 0xf8
 800e316:	f000 80d0 	beq.w	800e4ba <MEMS_updateMagBufferIndex.constprop.22+0x1d2>
 800e31a:	1a52      	subs	r2, r2, r1
 800e31c:	fb92 f3f8 	sdiv	r3, r2, r8
 800e320:	fb08 2213 	mls	r2, r8, r3, r2
 800e324:	b213      	sxth	r3, r2
 800e326:	2a00      	cmp	r2, #0
 800e328:	9307      	str	r3, [sp, #28]
 800e32a:	f2c0 80c2 	blt.w	800e4b2 <MEMS_updateMagBufferIndex.constprop.22+0x1ca>
 800e32e:	9b01      	ldr	r3, [sp, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	f000 80b9 	beq.w	800e4a8 <MEMS_updateMagBufferIndex.constprop.22+0x1c0>
 800e336:	2600      	movs	r6, #0
 800e338:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e33c:	4681      	mov	r9, r0
 800e33e:	ee87 8a80 	vdiv.f32	s16, s15, s0
 800e342:	e9cd 6602 	strd	r6, r6, [sp, #8]
 800e346:	e9cd 6604 	strd	r6, r6, [sp, #16]
 800e34a:	9606      	str	r6, [sp, #24]
 800e34c:	46b3      	mov	fp, r6
 800e34e:	2701      	movs	r7, #1
 800e350:	e021      	b.n	800e396 <MEMS_updateMagBufferIndex.constprop.22+0xae>
 800e352:	3c20      	subs	r4, #32
 800e354:	fa07 f404 	lsl.w	r4, r7, r4
 800e358:	ea24 040b 	bic.w	r4, r4, fp
 800e35c:	f1ba 0f1f 	cmp.w	sl, #31
 800e360:	ea8b 0b04 	eor.w	fp, fp, r4
 800e364:	d97a      	bls.n	800e45c <MEMS_updateMagBufferIndex.constprop.22+0x174>
 800e366:	9905      	ldr	r1, [sp, #20]
 800e368:	f1aa 0220 	sub.w	r2, sl, #32
 800e36c:	fa07 f202 	lsl.w	r2, r7, r2
 800e370:	ea22 0201 	bic.w	r2, r2, r1
 800e374:	404a      	eors	r2, r1
 800e376:	2b1f      	cmp	r3, #31
 800e378:	9205      	str	r2, [sp, #20]
 800e37a:	d978      	bls.n	800e46e <MEMS_updateMagBufferIndex.constprop.22+0x186>
 800e37c:	9a03      	ldr	r2, [sp, #12]
 800e37e:	3b20      	subs	r3, #32
 800e380:	fa07 f303 	lsl.w	r3, r7, r3
 800e384:	ea23 0302 	bic.w	r3, r3, r2
 800e388:	4053      	eors	r3, r2
 800e38a:	3601      	adds	r6, #1
 800e38c:	9a01      	ldr	r2, [sp, #4]
 800e38e:	9303      	str	r3, [sp, #12]
 800e390:	b2f3      	uxtb	r3, r6
 800e392:	429a      	cmp	r2, r3
 800e394:	d977      	bls.n	800e486 <MEMS_updateMagBufferIndex.constprop.22+0x19e>
 800e396:	9b07      	ldr	r3, [sp, #28]
 800e398:	199a      	adds	r2, r3, r6
 800e39a:	fb92 f3f8 	sdiv	r3, r2, r8
 800e39e:	fb08 2313 	mls	r3, r8, r3, r2
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	f103 0a04 	add.w	sl, r3, #4
 800e3a8:	eb05 02ca 	add.w	r2, r5, sl, lsl #3
 800e3ac:	f9b2 00e2 	ldrsh.w	r0, [r2, #226]	; 0xe2
 800e3b0:	fb90 f2f9 	sdiv	r2, r0, r9
 800e3b4:	fb09 0212 	mls	r2, r9, r2, r0
 800e3b8:	2a00      	cmp	r2, #0
 800e3ba:	bfb8      	it	lt
 800e3bc:	444a      	addlt	r2, r9
 800e3be:	b213      	sxth	r3, r2
 800e3c0:	ee00 3a10 	vmov	s0, r3
 800e3c4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800e3c8:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e3cc:	f008 f8be 	bl	801654c <roundf>
 800e3d0:	eb05 02ca 	add.w	r2, r5, sl, lsl #3
 800e3d4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800e3d8:	f9b2 00e4 	ldrsh.w	r0, [r2, #228]	; 0xe4
 800e3dc:	fb90 f2f9 	sdiv	r2, r0, r9
 800e3e0:	fb09 0212 	mls	r2, r9, r2, r0
 800e3e4:	2a00      	cmp	r2, #0
 800e3e6:	bfb8      	it	lt
 800e3e8:	444a      	addlt	r2, r9
 800e3ea:	b213      	sxth	r3, r2
 800e3ec:	ee00 3a10 	vmov	s0, r3
 800e3f0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800e3f4:	edcd 7a00 	vstr	s15, [sp]
 800e3f8:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e3fc:	f008 f8a6 	bl	801654c <roundf>
 800e400:	eb05 03ca 	add.w	r3, r5, sl, lsl #3
 800e404:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800e408:	f9b3 20e6 	ldrsh.w	r2, [r3, #230]	; 0xe6
 800e40c:	fb92 f3f9 	sdiv	r3, r2, r9
 800e410:	fb09 2313 	mls	r3, r9, r3, r2
 800e414:	2b00      	cmp	r3, #0
 800e416:	bfb8      	it	lt
 800e418:	444b      	addlt	r3, r9
 800e41a:	b21b      	sxth	r3, r3
 800e41c:	ee00 3a10 	vmov	s0, r3
 800e420:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800e424:	f89d 4000 	ldrb.w	r4, [sp]
 800e428:	edcd 7a00 	vstr	s15, [sp]
 800e42c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e430:	f008 f88c 	bl	801654c <roundf>
 800e434:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800e438:	f89d a000 	ldrb.w	sl, [sp]
 800e43c:	edcd 7a00 	vstr	s15, [sp]
 800e440:	2c1f      	cmp	r4, #31
 800e442:	f89d 3000 	ldrb.w	r3, [sp]
 800e446:	d884      	bhi.n	800e352 <MEMS_updateMagBufferIndex.constprop.22+0x6a>
 800e448:	9a06      	ldr	r2, [sp, #24]
 800e44a:	fa07 f404 	lsl.w	r4, r7, r4
 800e44e:	ea24 0402 	bic.w	r4, r4, r2
 800e452:	4062      	eors	r2, r4
 800e454:	f1ba 0f1f 	cmp.w	sl, #31
 800e458:	9206      	str	r2, [sp, #24]
 800e45a:	d884      	bhi.n	800e366 <MEMS_updateMagBufferIndex.constprop.22+0x7e>
 800e45c:	9904      	ldr	r1, [sp, #16]
 800e45e:	fa07 f20a 	lsl.w	r2, r7, sl
 800e462:	ea22 0201 	bic.w	r2, r2, r1
 800e466:	404a      	eors	r2, r1
 800e468:	2b1f      	cmp	r3, #31
 800e46a:	9204      	str	r2, [sp, #16]
 800e46c:	d886      	bhi.n	800e37c <MEMS_updateMagBufferIndex.constprop.22+0x94>
 800e46e:	9a02      	ldr	r2, [sp, #8]
 800e470:	fa07 f303 	lsl.w	r3, r7, r3
 800e474:	ea23 0302 	bic.w	r3, r3, r2
 800e478:	4053      	eors	r3, r2
 800e47a:	3601      	adds	r6, #1
 800e47c:	9a01      	ldr	r2, [sp, #4]
 800e47e:	9302      	str	r3, [sp, #8]
 800e480:	b2f3      	uxtb	r3, r6
 800e482:	429a      	cmp	r2, r3
 800e484:	d887      	bhi.n	800e396 <MEMS_updateMagBufferIndex.constprop.22+0xae>
 800e486:	9b06      	ldr	r3, [sp, #24]
 800e488:	f8c5 30ec 	str.w	r3, [r5, #236]	; 0xec
 800e48c:	9b05      	ldr	r3, [sp, #20]
 800e48e:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 800e492:	9b04      	ldr	r3, [sp, #16]
 800e494:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 800e498:	9b03      	ldr	r3, [sp, #12]
 800e49a:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
 800e49e:	9b02      	ldr	r3, [sp, #8]
 800e4a0:	f8c5 b0e8 	str.w	fp, [r5, #232]	; 0xe8
 800e4a4:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
 800e4a8:	b009      	add	sp, #36	; 0x24
 800e4aa:	ecbd 8b02 	vpop	{d8}
 800e4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4b2:	4442      	add	r2, r8
 800e4b4:	b213      	sxth	r3, r2
 800e4b6:	9307      	str	r3, [sp, #28]
 800e4b8:	e739      	b.n	800e32e <MEMS_updateMagBufferIndex.constprop.22+0x46>
 800e4ba:	fb92 f3f1 	sdiv	r3, r2, r1
 800e4be:	fb01 2213 	mls	r2, r1, r3, r2
 800e4c2:	b213      	sxth	r3, r2
 800e4c4:	9307      	str	r3, [sp, #28]
 800e4c6:	e732      	b.n	800e32e <MEMS_updateMagBufferIndex.constprop.22+0x46>
 800e4c8:	20001640 	.word	0x20001640

0800e4cc <getMagStats.constprop.28>:
 800e4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d0:	4d80      	ldr	r5, [pc, #512]	; (800e6d4 <getMagStats.constprop.28+0x208>)
 800e4d2:	2400      	movs	r4, #0
 800e4d4:	601c      	str	r4, [r3, #0]
 800e4d6:	6014      	str	r4, [r2, #0]
 800e4d8:	f895 e0e0 	ldrb.w	lr, [r5, #224]	; 0xe0
 800e4dc:	f895 80e1 	ldrb.w	r8, [r5, #225]	; 0xe1
 800e4e0:	f995 40e2 	ldrsb.w	r4, [r5, #226]	; 0xe2
 800e4e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e4e8:	45c6      	cmp	lr, r8
 800e4ea:	b083      	sub	sp, #12
 800e4ec:	f104 0401 	add.w	r4, r4, #1
 800e4f0:	46a9      	mov	r9, r5
 800e4f2:	ee87 4a80 	vdiv.f32	s8, s15, s0
 800e4f6:	d105      	bne.n	800e504 <getMagStats.constprop.28+0x38>
 800e4f8:	fb94 f5fe 	sdiv	r5, r4, lr
 800e4fc:	fb0e 4415 	mls	r4, lr, r5, r4
 800e500:	b225      	sxth	r5, r4
 800e502:	e00a      	b.n	800e51a <getMagStats.constprop.28+0x4e>
 800e504:	eba4 040e 	sub.w	r4, r4, lr
 800e508:	fb94 f5f8 	sdiv	r5, r4, r8
 800e50c:	fb08 4415 	mls	r4, r8, r5, r4
 800e510:	2c00      	cmp	r4, #0
 800e512:	b225      	sxth	r5, r4
 800e514:	bfbc      	itt	lt
 800e516:	4444      	addlt	r4, r8
 800e518:	b225      	sxthlt	r5, r4
 800e51a:	eddf 3a6f 	vldr	s7, [pc, #444]	; 800e6d8 <getMagStats.constprop.28+0x20c>
 800e51e:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800e522:	f04f 0a00 	mov.w	sl, #0
 800e526:	b26c      	sxtb	r4, r5
 800e528:	ee64 3a23 	vmul.f32	s7, s8, s7
 800e52c:	ee24 4a27 	vmul.f32	s8, s8, s15
 800e530:	9401      	str	r4, [sp, #4]
 800e532:	46d3      	mov	fp, sl
 800e534:	9c01      	ldr	r4, [sp, #4]
 800e536:	eb04 050a 	add.w	r5, r4, sl
 800e53a:	fa5f f48a 	uxtb.w	r4, sl
 800e53e:	45a6      	cmp	lr, r4
 800e540:	f240 80a4 	bls.w	800e68c <getMagStats.constprop.28+0x1c0>
 800e544:	fb95 f4f8 	sdiv	r4, r5, r8
 800e548:	fb08 5414 	mls	r4, r8, r4, r5
 800e54c:	b2e4      	uxtb	r4, r4
 800e54e:	3404      	adds	r4, #4
 800e550:	eb09 04c4 	add.w	r4, r9, r4, lsl #3
 800e554:	8887      	ldrh	r7, [r0, #4]
 800e556:	f8b4 60e6 	ldrh.w	r6, [r4, #230]	; 0xe6
 800e55a:	f8b4 50e2 	ldrh.w	r5, [r4, #226]	; 0xe2
 800e55e:	f8b0 c000 	ldrh.w	ip, [r0]
 800e562:	f8b4 40e4 	ldrh.w	r4, [r4, #228]	; 0xe4
 800e566:	ed91 2a05 	vldr	s4, [r1, #20]
 800e56a:	edd1 2a02 	vldr	s5, [r1, #8]
 800e56e:	edd1 0a03 	vldr	s1, [r1, #12]
 800e572:	ed91 7a07 	vldr	s14, [r1, #28]
 800e576:	ed91 1a01 	vldr	s2, [r1, #4]
 800e57a:	edd1 4a04 	vldr	s9, [r1, #16]
 800e57e:	edd1 6a08 	vldr	s13, [r1, #32]
 800e582:	edd1 1a06 	vldr	s3, [r1, #24]
 800e586:	edd1 5a00 	vldr	s11, [r1]
 800e58a:	ed92 3a00 	vldr	s6, [r2]
 800e58e:	1bf6      	subs	r6, r6, r7
 800e590:	b236      	sxth	r6, r6
 800e592:	8847      	ldrh	r7, [r0, #2]
 800e594:	ee07 6a90 	vmov	s15, r6
 800e598:	eba5 050c 	sub.w	r5, r5, ip
 800e59c:	b22d      	sxth	r5, r5
 800e59e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5a2:	1be4      	subs	r4, r4, r7
 800e5a4:	ee06 5a10 	vmov	s12, r5
 800e5a8:	b224      	sxth	r4, r4
 800e5aa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800e5ae:	ee05 4a10 	vmov	s10, r4
 800e5b2:	ee27 2a82 	vmul.f32	s4, s15, s4
 800e5b6:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800e5ba:	ee67 2aa2 	vmul.f32	s5, s15, s5
 800e5be:	eea6 2a20 	vfma.f32	s4, s12, s1
 800e5c2:	f10b 0601 	add.w	r6, fp, #1
 800e5c6:	f10a 0a01 	add.w	sl, sl, #1
 800e5ca:	ee25 7a07 	vmul.f32	s14, s10, s14
 800e5ce:	eee5 2a01 	vfma.f32	s5, s10, s2
 800e5d2:	ee25 5a24 	vmul.f32	s10, s10, s9
 800e5d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e5da:	eebd 2ac2 	vcvt.s32.f32	s4, s4
 800e5de:	eefd 6ac5 	vcvt.s32.f32	s13, s10
 800e5e2:	eea6 7a21 	vfma.f32	s14, s12, s3
 800e5e6:	ee26 6a25 	vmul.f32	s12, s12, s11
 800e5ea:	ee16 7a90 	vmov	r7, s13
 800e5ee:	ee12 4a10 	vmov	r4, s4
 800e5f2:	eefd 2ae2 	vcvt.s32.f32	s5, s5
 800e5f6:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 800e5fa:	443c      	add	r4, r7
 800e5fc:	fb14 f704 	smulbb	r7, r4, r4
 800e600:	ee12 5a90 	vmov	r5, s5
 800e604:	ee16 4a10 	vmov	r4, s12
 800e608:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800e60c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e610:	4425      	add	r5, r4
 800e612:	fb15 7505 	smlabb	r5, r5, r5, r7
 800e616:	ee17 4a90 	vmov	r4, s15
 800e61a:	ee17 7a10 	vmov	r7, s14
 800e61e:	4427      	add	r7, r4
 800e620:	fb17 5407 	smlabb	r4, r7, r7, r5
 800e624:	ee07 4a90 	vmov	s15, r4
 800e628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e62c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800e630:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800e634:	ee17 4a10 	vmov	r4, s14
 800e638:	b224      	sxth	r4, r4
 800e63a:	ee07 4a10 	vmov	s14, r4
 800e63e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e642:	ee77 7a63 	vsub.f32	s15, s14, s7
 800e646:	ee33 7a07 	vadd.f32	s14, s6, s14
 800e64a:	eef0 7ae7 	vabs.f32	s15, s15
 800e64e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e652:	ed82 7a00 	vstr	s14, [r2]
 800e656:	ee17 4a90 	vmov	r4, s15
 800e65a:	b224      	sxth	r4, r4
 800e65c:	ee07 4a90 	vmov	s15, r4
 800e660:	fb04 f404 	mul.w	r4, r4, r4
 800e664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e668:	ee07 4a90 	vmov	s15, r4
 800e66c:	eeb4 4ac7 	vcmpe.f32	s8, s14
 800e670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e674:	ed93 7a00 	vldr	s14, [r3]
 800e678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e680:	bf48      	it	mi
 800e682:	fa5f fb86 	uxtbmi.w	fp, r6
 800e686:	edc3 7a00 	vstr	s15, [r3]
 800e68a:	e753      	b.n	800e534 <getMagStats.constprop.28+0x68>
 800e68c:	ee07 ea90 	vmov	s15, lr
 800e690:	ed93 7a00 	vldr	s14, [r3]
 800e694:	eddf 6a11 	vldr	s13, [pc, #68]	; 800e6dc <getMagStats.constprop.28+0x210>
 800e698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e69c:	4658      	mov	r0, fp
 800e69e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800e6a2:	eeb1 7ac6 	vsqrt.f32	s14, s12
 800e6a6:	ee20 7a07 	vmul.f32	s14, s0, s14
 800e6aa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6b2:	bfb8      	it	lt
 800e6b4:	eeb0 7a66 	vmovlt.f32	s14, s13
 800e6b8:	ed83 7a00 	vstr	s14, [r3]
 800e6bc:	ed92 7a00 	vldr	s14, [r2]
 800e6c0:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e6c4:	ee80 7a27 	vdiv.f32	s14, s0, s15
 800e6c8:	ed82 7a00 	vstr	s14, [r2]
 800e6cc:	b003      	add	sp, #12
 800e6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d2:	bf00      	nop
 800e6d4:	20001640 	.word	0x20001640
 800e6d8:	423c0000 	.word	0x423c0000
 800e6dc:	3f59999a 	.word	0x3f59999a

0800e6e0 <MEMS_solveEllipsoid.constprop.25>:
 800e6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e4:	ed2d 8b10 	vpush	{d8-d15}
 800e6e8:	4bb9      	ldr	r3, [pc, #740]	; (800e9d0 <MEMS_solveEllipsoid.constprop.25+0x2f0>)
 800e6ea:	2400      	movs	r4, #0
 800e6ec:	6014      	str	r4, [r2, #0]
 800e6ee:	f893 50e0 	ldrb.w	r5, [r3, #224]	; 0xe0
 800e6f2:	f893 60e1 	ldrb.w	r6, [r3, #225]	; 0xe1
 800e6f6:	f993 70e2 	ldrsb.w	r7, [r3, #226]	; 0xe2
 800e6fa:	f5ad 7d6f 	sub.w	sp, sp, #956	; 0x3bc
 800e6fe:	42b5      	cmp	r5, r6
 800e700:	9201      	str	r2, [sp, #4]
 800e702:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 800e706:	4604      	mov	r4, r0
 800e708:	910e      	str	r1, [sp, #56]	; 0x38
 800e70a:	f107 0701 	add.w	r7, r7, #1
 800e70e:	4698      	mov	r8, r3
 800e710:	d106      	bne.n	800e720 <MEMS_solveEllipsoid.constprop.25+0x40>
 800e712:	fb97 f9f5 	sdiv	r9, r7, r5
 800e716:	fb05 7919 	mls	r9, r5, r9, r7
 800e71a:	fa0f f989 	sxth.w	r9, r9
 800e71e:	e00d      	b.n	800e73c <MEMS_solveEllipsoid.constprop.25+0x5c>
 800e720:	eba7 0905 	sub.w	r9, r7, r5
 800e724:	fb99 f3f6 	sdiv	r3, r9, r6
 800e728:	fb06 9313 	mls	r3, r6, r3, r9
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	fa0f f983 	sxth.w	r9, r3
 800e732:	bfbc      	itt	lt
 800e734:	eb06 0903 	addlt.w	r9, r6, r3
 800e738:	fa0f f989 	sxthlt.w	r9, r9
 800e73c:	ed9f 8aa8 	vldr	s16, [pc, #672]	; 800e9e0 <MEMS_solveEllipsoid.constprop.25+0x300>
 800e740:	2200      	movs	r2, #0
 800e742:	eef0 8a48 	vmov.f32	s17, s16
 800e746:	eeb0 9a48 	vmov.f32	s18, s16
 800e74a:	b2d3      	uxtb	r3, r2
 800e74c:	429d      	cmp	r5, r3
 800e74e:	eb09 0102 	add.w	r1, r9, r2
 800e752:	d921      	bls.n	800e798 <MEMS_solveEllipsoid.constprop.25+0xb8>
 800e754:	fb91 f3f6 	sdiv	r3, r1, r6
 800e758:	fb06 1313 	mls	r3, r6, r3, r1
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	3304      	adds	r3, #4
 800e760:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800e764:	3201      	adds	r2, #1
 800e766:	f9b3 10e2 	ldrsh.w	r1, [r3, #226]	; 0xe2
 800e76a:	ee06 1a90 	vmov	s13, r1
 800e76e:	f9b3 10e4 	ldrsh.w	r1, [r3, #228]	; 0xe4
 800e772:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	; 0xe6
 800e776:	ee07 1a10 	vmov	s14, r1
 800e77a:	ee07 3a90 	vmov	s15, r3
 800e77e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e782:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e78a:	ee39 9a26 	vadd.f32	s18, s18, s13
 800e78e:	ee78 8a87 	vadd.f32	s17, s17, s14
 800e792:	ee38 8a27 	vadd.f32	s16, s16, s15
 800e796:	e7d8      	b.n	800e74a <MEMS_solveEllipsoid.constprop.25+0x6a>
 800e798:	ee07 5a90 	vmov	s15, r5
 800e79c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e7a0:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800e7a4:	eec9 7a87 	vdiv.f32	s15, s19, s14
 800e7a8:	2210      	movs	r2, #16
 800e7aa:	a82e      	add	r0, sp, #184	; 0xb8
 800e7ac:	2100      	movs	r1, #0
 800e7ae:	ee29 9a27 	vmul.f32	s18, s18, s15
 800e7b2:	ee67 8aa8 	vmul.f32	s17, s15, s17
 800e7b6:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e7ba:	ed8d 9a13 	vstr	s18, [sp, #76]	; 0x4c
 800e7be:	edcd 8a14 	vstr	s17, [sp, #80]	; 0x50
 800e7c2:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 800e7c6:	f005 f9a0 	bl	8013b0a <memset>
 800e7ca:	eddf 6a85 	vldr	s13, [pc, #532]	; 800e9e0 <MEMS_solveEllipsoid.constprop.25+0x300>
 800e7ce:	eef0 4a69 	vmov.f32	s9, s19
 800e7d2:	eeb0 4a66 	vmov.f32	s8, s13
 800e7d6:	eef0 7a66 	vmov.f32	s15, s13
 800e7da:	eef0 3a66 	vmov.f32	s7, s13
 800e7de:	eeb0 3a66 	vmov.f32	s6, s13
 800e7e2:	eeb0 ba66 	vmov.f32	s22, s13
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	b2d3      	uxtb	r3, r2
 800e7ea:	429d      	cmp	r5, r3
 800e7ec:	eb09 0102 	add.w	r1, r9, r2
 800e7f0:	d92d      	bls.n	800e84e <MEMS_solveEllipsoid.constprop.25+0x16e>
 800e7f2:	fb91 f3f6 	sdiv	r3, r1, r6
 800e7f6:	fb06 1313 	mls	r3, r6, r3, r1
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	3304      	adds	r3, #4
 800e7fe:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800e802:	3201      	adds	r2, #1
 800e804:	f9b3 10e2 	ldrsh.w	r1, [r3, #226]	; 0xe2
 800e808:	ee05 1a90 	vmov	s11, r1
 800e80c:	f9b3 10e4 	ldrsh.w	r1, [r3, #228]	; 0xe4
 800e810:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	; 0xe6
 800e814:	ee06 1a10 	vmov	s12, r1
 800e818:	ee07 3a10 	vmov	s14, r3
 800e81c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800e820:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800e824:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e828:	ee75 5ac9 	vsub.f32	s11, s11, s18
 800e82c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800e830:	ee37 7a48 	vsub.f32	s14, s14, s16
 800e834:	eea5 baa5 	vfma.f32	s22, s11, s11
 800e838:	eea5 3a86 	vfma.f32	s6, s11, s12
 800e83c:	eee6 7a06 	vfma.f32	s15, s12, s12
 800e840:	eee5 3a87 	vfma.f32	s7, s11, s14
 800e844:	eea6 4a07 	vfma.f32	s8, s12, s14
 800e848:	eee7 6a07 	vfma.f32	s13, s14, s14
 800e84c:	e7cc      	b.n	800e7e8 <MEMS_solveEllipsoid.constprop.25+0x108>
 800e84e:	ee23 6aa3 	vmul.f32	s12, s7, s7
 800e852:	ab28      	add	r3, sp, #160	; 0xa0
 800e854:	eea3 6a03 	vfma.f32	s12, s6, s6
 800e858:	ed8d ba28 	vstr	s22, [sp, #160]	; 0xa0
 800e85c:	eea4 6a04 	vfma.f32	s12, s8, s8
 800e860:	ed8d 3a29 	vstr	s6, [sp, #164]	; 0xa4
 800e864:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e86c:	edcd 3a2a 	vstr	s7, [sp, #168]	; 0xa8
 800e870:	edcd 7a2b 	vstr	s15, [sp, #172]	; 0xac
 800e874:	ed8d 4a2c 	vstr	s8, [sp, #176]	; 0xb0
 800e878:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 800e87c:	f000 80d2 	beq.w	800ea24 <MEMS_solveEllipsoid.constprop.25+0x344>
 800e880:	ee7b 9a26 	vadd.f32	s19, s22, s13
 800e884:	eddf aa53 	vldr	s21, [pc, #332]	; 800e9d4 <MEMS_solveEllipsoid.constprop.25+0x2f4>
 800e888:	eddf 5a53 	vldr	s11, [pc, #332]	; 800e9d8 <MEMS_solveEllipsoid.constprop.25+0x2f8>
 800e88c:	9302      	str	r3, [sp, #8]
 800e88e:	ee79 9aa7 	vadd.f32	s19, s19, s15
 800e892:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800e896:	ee69 9aaa 	vmul.f32	s19, s19, s21
 800e89a:	f04f 0900 	mov.w	r9, #0
 800e89e:	ee77 7ae9 	vsub.f32	s15, s15, s19
 800e8a2:	ee3b 7a69 	vsub.f32	s14, s22, s19
 800e8a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e8aa:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800e8ae:	eee7 7a07 	vfma.f32	s15, s14, s14
 800e8b2:	4648      	mov	r0, r9
 800e8b4:	eee6 7a05 	vfma.f32	s15, s12, s10
 800e8b8:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800e8bc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e8c0:	eeb1 aae7 	vsqrt.f32	s20, s15
 800e8c4:	ee84 7a8a 	vdiv.f32	s14, s9, s20
 800e8c8:	f100 0e01 	add.w	lr, r0, #1
 800e8cc:	fb00 f10e 	mul.w	r1, r0, lr
 800e8d0:	2302      	movs	r3, #2
 800e8d2:	fb91 f1f3 	sdiv	r1, r1, r3
 800e8d6:	eba9 0101 	sub.w	r1, r9, r1
 800e8da:	aab7      	add	r2, sp, #732	; 0x2dc
 800e8dc:	b2c9      	uxtb	r1, r1
 800e8de:	230c      	movs	r3, #12
 800e8e0:	fa5f fc80 	uxtb.w	ip, r0
 800e8e4:	9103      	str	r1, [sp, #12]
 800e8e6:	fb03 2000 	mla	r0, r3, r0, r2
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	fa5f fa82 	uxtb.w	sl, r2
 800e8f0:	9903      	ldr	r1, [sp, #12]
 800e8f2:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 800e8f6:	45d4      	cmp	ip, sl
 800e8f8:	4463      	add	r3, ip
 800e8fa:	448a      	add	sl, r1
 800e8fc:	fb02 2b02 	mla	fp, r2, r2, r2
 800e900:	d80e      	bhi.n	800e920 <MEMS_solveEllipsoid.constprop.25+0x240>
 800e902:	fa5f f38a 	uxtb.w	r3, sl
 800e906:	d111      	bne.n	800e92c <MEMS_solveEllipsoid.constprop.25+0x24c>
 800e908:	9902      	ldr	r1, [sp, #8]
 800e90a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e90e:	edd3 7a00 	vldr	s15, [r3]
 800e912:	ee77 7ae9 	vsub.f32	s15, s15, s19
 800e916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e91a:	edc0 7a00 	vstr	s15, [r0]
 800e91e:	e00e      	b.n	800e93e <MEMS_solveEllipsoid.constprop.25+0x25e>
 800e920:	2102      	movs	r1, #2
 800e922:	fb9b faf1 	sdiv	sl, fp, r1
 800e926:	eba3 030a 	sub.w	r3, r3, sl
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	9902      	ldr	r1, [sp, #8]
 800e92e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e932:	edd3 7a00 	vldr	s15, [r3]
 800e936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e93a:	edc0 7a00 	vstr	s15, [r0]
 800e93e:	3201      	adds	r2, #1
 800e940:	2a03      	cmp	r2, #3
 800e942:	f100 0004 	add.w	r0, r0, #4
 800e946:	d1d1      	bne.n	800e8ec <MEMS_solveEllipsoid.constprop.25+0x20c>
 800e948:	4670      	mov	r0, lr
 800e94a:	f109 0903 	add.w	r9, r9, #3
 800e94e:	2803      	cmp	r0, #3
 800e950:	fa5f f989 	uxtb.w	r9, r9
 800e954:	d1b8      	bne.n	800e8c8 <MEMS_solveEllipsoid.constprop.25+0x1e8>
 800e956:	ed9d 5abf 	vldr	s10, [sp, #764]	; 0x2fc
 800e95a:	eddd 6aba 	vldr	s13, [sp, #744]	; 0x2e8
 800e95e:	ed9d 4abc 	vldr	s8, [sp, #752]	; 0x2f0
 800e962:	ed9d 6abe 	vldr	s12, [sp, #760]	; 0x2f8
 800e966:	eddd 7abd 	vldr	s15, [sp, #756]	; 0x2f4
 800e96a:	eddd 5abb 	vldr	s11, [sp, #748]	; 0x2ec
 800e96e:	eddd 3ab8 	vldr	s7, [sp, #736]	; 0x2e0
 800e972:	ee26 0ac5 	vnmul.f32	s0, s13, s10
 800e976:	ee26 7a44 	vnmul.f32	s14, s12, s8
 800e97a:	eea4 0a27 	vfma.f32	s0, s8, s15
 800e97e:	eea5 7a85 	vfma.f32	s14, s11, s10
 800e982:	ed9d 4ab7 	vldr	s8, [sp, #732]	; 0x2dc
 800e986:	ed9d 5ab9 	vldr	s10, [sp, #740]	; 0x2e4
 800e98a:	ee67 7ae5 	vnmul.f32	s15, s15, s11
 800e98e:	ee20 0a23 	vmul.f32	s0, s0, s7
 800e992:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e996:	eea4 0a07 	vfma.f32	s0, s8, s14
 800e99a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e99e:	eea5 0a27 	vfma.f32	s0, s10, s15
 800e9a2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800e9a6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e9aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e9ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9b2:	d909      	bls.n	800e9c8 <MEMS_solveEllipsoid.constprop.25+0x2e8>
 800e9b4:	eeb4 0ae4 	vcmpe.f32	s0, s9
 800e9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9bc:	da14      	bge.n	800e9e8 <MEMS_solveEllipsoid.constprop.25+0x308>
 800e9be:	f007 fe9f 	bl	8016700 <acosf>
 800e9c2:	ee60 aa2a 	vmul.f32	s21, s0, s21
 800e9c6:	e011      	b.n	800e9ec <MEMS_solveEllipsoid.constprop.25+0x30c>
 800e9c8:	eddf aa04 	vldr	s21, [pc, #16]	; 800e9dc <MEMS_solveEllipsoid.constprop.25+0x2fc>
 800e9cc:	e00e      	b.n	800e9ec <MEMS_solveEllipsoid.constprop.25+0x30c>
 800e9ce:	bf00      	nop
 800e9d0:	20001640 	.word	0x20001640
 800e9d4:	3eaaaaab 	.word	0x3eaaaaab
 800e9d8:	3e2aaaab 	.word	0x3e2aaaab
 800e9dc:	3f860a92 	.word	0x3f860a92
 800e9e0:	00000000 	.word	0x00000000
 800e9e4:	40060a92 	.word	0x40060a92
 800e9e8:	ed5f aa03 	vldr	s21, [pc, #-12]	; 800e9e0 <MEMS_solveEllipsoid.constprop.25+0x300>
 800e9ec:	eeb0 0a6a 	vmov.f32	s0, s21
 800e9f0:	f007 fd6c 	bl	80164cc <cosf>
 800e9f4:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800e9f8:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 800e9e4 <MEMS_solveEllipsoid.constprop.25+0x304>
 800e9fc:	eeb0 ba69 	vmov.f32	s22, s19
 800ea00:	eea0 ba0a 	vfma.f32	s22, s0, s20
 800ea04:	ee3a 0aa7 	vadd.f32	s0, s21, s15
 800ea08:	f007 fd60 	bl	80164cc <cosf>
 800ea0c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800ea10:	eef0 6a69 	vmov.f32	s13, s19
 800ea14:	eeb0 7a4b 	vmov.f32	s14, s22
 800ea18:	eee0 6a0a 	vfma.f32	s13, s0, s20
 800ea1c:	ee99 7aa7 	vfnms.f32	s14, s19, s15
 800ea20:	ee77 7a66 	vsub.f32	s15, s14, s13
 800ea24:	eeb0 7acb 	vabs.f32	s14, s22
 800ea28:	eef0 7ae7 	vabs.f32	s15, s15
 800ea2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ea30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea34:	bfb4      	ite	lt
 800ea36:	eeb0 6a47 	vmovlt.f32	s12, s14
 800ea3a:	eeb0 6a67 	vmovge.f32	s12, s15
 800ea3e:	eef0 6ae6 	vabs.f32	s13, s13
 800ea42:	bf88      	it	hi
 800ea44:	eef0 7a47 	vmovhi.f32	s15, s14
 800ea48:	eef4 6ac6 	vcmpe.f32	s13, s12
 800ea4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea50:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ea54:	bfa8      	it	ge
 800ea56:	eeb0 6a66 	vmovge.f32	s12, s13
 800ea5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea5e:	bf88      	it	hi
 800ea60:	eef0 7a66 	vmovhi.f32	s15, s13
 800ea64:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800ea68:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea6c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800ea70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea74:	f300 853c 	bgt.w	800f4f0 <MEMS_solveEllipsoid.constprop.25+0xe10>
 800ea78:	2210      	movs	r2, #16
 800ea7a:	2100      	movs	r1, #0
 800ea7c:	a82e      	add	r0, sp, #184	; 0xb8
 800ea7e:	f005 f844 	bl	8013b0a <memset>
 800ea82:	2218      	movs	r2, #24
 800ea84:	2100      	movs	r1, #0
 800ea86:	a8e7      	add	r0, sp, #924	; 0x39c
 800ea88:	f005 f83f 	bl	8013b0a <memset>
 800ea8c:	4b7c      	ldr	r3, [pc, #496]	; (800ec80 <MEMS_solveEllipsoid.constprop.25+0x5a0>)
 800ea8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ea92:	ab10      	add	r3, sp, #64	; 0x40
 800ea94:	c303      	stmia	r3!, {r0, r1}
 800ea96:	42b5      	cmp	r5, r6
 800ea98:	801a      	strh	r2, [r3, #0]
 800ea9a:	d105      	bne.n	800eaa8 <MEMS_solveEllipsoid.constprop.25+0x3c8>
 800ea9c:	fb97 f1f5 	sdiv	r1, r7, r5
 800eaa0:	fb05 7711 	mls	r7, r5, r1, r7
 800eaa4:	b239      	sxth	r1, r7
 800eaa6:	e009      	b.n	800eabc <MEMS_solveEllipsoid.constprop.25+0x3dc>
 800eaa8:	1b7f      	subs	r7, r7, r5
 800eaaa:	fb97 f3f6 	sdiv	r3, r7, r6
 800eaae:	fb06 7713 	mls	r7, r6, r3, r7
 800eab2:	2f00      	cmp	r7, #0
 800eab4:	b239      	sxth	r1, r7
 800eab6:	bfbc      	itt	lt
 800eab8:	19bf      	addlt	r7, r7, r6
 800eaba:	b239      	sxthlt	r1, r7
 800eabc:	eddf 7a71 	vldr	s15, [pc, #452]	; 800ec84 <MEMS_solveEllipsoid.constprop.25+0x5a4>
 800eac0:	ed8d 8a0f 	vstr	s16, [sp, #60]	; 0x3c
 800eac4:	2000      	movs	r0, #0
 800eac6:	eef0 ba67 	vmov.f32	s23, s15
 800eaca:	eeb0 ca67 	vmov.f32	s24, s15
 800eace:	eef0 2a67 	vmov.f32	s5, s15
 800ead2:	eef0 fa67 	vmov.f32	s31, s15
 800ead6:	eeb0 2a67 	vmov.f32	s4, s15
 800eada:	eeb0 0a67 	vmov.f32	s0, s15
 800eade:	eef0 0a67 	vmov.f32	s1, s15
 800eae2:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
 800eae6:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 800eaea:	eef0 1a67 	vmov.f32	s3, s15
 800eaee:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
 800eaf2:	eef0 aa67 	vmov.f32	s21, s15
 800eaf6:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 800eafa:	eeb0 1a67 	vmov.f32	s2, s15
 800eafe:	edcd 7a08 	vstr	s15, [sp, #32]
 800eb02:	eeb0 aa67 	vmov.f32	s20, s15
 800eb06:	eeb0 ba67 	vmov.f32	s22, s15
 800eb0a:	edcd 7a07 	vstr	s15, [sp, #28]
 800eb0e:	edcd 7a06 	vstr	s15, [sp, #24]
 800eb12:	edcd 7a05 	vstr	s15, [sp, #20]
 800eb16:	eef0 9a67 	vmov.f32	s19, s15
 800eb1a:	eeb0 ea67 	vmov.f32	s28, s15
 800eb1e:	eef0 ea67 	vmov.f32	s29, s15
 800eb22:	eeb0 fa67 	vmov.f32	s30, s15
 800eb26:	eef0 da67 	vmov.f32	s27, s15
 800eb2a:	eeb0 da67 	vmov.f32	s26, s15
 800eb2e:	eef0 ca67 	vmov.f32	s25, s15
 800eb32:	edcd 7a04 	vstr	s15, [sp, #16]
 800eb36:	edcd 7a03 	vstr	s15, [sp, #12]
 800eb3a:	edcd 7a02 	vstr	s15, [sp, #8]
 800eb3e:	b2c3      	uxtb	r3, r0
 800eb40:	429d      	cmp	r5, r3
 800eb42:	eb01 0200 	add.w	r2, r1, r0
 800eb46:	f240 809f 	bls.w	800ec88 <MEMS_solveEllipsoid.constprop.25+0x5a8>
 800eb4a:	fb92 f3f6 	sdiv	r3, r2, r6
 800eb4e:	fb06 2313 	mls	r3, r6, r3, r2
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	3304      	adds	r3, #4
 800eb56:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800eb5a:	ed9d 8a02 	vldr	s16, [sp, #8]
 800eb5e:	f9b3 20e2 	ldrsh.w	r2, [r3, #226]	; 0xe2
 800eb62:	eddd 5a0f 	vldr	s11, [sp, #60]	; 0x3c
 800eb66:	ee07 2a10 	vmov	s14, r2
 800eb6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eb6e:	f9b3 20e4 	ldrsh.w	r2, [r3, #228]	; 0xe4
 800eb72:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	; 0xe6
 800eb76:	ee37 7a49 	vsub.f32	s14, s14, s18
 800eb7a:	ee06 3a90 	vmov	s13, r3
 800eb7e:	ee67 4a07 	vmul.f32	s9, s14, s14
 800eb82:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800eb86:	eea4 8aa4 	vfma.f32	s16, s9, s9
 800eb8a:	3001      	adds	r0, #1
 800eb8c:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800eb90:	ed8d 8a02 	vstr	s16, [sp, #8]
 800eb94:	ed9d 8a07 	vldr	s16, [sp, #28]
 800eb98:	eea7 8a24 	vfma.f32	s16, s14, s9
 800eb9c:	ee27 3a26 	vmul.f32	s6, s14, s13
 800eba0:	ee06 2a10 	vmov	s12, r2
 800eba4:	ed8d 8a07 	vstr	s16, [sp, #28]
 800eba8:	ed9d 8a05 	vldr	s16, [sp, #20]
 800ebac:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800ebb0:	eea3 8a24 	vfma.f32	s16, s6, s9
 800ebb4:	ee36 6a68 	vsub.f32	s12, s12, s17
 800ebb8:	ed8d 8a05 	vstr	s16, [sp, #20]
 800ebbc:	ee67 3a06 	vmul.f32	s7, s14, s12
 800ebc0:	ed9d 8a06 	vldr	s16, [sp, #24]
 800ebc4:	eea3 8aa4 	vfma.f32	s16, s7, s9
 800ebc8:	ee26 5a06 	vmul.f32	s10, s12, s12
 800ebcc:	ee26 4a26 	vmul.f32	s8, s12, s13
 800ebd0:	ed8d 8a06 	vstr	s16, [sp, #24]
 800ebd4:	ed9d 8a08 	vldr	s16, [sp, #32]
 800ebd8:	eea4 8a05 	vfma.f32	s16, s8, s10
 800ebdc:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800ebe0:	ed8d 8a08 	vstr	s16, [sp, #32]
 800ebe4:	ed9d 8a03 	vldr	s16, [sp, #12]
 800ebe8:	eea5 8a05 	vfma.f32	s16, s10, s10
 800ebec:	eea6 ba24 	vfma.f32	s22, s12, s9
 800ebf0:	ed8d 8a03 	vstr	s16, [sp, #12]
 800ebf4:	ed9d 8a09 	vldr	s16, [sp, #36]	; 0x24
 800ebf8:	eea3 8a85 	vfma.f32	s16, s7, s10
 800ebfc:	eea6 aaa4 	vfma.f32	s20, s13, s9
 800ec00:	ed8d 8a09 	vstr	s16, [sp, #36]	; 0x24
 800ec04:	ed9d 8a0a 	vldr	s16, [sp, #40]	; 0x28
 800ec08:	eea6 8a05 	vfma.f32	s16, s12, s10
 800ec0c:	eee4 9a24 	vfma.f32	s19, s8, s9
 800ec10:	ed8d 8a0a 	vstr	s16, [sp, #40]	; 0x28
 800ec14:	ed9d 8a0b 	vldr	s16, [sp, #44]	; 0x2c
 800ec18:	eea4 8a25 	vfma.f32	s16, s8, s11
 800ec1c:	eee4 ca04 	vfma.f32	s25, s8, s8
 800ec20:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 800ec24:	ed9d 8a04 	vldr	s16, [sp, #16]
 800ec28:	eea5 8aa5 	vfma.f32	s16, s11, s11
 800ec2c:	eee7 2a04 	vfma.f32	s5, s14, s8
 800ec30:	ed8d 8a04 	vstr	s16, [sp, #16]
 800ec34:	ed9d 8a0c 	vldr	s16, [sp, #48]	; 0x30
 800ec38:	eea3 8a25 	vfma.f32	s16, s6, s11
 800ec3c:	eea3 da03 	vfma.f32	s26, s6, s6
 800ec40:	eee3 daa3 	vfma.f32	s27, s7, s7
 800ec44:	eea3 1a05 	vfma.f32	s2, s6, s10
 800ec48:	eee7 aa05 	vfma.f32	s21, s14, s10
 800ec4c:	eee6 1a85 	vfma.f32	s3, s13, s10
 800ec50:	ed8d 8a0c 	vstr	s16, [sp, #48]	; 0x30
 800ec54:	eee3 0aa5 	vfma.f32	s1, s7, s11
 800ec58:	eea7 0a25 	vfma.f32	s0, s14, s11
 800ec5c:	eea6 2a25 	vfma.f32	s4, s12, s11
 800ec60:	eee6 faa5 	vfma.f32	s31, s13, s11
 800ec64:	ee3f fa24 	vadd.f32	s30, s30, s9
 800ec68:	ee3c ca04 	vadd.f32	s24, s24, s8
 800ec6c:	ee7b ba83 	vadd.f32	s23, s23, s6
 800ec70:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ec74:	ee7e ea85 	vadd.f32	s29, s29, s10
 800ec78:	ee3e ea25 	vadd.f32	s28, s28, s11
 800ec7c:	e75f      	b.n	800eb3e <MEMS_solveEllipsoid.constprop.25+0x45e>
 800ec7e:	bf00      	nop
 800ec80:	08018020 	.word	0x08018020
 800ec84:	00000000 	.word	0x00000000
 800ec88:	eddd 6a02 	vldr	s13, [sp, #8]
 800ec8c:	edcd cad2 	vstr	s25, [sp, #840]	; 0x348
 800ec90:	edcd 6ab7 	vstr	s13, [sp, #732]	; 0x2dc
 800ec94:	eddd 6a03 	vldr	s13, [sp, #12]
 800ec98:	ed8d dad9 	vstr	s26, [sp, #868]	; 0x364
 800ec9c:	edcd 6ac1 	vstr	s13, [sp, #772]	; 0x304
 800eca0:	eddd 6a04 	vldr	s13, [sp, #16]
 800eca4:	edcd dadf 	vstr	s27, [sp, #892]	; 0x37c
 800eca8:	edcd 6aca 	vstr	s13, [sp, #808]	; 0x328
 800ecac:	eddd 6a05 	vldr	s13, [sp, #20]
 800ecb0:	ed8d fae4 	vstr	s30, [sp, #912]	; 0x390
 800ecb4:	edcd 6abb 	vstr	s13, [sp, #748]	; 0x2ec
 800ecb8:	eddd 6a06 	vldr	s13, [sp, #24]
 800ecbc:	edcd eae8 	vstr	s29, [sp, #928]	; 0x3a0
 800ecc0:	edcd 6abc 	vstr	s13, [sp, #752]	; 0x2f0
 800ecc4:	eddd 6a07 	vldr	s13, [sp, #28]
 800ecc8:	ed8d eaeb 	vstr	s28, [sp, #940]	; 0x3ac
 800eccc:	edcd 6abd 	vstr	s13, [sp, #756]	; 0x2f4
 800ecd0:	eddd 6a08 	vldr	s13, [sp, #32]
 800ecd4:	edcd 9aba 	vstr	s19, [sp, #744]	; 0x2e8
 800ecd8:	edcd 6ac3 	vstr	s13, [sp, #780]	; 0x30c
 800ecdc:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 800ece0:	ed8d babe 	vstr	s22, [sp, #760]	; 0x2f8
 800ece4:	edcd 6ac5 	vstr	s13, [sp, #788]	; 0x314
 800ece8:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
 800ecec:	ed8d aabf 	vstr	s20, [sp, #764]	; 0x2fc
 800ecf0:	ee07 5a10 	vmov	s14, r5
 800ecf4:	edcd 6ac7 	vstr	s13, [sp, #796]	; 0x31c
 800ecf8:	eddd 6a0b 	vldr	s13, [sp, #44]	; 0x2c
 800ecfc:	ed8d 1ac4 	vstr	s2, [sp, #784]	; 0x310
 800ed00:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800ed04:	edcd aac6 	vstr	s21, [sp, #792]	; 0x318
 800ed08:	edcd 1ac8 	vstr	s3, [sp, #800]	; 0x320
 800ed0c:	edcd 6acb 	vstr	s13, [sp, #812]	; 0x32c
 800ed10:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
 800ed14:	edcd 0acd 	vstr	s1, [sp, #820]	; 0x334
 800ed18:	edcd 6acc 	vstr	s13, [sp, #816]	; 0x330
 800ed1c:	ed8d 0ace 	vstr	s0, [sp, #824]	; 0x338
 800ed20:	ed8d 2acf 	vstr	s4, [sp, #828]	; 0x33c
 800ed24:	edcd fad0 	vstr	s31, [sp, #832]	; 0x340
 800ed28:	edcd 2ad5 	vstr	s5, [sp, #852]	; 0x354
 800ed2c:	ed8d cad8 	vstr	s24, [sp, #864]	; 0x360
 800ed30:	edcd bade 	vstr	s23, [sp, #888]	; 0x378
 800ed34:	edcd 7ae3 	vstr	s15, [sp, #908]	; 0x38c
 800ed38:	ed8d fac0 	vstr	s30, [sp, #768]	; 0x300
 800ed3c:	2100      	movs	r1, #0
 800ed3e:	edcd eac9 	vstr	s29, [sp, #804]	; 0x324
 800ed42:	ed8d ead1 	vstr	s28, [sp, #836]	; 0x344
 800ed46:	edcd dab8 	vstr	s27, [sp, #736]	; 0x2e0
 800ed4a:	ed8d dab9 	vstr	s26, [sp, #740]	; 0x2e4
 800ed4e:	edcd cac2 	vstr	s25, [sp, #776]	; 0x308
 800ed52:	ed8d cae9 	vstr	s24, [sp, #932]	; 0x3a4
 800ed56:	edcd 7ae5 	vstr	s15, [sp, #916]	; 0x394
 800ed5a:	edcd bae6 	vstr	s23, [sp, #920]	; 0x398
 800ed5e:	ed8d bae0 	vstr	s22, [sp, #896]	; 0x380
 800ed62:	edcd aae1 	vstr	s21, [sp, #900]	; 0x384
 800ed66:	edcd 2ae2 	vstr	s5, [sp, #904]	; 0x388
 800ed6a:	ed8d aadb 	vstr	s20, [sp, #876]	; 0x36c
 800ed6e:	edcd 9ada 	vstr	s19, [sp, #872]	; 0x368
 800ed72:	edcd 2adc 	vstr	s5, [sp, #880]	; 0x370
 800ed76:	ed8d 0add 	vstr	s0, [sp, #884]	; 0x374
 800ed7a:	edcd 0ad3 	vstr	s1, [sp, #844]	; 0x34c
 800ed7e:	ed8d 1ad4 	vstr	s2, [sp, #848]	; 0x350
 800ed82:	edcd 1ad6 	vstr	s3, [sp, #856]	; 0x358
 800ed86:	ed8d 2ad7 	vstr	s4, [sp, #860]	; 0x35c
 800ed8a:	ed8d 7aed 	vstr	s14, [sp, #948]	; 0x3b4
 800ed8e:	2602      	movs	r6, #2
 800ed90:	250b      	movs	r5, #11
 800ed92:	1c48      	adds	r0, r1, #1
 800ed94:	fb05 f301 	mul.w	r3, r5, r1
 800ed98:	fb00 f201 	mul.w	r2, r0, r1
 800ed9c:	fb92 f2f6 	sdiv	r2, r2, r6
 800eda0:	1a9b      	subs	r3, r3, r2
 800eda2:	aab7      	add	r2, sp, #732	; 0x2dc
 800eda4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eda8:	aa10      	add	r2, sp, #64	; 0x40
 800edaa:	5c57      	ldrb	r7, [r2, r1]
 800edac:	ed93 7a00 	vldr	s14, [r3]
 800edb0:	aa10      	add	r2, sp, #64	; 0x40
 800edb2:	5c52      	ldrb	r2, [r2, r1]
 800edb4:	fb12 f207 	smulbb	r2, r2, r7
 800edb8:	ee07 2a90 	vmov	s15, r2
 800edbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edc0:	3101      	adds	r1, #1
 800edc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800edc6:	b2ca      	uxtb	r2, r1
 800edc8:	2a0a      	cmp	r2, #10
 800edca:	ece3 7a01 	vstmia	r3!, {s15}
 800edce:	d1ed      	bne.n	800edac <MEMS_solveEllipsoid.constprop.25+0x6cc>
 800edd0:	280a      	cmp	r0, #10
 800edd2:	4601      	mov	r1, r0
 800edd4:	d1dd      	bne.n	800ed92 <MEMS_solveEllipsoid.constprop.25+0x6b2>
 800edd6:	2250      	movs	r2, #80	; 0x50
 800edd8:	2100      	movs	r1, #0
 800edda:	a842      	add	r0, sp, #264	; 0x108
 800eddc:	f004 fe95 	bl	8013b0a <memset>
 800ede0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800ede4:	4ad1      	ldr	r2, [pc, #836]	; (800f12c <MEMS_solveEllipsoid.constprop.25+0xa4c>)
 800ede6:	9343      	str	r3, [sp, #268]	; 0x10c
 800ede8:	9344      	str	r3, [sp, #272]	; 0x110
 800edea:	9349      	str	r3, [sp, #292]	; 0x124
 800edec:	9251      	str	r2, [sp, #324]	; 0x144
 800edee:	9254      	str	r2, [sp, #336]	; 0x150
 800edf0:	9256      	str	r2, [sp, #344]	; 0x158
 800edf2:	a937      	add	r1, sp, #220	; 0xdc
 800edf4:	2306      	movs	r3, #6
 800edf6:	2602      	movs	r6, #2
 800edf8:	250b      	movs	r5, #11
 800edfa:	fb05 f203 	mul.w	r2, r5, r3
 800edfe:	f1c3 0008 	rsb	r0, r3, #8
 800ee02:	1c5f      	adds	r7, r3, #1
 800ee04:	4410      	add	r0, r2
 800ee06:	fb07 f303 	mul.w	r3, r7, r3
 800ee0a:	fb93 f3f6 	sdiv	r3, r3, r6
 800ee0e:	425b      	negs	r3, r3
 800ee10:	441a      	add	r2, r3
 800ee12:	4403      	add	r3, r0
 800ee14:	a8b7      	add	r0, sp, #732	; 0x2dc
 800ee16:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ee1a:	a8b8      	add	r0, sp, #736	; 0x2e0
 800ee1c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ee20:	f1a1 0c60 	sub.w	ip, r1, #96	; 0x60
 800ee24:	4608      	mov	r0, r1
 800ee26:	f852 eb04 	ldr.w	lr, [r2], #4
 800ee2a:	f84c eb04 	str.w	lr, [ip], #4
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	f840 ec60 	str.w	lr, [r0, #-96]
 800ee34:	f100 000c 	add.w	r0, r0, #12
 800ee38:	d1f5      	bne.n	800ee26 <MEMS_solveEllipsoid.constprop.25+0x746>
 800ee3a:	2f09      	cmp	r7, #9
 800ee3c:	f101 0110 	add.w	r1, r1, #16
 800ee40:	463b      	mov	r3, r7
 800ee42:	d1da      	bne.n	800edfa <MEMS_solveEllipsoid.constprop.25+0x71a>
 800ee44:	ae32      	add	r6, sp, #200	; 0xc8
 800ee46:	2240      	movs	r2, #64	; 0x40
 800ee48:	2100      	movs	r1, #0
 800ee4a:	4630      	mov	r0, r6
 800ee4c:	f004 fe5d 	bl	8013b0a <memset>
 800ee50:	aa36      	add	r2, sp, #216	; 0xd8
 800ee52:	ab3a      	add	r3, sp, #232	; 0xe8
 800ee54:	a916      	add	r1, sp, #88	; 0x58
 800ee56:	a81f      	add	r0, sp, #124	; 0x7c
 800ee58:	e9cd 6216 	strd	r6, r2, [sp, #88]	; 0x58
 800ee5c:	9318      	str	r3, [sp, #96]	; 0x60
 800ee5e:	f7fe fb57 	bl	800d510 <MEMS_INV3x3>
 800ee62:	ed9d 8aed 	vldr	s16, [sp, #948]	; 0x3b4
 800ee66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ee6a:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800ee6e:	4635      	mov	r5, r6
 800ee70:	2100      	movs	r1, #0
 800ee72:	f04f 0c18 	mov.w	ip, #24
 800ee76:	2702      	movs	r7, #2
 800ee78:	edc6 7a0f 	vstr	s15, [r6, #60]	; 0x3c
 800ee7c:	2600      	movs	r6, #0
 800ee7e:	ab57      	add	r3, sp, #348	; 0x15c
 800ee80:	4632      	mov	r2, r6
 800ee82:	fb0c 3e01 	mla	lr, ip, r1, r3
 800ee86:	4613      	mov	r3, r2
 800ee88:	3201      	adds	r2, #1
 800ee8a:	fb03 f302 	mul.w	r3, r3, r2
 800ee8e:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800f130 <MEMS_solveEllipsoid.constprop.25+0xa50>
 800ee92:	fb93 f3f7 	sdiv	r3, r3, r7
 800ee96:	1af3      	subs	r3, r6, r3
 800ee98:	009b      	lsls	r3, r3, #2
 800ee9a:	2000      	movs	r0, #0
 800ee9c:	eb00 0803 	add.w	r8, r0, r3
 800eea0:	f50d 7937 	add.w	r9, sp, #732	; 0x2dc
 800eea4:	44c8      	add	r8, r9
 800eea6:	eb05 0900 	add.w	r9, r5, r0
 800eeaa:	ed98 7a06 	vldr	s14, [r8, #24]
 800eeae:	edd9 6a00 	vldr	s13, [r9]
 800eeb2:	3004      	adds	r0, #4
 800eeb4:	2810      	cmp	r0, #16
 800eeb6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800eeba:	d1ef      	bne.n	800ee9c <MEMS_solveEllipsoid.constprop.25+0x7bc>
 800eebc:	2a06      	cmp	r2, #6
 800eebe:	ecee 7a01 	vstmia	lr!, {s15}
 800eec2:	f106 060a 	add.w	r6, r6, #10
 800eec6:	d1de      	bne.n	800ee86 <MEMS_solveEllipsoid.constprop.25+0x7a6>
 800eec8:	3101      	adds	r1, #1
 800eeca:	2904      	cmp	r1, #4
 800eecc:	f105 0510 	add.w	r5, r5, #16
 800eed0:	d1d4      	bne.n	800ee7c <MEMS_solveEllipsoid.constprop.25+0x79c>
 800eed2:	2500      	movs	r5, #0
 800eed4:	ae6f      	add	r6, sp, #444	; 0x1bc
 800eed6:	4629      	mov	r1, r5
 800eed8:	f50d 7eae 	add.w	lr, sp, #348	; 0x15c
 800eedc:	1c4f      	adds	r7, r1, #1
 800eede:	1868      	adds	r0, r5, r1
 800eee0:	fb01 f307 	mul.w	r3, r1, r7
 800eee4:	f04f 0c02 	mov.w	ip, #2
 800eee8:	fb93 f3fc 	sdiv	r3, r3, ip
 800eeec:	425b      	negs	r3, r3
 800eeee:	eb02 0803 	add.w	r8, r2, r3
 800eef2:	4403      	add	r3, r0
 800eef4:	f06f 0003 	mvn.w	r0, #3
 800eef8:	fb00 f101 	mul.w	r1, r0, r1
 800eefc:	a8b7      	add	r0, sp, #732	; 0x2dc
 800eefe:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800ef02:	3118      	adds	r1, #24
 800ef04:	fa03 f00c 	lsl.w	r0, r3, ip
 800ef08:	2300      	movs	r3, #0
 800ef0a:	eddf 7a89 	vldr	s15, [pc, #548]	; 800f130 <MEMS_solveEllipsoid.constprop.25+0xa50>
 800ef0e:	46c1      	mov	r9, r8
 800ef10:	f04f 0c00 	mov.w	ip, #0
 800ef14:	eb0e 0a03 	add.w	sl, lr, r3
 800ef18:	f04f 0b18 	mov.w	fp, #24
 800ef1c:	fb0b ab0c 	mla	fp, fp, ip, sl
 800ef20:	ed9b 7a00 	vldr	s14, [fp]
 800ef24:	ecf9 6a01 	vldmia	r9!, {s13}
 800ef28:	f10c 0c01 	add.w	ip, ip, #1
 800ef2c:	f1bc 0f04 	cmp.w	ip, #4
 800ef30:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ef34:	d1f0      	bne.n	800ef18 <MEMS_solveEllipsoid.constprop.25+0x838>
 800ef36:	eb00 0c03 	add.w	ip, r0, r3
 800ef3a:	f50d 7937 	add.w	r9, sp, #732	; 0x2dc
 800ef3e:	44cc      	add	ip, r9
 800ef40:	ed9c 7a00 	vldr	s14, [ip]
 800ef44:	f04f 0c06 	mov.w	ip, #6
 800ef48:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef4c:	eb06 0903 	add.w	r9, r6, r3
 800ef50:	fb0c 6c03 	mla	ip, ip, r3, r6
 800ef54:	3304      	adds	r3, #4
 800ef56:	4299      	cmp	r1, r3
 800ef58:	edc9 7a00 	vstr	s15, [r9]
 800ef5c:	edcc 7a00 	vstr	s15, [ip]
 800ef60:	d1d3      	bne.n	800ef0a <MEMS_solveEllipsoid.constprop.25+0x82a>
 800ef62:	2f06      	cmp	r7, #6
 800ef64:	f105 050a 	add.w	r5, r5, #10
 800ef68:	f106 061c 	add.w	r6, r6, #28
 800ef6c:	f10e 0e04 	add.w	lr, lr, #4
 800ef70:	f102 020a 	add.w	r2, r2, #10
 800ef74:	4639      	mov	r1, r7
 800ef76:	d1b1      	bne.n	800eedc <MEMS_solveEllipsoid.constprop.25+0x7fc>
 800ef78:	f04f 0e18 	mov.w	lr, #24
 800ef7c:	ab6f      	add	r3, sp, #444	; 0x1bc
 800ef7e:	4473      	add	r3, lr
 800ef80:	2600      	movs	r6, #0
 800ef82:	9303      	str	r3, [sp, #12]
 800ef84:	2002      	movs	r0, #2
 800ef86:	f106 0801 	add.w	r8, r6, #1
 800ef8a:	fb07 f506 	mul.w	r5, r7, r6
 800ef8e:	fb06 f308 	mul.w	r3, r6, r8
 800ef92:	fb93 f3f0 	sdiv	r3, r3, r0
 800ef96:	1aed      	subs	r5, r5, r3
 800ef98:	b2f3      	uxtb	r3, r6
 800ef9a:	9302      	str	r3, [sp, #8]
 800ef9c:	ab93      	add	r3, sp, #588	; 0x24c
 800ef9e:	00ad      	lsls	r5, r5, #2
 800efa0:	fb0e 3a06 	mla	sl, lr, r6, r3
 800efa4:	f50d 7cde 	add.w	ip, sp, #444	; 0x1bc
 800efa8:	eddf 7a61 	vldr	s15, [pc, #388]	; 800f130 <MEMS_solveEllipsoid.constprop.25+0xa50>
 800efac:	2300      	movs	r3, #0
 800efae:	fb07 6203 	mla	r2, r7, r3, r6
 800efb2:	9204      	str	r2, [sp, #16]
 800efb4:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800efb8:	aa42      	add	r2, sp, #264	; 0x108
 800efba:	fb0e cb03 	mla	fp, lr, r3, ip
 800efbe:	4491      	add	r9, r2
 800efc0:	9a02      	ldr	r2, [sp, #8]
 800efc2:	ed9b 7a00 	vldr	s14, [fp]
 800efc6:	fa5f fb83 	uxtb.w	fp, r3
 800efca:	455a      	cmp	r2, fp
 800efcc:	fb03 3103 	mla	r1, r3, r3, r3
 800efd0:	d804      	bhi.n	800efdc <MEMS_solveEllipsoid.constprop.25+0x8fc>
 800efd2:	edd9 6a00 	vldr	s13, [r9]
 800efd6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800efda:	e00a      	b.n	800eff2 <MEMS_solveEllipsoid.constprop.25+0x912>
 800efdc:	9a04      	ldr	r2, [sp, #16]
 800efde:	fb91 f1f0 	sdiv	r1, r1, r0
 800efe2:	1a52      	subs	r2, r2, r1
 800efe4:	a942      	add	r1, sp, #264	; 0x108
 800efe6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800efea:	edd2 6a00 	vldr	s13, [r2]
 800efee:	eee6 7a87 	vfma.f32	s15, s13, s14
 800eff2:	3301      	adds	r3, #1
 800eff4:	2b06      	cmp	r3, #6
 800eff6:	d1da      	bne.n	800efae <MEMS_solveEllipsoid.constprop.25+0x8ce>
 800eff8:	9b03      	ldr	r3, [sp, #12]
 800effa:	ecea 7a01 	vstmia	sl!, {s15}
 800effe:	f10c 0c04 	add.w	ip, ip, #4
 800f002:	4563      	cmp	r3, ip
 800f004:	d1d0      	bne.n	800efa8 <MEMS_solveEllipsoid.constprop.25+0x8c8>
 800f006:	f1b8 0f06 	cmp.w	r8, #6
 800f00a:	4646      	mov	r6, r8
 800f00c:	d1bb      	bne.n	800ef86 <MEMS_solveEllipsoid.constprop.25+0x8a6>
 800f00e:	a96f      	add	r1, sp, #444	; 0x1bc
 800f010:	4642      	mov	r2, r8
 800f012:	a893      	add	r0, sp, #588	; 0x24c
 800f014:	f7fe fb54 	bl	800d6c0 <Hessenberg_Form_Orthogonal>
 800f018:	4643      	mov	r3, r8
 800f01a:	a96f      	add	r1, sp, #444	; 0x1bc
 800f01c:	aa19      	add	r2, sp, #100	; 0x64
 800f01e:	a893      	add	r0, sp, #588	; 0x24c
 800f020:	f7fe fc96 	bl	800d950 <QR_Hessenberg_Matrix.constprop.27>
 800f024:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
 800f028:	a91a      	add	r1, sp, #104	; 0x68
 800f02a:	2201      	movs	r2, #1
 800f02c:	2300      	movs	r3, #0
 800f02e:	ecb1 7a01 	vldmia	r1!, {s14}
 800f032:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f03a:	b2d0      	uxtb	r0, r2
 800f03c:	f102 0201 	add.w	r2, r2, #1
 800f040:	bfc4      	itt	gt
 800f042:	eef0 7a47 	vmovgt.f32	s15, s14
 800f046:	4603      	movgt	r3, r0
 800f048:	2a06      	cmp	r2, #6
 800f04a:	d1f0      	bne.n	800f02e <MEMS_solveEllipsoid.constprop.25+0x94e>
 800f04c:	aa6f      	add	r2, sp, #444	; 0x1bc
 800f04e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800f052:	460a      	mov	r2, r1
 800f054:	6809      	ldr	r1, [r1, #0]
 800f056:	6992      	ldr	r2, [r2, #24]
 800f058:	9229      	str	r2, [sp, #164]	; 0xa4
 800f05a:	aa6f      	add	r2, sp, #444	; 0x1bc
 800f05c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f060:	a86f      	add	r0, sp, #444	; 0x1bc
 800f062:	9128      	str	r1, [sp, #160]	; 0xa0
 800f064:	a96f      	add	r1, sp, #444	; 0x1bc
 800f066:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800f06a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800f06e:	4613      	mov	r3, r2
 800f070:	6c89      	ldr	r1, [r1, #72]	; 0x48
 800f072:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f074:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800f076:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800f078:	912b      	str	r1, [sp, #172]	; 0xac
 800f07a:	932d      	str	r3, [sp, #180]	; 0xb4
 800f07c:	902a      	str	r0, [sp, #168]	; 0xa8
 800f07e:	922c      	str	r2, [sp, #176]	; 0xb0
 800f080:	a92e      	add	r1, sp, #184	; 0xb8
 800f082:	2300      	movs	r3, #0
 800f084:	ad5d      	add	r5, sp, #372	; 0x174
 800f086:	aa57      	add	r2, sp, #348	; 0x15c
 800f088:	eddf 7a29 	vldr	s15, [pc, #164]	; 800f130 <MEMS_solveEllipsoid.constprop.25+0xa50>
 800f08c:	441a      	add	r2, r3
 800f08e:	18ee      	adds	r6, r5, r3
 800f090:	a828      	add	r0, sp, #160	; 0xa0
 800f092:	ecf2 6a01 	vldmia	r2!, {s13}
 800f096:	ecb0 7a01 	vldmia	r0!, {s14}
 800f09a:	4296      	cmp	r6, r2
 800f09c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f0a0:	d1f7      	bne.n	800f092 <MEMS_solveEllipsoid.constprop.25+0x9b2>
 800f0a2:	3318      	adds	r3, #24
 800f0a4:	eef1 7a67 	vneg.f32	s15, s15
 800f0a8:	2b60      	cmp	r3, #96	; 0x60
 800f0aa:	ece1 7a01 	vstmia	r1!, {s15}
 800f0ae:	d1ea      	bne.n	800f086 <MEMS_solveEllipsoid.constprop.25+0x9a6>
 800f0b0:	eddd 7a2a 	vldr	s15, [sp, #168]	; 0xa8
 800f0b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0bc:	d509      	bpl.n	800f0d2 <MEMS_solveEllipsoid.constprop.25+0x9f2>
 800f0be:	ab28      	add	r3, sp, #160	; 0xa0
 800f0c0:	aa32      	add	r2, sp, #200	; 0xc8
 800f0c2:	edd3 7a00 	vldr	s15, [r3]
 800f0c6:	eef1 7a67 	vneg.f32	s15, s15
 800f0ca:	ece3 7a01 	vstmia	r3!, {s15}
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d1f7      	bne.n	800f0c2 <MEMS_solveEllipsoid.constprop.25+0x9e2>
 800f0d2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800f130 <MEMS_solveEllipsoid.constprop.25+0xa50>
 800f0d6:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 800f0da:	2500      	movs	r5, #0
 800f0dc:	f04f 0e02 	mov.w	lr, #2
 800f0e0:	f04f 0c0a 	mov.w	ip, #10
 800f0e4:	1c6f      	adds	r7, r5, #1
 800f0e6:	fb0c f005 	mul.w	r0, ip, r5
 800f0ea:	fb05 f307 	mul.w	r3, r5, r7
 800f0ee:	eddf 7a10 	vldr	s15, [pc, #64]	; 800f130 <MEMS_solveEllipsoid.constprop.25+0xa50>
 800f0f2:	fb93 f3fe 	sdiv	r3, r3, lr
 800f0f6:	1ac0      	subs	r0, r0, r3
 800f0f8:	0080      	lsls	r0, r0, #2
 800f0fa:	fa5f f985 	uxtb.w	r9, r5
 800f0fe:	ae28      	add	r6, sp, #160	; 0xa0
 800f100:	2300      	movs	r3, #0
 800f102:	f50d 7b37 	add.w	fp, sp, #732	; 0x2dc
 800f106:	eb00 0a83 	add.w	sl, r0, r3, lsl #2
 800f10a:	44da      	add	sl, fp
 800f10c:	fa5f fb83 	uxtb.w	fp, r3
 800f110:	45d9      	cmp	r9, fp
 800f112:	fb0c 5203 	mla	r2, ip, r3, r5
 800f116:	fb03 3103 	mla	r1, r3, r3, r3
 800f11a:	ecf6 6a01 	vldmia	r6!, {s13}
 800f11e:	d815      	bhi.n	800f14c <MEMS_solveEllipsoid.constprop.25+0xa6c>
 800f120:	ed9a 6a00 	vldr	s12, [sl]
 800f124:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f128:	e01a      	b.n	800f160 <MEMS_solveEllipsoid.constprop.25+0xa80>
 800f12a:	bf00      	nop
 800f12c:	be800000 	.word	0xbe800000
 800f130:	00000000 	.word	0x00000000
 800f134:	423c0000 	.word	0x423c0000
 800f138:	3eaaaaab 	.word	0x3eaaaaab
 800f13c:	3eb33333 	.word	0x3eb33333
 800f140:	3e99999a 	.word	0x3e99999a
 800f144:	3f333333 	.word	0x3f333333
 800f148:	3e4ccccd 	.word	0x3e4ccccd
 800f14c:	fb91 f1fe 	sdiv	r1, r1, lr
 800f150:	1a52      	subs	r2, r2, r1
 800f152:	a9ee      	add	r1, sp, #952	; 0x3b8
 800f154:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800f158:	ed12 6a37 	vldr	s12, [r2, #-220]	; 0xffffff24
 800f15c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f160:	3301      	adds	r3, #1
 800f162:	2b0a      	cmp	r3, #10
 800f164:	d1cd      	bne.n	800f102 <MEMS_solveEllipsoid.constprop.25+0xa22>
 800f166:	ecf8 6a01 	vldmia	r8!, {s13}
 800f16a:	2f0a      	cmp	r7, #10
 800f16c:	463d      	mov	r5, r7
 800f16e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f172:	d1b7      	bne.n	800f0e4 <MEMS_solveEllipsoid.constprop.25+0xa04>
 800f174:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800f178:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f17a:	9393      	str	r3, [sp, #588]	; 0x24c
 800f17c:	9b01      	ldr	r3, [sp, #4]
 800f17e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f180:	9294      	str	r2, [sp, #592]	; 0x250
 800f182:	9296      	str	r2, [sp, #600]	; 0x258
 800f184:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800f186:	9297      	str	r2, [sp, #604]	; 0x25c
 800f188:	f104 060c 	add.w	r6, r4, #12
 800f18c:	f104 0518 	add.w	r5, r4, #24
 800f190:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800f192:	9457      	str	r4, [sp, #348]	; 0x15c
 800f194:	a957      	add	r1, sp, #348	; 0x15c
 800f196:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800f19a:	eef1 6ae7 	vsqrt.f32	s13, s15
 800f19e:	a893      	add	r0, sp, #588	; 0x24c
 800f1a0:	9658      	str	r6, [sp, #352]	; 0x160
 800f1a2:	9559      	str	r5, [sp, #356]	; 0x164
 800f1a4:	929b      	str	r2, [sp, #620]	; 0x26c
 800f1a6:	eef1 7ae6 	vsqrt.f32	s15, s13
 800f1aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f1ae:	edc3 7a00 	vstr	s15, [r3]
 800f1b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800f1b4:	9395      	str	r3, [sp, #596]	; 0x254
 800f1b6:	9399      	str	r3, [sp, #612]	; 0x264
 800f1b8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800f1ba:	9398      	str	r3, [sp, #608]	; 0x260
 800f1bc:	939a      	str	r3, [sp, #616]	; 0x268
 800f1be:	f7fe f9a7 	bl	800d510 <MEMS_INV3x3>
 800f1c2:	2800      	cmp	r0, #0
 800f1c4:	f000 8194 	beq.w	800f4f0 <MEMS_solveEllipsoid.constprop.25+0xe10>
 800f1c8:	eddd 7a2f 	vldr	s15, [sp, #188]	; 0xbc
 800f1cc:	ed94 6a04 	vldr	s12, [r4, #16]
 800f1d0:	ed9d 5a2e 	vldr	s10, [sp, #184]	; 0xb8
 800f1d4:	edd4 1a03 	vldr	s3, [r4, #12]
 800f1d8:	edd4 6a01 	vldr	s13, [r4, #4]
 800f1dc:	ed94 2a00 	vldr	s4, [r4]
 800f1e0:	eddd 5a30 	vldr	s11, [sp, #192]	; 0xc0
 800f1e4:	edd4 2a05 	vldr	s5, [r4, #20]
 800f1e8:	ed94 3a02 	vldr	s6, [r4, #8]
 800f1ec:	ed94 7a07 	vldr	s14, [r4, #28]
 800f1f0:	edd4 3a06 	vldr	s7, [r4, #24]
 800f1f4:	ed94 4a08 	vldr	s8, [r4, #32]
 800f1f8:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 800f1fc:	9457      	str	r4, [sp, #348]	; 0x15c
 800f1fe:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f202:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f206:	eea1 6a85 	vfma.f32	s12, s3, s10
 800f20a:	2203      	movs	r2, #3
 800f20c:	a9b7      	add	r1, sp, #732	; 0x2dc
 800f20e:	eee2 6a05 	vfma.f32	s13, s4, s10
 800f212:	a893      	add	r0, sp, #588	; 0x24c
 800f214:	9658      	str	r6, [sp, #352]	; 0x160
 800f216:	eea2 6aa5 	vfma.f32	s12, s5, s11
 800f21a:	9559      	str	r5, [sp, #356]	; 0x164
 800f21c:	eee3 6a25 	vfma.f32	s13, s6, s11
 800f220:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f224:	eeb1 6a46 	vneg.f32	s12, s12
 800f228:	eea3 7a85 	vfma.f32	s14, s7, s10
 800f22c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f230:	eef1 6a66 	vneg.f32	s13, s13
 800f234:	eee6 7a85 	vfma.f32	s15, s13, s10
 800f238:	eea4 7a25 	vfma.f32	s14, s8, s11
 800f23c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800f240:	eeb1 7a47 	vneg.f32	s14, s14
 800f244:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f248:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 800f24c:	eef0 7ae7 	vabs.f32	s15, s15
 800f250:	ed8d 6a43 	vstr	s12, [sp, #268]	; 0x10c
 800f254:	eeb1 8ae7 	vsqrt.f32	s16, s15
 800f258:	ed8d 7a44 	vstr	s14, [sp, #272]	; 0x110
 800f25c:	f7fe fa30 	bl	800d6c0 <Hessenberg_Form_Orthogonal>
 800f260:	a9b7      	add	r1, sp, #732	; 0x2dc
 800f262:	a893      	add	r0, sp, #588	; 0x24c
 800f264:	aa6f      	add	r2, sp, #444	; 0x1bc
 800f266:	2303      	movs	r3, #3
 800f268:	f7fe fb72 	bl	800d950 <QR_Hessenberg_Matrix.constprop.27>
 800f26c:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 800f270:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800f274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f278:	d519      	bpl.n	800f2ae <MEMS_solveEllipsoid.constprop.25+0xbce>
 800f27a:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 800f27e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f286:	d512      	bpl.n	800f2ae <MEMS_solveEllipsoid.constprop.25+0xbce>
 800f288:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 800f28c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f294:	d50b      	bpl.n	800f2ae <MEMS_solveEllipsoid.constprop.25+0xbce>
 800f296:	eef1 6a66 	vneg.f32	s13, s13
 800f29a:	eeb1 7a47 	vneg.f32	s14, s14
 800f29e:	eef1 7a67 	vneg.f32	s15, s15
 800f2a2:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 800f2a6:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 800f2aa:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 800f2ae:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 800f2b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ba:	f100 8119 	bmi.w	800f4f0 <MEMS_solveEllipsoid.constprop.25+0xe10>
 800f2be:	eddd 7a70 	vldr	s15, [sp, #448]	; 0x1c0
 800f2c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ca:	f100 8111 	bmi.w	800f4f0 <MEMS_solveEllipsoid.constprop.25+0xe10>
 800f2ce:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 800f2d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2da:	f100 8109 	bmi.w	800f4f0 <MEMS_solveEllipsoid.constprop.25+0xe10>
 800f2de:	aa72      	add	r2, sp, #456	; 0x1c8
 800f2e0:	ab6f      	add	r3, sp, #444	; 0x1bc
 800f2e2:	ed93 7a00 	vldr	s14, [r3]
 800f2e6:	eef1 7ac7 	vsqrt.f32	s15, s14
 800f2ea:	ece3 7a01 	vstmia	r3!, {s15}
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d1f7      	bne.n	800f2e2 <MEMS_solveEllipsoid.constprop.25+0xc02>
 800f2f2:	f04f 0b00 	mov.w	fp, #0
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	46da      	mov	sl, fp
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	a9b7      	add	r1, sp, #732	; 0x2dc
 800f2fe:	f50d 7cae 	add.w	ip, sp, #348	; 0x15c
 800f302:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 800f306:	460e      	mov	r6, r1
 800f308:	441a      	add	r2, r3
 800f30a:	4605      	mov	r5, r0
 800f30c:	f101 0e0c 	add.w	lr, r1, #12
 800f310:	f8c2 b000 	str.w	fp, [r2]
 800f314:	46b1      	mov	r9, r6
 800f316:	460f      	mov	r7, r1
 800f318:	f50d 78de 	add.w	r8, sp, #444	; 0x1bc
 800f31c:	ecf7 7a01 	vldmia	r7!, {s15}
 800f320:	ecb8 7a01 	vldmia	r8!, {s14}
 800f324:	ecb9 6a01 	vldmia	r9!, {s12}
 800f328:	edd2 6a00 	vldr	s13, [r2]
 800f32c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f330:	45be      	cmp	lr, r7
 800f332:	eee7 6a86 	vfma.f32	s13, s15, s12
 800f336:	edc2 6a00 	vstr	s13, [r2]
 800f33a:	d1ef      	bne.n	800f31c <MEMS_solveEllipsoid.constprop.25+0xc3c>
 800f33c:	f85c 7025 	ldr.w	r7, [ip, r5, lsl #2]
 800f340:	3501      	adds	r5, #1
 800f342:	fa5f f885 	uxtb.w	r8, r5
 800f346:	441f      	add	r7, r3
 800f348:	f1b8 0f03 	cmp.w	r8, #3
 800f34c:	f102 0204 	add.w	r2, r2, #4
 800f350:	f106 060c 	add.w	r6, r6, #12
 800f354:	edc7 6a00 	vstr	s13, [r7]
 800f358:	d1da      	bne.n	800f310 <MEMS_solveEllipsoid.constprop.25+0xc30>
 800f35a:	3304      	adds	r3, #4
 800f35c:	2b0c      	cmp	r3, #12
 800f35e:	f100 0001 	add.w	r0, r0, #1
 800f362:	4671      	mov	r1, lr
 800f364:	d1cd      	bne.n	800f302 <MEMS_solveEllipsoid.constprop.25+0xc22>
 800f366:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800f36a:	ed5f 3a8e 	vldr	s7, [pc, #-568]	; 800f134 <MEMS_solveEllipsoid.constprop.25+0xa54>
 800f36e:	ed94 7a08 	vldr	s14, [r4, #32]
 800f372:	edd4 4a00 	vldr	s9, [r4]
 800f376:	ed94 5a03 	vldr	s10, [r4, #12]
 800f37a:	edd4 5a04 	vldr	s11, [r4, #16]
 800f37e:	ed94 6a06 	vldr	s12, [r4, #24]
 800f382:	edd4 6a07 	vldr	s13, [r4, #28]
 800f386:	9b01      	ldr	r3, [sp, #4]
 800f388:	f8c4 a004 	str.w	sl, [r4, #4]
 800f38c:	ee28 4a27 	vmul.f32	s8, s16, s15
 800f390:	f8c4 a008 	str.w	sl, [r4, #8]
 800f394:	eec3 7a84 	vdiv.f32	s15, s7, s8
 800f398:	f8c4 a014 	str.w	sl, [r4, #20]
 800f39c:	ed1f 2a9a 	vldr	s4, [pc, #-616]	; 800f138 <MEMS_solveEllipsoid.constprop.25+0xa58>
 800f3a0:	ed5f 1a9a 	vldr	s3, [pc, #-616]	; 800f13c <MEMS_solveEllipsoid.constprop.25+0xa5c>
 800f3a4:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800f3a8:	ee25 5a27 	vmul.f32	s10, s10, s15
 800f3ac:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800f3b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 800f3b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f3b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3bc:	edc4 4a00 	vstr	s9, [r4]
 800f3c0:	edc4 5a04 	vstr	s11, [r4, #16]
 800f3c4:	ed84 5a03 	vstr	s10, [r4, #12]
 800f3c8:	ed84 6a06 	vstr	s12, [r4, #24]
 800f3cc:	edc4 6a07 	vstr	s13, [r4, #28]
 800f3d0:	edc4 7a08 	vstr	s15, [r4, #32]
 800f3d4:	edd3 7a00 	vldr	s15, [r3]
 800f3d8:	eec7 2a88 	vdiv.f32	s5, s15, s16
 800f3dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f3e0:	ee77 7a62 	vsub.f32	s15, s14, s5
 800f3e4:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 800f3e8:	edc3 7a00 	vstr	s15, [r3]
 800f3ec:	ed94 6a00 	vldr	s12, [r4]
 800f3f0:	ed94 3a04 	vldr	s6, [r4, #16]
 800f3f4:	edd4 3a08 	vldr	s7, [r4, #32]
 800f3f8:	ee76 7a03 	vadd.f32	s15, s12, s6
 800f3fc:	ee76 4a47 	vsub.f32	s9, s12, s14
 800f400:	ee33 5a47 	vsub.f32	s10, s6, s14
 800f404:	ee33 4a66 	vsub.f32	s8, s6, s13
 800f408:	ee76 5a66 	vsub.f32	s11, s12, s13
 800f40c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800f410:	eef0 4ae4 	vabs.f32	s9, s9
 800f414:	eeb0 5ac5 	vabs.f32	s10, s10
 800f418:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800f41c:	eef0 5ae5 	vabs.f32	s11, s11
 800f420:	ee67 7a82 	vmul.f32	s15, s15, s4
 800f424:	eeb0 4ac4 	vabs.f32	s8, s8
 800f428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f42c:	ee73 6ae6 	vsub.f32	s13, s7, s13
 800f430:	eeb4 4ae5 	vcmpe.f32	s8, s11
 800f434:	bfb8      	it	lt
 800f436:	eeb0 5a64 	vmovlt.f32	s10, s9
 800f43a:	ee36 2a67 	vsub.f32	s4, s12, s15
 800f43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f442:	ee73 4a67 	vsub.f32	s9, s6, s15
 800f446:	bfb8      	it	lt
 800f448:	eeb0 4a65 	vmovlt.f32	s8, s11
 800f44c:	eef0 6ae6 	vabs.f32	s13, s13
 800f450:	eef4 6ac4 	vcmpe.f32	s13, s8
 800f454:	eef0 4ae4 	vabs.f32	s9, s9
 800f458:	eeb0 2ac2 	vabs.f32	s4, s4
 800f45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f460:	ee73 5ae7 	vsub.f32	s11, s7, s15
 800f464:	eef4 4ac2 	vcmpe.f32	s9, s4
 800f468:	bfb8      	it	lt
 800f46a:	eef0 6a44 	vmovlt.f32	s13, s8
 800f46e:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800f472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f476:	bfb8      	it	lt
 800f478:	eef0 4a42 	vmovlt.f32	s9, s4
 800f47c:	eef0 5ae5 	vabs.f32	s11, s11
 800f480:	eef4 5ae4 	vcmpe.f32	s11, s9
 800f484:	eeb0 7ac7 	vabs.f32	s14, s14
 800f488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f48c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800f490:	bfb8      	it	lt
 800f492:	eef0 5a64 	vmovlt.f32	s11, s9
 800f496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f49a:	bfb8      	it	lt
 800f49c:	eeb0 7a45 	vmovlt.f32	s14, s10
 800f4a0:	eeb4 7ae1 	vcmpe.f32	s14, s3
 800f4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4a8:	d524      	bpl.n	800f4f4 <MEMS_solveEllipsoid.constprop.25+0xe14>
 800f4aa:	ed1f 7adb 	vldr	s14, [pc, #-876]	; 800f140 <MEMS_solveEllipsoid.constprop.25+0xa60>
 800f4ae:	eef4 5ac7 	vcmpe.f32	s11, s14
 800f4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b6:	bf4c      	ite	mi
 800f4b8:	2301      	movmi	r3, #1
 800f4ba:	2300      	movpl	r3, #0
 800f4bc:	ed1f 7adf 	vldr	s14, [pc, #-892]	; 800f144 <MEMS_solveEllipsoid.constprop.25+0xa64>
 800f4c0:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c8:	d516      	bpl.n	800f4f8 <MEMS_solveEllipsoid.constprop.25+0xe18>
 800f4ca:	ed1f 7ae1 	vldr	s14, [pc, #-900]	; 800f148 <MEMS_solveEllipsoid.constprop.25+0xa68>
 800f4ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f4d2:	eef4 5ac7 	vcmpe.f32	s11, s14
 800f4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4da:	bf4c      	ite	mi
 800f4dc:	2201      	movmi	r2, #1
 800f4de:	2200      	movpl	r2, #0
 800f4e0:	edd4 6a06 	vldr	s13, [r4, #24]
 800f4e4:	ed94 7a03 	vldr	s14, [r4, #12]
 800f4e8:	edd4 5a07 	vldr	s11, [r4, #28]
 800f4ec:	b932      	cbnz	r2, 800f4fc <MEMS_solveEllipsoid.constprop.25+0xe1c>
 800f4ee:	bbbb      	cbnz	r3, 800f560 <MEMS_solveEllipsoid.constprop.25+0xe80>
 800f4f0:	2000      	movs	r0, #0
 800f4f2:	e07c      	b.n	800f5ee <MEMS_solveEllipsoid.constprop.25+0xf0e>
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	e7e1      	b.n	800f4bc <MEMS_solveEllipsoid.constprop.25+0xddc>
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	e7f1      	b.n	800f4e0 <MEMS_solveEllipsoid.constprop.25+0xe00>
 800f4fc:	eeb4 6ac3 	vcmpe.f32	s12, s6
 800f500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f504:	bf88      	it	hi
 800f506:	eeb0 6a43 	vmovhi.f32	s12, s6
 800f50a:	eef4 3ac6 	vcmpe.f32	s7, s12
 800f50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f512:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800f608 <MEMS_solveEllipsoid.constprop.25+0xf28>
 800f516:	bf98      	it	ls
 800f518:	eeb0 6a63 	vmovls.f32	s12, s7
 800f51c:	eeb4 6ac5 	vcmpe.f32	s12, s10
 800f520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f524:	dde3      	ble.n	800f4ee <MEMS_solveEllipsoid.constprop.25+0xe0e>
 800f526:	eeb0 6ae5 	vabs.f32	s12, s11
 800f52a:	eeb0 7ac7 	vabs.f32	s14, s14
 800f52e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800f532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f536:	bfb8      	it	lt
 800f538:	eeb0 7a46 	vmovlt.f32	s14, s12
 800f53c:	eef0 6ae6 	vabs.f32	s13, s13
 800f540:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800f60c <MEMS_solveEllipsoid.constprop.25+0xf2c>
 800f544:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f54c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f550:	bfb8      	it	lt
 800f552:	eeb0 7a66 	vmovlt.f32	s14, s13
 800f556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f55e:	d5c6      	bpl.n	800f4ee <MEMS_solveEllipsoid.constprop.25+0xe0e>
 800f560:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f564:	eef4 2ae7 	vcmpe.f32	s5, s15
 800f568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f56c:	dcc0      	bgt.n	800f4f0 <MEMS_solveEllipsoid.constprop.25+0xe10>
 800f56e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f570:	ed9f 8a27 	vldr	s16, [pc, #156]	; 800f610 <MEMS_solveEllipsoid.constprop.25+0xf30>
 800f574:	a722      	add	r7, pc, #136	; (adr r7, 800f600 <MEMS_solveEllipsoid.constprop.25+0xf20>)
 800f576:	e9d7 6700 	ldrd	r6, r7, [r7]
 800f57a:	f1a3 0a02 	sub.w	sl, r3, #2
 800f57e:	f104 0904 	add.w	r9, r4, #4
 800f582:	2500      	movs	r5, #0
 800f584:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800f588:	44a0      	add	r8, r4
 800f58a:	f8d8 0000 	ldr.w	r0, [r8]
 800f58e:	f7f0 ffe3 	bl	8000558 <__aeabi_f2d>
 800f592:	4632      	mov	r2, r6
 800f594:	463b      	mov	r3, r7
 800f596:	f7f1 f837 	bl	8000608 <__aeabi_dmul>
 800f59a:	f7f1 fae5 	bl	8000b68 <__aeabi_d2iz>
 800f59e:	ee07 0a90 	vmov	s15, r0
 800f5a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f5a6:	ee67 7a88 	vmul.f32	s15, s15, s16
 800f5aa:	ece8 7a01 	vstmia	r8!, {s15}
 800f5ae:	45c8      	cmp	r8, r9
 800f5b0:	d1eb      	bne.n	800f58a <MEMS_solveEllipsoid.constprop.25+0xeaa>
 800f5b2:	ab42      	add	r3, sp, #264	; 0x108
 800f5b4:	195a      	adds	r2, r3, r5
 800f5b6:	ab13      	add	r3, sp, #76	; 0x4c
 800f5b8:	442b      	add	r3, r5
 800f5ba:	edd3 7a00 	vldr	s15, [r3]
 800f5be:	ed92 0a00 	vldr	s0, [r2]
 800f5c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f5c6:	f006 ffc1 	bl	801654c <roundf>
 800f5ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f5ce:	3504      	adds	r5, #4
 800f5d0:	ee10 3a10 	vmov	r3, s0
 800f5d4:	2d0c      	cmp	r5, #12
 800f5d6:	f108 0910 	add.w	r9, r8, #16
 800f5da:	f82a 3f02 	strh.w	r3, [sl, #2]!
 800f5de:	d1d1      	bne.n	800f584 <MEMS_solveEllipsoid.constprop.25+0xea4>
 800f5e0:	68e1      	ldr	r1, [r4, #12]
 800f5e2:	69a2      	ldr	r2, [r4, #24]
 800f5e4:	69e3      	ldr	r3, [r4, #28]
 800f5e6:	6061      	str	r1, [r4, #4]
 800f5e8:	60a2      	str	r2, [r4, #8]
 800f5ea:	6163      	str	r3, [r4, #20]
 800f5ec:	2001      	movs	r0, #1
 800f5ee:	f50d 7d6f 	add.w	sp, sp, #956	; 0x3bc
 800f5f2:	ecbd 8b10 	vpop	{d8-d15}
 800f5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5fa:	bf00      	nop
 800f5fc:	f3af 8000 	nop.w
 800f600:	00000000 	.word	0x00000000
 800f604:	412e8480 	.word	0x412e8480
 800f608:	3ecccccd 	.word	0x3ecccccd
 800f60c:	3f19999a 	.word	0x3f19999a
 800f610:	358637bd 	.word	0x358637bd

0800f614 <MEMS_compareCalScore>:
 800f614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f618:	7904      	ldrb	r4, [r0, #4]
 800f61a:	790e      	ldrb	r6, [r1, #4]
 800f61c:	6803      	ldr	r3, [r0, #0]
 800f61e:	680d      	ldr	r5, [r1, #0]
 800f620:	42b4      	cmp	r4, r6
 800f622:	bf8c      	ite	hi
 800f624:	ee07 4a90 	vmovhi	s15, r4
 800f628:	ee07 6a90 	vmovls	s15, r6
 800f62c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f630:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f634:	ee20 7a07 	vmul.f32	s14, s0, s14
 800f638:	1ad3      	subs	r3, r2, r3
 800f63a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f642:	b083      	sub	sp, #12
 800f644:	eba2 0205 	sub.w	r2, r2, r5
 800f648:	f100 8103 	bmi.w	800f852 <MEMS_compareCalScore+0x23e>
 800f64c:	eef0 7a0c 	vmov.f32	s15, #12	; 0x40600000  3.5
 800f650:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f658:	eeb1 7a0e 	vmov.f32	s14, #30	; 0x40f00000  7.5
 800f65c:	bf48      	it	mi
 800f65e:	eeb0 7a67 	vmovmi.f32	s14, s15
 800f662:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 800f666:	f9b1 e006 	ldrsh.w	lr, [r1, #6]
 800f66a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 800f66e:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 800f672:	eba7 090e 	sub.w	r9, r7, lr
 800f676:	eba5 080c 	sub.w	r8, r5, ip
 800f67a:	ea89 7be9 	eor.w	fp, r9, r9, asr #31
 800f67e:	ea88 7ae8 	eor.w	sl, r8, r8, asr #31
 800f682:	ebab 7be9 	sub.w	fp, fp, r9, asr #31
 800f686:	ebaa 7ae8 	sub.w	sl, sl, r8, asr #31
 800f68a:	45d3      	cmp	fp, sl
 800f68c:	f340 80d4 	ble.w	800f838 <MEMS_compareCalScore+0x224>
 800f690:	b2bf      	uxth	r7, r7
 800f692:	fa1f fe8e 	uxth.w	lr, lr
 800f696:	f1b9 0f00 	cmp.w	r9, #0
 800f69a:	bfb4      	ite	lt
 800f69c:	ebae 0707 	sublt.w	r7, lr, r7
 800f6a0:	eba7 070e 	subge.w	r7, r7, lr
 800f6a4:	b23d      	sxth	r5, r7
 800f6a6:	9501      	str	r5, [sp, #4]
 800f6a8:	f9b0 800a 	ldrsh.w	r8, [r0, #10]
 800f6ac:	f9b1 700a 	ldrsh.w	r7, [r1, #10]
 800f6b0:	eba8 0c07 	sub.w	ip, r8, r7
 800f6b4:	ea8c 7eec 	eor.w	lr, ip, ip, asr #31
 800f6b8:	ebae 7eec 	sub.w	lr, lr, ip, asr #31
 800f6bc:	4575      	cmp	r5, lr
 800f6be:	dc09      	bgt.n	800f6d4 <MEMS_compareCalScore+0xc0>
 800f6c0:	fa1f f588 	uxth.w	r5, r8
 800f6c4:	b2bf      	uxth	r7, r7
 800f6c6:	f1bc 0f00 	cmp.w	ip, #0
 800f6ca:	bfb4      	ite	lt
 800f6cc:	1b7d      	sublt	r5, r7, r5
 800f6ce:	1bed      	subge	r5, r5, r7
 800f6d0:	b22d      	sxth	r5, r5
 800f6d2:	9501      	str	r5, [sp, #4]
 800f6d4:	f8b0 900c 	ldrh.w	r9, [r0, #12]
 800f6d8:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 800f6dc:	f8b0 800e 	ldrh.w	r8, [r0, #14]
 800f6e0:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
 800f6e4:	eba9 070e 	sub.w	r7, r9, lr
 800f6e8:	eba8 050c 	sub.w	r5, r8, ip
 800f6ec:	ea87 7be7 	eor.w	fp, r7, r7, asr #31
 800f6f0:	ea85 7ae5 	eor.w	sl, r5, r5, asr #31
 800f6f4:	ebab 7be7 	sub.w	fp, fp, r7, asr #31
 800f6f8:	ebaa 7ae5 	sub.w	sl, sl, r5, asr #31
 800f6fc:	45d3      	cmp	fp, sl
 800f6fe:	f340 8095 	ble.w	800f82c <MEMS_compareCalScore+0x218>
 800f702:	2f00      	cmp	r7, #0
 800f704:	bfba      	itte	lt
 800f706:	ebae 0509 	sublt.w	r5, lr, r9
 800f70a:	b22d      	sxthlt	r5, r5
 800f70c:	b23d      	sxthge	r5, r7
 800f70e:	f8b0 9010 	ldrh.w	r9, [r0, #16]
 800f712:	8a0f      	ldrh	r7, [r1, #16]
 800f714:	eba9 0107 	sub.w	r1, r9, r7
 800f718:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
 800f71c:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
 800f720:	4285      	cmp	r5, r0
 800f722:	dc05      	bgt.n	800f730 <MEMS_compareCalScore+0x11c>
 800f724:	2900      	cmp	r1, #0
 800f726:	bfba      	itte	lt
 800f728:	eba7 0509 	sublt.w	r5, r7, r9
 800f72c:	b22d      	sxthlt	r5, r5
 800f72e:	b20d      	sxthge	r5, r1
 800f730:	eddd 7a01 	vldr	s15, [sp, #4]
 800f734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f738:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f73c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f744:	d50a      	bpl.n	800f75c <MEMS_compareCalScore+0x148>
 800f746:	ee07 5a90 	vmov	s15, r5
 800f74a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800f95c <MEMS_compareCalScore+0x348>
 800f74e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f752:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f75a:	d41c      	bmi.n	800f796 <MEMS_compareCalScore+0x182>
 800f75c:	ebb4 0f46 	cmp.w	r4, r6, lsl #1
 800f760:	db12      	blt.n	800f788 <MEMS_compareCalScore+0x174>
 800f762:	497f      	ldr	r1, [pc, #508]	; (800f960 <MEMS_compareCalScore+0x34c>)
 800f764:	1ad0      	subs	r0, r2, r3
 800f766:	4288      	cmp	r0, r1
 800f768:	d80e      	bhi.n	800f788 <MEMS_compareCalScore+0x174>
 800f76a:	ee07 4a90 	vmov	s15, r4
 800f76e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f772:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 800f776:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f77a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f782:	d401      	bmi.n	800f788 <MEMS_compareCalScore+0x174>
 800f784:	2000      	movs	r0, #0
 800f786:	e003      	b.n	800f790 <MEMS_compareCalScore+0x17c>
 800f788:	4293      	cmp	r3, r2
 800f78a:	bf2c      	ite	cs
 800f78c:	2000      	movcs	r0, #0
 800f78e:	2001      	movcc	r0, #1
 800f790:	b003      	add	sp, #12
 800f792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f796:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800f79a:	d25d      	bcs.n	800f858 <MEMS_compareCalScore+0x244>
 800f79c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800f7a0:	ee07 4a90 	vmov	s15, r4
 800f7a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f7ac:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f7b0:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7b8:	d465      	bmi.n	800f886 <MEMS_compareCalScore+0x272>
 800f7ba:	eef0 6a0c 	vmov.f32	s13, #12	; 0x40600000  3.5
 800f7be:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7c6:	f100 80bd 	bmi.w	800f944 <MEMS_compareCalScore+0x330>
 800f7ca:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800f7ce:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7d6:	bf44      	itt	mi
 800f7d8:	eef7 7a00 	vmovmi.f32	s15, #112	; 0x3f800000  1.0
 800f7dc:	ee37 7a27 	vaddmi.f32	s14, s14, s15
 800f7e0:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 800f7e4:	d256      	bcs.n	800f894 <MEMS_compareCalScore+0x280>
 800f7e6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800f7ea:	ee07 6a90 	vmov	s15, r6
 800f7ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7f2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800f7f6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f7fa:	eeb4 0ac6 	vcmpe.f32	s0, s12
 800f7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f802:	d45e      	bmi.n	800f8c2 <MEMS_compareCalScore+0x2ae>
 800f804:	eef0 7a0c 	vmov.f32	s15, #12	; 0x40600000  3.5
 800f808:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f810:	f100 8093 	bmi.w	800f93a <MEMS_compareCalScore+0x326>
 800f814:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 800f818:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f820:	bf44      	itt	mi
 800f822:	eef7 7a00 	vmovmi.f32	s15, #112	; 0x3f800000  1.0
 800f826:	ee76 6aa7 	vaddmi.f32	s13, s13, s15
 800f82a:	e04e      	b.n	800f8ca <MEMS_compareCalScore+0x2b6>
 800f82c:	2d00      	cmp	r5, #0
 800f82e:	bfb8      	it	lt
 800f830:	ebac 0508 	sublt.w	r5, ip, r8
 800f834:	b22d      	sxth	r5, r5
 800f836:	e76a      	b.n	800f70e <MEMS_compareCalScore+0xfa>
 800f838:	b2ad      	uxth	r5, r5
 800f83a:	fa1f fc8c 	uxth.w	ip, ip
 800f83e:	f1b8 0f00 	cmp.w	r8, #0
 800f842:	bfb4      	ite	lt
 800f844:	ebac 0505 	sublt.w	r5, ip, r5
 800f848:	eba5 050c 	subge.w	r5, r5, ip
 800f84c:	b22d      	sxth	r5, r5
 800f84e:	9501      	str	r5, [sp, #4]
 800f850:	e72a      	b.n	800f6a8 <MEMS_compareCalScore+0x94>
 800f852:	eeb0 7a67 	vmov.f32	s14, s15
 800f856:	e704      	b.n	800f662 <MEMS_compareCalScore+0x4e>
 800f858:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800f85c:	d35c      	bcc.n	800f918 <MEMS_compareCalScore+0x304>
 800f85e:	4941      	ldr	r1, [pc, #260]	; (800f964 <MEMS_compareCalScore+0x350>)
 800f860:	428b      	cmp	r3, r1
 800f862:	d877      	bhi.n	800f954 <MEMS_compareCalScore+0x340>
 800f864:	f5a3 51e1 	sub.w	r1, r3, #7200	; 0x1c20
 800f868:	ee07 1a90 	vmov	s15, r1
 800f86c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800f968 <MEMS_compareCalScore+0x354>
 800f870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f874:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f878:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f87c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800f880:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f884:	e78c      	b.n	800f7a0 <MEMS_compareCalScore+0x18c>
 800f886:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 800f88a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f88e:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 800f892:	d3a8      	bcc.n	800f7e6 <MEMS_compareCalScore+0x1d2>
 800f894:	f5b2 5fe1 	cmp.w	r2, #7200	; 0x1c20
 800f898:	d32d      	bcc.n	800f8f6 <MEMS_compareCalScore+0x2e2>
 800f89a:	4932      	ldr	r1, [pc, #200]	; (800f964 <MEMS_compareCalScore+0x350>)
 800f89c:	428a      	cmp	r2, r1
 800f89e:	d856      	bhi.n	800f94e <MEMS_compareCalScore+0x33a>
 800f8a0:	f5a2 51e1 	sub.w	r1, r2, #7200	; 0x1c20
 800f8a4:	ee07 1a90 	vmov	s15, r1
 800f8a8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800f968 <MEMS_compareCalScore+0x354>
 800f8ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8b0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f8b4:	eee7 6ac6 	vfms.f32	s13, s15, s12
 800f8b8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800f8bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f8c0:	e793      	b.n	800f7ea <MEMS_compareCalScore+0x1d6>
 800f8c2:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 800f8c6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f8ca:	ee77 7a66 	vsub.f32	s15, s14, s13
 800f8ce:	ed9f 6a27 	vldr	s12, [pc, #156]	; 800f96c <MEMS_compareCalScore+0x358>
 800f8d2:	eef0 7ae7 	vabs.f32	s15, s15
 800f8d6:	eef4 7ac6 	vcmpe.f32	s15, s12
 800f8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8de:	f53f af53 	bmi.w	800f788 <MEMS_compareCalScore+0x174>
 800f8e2:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ea:	bf4c      	ite	mi
 800f8ec:	2001      	movmi	r0, #1
 800f8ee:	2000      	movpl	r0, #0
 800f8f0:	b003      	add	sp, #12
 800f8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8f6:	f5a2 7116 	sub.w	r1, r2, #600	; 0x258
 800f8fa:	ee07 1a90 	vmov	s15, r1
 800f8fe:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800f970 <MEMS_compareCalScore+0x35c>
 800f902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f90a:	eee7 6ac6 	vfms.f32	s13, s15, s12
 800f90e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800f912:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f916:	e768      	b.n	800f7ea <MEMS_compareCalScore+0x1d6>
 800f918:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800f91c:	ee07 1a90 	vmov	s15, r1
 800f920:	eddf 6a13 	vldr	s13, [pc, #76]	; 800f970 <MEMS_compareCalScore+0x35c>
 800f924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f928:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f92c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f930:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800f934:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f938:	e732      	b.n	800f7a0 <MEMS_compareCalScore+0x18c>
 800f93a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800f93e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f942:	e7c2      	b.n	800f8ca <MEMS_compareCalScore+0x2b6>
 800f944:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800f948:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f94c:	e79f      	b.n	800f88e <MEMS_compareCalScore+0x27a>
 800f94e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f952:	e74a      	b.n	800f7ea <MEMS_compareCalScore+0x1d6>
 800f954:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f958:	e722      	b.n	800f7a0 <MEMS_compareCalScore+0x18c>
 800f95a:	bf00      	nop
 800f95c:	43480000 	.word	0x43480000
 800f960:	00015180 	.word	0x00015180
 800f964:	0001517f 	.word	0x0001517f
 800f968:	367e3344 	.word	0x367e3344
 800f96c:	3dcccccd 	.word	0x3dcccccd
 800f970:	389ee00a 	.word	0x389ee00a
 800f974:	00000000 	.word	0x00000000

0800f978 <MEMS_runMagCal.constprop.18>:
 800f978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f97c:	f8df b07c 	ldr.w	fp, [pc, #124]	; 800f9fc <MEMS_runMagCal.constprop.18+0x84>
 800f980:	ed2d 8b0e 	vpush	{d8-d14}
 800f984:	f8bb 5008 	ldrh.w	r5, [fp, #8]
 800f988:	f8db 600c 	ldr.w	r6, [fp, #12]
 800f98c:	f9bb 4002 	ldrsh.w	r4, [fp, #2]
 800f990:	2d82      	cmp	r5, #130	; 0x82
 800f992:	f2ad 4db4 	subw	sp, sp, #1204	; 0x4b4
 800f996:	f240 824f 	bls.w	800fe38 <MEMS_runMagCal.constprop.18+0x4c0>
 800f99a:	f105 077e 	add.w	r7, r5, #126	; 0x7e
 800f99e:	b2ff      	uxtb	r7, r7
 800f9a0:	f04f 0982 	mov.w	r9, #130	; 0x82
 800f9a4:	f8db c010 	ldr.w	ip, [fp, #16]
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 800f9ae:	b219      	sxth	r1, r3
 800f9b0:	00ca      	lsls	r2, r1, #3
 800f9b2:	eb0c 0002 	add.w	r0, ip, r2
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	f81c e031 	ldrb.w	lr, [ip, r1, lsl #3]
 800f9bc:	f80a e031 	strb.w	lr, [sl, r1, lsl #3]
 800f9c0:	4452      	add	r2, sl
 800f9c2:	b2db      	uxtb	r3, r3
 800f9c4:	f8d0 e002 	ldr.w	lr, [r0, #2]
 800f9c8:	88c1      	ldrh	r1, [r0, #6]
 800f9ca:	f8c2 e002 	str.w	lr, [r2, #2]
 800f9ce:	4599      	cmp	r9, r3
 800f9d0:	80d1      	strh	r1, [r2, #6]
 800f9d2:	d8ec      	bhi.n	800f9ae <MEMS_runMagCal.constprop.18+0x36>
 800f9d4:	2d82      	cmp	r5, #130	; 0x82
 800f9d6:	bf86      	itte	hi
 800f9d8:	f1a5 0382 	subhi.w	r3, r5, #130	; 0x82
 800f9dc:	b29b      	uxthhi	r3, r3
 800f9de:	2300      	movls	r3, #0
 800f9e0:	f8ab 3008 	strh.w	r3, [fp, #8]
 800f9e4:	b1ff      	cbz	r7, 800fa26 <MEMS_runMagCal.constprop.18+0xae>
 800f9e6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f9ea:	1e79      	subs	r1, r7, #1
 800f9ec:	b2c9      	uxtb	r1, r1
 800f9ee:	f103 0208 	add.w	r2, r3, #8
 800f9f2:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800f9f6:	f04f 0e00 	mov.w	lr, #0
 800f9fa:	e002      	b.n	800fa02 <MEMS_runMagCal.constprop.18+0x8a>
 800f9fc:	20001640 	.word	0x20001640
 800fa00:	3208      	adds	r2, #8
 800fa02:	f893 0410 	ldrb.w	r0, [r3, #1040]	; 0x410
 800fa06:	f8b3 c412 	ldrh.w	ip, [r3, #1042]	; 0x412
 800fa0a:	f8b3 7414 	ldrh.w	r7, [r3, #1044]	; 0x414
 800fa0e:	7018      	strb	r0, [r3, #0]
 800fa10:	4291      	cmp	r1, r2
 800fa12:	f8b3 0416 	ldrh.w	r0, [r3, #1046]	; 0x416
 800fa16:	f883 e410 	strb.w	lr, [r3, #1040]	; 0x410
 800fa1a:	f8a3 c002 	strh.w	ip, [r3, #2]
 800fa1e:	809f      	strh	r7, [r3, #4]
 800fa20:	80d8      	strh	r0, [r3, #6]
 800fa22:	4613      	mov	r3, r2
 800fa24:	d1ec      	bne.n	800fa00 <MEMS_runMagCal.constprop.18+0x88>
 800fa26:	3d01      	subs	r5, #1
 800fa28:	fb04 6215 	mls	r2, r4, r5, r6
 800fa2c:	f109 31ff 	add.w	r1, r9, #4294967295
 800fa30:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
 800fa34:	9206      	str	r2, [sp, #24]
 800fa36:	fb04 2201 	mla	r2, r4, r1, r2
 800fa3a:	9107      	str	r1, [sp, #28]
 800fa3c:	9205      	str	r2, [sp, #20]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	f000 81fe 	beq.w	800fe40 <MEMS_runMagCal.constprop.18+0x4c8>
 800fa44:	f8df 83c0 	ldr.w	r8, [pc, #960]	; 800fe08 <MEMS_runMagCal.constprop.18+0x490>
 800fa48:	eddb 2a01 	vldr	s5, [fp, #4]
 800fa4c:	ed9b 3a2d 	vldr	s6, [fp, #180]	; 0xb4
 800fa50:	eddb 3a2a 	vldr	s7, [fp, #168]	; 0xa8
 800fa54:	ed9b 4a31 	vldr	s8, [fp, #196]	; 0xc4
 800fa58:	eddb 4a2b 	vldr	s9, [fp, #172]	; 0xac
 800fa5c:	ed9b 5a35 	vldr	s10, [fp, #212]	; 0xd4
 800fa60:	eddb 5a2c 	vldr	s11, [fp, #176]	; 0xb0
 800fa64:	ed9f 6ae3 	vldr	s12, [pc, #908]	; 800fdf4 <MEMS_runMagCal.constprop.18+0x47c>
 800fa68:	f647 7eff 	movw	lr, #32767	; 0x7fff
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	4645      	mov	r5, r8
 800fa70:	e9cd 8e00 	strd	r8, lr, [sp]
 800fa74:	f8cd e008 	str.w	lr, [sp, #8]
 800fa78:	46f0      	mov	r8, lr
 800fa7a:	9304      	str	r3, [sp, #16]
 800fa7c:	461f      	mov	r7, r3
 800fa7e:	4618      	mov	r0, r3
 800fa80:	46ac      	mov	ip, r5
 800fa82:	46ae      	mov	lr, r5
 800fa84:	f81a 1030 	ldrb.w	r1, [sl, r0, lsl #3]
 800fa88:	00c3      	lsls	r3, r0, #3
 800fa8a:	1c45      	adds	r5, r0, #1
 800fa8c:	1c7e      	adds	r6, r7, #1
 800fa8e:	eb0a 0203 	add.w	r2, sl, r3
 800fa92:	2900      	cmp	r1, #0
 800fa94:	f000 809e 	beq.w	800fbd4 <MEMS_runMagCal.constprop.18+0x25c>
 800fa98:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800fa9c:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800faa0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800faa4:	ee07 1a90 	vmov	s15, r1
 800faa8:	ee07 4a10 	vmov	s14, r4
 800faac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fab0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800fab4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800fab8:	b237      	sxth	r7, r6
 800faba:	9e01      	ldr	r6, [sp, #4]
 800fabc:	458c      	cmp	ip, r1
 800fabe:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800fac2:	ee67 7a84 	vmul.f32	s15, s15, s8
 800fac6:	bfb8      	it	lt
 800fac8:	468c      	movlt	ip, r1
 800faca:	428e      	cmp	r6, r1
 800facc:	bfa8      	it	ge
 800face:	460e      	movge	r6, r1
 800fad0:	ee66 6a83 	vmul.f32	s13, s13, s6
 800fad4:	45a6      	cmp	lr, r4
 800fad6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fada:	ee07 2a10 	vmov	s14, r2
 800fade:	9601      	str	r6, [sp, #4]
 800fae0:	9e00      	ldr	r6, [sp, #0]
 800fae2:	bfb8      	it	lt
 800fae4:	46a6      	movlt	lr, r4
 800fae6:	45a0      	cmp	r8, r4
 800fae8:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800faec:	bfa8      	it	ge
 800faee:	46a0      	movge	r8, r4
 800faf0:	4296      	cmp	r6, r2
 800faf2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800faf6:	bfb8      	it	lt
 800faf8:	4616      	movlt	r6, r2
 800fafa:	ee37 7a65 	vsub.f32	s14, s14, s11
 800fafe:	9600      	str	r6, [sp, #0]
 800fb00:	9e02      	ldr	r6, [sp, #8]
 800fb02:	ee37 6a86 	vadd.f32	s12, s15, s12
 800fb06:	4296      	cmp	r6, r2
 800fb08:	ee67 7a05 	vmul.f32	s15, s14, s10
 800fb0c:	bfa8      	it	ge
 800fb0e:	4616      	movge	r6, r2
 800fb10:	2803      	cmp	r0, #3
 800fb12:	9602      	str	r6, [sp, #8]
 800fb14:	eea7 6aa7 	vfma.f32	s12, s15, s15
 800fb18:	dd5c      	ble.n	800fbd4 <MEMS_runMagCal.constprop.18+0x25c>
 800fb1a:	f1a3 0620 	sub.w	r6, r3, #32
 800fb1e:	4456      	add	r6, sl
 800fb20:	f1a3 0008 	sub.w	r0, r3, #8
 800fb24:	3b18      	subs	r3, #24
 800fb26:	4453      	add	r3, sl
 800fb28:	9303      	str	r3, [sp, #12]
 800fb2a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800fb2e:	4450      	add	r0, sl
 800fb30:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800fb34:	9b03      	ldr	r3, [sp, #12]
 800fb36:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800fb3a:	900a      	str	r0, [sp, #40]	; 0x28
 800fb3c:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800fb40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb42:	1ae4      	subs	r4, r4, r3
 800fb44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb46:	1a1b      	subs	r3, r3, r0
 800fb48:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800fb4c:	9803      	ldr	r0, [sp, #12]
 800fb4e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800fb52:	9309      	str	r3, [sp, #36]	; 0x24
 800fb54:	9b08      	ldr	r3, [sp, #32]
 800fb56:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800fb5a:	9008      	str	r0, [sp, #32]
 800fb5c:	ee07 4a90 	vmov	s15, r4
 800fb60:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 800fb64:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 800fb68:	9b03      	ldr	r3, [sp, #12]
 800fb6a:	f9b6 6006 	ldrsh.w	r6, [r6, #6]
 800fb6e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fb72:	9303      	str	r3, [sp, #12]
 800fb74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb76:	1ac9      	subs	r1, r1, r3
 800fb78:	9b08      	ldr	r3, [sp, #32]
 800fb7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fb7e:	1ae4      	subs	r4, r4, r3
 800fb80:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800fb84:	eeb0 7ac7 	vabs.f32	s14, s14
 800fb88:	ee07 1a90 	vmov	s15, r1
 800fb8c:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 800fb90:	9b03      	ldr	r3, [sp, #12]
 800fb92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb96:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 800fb9a:	eef0 7ae7 	vabs.f32	s15, s15
 800fb9e:	1ac0      	subs	r0, r0, r3
 800fba0:	1b92      	subs	r2, r2, r6
 800fba2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fba6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800fbaa:	ee07 2a90 	vmov	s15, r2
 800fbae:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800fbb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fbb6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800fbba:	eef0 7ae7 	vabs.f32	s15, s15
 800fbbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fbc2:	9b04      	ldr	r3, [sp, #16]
 800fbc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fbc8:	ee17 2a90 	vmov	r2, s15
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	bf38      	it	cc
 800fbd0:	4613      	movcc	r3, r2
 800fbd2:	9304      	str	r3, [sp, #16]
 800fbd4:	b228      	sxth	r0, r5
 800fbd6:	4581      	cmp	r9, r0
 800fbd8:	f73f af54 	bgt.w	800fa84 <MEMS_runMagCal.constprop.18+0x10c>
 800fbdc:	4673      	mov	r3, lr
 800fbde:	4665      	mov	r5, ip
 800fbe0:	46c6      	mov	lr, r8
 800fbe2:	4698      	mov	r8, r3
 800fbe4:	2f00      	cmp	r7, #0
 800fbe6:	f000 816a 	beq.w	800febe <MEMS_runMagCal.constprop.18+0x546>
 800fbea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fbee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fbf2:	ee87 7aa2 	vdiv.f32	s14, s15, s5
 800fbf6:	f280 814d 	bge.w	800fe94 <MEMS_runMagCal.constprop.18+0x51c>
 800fbfa:	f51e 4f80 	cmn.w	lr, #16384	; 0x4000
 800fbfe:	f2c0 8149 	blt.w	800fe94 <MEMS_runMagCal.constprop.18+0x51c>
 800fc02:	f5bc 4f80 	cmp.w	ip, #16384	; 0x4000
 800fc06:	f280 8145 	bge.w	800fe94 <MEMS_runMagCal.constprop.18+0x51c>
 800fc0a:	9b01      	ldr	r3, [sp, #4]
 800fc0c:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 800fc10:	f2c0 8140 	blt.w	800fe94 <MEMS_runMagCal.constprop.18+0x51c>
 800fc14:	9900      	ldr	r1, [sp, #0]
 800fc16:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800fc1a:	f280 813b 	bge.w	800fe94 <MEMS_runMagCal.constprop.18+0x51c>
 800fc1e:	9802      	ldr	r0, [sp, #8]
 800fc20:	f510 4f80 	cmn.w	r0, #16384	; 0x4000
 800fc24:	f2c0 8136 	blt.w	800fe94 <MEMS_runMagCal.constprop.18+0x51c>
 800fc28:	ee07 7a90 	vmov	s15, r7
 800fc2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fc30:	1aea      	subs	r2, r5, r3
 800fc32:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800fc36:	eba8 0e0e 	sub.w	lr, r8, lr
 800fc3a:	4596      	cmp	lr, r2
 800fc3c:	4673      	mov	r3, lr
 800fc3e:	eba1 0100 	sub.w	r1, r1, r0
 800fc42:	bfb8      	it	lt
 800fc44:	4613      	movlt	r3, r2
 800fc46:	428b      	cmp	r3, r1
 800fc48:	bfb8      	it	lt
 800fc4a:	460b      	movlt	r3, r1
 800fc4c:	eddf 6a6a 	vldr	s13, [pc, #424]	; 800fdf8 <MEMS_runMagCal.constprop.18+0x480>
 800fc50:	eeb1 6ae7 	vsqrt.f32	s12, s15
 800fc54:	ee07 3a90 	vmov	s15, r3
 800fc58:	ee67 6a26 	vmul.f32	s13, s14, s13
 800fc5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc60:	ee26 6a22 	vmul.f32	s12, s12, s5
 800fc64:	eef4 6ae7 	vcmpe.f32	s13, s15
 800fc68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc6c:	f100 8112 	bmi.w	800fe94 <MEMS_runMagCal.constprop.18+0x51c>
 800fc70:	eddd 6a04 	vldr	s13, [sp, #16]
 800fc74:	eddf 5a61 	vldr	s11, [pc, #388]	; 800fdfc <MEMS_runMagCal.constprop.18+0x484>
 800fc78:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800fc7c:	ee66 2aa2 	vmul.f32	s5, s13, s5
 800fc80:	eef4 2ae5 	vcmpe.f32	s5, s11
 800fc84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc88:	f300 8104 	bgt.w	800fe94 <MEMS_runMagCal.constprop.18+0x51c>
 800fc8c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800fc90:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fc94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc9c:	f300 80df 	bgt.w	800fe5e <MEMS_runMagCal.constprop.18+0x4e6>
 800fca0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800fca4:	ee67 6a26 	vmul.f32	s13, s14, s13
 800fca8:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fcac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb0:	f340 85e5 	ble.w	801087e <MEMS_runMagCal.constprop.18+0xf06>
 800fcb4:	ee07 ea90 	vmov	s15, lr
 800fcb8:	ee37 7a07 	vadd.f32	s14, s14, s14
 800fcbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fcc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcc8:	f340 85d9 	ble.w	801087e <MEMS_runMagCal.constprop.18+0xf06>
 800fccc:	ee07 2a90 	vmov	s15, r2
 800fcd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fcd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fcd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcdc:	f140 85cf 	bpl.w	801087e <MEMS_runMagCal.constprop.18+0xf06>
 800fce0:	ee07 1a90 	vmov	s15, r1
 800fce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fce8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fcec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf0:	bf4c      	ite	mi
 800fcf2:	2301      	movmi	r3, #1
 800fcf4:	2300      	movpl	r3, #0
 800fcf6:	9300      	str	r3, [sp, #0]
 800fcf8:	f89b 6364 	ldrb.w	r6, [fp, #868]	; 0x364
 800fcfc:	f89b 7365 	ldrb.w	r7, [fp, #869]	; 0x365
 800fd00:	f99b 2366 	ldrsb.w	r2, [fp, #870]	; 0x366
 800fd04:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 800fd08:	283b      	cmp	r0, #59	; 0x3b
 800fd0a:	4633      	mov	r3, r6
 800fd0c:	4639      	mov	r1, r7
 800fd0e:	f340 80dd 	ble.w	800fecc <MEMS_runMagCal.constprop.18+0x554>
 800fd12:	f89b 00a4 	ldrb.w	r0, [fp, #164]	; 0xa4
 800fd16:	2800      	cmp	r0, #0
 800fd18:	f000 80d8 	beq.w	800fecc <MEMS_runMagCal.constprop.18+0x554>
 800fd1c:	eddf 7a38 	vldr	s15, [pc, #224]	; 800fe00 <MEMS_runMagCal.constprop.18+0x488>
 800fd20:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fd24:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800fd28:	eef0 7ae7 	vabs.f32	s15, s15
 800fd2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fd30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd34:	f340 80ca 	ble.w	800fecc <MEMS_runMagCal.constprop.18+0x554>
 800fd38:	42be      	cmp	r6, r7
 800fd3a:	f001 86d0 	beq.w	8011ade <MEMS_runMagCal.constprop.18+0x2166>
 800fd3e:	2000      	movs	r0, #0
 800fd40:	9001      	str	r0, [sp, #4]
 800fd42:	2e00      	cmp	r6, #0
 800fd44:	f000 80c2 	beq.w	800fecc <MEMS_runMagCal.constprop.18+0x554>
 800fd48:	2500      	movs	r5, #0
 800fd4a:	46ae      	mov	lr, r5
 800fd4c:	46ac      	mov	ip, r5
 800fd4e:	46a8      	mov	r8, r5
 800fd50:	4628      	mov	r0, r5
 800fd52:	9c01      	ldr	r4, [sp, #4]
 800fd54:	1904      	adds	r4, r0, r4
 800fd56:	fb94 f0f7 	sdiv	r0, r4, r7
 800fd5a:	fb07 4010 	mls	r0, r7, r0, r4
 800fd5e:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 800fd62:	3501      	adds	r5, #1
 800fd64:	f8b0 4368 	ldrh.w	r4, [r0, #872]	; 0x368
 800fd68:	f241 205b 	movw	r0, #4699	; 0x125b
 800fd6c:	4284      	cmp	r4, r0
 800fd6e:	bf95      	itete	ls
 800fd70:	f5c4 5092 	rsbls	r0, r4, #4672	; 0x1240
 800fd74:	f5a4 5092 	subhi.w	r0, r4, #4672	; 0x1240
 800fd78:	301c      	addls	r0, #28
 800fd7a:	381c      	subhi	r0, #28
 800fd7c:	b280      	uxth	r0, r0
 800fd7e:	44a0      	add	r8, r4
 800fd80:	f640 34b8 	movw	r4, #3000	; 0xbb8
 800fd84:	42a0      	cmp	r0, r4
 800fd86:	bf98      	it	ls
 800fd88:	f10e 0e01 	addls.w	lr, lr, #1
 800fd8c:	f10c 0001 	add.w	r0, ip, #1
 800fd90:	b22d      	sxth	r5, r5
 800fd92:	bf8c      	ite	hi
 800fd94:	fa5f fc80 	uxtbhi.w	ip, r0
 800fd98:	fa5f fe8e 	uxtbls.w	lr, lr
 800fd9c:	42ae      	cmp	r6, r5
 800fd9e:	4628      	mov	r0, r5
 800fda0:	dcd7      	bgt.n	800fd52 <MEMS_runMagCal.constprop.18+0x3da>
 800fda2:	fbb8 f0f6 	udiv	r0, r8, r6
 800fda6:	ee07 0a90 	vmov	s15, r0
 800fdaa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800fe20 <MEMS_runMagCal.constprop.18+0x4a8>
 800fdae:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800fe00 <MEMS_runMagCal.constprop.18+0x488>
 800fdb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdb6:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800fdba:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800fdbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fdc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdc6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800fdca:	eeb0 7ac7 	vabs.f32	s14, s14
 800fdce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fdd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdd6:	d579      	bpl.n	800fecc <MEMS_runMagCal.constprop.18+0x554>
 800fdd8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fddc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800fe04 <MEMS_runMagCal.constprop.18+0x48c>
 800fde0:	eef0 7ae7 	vabs.f32	s15, s15
 800fde4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fde8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdec:	dd6e      	ble.n	800fecc <MEMS_runMagCal.constprop.18+0x554>
 800fdee:	45f4      	cmp	ip, lr
 800fdf0:	d86c      	bhi.n	800fecc <MEMS_runMagCal.constprop.18+0x554>
 800fdf2:	e01f      	b.n	800fe34 <MEMS_runMagCal.constprop.18+0x4bc>
 800fdf4:	00000000 	.word	0x00000000
 800fdf8:	43020000 	.word	0x43020000
 800fdfc:	447a0000 	.word	0x447a0000
 800fe00:	423c0000 	.word	0x423c0000
 800fe04:	42700000 	.word	0x42700000
 800fe08:	ffff8000 	.word	0xffff8000
 800fe0c:	43480000 	.word	0x43480000
 800fe10:	42c80000 	.word	0x42c80000
 800fe14:	477fff00 	.word	0x477fff00
 800fe18:	3a83126f 	.word	0x3a83126f
 800fe1c:	00000000 	.word	0x00000000
 800fe20:	3c23d70a 	.word	0x3c23d70a
 800fe24:	c23c0000 	.word	0xc23c0000
 800fe28:	3fd9999a 	.word	0x3fd9999a
 800fe2c:	40233334 	.word	0x40233334
 800fe30:	427c0000 	.word	0x427c0000
 800fe34:	2401      	movs	r4, #1
 800fe36:	e04a      	b.n	800fece <MEMS_runMagCal.constprop.18+0x556>
 800fe38:	b14d      	cbz	r5, 800fe4e <MEMS_runMagCal.constprop.18+0x4d6>
 800fe3a:	46a9      	mov	r9, r5
 800fe3c:	2700      	movs	r7, #0
 800fe3e:	e5b1      	b.n	800f9a4 <MEMS_runMagCal.constprop.18+0x2c>
 800fe40:	e9cb 333a 	strd	r3, r3, [fp, #232]	; 0xe8
 800fe44:	e9cb 333c 	strd	r3, r3, [fp, #240]	; 0xf0
 800fe48:	e9cb 333e 	strd	r3, r3, [fp, #248]	; 0xf8
 800fe4c:	e5fa      	b.n	800fa44 <MEMS_runMagCal.constprop.18+0xcc>
 800fe4e:	f8ab 5008 	strh.w	r5, [fp, #8]
 800fe52:	f20d 4db4 	addw	sp, sp, #1204	; 0x4b4
 800fe56:	ecbd 8b0e 	vpop	{d8-d14}
 800fe5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe5e:	f89b 30a4 	ldrb.w	r3, [fp, #164]	; 0xa4
 800fe62:	3b02      	subs	r3, #2
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d8f4      	bhi.n	800fe52 <MEMS_runMagCal.constprop.18+0x4da>
 800fe68:	ed5f 7a18 	vldr	s15, [pc, #-96]	; 800fe0c <MEMS_runMagCal.constprop.18+0x494>
 800fe6c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800fe70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe74:	dded      	ble.n	800fe52 <MEMS_runMagCal.constprop.18+0x4da>
 800fe76:	2300      	movs	r3, #0
 800fe78:	2101      	movs	r1, #1
 800fe7a:	22ff      	movs	r2, #255	; 0xff
 800fe7c:	9805      	ldr	r0, [sp, #20]
 800fe7e:	f8cb 0360 	str.w	r0, [fp, #864]	; 0x360
 800fe82:	f88b 10a4 	strb.w	r1, [fp, #164]	; 0xa4
 800fe86:	f88b 30e0 	strb.w	r3, [fp, #224]	; 0xe0
 800fe8a:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
 800fe8e:	f88b 20e2 	strb.w	r2, [fp, #226]	; 0xe2
 800fe92:	e7de      	b.n	800fe52 <MEMS_runMagCal.constprop.18+0x4da>
 800fe94:	f89b 30a4 	ldrb.w	r3, [fp, #164]	; 0xa4
 800fe98:	3b02      	subs	r3, #2
 800fe9a:	2b01      	cmp	r3, #1
 800fe9c:	f240 84df 	bls.w	801085e <MEMS_runMagCal.constprop.18+0xee6>
 800fea0:	9905      	ldr	r1, [sp, #20]
 800fea2:	f8cb 1360 	str.w	r1, [fp, #864]	; 0x360
 800fea6:	2200      	movs	r2, #0
 800fea8:	23ff      	movs	r3, #255	; 0xff
 800feaa:	f88b 20e0 	strb.w	r2, [fp, #224]	; 0xe0
 800feae:	f88b 30e2 	strb.w	r3, [fp, #226]	; 0xe2
 800feb2:	f20d 4db4 	addw	sp, sp, #1204	; 0x4b4
 800feb6:	ecbd 8b0e 	vpop	{d8-d14}
 800feba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800febe:	f89b 3364 	ldrb.w	r3, [fp, #868]	; 0x364
 800fec2:	f99b 2366 	ldrsb.w	r2, [fp, #870]	; 0x366
 800fec6:	f89b 1365 	ldrb.w	r1, [fp, #869]	; 0x365
 800feca:	9700      	str	r7, [sp, #0]
 800fecc:	2400      	movs	r4, #0
 800fece:	ed1f 0a30 	vldr	s0, [pc, #-192]	; 800fe10 <MEMS_runMagCal.constprop.18+0x498>
 800fed2:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 800fe14 <MEMS_runMagCal.constprop.18+0x49c>
 800fed6:	ee26 0a00 	vmul.f32	s0, s12, s0
 800feda:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fee2:	bf88      	it	hi
 800fee4:	eeb0 0a67 	vmovhi.f32	s0, s15
 800fee8:	2a00      	cmp	r2, #0
 800feea:	f2c0 8479 	blt.w	80107e0 <MEMS_runMagCal.constprop.18+0xe68>
 800feee:	1c50      	adds	r0, r2, #1
 800fef0:	fb90 f2f1 	sdiv	r2, r0, r1
 800fef4:	fb01 0212 	mls	r2, r1, r2, r0
 800fef8:	b252      	sxtb	r2, r2
 800fefa:	4615      	mov	r5, r2
 800fefc:	3301      	adds	r3, #1
 800fefe:	4299      	cmp	r1, r3
 800ff00:	bfa8      	it	ge
 800ff02:	4619      	movge	r1, r3
 800ff04:	f88b 1364 	strb.w	r1, [fp, #868]	; 0x364
 800ff08:	f88b 2366 	strb.w	r2, [fp, #870]	; 0x366
 800ff0c:	f006 fb1e 	bl	801654c <roundf>
 800ff10:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800ff14:	eb0b 0545 	add.w	r5, fp, r5, lsl #1
 800ff18:	ee10 3a10 	vmov	r3, s0
 800ff1c:	f8a5 3368 	strh.w	r3, [r5, #872]	; 0x368
 800ff20:	2c00      	cmp	r4, #0
 800ff22:	d1bd      	bne.n	800fea0 <MEMS_runMagCal.constprop.18+0x528>
 800ff24:	f8db 5360 	ldr.w	r5, [fp, #864]	; 0x360
 800ff28:	b12d      	cbz	r5, 800ff36 <MEMS_runMagCal.constprop.18+0x5be>
 800ff2a:	9b05      	ldr	r3, [sp, #20]
 800ff2c:	1b5a      	subs	r2, r3, r5
 800ff2e:	f640 33b7 	movw	r3, #2999	; 0xbb7
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d98d      	bls.n	800fe52 <MEMS_runMagCal.constprop.18+0x4da>
 800ff36:	eddd 7a05 	vldr	s15, [sp, #20]
 800ff3a:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 800ff3e:	ed5f 7a4a 	vldr	s15, [pc, #-296]	; 800fe18 <MEMS_runMagCal.constprop.18+0x4a0>
 800ff42:	ee2a aa27 	vmul.f32	s20, s20, s15
 800ff46:	eeb0 0a4a 	vmov.f32	s0, s20
 800ff4a:	f006 faff 	bl	801654c <roundf>
 800ff4e:	f8db 30d8 	ldr.w	r3, [fp, #216]	; 0xd8
 800ff52:	eef0 ba40 	vmov.f32	s23, s0
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	f040 841e 	bne.w	8010798 <MEMS_runMagCal.constprop.18+0xe20>
 800ff5c:	f89b 80a4 	ldrb.w	r8, [fp, #164]	; 0xa4
 800ff60:	f89b 6364 	ldrb.w	r6, [fp, #868]	; 0x364
 800ff64:	f89b 1365 	ldrb.w	r1, [fp, #869]	; 0x365
 800ff68:	428e      	cmp	r6, r1
 800ff6a:	f000 846e 	beq.w	801084a <MEMS_runMagCal.constprop.18+0xed2>
 800ff6e:	2700      	movs	r7, #0
 800ff70:	ee07 6a90 	vmov	s15, r6
 800ff74:	b2b4      	uxth	r4, r6
 800ff76:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800ff7a:	ed1f 7a58 	vldr	s14, [pc, #-352]	; 800fe1c <MEMS_runMagCal.constprop.18+0x4a4>
 800ff7e:	2c00      	cmp	r4, #0
 800ff80:	f000 8111 	beq.w	80101a6 <MEMS_runMagCal.constprop.18+0x82e>
 800ff84:	2200      	movs	r2, #0
 800ff86:	9501      	str	r5, [sp, #4]
 800ff88:	eef0 6a47 	vmov.f32	s13, s14
 800ff8c:	f241 205c 	movw	r0, #4700	; 0x125c
 800ff90:	f640 3cb8 	movw	ip, #3000	; 0xbb8
 800ff94:	4615      	mov	r5, r2
 800ff96:	eb07 0e02 	add.w	lr, r7, r2
 800ff9a:	fb9e f3f1 	sdiv	r3, lr, r1
 800ff9e:	fb01 e313 	mls	r3, r1, r3, lr
 800ffa2:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800ffa6:	3201      	adds	r2, #1
 800ffa8:	f8b3 3368 	ldrh.w	r3, [r3, #872]	; 0x368
 800ffac:	ee07 3a90 	vmov	s15, r3
 800ffb0:	f5a3 5e92 	sub.w	lr, r3, #4672	; 0x1240
 800ffb4:	4283      	cmp	r3, r0
 800ffb6:	bf98      	it	ls
 800ffb8:	1ac3      	subls	r3, r0, r3
 800ffba:	f1ae 0e1c 	sub.w	lr, lr, #28
 800ffbe:	bf88      	it	hi
 800ffc0:	fa1f f38e 	uxthhi.w	r3, lr
 800ffc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ffc8:	bf98      	it	ls
 800ffca:	b29b      	uxthls	r3, r3
 800ffcc:	fb03 fe03 	mul.w	lr, r3, r3
 800ffd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ffd4:	ee07 ea90 	vmov	s15, lr
 800ffd8:	4563      	cmp	r3, ip
 800ffda:	bf88      	it	hi
 800ffdc:	1c6b      	addhi	r3, r5, #1
 800ffde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ffe2:	fa1f fe82 	uxth.w	lr, r2
 800ffe6:	bf88      	it	hi
 800ffe8:	b2dd      	uxtbhi	r5, r3
 800ffea:	4574      	cmp	r4, lr
 800ffec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800fff0:	d8d1      	bhi.n	800ff96 <MEMS_runMagCal.constprop.18+0x61e>
 800fff2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800fff6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800fffa:	2e3b      	cmp	r6, #59	; 0x3b
 800fffc:	9505      	str	r5, [sp, #20]
 800fffe:	9d01      	ldr	r5, [sp, #4]
 8010000:	ed5f 6a79 	vldr	s13, [pc, #-484]	; 800fe20 <MEMS_runMagCal.constprop.18+0x4a8>
 8010004:	eeb1 bae7 	vsqrt.f32	s22, s15
 8010008:	ee2b ba26 	vmul.f32	s22, s22, s13
 801000c:	f340 80d2 	ble.w	80101b4 <MEMS_runMagCal.constprop.18+0x83c>
 8010010:	f1b8 0f00 	cmp.w	r8, #0
 8010014:	d038      	beq.n	8010088 <MEMS_runMagCal.constprop.18+0x710>
 8010016:	eec7 5a06 	vdiv.f32	s11, s14, s12
 801001a:	ed5f 7a7e 	vldr	s15, [pc, #-504]	; 800fe24 <MEMS_runMagCal.constprop.18+0x4ac>
 801001e:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8010022:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8010026:	eef0 7ae7 	vabs.f32	s15, s15
 801002a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801002e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010032:	f101 8543 	bmi.w	8011abc <MEMS_runMagCal.constprop.18+0x2144>
 8010036:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 801003a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801003e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010042:	d507      	bpl.n	8010054 <MEMS_runMagCal.constprop.18+0x6dc>
 8010044:	ed1f 7a88 	vldr	s14, [pc, #-544]	; 800fe28 <MEMS_runMagCal.constprop.18+0x4b0>
 8010048:	eeb4 bac7 	vcmpe.f32	s22, s14
 801004c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010050:	f101 8534 	bmi.w	8011abc <MEMS_runMagCal.constprop.18+0x2144>
 8010054:	eeb1 7a05 	vmov.f32	s14, #21	; 0x40a80000  5.250
 8010058:	eef4 7ac7 	vcmpe.f32	s15, s14
 801005c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010060:	f101 8538 	bmi.w	8011ad4 <MEMS_runMagCal.constprop.18+0x215c>
 8010064:	eeb2 7a05 	vmov.f32	s14, #37	; 0x41280000  10.5
 8010068:	eef4 7ac7 	vcmpe.f32	s15, s14
 801006c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010070:	d507      	bpl.n	8010082 <MEMS_runMagCal.constprop.18+0x70a>
 8010072:	ed5f 7a92 	vldr	s15, [pc, #-584]	; 800fe2c <MEMS_runMagCal.constprop.18+0x4b4>
 8010076:	eeb4 bae7 	vcmpe.f32	s22, s15
 801007a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801007e:	f101 8529 	bmi.w	8011ad4 <MEMS_runMagCal.constprop.18+0x215c>
 8010082:	2301      	movs	r3, #1
 8010084:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 8010088:	ed9b 8a01 	vldr	s16, [fp, #4]
 801008c:	ed5f 7a98 	vldr	s15, [pc, #-608]	; 800fe30 <MEMS_runMagCal.constprop.18+0x4b8>
 8010090:	f8db 30e4 	ldr.w	r3, [fp, #228]	; 0xe4
 8010094:	f9bb 6002 	ldrsh.w	r6, [fp, #2]
 8010098:	f89b 50e0 	ldrb.w	r5, [fp, #224]	; 0xe0
 801009c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80100a0:	eec7 8a08 	vdiv.f32	s17, s14, s16
 80100a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100a8:	f503 42ab 	add.w	r2, r3, #21888	; 0x5580
 80100ac:	fb01 0606 	mla	r6, r1, r6, r0
 80100b0:	3270      	adds	r2, #112	; 0x70
 80100b2:	42b2      	cmp	r2, r6
 80100b4:	eeb1 9a00 	vmov.f32	s18, #16	; 0x40800000  4.0
 80100b8:	ee28 9a89 	vmul.f32	s18, s17, s18
 80100bc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80100c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80100c4:	ee17 1a90 	vmov	r1, s15
 80100c8:	b289      	uxth	r1, r1
 80100ca:	4688      	mov	r8, r1
 80100cc:	d254      	bcs.n	8010178 <MEMS_runMagCal.constprop.18+0x800>
 80100ce:	f644 6220 	movw	r2, #20000	; 0x4e20
 80100d2:	4296      	cmp	r6, r2
 80100d4:	f89b 40e1 	ldrb.w	r4, [fp, #225]	; 0xe1
 80100d8:	f99b 20e2 	ldrsb.w	r2, [fp, #226]	; 0xe2
 80100dc:	bf1a      	itte	ne
 80100de:	f5a6 469c 	subne.w	r6, r6, #19968	; 0x4e00
 80100e2:	3e20      	subne	r6, #32
 80100e4:	2600      	moveq	r6, #0
 80100e6:	42ac      	cmp	r4, r5
 80100e8:	f102 0201 	add.w	r2, r2, #1
 80100ec:	f000 839d 	beq.w	801082a <MEMS_runMagCal.constprop.18+0xeb2>
 80100f0:	1b52      	subs	r2, r2, r5
 80100f2:	fb92 f1f4 	sdiv	r1, r2, r4
 80100f6:	fb04 2211 	mls	r2, r4, r1, r2
 80100fa:	2a00      	cmp	r2, #0
 80100fc:	b217      	sxth	r7, r2
 80100fe:	bfbc      	itt	lt
 8010100:	1912      	addlt	r2, r2, r4
 8010102:	b217      	sxthlt	r7, r2
 8010104:	fa0f fc85 	sxth.w	ip, r5
 8010108:	f1bc 0f00 	cmp.w	ip, #0
 801010c:	d031      	beq.n	8010172 <MEMS_runMagCal.constprop.18+0x7fa>
 801010e:	1b9b      	subs	r3, r3, r6
 8010110:	2100      	movs	r1, #0
 8010112:	b298      	uxth	r0, r3
 8010114:	468e      	mov	lr, r1
 8010116:	e005      	b.n	8010124 <MEMS_runMagCal.constprop.18+0x7ac>
 8010118:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 801011c:	3101      	adds	r1, #1
 801011e:	b20b      	sxth	r3, r1
 8010120:	459c      	cmp	ip, r3
 8010122:	dd1a      	ble.n	801015a <MEMS_runMagCal.constprop.18+0x7e2>
 8010124:	187a      	adds	r2, r7, r1
 8010126:	fb92 f3f4 	sdiv	r3, r2, r4
 801012a:	fb04 2313 	mls	r3, r4, r3, r2
 801012e:	b2db      	uxtb	r3, r3
 8010130:	3304      	adds	r3, #4
 8010132:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8010136:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 801013a:	4402      	add	r2, r0
 801013c:	b212      	sxth	r2, r2
 801013e:	2a00      	cmp	r2, #0
 8010140:	daea      	bge.n	8010118 <MEMS_runMagCal.constprop.18+0x7a0>
 8010142:	f105 3eff 	add.w	lr, r5, #4294967295
 8010146:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 801014a:	2d00      	cmp	r5, #0
 801014c:	f000 837a 	beq.w	8010844 <MEMS_runMagCal.constprop.18+0xecc>
 8010150:	fa5f f58e 	uxtb.w	r5, lr
 8010154:	f04f 0e01 	mov.w	lr, #1
 8010158:	e7e0      	b.n	801011c <MEMS_runMagCal.constprop.18+0x7a4>
 801015a:	f88b 50e0 	strb.w	r5, [fp, #224]	; 0xe0
 801015e:	f1be 0f00 	cmp.w	lr, #0
 8010162:	d006      	beq.n	8010172 <MEMS_runMagCal.constprop.18+0x7fa>
 8010164:	eeb0 0a49 	vmov.f32	s0, s18
 8010168:	4640      	mov	r0, r8
 801016a:	f7fe f8bd 	bl	800e2e8 <MEMS_updateMagBufferIndex.constprop.22>
 801016e:	f89b 50e0 	ldrb.w	r5, [fp, #224]	; 0xe0
 8010172:	f8cb 60e4 	str.w	r6, [fp, #228]	; 0xe4
 8010176:	4633      	mov	r3, r6
 8010178:	2d00      	cmp	r5, #0
 801017a:	d04d      	beq.n	8010218 <MEMS_runMagCal.constprop.18+0x8a0>
 801017c:	f99b 20e2 	ldrsb.w	r2, [fp, #226]	; 0xe2
 8010180:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8010184:	f9b2 2100 	ldrsh.w	r2, [r2, #256]	; 0x100
 8010188:	f502 529c 	add.w	r2, r2, #4992	; 0x1380
 801018c:	3208      	adds	r2, #8
 801018e:	4413      	add	r3, r2
 8010190:	9a06      	ldr	r2, [sp, #24]
 8010192:	4293      	cmp	r3, r2
 8010194:	d334      	bcc.n	8010200 <MEMS_runMagCal.constprop.18+0x888>
 8010196:	9b00      	ldr	r3, [sp, #0]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d140      	bne.n	801021e <MEMS_runMagCal.constprop.18+0x8a6>
 801019c:	2d0a      	cmp	r5, #10
 801019e:	d83e      	bhi.n	801021e <MEMS_runMagCal.constprop.18+0x8a6>
 80101a0:	2300      	movs	r3, #0
 80101a2:	9304      	str	r3, [sp, #16]
 80101a4:	e122      	b.n	80103ec <MEMS_runMagCal.constprop.18+0xa74>
 80101a6:	eeb1 bac7 	vsqrt.f32	s22, s14
 80101aa:	9405      	str	r4, [sp, #20]
 80101ac:	eddf 7ac7 	vldr	s15, [pc, #796]	; 80104cc <MEMS_runMagCal.constprop.18+0xb54>
 80101b0:	ee2b ba27 	vmul.f32	s22, s22, s15
 80101b4:	f1b8 0f03 	cmp.w	r8, #3
 80101b8:	f47f af66 	bne.w	8010088 <MEMS_runMagCal.constprop.18+0x710>
 80101bc:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	f43f af61 	beq.w	8010088 <MEMS_runMagCal.constprop.18+0x710>
 80101c6:	ee07 3a90 	vmov	s15, r3
 80101ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101ce:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80101d2:	ee7a 6a67 	vsub.f32	s13, s20, s15
 80101d6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80101da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101de:	f77f af53 	ble.w	8010088 <MEMS_runMagCal.constprop.18+0x710>
 80101e2:	ee07 5a10 	vmov	s14, r5
 80101e6:	eddf 6aba 	vldr	s13, [pc, #744]	; 80104d0 <MEMS_runMagCal.constprop.18+0xb58>
 80101ea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80101ee:	ee27 7a26 	vmul.f32	s14, s14, s13
 80101f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80101f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101fa:	f73f ae2a 	bgt.w	800fe52 <MEMS_runMagCal.constprop.18+0x4da>
 80101fe:	e743      	b.n	8010088 <MEMS_runMagCal.constprop.18+0x710>
 8010200:	2300      	movs	r3, #0
 8010202:	e9cb 333a 	strd	r3, r3, [fp, #232]	; 0xe8
 8010206:	e9cb 333c 	strd	r3, r3, [fp, #240]	; 0xf0
 801020a:	e9cb 333e 	strd	r3, r3, [fp, #248]	; 0xf8
 801020e:	22ff      	movs	r2, #255	; 0xff
 8010210:	f88b 30e0 	strb.w	r3, [fp, #224]	; 0xe0
 8010214:	f88b 20e2 	strb.w	r2, [fp, #226]	; 0xe2
 8010218:	9b00      	ldr	r3, [sp, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d0c0      	beq.n	80101a0 <MEMS_runMagCal.constprop.18+0x828>
 801021e:	ee69 aa09 	vmul.f32	s21, s18, s18
 8010222:	eddf 6aac 	vldr	s13, [pc, #688]	; 80104d4 <MEMS_runMagCal.constprop.18+0xb5c>
 8010226:	f8cd 9000 	str.w	r9, [sp]
 801022a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801022e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8010232:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 8010236:	2300      	movs	r3, #0
 8010238:	ee6a aaa6 	vmul.f32	s21, s21, s13
 801023c:	ee68 8a87 	vmul.f32	s17, s17, s14
 8010240:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010244:	ee69 9a29 	vmul.f32	s19, s18, s19
 8010248:	461c      	mov	r4, r3
 801024a:	9304      	str	r3, [sp, #16]
 801024c:	f81a 1034 	ldrb.w	r1, [sl, r4, lsl #3]
 8010250:	eb0a 02c4 	add.w	r2, sl, r4, lsl #3
 8010254:	b2a4      	uxth	r4, r4
 8010256:	2900      	cmp	r1, #0
 8010258:	f000 80c1 	beq.w	80103de <MEMS_runMagCal.constprop.18+0xa66>
 801025c:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
 8010260:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 8010264:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8010268:	ee07 5a90 	vmov	s15, r5
 801026c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010270:	eef0 7ae7 	vabs.f32	s15, s15
 8010274:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801027c:	d516      	bpl.n	80102ac <MEMS_runMagCal.constprop.18+0x934>
 801027e:	ee07 6a90 	vmov	s15, r6
 8010282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010286:	eef0 7ae7 	vabs.f32	s15, s15
 801028a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801028e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010292:	dd0b      	ble.n	80102ac <MEMS_runMagCal.constprop.18+0x934>
 8010294:	ee07 7a90 	vmov	s15, r7
 8010298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801029c:	eef0 7ae7 	vabs.f32	s15, s15
 80102a0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80102a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102a8:	f300 8099 	bgt.w	80103de <MEMS_runMagCal.constprop.18+0xa66>
 80102ac:	f89b 90e0 	ldrb.w	r9, [fp, #224]	; 0xe0
 80102b0:	f1b9 0f00 	cmp.w	r9, #0
 80102b4:	f000 81c6 	beq.w	8010644 <MEMS_runMagCal.constprop.18+0xccc>
 80102b8:	f9bb 135a 	ldrsh.w	r1, [fp, #858]	; 0x35a
 80102bc:	f9bb 2358 	ldrsh.w	r2, [fp, #856]	; 0x358
 80102c0:	f9bb 335c 	ldrsh.w	r3, [fp, #860]	; 0x35c
 80102c4:	1b89      	subs	r1, r1, r6
 80102c6:	fb01 f101 	mul.w	r1, r1, r1
 80102ca:	1b52      	subs	r2, r2, r5
 80102cc:	fb02 1202 	mla	r2, r2, r2, r1
 80102d0:	1bdb      	subs	r3, r3, r7
 80102d2:	fb03 2303 	mla	r3, r3, r3, r2
 80102d6:	ee07 3a90 	vmov	s15, r3
 80102da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80102de:	eef4 aae7 	vcmpe.f32	s21, s15
 80102e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e6:	dc7a      	bgt.n	80103de <MEMS_runMagCal.constprop.18+0xa66>
 80102e8:	fb95 f3f8 	sdiv	r3, r5, r8
 80102ec:	fb08 5313 	mls	r3, r8, r3, r5
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	bfb8      	it	lt
 80102f4:	4443      	addlt	r3, r8
 80102f6:	b21b      	sxth	r3, r3
 80102f8:	ee07 3a90 	vmov	s15, r3
 80102fc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8010300:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010304:	f006 f922 	bl	801654c <roundf>
 8010308:	fb96 f3f8 	sdiv	r3, r6, r8
 801030c:	fb08 6313 	mls	r3, r8, r3, r6
 8010310:	2b00      	cmp	r3, #0
 8010312:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8010316:	bfb8      	it	lt
 8010318:	4443      	addlt	r3, r8
 801031a:	b21b      	sxth	r3, r3
 801031c:	edcd 7a01 	vstr	s15, [sp, #4]
 8010320:	ee07 3a90 	vmov	s15, r3
 8010324:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8010328:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801032c:	9201      	str	r2, [sp, #4]
 801032e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010332:	f006 f90b 	bl	801654c <roundf>
 8010336:	fb97 f3f8 	sdiv	r3, r7, r8
 801033a:	fb08 7313 	mls	r3, r8, r3, r7
 801033e:	2b00      	cmp	r3, #0
 8010340:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8010344:	bfb8      	it	lt
 8010346:	4443      	addlt	r3, r8
 8010348:	b21b      	sxth	r3, r3
 801034a:	edcd 7a02 	vstr	s15, [sp, #8]
 801034e:	ee07 3a90 	vmov	s15, r3
 8010352:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8010356:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801035a:	9202      	str	r2, [sp, #8]
 801035c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010360:	f006 f8f4 	bl	801654c <roundf>
 8010364:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8010368:	e9db 233a 	ldrd	r2, r3, [fp, #232]	; 0xe8
 801036c:	edcd 7a03 	vstr	s15, [sp, #12]
 8010370:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8010374:	9103      	str	r1, [sp, #12]
 8010376:	9901      	ldr	r1, [sp, #4]
 8010378:	291f      	cmp	r1, #31
 801037a:	f240 8205 	bls.w	8010788 <MEMS_runMagCal.constprop.18+0xe10>
 801037e:	f1a1 0320 	sub.w	r3, r1, #32
 8010382:	2101      	movs	r1, #1
 8010384:	fa01 f303 	lsl.w	r3, r1, r3
 8010388:	4213      	tst	r3, r2
 801038a:	bf08      	it	eq
 801038c:	2100      	moveq	r1, #0
 801038e:	9802      	ldr	r0, [sp, #8]
 8010390:	281f      	cmp	r0, #31
 8010392:	f081 0c01 	eor.w	ip, r1, #1
 8010396:	e9db 233c 	ldrd	r2, r3, [fp, #240]	; 0xf0
 801039a:	f240 81ec 	bls.w	8010776 <MEMS_runMagCal.constprop.18+0xdfe>
 801039e:	f1a0 0320 	sub.w	r3, r0, #32
 80103a2:	2001      	movs	r0, #1
 80103a4:	fa00 f303 	lsl.w	r3, r0, r3
 80103a8:	4213      	tst	r3, r2
 80103aa:	bf14      	ite	ne
 80103ac:	4603      	movne	r3, r0
 80103ae:	2300      	moveq	r3, #0
 80103b0:	9a03      	ldr	r2, [sp, #12]
 80103b2:	2a1f      	cmp	r2, #31
 80103b4:	f083 0001 	eor.w	r0, r3, #1
 80103b8:	f240 8094 	bls.w	80104e4 <MEMS_runMagCal.constprop.18+0xb6c>
 80103bc:	f1a2 0e20 	sub.w	lr, r2, #32
 80103c0:	f8db 20fc 	ldr.w	r2, [fp, #252]	; 0xfc
 80103c4:	9207      	str	r2, [sp, #28]
 80103c6:	2201      	movs	r2, #1
 80103c8:	fa02 fe0e 	lsl.w	lr, r2, lr
 80103cc:	9a07      	ldr	r2, [sp, #28]
 80103ce:	ea1e 0f02 	tst.w	lr, r2
 80103d2:	f000 8094 	beq.w	80104fe <MEMS_runMagCal.constprop.18+0xb86>
 80103d6:	ea5c 0300 	orrs.w	r3, ip, r0
 80103da:	f040 80e6 	bne.w	80105aa <MEMS_runMagCal.constprop.18+0xc32>
 80103de:	3401      	adds	r4, #1
 80103e0:	9a00      	ldr	r2, [sp, #0]
 80103e2:	b224      	sxth	r4, r4
 80103e4:	42a2      	cmp	r2, r4
 80103e6:	4623      	mov	r3, r4
 80103e8:	f73f af30 	bgt.w	801024c <MEMS_runMagCal.constprop.18+0x8d4>
 80103ec:	f89b 30dc 	ldrb.w	r3, [fp, #220]	; 0xdc
 80103f0:	9a04      	ldr	r2, [sp, #16]
 80103f2:	431a      	orrs	r2, r3
 80103f4:	f88b 20dc 	strb.w	r2, [fp, #220]	; 0xdc
 80103f8:	2a00      	cmp	r2, #0
 80103fa:	f43f ad2a 	beq.w	800fe52 <MEMS_runMagCal.constprop.18+0x4da>
 80103fe:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
 8010402:	9303      	str	r3, [sp, #12]
 8010404:	2b18      	cmp	r3, #24
 8010406:	f67f ad24 	bls.w	800fe52 <MEMS_runMagCal.constprop.18+0x4da>
 801040a:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 801040e:	b16b      	cbz	r3, 801042c <MEMS_runMagCal.constprop.18+0xab4>
 8010410:	ee07 3a90 	vmov	s15, r3
 8010414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010418:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801041c:	ee3a aa67 	vsub.f32	s20, s20, s15
 8010420:	eeb4 aac7 	vcmpe.f32	s20, s14
 8010424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010428:	f53f ad13 	bmi.w	800fe52 <MEMS_runMagCal.constprop.18+0x4da>
 801042c:	f8db 30f4 	ldr.w	r3, [fp, #244]	; 0xf4
 8010430:	9300      	str	r3, [sp, #0]
 8010432:	f8db 30f8 	ldr.w	r3, [fp, #248]	; 0xf8
 8010436:	9302      	str	r3, [sp, #8]
 8010438:	2200      	movs	r2, #0
 801043a:	f8db 30fc 	ldr.w	r3, [fp, #252]	; 0xfc
 801043e:	9301      	str	r3, [sp, #4]
 8010440:	4611      	mov	r1, r2
 8010442:	eddb 8a01 	vldr	s17, [fp, #4]
 8010446:	f8db e0f0 	ldr.w	lr, [fp, #240]	; 0xf0
 801044a:	9219      	str	r2, [sp, #100]	; 0x64
 801044c:	e9db 893a 	ldrd	r8, r9, [fp, #232]	; 0xe8
 8010450:	4610      	mov	r0, r2
 8010452:	4613      	mov	r3, r2
 8010454:	4615      	mov	r5, r2
 8010456:	e9cd 221a 	strd	r2, r2, [sp, #104]	; 0x68
 801045a:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
 801045e:	921e      	str	r2, [sp, #120]	; 0x78
 8010460:	f04f 0c01 	mov.w	ip, #1
 8010464:	e012      	b.n	801048c <MEMS_runMagCal.constprop.18+0xb14>
 8010466:	9c01      	ldr	r4, [sp, #4]
 8010468:	2f00      	cmp	r7, #0
 801046a:	bf18      	it	ne
 801046c:	3501      	addne	r5, #1
 801046e:	2e00      	cmp	r6, #0
 8010470:	bf18      	it	ne
 8010472:	3301      	addne	r3, #1
 8010474:	4214      	tst	r4, r2
 8010476:	b2ed      	uxtb	r5, r5
 8010478:	b2db      	uxtb	r3, r3
 801047a:	bf14      	ite	ne
 801047c:	2201      	movne	r2, #1
 801047e:	2200      	moveq	r2, #0
 8010480:	3101      	adds	r1, #1
 8010482:	4410      	add	r0, r2
 8010484:	2940      	cmp	r1, #64	; 0x40
 8010486:	b2c0      	uxtb	r0, r0
 8010488:	f000 8213 	beq.w	80108b2 <MEMS_runMagCal.constprop.18+0xf3a>
 801048c:	f1a1 0220 	sub.w	r2, r1, #32
 8010490:	fa0c f202 	lsl.w	r2, ip, r2
 8010494:	291f      	cmp	r1, #31
 8010496:	fa0c f401 	lsl.w	r4, ip, r1
 801049a:	ea08 0702 	and.w	r7, r8, r2
 801049e:	ea0e 0602 	and.w	r6, lr, r2
 80104a2:	d8e0      	bhi.n	8010466 <MEMS_runMagCal.constprop.18+0xaee>
 80104a4:	9a00      	ldr	r2, [sp, #0]
 80104a6:	ea19 0f04 	tst.w	r9, r4
 80104aa:	bf18      	it	ne
 80104ac:	3501      	addne	r5, #1
 80104ae:	ea02 0204 	and.w	r2, r2, r4
 80104b2:	bf18      	it	ne
 80104b4:	b2ed      	uxtbne	r5, r5
 80104b6:	2a00      	cmp	r2, #0
 80104b8:	bf18      	it	ne
 80104ba:	3301      	addne	r3, #1
 80104bc:	9a02      	ldr	r2, [sp, #8]
 80104be:	4222      	tst	r2, r4
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	bf14      	ite	ne
 80104c4:	2201      	movne	r2, #1
 80104c6:	2200      	moveq	r2, #0
 80104c8:	e7da      	b.n	8010480 <MEMS_runMagCal.constprop.18+0xb08>
 80104ca:	bf00      	nop
 80104cc:	3c23d70a 	.word	0x3c23d70a
 80104d0:	3a83126f 	.word	0x3a83126f
 80104d4:	3f666666 	.word	0x3f666666
 80104d8:	4952f000 	.word	0x4952f000
 80104dc:	4828c000 	.word	0x4828c000
 80104e0:	43480000 	.word	0x43480000
 80104e4:	f8db 20f8 	ldr.w	r2, [fp, #248]	; 0xf8
 80104e8:	9207      	str	r2, [sp, #28]
 80104ea:	9a03      	ldr	r2, [sp, #12]
 80104ec:	f04f 0e01 	mov.w	lr, #1
 80104f0:	fa0e fe02 	lsl.w	lr, lr, r2
 80104f4:	9a07      	ldr	r2, [sp, #28]
 80104f6:	ea1e 0f02 	tst.w	lr, r2
 80104fa:	f47f af6c 	bne.w	80103d6 <MEMS_runMagCal.constprop.18+0xa5e>
 80104fe:	f99b 20e2 	ldrsb.w	r2, [fp, #226]	; 0xe2
 8010502:	f89b c0e1 	ldrb.w	ip, [fp, #225]	; 0xe1
 8010506:	3201      	adds	r2, #1
 8010508:	9207      	str	r2, [sp, #28]
 801050a:	2900      	cmp	r1, #0
 801050c:	d153      	bne.n	80105b6 <MEMS_runMagCal.constprop.18+0xc3e>
 801050e:	2b00      	cmp	r3, #0
 8010510:	d151      	bne.n	80105b6 <MEMS_runMagCal.constprop.18+0xc3e>
 8010512:	fb92 f3fc 	sdiv	r3, r2, ip
 8010516:	9806      	ldr	r0, [sp, #24]
 8010518:	f8bb e002 	ldrh.w	lr, [fp, #2]
 801051c:	f8ab 5358 	strh.w	r5, [fp, #856]	; 0x358
 8010520:	fb0c 2213 	mls	r2, ip, r3, r2
 8010524:	f8db 30e4 	ldr.w	r3, [fp, #228]	; 0xe4
 8010528:	f8ab 635a 	strh.w	r6, [fp, #858]	; 0x35a
 801052c:	b251      	sxtb	r1, r2
 801052e:	f109 0201 	add.w	r2, r9, #1
 8010532:	4562      	cmp	r2, ip
 8010534:	eba0 0303 	sub.w	r3, r0, r3
 8010538:	bfa8      	it	ge
 801053a:	4662      	movge	r2, ip
 801053c:	fb1e 3004 	smlabb	r0, lr, r4, r3
 8010540:	1d0b      	adds	r3, r1, #4
 8010542:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8010546:	b2d2      	uxtb	r2, r2
 8010548:	4562      	cmp	r2, ip
 801054a:	f88b 20e0 	strb.w	r2, [fp, #224]	; 0xe0
 801054e:	f8ab 735c 	strh.w	r7, [fp, #860]	; 0x35c
 8010552:	f88b 10e2 	strb.w	r1, [fp, #226]	; 0xe2
 8010556:	f8a3 50e2 	strh.w	r5, [r3, #226]	; 0xe2
 801055a:	f8a3 60e4 	strh.w	r6, [r3, #228]	; 0xe4
 801055e:	f8a3 70e6 	strh.w	r7, [r3, #230]	; 0xe6
 8010562:	f8a3 00e0 	strh.w	r0, [r3, #224]	; 0xe0
 8010566:	f001 82ae 	beq.w	8011ac6 <MEMS_runMagCal.constprop.18+0x214e>
 801056a:	9b01      	ldr	r3, [sp, #4]
 801056c:	2b1f      	cmp	r3, #31
 801056e:	f240 8195 	bls.w	801089c <MEMS_runMagCal.constprop.18+0xf24>
 8010572:	f8db 20e8 	ldr.w	r2, [fp, #232]	; 0xe8
 8010576:	3b20      	subs	r3, #32
 8010578:	2101      	movs	r1, #1
 801057a:	fa01 f303 	lsl.w	r3, r1, r3
 801057e:	ea23 0302 	bic.w	r3, r3, r2
 8010582:	4053      	eors	r3, r2
 8010584:	f8cb 30e8 	str.w	r3, [fp, #232]	; 0xe8
 8010588:	9b02      	ldr	r3, [sp, #8]
 801058a:	2b1f      	cmp	r3, #31
 801058c:	f240 817b 	bls.w	8010886 <MEMS_runMagCal.constprop.18+0xf0e>
 8010590:	f8db 20f0 	ldr.w	r2, [fp, #240]	; 0xf0
 8010594:	3b20      	subs	r3, #32
 8010596:	2101      	movs	r1, #1
 8010598:	fa01 f303 	lsl.w	r3, r1, r3
 801059c:	ea23 0302 	bic.w	r3, r3, r2
 80105a0:	4053      	eors	r3, r2
 80105a2:	f8cb 30f0 	str.w	r3, [fp, #240]	; 0xf0
 80105a6:	9b03      	ldr	r3, [sp, #12]
 80105a8:	e0ca      	b.n	8010740 <MEMS_runMagCal.constprop.18+0xdc8>
 80105aa:	f99b 20e2 	ldrsb.w	r2, [fp, #226]	; 0xe2
 80105ae:	f89b c0e1 	ldrb.w	ip, [fp, #225]	; 0xe1
 80105b2:	1c53      	adds	r3, r2, #1
 80105b4:	9307      	str	r3, [sp, #28]
 80105b6:	45e1      	cmp	r9, ip
 80105b8:	9b07      	ldr	r3, [sp, #28]
 80105ba:	f000 813c 	beq.w	8010836 <MEMS_runMagCal.constprop.18+0xebe>
 80105be:	eba3 0209 	sub.w	r2, r3, r9
 80105c2:	fb92 f3fc 	sdiv	r3, r2, ip
 80105c6:	fb0c 2313 	mls	r3, ip, r3, r2
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	fa0f fe83 	sxth.w	lr, r3
 80105d0:	bfbc      	itt	lt
 80105d2:	4463      	addlt	r3, ip
 80105d4:	fa0f fe83 	sxthlt.w	lr, r3
 80105d8:	2200      	movs	r2, #0
 80105da:	eb0e 0102 	add.w	r1, lr, r2
 80105de:	fb91 f3fc 	sdiv	r3, r1, ip
 80105e2:	fb0c 1313 	mls	r3, ip, r3, r1
 80105e6:	b2db      	uxtb	r3, r3
 80105e8:	3304      	adds	r3, #4
 80105ea:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80105ee:	3201      	adds	r2, #1
 80105f0:	f9b3 00e2 	ldrsh.w	r0, [r3, #226]	; 0xe2
 80105f4:	f9b3 10e4 	ldrsh.w	r1, [r3, #228]	; 0xe4
 80105f8:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	; 0xe6
 80105fc:	1a28      	subs	r0, r5, r0
 80105fe:	1a71      	subs	r1, r6, r1
 8010600:	ee06 0a90 	vmov	s13, r0
 8010604:	ee07 1a10 	vmov	s14, r1
 8010608:	1afb      	subs	r3, r7, r3
 801060a:	ee07 3a90 	vmov	s15, r3
 801060e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010612:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010616:	eef0 6ae6 	vabs.f32	s13, s13
 801061a:	eeb0 7ac7 	vabs.f32	s14, s14
 801061e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010622:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010626:	eef0 7ae7 	vabs.f32	s15, s15
 801062a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801062e:	b2d3      	uxtb	r3, r2
 8010630:	eef4 9ae7 	vcmpe.f32	s19, s15
 8010634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010638:	f73f aed1 	bgt.w	80103de <MEMS_runMagCal.constprop.18+0xa66>
 801063c:	4599      	cmp	r9, r3
 801063e:	d8cc      	bhi.n	80105da <MEMS_runMagCal.constprop.18+0xc62>
 8010640:	9a07      	ldr	r2, [sp, #28]
 8010642:	e766      	b.n	8010512 <MEMS_runMagCal.constprop.18+0xb9a>
 8010644:	f8db 20e4 	ldr.w	r2, [fp, #228]	; 0xe4
 8010648:	f88b 90e2 	strb.w	r9, [fp, #226]	; 0xe2
 801064c:	f04f 0101 	mov.w	r1, #1
 8010650:	f88b 10e0 	strb.w	r1, [fp, #224]	; 0xe0
 8010654:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8010658:	2a00      	cmp	r2, #0
 801065a:	f040 80c5 	bne.w	80107e8 <MEMS_runMagCal.constprop.18+0xe70>
 801065e:	9806      	ldr	r0, [sp, #24]
 8010660:	fb03 0301 	mla	r3, r3, r1, r0
 8010664:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 8010668:	fb95 f3f8 	sdiv	r3, r5, r8
 801066c:	fb08 5313 	mls	r3, r8, r3, r5
 8010670:	2b00      	cmp	r3, #0
 8010672:	bfb8      	it	lt
 8010674:	4443      	addlt	r3, r8
 8010676:	b21b      	sxth	r3, r3
 8010678:	ee00 3a10 	vmov	s0, r3
 801067c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8010680:	f8ab 2100 	strh.w	r2, [fp, #256]	; 0x100
 8010684:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010688:	f8ab 5102 	strh.w	r5, [fp, #258]	; 0x102
 801068c:	f8ab 5358 	strh.w	r5, [fp, #856]	; 0x358
 8010690:	f8ab 6104 	strh.w	r6, [fp, #260]	; 0x104
 8010694:	f8ab 635a 	strh.w	r6, [fp, #858]	; 0x35a
 8010698:	f8ab 7106 	strh.w	r7, [fp, #262]	; 0x106
 801069c:	f8ab 735c 	strh.w	r7, [fp, #860]	; 0x35c
 80106a0:	f005 ff54 	bl	801654c <roundf>
 80106a4:	fb96 f3f8 	sdiv	r3, r6, r8
 80106a8:	fb08 6613 	mls	r6, r8, r3, r6
 80106ac:	2e00      	cmp	r6, #0
 80106ae:	bfb8      	it	lt
 80106b0:	4446      	addlt	r6, r8
 80106b2:	b233      	sxth	r3, r6
 80106b4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80106b8:	ee00 3a10 	vmov	s0, r3
 80106bc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80106c0:	edcd 7a01 	vstr	s15, [sp, #4]
 80106c4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80106c8:	f005 ff40 	bl	801654c <roundf>
 80106cc:	fb97 f3f8 	sdiv	r3, r7, r8
 80106d0:	fb08 7713 	mls	r7, r8, r3, r7
 80106d4:	2f00      	cmp	r7, #0
 80106d6:	bfb8      	it	lt
 80106d8:	4447      	addlt	r7, r8
 80106da:	b23b      	sxth	r3, r7
 80106dc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80106e0:	ee00 3a10 	vmov	s0, r3
 80106e4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80106e8:	f89d 5004 	ldrb.w	r5, [sp, #4]
 80106ec:	edcd 7a01 	vstr	s15, [sp, #4]
 80106f0:	ee20 0a08 	vmul.f32	s0, s0, s16
 80106f4:	f005 ff2a 	bl	801654c <roundf>
 80106f8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80106fc:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8010700:	edcd 7a01 	vstr	s15, [sp, #4]
 8010704:	2d1f      	cmp	r5, #31
 8010706:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801070a:	d97e      	bls.n	801080a <MEMS_runMagCal.constprop.18+0xe92>
 801070c:	f8db 10e8 	ldr.w	r1, [fp, #232]	; 0xe8
 8010710:	f1a5 0220 	sub.w	r2, r5, #32
 8010714:	2001      	movs	r0, #1
 8010716:	fa00 f202 	lsl.w	r2, r0, r2
 801071a:	ea22 0201 	bic.w	r2, r2, r1
 801071e:	404a      	eors	r2, r1
 8010720:	f8cb 20e8 	str.w	r2, [fp, #232]	; 0xe8
 8010724:	2e1f      	cmp	r6, #31
 8010726:	d966      	bls.n	80107f6 <MEMS_runMagCal.constprop.18+0xe7e>
 8010728:	f8db 10f0 	ldr.w	r1, [fp, #240]	; 0xf0
 801072c:	f1a6 0220 	sub.w	r2, r6, #32
 8010730:	2001      	movs	r0, #1
 8010732:	fa00 f202 	lsl.w	r2, r0, r2
 8010736:	ea22 0201 	bic.w	r2, r2, r1
 801073a:	404a      	eors	r2, r1
 801073c:	f8cb 20f0 	str.w	r2, [fp, #240]	; 0xf0
 8010740:	2b1f      	cmp	r3, #31
 8010742:	d90c      	bls.n	801075e <MEMS_runMagCal.constprop.18+0xde6>
 8010744:	f8db 20fc 	ldr.w	r2, [fp, #252]	; 0xfc
 8010748:	2101      	movs	r1, #1
 801074a:	3b20      	subs	r3, #32
 801074c:	fa01 f303 	lsl.w	r3, r1, r3
 8010750:	ea23 0302 	bic.w	r3, r3, r2
 8010754:	4053      	eors	r3, r2
 8010756:	f8cb 30fc 	str.w	r3, [fp, #252]	; 0xfc
 801075a:	9104      	str	r1, [sp, #16]
 801075c:	e63f      	b.n	80103de <MEMS_runMagCal.constprop.18+0xa66>
 801075e:	f8db 20f8 	ldr.w	r2, [fp, #248]	; 0xf8
 8010762:	2101      	movs	r1, #1
 8010764:	fa01 f303 	lsl.w	r3, r1, r3
 8010768:	ea23 0302 	bic.w	r3, r3, r2
 801076c:	4053      	eors	r3, r2
 801076e:	f8cb 30f8 	str.w	r3, [fp, #248]	; 0xf8
 8010772:	9104      	str	r1, [sp, #16]
 8010774:	e633      	b.n	80103de <MEMS_runMagCal.constprop.18+0xa66>
 8010776:	4602      	mov	r2, r0
 8010778:	2001      	movs	r0, #1
 801077a:	fa00 f202 	lsl.w	r2, r0, r2
 801077e:	421a      	tst	r2, r3
 8010780:	bf14      	ite	ne
 8010782:	4603      	movne	r3, r0
 8010784:	2300      	moveq	r3, #0
 8010786:	e613      	b.n	80103b0 <MEMS_runMagCal.constprop.18+0xa38>
 8010788:	460a      	mov	r2, r1
 801078a:	2101      	movs	r1, #1
 801078c:	fa01 f202 	lsl.w	r2, r1, r2
 8010790:	421a      	tst	r2, r3
 8010792:	bf08      	it	eq
 8010794:	2100      	moveq	r1, #0
 8010796:	e5fa      	b.n	801038e <MEMS_runMagCal.constprop.18+0xa16>
 8010798:	ee07 3a90 	vmov	s15, r3
 801079c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80107a0:	ed1f 7ab3 	vldr	s14, [pc, #-716]	; 80104d8 <MEMS_runMagCal.constprop.18+0xb60>
 80107a4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80107a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80107ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80107b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107b8:	dc31      	bgt.n	801081e <MEMS_runMagCal.constprop.18+0xea6>
 80107ba:	ed1f 7ab8 	vldr	s14, [pc, #-736]	; 80104dc <MEMS_runMagCal.constprop.18+0xb64>
 80107be:	f89b 80a4 	ldrb.w	r8, [fp, #164]	; 0xa4
 80107c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80107c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ca:	f341 8161 	ble.w	8011a90 <MEMS_runMagCal.constprop.18+0x2118>
 80107ce:	f118 0800 	adds.w	r8, r8, #0
 80107d2:	bf18      	it	ne
 80107d4:	f04f 0801 	movne.w	r8, #1
 80107d8:	f88b 80a4 	strb.w	r8, [fp, #164]	; 0xa4
 80107dc:	f7ff bbc0 	b.w	800ff60 <MEMS_runMagCal.constprop.18+0x5e8>
 80107e0:	2500      	movs	r5, #0
 80107e2:	462a      	mov	r2, r5
 80107e4:	f7ff bb8a 	b.w	800fefc <MEMS_runMagCal.constprop.18+0x584>
 80107e8:	9b06      	ldr	r3, [sp, #24]
 80107ea:	fb11 f104 	smulbb	r1, r1, r4
 80107ee:	1a9a      	subs	r2, r3, r2
 80107f0:	440a      	add	r2, r1
 80107f2:	b212      	sxth	r2, r2
 80107f4:	e738      	b.n	8010668 <MEMS_runMagCal.constprop.18+0xcf0>
 80107f6:	f8db 10f4 	ldr.w	r1, [fp, #244]	; 0xf4
 80107fa:	2201      	movs	r2, #1
 80107fc:	40b2      	lsls	r2, r6
 80107fe:	ea22 0201 	bic.w	r2, r2, r1
 8010802:	404a      	eors	r2, r1
 8010804:	f8cb 20f4 	str.w	r2, [fp, #244]	; 0xf4
 8010808:	e79a      	b.n	8010740 <MEMS_runMagCal.constprop.18+0xdc8>
 801080a:	f8db 10ec 	ldr.w	r1, [fp, #236]	; 0xec
 801080e:	2201      	movs	r2, #1
 8010810:	40aa      	lsls	r2, r5
 8010812:	ea22 0201 	bic.w	r2, r2, r1
 8010816:	404a      	eors	r2, r1
 8010818:	f8cb 20ec 	str.w	r2, [fp, #236]	; 0xec
 801081c:	e782      	b.n	8010724 <MEMS_runMagCal.constprop.18+0xdac>
 801081e:	f04f 0800 	mov.w	r8, #0
 8010822:	f88b 80a4 	strb.w	r8, [fp, #164]	; 0xa4
 8010826:	f7ff bb9b 	b.w	800ff60 <MEMS_runMagCal.constprop.18+0x5e8>
 801082a:	fb92 f7f5 	sdiv	r7, r2, r5
 801082e:	fb05 2217 	mls	r2, r5, r7, r2
 8010832:	b217      	sxth	r7, r2
 8010834:	e466      	b.n	8010104 <MEMS_runMagCal.constprop.18+0x78c>
 8010836:	fb93 fef9 	sdiv	lr, r3, r9
 801083a:	fb09 3e1e 	mls	lr, r9, lr, r3
 801083e:	fa0f fe8e 	sxth.w	lr, lr
 8010842:	e6c9      	b.n	80105d8 <MEMS_runMagCal.constprop.18+0xc60>
 8010844:	f04f 0e01 	mov.w	lr, #1
 8010848:	e468      	b.n	801011c <MEMS_runMagCal.constprop.18+0x7a4>
 801084a:	f99b 3366 	ldrsb.w	r3, [fp, #870]	; 0x366
 801084e:	3301      	adds	r3, #1
 8010850:	fb93 f7f6 	sdiv	r7, r3, r6
 8010854:	fb06 3317 	mls	r3, r6, r7, r3
 8010858:	b29f      	uxth	r7, r3
 801085a:	f7ff bb89 	b.w	800ff70 <MEMS_runMagCal.constprop.18+0x5f8>
 801085e:	ed5f 7ae0 	vldr	s15, [pc, #-896]	; 80104e0 <MEMS_runMagCal.constprop.18+0xb68>
 8010862:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801086a:	f77f ab19 	ble.w	800fea0 <MEMS_runMagCal.constprop.18+0x528>
 801086e:	2201      	movs	r2, #1
 8010870:	2300      	movs	r3, #0
 8010872:	f88b 20a4 	strb.w	r2, [fp, #164]	; 0xa4
 8010876:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
 801087a:	f7ff bb11 	b.w	800fea0 <MEMS_runMagCal.constprop.18+0x528>
 801087e:	2300      	movs	r3, #0
 8010880:	9300      	str	r3, [sp, #0]
 8010882:	f7ff ba39 	b.w	800fcf8 <MEMS_runMagCal.constprop.18+0x380>
 8010886:	f8db 20f4 	ldr.w	r2, [fp, #244]	; 0xf4
 801088a:	2101      	movs	r1, #1
 801088c:	fa01 f303 	lsl.w	r3, r1, r3
 8010890:	ea23 0302 	bic.w	r3, r3, r2
 8010894:	4053      	eors	r3, r2
 8010896:	f8cb 30f4 	str.w	r3, [fp, #244]	; 0xf4
 801089a:	e684      	b.n	80105a6 <MEMS_runMagCal.constprop.18+0xc2e>
 801089c:	f8db 20ec 	ldr.w	r2, [fp, #236]	; 0xec
 80108a0:	2101      	movs	r1, #1
 80108a2:	fa01 f303 	lsl.w	r3, r1, r3
 80108a6:	ea23 0302 	bic.w	r3, r3, r2
 80108aa:	4053      	eors	r3, r2
 80108ac:	f8cb 30ec 	str.w	r3, [fp, #236]	; 0xec
 80108b0:	e66a      	b.n	8010588 <MEMS_runMagCal.constprop.18+0xc10>
 80108b2:	2d05      	cmp	r5, #5
 80108b4:	f241 80fd 	bls.w	8011ab2 <MEMS_runMagCal.constprop.18+0x213a>
 80108b8:	2b05      	cmp	r3, #5
 80108ba:	f241 80fa 	bls.w	8011ab2 <MEMS_runMagCal.constprop.18+0x213a>
 80108be:	2805      	cmp	r0, #5
 80108c0:	f241 80f7 	bls.w	8011ab2 <MEMS_runMagCal.constprop.18+0x213a>
 80108c4:	f89b 40e1 	ldrb.w	r4, [fp, #225]	; 0xe1
 80108c8:	9a03      	ldr	r2, [sp, #12]
 80108ca:	f99b 30e2 	ldrsb.w	r3, [fp, #226]	; 0xe2
 80108ce:	9300      	str	r3, [sp, #0]
 80108d0:	42a2      	cmp	r2, r4
 80108d2:	f103 0301 	add.w	r3, r3, #1
 80108d6:	f001 812b 	beq.w	8011b30 <MEMS_runMagCal.constprop.18+0x21b8>
 80108da:	1a9a      	subs	r2, r3, r2
 80108dc:	fb92 f3f4 	sdiv	r3, r2, r4
 80108e0:	fb04 2313 	mls	r3, r4, r3, r2
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	b21d      	sxth	r5, r3
 80108e8:	bfbc      	itt	lt
 80108ea:	191b      	addlt	r3, r3, r4
 80108ec:	b21d      	sxthlt	r5, r3
 80108ee:	f105 031d 	add.w	r3, r5, #29
 80108f2:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80108f6:	2600      	movs	r6, #0
 80108f8:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 80108fc:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8010900:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8010904:	4689      	mov	r9, r1
 8010906:	4694      	mov	ip, r2
 8010908:	461f      	mov	r7, r3
 801090a:	eb05 0e06 	add.w	lr, r5, r6
 801090e:	fb9e f0f4 	sdiv	r0, lr, r4
 8010912:	fb04 e010 	mls	r0, r4, r0, lr
 8010916:	b2c0      	uxtb	r0, r0
 8010918:	301d      	adds	r0, #29
 801091a:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 801091e:	3601      	adds	r6, #1
 8010920:	f9b0 801a 	ldrsh.w	r8, [r0, #26]
 8010924:	f9b0 e01c 	ldrsh.w	lr, [r0, #28]
 8010928:	f9b0 001e 	ldrsh.w	r0, [r0, #30]
 801092c:	4541      	cmp	r1, r8
 801092e:	bfb8      	it	lt
 8010930:	4641      	movlt	r1, r8
 8010932:	45c1      	cmp	r9, r8
 8010934:	bfa8      	it	ge
 8010936:	46c1      	movge	r9, r8
 8010938:	4572      	cmp	r2, lr
 801093a:	bfb8      	it	lt
 801093c:	4672      	movlt	r2, lr
 801093e:	45f4      	cmp	ip, lr
 8010940:	bfa8      	it	ge
 8010942:	46f4      	movge	ip, lr
 8010944:	4283      	cmp	r3, r0
 8010946:	bfb8      	it	lt
 8010948:	4603      	movlt	r3, r0
 801094a:	4287      	cmp	r7, r0
 801094c:	bfa8      	it	ge
 801094e:	4607      	movge	r7, r0
 8010950:	9803      	ldr	r0, [sp, #12]
 8010952:	fa5f f886 	uxtb.w	r8, r6
 8010956:	4540      	cmp	r0, r8
 8010958:	d8d7      	bhi.n	801090a <MEMS_runMagCal.constprop.18+0xf92>
 801095a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801095e:	ee87 8aa8 	vdiv.f32	s16, s15, s17
 8010962:	f89b 0024 	ldrb.w	r0, [fp, #36]	; 0x24
 8010966:	eba1 0109 	sub.w	r1, r1, r9
 801096a:	eba2 020c 	sub.w	r2, r2, ip
 801096e:	1bdb      	subs	r3, r3, r7
 8010970:	b209      	sxth	r1, r1
 8010972:	b212      	sxth	r2, r2
 8010974:	b21b      	sxth	r3, r3
 8010976:	ed9f 6ae1 	vldr	s12, [pc, #900]	; 8010cfc <MEMS_runMagCal.constprop.18+0x1384>
 801097a:	ee28 6a06 	vmul.f32	s12, s16, s12
 801097e:	2800      	cmp	r0, #0
 8010980:	f041 80d3 	bne.w	8011b2a <MEMS_runMagCal.constprop.18+0x21b2>
 8010984:	f89b 00a4 	ldrb.w	r0, [fp, #164]	; 0xa4
 8010988:	fab0 f080 	clz	r0, r0
 801098c:	0940      	lsrs	r0, r0, #5
 801098e:	ee07 1a90 	vmov	s15, r1
 8010992:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8010996:	ee66 6a26 	vmul.f32	s13, s12, s13
 801099a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801099e:	eef4 5ae6 	vcmpe.f32	s11, s13
 80109a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109a6:	f301 80a3 	bgt.w	8011af0 <MEMS_runMagCal.constprop.18+0x2178>
 80109aa:	ee07 2a90 	vmov	s15, r2
 80109ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80109b2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80109b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ba:	f101 8099 	bmi.w	8011af0 <MEMS_runMagCal.constprop.18+0x2178>
 80109be:	ee07 3a90 	vmov	s15, r3
 80109c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80109c6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80109ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ce:	f101 808f 	bmi.w	8011af0 <MEMS_runMagCal.constprop.18+0x2178>
 80109d2:	2800      	cmp	r0, #0
 80109d4:	f001 80b7 	beq.w	8011b46 <MEMS_runMagCal.constprop.18+0x21ce>
 80109d8:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80109dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109e0:	f301 80ad 	bgt.w	8011b3e <MEMS_runMagCal.constprop.18+0x21c6>
 80109e4:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80109e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ec:	f301 80a7 	bgt.w	8011b3e <MEMS_runMagCal.constprop.18+0x21c6>
 80109f0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80109f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109f8:	bfcc      	ite	gt
 80109fa:	f04f 0801 	movgt.w	r8, #1
 80109fe:	f04f 0800 	movle.w	r8, #0
 8010a02:	eef7 6a02 	vmov.f32	s13, #114	; 0x3f900000  1.125
 8010a06:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8010a0a:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8010a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a12:	f301 804e 	bgt.w	8011ab2 <MEMS_runMagCal.constprop.18+0x213a>
 8010a16:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010a1a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8010a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a22:	f301 8046 	bgt.w	8011ab2 <MEMS_runMagCal.constprop.18+0x213a>
 8010a26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010a2a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a32:	f301 803e 	bgt.w	8011ab2 <MEMS_runMagCal.constprop.18+0x213a>
 8010a36:	fa4f fc85 	sxtb.w	ip, r5
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	f10c 0201 	add.w	r2, ip, #1
 8010a40:	9201      	str	r2, [sp, #4]
 8010a42:	469e      	mov	lr, r3
 8010a44:	4699      	mov	r9, r3
 8010a46:	2701      	movs	r7, #1
 8010a48:	9a01      	ldr	r2, [sp, #4]
 8010a4a:	eb0c 0103 	add.w	r1, ip, r3
 8010a4e:	441a      	add	r2, r3
 8010a50:	fb91 f3f4 	sdiv	r3, r1, r4
 8010a54:	fb04 1313 	mls	r3, r4, r3, r1
 8010a58:	b258      	sxtb	r0, r3
 8010a5a:	2800      	cmp	r0, #0
 8010a5c:	bfb8      	it	lt
 8010a5e:	191b      	addlt	r3, r3, r4
 8010a60:	fb92 f1f4 	sdiv	r1, r2, r4
 8010a64:	fb04 2111 	mls	r1, r4, r1, r2
 8010a68:	bfb8      	it	lt
 8010a6a:	b258      	sxtblt	r0, r3
 8010a6c:	b249      	sxtb	r1, r1
 8010a6e:	3104      	adds	r1, #4
 8010a70:	3004      	adds	r0, #4
 8010a72:	eb0b 03c1 	add.w	r3, fp, r1, lsl #3
 8010a76:	eb0b 02c0 	add.w	r2, fp, r0, lsl #3
 8010a7a:	f9b3 30e2 	ldrsh.w	r3, [r3, #226]	; 0xe2
 8010a7e:	f9b2 20e2 	ldrsh.w	r2, [r2, #226]	; 0xe2
 8010a82:	1a9d      	subs	r5, r3, r2
 8010a84:	2d00      	cmp	r5, #0
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	b292      	uxth	r2, r2
 8010a8a:	bfb4      	ite	lt
 8010a8c:	1ad3      	sublt	r3, r2, r3
 8010a8e:	1a9b      	subge	r3, r3, r2
 8010a90:	b21e      	sxth	r6, r3
 8010a92:	eb0b 02c0 	add.w	r2, fp, r0, lsl #3
 8010a96:	eb0b 03c1 	add.w	r3, fp, r1, lsl #3
 8010a9a:	f9b2 20e4 	ldrsh.w	r2, [r2, #228]	; 0xe4
 8010a9e:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8010aa2:	1a9d      	subs	r5, r3, r2
 8010aa4:	2d00      	cmp	r5, #0
 8010aa6:	b29b      	uxth	r3, r3
 8010aa8:	b292      	uxth	r2, r2
 8010aaa:	bfb4      	ite	lt
 8010aac:	1ad3      	sublt	r3, r2, r3
 8010aae:	1a9b      	subge	r3, r3, r2
 8010ab0:	eb0b 05c0 	add.w	r5, fp, r0, lsl #3
 8010ab4:	eb0b 02c1 	add.w	r2, fp, r1, lsl #3
 8010ab8:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8010abc:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8010ac0:	f9b2 20e6 	ldrsh.w	r2, [r2, #230]	; 0xe6
 8010ac4:	f9b5 50e6 	ldrsh.w	r5, [r5, #230]	; 0xe6
 8010ac8:	f8b1 10e0 	ldrh.w	r1, [r1, #224]	; 0xe0
 8010acc:	f8b0 00e0 	ldrh.w	r0, [r0, #224]	; 0xe0
 8010ad0:	b21b      	sxth	r3, r3
 8010ad2:	9300      	str	r3, [sp, #0]
 8010ad4:	1a09      	subs	r1, r1, r0
 8010ad6:	1b53      	subs	r3, r2, r5
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	b292      	uxth	r2, r2
 8010adc:	b2ad      	uxth	r5, r5
 8010ade:	b209      	sxth	r1, r1
 8010ae0:	bfb4      	ite	lt
 8010ae2:	1aaa      	sublt	r2, r5, r2
 8010ae4:	1b52      	subge	r2, r2, r5
 8010ae6:	2900      	cmp	r1, #0
 8010ae8:	b212      	sxth	r2, r2
 8010aea:	dd21      	ble.n	8010b30 <MEMS_runMagCal.constprop.18+0x11b8>
 8010aec:	9b00      	ldr	r3, [sp, #0]
 8010aee:	4433      	add	r3, r6
 8010af0:	441a      	add	r2, r3
 8010af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010af6:	fb03 f202 	mul.w	r2, r3, r2
 8010afa:	ee07 2a90 	vmov	s15, r2
 8010afe:	ee07 1a10 	vmov	s14, r1
 8010b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010b0a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8010b0e:	f109 0901 	add.w	r9, r9, #1
 8010b12:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8010b16:	fa5f f989 	uxtb.w	r9, r9
 8010b1a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8010b1e:	ee17 3a90 	vmov	r3, s15
 8010b22:	b21b      	sxth	r3, r3
 8010b24:	2b64      	cmp	r3, #100	; 0x64
 8010b26:	bfc4      	itt	gt
 8010b28:	f10e 0e01 	addgt.w	lr, lr, #1
 8010b2c:	fa5f fe8e 	uxtbgt.w	lr, lr
 8010b30:	463b      	mov	r3, r7
 8010b32:	9903      	ldr	r1, [sp, #12]
 8010b34:	3701      	adds	r7, #1
 8010b36:	b2fa      	uxtb	r2, r7
 8010b38:	4291      	cmp	r1, r2
 8010b3a:	d885      	bhi.n	8010a48 <MEMS_runMagCal.constprop.18+0x10d0>
 8010b3c:	ebb9 0f8e 	cmp.w	r9, lr, lsl #2
 8010b40:	f280 87b7 	bge.w	8011ab2 <MEMS_runMagCal.constprop.18+0x213a>
 8010b44:	f89b 30a4 	ldrb.w	r3, [fp, #164]	; 0xa4
 8010b48:	3b02      	subs	r3, #2
 8010b4a:	2b01      	cmp	r3, #1
 8010b4c:	f201 8033 	bhi.w	8011bb6 <MEMS_runMagCal.constprop.18+0x223e>
 8010b50:	4e6b      	ldr	r6, [pc, #428]	; (8010d00 <MEMS_runMagCal.constprop.18+0x1388>)
 8010b52:	2400      	movs	r4, #0
 8010b54:	ad16      	add	r5, sp, #88	; 0x58
 8010b56:	ecb6 0a01 	vldmia	r6!, {s0}
 8010b5a:	f005 fcf7 	bl	801654c <roundf>
 8010b5e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010b62:	ee10 3a10 	vmov	r3, s0
 8010b66:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
 8010b6a:	3401      	adds	r4, #1
 8010b6c:	2c03      	cmp	r4, #3
 8010b6e:	d1f2      	bne.n	8010b56 <MEMS_runMagCal.constprop.18+0x11de>
 8010b70:	ab10      	add	r3, sp, #64	; 0x40
 8010b72:	aa13      	add	r2, sp, #76	; 0x4c
 8010b74:	eeb0 0a68 	vmov.f32	s0, s17
 8010b78:	4962      	ldr	r1, [pc, #392]	; (8010d04 <MEMS_runMagCal.constprop.18+0x138c>)
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	f7fd fca6 	bl	800e4cc <getMagStats.constprop.28>
 8010b80:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 8010b84:	eddf 7a60 	vldr	s15, [pc, #384]	; 8010d08 <MEMS_runMagCal.constprop.18+0x1390>
 8010b88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b90:	eefc baeb 	vcvt.u32.f32	s23, s23
 8010b94:	d50f      	bpl.n	8010bb6 <MEMS_runMagCal.constprop.18+0x123e>
 8010b96:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8010d0c <MEMS_runMagCal.constprop.18+0x1394>
 8010b9a:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8010b9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010ba2:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8010ba6:	eef0 7ae7 	vabs.f32	s15, s15
 8010baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bb2:	f101 8005 	bmi.w	8011bc0 <MEMS_runMagCal.constprop.18+0x2248>
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	602b      	str	r3, [r5, #0]
 8010bba:	80ab      	strh	r3, [r5, #4]
 8010bbc:	ae1f      	add	r6, sp, #124	; 0x7c
 8010bbe:	aa0f      	add	r2, sp, #60	; 0x3c
 8010bc0:	4630      	mov	r0, r6
 8010bc2:	4629      	mov	r1, r5
 8010bc4:	eeb0 0a68 	vmov.f32	s0, s17
 8010bc8:	f7fd fd8a 	bl	800e6e0 <MEMS_solveEllipsoid.constprop.25>
 8010bcc:	edcb ba28 	vstr	s23, [fp, #160]	; 0xa0
 8010bd0:	2800      	cmp	r0, #0
 8010bd2:	f000 876e 	beq.w	8011ab2 <MEMS_runMagCal.constprop.18+0x213a>
 8010bd6:	eeb0 0a68 	vmov.f32	s0, s17
 8010bda:	ab10      	add	r3, sp, #64	; 0x40
 8010bdc:	aa13      	add	r2, sp, #76	; 0x4c
 8010bde:	4631      	mov	r1, r6
 8010be0:	4628      	mov	r0, r5
 8010be2:	f7fd fc73 	bl	800e4cc <getMagStats.constprop.28>
 8010be6:	bb78      	cbnz	r0, 8010c48 <MEMS_runMagCal.constprop.18+0x12d0>
 8010be8:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8010bec:	ed9f 6a47 	vldr	s12, [pc, #284]	; 8010d0c <MEMS_runMagCal.constprop.18+0x1394>
 8010bf0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8010d10 <MEMS_runMagCal.constprop.18+0x1398>
 8010bf4:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8010bf8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c00:	eef0 7ae7 	vabs.f32	s15, s15
 8010c04:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c0c:	d51c      	bpl.n	8010c48 <MEMS_runMagCal.constprop.18+0x12d0>
 8010c0e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8010d14 <MEMS_runMagCal.constprop.18+0x139c>
 8010c12:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c1a:	dd15      	ble.n	8010c48 <MEMS_runMagCal.constprop.18+0x12d0>
 8010c1c:	4633      	mov	r3, r6
 8010c1e:	ed93 6a00 	vldr	s12, [r3]
 8010c22:	edd3 6a01 	vldr	s13, [r3, #4]
 8010c26:	edd3 7a02 	vldr	s15, [r3, #8]
 8010c2a:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010c2e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8010c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010c36:	ed83 6a00 	vstr	s12, [r3]
 8010c3a:	edc3 6a01 	vstr	s13, [r3, #4]
 8010c3e:	edc3 7a02 	vstr	s15, [r3, #8]
 8010c42:	330c      	adds	r3, #12
 8010c44:	459a      	cmp	sl, r3
 8010c46:	d1ea      	bne.n	8010c1e <MEMS_runMagCal.constprop.18+0x12a6>
 8010c48:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
 8010c4c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8010d18 <MEMS_runMagCal.constprop.18+0x13a0>
 8010c50:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 8010c54:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8010c58:	005b      	lsls	r3, r3, #1
 8010c5a:	ee07 3a90 	vmov	s15, r3
 8010c5e:	ee06 0a90 	vmov	s13, r0
 8010c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c66:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010c6a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010c6e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c76:	f300 87ae 	bgt.w	8011bd6 <MEMS_runMagCal.constprop.18+0x225e>
 8010c7a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8010c7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c86:	f341 85cd 	ble.w	8012824 <MEMS_runMagCal.constprop.18+0x2eac>
 8010c8a:	f89b 7024 	ldrb.w	r7, [fp, #36]	; 0x24
 8010c8e:	fab7 f787 	clz	r7, r7
 8010c92:	097f      	lsrs	r7, r7, #5
 8010c94:	ed96 6a04 	vldr	s12, [r6, #16]
 8010c98:	edd6 8a00 	vldr	s17, [r6]
 8010c9c:	edd6 6a08 	vldr	s13, [r6, #32]
 8010ca0:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
 8010ca4:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8010d1c <MEMS_runMagCal.constprop.18+0x13a4>
 8010ca8:	ed96 aa03 	vldr	s20, [r6, #12]
 8010cac:	edd6 9a06 	vldr	s19, [r6, #24]
 8010cb0:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 8010cb4:	9300      	str	r3, [sp, #0]
 8010cb6:	ee78 8a86 	vadd.f32	s17, s17, s12
 8010cba:	ee28 7a07 	vmul.f32	s14, s16, s14
 8010cbe:	ee78 8aa6 	vadd.f32	s17, s17, s13
 8010cc2:	ee87 0a00 	vdiv.f32	s0, s14, s0
 8010cc6:	9319      	str	r3, [sp, #100]	; 0x64
 8010cc8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010ccc:	ed96 9a07 	vldr	s18, [r6, #28]
 8010cd0:	f005 fc3c 	bl	801654c <roundf>
 8010cd4:	eeb0 7ae9 	vabs.f32	s14, s19
 8010cd8:	eef0 7aca 	vabs.f32	s15, s20
 8010cdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010ce0:	eeb0 7ac9 	vabs.f32	s14, s18
 8010ce4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010ce8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8010d20 <MEMS_runMagCal.constprop.18+0x13a8>
 8010cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010cf0:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 8010cf4:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 8010cf8:	e016      	b.n	8010d28 <MEMS_runMagCal.constprop.18+0x13b0>
 8010cfa:	bf00      	nop
 8010cfc:	42340000 	.word	0x42340000
 8010d00:	200016e8 	.word	0x200016e8
 8010d04:	200016f4 	.word	0x200016f4
 8010d08:	3fd9999a 	.word	0x3fd9999a
 8010d0c:	423c0000 	.word	0x423c0000
 8010d10:	3eb33333 	.word	0x3eb33333
 8010d14:	3dcccccd 	.word	0x3dcccccd
 8010d18:	3c23d70a 	.word	0x3c23d70a
 8010d1c:	3eaaaaab 	.word	0x3eaaaaab
 8010d20:	42055556 	.word	0x42055556
 8010d24:	447a0000 	.word	0x447a0000
 8010d28:	ee17 3a10 	vmov	r3, s14
 8010d2c:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8010d30:	f005 fc0c 	bl	801654c <roundf>
 8010d34:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8010d38:	ed1f 6a06 	vldr	s12, [pc, #-24]	; 8010d24 <MEMS_runMagCal.constprop.18+0x13ac>
 8010d3c:	ee17 1a90 	vmov	r1, s15
 8010d40:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8010d44:	2300      	movs	r3, #0
 8010d46:	f88d 1069 	strb.w	r1, [sp, #105]	; 0x69
 8010d4a:	eb06 1103 	add.w	r1, r6, r3, lsl #4
 8010d4e:	edd1 7a00 	vldr	s15, [r1]
 8010d52:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 8010d56:	f822 1c04 	strh.w	r1, [r2, #-4]
 8010d5a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010d5e:	3301      	adds	r3, #1
 8010d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d64:	2b03      	cmp	r3, #3
 8010d66:	ee17 1a90 	vmov	r1, s15
 8010d6a:	f822 1f02 	strh.w	r1, [r2, #2]!
 8010d6e:	d1ec      	bne.n	8010d4a <MEMS_runMagCal.constprop.18+0x13d2>
 8010d70:	ee6a 6a06 	vmul.f32	s13, s20, s12
 8010d74:	ee29 7a86 	vmul.f32	s14, s19, s12
 8010d78:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8010d7c:	ee69 7a06 	vmul.f32	s15, s18, s12
 8010d80:	ee16 3a90 	vmov	r3, s13
 8010d84:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8010d88:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
 8010d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d90:	ee17 3a10 	vmov	r3, s14
 8010d94:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
 8010d98:	ee17 3a90 	vmov	r3, s15
 8010d9c:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
 8010da0:	f1b8 0f00 	cmp.w	r8, #0
 8010da4:	d00b      	beq.n	8010dbe <MEMS_runMagCal.constprop.18+0x1446>
 8010da6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8010daa:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010dae:	f005 fbcd 	bl	801654c <roundf>
 8010db2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8010db6:	ee17 3a90 	vmov	r3, s15
 8010dba:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	f88b 30dc 	strb.w	r3, [fp, #220]	; 0xdc
 8010dc4:	2f00      	cmp	r7, #0
 8010dc6:	f43f a844 	beq.w	800fe52 <MEMS_runMagCal.constprop.18+0x4da>
 8010dca:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8010dce:	eddb ba01 	vldr	s23, [fp, #4]
 8010dd2:	f89b 4024 	ldrb.w	r4, [fp, #36]	; 0x24
 8010dd6:	ee05 3a90 	vmov	s11, r3
 8010dda:	eeb8 eae5 	vcvt.f32.s32	s28, s11
 8010dde:	ee2e 6a2b 	vmul.f32	s12, s28, s23
 8010de2:	2c00      	cmp	r4, #0
 8010de4:	f040 86fa 	bne.w	8011bdc <MEMS_runMagCal.constprop.18+0x2264>
 8010de8:	eeb4 bac6 	vcmpe.f32	s22, s12
 8010dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010df0:	d503      	bpl.n	8010dfa <MEMS_runMagCal.constprop.18+0x1482>
 8010df2:	9b05      	ldr	r3, [sp, #20]
 8010df4:	2b09      	cmp	r3, #9
 8010df6:	f67f a82c 	bls.w	800fe52 <MEMS_runMagCal.constprop.18+0x4da>
 8010dfa:	f8db 30d8 	ldr.w	r3, [fp, #216]	; 0xd8
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	f040 86ec 	bne.w	8011bdc <MEMS_runMagCal.constprop.18+0x2264>
 8010e04:	ac19      	add	r4, sp, #100	; 0x64
 8010e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e08:	4feb      	ldr	r7, [pc, #940]	; (80111b8 <MEMS_runMagCal.constprop.18+0x1840>)
 8010e0a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010e0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010e10:	e887 0003 	stmia.w	r7, {r0, r1}
 8010e14:	2401      	movs	r4, #1
 8010e16:	f88b 4024 	strb.w	r4, [fp, #36]	; 0x24
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8010e20:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8010e24:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8010e28:	e9c5 3300 	strd	r3, r3, [r5]
 8010e2c:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
 8010e30:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 8010e34:	9320      	str	r3, [sp, #128]	; 0x80
 8010e36:	60ab      	str	r3, [r5, #8]
 8010e38:	f89b 202c 	ldrb.w	r2, [fp, #44]	; 0x2c
 8010e3c:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 8010e40:	ee07 2a10 	vmov	s14, r2
 8010e44:	9a00      	ldr	r2, [sp, #0]
 8010e46:	1ad3      	subs	r3, r2, r3
 8010e48:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8010e4c:	f0c1 81f1 	bcc.w	8012232 <MEMS_runMagCal.constprop.18+0x28ba>
 8010e50:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8010e54:	f081 81d6 	bcs.w	8012204 <MEMS_runMagCal.constprop.18+0x288c>
 8010e58:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8010e5c:	ee07 3a90 	vmov	s15, r3
 8010e60:	ed9f 6ad6 	vldr	s12, [pc, #856]	; 80111bc <MEMS_runMagCal.constprop.18+0x1844>
 8010e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e6c:	eee7 6ac6 	vfms.f32	s13, s15, s12
 8010e70:	eef0 7a66 	vmov.f32	s15, s13
 8010e74:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8010e78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010e7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010e80:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010e84:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8010e88:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e90:	f101 8189 	bmi.w	80121a6 <MEMS_runMagCal.constprop.18+0x282e>
 8010e94:	eef0 6a0c 	vmov.f32	s13, #12	; 0x40600000  3.5
 8010e98:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea0:	f101 817b 	bmi.w	801219a <MEMS_runMagCal.constprop.18+0x2822>
 8010ea4:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8010ea8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb0:	bf44      	itt	mi
 8010eb2:	eeb7 7a00 	vmovmi.f32	s14, #112	; 0x3f800000  1.0
 8010eb6:	ee77 7a87 	vaddmi.f32	s15, s15, s14
 8010eba:	2c01      	cmp	r4, #1
 8010ebc:	edc6 7a00 	vstr	s15, [r6]
 8010ec0:	f240 8158 	bls.w	8011174 <MEMS_runMagCal.constprop.18+0x17fc>
 8010ec4:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
 8010ec8:	9900      	ldr	r1, [sp, #0]
 8010eca:	f89b 2044 	ldrb.w	r2, [fp, #68]	; 0x44
 8010ece:	1acb      	subs	r3, r1, r3
 8010ed0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8010ed4:	f0c1 8147 	bcc.w	8012166 <MEMS_runMagCal.constprop.18+0x27ee>
 8010ed8:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8010edc:	f081 8423 	bcs.w	8012726 <MEMS_runMagCal.constprop.18+0x2dae>
 8010ee0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8010ee4:	ee07 3a10 	vmov	s14, r3
 8010ee8:	ed9f 6ab4 	vldr	s12, [pc, #720]	; 80111bc <MEMS_runMagCal.constprop.18+0x1844>
 8010eec:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8010ef0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010ef4:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8010ef8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8010efc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010f00:	ee06 2a90 	vmov	s13, r2
 8010f04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010f08:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8010f0c:	ee66 6aab 	vmul.f32	s13, s13, s23
 8010f10:	eef4 6ac6 	vcmpe.f32	s13, s12
 8010f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f18:	f101 811f 	bmi.w	801215a <MEMS_runMagCal.constprop.18+0x27e2>
 8010f1c:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
 8010f20:	eef4 6ac6 	vcmpe.f32	s13, s12
 8010f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f28:	f101 83f7 	bmi.w	801271a <MEMS_runMagCal.constprop.18+0x2da2>
 8010f2c:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8010f30:	eef4 6ac6 	vcmpe.f32	s13, s12
 8010f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f38:	bf44      	itt	mi
 8010f3a:	eef7 6a00 	vmovmi.f32	s13, #112	; 0x3f800000  1.0
 8010f3e:	ee37 7a26 	vaddmi.f32	s14, s14, s13
 8010f42:	2c02      	cmp	r4, #2
 8010f44:	ed86 7a01 	vstr	s14, [r6, #4]
 8010f48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f4c:	f000 8112 	beq.w	8011174 <MEMS_runMagCal.constprop.18+0x17fc>
 8010f50:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8010f54:	9900      	ldr	r1, [sp, #0]
 8010f56:	f89b 205c 	ldrb.w	r2, [fp, #92]	; 0x5c
 8010f5a:	1acb      	subs	r3, r1, r3
 8010f5c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8010f60:	f0c1 80f7 	bcc.w	8012152 <MEMS_runMagCal.constprop.18+0x27da>
 8010f64:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8010f68:	f081 83f8 	bcs.w	801275c <MEMS_runMagCal.constprop.18+0x2de4>
 8010f6c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8010f70:	ee07 3a10 	vmov	s14, r3
 8010f74:	ed9f 6a91 	vldr	s12, [pc, #580]	; 80111bc <MEMS_runMagCal.constprop.18+0x1844>
 8010f78:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8010f7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f80:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8010f84:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8010f88:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010f8c:	ee06 2a90 	vmov	s13, r2
 8010f90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010f94:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8010f98:	ee66 6aab 	vmul.f32	s13, s13, s23
 8010f9c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8010fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa4:	f101 80cf 	bmi.w	8012146 <MEMS_runMagCal.constprop.18+0x27ce>
 8010fa8:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
 8010fac:	eef4 6ac6 	vcmpe.f32	s13, s12
 8010fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb4:	f101 83cc 	bmi.w	8012750 <MEMS_runMagCal.constprop.18+0x2dd8>
 8010fb8:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8010fbc:	eef4 6ac6 	vcmpe.f32	s13, s12
 8010fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fc4:	bf44      	itt	mi
 8010fc6:	eef7 6a00 	vmovmi.f32	s13, #112	; 0x3f800000  1.0
 8010fca:	ee37 7a26 	vaddmi.f32	s14, s14, s13
 8010fce:	2c03      	cmp	r4, #3
 8010fd0:	ed86 7a02 	vstr	s14, [r6, #8]
 8010fd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010fd8:	f000 80cc 	beq.w	8011174 <MEMS_runMagCal.constprop.18+0x17fc>
 8010fdc:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
 8010fe0:	9900      	ldr	r1, [sp, #0]
 8010fe2:	f89b 2074 	ldrb.w	r2, [fp, #116]	; 0x74
 8010fe6:	1acb      	subs	r3, r1, r3
 8010fe8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8010fec:	f0c1 80a7 	bcc.w	801213e <MEMS_runMagCal.constprop.18+0x27c6>
 8010ff0:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8010ff4:	f081 8401 	bcs.w	80127fa <MEMS_runMagCal.constprop.18+0x2e82>
 8010ff8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8010ffc:	ee07 3a10 	vmov	s14, r3
 8011000:	ed9f 6a6e 	vldr	s12, [pc, #440]	; 80111bc <MEMS_runMagCal.constprop.18+0x1844>
 8011004:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8011008:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801100c:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8011010:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8011014:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011018:	ee06 2a90 	vmov	s13, r2
 801101c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011020:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011024:	ee66 6aab 	vmul.f32	s13, s13, s23
 8011028:	eef4 6ac6 	vcmpe.f32	s13, s12
 801102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011030:	f101 807f 	bmi.w	8012132 <MEMS_runMagCal.constprop.18+0x27ba>
 8011034:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
 8011038:	eef4 6ac6 	vcmpe.f32	s13, s12
 801103c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011040:	f101 83d5 	bmi.w	80127ee <MEMS_runMagCal.constprop.18+0x2e76>
 8011044:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8011048:	eef4 6ac6 	vcmpe.f32	s13, s12
 801104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011050:	bf44      	itt	mi
 8011052:	eef7 6a00 	vmovmi.f32	s13, #112	; 0x3f800000  1.0
 8011056:	ee37 7a26 	vaddmi.f32	s14, s14, s13
 801105a:	2c04      	cmp	r4, #4
 801105c:	ed86 7a03 	vstr	s14, [r6, #12]
 8011060:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011064:	f000 8086 	beq.w	8011174 <MEMS_runMagCal.constprop.18+0x17fc>
 8011068:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
 801106c:	9900      	ldr	r1, [sp, #0]
 801106e:	f89b 208c 	ldrb.w	r2, [fp, #140]	; 0x8c
 8011072:	1acb      	subs	r3, r1, r3
 8011074:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8011078:	f0c1 8057 	bcc.w	801212a <MEMS_runMagCal.constprop.18+0x27b2>
 801107c:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8011080:	f081 83e6 	bcs.w	8012850 <MEMS_runMagCal.constprop.18+0x2ed8>
 8011084:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8011088:	ee07 3a10 	vmov	s14, r3
 801108c:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 80111bc <MEMS_runMagCal.constprop.18+0x1844>
 8011090:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8011094:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011098:	eea6 7ac6 	vfms.f32	s14, s13, s12
 801109c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80110a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80110a4:	ee06 2a90 	vmov	s13, r2
 80110a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80110ac:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80110b0:	ee66 6aab 	vmul.f32	s13, s13, s23
 80110b4:	eef4 6ac6 	vcmpe.f32	s13, s12
 80110b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110bc:	f101 83e3 	bmi.w	8012886 <MEMS_runMagCal.constprop.18+0x2f0e>
 80110c0:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
 80110c4:	eef4 6ac6 	vcmpe.f32	s13, s12
 80110c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110cc:	f101 83d5 	bmi.w	801287a <MEMS_runMagCal.constprop.18+0x2f02>
 80110d0:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80110d4:	eef4 6ac6 	vcmpe.f32	s13, s12
 80110d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110dc:	bf44      	itt	mi
 80110de:	eef7 6a00 	vmovmi.f32	s13, #112	; 0x3f800000  1.0
 80110e2:	ee37 7a26 	vaddmi.f32	s14, s14, s13
 80110e6:	2c05      	cmp	r4, #5
 80110e8:	ed86 7a04 	vstr	s14, [r6, #16]
 80110ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80110f0:	d040      	beq.n	8011174 <MEMS_runMagCal.constprop.18+0x17fc>
 80110f2:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 80110f6:	9900      	ldr	r1, [sp, #0]
 80110f8:	f89b 20a4 	ldrb.w	r2, [fp, #164]	; 0xa4
 80110fc:	1acb      	subs	r3, r1, r3
 80110fe:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8011102:	f0c1 8077 	bcc.w	80121f4 <MEMS_runMagCal.constprop.18+0x287c>
 8011106:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 801110a:	f081 805e 	bcs.w	80121ca <MEMS_runMagCal.constprop.18+0x2852>
 801110e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8011112:	ee07 3a10 	vmov	s14, r3
 8011116:	ed9f 6a29 	vldr	s12, [pc, #164]	; 80111bc <MEMS_runMagCal.constprop.18+0x1844>
 801111a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801111e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011122:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8011126:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 801112a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801112e:	ee06 2a90 	vmov	s13, r2
 8011132:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011136:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801113a:	ee66 6aab 	vmul.f32	s13, s13, s23
 801113e:	eef4 6ac6 	vcmpe.f32	s13, s12
 8011142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011146:	f101 803a 	bmi.w	80121be <MEMS_runMagCal.constprop.18+0x2846>
 801114a:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
 801114e:	eef4 6ac6 	vcmpe.f32	s13, s12
 8011152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011156:	f101 802c 	bmi.w	80121b2 <MEMS_runMagCal.constprop.18+0x283a>
 801115a:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 801115e:	eef4 6ac6 	vcmpe.f32	s13, s12
 8011162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011166:	bf44      	itt	mi
 8011168:	eef7 6a00 	vmovmi.f32	s13, #112	; 0x3f800000  1.0
 801116c:	ee37 7a26 	vaddmi.f32	s14, s14, s13
 8011170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011174:	eddf 6a12 	vldr	s13, [pc, #72]	; 80111c0 <MEMS_runMagCal.constprop.18+0x1848>
 8011178:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80111c4 <MEMS_runMagCal.constprop.18+0x184c>
 801117c:	ed96 1a00 	vldr	s2, [r6]
 8011180:	edd6 1a01 	vldr	s3, [r6, #4]
 8011184:	ed96 2a02 	vldr	s4, [r6, #8]
 8011188:	edd6 2a03 	vldr	s5, [r6, #12]
 801118c:	ed96 3a04 	vldr	s6, [r6, #16]
 8011190:	ee86 daa7 	vdiv.f32	s26, s13, s15
 8011194:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011198:	ee2d 1a01 	vmul.f32	s2, s26, s2
 801119c:	ee6d 1a21 	vmul.f32	s3, s26, s3
 80111a0:	ee2d 2a02 	vmul.f32	s4, s26, s4
 80111a4:	ee6d 2a22 	vmul.f32	s5, s26, s5
 80111a8:	ee2d 3a03 	vmul.f32	s6, s26, s6
 80111ac:	ee27 da8d 	vmul.f32	s26, s15, s26
 80111b0:	2c00      	cmp	r4, #0
 80111b2:	f001 804a 	beq.w	801224a <MEMS_runMagCal.constprop.18+0x28d2>
 80111b6:	e007      	b.n	80111c8 <MEMS_runMagCal.constprop.18+0x1850>
 80111b8:	20001668 	.word	0x20001668
 80111bc:	389ee00a 	.word	0x389ee00a
 80111c0:	3f68ba2e 	.word	0x3f68ba2e
 80111c4:	3dcccccd 	.word	0x3dcccccd
 80111c8:	f9bb 302e 	ldrsh.w	r3, [fp, #46]	; 0x2e
 80111cc:	ee03 3a90 	vmov	s7, r3
 80111d0:	f8bb 3034 	ldrh.w	r3, [fp, #52]	; 0x34
 80111d4:	ee04 3a10 	vmov	s8, r3
 80111d8:	f9bb 303a 	ldrsh.w	r3, [fp, #58]	; 0x3a
 80111dc:	ee04 3a90 	vmov	s9, r3
 80111e0:	f9bb 3030 	ldrsh.w	r3, [fp, #48]	; 0x30
 80111e4:	ee05 3a10 	vmov	s10, r3
 80111e8:	f8bb 3036 	ldrh.w	r3, [fp, #54]	; 0x36
 80111ec:	ee05 3a90 	vmov	s11, r3
 80111f0:	f9bb 303c 	ldrsh.w	r3, [fp, #60]	; 0x3c
 80111f4:	ee06 3a10 	vmov	s12, r3
 80111f8:	f9bb 3032 	ldrsh.w	r3, [fp, #50]	; 0x32
 80111fc:	ee06 3a90 	vmov	s13, r3
 8011200:	f8bb 3038 	ldrh.w	r3, [fp, #56]	; 0x38
 8011204:	ee07 3a10 	vmov	s14, r3
 8011208:	f9bb 303e 	ldrsh.w	r3, [fp, #62]	; 0x3e
 801120c:	ee07 3a90 	vmov	s15, r3
 8011210:	f89b 302c 	ldrb.w	r3, [fp, #44]	; 0x2c
 8011214:	ee0d 3a90 	vmov	s27, r3
 8011218:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801121c:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8011220:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8011224:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8011228:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801122c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011230:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011234:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801123c:	eef8 daed 	vcvt.f32.s32	s27, s27
 8011240:	2c01      	cmp	r4, #1
 8011242:	ee63 3a81 	vmul.f32	s7, s7, s2
 8011246:	ee24 4a01 	vmul.f32	s8, s8, s2
 801124a:	ee64 4a81 	vmul.f32	s9, s9, s2
 801124e:	ee25 5a01 	vmul.f32	s10, s10, s2
 8011252:	ee65 5a81 	vmul.f32	s11, s11, s2
 8011256:	ee26 6a01 	vmul.f32	s12, s12, s2
 801125a:	ee66 6a81 	vmul.f32	s13, s13, s2
 801125e:	ee27 7a01 	vmul.f32	s14, s14, s2
 8011262:	ee67 7a81 	vmul.f32	s15, s15, s2
 8011266:	ee6d da81 	vmul.f32	s27, s27, s2
 801126a:	f240 819b 	bls.w	80115a4 <MEMS_runMagCal.constprop.18+0x1c2c>
 801126e:	f9bb 3046 	ldrsh.w	r3, [fp, #70]	; 0x46
 8011272:	ee00 3a90 	vmov	s1, r3
 8011276:	f8bb 304c 	ldrh.w	r3, [fp, #76]	; 0x4c
 801127a:	ee01 3a10 	vmov	s2, r3
 801127e:	f9bb 3052 	ldrsh.w	r3, [fp, #82]	; 0x52
 8011282:	ee0a 3a10 	vmov	s20, r3
 8011286:	f9bb 3048 	ldrsh.w	r3, [fp, #72]	; 0x48
 801128a:	ee09 3a90 	vmov	s19, r3
 801128e:	f8bb 304e 	ldrh.w	r3, [fp, #78]	; 0x4e
 8011292:	ee09 3a10 	vmov	s18, r3
 8011296:	f9bb 3054 	ldrsh.w	r3, [fp, #84]	; 0x54
 801129a:	ee08 3a90 	vmov	s17, r3
 801129e:	f9bb 304a 	ldrsh.w	r3, [fp, #74]	; 0x4a
 80112a2:	ee08 3a10 	vmov	s16, r3
 80112a6:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 80112aa:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80112ae:	ee00 3a10 	vmov	s0, r3
 80112b2:	f9bb 3056 	ldrsh.w	r3, [fp, #86]	; 0x56
 80112b6:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80112ba:	eee0 3aa1 	vfma.f32	s7, s1, s3
 80112be:	2c02      	cmp	r4, #2
 80112c0:	ee00 3a90 	vmov	s1, r3
 80112c4:	f89b 3044 	ldrb.w	r3, [fp, #68]	; 0x44
 80112c8:	eea1 4a21 	vfma.f32	s8, s2, s3
 80112cc:	ee01 3a10 	vmov	s2, r3
 80112d0:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 80112d4:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 80112d8:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 80112dc:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80112e0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80112e4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80112e8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80112ec:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80112f0:	eeea 4a21 	vfma.f32	s9, s20, s3
 80112f4:	eea9 5aa1 	vfma.f32	s10, s19, s3
 80112f8:	eee9 5a21 	vfma.f32	s11, s18, s3
 80112fc:	eea8 6aa1 	vfma.f32	s12, s17, s3
 8011300:	eee8 6a21 	vfma.f32	s13, s16, s3
 8011304:	eea0 7a21 	vfma.f32	s14, s0, s3
 8011308:	eee0 7aa1 	vfma.f32	s15, s1, s3
 801130c:	eee1 da21 	vfma.f32	s27, s2, s3
 8011310:	f000 8148 	beq.w	80115a4 <MEMS_runMagCal.constprop.18+0x1c2c>
 8011314:	f9bb 305e 	ldrsh.w	r3, [fp, #94]	; 0x5e
 8011318:	ee01 3a10 	vmov	s2, r3
 801131c:	f8bb 3064 	ldrh.w	r3, [fp, #100]	; 0x64
 8011320:	ee01 3a90 	vmov	s3, r3
 8011324:	f9bb 306a 	ldrsh.w	r3, [fp, #106]	; 0x6a
 8011328:	ee09 3a90 	vmov	s19, r3
 801132c:	f9bb 3060 	ldrsh.w	r3, [fp, #96]	; 0x60
 8011330:	ee09 3a10 	vmov	s18, r3
 8011334:	f8bb 3066 	ldrh.w	r3, [fp, #102]	; 0x66
 8011338:	ee08 3a90 	vmov	s17, r3
 801133c:	f9bb 306c 	ldrsh.w	r3, [fp, #108]	; 0x6c
 8011340:	ee08 3a10 	vmov	s16, r3
 8011344:	f9bb 3062 	ldrsh.w	r3, [fp, #98]	; 0x62
 8011348:	ee00 3a10 	vmov	s0, r3
 801134c:	f8bb 3068 	ldrh.w	r3, [fp, #104]	; 0x68
 8011350:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8011354:	ee00 3a90 	vmov	s1, r3
 8011358:	f9bb 306e 	ldrsh.w	r3, [fp, #110]	; 0x6e
 801135c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8011360:	eee1 3a02 	vfma.f32	s7, s2, s4
 8011364:	2c03      	cmp	r4, #3
 8011366:	ee01 3a10 	vmov	s2, r3
 801136a:	f89b 305c 	ldrb.w	r3, [fp, #92]	; 0x5c
 801136e:	eea1 4a82 	vfma.f32	s8, s3, s4
 8011372:	ee01 3a90 	vmov	s3, r3
 8011376:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 801137a:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801137e:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8011382:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8011386:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801138a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801138e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8011392:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8011396:	eee9 4a82 	vfma.f32	s9, s19, s4
 801139a:	eea9 5a02 	vfma.f32	s10, s18, s4
 801139e:	eee2 5a28 	vfma.f32	s11, s4, s17
 80113a2:	eea8 6a02 	vfma.f32	s12, s16, s4
 80113a6:	eee0 6a02 	vfma.f32	s13, s0, s4
 80113aa:	eea0 7a82 	vfma.f32	s14, s1, s4
 80113ae:	eee1 7a02 	vfma.f32	s15, s2, s4
 80113b2:	eee1 da82 	vfma.f32	s27, s3, s4
 80113b6:	f000 80f5 	beq.w	80115a4 <MEMS_runMagCal.constprop.18+0x1c2c>
 80113ba:	f9bb 3076 	ldrsh.w	r3, [fp, #118]	; 0x76
 80113be:	ee01 3a90 	vmov	s3, r3
 80113c2:	f8bb 307c 	ldrh.w	r3, [fp, #124]	; 0x7c
 80113c6:	ee02 3a10 	vmov	s4, r3
 80113ca:	f9bb 3082 	ldrsh.w	r3, [fp, #130]	; 0x82
 80113ce:	ee09 3a10 	vmov	s18, r3
 80113d2:	f9bb 3078 	ldrsh.w	r3, [fp, #120]	; 0x78
 80113d6:	ee08 3a90 	vmov	s17, r3
 80113da:	f8bb 307e 	ldrh.w	r3, [fp, #126]	; 0x7e
 80113de:	ee08 3a10 	vmov	s16, r3
 80113e2:	f9bb 3084 	ldrsh.w	r3, [fp, #132]	; 0x84
 80113e6:	ee00 3a10 	vmov	s0, r3
 80113ea:	f9bb 307a 	ldrsh.w	r3, [fp, #122]	; 0x7a
 80113ee:	ee00 3a90 	vmov	s1, r3
 80113f2:	f8bb 3080 	ldrh.w	r3, [fp, #128]	; 0x80
 80113f6:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80113fa:	ee01 3a10 	vmov	s2, r3
 80113fe:	f9bb 3086 	ldrsh.w	r3, [fp, #134]	; 0x86
 8011402:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8011406:	eee1 3aa2 	vfma.f32	s7, s3, s5
 801140a:	2c04      	cmp	r4, #4
 801140c:	ee01 3a90 	vmov	s3, r3
 8011410:	f89b 3074 	ldrb.w	r3, [fp, #116]	; 0x74
 8011414:	eea2 4a22 	vfma.f32	s8, s4, s5
 8011418:	ee02 3a10 	vmov	s4, r3
 801141c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8011420:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8011424:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8011428:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801142c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8011430:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8011434:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8011438:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801143c:	eee9 4a22 	vfma.f32	s9, s18, s5
 8011440:	eea8 5aa2 	vfma.f32	s10, s17, s5
 8011444:	eee8 5a22 	vfma.f32	s11, s16, s5
 8011448:	eea0 6a22 	vfma.f32	s12, s0, s5
 801144c:	eee0 6aa2 	vfma.f32	s13, s1, s5
 8011450:	eea1 7a22 	vfma.f32	s14, s2, s5
 8011454:	eee1 7aa2 	vfma.f32	s15, s3, s5
 8011458:	eee2 da82 	vfma.f32	s27, s5, s4
 801145c:	f000 80a2 	beq.w	80115a4 <MEMS_runMagCal.constprop.18+0x1c2c>
 8011460:	f9bb 308e 	ldrsh.w	r3, [fp, #142]	; 0x8e
 8011464:	ee09 3a90 	vmov	s19, r3
 8011468:	f8bb 3094 	ldrh.w	r3, [fp, #148]	; 0x94
 801146c:	ee09 3a10 	vmov	s18, r3
 8011470:	f9bb 309a 	ldrsh.w	r3, [fp, #154]	; 0x9a
 8011474:	ee08 3a90 	vmov	s17, r3
 8011478:	f9bb 3090 	ldrsh.w	r3, [fp, #144]	; 0x90
 801147c:	ee08 3a10 	vmov	s16, r3
 8011480:	f8bb 3096 	ldrh.w	r3, [fp, #150]	; 0x96
 8011484:	ee00 3a10 	vmov	s0, r3
 8011488:	f9bb 309c 	ldrsh.w	r3, [fp, #156]	; 0x9c
 801148c:	ee00 3a90 	vmov	s1, r3
 8011490:	f9bb 3092 	ldrsh.w	r3, [fp, #146]	; 0x92
 8011494:	ee01 3a10 	vmov	s2, r3
 8011498:	f8bb 3098 	ldrh.w	r3, [fp, #152]	; 0x98
 801149c:	ee01 3a90 	vmov	s3, r3
 80114a0:	f9bb 309e 	ldrsh.w	r3, [fp, #158]	; 0x9e
 80114a4:	ee02 3a10 	vmov	s4, r3
 80114a8:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80114ac:	ee02 3a90 	vmov	s5, r3
 80114b0:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 80114b4:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 80114b8:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80114bc:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80114c0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80114c4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80114c8:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80114cc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80114d0:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 80114d4:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80114d8:	2c05      	cmp	r4, #5
 80114da:	eee9 3a83 	vfma.f32	s7, s19, s6
 80114de:	eea3 4a09 	vfma.f32	s8, s6, s18
 80114e2:	eee3 4a28 	vfma.f32	s9, s6, s17
 80114e6:	eea3 5a08 	vfma.f32	s10, s6, s16
 80114ea:	eee3 5a00 	vfma.f32	s11, s6, s0
 80114ee:	eea3 6a20 	vfma.f32	s12, s6, s1
 80114f2:	eee3 6a01 	vfma.f32	s13, s6, s2
 80114f6:	eea3 7a21 	vfma.f32	s14, s6, s3
 80114fa:	eee3 7a02 	vfma.f32	s15, s6, s4
 80114fe:	eee3 da22 	vfma.f32	s27, s6, s5
 8011502:	d04f      	beq.n	80115a4 <MEMS_runMagCal.constprop.18+0x1c2c>
 8011504:	f9bb 30a6 	ldrsh.w	r3, [fp, #166]	; 0xa6
 8011508:	ee09 3a10 	vmov	s18, r3
 801150c:	f8bb 30ac 	ldrh.w	r3, [fp, #172]	; 0xac
 8011510:	ee08 3a90 	vmov	s17, r3
 8011514:	f9bb 30b2 	ldrsh.w	r3, [fp, #178]	; 0xb2
 8011518:	ee08 3a10 	vmov	s16, r3
 801151c:	f9bb 30a8 	ldrsh.w	r3, [fp, #168]	; 0xa8
 8011520:	ee00 3a10 	vmov	s0, r3
 8011524:	f8bb 30ae 	ldrh.w	r3, [fp, #174]	; 0xae
 8011528:	ee00 3a90 	vmov	s1, r3
 801152c:	f9bb 30b4 	ldrsh.w	r3, [fp, #180]	; 0xb4
 8011530:	ee01 3a10 	vmov	s2, r3
 8011534:	f9bb 30aa 	ldrsh.w	r3, [fp, #170]	; 0xaa
 8011538:	ee01 3a90 	vmov	s3, r3
 801153c:	f8bb 30b0 	ldrh.w	r3, [fp, #176]	; 0xb0
 8011540:	ee02 3a10 	vmov	s4, r3
 8011544:	f9bb 30b6 	ldrsh.w	r3, [fp, #182]	; 0xb6
 8011548:	ee02 3a90 	vmov	s5, r3
 801154c:	f89b 30a4 	ldrb.w	r3, [fp, #164]	; 0xa4
 8011550:	ee03 3a10 	vmov	s6, r3
 8011554:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8011558:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801155c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8011560:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8011564:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8011568:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801156c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8011570:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8011574:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8011578:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801157c:	eee9 3a0d 	vfma.f32	s7, s18, s26
 8011580:	eea8 4a8d 	vfma.f32	s8, s17, s26
 8011584:	eee8 4a0d 	vfma.f32	s9, s16, s26
 8011588:	eead 5a00 	vfma.f32	s10, s26, s0
 801158c:	eee0 5a8d 	vfma.f32	s11, s1, s26
 8011590:	eea1 6a0d 	vfma.f32	s12, s2, s26
 8011594:	eeed 6a21 	vfma.f32	s13, s26, s3
 8011598:	eead 7a02 	vfma.f32	s14, s26, s4
 801159c:	eee2 7a8d 	vfma.f32	s15, s5, s26
 80115a0:	eeed da03 	vfma.f32	s27, s26, s6
 80115a4:	edcd 3a10 	vstr	s7, [sp, #64]	; 0x40
 80115a8:	ed8d 4a13 	vstr	s8, [sp, #76]	; 0x4c
 80115ac:	edc5 4a00 	vstr	s9, [r5]
 80115b0:	ed8d 5a11 	vstr	s10, [sp, #68]	; 0x44
 80115b4:	edcd 5a14 	vstr	s11, [sp, #80]	; 0x50
 80115b8:	ed85 6a01 	vstr	s12, [r5, #4]
 80115bc:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80115c0:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 80115c4:	edc5 7a02 	vstr	s15, [r5, #8]
 80115c8:	eeb0 ba44 	vmov.f32	s22, s8
 80115cc:	eeb0 0a63 	vmov.f32	s0, s7
 80115d0:	eeb0 ca64 	vmov.f32	s24, s9
 80115d4:	eef0 9a45 	vmov.f32	s19, s10
 80115d8:	eeb0 aa65 	vmov.f32	s20, s11
 80115dc:	eeb0 8a46 	vmov.f32	s16, s12
 80115e0:	eef0 8a66 	vmov.f32	s17, s13
 80115e4:	eeb0 9a47 	vmov.f32	s18, s14
 80115e8:	eef0 ea67 	vmov.f32	s29, s15
 80115ec:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80115f0:	eddf cae5 	vldr	s25, [pc, #916]	; 8011988 <MEMS_runMagCal.constprop.18+0x2010>
 80115f4:	ee07 3a90 	vmov	s15, r3
 80115f8:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 80115fc:	ee04 3a10 	vmov	s8, r3
 8011600:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
 8011604:	ee04 3a90 	vmov	s9, r3
 8011608:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801160c:	ee05 3a10 	vmov	s10, r3
 8011610:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 8011614:	ee05 3a90 	vmov	s11, r3
 8011618:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 801161c:	ee06 3a10 	vmov	s12, r3
 8011620:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8011624:	ee06 3a90 	vmov	s13, r3
 8011628:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 801162c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011630:	ee07 3a10 	vmov	s14, r3
 8011634:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 8011638:	eead ba27 	vfma.f32	s22, s26, s15
 801163c:	ee07 3a90 	vmov	s15, r3
 8011640:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8011644:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801164c:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8011650:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8011654:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8011658:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801165c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011660:	eea4 0a0d 	vfma.f32	s0, s8, s26
 8011664:	2300      	movs	r3, #0
 8011666:	f88b 30a5 	strb.w	r3, [fp, #165]	; 0xa5
 801166a:	eead 9a07 	vfma.f32	s18, s26, s14
 801166e:	eead ca24 	vfma.f32	s24, s26, s9
 8011672:	eeed 9a05 	vfma.f32	s19, s26, s10
 8011676:	eead aa25 	vfma.f32	s20, s26, s11
 801167a:	eead 8a06 	vfma.f32	s16, s26, s12
 801167e:	eeed 8a26 	vfma.f32	s17, s26, s13
 8011682:	eeed ea27 	vfma.f32	s29, s26, s15
 8011686:	f004 ff61 	bl	801654c <roundf>
 801168a:	eef0 aa40 	vmov.f32	s21, s0
 801168e:	ee2b 0a2c 	vmul.f32	s0, s22, s25
 8011692:	edcb aa2a 	vstr	s21, [fp, #168]	; 0xa8
 8011696:	f004 ff59 	bl	801654c <roundf>
 801169a:	ee10 0a10 	vmov	r0, s0
 801169e:	f7ee ff5b 	bl	8000558 <__aeabi_f2d>
 80116a2:	a3b7      	add	r3, pc, #732	; (adr r3, 8011980 <MEMS_runMagCal.constprop.18+0x2008>)
 80116a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a8:	f7ee ffae 	bl	8000608 <__aeabi_dmul>
 80116ac:	f7ef fa84 	bl	8000bb8 <__aeabi_d2f>
 80116b0:	eeb0 0a69 	vmov.f32	s0, s19
 80116b4:	ee0b 0a10 	vmov	s22, r0
 80116b8:	f8cb 00b4 	str.w	r0, [fp, #180]	; 0xb4
 80116bc:	f004 ff46 	bl	801654c <roundf>
 80116c0:	eef0 9a40 	vmov.f32	s19, s0
 80116c4:	ee2a 0a2c 	vmul.f32	s0, s20, s25
 80116c8:	edcb 9a2b 	vstr	s19, [fp, #172]	; 0xac
 80116cc:	f004 ff3e 	bl	801654c <roundf>
 80116d0:	ee10 0a10 	vmov	r0, s0
 80116d4:	f7ee ff40 	bl	8000558 <__aeabi_f2d>
 80116d8:	a3a9      	add	r3, pc, #676	; (adr r3, 8011980 <MEMS_runMagCal.constprop.18+0x2008>)
 80116da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116de:	f7ee ff93 	bl	8000608 <__aeabi_dmul>
 80116e2:	f7ef fa69 	bl	8000bb8 <__aeabi_d2f>
 80116e6:	eeb0 0a68 	vmov.f32	s0, s17
 80116ea:	ee0a 0a10 	vmov	s20, r0
 80116ee:	f8cb 00c4 	str.w	r0, [fp, #196]	; 0xc4
 80116f2:	f004 ff2b 	bl	801654c <roundf>
 80116f6:	eef0 8a40 	vmov.f32	s17, s0
 80116fa:	ee29 0a2c 	vmul.f32	s0, s18, s25
 80116fe:	edcb 8a2c 	vstr	s17, [fp, #176]	; 0xb0
 8011702:	f004 ff23 	bl	801654c <roundf>
 8011706:	ee10 0a10 	vmov	r0, s0
 801170a:	f7ee ff25 	bl	8000558 <__aeabi_f2d>
 801170e:	a39c      	add	r3, pc, #624	; (adr r3, 8011980 <MEMS_runMagCal.constprop.18+0x2008>)
 8011710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011714:	f7ee ff78 	bl	8000608 <__aeabi_dmul>
 8011718:	f7ef fa4e 	bl	8000bb8 <__aeabi_d2f>
 801171c:	ee2c 0a2c 	vmul.f32	s0, s24, s25
 8011720:	ee09 0a10 	vmov	s18, r0
 8011724:	f8cb 00d4 	str.w	r0, [fp, #212]	; 0xd4
 8011728:	f004 ff10 	bl	801654c <roundf>
 801172c:	ee10 0a10 	vmov	r0, s0
 8011730:	f7ee ff12 	bl	8000558 <__aeabi_f2d>
 8011734:	a392      	add	r3, pc, #584	; (adr r3, 8011980 <MEMS_runMagCal.constprop.18+0x2008>)
 8011736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801173a:	f7ee ff65 	bl	8000608 <__aeabi_dmul>
 801173e:	f7ef fa3b 	bl	8000bb8 <__aeabi_d2f>
 8011742:	ee28 0a2c 	vmul.f32	s0, s16, s25
 8011746:	ee0c 0a10 	vmov	s24, r0
 801174a:	f8cb 00c0 	str.w	r0, [fp, #192]	; 0xc0
 801174e:	f004 fefd 	bl	801654c <roundf>
 8011752:	ee10 0a10 	vmov	r0, s0
 8011756:	f7ee feff 	bl	8000558 <__aeabi_f2d>
 801175a:	a389      	add	r3, pc, #548	; (adr r3, 8011980 <MEMS_runMagCal.constprop.18+0x2008>)
 801175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011760:	f7ee ff52 	bl	8000608 <__aeabi_dmul>
 8011764:	f7ef fa28 	bl	8000bb8 <__aeabi_d2f>
 8011768:	ee2e 0aac 	vmul.f32	s0, s29, s25
 801176c:	ee08 0a10 	vmov	s16, r0
 8011770:	f8cb 00cc 	str.w	r0, [fp, #204]	; 0xcc
 8011774:	f004 feea 	bl	801654c <roundf>
 8011778:	ee10 0a10 	vmov	r0, s0
 801177c:	f7ee feec 	bl	8000558 <__aeabi_f2d>
 8011780:	a37f      	add	r3, pc, #508	; (adr r3, 8011980 <MEMS_runMagCal.constprop.18+0x2008>)
 8011782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011786:	f7ee ff3f 	bl	8000608 <__aeabi_dmul>
 801178a:	f7ef fa15 	bl	8000bb8 <__aeabi_d2f>
 801178e:	eef0 7a6d 	vmov.f32	s15, s27
 8011792:	eeed 7a0e 	vfma.f32	s15, s26, s28
 8011796:	f8cb 00d0 	str.w	r0, [fp, #208]	; 0xd0
 801179a:	f8cb 00c8 	str.w	r0, [fp, #200]	; 0xc8
 801179e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80117a2:	ee67 7aab 	vmul.f32	s15, s15, s23
 80117a6:	ee0c 0a90 	vmov	s25, r0
 80117aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80117ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117b2:	ed8b ca2e 	vstr	s24, [fp, #184]	; 0xb8
 80117b6:	ed8b 8a2f 	vstr	s16, [fp, #188]	; 0xbc
 80117ba:	f100 84e9 	bmi.w	8012190 <MEMS_runMagCal.constprop.18+0x2818>
 80117be:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80117c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80117c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ca:	bf4c      	ite	mi
 80117cc:	2302      	movmi	r3, #2
 80117ce:	2301      	movpl	r3, #1
 80117d0:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 80117d4:	f89b 50e0 	ldrb.w	r5, [fp, #224]	; 0xe0
 80117d8:	f89b 80e1 	ldrb.w	r8, [fp, #225]	; 0xe1
 80117dc:	9a00      	ldr	r2, [sp, #0]
 80117de:	f99b 30e2 	ldrsb.w	r3, [fp, #226]	; 0xe2
 80117e2:	f8cb 20d8 	str.w	r2, [fp, #216]	; 0xd8
 80117e6:	2100      	movs	r1, #0
 80117e8:	22ff      	movs	r2, #255	; 0xff
 80117ea:	4545      	cmp	r5, r8
 80117ec:	f103 0301 	add.w	r3, r3, #1
 80117f0:	f88b 1364 	strb.w	r1, [fp, #868]	; 0x364
 80117f4:	f88b 2366 	strb.w	r2, [fp, #870]	; 0x366
 80117f8:	f000 84c3 	beq.w	8012182 <MEMS_runMagCal.constprop.18+0x280a>
 80117fc:	1b5b      	subs	r3, r3, r5
 80117fe:	fb93 f2f8 	sdiv	r2, r3, r8
 8011802:	fb08 3312 	mls	r3, r8, r2, r3
 8011806:	2b00      	cmp	r3, #0
 8011808:	b21f      	sxth	r7, r3
 801180a:	bfbc      	itt	lt
 801180c:	4443      	addlt	r3, r8
 801180e:	b21f      	sxthlt	r7, r3
 8011810:	f89b 9365 	ldrb.w	r9, [fp, #869]	; 0x365
 8011814:	2d00      	cmp	r5, #0
 8011816:	f000 8514 	beq.w	8012242 <MEMS_runMagCal.constprop.18+0x28ca>
 801181a:	eddf 7a5c 	vldr	s15, [pc, #368]	; 801198c <MEMS_runMagCal.constprop.18+0x2014>
 801181e:	2600      	movs	r6, #0
 8011820:	ee6b baa7 	vmul.f32	s23, s23, s15
 8011824:	4633      	mov	r3, r6
 8011826:	f04f 34ff 	mov.w	r4, #4294967295
 801182a:	19da      	adds	r2, r3, r7
 801182c:	fb92 f3f8 	sdiv	r3, r2, r8
 8011830:	fb08 2313 	mls	r3, r8, r3, r2
 8011834:	b2db      	uxtb	r3, r3
 8011836:	331d      	adds	r3, #29
 8011838:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801183c:	1c62      	adds	r2, r4, #1
 801183e:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
 8011842:	fb92 f4f9 	sdiv	r4, r2, r9
 8011846:	ee07 1a90 	vmov	s15, r1
 801184a:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
 801184e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8011852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011856:	ee07 1a10 	vmov	s14, r1
 801185a:	ee77 7ae8 	vsub.f32	s15, s15, s17
 801185e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011862:	ee06 3a90 	vmov	s13, r3
 8011866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801186a:	ee37 7a69 	vsub.f32	s14, s14, s19
 801186e:	ee17 3a90 	vmov	r3, s15
 8011872:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011876:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801187a:	b21b      	sxth	r3, r3
 801187c:	ee76 6aea 	vsub.f32	s13, s13, s21
 8011880:	ee07 3a90 	vmov	s15, r3
 8011884:	ee17 3a10 	vmov	r3, s14
 8011888:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801188c:	b21b      	sxth	r3, r3
 801188e:	ee07 3a10 	vmov	s14, r3
 8011892:	ee16 3a90 	vmov	r3, s13
 8011896:	b21b      	sxth	r3, r3
 8011898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801189c:	ee06 3a90 	vmov	s13, r3
 80118a0:	ee67 5aac 	vmul.f32	s11, s15, s25
 80118a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80118a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80118ac:	ee27 5a88 	vmul.f32	s10, s15, s16
 80118b0:	eee6 5a8c 	vfma.f32	s11, s13, s24
 80118b4:	fb09 2414 	mls	r4, r9, r4, r2
 80118b8:	b264      	sxtb	r4, r4
 80118ba:	ee27 6a2c 	vmul.f32	s12, s14, s25
 80118be:	eea7 5a0c 	vfma.f32	s10, s14, s24
 80118c2:	3601      	adds	r6, #1
 80118c4:	b236      	sxth	r6, r6
 80118c6:	ee27 7a0a 	vmul.f32	s14, s14, s20
 80118ca:	eea6 6a8c 	vfma.f32	s12, s13, s24
 80118ce:	ee66 6a8b 	vmul.f32	s13, s13, s22
 80118d2:	eefd 5ae5 	vcvt.s32.f32	s11, s11
 80118d6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80118da:	eebd 5ac5 	vcvt.s32.f32	s10, s10
 80118de:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80118e2:	ee67 7a89 	vmul.f32	s15, s15, s18
 80118e6:	ee17 0a10 	vmov	r0, s14
 80118ea:	ee15 2a90 	vmov	r2, s11
 80118ee:	ee16 3a90 	vmov	r3, s13
 80118f2:	ee15 1a10 	vmov	r1, s10
 80118f6:	eebd 7ac6 	vcvt.s32.f32	s14, s12
 80118fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118fe:	4402      	add	r2, r0
 8011900:	4419      	add	r1, r3
 8011902:	4610      	mov	r0, r2
 8011904:	ee17 3a10 	vmov	r3, s14
 8011908:	ee17 2a90 	vmov	r2, s15
 801190c:	fb10 f000 	smulbb	r0, r0, r0
 8011910:	441a      	add	r2, r3
 8011912:	b209      	sxth	r1, r1
 8011914:	fb01 0101 	mla	r1, r1, r1, r0
 8011918:	b213      	sxth	r3, r2
 801191a:	fb03 1303 	mla	r3, r3, r3, r1
 801191e:	ee07 3a90 	vmov	s15, r3
 8011922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011926:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801192a:	ee20 0a2b 	vmul.f32	s0, s0, s23
 801192e:	f004 fe0d 	bl	801654c <roundf>
 8011932:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8011936:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 801193a:	ee10 1a10 	vmov	r1, s0
 801193e:	42ae      	cmp	r6, r5
 8011940:	f8a3 1368 	strh.w	r1, [r3, #872]	; 0x368
 8011944:	4622      	mov	r2, r4
 8011946:	4633      	mov	r3, r6
 8011948:	f6ff af6f 	blt.w	801182a <MEMS_runMagCal.constprop.18+0x1eb2>
 801194c:	f88b 4366 	strb.w	r4, [fp, #870]	; 0x366
 8011950:	454d      	cmp	r5, r9
 8011952:	4629      	mov	r1, r5
 8011954:	bf28      	it	cs
 8011956:	4649      	movcs	r1, r9
 8011958:	454d      	cmp	r5, r9
 801195a:	f88b 1364 	strb.w	r1, [fp, #868]	; 0x364
 801195e:	f080 8408 	bcs.w	8012172 <MEMS_runMagCal.constprop.18+0x27fa>
 8011962:	2000      	movs	r0, #0
 8011964:	b28e      	uxth	r6, r1
 8011966:	2900      	cmp	r1, #0
 8011968:	f43e aa73 	beq.w	800fe52 <MEMS_runMagCal.constprop.18+0x4da>
 801196c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8011990 <MEMS_runMagCal.constprop.18+0x2018>
 8011970:	2400      	movs	r4, #0
 8011972:	eeb0 7a66 	vmov.f32	s14, s13
 8011976:	f241 255c 	movw	r5, #4700	; 0x125c
 801197a:	e017      	b.n	80119ac <MEMS_runMagCal.constprop.18+0x2034>
 801197c:	f3af 8000 	nop.w
 8011980:	a0b5ed8d 	.word	0xa0b5ed8d
 8011984:	3eb0c6f7 	.word	0x3eb0c6f7
 8011988:	447a0000 	.word	0x447a0000
 801198c:	42c80000 	.word	0x42c80000
 8011990:	00000000 	.word	0x00000000
 8011994:	3c23d70a 	.word	0x3c23d70a
 8011998:	c23c0000 	.word	0xc23c0000
 801199c:	3fd9999a 	.word	0x3fd9999a
 80119a0:	4752f000 	.word	0x4752f000
 80119a4:	3eaaaaab 	.word	0x3eaaaaab
 80119a8:	40233334 	.word	0x40233334
 80119ac:	1902      	adds	r2, r0, r4
 80119ae:	fb92 f3f9 	sdiv	r3, r2, r9
 80119b2:	fb09 2313 	mls	r3, r9, r3, r2
 80119b6:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80119ba:	3401      	adds	r4, #1
 80119bc:	f8b3 3368 	ldrh.w	r3, [r3, #872]	; 0x368
 80119c0:	ee07 3a90 	vmov	s15, r3
 80119c4:	f5a3 5292 	sub.w	r2, r3, #4672	; 0x1240
 80119c8:	42ab      	cmp	r3, r5
 80119ca:	bf98      	it	ls
 80119cc:	1aeb      	subls	r3, r5, r3
 80119ce:	f1a2 021c 	sub.w	r2, r2, #28
 80119d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80119d6:	bf8c      	ite	hi
 80119d8:	b293      	uxthhi	r3, r2
 80119da:	b29b      	uxthls	r3, r3
 80119dc:	fb03 f303 	mul.w	r3, r3, r3
 80119e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80119e4:	ee07 3a90 	vmov	s15, r3
 80119e8:	b2a3      	uxth	r3, r4
 80119ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80119ee:	429e      	cmp	r6, r3
 80119f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80119f4:	d8da      	bhi.n	80119ac <MEMS_runMagCal.constprop.18+0x2034>
 80119f6:	ee07 1a90 	vmov	s15, r1
 80119fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80119fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011a02:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8011a06:	293b      	cmp	r1, #59	; 0x3b
 8011a08:	eeb1 7ac6 	vsqrt.f32	s14, s12
 8011a0c:	f77e aa21 	ble.w	800fe52 <MEMS_runMagCal.constprop.18+0x4da>
 8011a10:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8011a14:	ed5f 6a21 	vldr	s13, [pc, #-132]	; 8011994 <MEMS_runMagCal.constprop.18+0x201c>
 8011a18:	ed5f 7a21 	vldr	s15, [pc, #-132]	; 8011998 <MEMS_runMagCal.constprop.18+0x2020>
 8011a1c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011a20:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8011a24:	eef0 7ae7 	vabs.f32	s15, s15
 8011a28:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a30:	f100 839d 	bmi.w	801216e <MEMS_runMagCal.constprop.18+0x27f6>
 8011a34:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8011a38:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a40:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011a44:	d507      	bpl.n	8011a56 <MEMS_runMagCal.constprop.18+0x20de>
 8011a46:	ed5f 6a2b 	vldr	s13, [pc, #-172]	; 801199c <MEMS_runMagCal.constprop.18+0x2024>
 8011a4a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a52:	f100 838c 	bmi.w	801216e <MEMS_runMagCal.constprop.18+0x27f6>
 8011a56:	eef1 6a05 	vmov.f32	s13, #21	; 0x40a80000  5.250
 8011a5a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a62:	f100 840a 	bmi.w	801227a <MEMS_runMagCal.constprop.18+0x2902>
 8011a66:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 8011a6a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a72:	f140 8400 	bpl.w	8012276 <MEMS_runMagCal.constprop.18+0x28fe>
 8011a76:	ed5f 7a34 	vldr	s15, [pc, #-208]	; 80119a8 <MEMS_runMagCal.constprop.18+0x2030>
 8011a7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a82:	bf4c      	ite	mi
 8011a84:	2302      	movmi	r3, #2
 8011a86:	2301      	movpl	r3, #1
 8011a88:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 8011a8c:	f7fe b9e1 	b.w	800fe52 <MEMS_runMagCal.constprop.18+0x4da>
 8011a90:	ed1f 7a3d 	vldr	s14, [pc, #-244]	; 80119a0 <MEMS_runMagCal.constprop.18+0x2028>
 8011a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a9c:	f77e aa60 	ble.w	800ff60 <MEMS_runMagCal.constprop.18+0x5e8>
 8011aa0:	f1b8 0f02 	cmp.w	r8, #2
 8011aa4:	bf28      	it	cs
 8011aa6:	f04f 0802 	movcs.w	r8, #2
 8011aaa:	f88b 80a4 	strb.w	r8, [fp, #164]	; 0xa4
 8011aae:	f7fe ba57 	b.w	800ff60 <MEMS_runMagCal.constprop.18+0x5e8>
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	f88b 30dc 	strb.w	r3, [fp, #220]	; 0xdc
 8011ab8:	f7fe b9cb 	b.w	800fe52 <MEMS_runMagCal.constprop.18+0x4da>
 8011abc:	2303      	movs	r3, #3
 8011abe:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 8011ac2:	f7fe bb7b 	b.w	80101bc <MEMS_runMagCal.constprop.18+0x844>
 8011ac6:	eeb0 0a49 	vmov.f32	s0, s18
 8011aca:	4640      	mov	r0, r8
 8011acc:	f7fc fc0c 	bl	800e2e8 <MEMS_updateMagBufferIndex.constprop.22>
 8011ad0:	f7fe bd4b 	b.w	801056a <MEMS_runMagCal.constprop.18+0xbf2>
 8011ad4:	2302      	movs	r3, #2
 8011ad6:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 8011ada:	f7fe bad5 	b.w	8010088 <MEMS_runMagCal.constprop.18+0x710>
 8011ade:	1c50      	adds	r0, r2, #1
 8011ae0:	fb90 f4f6 	sdiv	r4, r0, r6
 8011ae4:	fb06 0014 	mls	r0, r6, r4, r0
 8011ae8:	b2c0      	uxtb	r0, r0
 8011aea:	9001      	str	r0, [sp, #4]
 8011aec:	f7fe b929 	b.w	800fd42 <MEMS_runMagCal.constprop.18+0x3ca>
 8011af0:	9b00      	ldr	r3, [sp, #0]
 8011af2:	f8db 20e4 	ldr.w	r2, [fp, #228]	; 0xe4
 8011af6:	f8db 1360 	ldr.w	r1, [fp, #864]	; 0x360
 8011afa:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 8011afe:	f9ba 3100 	ldrsh.w	r3, [sl, #256]	; 0x100
 8011b02:	4413      	add	r3, r2
 8011b04:	4299      	cmp	r1, r3
 8011b06:	d2d4      	bcs.n	8011ab2 <MEMS_runMagCal.constprop.18+0x213a>
 8011b08:	f8db 10d8 	ldr.w	r1, [fp, #216]	; 0xd8
 8011b0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011b10:	fb03 f301 	mul.w	r3, r3, r1
 8011b14:	3364      	adds	r3, #100	; 0x64
 8011b16:	4293      	cmp	r3, r2
 8011b18:	bf38      	it	cc
 8011b1a:	4613      	movcc	r3, r2
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	f8cb 3360 	str.w	r3, [fp, #864]	; 0x360
 8011b22:	f88b 20dc 	strb.w	r2, [fp, #220]	; 0xdc
 8011b26:	f7fe b994 	b.w	800fe52 <MEMS_runMagCal.constprop.18+0x4da>
 8011b2a:	2000      	movs	r0, #0
 8011b2c:	f7fe bf2f 	b.w	801098e <MEMS_runMagCal.constprop.18+0x1016>
 8011b30:	fb93 f5f2 	sdiv	r5, r3, r2
 8011b34:	fb02 3315 	mls	r3, r2, r5, r3
 8011b38:	b21d      	sxth	r5, r3
 8011b3a:	f7fe bed8 	b.w	80108ee <MEMS_runMagCal.constprop.18+0xf76>
 8011b3e:	f04f 0801 	mov.w	r8, #1
 8011b42:	f7fe bf5e 	b.w	8010a02 <MEMS_runMagCal.constprop.18+0x108a>
 8011b46:	eddb 4a31 	vldr	s9, [fp, #196]	; 0xc4
 8011b4a:	eddb 6a2d 	vldr	s13, [fp, #180]	; 0xb4
 8011b4e:	ed9b 5a35 	vldr	s10, [fp, #212]	; 0xd4
 8011b52:	ed1f 4a6c 	vldr	s8, [pc, #-432]	; 80119a4 <MEMS_runMagCal.constprop.18+0x202c>
 8011b56:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011b5a:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 8011b5e:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011b62:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8011b66:	ee66 6a84 	vmul.f32	s13, s13, s8
 8011b6a:	eef4 6ae4 	vcmpe.f32	s13, s9
 8011b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b72:	bf88      	it	hi
 8011b74:	eef0 6a64 	vmovhi.f32	s13, s9
 8011b78:	eef4 6ac5 	vcmpe.f32	s13, s10
 8011b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b80:	bfb8      	it	lt
 8011b82:	eef0 6a45 	vmovlt.f32	s13, s10
 8011b86:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8011b8a:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8011b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b92:	dc8e      	bgt.n	8011ab2 <MEMS_runMagCal.constprop.18+0x213a>
 8011b94:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011b98:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8011b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ba0:	dc87      	bgt.n	8011ab2 <MEMS_runMagCal.constprop.18+0x213a>
 8011ba2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011ba6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bae:	dc80      	bgt.n	8011ab2 <MEMS_runMagCal.constprop.18+0x213a>
 8011bb0:	4680      	mov	r8, r0
 8011bb2:	f7fe bf40 	b.w	8010a36 <MEMS_runMagCal.constprop.18+0x10be>
 8011bb6:	ad16      	add	r5, sp, #88	; 0x58
 8011bb8:	eefc baeb 	vcvt.u32.f32	s23, s23
 8011bbc:	f7fe bffe 	b.w	8010bbc <MEMS_runMagCal.constprop.18+0x1244>
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	f47e aff8 	bne.w	8010bb6 <MEMS_runMagCal.constprop.18+0x123e>
 8011bc6:	f88b 40a4 	strb.w	r4, [fp, #164]	; 0xa4
 8011bca:	edcb ba28 	vstr	s23, [fp, #160]	; 0xa0
 8011bce:	f88b 00dc 	strb.w	r0, [fp, #220]	; 0xdc
 8011bd2:	f7fe b93e 	b.w	800fe52 <MEMS_runMagCal.constprop.18+0x4da>
 8011bd6:	2700      	movs	r7, #0
 8011bd8:	f7ff b85c 	b.w	8010c94 <MEMS_runMagCal.constprop.18+0x131c>
 8011bdc:	f89b 3364 	ldrb.w	r3, [fp, #868]	; 0x364
 8011be0:	9a05      	ldr	r2, [sp, #20]
 8011be2:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8011be6:	f280 8082 	bge.w	8011cee <MEMS_runMagCal.constprop.18+0x2376>
 8011bea:	005b      	lsls	r3, r3, #1
 8011bec:	2b3b      	cmp	r3, #59	; 0x3b
 8011bee:	bfd4      	ite	le
 8011bf0:	2300      	movle	r3, #0
 8011bf2:	2301      	movgt	r3, #1
 8011bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8011bf6:	ed5f 7a94 	vldr	s15, [pc, #-592]	; 80119a8 <MEMS_runMagCal.constprop.18+0x2030>
 8011bfa:	eddb 6ad8 	vldr	s13, [fp, #864]	; 0x360
 8011bfe:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011c02:	f04f 0800 	mov.w	r8, #0
 8011c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c0a:	f8c5 8000 	str.w	r8, [r5]
 8011c0e:	f885 8004 	strb.w	r8, [r5, #4]
 8011c12:	f300 8283 	bgt.w	801211c <MEMS_runMagCal.constprop.18+0x27a4>
 8011c16:	2c00      	cmp	r4, #0
 8011c18:	f43f a8f4 	beq.w	8010e04 <MEMS_runMagCal.constprop.18+0x148c>
 8011c1c:	4ba3      	ldr	r3, [pc, #652]	; (8011eac <MEMS_runMagCal.constprop.18+0x2534>)
 8011c1e:	9301      	str	r3, [sp, #4]
 8011c20:	eeb0 0a6b 	vmov.f32	s0, s23
 8011c24:	4619      	mov	r1, r3
 8011c26:	a819      	add	r0, sp, #100	; 0x64
 8011c28:	f7fc fada 	bl	800e1e0 <MEMS_checkConsistency.constprop.32>
 8011c2c:	2801      	cmp	r0, #1
 8011c2e:	f000 8609 	beq.w	8012844 <MEMS_runMagCal.constprop.18+0x2ecc>
 8011c32:	2c01      	cmp	r4, #1
 8011c34:	d95e      	bls.n	8011cf4 <MEMS_runMagCal.constprop.18+0x237c>
 8011c36:	eeb0 0a6b 	vmov.f32	s0, s23
 8011c3a:	499d      	ldr	r1, [pc, #628]	; (8011eb0 <MEMS_runMagCal.constprop.18+0x2538>)
 8011c3c:	a819      	add	r0, sp, #100	; 0x64
 8011c3e:	f7fc facf 	bl	800e1e0 <MEMS_checkConsistency.constprop.32>
 8011c42:	2801      	cmp	r0, #1
 8011c44:	f000 85f1 	beq.w	801282a <MEMS_runMagCal.constprop.18+0x2eb2>
 8011c48:	2c02      	cmp	r4, #2
 8011c4a:	f000 85bf 	beq.w	80127cc <MEMS_runMagCal.constprop.18+0x2e54>
 8011c4e:	eeb0 0a6b 	vmov.f32	s0, s23
 8011c52:	4998      	ldr	r1, [pc, #608]	; (8011eb4 <MEMS_runMagCal.constprop.18+0x253c>)
 8011c54:	a819      	add	r0, sp, #100	; 0x64
 8011c56:	f7fc fac3 	bl	800e1e0 <MEMS_checkConsistency.constprop.32>
 8011c5a:	2801      	cmp	r0, #1
 8011c5c:	f000 85ad 	beq.w	80127ba <MEMS_runMagCal.constprop.18+0x2e42>
 8011c60:	2c03      	cmp	r4, #3
 8011c62:	f000 85b3 	beq.w	80127cc <MEMS_runMagCal.constprop.18+0x2e54>
 8011c66:	eeb0 0a6b 	vmov.f32	s0, s23
 8011c6a:	4993      	ldr	r1, [pc, #588]	; (8011eb8 <MEMS_runMagCal.constprop.18+0x2540>)
 8011c6c:	a819      	add	r0, sp, #100	; 0x64
 8011c6e:	f7fc fab7 	bl	800e1e0 <MEMS_checkConsistency.constprop.32>
 8011c72:	2801      	cmp	r0, #1
 8011c74:	f000 8598 	beq.w	80127a8 <MEMS_runMagCal.constprop.18+0x2e30>
 8011c78:	2c04      	cmp	r4, #4
 8011c7a:	f000 85a7 	beq.w	80127cc <MEMS_runMagCal.constprop.18+0x2e54>
 8011c7e:	eeb0 0a6b 	vmov.f32	s0, s23
 8011c82:	498e      	ldr	r1, [pc, #568]	; (8011ebc <MEMS_runMagCal.constprop.18+0x2544>)
 8011c84:	a819      	add	r0, sp, #100	; 0x64
 8011c86:	f7fc faab 	bl	800e1e0 <MEMS_checkConsistency.constprop.32>
 8011c8a:	2801      	cmp	r0, #1
 8011c8c:	f000 8583 	beq.w	8012796 <MEMS_runMagCal.constprop.18+0x2e1e>
 8011c90:	2c05      	cmp	r4, #5
 8011c92:	f000 859b 	beq.w	80127cc <MEMS_runMagCal.constprop.18+0x2e54>
 8011c96:	eeb0 0a6b 	vmov.f32	s0, s23
 8011c9a:	4989      	ldr	r1, [pc, #548]	; (8011ec0 <MEMS_runMagCal.constprop.18+0x2548>)
 8011c9c:	a819      	add	r0, sp, #100	; 0x64
 8011c9e:	f7fc fa9f 	bl	800e1e0 <MEMS_checkConsistency.constprop.32>
 8011ca2:	2801      	cmp	r0, #1
 8011ca4:	f000 852b 	beq.w	80126fe <MEMS_runMagCal.constprop.18+0x2d86>
 8011ca8:	2c06      	cmp	r4, #6
 8011caa:	f000 858f 	beq.w	80127cc <MEMS_runMagCal.constprop.18+0x2e54>
 8011cae:	f04f 0906 	mov.w	r9, #6
 8011cb2:	e006      	b.n	8011cc2 <MEMS_runMagCal.constprop.18+0x234a>
 8011cb4:	f109 0901 	add.w	r9, r9, #1
 8011cb8:	fa5f f389 	uxtb.w	r3, r9
 8011cbc:	429c      	cmp	r4, r3
 8011cbe:	f240 8585 	bls.w	80127cc <MEMS_runMagCal.constprop.18+0x2e54>
 8011cc2:	9b01      	ldr	r3, [sp, #4]
 8011cc4:	eb09 0149 	add.w	r1, r9, r9, lsl #1
 8011cc8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8011ccc:	eeb0 0a6b 	vmov.f32	s0, s23
 8011cd0:	a819      	add	r0, sp, #100	; 0x64
 8011cd2:	f7fc fa85 	bl	800e1e0 <MEMS_checkConsistency.constprop.32>
 8011cd6:	2801      	cmp	r0, #1
 8011cd8:	d1ec      	bne.n	8011cb4 <MEMS_runMagCal.constprop.18+0x233c>
 8011cda:	f815 3009 	ldrb.w	r3, [r5, r9]
 8011cde:	f108 0801 	add.w	r8, r8, #1
 8011ce2:	3301      	adds	r3, #1
 8011ce4:	f805 3009 	strb.w	r3, [r5, r9]
 8011ce8:	fa4f f888 	sxtb.w	r8, r8
 8011cec:	e7e2      	b.n	8011cb4 <MEMS_runMagCal.constprop.18+0x233c>
 8011cee:	2300      	movs	r3, #0
 8011cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8011cf2:	e780      	b.n	8011bf6 <MEMS_runMagCal.constprop.18+0x227e>
 8011cf4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8011ec4 <MEMS_runMagCal.constprop.18+0x254c>
 8011cf8:	eef8 7a66 	vcvt.f32.u32	s15, s13
 8011cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011d00:	ed9b 7a0a 	vldr	s14, [fp, #40]	; 0x28
 8011d04:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d10:	f340 80bd 	ble.w	8011e8e <MEMS_runMagCal.constprop.18+0x2516>
 8011d14:	45a0      	cmp	r8, r4
 8011d16:	f280 83b2 	bge.w	801247e <MEMS_runMagCal.constprop.18+0x2b06>
 8011d1a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8011d1e:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 8011d22:	9306      	str	r3, [sp, #24]
 8011d24:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 8011d28:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8011d2c:	9307      	str	r3, [sp, #28]
 8011d2e:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 8011d32:	f9bd 006e 	ldrsh.w	r0, [sp, #110]	; 0x6e
 8011d36:	9308      	str	r3, [sp, #32]
 8011d38:	b293      	uxth	r3, r2
 8011d3a:	9303      	str	r3, [sp, #12]
 8011d3c:	b28b      	uxth	r3, r1
 8011d3e:	f04f 0c00 	mov.w	ip, #0
 8011d42:	9304      	str	r3, [sp, #16]
 8011d44:	b283      	uxth	r3, r0
 8011d46:	920a      	str	r2, [sp, #40]	; 0x28
 8011d48:	910b      	str	r1, [sp, #44]	; 0x2c
 8011d4a:	900c      	str	r0, [sp, #48]	; 0x30
 8011d4c:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8011ecc <MEMS_runMagCal.constprop.18+0x2554>
 8011d50:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 8011ec8 <MEMS_runMagCal.constprop.18+0x2550>
 8011d54:	f8c6 c000 	str.w	ip, [r6]
 8011d58:	46e1      	mov	r9, ip
 8011d5a:	f886 c004 	strb.w	ip, [r6, #4]
 8011d5e:	f8cd c008 	str.w	ip, [sp, #8]
 8011d62:	9305      	str	r3, [sp, #20]
 8011d64:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8011d68:	950d      	str	r5, [sp, #52]	; 0x34
 8011d6a:	e06f      	b.n	8011e4c <MEMS_runMagCal.constprop.18+0x24d4>
 8011d6c:	9b03      	ldr	r3, [sp, #12]
 8011d6e:	b292      	uxth	r2, r2
 8011d70:	2800      	cmp	r0, #0
 8011d72:	bfb4      	ite	lt
 8011d74:	1ad2      	sublt	r2, r2, r3
 8011d76:	1a9a      	subge	r2, r3, r2
 8011d78:	b213      	sxth	r3, r2
 8011d7a:	f9ba 2032 	ldrsh.w	r2, [sl, #50]	; 0x32
 8011d7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011d80:	1a89      	subs	r1, r1, r2
 8011d82:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
 8011d86:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
 8011d8a:	4283      	cmp	r3, r0
 8011d8c:	dc06      	bgt.n	8011d9c <MEMS_runMagCal.constprop.18+0x2424>
 8011d8e:	9b05      	ldr	r3, [sp, #20]
 8011d90:	b292      	uxth	r2, r2
 8011d92:	2900      	cmp	r1, #0
 8011d94:	bfb4      	ite	lt
 8011d96:	1ad2      	sublt	r2, r2, r3
 8011d98:	1a9a      	subge	r2, r3, r2
 8011d9a:	b213      	sxth	r3, r2
 8011d9c:	9806      	ldr	r0, [sp, #24]
 8011d9e:	f8ba 1034 	ldrh.w	r1, [sl, #52]	; 0x34
 8011da2:	f8ba 2036 	ldrh.w	r2, [sl, #54]	; 0x36
 8011da6:	eba0 0c01 	sub.w	ip, r0, r1
 8011daa:	9807      	ldr	r0, [sp, #28]
 8011dac:	1a80      	subs	r0, r0, r2
 8011dae:	ea8c 75ec 	eor.w	r5, ip, ip, asr #31
 8011db2:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 8011db6:	eba5 75ec 	sub.w	r5, r5, ip, asr #31
 8011dba:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
 8011dbe:	4575      	cmp	r5, lr
 8011dc0:	dd5f      	ble.n	8011e82 <MEMS_runMagCal.constprop.18+0x250a>
 8011dc2:	f1bc 0f00 	cmp.w	ip, #0
 8011dc6:	bfbd      	ittte	lt
 8011dc8:	9a06      	ldrlt	r2, [sp, #24]
 8011dca:	1a88      	sublt	r0, r1, r2
 8011dcc:	b200      	sxthlt	r0, r0
 8011dce:	fa0f f08c 	sxthge.w	r0, ip
 8011dd2:	f8ba 2038 	ldrh.w	r2, [sl, #56]	; 0x38
 8011dd6:	9908      	ldr	r1, [sp, #32]
 8011dd8:	1a89      	subs	r1, r1, r2
 8011dda:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
 8011dde:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31
 8011de2:	4560      	cmp	r0, ip
 8011de4:	dc05      	bgt.n	8011df2 <MEMS_runMagCal.constprop.18+0x247a>
 8011de6:	2900      	cmp	r1, #0
 8011de8:	bfbd      	ittte	lt
 8011dea:	9908      	ldrlt	r1, [sp, #32]
 8011dec:	1a50      	sublt	r0, r2, r1
 8011dee:	b200      	sxthlt	r0, r0
 8011df0:	b208      	sxthge	r0, r1
 8011df2:	ee07 3a10 	vmov	s14, r3
 8011df6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011dfa:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8011dfe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e06:	dd18      	ble.n	8011e3a <MEMS_runMagCal.constprop.18+0x24c2>
 8011e08:	ee07 0a10 	vmov	s14, r0
 8011e0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011e10:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8011e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e18:	d50f      	bpl.n	8011e3a <MEMS_runMagCal.constprop.18+0x24c2>
 8011e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e1c:	b943      	cbnz	r3, 8011e30 <MEMS_runMagCal.constprop.18+0x24b8>
 8011e1e:	ed9a 7a0a 	vldr	s14, [sl, #40]	; 0x28
 8011e22:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011e26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e2e:	d504      	bpl.n	8011e3a <MEMS_runMagCal.constprop.18+0x24c2>
 8011e30:	f04f 0301 	mov.w	r3, #1
 8011e34:	f806 3009 	strb.w	r3, [r6, r9]
 8011e38:	9702      	str	r7, [sp, #8]
 8011e3a:	f109 0901 	add.w	r9, r9, #1
 8011e3e:	fa5f f389 	uxtb.w	r3, r9
 8011e42:	429c      	cmp	r4, r3
 8011e44:	f10a 0a18 	add.w	sl, sl, #24
 8011e48:	f240 8315 	bls.w	8012476 <MEMS_runMagCal.constprop.18+0x2afe>
 8011e4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011e4e:	f9ba 202e 	ldrsh.w	r2, [sl, #46]	; 0x2e
 8011e52:	f9ba 3030 	ldrsh.w	r3, [sl, #48]	; 0x30
 8011e56:	1a88      	subs	r0, r1, r2
 8011e58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e5a:	1ac9      	subs	r1, r1, r3
 8011e5c:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 8011e60:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
 8011e64:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
 8011e68:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31
 8011e6c:	45e6      	cmp	lr, ip
 8011e6e:	f73f af7d 	bgt.w	8011d6c <MEMS_runMagCal.constprop.18+0x23f4>
 8011e72:	9a04      	ldr	r2, [sp, #16]
 8011e74:	b29b      	uxth	r3, r3
 8011e76:	2900      	cmp	r1, #0
 8011e78:	bfb4      	ite	lt
 8011e7a:	1a9b      	sublt	r3, r3, r2
 8011e7c:	1ad3      	subge	r3, r2, r3
 8011e7e:	b21b      	sxth	r3, r3
 8011e80:	e77b      	b.n	8011d7a <MEMS_runMagCal.constprop.18+0x2402>
 8011e82:	2800      	cmp	r0, #0
 8011e84:	bfbc      	itt	lt
 8011e86:	9907      	ldrlt	r1, [sp, #28]
 8011e88:	1a50      	sublt	r0, r2, r1
 8011e8a:	b200      	sxth	r0, r0
 8011e8c:	e7a1      	b.n	8011dd2 <MEMS_runMagCal.constprop.18+0x245a>
 8011e8e:	2401      	movs	r4, #1
 8011e90:	2700      	movs	r7, #0
 8011e92:	9702      	str	r7, [sp, #8]
 8011e94:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 8011e98:	9a00      	ldr	r2, [sp, #0]
 8011e9a:	1ad3      	subs	r3, r2, r3
 8011e9c:	f100 812c 	bmi.w	80120f8 <MEMS_runMagCal.constprop.18+0x2780>
 8011ea0:	f04f 37ff 	mov.w	r7, #4294967295
 8011ea4:	4639      	mov	r1, r7
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	e01b      	b.n	8011ee2 <MEMS_runMagCal.constprop.18+0x256a>
 8011eaa:	bf00      	nop
 8011eac:	20001668 	.word	0x20001668
 8011eb0:	20001680 	.word	0x20001680
 8011eb4:	20001698 	.word	0x20001698
 8011eb8:	200016b0 	.word	0x200016b0
 8011ebc:	200016c8 	.word	0x200016c8
 8011ec0:	200016e0 	.word	0x200016e0
 8011ec4:	3a83126f 	.word	0x3a83126f
 8011ec8:	43c80000 	.word	0x43c80000
 8011ecc:	20001640 	.word	0x20001640
 8011ed0:	43480000 	.word	0x43480000
 8011ed4:	00000000 	.word	0x00000000
 8011ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eda:	9800      	ldr	r0, [sp, #0]
 8011edc:	1ac3      	subs	r3, r0, r3
 8011ede:	f100 810d 	bmi.w	80120fc <MEMS_runMagCal.constprop.18+0x2784>
 8011ee2:	4299      	cmp	r1, r3
 8011ee4:	f102 0001 	add.w	r0, r2, #1
 8011ee8:	bf88      	it	hi
 8011eea:	4617      	movhi	r7, r2
 8011eec:	b242      	sxtb	r2, r0
 8011eee:	bf88      	it	hi
 8011ef0:	4619      	movhi	r1, r3
 8011ef2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8011ef6:	4294      	cmp	r4, r2
 8011ef8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8011efc:	4694      	mov	ip, r2
 8011efe:	dceb      	bgt.n	8011ed8 <MEMS_runMagCal.constprop.18+0x2560>
 8011f00:	2904      	cmp	r1, #4
 8011f02:	f200 80bd 	bhi.w	8012080 <MEMS_runMagCal.constprop.18+0x2708>
 8011f06:	2f00      	cmp	r7, #0
 8011f08:	f2c0 80ba 	blt.w	8012080 <MEMS_runMagCal.constprop.18+0x2708>
 8011f0c:	2318      	movs	r3, #24
 8011f0e:	fb03 b307 	mla	r3, r3, r7, fp
 8011f12:	ee15 1a90 	vmov	r1, s11
 8011f16:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8011f1a:	428a      	cmp	r2, r1
 8011f1c:	f0c0 8093 	bcc.w	8012046 <MEMS_runMagCal.constprop.18+0x26ce>
 8011f20:	f9b3 002e 	ldrsh.w	r0, [r3, #46]	; 0x2e
 8011f24:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011f28:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 8011f2c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8011f30:	eba1 0e00 	sub.w	lr, r1, r0
 8011f34:	eba3 0c02 	sub.w	ip, r3, r2
 8011f38:	ea8e 79ee 	eor.w	r9, lr, lr, asr #31
 8011f3c:	ea8c 78ec 	eor.w	r8, ip, ip, asr #31
 8011f40:	eba9 79ee 	sub.w	r9, r9, lr, asr #31
 8011f44:	eba8 78ec 	sub.w	r8, r8, ip, asr #31
 8011f48:	45c1      	cmp	r9, r8
 8011f4a:	f340 828b 	ble.w	8012464 <MEMS_runMagCal.constprop.18+0x2aec>
 8011f4e:	b289      	uxth	r1, r1
 8011f50:	b283      	uxth	r3, r0
 8011f52:	f1be 0f00 	cmp.w	lr, #0
 8011f56:	bfb4      	ite	lt
 8011f58:	1a59      	sublt	r1, r3, r1
 8011f5a:	1ac9      	subge	r1, r1, r3
 8011f5c:	b20b      	sxth	r3, r1
 8011f5e:	2118      	movs	r1, #24
 8011f60:	fb01 b107 	mla	r1, r1, r7, fp
 8011f64:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 8011f68:	f9b1 1032 	ldrsh.w	r1, [r1, #50]	; 0x32
 8011f6c:	1a50      	subs	r0, r2, r1
 8011f6e:	ea80 7ce0 	eor.w	ip, r0, r0, asr #31
 8011f72:	ebac 7ce0 	sub.w	ip, ip, r0, asr #31
 8011f76:	4563      	cmp	r3, ip
 8011f78:	dc06      	bgt.n	8011f88 <MEMS_runMagCal.constprop.18+0x2610>
 8011f7a:	b293      	uxth	r3, r2
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	b28a      	uxth	r2, r1
 8011f80:	bfb4      	ite	lt
 8011f82:	1ad3      	sublt	r3, r2, r3
 8011f84:	1a9b      	subge	r3, r3, r2
 8011f86:	b21b      	sxth	r3, r3
 8011f88:	2218      	movs	r2, #24
 8011f8a:	fb02 b207 	mla	r2, r2, r7, fp
 8011f8e:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 8011f92:	8e91      	ldrh	r1, [r2, #52]	; 0x34
 8011f94:	f8bd e072 	ldrh.w	lr, [sp, #114]	; 0x72
 8011f98:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8011f9a:	eba8 0c01 	sub.w	ip, r8, r1
 8011f9e:	ebae 0002 	sub.w	r0, lr, r2
 8011fa2:	ea8c 7aec 	eor.w	sl, ip, ip, asr #31
 8011fa6:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 8011faa:	ebaa 7aec 	sub.w	sl, sl, ip, asr #31
 8011fae:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
 8011fb2:	45ca      	cmp	sl, r9
 8011fb4:	f340 8250 	ble.w	8012458 <MEMS_runMagCal.constprop.18+0x2ae0>
 8011fb8:	f1bc 0f00 	cmp.w	ip, #0
 8011fbc:	bfba      	itte	lt
 8011fbe:	eba1 0008 	sublt.w	r0, r1, r8
 8011fc2:	b200      	sxthlt	r0, r0
 8011fc4:	fa0f f08c 	sxthge.w	r0, ip
 8011fc8:	2218      	movs	r2, #24
 8011fca:	fb02 b207 	mla	r2, r2, r7, fp
 8011fce:	f8bd c074 	ldrh.w	ip, [sp, #116]	; 0x74
 8011fd2:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8011fd4:	ebac 0102 	sub.w	r1, ip, r2
 8011fd8:	ea81 7ee1 	eor.w	lr, r1, r1, asr #31
 8011fdc:	ebae 7ee1 	sub.w	lr, lr, r1, asr #31
 8011fe0:	4570      	cmp	r0, lr
 8011fe2:	dc05      	bgt.n	8011ff0 <MEMS_runMagCal.constprop.18+0x2678>
 8011fe4:	2900      	cmp	r1, #0
 8011fe6:	bfba      	itte	lt
 8011fe8:	eba2 000c 	sublt.w	r0, r2, ip
 8011fec:	b200      	sxthlt	r0, r0
 8011fee:	b208      	sxthge	r0, r1
 8011ff0:	ee07 3a90 	vmov	s15, r3
 8011ff4:	ee3b 7aab 	vadd.f32	s14, s23, s23
 8011ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ffc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012000:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012004:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801200c:	d50b      	bpl.n	8012026 <MEMS_runMagCal.constprop.18+0x26ae>
 801200e:	0043      	lsls	r3, r0, #1
 8012010:	ee07 3a90 	vmov	s15, r3
 8012014:	ed1f 7a52 	vldr	s14, [pc, #-328]	; 8011ed0 <MEMS_runMagCal.constprop.18+0x2558>
 8012018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801201c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012024:	d40f      	bmi.n	8012046 <MEMS_runMagCal.constprop.18+0x26ce>
 8012026:	f10d 0e64 	add.w	lr, sp, #100	; 0x64
 801202a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801202e:	f04f 0c18 	mov.w	ip, #24
 8012032:	fb0c b707 	mla	r7, ip, r7, fp
 8012036:	3728      	adds	r7, #40	; 0x28
 8012038:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801203a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801203e:	e887 0003 	stmia.w	r7, {r0, r1}
 8012042:	f7fe beea 	b.w	8010e1a <MEMS_runMagCal.constprop.18+0x14a2>
 8012046:	9b02      	ldr	r3, [sp, #8]
 8012048:	2b01      	cmp	r3, #1
 801204a:	f47d af02 	bne.w	800fe52 <MEMS_runMagCal.constprop.18+0x4da>
 801204e:	f89b 4024 	ldrb.w	r4, [fp, #36]	; 0x24
 8012052:	2300      	movs	r3, #0
 8012054:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8012058:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 801205c:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8012060:	e9c5 3300 	strd	r3, r3, [r5]
 8012064:	60ab      	str	r3, [r5, #8]
 8012066:	e9c6 3300 	strd	r3, r3, [r6]
 801206a:	e9c6 3302 	strd	r3, r3, [r6, #8]
 801206e:	e9c6 3304 	strd	r3, r3, [r6, #16]
 8012072:	2c00      	cmp	r4, #0
 8012074:	f47e aee0 	bne.w	8010e38 <MEMS_runMagCal.constprop.18+0x14c0>
 8012078:	ed5f 7a6a 	vldr	s15, [pc, #-424]	; 8011ed4 <MEMS_runMagCal.constprop.18+0x255c>
 801207c:	f7ff b87a 	b.w	8011174 <MEMS_runMagCal.constprop.18+0x17fc>
 8012080:	f89b 3025 	ldrb.w	r3, [fp, #37]	; 0x25
 8012084:	42a3      	cmp	r3, r4
 8012086:	f240 80fa 	bls.w	801227e <MEMS_runMagCal.constprop.18+0x2906>
 801208a:	2300      	movs	r3, #0
 801208c:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8011ed4 <MEMS_runMagCal.constprop.18+0x255c>
 8012090:	461a      	mov	r2, r3
 8012092:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012096:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 801209a:	3301      	adds	r3, #1
 801209c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80120a0:	ee07 2a10 	vmov	s14, r2
 80120a4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80120a8:	b25b      	sxtb	r3, r3
 80120aa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80120ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120b2:	bfc8      	it	gt
 80120b4:	eef8 7a47 	vcvtgt.f32.u32	s15, s14
 80120b8:	429c      	cmp	r4, r3
 80120ba:	461a      	mov	r2, r3
 80120bc:	dce9      	bgt.n	8012092 <MEMS_runMagCal.constprop.18+0x271a>
 80120be:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80120c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80120c6:	eef4 7ace 	vcmpe.f32	s15, s28
 80120ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ce:	d4ba      	bmi.n	8012046 <MEMS_runMagCal.constprop.18+0x26ce>
 80120d0:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 80120d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80120d8:	3401      	adds	r4, #1
 80120da:	b2e4      	uxtb	r4, r4
 80120dc:	1e67      	subs	r7, r4, #1
 80120de:	f04f 0e18 	mov.w	lr, #24
 80120e2:	fb0e b707 	mla	r7, lr, r7, fp
 80120e6:	3728      	adds	r7, #40	; 0x28
 80120e8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80120ea:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80120ee:	f88b 4024 	strb.w	r4, [fp, #36]	; 0x24
 80120f2:	e887 0003 	stmia.w	r7, {r0, r1}
 80120f6:	e7ac      	b.n	8012052 <MEMS_runMagCal.constprop.18+0x26da>
 80120f8:	f04f 0c00 	mov.w	ip, #0
 80120fc:	f10d 0e64 	add.w	lr, sp, #100	; 0x64
 8012100:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012104:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
 8012108:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801210c:	3728      	adds	r7, #40	; 0x28
 801210e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012110:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012114:	e887 0003 	stmia.w	r7, {r0, r1}
 8012118:	f7fe be7f 	b.w	8010e1a <MEMS_runMagCal.constprop.18+0x14a2>
 801211c:	f8cd 8008 	str.w	r8, [sp, #8]
 8012120:	2c00      	cmp	r4, #0
 8012122:	f47f aeb7 	bne.w	8011e94 <MEMS_runMagCal.constprop.18+0x251c>
 8012126:	f7fe be6d 	b.w	8010e04 <MEMS_runMagCal.constprop.18+0x148c>
 801212a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801212e:	f7fe bfb9 	b.w	80110a4 <MEMS_runMagCal.constprop.18+0x172c>
 8012132:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8012136:	ee37 7a26 	vadd.f32	s14, s14, s13
 801213a:	f7fe bf8e 	b.w	801105a <MEMS_runMagCal.constprop.18+0x16e2>
 801213e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8012142:	f7fe bf69 	b.w	8011018 <MEMS_runMagCal.constprop.18+0x16a0>
 8012146:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801214a:	ee37 7a26 	vadd.f32	s14, s14, s13
 801214e:	f7fe bf3e 	b.w	8010fce <MEMS_runMagCal.constprop.18+0x1656>
 8012152:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8012156:	f7fe bf19 	b.w	8010f8c <MEMS_runMagCal.constprop.18+0x1614>
 801215a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801215e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8012162:	f7fe beee 	b.w	8010f42 <MEMS_runMagCal.constprop.18+0x15ca>
 8012166:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801216a:	f7fe bec9 	b.w	8010f00 <MEMS_runMagCal.constprop.18+0x1588>
 801216e:	2303      	movs	r3, #3
 8012170:	e48a      	b.n	8011a88 <MEMS_runMagCal.constprop.18+0x2110>
 8012172:	3201      	adds	r2, #1
 8012174:	fb92 f0f1 	sdiv	r0, r2, r1
 8012178:	fb01 2210 	mls	r2, r1, r0, r2
 801217c:	b290      	uxth	r0, r2
 801217e:	f7ff bbf1 	b.w	8011964 <MEMS_runMagCal.constprop.18+0x1fec>
 8012182:	fb93 f7f5 	sdiv	r7, r3, r5
 8012186:	fb05 3317 	mls	r3, r5, r7, r3
 801218a:	b21f      	sxth	r7, r3
 801218c:	f7ff bb40 	b.w	8011810 <MEMS_runMagCal.constprop.18+0x1e98>
 8012190:	2303      	movs	r3, #3
 8012192:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
 8012196:	f7ff bb1d 	b.w	80117d4 <MEMS_runMagCal.constprop.18+0x1e5c>
 801219a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801219e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80121a2:	f7fe be8a 	b.w	8010eba <MEMS_runMagCal.constprop.18+0x1542>
 80121a6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80121aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80121ae:	f7fe be84 	b.w	8010eba <MEMS_runMagCal.constprop.18+0x1542>
 80121b2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80121b6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80121ba:	f7fe bfd9 	b.w	8011170 <MEMS_runMagCal.constprop.18+0x17f8>
 80121be:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80121c2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80121c6:	f7fe bfd3 	b.w	8011170 <MEMS_runMagCal.constprop.18+0x17f8>
 80121ca:	49b5      	ldr	r1, [pc, #724]	; (80124a0 <MEMS_runMagCal.constprop.18+0x2b28>)
 80121cc:	428b      	cmp	r3, r1
 80121ce:	d815      	bhi.n	80121fc <MEMS_runMagCal.constprop.18+0x2884>
 80121d0:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 80121d4:	ee07 3a10 	vmov	s14, r3
 80121d8:	ed9f 6ab2 	vldr	s12, [pc, #712]	; 80124a4 <MEMS_runMagCal.constprop.18+0x2b2c>
 80121dc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80121e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80121e4:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80121e8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80121ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 80121f0:	f7fe bf9d 	b.w	801112e <MEMS_runMagCal.constprop.18+0x17b6>
 80121f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80121f8:	f7fe bf99 	b.w	801112e <MEMS_runMagCal.constprop.18+0x17b6>
 80121fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012200:	f7fe bf95 	b.w	801112e <MEMS_runMagCal.constprop.18+0x17b6>
 8012204:	4aa6      	ldr	r2, [pc, #664]	; (80124a0 <MEMS_runMagCal.constprop.18+0x2b28>)
 8012206:	4293      	cmp	r3, r2
 8012208:	d817      	bhi.n	801223a <MEMS_runMagCal.constprop.18+0x28c2>
 801220a:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 801220e:	ee07 3a90 	vmov	s15, r3
 8012212:	ed9f 6aa4 	vldr	s12, [pc, #656]	; 80124a4 <MEMS_runMagCal.constprop.18+0x2b2c>
 8012216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801221a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801221e:	eee7 6ac6 	vfms.f32	s13, s15, s12
 8012222:	eef0 7a66 	vmov.f32	s15, s13
 8012226:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 801222a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801222e:	f7fe be25 	b.w	8010e7c <MEMS_runMagCal.constprop.18+0x1504>
 8012232:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8012236:	f7fe be21 	b.w	8010e7c <MEMS_runMagCal.constprop.18+0x1504>
 801223a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801223e:	f7fe be1d 	b.w	8010e7c <MEMS_runMagCal.constprop.18+0x1504>
 8012242:	f04f 32ff 	mov.w	r2, #4294967295
 8012246:	f7ff bb83 	b.w	8011950 <MEMS_runMagCal.constprop.18+0x1fd8>
 801224a:	eddf da97 	vldr	s27, [pc, #604]	; 80124a8 <MEMS_runMagCal.constprop.18+0x2b30>
 801224e:	ed9d ba13 	vldr	s22, [sp, #76]	; 0x4c
 8012252:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
 8012256:	ed95 ca00 	vldr	s24, [r5]
 801225a:	eddd 9a11 	vldr	s19, [sp, #68]	; 0x44
 801225e:	ed9d aa14 	vldr	s20, [sp, #80]	; 0x50
 8012262:	ed95 8a01 	vldr	s16, [r5, #4]
 8012266:	eddd 8a12 	vldr	s17, [sp, #72]	; 0x48
 801226a:	ed9d 9a15 	vldr	s18, [sp, #84]	; 0x54
 801226e:	edd5 ea02 	vldr	s29, [r5, #8]
 8012272:	f7ff b9bb 	b.w	80115ec <MEMS_runMagCal.constprop.18+0x1c74>
 8012276:	2301      	movs	r3, #1
 8012278:	e406      	b.n	8011a88 <MEMS_runMagCal.constprop.18+0x2110>
 801227a:	2302      	movs	r3, #2
 801227c:	e404      	b.n	8011a88 <MEMS_runMagCal.constprop.18+0x2110>
 801227e:	4b8b      	ldr	r3, [pc, #556]	; (80124ac <MEMS_runMagCal.constprop.18+0x2b34>)
 8012280:	f8dd 8000 	ldr.w	r8, [sp]
 8012284:	9301      	str	r3, [sp, #4]
 8012286:	eeb0 0a6b 	vmov.f32	s0, s23
 801228a:	4619      	mov	r1, r3
 801228c:	4642      	mov	r2, r8
 801228e:	a819      	add	r0, sp, #100	; 0x64
 8012290:	4699      	mov	r9, r3
 8012292:	f7fd f9bf 	bl	800f614 <MEMS_compareCalScore>
 8012296:	2c01      	cmp	r4, #1
 8012298:	4607      	mov	r7, r0
 801229a:	7030      	strb	r0, [r6, #0]
 801229c:	d937      	bls.n	801230e <MEMS_runMagCal.constprop.18+0x2996>
 801229e:	eeb0 0a6b 	vmov.f32	s0, s23
 80122a2:	4642      	mov	r2, r8
 80122a4:	f109 0118 	add.w	r1, r9, #24
 80122a8:	a819      	add	r0, sp, #100	; 0x64
 80122aa:	f8cd 9004 	str.w	r9, [sp, #4]
 80122ae:	f7fd f9b1 	bl	800f614 <MEMS_compareCalScore>
 80122b2:	2c02      	cmp	r4, #2
 80122b4:	4407      	add	r7, r0
 80122b6:	b2ff      	uxtb	r7, r7
 80122b8:	7070      	strb	r0, [r6, #1]
 80122ba:	d028      	beq.n	801230e <MEMS_runMagCal.constprop.18+0x2996>
 80122bc:	eeb0 0a6b 	vmov.f32	s0, s23
 80122c0:	4642      	mov	r2, r8
 80122c2:	f109 0130 	add.w	r1, r9, #48	; 0x30
 80122c6:	a819      	add	r0, sp, #100	; 0x64
 80122c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80122cc:	f7fd f9a2 	bl	800f614 <MEMS_compareCalScore>
 80122d0:	2c03      	cmp	r4, #3
 80122d2:	4407      	add	r7, r0
 80122d4:	b2ff      	uxtb	r7, r7
 80122d6:	70b0      	strb	r0, [r6, #2]
 80122d8:	d019      	beq.n	801230e <MEMS_runMagCal.constprop.18+0x2996>
 80122da:	9b01      	ldr	r3, [sp, #4]
 80122dc:	eeb0 0a6b 	vmov.f32	s0, s23
 80122e0:	4642      	mov	r2, r8
 80122e2:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80122e6:	a819      	add	r0, sp, #100	; 0x64
 80122e8:	f7fd f994 	bl	800f614 <MEMS_compareCalScore>
 80122ec:	2c04      	cmp	r4, #4
 80122ee:	4407      	add	r7, r0
 80122f0:	b2ff      	uxtb	r7, r7
 80122f2:	70f0      	strb	r0, [r6, #3]
 80122f4:	d00b      	beq.n	801230e <MEMS_runMagCal.constprop.18+0x2996>
 80122f6:	9b01      	ldr	r3, [sp, #4]
 80122f8:	eeb0 0a6b 	vmov.f32	s0, s23
 80122fc:	4642      	mov	r2, r8
 80122fe:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8012302:	a819      	add	r0, sp, #100	; 0x64
 8012304:	f7fd f986 	bl	800f614 <MEMS_compareCalScore>
 8012308:	4407      	add	r7, r0
 801230a:	b2ff      	uxtb	r7, r7
 801230c:	7130      	strb	r0, [r6, #4]
 801230e:	2f00      	cmp	r7, #0
 8012310:	f43f ae99 	beq.w	8012046 <MEMS_runMagCal.constprop.18+0x26ce>
 8012314:	9503      	str	r5, [sp, #12]
 8012316:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 80124bc <MEMS_runMagCal.constprop.18+0x2b44>
 801231a:	f04f 0901 	mov.w	r9, #1
 801231e:	2700      	movs	r7, #0
 8012320:	4625      	mov	r5, r4
 8012322:	e005      	b.n	8012330 <MEMS_runMagCal.constprop.18+0x29b8>
 8012324:	fa5f f289 	uxtb.w	r2, r9
 8012328:	4295      	cmp	r5, r2
 801232a:	d95e      	bls.n	80123ea <MEMS_runMagCal.constprop.18+0x2a72>
 801232c:	f109 0901 	add.w	r9, r9, #1
 8012330:	eb06 0409 	add.w	r4, r6, r9
 8012334:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8012338:	2a00      	cmp	r2, #0
 801233a:	d0f3      	beq.n	8012324 <MEMS_runMagCal.constprop.18+0x29ac>
 801233c:	fa5f f889 	uxtb.w	r8, r9
 8012340:	4545      	cmp	r5, r8
 8012342:	d952      	bls.n	80123ea <MEMS_runMagCal.constprop.18+0x2a72>
 8012344:	f816 2009 	ldrb.w	r2, [r6, r9]
 8012348:	b17a      	cbz	r2, 801236a <MEMS_runMagCal.constprop.18+0x29f2>
 801234a:	2318      	movs	r3, #24
 801234c:	fb03 f009 	mul.w	r0, r3, r9
 8012350:	9b01      	ldr	r3, [sp, #4]
 8012352:	9a00      	ldr	r2, [sp, #0]
 8012354:	eb0a 0100 	add.w	r1, sl, r0
 8012358:	eeb0 0a6b 	vmov.f32	s0, s23
 801235c:	4418      	add	r0, r3
 801235e:	f7fd f959 	bl	800f614 <MEMS_compareCalScore>
 8012362:	2800      	cmp	r0, #0
 8012364:	d06d      	beq.n	8012442 <MEMS_runMagCal.constprop.18+0x2aca>
 8012366:	f806 7009 	strb.w	r7, [r6, r9]
 801236a:	f108 0201 	add.w	r2, r8, #1
 801236e:	b2d2      	uxtb	r2, r2
 8012370:	4295      	cmp	r5, r2
 8012372:	d9db      	bls.n	801232c <MEMS_runMagCal.constprop.18+0x29b4>
 8012374:	7862      	ldrb	r2, [r4, #1]
 8012376:	b172      	cbz	r2, 8012396 <MEMS_runMagCal.constprop.18+0x2a1e>
 8012378:	2318      	movs	r3, #24
 801237a:	fb03 f009 	mul.w	r0, r3, r9
 801237e:	4b4c      	ldr	r3, [pc, #304]	; (80124b0 <MEMS_runMagCal.constprop.18+0x2b38>)
 8012380:	9a00      	ldr	r2, [sp, #0]
 8012382:	eb0a 0100 	add.w	r1, sl, r0
 8012386:	eeb0 0a6b 	vmov.f32	s0, s23
 801238a:	4418      	add	r0, r3
 801238c:	f7fd f942 	bl	800f614 <MEMS_compareCalScore>
 8012390:	2800      	cmp	r0, #0
 8012392:	d056      	beq.n	8012442 <MEMS_runMagCal.constprop.18+0x2aca>
 8012394:	7067      	strb	r7, [r4, #1]
 8012396:	f108 0202 	add.w	r2, r8, #2
 801239a:	b2d2      	uxtb	r2, r2
 801239c:	4295      	cmp	r5, r2
 801239e:	d9c5      	bls.n	801232c <MEMS_runMagCal.constprop.18+0x29b4>
 80123a0:	78a2      	ldrb	r2, [r4, #2]
 80123a2:	b172      	cbz	r2, 80123c2 <MEMS_runMagCal.constprop.18+0x2a4a>
 80123a4:	2318      	movs	r3, #24
 80123a6:	fb03 f009 	mul.w	r0, r3, r9
 80123aa:	4b42      	ldr	r3, [pc, #264]	; (80124b4 <MEMS_runMagCal.constprop.18+0x2b3c>)
 80123ac:	9a00      	ldr	r2, [sp, #0]
 80123ae:	eb0a 0100 	add.w	r1, sl, r0
 80123b2:	eeb0 0a6b 	vmov.f32	s0, s23
 80123b6:	4418      	add	r0, r3
 80123b8:	f7fd f92c 	bl	800f614 <MEMS_compareCalScore>
 80123bc:	2800      	cmp	r0, #0
 80123be:	d040      	beq.n	8012442 <MEMS_runMagCal.constprop.18+0x2aca>
 80123c0:	70a7      	strb	r7, [r4, #2]
 80123c2:	f108 0203 	add.w	r2, r8, #3
 80123c6:	b2d2      	uxtb	r2, r2
 80123c8:	4295      	cmp	r5, r2
 80123ca:	d9af      	bls.n	801232c <MEMS_runMagCal.constprop.18+0x29b4>
 80123cc:	7932      	ldrb	r2, [r6, #4]
 80123ce:	2a00      	cmp	r2, #0
 80123d0:	d0ac      	beq.n	801232c <MEMS_runMagCal.constprop.18+0x29b4>
 80123d2:	2318      	movs	r3, #24
 80123d4:	eeb0 0a6b 	vmov.f32	s0, s23
 80123d8:	9a00      	ldr	r2, [sp, #0]
 80123da:	4837      	ldr	r0, [pc, #220]	; (80124b8 <MEMS_runMagCal.constprop.18+0x2b40>)
 80123dc:	fb03 a109 	mla	r1, r3, r9, sl
 80123e0:	f7fd f918 	bl	800f614 <MEMS_compareCalScore>
 80123e4:	b368      	cbz	r0, 8012442 <MEMS_runMagCal.constprop.18+0x2aca>
 80123e6:	7137      	strb	r7, [r6, #4]
 80123e8:	e7a0      	b.n	801232c <MEMS_runMagCal.constprop.18+0x29b4>
 80123ea:	7833      	ldrb	r3, [r6, #0]
 80123ec:	462c      	mov	r4, r5
 80123ee:	9d03      	ldr	r5, [sp, #12]
 80123f0:	bb83      	cbnz	r3, 8012454 <MEMS_runMagCal.constprop.18+0x2adc>
 80123f2:	2c01      	cmp	r4, #1
 80123f4:	f67f ae27 	bls.w	8012046 <MEMS_runMagCal.constprop.18+0x26ce>
 80123f8:	7873      	ldrb	r3, [r6, #1]
 80123fa:	bb4b      	cbnz	r3, 8012450 <MEMS_runMagCal.constprop.18+0x2ad8>
 80123fc:	2c02      	cmp	r4, #2
 80123fe:	f43f ae22 	beq.w	8012046 <MEMS_runMagCal.constprop.18+0x26ce>
 8012402:	78b3      	ldrb	r3, [r6, #2]
 8012404:	bb13      	cbnz	r3, 801244c <MEMS_runMagCal.constprop.18+0x2ad4>
 8012406:	2c03      	cmp	r4, #3
 8012408:	f43f ae1d 	beq.w	8012046 <MEMS_runMagCal.constprop.18+0x26ce>
 801240c:	78f3      	ldrb	r3, [r6, #3]
 801240e:	b9db      	cbnz	r3, 8012448 <MEMS_runMagCal.constprop.18+0x2ad0>
 8012410:	2c04      	cmp	r4, #4
 8012412:	f43f ae18 	beq.w	8012046 <MEMS_runMagCal.constprop.18+0x26ce>
 8012416:	7933      	ldrb	r3, [r6, #4]
 8012418:	2b00      	cmp	r3, #0
 801241a:	f43f ae14 	beq.w	8012046 <MEMS_runMagCal.constprop.18+0x26ce>
 801241e:	2404      	movs	r4, #4
 8012420:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8012424:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012428:	2718      	movs	r7, #24
 801242a:	fb07 b404 	mla	r4, r7, r4, fp
 801242e:	f104 0728 	add.w	r7, r4, #40	; 0x28
 8012432:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012434:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8012438:	f89b 4024 	ldrb.w	r4, [fp, #36]	; 0x24
 801243c:	e887 0003 	stmia.w	r7, {r0, r1}
 8012440:	e607      	b.n	8012052 <MEMS_runMagCal.constprop.18+0x26da>
 8012442:	f804 7c01 	strb.w	r7, [r4, #-1]
 8012446:	e771      	b.n	801232c <MEMS_runMagCal.constprop.18+0x29b4>
 8012448:	2403      	movs	r4, #3
 801244a:	e7e9      	b.n	8012420 <MEMS_runMagCal.constprop.18+0x2aa8>
 801244c:	2402      	movs	r4, #2
 801244e:	e7e7      	b.n	8012420 <MEMS_runMagCal.constprop.18+0x2aa8>
 8012450:	2401      	movs	r4, #1
 8012452:	e7e5      	b.n	8012420 <MEMS_runMagCal.constprop.18+0x2aa8>
 8012454:	2400      	movs	r4, #0
 8012456:	e7e3      	b.n	8012420 <MEMS_runMagCal.constprop.18+0x2aa8>
 8012458:	2800      	cmp	r0, #0
 801245a:	bfb8      	it	lt
 801245c:	eba2 000e 	sublt.w	r0, r2, lr
 8012460:	b200      	sxth	r0, r0
 8012462:	e5b1      	b.n	8011fc8 <MEMS_runMagCal.constprop.18+0x2650>
 8012464:	b29b      	uxth	r3, r3
 8012466:	b292      	uxth	r2, r2
 8012468:	f1bc 0f00 	cmp.w	ip, #0
 801246c:	bfb4      	ite	lt
 801246e:	1ad3      	sublt	r3, r2, r3
 8012470:	1a9b      	subge	r3, r3, r2
 8012472:	b21b      	sxth	r3, r3
 8012474:	e573      	b.n	8011f5e <MEMS_runMagCal.constprop.18+0x25e6>
 8012476:	9b02      	ldr	r3, [sp, #8]
 8012478:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801247a:	2b01      	cmp	r3, #1
 801247c:	d04e      	beq.n	801251c <MEMS_runMagCal.constprop.18+0x2ba4>
 801247e:	2c01      	cmp	r4, #1
 8012480:	f67f ad05 	bls.w	8011e8e <MEMS_runMagCal.constprop.18+0x2516>
 8012484:	f04f 0a00 	mov.w	sl, #0
 8012488:	2301      	movs	r3, #1
 801248a:	9703      	str	r7, [sp, #12]
 801248c:	f8cd 8010 	str.w	r8, [sp, #16]
 8012490:	f8cd a008 	str.w	sl, [sp, #8]
 8012494:	46a0      	mov	r8, r4
 8012496:	4699      	mov	r9, r3
 8012498:	461f      	mov	r7, r3
 801249a:	4654      	mov	r4, sl
 801249c:	e014      	b.n	80124c8 <MEMS_runMagCal.constprop.18+0x2b50>
 801249e:	bf00      	nop
 80124a0:	0001517f 	.word	0x0001517f
 80124a4:	367e3344 	.word	0x367e3344
 80124a8:	00000000 	.word	0x00000000
 80124ac:	20001668 	.word	0x20001668
 80124b0:	20001680 	.word	0x20001680
 80124b4:	20001698 	.word	0x20001698
 80124b8:	200016c8 	.word	0x200016c8
 80124bc:	20001650 	.word	0x20001650
 80124c0:	fa5f f98c 	uxtb.w	r9, ip
 80124c4:	45c8      	cmp	r8, r9
 80124c6:	d920      	bls.n	801250a <MEMS_runMagCal.constprop.18+0x2b92>
 80124c8:	2318      	movs	r3, #24
 80124ca:	2228      	movs	r2, #40	; 0x28
 80124cc:	fb13 210a 	smlabb	r1, r3, sl, r2
 80124d0:	fb13 2009 	smlabb	r0, r3, r9, r2
 80124d4:	4459      	add	r1, fp
 80124d6:	4458      	add	r0, fp
 80124d8:	eeb0 0a6b 	vmov.f32	s0, s23
 80124dc:	f7fb fe80 	bl	800e1e0 <MEMS_checkConsistency.constprop.32>
 80124e0:	9902      	ldr	r1, [sp, #8]
 80124e2:	3101      	adds	r1, #1
 80124e4:	b24b      	sxtb	r3, r1
 80124e6:	2801      	cmp	r0, #1
 80124e8:	f109 0c01 	add.w	ip, r9, #1
 80124ec:	9302      	str	r3, [sp, #8]
 80124ee:	d1e7      	bne.n	80124c0 <MEMS_runMagCal.constprop.18+0x2b48>
 80124f0:	f815 100a 	ldrb.w	r1, [r5, sl]
 80124f4:	3101      	adds	r1, #1
 80124f6:	f805 100a 	strb.w	r1, [r5, sl]
 80124fa:	f815 1009 	ldrb.w	r1, [r5, r9]
 80124fe:	3401      	adds	r4, #1
 8012500:	3101      	adds	r1, #1
 8012502:	f805 1009 	strb.w	r1, [r5, r9]
 8012506:	b264      	sxtb	r4, r4
 8012508:	e7da      	b.n	80124c0 <MEMS_runMagCal.constprop.18+0x2b48>
 801250a:	f107 0901 	add.w	r9, r7, #1
 801250e:	fa5f f989 	uxtb.w	r9, r9
 8012512:	45c8      	cmp	r8, r9
 8012514:	d926      	bls.n	8012564 <MEMS_runMagCal.constprop.18+0x2bec>
 8012516:	46ba      	mov	sl, r7
 8012518:	464f      	mov	r7, r9
 801251a:	e7d5      	b.n	80124c8 <MEMS_runMagCal.constprop.18+0x2b50>
 801251c:	f04f 0c00 	mov.w	ip, #0
 8012520:	46e6      	mov	lr, ip
 8012522:	46e1      	mov	r9, ip
 8012524:	f04f 0818 	mov.w	r8, #24
 8012528:	e006      	b.n	8012538 <MEMS_runMagCal.constprop.18+0x2bc0>
 801252a:	f10e 0e01 	add.w	lr, lr, #1
 801252e:	fa5f fe8e 	uxtb.w	lr, lr
 8012532:	45a6      	cmp	lr, r4
 8012534:	f080 80bd 	bcs.w	80126b2 <MEMS_runMagCal.constprop.18+0x2d3a>
 8012538:	f816 300e 	ldrb.w	r3, [r6, lr]
 801253c:	2b01      	cmp	r3, #1
 801253e:	d1f4      	bne.n	801252a <MEMS_runMagCal.constprop.18+0x2bb2>
 8012540:	ebae 070c 	sub.w	r7, lr, ip
 8012544:	b2ff      	uxtb	r7, r7
 8012546:	b27b      	sxtb	r3, r7
 8012548:	2b00      	cmp	r3, #0
 801254a:	db04      	blt.n	8012556 <MEMS_runMagCal.constprop.18+0x2bde>
 801254c:	f89b 2025 	ldrb.w	r2, [fp, #37]	; 0x25
 8012550:	4293      	cmp	r3, r2
 8012552:	f2c0 80b5 	blt.w	80126c0 <MEMS_runMagCal.constprop.18+0x2d48>
 8012556:	f10c 0c01 	add.w	ip, ip, #1
 801255a:	f89b 4024 	ldrb.w	r4, [fp, #36]	; 0x24
 801255e:	fa5f fc8c 	uxtb.w	ip, ip
 8012562:	e7e2      	b.n	801252a <MEMS_runMagCal.constprop.18+0x2bb2>
 8012564:	9b02      	ldr	r3, [sp, #8]
 8012566:	9f03      	ldr	r7, [sp, #12]
 8012568:	4622      	mov	r2, r4
 801256a:	1a9b      	subs	r3, r3, r2
 801256c:	429a      	cmp	r2, r3
 801256e:	4644      	mov	r4, r8
 8012570:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012574:	da5c      	bge.n	8012630 <MEMS_runMagCal.constprop.18+0x2cb8>
 8012576:	eba4 0308 	sub.w	r3, r4, r8
 801257a:	4598      	cmp	r8, r3
 801257c:	da58      	bge.n	8012630 <MEMS_runMagCal.constprop.18+0x2cb8>
 801257e:	782b      	ldrb	r3, [r5, #0]
 8012580:	786a      	ldrb	r2, [r5, #1]
 8012582:	429a      	cmp	r2, r3
 8012584:	bf38      	it	cc
 8012586:	461a      	movcc	r2, r3
 8012588:	2c02      	cmp	r4, #2
 801258a:	d90f      	bls.n	80125ac <MEMS_runMagCal.constprop.18+0x2c34>
 801258c:	78a9      	ldrb	r1, [r5, #2]
 801258e:	428a      	cmp	r2, r1
 8012590:	bf38      	it	cc
 8012592:	460a      	movcc	r2, r1
 8012594:	2c03      	cmp	r4, #3
 8012596:	d009      	beq.n	80125ac <MEMS_runMagCal.constprop.18+0x2c34>
 8012598:	78e9      	ldrb	r1, [r5, #3]
 801259a:	428a      	cmp	r2, r1
 801259c:	bf38      	it	cc
 801259e:	460a      	movcc	r2, r1
 80125a0:	2c04      	cmp	r4, #4
 80125a2:	d003      	beq.n	80125ac <MEMS_runMagCal.constprop.18+0x2c34>
 80125a4:	7929      	ldrb	r1, [r5, #4]
 80125a6:	428a      	cmp	r2, r1
 80125a8:	bf38      	it	cc
 80125aa:	460a      	movcc	r2, r1
 80125ac:	4293      	cmp	r3, r2
 80125ae:	7869      	ldrb	r1, [r5, #1]
 80125b0:	bf36      	itet	cc
 80125b2:	461a      	movcc	r2, r3
 80125b4:	f04f 33ff 	movcs.w	r3, #4294967295
 80125b8:	2300      	movcc	r3, #0
 80125ba:	4291      	cmp	r1, r2
 80125bc:	d276      	bcs.n	80126ac <MEMS_runMagCal.constprop.18+0x2d34>
 80125be:	2c02      	cmp	r4, #2
 80125c0:	d972      	bls.n	80126a8 <MEMS_runMagCal.constprop.18+0x2d30>
 80125c2:	460a      	mov	r2, r1
 80125c4:	2301      	movs	r3, #1
 80125c6:	78a9      	ldrb	r1, [r5, #2]
 80125c8:	428a      	cmp	r2, r1
 80125ca:	d96a      	bls.n	80126a2 <MEMS_runMagCal.constprop.18+0x2d2a>
 80125cc:	2c03      	cmp	r4, #3
 80125ce:	d066      	beq.n	801269e <MEMS_runMagCal.constprop.18+0x2d26>
 80125d0:	460a      	mov	r2, r1
 80125d2:	2302      	movs	r3, #2
 80125d4:	78e9      	ldrb	r1, [r5, #3]
 80125d6:	428a      	cmp	r2, r1
 80125d8:	d95e      	bls.n	8012698 <MEMS_runMagCal.constprop.18+0x2d20>
 80125da:	2c04      	cmp	r4, #4
 80125dc:	d05a      	beq.n	8012694 <MEMS_runMagCal.constprop.18+0x2d1c>
 80125de:	460a      	mov	r2, r1
 80125e0:	2303      	movs	r3, #3
 80125e2:	7929      	ldrb	r1, [r5, #4]
 80125e4:	4291      	cmp	r1, r2
 80125e6:	d350      	bcc.n	801268a <MEMS_runMagCal.constprop.18+0x2d12>
 80125e8:	1c5a      	adds	r2, r3, #1
 80125ea:	d032      	beq.n	8012652 <MEMS_runMagCal.constprop.18+0x2cda>
 80125ec:	f89b 2025 	ldrb.w	r2, [fp, #37]	; 0x25
 80125f0:	4293      	cmp	r3, r2
 80125f2:	f6bf ac4e 	bge.w	8011e92 <MEMS_runMagCal.constprop.18+0x251a>
 80125f6:	3c01      	subs	r4, #1
 80125f8:	f88b 4024 	strb.w	r4, [fp, #36]	; 0x24
 80125fc:	b2dc      	uxtb	r4, r3
 80125fe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8012602:	00db      	lsls	r3, r3, #3
 8012604:	f103 0e40 	add.w	lr, r3, #64	; 0x40
 8012608:	3328      	adds	r3, #40	; 0x28
 801260a:	eb0b 0c03 	add.w	ip, fp, r3
 801260e:	f89b 3025 	ldrb.w	r3, [fp, #37]	; 0x25
 8012612:	1e5a      	subs	r2, r3, #1
 8012614:	4294      	cmp	r4, r2
 8012616:	44de      	add	lr, fp
 8012618:	da0c      	bge.n	8012634 <MEMS_runMagCal.constprop.18+0x2cbc>
 801261a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801261e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012622:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012626:	3401      	adds	r4, #1
 8012628:	e88c 0003 	stmia.w	ip, {r0, r1}
 801262c:	b2e4      	uxtb	r4, r4
 801262e:	e7e6      	b.n	80125fe <MEMS_runMagCal.constprop.18+0x2c86>
 8012630:	2700      	movs	r7, #0
 8012632:	e42e      	b.n	8011e92 <MEMS_runMagCal.constprop.18+0x251a>
 8012634:	2218      	movs	r2, #24
 8012636:	fb02 b303 	mla	r3, r2, r3, fp
 801263a:	f89b 4024 	ldrb.w	r4, [fp, #36]	; 0x24
 801263e:	9702      	str	r7, [sp, #8]
 8012640:	2200      	movs	r2, #0
 8012642:	629a      	str	r2, [r3, #40]	; 0x28
 8012644:	eddb ba01 	vldr	s23, [fp, #4]
 8012648:	2c00      	cmp	r4, #0
 801264a:	f47f ac23 	bne.w	8011e94 <MEMS_runMagCal.constprop.18+0x251c>
 801264e:	f7fe bbd9 	b.w	8010e04 <MEMS_runMagCal.constprop.18+0x148c>
 8012652:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012656:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801265a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801265e:	d8e7      	bhi.n	8012630 <MEMS_runMagCal.constprop.18+0x2cb8>
 8012660:	f04f 0800 	mov.w	r8, #0
 8012664:	f04f 0918 	mov.w	r9, #24
 8012668:	9b01      	ldr	r3, [sp, #4]
 801266a:	fb09 3108 	mla	r1, r9, r8, r3
 801266e:	fa5f f388 	uxtb.w	r3, r8
 8012672:	429c      	cmp	r4, r3
 8012674:	eeb0 0a6b 	vmov.f32	s0, s23
 8012678:	a819      	add	r0, sp, #100	; 0x64
 801267a:	d9d9      	bls.n	8012630 <MEMS_runMagCal.constprop.18+0x2cb8>
 801267c:	f7fb fdb0 	bl	800e1e0 <MEMS_checkConsistency.constprop.32>
 8012680:	f108 0301 	add.w	r3, r8, #1
 8012684:	b118      	cbz	r0, 801268e <MEMS_runMagCal.constprop.18+0x2d16>
 8012686:	4698      	mov	r8, r3
 8012688:	e7ee      	b.n	8012668 <MEMS_runMagCal.constprop.18+0x2cf0>
 801268a:	2304      	movs	r3, #4
 801268c:	e7ae      	b.n	80125ec <MEMS_runMagCal.constprop.18+0x2c74>
 801268e:	fa4f f388 	sxtb.w	r3, r8
 8012692:	e7ab      	b.n	80125ec <MEMS_runMagCal.constprop.18+0x2c74>
 8012694:	2303      	movs	r3, #3
 8012696:	e7a9      	b.n	80125ec <MEMS_runMagCal.constprop.18+0x2c74>
 8012698:	2c04      	cmp	r4, #4
 801269a:	d1a2      	bne.n	80125e2 <MEMS_runMagCal.constprop.18+0x2c6a>
 801269c:	e7a4      	b.n	80125e8 <MEMS_runMagCal.constprop.18+0x2c70>
 801269e:	2302      	movs	r3, #2
 80126a0:	e7a4      	b.n	80125ec <MEMS_runMagCal.constprop.18+0x2c74>
 80126a2:	2c03      	cmp	r4, #3
 80126a4:	d196      	bne.n	80125d4 <MEMS_runMagCal.constprop.18+0x2c5c>
 80126a6:	e79f      	b.n	80125e8 <MEMS_runMagCal.constprop.18+0x2c70>
 80126a8:	2301      	movs	r3, #1
 80126aa:	e79f      	b.n	80125ec <MEMS_runMagCal.constprop.18+0x2c74>
 80126ac:	2c02      	cmp	r4, #2
 80126ae:	d88a      	bhi.n	80125c6 <MEMS_runMagCal.constprop.18+0x2c4e>
 80126b0:	e79a      	b.n	80125e8 <MEMS_runMagCal.constprop.18+0x2c70>
 80126b2:	eddb ba01 	vldr	s23, [fp, #4]
 80126b6:	2c00      	cmp	r4, #0
 80126b8:	f47f abec 	bne.w	8011e94 <MEMS_runMagCal.constprop.18+0x251c>
 80126bc:	f7fe bba2 	b.w	8010e04 <MEMS_runMagCal.constprop.18+0x148c>
 80126c0:	2c01      	cmp	r4, #1
 80126c2:	4623      	mov	r3, r4
 80126c4:	bf38      	it	cc
 80126c6:	2301      	movcc	r3, #1
 80126c8:	3b01      	subs	r3, #1
 80126ca:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
 80126ce:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80126d2:	00db      	lsls	r3, r3, #3
 80126d4:	f103 0a40 	add.w	sl, r3, #64	; 0x40
 80126d8:	3328      	adds	r3, #40	; 0x28
 80126da:	eb0b 0403 	add.w	r4, fp, r3
 80126de:	f89b 3025 	ldrb.w	r3, [fp, #37]	; 0x25
 80126e2:	1e5a      	subs	r2, r3, #1
 80126e4:	4297      	cmp	r7, r2
 80126e6:	44da      	add	sl, fp
 80126e8:	da12      	bge.n	8012710 <MEMS_runMagCal.constprop.18+0x2d98>
 80126ea:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 80126ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80126f0:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80126f4:	3701      	adds	r7, #1
 80126f6:	e884 0003 	stmia.w	r4, {r0, r1}
 80126fa:	b2ff      	uxtb	r7, r7
 80126fc:	e7e7      	b.n	80126ce <MEMS_runMagCal.constprop.18+0x2d56>
 80126fe:	796b      	ldrb	r3, [r5, #5]
 8012700:	f108 0801 	add.w	r8, r8, #1
 8012704:	3301      	adds	r3, #1
 8012706:	fa4f f888 	sxtb.w	r8, r8
 801270a:	716b      	strb	r3, [r5, #5]
 801270c:	f7ff bacc 	b.w	8011ca8 <MEMS_runMagCal.constprop.18+0x2330>
 8012710:	fb08 b303 	mla	r3, r8, r3, fp
 8012714:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
 8012718:	e71d      	b.n	8012556 <MEMS_runMagCal.constprop.18+0x2bde>
 801271a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 801271e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8012722:	f7fe bc0e 	b.w	8010f42 <MEMS_runMagCal.constprop.18+0x15ca>
 8012726:	495d      	ldr	r1, [pc, #372]	; (801289c <MEMS_runMagCal.constprop.18+0x2f24>)
 8012728:	428b      	cmp	r3, r1
 801272a:	d82c      	bhi.n	8012786 <MEMS_runMagCal.constprop.18+0x2e0e>
 801272c:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 8012730:	ee07 3a10 	vmov	s14, r3
 8012734:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 80128a0 <MEMS_runMagCal.constprop.18+0x2f28>
 8012738:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801273c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012740:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8012744:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8012748:	ee27 7a26 	vmul.f32	s14, s14, s13
 801274c:	f7fe bbd8 	b.w	8010f00 <MEMS_runMagCal.constprop.18+0x1588>
 8012750:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8012754:	ee37 7a26 	vadd.f32	s14, s14, s13
 8012758:	f7fe bc39 	b.w	8010fce <MEMS_runMagCal.constprop.18+0x1656>
 801275c:	494f      	ldr	r1, [pc, #316]	; (801289c <MEMS_runMagCal.constprop.18+0x2f24>)
 801275e:	428b      	cmp	r3, r1
 8012760:	d815      	bhi.n	801278e <MEMS_runMagCal.constprop.18+0x2e16>
 8012762:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 8012766:	ee07 3a10 	vmov	s14, r3
 801276a:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 80128a0 <MEMS_runMagCal.constprop.18+0x2f28>
 801276e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8012772:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012776:	eea6 7ac6 	vfms.f32	s14, s13, s12
 801277a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 801277e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012782:	f7fe bc03 	b.w	8010f8c <MEMS_runMagCal.constprop.18+0x1614>
 8012786:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801278a:	f7fe bbb9 	b.w	8010f00 <MEMS_runMagCal.constprop.18+0x1588>
 801278e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012792:	f7fe bbfb 	b.w	8010f8c <MEMS_runMagCal.constprop.18+0x1614>
 8012796:	792b      	ldrb	r3, [r5, #4]
 8012798:	f108 0801 	add.w	r8, r8, #1
 801279c:	3301      	adds	r3, #1
 801279e:	fa4f f888 	sxtb.w	r8, r8
 80127a2:	712b      	strb	r3, [r5, #4]
 80127a4:	f7ff ba74 	b.w	8011c90 <MEMS_runMagCal.constprop.18+0x2318>
 80127a8:	78eb      	ldrb	r3, [r5, #3]
 80127aa:	f108 0801 	add.w	r8, r8, #1
 80127ae:	3301      	adds	r3, #1
 80127b0:	fa4f f888 	sxtb.w	r8, r8
 80127b4:	70eb      	strb	r3, [r5, #3]
 80127b6:	f7ff ba5f 	b.w	8011c78 <MEMS_runMagCal.constprop.18+0x2300>
 80127ba:	78ab      	ldrb	r3, [r5, #2]
 80127bc:	f108 0801 	add.w	r8, r8, #1
 80127c0:	3301      	adds	r3, #1
 80127c2:	fa4f f888 	sxtb.w	r8, r8
 80127c6:	70ab      	strb	r3, [r5, #2]
 80127c8:	f7ff ba4a 	b.w	8011c60 <MEMS_runMagCal.constprop.18+0x22e8>
 80127cc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80128a4 <MEMS_runMagCal.constprop.18+0x2f2c>
 80127d0:	eef8 7a66 	vcvt.f32.u32	s15, s13
 80127d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80127d8:	ed9b 7a0a 	vldr	s14, [fp, #40]	; 0x28
 80127dc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80127e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80127e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127e8:	f53f aa94 	bmi.w	8011d14 <MEMS_runMagCal.constprop.18+0x239c>
 80127ec:	e64a      	b.n	8012484 <MEMS_runMagCal.constprop.18+0x2b0c>
 80127ee:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80127f2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80127f6:	f7fe bc30 	b.w	801105a <MEMS_runMagCal.constprop.18+0x16e2>
 80127fa:	4928      	ldr	r1, [pc, #160]	; (801289c <MEMS_runMagCal.constprop.18+0x2f24>)
 80127fc:	428b      	cmp	r3, r1
 80127fe:	d81d      	bhi.n	801283c <MEMS_runMagCal.constprop.18+0x2ec4>
 8012800:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 8012804:	ee07 3a10 	vmov	s14, r3
 8012808:	ed9f 6a25 	vldr	s12, [pc, #148]	; 80128a0 <MEMS_runMagCal.constprop.18+0x2f28>
 801280c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8012810:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012814:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8012818:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 801281c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012820:	f7fe bbfa 	b.w	8011018 <MEMS_runMagCal.constprop.18+0x16a0>
 8012824:	2701      	movs	r7, #1
 8012826:	f7fe ba35 	b.w	8010c94 <MEMS_runMagCal.constprop.18+0x131c>
 801282a:	786b      	ldrb	r3, [r5, #1]
 801282c:	f108 0801 	add.w	r8, r8, #1
 8012830:	3301      	adds	r3, #1
 8012832:	fa4f f888 	sxtb.w	r8, r8
 8012836:	706b      	strb	r3, [r5, #1]
 8012838:	f7ff ba06 	b.w	8011c48 <MEMS_runMagCal.constprop.18+0x22d0>
 801283c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012840:	f7fe bbea 	b.w	8011018 <MEMS_runMagCal.constprop.18+0x16a0>
 8012844:	782b      	ldrb	r3, [r5, #0]
 8012846:	3301      	adds	r3, #1
 8012848:	4680      	mov	r8, r0
 801284a:	702b      	strb	r3, [r5, #0]
 801284c:	f7ff b9f1 	b.w	8011c32 <MEMS_runMagCal.constprop.18+0x22ba>
 8012850:	4912      	ldr	r1, [pc, #72]	; (801289c <MEMS_runMagCal.constprop.18+0x2f24>)
 8012852:	428b      	cmp	r3, r1
 8012854:	d81d      	bhi.n	8012892 <MEMS_runMagCal.constprop.18+0x2f1a>
 8012856:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 801285a:	ee07 3a10 	vmov	s14, r3
 801285e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80128a0 <MEMS_runMagCal.constprop.18+0x2f28>
 8012862:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8012866:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801286a:	eea6 7ac6 	vfms.f32	s14, s13, s12
 801286e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8012872:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012876:	f7fe bc15 	b.w	80110a4 <MEMS_runMagCal.constprop.18+0x172c>
 801287a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 801287e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8012882:	f7fe bc30 	b.w	80110e6 <MEMS_runMagCal.constprop.18+0x176e>
 8012886:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801288a:	ee37 7a26 	vadd.f32	s14, s14, s13
 801288e:	f7fe bc2a 	b.w	80110e6 <MEMS_runMagCal.constprop.18+0x176e>
 8012892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012896:	f7fe bc05 	b.w	80110a4 <MEMS_runMagCal.constprop.18+0x172c>
 801289a:	bf00      	nop
 801289c:	0001517f 	.word	0x0001517f
 80128a0:	367e3344 	.word	0x367e3344
 80128a4:	3a83126f 	.word	0x3a83126f

080128a8 <MotionMC_Initialize>:
 80128a8:	4a93      	ldr	r2, [pc, #588]	; (8012af8 <MotionMC_Initialize+0x250>)
 80128aa:	6813      	ldr	r3, [r2, #0]
 80128ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128b0:	f023 0301 	bic.w	r3, r3, #1
 80128b4:	4c91      	ldr	r4, [pc, #580]	; (8012afc <MotionMC_Initialize+0x254>)
 80128b6:	6013      	str	r3, [r2, #0]
 80128b8:	6823      	ldr	r3, [r4, #0]
 80128ba:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80128be:	4013      	ands	r3, r2
 80128c0:	f24c 2540 	movw	r5, #49728	; 0xc240
 80128c4:	42ab      	cmp	r3, r5
 80128c6:	b0ae      	sub	sp, #184	; 0xb8
 80128c8:	d013      	beq.n	80128f2 <MotionMC_Initialize+0x4a>
 80128ca:	6823      	ldr	r3, [r4, #0]
 80128cc:	f24c 2470 	movw	r4, #49776	; 0xc270
 80128d0:	4013      	ands	r3, r2
 80128d2:	42a3      	cmp	r3, r4
 80128d4:	d00d      	beq.n	80128f2 <MotionMC_Initialize+0x4a>
 80128d6:	4b8a      	ldr	r3, [pc, #552]	; (8012b00 <MotionMC_Initialize+0x258>)
 80128d8:	2201      	movs	r2, #1
 80128da:	601a      	str	r2, [r3, #0]
 80128dc:	681a      	ldr	r2, [r3, #0]
 80128de:	2a00      	cmp	r2, #0
 80128e0:	d1fc      	bne.n	80128dc <MotionMC_Initialize+0x34>
 80128e2:	4b88      	ldr	r3, [pc, #544]	; (8012b04 <MotionMC_Initialize+0x25c>)
 80128e4:	4a88      	ldr	r2, [pc, #544]	; (8012b08 <MotionMC_Initialize+0x260>)
 80128e6:	601a      	str	r2, [r3, #0]
 80128e8:	681a      	ldr	r2, [r3, #0]
 80128ea:	4b88      	ldr	r3, [pc, #544]	; (8012b0c <MotionMC_Initialize+0x264>)
 80128ec:	429a      	cmp	r2, r3
 80128ee:	d01f      	beq.n	8012930 <MotionMC_Initialize+0x88>
 80128f0:	e7fe      	b.n	80128f0 <MotionMC_Initialize+0x48>
 80128f2:	4b87      	ldr	r3, [pc, #540]	; (8012b10 <MotionMC_Initialize+0x268>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d1ed      	bne.n	80128d6 <MotionMC_Initialize+0x2e>
 80128fa:	4a86      	ldr	r2, [pc, #536]	; (8012b14 <MotionMC_Initialize+0x26c>)
 80128fc:	6813      	ldr	r3, [r2, #0]
 80128fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012902:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8012906:	d006      	beq.n	8012916 <MotionMC_Initialize+0x6e>
 8012908:	6813      	ldr	r3, [r2, #0]
 801290a:	f240 4283 	movw	r2, #1155	; 0x483
 801290e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012912:	4293      	cmp	r3, r2
 8012914:	d1df      	bne.n	80128d6 <MotionMC_Initialize+0x2e>
 8012916:	4b80      	ldr	r3, [pc, #512]	; (8012b18 <MotionMC_Initialize+0x270>)
 8012918:	2201      	movs	r2, #1
 801291a:	601a      	str	r2, [r3, #0]
 801291c:	681a      	ldr	r2, [r3, #0]
 801291e:	2a00      	cmp	r2, #0
 8012920:	d1fc      	bne.n	801291c <MotionMC_Initialize+0x74>
 8012922:	4b7e      	ldr	r3, [pc, #504]	; (8012b1c <MotionMC_Initialize+0x274>)
 8012924:	4a78      	ldr	r2, [pc, #480]	; (8012b08 <MotionMC_Initialize+0x260>)
 8012926:	601a      	str	r2, [r3, #0]
 8012928:	681a      	ldr	r2, [r3, #0]
 801292a:	4b78      	ldr	r3, [pc, #480]	; (8012b0c <MotionMC_Initialize+0x264>)
 801292c:	429a      	cmp	r2, r3
 801292e:	d1df      	bne.n	80128f0 <MotionMC_Initialize+0x48>
 8012930:	4c7b      	ldr	r4, [pc, #492]	; (8012b20 <MotionMC_Initialize+0x278>)
 8012932:	1e43      	subs	r3, r0, #1
 8012934:	f04f 0901 	mov.w	r9, #1
 8012938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801293c:	f884 93e0 	strb.w	r9, [r4, #992]	; 0x3e0
 8012940:	d302      	bcc.n	8012948 <MotionMC_Initialize+0xa0>
 8012942:	b02e      	add	sp, #184	; 0xb8
 8012944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012948:	468a      	mov	sl, r1
 801294a:	4607      	mov	r7, r0
 801294c:	fa0f f880 	sxth.w	r8, r0
 8012950:	2900      	cmp	r1, #0
 8012952:	d154      	bne.n	80129fe <MotionMC_Initialize+0x156>
 8012954:	f104 06a4 	add.w	r6, r4, #164	; 0xa4
 8012958:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801295a:	ad02      	add	r5, sp, #8
 801295c:	f88d 9000 	strb.w	r9, [sp]
 8012960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012962:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012966:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801296a:	4631      	mov	r1, r6
 801296c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8012970:	f851 29b0 	ldr.w	r2, [r1], #-176
 8012974:	602a      	str	r2, [r5, #0]
 8012976:	a80f      	add	r0, sp, #60	; 0x3c
 8012978:	227c      	movs	r2, #124	; 0x7c
 801297a:	9301      	str	r3, [sp, #4]
 801297c:	f001 f8ba 	bl	8013af4 <memcpy>
 8012980:	4669      	mov	r1, sp
 8012982:	20b8      	movs	r0, #184	; 0xb8
 8012984:	f7f9 fd07 	bl	800c396 <MotionMC_SaveCalInNVM>
 8012988:	f884 a014 	strb.w	sl, [r4, #20]
 801298c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012990:	4a64      	ldr	r2, [pc, #400]	; (8012b24 <MotionMC_Initialize+0x27c>)
 8012992:	1bdb      	subs	r3, r3, r7
 8012994:	ee07 3a90 	vmov	s15, r3
 8012998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801299c:	23c8      	movs	r3, #200	; 0xc8
 801299e:	eef0 7ae7 	vabs.f32	s15, s15
 80129a2:	fb93 f3f7 	sdiv	r3, r3, r7
 80129a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80129aa:	b2db      	uxtb	r3, r3
 80129ac:	2b32      	cmp	r3, #50	; 0x32
 80129ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80129b2:	bf28      	it	cs
 80129b4:	2332      	movcs	r3, #50	; 0x32
 80129b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ba:	f884 33ea 	strb.w	r3, [r4, #1002]	; 0x3ea
 80129be:	6017      	str	r7, [r2, #0]
 80129c0:	dd0d      	ble.n	80129de <MotionMC_Initialize+0x136>
 80129c2:	2300      	movs	r3, #0
 80129c4:	4958      	ldr	r1, [pc, #352]	; (8012b28 <MotionMC_Initialize+0x280>)
 80129c6:	f8a4 8002 	strh.w	r8, [r4, #2]
 80129ca:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80129ce:	6061      	str	r1, [r4, #4]
 80129d0:	8123      	strh	r3, [r4, #8]
 80129d2:	60e3      	str	r3, [r4, #12]
 80129d4:	8022      	strh	r2, [r4, #0]
 80129d6:	2300      	movs	r3, #0
 80129d8:	f884 357c 	strb.w	r3, [r4, #1404]	; 0x57c
 80129dc:	e7b1      	b.n	8012942 <MotionMC_Initialize+0x9a>
 80129de:	edd4 7a01 	vldr	s15, [r4, #4]
 80129e2:	eddf 6a52 	vldr	s13, [pc, #328]	; 8012b2c <MotionMC_Initialize+0x284>
 80129e6:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8012b30 <MotionMC_Initialize+0x288>
 80129ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80129ee:	eef0 7ae7 	vabs.f32	s15, s15
 80129f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80129f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129fa:	dce2      	bgt.n	80129c2 <MotionMC_Initialize+0x11a>
 80129fc:	e7eb      	b.n	80129d6 <MotionMC_Initialize+0x12e>
 80129fe:	2500      	movs	r5, #0
 8012a00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012a04:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 8012a08:	484a      	ldr	r0, [pc, #296]	; (8012b34 <MotionMC_Initialize+0x28c>)
 8012a0a:	60e5      	str	r5, [r4, #12]
 8012a0c:	4629      	mov	r1, r5
 8012a0e:	7525      	strb	r5, [r4, #20]
 8012a10:	61a5      	str	r5, [r4, #24]
 8012a12:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 8012a16:	f884 5020 	strb.w	r5, [r4, #32]
 8012a1a:	60a2      	str	r2, [r4, #8]
 8012a1c:	6120      	str	r0, [r4, #16]
 8012a1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a22:	83a3      	strh	r3, [r4, #28]
 8012a24:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8012a28:	f001 f86f 	bl	8013b0a <memset>
 8012a2c:	f44f 66a0 	mov.w	r6, #1280	; 0x500
 8012a30:	23ff      	movs	r3, #255	; 0xff
 8012a32:	224b      	movs	r2, #75	; 0x4b
 8012a34:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 8012a38:	4629      	mov	r1, r5
 8012a3a:	f8c4 5360 	str.w	r5, [r4, #864]	; 0x360
 8012a3e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 8012a42:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
 8012a46:	f884 20e1 	strb.w	r2, [r4, #225]	; 0xe1
 8012a4a:	f884 30e2 	strb.w	r3, [r4, #226]	; 0xe2
 8012a4e:	f884 3366 	strb.w	r3, [r4, #870]	; 0x366
 8012a52:	222e      	movs	r2, #46	; 0x2e
 8012a54:	f8a4 0364 	strh.w	r0, [r4, #868]	; 0x364
 8012a58:	84a6      	strh	r6, [r4, #36]	; 0x24
 8012a5a:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
 8012a5e:	f001 f854 	bl	8013b0a <memset>
 8012a62:	f1a7 030a 	sub.w	r3, r7, #10
 8012a66:	b29b      	uxth	r3, r3
 8012a68:	a92e      	add	r1, sp, #184	; 0xb8
 8012a6a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012a6e:	2b32      	cmp	r3, #50	; 0x32
 8012a70:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 8012a74:	f04f 0500 	mov.w	r5, #0
 8012a78:	bf98      	it	ls
 8012a7a:	f884 9014 	strbls.w	r9, [r4, #20]
 8012a7e:	2305      	movs	r3, #5
 8012a80:	f884 90a5 	strb.w	r9, [r4, #165]	; 0xa5
 8012a84:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 8012a88:	f8c4 20c4 	str.w	r2, [r4, #196]	; 0xc4
 8012a8c:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
 8012a90:	f801 5db8 	strb.w	r5, [r1, #-184]!
 8012a94:	20b8      	movs	r0, #184	; 0xb8
 8012a96:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 8012a9a:	f7f9 fc6f 	bl	800c37c <MotionMC_LoadCalFromNVM>
 8012a9e:	2801      	cmp	r0, #1
 8012aa0:	f43f af74 	beq.w	801298c <MotionMC_Initialize+0xe4>
 8012aa4:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012aa8:	f88d 5000 	strb.w	r5, [sp]
 8012aac:	f1bc 0f00 	cmp.w	ip, #0
 8012ab0:	f43f af6c 	beq.w	801298c <MotionMC_Initialize+0xe4>
 8012ab4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	f43f af67 	beq.w	801298c <MotionMC_Initialize+0xe4>
 8012abe:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	f43f af62 	beq.w	801298c <MotionMC_Initialize+0xe4>
 8012ac8:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8012acc:	429a      	cmp	r2, r3
 8012ace:	f4ff af5d 	bcc.w	801298c <MotionMC_Initialize+0xe4>
 8012ad2:	ad02      	add	r5, sp, #8
 8012ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ad6:	4e18      	ldr	r6, [pc, #96]	; (8012b38 <MotionMC_Initialize+0x290>)
 8012ad8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012adc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ae0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012ae2:	4630      	mov	r0, r6
 8012ae4:	682b      	ldr	r3, [r5, #0]
 8012ae6:	f840 39b0 	str.w	r3, [r0], #-176
 8012aea:	227c      	movs	r2, #124	; 0x7c
 8012aec:	a90f      	add	r1, sp, #60	; 0x3c
 8012aee:	f8c4 c0d8 	str.w	ip, [r4, #216]	; 0xd8
 8012af2:	f000 ffff 	bl	8013af4 <memcpy>
 8012af6:	e749      	b.n	801298c <MotionMC_Initialize+0xe4>
 8012af8:	e0002000 	.word	0xe0002000
 8012afc:	e000ed00 	.word	0xe000ed00
 8012b00:	40023008 	.word	0x40023008
 8012b04:	40023000 	.word	0x40023000
 8012b08:	f407a5c2 	.word	0xf407a5c2
 8012b0c:	b5e8b5cd 	.word	0xb5e8b5cd
 8012b10:	e0042000 	.word	0xe0042000
 8012b14:	5c001000 	.word	0x5c001000
 8012b18:	58024c08 	.word	0x58024c08
 8012b1c:	58024c00 	.word	0x58024c00
 8012b20:	20001640 	.word	0x20001640
 8012b24:	20000044 	.word	0x20000044
 8012b28:	3dcccccd 	.word	0x3dcccccd
 8012b2c:	3dcccccd 	.word	0x3dcccccd
 8012b30:	3c23d70a 	.word	0x3c23d70a
 8012b34:	2000bf80 	.word	0x2000bf80
 8012b38:	200016e4 	.word	0x200016e4

08012b3c <MotionMC_Update>:
 8012b3c:	4b74      	ldr	r3, [pc, #464]	; (8012d10 <MotionMC_Update+0x1d4>)
 8012b3e:	f893 23e0 	ldrb.w	r2, [r3, #992]	; 0x3e0
 8012b42:	2a00      	cmp	r2, #0
 8012b44:	d07b      	beq.n	8012c3e <MotionMC_Update+0x102>
 8012b46:	ed90 7a00 	vldr	s14, [r0]
 8012b4a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8012b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b52:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b5a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012b5e:	bfac      	ite	ge
 8012b60:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8012b64:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8012b68:	ed90 7a01 	vldr	s14, [r0, #4]
 8012b6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b70:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012b74:	ee17 1a90 	vmov	r1, s15
 8012b78:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8012b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012b88:	bfac      	ite	ge
 8012b8a:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8012b8e:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8012b92:	ed90 7a02 	vldr	s14, [r0, #8]
 8012b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b9e:	ee17 4a90 	vmov	r4, s15
 8012ba2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8012ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012baa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012bb6:	bfac      	ite	ge
 8012bb8:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8012bbc:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8012bc0:	f893 657c 	ldrb.w	r6, [r3, #1404]	; 0x57c
 8012bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012bc8:	ee17 2a90 	vmov	r2, s15
 8012bcc:	b37e      	cbz	r6, 8012c2e <MotionMC_Update+0xf2>
 8012bce:	4d51      	ldr	r5, [pc, #324]	; (8012d14 <MotionMC_Update+0x1d8>)
 8012bd0:	00f0      	lsls	r0, r6, #3
 8012bd2:	682d      	ldr	r5, [r5, #0]
 8012bd4:	181f      	adds	r7, r3, r0
 8012bd6:	fb15 f506 	smulbb	r5, r5, r6
 8012bda:	f8a7 53ec 	strh.w	r5, [r7, #1004]	; 0x3ec
 8012bde:	f647 75fe 	movw	r5, #32766	; 0x7ffe
 8012be2:	4f4d      	ldr	r7, [pc, #308]	; (8012d18 <MotionMC_Update+0x1dc>)
 8012be4:	42a9      	cmp	r1, r5
 8012be6:	bfa8      	it	ge
 8012be8:	4629      	movge	r1, r5
 8012bea:	42aa      	cmp	r2, r5
 8012bec:	bfa8      	it	ge
 8012bee:	462a      	movge	r2, r5
 8012bf0:	42b9      	cmp	r1, r7
 8012bf2:	bfb8      	it	lt
 8012bf4:	4639      	movlt	r1, r7
 8012bf6:	42bc      	cmp	r4, r7
 8012bf8:	db22      	blt.n	8012c40 <MotionMC_Update+0x104>
 8012bfa:	42ac      	cmp	r4, r5
 8012bfc:	bfa8      	it	ge
 8012bfe:	462c      	movge	r4, r5
 8012c00:	b224      	sxth	r4, r4
 8012c02:	4d45      	ldr	r5, [pc, #276]	; (8012d18 <MotionMC_Update+0x1dc>)
 8012c04:	f893 c3ea 	ldrb.w	ip, [r3, #1002]	; 0x3ea
 8012c08:	42aa      	cmp	r2, r5
 8012c0a:	f106 0701 	add.w	r7, r6, #1
 8012c0e:	bfb8      	it	lt
 8012c10:	462a      	movlt	r2, r5
 8012c12:	b2ff      	uxtb	r7, r7
 8012c14:	181d      	adds	r5, r3, r0
 8012c16:	45bc      	cmp	ip, r7
 8012c18:	f8a5 23f2 	strh.w	r2, [r5, #1010]	; 0x3f2
 8012c1c:	f8a5 13ee 	strh.w	r1, [r5, #1006]	; 0x3ee
 8012c20:	f8a5 43f0 	strh.w	r4, [r5, #1008]	; 0x3f0
 8012c24:	f883 757c 	strb.w	r7, [r3, #1404]	; 0x57c
 8012c28:	d00c      	beq.n	8012c44 <MotionMC_Update+0x108>
 8012c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c2e:	68c0      	ldr	r0, [r0, #12]
 8012c30:	f8c3 03e4 	str.w	r0, [r3, #996]	; 0x3e4
 8012c34:	2001      	movs	r0, #1
 8012c36:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
 8012c3a:	4630      	mov	r0, r6
 8012c3c:	e7cf      	b.n	8012bde <MotionMC_Update+0xa2>
 8012c3e:	4770      	bx	lr
 8012c40:	462c      	mov	r4, r5
 8012c42:	e7de      	b.n	8012c02 <MotionMC_Update+0xc6>
 8012c44:	f893 23e8 	ldrb.w	r2, [r3, #1000]	; 0x3e8
 8012c48:	f8d3 83e4 	ldr.w	r8, [r3, #996]	; 0x3e4
 8012c4c:	2100      	movs	r1, #0
 8012c4e:	f883 157c 	strb.w	r1, [r3, #1404]	; 0x57c
 8012c52:	b382      	cbz	r2, 8012cb6 <MotionMC_Update+0x17a>
 8012c54:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
 8012c58:	891a      	ldrh	r2, [r3, #8]
 8012c5a:	e9d3 1703 	ldrd	r1, r7, [r3, #12]
 8012c5e:	f1bc 0f00 	cmp.w	ip, #0
 8012c62:	d026      	beq.n	8012cb2 <MotionMC_Update+0x176>
 8012c64:	f1be 0f00 	cmp.w	lr, #0
 8012c68:	d023      	beq.n	8012cb2 <MotionMC_Update+0x176>
 8012c6a:	492c      	ldr	r1, [pc, #176]	; (8012d1c <MotionMC_Update+0x1e0>)
 8012c6c:	4572      	cmp	r2, lr
 8012c6e:	f101 0408 	add.w	r4, r1, #8
 8012c72:	bf28      	it	cs
 8012c74:	4672      	movcs	r2, lr
 8012c76:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8012c7a:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 8012c7e:	f04f 0c01 	mov.w	ip, #1
 8012c82:	3201      	adds	r2, #1
 8012c84:	b292      	uxth	r2, r2
 8012c86:	4572      	cmp	r2, lr
 8012c88:	bf28      	it	cs
 8012c8a:	4672      	movcs	r2, lr
 8012c8c:	eb02 0509 	add.w	r5, r2, r9
 8012c90:	eb07 04c5 	add.w	r4, r7, r5, lsl #3
 8012c94:	f8d1 a00a 	ldr.w	sl, [r1, #10]
 8012c98:	f807 c035 	strb.w	ip, [r7, r5, lsl #3]
 8012c9c:	f8c4 a002 	str.w	sl, [r4, #2]
 8012ca0:	89cd      	ldrh	r5, [r1, #14]
 8012ca2:	80e5      	strh	r5, [r4, #6]
 8012ca4:	3108      	adds	r1, #8
 8012ca6:	42b1      	cmp	r1, r6
 8012ca8:	d1eb      	bne.n	8012c82 <MotionMC_Update+0x146>
 8012caa:	4418      	add	r0, r3
 8012cac:	f8b0 13ec 	ldrh.w	r1, [r0, #1004]	; 0x3ec
 8012cb0:	4441      	add	r1, r8
 8012cb2:	811a      	strh	r2, [r3, #8]
 8012cb4:	60d9      	str	r1, [r3, #12]
 8012cb6:	7d1a      	ldrb	r2, [r3, #20]
 8012cb8:	2a00      	cmp	r2, #0
 8012cba:	d0b6      	beq.n	8012c2a <MotionMC_Update+0xee>
 8012cbc:	8919      	ldrh	r1, [r3, #8]
 8012cbe:	895a      	ldrh	r2, [r3, #10]
 8012cc0:	428a      	cmp	r2, r1
 8012cc2:	d01d      	beq.n	8012d00 <MotionMC_Update+0x1c4>
 8012cc4:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 8012cc8:	b1f1      	cbz	r1, 8012d08 <MotionMC_Update+0x1cc>
 8012cca:	68da      	ldr	r2, [r3, #12]
 8012ccc:	3201      	adds	r2, #1
 8012cce:	442a      	add	r2, r5
 8012cd0:	1c50      	adds	r0, r2, #1
 8012cd2:	d019      	beq.n	8012d08 <MotionMC_Update+0x1cc>
 8012cd4:	f502 541c 	add.w	r4, r2, #9984	; 0x2700
 8012cd8:	3410      	adds	r4, #16
 8012cda:	6998      	ldr	r0, [r3, #24]
 8012cdc:	42a0      	cmp	r0, r4
 8012cde:	8b9c      	ldrh	r4, [r3, #28]
 8012ce0:	bf84      	itt	hi
 8012ce2:	619a      	strhi	r2, [r3, #24]
 8012ce4:	4610      	movhi	r0, r2
 8012ce6:	4420      	add	r0, r4
 8012ce8:	4282      	cmp	r2, r0
 8012cea:	d39e      	bcc.n	8012c2a <MotionMC_Update+0xee>
 8012cec:	b121      	cbz	r1, 8012cf8 <MotionMC_Update+0x1bc>
 8012cee:	68db      	ldr	r3, [r3, #12]
 8012cf0:	3901      	subs	r1, #1
 8012cf2:	fb05 3111 	mls	r1, r5, r1, r3
 8012cf6:	b289      	uxth	r1, r1
 8012cf8:	1a53      	subs	r3, r2, r1
 8012cfa:	b21b      	sxth	r3, r3
 8012cfc:	42a3      	cmp	r3, r4
 8012cfe:	db94      	blt.n	8012c2a <MotionMC_Update+0xee>
 8012d00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d04:	f7fc be38 	b.w	800f978 <MEMS_runMagCal.constprop.18>
 8012d08:	f242 7410 	movw	r4, #10000	; 0x2710
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	e7e4      	b.n	8012cda <MotionMC_Update+0x19e>
 8012d10:	20001640 	.word	0x20001640
 8012d14:	20000044 	.word	0x20000044
 8012d18:	ffff8002 	.word	0xffff8002
 8012d1c:	20001a24 	.word	0x20001a24

08012d20 <MotionMC_GetCalParams>:
 8012d20:	b4f0      	push	{r4, r5, r6, r7}
 8012d22:	4f26      	ldr	r7, [pc, #152]	; (8012dbc <MotionMC_GetCalParams+0x9c>)
 8012d24:	f897 33e0 	ldrb.w	r3, [r7, #992]	; 0x3e0
 8012d28:	b08e      	sub	sp, #56	; 0x38
 8012d2a:	b913      	cbnz	r3, 8012d32 <MotionMC_GetCalParams+0x12>
 8012d2c:	b00e      	add	sp, #56	; 0x38
 8012d2e:	bcf0      	pop	{r4, r5, r6, r7}
 8012d30:	4770      	bx	lr
 8012d32:	f107 05a4 	add.w	r5, r7, #164	; 0xa4
 8012d36:	4606      	mov	r6, r0
 8012d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d3a:	ac01      	add	r4, sp, #4
 8012d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012d42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012d46:	682b      	ldr	r3, [r5, #0]
 8012d48:	6023      	str	r3, [r4, #0]
 8012d4a:	9905      	ldr	r1, [sp, #20]
 8012d4c:	9a06      	ldr	r2, [sp, #24]
 8012d4e:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8012d52:	eddd 6a02 	vldr	s13, [sp, #8]
 8012d56:	60f1      	str	r1, [r6, #12]
 8012d58:	6132      	str	r2, [r6, #16]
 8012d5a:	9f07      	ldr	r7, [sp, #28]
 8012d5c:	ed9d 7a03 	vldr	s14, [sp, #12]
 8012d60:	eddd 7a04 	vldr	s15, [sp, #16]
 8012d64:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8012dc0 <MotionMC_GetCalParams+0xa0>
 8012d68:	9d08      	ldr	r5, [sp, #32]
 8012d6a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012d6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012d6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012d70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012d72:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
 8012d76:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8012d7a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8012d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d82:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012d86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d8e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012d92:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012d96:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d9c:	6177      	str	r7, [r6, #20]
 8012d9e:	edc6 6a00 	vstr	s13, [r6]
 8012da2:	ed86 7a01 	vstr	s14, [r6, #4]
 8012da6:	edc6 7a02 	vstr	s15, [r6, #8]
 8012daa:	61b5      	str	r5, [r6, #24]
 8012dac:	61f4      	str	r4, [r6, #28]
 8012dae:	6230      	str	r0, [r6, #32]
 8012db0:	6271      	str	r1, [r6, #36]	; 0x24
 8012db2:	62b2      	str	r2, [r6, #40]	; 0x28
 8012db4:	62f3      	str	r3, [r6, #44]	; 0x2c
 8012db6:	b00e      	add	sp, #56	; 0x38
 8012db8:	bcf0      	pop	{r4, r5, r6, r7}
 8012dba:	4770      	bx	lr
 8012dbc:	20001640 	.word	0x20001640
 8012dc0:	3dcccccd 	.word	0x3dcccccd

08012dc4 <MotionMC_GetLibVersion>:
 8012dc4:	4b10      	ldr	r3, [pc, #64]	; (8012e08 <MotionMC_GetLibVersion+0x44>)
 8012dc6:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 8012dca:	b90b      	cbnz	r3, 8012dd0 <MotionMC_GetLibVersion+0xc>
 8012dcc:	4618      	mov	r0, r3
 8012dce:	4770      	bx	lr
 8012dd0:	b470      	push	{r4, r5, r6}
 8012dd2:	4e0e      	ldr	r6, [pc, #56]	; (8012e0c <MotionMC_GetLibVersion+0x48>)
 8012dd4:	4605      	mov	r5, r0
 8012dd6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012dd8:	b08b      	sub	sp, #44	; 0x2c
 8012dda:	ac01      	add	r4, sp, #4
 8012ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012dde:	6833      	ldr	r3, [r6, #0]
 8012de0:	f824 3b02 	strh.w	r3, [r4], #2
 8012de4:	0c1b      	lsrs	r3, r3, #16
 8012de6:	7023      	strb	r3, [r4, #0]
 8012de8:	ac01      	add	r4, sp, #4
 8012dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012dec:	8826      	ldrh	r6, [r4, #0]
 8012dee:	60eb      	str	r3, [r5, #12]
 8012df0:	78a4      	ldrb	r4, [r4, #2]
 8012df2:	6028      	str	r0, [r5, #0]
 8012df4:	2312      	movs	r3, #18
 8012df6:	4618      	mov	r0, r3
 8012df8:	6069      	str	r1, [r5, #4]
 8012dfa:	60aa      	str	r2, [r5, #8]
 8012dfc:	822e      	strh	r6, [r5, #16]
 8012dfe:	74ac      	strb	r4, [r5, #18]
 8012e00:	b00b      	add	sp, #44	; 0x2c
 8012e02:	bc70      	pop	{r4, r5, r6}
 8012e04:	4770      	bx	lr
 8012e06:	bf00      	nop
 8012e08:	20001640 	.word	0x20001640
 8012e0c:	0801802c 	.word	0x0801802c

08012e10 <rt_InitInfAndNaN.isra.3>:
 8012e10:	4b05      	ldr	r3, [pc, #20]	; (8012e28 <rt_InitInfAndNaN.isra.3+0x18>)
 8012e12:	4a06      	ldr	r2, [pc, #24]	; (8012e2c <rt_InitInfAndNaN.isra.3+0x1c>)
 8012e14:	f503 6182 	add.w	r1, r3, #1040	; 0x410
 8012e18:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8012e1c:	f04f 40ff 	mov.w	r0, #2139095040	; 0x7f800000
 8012e20:	6008      	str	r0, [r1, #0]
 8012e22:	601a      	str	r2, [r3, #0]
 8012e24:	4770      	bx	lr
 8012e26:	bf00      	nop
 8012e28:	20001bc0 	.word	0x20001bc0
 8012e2c:	ff800000 	.word	0xff800000

08012e30 <iNemo_setOrientation.constprop.40>:
 8012e30:	b4f0      	push	{r4, r5, r6, r7}
 8012e32:	4973      	ldr	r1, [pc, #460]	; (8013000 <iNemo_setOrientation.constprop.40+0x1d0>)
 8012e34:	4b73      	ldr	r3, [pc, #460]	; (8013004 <iNemo_setOrientation.constprop.40+0x1d4>)
 8012e36:	7808      	ldrb	r0, [r1, #0]
 8012e38:	2200      	movs	r2, #0
 8012e3a:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 8012e3e:	b084      	sub	sp, #16
 8012e40:	2f17      	cmp	r7, #23
 8012e42:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8012e46:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8012e4a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8012e4e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 8012e52:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8012e56:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8012e5a:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8012e5e:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
 8012e62:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8012e66:	790a      	ldrb	r2, [r1, #4]
 8012e68:	bf98      	it	ls
 8012e6a:	3020      	addls	r0, #32
 8012e6c:	f88d 0004 	strb.w	r0, [sp, #4]
 8012e70:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8012e74:	2817      	cmp	r0, #23
 8012e76:	bf98      	it	ls
 8012e78:	3220      	addls	r2, #32
 8012e7a:	f88d 2008 	strb.w	r2, [sp, #8]
 8012e7e:	7a0a      	ldrb	r2, [r1, #8]
 8012e80:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8012e84:	2817      	cmp	r0, #23
 8012e86:	bf98      	it	ls
 8012e88:	3220      	addls	r2, #32
 8012e8a:	f88d 200c 	strb.w	r2, [sp, #12]
 8012e8e:	784a      	ldrb	r2, [r1, #1]
 8012e90:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8012e94:	2817      	cmp	r0, #23
 8012e96:	bf98      	it	ls
 8012e98:	3220      	addls	r2, #32
 8012e9a:	f88d 2005 	strb.w	r2, [sp, #5]
 8012e9e:	794a      	ldrb	r2, [r1, #5]
 8012ea0:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8012ea4:	2817      	cmp	r0, #23
 8012ea6:	bf98      	it	ls
 8012ea8:	3220      	addls	r2, #32
 8012eaa:	f88d 2009 	strb.w	r2, [sp, #9]
 8012eae:	7a4a      	ldrb	r2, [r1, #9]
 8012eb0:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8012eb4:	2817      	cmp	r0, #23
 8012eb6:	bf98      	it	ls
 8012eb8:	3220      	addls	r2, #32
 8012eba:	f88d 200d 	strb.w	r2, [sp, #13]
 8012ebe:	788a      	ldrb	r2, [r1, #2]
 8012ec0:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8012ec4:	2817      	cmp	r0, #23
 8012ec6:	bf98      	it	ls
 8012ec8:	3220      	addls	r2, #32
 8012eca:	f88d 2006 	strb.w	r2, [sp, #6]
 8012ece:	798a      	ldrb	r2, [r1, #6]
 8012ed0:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8012ed4:	2817      	cmp	r0, #23
 8012ed6:	bf98      	it	ls
 8012ed8:	3220      	addls	r2, #32
 8012eda:	f88d 200a 	strb.w	r2, [sp, #10]
 8012ede:	7a8a      	ldrb	r2, [r1, #10]
 8012ee0:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 8012ee4:	2917      	cmp	r1, #23
 8012ee6:	bf98      	it	ls
 8012ee8:	3220      	addls	r2, #32
 8012eea:	f88d 200e 	strb.w	r2, [sp, #14]
 8012eee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012ef2:	3a64      	subs	r2, #100	; 0x64
 8012ef4:	2a13      	cmp	r2, #19
 8012ef6:	d80e      	bhi.n	8012f16 <iNemo_setOrientation.constprop.40+0xe6>
 8012ef8:	e8df f002 	tbb	[pc, r2]
 8012efc:	0d0dba0a 	.word	0x0d0dba0a
 8012f00:	0d0d0d0d 	.word	0x0d0d0d0d
 8012f04:	0dbe0d0d 	.word	0x0dbe0d0d
 8012f08:	c20d0d0d 	.word	0xc20d0d0d
 8012f0c:	ca0dc60d 	.word	0xca0dc60d
 8012f10:	22ff      	movs	r2, #255	; 0xff
 8012f12:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 8012f16:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012f1a:	3a64      	subs	r2, #100	; 0x64
 8012f1c:	2a13      	cmp	r2, #19
 8012f1e:	d80e      	bhi.n	8012f3e <iNemo_setOrientation.constprop.40+0x10e>
 8012f20:	e8df f002 	tbb	[pc, r2]
 8012f24:	0d0dba0a 	.word	0x0d0dba0a
 8012f28:	0d0d0d0d 	.word	0x0d0d0d0d
 8012f2c:	0dbe0d0d 	.word	0x0dbe0d0d
 8012f30:	c20d0d0d 	.word	0xc20d0d0d
 8012f34:	ca0dc60d 	.word	0xca0dc60d
 8012f38:	22ff      	movs	r2, #255	; 0xff
 8012f3a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 8012f3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012f42:	3a64      	subs	r2, #100	; 0x64
 8012f44:	2a13      	cmp	r2, #19
 8012f46:	d80e      	bhi.n	8012f66 <iNemo_setOrientation.constprop.40+0x136>
 8012f48:	e8df f002 	tbb	[pc, r2]
 8012f4c:	0d0dba0a 	.word	0x0d0dba0a
 8012f50:	0d0d0d0d 	.word	0x0d0d0d0d
 8012f54:	0dbe0d0d 	.word	0x0dbe0d0d
 8012f58:	c20d0d0d 	.word	0xc20d0d0d
 8012f5c:	ca0dc60d 	.word	0xca0dc60d
 8012f60:	22ff      	movs	r2, #255	; 0xff
 8012f62:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8012f66:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012f6a:	3a64      	subs	r2, #100	; 0x64
 8012f6c:	2a13      	cmp	r2, #19
 8012f6e:	d80e      	bhi.n	8012f8e <iNemo_setOrientation.constprop.40+0x15e>
 8012f70:	e8df f002 	tbb	[pc, r2]
 8012f74:	0d0dba0a 	.word	0x0d0dba0a
 8012f78:	0d0d0d0d 	.word	0x0d0d0d0d
 8012f7c:	0dbe0d0d 	.word	0x0dbe0d0d
 8012f80:	c20d0d0d 	.word	0xc20d0d0d
 8012f84:	ca0dc60d 	.word	0xca0dc60d
 8012f88:	22ff      	movs	r2, #255	; 0xff
 8012f8a:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 8012f8e:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8012f92:	3a64      	subs	r2, #100	; 0x64
 8012f94:	2a13      	cmp	r2, #19
 8012f96:	d80e      	bhi.n	8012fb6 <iNemo_setOrientation.constprop.40+0x186>
 8012f98:	e8df f002 	tbb	[pc, r2]
 8012f9c:	0d0dba0a 	.word	0x0d0dba0a
 8012fa0:	0d0d0d0d 	.word	0x0d0d0d0d
 8012fa4:	0dbe0d0d 	.word	0x0dbe0d0d
 8012fa8:	c20d0d0d 	.word	0xc20d0d0d
 8012fac:	ca0dc60d 	.word	0xca0dc60d
 8012fb0:	22ff      	movs	r2, #255	; 0xff
 8012fb2:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 8012fb6:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8012fba:	3a64      	subs	r2, #100	; 0x64
 8012fbc:	2a13      	cmp	r2, #19
 8012fbe:	d80e      	bhi.n	8012fde <iNemo_setOrientation.constprop.40+0x1ae>
 8012fc0:	e8df f002 	tbb	[pc, r2]
 8012fc4:	0d0dba0a 	.word	0x0d0dba0a
 8012fc8:	0d0d0d0d 	.word	0x0d0d0d0d
 8012fcc:	0dbe0d0d 	.word	0x0dbe0d0d
 8012fd0:	c20d0d0d 	.word	0xc20d0d0d
 8012fd4:	ca0dc60d 	.word	0xca0dc60d
 8012fd8:	22ff      	movs	r2, #255	; 0xff
 8012fda:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8012fde:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8012fe2:	3a64      	subs	r2, #100	; 0x64
 8012fe4:	2a13      	cmp	r2, #19
 8012fe6:	d812      	bhi.n	801300e <iNemo_setOrientation.constprop.40+0x1de>
 8012fe8:	e8df f002 	tbb	[pc, r2]
 8012fec:	1111ba0e 	.word	0x1111ba0e
 8012ff0:	11111111 	.word	0x11111111
 8012ff4:	11be1111 	.word	0x11be1111
 8012ff8:	c2111111 	.word	0xc2111111
 8012ffc:	ca11c611 	.word	0xca11c611
 8013000:	20000048 	.word	0x20000048
 8013004:	20001bc0 	.word	0x20001bc0
 8013008:	22ff      	movs	r2, #255	; 0xff
 801300a:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 801300e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8013012:	3a64      	subs	r2, #100	; 0x64
 8013014:	2a13      	cmp	r2, #19
 8013016:	d80e      	bhi.n	8013036 <iNemo_setOrientation.constprop.40+0x206>
 8013018:	e8df f002 	tbb	[pc, r2]
 801301c:	0d0db60a 	.word	0x0d0db60a
 8013020:	0d0d0d0d 	.word	0x0d0d0d0d
 8013024:	0dba0d0d 	.word	0x0dba0d0d
 8013028:	be0d0d0d 	.word	0xbe0d0d0d
 801302c:	c60dc20d 	.word	0xc60dc20d
 8013030:	22ff      	movs	r2, #255	; 0xff
 8013032:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8013036:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801303a:	3a64      	subs	r2, #100	; 0x64
 801303c:	2a13      	cmp	r2, #19
 801303e:	d80e      	bhi.n	801305e <iNemo_setOrientation.constprop.40+0x22e>
 8013040:	e8df f002 	tbb	[pc, r2]
 8013044:	0d0db60a 	.word	0x0d0db60a
 8013048:	0d0d0d0d 	.word	0x0d0d0d0d
 801304c:	0dbc0d0d 	.word	0x0dbc0d0d
 8013050:	c20d0d0d 	.word	0xc20d0d0d
 8013054:	100dc80d 	.word	0x100dc80d
 8013058:	22ff      	movs	r2, #255	; 0xff
 801305a:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 801305e:	b004      	add	sp, #16
 8013060:	bcf0      	pop	{r4, r5, r6, r7}
 8013062:	4770      	bx	lr
 8013064:	22ff      	movs	r2, #255	; 0xff
 8013066:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 801306a:	b004      	add	sp, #16
 801306c:	bcf0      	pop	{r4, r5, r6, r7}
 801306e:	4770      	bx	lr
 8013070:	2201      	movs	r2, #1
 8013072:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8013076:	e74e      	b.n	8012f16 <iNemo_setOrientation.constprop.40+0xe6>
 8013078:	2201      	movs	r2, #1
 801307a:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 801307e:	e74a      	b.n	8012f16 <iNemo_setOrientation.constprop.40+0xe6>
 8013080:	22ff      	movs	r2, #255	; 0xff
 8013082:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 8013086:	e746      	b.n	8012f16 <iNemo_setOrientation.constprop.40+0xe6>
 8013088:	2201      	movs	r2, #1
 801308a:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 801308e:	e742      	b.n	8012f16 <iNemo_setOrientation.constprop.40+0xe6>
 8013090:	22ff      	movs	r2, #255	; 0xff
 8013092:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8013096:	e73e      	b.n	8012f16 <iNemo_setOrientation.constprop.40+0xe6>
 8013098:	2201      	movs	r2, #1
 801309a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 801309e:	e74e      	b.n	8012f3e <iNemo_setOrientation.constprop.40+0x10e>
 80130a0:	2201      	movs	r2, #1
 80130a2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80130a6:	e74a      	b.n	8012f3e <iNemo_setOrientation.constprop.40+0x10e>
 80130a8:	22ff      	movs	r2, #255	; 0xff
 80130aa:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80130ae:	e746      	b.n	8012f3e <iNemo_setOrientation.constprop.40+0x10e>
 80130b0:	2201      	movs	r2, #1
 80130b2:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 80130b6:	e742      	b.n	8012f3e <iNemo_setOrientation.constprop.40+0x10e>
 80130b8:	22ff      	movs	r2, #255	; 0xff
 80130ba:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80130be:	e73e      	b.n	8012f3e <iNemo_setOrientation.constprop.40+0x10e>
 80130c0:	2201      	movs	r2, #1
 80130c2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 80130c6:	e74e      	b.n	8012f66 <iNemo_setOrientation.constprop.40+0x136>
 80130c8:	2201      	movs	r2, #1
 80130ca:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 80130ce:	e74a      	b.n	8012f66 <iNemo_setOrientation.constprop.40+0x136>
 80130d0:	22ff      	movs	r2, #255	; 0xff
 80130d2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 80130d6:	e746      	b.n	8012f66 <iNemo_setOrientation.constprop.40+0x136>
 80130d8:	2201      	movs	r2, #1
 80130da:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 80130de:	e742      	b.n	8012f66 <iNemo_setOrientation.constprop.40+0x136>
 80130e0:	22ff      	movs	r2, #255	; 0xff
 80130e2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 80130e6:	e73e      	b.n	8012f66 <iNemo_setOrientation.constprop.40+0x136>
 80130e8:	2201      	movs	r2, #1
 80130ea:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 80130ee:	e74e      	b.n	8012f8e <iNemo_setOrientation.constprop.40+0x15e>
 80130f0:	2201      	movs	r2, #1
 80130f2:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 80130f6:	e74a      	b.n	8012f8e <iNemo_setOrientation.constprop.40+0x15e>
 80130f8:	22ff      	movs	r2, #255	; 0xff
 80130fa:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 80130fe:	e746      	b.n	8012f8e <iNemo_setOrientation.constprop.40+0x15e>
 8013100:	2201      	movs	r2, #1
 8013102:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 8013106:	e742      	b.n	8012f8e <iNemo_setOrientation.constprop.40+0x15e>
 8013108:	22ff      	movs	r2, #255	; 0xff
 801310a:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 801310e:	e73e      	b.n	8012f8e <iNemo_setOrientation.constprop.40+0x15e>
 8013110:	2201      	movs	r2, #1
 8013112:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 8013116:	e74e      	b.n	8012fb6 <iNemo_setOrientation.constprop.40+0x186>
 8013118:	2201      	movs	r2, #1
 801311a:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 801311e:	e74a      	b.n	8012fb6 <iNemo_setOrientation.constprop.40+0x186>
 8013120:	22ff      	movs	r2, #255	; 0xff
 8013122:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 8013126:	e746      	b.n	8012fb6 <iNemo_setOrientation.constprop.40+0x186>
 8013128:	2201      	movs	r2, #1
 801312a:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 801312e:	e742      	b.n	8012fb6 <iNemo_setOrientation.constprop.40+0x186>
 8013130:	22ff      	movs	r2, #255	; 0xff
 8013132:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 8013136:	e73e      	b.n	8012fb6 <iNemo_setOrientation.constprop.40+0x186>
 8013138:	2201      	movs	r2, #1
 801313a:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 801313e:	e74e      	b.n	8012fde <iNemo_setOrientation.constprop.40+0x1ae>
 8013140:	2201      	movs	r2, #1
 8013142:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 8013146:	e74a      	b.n	8012fde <iNemo_setOrientation.constprop.40+0x1ae>
 8013148:	22ff      	movs	r2, #255	; 0xff
 801314a:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 801314e:	e746      	b.n	8012fde <iNemo_setOrientation.constprop.40+0x1ae>
 8013150:	2201      	movs	r2, #1
 8013152:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8013156:	e742      	b.n	8012fde <iNemo_setOrientation.constprop.40+0x1ae>
 8013158:	22ff      	movs	r2, #255	; 0xff
 801315a:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 801315e:	e73e      	b.n	8012fde <iNemo_setOrientation.constprop.40+0x1ae>
 8013160:	2201      	movs	r2, #1
 8013162:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 8013166:	e752      	b.n	801300e <iNemo_setOrientation.constprop.40+0x1de>
 8013168:	2201      	movs	r2, #1
 801316a:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 801316e:	e74e      	b.n	801300e <iNemo_setOrientation.constprop.40+0x1de>
 8013170:	22ff      	movs	r2, #255	; 0xff
 8013172:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 8013176:	e74a      	b.n	801300e <iNemo_setOrientation.constprop.40+0x1de>
 8013178:	2201      	movs	r2, #1
 801317a:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 801317e:	e746      	b.n	801300e <iNemo_setOrientation.constprop.40+0x1de>
 8013180:	22ff      	movs	r2, #255	; 0xff
 8013182:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 8013186:	e742      	b.n	801300e <iNemo_setOrientation.constprop.40+0x1de>
 8013188:	2201      	movs	r2, #1
 801318a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 801318e:	e752      	b.n	8013036 <iNemo_setOrientation.constprop.40+0x206>
 8013190:	2201      	movs	r2, #1
 8013192:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 8013196:	e74e      	b.n	8013036 <iNemo_setOrientation.constprop.40+0x206>
 8013198:	22ff      	movs	r2, #255	; 0xff
 801319a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 801319e:	e74a      	b.n	8013036 <iNemo_setOrientation.constprop.40+0x206>
 80131a0:	2201      	movs	r2, #1
 80131a2:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 80131a6:	e746      	b.n	8013036 <iNemo_setOrientation.constprop.40+0x206>
 80131a8:	22ff      	movs	r2, #255	; 0xff
 80131aa:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 80131ae:	e742      	b.n	8013036 <iNemo_setOrientation.constprop.40+0x206>
 80131b0:	2201      	movs	r2, #1
 80131b2:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 80131b6:	b004      	add	sp, #16
 80131b8:	bcf0      	pop	{r4, r5, r6, r7}
 80131ba:	4770      	bx	lr
 80131bc:	2201      	movs	r2, #1
 80131be:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 80131c2:	b004      	add	sp, #16
 80131c4:	bcf0      	pop	{r4, r5, r6, r7}
 80131c6:	4770      	bx	lr
 80131c8:	22ff      	movs	r2, #255	; 0xff
 80131ca:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 80131ce:	b004      	add	sp, #16
 80131d0:	bcf0      	pop	{r4, r5, r6, r7}
 80131d2:	4770      	bx	lr
 80131d4:	2201      	movs	r2, #1
 80131d6:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 80131da:	b004      	add	sp, #16
 80131dc:	bcf0      	pop	{r4, r5, r6, r7}
 80131de:	4770      	bx	lr

080131e0 <iNemo_setOrientation_6X.constprop.41>:
 80131e0:	b4f0      	push	{r4, r5, r6, r7}
 80131e2:	4973      	ldr	r1, [pc, #460]	; (80133b0 <iNemo_setOrientation_6X.constprop.41+0x1d0>)
 80131e4:	4b73      	ldr	r3, [pc, #460]	; (80133b4 <iNemo_setOrientation_6X.constprop.41+0x1d4>)
 80131e6:	7808      	ldrb	r0, [r1, #0]
 80131e8:	2200      	movs	r2, #0
 80131ea:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 80131ee:	b084      	sub	sp, #16
 80131f0:	2f17      	cmp	r7, #23
 80131f2:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
 80131f6:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 80131fa:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
 80131fe:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8013202:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
 8013206:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
 801320a:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 801320e:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
 8013212:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 8013216:	790a      	ldrb	r2, [r1, #4]
 8013218:	bf98      	it	ls
 801321a:	3020      	addls	r0, #32
 801321c:	f88d 0004 	strb.w	r0, [sp, #4]
 8013220:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8013224:	2817      	cmp	r0, #23
 8013226:	bf98      	it	ls
 8013228:	3220      	addls	r2, #32
 801322a:	f88d 2008 	strb.w	r2, [sp, #8]
 801322e:	7a0a      	ldrb	r2, [r1, #8]
 8013230:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8013234:	2817      	cmp	r0, #23
 8013236:	bf98      	it	ls
 8013238:	3220      	addls	r2, #32
 801323a:	f88d 200c 	strb.w	r2, [sp, #12]
 801323e:	784a      	ldrb	r2, [r1, #1]
 8013240:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8013244:	2817      	cmp	r0, #23
 8013246:	bf98      	it	ls
 8013248:	3220      	addls	r2, #32
 801324a:	f88d 2005 	strb.w	r2, [sp, #5]
 801324e:	794a      	ldrb	r2, [r1, #5]
 8013250:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8013254:	2817      	cmp	r0, #23
 8013256:	bf98      	it	ls
 8013258:	3220      	addls	r2, #32
 801325a:	f88d 2009 	strb.w	r2, [sp, #9]
 801325e:	7a4a      	ldrb	r2, [r1, #9]
 8013260:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8013264:	2817      	cmp	r0, #23
 8013266:	bf98      	it	ls
 8013268:	3220      	addls	r2, #32
 801326a:	f88d 200d 	strb.w	r2, [sp, #13]
 801326e:	788a      	ldrb	r2, [r1, #2]
 8013270:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8013274:	2817      	cmp	r0, #23
 8013276:	bf98      	it	ls
 8013278:	3220      	addls	r2, #32
 801327a:	f88d 2006 	strb.w	r2, [sp, #6]
 801327e:	798a      	ldrb	r2, [r1, #6]
 8013280:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8013284:	2817      	cmp	r0, #23
 8013286:	bf98      	it	ls
 8013288:	3220      	addls	r2, #32
 801328a:	f88d 200a 	strb.w	r2, [sp, #10]
 801328e:	7a8a      	ldrb	r2, [r1, #10]
 8013290:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 8013294:	2917      	cmp	r1, #23
 8013296:	bf98      	it	ls
 8013298:	3220      	addls	r2, #32
 801329a:	f88d 200e 	strb.w	r2, [sp, #14]
 801329e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80132a2:	3a64      	subs	r2, #100	; 0x64
 80132a4:	2a13      	cmp	r2, #19
 80132a6:	d80e      	bhi.n	80132c6 <iNemo_setOrientation_6X.constprop.41+0xe6>
 80132a8:	e8df f002 	tbb	[pc, r2]
 80132ac:	0d0dba0a 	.word	0x0d0dba0a
 80132b0:	0d0d0d0d 	.word	0x0d0d0d0d
 80132b4:	0dbe0d0d 	.word	0x0dbe0d0d
 80132b8:	c20d0d0d 	.word	0xc20d0d0d
 80132bc:	ca0dc60d 	.word	0xca0dc60d
 80132c0:	22ff      	movs	r2, #255	; 0xff
 80132c2:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 80132c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80132ca:	3a64      	subs	r2, #100	; 0x64
 80132cc:	2a13      	cmp	r2, #19
 80132ce:	d80e      	bhi.n	80132ee <iNemo_setOrientation_6X.constprop.41+0x10e>
 80132d0:	e8df f002 	tbb	[pc, r2]
 80132d4:	0d0dba0a 	.word	0x0d0dba0a
 80132d8:	0d0d0d0d 	.word	0x0d0d0d0d
 80132dc:	0dbe0d0d 	.word	0x0dbe0d0d
 80132e0:	c20d0d0d 	.word	0xc20d0d0d
 80132e4:	ca0dc60d 	.word	0xca0dc60d
 80132e8:	22ff      	movs	r2, #255	; 0xff
 80132ea:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 80132ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80132f2:	3a64      	subs	r2, #100	; 0x64
 80132f4:	2a13      	cmp	r2, #19
 80132f6:	d80e      	bhi.n	8013316 <iNemo_setOrientation_6X.constprop.41+0x136>
 80132f8:	e8df f002 	tbb	[pc, r2]
 80132fc:	0d0dba0a 	.word	0x0d0dba0a
 8013300:	0d0d0d0d 	.word	0x0d0d0d0d
 8013304:	0dbe0d0d 	.word	0x0dbe0d0d
 8013308:	c20d0d0d 	.word	0xc20d0d0d
 801330c:	ca0dc60d 	.word	0xca0dc60d
 8013310:	22ff      	movs	r2, #255	; 0xff
 8013312:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8013316:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801331a:	3a64      	subs	r2, #100	; 0x64
 801331c:	2a13      	cmp	r2, #19
 801331e:	d80e      	bhi.n	801333e <iNemo_setOrientation_6X.constprop.41+0x15e>
 8013320:	e8df f002 	tbb	[pc, r2]
 8013324:	0d0dba0a 	.word	0x0d0dba0a
 8013328:	0d0d0d0d 	.word	0x0d0d0d0d
 801332c:	0dbe0d0d 	.word	0x0dbe0d0d
 8013330:	c20d0d0d 	.word	0xc20d0d0d
 8013334:	ca0dc60d 	.word	0xca0dc60d
 8013338:	22ff      	movs	r2, #255	; 0xff
 801333a:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 801333e:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8013342:	3a64      	subs	r2, #100	; 0x64
 8013344:	2a13      	cmp	r2, #19
 8013346:	d80e      	bhi.n	8013366 <iNemo_setOrientation_6X.constprop.41+0x186>
 8013348:	e8df f002 	tbb	[pc, r2]
 801334c:	0d0dba0a 	.word	0x0d0dba0a
 8013350:	0d0d0d0d 	.word	0x0d0d0d0d
 8013354:	0dbe0d0d 	.word	0x0dbe0d0d
 8013358:	c20d0d0d 	.word	0xc20d0d0d
 801335c:	ca0dc60d 	.word	0xca0dc60d
 8013360:	22ff      	movs	r2, #255	; 0xff
 8013362:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 8013366:	f89d 200a 	ldrb.w	r2, [sp, #10]
 801336a:	3a64      	subs	r2, #100	; 0x64
 801336c:	2a13      	cmp	r2, #19
 801336e:	d80e      	bhi.n	801338e <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8013370:	e8df f002 	tbb	[pc, r2]
 8013374:	0d0dba0a 	.word	0x0d0dba0a
 8013378:	0d0d0d0d 	.word	0x0d0d0d0d
 801337c:	0dbe0d0d 	.word	0x0dbe0d0d
 8013380:	c20d0d0d 	.word	0xc20d0d0d
 8013384:	ca0dc60d 	.word	0xca0dc60d
 8013388:	22ff      	movs	r2, #255	; 0xff
 801338a:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 801338e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8013392:	3a64      	subs	r2, #100	; 0x64
 8013394:	2a13      	cmp	r2, #19
 8013396:	d812      	bhi.n	80133be <iNemo_setOrientation_6X.constprop.41+0x1de>
 8013398:	e8df f002 	tbb	[pc, r2]
 801339c:	1111ba0e 	.word	0x1111ba0e
 80133a0:	11111111 	.word	0x11111111
 80133a4:	11be1111 	.word	0x11be1111
 80133a8:	c2111111 	.word	0xc2111111
 80133ac:	ca11c611 	.word	0xca11c611
 80133b0:	20000048 	.word	0x20000048
 80133b4:	20001bc0 	.word	0x20001bc0
 80133b8:	22ff      	movs	r2, #255	; 0xff
 80133ba:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 80133be:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80133c2:	3a64      	subs	r2, #100	; 0x64
 80133c4:	2a13      	cmp	r2, #19
 80133c6:	d80e      	bhi.n	80133e6 <iNemo_setOrientation_6X.constprop.41+0x206>
 80133c8:	e8df f002 	tbb	[pc, r2]
 80133cc:	0d0db60a 	.word	0x0d0db60a
 80133d0:	0d0d0d0d 	.word	0x0d0d0d0d
 80133d4:	0dba0d0d 	.word	0x0dba0d0d
 80133d8:	be0d0d0d 	.word	0xbe0d0d0d
 80133dc:	c60dc20d 	.word	0xc60dc20d
 80133e0:	22ff      	movs	r2, #255	; 0xff
 80133e2:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 80133e6:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80133ea:	3a64      	subs	r2, #100	; 0x64
 80133ec:	2a13      	cmp	r2, #19
 80133ee:	d80e      	bhi.n	801340e <iNemo_setOrientation_6X.constprop.41+0x22e>
 80133f0:	e8df f002 	tbb	[pc, r2]
 80133f4:	0d0db60a 	.word	0x0d0db60a
 80133f8:	0d0d0d0d 	.word	0x0d0d0d0d
 80133fc:	0dbc0d0d 	.word	0x0dbc0d0d
 8013400:	c20d0d0d 	.word	0xc20d0d0d
 8013404:	100dc80d 	.word	0x100dc80d
 8013408:	22ff      	movs	r2, #255	; 0xff
 801340a:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 801340e:	b004      	add	sp, #16
 8013410:	bcf0      	pop	{r4, r5, r6, r7}
 8013412:	4770      	bx	lr
 8013414:	22ff      	movs	r2, #255	; 0xff
 8013416:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 801341a:	b004      	add	sp, #16
 801341c:	bcf0      	pop	{r4, r5, r6, r7}
 801341e:	4770      	bx	lr
 8013420:	2201      	movs	r2, #1
 8013422:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8013426:	e74e      	b.n	80132c6 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8013428:	2201      	movs	r2, #1
 801342a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 801342e:	e74a      	b.n	80132c6 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8013430:	22ff      	movs	r2, #255	; 0xff
 8013432:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 8013436:	e746      	b.n	80132c6 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8013438:	2201      	movs	r2, #1
 801343a:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 801343e:	e742      	b.n	80132c6 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8013440:	22ff      	movs	r2, #255	; 0xff
 8013442:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8013446:	e73e      	b.n	80132c6 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8013448:	2201      	movs	r2, #1
 801344a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 801344e:	e74e      	b.n	80132ee <iNemo_setOrientation_6X.constprop.41+0x10e>
 8013450:	2201      	movs	r2, #1
 8013452:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 8013456:	e74a      	b.n	80132ee <iNemo_setOrientation_6X.constprop.41+0x10e>
 8013458:	22ff      	movs	r2, #255	; 0xff
 801345a:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 801345e:	e746      	b.n	80132ee <iNemo_setOrientation_6X.constprop.41+0x10e>
 8013460:	2201      	movs	r2, #1
 8013462:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 8013466:	e742      	b.n	80132ee <iNemo_setOrientation_6X.constprop.41+0x10e>
 8013468:	22ff      	movs	r2, #255	; 0xff
 801346a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 801346e:	e73e      	b.n	80132ee <iNemo_setOrientation_6X.constprop.41+0x10e>
 8013470:	2201      	movs	r2, #1
 8013472:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8013476:	e74e      	b.n	8013316 <iNemo_setOrientation_6X.constprop.41+0x136>
 8013478:	2201      	movs	r2, #1
 801347a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 801347e:	e74a      	b.n	8013316 <iNemo_setOrientation_6X.constprop.41+0x136>
 8013480:	22ff      	movs	r2, #255	; 0xff
 8013482:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 8013486:	e746      	b.n	8013316 <iNemo_setOrientation_6X.constprop.41+0x136>
 8013488:	2201      	movs	r2, #1
 801348a:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 801348e:	e742      	b.n	8013316 <iNemo_setOrientation_6X.constprop.41+0x136>
 8013490:	22ff      	movs	r2, #255	; 0xff
 8013492:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8013496:	e73e      	b.n	8013316 <iNemo_setOrientation_6X.constprop.41+0x136>
 8013498:	2201      	movs	r2, #1
 801349a:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 801349e:	e74e      	b.n	801333e <iNemo_setOrientation_6X.constprop.41+0x15e>
 80134a0:	2201      	movs	r2, #1
 80134a2:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 80134a6:	e74a      	b.n	801333e <iNemo_setOrientation_6X.constprop.41+0x15e>
 80134a8:	22ff      	movs	r2, #255	; 0xff
 80134aa:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 80134ae:	e746      	b.n	801333e <iNemo_setOrientation_6X.constprop.41+0x15e>
 80134b0:	2201      	movs	r2, #1
 80134b2:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 80134b6:	e742      	b.n	801333e <iNemo_setOrientation_6X.constprop.41+0x15e>
 80134b8:	22ff      	movs	r2, #255	; 0xff
 80134ba:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 80134be:	e73e      	b.n	801333e <iNemo_setOrientation_6X.constprop.41+0x15e>
 80134c0:	2201      	movs	r2, #1
 80134c2:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 80134c6:	e74e      	b.n	8013366 <iNemo_setOrientation_6X.constprop.41+0x186>
 80134c8:	2201      	movs	r2, #1
 80134ca:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 80134ce:	e74a      	b.n	8013366 <iNemo_setOrientation_6X.constprop.41+0x186>
 80134d0:	22ff      	movs	r2, #255	; 0xff
 80134d2:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 80134d6:	e746      	b.n	8013366 <iNemo_setOrientation_6X.constprop.41+0x186>
 80134d8:	2201      	movs	r2, #1
 80134da:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 80134de:	e742      	b.n	8013366 <iNemo_setOrientation_6X.constprop.41+0x186>
 80134e0:	22ff      	movs	r2, #255	; 0xff
 80134e2:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 80134e6:	e73e      	b.n	8013366 <iNemo_setOrientation_6X.constprop.41+0x186>
 80134e8:	2201      	movs	r2, #1
 80134ea:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 80134ee:	e74e      	b.n	801338e <iNemo_setOrientation_6X.constprop.41+0x1ae>
 80134f0:	2201      	movs	r2, #1
 80134f2:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 80134f6:	e74a      	b.n	801338e <iNemo_setOrientation_6X.constprop.41+0x1ae>
 80134f8:	22ff      	movs	r2, #255	; 0xff
 80134fa:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 80134fe:	e746      	b.n	801338e <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8013500:	2201      	movs	r2, #1
 8013502:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 8013506:	e742      	b.n	801338e <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8013508:	22ff      	movs	r2, #255	; 0xff
 801350a:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 801350e:	e73e      	b.n	801338e <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8013510:	2201      	movs	r2, #1
 8013512:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 8013516:	e752      	b.n	80133be <iNemo_setOrientation_6X.constprop.41+0x1de>
 8013518:	2201      	movs	r2, #1
 801351a:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 801351e:	e74e      	b.n	80133be <iNemo_setOrientation_6X.constprop.41+0x1de>
 8013520:	22ff      	movs	r2, #255	; 0xff
 8013522:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8013526:	e74a      	b.n	80133be <iNemo_setOrientation_6X.constprop.41+0x1de>
 8013528:	2201      	movs	r2, #1
 801352a:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 801352e:	e746      	b.n	80133be <iNemo_setOrientation_6X.constprop.41+0x1de>
 8013530:	22ff      	movs	r2, #255	; 0xff
 8013532:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 8013536:	e742      	b.n	80133be <iNemo_setOrientation_6X.constprop.41+0x1de>
 8013538:	2201      	movs	r2, #1
 801353a:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 801353e:	e752      	b.n	80133e6 <iNemo_setOrientation_6X.constprop.41+0x206>
 8013540:	2201      	movs	r2, #1
 8013542:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 8013546:	e74e      	b.n	80133e6 <iNemo_setOrientation_6X.constprop.41+0x206>
 8013548:	22ff      	movs	r2, #255	; 0xff
 801354a:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 801354e:	e74a      	b.n	80133e6 <iNemo_setOrientation_6X.constprop.41+0x206>
 8013550:	2201      	movs	r2, #1
 8013552:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 8013556:	e746      	b.n	80133e6 <iNemo_setOrientation_6X.constprop.41+0x206>
 8013558:	22ff      	movs	r2, #255	; 0xff
 801355a:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 801355e:	e742      	b.n	80133e6 <iNemo_setOrientation_6X.constprop.41+0x206>
 8013560:	2201      	movs	r2, #1
 8013562:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 8013566:	b004      	add	sp, #16
 8013568:	bcf0      	pop	{r4, r5, r6, r7}
 801356a:	4770      	bx	lr
 801356c:	2201      	movs	r2, #1
 801356e:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 8013572:	b004      	add	sp, #16
 8013574:	bcf0      	pop	{r4, r5, r6, r7}
 8013576:	4770      	bx	lr
 8013578:	22ff      	movs	r2, #255	; 0xff
 801357a:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 801357e:	b004      	add	sp, #16
 8013580:	bcf0      	pop	{r4, r5, r6, r7}
 8013582:	4770      	bx	lr
 8013584:	2201      	movs	r2, #1
 8013586:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 801358a:	b004      	add	sp, #16
 801358c:	bcf0      	pop	{r4, r5, r6, r7}
 801358e:	4770      	bx	lr

08013590 <MotionFX_initialize>:
 8013590:	4a11      	ldr	r2, [pc, #68]	; (80135d8 <MotionFX_initialize+0x48>)
 8013592:	4912      	ldr	r1, [pc, #72]	; (80135dc <MotionFX_initialize+0x4c>)
 8013594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013598:	6813      	ldr	r3, [r2, #0]
 801359a:	f023 0301 	bic.w	r3, r3, #1
 801359e:	6013      	str	r3, [r2, #0]
 80135a0:	680b      	ldr	r3, [r1, #0]
 80135a2:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80135a6:	4013      	ands	r3, r2
 80135a8:	f24c 2040 	movw	r0, #49728	; 0xc240
 80135ac:	4283      	cmp	r3, r0
 80135ae:	d01f      	beq.n	80135f0 <MotionFX_initialize+0x60>
 80135b0:	680b      	ldr	r3, [r1, #0]
 80135b2:	f24c 2170 	movw	r1, #49776	; 0xc270
 80135b6:	4013      	ands	r3, r2
 80135b8:	428b      	cmp	r3, r1
 80135ba:	d019      	beq.n	80135f0 <MotionFX_initialize+0x60>
 80135bc:	4b08      	ldr	r3, [pc, #32]	; (80135e0 <MotionFX_initialize+0x50>)
 80135be:	2201      	movs	r2, #1
 80135c0:	601a      	str	r2, [r3, #0]
 80135c2:	681a      	ldr	r2, [r3, #0]
 80135c4:	2a00      	cmp	r2, #0
 80135c6:	d1fc      	bne.n	80135c2 <MotionFX_initialize+0x32>
 80135c8:	4b06      	ldr	r3, [pc, #24]	; (80135e4 <MotionFX_initialize+0x54>)
 80135ca:	4a07      	ldr	r2, [pc, #28]	; (80135e8 <MotionFX_initialize+0x58>)
 80135cc:	601a      	str	r2, [r3, #0]
 80135ce:	681a      	ldr	r2, [r3, #0]
 80135d0:	4b06      	ldr	r3, [pc, #24]	; (80135ec <MotionFX_initialize+0x5c>)
 80135d2:	429a      	cmp	r2, r3
 80135d4:	d02b      	beq.n	801362e <MotionFX_initialize+0x9e>
 80135d6:	e7fe      	b.n	80135d6 <MotionFX_initialize+0x46>
 80135d8:	e0002000 	.word	0xe0002000
 80135dc:	e000ed00 	.word	0xe000ed00
 80135e0:	40023008 	.word	0x40023008
 80135e4:	40023000 	.word	0x40023000
 80135e8:	f407a5c2 	.word	0xf407a5c2
 80135ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80135f0:	4beb      	ldr	r3, [pc, #940]	; (80139a0 <MotionFX_initialize+0x410>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d1e1      	bne.n	80135bc <MotionFX_initialize+0x2c>
 80135f8:	4aea      	ldr	r2, [pc, #936]	; (80139a4 <MotionFX_initialize+0x414>)
 80135fa:	6813      	ldr	r3, [r2, #0]
 80135fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013600:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8013604:	d006      	beq.n	8013614 <MotionFX_initialize+0x84>
 8013606:	6813      	ldr	r3, [r2, #0]
 8013608:	f240 4283 	movw	r2, #1155	; 0x483
 801360c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013610:	4293      	cmp	r3, r2
 8013612:	d1d3      	bne.n	80135bc <MotionFX_initialize+0x2c>
 8013614:	4be4      	ldr	r3, [pc, #912]	; (80139a8 <MotionFX_initialize+0x418>)
 8013616:	2201      	movs	r2, #1
 8013618:	601a      	str	r2, [r3, #0]
 801361a:	681a      	ldr	r2, [r3, #0]
 801361c:	2a00      	cmp	r2, #0
 801361e:	d1fc      	bne.n	801361a <MotionFX_initialize+0x8a>
 8013620:	4be2      	ldr	r3, [pc, #904]	; (80139ac <MotionFX_initialize+0x41c>)
 8013622:	4ae3      	ldr	r2, [pc, #908]	; (80139b0 <MotionFX_initialize+0x420>)
 8013624:	601a      	str	r2, [r3, #0]
 8013626:	681a      	ldr	r2, [r3, #0]
 8013628:	4be2      	ldr	r3, [pc, #904]	; (80139b4 <MotionFX_initialize+0x424>)
 801362a:	429a      	cmp	r2, r3
 801362c:	d1d3      	bne.n	80135d6 <MotionFX_initialize+0x46>
 801362e:	4ce2      	ldr	r4, [pc, #904]	; (80139b8 <MotionFX_initialize+0x428>)
 8013630:	eddf 7ae2 	vldr	s15, [pc, #904]	; 80139bc <MotionFX_initialize+0x42c>
 8013634:	4ee2      	ldr	r6, [pc, #904]	; (80139c0 <MotionFX_initialize+0x430>)
 8013636:	eddf 6ae3 	vldr	s13, [pc, #908]	; 80139c4 <MotionFX_initialize+0x434>
 801363a:	2500      	movs	r5, #0
 801363c:	f04f 0901 	mov.w	r9, #1
 8013640:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 8013978 <MotionFX_initialize+0x3e8>
 8013644:	ed9f 1bce 	vldr	d1, [pc, #824]	; 8013980 <MotionFX_initialize+0x3f0>
 8013648:	ed9f 2bcf 	vldr	d2, [pc, #828]	; 8013988 <MotionFX_initialize+0x3f8>
 801364c:	ed9f 3bd0 	vldr	d3, [pc, #832]	; 8013990 <MotionFX_initialize+0x400>
 8013650:	f20f 3b44 	addw	fp, pc, #836	; 0x344
 8013654:	e9db ab00 	ldrd	sl, fp, [fp]
 8013658:	f241 17b6 	movw	r7, #4534	; 0x11b6
 801365c:	f884 9d49 	strb.w	r9, [r4, #3401]	; 0xd49
 8013660:	f8c4 5d4c 	str.w	r5, [r4, #3404]	; 0xd4c
 8013664:	f8c4 5d50 	str.w	r5, [r4, #3408]	; 0xd50
 8013668:	f7ff fbd2 	bl	8012e10 <rt_InitInfAndNaN.isra.3>
 801366c:	f241 10b4 	movw	r0, #4532	; 0x11b4
 8013670:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013674:	f606 08e8 	addw	r8, r6, #2280	; 0x8e8
 8013678:	5235      	strh	r5, [r6, r0]
 801367a:	55f5      	strb	r5, [r6, r7]
 801367c:	200a      	movs	r0, #10
 801367e:	ed88 5b02 	vstr	d5, [r8, #8]
 8013682:	ed88 1b04 	vstr	d1, [r8, #16]
 8013686:	ed88 2b06 	vstr	d2, [r8, #24]
 801368a:	e9c8 ab08 	strd	sl, fp, [r8, #32]
 801368e:	ed88 3b0a 	vstr	d3, [r8, #40]	; 0x28
 8013692:	ed88 7a82 	vstr	s14, [r8, #520]	; 0x208
 8013696:	f886 08e0 	strb.w	r0, [r6, #2272]	; 0x8e0
 801369a:	edc8 7a83 	vstr	s15, [r8, #524]	; 0x20c
 801369e:	edc8 7a84 	vstr	s15, [r8, #528]	; 0x210
 80136a2:	f8c4 5418 	str.w	r5, [r4, #1048]	; 0x418
 80136a6:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
 80136aa:	f8c4 5430 	str.w	r5, [r4, #1072]	; 0x430
 80136ae:	f8c4 541c 	str.w	r5, [r4, #1052]	; 0x41c
 80136b2:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
 80136b6:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
 80136ba:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
 80136be:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
 80136c2:	f884 5438 	strb.w	r5, [r4, #1080]	; 0x438
 80136c6:	f7ff fba3 	bl	8012e10 <rt_InitInfAndNaN.isra.3>
 80136ca:	f604 330c 	addw	r3, r4, #2828	; 0xb0c
 80136ce:	ed86 5b06 	vstr	d5, [r6, #24]
 80136d2:	eddf 4abd 	vldr	s9, [pc, #756]	; 80139c8 <MotionFX_initialize+0x438>
 80136d6:	ed9f 5abd 	vldr	s10, [pc, #756]	; 80139cc <MotionFX_initialize+0x43c>
 80136da:	eddf 5abd 	vldr	s11, [pc, #756]	; 80139d0 <MotionFX_initialize+0x440>
 80136de:	f8df c30c 	ldr.w	ip, [pc, #780]	; 80139ec <MotionFX_initialize+0x45c>
 80136e2:	48bc      	ldr	r0, [pc, #752]	; (80139d4 <MotionFX_initialize+0x444>)
 80136e4:	49bc      	ldr	r1, [pc, #752]	; (80139d8 <MotionFX_initialize+0x448>)
 80136e6:	4abd      	ldr	r2, [pc, #756]	; (80139dc <MotionFX_initialize+0x44c>)
 80136e8:	ed86 7a86 	vstr	s14, [r6, #536]	; 0x218
 80136ec:	f604 0ecc 	addw	lr, r4, #2252	; 0x8cc
 80136f0:	f604 4704 	addw	r7, r4, #3076	; 0xc04
 80136f4:	ed86 1b08 	vstr	d1, [r6, #32]
 80136f8:	ed86 2b0a 	vstr	d2, [r6, #40]	; 0x28
 80136fc:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8013700:	e9c6 ab0c 	strd	sl, fp, [r6, #48]	; 0x30
 8013704:	ed86 3b0e 	vstr	d3, [r6, #56]	; 0x38
 8013708:	f04f 0a02 	mov.w	sl, #2
 801370c:	ed83 7a21 	vstr	s14, [r3, #132]	; 0x84
 8013710:	ed83 7a25 	vstr	s14, [r3, #148]	; 0x94
 8013714:	ed83 7a29 	vstr	s14, [r3, #164]	; 0xa4
 8013718:	edc6 7a87 	vstr	s15, [r6, #540]	; 0x21c
 801371c:	edc6 7a88 	vstr	s15, [r6, #544]	; 0x220
 8013720:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
 8013724:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 8013728:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
 801372c:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
 8013730:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
 8013734:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
 8013738:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
 801373c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
 8013740:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
 8013744:	f8a6 58dc 	strh.w	r5, [r6, #2268]	; 0x8dc
 8013748:	f886 58de 	strb.w	r5, [r6, #2270]	; 0x8de
 801374c:	f886 900c 	strb.w	r9, [r6, #12]
 8013750:	f04f 3b01 	mov.w	fp, #16843009	; 0x1010101
 8013754:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
 8013758:	f8c4 5448 	str.w	r5, [r4, #1096]	; 0x448
 801375c:	f8c4 5454 	str.w	r5, [r4, #1108]	; 0x454
 8013760:	f8c4 5440 	str.w	r5, [r4, #1088]	; 0x440
 8013764:	f884 5444 	strb.w	r5, [r4, #1092]	; 0x444
 8013768:	f8c4 544c 	str.w	r5, [r4, #1100]	; 0x44c
 801376c:	f884 5450 	strb.w	r5, [r4, #1104]	; 0x450
 8013770:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
 8013774:	f884 545c 	strb.w	r5, [r4, #1116]	; 0x45c
 8013778:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
 801377c:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 8013780:	ed83 7a31 	vstr	s14, [r3, #196]	; 0xc4
 8013784:	ed83 7a35 	vstr	s14, [r3, #212]	; 0xd4
 8013788:	ed83 7a39 	vstr	s14, [r3, #228]	; 0xe4
 801378c:	ed83 7a3d 	vstr	s14, [r3, #244]	; 0xf4
 8013790:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
 8013794:	ed83 7a13 	vstr	s14, [r3, #76]	; 0x4c
 8013798:	ed83 7a17 	vstr	s14, [r3, #92]	; 0x5c
 801379c:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 80137a0:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 80137a4:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
 80137a8:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
 80137ac:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
 80137b0:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
 80137b4:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
 80137b8:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 80137bc:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
 80137c0:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
 80137c4:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
 80137c8:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
 80137cc:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
 80137d0:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
 80137d4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 80137d8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 80137dc:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 80137e0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 80137e4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 80137e8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 80137ec:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
 80137f0:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 80137f4:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
 80137f8:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 80137fc:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 8013800:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 8013804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013808:	f8c4 cc2c 	str.w	ip, [r4, #3116]	; 0xc2c
 801380c:	f8c4 0c30 	str.w	r0, [r4, #3120]	; 0xc30
 8013810:	f8c4 1c34 	str.w	r1, [r4, #3124]	; 0xc34
 8013814:	f8c4 2c38 	str.w	r2, [r4, #3128]	; 0xc38
 8013818:	edc8 7a28 	vstr	s15, [r8, #160]	; 0xa0
 801381c:	edc8 7a29 	vstr	s15, [r8, #164]	; 0xa4
 8013820:	edc8 7a2a 	vstr	s15, [r8, #168]	; 0xa8
 8013824:	ed87 7a08 	vstr	s14, [r7, #32]
 8013828:	f604 18c4 	addw	r8, r4, #2500	; 0x9c4
 801382c:	edc7 4a00 	vstr	s9, [r7]
 8013830:	ed87 5a01 	vstr	s10, [r7, #4]
 8013834:	edc7 5a02 	vstr	s11, [r7, #8]
 8013838:	edc7 6a03 	vstr	s13, [r7, #12]
 801383c:	ed87 6a04 	vstr	s12, [r7, #16]
 8013840:	ed8e 7a21 	vstr	s14, [lr, #132]	; 0x84
 8013844:	ed8e 7a25 	vstr	s14, [lr, #148]	; 0x94
 8013848:	ed8e 7a29 	vstr	s14, [lr, #164]	; 0xa4
 801384c:	edce 7a1e 	vstr	s15, [lr, #120]	; 0x78
 8013850:	edce 7a1f 	vstr	s15, [lr, #124]	; 0x7c
 8013854:	edce 7a20 	vstr	s15, [lr, #128]	; 0x80
 8013858:	edce 7a22 	vstr	s15, [lr, #136]	; 0x88
 801385c:	edce 7a23 	vstr	s15, [lr, #140]	; 0x8c
 8013860:	edce 7a24 	vstr	s15, [lr, #144]	; 0x90
 8013864:	edce 7a26 	vstr	s15, [lr, #152]	; 0x98
 8013868:	edce 7a27 	vstr	s15, [lr, #156]	; 0x9c
 801386c:	edce 7a28 	vstr	s15, [lr, #160]	; 0xa0
 8013870:	f8a4 3c3c 	strh.w	r3, [r4, #3132]	; 0xc3c
 8013874:	f8c4 9c1c 	str.w	r9, [r4, #3100]	; 0xc1c
 8013878:	f884 9c28 	strb.w	r9, [r4, #3112]	; 0xc28
 801387c:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 8013880:	f8c4 bc18 	str.w	fp, [r4, #3096]	; 0xc18
 8013884:	f884 ac20 	strb.w	sl, [r4, #3104]	; 0xc20
 8013888:	edce 7a2a 	vstr	s15, [lr, #168]	; 0xa8
 801388c:	ed8e 7a2d 	vstr	s14, [lr, #180]	; 0xb4
 8013890:	ed8e 7a31 	vstr	s14, [lr, #196]	; 0xc4
 8013894:	ed8e 7a35 	vstr	s14, [lr, #212]	; 0xd4
 8013898:	ed8e 7a39 	vstr	s14, [lr, #228]	; 0xe4
 801389c:	ed8e 7a3d 	vstr	s14, [lr, #244]	; 0xf4
 80138a0:	ed8e 7a0f 	vstr	s14, [lr, #60]	; 0x3c
 80138a4:	ed8e 7a13 	vstr	s14, [lr, #76]	; 0x4c
 80138a8:	ed8e 7a17 	vstr	s14, [lr, #92]	; 0x5c
 80138ac:	edce 7a2b 	vstr	s15, [lr, #172]	; 0xac
 80138b0:	edce 7a2c 	vstr	s15, [lr, #176]	; 0xb0
 80138b4:	edce 7a2e 	vstr	s15, [lr, #184]	; 0xb8
 80138b8:	edce 7a2f 	vstr	s15, [lr, #188]	; 0xbc
 80138bc:	edce 7a30 	vstr	s15, [lr, #192]	; 0xc0
 80138c0:	edce 7a32 	vstr	s15, [lr, #200]	; 0xc8
 80138c4:	edce 7a33 	vstr	s15, [lr, #204]	; 0xcc
 80138c8:	edce 7a34 	vstr	s15, [lr, #208]	; 0xd0
 80138cc:	edce 7a36 	vstr	s15, [lr, #216]	; 0xd8
 80138d0:	edce 7a37 	vstr	s15, [lr, #220]	; 0xdc
 80138d4:	edce 7a38 	vstr	s15, [lr, #224]	; 0xe0
 80138d8:	edce 7a3a 	vstr	s15, [lr, #232]	; 0xe8
 80138dc:	edce 7a3b 	vstr	s15, [lr, #236]	; 0xec
 80138e0:	edce 7a3c 	vstr	s15, [lr, #240]	; 0xf0
 80138e4:	edce 7a10 	vstr	s15, [lr, #64]	; 0x40
 80138e8:	edce 7a11 	vstr	s15, [lr, #68]	; 0x44
 80138ec:	edce 7a12 	vstr	s15, [lr, #72]	; 0x48
 80138f0:	edce 7a14 	vstr	s15, [lr, #80]	; 0x50
 80138f4:	edce 7a15 	vstr	s15, [lr, #84]	; 0x54
 80138f8:	edce 7a16 	vstr	s15, [lr, #88]	; 0x58
 80138fc:	edce 7a18 	vstr	s15, [lr, #96]	; 0x60
 8013900:	edce 7a19 	vstr	s15, [lr, #100]	; 0x64
 8013904:	edce 7a1a 	vstr	s15, [lr, #104]	; 0x68
 8013908:	edce 7a1b 	vstr	s15, [lr, #108]	; 0x6c
 801390c:	edce 7a1c 	vstr	s15, [lr, #112]	; 0x70
 8013910:	f8a4 39fc 	strh.w	r3, [r4, #2556]	; 0x9fc
 8013914:	4b32      	ldr	r3, [pc, #200]	; (80139e0 <MotionFX_initialize+0x450>)
 8013916:	f8c4 c9ec 	str.w	ip, [r4, #2540]	; 0x9ec
 801391a:	f8c4 09f0 	str.w	r0, [r4, #2544]	; 0x9f0
 801391e:	f8c4 19f4 	str.w	r1, [r4, #2548]	; 0x9f4
 8013922:	f8c4 29f8 	str.w	r2, [r4, #2552]	; 0x9f8
 8013926:	f8c4 39d8 	str.w	r3, [r4, #2520]	; 0x9d8
 801392a:	edc6 7a2c 	vstr	s15, [r6, #176]	; 0xb0
 801392e:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
 8013932:	edc6 7a2e 	vstr	s15, [r6, #184]	; 0xb8
 8013936:	edc8 4a00 	vstr	s9, [r8]
 801393a:	ed88 5a01 	vstr	s10, [r8, #4]
 801393e:	edc8 5a02 	vstr	s11, [r8, #8]
 8013942:	edc8 6a03 	vstr	s13, [r8, #12]
 8013946:	ed88 6a04 	vstr	s12, [r8, #16]
 801394a:	ed88 7a08 	vstr	s14, [r8, #32]
 801394e:	edce 7a1d 	vstr	s15, [lr, #116]	; 0x74
 8013952:	f8c4 99dc 	str.w	r9, [r4, #2524]	; 0x9dc
 8013956:	f884 99e8 	strb.w	r9, [r4, #2536]	; 0x9e8
 801395a:	f884 a9e0 	strb.w	sl, [r4, #2528]	; 0x9e0
 801395e:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 8013962:	f7ff fa65 	bl	8012e30 <iNemo_setOrientation.constprop.40>
 8013966:	f7ff fc3b 	bl	80131e0 <iNemo_setOrientation_6X.constprop.41>
 801396a:	f04f 567f 	mov.w	r6, #1069547520	; 0x3fc00000
 801396e:	f8df c080 	ldr.w	ip, [pc, #128]	; 80139f0 <MotionFX_initialize+0x460>
 8013972:	481c      	ldr	r0, [pc, #112]	; (80139e4 <MotionFX_initialize+0x454>)
 8013974:	491c      	ldr	r1, [pc, #112]	; (80139e8 <MotionFX_initialize+0x458>)
 8013976:	e03d      	b.n	80139f4 <MotionFX_initialize+0x464>
 8013978:	60000000 	.word	0x60000000
 801397c:	3fc76cab 	.word	0x3fc76cab
 8013980:	20000000 	.word	0x20000000
 8013984:	3fc55a40 	.word	0x3fc55a40
 8013988:	00000000 	.word	0x00000000
 801398c:	3fbfdfb7 	.word	0x3fbfdfb7
 8013990:	60000000 	.word	0x60000000
 8013994:	3f9f1fed 	.word	0x3f9f1fed
 8013998:	c0000000 	.word	0xc0000000
 801399c:	3fb2875e 	.word	0x3fb2875e
 80139a0:	e0042000 	.word	0xe0042000
 80139a4:	5c001000 	.word	0x5c001000
 80139a8:	58024c08 	.word	0x58024c08
 80139ac:	58024c00 	.word	0x58024c00
 80139b0:	f407a5c2 	.word	0xf407a5c2
 80139b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80139b8:	20001bc0 	.word	0x20001bc0
 80139bc:	00000000 	.word	0x00000000
 80139c0:	20000048 	.word	0x20000048
 80139c4:	3f2ac083 	.word	0x3f2ac083
 80139c8:	3f639581 	.word	0x3f639581
 80139cc:	402ab021 	.word	0x402ab021
 80139d0:	3f13f7cf 	.word	0x3f13f7cf
 80139d4:	3a09a027 	.word	0x3a09a027
 80139d8:	39b24207 	.word	0x39b24207
 80139dc:	3dcccccd 	.word	0x3dcccccd
 80139e0:	01000101 	.word	0x01000101
 80139e4:	3a51b717 	.word	0x3a51b717
 80139e8:	3a378034 	.word	0x3a378034
 80139ec:	39712c28 	.word	0x39712c28
 80139f0:	3f666666 	.word	0x3f666666
 80139f4:	4a14      	ldr	r2, [pc, #80]	; (8013a48 <MotionFX_initialize+0x4b8>)
 80139f6:	4b15      	ldr	r3, [pc, #84]	; (8013a4c <MotionFX_initialize+0x4bc>)
 80139f8:	f8df e054 	ldr.w	lr, [pc, #84]	; 8013a50 <MotionFX_initialize+0x4c0>
 80139fc:	edc8 6a03 	vstr	s13, [r8, #12]
 8013a00:	edc7 6a03 	vstr	s13, [r7, #12]
 8013a04:	f884 a9fd 	strb.w	sl, [r4, #2557]	; 0x9fd
 8013a08:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 8013a0c:	f884 ac3d 	strb.w	sl, [r4, #3133]	; 0xc3d
 8013a10:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 8013a14:	f8c4 bc19 	str.w	fp, [r4, #3097]	; 0xc19
 8013a18:	f8c4 e9d9 	str.w	lr, [r4, #2521]	; 0x9d9
 8013a1c:	f8c8 c000 	str.w	ip, [r8]
 8013a20:	f8c7 c000 	str.w	ip, [r7]
 8013a24:	f8c8 6004 	str.w	r6, [r8, #4]
 8013a28:	607e      	str	r6, [r7, #4]
 8013a2a:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
 8013a2e:	62b8      	str	r0, [r7, #40]	; 0x28
 8013a30:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
 8013a34:	62f9      	str	r1, [r7, #44]	; 0x2c
 8013a36:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
 8013a3a:	633a      	str	r2, [r7, #48]	; 0x30
 8013a3c:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 8013a40:	637b      	str	r3, [r7, #52]	; 0x34
 8013a42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a46:	bf00      	nop
 8013a48:	3b378034 	.word	0x3b378034
 8013a4c:	3dcccccd 	.word	0x3dcccccd
 8013a50:	01010001 	.word	0x01010001

08013a54 <MotionFX_GetLibVersion>:
 8013a54:	4b10      	ldr	r3, [pc, #64]	; (8013a98 <MotionFX_GetLibVersion+0x44>)
 8013a56:	f893 3d49 	ldrb.w	r3, [r3, #3401]	; 0xd49
 8013a5a:	b90b      	cbnz	r3, 8013a60 <MotionFX_GetLibVersion+0xc>
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	4770      	bx	lr
 8013a60:	b470      	push	{r4, r5, r6}
 8013a62:	4e0e      	ldr	r6, [pc, #56]	; (8013a9c <MotionFX_GetLibVersion+0x48>)
 8013a64:	4605      	mov	r5, r0
 8013a66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013a68:	b08b      	sub	sp, #44	; 0x2c
 8013a6a:	ac01      	add	r4, sp, #4
 8013a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013a6e:	6833      	ldr	r3, [r6, #0]
 8013a70:	f824 3b02 	strh.w	r3, [r4], #2
 8013a74:	0c1b      	lsrs	r3, r3, #16
 8013a76:	7023      	strb	r3, [r4, #0]
 8013a78:	ac01      	add	r4, sp, #4
 8013a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a7c:	8826      	ldrh	r6, [r4, #0]
 8013a7e:	60eb      	str	r3, [r5, #12]
 8013a80:	78a4      	ldrb	r4, [r4, #2]
 8013a82:	6028      	str	r0, [r5, #0]
 8013a84:	2312      	movs	r3, #18
 8013a86:	4618      	mov	r0, r3
 8013a88:	6069      	str	r1, [r5, #4]
 8013a8a:	60aa      	str	r2, [r5, #8]
 8013a8c:	822e      	strh	r6, [r5, #16]
 8013a8e:	74ac      	strb	r4, [r5, #18]
 8013a90:	b00b      	add	sp, #44	; 0x2c
 8013a92:	bc70      	pop	{r4, r5, r6}
 8013a94:	4770      	bx	lr
 8013a96:	bf00      	nop
 8013a98:	20001bc0 	.word	0x20001bc0
 8013a9c:	080181e8 	.word	0x080181e8

08013aa0 <__errno>:
 8013aa0:	4b01      	ldr	r3, [pc, #4]	; (8013aa8 <__errno+0x8>)
 8013aa2:	6818      	ldr	r0, [r3, #0]
 8013aa4:	4770      	bx	lr
 8013aa6:	bf00      	nop
 8013aa8:	20001304 	.word	0x20001304

08013aac <__libc_init_array>:
 8013aac:	b570      	push	{r4, r5, r6, lr}
 8013aae:	4e0d      	ldr	r6, [pc, #52]	; (8013ae4 <__libc_init_array+0x38>)
 8013ab0:	4c0d      	ldr	r4, [pc, #52]	; (8013ae8 <__libc_init_array+0x3c>)
 8013ab2:	1ba4      	subs	r4, r4, r6
 8013ab4:	10a4      	asrs	r4, r4, #2
 8013ab6:	2500      	movs	r5, #0
 8013ab8:	42a5      	cmp	r5, r4
 8013aba:	d109      	bne.n	8013ad0 <__libc_init_array+0x24>
 8013abc:	4e0b      	ldr	r6, [pc, #44]	; (8013aec <__libc_init_array+0x40>)
 8013abe:	4c0c      	ldr	r4, [pc, #48]	; (8013af0 <__libc_init_array+0x44>)
 8013ac0:	f004 f9d4 	bl	8017e6c <_init>
 8013ac4:	1ba4      	subs	r4, r4, r6
 8013ac6:	10a4      	asrs	r4, r4, #2
 8013ac8:	2500      	movs	r5, #0
 8013aca:	42a5      	cmp	r5, r4
 8013acc:	d105      	bne.n	8013ada <__libc_init_array+0x2e>
 8013ace:	bd70      	pop	{r4, r5, r6, pc}
 8013ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013ad4:	4798      	blx	r3
 8013ad6:	3501      	adds	r5, #1
 8013ad8:	e7ee      	b.n	8013ab8 <__libc_init_array+0xc>
 8013ada:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013ade:	4798      	blx	r3
 8013ae0:	3501      	adds	r5, #1
 8013ae2:	e7f2      	b.n	8013aca <__libc_init_array+0x1e>
 8013ae4:	080189c0 	.word	0x080189c0
 8013ae8:	080189c0 	.word	0x080189c0
 8013aec:	080189c0 	.word	0x080189c0
 8013af0:	080189c4 	.word	0x080189c4

08013af4 <memcpy>:
 8013af4:	b510      	push	{r4, lr}
 8013af6:	1e43      	subs	r3, r0, #1
 8013af8:	440a      	add	r2, r1
 8013afa:	4291      	cmp	r1, r2
 8013afc:	d100      	bne.n	8013b00 <memcpy+0xc>
 8013afe:	bd10      	pop	{r4, pc}
 8013b00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013b08:	e7f7      	b.n	8013afa <memcpy+0x6>

08013b0a <memset>:
 8013b0a:	4402      	add	r2, r0
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	4293      	cmp	r3, r2
 8013b10:	d100      	bne.n	8013b14 <memset+0xa>
 8013b12:	4770      	bx	lr
 8013b14:	f803 1b01 	strb.w	r1, [r3], #1
 8013b18:	e7f9      	b.n	8013b0e <memset+0x4>

08013b1a <__cvt>:
 8013b1a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013b1e:	ec55 4b10 	vmov	r4, r5, d0
 8013b22:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8013b24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013b28:	2d00      	cmp	r5, #0
 8013b2a:	460e      	mov	r6, r1
 8013b2c:	4691      	mov	r9, r2
 8013b2e:	4619      	mov	r1, r3
 8013b30:	bfb8      	it	lt
 8013b32:	4622      	movlt	r2, r4
 8013b34:	462b      	mov	r3, r5
 8013b36:	f027 0720 	bic.w	r7, r7, #32
 8013b3a:	bfbb      	ittet	lt
 8013b3c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013b40:	461d      	movlt	r5, r3
 8013b42:	2300      	movge	r3, #0
 8013b44:	232d      	movlt	r3, #45	; 0x2d
 8013b46:	bfb8      	it	lt
 8013b48:	4614      	movlt	r4, r2
 8013b4a:	2f46      	cmp	r7, #70	; 0x46
 8013b4c:	700b      	strb	r3, [r1, #0]
 8013b4e:	d004      	beq.n	8013b5a <__cvt+0x40>
 8013b50:	2f45      	cmp	r7, #69	; 0x45
 8013b52:	d100      	bne.n	8013b56 <__cvt+0x3c>
 8013b54:	3601      	adds	r6, #1
 8013b56:	2102      	movs	r1, #2
 8013b58:	e000      	b.n	8013b5c <__cvt+0x42>
 8013b5a:	2103      	movs	r1, #3
 8013b5c:	ab03      	add	r3, sp, #12
 8013b5e:	9301      	str	r3, [sp, #4]
 8013b60:	ab02      	add	r3, sp, #8
 8013b62:	9300      	str	r3, [sp, #0]
 8013b64:	4632      	mov	r2, r6
 8013b66:	4653      	mov	r3, sl
 8013b68:	ec45 4b10 	vmov	d0, r4, r5
 8013b6c:	f000 fcf8 	bl	8014560 <_dtoa_r>
 8013b70:	2f47      	cmp	r7, #71	; 0x47
 8013b72:	4680      	mov	r8, r0
 8013b74:	d102      	bne.n	8013b7c <__cvt+0x62>
 8013b76:	f019 0f01 	tst.w	r9, #1
 8013b7a:	d026      	beq.n	8013bca <__cvt+0xb0>
 8013b7c:	2f46      	cmp	r7, #70	; 0x46
 8013b7e:	eb08 0906 	add.w	r9, r8, r6
 8013b82:	d111      	bne.n	8013ba8 <__cvt+0x8e>
 8013b84:	f898 3000 	ldrb.w	r3, [r8]
 8013b88:	2b30      	cmp	r3, #48	; 0x30
 8013b8a:	d10a      	bne.n	8013ba2 <__cvt+0x88>
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	2300      	movs	r3, #0
 8013b90:	4620      	mov	r0, r4
 8013b92:	4629      	mov	r1, r5
 8013b94:	f7ec ffa0 	bl	8000ad8 <__aeabi_dcmpeq>
 8013b98:	b918      	cbnz	r0, 8013ba2 <__cvt+0x88>
 8013b9a:	f1c6 0601 	rsb	r6, r6, #1
 8013b9e:	f8ca 6000 	str.w	r6, [sl]
 8013ba2:	f8da 3000 	ldr.w	r3, [sl]
 8013ba6:	4499      	add	r9, r3
 8013ba8:	2200      	movs	r2, #0
 8013baa:	2300      	movs	r3, #0
 8013bac:	4620      	mov	r0, r4
 8013bae:	4629      	mov	r1, r5
 8013bb0:	f7ec ff92 	bl	8000ad8 <__aeabi_dcmpeq>
 8013bb4:	b938      	cbnz	r0, 8013bc6 <__cvt+0xac>
 8013bb6:	2230      	movs	r2, #48	; 0x30
 8013bb8:	9b03      	ldr	r3, [sp, #12]
 8013bba:	454b      	cmp	r3, r9
 8013bbc:	d205      	bcs.n	8013bca <__cvt+0xb0>
 8013bbe:	1c59      	adds	r1, r3, #1
 8013bc0:	9103      	str	r1, [sp, #12]
 8013bc2:	701a      	strb	r2, [r3, #0]
 8013bc4:	e7f8      	b.n	8013bb8 <__cvt+0x9e>
 8013bc6:	f8cd 900c 	str.w	r9, [sp, #12]
 8013bca:	9b03      	ldr	r3, [sp, #12]
 8013bcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013bce:	eba3 0308 	sub.w	r3, r3, r8
 8013bd2:	4640      	mov	r0, r8
 8013bd4:	6013      	str	r3, [r2, #0]
 8013bd6:	b004      	add	sp, #16
 8013bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013bdc <__exponent>:
 8013bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013bde:	2900      	cmp	r1, #0
 8013be0:	4604      	mov	r4, r0
 8013be2:	bfba      	itte	lt
 8013be4:	4249      	neglt	r1, r1
 8013be6:	232d      	movlt	r3, #45	; 0x2d
 8013be8:	232b      	movge	r3, #43	; 0x2b
 8013bea:	2909      	cmp	r1, #9
 8013bec:	f804 2b02 	strb.w	r2, [r4], #2
 8013bf0:	7043      	strb	r3, [r0, #1]
 8013bf2:	dd20      	ble.n	8013c36 <__exponent+0x5a>
 8013bf4:	f10d 0307 	add.w	r3, sp, #7
 8013bf8:	461f      	mov	r7, r3
 8013bfa:	260a      	movs	r6, #10
 8013bfc:	fb91 f5f6 	sdiv	r5, r1, r6
 8013c00:	fb06 1115 	mls	r1, r6, r5, r1
 8013c04:	3130      	adds	r1, #48	; 0x30
 8013c06:	2d09      	cmp	r5, #9
 8013c08:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013c0c:	f103 32ff 	add.w	r2, r3, #4294967295
 8013c10:	4629      	mov	r1, r5
 8013c12:	dc09      	bgt.n	8013c28 <__exponent+0x4c>
 8013c14:	3130      	adds	r1, #48	; 0x30
 8013c16:	3b02      	subs	r3, #2
 8013c18:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013c1c:	42bb      	cmp	r3, r7
 8013c1e:	4622      	mov	r2, r4
 8013c20:	d304      	bcc.n	8013c2c <__exponent+0x50>
 8013c22:	1a10      	subs	r0, r2, r0
 8013c24:	b003      	add	sp, #12
 8013c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c28:	4613      	mov	r3, r2
 8013c2a:	e7e7      	b.n	8013bfc <__exponent+0x20>
 8013c2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c30:	f804 2b01 	strb.w	r2, [r4], #1
 8013c34:	e7f2      	b.n	8013c1c <__exponent+0x40>
 8013c36:	2330      	movs	r3, #48	; 0x30
 8013c38:	4419      	add	r1, r3
 8013c3a:	7083      	strb	r3, [r0, #2]
 8013c3c:	1d02      	adds	r2, r0, #4
 8013c3e:	70c1      	strb	r1, [r0, #3]
 8013c40:	e7ef      	b.n	8013c22 <__exponent+0x46>
	...

08013c44 <_printf_float>:
 8013c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c48:	b08d      	sub	sp, #52	; 0x34
 8013c4a:	460c      	mov	r4, r1
 8013c4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013c50:	4616      	mov	r6, r2
 8013c52:	461f      	mov	r7, r3
 8013c54:	4605      	mov	r5, r0
 8013c56:	f001 fb05 	bl	8015264 <_localeconv_r>
 8013c5a:	6803      	ldr	r3, [r0, #0]
 8013c5c:	9304      	str	r3, [sp, #16]
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f7ec fabe 	bl	80001e0 <strlen>
 8013c64:	2300      	movs	r3, #0
 8013c66:	930a      	str	r3, [sp, #40]	; 0x28
 8013c68:	f8d8 3000 	ldr.w	r3, [r8]
 8013c6c:	9005      	str	r0, [sp, #20]
 8013c6e:	3307      	adds	r3, #7
 8013c70:	f023 0307 	bic.w	r3, r3, #7
 8013c74:	f103 0208 	add.w	r2, r3, #8
 8013c78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013c7c:	f8d4 b000 	ldr.w	fp, [r4]
 8013c80:	f8c8 2000 	str.w	r2, [r8]
 8013c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c88:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013c8c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013c90:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013c94:	9307      	str	r3, [sp, #28]
 8013c96:	f8cd 8018 	str.w	r8, [sp, #24]
 8013c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c9e:	4ba7      	ldr	r3, [pc, #668]	; (8013f3c <_printf_float+0x2f8>)
 8013ca0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ca4:	f7ec ff4a 	bl	8000b3c <__aeabi_dcmpun>
 8013ca8:	bb70      	cbnz	r0, 8013d08 <_printf_float+0xc4>
 8013caa:	f04f 32ff 	mov.w	r2, #4294967295
 8013cae:	4ba3      	ldr	r3, [pc, #652]	; (8013f3c <_printf_float+0x2f8>)
 8013cb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013cb4:	f7ec ff24 	bl	8000b00 <__aeabi_dcmple>
 8013cb8:	bb30      	cbnz	r0, 8013d08 <_printf_float+0xc4>
 8013cba:	2200      	movs	r2, #0
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	4640      	mov	r0, r8
 8013cc0:	4649      	mov	r1, r9
 8013cc2:	f7ec ff13 	bl	8000aec <__aeabi_dcmplt>
 8013cc6:	b110      	cbz	r0, 8013cce <_printf_float+0x8a>
 8013cc8:	232d      	movs	r3, #45	; 0x2d
 8013cca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013cce:	4a9c      	ldr	r2, [pc, #624]	; (8013f40 <_printf_float+0x2fc>)
 8013cd0:	4b9c      	ldr	r3, [pc, #624]	; (8013f44 <_printf_float+0x300>)
 8013cd2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013cd6:	bf8c      	ite	hi
 8013cd8:	4690      	movhi	r8, r2
 8013cda:	4698      	movls	r8, r3
 8013cdc:	2303      	movs	r3, #3
 8013cde:	f02b 0204 	bic.w	r2, fp, #4
 8013ce2:	6123      	str	r3, [r4, #16]
 8013ce4:	6022      	str	r2, [r4, #0]
 8013ce6:	f04f 0900 	mov.w	r9, #0
 8013cea:	9700      	str	r7, [sp, #0]
 8013cec:	4633      	mov	r3, r6
 8013cee:	aa0b      	add	r2, sp, #44	; 0x2c
 8013cf0:	4621      	mov	r1, r4
 8013cf2:	4628      	mov	r0, r5
 8013cf4:	f000 f9e6 	bl	80140c4 <_printf_common>
 8013cf8:	3001      	adds	r0, #1
 8013cfa:	f040 808d 	bne.w	8013e18 <_printf_float+0x1d4>
 8013cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8013d02:	b00d      	add	sp, #52	; 0x34
 8013d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d08:	4642      	mov	r2, r8
 8013d0a:	464b      	mov	r3, r9
 8013d0c:	4640      	mov	r0, r8
 8013d0e:	4649      	mov	r1, r9
 8013d10:	f7ec ff14 	bl	8000b3c <__aeabi_dcmpun>
 8013d14:	b110      	cbz	r0, 8013d1c <_printf_float+0xd8>
 8013d16:	4a8c      	ldr	r2, [pc, #560]	; (8013f48 <_printf_float+0x304>)
 8013d18:	4b8c      	ldr	r3, [pc, #560]	; (8013f4c <_printf_float+0x308>)
 8013d1a:	e7da      	b.n	8013cd2 <_printf_float+0x8e>
 8013d1c:	6861      	ldr	r1, [r4, #4]
 8013d1e:	1c4b      	adds	r3, r1, #1
 8013d20:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8013d24:	a80a      	add	r0, sp, #40	; 0x28
 8013d26:	d13e      	bne.n	8013da6 <_printf_float+0x162>
 8013d28:	2306      	movs	r3, #6
 8013d2a:	6063      	str	r3, [r4, #4]
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013d32:	ab09      	add	r3, sp, #36	; 0x24
 8013d34:	9300      	str	r3, [sp, #0]
 8013d36:	ec49 8b10 	vmov	d0, r8, r9
 8013d3a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013d3e:	6022      	str	r2, [r4, #0]
 8013d40:	f8cd a004 	str.w	sl, [sp, #4]
 8013d44:	6861      	ldr	r1, [r4, #4]
 8013d46:	4628      	mov	r0, r5
 8013d48:	f7ff fee7 	bl	8013b1a <__cvt>
 8013d4c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8013d50:	2b47      	cmp	r3, #71	; 0x47
 8013d52:	4680      	mov	r8, r0
 8013d54:	d109      	bne.n	8013d6a <_printf_float+0x126>
 8013d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d58:	1cd8      	adds	r0, r3, #3
 8013d5a:	db02      	blt.n	8013d62 <_printf_float+0x11e>
 8013d5c:	6862      	ldr	r2, [r4, #4]
 8013d5e:	4293      	cmp	r3, r2
 8013d60:	dd47      	ble.n	8013df2 <_printf_float+0x1ae>
 8013d62:	f1aa 0a02 	sub.w	sl, sl, #2
 8013d66:	fa5f fa8a 	uxtb.w	sl, sl
 8013d6a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013d6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d70:	d824      	bhi.n	8013dbc <_printf_float+0x178>
 8013d72:	3901      	subs	r1, #1
 8013d74:	4652      	mov	r2, sl
 8013d76:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013d7a:	9109      	str	r1, [sp, #36]	; 0x24
 8013d7c:	f7ff ff2e 	bl	8013bdc <__exponent>
 8013d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d82:	1813      	adds	r3, r2, r0
 8013d84:	2a01      	cmp	r2, #1
 8013d86:	4681      	mov	r9, r0
 8013d88:	6123      	str	r3, [r4, #16]
 8013d8a:	dc02      	bgt.n	8013d92 <_printf_float+0x14e>
 8013d8c:	6822      	ldr	r2, [r4, #0]
 8013d8e:	07d1      	lsls	r1, r2, #31
 8013d90:	d501      	bpl.n	8013d96 <_printf_float+0x152>
 8013d92:	3301      	adds	r3, #1
 8013d94:	6123      	str	r3, [r4, #16]
 8013d96:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d0a5      	beq.n	8013cea <_printf_float+0xa6>
 8013d9e:	232d      	movs	r3, #45	; 0x2d
 8013da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013da4:	e7a1      	b.n	8013cea <_printf_float+0xa6>
 8013da6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8013daa:	f000 8177 	beq.w	801409c <_printf_float+0x458>
 8013dae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013db2:	d1bb      	bne.n	8013d2c <_printf_float+0xe8>
 8013db4:	2900      	cmp	r1, #0
 8013db6:	d1b9      	bne.n	8013d2c <_printf_float+0xe8>
 8013db8:	2301      	movs	r3, #1
 8013dba:	e7b6      	b.n	8013d2a <_printf_float+0xe6>
 8013dbc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8013dc0:	d119      	bne.n	8013df6 <_printf_float+0x1b2>
 8013dc2:	2900      	cmp	r1, #0
 8013dc4:	6863      	ldr	r3, [r4, #4]
 8013dc6:	dd0c      	ble.n	8013de2 <_printf_float+0x19e>
 8013dc8:	6121      	str	r1, [r4, #16]
 8013dca:	b913      	cbnz	r3, 8013dd2 <_printf_float+0x18e>
 8013dcc:	6822      	ldr	r2, [r4, #0]
 8013dce:	07d2      	lsls	r2, r2, #31
 8013dd0:	d502      	bpl.n	8013dd8 <_printf_float+0x194>
 8013dd2:	3301      	adds	r3, #1
 8013dd4:	440b      	add	r3, r1
 8013dd6:	6123      	str	r3, [r4, #16]
 8013dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dda:	65a3      	str	r3, [r4, #88]	; 0x58
 8013ddc:	f04f 0900 	mov.w	r9, #0
 8013de0:	e7d9      	b.n	8013d96 <_printf_float+0x152>
 8013de2:	b913      	cbnz	r3, 8013dea <_printf_float+0x1a6>
 8013de4:	6822      	ldr	r2, [r4, #0]
 8013de6:	07d0      	lsls	r0, r2, #31
 8013de8:	d501      	bpl.n	8013dee <_printf_float+0x1aa>
 8013dea:	3302      	adds	r3, #2
 8013dec:	e7f3      	b.n	8013dd6 <_printf_float+0x192>
 8013dee:	2301      	movs	r3, #1
 8013df0:	e7f1      	b.n	8013dd6 <_printf_float+0x192>
 8013df2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8013df6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013dfa:	4293      	cmp	r3, r2
 8013dfc:	db05      	blt.n	8013e0a <_printf_float+0x1c6>
 8013dfe:	6822      	ldr	r2, [r4, #0]
 8013e00:	6123      	str	r3, [r4, #16]
 8013e02:	07d1      	lsls	r1, r2, #31
 8013e04:	d5e8      	bpl.n	8013dd8 <_printf_float+0x194>
 8013e06:	3301      	adds	r3, #1
 8013e08:	e7e5      	b.n	8013dd6 <_printf_float+0x192>
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	bfd4      	ite	le
 8013e0e:	f1c3 0302 	rsble	r3, r3, #2
 8013e12:	2301      	movgt	r3, #1
 8013e14:	4413      	add	r3, r2
 8013e16:	e7de      	b.n	8013dd6 <_printf_float+0x192>
 8013e18:	6823      	ldr	r3, [r4, #0]
 8013e1a:	055a      	lsls	r2, r3, #21
 8013e1c:	d407      	bmi.n	8013e2e <_printf_float+0x1ea>
 8013e1e:	6923      	ldr	r3, [r4, #16]
 8013e20:	4642      	mov	r2, r8
 8013e22:	4631      	mov	r1, r6
 8013e24:	4628      	mov	r0, r5
 8013e26:	47b8      	blx	r7
 8013e28:	3001      	adds	r0, #1
 8013e2a:	d12b      	bne.n	8013e84 <_printf_float+0x240>
 8013e2c:	e767      	b.n	8013cfe <_printf_float+0xba>
 8013e2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013e32:	f240 80dc 	bls.w	8013fee <_printf_float+0x3aa>
 8013e36:	2200      	movs	r2, #0
 8013e38:	2300      	movs	r3, #0
 8013e3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013e3e:	f7ec fe4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8013e42:	2800      	cmp	r0, #0
 8013e44:	d033      	beq.n	8013eae <_printf_float+0x26a>
 8013e46:	2301      	movs	r3, #1
 8013e48:	4a41      	ldr	r2, [pc, #260]	; (8013f50 <_printf_float+0x30c>)
 8013e4a:	4631      	mov	r1, r6
 8013e4c:	4628      	mov	r0, r5
 8013e4e:	47b8      	blx	r7
 8013e50:	3001      	adds	r0, #1
 8013e52:	f43f af54 	beq.w	8013cfe <_printf_float+0xba>
 8013e56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	db02      	blt.n	8013e64 <_printf_float+0x220>
 8013e5e:	6823      	ldr	r3, [r4, #0]
 8013e60:	07d8      	lsls	r0, r3, #31
 8013e62:	d50f      	bpl.n	8013e84 <_printf_float+0x240>
 8013e64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e68:	4631      	mov	r1, r6
 8013e6a:	4628      	mov	r0, r5
 8013e6c:	47b8      	blx	r7
 8013e6e:	3001      	adds	r0, #1
 8013e70:	f43f af45 	beq.w	8013cfe <_printf_float+0xba>
 8013e74:	f04f 0800 	mov.w	r8, #0
 8013e78:	f104 091a 	add.w	r9, r4, #26
 8013e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e7e:	3b01      	subs	r3, #1
 8013e80:	4543      	cmp	r3, r8
 8013e82:	dc09      	bgt.n	8013e98 <_printf_float+0x254>
 8013e84:	6823      	ldr	r3, [r4, #0]
 8013e86:	079b      	lsls	r3, r3, #30
 8013e88:	f100 8103 	bmi.w	8014092 <_printf_float+0x44e>
 8013e8c:	68e0      	ldr	r0, [r4, #12]
 8013e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e90:	4298      	cmp	r0, r3
 8013e92:	bfb8      	it	lt
 8013e94:	4618      	movlt	r0, r3
 8013e96:	e734      	b.n	8013d02 <_printf_float+0xbe>
 8013e98:	2301      	movs	r3, #1
 8013e9a:	464a      	mov	r2, r9
 8013e9c:	4631      	mov	r1, r6
 8013e9e:	4628      	mov	r0, r5
 8013ea0:	47b8      	blx	r7
 8013ea2:	3001      	adds	r0, #1
 8013ea4:	f43f af2b 	beq.w	8013cfe <_printf_float+0xba>
 8013ea8:	f108 0801 	add.w	r8, r8, #1
 8013eac:	e7e6      	b.n	8013e7c <_printf_float+0x238>
 8013eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	dc2b      	bgt.n	8013f0c <_printf_float+0x2c8>
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	4a26      	ldr	r2, [pc, #152]	; (8013f50 <_printf_float+0x30c>)
 8013eb8:	4631      	mov	r1, r6
 8013eba:	4628      	mov	r0, r5
 8013ebc:	47b8      	blx	r7
 8013ebe:	3001      	adds	r0, #1
 8013ec0:	f43f af1d 	beq.w	8013cfe <_printf_float+0xba>
 8013ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ec6:	b923      	cbnz	r3, 8013ed2 <_printf_float+0x28e>
 8013ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013eca:	b913      	cbnz	r3, 8013ed2 <_printf_float+0x28e>
 8013ecc:	6823      	ldr	r3, [r4, #0]
 8013ece:	07d9      	lsls	r1, r3, #31
 8013ed0:	d5d8      	bpl.n	8013e84 <_printf_float+0x240>
 8013ed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ed6:	4631      	mov	r1, r6
 8013ed8:	4628      	mov	r0, r5
 8013eda:	47b8      	blx	r7
 8013edc:	3001      	adds	r0, #1
 8013ede:	f43f af0e 	beq.w	8013cfe <_printf_float+0xba>
 8013ee2:	f04f 0900 	mov.w	r9, #0
 8013ee6:	f104 0a1a 	add.w	sl, r4, #26
 8013eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eec:	425b      	negs	r3, r3
 8013eee:	454b      	cmp	r3, r9
 8013ef0:	dc01      	bgt.n	8013ef6 <_printf_float+0x2b2>
 8013ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ef4:	e794      	b.n	8013e20 <_printf_float+0x1dc>
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	4652      	mov	r2, sl
 8013efa:	4631      	mov	r1, r6
 8013efc:	4628      	mov	r0, r5
 8013efe:	47b8      	blx	r7
 8013f00:	3001      	adds	r0, #1
 8013f02:	f43f aefc 	beq.w	8013cfe <_printf_float+0xba>
 8013f06:	f109 0901 	add.w	r9, r9, #1
 8013f0a:	e7ee      	b.n	8013eea <_printf_float+0x2a6>
 8013f0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013f10:	429a      	cmp	r2, r3
 8013f12:	bfa8      	it	ge
 8013f14:	461a      	movge	r2, r3
 8013f16:	2a00      	cmp	r2, #0
 8013f18:	4691      	mov	r9, r2
 8013f1a:	dd07      	ble.n	8013f2c <_printf_float+0x2e8>
 8013f1c:	4613      	mov	r3, r2
 8013f1e:	4631      	mov	r1, r6
 8013f20:	4642      	mov	r2, r8
 8013f22:	4628      	mov	r0, r5
 8013f24:	47b8      	blx	r7
 8013f26:	3001      	adds	r0, #1
 8013f28:	f43f aee9 	beq.w	8013cfe <_printf_float+0xba>
 8013f2c:	f104 031a 	add.w	r3, r4, #26
 8013f30:	f04f 0b00 	mov.w	fp, #0
 8013f34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013f38:	9306      	str	r3, [sp, #24]
 8013f3a:	e015      	b.n	8013f68 <_printf_float+0x324>
 8013f3c:	7fefffff 	.word	0x7fefffff
 8013f40:	080182dc 	.word	0x080182dc
 8013f44:	080182d8 	.word	0x080182d8
 8013f48:	080182e4 	.word	0x080182e4
 8013f4c:	080182e0 	.word	0x080182e0
 8013f50:	080182e8 	.word	0x080182e8
 8013f54:	2301      	movs	r3, #1
 8013f56:	9a06      	ldr	r2, [sp, #24]
 8013f58:	4631      	mov	r1, r6
 8013f5a:	4628      	mov	r0, r5
 8013f5c:	47b8      	blx	r7
 8013f5e:	3001      	adds	r0, #1
 8013f60:	f43f aecd 	beq.w	8013cfe <_printf_float+0xba>
 8013f64:	f10b 0b01 	add.w	fp, fp, #1
 8013f68:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013f6c:	ebaa 0309 	sub.w	r3, sl, r9
 8013f70:	455b      	cmp	r3, fp
 8013f72:	dcef      	bgt.n	8013f54 <_printf_float+0x310>
 8013f74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013f78:	429a      	cmp	r2, r3
 8013f7a:	44d0      	add	r8, sl
 8013f7c:	db15      	blt.n	8013faa <_printf_float+0x366>
 8013f7e:	6823      	ldr	r3, [r4, #0]
 8013f80:	07da      	lsls	r2, r3, #31
 8013f82:	d412      	bmi.n	8013faa <_printf_float+0x366>
 8013f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f88:	eba3 020a 	sub.w	r2, r3, sl
 8013f8c:	eba3 0a01 	sub.w	sl, r3, r1
 8013f90:	4592      	cmp	sl, r2
 8013f92:	bfa8      	it	ge
 8013f94:	4692      	movge	sl, r2
 8013f96:	f1ba 0f00 	cmp.w	sl, #0
 8013f9a:	dc0e      	bgt.n	8013fba <_printf_float+0x376>
 8013f9c:	f04f 0800 	mov.w	r8, #0
 8013fa0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013fa4:	f104 091a 	add.w	r9, r4, #26
 8013fa8:	e019      	b.n	8013fde <_printf_float+0x39a>
 8013faa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013fae:	4631      	mov	r1, r6
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	47b8      	blx	r7
 8013fb4:	3001      	adds	r0, #1
 8013fb6:	d1e5      	bne.n	8013f84 <_printf_float+0x340>
 8013fb8:	e6a1      	b.n	8013cfe <_printf_float+0xba>
 8013fba:	4653      	mov	r3, sl
 8013fbc:	4642      	mov	r2, r8
 8013fbe:	4631      	mov	r1, r6
 8013fc0:	4628      	mov	r0, r5
 8013fc2:	47b8      	blx	r7
 8013fc4:	3001      	adds	r0, #1
 8013fc6:	d1e9      	bne.n	8013f9c <_printf_float+0x358>
 8013fc8:	e699      	b.n	8013cfe <_printf_float+0xba>
 8013fca:	2301      	movs	r3, #1
 8013fcc:	464a      	mov	r2, r9
 8013fce:	4631      	mov	r1, r6
 8013fd0:	4628      	mov	r0, r5
 8013fd2:	47b8      	blx	r7
 8013fd4:	3001      	adds	r0, #1
 8013fd6:	f43f ae92 	beq.w	8013cfe <_printf_float+0xba>
 8013fda:	f108 0801 	add.w	r8, r8, #1
 8013fde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013fe2:	1a9b      	subs	r3, r3, r2
 8013fe4:	eba3 030a 	sub.w	r3, r3, sl
 8013fe8:	4543      	cmp	r3, r8
 8013fea:	dcee      	bgt.n	8013fca <_printf_float+0x386>
 8013fec:	e74a      	b.n	8013e84 <_printf_float+0x240>
 8013fee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ff0:	2a01      	cmp	r2, #1
 8013ff2:	dc01      	bgt.n	8013ff8 <_printf_float+0x3b4>
 8013ff4:	07db      	lsls	r3, r3, #31
 8013ff6:	d53a      	bpl.n	801406e <_printf_float+0x42a>
 8013ff8:	2301      	movs	r3, #1
 8013ffa:	4642      	mov	r2, r8
 8013ffc:	4631      	mov	r1, r6
 8013ffe:	4628      	mov	r0, r5
 8014000:	47b8      	blx	r7
 8014002:	3001      	adds	r0, #1
 8014004:	f43f ae7b 	beq.w	8013cfe <_printf_float+0xba>
 8014008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801400c:	4631      	mov	r1, r6
 801400e:	4628      	mov	r0, r5
 8014010:	47b8      	blx	r7
 8014012:	3001      	adds	r0, #1
 8014014:	f108 0801 	add.w	r8, r8, #1
 8014018:	f43f ae71 	beq.w	8013cfe <_printf_float+0xba>
 801401c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801401e:	2200      	movs	r2, #0
 8014020:	f103 3aff 	add.w	sl, r3, #4294967295
 8014024:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014028:	2300      	movs	r3, #0
 801402a:	f7ec fd55 	bl	8000ad8 <__aeabi_dcmpeq>
 801402e:	b9c8      	cbnz	r0, 8014064 <_printf_float+0x420>
 8014030:	4653      	mov	r3, sl
 8014032:	4642      	mov	r2, r8
 8014034:	4631      	mov	r1, r6
 8014036:	4628      	mov	r0, r5
 8014038:	47b8      	blx	r7
 801403a:	3001      	adds	r0, #1
 801403c:	d10e      	bne.n	801405c <_printf_float+0x418>
 801403e:	e65e      	b.n	8013cfe <_printf_float+0xba>
 8014040:	2301      	movs	r3, #1
 8014042:	4652      	mov	r2, sl
 8014044:	4631      	mov	r1, r6
 8014046:	4628      	mov	r0, r5
 8014048:	47b8      	blx	r7
 801404a:	3001      	adds	r0, #1
 801404c:	f43f ae57 	beq.w	8013cfe <_printf_float+0xba>
 8014050:	f108 0801 	add.w	r8, r8, #1
 8014054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014056:	3b01      	subs	r3, #1
 8014058:	4543      	cmp	r3, r8
 801405a:	dcf1      	bgt.n	8014040 <_printf_float+0x3fc>
 801405c:	464b      	mov	r3, r9
 801405e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014062:	e6de      	b.n	8013e22 <_printf_float+0x1de>
 8014064:	f04f 0800 	mov.w	r8, #0
 8014068:	f104 0a1a 	add.w	sl, r4, #26
 801406c:	e7f2      	b.n	8014054 <_printf_float+0x410>
 801406e:	2301      	movs	r3, #1
 8014070:	e7df      	b.n	8014032 <_printf_float+0x3ee>
 8014072:	2301      	movs	r3, #1
 8014074:	464a      	mov	r2, r9
 8014076:	4631      	mov	r1, r6
 8014078:	4628      	mov	r0, r5
 801407a:	47b8      	blx	r7
 801407c:	3001      	adds	r0, #1
 801407e:	f43f ae3e 	beq.w	8013cfe <_printf_float+0xba>
 8014082:	f108 0801 	add.w	r8, r8, #1
 8014086:	68e3      	ldr	r3, [r4, #12]
 8014088:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801408a:	1a9b      	subs	r3, r3, r2
 801408c:	4543      	cmp	r3, r8
 801408e:	dcf0      	bgt.n	8014072 <_printf_float+0x42e>
 8014090:	e6fc      	b.n	8013e8c <_printf_float+0x248>
 8014092:	f04f 0800 	mov.w	r8, #0
 8014096:	f104 0919 	add.w	r9, r4, #25
 801409a:	e7f4      	b.n	8014086 <_printf_float+0x442>
 801409c:	2900      	cmp	r1, #0
 801409e:	f43f ae8b 	beq.w	8013db8 <_printf_float+0x174>
 80140a2:	2300      	movs	r3, #0
 80140a4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80140a8:	ab09      	add	r3, sp, #36	; 0x24
 80140aa:	9300      	str	r3, [sp, #0]
 80140ac:	ec49 8b10 	vmov	d0, r8, r9
 80140b0:	6022      	str	r2, [r4, #0]
 80140b2:	f8cd a004 	str.w	sl, [sp, #4]
 80140b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80140ba:	4628      	mov	r0, r5
 80140bc:	f7ff fd2d 	bl	8013b1a <__cvt>
 80140c0:	4680      	mov	r8, r0
 80140c2:	e648      	b.n	8013d56 <_printf_float+0x112>

080140c4 <_printf_common>:
 80140c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140c8:	4691      	mov	r9, r2
 80140ca:	461f      	mov	r7, r3
 80140cc:	688a      	ldr	r2, [r1, #8]
 80140ce:	690b      	ldr	r3, [r1, #16]
 80140d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80140d4:	4293      	cmp	r3, r2
 80140d6:	bfb8      	it	lt
 80140d8:	4613      	movlt	r3, r2
 80140da:	f8c9 3000 	str.w	r3, [r9]
 80140de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80140e2:	4606      	mov	r6, r0
 80140e4:	460c      	mov	r4, r1
 80140e6:	b112      	cbz	r2, 80140ee <_printf_common+0x2a>
 80140e8:	3301      	adds	r3, #1
 80140ea:	f8c9 3000 	str.w	r3, [r9]
 80140ee:	6823      	ldr	r3, [r4, #0]
 80140f0:	0699      	lsls	r1, r3, #26
 80140f2:	bf42      	ittt	mi
 80140f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80140f8:	3302      	addmi	r3, #2
 80140fa:	f8c9 3000 	strmi.w	r3, [r9]
 80140fe:	6825      	ldr	r5, [r4, #0]
 8014100:	f015 0506 	ands.w	r5, r5, #6
 8014104:	d107      	bne.n	8014116 <_printf_common+0x52>
 8014106:	f104 0a19 	add.w	sl, r4, #25
 801410a:	68e3      	ldr	r3, [r4, #12]
 801410c:	f8d9 2000 	ldr.w	r2, [r9]
 8014110:	1a9b      	subs	r3, r3, r2
 8014112:	42ab      	cmp	r3, r5
 8014114:	dc28      	bgt.n	8014168 <_printf_common+0xa4>
 8014116:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801411a:	6822      	ldr	r2, [r4, #0]
 801411c:	3300      	adds	r3, #0
 801411e:	bf18      	it	ne
 8014120:	2301      	movne	r3, #1
 8014122:	0692      	lsls	r2, r2, #26
 8014124:	d42d      	bmi.n	8014182 <_printf_common+0xbe>
 8014126:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801412a:	4639      	mov	r1, r7
 801412c:	4630      	mov	r0, r6
 801412e:	47c0      	blx	r8
 8014130:	3001      	adds	r0, #1
 8014132:	d020      	beq.n	8014176 <_printf_common+0xb2>
 8014134:	6823      	ldr	r3, [r4, #0]
 8014136:	68e5      	ldr	r5, [r4, #12]
 8014138:	f8d9 2000 	ldr.w	r2, [r9]
 801413c:	f003 0306 	and.w	r3, r3, #6
 8014140:	2b04      	cmp	r3, #4
 8014142:	bf08      	it	eq
 8014144:	1aad      	subeq	r5, r5, r2
 8014146:	68a3      	ldr	r3, [r4, #8]
 8014148:	6922      	ldr	r2, [r4, #16]
 801414a:	bf0c      	ite	eq
 801414c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014150:	2500      	movne	r5, #0
 8014152:	4293      	cmp	r3, r2
 8014154:	bfc4      	itt	gt
 8014156:	1a9b      	subgt	r3, r3, r2
 8014158:	18ed      	addgt	r5, r5, r3
 801415a:	f04f 0900 	mov.w	r9, #0
 801415e:	341a      	adds	r4, #26
 8014160:	454d      	cmp	r5, r9
 8014162:	d11a      	bne.n	801419a <_printf_common+0xd6>
 8014164:	2000      	movs	r0, #0
 8014166:	e008      	b.n	801417a <_printf_common+0xb6>
 8014168:	2301      	movs	r3, #1
 801416a:	4652      	mov	r2, sl
 801416c:	4639      	mov	r1, r7
 801416e:	4630      	mov	r0, r6
 8014170:	47c0      	blx	r8
 8014172:	3001      	adds	r0, #1
 8014174:	d103      	bne.n	801417e <_printf_common+0xba>
 8014176:	f04f 30ff 	mov.w	r0, #4294967295
 801417a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801417e:	3501      	adds	r5, #1
 8014180:	e7c3      	b.n	801410a <_printf_common+0x46>
 8014182:	18e1      	adds	r1, r4, r3
 8014184:	1c5a      	adds	r2, r3, #1
 8014186:	2030      	movs	r0, #48	; 0x30
 8014188:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801418c:	4422      	add	r2, r4
 801418e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014192:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014196:	3302      	adds	r3, #2
 8014198:	e7c5      	b.n	8014126 <_printf_common+0x62>
 801419a:	2301      	movs	r3, #1
 801419c:	4622      	mov	r2, r4
 801419e:	4639      	mov	r1, r7
 80141a0:	4630      	mov	r0, r6
 80141a2:	47c0      	blx	r8
 80141a4:	3001      	adds	r0, #1
 80141a6:	d0e6      	beq.n	8014176 <_printf_common+0xb2>
 80141a8:	f109 0901 	add.w	r9, r9, #1
 80141ac:	e7d8      	b.n	8014160 <_printf_common+0x9c>
	...

080141b0 <_printf_i>:
 80141b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80141b8:	460c      	mov	r4, r1
 80141ba:	7e09      	ldrb	r1, [r1, #24]
 80141bc:	b085      	sub	sp, #20
 80141be:	296e      	cmp	r1, #110	; 0x6e
 80141c0:	4617      	mov	r7, r2
 80141c2:	4606      	mov	r6, r0
 80141c4:	4698      	mov	r8, r3
 80141c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80141c8:	f000 80b3 	beq.w	8014332 <_printf_i+0x182>
 80141cc:	d822      	bhi.n	8014214 <_printf_i+0x64>
 80141ce:	2963      	cmp	r1, #99	; 0x63
 80141d0:	d036      	beq.n	8014240 <_printf_i+0x90>
 80141d2:	d80a      	bhi.n	80141ea <_printf_i+0x3a>
 80141d4:	2900      	cmp	r1, #0
 80141d6:	f000 80b9 	beq.w	801434c <_printf_i+0x19c>
 80141da:	2958      	cmp	r1, #88	; 0x58
 80141dc:	f000 8083 	beq.w	80142e6 <_printf_i+0x136>
 80141e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80141e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80141e8:	e032      	b.n	8014250 <_printf_i+0xa0>
 80141ea:	2964      	cmp	r1, #100	; 0x64
 80141ec:	d001      	beq.n	80141f2 <_printf_i+0x42>
 80141ee:	2969      	cmp	r1, #105	; 0x69
 80141f0:	d1f6      	bne.n	80141e0 <_printf_i+0x30>
 80141f2:	6820      	ldr	r0, [r4, #0]
 80141f4:	6813      	ldr	r3, [r2, #0]
 80141f6:	0605      	lsls	r5, r0, #24
 80141f8:	f103 0104 	add.w	r1, r3, #4
 80141fc:	d52a      	bpl.n	8014254 <_printf_i+0xa4>
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	6011      	str	r1, [r2, #0]
 8014202:	2b00      	cmp	r3, #0
 8014204:	da03      	bge.n	801420e <_printf_i+0x5e>
 8014206:	222d      	movs	r2, #45	; 0x2d
 8014208:	425b      	negs	r3, r3
 801420a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801420e:	486f      	ldr	r0, [pc, #444]	; (80143cc <_printf_i+0x21c>)
 8014210:	220a      	movs	r2, #10
 8014212:	e039      	b.n	8014288 <_printf_i+0xd8>
 8014214:	2973      	cmp	r1, #115	; 0x73
 8014216:	f000 809d 	beq.w	8014354 <_printf_i+0x1a4>
 801421a:	d808      	bhi.n	801422e <_printf_i+0x7e>
 801421c:	296f      	cmp	r1, #111	; 0x6f
 801421e:	d020      	beq.n	8014262 <_printf_i+0xb2>
 8014220:	2970      	cmp	r1, #112	; 0x70
 8014222:	d1dd      	bne.n	80141e0 <_printf_i+0x30>
 8014224:	6823      	ldr	r3, [r4, #0]
 8014226:	f043 0320 	orr.w	r3, r3, #32
 801422a:	6023      	str	r3, [r4, #0]
 801422c:	e003      	b.n	8014236 <_printf_i+0x86>
 801422e:	2975      	cmp	r1, #117	; 0x75
 8014230:	d017      	beq.n	8014262 <_printf_i+0xb2>
 8014232:	2978      	cmp	r1, #120	; 0x78
 8014234:	d1d4      	bne.n	80141e0 <_printf_i+0x30>
 8014236:	2378      	movs	r3, #120	; 0x78
 8014238:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801423c:	4864      	ldr	r0, [pc, #400]	; (80143d0 <_printf_i+0x220>)
 801423e:	e055      	b.n	80142ec <_printf_i+0x13c>
 8014240:	6813      	ldr	r3, [r2, #0]
 8014242:	1d19      	adds	r1, r3, #4
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	6011      	str	r1, [r2, #0]
 8014248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801424c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014250:	2301      	movs	r3, #1
 8014252:	e08c      	b.n	801436e <_printf_i+0x1be>
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	6011      	str	r1, [r2, #0]
 8014258:	f010 0f40 	tst.w	r0, #64	; 0x40
 801425c:	bf18      	it	ne
 801425e:	b21b      	sxthne	r3, r3
 8014260:	e7cf      	b.n	8014202 <_printf_i+0x52>
 8014262:	6813      	ldr	r3, [r2, #0]
 8014264:	6825      	ldr	r5, [r4, #0]
 8014266:	1d18      	adds	r0, r3, #4
 8014268:	6010      	str	r0, [r2, #0]
 801426a:	0628      	lsls	r0, r5, #24
 801426c:	d501      	bpl.n	8014272 <_printf_i+0xc2>
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	e002      	b.n	8014278 <_printf_i+0xc8>
 8014272:	0668      	lsls	r0, r5, #25
 8014274:	d5fb      	bpl.n	801426e <_printf_i+0xbe>
 8014276:	881b      	ldrh	r3, [r3, #0]
 8014278:	4854      	ldr	r0, [pc, #336]	; (80143cc <_printf_i+0x21c>)
 801427a:	296f      	cmp	r1, #111	; 0x6f
 801427c:	bf14      	ite	ne
 801427e:	220a      	movne	r2, #10
 8014280:	2208      	moveq	r2, #8
 8014282:	2100      	movs	r1, #0
 8014284:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014288:	6865      	ldr	r5, [r4, #4]
 801428a:	60a5      	str	r5, [r4, #8]
 801428c:	2d00      	cmp	r5, #0
 801428e:	f2c0 8095 	blt.w	80143bc <_printf_i+0x20c>
 8014292:	6821      	ldr	r1, [r4, #0]
 8014294:	f021 0104 	bic.w	r1, r1, #4
 8014298:	6021      	str	r1, [r4, #0]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d13d      	bne.n	801431a <_printf_i+0x16a>
 801429e:	2d00      	cmp	r5, #0
 80142a0:	f040 808e 	bne.w	80143c0 <_printf_i+0x210>
 80142a4:	4665      	mov	r5, ip
 80142a6:	2a08      	cmp	r2, #8
 80142a8:	d10b      	bne.n	80142c2 <_printf_i+0x112>
 80142aa:	6823      	ldr	r3, [r4, #0]
 80142ac:	07db      	lsls	r3, r3, #31
 80142ae:	d508      	bpl.n	80142c2 <_printf_i+0x112>
 80142b0:	6923      	ldr	r3, [r4, #16]
 80142b2:	6862      	ldr	r2, [r4, #4]
 80142b4:	429a      	cmp	r2, r3
 80142b6:	bfde      	ittt	le
 80142b8:	2330      	movle	r3, #48	; 0x30
 80142ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80142be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80142c2:	ebac 0305 	sub.w	r3, ip, r5
 80142c6:	6123      	str	r3, [r4, #16]
 80142c8:	f8cd 8000 	str.w	r8, [sp]
 80142cc:	463b      	mov	r3, r7
 80142ce:	aa03      	add	r2, sp, #12
 80142d0:	4621      	mov	r1, r4
 80142d2:	4630      	mov	r0, r6
 80142d4:	f7ff fef6 	bl	80140c4 <_printf_common>
 80142d8:	3001      	adds	r0, #1
 80142da:	d14d      	bne.n	8014378 <_printf_i+0x1c8>
 80142dc:	f04f 30ff 	mov.w	r0, #4294967295
 80142e0:	b005      	add	sp, #20
 80142e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142e6:	4839      	ldr	r0, [pc, #228]	; (80143cc <_printf_i+0x21c>)
 80142e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80142ec:	6813      	ldr	r3, [r2, #0]
 80142ee:	6821      	ldr	r1, [r4, #0]
 80142f0:	1d1d      	adds	r5, r3, #4
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	6015      	str	r5, [r2, #0]
 80142f6:	060a      	lsls	r2, r1, #24
 80142f8:	d50b      	bpl.n	8014312 <_printf_i+0x162>
 80142fa:	07ca      	lsls	r2, r1, #31
 80142fc:	bf44      	itt	mi
 80142fe:	f041 0120 	orrmi.w	r1, r1, #32
 8014302:	6021      	strmi	r1, [r4, #0]
 8014304:	b91b      	cbnz	r3, 801430e <_printf_i+0x15e>
 8014306:	6822      	ldr	r2, [r4, #0]
 8014308:	f022 0220 	bic.w	r2, r2, #32
 801430c:	6022      	str	r2, [r4, #0]
 801430e:	2210      	movs	r2, #16
 8014310:	e7b7      	b.n	8014282 <_printf_i+0xd2>
 8014312:	064d      	lsls	r5, r1, #25
 8014314:	bf48      	it	mi
 8014316:	b29b      	uxthmi	r3, r3
 8014318:	e7ef      	b.n	80142fa <_printf_i+0x14a>
 801431a:	4665      	mov	r5, ip
 801431c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014320:	fb02 3311 	mls	r3, r2, r1, r3
 8014324:	5cc3      	ldrb	r3, [r0, r3]
 8014326:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801432a:	460b      	mov	r3, r1
 801432c:	2900      	cmp	r1, #0
 801432e:	d1f5      	bne.n	801431c <_printf_i+0x16c>
 8014330:	e7b9      	b.n	80142a6 <_printf_i+0xf6>
 8014332:	6813      	ldr	r3, [r2, #0]
 8014334:	6825      	ldr	r5, [r4, #0]
 8014336:	6961      	ldr	r1, [r4, #20]
 8014338:	1d18      	adds	r0, r3, #4
 801433a:	6010      	str	r0, [r2, #0]
 801433c:	0628      	lsls	r0, r5, #24
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	d501      	bpl.n	8014346 <_printf_i+0x196>
 8014342:	6019      	str	r1, [r3, #0]
 8014344:	e002      	b.n	801434c <_printf_i+0x19c>
 8014346:	066a      	lsls	r2, r5, #25
 8014348:	d5fb      	bpl.n	8014342 <_printf_i+0x192>
 801434a:	8019      	strh	r1, [r3, #0]
 801434c:	2300      	movs	r3, #0
 801434e:	6123      	str	r3, [r4, #16]
 8014350:	4665      	mov	r5, ip
 8014352:	e7b9      	b.n	80142c8 <_printf_i+0x118>
 8014354:	6813      	ldr	r3, [r2, #0]
 8014356:	1d19      	adds	r1, r3, #4
 8014358:	6011      	str	r1, [r2, #0]
 801435a:	681d      	ldr	r5, [r3, #0]
 801435c:	6862      	ldr	r2, [r4, #4]
 801435e:	2100      	movs	r1, #0
 8014360:	4628      	mov	r0, r5
 8014362:	f7eb ff45 	bl	80001f0 <memchr>
 8014366:	b108      	cbz	r0, 801436c <_printf_i+0x1bc>
 8014368:	1b40      	subs	r0, r0, r5
 801436a:	6060      	str	r0, [r4, #4]
 801436c:	6863      	ldr	r3, [r4, #4]
 801436e:	6123      	str	r3, [r4, #16]
 8014370:	2300      	movs	r3, #0
 8014372:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014376:	e7a7      	b.n	80142c8 <_printf_i+0x118>
 8014378:	6923      	ldr	r3, [r4, #16]
 801437a:	462a      	mov	r2, r5
 801437c:	4639      	mov	r1, r7
 801437e:	4630      	mov	r0, r6
 8014380:	47c0      	blx	r8
 8014382:	3001      	adds	r0, #1
 8014384:	d0aa      	beq.n	80142dc <_printf_i+0x12c>
 8014386:	6823      	ldr	r3, [r4, #0]
 8014388:	079b      	lsls	r3, r3, #30
 801438a:	d413      	bmi.n	80143b4 <_printf_i+0x204>
 801438c:	68e0      	ldr	r0, [r4, #12]
 801438e:	9b03      	ldr	r3, [sp, #12]
 8014390:	4298      	cmp	r0, r3
 8014392:	bfb8      	it	lt
 8014394:	4618      	movlt	r0, r3
 8014396:	e7a3      	b.n	80142e0 <_printf_i+0x130>
 8014398:	2301      	movs	r3, #1
 801439a:	464a      	mov	r2, r9
 801439c:	4639      	mov	r1, r7
 801439e:	4630      	mov	r0, r6
 80143a0:	47c0      	blx	r8
 80143a2:	3001      	adds	r0, #1
 80143a4:	d09a      	beq.n	80142dc <_printf_i+0x12c>
 80143a6:	3501      	adds	r5, #1
 80143a8:	68e3      	ldr	r3, [r4, #12]
 80143aa:	9a03      	ldr	r2, [sp, #12]
 80143ac:	1a9b      	subs	r3, r3, r2
 80143ae:	42ab      	cmp	r3, r5
 80143b0:	dcf2      	bgt.n	8014398 <_printf_i+0x1e8>
 80143b2:	e7eb      	b.n	801438c <_printf_i+0x1dc>
 80143b4:	2500      	movs	r5, #0
 80143b6:	f104 0919 	add.w	r9, r4, #25
 80143ba:	e7f5      	b.n	80143a8 <_printf_i+0x1f8>
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d1ac      	bne.n	801431a <_printf_i+0x16a>
 80143c0:	7803      	ldrb	r3, [r0, #0]
 80143c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80143c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80143ca:	e76c      	b.n	80142a6 <_printf_i+0xf6>
 80143cc:	080182ea 	.word	0x080182ea
 80143d0:	080182fb 	.word	0x080182fb

080143d4 <iprintf>:
 80143d4:	b40f      	push	{r0, r1, r2, r3}
 80143d6:	4b0a      	ldr	r3, [pc, #40]	; (8014400 <iprintf+0x2c>)
 80143d8:	b513      	push	{r0, r1, r4, lr}
 80143da:	681c      	ldr	r4, [r3, #0]
 80143dc:	b124      	cbz	r4, 80143e8 <iprintf+0x14>
 80143de:	69a3      	ldr	r3, [r4, #24]
 80143e0:	b913      	cbnz	r3, 80143e8 <iprintf+0x14>
 80143e2:	4620      	mov	r0, r4
 80143e4:	f000 feb4 	bl	8015150 <__sinit>
 80143e8:	ab05      	add	r3, sp, #20
 80143ea:	9a04      	ldr	r2, [sp, #16]
 80143ec:	68a1      	ldr	r1, [r4, #8]
 80143ee:	9301      	str	r3, [sp, #4]
 80143f0:	4620      	mov	r0, r4
 80143f2:	f001 fc5b 	bl	8015cac <_vfiprintf_r>
 80143f6:	b002      	add	sp, #8
 80143f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143fc:	b004      	add	sp, #16
 80143fe:	4770      	bx	lr
 8014400:	20001304 	.word	0x20001304

08014404 <siprintf>:
 8014404:	b40e      	push	{r1, r2, r3}
 8014406:	b500      	push	{lr}
 8014408:	b09c      	sub	sp, #112	; 0x70
 801440a:	ab1d      	add	r3, sp, #116	; 0x74
 801440c:	9002      	str	r0, [sp, #8]
 801440e:	9006      	str	r0, [sp, #24]
 8014410:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014414:	4809      	ldr	r0, [pc, #36]	; (801443c <siprintf+0x38>)
 8014416:	9107      	str	r1, [sp, #28]
 8014418:	9104      	str	r1, [sp, #16]
 801441a:	4909      	ldr	r1, [pc, #36]	; (8014440 <siprintf+0x3c>)
 801441c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014420:	9105      	str	r1, [sp, #20]
 8014422:	6800      	ldr	r0, [r0, #0]
 8014424:	9301      	str	r3, [sp, #4]
 8014426:	a902      	add	r1, sp, #8
 8014428:	f001 fb1e 	bl	8015a68 <_svfiprintf_r>
 801442c:	9b02      	ldr	r3, [sp, #8]
 801442e:	2200      	movs	r2, #0
 8014430:	701a      	strb	r2, [r3, #0]
 8014432:	b01c      	add	sp, #112	; 0x70
 8014434:	f85d eb04 	ldr.w	lr, [sp], #4
 8014438:	b003      	add	sp, #12
 801443a:	4770      	bx	lr
 801443c:	20001304 	.word	0x20001304
 8014440:	ffff0208 	.word	0xffff0208

08014444 <quorem>:
 8014444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014448:	6903      	ldr	r3, [r0, #16]
 801444a:	690c      	ldr	r4, [r1, #16]
 801444c:	42a3      	cmp	r3, r4
 801444e:	4680      	mov	r8, r0
 8014450:	f2c0 8082 	blt.w	8014558 <quorem+0x114>
 8014454:	3c01      	subs	r4, #1
 8014456:	f101 0714 	add.w	r7, r1, #20
 801445a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801445e:	f100 0614 	add.w	r6, r0, #20
 8014462:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014466:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801446a:	eb06 030c 	add.w	r3, r6, ip
 801446e:	3501      	adds	r5, #1
 8014470:	eb07 090c 	add.w	r9, r7, ip
 8014474:	9301      	str	r3, [sp, #4]
 8014476:	fbb0 f5f5 	udiv	r5, r0, r5
 801447a:	b395      	cbz	r5, 80144e2 <quorem+0x9e>
 801447c:	f04f 0a00 	mov.w	sl, #0
 8014480:	4638      	mov	r0, r7
 8014482:	46b6      	mov	lr, r6
 8014484:	46d3      	mov	fp, sl
 8014486:	f850 2b04 	ldr.w	r2, [r0], #4
 801448a:	b293      	uxth	r3, r2
 801448c:	fb05 a303 	mla	r3, r5, r3, sl
 8014490:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014494:	b29b      	uxth	r3, r3
 8014496:	ebab 0303 	sub.w	r3, fp, r3
 801449a:	0c12      	lsrs	r2, r2, #16
 801449c:	f8de b000 	ldr.w	fp, [lr]
 80144a0:	fb05 a202 	mla	r2, r5, r2, sl
 80144a4:	fa13 f38b 	uxtah	r3, r3, fp
 80144a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80144ac:	fa1f fb82 	uxth.w	fp, r2
 80144b0:	f8de 2000 	ldr.w	r2, [lr]
 80144b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80144b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80144bc:	b29b      	uxth	r3, r3
 80144be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80144c2:	4581      	cmp	r9, r0
 80144c4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80144c8:	f84e 3b04 	str.w	r3, [lr], #4
 80144cc:	d2db      	bcs.n	8014486 <quorem+0x42>
 80144ce:	f856 300c 	ldr.w	r3, [r6, ip]
 80144d2:	b933      	cbnz	r3, 80144e2 <quorem+0x9e>
 80144d4:	9b01      	ldr	r3, [sp, #4]
 80144d6:	3b04      	subs	r3, #4
 80144d8:	429e      	cmp	r6, r3
 80144da:	461a      	mov	r2, r3
 80144dc:	d330      	bcc.n	8014540 <quorem+0xfc>
 80144de:	f8c8 4010 	str.w	r4, [r8, #16]
 80144e2:	4640      	mov	r0, r8
 80144e4:	f001 f8ea 	bl	80156bc <__mcmp>
 80144e8:	2800      	cmp	r0, #0
 80144ea:	db25      	blt.n	8014538 <quorem+0xf4>
 80144ec:	3501      	adds	r5, #1
 80144ee:	4630      	mov	r0, r6
 80144f0:	f04f 0c00 	mov.w	ip, #0
 80144f4:	f857 2b04 	ldr.w	r2, [r7], #4
 80144f8:	f8d0 e000 	ldr.w	lr, [r0]
 80144fc:	b293      	uxth	r3, r2
 80144fe:	ebac 0303 	sub.w	r3, ip, r3
 8014502:	0c12      	lsrs	r2, r2, #16
 8014504:	fa13 f38e 	uxtah	r3, r3, lr
 8014508:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801450c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014510:	b29b      	uxth	r3, r3
 8014512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014516:	45b9      	cmp	r9, r7
 8014518:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801451c:	f840 3b04 	str.w	r3, [r0], #4
 8014520:	d2e8      	bcs.n	80144f4 <quorem+0xb0>
 8014522:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014526:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801452a:	b92a      	cbnz	r2, 8014538 <quorem+0xf4>
 801452c:	3b04      	subs	r3, #4
 801452e:	429e      	cmp	r6, r3
 8014530:	461a      	mov	r2, r3
 8014532:	d30b      	bcc.n	801454c <quorem+0x108>
 8014534:	f8c8 4010 	str.w	r4, [r8, #16]
 8014538:	4628      	mov	r0, r5
 801453a:	b003      	add	sp, #12
 801453c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014540:	6812      	ldr	r2, [r2, #0]
 8014542:	3b04      	subs	r3, #4
 8014544:	2a00      	cmp	r2, #0
 8014546:	d1ca      	bne.n	80144de <quorem+0x9a>
 8014548:	3c01      	subs	r4, #1
 801454a:	e7c5      	b.n	80144d8 <quorem+0x94>
 801454c:	6812      	ldr	r2, [r2, #0]
 801454e:	3b04      	subs	r3, #4
 8014550:	2a00      	cmp	r2, #0
 8014552:	d1ef      	bne.n	8014534 <quorem+0xf0>
 8014554:	3c01      	subs	r4, #1
 8014556:	e7ea      	b.n	801452e <quorem+0xea>
 8014558:	2000      	movs	r0, #0
 801455a:	e7ee      	b.n	801453a <quorem+0xf6>
 801455c:	0000      	movs	r0, r0
	...

08014560 <_dtoa_r>:
 8014560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014564:	ec57 6b10 	vmov	r6, r7, d0
 8014568:	b097      	sub	sp, #92	; 0x5c
 801456a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801456c:	9106      	str	r1, [sp, #24]
 801456e:	4604      	mov	r4, r0
 8014570:	920b      	str	r2, [sp, #44]	; 0x2c
 8014572:	9312      	str	r3, [sp, #72]	; 0x48
 8014574:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014578:	e9cd 6700 	strd	r6, r7, [sp]
 801457c:	b93d      	cbnz	r5, 801458e <_dtoa_r+0x2e>
 801457e:	2010      	movs	r0, #16
 8014580:	f000 fe7e 	bl	8015280 <malloc>
 8014584:	6260      	str	r0, [r4, #36]	; 0x24
 8014586:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801458a:	6005      	str	r5, [r0, #0]
 801458c:	60c5      	str	r5, [r0, #12]
 801458e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014590:	6819      	ldr	r1, [r3, #0]
 8014592:	b151      	cbz	r1, 80145aa <_dtoa_r+0x4a>
 8014594:	685a      	ldr	r2, [r3, #4]
 8014596:	604a      	str	r2, [r1, #4]
 8014598:	2301      	movs	r3, #1
 801459a:	4093      	lsls	r3, r2
 801459c:	608b      	str	r3, [r1, #8]
 801459e:	4620      	mov	r0, r4
 80145a0:	f000 feaa 	bl	80152f8 <_Bfree>
 80145a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145a6:	2200      	movs	r2, #0
 80145a8:	601a      	str	r2, [r3, #0]
 80145aa:	1e3b      	subs	r3, r7, #0
 80145ac:	bfbb      	ittet	lt
 80145ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80145b2:	9301      	strlt	r3, [sp, #4]
 80145b4:	2300      	movge	r3, #0
 80145b6:	2201      	movlt	r2, #1
 80145b8:	bfac      	ite	ge
 80145ba:	f8c8 3000 	strge.w	r3, [r8]
 80145be:	f8c8 2000 	strlt.w	r2, [r8]
 80145c2:	4baf      	ldr	r3, [pc, #700]	; (8014880 <_dtoa_r+0x320>)
 80145c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80145c8:	ea33 0308 	bics.w	r3, r3, r8
 80145cc:	d114      	bne.n	80145f8 <_dtoa_r+0x98>
 80145ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80145d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80145d4:	6013      	str	r3, [r2, #0]
 80145d6:	9b00      	ldr	r3, [sp, #0]
 80145d8:	b923      	cbnz	r3, 80145e4 <_dtoa_r+0x84>
 80145da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80145de:	2800      	cmp	r0, #0
 80145e0:	f000 8542 	beq.w	8015068 <_dtoa_r+0xb08>
 80145e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014894 <_dtoa_r+0x334>
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	f000 8544 	beq.w	8015078 <_dtoa_r+0xb18>
 80145f0:	f10b 0303 	add.w	r3, fp, #3
 80145f4:	f000 bd3e 	b.w	8015074 <_dtoa_r+0xb14>
 80145f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80145fc:	2200      	movs	r2, #0
 80145fe:	2300      	movs	r3, #0
 8014600:	4630      	mov	r0, r6
 8014602:	4639      	mov	r1, r7
 8014604:	f7ec fa68 	bl	8000ad8 <__aeabi_dcmpeq>
 8014608:	4681      	mov	r9, r0
 801460a:	b168      	cbz	r0, 8014628 <_dtoa_r+0xc8>
 801460c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801460e:	2301      	movs	r3, #1
 8014610:	6013      	str	r3, [r2, #0]
 8014612:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014614:	2b00      	cmp	r3, #0
 8014616:	f000 8524 	beq.w	8015062 <_dtoa_r+0xb02>
 801461a:	4b9a      	ldr	r3, [pc, #616]	; (8014884 <_dtoa_r+0x324>)
 801461c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801461e:	f103 3bff 	add.w	fp, r3, #4294967295
 8014622:	6013      	str	r3, [r2, #0]
 8014624:	f000 bd28 	b.w	8015078 <_dtoa_r+0xb18>
 8014628:	aa14      	add	r2, sp, #80	; 0x50
 801462a:	a915      	add	r1, sp, #84	; 0x54
 801462c:	ec47 6b10 	vmov	d0, r6, r7
 8014630:	4620      	mov	r0, r4
 8014632:	f001 f8ba 	bl	80157aa <__d2b>
 8014636:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801463a:	9004      	str	r0, [sp, #16]
 801463c:	2d00      	cmp	r5, #0
 801463e:	d07c      	beq.n	801473a <_dtoa_r+0x1da>
 8014640:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014644:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014648:	46b2      	mov	sl, r6
 801464a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801464e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014652:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014656:	2200      	movs	r2, #0
 8014658:	4b8b      	ldr	r3, [pc, #556]	; (8014888 <_dtoa_r+0x328>)
 801465a:	4650      	mov	r0, sl
 801465c:	4659      	mov	r1, fp
 801465e:	f7eb fe1b 	bl	8000298 <__aeabi_dsub>
 8014662:	a381      	add	r3, pc, #516	; (adr r3, 8014868 <_dtoa_r+0x308>)
 8014664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014668:	f7eb ffce 	bl	8000608 <__aeabi_dmul>
 801466c:	a380      	add	r3, pc, #512	; (adr r3, 8014870 <_dtoa_r+0x310>)
 801466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014672:	f7eb fe13 	bl	800029c <__adddf3>
 8014676:	4606      	mov	r6, r0
 8014678:	4628      	mov	r0, r5
 801467a:	460f      	mov	r7, r1
 801467c:	f7eb ff5a 	bl	8000534 <__aeabi_i2d>
 8014680:	a37d      	add	r3, pc, #500	; (adr r3, 8014878 <_dtoa_r+0x318>)
 8014682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014686:	f7eb ffbf 	bl	8000608 <__aeabi_dmul>
 801468a:	4602      	mov	r2, r0
 801468c:	460b      	mov	r3, r1
 801468e:	4630      	mov	r0, r6
 8014690:	4639      	mov	r1, r7
 8014692:	f7eb fe03 	bl	800029c <__adddf3>
 8014696:	4606      	mov	r6, r0
 8014698:	460f      	mov	r7, r1
 801469a:	f7ec fa65 	bl	8000b68 <__aeabi_d2iz>
 801469e:	2200      	movs	r2, #0
 80146a0:	4682      	mov	sl, r0
 80146a2:	2300      	movs	r3, #0
 80146a4:	4630      	mov	r0, r6
 80146a6:	4639      	mov	r1, r7
 80146a8:	f7ec fa20 	bl	8000aec <__aeabi_dcmplt>
 80146ac:	b148      	cbz	r0, 80146c2 <_dtoa_r+0x162>
 80146ae:	4650      	mov	r0, sl
 80146b0:	f7eb ff40 	bl	8000534 <__aeabi_i2d>
 80146b4:	4632      	mov	r2, r6
 80146b6:	463b      	mov	r3, r7
 80146b8:	f7ec fa0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80146bc:	b908      	cbnz	r0, 80146c2 <_dtoa_r+0x162>
 80146be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80146c2:	f1ba 0f16 	cmp.w	sl, #22
 80146c6:	d859      	bhi.n	801477c <_dtoa_r+0x21c>
 80146c8:	4970      	ldr	r1, [pc, #448]	; (801488c <_dtoa_r+0x32c>)
 80146ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80146ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80146d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80146d6:	f7ec fa27 	bl	8000b28 <__aeabi_dcmpgt>
 80146da:	2800      	cmp	r0, #0
 80146dc:	d050      	beq.n	8014780 <_dtoa_r+0x220>
 80146de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80146e2:	2300      	movs	r3, #0
 80146e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80146e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80146e8:	1b5d      	subs	r5, r3, r5
 80146ea:	f1b5 0801 	subs.w	r8, r5, #1
 80146ee:	bf49      	itett	mi
 80146f0:	f1c5 0301 	rsbmi	r3, r5, #1
 80146f4:	2300      	movpl	r3, #0
 80146f6:	9305      	strmi	r3, [sp, #20]
 80146f8:	f04f 0800 	movmi.w	r8, #0
 80146fc:	bf58      	it	pl
 80146fe:	9305      	strpl	r3, [sp, #20]
 8014700:	f1ba 0f00 	cmp.w	sl, #0
 8014704:	db3e      	blt.n	8014784 <_dtoa_r+0x224>
 8014706:	2300      	movs	r3, #0
 8014708:	44d0      	add	r8, sl
 801470a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801470e:	9307      	str	r3, [sp, #28]
 8014710:	9b06      	ldr	r3, [sp, #24]
 8014712:	2b09      	cmp	r3, #9
 8014714:	f200 8090 	bhi.w	8014838 <_dtoa_r+0x2d8>
 8014718:	2b05      	cmp	r3, #5
 801471a:	bfc4      	itt	gt
 801471c:	3b04      	subgt	r3, #4
 801471e:	9306      	strgt	r3, [sp, #24]
 8014720:	9b06      	ldr	r3, [sp, #24]
 8014722:	f1a3 0302 	sub.w	r3, r3, #2
 8014726:	bfcc      	ite	gt
 8014728:	2500      	movgt	r5, #0
 801472a:	2501      	movle	r5, #1
 801472c:	2b03      	cmp	r3, #3
 801472e:	f200 808f 	bhi.w	8014850 <_dtoa_r+0x2f0>
 8014732:	e8df f003 	tbb	[pc, r3]
 8014736:	7f7d      	.short	0x7f7d
 8014738:	7131      	.short	0x7131
 801473a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801473e:	441d      	add	r5, r3
 8014740:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014744:	2820      	cmp	r0, #32
 8014746:	dd13      	ble.n	8014770 <_dtoa_r+0x210>
 8014748:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801474c:	9b00      	ldr	r3, [sp, #0]
 801474e:	fa08 f800 	lsl.w	r8, r8, r0
 8014752:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014756:	fa23 f000 	lsr.w	r0, r3, r0
 801475a:	ea48 0000 	orr.w	r0, r8, r0
 801475e:	f7eb fed9 	bl	8000514 <__aeabi_ui2d>
 8014762:	2301      	movs	r3, #1
 8014764:	4682      	mov	sl, r0
 8014766:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801476a:	3d01      	subs	r5, #1
 801476c:	9313      	str	r3, [sp, #76]	; 0x4c
 801476e:	e772      	b.n	8014656 <_dtoa_r+0xf6>
 8014770:	9b00      	ldr	r3, [sp, #0]
 8014772:	f1c0 0020 	rsb	r0, r0, #32
 8014776:	fa03 f000 	lsl.w	r0, r3, r0
 801477a:	e7f0      	b.n	801475e <_dtoa_r+0x1fe>
 801477c:	2301      	movs	r3, #1
 801477e:	e7b1      	b.n	80146e4 <_dtoa_r+0x184>
 8014780:	900f      	str	r0, [sp, #60]	; 0x3c
 8014782:	e7b0      	b.n	80146e6 <_dtoa_r+0x186>
 8014784:	9b05      	ldr	r3, [sp, #20]
 8014786:	eba3 030a 	sub.w	r3, r3, sl
 801478a:	9305      	str	r3, [sp, #20]
 801478c:	f1ca 0300 	rsb	r3, sl, #0
 8014790:	9307      	str	r3, [sp, #28]
 8014792:	2300      	movs	r3, #0
 8014794:	930e      	str	r3, [sp, #56]	; 0x38
 8014796:	e7bb      	b.n	8014710 <_dtoa_r+0x1b0>
 8014798:	2301      	movs	r3, #1
 801479a:	930a      	str	r3, [sp, #40]	; 0x28
 801479c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801479e:	2b00      	cmp	r3, #0
 80147a0:	dd59      	ble.n	8014856 <_dtoa_r+0x2f6>
 80147a2:	9302      	str	r3, [sp, #8]
 80147a4:	4699      	mov	r9, r3
 80147a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80147a8:	2200      	movs	r2, #0
 80147aa:	6072      	str	r2, [r6, #4]
 80147ac:	2204      	movs	r2, #4
 80147ae:	f102 0014 	add.w	r0, r2, #20
 80147b2:	4298      	cmp	r0, r3
 80147b4:	6871      	ldr	r1, [r6, #4]
 80147b6:	d953      	bls.n	8014860 <_dtoa_r+0x300>
 80147b8:	4620      	mov	r0, r4
 80147ba:	f000 fd69 	bl	8015290 <_Balloc>
 80147be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80147c0:	6030      	str	r0, [r6, #0]
 80147c2:	f1b9 0f0e 	cmp.w	r9, #14
 80147c6:	f8d3 b000 	ldr.w	fp, [r3]
 80147ca:	f200 80e6 	bhi.w	801499a <_dtoa_r+0x43a>
 80147ce:	2d00      	cmp	r5, #0
 80147d0:	f000 80e3 	beq.w	801499a <_dtoa_r+0x43a>
 80147d4:	ed9d 7b00 	vldr	d7, [sp]
 80147d8:	f1ba 0f00 	cmp.w	sl, #0
 80147dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80147e0:	dd74      	ble.n	80148cc <_dtoa_r+0x36c>
 80147e2:	4a2a      	ldr	r2, [pc, #168]	; (801488c <_dtoa_r+0x32c>)
 80147e4:	f00a 030f 	and.w	r3, sl, #15
 80147e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80147ec:	ed93 7b00 	vldr	d7, [r3]
 80147f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80147f4:	06f0      	lsls	r0, r6, #27
 80147f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80147fa:	d565      	bpl.n	80148c8 <_dtoa_r+0x368>
 80147fc:	4b24      	ldr	r3, [pc, #144]	; (8014890 <_dtoa_r+0x330>)
 80147fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014802:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014806:	f7ec f829 	bl	800085c <__aeabi_ddiv>
 801480a:	e9cd 0100 	strd	r0, r1, [sp]
 801480e:	f006 060f 	and.w	r6, r6, #15
 8014812:	2503      	movs	r5, #3
 8014814:	4f1e      	ldr	r7, [pc, #120]	; (8014890 <_dtoa_r+0x330>)
 8014816:	e04c      	b.n	80148b2 <_dtoa_r+0x352>
 8014818:	2301      	movs	r3, #1
 801481a:	930a      	str	r3, [sp, #40]	; 0x28
 801481c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801481e:	4453      	add	r3, sl
 8014820:	f103 0901 	add.w	r9, r3, #1
 8014824:	9302      	str	r3, [sp, #8]
 8014826:	464b      	mov	r3, r9
 8014828:	2b01      	cmp	r3, #1
 801482a:	bfb8      	it	lt
 801482c:	2301      	movlt	r3, #1
 801482e:	e7ba      	b.n	80147a6 <_dtoa_r+0x246>
 8014830:	2300      	movs	r3, #0
 8014832:	e7b2      	b.n	801479a <_dtoa_r+0x23a>
 8014834:	2300      	movs	r3, #0
 8014836:	e7f0      	b.n	801481a <_dtoa_r+0x2ba>
 8014838:	2501      	movs	r5, #1
 801483a:	2300      	movs	r3, #0
 801483c:	9306      	str	r3, [sp, #24]
 801483e:	950a      	str	r5, [sp, #40]	; 0x28
 8014840:	f04f 33ff 	mov.w	r3, #4294967295
 8014844:	9302      	str	r3, [sp, #8]
 8014846:	4699      	mov	r9, r3
 8014848:	2200      	movs	r2, #0
 801484a:	2312      	movs	r3, #18
 801484c:	920b      	str	r2, [sp, #44]	; 0x2c
 801484e:	e7aa      	b.n	80147a6 <_dtoa_r+0x246>
 8014850:	2301      	movs	r3, #1
 8014852:	930a      	str	r3, [sp, #40]	; 0x28
 8014854:	e7f4      	b.n	8014840 <_dtoa_r+0x2e0>
 8014856:	2301      	movs	r3, #1
 8014858:	9302      	str	r3, [sp, #8]
 801485a:	4699      	mov	r9, r3
 801485c:	461a      	mov	r2, r3
 801485e:	e7f5      	b.n	801484c <_dtoa_r+0x2ec>
 8014860:	3101      	adds	r1, #1
 8014862:	6071      	str	r1, [r6, #4]
 8014864:	0052      	lsls	r2, r2, #1
 8014866:	e7a2      	b.n	80147ae <_dtoa_r+0x24e>
 8014868:	636f4361 	.word	0x636f4361
 801486c:	3fd287a7 	.word	0x3fd287a7
 8014870:	8b60c8b3 	.word	0x8b60c8b3
 8014874:	3fc68a28 	.word	0x3fc68a28
 8014878:	509f79fb 	.word	0x509f79fb
 801487c:	3fd34413 	.word	0x3fd34413
 8014880:	7ff00000 	.word	0x7ff00000
 8014884:	080182e9 	.word	0x080182e9
 8014888:	3ff80000 	.word	0x3ff80000
 801488c:	080183a8 	.word	0x080183a8
 8014890:	08018380 	.word	0x08018380
 8014894:	08018315 	.word	0x08018315
 8014898:	07f1      	lsls	r1, r6, #31
 801489a:	d508      	bpl.n	80148ae <_dtoa_r+0x34e>
 801489c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80148a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80148a4:	f7eb feb0 	bl	8000608 <__aeabi_dmul>
 80148a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80148ac:	3501      	adds	r5, #1
 80148ae:	1076      	asrs	r6, r6, #1
 80148b0:	3708      	adds	r7, #8
 80148b2:	2e00      	cmp	r6, #0
 80148b4:	d1f0      	bne.n	8014898 <_dtoa_r+0x338>
 80148b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80148ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148be:	f7eb ffcd 	bl	800085c <__aeabi_ddiv>
 80148c2:	e9cd 0100 	strd	r0, r1, [sp]
 80148c6:	e01a      	b.n	80148fe <_dtoa_r+0x39e>
 80148c8:	2502      	movs	r5, #2
 80148ca:	e7a3      	b.n	8014814 <_dtoa_r+0x2b4>
 80148cc:	f000 80a0 	beq.w	8014a10 <_dtoa_r+0x4b0>
 80148d0:	f1ca 0600 	rsb	r6, sl, #0
 80148d4:	4b9f      	ldr	r3, [pc, #636]	; (8014b54 <_dtoa_r+0x5f4>)
 80148d6:	4fa0      	ldr	r7, [pc, #640]	; (8014b58 <_dtoa_r+0x5f8>)
 80148d8:	f006 020f 	and.w	r2, r6, #15
 80148dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80148e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80148e8:	f7eb fe8e 	bl	8000608 <__aeabi_dmul>
 80148ec:	e9cd 0100 	strd	r0, r1, [sp]
 80148f0:	1136      	asrs	r6, r6, #4
 80148f2:	2300      	movs	r3, #0
 80148f4:	2502      	movs	r5, #2
 80148f6:	2e00      	cmp	r6, #0
 80148f8:	d17f      	bne.n	80149fa <_dtoa_r+0x49a>
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d1e1      	bne.n	80148c2 <_dtoa_r+0x362>
 80148fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014900:	2b00      	cmp	r3, #0
 8014902:	f000 8087 	beq.w	8014a14 <_dtoa_r+0x4b4>
 8014906:	e9dd 6700 	ldrd	r6, r7, [sp]
 801490a:	2200      	movs	r2, #0
 801490c:	4b93      	ldr	r3, [pc, #588]	; (8014b5c <_dtoa_r+0x5fc>)
 801490e:	4630      	mov	r0, r6
 8014910:	4639      	mov	r1, r7
 8014912:	f7ec f8eb 	bl	8000aec <__aeabi_dcmplt>
 8014916:	2800      	cmp	r0, #0
 8014918:	d07c      	beq.n	8014a14 <_dtoa_r+0x4b4>
 801491a:	f1b9 0f00 	cmp.w	r9, #0
 801491e:	d079      	beq.n	8014a14 <_dtoa_r+0x4b4>
 8014920:	9b02      	ldr	r3, [sp, #8]
 8014922:	2b00      	cmp	r3, #0
 8014924:	dd35      	ble.n	8014992 <_dtoa_r+0x432>
 8014926:	f10a 33ff 	add.w	r3, sl, #4294967295
 801492a:	9308      	str	r3, [sp, #32]
 801492c:	4639      	mov	r1, r7
 801492e:	2200      	movs	r2, #0
 8014930:	4b8b      	ldr	r3, [pc, #556]	; (8014b60 <_dtoa_r+0x600>)
 8014932:	4630      	mov	r0, r6
 8014934:	f7eb fe68 	bl	8000608 <__aeabi_dmul>
 8014938:	e9cd 0100 	strd	r0, r1, [sp]
 801493c:	9f02      	ldr	r7, [sp, #8]
 801493e:	3501      	adds	r5, #1
 8014940:	4628      	mov	r0, r5
 8014942:	f7eb fdf7 	bl	8000534 <__aeabi_i2d>
 8014946:	e9dd 2300 	ldrd	r2, r3, [sp]
 801494a:	f7eb fe5d 	bl	8000608 <__aeabi_dmul>
 801494e:	2200      	movs	r2, #0
 8014950:	4b84      	ldr	r3, [pc, #528]	; (8014b64 <_dtoa_r+0x604>)
 8014952:	f7eb fca3 	bl	800029c <__adddf3>
 8014956:	4605      	mov	r5, r0
 8014958:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801495c:	2f00      	cmp	r7, #0
 801495e:	d15d      	bne.n	8014a1c <_dtoa_r+0x4bc>
 8014960:	2200      	movs	r2, #0
 8014962:	4b81      	ldr	r3, [pc, #516]	; (8014b68 <_dtoa_r+0x608>)
 8014964:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014968:	f7eb fc96 	bl	8000298 <__aeabi_dsub>
 801496c:	462a      	mov	r2, r5
 801496e:	4633      	mov	r3, r6
 8014970:	e9cd 0100 	strd	r0, r1, [sp]
 8014974:	f7ec f8d8 	bl	8000b28 <__aeabi_dcmpgt>
 8014978:	2800      	cmp	r0, #0
 801497a:	f040 8288 	bne.w	8014e8e <_dtoa_r+0x92e>
 801497e:	462a      	mov	r2, r5
 8014980:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014984:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014988:	f7ec f8b0 	bl	8000aec <__aeabi_dcmplt>
 801498c:	2800      	cmp	r0, #0
 801498e:	f040 827c 	bne.w	8014e8a <_dtoa_r+0x92a>
 8014992:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014996:	e9cd 2300 	strd	r2, r3, [sp]
 801499a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801499c:	2b00      	cmp	r3, #0
 801499e:	f2c0 8150 	blt.w	8014c42 <_dtoa_r+0x6e2>
 80149a2:	f1ba 0f0e 	cmp.w	sl, #14
 80149a6:	f300 814c 	bgt.w	8014c42 <_dtoa_r+0x6e2>
 80149aa:	4b6a      	ldr	r3, [pc, #424]	; (8014b54 <_dtoa_r+0x5f4>)
 80149ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80149b0:	ed93 7b00 	vldr	d7, [r3]
 80149b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80149bc:	f280 80d8 	bge.w	8014b70 <_dtoa_r+0x610>
 80149c0:	f1b9 0f00 	cmp.w	r9, #0
 80149c4:	f300 80d4 	bgt.w	8014b70 <_dtoa_r+0x610>
 80149c8:	f040 825e 	bne.w	8014e88 <_dtoa_r+0x928>
 80149cc:	2200      	movs	r2, #0
 80149ce:	4b66      	ldr	r3, [pc, #408]	; (8014b68 <_dtoa_r+0x608>)
 80149d0:	ec51 0b17 	vmov	r0, r1, d7
 80149d4:	f7eb fe18 	bl	8000608 <__aeabi_dmul>
 80149d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80149dc:	f7ec f89a 	bl	8000b14 <__aeabi_dcmpge>
 80149e0:	464f      	mov	r7, r9
 80149e2:	464e      	mov	r6, r9
 80149e4:	2800      	cmp	r0, #0
 80149e6:	f040 8234 	bne.w	8014e52 <_dtoa_r+0x8f2>
 80149ea:	2331      	movs	r3, #49	; 0x31
 80149ec:	f10b 0501 	add.w	r5, fp, #1
 80149f0:	f88b 3000 	strb.w	r3, [fp]
 80149f4:	f10a 0a01 	add.w	sl, sl, #1
 80149f8:	e22f      	b.n	8014e5a <_dtoa_r+0x8fa>
 80149fa:	07f2      	lsls	r2, r6, #31
 80149fc:	d505      	bpl.n	8014a0a <_dtoa_r+0x4aa>
 80149fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014a02:	f7eb fe01 	bl	8000608 <__aeabi_dmul>
 8014a06:	3501      	adds	r5, #1
 8014a08:	2301      	movs	r3, #1
 8014a0a:	1076      	asrs	r6, r6, #1
 8014a0c:	3708      	adds	r7, #8
 8014a0e:	e772      	b.n	80148f6 <_dtoa_r+0x396>
 8014a10:	2502      	movs	r5, #2
 8014a12:	e774      	b.n	80148fe <_dtoa_r+0x39e>
 8014a14:	f8cd a020 	str.w	sl, [sp, #32]
 8014a18:	464f      	mov	r7, r9
 8014a1a:	e791      	b.n	8014940 <_dtoa_r+0x3e0>
 8014a1c:	4b4d      	ldr	r3, [pc, #308]	; (8014b54 <_dtoa_r+0x5f4>)
 8014a1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014a22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d047      	beq.n	8014abc <_dtoa_r+0x55c>
 8014a2c:	4602      	mov	r2, r0
 8014a2e:	460b      	mov	r3, r1
 8014a30:	2000      	movs	r0, #0
 8014a32:	494e      	ldr	r1, [pc, #312]	; (8014b6c <_dtoa_r+0x60c>)
 8014a34:	f7eb ff12 	bl	800085c <__aeabi_ddiv>
 8014a38:	462a      	mov	r2, r5
 8014a3a:	4633      	mov	r3, r6
 8014a3c:	f7eb fc2c 	bl	8000298 <__aeabi_dsub>
 8014a40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014a44:	465d      	mov	r5, fp
 8014a46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a4a:	f7ec f88d 	bl	8000b68 <__aeabi_d2iz>
 8014a4e:	4606      	mov	r6, r0
 8014a50:	f7eb fd70 	bl	8000534 <__aeabi_i2d>
 8014a54:	4602      	mov	r2, r0
 8014a56:	460b      	mov	r3, r1
 8014a58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a5c:	f7eb fc1c 	bl	8000298 <__aeabi_dsub>
 8014a60:	3630      	adds	r6, #48	; 0x30
 8014a62:	f805 6b01 	strb.w	r6, [r5], #1
 8014a66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014a6a:	e9cd 0100 	strd	r0, r1, [sp]
 8014a6e:	f7ec f83d 	bl	8000aec <__aeabi_dcmplt>
 8014a72:	2800      	cmp	r0, #0
 8014a74:	d163      	bne.n	8014b3e <_dtoa_r+0x5de>
 8014a76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014a7a:	2000      	movs	r0, #0
 8014a7c:	4937      	ldr	r1, [pc, #220]	; (8014b5c <_dtoa_r+0x5fc>)
 8014a7e:	f7eb fc0b 	bl	8000298 <__aeabi_dsub>
 8014a82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014a86:	f7ec f831 	bl	8000aec <__aeabi_dcmplt>
 8014a8a:	2800      	cmp	r0, #0
 8014a8c:	f040 80b7 	bne.w	8014bfe <_dtoa_r+0x69e>
 8014a90:	eba5 030b 	sub.w	r3, r5, fp
 8014a94:	429f      	cmp	r7, r3
 8014a96:	f77f af7c 	ble.w	8014992 <_dtoa_r+0x432>
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	4b30      	ldr	r3, [pc, #192]	; (8014b60 <_dtoa_r+0x600>)
 8014a9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014aa2:	f7eb fdb1 	bl	8000608 <__aeabi_dmul>
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014aac:	4b2c      	ldr	r3, [pc, #176]	; (8014b60 <_dtoa_r+0x600>)
 8014aae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ab2:	f7eb fda9 	bl	8000608 <__aeabi_dmul>
 8014ab6:	e9cd 0100 	strd	r0, r1, [sp]
 8014aba:	e7c4      	b.n	8014a46 <_dtoa_r+0x4e6>
 8014abc:	462a      	mov	r2, r5
 8014abe:	4633      	mov	r3, r6
 8014ac0:	f7eb fda2 	bl	8000608 <__aeabi_dmul>
 8014ac4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014ac8:	eb0b 0507 	add.w	r5, fp, r7
 8014acc:	465e      	mov	r6, fp
 8014ace:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ad2:	f7ec f849 	bl	8000b68 <__aeabi_d2iz>
 8014ad6:	4607      	mov	r7, r0
 8014ad8:	f7eb fd2c 	bl	8000534 <__aeabi_i2d>
 8014adc:	3730      	adds	r7, #48	; 0x30
 8014ade:	4602      	mov	r2, r0
 8014ae0:	460b      	mov	r3, r1
 8014ae2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ae6:	f7eb fbd7 	bl	8000298 <__aeabi_dsub>
 8014aea:	f806 7b01 	strb.w	r7, [r6], #1
 8014aee:	42ae      	cmp	r6, r5
 8014af0:	e9cd 0100 	strd	r0, r1, [sp]
 8014af4:	f04f 0200 	mov.w	r2, #0
 8014af8:	d126      	bne.n	8014b48 <_dtoa_r+0x5e8>
 8014afa:	4b1c      	ldr	r3, [pc, #112]	; (8014b6c <_dtoa_r+0x60c>)
 8014afc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014b00:	f7eb fbcc 	bl	800029c <__adddf3>
 8014b04:	4602      	mov	r2, r0
 8014b06:	460b      	mov	r3, r1
 8014b08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b0c:	f7ec f80c 	bl	8000b28 <__aeabi_dcmpgt>
 8014b10:	2800      	cmp	r0, #0
 8014b12:	d174      	bne.n	8014bfe <_dtoa_r+0x69e>
 8014b14:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014b18:	2000      	movs	r0, #0
 8014b1a:	4914      	ldr	r1, [pc, #80]	; (8014b6c <_dtoa_r+0x60c>)
 8014b1c:	f7eb fbbc 	bl	8000298 <__aeabi_dsub>
 8014b20:	4602      	mov	r2, r0
 8014b22:	460b      	mov	r3, r1
 8014b24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b28:	f7eb ffe0 	bl	8000aec <__aeabi_dcmplt>
 8014b2c:	2800      	cmp	r0, #0
 8014b2e:	f43f af30 	beq.w	8014992 <_dtoa_r+0x432>
 8014b32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014b36:	2b30      	cmp	r3, #48	; 0x30
 8014b38:	f105 32ff 	add.w	r2, r5, #4294967295
 8014b3c:	d002      	beq.n	8014b44 <_dtoa_r+0x5e4>
 8014b3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014b42:	e04a      	b.n	8014bda <_dtoa_r+0x67a>
 8014b44:	4615      	mov	r5, r2
 8014b46:	e7f4      	b.n	8014b32 <_dtoa_r+0x5d2>
 8014b48:	4b05      	ldr	r3, [pc, #20]	; (8014b60 <_dtoa_r+0x600>)
 8014b4a:	f7eb fd5d 	bl	8000608 <__aeabi_dmul>
 8014b4e:	e9cd 0100 	strd	r0, r1, [sp]
 8014b52:	e7bc      	b.n	8014ace <_dtoa_r+0x56e>
 8014b54:	080183a8 	.word	0x080183a8
 8014b58:	08018380 	.word	0x08018380
 8014b5c:	3ff00000 	.word	0x3ff00000
 8014b60:	40240000 	.word	0x40240000
 8014b64:	401c0000 	.word	0x401c0000
 8014b68:	40140000 	.word	0x40140000
 8014b6c:	3fe00000 	.word	0x3fe00000
 8014b70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014b74:	465d      	mov	r5, fp
 8014b76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014b7a:	4630      	mov	r0, r6
 8014b7c:	4639      	mov	r1, r7
 8014b7e:	f7eb fe6d 	bl	800085c <__aeabi_ddiv>
 8014b82:	f7eb fff1 	bl	8000b68 <__aeabi_d2iz>
 8014b86:	4680      	mov	r8, r0
 8014b88:	f7eb fcd4 	bl	8000534 <__aeabi_i2d>
 8014b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014b90:	f7eb fd3a 	bl	8000608 <__aeabi_dmul>
 8014b94:	4602      	mov	r2, r0
 8014b96:	460b      	mov	r3, r1
 8014b98:	4630      	mov	r0, r6
 8014b9a:	4639      	mov	r1, r7
 8014b9c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014ba0:	f7eb fb7a 	bl	8000298 <__aeabi_dsub>
 8014ba4:	f805 6b01 	strb.w	r6, [r5], #1
 8014ba8:	eba5 060b 	sub.w	r6, r5, fp
 8014bac:	45b1      	cmp	r9, r6
 8014bae:	4602      	mov	r2, r0
 8014bb0:	460b      	mov	r3, r1
 8014bb2:	d139      	bne.n	8014c28 <_dtoa_r+0x6c8>
 8014bb4:	f7eb fb72 	bl	800029c <__adddf3>
 8014bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014bbc:	4606      	mov	r6, r0
 8014bbe:	460f      	mov	r7, r1
 8014bc0:	f7eb ffb2 	bl	8000b28 <__aeabi_dcmpgt>
 8014bc4:	b9c8      	cbnz	r0, 8014bfa <_dtoa_r+0x69a>
 8014bc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014bca:	4630      	mov	r0, r6
 8014bcc:	4639      	mov	r1, r7
 8014bce:	f7eb ff83 	bl	8000ad8 <__aeabi_dcmpeq>
 8014bd2:	b110      	cbz	r0, 8014bda <_dtoa_r+0x67a>
 8014bd4:	f018 0f01 	tst.w	r8, #1
 8014bd8:	d10f      	bne.n	8014bfa <_dtoa_r+0x69a>
 8014bda:	9904      	ldr	r1, [sp, #16]
 8014bdc:	4620      	mov	r0, r4
 8014bde:	f000 fb8b 	bl	80152f8 <_Bfree>
 8014be2:	2300      	movs	r3, #0
 8014be4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014be6:	702b      	strb	r3, [r5, #0]
 8014be8:	f10a 0301 	add.w	r3, sl, #1
 8014bec:	6013      	str	r3, [r2, #0]
 8014bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	f000 8241 	beq.w	8015078 <_dtoa_r+0xb18>
 8014bf6:	601d      	str	r5, [r3, #0]
 8014bf8:	e23e      	b.n	8015078 <_dtoa_r+0xb18>
 8014bfa:	f8cd a020 	str.w	sl, [sp, #32]
 8014bfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014c02:	2a39      	cmp	r2, #57	; 0x39
 8014c04:	f105 33ff 	add.w	r3, r5, #4294967295
 8014c08:	d108      	bne.n	8014c1c <_dtoa_r+0x6bc>
 8014c0a:	459b      	cmp	fp, r3
 8014c0c:	d10a      	bne.n	8014c24 <_dtoa_r+0x6c4>
 8014c0e:	9b08      	ldr	r3, [sp, #32]
 8014c10:	3301      	adds	r3, #1
 8014c12:	9308      	str	r3, [sp, #32]
 8014c14:	2330      	movs	r3, #48	; 0x30
 8014c16:	f88b 3000 	strb.w	r3, [fp]
 8014c1a:	465b      	mov	r3, fp
 8014c1c:	781a      	ldrb	r2, [r3, #0]
 8014c1e:	3201      	adds	r2, #1
 8014c20:	701a      	strb	r2, [r3, #0]
 8014c22:	e78c      	b.n	8014b3e <_dtoa_r+0x5de>
 8014c24:	461d      	mov	r5, r3
 8014c26:	e7ea      	b.n	8014bfe <_dtoa_r+0x69e>
 8014c28:	2200      	movs	r2, #0
 8014c2a:	4b9b      	ldr	r3, [pc, #620]	; (8014e98 <_dtoa_r+0x938>)
 8014c2c:	f7eb fcec 	bl	8000608 <__aeabi_dmul>
 8014c30:	2200      	movs	r2, #0
 8014c32:	2300      	movs	r3, #0
 8014c34:	4606      	mov	r6, r0
 8014c36:	460f      	mov	r7, r1
 8014c38:	f7eb ff4e 	bl	8000ad8 <__aeabi_dcmpeq>
 8014c3c:	2800      	cmp	r0, #0
 8014c3e:	d09a      	beq.n	8014b76 <_dtoa_r+0x616>
 8014c40:	e7cb      	b.n	8014bda <_dtoa_r+0x67a>
 8014c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c44:	2a00      	cmp	r2, #0
 8014c46:	f000 808b 	beq.w	8014d60 <_dtoa_r+0x800>
 8014c4a:	9a06      	ldr	r2, [sp, #24]
 8014c4c:	2a01      	cmp	r2, #1
 8014c4e:	dc6e      	bgt.n	8014d2e <_dtoa_r+0x7ce>
 8014c50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014c52:	2a00      	cmp	r2, #0
 8014c54:	d067      	beq.n	8014d26 <_dtoa_r+0x7c6>
 8014c56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014c5a:	9f07      	ldr	r7, [sp, #28]
 8014c5c:	9d05      	ldr	r5, [sp, #20]
 8014c5e:	9a05      	ldr	r2, [sp, #20]
 8014c60:	2101      	movs	r1, #1
 8014c62:	441a      	add	r2, r3
 8014c64:	4620      	mov	r0, r4
 8014c66:	9205      	str	r2, [sp, #20]
 8014c68:	4498      	add	r8, r3
 8014c6a:	f000 fbe5 	bl	8015438 <__i2b>
 8014c6e:	4606      	mov	r6, r0
 8014c70:	2d00      	cmp	r5, #0
 8014c72:	dd0c      	ble.n	8014c8e <_dtoa_r+0x72e>
 8014c74:	f1b8 0f00 	cmp.w	r8, #0
 8014c78:	dd09      	ble.n	8014c8e <_dtoa_r+0x72e>
 8014c7a:	4545      	cmp	r5, r8
 8014c7c:	9a05      	ldr	r2, [sp, #20]
 8014c7e:	462b      	mov	r3, r5
 8014c80:	bfa8      	it	ge
 8014c82:	4643      	movge	r3, r8
 8014c84:	1ad2      	subs	r2, r2, r3
 8014c86:	9205      	str	r2, [sp, #20]
 8014c88:	1aed      	subs	r5, r5, r3
 8014c8a:	eba8 0803 	sub.w	r8, r8, r3
 8014c8e:	9b07      	ldr	r3, [sp, #28]
 8014c90:	b1eb      	cbz	r3, 8014cce <_dtoa_r+0x76e>
 8014c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d067      	beq.n	8014d68 <_dtoa_r+0x808>
 8014c98:	b18f      	cbz	r7, 8014cbe <_dtoa_r+0x75e>
 8014c9a:	4631      	mov	r1, r6
 8014c9c:	463a      	mov	r2, r7
 8014c9e:	4620      	mov	r0, r4
 8014ca0:	f000 fc6a 	bl	8015578 <__pow5mult>
 8014ca4:	9a04      	ldr	r2, [sp, #16]
 8014ca6:	4601      	mov	r1, r0
 8014ca8:	4606      	mov	r6, r0
 8014caa:	4620      	mov	r0, r4
 8014cac:	f000 fbcd 	bl	801544a <__multiply>
 8014cb0:	9904      	ldr	r1, [sp, #16]
 8014cb2:	9008      	str	r0, [sp, #32]
 8014cb4:	4620      	mov	r0, r4
 8014cb6:	f000 fb1f 	bl	80152f8 <_Bfree>
 8014cba:	9b08      	ldr	r3, [sp, #32]
 8014cbc:	9304      	str	r3, [sp, #16]
 8014cbe:	9b07      	ldr	r3, [sp, #28]
 8014cc0:	1bda      	subs	r2, r3, r7
 8014cc2:	d004      	beq.n	8014cce <_dtoa_r+0x76e>
 8014cc4:	9904      	ldr	r1, [sp, #16]
 8014cc6:	4620      	mov	r0, r4
 8014cc8:	f000 fc56 	bl	8015578 <__pow5mult>
 8014ccc:	9004      	str	r0, [sp, #16]
 8014cce:	2101      	movs	r1, #1
 8014cd0:	4620      	mov	r0, r4
 8014cd2:	f000 fbb1 	bl	8015438 <__i2b>
 8014cd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014cd8:	4607      	mov	r7, r0
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	f000 81d0 	beq.w	8015080 <_dtoa_r+0xb20>
 8014ce0:	461a      	mov	r2, r3
 8014ce2:	4601      	mov	r1, r0
 8014ce4:	4620      	mov	r0, r4
 8014ce6:	f000 fc47 	bl	8015578 <__pow5mult>
 8014cea:	9b06      	ldr	r3, [sp, #24]
 8014cec:	2b01      	cmp	r3, #1
 8014cee:	4607      	mov	r7, r0
 8014cf0:	dc40      	bgt.n	8014d74 <_dtoa_r+0x814>
 8014cf2:	9b00      	ldr	r3, [sp, #0]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d139      	bne.n	8014d6c <_dtoa_r+0x80c>
 8014cf8:	9b01      	ldr	r3, [sp, #4]
 8014cfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d136      	bne.n	8014d70 <_dtoa_r+0x810>
 8014d02:	9b01      	ldr	r3, [sp, #4]
 8014d04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014d08:	0d1b      	lsrs	r3, r3, #20
 8014d0a:	051b      	lsls	r3, r3, #20
 8014d0c:	b12b      	cbz	r3, 8014d1a <_dtoa_r+0x7ba>
 8014d0e:	9b05      	ldr	r3, [sp, #20]
 8014d10:	3301      	adds	r3, #1
 8014d12:	9305      	str	r3, [sp, #20]
 8014d14:	f108 0801 	add.w	r8, r8, #1
 8014d18:	2301      	movs	r3, #1
 8014d1a:	9307      	str	r3, [sp, #28]
 8014d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d12a      	bne.n	8014d78 <_dtoa_r+0x818>
 8014d22:	2001      	movs	r0, #1
 8014d24:	e030      	b.n	8014d88 <_dtoa_r+0x828>
 8014d26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014d2c:	e795      	b.n	8014c5a <_dtoa_r+0x6fa>
 8014d2e:	9b07      	ldr	r3, [sp, #28]
 8014d30:	f109 37ff 	add.w	r7, r9, #4294967295
 8014d34:	42bb      	cmp	r3, r7
 8014d36:	bfbf      	itttt	lt
 8014d38:	9b07      	ldrlt	r3, [sp, #28]
 8014d3a:	9707      	strlt	r7, [sp, #28]
 8014d3c:	1afa      	sublt	r2, r7, r3
 8014d3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014d40:	bfbb      	ittet	lt
 8014d42:	189b      	addlt	r3, r3, r2
 8014d44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014d46:	1bdf      	subge	r7, r3, r7
 8014d48:	2700      	movlt	r7, #0
 8014d4a:	f1b9 0f00 	cmp.w	r9, #0
 8014d4e:	bfb5      	itete	lt
 8014d50:	9b05      	ldrlt	r3, [sp, #20]
 8014d52:	9d05      	ldrge	r5, [sp, #20]
 8014d54:	eba3 0509 	sublt.w	r5, r3, r9
 8014d58:	464b      	movge	r3, r9
 8014d5a:	bfb8      	it	lt
 8014d5c:	2300      	movlt	r3, #0
 8014d5e:	e77e      	b.n	8014c5e <_dtoa_r+0x6fe>
 8014d60:	9f07      	ldr	r7, [sp, #28]
 8014d62:	9d05      	ldr	r5, [sp, #20]
 8014d64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014d66:	e783      	b.n	8014c70 <_dtoa_r+0x710>
 8014d68:	9a07      	ldr	r2, [sp, #28]
 8014d6a:	e7ab      	b.n	8014cc4 <_dtoa_r+0x764>
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	e7d4      	b.n	8014d1a <_dtoa_r+0x7ba>
 8014d70:	9b00      	ldr	r3, [sp, #0]
 8014d72:	e7d2      	b.n	8014d1a <_dtoa_r+0x7ba>
 8014d74:	2300      	movs	r3, #0
 8014d76:	9307      	str	r3, [sp, #28]
 8014d78:	693b      	ldr	r3, [r7, #16]
 8014d7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014d7e:	6918      	ldr	r0, [r3, #16]
 8014d80:	f000 fb0c 	bl	801539c <__hi0bits>
 8014d84:	f1c0 0020 	rsb	r0, r0, #32
 8014d88:	4440      	add	r0, r8
 8014d8a:	f010 001f 	ands.w	r0, r0, #31
 8014d8e:	d047      	beq.n	8014e20 <_dtoa_r+0x8c0>
 8014d90:	f1c0 0320 	rsb	r3, r0, #32
 8014d94:	2b04      	cmp	r3, #4
 8014d96:	dd3b      	ble.n	8014e10 <_dtoa_r+0x8b0>
 8014d98:	9b05      	ldr	r3, [sp, #20]
 8014d9a:	f1c0 001c 	rsb	r0, r0, #28
 8014d9e:	4403      	add	r3, r0
 8014da0:	9305      	str	r3, [sp, #20]
 8014da2:	4405      	add	r5, r0
 8014da4:	4480      	add	r8, r0
 8014da6:	9b05      	ldr	r3, [sp, #20]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	dd05      	ble.n	8014db8 <_dtoa_r+0x858>
 8014dac:	461a      	mov	r2, r3
 8014dae:	9904      	ldr	r1, [sp, #16]
 8014db0:	4620      	mov	r0, r4
 8014db2:	f000 fc2f 	bl	8015614 <__lshift>
 8014db6:	9004      	str	r0, [sp, #16]
 8014db8:	f1b8 0f00 	cmp.w	r8, #0
 8014dbc:	dd05      	ble.n	8014dca <_dtoa_r+0x86a>
 8014dbe:	4639      	mov	r1, r7
 8014dc0:	4642      	mov	r2, r8
 8014dc2:	4620      	mov	r0, r4
 8014dc4:	f000 fc26 	bl	8015614 <__lshift>
 8014dc8:	4607      	mov	r7, r0
 8014dca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014dcc:	b353      	cbz	r3, 8014e24 <_dtoa_r+0x8c4>
 8014dce:	4639      	mov	r1, r7
 8014dd0:	9804      	ldr	r0, [sp, #16]
 8014dd2:	f000 fc73 	bl	80156bc <__mcmp>
 8014dd6:	2800      	cmp	r0, #0
 8014dd8:	da24      	bge.n	8014e24 <_dtoa_r+0x8c4>
 8014dda:	2300      	movs	r3, #0
 8014ddc:	220a      	movs	r2, #10
 8014dde:	9904      	ldr	r1, [sp, #16]
 8014de0:	4620      	mov	r0, r4
 8014de2:	f000 faa0 	bl	8015326 <__multadd>
 8014de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014de8:	9004      	str	r0, [sp, #16]
 8014dea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	f000 814d 	beq.w	801508e <_dtoa_r+0xb2e>
 8014df4:	2300      	movs	r3, #0
 8014df6:	4631      	mov	r1, r6
 8014df8:	220a      	movs	r2, #10
 8014dfa:	4620      	mov	r0, r4
 8014dfc:	f000 fa93 	bl	8015326 <__multadd>
 8014e00:	9b02      	ldr	r3, [sp, #8]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	4606      	mov	r6, r0
 8014e06:	dc4f      	bgt.n	8014ea8 <_dtoa_r+0x948>
 8014e08:	9b06      	ldr	r3, [sp, #24]
 8014e0a:	2b02      	cmp	r3, #2
 8014e0c:	dd4c      	ble.n	8014ea8 <_dtoa_r+0x948>
 8014e0e:	e011      	b.n	8014e34 <_dtoa_r+0x8d4>
 8014e10:	d0c9      	beq.n	8014da6 <_dtoa_r+0x846>
 8014e12:	9a05      	ldr	r2, [sp, #20]
 8014e14:	331c      	adds	r3, #28
 8014e16:	441a      	add	r2, r3
 8014e18:	9205      	str	r2, [sp, #20]
 8014e1a:	441d      	add	r5, r3
 8014e1c:	4498      	add	r8, r3
 8014e1e:	e7c2      	b.n	8014da6 <_dtoa_r+0x846>
 8014e20:	4603      	mov	r3, r0
 8014e22:	e7f6      	b.n	8014e12 <_dtoa_r+0x8b2>
 8014e24:	f1b9 0f00 	cmp.w	r9, #0
 8014e28:	dc38      	bgt.n	8014e9c <_dtoa_r+0x93c>
 8014e2a:	9b06      	ldr	r3, [sp, #24]
 8014e2c:	2b02      	cmp	r3, #2
 8014e2e:	dd35      	ble.n	8014e9c <_dtoa_r+0x93c>
 8014e30:	f8cd 9008 	str.w	r9, [sp, #8]
 8014e34:	9b02      	ldr	r3, [sp, #8]
 8014e36:	b963      	cbnz	r3, 8014e52 <_dtoa_r+0x8f2>
 8014e38:	4639      	mov	r1, r7
 8014e3a:	2205      	movs	r2, #5
 8014e3c:	4620      	mov	r0, r4
 8014e3e:	f000 fa72 	bl	8015326 <__multadd>
 8014e42:	4601      	mov	r1, r0
 8014e44:	4607      	mov	r7, r0
 8014e46:	9804      	ldr	r0, [sp, #16]
 8014e48:	f000 fc38 	bl	80156bc <__mcmp>
 8014e4c:	2800      	cmp	r0, #0
 8014e4e:	f73f adcc 	bgt.w	80149ea <_dtoa_r+0x48a>
 8014e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e54:	465d      	mov	r5, fp
 8014e56:	ea6f 0a03 	mvn.w	sl, r3
 8014e5a:	f04f 0900 	mov.w	r9, #0
 8014e5e:	4639      	mov	r1, r7
 8014e60:	4620      	mov	r0, r4
 8014e62:	f000 fa49 	bl	80152f8 <_Bfree>
 8014e66:	2e00      	cmp	r6, #0
 8014e68:	f43f aeb7 	beq.w	8014bda <_dtoa_r+0x67a>
 8014e6c:	f1b9 0f00 	cmp.w	r9, #0
 8014e70:	d005      	beq.n	8014e7e <_dtoa_r+0x91e>
 8014e72:	45b1      	cmp	r9, r6
 8014e74:	d003      	beq.n	8014e7e <_dtoa_r+0x91e>
 8014e76:	4649      	mov	r1, r9
 8014e78:	4620      	mov	r0, r4
 8014e7a:	f000 fa3d 	bl	80152f8 <_Bfree>
 8014e7e:	4631      	mov	r1, r6
 8014e80:	4620      	mov	r0, r4
 8014e82:	f000 fa39 	bl	80152f8 <_Bfree>
 8014e86:	e6a8      	b.n	8014bda <_dtoa_r+0x67a>
 8014e88:	2700      	movs	r7, #0
 8014e8a:	463e      	mov	r6, r7
 8014e8c:	e7e1      	b.n	8014e52 <_dtoa_r+0x8f2>
 8014e8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014e92:	463e      	mov	r6, r7
 8014e94:	e5a9      	b.n	80149ea <_dtoa_r+0x48a>
 8014e96:	bf00      	nop
 8014e98:	40240000 	.word	0x40240000
 8014e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	f000 80fa 	beq.w	801509c <_dtoa_r+0xb3c>
 8014ea8:	2d00      	cmp	r5, #0
 8014eaa:	dd05      	ble.n	8014eb8 <_dtoa_r+0x958>
 8014eac:	4631      	mov	r1, r6
 8014eae:	462a      	mov	r2, r5
 8014eb0:	4620      	mov	r0, r4
 8014eb2:	f000 fbaf 	bl	8015614 <__lshift>
 8014eb6:	4606      	mov	r6, r0
 8014eb8:	9b07      	ldr	r3, [sp, #28]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d04c      	beq.n	8014f58 <_dtoa_r+0x9f8>
 8014ebe:	6871      	ldr	r1, [r6, #4]
 8014ec0:	4620      	mov	r0, r4
 8014ec2:	f000 f9e5 	bl	8015290 <_Balloc>
 8014ec6:	6932      	ldr	r2, [r6, #16]
 8014ec8:	3202      	adds	r2, #2
 8014eca:	4605      	mov	r5, r0
 8014ecc:	0092      	lsls	r2, r2, #2
 8014ece:	f106 010c 	add.w	r1, r6, #12
 8014ed2:	300c      	adds	r0, #12
 8014ed4:	f7fe fe0e 	bl	8013af4 <memcpy>
 8014ed8:	2201      	movs	r2, #1
 8014eda:	4629      	mov	r1, r5
 8014edc:	4620      	mov	r0, r4
 8014ede:	f000 fb99 	bl	8015614 <__lshift>
 8014ee2:	9b00      	ldr	r3, [sp, #0]
 8014ee4:	f8cd b014 	str.w	fp, [sp, #20]
 8014ee8:	f003 0301 	and.w	r3, r3, #1
 8014eec:	46b1      	mov	r9, r6
 8014eee:	9307      	str	r3, [sp, #28]
 8014ef0:	4606      	mov	r6, r0
 8014ef2:	4639      	mov	r1, r7
 8014ef4:	9804      	ldr	r0, [sp, #16]
 8014ef6:	f7ff faa5 	bl	8014444 <quorem>
 8014efa:	4649      	mov	r1, r9
 8014efc:	4605      	mov	r5, r0
 8014efe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014f02:	9804      	ldr	r0, [sp, #16]
 8014f04:	f000 fbda 	bl	80156bc <__mcmp>
 8014f08:	4632      	mov	r2, r6
 8014f0a:	9000      	str	r0, [sp, #0]
 8014f0c:	4639      	mov	r1, r7
 8014f0e:	4620      	mov	r0, r4
 8014f10:	f000 fbee 	bl	80156f0 <__mdiff>
 8014f14:	68c3      	ldr	r3, [r0, #12]
 8014f16:	4602      	mov	r2, r0
 8014f18:	bb03      	cbnz	r3, 8014f5c <_dtoa_r+0x9fc>
 8014f1a:	4601      	mov	r1, r0
 8014f1c:	9008      	str	r0, [sp, #32]
 8014f1e:	9804      	ldr	r0, [sp, #16]
 8014f20:	f000 fbcc 	bl	80156bc <__mcmp>
 8014f24:	9a08      	ldr	r2, [sp, #32]
 8014f26:	4603      	mov	r3, r0
 8014f28:	4611      	mov	r1, r2
 8014f2a:	4620      	mov	r0, r4
 8014f2c:	9308      	str	r3, [sp, #32]
 8014f2e:	f000 f9e3 	bl	80152f8 <_Bfree>
 8014f32:	9b08      	ldr	r3, [sp, #32]
 8014f34:	b9a3      	cbnz	r3, 8014f60 <_dtoa_r+0xa00>
 8014f36:	9a06      	ldr	r2, [sp, #24]
 8014f38:	b992      	cbnz	r2, 8014f60 <_dtoa_r+0xa00>
 8014f3a:	9a07      	ldr	r2, [sp, #28]
 8014f3c:	b982      	cbnz	r2, 8014f60 <_dtoa_r+0xa00>
 8014f3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014f42:	d029      	beq.n	8014f98 <_dtoa_r+0xa38>
 8014f44:	9b00      	ldr	r3, [sp, #0]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	dd01      	ble.n	8014f4e <_dtoa_r+0x9ee>
 8014f4a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014f4e:	9b05      	ldr	r3, [sp, #20]
 8014f50:	1c5d      	adds	r5, r3, #1
 8014f52:	f883 8000 	strb.w	r8, [r3]
 8014f56:	e782      	b.n	8014e5e <_dtoa_r+0x8fe>
 8014f58:	4630      	mov	r0, r6
 8014f5a:	e7c2      	b.n	8014ee2 <_dtoa_r+0x982>
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	e7e3      	b.n	8014f28 <_dtoa_r+0x9c8>
 8014f60:	9a00      	ldr	r2, [sp, #0]
 8014f62:	2a00      	cmp	r2, #0
 8014f64:	db04      	blt.n	8014f70 <_dtoa_r+0xa10>
 8014f66:	d125      	bne.n	8014fb4 <_dtoa_r+0xa54>
 8014f68:	9a06      	ldr	r2, [sp, #24]
 8014f6a:	bb1a      	cbnz	r2, 8014fb4 <_dtoa_r+0xa54>
 8014f6c:	9a07      	ldr	r2, [sp, #28]
 8014f6e:	bb0a      	cbnz	r2, 8014fb4 <_dtoa_r+0xa54>
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	ddec      	ble.n	8014f4e <_dtoa_r+0x9ee>
 8014f74:	2201      	movs	r2, #1
 8014f76:	9904      	ldr	r1, [sp, #16]
 8014f78:	4620      	mov	r0, r4
 8014f7a:	f000 fb4b 	bl	8015614 <__lshift>
 8014f7e:	4639      	mov	r1, r7
 8014f80:	9004      	str	r0, [sp, #16]
 8014f82:	f000 fb9b 	bl	80156bc <__mcmp>
 8014f86:	2800      	cmp	r0, #0
 8014f88:	dc03      	bgt.n	8014f92 <_dtoa_r+0xa32>
 8014f8a:	d1e0      	bne.n	8014f4e <_dtoa_r+0x9ee>
 8014f8c:	f018 0f01 	tst.w	r8, #1
 8014f90:	d0dd      	beq.n	8014f4e <_dtoa_r+0x9ee>
 8014f92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014f96:	d1d8      	bne.n	8014f4a <_dtoa_r+0x9ea>
 8014f98:	9b05      	ldr	r3, [sp, #20]
 8014f9a:	9a05      	ldr	r2, [sp, #20]
 8014f9c:	1c5d      	adds	r5, r3, #1
 8014f9e:	2339      	movs	r3, #57	; 0x39
 8014fa0:	7013      	strb	r3, [r2, #0]
 8014fa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014fa6:	2b39      	cmp	r3, #57	; 0x39
 8014fa8:	f105 32ff 	add.w	r2, r5, #4294967295
 8014fac:	d04f      	beq.n	801504e <_dtoa_r+0xaee>
 8014fae:	3301      	adds	r3, #1
 8014fb0:	7013      	strb	r3, [r2, #0]
 8014fb2:	e754      	b.n	8014e5e <_dtoa_r+0x8fe>
 8014fb4:	9a05      	ldr	r2, [sp, #20]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	f102 0501 	add.w	r5, r2, #1
 8014fbc:	dd06      	ble.n	8014fcc <_dtoa_r+0xa6c>
 8014fbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014fc2:	d0e9      	beq.n	8014f98 <_dtoa_r+0xa38>
 8014fc4:	f108 0801 	add.w	r8, r8, #1
 8014fc8:	9b05      	ldr	r3, [sp, #20]
 8014fca:	e7c2      	b.n	8014f52 <_dtoa_r+0x9f2>
 8014fcc:	9a02      	ldr	r2, [sp, #8]
 8014fce:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014fd2:	eba5 030b 	sub.w	r3, r5, fp
 8014fd6:	4293      	cmp	r3, r2
 8014fd8:	d021      	beq.n	801501e <_dtoa_r+0xabe>
 8014fda:	2300      	movs	r3, #0
 8014fdc:	220a      	movs	r2, #10
 8014fde:	9904      	ldr	r1, [sp, #16]
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	f000 f9a0 	bl	8015326 <__multadd>
 8014fe6:	45b1      	cmp	r9, r6
 8014fe8:	9004      	str	r0, [sp, #16]
 8014fea:	f04f 0300 	mov.w	r3, #0
 8014fee:	f04f 020a 	mov.w	r2, #10
 8014ff2:	4649      	mov	r1, r9
 8014ff4:	4620      	mov	r0, r4
 8014ff6:	d105      	bne.n	8015004 <_dtoa_r+0xaa4>
 8014ff8:	f000 f995 	bl	8015326 <__multadd>
 8014ffc:	4681      	mov	r9, r0
 8014ffe:	4606      	mov	r6, r0
 8015000:	9505      	str	r5, [sp, #20]
 8015002:	e776      	b.n	8014ef2 <_dtoa_r+0x992>
 8015004:	f000 f98f 	bl	8015326 <__multadd>
 8015008:	4631      	mov	r1, r6
 801500a:	4681      	mov	r9, r0
 801500c:	2300      	movs	r3, #0
 801500e:	220a      	movs	r2, #10
 8015010:	4620      	mov	r0, r4
 8015012:	f000 f988 	bl	8015326 <__multadd>
 8015016:	4606      	mov	r6, r0
 8015018:	e7f2      	b.n	8015000 <_dtoa_r+0xaa0>
 801501a:	f04f 0900 	mov.w	r9, #0
 801501e:	2201      	movs	r2, #1
 8015020:	9904      	ldr	r1, [sp, #16]
 8015022:	4620      	mov	r0, r4
 8015024:	f000 faf6 	bl	8015614 <__lshift>
 8015028:	4639      	mov	r1, r7
 801502a:	9004      	str	r0, [sp, #16]
 801502c:	f000 fb46 	bl	80156bc <__mcmp>
 8015030:	2800      	cmp	r0, #0
 8015032:	dcb6      	bgt.n	8014fa2 <_dtoa_r+0xa42>
 8015034:	d102      	bne.n	801503c <_dtoa_r+0xadc>
 8015036:	f018 0f01 	tst.w	r8, #1
 801503a:	d1b2      	bne.n	8014fa2 <_dtoa_r+0xa42>
 801503c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015040:	2b30      	cmp	r3, #48	; 0x30
 8015042:	f105 32ff 	add.w	r2, r5, #4294967295
 8015046:	f47f af0a 	bne.w	8014e5e <_dtoa_r+0x8fe>
 801504a:	4615      	mov	r5, r2
 801504c:	e7f6      	b.n	801503c <_dtoa_r+0xadc>
 801504e:	4593      	cmp	fp, r2
 8015050:	d105      	bne.n	801505e <_dtoa_r+0xafe>
 8015052:	2331      	movs	r3, #49	; 0x31
 8015054:	f10a 0a01 	add.w	sl, sl, #1
 8015058:	f88b 3000 	strb.w	r3, [fp]
 801505c:	e6ff      	b.n	8014e5e <_dtoa_r+0x8fe>
 801505e:	4615      	mov	r5, r2
 8015060:	e79f      	b.n	8014fa2 <_dtoa_r+0xa42>
 8015062:	f8df b064 	ldr.w	fp, [pc, #100]	; 80150c8 <_dtoa_r+0xb68>
 8015066:	e007      	b.n	8015078 <_dtoa_r+0xb18>
 8015068:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801506a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80150cc <_dtoa_r+0xb6c>
 801506e:	b11b      	cbz	r3, 8015078 <_dtoa_r+0xb18>
 8015070:	f10b 0308 	add.w	r3, fp, #8
 8015074:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015076:	6013      	str	r3, [r2, #0]
 8015078:	4658      	mov	r0, fp
 801507a:	b017      	add	sp, #92	; 0x5c
 801507c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015080:	9b06      	ldr	r3, [sp, #24]
 8015082:	2b01      	cmp	r3, #1
 8015084:	f77f ae35 	ble.w	8014cf2 <_dtoa_r+0x792>
 8015088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801508a:	9307      	str	r3, [sp, #28]
 801508c:	e649      	b.n	8014d22 <_dtoa_r+0x7c2>
 801508e:	9b02      	ldr	r3, [sp, #8]
 8015090:	2b00      	cmp	r3, #0
 8015092:	dc03      	bgt.n	801509c <_dtoa_r+0xb3c>
 8015094:	9b06      	ldr	r3, [sp, #24]
 8015096:	2b02      	cmp	r3, #2
 8015098:	f73f aecc 	bgt.w	8014e34 <_dtoa_r+0x8d4>
 801509c:	465d      	mov	r5, fp
 801509e:	4639      	mov	r1, r7
 80150a0:	9804      	ldr	r0, [sp, #16]
 80150a2:	f7ff f9cf 	bl	8014444 <quorem>
 80150a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80150aa:	f805 8b01 	strb.w	r8, [r5], #1
 80150ae:	9a02      	ldr	r2, [sp, #8]
 80150b0:	eba5 030b 	sub.w	r3, r5, fp
 80150b4:	429a      	cmp	r2, r3
 80150b6:	ddb0      	ble.n	801501a <_dtoa_r+0xaba>
 80150b8:	2300      	movs	r3, #0
 80150ba:	220a      	movs	r2, #10
 80150bc:	9904      	ldr	r1, [sp, #16]
 80150be:	4620      	mov	r0, r4
 80150c0:	f000 f931 	bl	8015326 <__multadd>
 80150c4:	9004      	str	r0, [sp, #16]
 80150c6:	e7ea      	b.n	801509e <_dtoa_r+0xb3e>
 80150c8:	080182e8 	.word	0x080182e8
 80150cc:	0801830c 	.word	0x0801830c

080150d0 <std>:
 80150d0:	2300      	movs	r3, #0
 80150d2:	b510      	push	{r4, lr}
 80150d4:	4604      	mov	r4, r0
 80150d6:	e9c0 3300 	strd	r3, r3, [r0]
 80150da:	6083      	str	r3, [r0, #8]
 80150dc:	8181      	strh	r1, [r0, #12]
 80150de:	6643      	str	r3, [r0, #100]	; 0x64
 80150e0:	81c2      	strh	r2, [r0, #14]
 80150e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80150e6:	6183      	str	r3, [r0, #24]
 80150e8:	4619      	mov	r1, r3
 80150ea:	2208      	movs	r2, #8
 80150ec:	305c      	adds	r0, #92	; 0x5c
 80150ee:	f7fe fd0c 	bl	8013b0a <memset>
 80150f2:	4b05      	ldr	r3, [pc, #20]	; (8015108 <std+0x38>)
 80150f4:	6263      	str	r3, [r4, #36]	; 0x24
 80150f6:	4b05      	ldr	r3, [pc, #20]	; (801510c <std+0x3c>)
 80150f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80150fa:	4b05      	ldr	r3, [pc, #20]	; (8015110 <std+0x40>)
 80150fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80150fe:	4b05      	ldr	r3, [pc, #20]	; (8015114 <std+0x44>)
 8015100:	6224      	str	r4, [r4, #32]
 8015102:	6323      	str	r3, [r4, #48]	; 0x30
 8015104:	bd10      	pop	{r4, pc}
 8015106:	bf00      	nop
 8015108:	08015ef9 	.word	0x08015ef9
 801510c:	08015f1b 	.word	0x08015f1b
 8015110:	08015f53 	.word	0x08015f53
 8015114:	08015f77 	.word	0x08015f77

08015118 <_cleanup_r>:
 8015118:	4901      	ldr	r1, [pc, #4]	; (8015120 <_cleanup_r+0x8>)
 801511a:	f000 b885 	b.w	8015228 <_fwalk_reent>
 801511e:	bf00      	nop
 8015120:	08016251 	.word	0x08016251

08015124 <__sfmoreglue>:
 8015124:	b570      	push	{r4, r5, r6, lr}
 8015126:	1e4a      	subs	r2, r1, #1
 8015128:	2568      	movs	r5, #104	; 0x68
 801512a:	4355      	muls	r5, r2
 801512c:	460e      	mov	r6, r1
 801512e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015132:	f000 fbe5 	bl	8015900 <_malloc_r>
 8015136:	4604      	mov	r4, r0
 8015138:	b140      	cbz	r0, 801514c <__sfmoreglue+0x28>
 801513a:	2100      	movs	r1, #0
 801513c:	e9c0 1600 	strd	r1, r6, [r0]
 8015140:	300c      	adds	r0, #12
 8015142:	60a0      	str	r0, [r4, #8]
 8015144:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015148:	f7fe fcdf 	bl	8013b0a <memset>
 801514c:	4620      	mov	r0, r4
 801514e:	bd70      	pop	{r4, r5, r6, pc}

08015150 <__sinit>:
 8015150:	6983      	ldr	r3, [r0, #24]
 8015152:	b510      	push	{r4, lr}
 8015154:	4604      	mov	r4, r0
 8015156:	bb33      	cbnz	r3, 80151a6 <__sinit+0x56>
 8015158:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801515c:	6503      	str	r3, [r0, #80]	; 0x50
 801515e:	4b12      	ldr	r3, [pc, #72]	; (80151a8 <__sinit+0x58>)
 8015160:	4a12      	ldr	r2, [pc, #72]	; (80151ac <__sinit+0x5c>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	6282      	str	r2, [r0, #40]	; 0x28
 8015166:	4298      	cmp	r0, r3
 8015168:	bf04      	itt	eq
 801516a:	2301      	moveq	r3, #1
 801516c:	6183      	streq	r3, [r0, #24]
 801516e:	f000 f81f 	bl	80151b0 <__sfp>
 8015172:	6060      	str	r0, [r4, #4]
 8015174:	4620      	mov	r0, r4
 8015176:	f000 f81b 	bl	80151b0 <__sfp>
 801517a:	60a0      	str	r0, [r4, #8]
 801517c:	4620      	mov	r0, r4
 801517e:	f000 f817 	bl	80151b0 <__sfp>
 8015182:	2200      	movs	r2, #0
 8015184:	60e0      	str	r0, [r4, #12]
 8015186:	2104      	movs	r1, #4
 8015188:	6860      	ldr	r0, [r4, #4]
 801518a:	f7ff ffa1 	bl	80150d0 <std>
 801518e:	2201      	movs	r2, #1
 8015190:	2109      	movs	r1, #9
 8015192:	68a0      	ldr	r0, [r4, #8]
 8015194:	f7ff ff9c 	bl	80150d0 <std>
 8015198:	2202      	movs	r2, #2
 801519a:	2112      	movs	r1, #18
 801519c:	68e0      	ldr	r0, [r4, #12]
 801519e:	f7ff ff97 	bl	80150d0 <std>
 80151a2:	2301      	movs	r3, #1
 80151a4:	61a3      	str	r3, [r4, #24]
 80151a6:	bd10      	pop	{r4, pc}
 80151a8:	080182d4 	.word	0x080182d4
 80151ac:	08015119 	.word	0x08015119

080151b0 <__sfp>:
 80151b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151b2:	4b1b      	ldr	r3, [pc, #108]	; (8015220 <__sfp+0x70>)
 80151b4:	681e      	ldr	r6, [r3, #0]
 80151b6:	69b3      	ldr	r3, [r6, #24]
 80151b8:	4607      	mov	r7, r0
 80151ba:	b913      	cbnz	r3, 80151c2 <__sfp+0x12>
 80151bc:	4630      	mov	r0, r6
 80151be:	f7ff ffc7 	bl	8015150 <__sinit>
 80151c2:	3648      	adds	r6, #72	; 0x48
 80151c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80151c8:	3b01      	subs	r3, #1
 80151ca:	d503      	bpl.n	80151d4 <__sfp+0x24>
 80151cc:	6833      	ldr	r3, [r6, #0]
 80151ce:	b133      	cbz	r3, 80151de <__sfp+0x2e>
 80151d0:	6836      	ldr	r6, [r6, #0]
 80151d2:	e7f7      	b.n	80151c4 <__sfp+0x14>
 80151d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80151d8:	b16d      	cbz	r5, 80151f6 <__sfp+0x46>
 80151da:	3468      	adds	r4, #104	; 0x68
 80151dc:	e7f4      	b.n	80151c8 <__sfp+0x18>
 80151de:	2104      	movs	r1, #4
 80151e0:	4638      	mov	r0, r7
 80151e2:	f7ff ff9f 	bl	8015124 <__sfmoreglue>
 80151e6:	6030      	str	r0, [r6, #0]
 80151e8:	2800      	cmp	r0, #0
 80151ea:	d1f1      	bne.n	80151d0 <__sfp+0x20>
 80151ec:	230c      	movs	r3, #12
 80151ee:	603b      	str	r3, [r7, #0]
 80151f0:	4604      	mov	r4, r0
 80151f2:	4620      	mov	r0, r4
 80151f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151f6:	4b0b      	ldr	r3, [pc, #44]	; (8015224 <__sfp+0x74>)
 80151f8:	6665      	str	r5, [r4, #100]	; 0x64
 80151fa:	e9c4 5500 	strd	r5, r5, [r4]
 80151fe:	60a5      	str	r5, [r4, #8]
 8015200:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015204:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015208:	2208      	movs	r2, #8
 801520a:	4629      	mov	r1, r5
 801520c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015210:	f7fe fc7b 	bl	8013b0a <memset>
 8015214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801521c:	e7e9      	b.n	80151f2 <__sfp+0x42>
 801521e:	bf00      	nop
 8015220:	080182d4 	.word	0x080182d4
 8015224:	ffff0001 	.word	0xffff0001

08015228 <_fwalk_reent>:
 8015228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801522c:	4680      	mov	r8, r0
 801522e:	4689      	mov	r9, r1
 8015230:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015234:	2600      	movs	r6, #0
 8015236:	b914      	cbnz	r4, 801523e <_fwalk_reent+0x16>
 8015238:	4630      	mov	r0, r6
 801523a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801523e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015242:	3f01      	subs	r7, #1
 8015244:	d501      	bpl.n	801524a <_fwalk_reent+0x22>
 8015246:	6824      	ldr	r4, [r4, #0]
 8015248:	e7f5      	b.n	8015236 <_fwalk_reent+0xe>
 801524a:	89ab      	ldrh	r3, [r5, #12]
 801524c:	2b01      	cmp	r3, #1
 801524e:	d907      	bls.n	8015260 <_fwalk_reent+0x38>
 8015250:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015254:	3301      	adds	r3, #1
 8015256:	d003      	beq.n	8015260 <_fwalk_reent+0x38>
 8015258:	4629      	mov	r1, r5
 801525a:	4640      	mov	r0, r8
 801525c:	47c8      	blx	r9
 801525e:	4306      	orrs	r6, r0
 8015260:	3568      	adds	r5, #104	; 0x68
 8015262:	e7ee      	b.n	8015242 <_fwalk_reent+0x1a>

08015264 <_localeconv_r>:
 8015264:	4b04      	ldr	r3, [pc, #16]	; (8015278 <_localeconv_r+0x14>)
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	6a18      	ldr	r0, [r3, #32]
 801526a:	4b04      	ldr	r3, [pc, #16]	; (801527c <_localeconv_r+0x18>)
 801526c:	2800      	cmp	r0, #0
 801526e:	bf08      	it	eq
 8015270:	4618      	moveq	r0, r3
 8015272:	30f0      	adds	r0, #240	; 0xf0
 8015274:	4770      	bx	lr
 8015276:	bf00      	nop
 8015278:	20001304 	.word	0x20001304
 801527c:	20001368 	.word	0x20001368

08015280 <malloc>:
 8015280:	4b02      	ldr	r3, [pc, #8]	; (801528c <malloc+0xc>)
 8015282:	4601      	mov	r1, r0
 8015284:	6818      	ldr	r0, [r3, #0]
 8015286:	f000 bb3b 	b.w	8015900 <_malloc_r>
 801528a:	bf00      	nop
 801528c:	20001304 	.word	0x20001304

08015290 <_Balloc>:
 8015290:	b570      	push	{r4, r5, r6, lr}
 8015292:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015294:	4604      	mov	r4, r0
 8015296:	460e      	mov	r6, r1
 8015298:	b93d      	cbnz	r5, 80152aa <_Balloc+0x1a>
 801529a:	2010      	movs	r0, #16
 801529c:	f7ff fff0 	bl	8015280 <malloc>
 80152a0:	6260      	str	r0, [r4, #36]	; 0x24
 80152a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80152a6:	6005      	str	r5, [r0, #0]
 80152a8:	60c5      	str	r5, [r0, #12]
 80152aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80152ac:	68eb      	ldr	r3, [r5, #12]
 80152ae:	b183      	cbz	r3, 80152d2 <_Balloc+0x42>
 80152b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152b2:	68db      	ldr	r3, [r3, #12]
 80152b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80152b8:	b9b8      	cbnz	r0, 80152ea <_Balloc+0x5a>
 80152ba:	2101      	movs	r1, #1
 80152bc:	fa01 f506 	lsl.w	r5, r1, r6
 80152c0:	1d6a      	adds	r2, r5, #5
 80152c2:	0092      	lsls	r2, r2, #2
 80152c4:	4620      	mov	r0, r4
 80152c6:	f000 fabf 	bl	8015848 <_calloc_r>
 80152ca:	b160      	cbz	r0, 80152e6 <_Balloc+0x56>
 80152cc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80152d0:	e00e      	b.n	80152f0 <_Balloc+0x60>
 80152d2:	2221      	movs	r2, #33	; 0x21
 80152d4:	2104      	movs	r1, #4
 80152d6:	4620      	mov	r0, r4
 80152d8:	f000 fab6 	bl	8015848 <_calloc_r>
 80152dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152de:	60e8      	str	r0, [r5, #12]
 80152e0:	68db      	ldr	r3, [r3, #12]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d1e4      	bne.n	80152b0 <_Balloc+0x20>
 80152e6:	2000      	movs	r0, #0
 80152e8:	bd70      	pop	{r4, r5, r6, pc}
 80152ea:	6802      	ldr	r2, [r0, #0]
 80152ec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80152f0:	2300      	movs	r3, #0
 80152f2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80152f6:	e7f7      	b.n	80152e8 <_Balloc+0x58>

080152f8 <_Bfree>:
 80152f8:	b570      	push	{r4, r5, r6, lr}
 80152fa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80152fc:	4606      	mov	r6, r0
 80152fe:	460d      	mov	r5, r1
 8015300:	b93c      	cbnz	r4, 8015312 <_Bfree+0x1a>
 8015302:	2010      	movs	r0, #16
 8015304:	f7ff ffbc 	bl	8015280 <malloc>
 8015308:	6270      	str	r0, [r6, #36]	; 0x24
 801530a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801530e:	6004      	str	r4, [r0, #0]
 8015310:	60c4      	str	r4, [r0, #12]
 8015312:	b13d      	cbz	r5, 8015324 <_Bfree+0x2c>
 8015314:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015316:	686a      	ldr	r2, [r5, #4]
 8015318:	68db      	ldr	r3, [r3, #12]
 801531a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801531e:	6029      	str	r1, [r5, #0]
 8015320:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015324:	bd70      	pop	{r4, r5, r6, pc}

08015326 <__multadd>:
 8015326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801532a:	690d      	ldr	r5, [r1, #16]
 801532c:	461f      	mov	r7, r3
 801532e:	4606      	mov	r6, r0
 8015330:	460c      	mov	r4, r1
 8015332:	f101 0c14 	add.w	ip, r1, #20
 8015336:	2300      	movs	r3, #0
 8015338:	f8dc 0000 	ldr.w	r0, [ip]
 801533c:	b281      	uxth	r1, r0
 801533e:	fb02 7101 	mla	r1, r2, r1, r7
 8015342:	0c0f      	lsrs	r7, r1, #16
 8015344:	0c00      	lsrs	r0, r0, #16
 8015346:	fb02 7000 	mla	r0, r2, r0, r7
 801534a:	b289      	uxth	r1, r1
 801534c:	3301      	adds	r3, #1
 801534e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8015352:	429d      	cmp	r5, r3
 8015354:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015358:	f84c 1b04 	str.w	r1, [ip], #4
 801535c:	dcec      	bgt.n	8015338 <__multadd+0x12>
 801535e:	b1d7      	cbz	r7, 8015396 <__multadd+0x70>
 8015360:	68a3      	ldr	r3, [r4, #8]
 8015362:	42ab      	cmp	r3, r5
 8015364:	dc12      	bgt.n	801538c <__multadd+0x66>
 8015366:	6861      	ldr	r1, [r4, #4]
 8015368:	4630      	mov	r0, r6
 801536a:	3101      	adds	r1, #1
 801536c:	f7ff ff90 	bl	8015290 <_Balloc>
 8015370:	6922      	ldr	r2, [r4, #16]
 8015372:	3202      	adds	r2, #2
 8015374:	f104 010c 	add.w	r1, r4, #12
 8015378:	4680      	mov	r8, r0
 801537a:	0092      	lsls	r2, r2, #2
 801537c:	300c      	adds	r0, #12
 801537e:	f7fe fbb9 	bl	8013af4 <memcpy>
 8015382:	4621      	mov	r1, r4
 8015384:	4630      	mov	r0, r6
 8015386:	f7ff ffb7 	bl	80152f8 <_Bfree>
 801538a:	4644      	mov	r4, r8
 801538c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015390:	3501      	adds	r5, #1
 8015392:	615f      	str	r7, [r3, #20]
 8015394:	6125      	str	r5, [r4, #16]
 8015396:	4620      	mov	r0, r4
 8015398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801539c <__hi0bits>:
 801539c:	0c02      	lsrs	r2, r0, #16
 801539e:	0412      	lsls	r2, r2, #16
 80153a0:	4603      	mov	r3, r0
 80153a2:	b9b2      	cbnz	r2, 80153d2 <__hi0bits+0x36>
 80153a4:	0403      	lsls	r3, r0, #16
 80153a6:	2010      	movs	r0, #16
 80153a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80153ac:	bf04      	itt	eq
 80153ae:	021b      	lsleq	r3, r3, #8
 80153b0:	3008      	addeq	r0, #8
 80153b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80153b6:	bf04      	itt	eq
 80153b8:	011b      	lsleq	r3, r3, #4
 80153ba:	3004      	addeq	r0, #4
 80153bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80153c0:	bf04      	itt	eq
 80153c2:	009b      	lsleq	r3, r3, #2
 80153c4:	3002      	addeq	r0, #2
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	db06      	blt.n	80153d8 <__hi0bits+0x3c>
 80153ca:	005b      	lsls	r3, r3, #1
 80153cc:	d503      	bpl.n	80153d6 <__hi0bits+0x3a>
 80153ce:	3001      	adds	r0, #1
 80153d0:	4770      	bx	lr
 80153d2:	2000      	movs	r0, #0
 80153d4:	e7e8      	b.n	80153a8 <__hi0bits+0xc>
 80153d6:	2020      	movs	r0, #32
 80153d8:	4770      	bx	lr

080153da <__lo0bits>:
 80153da:	6803      	ldr	r3, [r0, #0]
 80153dc:	f013 0207 	ands.w	r2, r3, #7
 80153e0:	4601      	mov	r1, r0
 80153e2:	d00b      	beq.n	80153fc <__lo0bits+0x22>
 80153e4:	07da      	lsls	r2, r3, #31
 80153e6:	d423      	bmi.n	8015430 <__lo0bits+0x56>
 80153e8:	0798      	lsls	r0, r3, #30
 80153ea:	bf49      	itett	mi
 80153ec:	085b      	lsrmi	r3, r3, #1
 80153ee:	089b      	lsrpl	r3, r3, #2
 80153f0:	2001      	movmi	r0, #1
 80153f2:	600b      	strmi	r3, [r1, #0]
 80153f4:	bf5c      	itt	pl
 80153f6:	600b      	strpl	r3, [r1, #0]
 80153f8:	2002      	movpl	r0, #2
 80153fa:	4770      	bx	lr
 80153fc:	b298      	uxth	r0, r3
 80153fe:	b9a8      	cbnz	r0, 801542c <__lo0bits+0x52>
 8015400:	0c1b      	lsrs	r3, r3, #16
 8015402:	2010      	movs	r0, #16
 8015404:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015408:	bf04      	itt	eq
 801540a:	0a1b      	lsreq	r3, r3, #8
 801540c:	3008      	addeq	r0, #8
 801540e:	071a      	lsls	r2, r3, #28
 8015410:	bf04      	itt	eq
 8015412:	091b      	lsreq	r3, r3, #4
 8015414:	3004      	addeq	r0, #4
 8015416:	079a      	lsls	r2, r3, #30
 8015418:	bf04      	itt	eq
 801541a:	089b      	lsreq	r3, r3, #2
 801541c:	3002      	addeq	r0, #2
 801541e:	07da      	lsls	r2, r3, #31
 8015420:	d402      	bmi.n	8015428 <__lo0bits+0x4e>
 8015422:	085b      	lsrs	r3, r3, #1
 8015424:	d006      	beq.n	8015434 <__lo0bits+0x5a>
 8015426:	3001      	adds	r0, #1
 8015428:	600b      	str	r3, [r1, #0]
 801542a:	4770      	bx	lr
 801542c:	4610      	mov	r0, r2
 801542e:	e7e9      	b.n	8015404 <__lo0bits+0x2a>
 8015430:	2000      	movs	r0, #0
 8015432:	4770      	bx	lr
 8015434:	2020      	movs	r0, #32
 8015436:	4770      	bx	lr

08015438 <__i2b>:
 8015438:	b510      	push	{r4, lr}
 801543a:	460c      	mov	r4, r1
 801543c:	2101      	movs	r1, #1
 801543e:	f7ff ff27 	bl	8015290 <_Balloc>
 8015442:	2201      	movs	r2, #1
 8015444:	6144      	str	r4, [r0, #20]
 8015446:	6102      	str	r2, [r0, #16]
 8015448:	bd10      	pop	{r4, pc}

0801544a <__multiply>:
 801544a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801544e:	4614      	mov	r4, r2
 8015450:	690a      	ldr	r2, [r1, #16]
 8015452:	6923      	ldr	r3, [r4, #16]
 8015454:	429a      	cmp	r2, r3
 8015456:	bfb8      	it	lt
 8015458:	460b      	movlt	r3, r1
 801545a:	4688      	mov	r8, r1
 801545c:	bfbc      	itt	lt
 801545e:	46a0      	movlt	r8, r4
 8015460:	461c      	movlt	r4, r3
 8015462:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015466:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801546a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801546e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015472:	eb07 0609 	add.w	r6, r7, r9
 8015476:	42b3      	cmp	r3, r6
 8015478:	bfb8      	it	lt
 801547a:	3101      	addlt	r1, #1
 801547c:	f7ff ff08 	bl	8015290 <_Balloc>
 8015480:	f100 0514 	add.w	r5, r0, #20
 8015484:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015488:	462b      	mov	r3, r5
 801548a:	2200      	movs	r2, #0
 801548c:	4573      	cmp	r3, lr
 801548e:	d316      	bcc.n	80154be <__multiply+0x74>
 8015490:	f104 0214 	add.w	r2, r4, #20
 8015494:	f108 0114 	add.w	r1, r8, #20
 8015498:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801549c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80154a0:	9300      	str	r3, [sp, #0]
 80154a2:	9b00      	ldr	r3, [sp, #0]
 80154a4:	9201      	str	r2, [sp, #4]
 80154a6:	4293      	cmp	r3, r2
 80154a8:	d80c      	bhi.n	80154c4 <__multiply+0x7a>
 80154aa:	2e00      	cmp	r6, #0
 80154ac:	dd03      	ble.n	80154b6 <__multiply+0x6c>
 80154ae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d05d      	beq.n	8015572 <__multiply+0x128>
 80154b6:	6106      	str	r6, [r0, #16]
 80154b8:	b003      	add	sp, #12
 80154ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154be:	f843 2b04 	str.w	r2, [r3], #4
 80154c2:	e7e3      	b.n	801548c <__multiply+0x42>
 80154c4:	f8b2 b000 	ldrh.w	fp, [r2]
 80154c8:	f1bb 0f00 	cmp.w	fp, #0
 80154cc:	d023      	beq.n	8015516 <__multiply+0xcc>
 80154ce:	4689      	mov	r9, r1
 80154d0:	46ac      	mov	ip, r5
 80154d2:	f04f 0800 	mov.w	r8, #0
 80154d6:	f859 4b04 	ldr.w	r4, [r9], #4
 80154da:	f8dc a000 	ldr.w	sl, [ip]
 80154de:	b2a3      	uxth	r3, r4
 80154e0:	fa1f fa8a 	uxth.w	sl, sl
 80154e4:	fb0b a303 	mla	r3, fp, r3, sl
 80154e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80154ec:	f8dc 4000 	ldr.w	r4, [ip]
 80154f0:	4443      	add	r3, r8
 80154f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80154f6:	fb0b 840a 	mla	r4, fp, sl, r8
 80154fa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80154fe:	46e2      	mov	sl, ip
 8015500:	b29b      	uxth	r3, r3
 8015502:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015506:	454f      	cmp	r7, r9
 8015508:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801550c:	f84a 3b04 	str.w	r3, [sl], #4
 8015510:	d82b      	bhi.n	801556a <__multiply+0x120>
 8015512:	f8cc 8004 	str.w	r8, [ip, #4]
 8015516:	9b01      	ldr	r3, [sp, #4]
 8015518:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801551c:	3204      	adds	r2, #4
 801551e:	f1ba 0f00 	cmp.w	sl, #0
 8015522:	d020      	beq.n	8015566 <__multiply+0x11c>
 8015524:	682b      	ldr	r3, [r5, #0]
 8015526:	4689      	mov	r9, r1
 8015528:	46a8      	mov	r8, r5
 801552a:	f04f 0b00 	mov.w	fp, #0
 801552e:	f8b9 c000 	ldrh.w	ip, [r9]
 8015532:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015536:	fb0a 440c 	mla	r4, sl, ip, r4
 801553a:	445c      	add	r4, fp
 801553c:	46c4      	mov	ip, r8
 801553e:	b29b      	uxth	r3, r3
 8015540:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015544:	f84c 3b04 	str.w	r3, [ip], #4
 8015548:	f859 3b04 	ldr.w	r3, [r9], #4
 801554c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015550:	0c1b      	lsrs	r3, r3, #16
 8015552:	fb0a b303 	mla	r3, sl, r3, fp
 8015556:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801555a:	454f      	cmp	r7, r9
 801555c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015560:	d805      	bhi.n	801556e <__multiply+0x124>
 8015562:	f8c8 3004 	str.w	r3, [r8, #4]
 8015566:	3504      	adds	r5, #4
 8015568:	e79b      	b.n	80154a2 <__multiply+0x58>
 801556a:	46d4      	mov	ip, sl
 801556c:	e7b3      	b.n	80154d6 <__multiply+0x8c>
 801556e:	46e0      	mov	r8, ip
 8015570:	e7dd      	b.n	801552e <__multiply+0xe4>
 8015572:	3e01      	subs	r6, #1
 8015574:	e799      	b.n	80154aa <__multiply+0x60>
	...

08015578 <__pow5mult>:
 8015578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801557c:	4615      	mov	r5, r2
 801557e:	f012 0203 	ands.w	r2, r2, #3
 8015582:	4606      	mov	r6, r0
 8015584:	460f      	mov	r7, r1
 8015586:	d007      	beq.n	8015598 <__pow5mult+0x20>
 8015588:	3a01      	subs	r2, #1
 801558a:	4c21      	ldr	r4, [pc, #132]	; (8015610 <__pow5mult+0x98>)
 801558c:	2300      	movs	r3, #0
 801558e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015592:	f7ff fec8 	bl	8015326 <__multadd>
 8015596:	4607      	mov	r7, r0
 8015598:	10ad      	asrs	r5, r5, #2
 801559a:	d035      	beq.n	8015608 <__pow5mult+0x90>
 801559c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801559e:	b93c      	cbnz	r4, 80155b0 <__pow5mult+0x38>
 80155a0:	2010      	movs	r0, #16
 80155a2:	f7ff fe6d 	bl	8015280 <malloc>
 80155a6:	6270      	str	r0, [r6, #36]	; 0x24
 80155a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80155ac:	6004      	str	r4, [r0, #0]
 80155ae:	60c4      	str	r4, [r0, #12]
 80155b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80155b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80155b8:	b94c      	cbnz	r4, 80155ce <__pow5mult+0x56>
 80155ba:	f240 2171 	movw	r1, #625	; 0x271
 80155be:	4630      	mov	r0, r6
 80155c0:	f7ff ff3a 	bl	8015438 <__i2b>
 80155c4:	2300      	movs	r3, #0
 80155c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80155ca:	4604      	mov	r4, r0
 80155cc:	6003      	str	r3, [r0, #0]
 80155ce:	f04f 0800 	mov.w	r8, #0
 80155d2:	07eb      	lsls	r3, r5, #31
 80155d4:	d50a      	bpl.n	80155ec <__pow5mult+0x74>
 80155d6:	4639      	mov	r1, r7
 80155d8:	4622      	mov	r2, r4
 80155da:	4630      	mov	r0, r6
 80155dc:	f7ff ff35 	bl	801544a <__multiply>
 80155e0:	4639      	mov	r1, r7
 80155e2:	4681      	mov	r9, r0
 80155e4:	4630      	mov	r0, r6
 80155e6:	f7ff fe87 	bl	80152f8 <_Bfree>
 80155ea:	464f      	mov	r7, r9
 80155ec:	106d      	asrs	r5, r5, #1
 80155ee:	d00b      	beq.n	8015608 <__pow5mult+0x90>
 80155f0:	6820      	ldr	r0, [r4, #0]
 80155f2:	b938      	cbnz	r0, 8015604 <__pow5mult+0x8c>
 80155f4:	4622      	mov	r2, r4
 80155f6:	4621      	mov	r1, r4
 80155f8:	4630      	mov	r0, r6
 80155fa:	f7ff ff26 	bl	801544a <__multiply>
 80155fe:	6020      	str	r0, [r4, #0]
 8015600:	f8c0 8000 	str.w	r8, [r0]
 8015604:	4604      	mov	r4, r0
 8015606:	e7e4      	b.n	80155d2 <__pow5mult+0x5a>
 8015608:	4638      	mov	r0, r7
 801560a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801560e:	bf00      	nop
 8015610:	08018470 	.word	0x08018470

08015614 <__lshift>:
 8015614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015618:	460c      	mov	r4, r1
 801561a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801561e:	6923      	ldr	r3, [r4, #16]
 8015620:	6849      	ldr	r1, [r1, #4]
 8015622:	eb0a 0903 	add.w	r9, sl, r3
 8015626:	68a3      	ldr	r3, [r4, #8]
 8015628:	4607      	mov	r7, r0
 801562a:	4616      	mov	r6, r2
 801562c:	f109 0501 	add.w	r5, r9, #1
 8015630:	42ab      	cmp	r3, r5
 8015632:	db32      	blt.n	801569a <__lshift+0x86>
 8015634:	4638      	mov	r0, r7
 8015636:	f7ff fe2b 	bl	8015290 <_Balloc>
 801563a:	2300      	movs	r3, #0
 801563c:	4680      	mov	r8, r0
 801563e:	f100 0114 	add.w	r1, r0, #20
 8015642:	461a      	mov	r2, r3
 8015644:	4553      	cmp	r3, sl
 8015646:	db2b      	blt.n	80156a0 <__lshift+0x8c>
 8015648:	6920      	ldr	r0, [r4, #16]
 801564a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801564e:	f104 0314 	add.w	r3, r4, #20
 8015652:	f016 021f 	ands.w	r2, r6, #31
 8015656:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801565a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801565e:	d025      	beq.n	80156ac <__lshift+0x98>
 8015660:	f1c2 0e20 	rsb	lr, r2, #32
 8015664:	2000      	movs	r0, #0
 8015666:	681e      	ldr	r6, [r3, #0]
 8015668:	468a      	mov	sl, r1
 801566a:	4096      	lsls	r6, r2
 801566c:	4330      	orrs	r0, r6
 801566e:	f84a 0b04 	str.w	r0, [sl], #4
 8015672:	f853 0b04 	ldr.w	r0, [r3], #4
 8015676:	459c      	cmp	ip, r3
 8015678:	fa20 f00e 	lsr.w	r0, r0, lr
 801567c:	d814      	bhi.n	80156a8 <__lshift+0x94>
 801567e:	6048      	str	r0, [r1, #4]
 8015680:	b108      	cbz	r0, 8015686 <__lshift+0x72>
 8015682:	f109 0502 	add.w	r5, r9, #2
 8015686:	3d01      	subs	r5, #1
 8015688:	4638      	mov	r0, r7
 801568a:	f8c8 5010 	str.w	r5, [r8, #16]
 801568e:	4621      	mov	r1, r4
 8015690:	f7ff fe32 	bl	80152f8 <_Bfree>
 8015694:	4640      	mov	r0, r8
 8015696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801569a:	3101      	adds	r1, #1
 801569c:	005b      	lsls	r3, r3, #1
 801569e:	e7c7      	b.n	8015630 <__lshift+0x1c>
 80156a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80156a4:	3301      	adds	r3, #1
 80156a6:	e7cd      	b.n	8015644 <__lshift+0x30>
 80156a8:	4651      	mov	r1, sl
 80156aa:	e7dc      	b.n	8015666 <__lshift+0x52>
 80156ac:	3904      	subs	r1, #4
 80156ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80156b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80156b6:	459c      	cmp	ip, r3
 80156b8:	d8f9      	bhi.n	80156ae <__lshift+0x9a>
 80156ba:	e7e4      	b.n	8015686 <__lshift+0x72>

080156bc <__mcmp>:
 80156bc:	6903      	ldr	r3, [r0, #16]
 80156be:	690a      	ldr	r2, [r1, #16]
 80156c0:	1a9b      	subs	r3, r3, r2
 80156c2:	b530      	push	{r4, r5, lr}
 80156c4:	d10c      	bne.n	80156e0 <__mcmp+0x24>
 80156c6:	0092      	lsls	r2, r2, #2
 80156c8:	3014      	adds	r0, #20
 80156ca:	3114      	adds	r1, #20
 80156cc:	1884      	adds	r4, r0, r2
 80156ce:	4411      	add	r1, r2
 80156d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80156d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80156d8:	4295      	cmp	r5, r2
 80156da:	d003      	beq.n	80156e4 <__mcmp+0x28>
 80156dc:	d305      	bcc.n	80156ea <__mcmp+0x2e>
 80156de:	2301      	movs	r3, #1
 80156e0:	4618      	mov	r0, r3
 80156e2:	bd30      	pop	{r4, r5, pc}
 80156e4:	42a0      	cmp	r0, r4
 80156e6:	d3f3      	bcc.n	80156d0 <__mcmp+0x14>
 80156e8:	e7fa      	b.n	80156e0 <__mcmp+0x24>
 80156ea:	f04f 33ff 	mov.w	r3, #4294967295
 80156ee:	e7f7      	b.n	80156e0 <__mcmp+0x24>

080156f0 <__mdiff>:
 80156f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156f4:	460d      	mov	r5, r1
 80156f6:	4607      	mov	r7, r0
 80156f8:	4611      	mov	r1, r2
 80156fa:	4628      	mov	r0, r5
 80156fc:	4614      	mov	r4, r2
 80156fe:	f7ff ffdd 	bl	80156bc <__mcmp>
 8015702:	1e06      	subs	r6, r0, #0
 8015704:	d108      	bne.n	8015718 <__mdiff+0x28>
 8015706:	4631      	mov	r1, r6
 8015708:	4638      	mov	r0, r7
 801570a:	f7ff fdc1 	bl	8015290 <_Balloc>
 801570e:	2301      	movs	r3, #1
 8015710:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015718:	bfa4      	itt	ge
 801571a:	4623      	movge	r3, r4
 801571c:	462c      	movge	r4, r5
 801571e:	4638      	mov	r0, r7
 8015720:	6861      	ldr	r1, [r4, #4]
 8015722:	bfa6      	itte	ge
 8015724:	461d      	movge	r5, r3
 8015726:	2600      	movge	r6, #0
 8015728:	2601      	movlt	r6, #1
 801572a:	f7ff fdb1 	bl	8015290 <_Balloc>
 801572e:	692b      	ldr	r3, [r5, #16]
 8015730:	60c6      	str	r6, [r0, #12]
 8015732:	6926      	ldr	r6, [r4, #16]
 8015734:	f105 0914 	add.w	r9, r5, #20
 8015738:	f104 0214 	add.w	r2, r4, #20
 801573c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015740:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015744:	f100 0514 	add.w	r5, r0, #20
 8015748:	f04f 0e00 	mov.w	lr, #0
 801574c:	f852 ab04 	ldr.w	sl, [r2], #4
 8015750:	f859 4b04 	ldr.w	r4, [r9], #4
 8015754:	fa1e f18a 	uxtah	r1, lr, sl
 8015758:	b2a3      	uxth	r3, r4
 801575a:	1ac9      	subs	r1, r1, r3
 801575c:	0c23      	lsrs	r3, r4, #16
 801575e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8015762:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015766:	b289      	uxth	r1, r1
 8015768:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801576c:	45c8      	cmp	r8, r9
 801576e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015772:	4694      	mov	ip, r2
 8015774:	f845 3b04 	str.w	r3, [r5], #4
 8015778:	d8e8      	bhi.n	801574c <__mdiff+0x5c>
 801577a:	45bc      	cmp	ip, r7
 801577c:	d304      	bcc.n	8015788 <__mdiff+0x98>
 801577e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015782:	b183      	cbz	r3, 80157a6 <__mdiff+0xb6>
 8015784:	6106      	str	r6, [r0, #16]
 8015786:	e7c5      	b.n	8015714 <__mdiff+0x24>
 8015788:	f85c 1b04 	ldr.w	r1, [ip], #4
 801578c:	fa1e f381 	uxtah	r3, lr, r1
 8015790:	141a      	asrs	r2, r3, #16
 8015792:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015796:	b29b      	uxth	r3, r3
 8015798:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801579c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80157a0:	f845 3b04 	str.w	r3, [r5], #4
 80157a4:	e7e9      	b.n	801577a <__mdiff+0x8a>
 80157a6:	3e01      	subs	r6, #1
 80157a8:	e7e9      	b.n	801577e <__mdiff+0x8e>

080157aa <__d2b>:
 80157aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80157ae:	460e      	mov	r6, r1
 80157b0:	2101      	movs	r1, #1
 80157b2:	ec59 8b10 	vmov	r8, r9, d0
 80157b6:	4615      	mov	r5, r2
 80157b8:	f7ff fd6a 	bl	8015290 <_Balloc>
 80157bc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80157c0:	4607      	mov	r7, r0
 80157c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80157c6:	bb34      	cbnz	r4, 8015816 <__d2b+0x6c>
 80157c8:	9301      	str	r3, [sp, #4]
 80157ca:	f1b8 0300 	subs.w	r3, r8, #0
 80157ce:	d027      	beq.n	8015820 <__d2b+0x76>
 80157d0:	a802      	add	r0, sp, #8
 80157d2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80157d6:	f7ff fe00 	bl	80153da <__lo0bits>
 80157da:	9900      	ldr	r1, [sp, #0]
 80157dc:	b1f0      	cbz	r0, 801581c <__d2b+0x72>
 80157de:	9a01      	ldr	r2, [sp, #4]
 80157e0:	f1c0 0320 	rsb	r3, r0, #32
 80157e4:	fa02 f303 	lsl.w	r3, r2, r3
 80157e8:	430b      	orrs	r3, r1
 80157ea:	40c2      	lsrs	r2, r0
 80157ec:	617b      	str	r3, [r7, #20]
 80157ee:	9201      	str	r2, [sp, #4]
 80157f0:	9b01      	ldr	r3, [sp, #4]
 80157f2:	61bb      	str	r3, [r7, #24]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	bf14      	ite	ne
 80157f8:	2102      	movne	r1, #2
 80157fa:	2101      	moveq	r1, #1
 80157fc:	6139      	str	r1, [r7, #16]
 80157fe:	b1c4      	cbz	r4, 8015832 <__d2b+0x88>
 8015800:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015804:	4404      	add	r4, r0
 8015806:	6034      	str	r4, [r6, #0]
 8015808:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801580c:	6028      	str	r0, [r5, #0]
 801580e:	4638      	mov	r0, r7
 8015810:	b003      	add	sp, #12
 8015812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801581a:	e7d5      	b.n	80157c8 <__d2b+0x1e>
 801581c:	6179      	str	r1, [r7, #20]
 801581e:	e7e7      	b.n	80157f0 <__d2b+0x46>
 8015820:	a801      	add	r0, sp, #4
 8015822:	f7ff fdda 	bl	80153da <__lo0bits>
 8015826:	9b01      	ldr	r3, [sp, #4]
 8015828:	617b      	str	r3, [r7, #20]
 801582a:	2101      	movs	r1, #1
 801582c:	6139      	str	r1, [r7, #16]
 801582e:	3020      	adds	r0, #32
 8015830:	e7e5      	b.n	80157fe <__d2b+0x54>
 8015832:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015836:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801583a:	6030      	str	r0, [r6, #0]
 801583c:	6918      	ldr	r0, [r3, #16]
 801583e:	f7ff fdad 	bl	801539c <__hi0bits>
 8015842:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015846:	e7e1      	b.n	801580c <__d2b+0x62>

08015848 <_calloc_r>:
 8015848:	b538      	push	{r3, r4, r5, lr}
 801584a:	fb02 f401 	mul.w	r4, r2, r1
 801584e:	4621      	mov	r1, r4
 8015850:	f000 f856 	bl	8015900 <_malloc_r>
 8015854:	4605      	mov	r5, r0
 8015856:	b118      	cbz	r0, 8015860 <_calloc_r+0x18>
 8015858:	4622      	mov	r2, r4
 801585a:	2100      	movs	r1, #0
 801585c:	f7fe f955 	bl	8013b0a <memset>
 8015860:	4628      	mov	r0, r5
 8015862:	bd38      	pop	{r3, r4, r5, pc}

08015864 <_free_r>:
 8015864:	b538      	push	{r3, r4, r5, lr}
 8015866:	4605      	mov	r5, r0
 8015868:	2900      	cmp	r1, #0
 801586a:	d045      	beq.n	80158f8 <_free_r+0x94>
 801586c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015870:	1f0c      	subs	r4, r1, #4
 8015872:	2b00      	cmp	r3, #0
 8015874:	bfb8      	it	lt
 8015876:	18e4      	addlt	r4, r4, r3
 8015878:	f000 fdb5 	bl	80163e6 <__malloc_lock>
 801587c:	4a1f      	ldr	r2, [pc, #124]	; (80158fc <_free_r+0x98>)
 801587e:	6813      	ldr	r3, [r2, #0]
 8015880:	4610      	mov	r0, r2
 8015882:	b933      	cbnz	r3, 8015892 <_free_r+0x2e>
 8015884:	6063      	str	r3, [r4, #4]
 8015886:	6014      	str	r4, [r2, #0]
 8015888:	4628      	mov	r0, r5
 801588a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801588e:	f000 bdab 	b.w	80163e8 <__malloc_unlock>
 8015892:	42a3      	cmp	r3, r4
 8015894:	d90c      	bls.n	80158b0 <_free_r+0x4c>
 8015896:	6821      	ldr	r1, [r4, #0]
 8015898:	1862      	adds	r2, r4, r1
 801589a:	4293      	cmp	r3, r2
 801589c:	bf04      	itt	eq
 801589e:	681a      	ldreq	r2, [r3, #0]
 80158a0:	685b      	ldreq	r3, [r3, #4]
 80158a2:	6063      	str	r3, [r4, #4]
 80158a4:	bf04      	itt	eq
 80158a6:	1852      	addeq	r2, r2, r1
 80158a8:	6022      	streq	r2, [r4, #0]
 80158aa:	6004      	str	r4, [r0, #0]
 80158ac:	e7ec      	b.n	8015888 <_free_r+0x24>
 80158ae:	4613      	mov	r3, r2
 80158b0:	685a      	ldr	r2, [r3, #4]
 80158b2:	b10a      	cbz	r2, 80158b8 <_free_r+0x54>
 80158b4:	42a2      	cmp	r2, r4
 80158b6:	d9fa      	bls.n	80158ae <_free_r+0x4a>
 80158b8:	6819      	ldr	r1, [r3, #0]
 80158ba:	1858      	adds	r0, r3, r1
 80158bc:	42a0      	cmp	r0, r4
 80158be:	d10b      	bne.n	80158d8 <_free_r+0x74>
 80158c0:	6820      	ldr	r0, [r4, #0]
 80158c2:	4401      	add	r1, r0
 80158c4:	1858      	adds	r0, r3, r1
 80158c6:	4282      	cmp	r2, r0
 80158c8:	6019      	str	r1, [r3, #0]
 80158ca:	d1dd      	bne.n	8015888 <_free_r+0x24>
 80158cc:	6810      	ldr	r0, [r2, #0]
 80158ce:	6852      	ldr	r2, [r2, #4]
 80158d0:	605a      	str	r2, [r3, #4]
 80158d2:	4401      	add	r1, r0
 80158d4:	6019      	str	r1, [r3, #0]
 80158d6:	e7d7      	b.n	8015888 <_free_r+0x24>
 80158d8:	d902      	bls.n	80158e0 <_free_r+0x7c>
 80158da:	230c      	movs	r3, #12
 80158dc:	602b      	str	r3, [r5, #0]
 80158de:	e7d3      	b.n	8015888 <_free_r+0x24>
 80158e0:	6820      	ldr	r0, [r4, #0]
 80158e2:	1821      	adds	r1, r4, r0
 80158e4:	428a      	cmp	r2, r1
 80158e6:	bf04      	itt	eq
 80158e8:	6811      	ldreq	r1, [r2, #0]
 80158ea:	6852      	ldreq	r2, [r2, #4]
 80158ec:	6062      	str	r2, [r4, #4]
 80158ee:	bf04      	itt	eq
 80158f0:	1809      	addeq	r1, r1, r0
 80158f2:	6021      	streq	r1, [r4, #0]
 80158f4:	605c      	str	r4, [r3, #4]
 80158f6:	e7c7      	b.n	8015888 <_free_r+0x24>
 80158f8:	bd38      	pop	{r3, r4, r5, pc}
 80158fa:	bf00      	nop
 80158fc:	2000906c 	.word	0x2000906c

08015900 <_malloc_r>:
 8015900:	b570      	push	{r4, r5, r6, lr}
 8015902:	1ccd      	adds	r5, r1, #3
 8015904:	f025 0503 	bic.w	r5, r5, #3
 8015908:	3508      	adds	r5, #8
 801590a:	2d0c      	cmp	r5, #12
 801590c:	bf38      	it	cc
 801590e:	250c      	movcc	r5, #12
 8015910:	2d00      	cmp	r5, #0
 8015912:	4606      	mov	r6, r0
 8015914:	db01      	blt.n	801591a <_malloc_r+0x1a>
 8015916:	42a9      	cmp	r1, r5
 8015918:	d903      	bls.n	8015922 <_malloc_r+0x22>
 801591a:	230c      	movs	r3, #12
 801591c:	6033      	str	r3, [r6, #0]
 801591e:	2000      	movs	r0, #0
 8015920:	bd70      	pop	{r4, r5, r6, pc}
 8015922:	f000 fd60 	bl	80163e6 <__malloc_lock>
 8015926:	4a21      	ldr	r2, [pc, #132]	; (80159ac <_malloc_r+0xac>)
 8015928:	6814      	ldr	r4, [r2, #0]
 801592a:	4621      	mov	r1, r4
 801592c:	b991      	cbnz	r1, 8015954 <_malloc_r+0x54>
 801592e:	4c20      	ldr	r4, [pc, #128]	; (80159b0 <_malloc_r+0xb0>)
 8015930:	6823      	ldr	r3, [r4, #0]
 8015932:	b91b      	cbnz	r3, 801593c <_malloc_r+0x3c>
 8015934:	4630      	mov	r0, r6
 8015936:	f000 facf 	bl	8015ed8 <_sbrk_r>
 801593a:	6020      	str	r0, [r4, #0]
 801593c:	4629      	mov	r1, r5
 801593e:	4630      	mov	r0, r6
 8015940:	f000 faca 	bl	8015ed8 <_sbrk_r>
 8015944:	1c43      	adds	r3, r0, #1
 8015946:	d124      	bne.n	8015992 <_malloc_r+0x92>
 8015948:	230c      	movs	r3, #12
 801594a:	6033      	str	r3, [r6, #0]
 801594c:	4630      	mov	r0, r6
 801594e:	f000 fd4b 	bl	80163e8 <__malloc_unlock>
 8015952:	e7e4      	b.n	801591e <_malloc_r+0x1e>
 8015954:	680b      	ldr	r3, [r1, #0]
 8015956:	1b5b      	subs	r3, r3, r5
 8015958:	d418      	bmi.n	801598c <_malloc_r+0x8c>
 801595a:	2b0b      	cmp	r3, #11
 801595c:	d90f      	bls.n	801597e <_malloc_r+0x7e>
 801595e:	600b      	str	r3, [r1, #0]
 8015960:	50cd      	str	r5, [r1, r3]
 8015962:	18cc      	adds	r4, r1, r3
 8015964:	4630      	mov	r0, r6
 8015966:	f000 fd3f 	bl	80163e8 <__malloc_unlock>
 801596a:	f104 000b 	add.w	r0, r4, #11
 801596e:	1d23      	adds	r3, r4, #4
 8015970:	f020 0007 	bic.w	r0, r0, #7
 8015974:	1ac3      	subs	r3, r0, r3
 8015976:	d0d3      	beq.n	8015920 <_malloc_r+0x20>
 8015978:	425a      	negs	r2, r3
 801597a:	50e2      	str	r2, [r4, r3]
 801597c:	e7d0      	b.n	8015920 <_malloc_r+0x20>
 801597e:	428c      	cmp	r4, r1
 8015980:	684b      	ldr	r3, [r1, #4]
 8015982:	bf16      	itet	ne
 8015984:	6063      	strne	r3, [r4, #4]
 8015986:	6013      	streq	r3, [r2, #0]
 8015988:	460c      	movne	r4, r1
 801598a:	e7eb      	b.n	8015964 <_malloc_r+0x64>
 801598c:	460c      	mov	r4, r1
 801598e:	6849      	ldr	r1, [r1, #4]
 8015990:	e7cc      	b.n	801592c <_malloc_r+0x2c>
 8015992:	1cc4      	adds	r4, r0, #3
 8015994:	f024 0403 	bic.w	r4, r4, #3
 8015998:	42a0      	cmp	r0, r4
 801599a:	d005      	beq.n	80159a8 <_malloc_r+0xa8>
 801599c:	1a21      	subs	r1, r4, r0
 801599e:	4630      	mov	r0, r6
 80159a0:	f000 fa9a 	bl	8015ed8 <_sbrk_r>
 80159a4:	3001      	adds	r0, #1
 80159a6:	d0cf      	beq.n	8015948 <_malloc_r+0x48>
 80159a8:	6025      	str	r5, [r4, #0]
 80159aa:	e7db      	b.n	8015964 <_malloc_r+0x64>
 80159ac:	2000906c 	.word	0x2000906c
 80159b0:	20009070 	.word	0x20009070

080159b4 <__ssputs_r>:
 80159b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159b8:	688e      	ldr	r6, [r1, #8]
 80159ba:	429e      	cmp	r6, r3
 80159bc:	4682      	mov	sl, r0
 80159be:	460c      	mov	r4, r1
 80159c0:	4690      	mov	r8, r2
 80159c2:	4699      	mov	r9, r3
 80159c4:	d837      	bhi.n	8015a36 <__ssputs_r+0x82>
 80159c6:	898a      	ldrh	r2, [r1, #12]
 80159c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80159cc:	d031      	beq.n	8015a32 <__ssputs_r+0x7e>
 80159ce:	6825      	ldr	r5, [r4, #0]
 80159d0:	6909      	ldr	r1, [r1, #16]
 80159d2:	1a6f      	subs	r7, r5, r1
 80159d4:	6965      	ldr	r5, [r4, #20]
 80159d6:	2302      	movs	r3, #2
 80159d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80159dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80159e0:	f109 0301 	add.w	r3, r9, #1
 80159e4:	443b      	add	r3, r7
 80159e6:	429d      	cmp	r5, r3
 80159e8:	bf38      	it	cc
 80159ea:	461d      	movcc	r5, r3
 80159ec:	0553      	lsls	r3, r2, #21
 80159ee:	d530      	bpl.n	8015a52 <__ssputs_r+0x9e>
 80159f0:	4629      	mov	r1, r5
 80159f2:	f7ff ff85 	bl	8015900 <_malloc_r>
 80159f6:	4606      	mov	r6, r0
 80159f8:	b950      	cbnz	r0, 8015a10 <__ssputs_r+0x5c>
 80159fa:	230c      	movs	r3, #12
 80159fc:	f8ca 3000 	str.w	r3, [sl]
 8015a00:	89a3      	ldrh	r3, [r4, #12]
 8015a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a06:	81a3      	strh	r3, [r4, #12]
 8015a08:	f04f 30ff 	mov.w	r0, #4294967295
 8015a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a10:	463a      	mov	r2, r7
 8015a12:	6921      	ldr	r1, [r4, #16]
 8015a14:	f7fe f86e 	bl	8013af4 <memcpy>
 8015a18:	89a3      	ldrh	r3, [r4, #12]
 8015a1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a22:	81a3      	strh	r3, [r4, #12]
 8015a24:	6126      	str	r6, [r4, #16]
 8015a26:	6165      	str	r5, [r4, #20]
 8015a28:	443e      	add	r6, r7
 8015a2a:	1bed      	subs	r5, r5, r7
 8015a2c:	6026      	str	r6, [r4, #0]
 8015a2e:	60a5      	str	r5, [r4, #8]
 8015a30:	464e      	mov	r6, r9
 8015a32:	454e      	cmp	r6, r9
 8015a34:	d900      	bls.n	8015a38 <__ssputs_r+0x84>
 8015a36:	464e      	mov	r6, r9
 8015a38:	4632      	mov	r2, r6
 8015a3a:	4641      	mov	r1, r8
 8015a3c:	6820      	ldr	r0, [r4, #0]
 8015a3e:	f000 fcb9 	bl	80163b4 <memmove>
 8015a42:	68a3      	ldr	r3, [r4, #8]
 8015a44:	1b9b      	subs	r3, r3, r6
 8015a46:	60a3      	str	r3, [r4, #8]
 8015a48:	6823      	ldr	r3, [r4, #0]
 8015a4a:	441e      	add	r6, r3
 8015a4c:	6026      	str	r6, [r4, #0]
 8015a4e:	2000      	movs	r0, #0
 8015a50:	e7dc      	b.n	8015a0c <__ssputs_r+0x58>
 8015a52:	462a      	mov	r2, r5
 8015a54:	f000 fcc9 	bl	80163ea <_realloc_r>
 8015a58:	4606      	mov	r6, r0
 8015a5a:	2800      	cmp	r0, #0
 8015a5c:	d1e2      	bne.n	8015a24 <__ssputs_r+0x70>
 8015a5e:	6921      	ldr	r1, [r4, #16]
 8015a60:	4650      	mov	r0, sl
 8015a62:	f7ff feff 	bl	8015864 <_free_r>
 8015a66:	e7c8      	b.n	80159fa <__ssputs_r+0x46>

08015a68 <_svfiprintf_r>:
 8015a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a6c:	461d      	mov	r5, r3
 8015a6e:	898b      	ldrh	r3, [r1, #12]
 8015a70:	061f      	lsls	r7, r3, #24
 8015a72:	b09d      	sub	sp, #116	; 0x74
 8015a74:	4680      	mov	r8, r0
 8015a76:	460c      	mov	r4, r1
 8015a78:	4616      	mov	r6, r2
 8015a7a:	d50f      	bpl.n	8015a9c <_svfiprintf_r+0x34>
 8015a7c:	690b      	ldr	r3, [r1, #16]
 8015a7e:	b96b      	cbnz	r3, 8015a9c <_svfiprintf_r+0x34>
 8015a80:	2140      	movs	r1, #64	; 0x40
 8015a82:	f7ff ff3d 	bl	8015900 <_malloc_r>
 8015a86:	6020      	str	r0, [r4, #0]
 8015a88:	6120      	str	r0, [r4, #16]
 8015a8a:	b928      	cbnz	r0, 8015a98 <_svfiprintf_r+0x30>
 8015a8c:	230c      	movs	r3, #12
 8015a8e:	f8c8 3000 	str.w	r3, [r8]
 8015a92:	f04f 30ff 	mov.w	r0, #4294967295
 8015a96:	e0c8      	b.n	8015c2a <_svfiprintf_r+0x1c2>
 8015a98:	2340      	movs	r3, #64	; 0x40
 8015a9a:	6163      	str	r3, [r4, #20]
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8015aa0:	2320      	movs	r3, #32
 8015aa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015aa6:	2330      	movs	r3, #48	; 0x30
 8015aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015aac:	9503      	str	r5, [sp, #12]
 8015aae:	f04f 0b01 	mov.w	fp, #1
 8015ab2:	4637      	mov	r7, r6
 8015ab4:	463d      	mov	r5, r7
 8015ab6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015aba:	b10b      	cbz	r3, 8015ac0 <_svfiprintf_r+0x58>
 8015abc:	2b25      	cmp	r3, #37	; 0x25
 8015abe:	d13e      	bne.n	8015b3e <_svfiprintf_r+0xd6>
 8015ac0:	ebb7 0a06 	subs.w	sl, r7, r6
 8015ac4:	d00b      	beq.n	8015ade <_svfiprintf_r+0x76>
 8015ac6:	4653      	mov	r3, sl
 8015ac8:	4632      	mov	r2, r6
 8015aca:	4621      	mov	r1, r4
 8015acc:	4640      	mov	r0, r8
 8015ace:	f7ff ff71 	bl	80159b4 <__ssputs_r>
 8015ad2:	3001      	adds	r0, #1
 8015ad4:	f000 80a4 	beq.w	8015c20 <_svfiprintf_r+0x1b8>
 8015ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ada:	4453      	add	r3, sl
 8015adc:	9309      	str	r3, [sp, #36]	; 0x24
 8015ade:	783b      	ldrb	r3, [r7, #0]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	f000 809d 	beq.w	8015c20 <_svfiprintf_r+0x1b8>
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8015aec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015af0:	9304      	str	r3, [sp, #16]
 8015af2:	9307      	str	r3, [sp, #28]
 8015af4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015af8:	931a      	str	r3, [sp, #104]	; 0x68
 8015afa:	462f      	mov	r7, r5
 8015afc:	2205      	movs	r2, #5
 8015afe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015b02:	4850      	ldr	r0, [pc, #320]	; (8015c44 <_svfiprintf_r+0x1dc>)
 8015b04:	f7ea fb74 	bl	80001f0 <memchr>
 8015b08:	9b04      	ldr	r3, [sp, #16]
 8015b0a:	b9d0      	cbnz	r0, 8015b42 <_svfiprintf_r+0xda>
 8015b0c:	06d9      	lsls	r1, r3, #27
 8015b0e:	bf44      	itt	mi
 8015b10:	2220      	movmi	r2, #32
 8015b12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015b16:	071a      	lsls	r2, r3, #28
 8015b18:	bf44      	itt	mi
 8015b1a:	222b      	movmi	r2, #43	; 0x2b
 8015b1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015b20:	782a      	ldrb	r2, [r5, #0]
 8015b22:	2a2a      	cmp	r2, #42	; 0x2a
 8015b24:	d015      	beq.n	8015b52 <_svfiprintf_r+0xea>
 8015b26:	9a07      	ldr	r2, [sp, #28]
 8015b28:	462f      	mov	r7, r5
 8015b2a:	2000      	movs	r0, #0
 8015b2c:	250a      	movs	r5, #10
 8015b2e:	4639      	mov	r1, r7
 8015b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b34:	3b30      	subs	r3, #48	; 0x30
 8015b36:	2b09      	cmp	r3, #9
 8015b38:	d94d      	bls.n	8015bd6 <_svfiprintf_r+0x16e>
 8015b3a:	b1b8      	cbz	r0, 8015b6c <_svfiprintf_r+0x104>
 8015b3c:	e00f      	b.n	8015b5e <_svfiprintf_r+0xf6>
 8015b3e:	462f      	mov	r7, r5
 8015b40:	e7b8      	b.n	8015ab4 <_svfiprintf_r+0x4c>
 8015b42:	4a40      	ldr	r2, [pc, #256]	; (8015c44 <_svfiprintf_r+0x1dc>)
 8015b44:	1a80      	subs	r0, r0, r2
 8015b46:	fa0b f000 	lsl.w	r0, fp, r0
 8015b4a:	4318      	orrs	r0, r3
 8015b4c:	9004      	str	r0, [sp, #16]
 8015b4e:	463d      	mov	r5, r7
 8015b50:	e7d3      	b.n	8015afa <_svfiprintf_r+0x92>
 8015b52:	9a03      	ldr	r2, [sp, #12]
 8015b54:	1d11      	adds	r1, r2, #4
 8015b56:	6812      	ldr	r2, [r2, #0]
 8015b58:	9103      	str	r1, [sp, #12]
 8015b5a:	2a00      	cmp	r2, #0
 8015b5c:	db01      	blt.n	8015b62 <_svfiprintf_r+0xfa>
 8015b5e:	9207      	str	r2, [sp, #28]
 8015b60:	e004      	b.n	8015b6c <_svfiprintf_r+0x104>
 8015b62:	4252      	negs	r2, r2
 8015b64:	f043 0302 	orr.w	r3, r3, #2
 8015b68:	9207      	str	r2, [sp, #28]
 8015b6a:	9304      	str	r3, [sp, #16]
 8015b6c:	783b      	ldrb	r3, [r7, #0]
 8015b6e:	2b2e      	cmp	r3, #46	; 0x2e
 8015b70:	d10c      	bne.n	8015b8c <_svfiprintf_r+0x124>
 8015b72:	787b      	ldrb	r3, [r7, #1]
 8015b74:	2b2a      	cmp	r3, #42	; 0x2a
 8015b76:	d133      	bne.n	8015be0 <_svfiprintf_r+0x178>
 8015b78:	9b03      	ldr	r3, [sp, #12]
 8015b7a:	1d1a      	adds	r2, r3, #4
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	9203      	str	r2, [sp, #12]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	bfb8      	it	lt
 8015b84:	f04f 33ff 	movlt.w	r3, #4294967295
 8015b88:	3702      	adds	r7, #2
 8015b8a:	9305      	str	r3, [sp, #20]
 8015b8c:	4d2e      	ldr	r5, [pc, #184]	; (8015c48 <_svfiprintf_r+0x1e0>)
 8015b8e:	7839      	ldrb	r1, [r7, #0]
 8015b90:	2203      	movs	r2, #3
 8015b92:	4628      	mov	r0, r5
 8015b94:	f7ea fb2c 	bl	80001f0 <memchr>
 8015b98:	b138      	cbz	r0, 8015baa <_svfiprintf_r+0x142>
 8015b9a:	2340      	movs	r3, #64	; 0x40
 8015b9c:	1b40      	subs	r0, r0, r5
 8015b9e:	fa03 f000 	lsl.w	r0, r3, r0
 8015ba2:	9b04      	ldr	r3, [sp, #16]
 8015ba4:	4303      	orrs	r3, r0
 8015ba6:	3701      	adds	r7, #1
 8015ba8:	9304      	str	r3, [sp, #16]
 8015baa:	7839      	ldrb	r1, [r7, #0]
 8015bac:	4827      	ldr	r0, [pc, #156]	; (8015c4c <_svfiprintf_r+0x1e4>)
 8015bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015bb2:	2206      	movs	r2, #6
 8015bb4:	1c7e      	adds	r6, r7, #1
 8015bb6:	f7ea fb1b 	bl	80001f0 <memchr>
 8015bba:	2800      	cmp	r0, #0
 8015bbc:	d038      	beq.n	8015c30 <_svfiprintf_r+0x1c8>
 8015bbe:	4b24      	ldr	r3, [pc, #144]	; (8015c50 <_svfiprintf_r+0x1e8>)
 8015bc0:	bb13      	cbnz	r3, 8015c08 <_svfiprintf_r+0x1a0>
 8015bc2:	9b03      	ldr	r3, [sp, #12]
 8015bc4:	3307      	adds	r3, #7
 8015bc6:	f023 0307 	bic.w	r3, r3, #7
 8015bca:	3308      	adds	r3, #8
 8015bcc:	9303      	str	r3, [sp, #12]
 8015bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bd0:	444b      	add	r3, r9
 8015bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8015bd4:	e76d      	b.n	8015ab2 <_svfiprintf_r+0x4a>
 8015bd6:	fb05 3202 	mla	r2, r5, r2, r3
 8015bda:	2001      	movs	r0, #1
 8015bdc:	460f      	mov	r7, r1
 8015bde:	e7a6      	b.n	8015b2e <_svfiprintf_r+0xc6>
 8015be0:	2300      	movs	r3, #0
 8015be2:	3701      	adds	r7, #1
 8015be4:	9305      	str	r3, [sp, #20]
 8015be6:	4619      	mov	r1, r3
 8015be8:	250a      	movs	r5, #10
 8015bea:	4638      	mov	r0, r7
 8015bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015bf0:	3a30      	subs	r2, #48	; 0x30
 8015bf2:	2a09      	cmp	r2, #9
 8015bf4:	d903      	bls.n	8015bfe <_svfiprintf_r+0x196>
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d0c8      	beq.n	8015b8c <_svfiprintf_r+0x124>
 8015bfa:	9105      	str	r1, [sp, #20]
 8015bfc:	e7c6      	b.n	8015b8c <_svfiprintf_r+0x124>
 8015bfe:	fb05 2101 	mla	r1, r5, r1, r2
 8015c02:	2301      	movs	r3, #1
 8015c04:	4607      	mov	r7, r0
 8015c06:	e7f0      	b.n	8015bea <_svfiprintf_r+0x182>
 8015c08:	ab03      	add	r3, sp, #12
 8015c0a:	9300      	str	r3, [sp, #0]
 8015c0c:	4622      	mov	r2, r4
 8015c0e:	4b11      	ldr	r3, [pc, #68]	; (8015c54 <_svfiprintf_r+0x1ec>)
 8015c10:	a904      	add	r1, sp, #16
 8015c12:	4640      	mov	r0, r8
 8015c14:	f7fe f816 	bl	8013c44 <_printf_float>
 8015c18:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015c1c:	4681      	mov	r9, r0
 8015c1e:	d1d6      	bne.n	8015bce <_svfiprintf_r+0x166>
 8015c20:	89a3      	ldrh	r3, [r4, #12]
 8015c22:	065b      	lsls	r3, r3, #25
 8015c24:	f53f af35 	bmi.w	8015a92 <_svfiprintf_r+0x2a>
 8015c28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c2a:	b01d      	add	sp, #116	; 0x74
 8015c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c30:	ab03      	add	r3, sp, #12
 8015c32:	9300      	str	r3, [sp, #0]
 8015c34:	4622      	mov	r2, r4
 8015c36:	4b07      	ldr	r3, [pc, #28]	; (8015c54 <_svfiprintf_r+0x1ec>)
 8015c38:	a904      	add	r1, sp, #16
 8015c3a:	4640      	mov	r0, r8
 8015c3c:	f7fe fab8 	bl	80141b0 <_printf_i>
 8015c40:	e7ea      	b.n	8015c18 <_svfiprintf_r+0x1b0>
 8015c42:	bf00      	nop
 8015c44:	0801847c 	.word	0x0801847c
 8015c48:	08018482 	.word	0x08018482
 8015c4c:	08018486 	.word	0x08018486
 8015c50:	08013c45 	.word	0x08013c45
 8015c54:	080159b5 	.word	0x080159b5

08015c58 <__sfputc_r>:
 8015c58:	6893      	ldr	r3, [r2, #8]
 8015c5a:	3b01      	subs	r3, #1
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	b410      	push	{r4}
 8015c60:	6093      	str	r3, [r2, #8]
 8015c62:	da08      	bge.n	8015c76 <__sfputc_r+0x1e>
 8015c64:	6994      	ldr	r4, [r2, #24]
 8015c66:	42a3      	cmp	r3, r4
 8015c68:	db01      	blt.n	8015c6e <__sfputc_r+0x16>
 8015c6a:	290a      	cmp	r1, #10
 8015c6c:	d103      	bne.n	8015c76 <__sfputc_r+0x1e>
 8015c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c72:	f000 b985 	b.w	8015f80 <__swbuf_r>
 8015c76:	6813      	ldr	r3, [r2, #0]
 8015c78:	1c58      	adds	r0, r3, #1
 8015c7a:	6010      	str	r0, [r2, #0]
 8015c7c:	7019      	strb	r1, [r3, #0]
 8015c7e:	4608      	mov	r0, r1
 8015c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c84:	4770      	bx	lr

08015c86 <__sfputs_r>:
 8015c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c88:	4606      	mov	r6, r0
 8015c8a:	460f      	mov	r7, r1
 8015c8c:	4614      	mov	r4, r2
 8015c8e:	18d5      	adds	r5, r2, r3
 8015c90:	42ac      	cmp	r4, r5
 8015c92:	d101      	bne.n	8015c98 <__sfputs_r+0x12>
 8015c94:	2000      	movs	r0, #0
 8015c96:	e007      	b.n	8015ca8 <__sfputs_r+0x22>
 8015c98:	463a      	mov	r2, r7
 8015c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c9e:	4630      	mov	r0, r6
 8015ca0:	f7ff ffda 	bl	8015c58 <__sfputc_r>
 8015ca4:	1c43      	adds	r3, r0, #1
 8015ca6:	d1f3      	bne.n	8015c90 <__sfputs_r+0xa>
 8015ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015cac <_vfiprintf_r>:
 8015cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cb0:	460c      	mov	r4, r1
 8015cb2:	b09d      	sub	sp, #116	; 0x74
 8015cb4:	4617      	mov	r7, r2
 8015cb6:	461d      	mov	r5, r3
 8015cb8:	4606      	mov	r6, r0
 8015cba:	b118      	cbz	r0, 8015cc4 <_vfiprintf_r+0x18>
 8015cbc:	6983      	ldr	r3, [r0, #24]
 8015cbe:	b90b      	cbnz	r3, 8015cc4 <_vfiprintf_r+0x18>
 8015cc0:	f7ff fa46 	bl	8015150 <__sinit>
 8015cc4:	4b7c      	ldr	r3, [pc, #496]	; (8015eb8 <_vfiprintf_r+0x20c>)
 8015cc6:	429c      	cmp	r4, r3
 8015cc8:	d158      	bne.n	8015d7c <_vfiprintf_r+0xd0>
 8015cca:	6874      	ldr	r4, [r6, #4]
 8015ccc:	89a3      	ldrh	r3, [r4, #12]
 8015cce:	0718      	lsls	r0, r3, #28
 8015cd0:	d55e      	bpl.n	8015d90 <_vfiprintf_r+0xe4>
 8015cd2:	6923      	ldr	r3, [r4, #16]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d05b      	beq.n	8015d90 <_vfiprintf_r+0xe4>
 8015cd8:	2300      	movs	r3, #0
 8015cda:	9309      	str	r3, [sp, #36]	; 0x24
 8015cdc:	2320      	movs	r3, #32
 8015cde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015ce2:	2330      	movs	r3, #48	; 0x30
 8015ce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015ce8:	9503      	str	r5, [sp, #12]
 8015cea:	f04f 0b01 	mov.w	fp, #1
 8015cee:	46b8      	mov	r8, r7
 8015cf0:	4645      	mov	r5, r8
 8015cf2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015cf6:	b10b      	cbz	r3, 8015cfc <_vfiprintf_r+0x50>
 8015cf8:	2b25      	cmp	r3, #37	; 0x25
 8015cfa:	d154      	bne.n	8015da6 <_vfiprintf_r+0xfa>
 8015cfc:	ebb8 0a07 	subs.w	sl, r8, r7
 8015d00:	d00b      	beq.n	8015d1a <_vfiprintf_r+0x6e>
 8015d02:	4653      	mov	r3, sl
 8015d04:	463a      	mov	r2, r7
 8015d06:	4621      	mov	r1, r4
 8015d08:	4630      	mov	r0, r6
 8015d0a:	f7ff ffbc 	bl	8015c86 <__sfputs_r>
 8015d0e:	3001      	adds	r0, #1
 8015d10:	f000 80c2 	beq.w	8015e98 <_vfiprintf_r+0x1ec>
 8015d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d16:	4453      	add	r3, sl
 8015d18:	9309      	str	r3, [sp, #36]	; 0x24
 8015d1a:	f898 3000 	ldrb.w	r3, [r8]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	f000 80ba 	beq.w	8015e98 <_vfiprintf_r+0x1ec>
 8015d24:	2300      	movs	r3, #0
 8015d26:	f04f 32ff 	mov.w	r2, #4294967295
 8015d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015d2e:	9304      	str	r3, [sp, #16]
 8015d30:	9307      	str	r3, [sp, #28]
 8015d32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015d36:	931a      	str	r3, [sp, #104]	; 0x68
 8015d38:	46a8      	mov	r8, r5
 8015d3a:	2205      	movs	r2, #5
 8015d3c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015d40:	485e      	ldr	r0, [pc, #376]	; (8015ebc <_vfiprintf_r+0x210>)
 8015d42:	f7ea fa55 	bl	80001f0 <memchr>
 8015d46:	9b04      	ldr	r3, [sp, #16]
 8015d48:	bb78      	cbnz	r0, 8015daa <_vfiprintf_r+0xfe>
 8015d4a:	06d9      	lsls	r1, r3, #27
 8015d4c:	bf44      	itt	mi
 8015d4e:	2220      	movmi	r2, #32
 8015d50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015d54:	071a      	lsls	r2, r3, #28
 8015d56:	bf44      	itt	mi
 8015d58:	222b      	movmi	r2, #43	; 0x2b
 8015d5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015d5e:	782a      	ldrb	r2, [r5, #0]
 8015d60:	2a2a      	cmp	r2, #42	; 0x2a
 8015d62:	d02a      	beq.n	8015dba <_vfiprintf_r+0x10e>
 8015d64:	9a07      	ldr	r2, [sp, #28]
 8015d66:	46a8      	mov	r8, r5
 8015d68:	2000      	movs	r0, #0
 8015d6a:	250a      	movs	r5, #10
 8015d6c:	4641      	mov	r1, r8
 8015d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d72:	3b30      	subs	r3, #48	; 0x30
 8015d74:	2b09      	cmp	r3, #9
 8015d76:	d969      	bls.n	8015e4c <_vfiprintf_r+0x1a0>
 8015d78:	b360      	cbz	r0, 8015dd4 <_vfiprintf_r+0x128>
 8015d7a:	e024      	b.n	8015dc6 <_vfiprintf_r+0x11a>
 8015d7c:	4b50      	ldr	r3, [pc, #320]	; (8015ec0 <_vfiprintf_r+0x214>)
 8015d7e:	429c      	cmp	r4, r3
 8015d80:	d101      	bne.n	8015d86 <_vfiprintf_r+0xda>
 8015d82:	68b4      	ldr	r4, [r6, #8]
 8015d84:	e7a2      	b.n	8015ccc <_vfiprintf_r+0x20>
 8015d86:	4b4f      	ldr	r3, [pc, #316]	; (8015ec4 <_vfiprintf_r+0x218>)
 8015d88:	429c      	cmp	r4, r3
 8015d8a:	bf08      	it	eq
 8015d8c:	68f4      	ldreq	r4, [r6, #12]
 8015d8e:	e79d      	b.n	8015ccc <_vfiprintf_r+0x20>
 8015d90:	4621      	mov	r1, r4
 8015d92:	4630      	mov	r0, r6
 8015d94:	f000 f958 	bl	8016048 <__swsetup_r>
 8015d98:	2800      	cmp	r0, #0
 8015d9a:	d09d      	beq.n	8015cd8 <_vfiprintf_r+0x2c>
 8015d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8015da0:	b01d      	add	sp, #116	; 0x74
 8015da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015da6:	46a8      	mov	r8, r5
 8015da8:	e7a2      	b.n	8015cf0 <_vfiprintf_r+0x44>
 8015daa:	4a44      	ldr	r2, [pc, #272]	; (8015ebc <_vfiprintf_r+0x210>)
 8015dac:	1a80      	subs	r0, r0, r2
 8015dae:	fa0b f000 	lsl.w	r0, fp, r0
 8015db2:	4318      	orrs	r0, r3
 8015db4:	9004      	str	r0, [sp, #16]
 8015db6:	4645      	mov	r5, r8
 8015db8:	e7be      	b.n	8015d38 <_vfiprintf_r+0x8c>
 8015dba:	9a03      	ldr	r2, [sp, #12]
 8015dbc:	1d11      	adds	r1, r2, #4
 8015dbe:	6812      	ldr	r2, [r2, #0]
 8015dc0:	9103      	str	r1, [sp, #12]
 8015dc2:	2a00      	cmp	r2, #0
 8015dc4:	db01      	blt.n	8015dca <_vfiprintf_r+0x11e>
 8015dc6:	9207      	str	r2, [sp, #28]
 8015dc8:	e004      	b.n	8015dd4 <_vfiprintf_r+0x128>
 8015dca:	4252      	negs	r2, r2
 8015dcc:	f043 0302 	orr.w	r3, r3, #2
 8015dd0:	9207      	str	r2, [sp, #28]
 8015dd2:	9304      	str	r3, [sp, #16]
 8015dd4:	f898 3000 	ldrb.w	r3, [r8]
 8015dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8015dda:	d10e      	bne.n	8015dfa <_vfiprintf_r+0x14e>
 8015ddc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015de0:	2b2a      	cmp	r3, #42	; 0x2a
 8015de2:	d138      	bne.n	8015e56 <_vfiprintf_r+0x1aa>
 8015de4:	9b03      	ldr	r3, [sp, #12]
 8015de6:	1d1a      	adds	r2, r3, #4
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	9203      	str	r2, [sp, #12]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	bfb8      	it	lt
 8015df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8015df4:	f108 0802 	add.w	r8, r8, #2
 8015df8:	9305      	str	r3, [sp, #20]
 8015dfa:	4d33      	ldr	r5, [pc, #204]	; (8015ec8 <_vfiprintf_r+0x21c>)
 8015dfc:	f898 1000 	ldrb.w	r1, [r8]
 8015e00:	2203      	movs	r2, #3
 8015e02:	4628      	mov	r0, r5
 8015e04:	f7ea f9f4 	bl	80001f0 <memchr>
 8015e08:	b140      	cbz	r0, 8015e1c <_vfiprintf_r+0x170>
 8015e0a:	2340      	movs	r3, #64	; 0x40
 8015e0c:	1b40      	subs	r0, r0, r5
 8015e0e:	fa03 f000 	lsl.w	r0, r3, r0
 8015e12:	9b04      	ldr	r3, [sp, #16]
 8015e14:	4303      	orrs	r3, r0
 8015e16:	f108 0801 	add.w	r8, r8, #1
 8015e1a:	9304      	str	r3, [sp, #16]
 8015e1c:	f898 1000 	ldrb.w	r1, [r8]
 8015e20:	482a      	ldr	r0, [pc, #168]	; (8015ecc <_vfiprintf_r+0x220>)
 8015e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015e26:	2206      	movs	r2, #6
 8015e28:	f108 0701 	add.w	r7, r8, #1
 8015e2c:	f7ea f9e0 	bl	80001f0 <memchr>
 8015e30:	2800      	cmp	r0, #0
 8015e32:	d037      	beq.n	8015ea4 <_vfiprintf_r+0x1f8>
 8015e34:	4b26      	ldr	r3, [pc, #152]	; (8015ed0 <_vfiprintf_r+0x224>)
 8015e36:	bb1b      	cbnz	r3, 8015e80 <_vfiprintf_r+0x1d4>
 8015e38:	9b03      	ldr	r3, [sp, #12]
 8015e3a:	3307      	adds	r3, #7
 8015e3c:	f023 0307 	bic.w	r3, r3, #7
 8015e40:	3308      	adds	r3, #8
 8015e42:	9303      	str	r3, [sp, #12]
 8015e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e46:	444b      	add	r3, r9
 8015e48:	9309      	str	r3, [sp, #36]	; 0x24
 8015e4a:	e750      	b.n	8015cee <_vfiprintf_r+0x42>
 8015e4c:	fb05 3202 	mla	r2, r5, r2, r3
 8015e50:	2001      	movs	r0, #1
 8015e52:	4688      	mov	r8, r1
 8015e54:	e78a      	b.n	8015d6c <_vfiprintf_r+0xc0>
 8015e56:	2300      	movs	r3, #0
 8015e58:	f108 0801 	add.w	r8, r8, #1
 8015e5c:	9305      	str	r3, [sp, #20]
 8015e5e:	4619      	mov	r1, r3
 8015e60:	250a      	movs	r5, #10
 8015e62:	4640      	mov	r0, r8
 8015e64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015e68:	3a30      	subs	r2, #48	; 0x30
 8015e6a:	2a09      	cmp	r2, #9
 8015e6c:	d903      	bls.n	8015e76 <_vfiprintf_r+0x1ca>
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d0c3      	beq.n	8015dfa <_vfiprintf_r+0x14e>
 8015e72:	9105      	str	r1, [sp, #20]
 8015e74:	e7c1      	b.n	8015dfa <_vfiprintf_r+0x14e>
 8015e76:	fb05 2101 	mla	r1, r5, r1, r2
 8015e7a:	2301      	movs	r3, #1
 8015e7c:	4680      	mov	r8, r0
 8015e7e:	e7f0      	b.n	8015e62 <_vfiprintf_r+0x1b6>
 8015e80:	ab03      	add	r3, sp, #12
 8015e82:	9300      	str	r3, [sp, #0]
 8015e84:	4622      	mov	r2, r4
 8015e86:	4b13      	ldr	r3, [pc, #76]	; (8015ed4 <_vfiprintf_r+0x228>)
 8015e88:	a904      	add	r1, sp, #16
 8015e8a:	4630      	mov	r0, r6
 8015e8c:	f7fd feda 	bl	8013c44 <_printf_float>
 8015e90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015e94:	4681      	mov	r9, r0
 8015e96:	d1d5      	bne.n	8015e44 <_vfiprintf_r+0x198>
 8015e98:	89a3      	ldrh	r3, [r4, #12]
 8015e9a:	065b      	lsls	r3, r3, #25
 8015e9c:	f53f af7e 	bmi.w	8015d9c <_vfiprintf_r+0xf0>
 8015ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015ea2:	e77d      	b.n	8015da0 <_vfiprintf_r+0xf4>
 8015ea4:	ab03      	add	r3, sp, #12
 8015ea6:	9300      	str	r3, [sp, #0]
 8015ea8:	4622      	mov	r2, r4
 8015eaa:	4b0a      	ldr	r3, [pc, #40]	; (8015ed4 <_vfiprintf_r+0x228>)
 8015eac:	a904      	add	r1, sp, #16
 8015eae:	4630      	mov	r0, r6
 8015eb0:	f7fe f97e 	bl	80141b0 <_printf_i>
 8015eb4:	e7ec      	b.n	8015e90 <_vfiprintf_r+0x1e4>
 8015eb6:	bf00      	nop
 8015eb8:	0801833c 	.word	0x0801833c
 8015ebc:	0801847c 	.word	0x0801847c
 8015ec0:	0801835c 	.word	0x0801835c
 8015ec4:	0801831c 	.word	0x0801831c
 8015ec8:	08018482 	.word	0x08018482
 8015ecc:	08018486 	.word	0x08018486
 8015ed0:	08013c45 	.word	0x08013c45
 8015ed4:	08015c87 	.word	0x08015c87

08015ed8 <_sbrk_r>:
 8015ed8:	b538      	push	{r3, r4, r5, lr}
 8015eda:	4c06      	ldr	r4, [pc, #24]	; (8015ef4 <_sbrk_r+0x1c>)
 8015edc:	2300      	movs	r3, #0
 8015ede:	4605      	mov	r5, r0
 8015ee0:	4608      	mov	r0, r1
 8015ee2:	6023      	str	r3, [r4, #0]
 8015ee4:	f7eb fd54 	bl	8001990 <_sbrk>
 8015ee8:	1c43      	adds	r3, r0, #1
 8015eea:	d102      	bne.n	8015ef2 <_sbrk_r+0x1a>
 8015eec:	6823      	ldr	r3, [r4, #0]
 8015eee:	b103      	cbz	r3, 8015ef2 <_sbrk_r+0x1a>
 8015ef0:	602b      	str	r3, [r5, #0]
 8015ef2:	bd38      	pop	{r3, r4, r5, pc}
 8015ef4:	2000c390 	.word	0x2000c390

08015ef8 <__sread>:
 8015ef8:	b510      	push	{r4, lr}
 8015efa:	460c      	mov	r4, r1
 8015efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f00:	f000 fa9a 	bl	8016438 <_read_r>
 8015f04:	2800      	cmp	r0, #0
 8015f06:	bfab      	itete	ge
 8015f08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8015f0c:	181b      	addge	r3, r3, r0
 8015f0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015f12:	bfac      	ite	ge
 8015f14:	6563      	strge	r3, [r4, #84]	; 0x54
 8015f16:	81a3      	strhlt	r3, [r4, #12]
 8015f18:	bd10      	pop	{r4, pc}

08015f1a <__swrite>:
 8015f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f1e:	461f      	mov	r7, r3
 8015f20:	898b      	ldrh	r3, [r1, #12]
 8015f22:	05db      	lsls	r3, r3, #23
 8015f24:	4605      	mov	r5, r0
 8015f26:	460c      	mov	r4, r1
 8015f28:	4616      	mov	r6, r2
 8015f2a:	d505      	bpl.n	8015f38 <__swrite+0x1e>
 8015f2c:	2302      	movs	r3, #2
 8015f2e:	2200      	movs	r2, #0
 8015f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f34:	f000 f9b6 	bl	80162a4 <_lseek_r>
 8015f38:	89a3      	ldrh	r3, [r4, #12]
 8015f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015f42:	81a3      	strh	r3, [r4, #12]
 8015f44:	4632      	mov	r2, r6
 8015f46:	463b      	mov	r3, r7
 8015f48:	4628      	mov	r0, r5
 8015f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f4e:	f000 b869 	b.w	8016024 <_write_r>

08015f52 <__sseek>:
 8015f52:	b510      	push	{r4, lr}
 8015f54:	460c      	mov	r4, r1
 8015f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f5a:	f000 f9a3 	bl	80162a4 <_lseek_r>
 8015f5e:	1c43      	adds	r3, r0, #1
 8015f60:	89a3      	ldrh	r3, [r4, #12]
 8015f62:	bf15      	itete	ne
 8015f64:	6560      	strne	r0, [r4, #84]	; 0x54
 8015f66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015f6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015f6e:	81a3      	strheq	r3, [r4, #12]
 8015f70:	bf18      	it	ne
 8015f72:	81a3      	strhne	r3, [r4, #12]
 8015f74:	bd10      	pop	{r4, pc}

08015f76 <__sclose>:
 8015f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f7a:	f000 b8d3 	b.w	8016124 <_close_r>
	...

08015f80 <__swbuf_r>:
 8015f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f82:	460e      	mov	r6, r1
 8015f84:	4614      	mov	r4, r2
 8015f86:	4605      	mov	r5, r0
 8015f88:	b118      	cbz	r0, 8015f92 <__swbuf_r+0x12>
 8015f8a:	6983      	ldr	r3, [r0, #24]
 8015f8c:	b90b      	cbnz	r3, 8015f92 <__swbuf_r+0x12>
 8015f8e:	f7ff f8df 	bl	8015150 <__sinit>
 8015f92:	4b21      	ldr	r3, [pc, #132]	; (8016018 <__swbuf_r+0x98>)
 8015f94:	429c      	cmp	r4, r3
 8015f96:	d12a      	bne.n	8015fee <__swbuf_r+0x6e>
 8015f98:	686c      	ldr	r4, [r5, #4]
 8015f9a:	69a3      	ldr	r3, [r4, #24]
 8015f9c:	60a3      	str	r3, [r4, #8]
 8015f9e:	89a3      	ldrh	r3, [r4, #12]
 8015fa0:	071a      	lsls	r2, r3, #28
 8015fa2:	d52e      	bpl.n	8016002 <__swbuf_r+0x82>
 8015fa4:	6923      	ldr	r3, [r4, #16]
 8015fa6:	b363      	cbz	r3, 8016002 <__swbuf_r+0x82>
 8015fa8:	6923      	ldr	r3, [r4, #16]
 8015faa:	6820      	ldr	r0, [r4, #0]
 8015fac:	1ac0      	subs	r0, r0, r3
 8015fae:	6963      	ldr	r3, [r4, #20]
 8015fb0:	b2f6      	uxtb	r6, r6
 8015fb2:	4283      	cmp	r3, r0
 8015fb4:	4637      	mov	r7, r6
 8015fb6:	dc04      	bgt.n	8015fc2 <__swbuf_r+0x42>
 8015fb8:	4621      	mov	r1, r4
 8015fba:	4628      	mov	r0, r5
 8015fbc:	f000 f948 	bl	8016250 <_fflush_r>
 8015fc0:	bb28      	cbnz	r0, 801600e <__swbuf_r+0x8e>
 8015fc2:	68a3      	ldr	r3, [r4, #8]
 8015fc4:	3b01      	subs	r3, #1
 8015fc6:	60a3      	str	r3, [r4, #8]
 8015fc8:	6823      	ldr	r3, [r4, #0]
 8015fca:	1c5a      	adds	r2, r3, #1
 8015fcc:	6022      	str	r2, [r4, #0]
 8015fce:	701e      	strb	r6, [r3, #0]
 8015fd0:	6963      	ldr	r3, [r4, #20]
 8015fd2:	3001      	adds	r0, #1
 8015fd4:	4283      	cmp	r3, r0
 8015fd6:	d004      	beq.n	8015fe2 <__swbuf_r+0x62>
 8015fd8:	89a3      	ldrh	r3, [r4, #12]
 8015fda:	07db      	lsls	r3, r3, #31
 8015fdc:	d519      	bpl.n	8016012 <__swbuf_r+0x92>
 8015fde:	2e0a      	cmp	r6, #10
 8015fe0:	d117      	bne.n	8016012 <__swbuf_r+0x92>
 8015fe2:	4621      	mov	r1, r4
 8015fe4:	4628      	mov	r0, r5
 8015fe6:	f000 f933 	bl	8016250 <_fflush_r>
 8015fea:	b190      	cbz	r0, 8016012 <__swbuf_r+0x92>
 8015fec:	e00f      	b.n	801600e <__swbuf_r+0x8e>
 8015fee:	4b0b      	ldr	r3, [pc, #44]	; (801601c <__swbuf_r+0x9c>)
 8015ff0:	429c      	cmp	r4, r3
 8015ff2:	d101      	bne.n	8015ff8 <__swbuf_r+0x78>
 8015ff4:	68ac      	ldr	r4, [r5, #8]
 8015ff6:	e7d0      	b.n	8015f9a <__swbuf_r+0x1a>
 8015ff8:	4b09      	ldr	r3, [pc, #36]	; (8016020 <__swbuf_r+0xa0>)
 8015ffa:	429c      	cmp	r4, r3
 8015ffc:	bf08      	it	eq
 8015ffe:	68ec      	ldreq	r4, [r5, #12]
 8016000:	e7cb      	b.n	8015f9a <__swbuf_r+0x1a>
 8016002:	4621      	mov	r1, r4
 8016004:	4628      	mov	r0, r5
 8016006:	f000 f81f 	bl	8016048 <__swsetup_r>
 801600a:	2800      	cmp	r0, #0
 801600c:	d0cc      	beq.n	8015fa8 <__swbuf_r+0x28>
 801600e:	f04f 37ff 	mov.w	r7, #4294967295
 8016012:	4638      	mov	r0, r7
 8016014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016016:	bf00      	nop
 8016018:	0801833c 	.word	0x0801833c
 801601c:	0801835c 	.word	0x0801835c
 8016020:	0801831c 	.word	0x0801831c

08016024 <_write_r>:
 8016024:	b538      	push	{r3, r4, r5, lr}
 8016026:	4c07      	ldr	r4, [pc, #28]	; (8016044 <_write_r+0x20>)
 8016028:	4605      	mov	r5, r0
 801602a:	4608      	mov	r0, r1
 801602c:	4611      	mov	r1, r2
 801602e:	2200      	movs	r2, #0
 8016030:	6022      	str	r2, [r4, #0]
 8016032:	461a      	mov	r2, r3
 8016034:	f7eb fc5b 	bl	80018ee <_write>
 8016038:	1c43      	adds	r3, r0, #1
 801603a:	d102      	bne.n	8016042 <_write_r+0x1e>
 801603c:	6823      	ldr	r3, [r4, #0]
 801603e:	b103      	cbz	r3, 8016042 <_write_r+0x1e>
 8016040:	602b      	str	r3, [r5, #0]
 8016042:	bd38      	pop	{r3, r4, r5, pc}
 8016044:	2000c390 	.word	0x2000c390

08016048 <__swsetup_r>:
 8016048:	4b32      	ldr	r3, [pc, #200]	; (8016114 <__swsetup_r+0xcc>)
 801604a:	b570      	push	{r4, r5, r6, lr}
 801604c:	681d      	ldr	r5, [r3, #0]
 801604e:	4606      	mov	r6, r0
 8016050:	460c      	mov	r4, r1
 8016052:	b125      	cbz	r5, 801605e <__swsetup_r+0x16>
 8016054:	69ab      	ldr	r3, [r5, #24]
 8016056:	b913      	cbnz	r3, 801605e <__swsetup_r+0x16>
 8016058:	4628      	mov	r0, r5
 801605a:	f7ff f879 	bl	8015150 <__sinit>
 801605e:	4b2e      	ldr	r3, [pc, #184]	; (8016118 <__swsetup_r+0xd0>)
 8016060:	429c      	cmp	r4, r3
 8016062:	d10f      	bne.n	8016084 <__swsetup_r+0x3c>
 8016064:	686c      	ldr	r4, [r5, #4]
 8016066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801606a:	b29a      	uxth	r2, r3
 801606c:	0715      	lsls	r5, r2, #28
 801606e:	d42c      	bmi.n	80160ca <__swsetup_r+0x82>
 8016070:	06d0      	lsls	r0, r2, #27
 8016072:	d411      	bmi.n	8016098 <__swsetup_r+0x50>
 8016074:	2209      	movs	r2, #9
 8016076:	6032      	str	r2, [r6, #0]
 8016078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801607c:	81a3      	strh	r3, [r4, #12]
 801607e:	f04f 30ff 	mov.w	r0, #4294967295
 8016082:	e03e      	b.n	8016102 <__swsetup_r+0xba>
 8016084:	4b25      	ldr	r3, [pc, #148]	; (801611c <__swsetup_r+0xd4>)
 8016086:	429c      	cmp	r4, r3
 8016088:	d101      	bne.n	801608e <__swsetup_r+0x46>
 801608a:	68ac      	ldr	r4, [r5, #8]
 801608c:	e7eb      	b.n	8016066 <__swsetup_r+0x1e>
 801608e:	4b24      	ldr	r3, [pc, #144]	; (8016120 <__swsetup_r+0xd8>)
 8016090:	429c      	cmp	r4, r3
 8016092:	bf08      	it	eq
 8016094:	68ec      	ldreq	r4, [r5, #12]
 8016096:	e7e6      	b.n	8016066 <__swsetup_r+0x1e>
 8016098:	0751      	lsls	r1, r2, #29
 801609a:	d512      	bpl.n	80160c2 <__swsetup_r+0x7a>
 801609c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801609e:	b141      	cbz	r1, 80160b2 <__swsetup_r+0x6a>
 80160a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80160a4:	4299      	cmp	r1, r3
 80160a6:	d002      	beq.n	80160ae <__swsetup_r+0x66>
 80160a8:	4630      	mov	r0, r6
 80160aa:	f7ff fbdb 	bl	8015864 <_free_r>
 80160ae:	2300      	movs	r3, #0
 80160b0:	6363      	str	r3, [r4, #52]	; 0x34
 80160b2:	89a3      	ldrh	r3, [r4, #12]
 80160b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80160b8:	81a3      	strh	r3, [r4, #12]
 80160ba:	2300      	movs	r3, #0
 80160bc:	6063      	str	r3, [r4, #4]
 80160be:	6923      	ldr	r3, [r4, #16]
 80160c0:	6023      	str	r3, [r4, #0]
 80160c2:	89a3      	ldrh	r3, [r4, #12]
 80160c4:	f043 0308 	orr.w	r3, r3, #8
 80160c8:	81a3      	strh	r3, [r4, #12]
 80160ca:	6923      	ldr	r3, [r4, #16]
 80160cc:	b94b      	cbnz	r3, 80160e2 <__swsetup_r+0x9a>
 80160ce:	89a3      	ldrh	r3, [r4, #12]
 80160d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80160d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80160d8:	d003      	beq.n	80160e2 <__swsetup_r+0x9a>
 80160da:	4621      	mov	r1, r4
 80160dc:	4630      	mov	r0, r6
 80160de:	f000 f917 	bl	8016310 <__smakebuf_r>
 80160e2:	89a2      	ldrh	r2, [r4, #12]
 80160e4:	f012 0301 	ands.w	r3, r2, #1
 80160e8:	d00c      	beq.n	8016104 <__swsetup_r+0xbc>
 80160ea:	2300      	movs	r3, #0
 80160ec:	60a3      	str	r3, [r4, #8]
 80160ee:	6963      	ldr	r3, [r4, #20]
 80160f0:	425b      	negs	r3, r3
 80160f2:	61a3      	str	r3, [r4, #24]
 80160f4:	6923      	ldr	r3, [r4, #16]
 80160f6:	b953      	cbnz	r3, 801610e <__swsetup_r+0xc6>
 80160f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80160fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016100:	d1ba      	bne.n	8016078 <__swsetup_r+0x30>
 8016102:	bd70      	pop	{r4, r5, r6, pc}
 8016104:	0792      	lsls	r2, r2, #30
 8016106:	bf58      	it	pl
 8016108:	6963      	ldrpl	r3, [r4, #20]
 801610a:	60a3      	str	r3, [r4, #8]
 801610c:	e7f2      	b.n	80160f4 <__swsetup_r+0xac>
 801610e:	2000      	movs	r0, #0
 8016110:	e7f7      	b.n	8016102 <__swsetup_r+0xba>
 8016112:	bf00      	nop
 8016114:	20001304 	.word	0x20001304
 8016118:	0801833c 	.word	0x0801833c
 801611c:	0801835c 	.word	0x0801835c
 8016120:	0801831c 	.word	0x0801831c

08016124 <_close_r>:
 8016124:	b538      	push	{r3, r4, r5, lr}
 8016126:	4c06      	ldr	r4, [pc, #24]	; (8016140 <_close_r+0x1c>)
 8016128:	2300      	movs	r3, #0
 801612a:	4605      	mov	r5, r0
 801612c:	4608      	mov	r0, r1
 801612e:	6023      	str	r3, [r4, #0]
 8016130:	f7eb fbf9 	bl	8001926 <_close>
 8016134:	1c43      	adds	r3, r0, #1
 8016136:	d102      	bne.n	801613e <_close_r+0x1a>
 8016138:	6823      	ldr	r3, [r4, #0]
 801613a:	b103      	cbz	r3, 801613e <_close_r+0x1a>
 801613c:	602b      	str	r3, [r5, #0]
 801613e:	bd38      	pop	{r3, r4, r5, pc}
 8016140:	2000c390 	.word	0x2000c390

08016144 <__sflush_r>:
 8016144:	898a      	ldrh	r2, [r1, #12]
 8016146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801614a:	4605      	mov	r5, r0
 801614c:	0710      	lsls	r0, r2, #28
 801614e:	460c      	mov	r4, r1
 8016150:	d458      	bmi.n	8016204 <__sflush_r+0xc0>
 8016152:	684b      	ldr	r3, [r1, #4]
 8016154:	2b00      	cmp	r3, #0
 8016156:	dc05      	bgt.n	8016164 <__sflush_r+0x20>
 8016158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801615a:	2b00      	cmp	r3, #0
 801615c:	dc02      	bgt.n	8016164 <__sflush_r+0x20>
 801615e:	2000      	movs	r0, #0
 8016160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016166:	2e00      	cmp	r6, #0
 8016168:	d0f9      	beq.n	801615e <__sflush_r+0x1a>
 801616a:	2300      	movs	r3, #0
 801616c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016170:	682f      	ldr	r7, [r5, #0]
 8016172:	6a21      	ldr	r1, [r4, #32]
 8016174:	602b      	str	r3, [r5, #0]
 8016176:	d032      	beq.n	80161de <__sflush_r+0x9a>
 8016178:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801617a:	89a3      	ldrh	r3, [r4, #12]
 801617c:	075a      	lsls	r2, r3, #29
 801617e:	d505      	bpl.n	801618c <__sflush_r+0x48>
 8016180:	6863      	ldr	r3, [r4, #4]
 8016182:	1ac0      	subs	r0, r0, r3
 8016184:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016186:	b10b      	cbz	r3, 801618c <__sflush_r+0x48>
 8016188:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801618a:	1ac0      	subs	r0, r0, r3
 801618c:	2300      	movs	r3, #0
 801618e:	4602      	mov	r2, r0
 8016190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016192:	6a21      	ldr	r1, [r4, #32]
 8016194:	4628      	mov	r0, r5
 8016196:	47b0      	blx	r6
 8016198:	1c43      	adds	r3, r0, #1
 801619a:	89a3      	ldrh	r3, [r4, #12]
 801619c:	d106      	bne.n	80161ac <__sflush_r+0x68>
 801619e:	6829      	ldr	r1, [r5, #0]
 80161a0:	291d      	cmp	r1, #29
 80161a2:	d848      	bhi.n	8016236 <__sflush_r+0xf2>
 80161a4:	4a29      	ldr	r2, [pc, #164]	; (801624c <__sflush_r+0x108>)
 80161a6:	40ca      	lsrs	r2, r1
 80161a8:	07d6      	lsls	r6, r2, #31
 80161aa:	d544      	bpl.n	8016236 <__sflush_r+0xf2>
 80161ac:	2200      	movs	r2, #0
 80161ae:	6062      	str	r2, [r4, #4]
 80161b0:	04d9      	lsls	r1, r3, #19
 80161b2:	6922      	ldr	r2, [r4, #16]
 80161b4:	6022      	str	r2, [r4, #0]
 80161b6:	d504      	bpl.n	80161c2 <__sflush_r+0x7e>
 80161b8:	1c42      	adds	r2, r0, #1
 80161ba:	d101      	bne.n	80161c0 <__sflush_r+0x7c>
 80161bc:	682b      	ldr	r3, [r5, #0]
 80161be:	b903      	cbnz	r3, 80161c2 <__sflush_r+0x7e>
 80161c0:	6560      	str	r0, [r4, #84]	; 0x54
 80161c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80161c4:	602f      	str	r7, [r5, #0]
 80161c6:	2900      	cmp	r1, #0
 80161c8:	d0c9      	beq.n	801615e <__sflush_r+0x1a>
 80161ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80161ce:	4299      	cmp	r1, r3
 80161d0:	d002      	beq.n	80161d8 <__sflush_r+0x94>
 80161d2:	4628      	mov	r0, r5
 80161d4:	f7ff fb46 	bl	8015864 <_free_r>
 80161d8:	2000      	movs	r0, #0
 80161da:	6360      	str	r0, [r4, #52]	; 0x34
 80161dc:	e7c0      	b.n	8016160 <__sflush_r+0x1c>
 80161de:	2301      	movs	r3, #1
 80161e0:	4628      	mov	r0, r5
 80161e2:	47b0      	blx	r6
 80161e4:	1c41      	adds	r1, r0, #1
 80161e6:	d1c8      	bne.n	801617a <__sflush_r+0x36>
 80161e8:	682b      	ldr	r3, [r5, #0]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d0c5      	beq.n	801617a <__sflush_r+0x36>
 80161ee:	2b1d      	cmp	r3, #29
 80161f0:	d001      	beq.n	80161f6 <__sflush_r+0xb2>
 80161f2:	2b16      	cmp	r3, #22
 80161f4:	d101      	bne.n	80161fa <__sflush_r+0xb6>
 80161f6:	602f      	str	r7, [r5, #0]
 80161f8:	e7b1      	b.n	801615e <__sflush_r+0x1a>
 80161fa:	89a3      	ldrh	r3, [r4, #12]
 80161fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016200:	81a3      	strh	r3, [r4, #12]
 8016202:	e7ad      	b.n	8016160 <__sflush_r+0x1c>
 8016204:	690f      	ldr	r7, [r1, #16]
 8016206:	2f00      	cmp	r7, #0
 8016208:	d0a9      	beq.n	801615e <__sflush_r+0x1a>
 801620a:	0793      	lsls	r3, r2, #30
 801620c:	680e      	ldr	r6, [r1, #0]
 801620e:	bf08      	it	eq
 8016210:	694b      	ldreq	r3, [r1, #20]
 8016212:	600f      	str	r7, [r1, #0]
 8016214:	bf18      	it	ne
 8016216:	2300      	movne	r3, #0
 8016218:	eba6 0807 	sub.w	r8, r6, r7
 801621c:	608b      	str	r3, [r1, #8]
 801621e:	f1b8 0f00 	cmp.w	r8, #0
 8016222:	dd9c      	ble.n	801615e <__sflush_r+0x1a>
 8016224:	4643      	mov	r3, r8
 8016226:	463a      	mov	r2, r7
 8016228:	6a21      	ldr	r1, [r4, #32]
 801622a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801622c:	4628      	mov	r0, r5
 801622e:	47b0      	blx	r6
 8016230:	2800      	cmp	r0, #0
 8016232:	dc06      	bgt.n	8016242 <__sflush_r+0xfe>
 8016234:	89a3      	ldrh	r3, [r4, #12]
 8016236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801623a:	81a3      	strh	r3, [r4, #12]
 801623c:	f04f 30ff 	mov.w	r0, #4294967295
 8016240:	e78e      	b.n	8016160 <__sflush_r+0x1c>
 8016242:	4407      	add	r7, r0
 8016244:	eba8 0800 	sub.w	r8, r8, r0
 8016248:	e7e9      	b.n	801621e <__sflush_r+0xda>
 801624a:	bf00      	nop
 801624c:	20400001 	.word	0x20400001

08016250 <_fflush_r>:
 8016250:	b538      	push	{r3, r4, r5, lr}
 8016252:	690b      	ldr	r3, [r1, #16]
 8016254:	4605      	mov	r5, r0
 8016256:	460c      	mov	r4, r1
 8016258:	b1db      	cbz	r3, 8016292 <_fflush_r+0x42>
 801625a:	b118      	cbz	r0, 8016264 <_fflush_r+0x14>
 801625c:	6983      	ldr	r3, [r0, #24]
 801625e:	b90b      	cbnz	r3, 8016264 <_fflush_r+0x14>
 8016260:	f7fe ff76 	bl	8015150 <__sinit>
 8016264:	4b0c      	ldr	r3, [pc, #48]	; (8016298 <_fflush_r+0x48>)
 8016266:	429c      	cmp	r4, r3
 8016268:	d109      	bne.n	801627e <_fflush_r+0x2e>
 801626a:	686c      	ldr	r4, [r5, #4]
 801626c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016270:	b17b      	cbz	r3, 8016292 <_fflush_r+0x42>
 8016272:	4621      	mov	r1, r4
 8016274:	4628      	mov	r0, r5
 8016276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801627a:	f7ff bf63 	b.w	8016144 <__sflush_r>
 801627e:	4b07      	ldr	r3, [pc, #28]	; (801629c <_fflush_r+0x4c>)
 8016280:	429c      	cmp	r4, r3
 8016282:	d101      	bne.n	8016288 <_fflush_r+0x38>
 8016284:	68ac      	ldr	r4, [r5, #8]
 8016286:	e7f1      	b.n	801626c <_fflush_r+0x1c>
 8016288:	4b05      	ldr	r3, [pc, #20]	; (80162a0 <_fflush_r+0x50>)
 801628a:	429c      	cmp	r4, r3
 801628c:	bf08      	it	eq
 801628e:	68ec      	ldreq	r4, [r5, #12]
 8016290:	e7ec      	b.n	801626c <_fflush_r+0x1c>
 8016292:	2000      	movs	r0, #0
 8016294:	bd38      	pop	{r3, r4, r5, pc}
 8016296:	bf00      	nop
 8016298:	0801833c 	.word	0x0801833c
 801629c:	0801835c 	.word	0x0801835c
 80162a0:	0801831c 	.word	0x0801831c

080162a4 <_lseek_r>:
 80162a4:	b538      	push	{r3, r4, r5, lr}
 80162a6:	4c07      	ldr	r4, [pc, #28]	; (80162c4 <_lseek_r+0x20>)
 80162a8:	4605      	mov	r5, r0
 80162aa:	4608      	mov	r0, r1
 80162ac:	4611      	mov	r1, r2
 80162ae:	2200      	movs	r2, #0
 80162b0:	6022      	str	r2, [r4, #0]
 80162b2:	461a      	mov	r2, r3
 80162b4:	f7eb fb5e 	bl	8001974 <_lseek>
 80162b8:	1c43      	adds	r3, r0, #1
 80162ba:	d102      	bne.n	80162c2 <_lseek_r+0x1e>
 80162bc:	6823      	ldr	r3, [r4, #0]
 80162be:	b103      	cbz	r3, 80162c2 <_lseek_r+0x1e>
 80162c0:	602b      	str	r3, [r5, #0]
 80162c2:	bd38      	pop	{r3, r4, r5, pc}
 80162c4:	2000c390 	.word	0x2000c390

080162c8 <__swhatbuf_r>:
 80162c8:	b570      	push	{r4, r5, r6, lr}
 80162ca:	460e      	mov	r6, r1
 80162cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162d0:	2900      	cmp	r1, #0
 80162d2:	b096      	sub	sp, #88	; 0x58
 80162d4:	4614      	mov	r4, r2
 80162d6:	461d      	mov	r5, r3
 80162d8:	da07      	bge.n	80162ea <__swhatbuf_r+0x22>
 80162da:	2300      	movs	r3, #0
 80162dc:	602b      	str	r3, [r5, #0]
 80162de:	89b3      	ldrh	r3, [r6, #12]
 80162e0:	061a      	lsls	r2, r3, #24
 80162e2:	d410      	bmi.n	8016306 <__swhatbuf_r+0x3e>
 80162e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80162e8:	e00e      	b.n	8016308 <__swhatbuf_r+0x40>
 80162ea:	466a      	mov	r2, sp
 80162ec:	f000 f8c4 	bl	8016478 <_fstat_r>
 80162f0:	2800      	cmp	r0, #0
 80162f2:	dbf2      	blt.n	80162da <__swhatbuf_r+0x12>
 80162f4:	9a01      	ldr	r2, [sp, #4]
 80162f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80162fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80162fe:	425a      	negs	r2, r3
 8016300:	415a      	adcs	r2, r3
 8016302:	602a      	str	r2, [r5, #0]
 8016304:	e7ee      	b.n	80162e4 <__swhatbuf_r+0x1c>
 8016306:	2340      	movs	r3, #64	; 0x40
 8016308:	2000      	movs	r0, #0
 801630a:	6023      	str	r3, [r4, #0]
 801630c:	b016      	add	sp, #88	; 0x58
 801630e:	bd70      	pop	{r4, r5, r6, pc}

08016310 <__smakebuf_r>:
 8016310:	898b      	ldrh	r3, [r1, #12]
 8016312:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016314:	079d      	lsls	r5, r3, #30
 8016316:	4606      	mov	r6, r0
 8016318:	460c      	mov	r4, r1
 801631a:	d507      	bpl.n	801632c <__smakebuf_r+0x1c>
 801631c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016320:	6023      	str	r3, [r4, #0]
 8016322:	6123      	str	r3, [r4, #16]
 8016324:	2301      	movs	r3, #1
 8016326:	6163      	str	r3, [r4, #20]
 8016328:	b002      	add	sp, #8
 801632a:	bd70      	pop	{r4, r5, r6, pc}
 801632c:	ab01      	add	r3, sp, #4
 801632e:	466a      	mov	r2, sp
 8016330:	f7ff ffca 	bl	80162c8 <__swhatbuf_r>
 8016334:	9900      	ldr	r1, [sp, #0]
 8016336:	4605      	mov	r5, r0
 8016338:	4630      	mov	r0, r6
 801633a:	f7ff fae1 	bl	8015900 <_malloc_r>
 801633e:	b948      	cbnz	r0, 8016354 <__smakebuf_r+0x44>
 8016340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016344:	059a      	lsls	r2, r3, #22
 8016346:	d4ef      	bmi.n	8016328 <__smakebuf_r+0x18>
 8016348:	f023 0303 	bic.w	r3, r3, #3
 801634c:	f043 0302 	orr.w	r3, r3, #2
 8016350:	81a3      	strh	r3, [r4, #12]
 8016352:	e7e3      	b.n	801631c <__smakebuf_r+0xc>
 8016354:	4b0d      	ldr	r3, [pc, #52]	; (801638c <__smakebuf_r+0x7c>)
 8016356:	62b3      	str	r3, [r6, #40]	; 0x28
 8016358:	89a3      	ldrh	r3, [r4, #12]
 801635a:	6020      	str	r0, [r4, #0]
 801635c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016360:	81a3      	strh	r3, [r4, #12]
 8016362:	9b00      	ldr	r3, [sp, #0]
 8016364:	6163      	str	r3, [r4, #20]
 8016366:	9b01      	ldr	r3, [sp, #4]
 8016368:	6120      	str	r0, [r4, #16]
 801636a:	b15b      	cbz	r3, 8016384 <__smakebuf_r+0x74>
 801636c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016370:	4630      	mov	r0, r6
 8016372:	f000 f893 	bl	801649c <_isatty_r>
 8016376:	b128      	cbz	r0, 8016384 <__smakebuf_r+0x74>
 8016378:	89a3      	ldrh	r3, [r4, #12]
 801637a:	f023 0303 	bic.w	r3, r3, #3
 801637e:	f043 0301 	orr.w	r3, r3, #1
 8016382:	81a3      	strh	r3, [r4, #12]
 8016384:	89a3      	ldrh	r3, [r4, #12]
 8016386:	431d      	orrs	r5, r3
 8016388:	81a5      	strh	r5, [r4, #12]
 801638a:	e7cd      	b.n	8016328 <__smakebuf_r+0x18>
 801638c:	08015119 	.word	0x08015119

08016390 <__ascii_mbtowc>:
 8016390:	b082      	sub	sp, #8
 8016392:	b901      	cbnz	r1, 8016396 <__ascii_mbtowc+0x6>
 8016394:	a901      	add	r1, sp, #4
 8016396:	b142      	cbz	r2, 80163aa <__ascii_mbtowc+0x1a>
 8016398:	b14b      	cbz	r3, 80163ae <__ascii_mbtowc+0x1e>
 801639a:	7813      	ldrb	r3, [r2, #0]
 801639c:	600b      	str	r3, [r1, #0]
 801639e:	7812      	ldrb	r2, [r2, #0]
 80163a0:	1c10      	adds	r0, r2, #0
 80163a2:	bf18      	it	ne
 80163a4:	2001      	movne	r0, #1
 80163a6:	b002      	add	sp, #8
 80163a8:	4770      	bx	lr
 80163aa:	4610      	mov	r0, r2
 80163ac:	e7fb      	b.n	80163a6 <__ascii_mbtowc+0x16>
 80163ae:	f06f 0001 	mvn.w	r0, #1
 80163b2:	e7f8      	b.n	80163a6 <__ascii_mbtowc+0x16>

080163b4 <memmove>:
 80163b4:	4288      	cmp	r0, r1
 80163b6:	b510      	push	{r4, lr}
 80163b8:	eb01 0302 	add.w	r3, r1, r2
 80163bc:	d807      	bhi.n	80163ce <memmove+0x1a>
 80163be:	1e42      	subs	r2, r0, #1
 80163c0:	4299      	cmp	r1, r3
 80163c2:	d00a      	beq.n	80163da <memmove+0x26>
 80163c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80163c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80163cc:	e7f8      	b.n	80163c0 <memmove+0xc>
 80163ce:	4283      	cmp	r3, r0
 80163d0:	d9f5      	bls.n	80163be <memmove+0xa>
 80163d2:	1881      	adds	r1, r0, r2
 80163d4:	1ad2      	subs	r2, r2, r3
 80163d6:	42d3      	cmn	r3, r2
 80163d8:	d100      	bne.n	80163dc <memmove+0x28>
 80163da:	bd10      	pop	{r4, pc}
 80163dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80163e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80163e4:	e7f7      	b.n	80163d6 <memmove+0x22>

080163e6 <__malloc_lock>:
 80163e6:	4770      	bx	lr

080163e8 <__malloc_unlock>:
 80163e8:	4770      	bx	lr

080163ea <_realloc_r>:
 80163ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163ec:	4607      	mov	r7, r0
 80163ee:	4614      	mov	r4, r2
 80163f0:	460e      	mov	r6, r1
 80163f2:	b921      	cbnz	r1, 80163fe <_realloc_r+0x14>
 80163f4:	4611      	mov	r1, r2
 80163f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80163fa:	f7ff ba81 	b.w	8015900 <_malloc_r>
 80163fe:	b922      	cbnz	r2, 801640a <_realloc_r+0x20>
 8016400:	f7ff fa30 	bl	8015864 <_free_r>
 8016404:	4625      	mov	r5, r4
 8016406:	4628      	mov	r0, r5
 8016408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801640a:	f000 f857 	bl	80164bc <_malloc_usable_size_r>
 801640e:	42a0      	cmp	r0, r4
 8016410:	d20f      	bcs.n	8016432 <_realloc_r+0x48>
 8016412:	4621      	mov	r1, r4
 8016414:	4638      	mov	r0, r7
 8016416:	f7ff fa73 	bl	8015900 <_malloc_r>
 801641a:	4605      	mov	r5, r0
 801641c:	2800      	cmp	r0, #0
 801641e:	d0f2      	beq.n	8016406 <_realloc_r+0x1c>
 8016420:	4631      	mov	r1, r6
 8016422:	4622      	mov	r2, r4
 8016424:	f7fd fb66 	bl	8013af4 <memcpy>
 8016428:	4631      	mov	r1, r6
 801642a:	4638      	mov	r0, r7
 801642c:	f7ff fa1a 	bl	8015864 <_free_r>
 8016430:	e7e9      	b.n	8016406 <_realloc_r+0x1c>
 8016432:	4635      	mov	r5, r6
 8016434:	e7e7      	b.n	8016406 <_realloc_r+0x1c>
	...

08016438 <_read_r>:
 8016438:	b538      	push	{r3, r4, r5, lr}
 801643a:	4c07      	ldr	r4, [pc, #28]	; (8016458 <_read_r+0x20>)
 801643c:	4605      	mov	r5, r0
 801643e:	4608      	mov	r0, r1
 8016440:	4611      	mov	r1, r2
 8016442:	2200      	movs	r2, #0
 8016444:	6022      	str	r2, [r4, #0]
 8016446:	461a      	mov	r2, r3
 8016448:	f7eb fa34 	bl	80018b4 <_read>
 801644c:	1c43      	adds	r3, r0, #1
 801644e:	d102      	bne.n	8016456 <_read_r+0x1e>
 8016450:	6823      	ldr	r3, [r4, #0]
 8016452:	b103      	cbz	r3, 8016456 <_read_r+0x1e>
 8016454:	602b      	str	r3, [r5, #0]
 8016456:	bd38      	pop	{r3, r4, r5, pc}
 8016458:	2000c390 	.word	0x2000c390

0801645c <__ascii_wctomb>:
 801645c:	b149      	cbz	r1, 8016472 <__ascii_wctomb+0x16>
 801645e:	2aff      	cmp	r2, #255	; 0xff
 8016460:	bf85      	ittet	hi
 8016462:	238a      	movhi	r3, #138	; 0x8a
 8016464:	6003      	strhi	r3, [r0, #0]
 8016466:	700a      	strbls	r2, [r1, #0]
 8016468:	f04f 30ff 	movhi.w	r0, #4294967295
 801646c:	bf98      	it	ls
 801646e:	2001      	movls	r0, #1
 8016470:	4770      	bx	lr
 8016472:	4608      	mov	r0, r1
 8016474:	4770      	bx	lr
	...

08016478 <_fstat_r>:
 8016478:	b538      	push	{r3, r4, r5, lr}
 801647a:	4c07      	ldr	r4, [pc, #28]	; (8016498 <_fstat_r+0x20>)
 801647c:	2300      	movs	r3, #0
 801647e:	4605      	mov	r5, r0
 8016480:	4608      	mov	r0, r1
 8016482:	4611      	mov	r1, r2
 8016484:	6023      	str	r3, [r4, #0]
 8016486:	f7eb fa5a 	bl	800193e <_fstat>
 801648a:	1c43      	adds	r3, r0, #1
 801648c:	d102      	bne.n	8016494 <_fstat_r+0x1c>
 801648e:	6823      	ldr	r3, [r4, #0]
 8016490:	b103      	cbz	r3, 8016494 <_fstat_r+0x1c>
 8016492:	602b      	str	r3, [r5, #0]
 8016494:	bd38      	pop	{r3, r4, r5, pc}
 8016496:	bf00      	nop
 8016498:	2000c390 	.word	0x2000c390

0801649c <_isatty_r>:
 801649c:	b538      	push	{r3, r4, r5, lr}
 801649e:	4c06      	ldr	r4, [pc, #24]	; (80164b8 <_isatty_r+0x1c>)
 80164a0:	2300      	movs	r3, #0
 80164a2:	4605      	mov	r5, r0
 80164a4:	4608      	mov	r0, r1
 80164a6:	6023      	str	r3, [r4, #0]
 80164a8:	f7eb fa59 	bl	800195e <_isatty>
 80164ac:	1c43      	adds	r3, r0, #1
 80164ae:	d102      	bne.n	80164b6 <_isatty_r+0x1a>
 80164b0:	6823      	ldr	r3, [r4, #0]
 80164b2:	b103      	cbz	r3, 80164b6 <_isatty_r+0x1a>
 80164b4:	602b      	str	r3, [r5, #0]
 80164b6:	bd38      	pop	{r3, r4, r5, pc}
 80164b8:	2000c390 	.word	0x2000c390

080164bc <_malloc_usable_size_r>:
 80164bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80164c0:	1f18      	subs	r0, r3, #4
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	bfbc      	itt	lt
 80164c6:	580b      	ldrlt	r3, [r1, r0]
 80164c8:	18c0      	addlt	r0, r0, r3
 80164ca:	4770      	bx	lr

080164cc <cosf>:
 80164cc:	ee10 3a10 	vmov	r3, s0
 80164d0:	b507      	push	{r0, r1, r2, lr}
 80164d2:	4a1c      	ldr	r2, [pc, #112]	; (8016544 <cosf+0x78>)
 80164d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80164d8:	4293      	cmp	r3, r2
 80164da:	dc04      	bgt.n	80164e6 <cosf+0x1a>
 80164dc:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8016548 <cosf+0x7c>
 80164e0:	f000 ff30 	bl	8017344 <__kernel_cosf>
 80164e4:	e004      	b.n	80164f0 <cosf+0x24>
 80164e6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80164ea:	db04      	blt.n	80164f6 <cosf+0x2a>
 80164ec:	ee30 0a40 	vsub.f32	s0, s0, s0
 80164f0:	b003      	add	sp, #12
 80164f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80164f6:	4668      	mov	r0, sp
 80164f8:	f000 fdf4 	bl	80170e4 <__ieee754_rem_pio2f>
 80164fc:	f000 0003 	and.w	r0, r0, #3
 8016500:	2801      	cmp	r0, #1
 8016502:	d007      	beq.n	8016514 <cosf+0x48>
 8016504:	2802      	cmp	r0, #2
 8016506:	d00e      	beq.n	8016526 <cosf+0x5a>
 8016508:	b9a0      	cbnz	r0, 8016534 <cosf+0x68>
 801650a:	eddd 0a01 	vldr	s1, [sp, #4]
 801650e:	ed9d 0a00 	vldr	s0, [sp]
 8016512:	e7e5      	b.n	80164e0 <cosf+0x14>
 8016514:	eddd 0a01 	vldr	s1, [sp, #4]
 8016518:	ed9d 0a00 	vldr	s0, [sp]
 801651c:	f001 f9f2 	bl	8017904 <__kernel_sinf>
 8016520:	eeb1 0a40 	vneg.f32	s0, s0
 8016524:	e7e4      	b.n	80164f0 <cosf+0x24>
 8016526:	eddd 0a01 	vldr	s1, [sp, #4]
 801652a:	ed9d 0a00 	vldr	s0, [sp]
 801652e:	f000 ff09 	bl	8017344 <__kernel_cosf>
 8016532:	e7f5      	b.n	8016520 <cosf+0x54>
 8016534:	2001      	movs	r0, #1
 8016536:	eddd 0a01 	vldr	s1, [sp, #4]
 801653a:	ed9d 0a00 	vldr	s0, [sp]
 801653e:	f001 f9e1 	bl	8017904 <__kernel_sinf>
 8016542:	e7d5      	b.n	80164f0 <cosf+0x24>
 8016544:	3f490fd8 	.word	0x3f490fd8
 8016548:	00000000 	.word	0x00000000

0801654c <roundf>:
 801654c:	ee10 0a10 	vmov	r0, s0
 8016550:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8016554:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8016558:	2a16      	cmp	r2, #22
 801655a:	dc15      	bgt.n	8016588 <roundf+0x3c>
 801655c:	2a00      	cmp	r2, #0
 801655e:	da08      	bge.n	8016572 <roundf+0x26>
 8016560:	3201      	adds	r2, #1
 8016562:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8016566:	d101      	bne.n	801656c <roundf+0x20>
 8016568:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801656c:	ee00 3a10 	vmov	s0, r3
 8016570:	4770      	bx	lr
 8016572:	4908      	ldr	r1, [pc, #32]	; (8016594 <roundf+0x48>)
 8016574:	4111      	asrs	r1, r2
 8016576:	4208      	tst	r0, r1
 8016578:	d0fa      	beq.n	8016570 <roundf+0x24>
 801657a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801657e:	4113      	asrs	r3, r2
 8016580:	4403      	add	r3, r0
 8016582:	ea23 0301 	bic.w	r3, r3, r1
 8016586:	e7f1      	b.n	801656c <roundf+0x20>
 8016588:	2a80      	cmp	r2, #128	; 0x80
 801658a:	d1f1      	bne.n	8016570 <roundf+0x24>
 801658c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016590:	4770      	bx	lr
 8016592:	bf00      	nop
 8016594:	007fffff 	.word	0x007fffff

08016598 <asin>:
 8016598:	b5f0      	push	{r4, r5, r6, r7, lr}
 801659a:	ed2d 8b02 	vpush	{d8}
 801659e:	4e26      	ldr	r6, [pc, #152]	; (8016638 <asin+0xa0>)
 80165a0:	b08b      	sub	sp, #44	; 0x2c
 80165a2:	ec55 4b10 	vmov	r4, r5, d0
 80165a6:	f000 f903 	bl	80167b0 <__ieee754_asin>
 80165aa:	f996 3000 	ldrsb.w	r3, [r6]
 80165ae:	eeb0 8a40 	vmov.f32	s16, s0
 80165b2:	eef0 8a60 	vmov.f32	s17, s1
 80165b6:	3301      	adds	r3, #1
 80165b8:	d036      	beq.n	8016628 <asin+0x90>
 80165ba:	4622      	mov	r2, r4
 80165bc:	462b      	mov	r3, r5
 80165be:	4620      	mov	r0, r4
 80165c0:	4629      	mov	r1, r5
 80165c2:	f7ea fabb 	bl	8000b3c <__aeabi_dcmpun>
 80165c6:	4607      	mov	r7, r0
 80165c8:	bb70      	cbnz	r0, 8016628 <asin+0x90>
 80165ca:	ec45 4b10 	vmov	d0, r4, r5
 80165ce:	f001 fb83 	bl	8017cd8 <fabs>
 80165d2:	2200      	movs	r2, #0
 80165d4:	4b19      	ldr	r3, [pc, #100]	; (801663c <asin+0xa4>)
 80165d6:	ec51 0b10 	vmov	r0, r1, d0
 80165da:	f7ea faa5 	bl	8000b28 <__aeabi_dcmpgt>
 80165de:	b318      	cbz	r0, 8016628 <asin+0x90>
 80165e0:	2301      	movs	r3, #1
 80165e2:	9300      	str	r3, [sp, #0]
 80165e4:	4816      	ldr	r0, [pc, #88]	; (8016640 <asin+0xa8>)
 80165e6:	4b17      	ldr	r3, [pc, #92]	; (8016644 <asin+0xac>)
 80165e8:	9301      	str	r3, [sp, #4]
 80165ea:	9708      	str	r7, [sp, #32]
 80165ec:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80165f0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80165f4:	f001 fb7c 	bl	8017cf0 <nan>
 80165f8:	f996 3000 	ldrsb.w	r3, [r6]
 80165fc:	2b02      	cmp	r3, #2
 80165fe:	ed8d 0b06 	vstr	d0, [sp, #24]
 8016602:	d104      	bne.n	801660e <asin+0x76>
 8016604:	f7fd fa4c 	bl	8013aa0 <__errno>
 8016608:	2321      	movs	r3, #33	; 0x21
 801660a:	6003      	str	r3, [r0, #0]
 801660c:	e004      	b.n	8016618 <asin+0x80>
 801660e:	4668      	mov	r0, sp
 8016610:	f001 fb6b 	bl	8017cea <matherr>
 8016614:	2800      	cmp	r0, #0
 8016616:	d0f5      	beq.n	8016604 <asin+0x6c>
 8016618:	9b08      	ldr	r3, [sp, #32]
 801661a:	b11b      	cbz	r3, 8016624 <asin+0x8c>
 801661c:	f7fd fa40 	bl	8013aa0 <__errno>
 8016620:	9b08      	ldr	r3, [sp, #32]
 8016622:	6003      	str	r3, [r0, #0]
 8016624:	ed9d 8b06 	vldr	d8, [sp, #24]
 8016628:	eeb0 0a48 	vmov.f32	s0, s16
 801662c:	eef0 0a68 	vmov.f32	s1, s17
 8016630:	b00b      	add	sp, #44	; 0x2c
 8016632:	ecbd 8b02 	vpop	{d8}
 8016636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016638:	200014d4 	.word	0x200014d4
 801663c:	3ff00000 	.word	0x3ff00000
 8016640:	08018481 	.word	0x08018481
 8016644:	08018598 	.word	0x08018598

08016648 <atan2>:
 8016648:	f000 bac2 	b.w	8016bd0 <__ieee754_atan2>

0801664c <sqrt>:
 801664c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016650:	ed2d 8b02 	vpush	{d8}
 8016654:	b08b      	sub	sp, #44	; 0x2c
 8016656:	ec55 4b10 	vmov	r4, r5, d0
 801665a:	f000 fb97 	bl	8016d8c <__ieee754_sqrt>
 801665e:	4b26      	ldr	r3, [pc, #152]	; (80166f8 <sqrt+0xac>)
 8016660:	eeb0 8a40 	vmov.f32	s16, s0
 8016664:	eef0 8a60 	vmov.f32	s17, s1
 8016668:	f993 6000 	ldrsb.w	r6, [r3]
 801666c:	1c73      	adds	r3, r6, #1
 801666e:	d02a      	beq.n	80166c6 <sqrt+0x7a>
 8016670:	4622      	mov	r2, r4
 8016672:	462b      	mov	r3, r5
 8016674:	4620      	mov	r0, r4
 8016676:	4629      	mov	r1, r5
 8016678:	f7ea fa60 	bl	8000b3c <__aeabi_dcmpun>
 801667c:	4607      	mov	r7, r0
 801667e:	bb10      	cbnz	r0, 80166c6 <sqrt+0x7a>
 8016680:	f04f 0800 	mov.w	r8, #0
 8016684:	f04f 0900 	mov.w	r9, #0
 8016688:	4642      	mov	r2, r8
 801668a:	464b      	mov	r3, r9
 801668c:	4620      	mov	r0, r4
 801668e:	4629      	mov	r1, r5
 8016690:	f7ea fa2c 	bl	8000aec <__aeabi_dcmplt>
 8016694:	b1b8      	cbz	r0, 80166c6 <sqrt+0x7a>
 8016696:	2301      	movs	r3, #1
 8016698:	9300      	str	r3, [sp, #0]
 801669a:	4b18      	ldr	r3, [pc, #96]	; (80166fc <sqrt+0xb0>)
 801669c:	9301      	str	r3, [sp, #4]
 801669e:	9708      	str	r7, [sp, #32]
 80166a0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80166a4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80166a8:	b9b6      	cbnz	r6, 80166d8 <sqrt+0x8c>
 80166aa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80166ae:	4668      	mov	r0, sp
 80166b0:	f001 fb1b 	bl	8017cea <matherr>
 80166b4:	b1d0      	cbz	r0, 80166ec <sqrt+0xa0>
 80166b6:	9b08      	ldr	r3, [sp, #32]
 80166b8:	b11b      	cbz	r3, 80166c2 <sqrt+0x76>
 80166ba:	f7fd f9f1 	bl	8013aa0 <__errno>
 80166be:	9b08      	ldr	r3, [sp, #32]
 80166c0:	6003      	str	r3, [r0, #0]
 80166c2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80166c6:	eeb0 0a48 	vmov.f32	s0, s16
 80166ca:	eef0 0a68 	vmov.f32	s1, s17
 80166ce:	b00b      	add	sp, #44	; 0x2c
 80166d0:	ecbd 8b02 	vpop	{d8}
 80166d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166d8:	4642      	mov	r2, r8
 80166da:	464b      	mov	r3, r9
 80166dc:	4640      	mov	r0, r8
 80166de:	4649      	mov	r1, r9
 80166e0:	f7ea f8bc 	bl	800085c <__aeabi_ddiv>
 80166e4:	2e02      	cmp	r6, #2
 80166e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80166ea:	d1e0      	bne.n	80166ae <sqrt+0x62>
 80166ec:	f7fd f9d8 	bl	8013aa0 <__errno>
 80166f0:	2321      	movs	r3, #33	; 0x21
 80166f2:	6003      	str	r3, [r0, #0]
 80166f4:	e7df      	b.n	80166b6 <sqrt+0x6a>
 80166f6:	bf00      	nop
 80166f8:	200014d4 	.word	0x200014d4
 80166fc:	0801859d 	.word	0x0801859d

08016700 <acosf>:
 8016700:	b510      	push	{r4, lr}
 8016702:	ed2d 8b02 	vpush	{d8}
 8016706:	4c27      	ldr	r4, [pc, #156]	; (80167a4 <acosf+0xa4>)
 8016708:	b08a      	sub	sp, #40	; 0x28
 801670a:	eeb0 8a40 	vmov.f32	s16, s0
 801670e:	f000 fbed 	bl	8016eec <__ieee754_acosf>
 8016712:	f994 3000 	ldrsb.w	r3, [r4]
 8016716:	3301      	adds	r3, #1
 8016718:	eef0 8a40 	vmov.f32	s17, s0
 801671c:	d03c      	beq.n	8016798 <acosf+0x98>
 801671e:	eeb4 8a48 	vcmp.f32	s16, s16
 8016722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016726:	d637      	bvs.n	8016798 <acosf+0x98>
 8016728:	eeb0 0a48 	vmov.f32	s0, s16
 801672c:	f001 fae8 	bl	8017d00 <fabsf>
 8016730:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016734:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801673c:	dd2c      	ble.n	8016798 <acosf+0x98>
 801673e:	2301      	movs	r3, #1
 8016740:	9300      	str	r3, [sp, #0]
 8016742:	4b19      	ldr	r3, [pc, #100]	; (80167a8 <acosf+0xa8>)
 8016744:	9301      	str	r3, [sp, #4]
 8016746:	ee18 0a10 	vmov	r0, s16
 801674a:	2300      	movs	r3, #0
 801674c:	9308      	str	r3, [sp, #32]
 801674e:	f7e9 ff03 	bl	8000558 <__aeabi_f2d>
 8016752:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016756:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801675a:	4814      	ldr	r0, [pc, #80]	; (80167ac <acosf+0xac>)
 801675c:	f001 fac8 	bl	8017cf0 <nan>
 8016760:	f994 3000 	ldrsb.w	r3, [r4]
 8016764:	2b02      	cmp	r3, #2
 8016766:	ed8d 0b06 	vstr	d0, [sp, #24]
 801676a:	d104      	bne.n	8016776 <acosf+0x76>
 801676c:	f7fd f998 	bl	8013aa0 <__errno>
 8016770:	2321      	movs	r3, #33	; 0x21
 8016772:	6003      	str	r3, [r0, #0]
 8016774:	e004      	b.n	8016780 <acosf+0x80>
 8016776:	4668      	mov	r0, sp
 8016778:	f001 fab7 	bl	8017cea <matherr>
 801677c:	2800      	cmp	r0, #0
 801677e:	d0f5      	beq.n	801676c <acosf+0x6c>
 8016780:	9b08      	ldr	r3, [sp, #32]
 8016782:	b11b      	cbz	r3, 801678c <acosf+0x8c>
 8016784:	f7fd f98c 	bl	8013aa0 <__errno>
 8016788:	9b08      	ldr	r3, [sp, #32]
 801678a:	6003      	str	r3, [r0, #0]
 801678c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016790:	f7ea fa12 	bl	8000bb8 <__aeabi_d2f>
 8016794:	ee08 0a90 	vmov	s17, r0
 8016798:	eeb0 0a68 	vmov.f32	s0, s17
 801679c:	b00a      	add	sp, #40	; 0x28
 801679e:	ecbd 8b02 	vpop	{d8}
 80167a2:	bd10      	pop	{r4, pc}
 80167a4:	200014d4 	.word	0x200014d4
 80167a8:	080185a2 	.word	0x080185a2
 80167ac:	08018481 	.word	0x08018481

080167b0 <__ieee754_asin>:
 80167b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167b4:	ec55 4b10 	vmov	r4, r5, d0
 80167b8:	4bcb      	ldr	r3, [pc, #812]	; (8016ae8 <__ieee754_asin+0x338>)
 80167ba:	b087      	sub	sp, #28
 80167bc:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80167c0:	429f      	cmp	r7, r3
 80167c2:	9501      	str	r5, [sp, #4]
 80167c4:	dd31      	ble.n	801682a <__ieee754_asin+0x7a>
 80167c6:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 80167ca:	ee10 3a10 	vmov	r3, s0
 80167ce:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80167d2:	433b      	orrs	r3, r7
 80167d4:	d117      	bne.n	8016806 <__ieee754_asin+0x56>
 80167d6:	a3aa      	add	r3, pc, #680	; (adr r3, 8016a80 <__ieee754_asin+0x2d0>)
 80167d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167dc:	ee10 0a10 	vmov	r0, s0
 80167e0:	4629      	mov	r1, r5
 80167e2:	f7e9 ff11 	bl	8000608 <__aeabi_dmul>
 80167e6:	a3a8      	add	r3, pc, #672	; (adr r3, 8016a88 <__ieee754_asin+0x2d8>)
 80167e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167ec:	4606      	mov	r6, r0
 80167ee:	460f      	mov	r7, r1
 80167f0:	4620      	mov	r0, r4
 80167f2:	4629      	mov	r1, r5
 80167f4:	f7e9 ff08 	bl	8000608 <__aeabi_dmul>
 80167f8:	4602      	mov	r2, r0
 80167fa:	460b      	mov	r3, r1
 80167fc:	4630      	mov	r0, r6
 80167fe:	4639      	mov	r1, r7
 8016800:	f7e9 fd4c 	bl	800029c <__adddf3>
 8016804:	e00a      	b.n	801681c <__ieee754_asin+0x6c>
 8016806:	ee10 2a10 	vmov	r2, s0
 801680a:	462b      	mov	r3, r5
 801680c:	4620      	mov	r0, r4
 801680e:	4629      	mov	r1, r5
 8016810:	f7e9 fd42 	bl	8000298 <__aeabi_dsub>
 8016814:	4602      	mov	r2, r0
 8016816:	460b      	mov	r3, r1
 8016818:	f7ea f820 	bl	800085c <__aeabi_ddiv>
 801681c:	4604      	mov	r4, r0
 801681e:	460d      	mov	r5, r1
 8016820:	ec45 4b10 	vmov	d0, r4, r5
 8016824:	b007      	add	sp, #28
 8016826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801682a:	4bb0      	ldr	r3, [pc, #704]	; (8016aec <__ieee754_asin+0x33c>)
 801682c:	429f      	cmp	r7, r3
 801682e:	dc11      	bgt.n	8016854 <__ieee754_asin+0xa4>
 8016830:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8016834:	f280 80ae 	bge.w	8016994 <__ieee754_asin+0x1e4>
 8016838:	a395      	add	r3, pc, #596	; (adr r3, 8016a90 <__ieee754_asin+0x2e0>)
 801683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801683e:	ee10 0a10 	vmov	r0, s0
 8016842:	4629      	mov	r1, r5
 8016844:	f7e9 fd2a 	bl	800029c <__adddf3>
 8016848:	2200      	movs	r2, #0
 801684a:	4ba9      	ldr	r3, [pc, #676]	; (8016af0 <__ieee754_asin+0x340>)
 801684c:	f7ea f96c 	bl	8000b28 <__aeabi_dcmpgt>
 8016850:	2800      	cmp	r0, #0
 8016852:	d1e5      	bne.n	8016820 <__ieee754_asin+0x70>
 8016854:	ec45 4b10 	vmov	d0, r4, r5
 8016858:	f001 fa3e 	bl	8017cd8 <fabs>
 801685c:	2000      	movs	r0, #0
 801685e:	ec53 2b10 	vmov	r2, r3, d0
 8016862:	49a3      	ldr	r1, [pc, #652]	; (8016af0 <__ieee754_asin+0x340>)
 8016864:	f7e9 fd18 	bl	8000298 <__aeabi_dsub>
 8016868:	2200      	movs	r2, #0
 801686a:	4ba2      	ldr	r3, [pc, #648]	; (8016af4 <__ieee754_asin+0x344>)
 801686c:	f7e9 fecc 	bl	8000608 <__aeabi_dmul>
 8016870:	a389      	add	r3, pc, #548	; (adr r3, 8016a98 <__ieee754_asin+0x2e8>)
 8016872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016876:	4604      	mov	r4, r0
 8016878:	460d      	mov	r5, r1
 801687a:	f7e9 fec5 	bl	8000608 <__aeabi_dmul>
 801687e:	a388      	add	r3, pc, #544	; (adr r3, 8016aa0 <__ieee754_asin+0x2f0>)
 8016880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016884:	f7e9 fd0a 	bl	800029c <__adddf3>
 8016888:	4622      	mov	r2, r4
 801688a:	462b      	mov	r3, r5
 801688c:	f7e9 febc 	bl	8000608 <__aeabi_dmul>
 8016890:	a385      	add	r3, pc, #532	; (adr r3, 8016aa8 <__ieee754_asin+0x2f8>)
 8016892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016896:	f7e9 fcff 	bl	8000298 <__aeabi_dsub>
 801689a:	4622      	mov	r2, r4
 801689c:	462b      	mov	r3, r5
 801689e:	f7e9 feb3 	bl	8000608 <__aeabi_dmul>
 80168a2:	a383      	add	r3, pc, #524	; (adr r3, 8016ab0 <__ieee754_asin+0x300>)
 80168a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168a8:	f7e9 fcf8 	bl	800029c <__adddf3>
 80168ac:	4622      	mov	r2, r4
 80168ae:	462b      	mov	r3, r5
 80168b0:	f7e9 feaa 	bl	8000608 <__aeabi_dmul>
 80168b4:	a380      	add	r3, pc, #512	; (adr r3, 8016ab8 <__ieee754_asin+0x308>)
 80168b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ba:	f7e9 fced 	bl	8000298 <__aeabi_dsub>
 80168be:	4622      	mov	r2, r4
 80168c0:	462b      	mov	r3, r5
 80168c2:	f7e9 fea1 	bl	8000608 <__aeabi_dmul>
 80168c6:	a37e      	add	r3, pc, #504	; (adr r3, 8016ac0 <__ieee754_asin+0x310>)
 80168c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168cc:	f7e9 fce6 	bl	800029c <__adddf3>
 80168d0:	4622      	mov	r2, r4
 80168d2:	462b      	mov	r3, r5
 80168d4:	f7e9 fe98 	bl	8000608 <__aeabi_dmul>
 80168d8:	a37b      	add	r3, pc, #492	; (adr r3, 8016ac8 <__ieee754_asin+0x318>)
 80168da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168de:	4680      	mov	r8, r0
 80168e0:	4689      	mov	r9, r1
 80168e2:	4620      	mov	r0, r4
 80168e4:	4629      	mov	r1, r5
 80168e6:	f7e9 fe8f 	bl	8000608 <__aeabi_dmul>
 80168ea:	a379      	add	r3, pc, #484	; (adr r3, 8016ad0 <__ieee754_asin+0x320>)
 80168ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168f0:	f7e9 fcd2 	bl	8000298 <__aeabi_dsub>
 80168f4:	4622      	mov	r2, r4
 80168f6:	462b      	mov	r3, r5
 80168f8:	f7e9 fe86 	bl	8000608 <__aeabi_dmul>
 80168fc:	a376      	add	r3, pc, #472	; (adr r3, 8016ad8 <__ieee754_asin+0x328>)
 80168fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016902:	f7e9 fccb 	bl	800029c <__adddf3>
 8016906:	4622      	mov	r2, r4
 8016908:	462b      	mov	r3, r5
 801690a:	f7e9 fe7d 	bl	8000608 <__aeabi_dmul>
 801690e:	a374      	add	r3, pc, #464	; (adr r3, 8016ae0 <__ieee754_asin+0x330>)
 8016910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016914:	f7e9 fcc0 	bl	8000298 <__aeabi_dsub>
 8016918:	4622      	mov	r2, r4
 801691a:	462b      	mov	r3, r5
 801691c:	f7e9 fe74 	bl	8000608 <__aeabi_dmul>
 8016920:	4b73      	ldr	r3, [pc, #460]	; (8016af0 <__ieee754_asin+0x340>)
 8016922:	2200      	movs	r2, #0
 8016924:	f7e9 fcba 	bl	800029c <__adddf3>
 8016928:	ec45 4b10 	vmov	d0, r4, r5
 801692c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016930:	f000 fa2c 	bl	8016d8c <__ieee754_sqrt>
 8016934:	4b70      	ldr	r3, [pc, #448]	; (8016af8 <__ieee754_asin+0x348>)
 8016936:	429f      	cmp	r7, r3
 8016938:	ec5b ab10 	vmov	sl, fp, d0
 801693c:	f340 80de 	ble.w	8016afc <__ieee754_asin+0x34c>
 8016940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016944:	4640      	mov	r0, r8
 8016946:	4649      	mov	r1, r9
 8016948:	f7e9 ff88 	bl	800085c <__aeabi_ddiv>
 801694c:	4652      	mov	r2, sl
 801694e:	465b      	mov	r3, fp
 8016950:	f7e9 fe5a 	bl	8000608 <__aeabi_dmul>
 8016954:	4652      	mov	r2, sl
 8016956:	465b      	mov	r3, fp
 8016958:	f7e9 fca0 	bl	800029c <__adddf3>
 801695c:	4602      	mov	r2, r0
 801695e:	460b      	mov	r3, r1
 8016960:	f7e9 fc9c 	bl	800029c <__adddf3>
 8016964:	a348      	add	r3, pc, #288	; (adr r3, 8016a88 <__ieee754_asin+0x2d8>)
 8016966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801696a:	f7e9 fc95 	bl	8000298 <__aeabi_dsub>
 801696e:	4602      	mov	r2, r0
 8016970:	460b      	mov	r3, r1
 8016972:	a143      	add	r1, pc, #268	; (adr r1, 8016a80 <__ieee754_asin+0x2d0>)
 8016974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016978:	f7e9 fc8e 	bl	8000298 <__aeabi_dsub>
 801697c:	9b01      	ldr	r3, [sp, #4]
 801697e:	2b00      	cmp	r3, #0
 8016980:	bfdc      	itt	le
 8016982:	4602      	movle	r2, r0
 8016984:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8016988:	4604      	mov	r4, r0
 801698a:	460d      	mov	r5, r1
 801698c:	bfdc      	itt	le
 801698e:	4614      	movle	r4, r2
 8016990:	461d      	movle	r5, r3
 8016992:	e745      	b.n	8016820 <__ieee754_asin+0x70>
 8016994:	ee10 2a10 	vmov	r2, s0
 8016998:	ee10 0a10 	vmov	r0, s0
 801699c:	462b      	mov	r3, r5
 801699e:	4629      	mov	r1, r5
 80169a0:	f7e9 fe32 	bl	8000608 <__aeabi_dmul>
 80169a4:	a33c      	add	r3, pc, #240	; (adr r3, 8016a98 <__ieee754_asin+0x2e8>)
 80169a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169aa:	4606      	mov	r6, r0
 80169ac:	460f      	mov	r7, r1
 80169ae:	f7e9 fe2b 	bl	8000608 <__aeabi_dmul>
 80169b2:	a33b      	add	r3, pc, #236	; (adr r3, 8016aa0 <__ieee754_asin+0x2f0>)
 80169b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169b8:	f7e9 fc70 	bl	800029c <__adddf3>
 80169bc:	4632      	mov	r2, r6
 80169be:	463b      	mov	r3, r7
 80169c0:	f7e9 fe22 	bl	8000608 <__aeabi_dmul>
 80169c4:	a338      	add	r3, pc, #224	; (adr r3, 8016aa8 <__ieee754_asin+0x2f8>)
 80169c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169ca:	f7e9 fc65 	bl	8000298 <__aeabi_dsub>
 80169ce:	4632      	mov	r2, r6
 80169d0:	463b      	mov	r3, r7
 80169d2:	f7e9 fe19 	bl	8000608 <__aeabi_dmul>
 80169d6:	a336      	add	r3, pc, #216	; (adr r3, 8016ab0 <__ieee754_asin+0x300>)
 80169d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169dc:	f7e9 fc5e 	bl	800029c <__adddf3>
 80169e0:	4632      	mov	r2, r6
 80169e2:	463b      	mov	r3, r7
 80169e4:	f7e9 fe10 	bl	8000608 <__aeabi_dmul>
 80169e8:	a333      	add	r3, pc, #204	; (adr r3, 8016ab8 <__ieee754_asin+0x308>)
 80169ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169ee:	f7e9 fc53 	bl	8000298 <__aeabi_dsub>
 80169f2:	4632      	mov	r2, r6
 80169f4:	463b      	mov	r3, r7
 80169f6:	f7e9 fe07 	bl	8000608 <__aeabi_dmul>
 80169fa:	a331      	add	r3, pc, #196	; (adr r3, 8016ac0 <__ieee754_asin+0x310>)
 80169fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a00:	f7e9 fc4c 	bl	800029c <__adddf3>
 8016a04:	4632      	mov	r2, r6
 8016a06:	463b      	mov	r3, r7
 8016a08:	f7e9 fdfe 	bl	8000608 <__aeabi_dmul>
 8016a0c:	a32e      	add	r3, pc, #184	; (adr r3, 8016ac8 <__ieee754_asin+0x318>)
 8016a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a12:	4680      	mov	r8, r0
 8016a14:	4689      	mov	r9, r1
 8016a16:	4630      	mov	r0, r6
 8016a18:	4639      	mov	r1, r7
 8016a1a:	f7e9 fdf5 	bl	8000608 <__aeabi_dmul>
 8016a1e:	a32c      	add	r3, pc, #176	; (adr r3, 8016ad0 <__ieee754_asin+0x320>)
 8016a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a24:	f7e9 fc38 	bl	8000298 <__aeabi_dsub>
 8016a28:	4632      	mov	r2, r6
 8016a2a:	463b      	mov	r3, r7
 8016a2c:	f7e9 fdec 	bl	8000608 <__aeabi_dmul>
 8016a30:	a329      	add	r3, pc, #164	; (adr r3, 8016ad8 <__ieee754_asin+0x328>)
 8016a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a36:	f7e9 fc31 	bl	800029c <__adddf3>
 8016a3a:	4632      	mov	r2, r6
 8016a3c:	463b      	mov	r3, r7
 8016a3e:	f7e9 fde3 	bl	8000608 <__aeabi_dmul>
 8016a42:	a327      	add	r3, pc, #156	; (adr r3, 8016ae0 <__ieee754_asin+0x330>)
 8016a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a48:	f7e9 fc26 	bl	8000298 <__aeabi_dsub>
 8016a4c:	4632      	mov	r2, r6
 8016a4e:	463b      	mov	r3, r7
 8016a50:	f7e9 fdda 	bl	8000608 <__aeabi_dmul>
 8016a54:	2200      	movs	r2, #0
 8016a56:	4b26      	ldr	r3, [pc, #152]	; (8016af0 <__ieee754_asin+0x340>)
 8016a58:	f7e9 fc20 	bl	800029c <__adddf3>
 8016a5c:	4602      	mov	r2, r0
 8016a5e:	460b      	mov	r3, r1
 8016a60:	4640      	mov	r0, r8
 8016a62:	4649      	mov	r1, r9
 8016a64:	f7e9 fefa 	bl	800085c <__aeabi_ddiv>
 8016a68:	4622      	mov	r2, r4
 8016a6a:	462b      	mov	r3, r5
 8016a6c:	f7e9 fdcc 	bl	8000608 <__aeabi_dmul>
 8016a70:	4602      	mov	r2, r0
 8016a72:	460b      	mov	r3, r1
 8016a74:	4620      	mov	r0, r4
 8016a76:	4629      	mov	r1, r5
 8016a78:	e6c2      	b.n	8016800 <__ieee754_asin+0x50>
 8016a7a:	bf00      	nop
 8016a7c:	f3af 8000 	nop.w
 8016a80:	54442d18 	.word	0x54442d18
 8016a84:	3ff921fb 	.word	0x3ff921fb
 8016a88:	33145c07 	.word	0x33145c07
 8016a8c:	3c91a626 	.word	0x3c91a626
 8016a90:	8800759c 	.word	0x8800759c
 8016a94:	7e37e43c 	.word	0x7e37e43c
 8016a98:	0dfdf709 	.word	0x0dfdf709
 8016a9c:	3f023de1 	.word	0x3f023de1
 8016aa0:	7501b288 	.word	0x7501b288
 8016aa4:	3f49efe0 	.word	0x3f49efe0
 8016aa8:	b5688f3b 	.word	0xb5688f3b
 8016aac:	3fa48228 	.word	0x3fa48228
 8016ab0:	0e884455 	.word	0x0e884455
 8016ab4:	3fc9c155 	.word	0x3fc9c155
 8016ab8:	03eb6f7d 	.word	0x03eb6f7d
 8016abc:	3fd4d612 	.word	0x3fd4d612
 8016ac0:	55555555 	.word	0x55555555
 8016ac4:	3fc55555 	.word	0x3fc55555
 8016ac8:	b12e9282 	.word	0xb12e9282
 8016acc:	3fb3b8c5 	.word	0x3fb3b8c5
 8016ad0:	1b8d0159 	.word	0x1b8d0159
 8016ad4:	3fe6066c 	.word	0x3fe6066c
 8016ad8:	9c598ac8 	.word	0x9c598ac8
 8016adc:	40002ae5 	.word	0x40002ae5
 8016ae0:	1c8a2d4b 	.word	0x1c8a2d4b
 8016ae4:	40033a27 	.word	0x40033a27
 8016ae8:	3fefffff 	.word	0x3fefffff
 8016aec:	3fdfffff 	.word	0x3fdfffff
 8016af0:	3ff00000 	.word	0x3ff00000
 8016af4:	3fe00000 	.word	0x3fe00000
 8016af8:	3fef3332 	.word	0x3fef3332
 8016afc:	ee10 2a10 	vmov	r2, s0
 8016b00:	ee10 0a10 	vmov	r0, s0
 8016b04:	465b      	mov	r3, fp
 8016b06:	4659      	mov	r1, fp
 8016b08:	f7e9 fbc8 	bl	800029c <__adddf3>
 8016b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016b10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016b14:	4640      	mov	r0, r8
 8016b16:	4649      	mov	r1, r9
 8016b18:	f7e9 fea0 	bl	800085c <__aeabi_ddiv>
 8016b1c:	4602      	mov	r2, r0
 8016b1e:	460b      	mov	r3, r1
 8016b20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016b24:	f7e9 fd70 	bl	8000608 <__aeabi_dmul>
 8016b28:	2600      	movs	r6, #0
 8016b2a:	4680      	mov	r8, r0
 8016b2c:	4689      	mov	r9, r1
 8016b2e:	4632      	mov	r2, r6
 8016b30:	465b      	mov	r3, fp
 8016b32:	4630      	mov	r0, r6
 8016b34:	4659      	mov	r1, fp
 8016b36:	f7e9 fd67 	bl	8000608 <__aeabi_dmul>
 8016b3a:	4602      	mov	r2, r0
 8016b3c:	460b      	mov	r3, r1
 8016b3e:	4620      	mov	r0, r4
 8016b40:	4629      	mov	r1, r5
 8016b42:	f7e9 fba9 	bl	8000298 <__aeabi_dsub>
 8016b46:	4632      	mov	r2, r6
 8016b48:	4604      	mov	r4, r0
 8016b4a:	460d      	mov	r5, r1
 8016b4c:	465b      	mov	r3, fp
 8016b4e:	4650      	mov	r0, sl
 8016b50:	4659      	mov	r1, fp
 8016b52:	f7e9 fba3 	bl	800029c <__adddf3>
 8016b56:	4602      	mov	r2, r0
 8016b58:	460b      	mov	r3, r1
 8016b5a:	4620      	mov	r0, r4
 8016b5c:	4629      	mov	r1, r5
 8016b5e:	f7e9 fe7d 	bl	800085c <__aeabi_ddiv>
 8016b62:	4602      	mov	r2, r0
 8016b64:	460b      	mov	r3, r1
 8016b66:	f7e9 fb99 	bl	800029c <__adddf3>
 8016b6a:	4602      	mov	r2, r0
 8016b6c:	460b      	mov	r3, r1
 8016b6e:	a114      	add	r1, pc, #80	; (adr r1, 8016bc0 <__ieee754_asin+0x410>)
 8016b70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b74:	f7e9 fb90 	bl	8000298 <__aeabi_dsub>
 8016b78:	4602      	mov	r2, r0
 8016b7a:	460b      	mov	r3, r1
 8016b7c:	4640      	mov	r0, r8
 8016b7e:	4649      	mov	r1, r9
 8016b80:	f7e9 fb8a 	bl	8000298 <__aeabi_dsub>
 8016b84:	465f      	mov	r7, fp
 8016b86:	4604      	mov	r4, r0
 8016b88:	460d      	mov	r5, r1
 8016b8a:	4632      	mov	r2, r6
 8016b8c:	465b      	mov	r3, fp
 8016b8e:	4630      	mov	r0, r6
 8016b90:	4639      	mov	r1, r7
 8016b92:	f7e9 fb83 	bl	800029c <__adddf3>
 8016b96:	4602      	mov	r2, r0
 8016b98:	460b      	mov	r3, r1
 8016b9a:	a10b      	add	r1, pc, #44	; (adr r1, 8016bc8 <__ieee754_asin+0x418>)
 8016b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ba0:	f7e9 fb7a 	bl	8000298 <__aeabi_dsub>
 8016ba4:	4602      	mov	r2, r0
 8016ba6:	460b      	mov	r3, r1
 8016ba8:	4620      	mov	r0, r4
 8016baa:	4629      	mov	r1, r5
 8016bac:	f7e9 fb74 	bl	8000298 <__aeabi_dsub>
 8016bb0:	4602      	mov	r2, r0
 8016bb2:	460b      	mov	r3, r1
 8016bb4:	a104      	add	r1, pc, #16	; (adr r1, 8016bc8 <__ieee754_asin+0x418>)
 8016bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016bba:	e6dd      	b.n	8016978 <__ieee754_asin+0x1c8>
 8016bbc:	f3af 8000 	nop.w
 8016bc0:	33145c07 	.word	0x33145c07
 8016bc4:	3c91a626 	.word	0x3c91a626
 8016bc8:	54442d18 	.word	0x54442d18
 8016bcc:	3fe921fb 	.word	0x3fe921fb

08016bd0 <__ieee754_atan2>:
 8016bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bd4:	ec57 6b11 	vmov	r6, r7, d1
 8016bd8:	4273      	negs	r3, r6
 8016bda:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8016bde:	4333      	orrs	r3, r6
 8016be0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8016d88 <__ieee754_atan2+0x1b8>
 8016be4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8016be8:	4573      	cmp	r3, lr
 8016bea:	ec51 0b10 	vmov	r0, r1, d0
 8016bee:	ee11 8a10 	vmov	r8, s2
 8016bf2:	d80a      	bhi.n	8016c0a <__ieee754_atan2+0x3a>
 8016bf4:	4244      	negs	r4, r0
 8016bf6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016bfa:	4304      	orrs	r4, r0
 8016bfc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8016c00:	4574      	cmp	r4, lr
 8016c02:	468c      	mov	ip, r1
 8016c04:	ee10 9a10 	vmov	r9, s0
 8016c08:	d907      	bls.n	8016c1a <__ieee754_atan2+0x4a>
 8016c0a:	4632      	mov	r2, r6
 8016c0c:	463b      	mov	r3, r7
 8016c0e:	f7e9 fb45 	bl	800029c <__adddf3>
 8016c12:	ec41 0b10 	vmov	d0, r0, r1
 8016c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c1a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8016c1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016c22:	4334      	orrs	r4, r6
 8016c24:	d103      	bne.n	8016c2e <__ieee754_atan2+0x5e>
 8016c26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c2a:	f000 beb5 	b.w	8017998 <atan>
 8016c2e:	17bc      	asrs	r4, r7, #30
 8016c30:	f004 0402 	and.w	r4, r4, #2
 8016c34:	ea53 0909 	orrs.w	r9, r3, r9
 8016c38:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8016c3c:	d107      	bne.n	8016c4e <__ieee754_atan2+0x7e>
 8016c3e:	2c02      	cmp	r4, #2
 8016c40:	d073      	beq.n	8016d2a <__ieee754_atan2+0x15a>
 8016c42:	2c03      	cmp	r4, #3
 8016c44:	d1e5      	bne.n	8016c12 <__ieee754_atan2+0x42>
 8016c46:	a13e      	add	r1, pc, #248	; (adr r1, 8016d40 <__ieee754_atan2+0x170>)
 8016c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c4c:	e7e1      	b.n	8016c12 <__ieee754_atan2+0x42>
 8016c4e:	ea52 0808 	orrs.w	r8, r2, r8
 8016c52:	d106      	bne.n	8016c62 <__ieee754_atan2+0x92>
 8016c54:	f1bc 0f00 	cmp.w	ip, #0
 8016c58:	da6b      	bge.n	8016d32 <__ieee754_atan2+0x162>
 8016c5a:	a13b      	add	r1, pc, #236	; (adr r1, 8016d48 <__ieee754_atan2+0x178>)
 8016c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c60:	e7d7      	b.n	8016c12 <__ieee754_atan2+0x42>
 8016c62:	4572      	cmp	r2, lr
 8016c64:	d120      	bne.n	8016ca8 <__ieee754_atan2+0xd8>
 8016c66:	4293      	cmp	r3, r2
 8016c68:	d111      	bne.n	8016c8e <__ieee754_atan2+0xbe>
 8016c6a:	2c02      	cmp	r4, #2
 8016c6c:	d007      	beq.n	8016c7e <__ieee754_atan2+0xae>
 8016c6e:	2c03      	cmp	r4, #3
 8016c70:	d009      	beq.n	8016c86 <__ieee754_atan2+0xb6>
 8016c72:	2c01      	cmp	r4, #1
 8016c74:	d155      	bne.n	8016d22 <__ieee754_atan2+0x152>
 8016c76:	a136      	add	r1, pc, #216	; (adr r1, 8016d50 <__ieee754_atan2+0x180>)
 8016c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c7c:	e7c9      	b.n	8016c12 <__ieee754_atan2+0x42>
 8016c7e:	a136      	add	r1, pc, #216	; (adr r1, 8016d58 <__ieee754_atan2+0x188>)
 8016c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c84:	e7c5      	b.n	8016c12 <__ieee754_atan2+0x42>
 8016c86:	a136      	add	r1, pc, #216	; (adr r1, 8016d60 <__ieee754_atan2+0x190>)
 8016c88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c8c:	e7c1      	b.n	8016c12 <__ieee754_atan2+0x42>
 8016c8e:	2c02      	cmp	r4, #2
 8016c90:	d04b      	beq.n	8016d2a <__ieee754_atan2+0x15a>
 8016c92:	2c03      	cmp	r4, #3
 8016c94:	d0d7      	beq.n	8016c46 <__ieee754_atan2+0x76>
 8016c96:	2c01      	cmp	r4, #1
 8016c98:	f04f 0000 	mov.w	r0, #0
 8016c9c:	d102      	bne.n	8016ca4 <__ieee754_atan2+0xd4>
 8016c9e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8016ca2:	e7b6      	b.n	8016c12 <__ieee754_atan2+0x42>
 8016ca4:	2100      	movs	r1, #0
 8016ca6:	e7b4      	b.n	8016c12 <__ieee754_atan2+0x42>
 8016ca8:	4573      	cmp	r3, lr
 8016caa:	d0d3      	beq.n	8016c54 <__ieee754_atan2+0x84>
 8016cac:	1a9b      	subs	r3, r3, r2
 8016cae:	151b      	asrs	r3, r3, #20
 8016cb0:	2b3c      	cmp	r3, #60	; 0x3c
 8016cb2:	dc1e      	bgt.n	8016cf2 <__ieee754_atan2+0x122>
 8016cb4:	2f00      	cmp	r7, #0
 8016cb6:	da01      	bge.n	8016cbc <__ieee754_atan2+0xec>
 8016cb8:	333c      	adds	r3, #60	; 0x3c
 8016cba:	db1e      	blt.n	8016cfa <__ieee754_atan2+0x12a>
 8016cbc:	4632      	mov	r2, r6
 8016cbe:	463b      	mov	r3, r7
 8016cc0:	f7e9 fdcc 	bl	800085c <__aeabi_ddiv>
 8016cc4:	ec41 0b10 	vmov	d0, r0, r1
 8016cc8:	f001 f806 	bl	8017cd8 <fabs>
 8016ccc:	f000 fe64 	bl	8017998 <atan>
 8016cd0:	ec51 0b10 	vmov	r0, r1, d0
 8016cd4:	2c01      	cmp	r4, #1
 8016cd6:	d013      	beq.n	8016d00 <__ieee754_atan2+0x130>
 8016cd8:	2c02      	cmp	r4, #2
 8016cda:	d015      	beq.n	8016d08 <__ieee754_atan2+0x138>
 8016cdc:	2c00      	cmp	r4, #0
 8016cde:	d098      	beq.n	8016c12 <__ieee754_atan2+0x42>
 8016ce0:	a321      	add	r3, pc, #132	; (adr r3, 8016d68 <__ieee754_atan2+0x198>)
 8016ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ce6:	f7e9 fad7 	bl	8000298 <__aeabi_dsub>
 8016cea:	a321      	add	r3, pc, #132	; (adr r3, 8016d70 <__ieee754_atan2+0x1a0>)
 8016cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cf0:	e014      	b.n	8016d1c <__ieee754_atan2+0x14c>
 8016cf2:	a121      	add	r1, pc, #132	; (adr r1, 8016d78 <__ieee754_atan2+0x1a8>)
 8016cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016cf8:	e7ec      	b.n	8016cd4 <__ieee754_atan2+0x104>
 8016cfa:	2000      	movs	r0, #0
 8016cfc:	2100      	movs	r1, #0
 8016cfe:	e7e9      	b.n	8016cd4 <__ieee754_atan2+0x104>
 8016d00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016d04:	4619      	mov	r1, r3
 8016d06:	e784      	b.n	8016c12 <__ieee754_atan2+0x42>
 8016d08:	a317      	add	r3, pc, #92	; (adr r3, 8016d68 <__ieee754_atan2+0x198>)
 8016d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d0e:	f7e9 fac3 	bl	8000298 <__aeabi_dsub>
 8016d12:	4602      	mov	r2, r0
 8016d14:	460b      	mov	r3, r1
 8016d16:	a116      	add	r1, pc, #88	; (adr r1, 8016d70 <__ieee754_atan2+0x1a0>)
 8016d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d1c:	f7e9 fabc 	bl	8000298 <__aeabi_dsub>
 8016d20:	e777      	b.n	8016c12 <__ieee754_atan2+0x42>
 8016d22:	a117      	add	r1, pc, #92	; (adr r1, 8016d80 <__ieee754_atan2+0x1b0>)
 8016d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d28:	e773      	b.n	8016c12 <__ieee754_atan2+0x42>
 8016d2a:	a111      	add	r1, pc, #68	; (adr r1, 8016d70 <__ieee754_atan2+0x1a0>)
 8016d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d30:	e76f      	b.n	8016c12 <__ieee754_atan2+0x42>
 8016d32:	a111      	add	r1, pc, #68	; (adr r1, 8016d78 <__ieee754_atan2+0x1a8>)
 8016d34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d38:	e76b      	b.n	8016c12 <__ieee754_atan2+0x42>
 8016d3a:	bf00      	nop
 8016d3c:	f3af 8000 	nop.w
 8016d40:	54442d18 	.word	0x54442d18
 8016d44:	c00921fb 	.word	0xc00921fb
 8016d48:	54442d18 	.word	0x54442d18
 8016d4c:	bff921fb 	.word	0xbff921fb
 8016d50:	54442d18 	.word	0x54442d18
 8016d54:	bfe921fb 	.word	0xbfe921fb
 8016d58:	7f3321d2 	.word	0x7f3321d2
 8016d5c:	4002d97c 	.word	0x4002d97c
 8016d60:	7f3321d2 	.word	0x7f3321d2
 8016d64:	c002d97c 	.word	0xc002d97c
 8016d68:	33145c07 	.word	0x33145c07
 8016d6c:	3ca1a626 	.word	0x3ca1a626
 8016d70:	54442d18 	.word	0x54442d18
 8016d74:	400921fb 	.word	0x400921fb
 8016d78:	54442d18 	.word	0x54442d18
 8016d7c:	3ff921fb 	.word	0x3ff921fb
 8016d80:	54442d18 	.word	0x54442d18
 8016d84:	3fe921fb 	.word	0x3fe921fb
 8016d88:	7ff00000 	.word	0x7ff00000

08016d8c <__ieee754_sqrt>:
 8016d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d90:	4955      	ldr	r1, [pc, #340]	; (8016ee8 <__ieee754_sqrt+0x15c>)
 8016d92:	ec55 4b10 	vmov	r4, r5, d0
 8016d96:	43a9      	bics	r1, r5
 8016d98:	462b      	mov	r3, r5
 8016d9a:	462a      	mov	r2, r5
 8016d9c:	d112      	bne.n	8016dc4 <__ieee754_sqrt+0x38>
 8016d9e:	ee10 2a10 	vmov	r2, s0
 8016da2:	ee10 0a10 	vmov	r0, s0
 8016da6:	4629      	mov	r1, r5
 8016da8:	f7e9 fc2e 	bl	8000608 <__aeabi_dmul>
 8016dac:	4602      	mov	r2, r0
 8016dae:	460b      	mov	r3, r1
 8016db0:	4620      	mov	r0, r4
 8016db2:	4629      	mov	r1, r5
 8016db4:	f7e9 fa72 	bl	800029c <__adddf3>
 8016db8:	4604      	mov	r4, r0
 8016dba:	460d      	mov	r5, r1
 8016dbc:	ec45 4b10 	vmov	d0, r4, r5
 8016dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dc4:	2d00      	cmp	r5, #0
 8016dc6:	ee10 0a10 	vmov	r0, s0
 8016dca:	4621      	mov	r1, r4
 8016dcc:	dc0f      	bgt.n	8016dee <__ieee754_sqrt+0x62>
 8016dce:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016dd2:	4330      	orrs	r0, r6
 8016dd4:	d0f2      	beq.n	8016dbc <__ieee754_sqrt+0x30>
 8016dd6:	b155      	cbz	r5, 8016dee <__ieee754_sqrt+0x62>
 8016dd8:	ee10 2a10 	vmov	r2, s0
 8016ddc:	4620      	mov	r0, r4
 8016dde:	4629      	mov	r1, r5
 8016de0:	f7e9 fa5a 	bl	8000298 <__aeabi_dsub>
 8016de4:	4602      	mov	r2, r0
 8016de6:	460b      	mov	r3, r1
 8016de8:	f7e9 fd38 	bl	800085c <__aeabi_ddiv>
 8016dec:	e7e4      	b.n	8016db8 <__ieee754_sqrt+0x2c>
 8016dee:	151b      	asrs	r3, r3, #20
 8016df0:	d073      	beq.n	8016eda <__ieee754_sqrt+0x14e>
 8016df2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016df6:	07dd      	lsls	r5, r3, #31
 8016df8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8016dfc:	bf48      	it	mi
 8016dfe:	0fc8      	lsrmi	r0, r1, #31
 8016e00:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8016e04:	bf44      	itt	mi
 8016e06:	0049      	lslmi	r1, r1, #1
 8016e08:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8016e0c:	2500      	movs	r5, #0
 8016e0e:	1058      	asrs	r0, r3, #1
 8016e10:	0fcb      	lsrs	r3, r1, #31
 8016e12:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016e16:	0049      	lsls	r1, r1, #1
 8016e18:	2316      	movs	r3, #22
 8016e1a:	462c      	mov	r4, r5
 8016e1c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016e20:	19a7      	adds	r7, r4, r6
 8016e22:	4297      	cmp	r7, r2
 8016e24:	bfde      	ittt	le
 8016e26:	19bc      	addle	r4, r7, r6
 8016e28:	1bd2      	suble	r2, r2, r7
 8016e2a:	19ad      	addle	r5, r5, r6
 8016e2c:	0fcf      	lsrs	r7, r1, #31
 8016e2e:	3b01      	subs	r3, #1
 8016e30:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8016e34:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016e38:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016e3c:	d1f0      	bne.n	8016e20 <__ieee754_sqrt+0x94>
 8016e3e:	f04f 0c20 	mov.w	ip, #32
 8016e42:	469e      	mov	lr, r3
 8016e44:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016e48:	42a2      	cmp	r2, r4
 8016e4a:	eb06 070e 	add.w	r7, r6, lr
 8016e4e:	dc02      	bgt.n	8016e56 <__ieee754_sqrt+0xca>
 8016e50:	d112      	bne.n	8016e78 <__ieee754_sqrt+0xec>
 8016e52:	428f      	cmp	r7, r1
 8016e54:	d810      	bhi.n	8016e78 <__ieee754_sqrt+0xec>
 8016e56:	2f00      	cmp	r7, #0
 8016e58:	eb07 0e06 	add.w	lr, r7, r6
 8016e5c:	da42      	bge.n	8016ee4 <__ieee754_sqrt+0x158>
 8016e5e:	f1be 0f00 	cmp.w	lr, #0
 8016e62:	db3f      	blt.n	8016ee4 <__ieee754_sqrt+0x158>
 8016e64:	f104 0801 	add.w	r8, r4, #1
 8016e68:	1b12      	subs	r2, r2, r4
 8016e6a:	428f      	cmp	r7, r1
 8016e6c:	bf88      	it	hi
 8016e6e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016e72:	1bc9      	subs	r1, r1, r7
 8016e74:	4433      	add	r3, r6
 8016e76:	4644      	mov	r4, r8
 8016e78:	0052      	lsls	r2, r2, #1
 8016e7a:	f1bc 0c01 	subs.w	ip, ip, #1
 8016e7e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8016e82:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016e86:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016e8a:	d1dd      	bne.n	8016e48 <__ieee754_sqrt+0xbc>
 8016e8c:	430a      	orrs	r2, r1
 8016e8e:	d006      	beq.n	8016e9e <__ieee754_sqrt+0x112>
 8016e90:	1c5c      	adds	r4, r3, #1
 8016e92:	bf13      	iteet	ne
 8016e94:	3301      	addne	r3, #1
 8016e96:	3501      	addeq	r5, #1
 8016e98:	4663      	moveq	r3, ip
 8016e9a:	f023 0301 	bicne.w	r3, r3, #1
 8016e9e:	106a      	asrs	r2, r5, #1
 8016ea0:	085b      	lsrs	r3, r3, #1
 8016ea2:	07e9      	lsls	r1, r5, #31
 8016ea4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016ea8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8016eac:	bf48      	it	mi
 8016eae:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016eb2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8016eb6:	461c      	mov	r4, r3
 8016eb8:	e780      	b.n	8016dbc <__ieee754_sqrt+0x30>
 8016eba:	0aca      	lsrs	r2, r1, #11
 8016ebc:	3815      	subs	r0, #21
 8016ebe:	0549      	lsls	r1, r1, #21
 8016ec0:	2a00      	cmp	r2, #0
 8016ec2:	d0fa      	beq.n	8016eba <__ieee754_sqrt+0x12e>
 8016ec4:	02d6      	lsls	r6, r2, #11
 8016ec6:	d50a      	bpl.n	8016ede <__ieee754_sqrt+0x152>
 8016ec8:	f1c3 0420 	rsb	r4, r3, #32
 8016ecc:	fa21 f404 	lsr.w	r4, r1, r4
 8016ed0:	1e5d      	subs	r5, r3, #1
 8016ed2:	4099      	lsls	r1, r3
 8016ed4:	4322      	orrs	r2, r4
 8016ed6:	1b43      	subs	r3, r0, r5
 8016ed8:	e78b      	b.n	8016df2 <__ieee754_sqrt+0x66>
 8016eda:	4618      	mov	r0, r3
 8016edc:	e7f0      	b.n	8016ec0 <__ieee754_sqrt+0x134>
 8016ede:	0052      	lsls	r2, r2, #1
 8016ee0:	3301      	adds	r3, #1
 8016ee2:	e7ef      	b.n	8016ec4 <__ieee754_sqrt+0x138>
 8016ee4:	46a0      	mov	r8, r4
 8016ee6:	e7bf      	b.n	8016e68 <__ieee754_sqrt+0xdc>
 8016ee8:	7ff00000 	.word	0x7ff00000

08016eec <__ieee754_acosf>:
 8016eec:	b508      	push	{r3, lr}
 8016eee:	ee10 3a10 	vmov	r3, s0
 8016ef2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016ef6:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8016efa:	ed2d 8b0c 	vpush	{d8-d13}
 8016efe:	d10a      	bne.n	8016f16 <__ieee754_acosf+0x2a>
 8016f00:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80170a0 <__ieee754_acosf+0x1b4>
 8016f04:	ed9f 8a67 	vldr	s16, [pc, #412]	; 80170a4 <__ieee754_acosf+0x1b8>
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	bfd8      	it	le
 8016f0c:	eeb0 0a48 	vmovle.f32	s0, s16
 8016f10:	ecbd 8b0c 	vpop	{d8-d13}
 8016f14:	bd08      	pop	{r3, pc}
 8016f16:	dd04      	ble.n	8016f22 <__ieee754_acosf+0x36>
 8016f18:	ee30 8a40 	vsub.f32	s16, s0, s0
 8016f1c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8016f20:	e7f6      	b.n	8016f10 <__ieee754_acosf+0x24>
 8016f22:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8016f26:	da3e      	bge.n	8016fa6 <__ieee754_acosf+0xba>
 8016f28:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8016f2c:	f340 80b5 	ble.w	801709a <__ieee754_acosf+0x1ae>
 8016f30:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016f34:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80170a8 <__ieee754_acosf+0x1bc>
 8016f38:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80170ac <__ieee754_acosf+0x1c0>
 8016f3c:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 80170b0 <__ieee754_acosf+0x1c4>
 8016f40:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 80170b4 <__ieee754_acosf+0x1c8>
 8016f44:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016f48:	eddf 6a5b 	vldr	s13, [pc, #364]	; 80170b8 <__ieee754_acosf+0x1cc>
 8016f4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016f50:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80170bc <__ieee754_acosf+0x1d0>
 8016f54:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016f58:	eddf 6a59 	vldr	s13, [pc, #356]	; 80170c0 <__ieee754_acosf+0x1d4>
 8016f5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016f60:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80170c4 <__ieee754_acosf+0x1d8>
 8016f64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016f68:	eddf 6a57 	vldr	s13, [pc, #348]	; 80170c8 <__ieee754_acosf+0x1dc>
 8016f6c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8016f70:	eddf 6a56 	vldr	s13, [pc, #344]	; 80170cc <__ieee754_acosf+0x1e0>
 8016f74:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016f78:	ed9f 6a55 	vldr	s12, [pc, #340]	; 80170d0 <__ieee754_acosf+0x1e4>
 8016f7c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8016f80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016f84:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016f8c:	eef0 7a66 	vmov.f32	s15, s13
 8016f90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016f94:	eea0 8a66 	vfms.f32	s16, s0, s13
 8016f98:	ee30 8a48 	vsub.f32	s16, s0, s16
 8016f9c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80170d4 <__ieee754_acosf+0x1e8>
 8016fa0:	ee30 0a48 	vsub.f32	s0, s0, s16
 8016fa4:	e7b4      	b.n	8016f10 <__ieee754_acosf+0x24>
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	eddf da3f 	vldr	s27, [pc, #252]	; 80170a8 <__ieee754_acosf+0x1bc>
 8016fac:	eddf ca3f 	vldr	s25, [pc, #252]	; 80170ac <__ieee754_acosf+0x1c0>
 8016fb0:	ed9f ca41 	vldr	s24, [pc, #260]	; 80170b8 <__ieee754_acosf+0x1cc>
 8016fb4:	eddf ba41 	vldr	s23, [pc, #260]	; 80170bc <__ieee754_acosf+0x1d0>
 8016fb8:	ed9f ba41 	vldr	s22, [pc, #260]	; 80170c0 <__ieee754_acosf+0x1d4>
 8016fbc:	eddf 8a41 	vldr	s17, [pc, #260]	; 80170c4 <__ieee754_acosf+0x1d8>
 8016fc0:	ed9f da41 	vldr	s26, [pc, #260]	; 80170c8 <__ieee754_acosf+0x1dc>
 8016fc4:	eddf aa3a 	vldr	s21, [pc, #232]	; 80170b0 <__ieee754_acosf+0x1c4>
 8016fc8:	ed9f aa40 	vldr	s20, [pc, #256]	; 80170cc <__ieee754_acosf+0x1e0>
 8016fcc:	eddf 9a40 	vldr	s19, [pc, #256]	; 80170d0 <__ieee754_acosf+0x1e4>
 8016fd0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8016fd4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016fd8:	da28      	bge.n	801702c <__ieee754_acosf+0x140>
 8016fda:	ee30 0a09 	vadd.f32	s0, s0, s18
 8016fde:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016fe2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8016fe6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8016fea:	eeac ca80 	vfma.f32	s24, s25, s0
 8016fee:	eeaa aa80 	vfma.f32	s20, s21, s0
 8016ff2:	eeec ba00 	vfma.f32	s23, s24, s0
 8016ff6:	eeea 9a00 	vfma.f32	s19, s20, s0
 8016ffa:	eeab ba80 	vfma.f32	s22, s23, s0
 8016ffe:	eea9 9a80 	vfma.f32	s18, s19, s0
 8017002:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8017006:	ee68 8a80 	vmul.f32	s17, s17, s0
 801700a:	f000 f997 	bl	801733c <__ieee754_sqrtf>
 801700e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8017012:	eddf 7a31 	vldr	s15, [pc, #196]	; 80170d8 <__ieee754_acosf+0x1ec>
 8017016:	eee0 7a07 	vfma.f32	s15, s0, s14
 801701a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801701e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8017022:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80170dc <__ieee754_acosf+0x1f0>
 8017026:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801702a:	e771      	b.n	8016f10 <__ieee754_acosf+0x24>
 801702c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8017030:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017034:	eeb0 0a48 	vmov.f32	s0, s16
 8017038:	f000 f980 	bl	801733c <__ieee754_sqrtf>
 801703c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8017040:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8017044:	eeac ca88 	vfma.f32	s24, s25, s16
 8017048:	eeaa aa88 	vfma.f32	s20, s21, s16
 801704c:	eeec ba08 	vfma.f32	s23, s24, s16
 8017050:	ee10 3a10 	vmov	r3, s0
 8017054:	eeab ba88 	vfma.f32	s22, s23, s16
 8017058:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801705c:	f023 030f 	bic.w	r3, r3, #15
 8017060:	eeea 9a08 	vfma.f32	s19, s20, s16
 8017064:	ee07 3a90 	vmov	s15, r3
 8017068:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801706c:	eeb0 6a48 	vmov.f32	s12, s16
 8017070:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8017074:	eea9 9a88 	vfma.f32	s18, s19, s16
 8017078:	ee70 6a27 	vadd.f32	s13, s0, s15
 801707c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8017080:	eeb0 7a40 	vmov.f32	s14, s0
 8017084:	ee86 0a26 	vdiv.f32	s0, s12, s13
 8017088:	eec8 6a89 	vdiv.f32	s13, s17, s18
 801708c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8017090:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017094:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017098:	e73a      	b.n	8016f10 <__ieee754_acosf+0x24>
 801709a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80170e0 <__ieee754_acosf+0x1f4>
 801709e:	e737      	b.n	8016f10 <__ieee754_acosf+0x24>
 80170a0:	00000000 	.word	0x00000000
 80170a4:	40490fdb 	.word	0x40490fdb
 80170a8:	3811ef08 	.word	0x3811ef08
 80170ac:	3a4f7f04 	.word	0x3a4f7f04
 80170b0:	bf303361 	.word	0xbf303361
 80170b4:	33a22168 	.word	0x33a22168
 80170b8:	bd241146 	.word	0xbd241146
 80170bc:	3e4e0aa8 	.word	0x3e4e0aa8
 80170c0:	bea6b090 	.word	0xbea6b090
 80170c4:	3e2aaaab 	.word	0x3e2aaaab
 80170c8:	3d9dc62e 	.word	0x3d9dc62e
 80170cc:	4001572d 	.word	0x4001572d
 80170d0:	c019d139 	.word	0xc019d139
 80170d4:	3fc90fda 	.word	0x3fc90fda
 80170d8:	b3a22168 	.word	0xb3a22168
 80170dc:	40490fda 	.word	0x40490fda
 80170e0:	3fc90fdb 	.word	0x3fc90fdb

080170e4 <__ieee754_rem_pio2f>:
 80170e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170e6:	ee10 6a10 	vmov	r6, s0
 80170ea:	4b86      	ldr	r3, [pc, #536]	; (8017304 <__ieee754_rem_pio2f+0x220>)
 80170ec:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80170f0:	429c      	cmp	r4, r3
 80170f2:	b087      	sub	sp, #28
 80170f4:	4605      	mov	r5, r0
 80170f6:	dc05      	bgt.n	8017104 <__ieee754_rem_pio2f+0x20>
 80170f8:	2300      	movs	r3, #0
 80170fa:	ed85 0a00 	vstr	s0, [r5]
 80170fe:	6043      	str	r3, [r0, #4]
 8017100:	2000      	movs	r0, #0
 8017102:	e020      	b.n	8017146 <__ieee754_rem_pio2f+0x62>
 8017104:	4b80      	ldr	r3, [pc, #512]	; (8017308 <__ieee754_rem_pio2f+0x224>)
 8017106:	429c      	cmp	r4, r3
 8017108:	dc38      	bgt.n	801717c <__ieee754_rem_pio2f+0x98>
 801710a:	2e00      	cmp	r6, #0
 801710c:	f024 040f 	bic.w	r4, r4, #15
 8017110:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 801730c <__ieee754_rem_pio2f+0x228>
 8017114:	4b7e      	ldr	r3, [pc, #504]	; (8017310 <__ieee754_rem_pio2f+0x22c>)
 8017116:	dd18      	ble.n	801714a <__ieee754_rem_pio2f+0x66>
 8017118:	429c      	cmp	r4, r3
 801711a:	ee70 7a47 	vsub.f32	s15, s0, s14
 801711e:	bf09      	itett	eq
 8017120:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8017314 <__ieee754_rem_pio2f+0x230>
 8017124:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8017318 <__ieee754_rem_pio2f+0x234>
 8017128:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801712c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801731c <__ieee754_rem_pio2f+0x238>
 8017130:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8017134:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017138:	edc0 6a00 	vstr	s13, [r0]
 801713c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017140:	edc0 7a01 	vstr	s15, [r0, #4]
 8017144:	2001      	movs	r0, #1
 8017146:	b007      	add	sp, #28
 8017148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801714a:	429c      	cmp	r4, r3
 801714c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8017150:	bf09      	itett	eq
 8017152:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8017314 <__ieee754_rem_pio2f+0x230>
 8017156:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8017318 <__ieee754_rem_pio2f+0x234>
 801715a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801715e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801731c <__ieee754_rem_pio2f+0x238>
 8017162:	ee77 6a87 	vadd.f32	s13, s15, s14
 8017166:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801716a:	edc0 6a00 	vstr	s13, [r0]
 801716e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017172:	edc0 7a01 	vstr	s15, [r0, #4]
 8017176:	f04f 30ff 	mov.w	r0, #4294967295
 801717a:	e7e4      	b.n	8017146 <__ieee754_rem_pio2f+0x62>
 801717c:	4b68      	ldr	r3, [pc, #416]	; (8017320 <__ieee754_rem_pio2f+0x23c>)
 801717e:	429c      	cmp	r4, r3
 8017180:	dc71      	bgt.n	8017266 <__ieee754_rem_pio2f+0x182>
 8017182:	f000 fdbd 	bl	8017d00 <fabsf>
 8017186:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8017324 <__ieee754_rem_pio2f+0x240>
 801718a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801718e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017196:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801719a:	ee17 0a90 	vmov	r0, s15
 801719e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801730c <__ieee754_rem_pio2f+0x228>
 80171a2:	eeb1 7a46 	vneg.f32	s14, s12
 80171a6:	eea7 0a27 	vfma.f32	s0, s14, s15
 80171aa:	281f      	cmp	r0, #31
 80171ac:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8017318 <__ieee754_rem_pio2f+0x234>
 80171b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80171b4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80171b8:	ee16 3a90 	vmov	r3, s13
 80171bc:	dc1c      	bgt.n	80171f8 <__ieee754_rem_pio2f+0x114>
 80171be:	1e47      	subs	r7, r0, #1
 80171c0:	4959      	ldr	r1, [pc, #356]	; (8017328 <__ieee754_rem_pio2f+0x244>)
 80171c2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80171c6:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80171ca:	428a      	cmp	r2, r1
 80171cc:	d014      	beq.n	80171f8 <__ieee754_rem_pio2f+0x114>
 80171ce:	602b      	str	r3, [r5, #0]
 80171d0:	ed95 7a00 	vldr	s14, [r5]
 80171d4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80171d8:	2e00      	cmp	r6, #0
 80171da:	ee30 0a67 	vsub.f32	s0, s0, s15
 80171de:	ed85 0a01 	vstr	s0, [r5, #4]
 80171e2:	dab0      	bge.n	8017146 <__ieee754_rem_pio2f+0x62>
 80171e4:	eeb1 7a47 	vneg.f32	s14, s14
 80171e8:	eeb1 0a40 	vneg.f32	s0, s0
 80171ec:	ed85 7a00 	vstr	s14, [r5]
 80171f0:	ed85 0a01 	vstr	s0, [r5, #4]
 80171f4:	4240      	negs	r0, r0
 80171f6:	e7a6      	b.n	8017146 <__ieee754_rem_pio2f+0x62>
 80171f8:	15e4      	asrs	r4, r4, #23
 80171fa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80171fe:	1aa2      	subs	r2, r4, r2
 8017200:	2a08      	cmp	r2, #8
 8017202:	dde4      	ble.n	80171ce <__ieee754_rem_pio2f+0xea>
 8017204:	eddf 7a43 	vldr	s15, [pc, #268]	; 8017314 <__ieee754_rem_pio2f+0x230>
 8017208:	eef0 6a40 	vmov.f32	s13, s0
 801720c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8017210:	ee30 0a66 	vsub.f32	s0, s0, s13
 8017214:	eea7 0a27 	vfma.f32	s0, s14, s15
 8017218:	eddf 7a40 	vldr	s15, [pc, #256]	; 801731c <__ieee754_rem_pio2f+0x238>
 801721c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8017220:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8017224:	eef0 7a40 	vmov.f32	s15, s0
 8017228:	ee15 3a90 	vmov	r3, s11
 801722c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017230:	1aa4      	subs	r4, r4, r2
 8017232:	2c19      	cmp	r4, #25
 8017234:	dc04      	bgt.n	8017240 <__ieee754_rem_pio2f+0x15c>
 8017236:	edc5 5a00 	vstr	s11, [r5]
 801723a:	eeb0 0a66 	vmov.f32	s0, s13
 801723e:	e7c7      	b.n	80171d0 <__ieee754_rem_pio2f+0xec>
 8017240:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801732c <__ieee754_rem_pio2f+0x248>
 8017244:	eeb0 0a66 	vmov.f32	s0, s13
 8017248:	eea7 0a25 	vfma.f32	s0, s14, s11
 801724c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8017250:	eee7 7a25 	vfma.f32	s15, s14, s11
 8017254:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8017330 <__ieee754_rem_pio2f+0x24c>
 8017258:	eed6 7a07 	vfnms.f32	s15, s12, s14
 801725c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017260:	ed85 7a00 	vstr	s14, [r5]
 8017264:	e7b4      	b.n	80171d0 <__ieee754_rem_pio2f+0xec>
 8017266:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801726a:	db06      	blt.n	801727a <__ieee754_rem_pio2f+0x196>
 801726c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8017270:	edc0 7a01 	vstr	s15, [r0, #4]
 8017274:	edc0 7a00 	vstr	s15, [r0]
 8017278:	e742      	b.n	8017100 <__ieee754_rem_pio2f+0x1c>
 801727a:	15e2      	asrs	r2, r4, #23
 801727c:	3a86      	subs	r2, #134	; 0x86
 801727e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8017282:	ee07 3a90 	vmov	s15, r3
 8017286:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801728a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8017334 <__ieee754_rem_pio2f+0x250>
 801728e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017296:	ed8d 7a03 	vstr	s14, [sp, #12]
 801729a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801729e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80172a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80172a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80172aa:	ed8d 7a04 	vstr	s14, [sp, #16]
 80172ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80172b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80172b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172ba:	edcd 7a05 	vstr	s15, [sp, #20]
 80172be:	d11e      	bne.n	80172fe <__ieee754_rem_pio2f+0x21a>
 80172c0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80172c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172c8:	bf0c      	ite	eq
 80172ca:	2301      	moveq	r3, #1
 80172cc:	2302      	movne	r3, #2
 80172ce:	491a      	ldr	r1, [pc, #104]	; (8017338 <__ieee754_rem_pio2f+0x254>)
 80172d0:	9101      	str	r1, [sp, #4]
 80172d2:	2102      	movs	r1, #2
 80172d4:	9100      	str	r1, [sp, #0]
 80172d6:	a803      	add	r0, sp, #12
 80172d8:	4629      	mov	r1, r5
 80172da:	f000 f891 	bl	8017400 <__kernel_rem_pio2f>
 80172de:	2e00      	cmp	r6, #0
 80172e0:	f6bf af31 	bge.w	8017146 <__ieee754_rem_pio2f+0x62>
 80172e4:	edd5 7a00 	vldr	s15, [r5]
 80172e8:	eef1 7a67 	vneg.f32	s15, s15
 80172ec:	edc5 7a00 	vstr	s15, [r5]
 80172f0:	edd5 7a01 	vldr	s15, [r5, #4]
 80172f4:	eef1 7a67 	vneg.f32	s15, s15
 80172f8:	edc5 7a01 	vstr	s15, [r5, #4]
 80172fc:	e77a      	b.n	80171f4 <__ieee754_rem_pio2f+0x110>
 80172fe:	2303      	movs	r3, #3
 8017300:	e7e5      	b.n	80172ce <__ieee754_rem_pio2f+0x1ea>
 8017302:	bf00      	nop
 8017304:	3f490fd8 	.word	0x3f490fd8
 8017308:	4016cbe3 	.word	0x4016cbe3
 801730c:	3fc90f80 	.word	0x3fc90f80
 8017310:	3fc90fd0 	.word	0x3fc90fd0
 8017314:	37354400 	.word	0x37354400
 8017318:	37354443 	.word	0x37354443
 801731c:	2e85a308 	.word	0x2e85a308
 8017320:	43490f80 	.word	0x43490f80
 8017324:	3f22f984 	.word	0x3f22f984
 8017328:	080185a8 	.word	0x080185a8
 801732c:	2e85a300 	.word	0x2e85a300
 8017330:	248d3132 	.word	0x248d3132
 8017334:	43800000 	.word	0x43800000
 8017338:	08018628 	.word	0x08018628

0801733c <__ieee754_sqrtf>:
 801733c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8017340:	4770      	bx	lr
	...

08017344 <__kernel_cosf>:
 8017344:	ee10 3a10 	vmov	r3, s0
 8017348:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801734c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8017350:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017354:	da05      	bge.n	8017362 <__kernel_cosf+0x1e>
 8017356:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801735a:	ee17 2a90 	vmov	r2, s15
 801735e:	2a00      	cmp	r2, #0
 8017360:	d03b      	beq.n	80173da <__kernel_cosf+0x96>
 8017362:	ee20 6a00 	vmul.f32	s12, s0, s0
 8017366:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801736a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80173e0 <__kernel_cosf+0x9c>
 801736e:	4a1d      	ldr	r2, [pc, #116]	; (80173e4 <__kernel_cosf+0xa0>)
 8017370:	ee66 7a07 	vmul.f32	s15, s12, s14
 8017374:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80173e8 <__kernel_cosf+0xa4>
 8017378:	eea6 7a25 	vfma.f32	s14, s12, s11
 801737c:	4293      	cmp	r3, r2
 801737e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80173ec <__kernel_cosf+0xa8>
 8017382:	eee7 5a06 	vfma.f32	s11, s14, s12
 8017386:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80173f0 <__kernel_cosf+0xac>
 801738a:	eea5 7a86 	vfma.f32	s14, s11, s12
 801738e:	eddf 5a19 	vldr	s11, [pc, #100]	; 80173f4 <__kernel_cosf+0xb0>
 8017392:	eee7 5a06 	vfma.f32	s11, s14, s12
 8017396:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80173f8 <__kernel_cosf+0xb4>
 801739a:	eea5 7a86 	vfma.f32	s14, s11, s12
 801739e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80173a2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80173a6:	eee6 0a07 	vfma.f32	s1, s12, s14
 80173aa:	dc04      	bgt.n	80173b6 <__kernel_cosf+0x72>
 80173ac:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80173b0:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80173b4:	4770      	bx	lr
 80173b6:	4a11      	ldr	r2, [pc, #68]	; (80173fc <__kernel_cosf+0xb8>)
 80173b8:	4293      	cmp	r3, r2
 80173ba:	bfda      	itte	le
 80173bc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80173c0:	ee07 3a10 	vmovle	s14, r3
 80173c4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80173c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80173cc:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80173d0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80173d4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80173d8:	4770      	bx	lr
 80173da:	eeb0 0a66 	vmov.f32	s0, s13
 80173de:	4770      	bx	lr
 80173e0:	ad47d74e 	.word	0xad47d74e
 80173e4:	3e999999 	.word	0x3e999999
 80173e8:	310f74f6 	.word	0x310f74f6
 80173ec:	b493f27c 	.word	0xb493f27c
 80173f0:	37d00d01 	.word	0x37d00d01
 80173f4:	bab60b61 	.word	0xbab60b61
 80173f8:	3d2aaaab 	.word	0x3d2aaaab
 80173fc:	3f480000 	.word	0x3f480000

08017400 <__kernel_rem_pio2f>:
 8017400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017404:	ed2d 8b04 	vpush	{d8-d9}
 8017408:	b0d7      	sub	sp, #348	; 0x15c
 801740a:	469b      	mov	fp, r3
 801740c:	460e      	mov	r6, r1
 801740e:	4bbe      	ldr	r3, [pc, #760]	; (8017708 <__kernel_rem_pio2f+0x308>)
 8017410:	9964      	ldr	r1, [sp, #400]	; 0x190
 8017412:	9002      	str	r0, [sp, #8]
 8017414:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8017418:	9865      	ldr	r0, [sp, #404]	; 0x194
 801741a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8017718 <__kernel_rem_pio2f+0x318>
 801741e:	1ed1      	subs	r1, r2, #3
 8017420:	2308      	movs	r3, #8
 8017422:	fb91 f1f3 	sdiv	r1, r1, r3
 8017426:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801742a:	f10b 3aff 	add.w	sl, fp, #4294967295
 801742e:	1c4c      	adds	r4, r1, #1
 8017430:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8017434:	eba1 050a 	sub.w	r5, r1, sl
 8017438:	aa1a      	add	r2, sp, #104	; 0x68
 801743a:	eb09 070a 	add.w	r7, r9, sl
 801743e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8017442:	4696      	mov	lr, r2
 8017444:	2300      	movs	r3, #0
 8017446:	42bb      	cmp	r3, r7
 8017448:	dd0f      	ble.n	801746a <__kernel_rem_pio2f+0x6a>
 801744a:	af42      	add	r7, sp, #264	; 0x108
 801744c:	2200      	movs	r2, #0
 801744e:	454a      	cmp	r2, r9
 8017450:	dc27      	bgt.n	80174a2 <__kernel_rem_pio2f+0xa2>
 8017452:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8017456:	eb0b 0302 	add.w	r3, fp, r2
 801745a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 801745e:	9d02      	ldr	r5, [sp, #8]
 8017460:	eddf 7aad 	vldr	s15, [pc, #692]	; 8017718 <__kernel_rem_pio2f+0x318>
 8017464:	f04f 0c00 	mov.w	ip, #0
 8017468:	e015      	b.n	8017496 <__kernel_rem_pio2f+0x96>
 801746a:	42dd      	cmn	r5, r3
 801746c:	bf5d      	ittte	pl
 801746e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8017472:	ee07 2a90 	vmovpl	s15, r2
 8017476:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801747a:	eef0 7a47 	vmovmi.f32	s15, s14
 801747e:	ecee 7a01 	vstmia	lr!, {s15}
 8017482:	3301      	adds	r3, #1
 8017484:	e7df      	b.n	8017446 <__kernel_rem_pio2f+0x46>
 8017486:	ecf5 6a01 	vldmia	r5!, {s13}
 801748a:	ed33 7a01 	vldmdb	r3!, {s14}
 801748e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017492:	f10c 0c01 	add.w	ip, ip, #1
 8017496:	45d4      	cmp	ip, sl
 8017498:	ddf5      	ble.n	8017486 <__kernel_rem_pio2f+0x86>
 801749a:	ece7 7a01 	vstmia	r7!, {s15}
 801749e:	3201      	adds	r2, #1
 80174a0:	e7d5      	b.n	801744e <__kernel_rem_pio2f+0x4e>
 80174a2:	ab06      	add	r3, sp, #24
 80174a4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80174a8:	9304      	str	r3, [sp, #16]
 80174aa:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8017714 <__kernel_rem_pio2f+0x314>
 80174ae:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8017710 <__kernel_rem_pio2f+0x310>
 80174b2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80174b6:	9303      	str	r3, [sp, #12]
 80174b8:	464d      	mov	r5, r9
 80174ba:	ab56      	add	r3, sp, #344	; 0x158
 80174bc:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80174c0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80174c4:	3f01      	subs	r7, #1
 80174c6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80174ca:	00bf      	lsls	r7, r7, #2
 80174cc:	ab56      	add	r3, sp, #344	; 0x158
 80174ce:	19da      	adds	r2, r3, r7
 80174d0:	3a4c      	subs	r2, #76	; 0x4c
 80174d2:	2300      	movs	r3, #0
 80174d4:	1ae9      	subs	r1, r5, r3
 80174d6:	2900      	cmp	r1, #0
 80174d8:	dc4c      	bgt.n	8017574 <__kernel_rem_pio2f+0x174>
 80174da:	4620      	mov	r0, r4
 80174dc:	f000 fc5a 	bl	8017d94 <scalbnf>
 80174e0:	eeb0 8a40 	vmov.f32	s16, s0
 80174e4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80174e8:	ee28 0a00 	vmul.f32	s0, s16, s0
 80174ec:	f000 fc10 	bl	8017d10 <floorf>
 80174f0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80174f4:	eea0 8a67 	vfms.f32	s16, s0, s15
 80174f8:	2c00      	cmp	r4, #0
 80174fa:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80174fe:	edcd 7a01 	vstr	s15, [sp, #4]
 8017502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017506:	ee38 8a67 	vsub.f32	s16, s16, s15
 801750a:	dd48      	ble.n	801759e <__kernel_rem_pio2f+0x19e>
 801750c:	1e69      	subs	r1, r5, #1
 801750e:	ab06      	add	r3, sp, #24
 8017510:	f1c4 0008 	rsb	r0, r4, #8
 8017514:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8017518:	9a01      	ldr	r2, [sp, #4]
 801751a:	fa4c f300 	asr.w	r3, ip, r0
 801751e:	441a      	add	r2, r3
 8017520:	4083      	lsls	r3, r0
 8017522:	9201      	str	r2, [sp, #4]
 8017524:	ebac 0203 	sub.w	r2, ip, r3
 8017528:	ab06      	add	r3, sp, #24
 801752a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801752e:	f1c4 0307 	rsb	r3, r4, #7
 8017532:	fa42 f803 	asr.w	r8, r2, r3
 8017536:	f1b8 0f00 	cmp.w	r8, #0
 801753a:	dd41      	ble.n	80175c0 <__kernel_rem_pio2f+0x1c0>
 801753c:	9b01      	ldr	r3, [sp, #4]
 801753e:	2000      	movs	r0, #0
 8017540:	3301      	adds	r3, #1
 8017542:	9301      	str	r3, [sp, #4]
 8017544:	4601      	mov	r1, r0
 8017546:	4285      	cmp	r5, r0
 8017548:	dc6d      	bgt.n	8017626 <__kernel_rem_pio2f+0x226>
 801754a:	2c00      	cmp	r4, #0
 801754c:	dd04      	ble.n	8017558 <__kernel_rem_pio2f+0x158>
 801754e:	2c01      	cmp	r4, #1
 8017550:	d07e      	beq.n	8017650 <__kernel_rem_pio2f+0x250>
 8017552:	2c02      	cmp	r4, #2
 8017554:	f000 8086 	beq.w	8017664 <__kernel_rem_pio2f+0x264>
 8017558:	f1b8 0f02 	cmp.w	r8, #2
 801755c:	d130      	bne.n	80175c0 <__kernel_rem_pio2f+0x1c0>
 801755e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017562:	ee30 8a48 	vsub.f32	s16, s0, s16
 8017566:	b359      	cbz	r1, 80175c0 <__kernel_rem_pio2f+0x1c0>
 8017568:	4620      	mov	r0, r4
 801756a:	f000 fc13 	bl	8017d94 <scalbnf>
 801756e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8017572:	e025      	b.n	80175c0 <__kernel_rem_pio2f+0x1c0>
 8017574:	ee60 7a28 	vmul.f32	s15, s0, s17
 8017578:	a806      	add	r0, sp, #24
 801757a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801757e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017582:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8017586:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801758a:	ee10 1a10 	vmov	r1, s0
 801758e:	ed32 0a01 	vldmdb	r2!, {s0}
 8017592:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8017596:	ee37 0a80 	vadd.f32	s0, s15, s0
 801759a:	3301      	adds	r3, #1
 801759c:	e79a      	b.n	80174d4 <__kernel_rem_pio2f+0xd4>
 801759e:	d106      	bne.n	80175ae <__kernel_rem_pio2f+0x1ae>
 80175a0:	1e6b      	subs	r3, r5, #1
 80175a2:	aa06      	add	r2, sp, #24
 80175a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80175a8:	ea4f 2822 	mov.w	r8, r2, asr #8
 80175ac:	e7c3      	b.n	8017536 <__kernel_rem_pio2f+0x136>
 80175ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80175b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80175b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175ba:	da31      	bge.n	8017620 <__kernel_rem_pio2f+0x220>
 80175bc:	f04f 0800 	mov.w	r8, #0
 80175c0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80175c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175c8:	f040 80a8 	bne.w	801771c <__kernel_rem_pio2f+0x31c>
 80175cc:	1e6b      	subs	r3, r5, #1
 80175ce:	4618      	mov	r0, r3
 80175d0:	2200      	movs	r2, #0
 80175d2:	4548      	cmp	r0, r9
 80175d4:	da4d      	bge.n	8017672 <__kernel_rem_pio2f+0x272>
 80175d6:	2a00      	cmp	r2, #0
 80175d8:	f000 8087 	beq.w	80176ea <__kernel_rem_pio2f+0x2ea>
 80175dc:	aa06      	add	r2, sp, #24
 80175de:	3c08      	subs	r4, #8
 80175e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80175e4:	2900      	cmp	r1, #0
 80175e6:	f000 808d 	beq.w	8017704 <__kernel_rem_pio2f+0x304>
 80175ea:	4620      	mov	r0, r4
 80175ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80175f0:	9302      	str	r3, [sp, #8]
 80175f2:	f000 fbcf 	bl	8017d94 <scalbnf>
 80175f6:	9b02      	ldr	r3, [sp, #8]
 80175f8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8017714 <__kernel_rem_pio2f+0x314>
 80175fc:	0099      	lsls	r1, r3, #2
 80175fe:	aa42      	add	r2, sp, #264	; 0x108
 8017600:	1850      	adds	r0, r2, r1
 8017602:	1d05      	adds	r5, r0, #4
 8017604:	461c      	mov	r4, r3
 8017606:	2c00      	cmp	r4, #0
 8017608:	f280 80b8 	bge.w	801777c <__kernel_rem_pio2f+0x37c>
 801760c:	2500      	movs	r5, #0
 801760e:	1b5c      	subs	r4, r3, r5
 8017610:	2c00      	cmp	r4, #0
 8017612:	f2c0 80d8 	blt.w	80177c6 <__kernel_rem_pio2f+0x3c6>
 8017616:	4f3d      	ldr	r7, [pc, #244]	; (801770c <__kernel_rem_pio2f+0x30c>)
 8017618:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8017718 <__kernel_rem_pio2f+0x318>
 801761c:	2400      	movs	r4, #0
 801761e:	e0c6      	b.n	80177ae <__kernel_rem_pio2f+0x3ae>
 8017620:	f04f 0802 	mov.w	r8, #2
 8017624:	e78a      	b.n	801753c <__kernel_rem_pio2f+0x13c>
 8017626:	ab06      	add	r3, sp, #24
 8017628:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801762c:	b949      	cbnz	r1, 8017642 <__kernel_rem_pio2f+0x242>
 801762e:	b12b      	cbz	r3, 801763c <__kernel_rem_pio2f+0x23c>
 8017630:	aa06      	add	r2, sp, #24
 8017632:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8017636:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801763a:	2301      	movs	r3, #1
 801763c:	3001      	adds	r0, #1
 801763e:	4619      	mov	r1, r3
 8017640:	e781      	b.n	8017546 <__kernel_rem_pio2f+0x146>
 8017642:	aa06      	add	r2, sp, #24
 8017644:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8017648:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801764c:	460b      	mov	r3, r1
 801764e:	e7f5      	b.n	801763c <__kernel_rem_pio2f+0x23c>
 8017650:	1e68      	subs	r0, r5, #1
 8017652:	ab06      	add	r3, sp, #24
 8017654:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801765c:	aa06      	add	r2, sp, #24
 801765e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8017662:	e779      	b.n	8017558 <__kernel_rem_pio2f+0x158>
 8017664:	1e68      	subs	r0, r5, #1
 8017666:	ab06      	add	r3, sp, #24
 8017668:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801766c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017670:	e7f4      	b.n	801765c <__kernel_rem_pio2f+0x25c>
 8017672:	a906      	add	r1, sp, #24
 8017674:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8017678:	3801      	subs	r0, #1
 801767a:	430a      	orrs	r2, r1
 801767c:	e7a9      	b.n	80175d2 <__kernel_rem_pio2f+0x1d2>
 801767e:	f10c 0c01 	add.w	ip, ip, #1
 8017682:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8017686:	2a00      	cmp	r2, #0
 8017688:	d0f9      	beq.n	801767e <__kernel_rem_pio2f+0x27e>
 801768a:	eb0b 0305 	add.w	r3, fp, r5
 801768e:	aa1a      	add	r2, sp, #104	; 0x68
 8017690:	009b      	lsls	r3, r3, #2
 8017692:	1898      	adds	r0, r3, r2
 8017694:	3004      	adds	r0, #4
 8017696:	1c69      	adds	r1, r5, #1
 8017698:	3704      	adds	r7, #4
 801769a:	2200      	movs	r2, #0
 801769c:	4465      	add	r5, ip
 801769e:	9005      	str	r0, [sp, #20]
 80176a0:	428d      	cmp	r5, r1
 80176a2:	f6ff af0a 	blt.w	80174ba <__kernel_rem_pio2f+0xba>
 80176a6:	a81a      	add	r0, sp, #104	; 0x68
 80176a8:	eb02 0c03 	add.w	ip, r2, r3
 80176ac:	4484      	add	ip, r0
 80176ae:	9803      	ldr	r0, [sp, #12]
 80176b0:	f8dd e008 	ldr.w	lr, [sp, #8]
 80176b4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80176b8:	9001      	str	r0, [sp, #4]
 80176ba:	ee07 0a90 	vmov	s15, r0
 80176be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80176c2:	9805      	ldr	r0, [sp, #20]
 80176c4:	edcc 7a00 	vstr	s15, [ip]
 80176c8:	eddf 7a13 	vldr	s15, [pc, #76]	; 8017718 <__kernel_rem_pio2f+0x318>
 80176cc:	eb00 0802 	add.w	r8, r0, r2
 80176d0:	f04f 0c00 	mov.w	ip, #0
 80176d4:	45d4      	cmp	ip, sl
 80176d6:	dd0c      	ble.n	80176f2 <__kernel_rem_pio2f+0x2f2>
 80176d8:	eb02 0c07 	add.w	ip, r2, r7
 80176dc:	a842      	add	r0, sp, #264	; 0x108
 80176de:	4484      	add	ip, r0
 80176e0:	edcc 7a01 	vstr	s15, [ip, #4]
 80176e4:	3101      	adds	r1, #1
 80176e6:	3204      	adds	r2, #4
 80176e8:	e7da      	b.n	80176a0 <__kernel_rem_pio2f+0x2a0>
 80176ea:	9b04      	ldr	r3, [sp, #16]
 80176ec:	f04f 0c01 	mov.w	ip, #1
 80176f0:	e7c7      	b.n	8017682 <__kernel_rem_pio2f+0x282>
 80176f2:	ecfe 6a01 	vldmia	lr!, {s13}
 80176f6:	ed38 7a01 	vldmdb	r8!, {s14}
 80176fa:	f10c 0c01 	add.w	ip, ip, #1
 80176fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017702:	e7e7      	b.n	80176d4 <__kernel_rem_pio2f+0x2d4>
 8017704:	3b01      	subs	r3, #1
 8017706:	e769      	b.n	80175dc <__kernel_rem_pio2f+0x1dc>
 8017708:	0801896c 	.word	0x0801896c
 801770c:	08018940 	.word	0x08018940
 8017710:	43800000 	.word	0x43800000
 8017714:	3b800000 	.word	0x3b800000
 8017718:	00000000 	.word	0x00000000
 801771c:	4260      	negs	r0, r4
 801771e:	eeb0 0a48 	vmov.f32	s0, s16
 8017722:	f000 fb37 	bl	8017d94 <scalbnf>
 8017726:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8017710 <__kernel_rem_pio2f+0x310>
 801772a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801772e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017732:	db1a      	blt.n	801776a <__kernel_rem_pio2f+0x36a>
 8017734:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8017714 <__kernel_rem_pio2f+0x314>
 8017738:	ee60 7a27 	vmul.f32	s15, s0, s15
 801773c:	aa06      	add	r2, sp, #24
 801773e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017742:	a906      	add	r1, sp, #24
 8017744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017748:	3408      	adds	r4, #8
 801774a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801774e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017752:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017756:	ee10 3a10 	vmov	r3, s0
 801775a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801775e:	1c6b      	adds	r3, r5, #1
 8017760:	ee17 2a90 	vmov	r2, s15
 8017764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017768:	e73f      	b.n	80175ea <__kernel_rem_pio2f+0x1ea>
 801776a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801776e:	aa06      	add	r2, sp, #24
 8017770:	ee10 3a10 	vmov	r3, s0
 8017774:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8017778:	462b      	mov	r3, r5
 801777a:	e736      	b.n	80175ea <__kernel_rem_pio2f+0x1ea>
 801777c:	aa06      	add	r2, sp, #24
 801777e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8017782:	9202      	str	r2, [sp, #8]
 8017784:	ee07 2a90 	vmov	s15, r2
 8017788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801778c:	3c01      	subs	r4, #1
 801778e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017792:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017796:	ed65 7a01 	vstmdb	r5!, {s15}
 801779a:	e734      	b.n	8017606 <__kernel_rem_pio2f+0x206>
 801779c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80177a0:	ecf7 6a01 	vldmia	r7!, {s13}
 80177a4:	ed9c 7a00 	vldr	s14, [ip]
 80177a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80177ac:	3401      	adds	r4, #1
 80177ae:	454c      	cmp	r4, r9
 80177b0:	dc01      	bgt.n	80177b6 <__kernel_rem_pio2f+0x3b6>
 80177b2:	42a5      	cmp	r5, r4
 80177b4:	daf2      	bge.n	801779c <__kernel_rem_pio2f+0x39c>
 80177b6:	aa56      	add	r2, sp, #344	; 0x158
 80177b8:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80177bc:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80177c0:	3501      	adds	r5, #1
 80177c2:	3804      	subs	r0, #4
 80177c4:	e723      	b.n	801760e <__kernel_rem_pio2f+0x20e>
 80177c6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80177c8:	2a03      	cmp	r2, #3
 80177ca:	d84d      	bhi.n	8017868 <__kernel_rem_pio2f+0x468>
 80177cc:	e8df f002 	tbb	[pc, r2]
 80177d0:	021f1f3e 	.word	0x021f1f3e
 80177d4:	aa56      	add	r2, sp, #344	; 0x158
 80177d6:	4411      	add	r1, r2
 80177d8:	399c      	subs	r1, #156	; 0x9c
 80177da:	4608      	mov	r0, r1
 80177dc:	461c      	mov	r4, r3
 80177de:	2c00      	cmp	r4, #0
 80177e0:	dc5f      	bgt.n	80178a2 <__kernel_rem_pio2f+0x4a2>
 80177e2:	4608      	mov	r0, r1
 80177e4:	461c      	mov	r4, r3
 80177e6:	2c01      	cmp	r4, #1
 80177e8:	dc6b      	bgt.n	80178c2 <__kernel_rem_pio2f+0x4c2>
 80177ea:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8017718 <__kernel_rem_pio2f+0x318>
 80177ee:	2b01      	cmp	r3, #1
 80177f0:	dc77      	bgt.n	80178e2 <__kernel_rem_pio2f+0x4e2>
 80177f2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80177f6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80177fa:	f1b8 0f00 	cmp.w	r8, #0
 80177fe:	d176      	bne.n	80178ee <__kernel_rem_pio2f+0x4ee>
 8017800:	edc6 6a00 	vstr	s13, [r6]
 8017804:	ed86 7a01 	vstr	s14, [r6, #4]
 8017808:	edc6 7a02 	vstr	s15, [r6, #8]
 801780c:	e02c      	b.n	8017868 <__kernel_rem_pio2f+0x468>
 801780e:	aa56      	add	r2, sp, #344	; 0x158
 8017810:	4411      	add	r1, r2
 8017812:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8017718 <__kernel_rem_pio2f+0x318>
 8017816:	399c      	subs	r1, #156	; 0x9c
 8017818:	4618      	mov	r0, r3
 801781a:	2800      	cmp	r0, #0
 801781c:	da32      	bge.n	8017884 <__kernel_rem_pio2f+0x484>
 801781e:	f1b8 0f00 	cmp.w	r8, #0
 8017822:	d035      	beq.n	8017890 <__kernel_rem_pio2f+0x490>
 8017824:	eef1 7a47 	vneg.f32	s15, s14
 8017828:	edc6 7a00 	vstr	s15, [r6]
 801782c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8017830:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017834:	a82f      	add	r0, sp, #188	; 0xbc
 8017836:	2101      	movs	r1, #1
 8017838:	428b      	cmp	r3, r1
 801783a:	da2c      	bge.n	8017896 <__kernel_rem_pio2f+0x496>
 801783c:	f1b8 0f00 	cmp.w	r8, #0
 8017840:	d001      	beq.n	8017846 <__kernel_rem_pio2f+0x446>
 8017842:	eef1 7a67 	vneg.f32	s15, s15
 8017846:	edc6 7a01 	vstr	s15, [r6, #4]
 801784a:	e00d      	b.n	8017868 <__kernel_rem_pio2f+0x468>
 801784c:	aa56      	add	r2, sp, #344	; 0x158
 801784e:	4411      	add	r1, r2
 8017850:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8017718 <__kernel_rem_pio2f+0x318>
 8017854:	399c      	subs	r1, #156	; 0x9c
 8017856:	2b00      	cmp	r3, #0
 8017858:	da0e      	bge.n	8017878 <__kernel_rem_pio2f+0x478>
 801785a:	f1b8 0f00 	cmp.w	r8, #0
 801785e:	d001      	beq.n	8017864 <__kernel_rem_pio2f+0x464>
 8017860:	eef1 7a67 	vneg.f32	s15, s15
 8017864:	edc6 7a00 	vstr	s15, [r6]
 8017868:	9b01      	ldr	r3, [sp, #4]
 801786a:	f003 0007 	and.w	r0, r3, #7
 801786e:	b057      	add	sp, #348	; 0x15c
 8017870:	ecbd 8b04 	vpop	{d8-d9}
 8017874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017878:	ed31 7a01 	vldmdb	r1!, {s14}
 801787c:	3b01      	subs	r3, #1
 801787e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017882:	e7e8      	b.n	8017856 <__kernel_rem_pio2f+0x456>
 8017884:	ed71 7a01 	vldmdb	r1!, {s15}
 8017888:	3801      	subs	r0, #1
 801788a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801788e:	e7c4      	b.n	801781a <__kernel_rem_pio2f+0x41a>
 8017890:	eef0 7a47 	vmov.f32	s15, s14
 8017894:	e7c8      	b.n	8017828 <__kernel_rem_pio2f+0x428>
 8017896:	ecb0 7a01 	vldmia	r0!, {s14}
 801789a:	3101      	adds	r1, #1
 801789c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80178a0:	e7ca      	b.n	8017838 <__kernel_rem_pio2f+0x438>
 80178a2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80178a6:	ed70 6a01 	vldmdb	r0!, {s13}
 80178aa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80178ae:	3c01      	subs	r4, #1
 80178b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80178b4:	ed00 7a01 	vstr	s14, [r0, #-4]
 80178b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80178bc:	edc0 7a00 	vstr	s15, [r0]
 80178c0:	e78d      	b.n	80177de <__kernel_rem_pio2f+0x3de>
 80178c2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80178c6:	ed70 6a01 	vldmdb	r0!, {s13}
 80178ca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80178ce:	3c01      	subs	r4, #1
 80178d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80178d4:	ed00 7a01 	vstr	s14, [r0, #-4]
 80178d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80178dc:	edc0 7a00 	vstr	s15, [r0]
 80178e0:	e781      	b.n	80177e6 <__kernel_rem_pio2f+0x3e6>
 80178e2:	ed31 7a01 	vldmdb	r1!, {s14}
 80178e6:	3b01      	subs	r3, #1
 80178e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80178ec:	e77f      	b.n	80177ee <__kernel_rem_pio2f+0x3ee>
 80178ee:	eef1 6a66 	vneg.f32	s13, s13
 80178f2:	eeb1 7a47 	vneg.f32	s14, s14
 80178f6:	edc6 6a00 	vstr	s13, [r6]
 80178fa:	ed86 7a01 	vstr	s14, [r6, #4]
 80178fe:	eef1 7a67 	vneg.f32	s15, s15
 8017902:	e781      	b.n	8017808 <__kernel_rem_pio2f+0x408>

08017904 <__kernel_sinf>:
 8017904:	ee10 3a10 	vmov	r3, s0
 8017908:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801790c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8017910:	da04      	bge.n	801791c <__kernel_sinf+0x18>
 8017912:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017916:	ee17 3a90 	vmov	r3, s15
 801791a:	b35b      	cbz	r3, 8017974 <__kernel_sinf+0x70>
 801791c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8017920:	eddf 7a15 	vldr	s15, [pc, #84]	; 8017978 <__kernel_sinf+0x74>
 8017924:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801797c <__kernel_sinf+0x78>
 8017928:	eea7 6a27 	vfma.f32	s12, s14, s15
 801792c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8017980 <__kernel_sinf+0x7c>
 8017930:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017934:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8017984 <__kernel_sinf+0x80>
 8017938:	eea7 6a87 	vfma.f32	s12, s15, s14
 801793c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8017988 <__kernel_sinf+0x84>
 8017940:	ee60 6a07 	vmul.f32	s13, s0, s14
 8017944:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017948:	b930      	cbnz	r0, 8017958 <__kernel_sinf+0x54>
 801794a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801798c <__kernel_sinf+0x88>
 801794e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017952:	eea6 0a26 	vfma.f32	s0, s12, s13
 8017956:	4770      	bx	lr
 8017958:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801795c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8017960:	eee0 7a86 	vfma.f32	s15, s1, s12
 8017964:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8017968:	eddf 7a09 	vldr	s15, [pc, #36]	; 8017990 <__kernel_sinf+0x8c>
 801796c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8017970:	ee30 0a60 	vsub.f32	s0, s0, s1
 8017974:	4770      	bx	lr
 8017976:	bf00      	nop
 8017978:	2f2ec9d3 	.word	0x2f2ec9d3
 801797c:	b2d72f34 	.word	0xb2d72f34
 8017980:	3638ef1b 	.word	0x3638ef1b
 8017984:	b9500d01 	.word	0xb9500d01
 8017988:	3c088889 	.word	0x3c088889
 801798c:	be2aaaab 	.word	0xbe2aaaab
 8017990:	3e2aaaab 	.word	0x3e2aaaab
 8017994:	00000000 	.word	0x00000000

08017998 <atan>:
 8017998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801799c:	ec55 4b10 	vmov	r4, r5, d0
 80179a0:	4bc3      	ldr	r3, [pc, #780]	; (8017cb0 <atan+0x318>)
 80179a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80179a6:	429e      	cmp	r6, r3
 80179a8:	46ab      	mov	fp, r5
 80179aa:	dd18      	ble.n	80179de <atan+0x46>
 80179ac:	4bc1      	ldr	r3, [pc, #772]	; (8017cb4 <atan+0x31c>)
 80179ae:	429e      	cmp	r6, r3
 80179b0:	dc01      	bgt.n	80179b6 <atan+0x1e>
 80179b2:	d109      	bne.n	80179c8 <atan+0x30>
 80179b4:	b144      	cbz	r4, 80179c8 <atan+0x30>
 80179b6:	4622      	mov	r2, r4
 80179b8:	462b      	mov	r3, r5
 80179ba:	4620      	mov	r0, r4
 80179bc:	4629      	mov	r1, r5
 80179be:	f7e8 fc6d 	bl	800029c <__adddf3>
 80179c2:	4604      	mov	r4, r0
 80179c4:	460d      	mov	r5, r1
 80179c6:	e006      	b.n	80179d6 <atan+0x3e>
 80179c8:	f1bb 0f00 	cmp.w	fp, #0
 80179cc:	f340 8131 	ble.w	8017c32 <atan+0x29a>
 80179d0:	a59b      	add	r5, pc, #620	; (adr r5, 8017c40 <atan+0x2a8>)
 80179d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80179d6:	ec45 4b10 	vmov	d0, r4, r5
 80179da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179de:	4bb6      	ldr	r3, [pc, #728]	; (8017cb8 <atan+0x320>)
 80179e0:	429e      	cmp	r6, r3
 80179e2:	dc14      	bgt.n	8017a0e <atan+0x76>
 80179e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80179e8:	429e      	cmp	r6, r3
 80179ea:	dc0d      	bgt.n	8017a08 <atan+0x70>
 80179ec:	a396      	add	r3, pc, #600	; (adr r3, 8017c48 <atan+0x2b0>)
 80179ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179f2:	ee10 0a10 	vmov	r0, s0
 80179f6:	4629      	mov	r1, r5
 80179f8:	f7e8 fc50 	bl	800029c <__adddf3>
 80179fc:	2200      	movs	r2, #0
 80179fe:	4baf      	ldr	r3, [pc, #700]	; (8017cbc <atan+0x324>)
 8017a00:	f7e9 f892 	bl	8000b28 <__aeabi_dcmpgt>
 8017a04:	2800      	cmp	r0, #0
 8017a06:	d1e6      	bne.n	80179d6 <atan+0x3e>
 8017a08:	f04f 3aff 	mov.w	sl, #4294967295
 8017a0c:	e02b      	b.n	8017a66 <atan+0xce>
 8017a0e:	f000 f963 	bl	8017cd8 <fabs>
 8017a12:	4bab      	ldr	r3, [pc, #684]	; (8017cc0 <atan+0x328>)
 8017a14:	429e      	cmp	r6, r3
 8017a16:	ec55 4b10 	vmov	r4, r5, d0
 8017a1a:	f300 80bf 	bgt.w	8017b9c <atan+0x204>
 8017a1e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8017a22:	429e      	cmp	r6, r3
 8017a24:	f300 80a0 	bgt.w	8017b68 <atan+0x1d0>
 8017a28:	ee10 2a10 	vmov	r2, s0
 8017a2c:	ee10 0a10 	vmov	r0, s0
 8017a30:	462b      	mov	r3, r5
 8017a32:	4629      	mov	r1, r5
 8017a34:	f7e8 fc32 	bl	800029c <__adddf3>
 8017a38:	2200      	movs	r2, #0
 8017a3a:	4ba0      	ldr	r3, [pc, #640]	; (8017cbc <atan+0x324>)
 8017a3c:	f7e8 fc2c 	bl	8000298 <__aeabi_dsub>
 8017a40:	2200      	movs	r2, #0
 8017a42:	4606      	mov	r6, r0
 8017a44:	460f      	mov	r7, r1
 8017a46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017a4a:	4620      	mov	r0, r4
 8017a4c:	4629      	mov	r1, r5
 8017a4e:	f7e8 fc25 	bl	800029c <__adddf3>
 8017a52:	4602      	mov	r2, r0
 8017a54:	460b      	mov	r3, r1
 8017a56:	4630      	mov	r0, r6
 8017a58:	4639      	mov	r1, r7
 8017a5a:	f7e8 feff 	bl	800085c <__aeabi_ddiv>
 8017a5e:	f04f 0a00 	mov.w	sl, #0
 8017a62:	4604      	mov	r4, r0
 8017a64:	460d      	mov	r5, r1
 8017a66:	4622      	mov	r2, r4
 8017a68:	462b      	mov	r3, r5
 8017a6a:	4620      	mov	r0, r4
 8017a6c:	4629      	mov	r1, r5
 8017a6e:	f7e8 fdcb 	bl	8000608 <__aeabi_dmul>
 8017a72:	4602      	mov	r2, r0
 8017a74:	460b      	mov	r3, r1
 8017a76:	4680      	mov	r8, r0
 8017a78:	4689      	mov	r9, r1
 8017a7a:	f7e8 fdc5 	bl	8000608 <__aeabi_dmul>
 8017a7e:	a374      	add	r3, pc, #464	; (adr r3, 8017c50 <atan+0x2b8>)
 8017a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a84:	4606      	mov	r6, r0
 8017a86:	460f      	mov	r7, r1
 8017a88:	f7e8 fdbe 	bl	8000608 <__aeabi_dmul>
 8017a8c:	a372      	add	r3, pc, #456	; (adr r3, 8017c58 <atan+0x2c0>)
 8017a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a92:	f7e8 fc03 	bl	800029c <__adddf3>
 8017a96:	4632      	mov	r2, r6
 8017a98:	463b      	mov	r3, r7
 8017a9a:	f7e8 fdb5 	bl	8000608 <__aeabi_dmul>
 8017a9e:	a370      	add	r3, pc, #448	; (adr r3, 8017c60 <atan+0x2c8>)
 8017aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017aa4:	f7e8 fbfa 	bl	800029c <__adddf3>
 8017aa8:	4632      	mov	r2, r6
 8017aaa:	463b      	mov	r3, r7
 8017aac:	f7e8 fdac 	bl	8000608 <__aeabi_dmul>
 8017ab0:	a36d      	add	r3, pc, #436	; (adr r3, 8017c68 <atan+0x2d0>)
 8017ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ab6:	f7e8 fbf1 	bl	800029c <__adddf3>
 8017aba:	4632      	mov	r2, r6
 8017abc:	463b      	mov	r3, r7
 8017abe:	f7e8 fda3 	bl	8000608 <__aeabi_dmul>
 8017ac2:	a36b      	add	r3, pc, #428	; (adr r3, 8017c70 <atan+0x2d8>)
 8017ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ac8:	f7e8 fbe8 	bl	800029c <__adddf3>
 8017acc:	4632      	mov	r2, r6
 8017ace:	463b      	mov	r3, r7
 8017ad0:	f7e8 fd9a 	bl	8000608 <__aeabi_dmul>
 8017ad4:	a368      	add	r3, pc, #416	; (adr r3, 8017c78 <atan+0x2e0>)
 8017ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ada:	f7e8 fbdf 	bl	800029c <__adddf3>
 8017ade:	4642      	mov	r2, r8
 8017ae0:	464b      	mov	r3, r9
 8017ae2:	f7e8 fd91 	bl	8000608 <__aeabi_dmul>
 8017ae6:	a366      	add	r3, pc, #408	; (adr r3, 8017c80 <atan+0x2e8>)
 8017ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017aec:	4680      	mov	r8, r0
 8017aee:	4689      	mov	r9, r1
 8017af0:	4630      	mov	r0, r6
 8017af2:	4639      	mov	r1, r7
 8017af4:	f7e8 fd88 	bl	8000608 <__aeabi_dmul>
 8017af8:	a363      	add	r3, pc, #396	; (adr r3, 8017c88 <atan+0x2f0>)
 8017afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017afe:	f7e8 fbcb 	bl	8000298 <__aeabi_dsub>
 8017b02:	4632      	mov	r2, r6
 8017b04:	463b      	mov	r3, r7
 8017b06:	f7e8 fd7f 	bl	8000608 <__aeabi_dmul>
 8017b0a:	a361      	add	r3, pc, #388	; (adr r3, 8017c90 <atan+0x2f8>)
 8017b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b10:	f7e8 fbc2 	bl	8000298 <__aeabi_dsub>
 8017b14:	4632      	mov	r2, r6
 8017b16:	463b      	mov	r3, r7
 8017b18:	f7e8 fd76 	bl	8000608 <__aeabi_dmul>
 8017b1c:	a35e      	add	r3, pc, #376	; (adr r3, 8017c98 <atan+0x300>)
 8017b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b22:	f7e8 fbb9 	bl	8000298 <__aeabi_dsub>
 8017b26:	4632      	mov	r2, r6
 8017b28:	463b      	mov	r3, r7
 8017b2a:	f7e8 fd6d 	bl	8000608 <__aeabi_dmul>
 8017b2e:	a35c      	add	r3, pc, #368	; (adr r3, 8017ca0 <atan+0x308>)
 8017b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b34:	f7e8 fbb0 	bl	8000298 <__aeabi_dsub>
 8017b38:	4632      	mov	r2, r6
 8017b3a:	463b      	mov	r3, r7
 8017b3c:	f7e8 fd64 	bl	8000608 <__aeabi_dmul>
 8017b40:	4602      	mov	r2, r0
 8017b42:	460b      	mov	r3, r1
 8017b44:	4640      	mov	r0, r8
 8017b46:	4649      	mov	r1, r9
 8017b48:	f7e8 fba8 	bl	800029c <__adddf3>
 8017b4c:	4622      	mov	r2, r4
 8017b4e:	462b      	mov	r3, r5
 8017b50:	f7e8 fd5a 	bl	8000608 <__aeabi_dmul>
 8017b54:	f1ba 3fff 	cmp.w	sl, #4294967295
 8017b58:	4602      	mov	r2, r0
 8017b5a:	460b      	mov	r3, r1
 8017b5c:	d14b      	bne.n	8017bf6 <atan+0x25e>
 8017b5e:	4620      	mov	r0, r4
 8017b60:	4629      	mov	r1, r5
 8017b62:	f7e8 fb99 	bl	8000298 <__aeabi_dsub>
 8017b66:	e72c      	b.n	80179c2 <atan+0x2a>
 8017b68:	ee10 0a10 	vmov	r0, s0
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	4b53      	ldr	r3, [pc, #332]	; (8017cbc <atan+0x324>)
 8017b70:	4629      	mov	r1, r5
 8017b72:	f7e8 fb91 	bl	8000298 <__aeabi_dsub>
 8017b76:	2200      	movs	r2, #0
 8017b78:	4606      	mov	r6, r0
 8017b7a:	460f      	mov	r7, r1
 8017b7c:	4b4f      	ldr	r3, [pc, #316]	; (8017cbc <atan+0x324>)
 8017b7e:	4620      	mov	r0, r4
 8017b80:	4629      	mov	r1, r5
 8017b82:	f7e8 fb8b 	bl	800029c <__adddf3>
 8017b86:	4602      	mov	r2, r0
 8017b88:	460b      	mov	r3, r1
 8017b8a:	4630      	mov	r0, r6
 8017b8c:	4639      	mov	r1, r7
 8017b8e:	f7e8 fe65 	bl	800085c <__aeabi_ddiv>
 8017b92:	f04f 0a01 	mov.w	sl, #1
 8017b96:	4604      	mov	r4, r0
 8017b98:	460d      	mov	r5, r1
 8017b9a:	e764      	b.n	8017a66 <atan+0xce>
 8017b9c:	4b49      	ldr	r3, [pc, #292]	; (8017cc4 <atan+0x32c>)
 8017b9e:	429e      	cmp	r6, r3
 8017ba0:	dc1d      	bgt.n	8017bde <atan+0x246>
 8017ba2:	ee10 0a10 	vmov	r0, s0
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	4b47      	ldr	r3, [pc, #284]	; (8017cc8 <atan+0x330>)
 8017baa:	4629      	mov	r1, r5
 8017bac:	f7e8 fb74 	bl	8000298 <__aeabi_dsub>
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	4606      	mov	r6, r0
 8017bb4:	460f      	mov	r7, r1
 8017bb6:	4b44      	ldr	r3, [pc, #272]	; (8017cc8 <atan+0x330>)
 8017bb8:	4620      	mov	r0, r4
 8017bba:	4629      	mov	r1, r5
 8017bbc:	f7e8 fd24 	bl	8000608 <__aeabi_dmul>
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	4b3e      	ldr	r3, [pc, #248]	; (8017cbc <atan+0x324>)
 8017bc4:	f7e8 fb6a 	bl	800029c <__adddf3>
 8017bc8:	4602      	mov	r2, r0
 8017bca:	460b      	mov	r3, r1
 8017bcc:	4630      	mov	r0, r6
 8017bce:	4639      	mov	r1, r7
 8017bd0:	f7e8 fe44 	bl	800085c <__aeabi_ddiv>
 8017bd4:	f04f 0a02 	mov.w	sl, #2
 8017bd8:	4604      	mov	r4, r0
 8017bda:	460d      	mov	r5, r1
 8017bdc:	e743      	b.n	8017a66 <atan+0xce>
 8017bde:	462b      	mov	r3, r5
 8017be0:	ee10 2a10 	vmov	r2, s0
 8017be4:	2000      	movs	r0, #0
 8017be6:	4939      	ldr	r1, [pc, #228]	; (8017ccc <atan+0x334>)
 8017be8:	f7e8 fe38 	bl	800085c <__aeabi_ddiv>
 8017bec:	f04f 0a03 	mov.w	sl, #3
 8017bf0:	4604      	mov	r4, r0
 8017bf2:	460d      	mov	r5, r1
 8017bf4:	e737      	b.n	8017a66 <atan+0xce>
 8017bf6:	4b36      	ldr	r3, [pc, #216]	; (8017cd0 <atan+0x338>)
 8017bf8:	4e36      	ldr	r6, [pc, #216]	; (8017cd4 <atan+0x33c>)
 8017bfa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8017bfe:	4456      	add	r6, sl
 8017c00:	449a      	add	sl, r3
 8017c02:	e9da 2300 	ldrd	r2, r3, [sl]
 8017c06:	f7e8 fb47 	bl	8000298 <__aeabi_dsub>
 8017c0a:	4622      	mov	r2, r4
 8017c0c:	462b      	mov	r3, r5
 8017c0e:	f7e8 fb43 	bl	8000298 <__aeabi_dsub>
 8017c12:	4602      	mov	r2, r0
 8017c14:	460b      	mov	r3, r1
 8017c16:	e9d6 0100 	ldrd	r0, r1, [r6]
 8017c1a:	f7e8 fb3d 	bl	8000298 <__aeabi_dsub>
 8017c1e:	f1bb 0f00 	cmp.w	fp, #0
 8017c22:	4604      	mov	r4, r0
 8017c24:	460d      	mov	r5, r1
 8017c26:	f6bf aed6 	bge.w	80179d6 <atan+0x3e>
 8017c2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017c2e:	461d      	mov	r5, r3
 8017c30:	e6d1      	b.n	80179d6 <atan+0x3e>
 8017c32:	a51d      	add	r5, pc, #116	; (adr r5, 8017ca8 <atan+0x310>)
 8017c34:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017c38:	e6cd      	b.n	80179d6 <atan+0x3e>
 8017c3a:	bf00      	nop
 8017c3c:	f3af 8000 	nop.w
 8017c40:	54442d18 	.word	0x54442d18
 8017c44:	3ff921fb 	.word	0x3ff921fb
 8017c48:	8800759c 	.word	0x8800759c
 8017c4c:	7e37e43c 	.word	0x7e37e43c
 8017c50:	e322da11 	.word	0xe322da11
 8017c54:	3f90ad3a 	.word	0x3f90ad3a
 8017c58:	24760deb 	.word	0x24760deb
 8017c5c:	3fa97b4b 	.word	0x3fa97b4b
 8017c60:	a0d03d51 	.word	0xa0d03d51
 8017c64:	3fb10d66 	.word	0x3fb10d66
 8017c68:	c54c206e 	.word	0xc54c206e
 8017c6c:	3fb745cd 	.word	0x3fb745cd
 8017c70:	920083ff 	.word	0x920083ff
 8017c74:	3fc24924 	.word	0x3fc24924
 8017c78:	5555550d 	.word	0x5555550d
 8017c7c:	3fd55555 	.word	0x3fd55555
 8017c80:	2c6a6c2f 	.word	0x2c6a6c2f
 8017c84:	bfa2b444 	.word	0xbfa2b444
 8017c88:	52defd9a 	.word	0x52defd9a
 8017c8c:	3fadde2d 	.word	0x3fadde2d
 8017c90:	af749a6d 	.word	0xaf749a6d
 8017c94:	3fb3b0f2 	.word	0x3fb3b0f2
 8017c98:	fe231671 	.word	0xfe231671
 8017c9c:	3fbc71c6 	.word	0x3fbc71c6
 8017ca0:	9998ebc4 	.word	0x9998ebc4
 8017ca4:	3fc99999 	.word	0x3fc99999
 8017ca8:	54442d18 	.word	0x54442d18
 8017cac:	bff921fb 	.word	0xbff921fb
 8017cb0:	440fffff 	.word	0x440fffff
 8017cb4:	7ff00000 	.word	0x7ff00000
 8017cb8:	3fdbffff 	.word	0x3fdbffff
 8017cbc:	3ff00000 	.word	0x3ff00000
 8017cc0:	3ff2ffff 	.word	0x3ff2ffff
 8017cc4:	40037fff 	.word	0x40037fff
 8017cc8:	3ff80000 	.word	0x3ff80000
 8017ccc:	bff00000 	.word	0xbff00000
 8017cd0:	08018998 	.word	0x08018998
 8017cd4:	08018978 	.word	0x08018978

08017cd8 <fabs>:
 8017cd8:	ec51 0b10 	vmov	r0, r1, d0
 8017cdc:	ee10 2a10 	vmov	r2, s0
 8017ce0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017ce4:	ec43 2b10 	vmov	d0, r2, r3
 8017ce8:	4770      	bx	lr

08017cea <matherr>:
 8017cea:	2000      	movs	r0, #0
 8017cec:	4770      	bx	lr
	...

08017cf0 <nan>:
 8017cf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017cf8 <nan+0x8>
 8017cf4:	4770      	bx	lr
 8017cf6:	bf00      	nop
 8017cf8:	00000000 	.word	0x00000000
 8017cfc:	7ff80000 	.word	0x7ff80000

08017d00 <fabsf>:
 8017d00:	ee10 3a10 	vmov	r3, s0
 8017d04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017d08:	ee00 3a10 	vmov	s0, r3
 8017d0c:	4770      	bx	lr
	...

08017d10 <floorf>:
 8017d10:	ee10 3a10 	vmov	r3, s0
 8017d14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017d18:	0dca      	lsrs	r2, r1, #23
 8017d1a:	3a7f      	subs	r2, #127	; 0x7f
 8017d1c:	2a16      	cmp	r2, #22
 8017d1e:	dc2a      	bgt.n	8017d76 <floorf+0x66>
 8017d20:	2a00      	cmp	r2, #0
 8017d22:	da11      	bge.n	8017d48 <floorf+0x38>
 8017d24:	eddf 7a18 	vldr	s15, [pc, #96]	; 8017d88 <floorf+0x78>
 8017d28:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017d2c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d34:	dd05      	ble.n	8017d42 <floorf+0x32>
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	da23      	bge.n	8017d82 <floorf+0x72>
 8017d3a:	4a14      	ldr	r2, [pc, #80]	; (8017d8c <floorf+0x7c>)
 8017d3c:	2900      	cmp	r1, #0
 8017d3e:	bf18      	it	ne
 8017d40:	4613      	movne	r3, r2
 8017d42:	ee00 3a10 	vmov	s0, r3
 8017d46:	4770      	bx	lr
 8017d48:	4911      	ldr	r1, [pc, #68]	; (8017d90 <floorf+0x80>)
 8017d4a:	4111      	asrs	r1, r2
 8017d4c:	420b      	tst	r3, r1
 8017d4e:	d0fa      	beq.n	8017d46 <floorf+0x36>
 8017d50:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8017d88 <floorf+0x78>
 8017d54:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017d58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d60:	ddef      	ble.n	8017d42 <floorf+0x32>
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	bfbe      	ittt	lt
 8017d66:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8017d6a:	fa40 f202 	asrlt.w	r2, r0, r2
 8017d6e:	189b      	addlt	r3, r3, r2
 8017d70:	ea23 0301 	bic.w	r3, r3, r1
 8017d74:	e7e5      	b.n	8017d42 <floorf+0x32>
 8017d76:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8017d7a:	d3e4      	bcc.n	8017d46 <floorf+0x36>
 8017d7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017d80:	4770      	bx	lr
 8017d82:	2300      	movs	r3, #0
 8017d84:	e7dd      	b.n	8017d42 <floorf+0x32>
 8017d86:	bf00      	nop
 8017d88:	7149f2ca 	.word	0x7149f2ca
 8017d8c:	bf800000 	.word	0xbf800000
 8017d90:	007fffff 	.word	0x007fffff

08017d94 <scalbnf>:
 8017d94:	b508      	push	{r3, lr}
 8017d96:	ee10 2a10 	vmov	r2, s0
 8017d9a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8017d9e:	ed2d 8b02 	vpush	{d8}
 8017da2:	eef0 0a40 	vmov.f32	s1, s0
 8017da6:	d004      	beq.n	8017db2 <scalbnf+0x1e>
 8017da8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017dac:	d306      	bcc.n	8017dbc <scalbnf+0x28>
 8017dae:	ee70 0a00 	vadd.f32	s1, s0, s0
 8017db2:	ecbd 8b02 	vpop	{d8}
 8017db6:	eeb0 0a60 	vmov.f32	s0, s1
 8017dba:	bd08      	pop	{r3, pc}
 8017dbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017dc0:	d21c      	bcs.n	8017dfc <scalbnf+0x68>
 8017dc2:	4b1f      	ldr	r3, [pc, #124]	; (8017e40 <scalbnf+0xac>)
 8017dc4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8017e44 <scalbnf+0xb0>
 8017dc8:	4298      	cmp	r0, r3
 8017dca:	ee60 0a27 	vmul.f32	s1, s0, s15
 8017dce:	db10      	blt.n	8017df2 <scalbnf+0x5e>
 8017dd0:	ee10 2a90 	vmov	r2, s1
 8017dd4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8017dd8:	3b19      	subs	r3, #25
 8017dda:	4403      	add	r3, r0
 8017ddc:	2bfe      	cmp	r3, #254	; 0xfe
 8017dde:	dd0f      	ble.n	8017e00 <scalbnf+0x6c>
 8017de0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8017e48 <scalbnf+0xb4>
 8017de4:	eeb0 0a48 	vmov.f32	s0, s16
 8017de8:	f000 f834 	bl	8017e54 <copysignf>
 8017dec:	ee60 0a08 	vmul.f32	s1, s0, s16
 8017df0:	e7df      	b.n	8017db2 <scalbnf+0x1e>
 8017df2:	eddf 7a16 	vldr	s15, [pc, #88]	; 8017e4c <scalbnf+0xb8>
 8017df6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8017dfa:	e7da      	b.n	8017db2 <scalbnf+0x1e>
 8017dfc:	0ddb      	lsrs	r3, r3, #23
 8017dfe:	e7ec      	b.n	8017dda <scalbnf+0x46>
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	dd06      	ble.n	8017e12 <scalbnf+0x7e>
 8017e04:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8017e08:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8017e0c:	ee00 3a90 	vmov	s1, r3
 8017e10:	e7cf      	b.n	8017db2 <scalbnf+0x1e>
 8017e12:	f113 0f16 	cmn.w	r3, #22
 8017e16:	da06      	bge.n	8017e26 <scalbnf+0x92>
 8017e18:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017e1c:	4298      	cmp	r0, r3
 8017e1e:	dcdf      	bgt.n	8017de0 <scalbnf+0x4c>
 8017e20:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8017e4c <scalbnf+0xb8>
 8017e24:	e7de      	b.n	8017de4 <scalbnf+0x50>
 8017e26:	3319      	adds	r3, #25
 8017e28:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8017e2c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8017e30:	eddf 7a07 	vldr	s15, [pc, #28]	; 8017e50 <scalbnf+0xbc>
 8017e34:	ee07 3a10 	vmov	s14, r3
 8017e38:	ee67 0a27 	vmul.f32	s1, s14, s15
 8017e3c:	e7b9      	b.n	8017db2 <scalbnf+0x1e>
 8017e3e:	bf00      	nop
 8017e40:	ffff3cb0 	.word	0xffff3cb0
 8017e44:	4c000000 	.word	0x4c000000
 8017e48:	7149f2ca 	.word	0x7149f2ca
 8017e4c:	0da24260 	.word	0x0da24260
 8017e50:	33000000 	.word	0x33000000

08017e54 <copysignf>:
 8017e54:	ee10 3a10 	vmov	r3, s0
 8017e58:	ee10 2a90 	vmov	r2, s1
 8017e5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017e60:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8017e64:	4313      	orrs	r3, r2
 8017e66:	ee00 3a10 	vmov	s0, r3
 8017e6a:	4770      	bx	lr

08017e6c <_init>:
 8017e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e6e:	bf00      	nop
 8017e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e72:	bc08      	pop	{r3}
 8017e74:	469e      	mov	lr, r3
 8017e76:	4770      	bx	lr

08017e78 <_fini>:
 8017e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e7a:	bf00      	nop
 8017e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e7e:	bc08      	pop	{r3}
 8017e80:	469e      	mov	lr, r3
 8017e82:	4770      	bx	lr
