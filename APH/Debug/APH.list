
APH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800c65c  0800c65c  0001c65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c89c  0800c89c  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c89c  0800c89c  0001c89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8a4  0800c8a4  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8a4  0800c8a4  0001c8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8a8  0800c8a8  0001c8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800c8ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000090ec  2000015c  0800ca08  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009248  0800ca08  00029248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004238d  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005a06  00000000  00000000  00062519  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002ed8  00000000  00000000  00067f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002ca0  00000000  00000000  0006adf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cb5d  00000000  00000000  0006da98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001dd18  00000000  00000000  0008a5f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a8500  00000000  00000000  000a830d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015080d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cefc  00000000  00000000  00150888  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c644 	.word	0x0800c644

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000160 	.word	0x20000160
 80001dc:	0800c644 	.word	0x0800c644

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Set_Output>:




void Set_Output(GPIO_DebugPins dp, GPIO_PinState st)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	460a      	mov	r2, r1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(dpArray[dp].PORT, dpArray[dp].PIN, st);
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	4a08      	ldr	r2, [pc, #32]	; (80005b4 <Set_Output+0x34>)
 8000594:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <Set_Output+0x34>)
 800059c:	00db      	lsls	r3, r3, #3
 800059e:	4413      	add	r3, r2
 80005a0:	889b      	ldrh	r3, [r3, #4]
 80005a2:	79ba      	ldrb	r2, [r7, #6]
 80005a4:	4619      	mov	r1, r3
 80005a6:	f005 f935 	bl	8005814 <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000000 	.word	0x20000000

080005b8 <initFastTask>:
/* Private variables ---------------------------------------------------------*/

static osEventFlagsId_t ntFlag = NULL;

void initFastTask(osEventFlagsId_t normTaskEventHandle)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	ntFlag = normTaskEventHandle;
 80005c0:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <initFastTask+0x1c>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6013      	str	r3, [r2, #0]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000178 	.word	0x20000178

080005d8 <StartFastTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFastTask */
void StartFastTask(void *argument)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFastTask */
  uint32_t cnt = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  uint32_t loop = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
  uint32_t test = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]

  while (ntFlag == NULL)
 80005ec:	e002      	b.n	80005f4 <StartFastTask+0x1c>
  {
	  osDelay(1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f007 fdbc 	bl	800816c <osDelay>
  while (ntFlag == NULL)
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <StartFastTask+0x98>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d0f8      	beq.n	80005ee <StartFastTask+0x16>
  }
 /* Infinite loop */

  for(;;)
  {
  	Set_Output(OUT_TEST_1, 1);
 80005fc:	2101      	movs	r1, #1
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff ffbe 	bl	8000580 <Set_Output>
  	for(loop = 0; loop < 2000; loop++)
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	e005      	b.n	8000616 <StartFastTask+0x3e>
  	{
  		test = test + 3;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	3303      	adds	r3, #3
 800060e:	60fb      	str	r3, [r7, #12]
  	for(loop = 0; loop < 2000; loop++)
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	3301      	adds	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800061c:	d3f5      	bcc.n	800060a <StartFastTask+0x32>
  	}
  	if(test > 3000)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000624:	4293      	cmp	r3, r2
 8000626:	d902      	bls.n	800062e <StartFastTask+0x56>
  		test = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e001      	b.n	8000632 <StartFastTask+0x5a>
  	else
  		test = 7;
 800062e:	2307      	movs	r3, #7
 8000630:	60fb      	str	r3, [r7, #12]
  	Set_Output(OUT_TEST_1, 0);
 8000632:	2100      	movs	r1, #0
 8000634:	2000      	movs	r0, #0
 8000636:	f7ff ffa3 	bl	8000580 <Set_Output>

  	Set_Output(OUT_TEST_2, 1);
 800063a:	2101      	movs	r1, #1
 800063c:	2001      	movs	r0, #1
 800063e:	f7ff ff9f 	bl	8000580 <Set_Output>
    osDelay(1);
 8000642:	2001      	movs	r0, #1
 8000644:	f007 fd92 	bl	800816c <osDelay>
  	Set_Output(OUT_TEST_2, 0);
 8000648:	2100      	movs	r1, #0
 800064a:	2001      	movs	r0, #1
 800064c:	f7ff ff98 	bl	8000580 <Set_Output>
    cnt++;
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	3301      	adds	r3, #1
 8000654:	617b      	str	r3, [r7, #20]
    if (cnt >= 10)
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	2b09      	cmp	r3, #9
 800065a:	d9cf      	bls.n	80005fc <StartFastTask+0x24>
    {
    	cnt = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
    	osEventFlagsSet(ntFlag,1);
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <StartFastTask+0x98>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2101      	movs	r1, #1
 8000666:	4618      	mov	r0, r3
 8000668:	f007 fe00 	bl	800826c <osEventFlagsSet>
  	Set_Output(OUT_TEST_1, 1);
 800066c:	e7c6      	b.n	80005fc <StartFastTask+0x24>
 800066e:	bf00      	nop
 8000670:	20000178 	.word	0x20000178

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f004 fd28 	bl	80050cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067c:	f000 f86a 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000680:	f000 f8e8 	bl	8000854 <MX_GPIO_Init>
  MX_CRC_Init();
 8000684:	f000 f8d2 	bl	800082c <MX_CRC_Init>
//  MX_MEMS_Init();
  /* USER CODE BEGIN 2 */
  position_Init();
 8000688:	f00a fe40 	bl	800b30c <position_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800068c:	f007 fc5e 	bl	8007f4c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000690:	4a20      	ldr	r2, [pc, #128]	; (8000714 <main+0xa0>)
 8000692:	2100      	movs	r1, #0
 8000694:	4820      	ldr	r0, [pc, #128]	; (8000718 <main+0xa4>)
 8000696:	f007 fcc3 	bl	8008020 <osThreadNew>
 800069a:	4602      	mov	r2, r0
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <main+0xa8>)
 800069e:	601a      	str	r2, [r3, #0]

  /* creation of fastTask */
  fastTaskHandle = osThreadNew(StartFastTask, NULL, &fastTask_attributes);
 80006a0:	4a1f      	ldr	r2, [pc, #124]	; (8000720 <main+0xac>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	481f      	ldr	r0, [pc, #124]	; (8000724 <main+0xb0>)
 80006a6:	f007 fcbb 	bl	8008020 <osThreadNew>
 80006aa:	4602      	mov	r2, r0
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <main+0xb4>)
 80006ae:	601a      	str	r2, [r3, #0]

  /* creation of normalTask */
  normalTaskHandle = osThreadNew(StartNormalTask, NULL, &normalTask_attributes);
 80006b0:	4a1e      	ldr	r2, [pc, #120]	; (800072c <main+0xb8>)
 80006b2:	2100      	movs	r1, #0
 80006b4:	481e      	ldr	r0, [pc, #120]	; (8000730 <main+0xbc>)
 80006b6:	f007 fcb3 	bl	8008020 <osThreadNew>
 80006ba:	4602      	mov	r2, r0
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <main+0xc0>)
 80006be:	601a      	str	r2, [r3, #0]

  /* creation of slowTask */
  slowTaskHandle = osThreadNew(StartSlowTask, NULL, &slowTask_attributes);
 80006c0:	4a1d      	ldr	r2, [pc, #116]	; (8000738 <main+0xc4>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	481d      	ldr	r0, [pc, #116]	; (800073c <main+0xc8>)
 80006c6:	f007 fcab 	bl	8008020 <osThreadNew>
 80006ca:	4602      	mov	r2, r0
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <main+0xcc>)
 80006ce:	601a      	str	r2, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of normTaskEvent */
  normTaskEventHandle = osEventFlagsNew(&normTaskEvent_attributes);
 80006d0:	481c      	ldr	r0, [pc, #112]	; (8000744 <main+0xd0>)
 80006d2:	f007 fd79 	bl	80081c8 <osEventFlagsNew>
 80006d6:	4602      	mov	r2, r0
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <main+0xd4>)
 80006da:	601a      	str	r2, [r3, #0]

  /* creation of slowTaskEvent */
  slowTaskEventHandle = osEventFlagsNew(&slowTaskEvent_attributes);
 80006dc:	481b      	ldr	r0, [pc, #108]	; (800074c <main+0xd8>)
 80006de:	f007 fd73 	bl	80081c8 <osEventFlagsNew>
 80006e2:	4602      	mov	r2, r0
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <main+0xdc>)
 80006e6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  initFastTask(normTaskEventHandle);
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <main+0xd4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ff63 	bl	80005b8 <initFastTask>
  initSlowTask(slowTaskEventHandle);
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <main+0xdc>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f97c 	bl	80009f4 <initSlowTask>
  initNormalTask(normTaskEventHandle ,slowTaskEventHandle);
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <main+0xd4>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <main+0xdc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	4610      	mov	r0, r2
 8000708:	f000 f922 	bl	8000950 <initNormalTask>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800070c:	f007 fc52 	bl	8007fb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000710:	e7fe      	b.n	8000710 <main+0x9c>
 8000712:	bf00      	nop
 8000714:	0800c73c 	.word	0x0800c73c
 8000718:	08000915 	.word	0x08000915
 800071c:	200067a8 	.word	0x200067a8
 8000720:	0800c760 	.word	0x0800c760
 8000724:	080005d9 	.word	0x080005d9
 8000728:	200080f4 	.word	0x200080f4
 800072c:	0800c784 	.word	0x0800c784
 8000730:	0800097d 	.word	0x0800097d
 8000734:	20008030 	.word	0x20008030
 8000738:	0800c7a8 	.word	0x0800c7a8
 800073c:	08000a15 	.word	0x08000a15
 8000740:	20008038 	.word	0x20008038
 8000744:	0800c7cc 	.word	0x0800c7cc
 8000748:	20008034 	.word	0x20008034
 800074c:	0800c7dc 	.word	0x0800c7dc
 8000750:	200080f8 	.word	0x200080f8

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	; 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2230      	movs	r2, #48	; 0x30
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f00b f881 	bl	800b86a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	4b29      	ldr	r3, [pc, #164]	; (8000824 <SystemClock_Config+0xd0>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a28      	ldr	r2, [pc, #160]	; (8000824 <SystemClock_Config+0xd0>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b26      	ldr	r3, [pc, #152]	; (8000824 <SystemClock_Config+0xd0>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	4b23      	ldr	r3, [pc, #140]	; (8000828 <SystemClock_Config+0xd4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007a0:	4a21      	ldr	r2, [pc, #132]	; (8000828 <SystemClock_Config+0xd4>)
 80007a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <SystemClock_Config+0xd4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b4:	2302      	movs	r3, #2
 80007b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b8:	2301      	movs	r3, #1
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007bc:	2310      	movs	r3, #16
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c0:	2302      	movs	r3, #2
 80007c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c4:	2300      	movs	r3, #0
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007c8:	2310      	movs	r3, #16
 80007ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007d2:	2304      	movs	r3, #4
 80007d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007d6:	2307      	movs	r3, #7
 80007d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	4618      	mov	r0, r3
 80007e0:	f006 f844 	bl	800686c <HAL_RCC_OscConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ea:	f000 f8ad 	bl	8000948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ee:	230f      	movs	r3, #15
 80007f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2302      	movs	r3, #2
 80007f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2102      	movs	r1, #2
 800080a:	4618      	mov	r0, r3
 800080c:	f006 fa9e 	bl	8006d4c <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000816:	f000 f897 	bl	8000948 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3750      	adds	r7, #80	; 0x50
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_CRC_Init+0x20>)
 8000832:	4a07      	ldr	r2, [pc, #28]	; (8000850 <MX_CRC_Init+0x24>)
 8000834:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_CRC_Init+0x20>)
 8000838:	f004 fd6c 	bl	8005314 <HAL_CRC_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000842:	f000 f881 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20006fcc 	.word	0x20006fcc
 8000850:	40023000 	.word	0x40023000

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b27      	ldr	r3, [pc, #156]	; (800090c <MX_GPIO_Init+0xb8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a26      	ldr	r2, [pc, #152]	; (800090c <MX_GPIO_Init+0xb8>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b24      	ldr	r3, [pc, #144]	; (800090c <MX_GPIO_Init+0xb8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <MX_GPIO_Init+0xb8>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a1f      	ldr	r2, [pc, #124]	; (800090c <MX_GPIO_Init+0xb8>)
 8000890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_GPIO_Init+0xb8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <MX_GPIO_Init+0xb8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a18      	ldr	r2, [pc, #96]	; (800090c <MX_GPIO_Init+0xb8>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_GPIO_Init+0xb8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_GPIO_Init+0xb8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a11      	ldr	r2, [pc, #68]	; (800090c <MX_GPIO_Init+0xb8>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_GPIO_Init+0xb8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_TEST_1_Pin|OUT_TEST_2_Pin|OUT_TEST_3_Pin|OUT_TEST_4_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 7158 	mov.w	r1, #864	; 0x360
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <MX_GPIO_Init+0xbc>)
 80008e2:	f004 ff97 	bl	8005814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT_TEST_1_Pin OUT_TEST_2_Pin OUT_TEST_3_Pin OUT_TEST_4_Pin */
  GPIO_InitStruct.Pin = OUT_TEST_1_Pin|OUT_TEST_2_Pin|OUT_TEST_3_Pin|OUT_TEST_4_Pin;
 80008e6:	f44f 7358 	mov.w	r3, #864	; 0x360
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_GPIO_Init+0xbc>)
 8000900:	f004 fd24 	bl	800534c <HAL_GPIO_Init>

}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	; 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40020800 	.word	0x40020800

08000914 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800091c:	2001      	movs	r0, #1
 800091e:	f007 fc25 	bl	800816c <osDelay>
 8000922:	e7fb      	b.n	800091c <StartDefaultTask+0x8>

08000924 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d101      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000936:	f004 fbeb 	bl	8005110 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40014400 	.word	0x40014400

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094e:	e7fe      	b.n	800094e <Error_Handler+0x6>

08000950 <initNormalTask>:
static osEventFlagsId_t ntFlag = NULL;
static osEventFlagsId_t stFlag = NULL;


void initNormalTask(osEventFlagsId_t normTaskEventHandle, osEventFlagsId_t slowTaskEventHandle)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
	ntFlag = normTaskEventHandle;
 800095a:	4a06      	ldr	r2, [pc, #24]	; (8000974 <initNormalTask+0x24>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6013      	str	r3, [r2, #0]
	stFlag = slowTaskEventHandle;
 8000960:	4a05      	ldr	r2, [pc, #20]	; (8000978 <initNormalTask+0x28>)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	6013      	str	r3, [r2, #0]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	2000017c 	.word	0x2000017c
 8000978:	20000180 	.word	0x20000180

0800097c <StartNormalTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartNormalTask */
void StartNormalTask(void *argument)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	uint32_t cnt;
	uint32_t blink;



    while ((ntFlag == NULL) || (stFlag == NULL))
 8000984:	e002      	b.n	800098c <StartNormalTask+0x10>
	{
    	osDelay(1);
 8000986:	2001      	movs	r0, #1
 8000988:	f007 fbf0 	bl	800816c <osDelay>
    while ((ntFlag == NULL) || (stFlag == NULL))
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <StartNormalTask+0x70>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0f8      	beq.n	8000986 <StartNormalTask+0xa>
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <StartNormalTask+0x74>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d0f4      	beq.n	8000986 <StartNormalTask+0xa>


  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait (ntFlag,1, 0, 15);
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <StartNormalTask+0x70>)
 800099e:	6818      	ldr	r0, [r3, #0]
 80009a0:	230f      	movs	r3, #15
 80009a2:	2200      	movs	r2, #0
 80009a4:	2101      	movs	r1, #1
 80009a6:	f007 fcfd 	bl	80083a4 <osEventFlagsWait>
	  osEventFlagsClear(ntFlag,1);
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <StartNormalTask+0x70>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2101      	movs	r1, #1
 80009b0:	4618      	mov	r0, r3
 80009b2:	f007 fcb3 	bl	800831c <osEventFlagsClear>
	  cnt++;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	3301      	adds	r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
	  blink++;
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	3301      	adds	r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
	  Set_Output(OUT_TEST_3,blink & 1);
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4619      	mov	r1, r3
 80009ce:	2002      	movs	r0, #2
 80009d0:	f7ff fdd6 	bl	8000580 <Set_Output>
	  if(cnt >= 10)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2b09      	cmp	r3, #9
 80009d8:	d9e0      	bls.n	800099c <StartNormalTask+0x20>
	  {
		  cnt = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
		  osEventFlagsSet(stFlag,1);
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <StartNormalTask+0x74>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2101      	movs	r1, #1
 80009e4:	4618      	mov	r0, r3
 80009e6:	f007 fc41 	bl	800826c <osEventFlagsSet>
	  osEventFlagsWait (ntFlag,1, 0, 15);
 80009ea:	e7d7      	b.n	800099c <StartNormalTask+0x20>
 80009ec:	2000017c 	.word	0x2000017c
 80009f0:	20000180 	.word	0x20000180

080009f4 <initSlowTask>:
/* Private variables ---------------------------------------------------------*/
static osEventFlagsId_t stFlag = NULL;


void initSlowTask(osEventFlagsId_t slowTaskEventHandle)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	stFlag = slowTaskEventHandle;
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <initSlowTask+0x1c>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000184 	.word	0x20000184

08000a14 <StartSlowTask>:

void StartSlowTask(void *argument)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

	uint32_t cnt;
	uint32_t blink;
	//TaskHandle_t stHandle = xTaskGetHandle( "slowTask" );

	while (stFlag == NULL)
 8000a1c:	e002      	b.n	8000a24 <StartSlowTask+0x10>
    {
	  osDelay(1);
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f007 fba4 	bl	800816c <osDelay>
	while (stFlag == NULL)
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <StartSlowTask+0x7c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d0f8      	beq.n	8000a1e <StartSlowTask+0xa>
	}

	initCompass(57); //TODO
 8000a2c:	2039      	movs	r0, #57	; 0x39
 8000a2e:	f00a fc5d 	bl	800b2ec <initCompass>


  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait (stFlag,1, 0, 150);
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <StartSlowTask+0x7c>)
 8000a34:	6818      	ldr	r0, [r3, #0]
 8000a36:	2396      	movs	r3, #150	; 0x96
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	f007 fcb2 	bl	80083a4 <osEventFlagsWait>
	  osEventFlagsClear(stFlag,1);
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <StartSlowTask+0x7c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2101      	movs	r1, #1
 8000a46:	4618      	mov	r0, r3
 8000a48:	f007 fc68 	bl	800831c <osEventFlagsClear>
	  if(blink & 8)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <StartSlowTask+0x4a>
	  {
		  BSP_LED_On(LED_GREEN);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f004 fa4a 	bl	8004ef0 <BSP_LED_On>
 8000a5c:	e002      	b.n	8000a64 <StartSlowTask+0x50>
	  }
	  else
	  {
		  BSP_LED_Off(LED_GREEN);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f004 fa5c 	bl	8004f1c <BSP_LED_Off>
	  }
	  //Set_Output(OUT_TEST_4,blink & 1);
	  cnt++;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3301      	adds	r3, #1
 8000a68:	60fb      	str	r3, [r7, #12]
	  blink++;
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
	  Set_Output(OUT_TEST_4, 1);
 8000a70:	2101      	movs	r1, #1
 8000a72:	2003      	movs	r0, #3
 8000a74:	f7ff fd84 	bl	8000580 <Set_Output>
	  PositionProcess();
 8000a78:	f00a fc4e 	bl	800b318 <PositionProcess>
	  Set_Output(OUT_TEST_4, 0);
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2003      	movs	r0, #3
 8000a80:	f7ff fd7e 	bl	8000580 <Set_Output>
	  if(cnt >= 10)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b09      	cmp	r3, #9
 8000a88:	d9d3      	bls.n	8000a32 <StartSlowTask+0x1e>
	  {
//		  Set_Output(OUT_TEST_4, 1);
////		  printf("\n\n\n\rHallo\n\n\r");
		  cnt= 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
	  osEventFlagsWait (stFlag,1, 0, 150);
 8000a8e:	e7d0      	b.n	8000a32 <StartSlowTask+0x1e>
 8000a90:	20000184 	.word	0x20000184

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_MspInit+0x54>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <HAL_MspInit+0x54>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_MspInit+0x54>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <HAL_MspInit+0x54>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_MspInit+0x54>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_MspInit+0x54>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	f06f 0001 	mvn.w	r0, #1
 8000ada:	f004 fbf1 	bl	80052c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <HAL_CRC_MspInit+0x3c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10d      	bne.n	8000b1a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <HAL_CRC_MspInit+0x40>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <HAL_CRC_MspInit+0x40>)
 8000b08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <HAL_CRC_MspInit+0x40>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40023000 	.word	0x40023000
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	2019      	movs	r0, #25
 8000b46:	f004 fbbb 	bl	80052c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b4a:	2019      	movs	r0, #25
 8000b4c:	f004 fbd4 	bl	80052f8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <HAL_InitTick+0xa0>)
 8000b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b58:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <HAL_InitTick+0xa0>)
 8000b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <HAL_InitTick+0xa0>)
 8000b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b6c:	f107 0210 	add.w	r2, r7, #16
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f006 fada 	bl	8007130 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b7c:	f006 fac4 	bl	8007108 <HAL_RCC_GetPCLK2Freq>
 8000b80:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b84:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <HAL_InitTick+0xa4>)
 8000b86:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8a:	0c9b      	lsrs	r3, r3, #18
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_InitTick+0xa8>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <HAL_InitTick+0xac>)
 8000b94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <HAL_InitTick+0xa8>)
 8000b98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b9c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <HAL_InitTick+0xa8>)
 8000ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <HAL_InitTick+0xa8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_InitTick+0xa8>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <HAL_InitTick+0xa8>)
 8000bb2:	f006 faef 	bl	8007194 <HAL_TIM_Base_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d104      	bne.n	8000bc6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000bbc:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <HAL_InitTick+0xa8>)
 8000bbe:	f006 fb1e 	bl	80071fe <HAL_TIM_Base_Start_IT>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3730      	adds	r7, #48	; 0x30
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	431bde83 	.word	0x431bde83
 8000bd8:	2000911c 	.word	0x2000911c
 8000bdc:	40014400 	.word	0x40014400

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <NMI_Handler+0x4>

08000be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <UsageFault_Handler+0x4>

08000bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c12:	f006 fb18 	bl	8007246 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000911c 	.word	0x2000911c

08000c20 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <BSP_I2C1_Init+0x58>)
 8000c2c:	4a13      	ldr	r2, [pc, #76]	; (8000c7c <BSP_I2C1_Init+0x5c>)
 8000c2e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <BSP_I2C1_Init+0x60>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	1c5a      	adds	r2, r3, #1
 8000c36:	4912      	ldr	r1, [pc, #72]	; (8000c80 <BSP_I2C1_Init+0x60>)
 8000c38:	600a      	str	r2, [r1, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d117      	bne.n	8000c6e <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000c3e:	480e      	ldr	r0, [pc, #56]	; (8000c78 <BSP_I2C1_Init+0x58>)
 8000c40:	f005 fa9e 	bl	8006180 <HAL_I2C_GetState>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d111      	bne.n	8000c6e <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000c4a:	480b      	ldr	r0, [pc, #44]	; (8000c78 <BSP_I2C1_Init+0x58>)
 8000c4c:	f000 f8e2 	bl	8000e14 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10b      	bne.n	8000c6e <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000c56:	4808      	ldr	r0, [pc, #32]	; (8000c78 <BSP_I2C1_Init+0x58>)
 8000c58:	f000 f8a8 	bl	8000dac <MX_I2C1_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8000c62:	f06f 0307 	mvn.w	r3, #7
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	e001      	b.n	8000c6e <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000c6e:	687b      	ldr	r3, [r7, #4]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2000915c 	.word	0x2000915c
 8000c7c:	40005400 	.word	0x40005400
 8000c80:	20000188 	.word	0x20000188

08000c84 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <BSP_I2C1_DeInit+0x48>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d014      	beq.n	8000cc0 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <BSP_I2C1_DeInit+0x48>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <BSP_I2C1_DeInit+0x48>)
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <BSP_I2C1_DeInit+0x48>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d10b      	bne.n	8000cc0 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000ca8:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <BSP_I2C1_DeInit+0x4c>)
 8000caa:	f000 f8fd 	bl	8000ea8 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000cae:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <BSP_I2C1_DeInit+0x4c>)
 8000cb0:	f004 ff02 	bl	8005ab8 <HAL_I2C_DeInit>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d002      	beq.n	8000cc0 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000cba:	f06f 0307 	mvn.w	r3, #7
 8000cbe:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000188 	.word	0x20000188
 8000cd0:	2000915c 	.word	0x2000915c

08000cd4 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af04      	add	r7, sp, #16
 8000cda:	60ba      	str	r2, [r7, #8]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4603      	mov	r3, r0
 8000ce0:	81fb      	strh	r3, [r7, #14]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	81bb      	strh	r3, [r7, #12]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000cee:	89ba      	ldrh	r2, [r7, #12]
 8000cf0:	89f9      	ldrh	r1, [r7, #14]
 8000cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf6:	9302      	str	r3, [sp, #8]
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	9301      	str	r3, [sp, #4]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2301      	movs	r3, #1
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <BSP_I2C1_WriteReg+0x60>)
 8000d04:	f004 ff1c 	bl	8005b40 <HAL_I2C_Mem_Write>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d00c      	beq.n	8000d28 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000d0e:	4809      	ldr	r0, [pc, #36]	; (8000d34 <BSP_I2C1_WriteReg+0x60>)
 8000d10:	f005 fa44 	bl	800619c <HAL_I2C_GetError>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	d103      	bne.n	8000d22 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000d1a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	e002      	b.n	8000d28 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000d22:	f06f 0303 	mvn.w	r3, #3
 8000d26:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d28:	697b      	ldr	r3, [r7, #20]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000915c 	.word	0x2000915c

08000d38 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af04      	add	r7, sp, #16
 8000d3e:	60ba      	str	r2, [r7, #8]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4603      	mov	r3, r0
 8000d44:	81fb      	strh	r3, [r7, #14]
 8000d46:	460b      	mov	r3, r1
 8000d48:	81bb      	strh	r3, [r7, #12]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000d52:	89ba      	ldrh	r2, [r7, #12]
 8000d54:	89f9      	ldrh	r1, [r7, #14]
 8000d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5a:	9302      	str	r3, [sp, #8]
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	9301      	str	r3, [sp, #4]
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	2301      	movs	r3, #1
 8000d66:	480c      	ldr	r0, [pc, #48]	; (8000d98 <BSP_I2C1_ReadReg+0x60>)
 8000d68:	f004 ffe4 	bl	8005d34 <HAL_I2C_Mem_Read>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00c      	beq.n	8000d8c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000d72:	4809      	ldr	r0, [pc, #36]	; (8000d98 <BSP_I2C1_ReadReg+0x60>)
 8000d74:	f005 fa12 	bl	800619c <HAL_I2C_GetError>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	d103      	bne.n	8000d86 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000d7e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e002      	b.n	8000d8c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000d86:	f06f 0303 	mvn.w	r3, #3
 8000d8a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d8c:	697b      	ldr	r3, [r7, #20]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000915c 	.word	0x2000915c

08000d9c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000da0:	f004 f9ca 	bl	8005138 <HAL_GetTick>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <MX_I2C1_Init+0x60>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a13      	ldr	r2, [pc, #76]	; (8000e10 <MX_I2C1_Init+0x64>)
 8000dc2:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dd6:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f004 fd29 	bl	8005848 <HAL_I2C_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	000186a0 	.word	0x000186a0

08000e14 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <I2C1_MspInit+0x8c>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	4a1e      	ldr	r2, [pc, #120]	; (8000ea0 <I2C1_MspInit+0x8c>)
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <I2C1_MspInit+0x8c>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3e:	2312      	movs	r3, #18
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	4813      	ldr	r0, [pc, #76]	; (8000ea4 <I2C1_MspInit+0x90>)
 8000e56:	f004 fa79 	bl	800534c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000e5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e60:	2312      	movs	r3, #18
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <I2C1_MspInit+0x90>)
 8000e78:	f004 fa68 	bl	800534c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <I2C1_MspInit+0x8c>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <I2C1_MspInit+0x8c>)
 8000e86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <I2C1_MspInit+0x8c>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	; 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <I2C1_MspDeInit+0x30>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <I2C1_MspDeInit+0x30>)
 8000eb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000eba:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec0:	4806      	ldr	r0, [pc, #24]	; (8000edc <I2C1_MspDeInit+0x34>)
 8000ec2:	f004 fbc5 	bl	8005650 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000ec6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eca:	4804      	ldr	r0, [pc, #16]	; (8000edc <I2C1_MspDeInit+0x34>)
 8000ecc:	f004 fbc0 	bl	8005650 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020400 	.word	0x40020400

08000ee0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e00a      	b.n	8000f08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ef2:	f3af 8000 	nop.w
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	b2ca      	uxtb	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf0      	blt.n	8000ef2 <_read+0x12>
	}

return len;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	e009      	b.n	8000f40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	60ba      	str	r2, [r7, #8]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f004 f869 	bl	800500c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	dbf1      	blt.n	8000f2c <_write+0x12>
	}
	return len;
 8000f48:	687b      	ldr	r3, [r7, #4]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <_close>:

int _close(int file)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
	return -1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f7a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <_isatty>:

int _isatty(int file)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
	return 1;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
	return 0;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc4:	4a14      	ldr	r2, [pc, #80]	; (8001018 <_sbrk+0x5c>)
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <_sbrk+0x60>)
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <_sbrk+0x64>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <_sbrk+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d207      	bcs.n	8000ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fec:	f00a fc08 	bl	800b800 <__errno>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	230c      	movs	r3, #12
 8000ff4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e009      	b.n	8001010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <_sbrk+0x64>)
 800100c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20018000 	.word	0x20018000
 800101c:	00000400 	.word	0x00000400
 8001020:	2000018c 	.word	0x2000018c
 8001024:	20009248 	.word	0x20009248

08001028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <SystemInit+0x28>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001032:	4a07      	ldr	r2, [pc, #28]	; (8001050 <SystemInit+0x28>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <SystemInit+0x28>)
 800103e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001042:	609a      	str	r2, [r3, #8]
#endif
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800108c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001058:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800105a:	e003      	b.n	8001064 <LoopCopyDataInit>

0800105c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800105e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001060:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001062:	3104      	adds	r1, #4

08001064 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001064:	480b      	ldr	r0, [pc, #44]	; (8001094 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001068:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800106a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800106c:	d3f6      	bcc.n	800105c <CopyDataInit>
  ldr  r2, =_sbss
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001070:	e002      	b.n	8001078 <LoopFillZerobss>

08001072 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001072:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001074:	f842 3b04 	str.w	r3, [r2], #4

08001078 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800107a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800107c:	d3f9      	bcc.n	8001072 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800107e:	f7ff ffd3 	bl	8001028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001082:	f00a fbc3 	bl	800b80c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001086:	f7ff faf5 	bl	8000674 <main>
  bx  lr    
 800108a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800108c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001090:	0800c8ac 	.word	0x0800c8ac
  ldr  r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001098:	2000015c 	.word	0x2000015c
  ldr  r2, =_sbss
 800109c:	2000015c 	.word	0x2000015c
  ldr  r3, = _ebss
 80010a0:	20009248 	.word	0x20009248

080010a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC_IRQHandler>
	...

080010a8 <LIS2DW12_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d103      	bne.n	80010c4 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e04d      	b.n	8001160 <LIS2DW12_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	7b1a      	ldrb	r2, [r3, #12]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	699a      	ldr	r2, [r3, #24]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a1b      	ldr	r2, [pc, #108]	; (800116c <LIS2DW12_RegisterBusIO+0xc4>)
 8001100:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a1a      	ldr	r2, [pc, #104]	; (8001170 <LIS2DW12_RegisterBusIO+0xc8>)
 8001106:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d103      	bne.n	800111e <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	e020      	b.n	8001160 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4798      	blx	r3
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <LIS2DW12_RegisterBusIO+0x8a>
    {
      ret = LIS2DW12_ERROR;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	e016      	b.n	8001160 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d112      	bne.n	8001160 <LIS2DW12_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10d      	bne.n	8001160 <LIS2DW12_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001144:	2305      	movs	r3, #5
 8001146:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001148:	7afb      	ldrb	r3, [r7, #11]
 800114a:	461a      	mov	r2, r3
 800114c:	2121      	movs	r1, #33	; 0x21
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fd87 	bl	8001c62 <LIS2DW12_Write_Reg>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <LIS2DW12_RegisterBusIO+0xb8>
          {
            ret = LIS2DW12_ERROR;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001160:	68fb      	ldr	r3, [r7, #12]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	08001ff5 	.word	0x08001ff5
 8001170:	0800202b 	.word	0x0800202b

08001174 <LIS2DW12_Init>:
 * @brief  Initialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	331c      	adds	r3, #28
 8001180:	2101      	movs	r1, #1
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fa94 	bl	80026b0 <lis2dw12_auto_increment_set>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	e04b      	b.n	800122c <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	331c      	adds	r3, #28
 8001198:	2101      	movs	r1, #1
 800119a:	4618      	mov	r0, r3
 800119c:	f001 f9a8 	bl	80024f0 <lis2dw12_block_data_update_set>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d002      	beq.n	80011ac <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	e03f      	b.n	800122c <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	331c      	adds	r3, #28
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 faa2 	bl	80026fc <lis2dw12_fifo_mode_set>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	e033      	b.n	800122c <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	331c      	adds	r3, #28
 80011c8:	2104      	movs	r1, #4
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 ff78 	bl	80020c0 <lis2dw12_power_mode_set>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	e027      	b.n	800122c <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a15      	ldr	r2, [pc, #84]	; (8001234 <LIS2DW12_Init+0xc0>)
 80011e0:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	331c      	adds	r3, #28
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f001 f869 	bl	80022d0 <lis2dw12_data_rate_set>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	e010      	b.n	800122c <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	331c      	adds	r3, #28
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f001 f993 	bl	800253c <lis2dw12_full_scale_set>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	e004      	b.n	800122c <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	42c80000 	.word	0x42c80000

08001238 <LIS2DW12_DeInit>:
 * @brief  Deinitialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 f888 	bl	8001356 <LIS2DW12_ACC_Disable>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d002      	beq.n	8001252 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 800124c:	f04f 33ff 	mov.w	r3, #4294967295
 8001250:	e010      	b.n	8001274 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <LIS2DW12_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	331c      	adds	r3, #28
 800128a:	6839      	ldr	r1, [r7, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f001 f9fe 	bl	800268e <lis2dw12_device_id_get>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
 800129c:	e000      	b.n	80012a0 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <LIS2DW12_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2DW12 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2200      	movs	r2, #0
 80012c2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	2210      	movs	r2, #16
 80012d4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	4a06      	ldr	r2, [pc, #24]	; (8001300 <LIS2DW12_GetCapabilities+0x58>)
 80012e8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	44c80000 	.word	0x44c80000

08001304 <LIS2DW12_ACC_Enable>:
 * @brief  Enable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001312:	2b01      	cmp	r3, #1
 8001314:	d101      	bne.n	800131a <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e019      	b.n	800134e <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode, pObj->acc_low_noise) != LIS2DW12_OK)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800132c:	461a      	mov	r2, r3
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fcb0 	bl	8001c98 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <LIS2DW12_ACC_Enable+0x40>
  {
    return LIS2DW12_ERROR;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	e004      	b.n	800134e <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <LIS2DW12_ACC_Disable>:
 * @brief  Disable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	e010      	b.n	800138e <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	331c      	adds	r3, #28
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f000 ffac 	bl	80022d0 <lis2dw12_data_rate_set>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	e004      	b.n	800138e <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <LIS2DW12_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	331c      	adds	r3, #28
 80013aa:	f107 020b 	add.w	r2, r7, #11
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f001 f8e9 	bl	8002588 <lis2dw12_full_scale_get>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	e0a0      	b.n	8001504 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	331c      	adds	r3, #28
 80013c6:	f107 020a 	add.w	r2, r7, #10
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fec5 	bl	800215c <lis2dw12_power_mode_get>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
 80013dc:	e092      	b.n	8001504 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch(mode)
 80013de:	7abb      	ldrb	r3, [r7, #10]
 80013e0:	2b1b      	cmp	r3, #27
 80013e2:	f200 8087 	bhi.w	80014f4 <LIS2DW12_ACC_GetSensitivity+0x15c>
 80013e6:	a201      	add	r2, pc, #4	; (adr r2, 80013ec <LIS2DW12_ACC_GetSensitivity+0x54>)
 80013e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ec:	0800145d 	.word	0x0800145d
 80013f0:	080014a9 	.word	0x080014a9
 80013f4:	080014a9 	.word	0x080014a9
 80013f8:	080014a9 	.word	0x080014a9
 80013fc:	080014a9 	.word	0x080014a9
 8001400:	080014f5 	.word	0x080014f5
 8001404:	080014f5 	.word	0x080014f5
 8001408:	080014f5 	.word	0x080014f5
 800140c:	0800145d 	.word	0x0800145d
 8001410:	080014a9 	.word	0x080014a9
 8001414:	080014a9 	.word	0x080014a9
 8001418:	080014a9 	.word	0x080014a9
 800141c:	080014f5 	.word	0x080014f5
 8001420:	080014f5 	.word	0x080014f5
 8001424:	080014f5 	.word	0x080014f5
 8001428:	080014f5 	.word	0x080014f5
 800142c:	0800145d 	.word	0x0800145d
 8001430:	080014a9 	.word	0x080014a9
 8001434:	080014a9 	.word	0x080014a9
 8001438:	080014a9 	.word	0x080014a9
 800143c:	080014a9 	.word	0x080014a9
 8001440:	080014f5 	.word	0x080014f5
 8001444:	080014f5 	.word	0x080014f5
 8001448:	080014f5 	.word	0x080014f5
 800144c:	0800145d 	.word	0x0800145d
 8001450:	080014a9 	.word	0x080014a9
 8001454:	080014a9 	.word	0x080014a9
 8001458:	080014a9 	.word	0x080014a9
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 800145c:	7afb      	ldrb	r3, [r7, #11]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d81a      	bhi.n	8001498 <LIS2DW12_ACC_GetSensitivity+0x100>
 8001462:	a201      	add	r2, pc, #4	; (adr r2, 8001468 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8001464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001468:	08001479 	.word	0x08001479
 800146c:	08001481 	.word	0x08001481
 8001470:	08001489 	.word	0x08001489
 8001474:	08001491 	.word	0x08001491
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4a24      	ldr	r2, [pc, #144]	; (800150c <LIS2DW12_ACC_GetSensitivity+0x174>)
 800147c:	601a      	str	r2, [r3, #0]
           break;
 800147e:	e012      	b.n	80014a6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	4a23      	ldr	r2, [pc, #140]	; (8001510 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8001484:	601a      	str	r2, [r3, #0]
          break;
 8001486:	e00e      	b.n	80014a6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4a22      	ldr	r2, [pc, #136]	; (8001514 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 800148c:	601a      	str	r2, [r3, #0]
           break;
 800148e:	e00a      	b.n	80014a6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	4a21      	ldr	r2, [pc, #132]	; (8001518 <LIS2DW12_ACC_GetSensitivity+0x180>)
 8001494:	601a      	str	r2, [r3, #0]
          break;
 8001496:	e006      	b.n	80014a6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	4a20      	ldr	r2, [pc, #128]	; (800151c <LIS2DW12_ACC_GetSensitivity+0x184>)
 800149c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	60fb      	str	r3, [r7, #12]
          break;
 80014a4:	bf00      	nop
      }
      break;
 80014a6:	e02c      	b.n	8001502 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 80014a8:	7afb      	ldrb	r3, [r7, #11]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d81a      	bhi.n	80014e4 <LIS2DW12_ACC_GetSensitivity+0x14c>
 80014ae:	a201      	add	r2, pc, #4	; (adr r2, 80014b4 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	080014c5 	.word	0x080014c5
 80014b8:	080014cd 	.word	0x080014cd
 80014bc:	080014d5 	.word	0x080014d5
 80014c0:	080014dd 	.word	0x080014dd
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	4a16      	ldr	r2, [pc, #88]	; (8001520 <LIS2DW12_ACC_GetSensitivity+0x188>)
 80014c8:	601a      	str	r2, [r3, #0]
           break;
 80014ca:	e012      	b.n	80014f2 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	4a15      	ldr	r2, [pc, #84]	; (8001524 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 80014d0:	601a      	str	r2, [r3, #0]
          break;
 80014d2:	e00e      	b.n	80014f2 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	4a0d      	ldr	r2, [pc, #52]	; (800150c <LIS2DW12_ACC_GetSensitivity+0x174>)
 80014d8:	601a      	str	r2, [r3, #0]
           break;
 80014da:	e00a      	b.n	80014f2 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	4a0c      	ldr	r2, [pc, #48]	; (8001510 <LIS2DW12_ACC_GetSensitivity+0x178>)
 80014e0:	601a      	str	r2, [r3, #0]
          break;
 80014e2:	e006      	b.n	80014f2 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	4a0d      	ldr	r2, [pc, #52]	; (800151c <LIS2DW12_ACC_GetSensitivity+0x184>)
 80014e8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	60fb      	str	r3, [r7, #12]
          break;
 80014f0:	bf00      	nop
      }
      break;
 80014f2:	e006      	b.n	8001502 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	4a09      	ldr	r2, [pc, #36]	; (800151c <LIS2DW12_ACC_GetSensitivity+0x184>)
 80014f8:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	60fb      	str	r3, [r7, #12]
      break;
 8001500:	bf00      	nop
  }

  return ret;
 8001502:	68fb      	ldr	r3, [r7, #12]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	3f79db23 	.word	0x3f79db23
 8001510:	3ff9db23 	.word	0x3ff9db23
 8001514:	4079db23 	.word	0x4079db23
 8001518:	40f9db23 	.word	0x40f9db23
 800151c:	bf800000 	.word	0xbf800000
 8001520:	3e79db23 	.word	0x3e79db23
 8001524:	3ef9db23 	.word	0x3ef9db23

08001528 <LIS2DW12_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	331c      	adds	r3, #28
 800153a:	f107 020b 	add.w	r2, r7, #11
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f000 ff0b 	bl	800235c <lis2dw12_data_rate_get>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	e1d4      	b.n	80018fc <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	331c      	adds	r3, #28
 8001556:	f107 020a 	add.w	r2, r7, #10
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f000 fdfd 	bl	800215c <lis2dw12_power_mode_get>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d002      	beq.n	800156e <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
 800156c:	e1c6      	b.n	80018fc <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 800156e:	7afb      	ldrb	r3, [r7, #11]
 8001570:	2b32      	cmp	r3, #50	; 0x32
 8001572:	f200 81bb 	bhi.w	80018ec <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 8001576:	a201      	add	r2, pc, #4	; (adr r2, 800157c <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	08001649 	.word	0x08001649
 8001580:	08001653 	.word	0x08001653
 8001584:	080016f1 	.word	0x080016f1
 8001588:	080016f9 	.word	0x080016f9
 800158c:	08001701 	.word	0x08001701
 8001590:	08001709 	.word	0x08001709
 8001594:	08001711 	.word	0x08001711
 8001598:	08001719 	.word	0x08001719
 800159c:	080017b5 	.word	0x080017b5
 80015a0:	08001851 	.word	0x08001851
 80015a4:	080018ed 	.word	0x080018ed
 80015a8:	080018ed 	.word	0x080018ed
 80015ac:	080018ed 	.word	0x080018ed
 80015b0:	080018ed 	.word	0x080018ed
 80015b4:	080018ed 	.word	0x080018ed
 80015b8:	080018ed 	.word	0x080018ed
 80015bc:	080018ed 	.word	0x080018ed
 80015c0:	080018ed 	.word	0x080018ed
 80015c4:	08001649 	.word	0x08001649
 80015c8:	080018ed 	.word	0x080018ed
 80015cc:	080018ed 	.word	0x080018ed
 80015d0:	080018ed 	.word	0x080018ed
 80015d4:	080018ed 	.word	0x080018ed
 80015d8:	080018ed 	.word	0x080018ed
 80015dc:	080018ed 	.word	0x080018ed
 80015e0:	080018ed 	.word	0x080018ed
 80015e4:	080018ed 	.word	0x080018ed
 80015e8:	080018ed 	.word	0x080018ed
 80015ec:	080018ed 	.word	0x080018ed
 80015f0:	080018ed 	.word	0x080018ed
 80015f4:	080018ed 	.word	0x080018ed
 80015f8:	080018ed 	.word	0x080018ed
 80015fc:	080018ed 	.word	0x080018ed
 8001600:	080018ed 	.word	0x080018ed
 8001604:	080018ed 	.word	0x080018ed
 8001608:	080018ed 	.word	0x080018ed
 800160c:	080018ed 	.word	0x080018ed
 8001610:	080018ed 	.word	0x080018ed
 8001614:	080018ed 	.word	0x080018ed
 8001618:	080018ed 	.word	0x080018ed
 800161c:	080018ed 	.word	0x080018ed
 8001620:	080018ed 	.word	0x080018ed
 8001624:	080018ed 	.word	0x080018ed
 8001628:	080018ed 	.word	0x080018ed
 800162c:	080018ed 	.word	0x080018ed
 8001630:	080018ed 	.word	0x080018ed
 8001634:	080018ed 	.word	0x080018ed
 8001638:	080018ed 	.word	0x080018ed
 800163c:	080018ed 	.word	0x080018ed
 8001640:	080018ed 	.word	0x080018ed
 8001644:	08001649 	.word	0x08001649
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
      break;
 8001650:	e153      	b.n	80018fa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8001652:	7abb      	ldrb	r3, [r7, #10]
 8001654:	2b1b      	cmp	r3, #27
 8001656:	d843      	bhi.n	80016e0 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 8001658:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 800165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165e:	bf00      	nop
 8001660:	080016d9 	.word	0x080016d9
 8001664:	080016d9 	.word	0x080016d9
 8001668:	080016d9 	.word	0x080016d9
 800166c:	080016d9 	.word	0x080016d9
 8001670:	080016d1 	.word	0x080016d1
 8001674:	080016e1 	.word	0x080016e1
 8001678:	080016e1 	.word	0x080016e1
 800167c:	080016e1 	.word	0x080016e1
 8001680:	080016d9 	.word	0x080016d9
 8001684:	080016d9 	.word	0x080016d9
 8001688:	080016d9 	.word	0x080016d9
 800168c:	080016d9 	.word	0x080016d9
 8001690:	080016e1 	.word	0x080016e1
 8001694:	080016e1 	.word	0x080016e1
 8001698:	080016e1 	.word	0x080016e1
 800169c:	080016e1 	.word	0x080016e1
 80016a0:	080016d9 	.word	0x080016d9
 80016a4:	080016d9 	.word	0x080016d9
 80016a8:	080016d9 	.word	0x080016d9
 80016ac:	080016d9 	.word	0x080016d9
 80016b0:	080016d1 	.word	0x080016d1
 80016b4:	080016e1 	.word	0x080016e1
 80016b8:	080016e1 	.word	0x080016e1
 80016bc:	080016e1 	.word	0x080016e1
 80016c0:	080016d9 	.word	0x080016d9
 80016c4:	080016d9 	.word	0x080016d9
 80016c8:	080016d9 	.word	0x080016d9
 80016cc:	080016d9 	.word	0x080016d9
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	4a8c      	ldr	r2, [pc, #560]	; (8001904 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80016d4:	601a      	str	r2, [r3, #0]
           break;
 80016d6:	e00a      	b.n	80016ee <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	4a8b      	ldr	r2, [pc, #556]	; (8001908 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 80016dc:	601a      	str	r2, [r3, #0]
          break;
 80016de:	e006      	b.n	80016ee <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	4a8a      	ldr	r2, [pc, #552]	; (800190c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80016e4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ea:	60fb      	str	r3, [r7, #12]
          break;
 80016ec:	bf00      	nop
      }
      break;
 80016ee:	e104      	b.n	80018fa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	4a84      	ldr	r2, [pc, #528]	; (8001904 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80016f4:	601a      	str	r2, [r3, #0]
      break;
 80016f6:	e100      	b.n	80018fa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	4a85      	ldr	r2, [pc, #532]	; (8001910 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 80016fc:	601a      	str	r2, [r3, #0]
      break;
 80016fe:	e0fc      	b.n	80018fa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	4a84      	ldr	r2, [pc, #528]	; (8001914 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 8001704:	601a      	str	r2, [r3, #0]
      break;
 8001706:	e0f8      	b.n	80018fa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	4a83      	ldr	r2, [pc, #524]	; (8001918 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 800170c:	601a      	str	r2, [r3, #0]
      break;
 800170e:	e0f4      	b.n	80018fa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	4a82      	ldr	r2, [pc, #520]	; (800191c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8001714:	601a      	str	r2, [r3, #0]
      break;
 8001716:	e0f0      	b.n	80018fa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8001718:	7abb      	ldrb	r3, [r7, #10]
 800171a:	2b1b      	cmp	r3, #27
 800171c:	d842      	bhi.n	80017a4 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 800171e:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	0800179d 	.word	0x0800179d
 8001728:	0800179d 	.word	0x0800179d
 800172c:	0800179d 	.word	0x0800179d
 8001730:	0800179d 	.word	0x0800179d
 8001734:	08001795 	.word	0x08001795
 8001738:	080017a5 	.word	0x080017a5
 800173c:	080017a5 	.word	0x080017a5
 8001740:	080017a5 	.word	0x080017a5
 8001744:	0800179d 	.word	0x0800179d
 8001748:	0800179d 	.word	0x0800179d
 800174c:	0800179d 	.word	0x0800179d
 8001750:	0800179d 	.word	0x0800179d
 8001754:	080017a5 	.word	0x080017a5
 8001758:	080017a5 	.word	0x080017a5
 800175c:	080017a5 	.word	0x080017a5
 8001760:	080017a5 	.word	0x080017a5
 8001764:	0800179d 	.word	0x0800179d
 8001768:	0800179d 	.word	0x0800179d
 800176c:	0800179d 	.word	0x0800179d
 8001770:	0800179d 	.word	0x0800179d
 8001774:	08001795 	.word	0x08001795
 8001778:	080017a5 	.word	0x080017a5
 800177c:	080017a5 	.word	0x080017a5
 8001780:	080017a5 	.word	0x080017a5
 8001784:	0800179d 	.word	0x0800179d
 8001788:	0800179d 	.word	0x0800179d
 800178c:	0800179d 	.word	0x0800179d
 8001790:	0800179d 	.word	0x0800179d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	4a62      	ldr	r2, [pc, #392]	; (8001920 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 8001798:	601a      	str	r2, [r3, #0]
           break;
 800179a:	e00a      	b.n	80017b2 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	4a5f      	ldr	r2, [pc, #380]	; (800191c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80017a0:	601a      	str	r2, [r3, #0]
          break;
 80017a2:	e006      	b.n	80017b2 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	4a59      	ldr	r2, [pc, #356]	; (800190c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80017a8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	60fb      	str	r3, [r7, #12]
          break;
 80017b0:	bf00      	nop
      }
      break;
 80017b2:	e0a2      	b.n	80018fa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 80017b4:	7abb      	ldrb	r3, [r7, #10]
 80017b6:	2b1b      	cmp	r3, #27
 80017b8:	d842      	bhi.n	8001840 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	08001839 	.word	0x08001839
 80017c4:	08001839 	.word	0x08001839
 80017c8:	08001839 	.word	0x08001839
 80017cc:	08001839 	.word	0x08001839
 80017d0:	08001831 	.word	0x08001831
 80017d4:	08001841 	.word	0x08001841
 80017d8:	08001841 	.word	0x08001841
 80017dc:	08001841 	.word	0x08001841
 80017e0:	08001839 	.word	0x08001839
 80017e4:	08001839 	.word	0x08001839
 80017e8:	08001839 	.word	0x08001839
 80017ec:	08001839 	.word	0x08001839
 80017f0:	08001841 	.word	0x08001841
 80017f4:	08001841 	.word	0x08001841
 80017f8:	08001841 	.word	0x08001841
 80017fc:	08001841 	.word	0x08001841
 8001800:	08001839 	.word	0x08001839
 8001804:	08001839 	.word	0x08001839
 8001808:	08001839 	.word	0x08001839
 800180c:	08001839 	.word	0x08001839
 8001810:	08001831 	.word	0x08001831
 8001814:	08001841 	.word	0x08001841
 8001818:	08001841 	.word	0x08001841
 800181c:	08001841 	.word	0x08001841
 8001820:	08001839 	.word	0x08001839
 8001824:	08001839 	.word	0x08001839
 8001828:	08001839 	.word	0x08001839
 800182c:	08001839 	.word	0x08001839
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	4a3c      	ldr	r2, [pc, #240]	; (8001924 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8001834:	601a      	str	r2, [r3, #0]
           break;
 8001836:	e00a      	b.n	800184e <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	4a38      	ldr	r2, [pc, #224]	; (800191c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 800183c:	601a      	str	r2, [r3, #0]
          break;
 800183e:	e006      	b.n	800184e <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	4a32      	ldr	r2, [pc, #200]	; (800190c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001844:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	60fb      	str	r3, [r7, #12]
          break;
 800184c:	bf00      	nop
      }
      break;
 800184e:	e054      	b.n	80018fa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8001850:	7abb      	ldrb	r3, [r7, #10]
 8001852:	2b1b      	cmp	r3, #27
 8001854:	d842      	bhi.n	80018dc <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 8001856:	a201      	add	r2, pc, #4	; (adr r2, 800185c <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 8001858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185c:	080018d5 	.word	0x080018d5
 8001860:	080018d5 	.word	0x080018d5
 8001864:	080018d5 	.word	0x080018d5
 8001868:	080018d5 	.word	0x080018d5
 800186c:	080018cd 	.word	0x080018cd
 8001870:	080018dd 	.word	0x080018dd
 8001874:	080018dd 	.word	0x080018dd
 8001878:	080018dd 	.word	0x080018dd
 800187c:	080018d5 	.word	0x080018d5
 8001880:	080018d5 	.word	0x080018d5
 8001884:	080018d5 	.word	0x080018d5
 8001888:	080018d5 	.word	0x080018d5
 800188c:	080018dd 	.word	0x080018dd
 8001890:	080018dd 	.word	0x080018dd
 8001894:	080018dd 	.word	0x080018dd
 8001898:	080018dd 	.word	0x080018dd
 800189c:	080018d5 	.word	0x080018d5
 80018a0:	080018d5 	.word	0x080018d5
 80018a4:	080018d5 	.word	0x080018d5
 80018a8:	080018d5 	.word	0x080018d5
 80018ac:	080018cd 	.word	0x080018cd
 80018b0:	080018dd 	.word	0x080018dd
 80018b4:	080018dd 	.word	0x080018dd
 80018b8:	080018dd 	.word	0x080018dd
 80018bc:	080018d5 	.word	0x080018d5
 80018c0:	080018d5 	.word	0x080018d5
 80018c4:	080018d5 	.word	0x080018d5
 80018c8:	080018d5 	.word	0x080018d5
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	4a16      	ldr	r2, [pc, #88]	; (8001928 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 80018d0:	601a      	str	r2, [r3, #0]
           break;
 80018d2:	e00a      	b.n	80018ea <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	4a11      	ldr	r2, [pc, #68]	; (800191c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80018d8:	601a      	str	r2, [r3, #0]
          break;
 80018da:	e006      	b.n	80018ea <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80018e0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	60fb      	str	r3, [r7, #12]
          break;
 80018e8:	bf00      	nop
      }
      break;
 80018ea:	e006      	b.n	80018fa <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	4a07      	ldr	r2, [pc, #28]	; (800190c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80018f0:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	60fb      	str	r3, [r7, #12]
      break;
 80018f8:	bf00      	nop
  }

  return ret;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	41480000 	.word	0x41480000
 8001908:	3fcccccd 	.word	0x3fcccccd
 800190c:	bf800000 	.word	0xbf800000
 8001910:	41c80000 	.word	0x41c80000
 8001914:	42480000 	.word	0x42480000
 8001918:	42c80000 	.word	0x42c80000
 800191c:	43480000 	.word	0x43480000
 8001920:	43c80000 	.word	0x43c80000
 8001924:	44480000 	.word	0x44480000
 8001928:	44c80000 	.word	0x44c80000

0800192c <LIS2DW12_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	ed97 0a00 	vldr	s0, [r7]
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f805 	bl	8001950 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8001946:	4603      	mov	r3, r0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	ed87 0a02 	vstr	s0, [r7, #8]
 800195c:	460b      	mov	r3, r1
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	4613      	mov	r3, r2
 8001962:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800196a:	2b01      	cmp	r3, #1
 800196c:	d109      	bne.n	8001982 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 800196e:	79ba      	ldrb	r2, [r7, #6]
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	4619      	mov	r1, r3
 8001974:	ed97 0a02 	vldr	s0, [r7, #8]
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f000 f98d 	bl	8001c98 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 800197e:	4603      	mov	r3, r0
 8001980:	e008      	b.n	8001994 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8001982:	79ba      	ldrb	r2, [r7, #6]
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	4619      	mov	r1, r3
 8001988:	ed97 0a02 	vldr	s0, [r7, #8]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 fa9f 	bl	8001ed0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8001992:	4603      	mov	r3, r0
  }
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <LIS2DW12_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	331c      	adds	r3, #28
 80019ae:	f107 020b 	add.w	r2, r7, #11
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 fde7 	bl	8002588 <lis2dw12_full_scale_get>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
 80019c4:	e027      	b.n	8001a16 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 80019c6:	7afb      	ldrb	r3, [r7, #11]
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d81b      	bhi.n	8001a04 <LIS2DW12_ACC_GetFullScale+0x68>
 80019cc:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <LIS2DW12_ACC_GetFullScale+0x38>)
 80019ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d2:	bf00      	nop
 80019d4:	080019e5 	.word	0x080019e5
 80019d8:	080019ed 	.word	0x080019ed
 80019dc:	080019f5 	.word	0x080019f5
 80019e0:	080019fd 	.word	0x080019fd
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2202      	movs	r2, #2
 80019e8:	601a      	str	r2, [r3, #0]
      break;
 80019ea:	e013      	b.n	8001a14 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	2204      	movs	r2, #4
 80019f0:	601a      	str	r2, [r3, #0]
      break;
 80019f2:	e00f      	b.n	8001a14 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2208      	movs	r2, #8
 80019f8:	601a      	str	r2, [r3, #0]
      break;
 80019fa:	e00b      	b.n	8001a14 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2210      	movs	r2, #16
 8001a00:	601a      	str	r2, [r3, #0]
      break;
 8001a02:	e007      	b.n	8001a14 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0a:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	60fb      	str	r3, [r7, #12]
      break;
 8001a12:	bf00      	nop
  }

  return ret;
 8001a14:	68fb      	ldr	r3, [r7, #12]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop

08001a20 <LIS2DW12_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
         : (FullScale <= 4) ? LIS2DW12_4g
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	dd0b      	ble.n	8001a48 <LIS2DW12_ACC_SetFullScale+0x28>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	dd06      	ble.n	8001a44 <LIS2DW12_ACC_SetFullScale+0x24>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	dc01      	bgt.n	8001a40 <LIS2DW12_ACC_SetFullScale+0x20>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e004      	b.n	8001a4a <LIS2DW12_ACC_SetFullScale+0x2a>
 8001a40:	2303      	movs	r3, #3
 8001a42:	e002      	b.n	8001a4a <LIS2DW12_ACC_SetFullScale+0x2a>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <LIS2DW12_ACC_SetFullScale+0x2a>
 8001a48:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8001a4a:	73fb      	strb	r3, [r7, #15]
         : (FullScale <= 8) ? LIS2DW12_8g
         :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	331c      	adds	r3, #28
 8001a50:	7bfa      	ldrb	r2, [r7, #15]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 fd71 	bl	800253c <lis2dw12_full_scale_set>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
 8001a64:	e000      	b.n	8001a68 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <LIS2DW12_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	331c      	adds	r3, #28
 8001a82:	f107 020b 	add.w	r2, r7, #11
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 fb67 	bl	800215c <lis2dw12_power_mode_get>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	e089      	b.n	8001bae <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	331c      	adds	r3, #28
 8001a9e:	f107 020c 	add.w	r2, r7, #12
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 fda7 	bl	80025f8 <lis2dw12_acceleration_raw_get>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab4:	e07b      	b.n	8001bae <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch(mode)
 8001ab6:	7afb      	ldrb	r3, [r7, #11]
 8001ab8:	2b1b      	cmp	r3, #27
 8001aba:	d873      	bhi.n	8001ba4 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8001abc:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8001abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac2:	bf00      	nop
 8001ac4:	08001b35 	.word	0x08001b35
 8001ac8:	08001b6d 	.word	0x08001b6d
 8001acc:	08001b6d 	.word	0x08001b6d
 8001ad0:	08001b6d 	.word	0x08001b6d
 8001ad4:	08001b6d 	.word	0x08001b6d
 8001ad8:	08001ba5 	.word	0x08001ba5
 8001adc:	08001ba5 	.word	0x08001ba5
 8001ae0:	08001ba5 	.word	0x08001ba5
 8001ae4:	08001b35 	.word	0x08001b35
 8001ae8:	08001b6d 	.word	0x08001b6d
 8001aec:	08001b6d 	.word	0x08001b6d
 8001af0:	08001b6d 	.word	0x08001b6d
 8001af4:	08001ba5 	.word	0x08001ba5
 8001af8:	08001ba5 	.word	0x08001ba5
 8001afc:	08001ba5 	.word	0x08001ba5
 8001b00:	08001ba5 	.word	0x08001ba5
 8001b04:	08001b35 	.word	0x08001b35
 8001b08:	08001b6d 	.word	0x08001b6d
 8001b0c:	08001b6d 	.word	0x08001b6d
 8001b10:	08001b6d 	.word	0x08001b6d
 8001b14:	08001b6d 	.word	0x08001b6d
 8001b18:	08001ba5 	.word	0x08001ba5
 8001b1c:	08001ba5 	.word	0x08001ba5
 8001b20:	08001ba5 	.word	0x08001ba5
 8001b24:	08001b35 	.word	0x08001b35
 8001b28:	08001b6d 	.word	0x08001b6d
 8001b2c:	08001b6d 	.word	0x08001b6d
 8001b30:	08001b6d 	.word	0x08001b6d
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8001b34:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	da00      	bge.n	8001b3e <LIS2DW12_ACC_GetAxesRaw+0xce>
 8001b3c:	330f      	adds	r3, #15
 8001b3e:	111b      	asrs	r3, r3, #4
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8001b46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	da00      	bge.n	8001b50 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8001b4e:	330f      	adds	r3, #15
 8001b50:	111b      	asrs	r3, r3, #4
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8001b58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	da00      	bge.n	8001b62 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8001b60:	330f      	adds	r3, #15
 8001b62:	111b      	asrs	r3, r3, #4
 8001b64:	b21a      	sxth	r2, r3
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	809a      	strh	r2, [r3, #4]
      break;
 8001b6a:	e01f      	b.n	8001bac <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8001b6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	da00      	bge.n	8001b76 <LIS2DW12_ACC_GetAxesRaw+0x106>
 8001b74:	3303      	adds	r3, #3
 8001b76:	109b      	asrs	r3, r3, #2
 8001b78:	b21a      	sxth	r2, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8001b7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da00      	bge.n	8001b88 <LIS2DW12_ACC_GetAxesRaw+0x118>
 8001b86:	3303      	adds	r3, #3
 8001b88:	109b      	asrs	r3, r3, #2
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8001b90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	da00      	bge.n	8001b9a <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8001b98:	3303      	adds	r3, #3
 8001b9a:	109b      	asrs	r3, r3, #2
 8001b9c:	b21a      	sxth	r2, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	809a      	strh	r2, [r3, #4]
      break;
 8001ba2:	e003      	b.n	8001bac <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba8:	617b      	str	r3, [r7, #20]
      break;
 8001baa:	bf00      	nop
  }

  return ret;
 8001bac:	697b      	ldr	r3, [r7, #20]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop

08001bb8 <LIS2DW12_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	4619      	mov	r1, r3
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ff4e 	bl	8001a70 <LIS2DW12_ACC_GetAxesRaw>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	e03c      	b.n	8001c5a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	4619      	mov	r1, r3
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fbd6 	bl	8001398 <LIS2DW12_ACC_GetSensitivity>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf6:	e030      	b.n	8001c5a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8001bf8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bfc:	ee07 3a90 	vmov	s15, r3
 8001c00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c04:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c10:	ee17 2a90 	vmov	r2, s15
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001c18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c24:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c30:	ee17 2a90 	vmov	r2, s15
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8001c38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c44:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c50:	ee17 2a90 	vmov	r2, s15
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <LIS2DW12_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	70fb      	strb	r3, [r7, #3]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f103 001c 	add.w	r0, r3, #28
 8001c78:	1cba      	adds	r2, r7, #2
 8001c7a:	78f9      	ldrb	r1, [r7, #3]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f000 fa07 	bl	8002090 <lis2dw12_write_reg>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8c:	e000      	b.n	8001c90 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	71fb      	strb	r3, [r7, #7]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d80b      	bhi.n	8001ccc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8001cb4:	a201      	add	r2, pc, #4	; (adr r2, 8001cbc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8001cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cba:	bf00      	nop
 8001cbc:	08001cf9 	.word	0x08001cf9
 8001cc0:	08001d25 	.word	0x08001d25
 8001cc4:	08001d51 	.word	0x08001d51
 8001cc8:	08001d7d 	.word	0x08001d7d
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8001ccc:	79bb      	ldrb	r3, [r7, #6]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d002      	beq.n	8001cd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	75fb      	strb	r3, [r7, #23]
          break;
 8001cd6:	e002      	b.n	8001cde <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001cd8:	2314      	movs	r3, #20
 8001cda:	75fb      	strb	r3, [r7, #23]
          break;
 8001cdc:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if(Odr < 12.5f)
 8001cde:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ce2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001ce6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cee:	d400      	bmi.n	8001cf2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8001cf0:	e05a      	b.n	8001da8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8001cf2:	4b6f      	ldr	r3, [pc, #444]	; (8001eb0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8001cf4:	60bb      	str	r3, [r7, #8]
      break;
 8001cf6:	e057      	b.n	8001da8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8001cf8:	79bb      	ldrb	r3, [r7, #6]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d002      	beq.n	8001d04 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	75fb      	strb	r3, [r7, #23]
          break;
 8001d02:	e002      	b.n	8001d0a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8001d04:	2313      	movs	r3, #19
 8001d06:	75fb      	strb	r3, [r7, #23]
          break;
 8001d08:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001d0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d0e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001eb4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	dc00      	bgt.n	8001d1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8001d1c:	e044      	b.n	8001da8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001d1e:	4b66      	ldr	r3, [pc, #408]	; (8001eb8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001d20:	60bb      	str	r3, [r7, #8]
      break;
 8001d22:	e041      	b.n	8001da8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8001d24:	79bb      	ldrb	r3, [r7, #6]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d002      	beq.n	8001d30 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	75fb      	strb	r3, [r7, #23]
          break;
 8001d2e:	e002      	b.n	8001d36 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8001d30:	2312      	movs	r3, #18
 8001d32:	75fb      	strb	r3, [r7, #23]
          break;
 8001d34:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001d36:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d3a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001eb4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	dc00      	bgt.n	8001d4a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8001d48:	e02e      	b.n	8001da8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001d4a:	4b5b      	ldr	r3, [pc, #364]	; (8001eb8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001d4c:	60bb      	str	r3, [r7, #8]
      break;
 8001d4e:	e02b      	b.n	8001da8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8001d50:	79bb      	ldrb	r3, [r7, #6]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d002      	beq.n	8001d5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8001d56:	2301      	movs	r3, #1
 8001d58:	75fb      	strb	r3, [r7, #23]
          break;
 8001d5a:	e002      	b.n	8001d62 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8001d5c:	2311      	movs	r3, #17
 8001d5e:	75fb      	strb	r3, [r7, #23]
          break;
 8001d60:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001d62:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d66:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001eb4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	dc00      	bgt.n	8001d76 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8001d74:	e018      	b.n	8001da8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001d76:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001d78:	60bb      	str	r3, [r7, #8]
      break;
 8001d7a:	e015      	b.n	8001da8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8001d7c:	79bb      	ldrb	r3, [r7, #6]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d002      	beq.n	8001d88 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]
          break;
 8001d86:	e002      	b.n	8001d8e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001d88:	2310      	movs	r3, #16
 8001d8a:	75fb      	strb	r3, [r7, #23]
          break;
 8001d8c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001d8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d92:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001eb4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9e:	dc00      	bgt.n	8001da2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8001da0:	e001      	b.n	8001da6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8001da2:	4b45      	ldr	r3, [pc, #276]	; (8001eb8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001da4:	60bb      	str	r3, [r7, #8]
      break;
 8001da6:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8001da8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dac:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001ebc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8001db0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db8:	d801      	bhi.n	8001dbe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e04d      	b.n	8001e5a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001dbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dc2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	d801      	bhi.n	8001dd4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e042      	b.n	8001e5a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001dd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dd8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	d801      	bhi.n	8001dea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8001de6:	2303      	movs	r3, #3
 8001de8:	e037      	b.n	8001e5a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001dea:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dee:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001ec0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8001df2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfa:	d801      	bhi.n	8001e00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	e02c      	b.n	8001e5a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001e00:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e04:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001ec4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8001e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e10:	d801      	bhi.n	8001e16 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8001e12:	2305      	movs	r3, #5
 8001e14:	e021      	b.n	8001e5a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001e16:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e1a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001eb4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e26:	d801      	bhi.n	8001e2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8001e28:	2306      	movs	r3, #6
 8001e2a:	e016      	b.n	8001e5a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001e2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e30:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001ec8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8001e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3c:	d801      	bhi.n	8001e42 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8001e3e:	2307      	movs	r3, #7
 8001e40:	e00b      	b.n	8001e5a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001e42:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e46:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001ecc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8001e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e52:	d801      	bhi.n	8001e58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8001e54:	2308      	movs	r3, #8
 8001e56:	e000      	b.n	8001e5a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001e58:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8001e5a:	75bb      	strb	r3, [r7, #22]
          : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
          : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
          :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	331c      	adds	r3, #28
 8001e60:	7dba      	ldrb	r2, [r7, #22]
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 fa33 	bl	80022d0 <lis2dw12_data_rate_set>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
 8001e74:	e018      	b.n	8001ea8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	331c      	adds	r3, #28
 8001e7a:	7dfa      	ldrb	r2, [r7, #23]
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 f91e 	bl	80020c0 <lis2dw12_power_mode_set>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	e00b      	b.n	8001ea8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	79fa      	ldrb	r2, [r7, #7]
 8001e9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	79ba      	ldrb	r2, [r7, #6]
 8001ea2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	41480000 	.word	0x41480000
 8001eb4:	43480000 	.word	0x43480000
 8001eb8:	43480000 	.word	0x43480000
 8001ebc:	3fcccccd 	.word	0x3fcccccd
 8001ec0:	42480000 	.word	0x42480000
 8001ec4:	42c80000 	.word	0x42c80000
 8001ec8:	43c80000 	.word	0x43c80000
 8001ecc:	44480000 	.word	0x44480000

08001ed0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001edc:	460b      	mov	r3, r1
 8001ede:	71fb      	strb	r3, [r7, #7]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	79fa      	ldrb	r2, [r7, #7]
 8001ee8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	79ba      	ldrb	r2, [r7, #6]
 8001ef0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                : (Odr <=   12.5f) ?   12.5f
 8001ef4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ef8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001fb8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f04:	d801      	bhi.n	8001f0a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8001f06:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8001f08:	e04d      	b.n	8001fa6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   25.0f) ?   25.0f
 8001f0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f0e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1a:	d801      	bhi.n	8001f20 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8001f1c:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8001f1e:	e042      	b.n	8001fa6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   50.0f) ?   50.0f
 8001f20:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f24:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f30:	d801      	bhi.n	8001f36 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8001f34:	e037      	b.n	8001fa6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  100.0f) ?  100.0f
 8001f36:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f3a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001fc8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f46:	d801      	bhi.n	8001f4c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8001f48:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8001f4a:	e02c      	b.n	8001fa6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  200.0f) ?  200.0f
 8001f4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f50:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001fd0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5c:	d801      	bhi.n	8001f62 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8001f60:	e021      	b.n	8001fa6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  400.0f) ?  400.0f
 8001f62:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f66:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001fd8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8001f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f72:	d801      	bhi.n	8001f78 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8001f76:	e016      	b.n	8001fa6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  800.0f) ?  800.0f
 8001f78:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f7c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001fe0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8001f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f88:	d801      	bhi.n	8001f8e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8001f8a:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8001f8c:	e00b      	b.n	8001fa6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                :                    1600.0f;
 8001f8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f92:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001fe8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8001f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9e:	d801      	bhi.n	8001fa4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8001fa2:	e000      	b.n	8001fa6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	3fcccccd 	.word	0x3fcccccd
 8001fbc:	3fcccccd 	.word	0x3fcccccd
 8001fc0:	41480000 	.word	0x41480000
 8001fc4:	41c80000 	.word	0x41c80000
 8001fc8:	42480000 	.word	0x42480000
 8001fcc:	42480000 	.word	0x42480000
 8001fd0:	42c80000 	.word	0x42c80000
 8001fd4:	42c80000 	.word	0x42c80000
 8001fd8:	43480000 	.word	0x43480000
 8001fdc:	43480000 	.word	0x43480000
 8001fe0:	43c80000 	.word	0x43c80000
 8001fe4:	43c80000 	.word	0x43c80000
 8001fe8:	44480000 	.word	0x44480000
 8001fec:	44480000 	.word	0x44480000
 8001ff0:	44c80000 	.word	0x44c80000

08001ff4 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ff4:	b590      	push	{r4, r7, lr}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	461a      	mov	r2, r3
 8002000:	460b      	mov	r3, r1
 8002002:	72fb      	strb	r3, [r7, #11]
 8002004:	4613      	mov	r3, r2
 8002006:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	695c      	ldr	r4, [r3, #20]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	7b1b      	ldrb	r3, [r3, #12]
 8002014:	b298      	uxth	r0, r3
 8002016:	7afb      	ldrb	r3, [r7, #11]
 8002018:	b299      	uxth	r1, r3
 800201a:	893b      	ldrh	r3, [r7, #8]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	47a0      	blx	r4
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}

0800202a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800202a:	b590      	push	{r4, r7, lr}
 800202c:	b087      	sub	sp, #28
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	461a      	mov	r2, r3
 8002036:	460b      	mov	r3, r1
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	4613      	mov	r3, r2
 800203c:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	691c      	ldr	r4, [r3, #16]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	7b1b      	ldrb	r3, [r3, #12]
 800204a:	b298      	uxth	r0, r3
 800204c:	7afb      	ldrb	r3, [r7, #11]
 800204e:	b299      	uxth	r1, r3
 8002050:	893b      	ldrh	r3, [r7, #8]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	47a0      	blx	r4
 8002056:	4603      	mov	r3, r0
}
 8002058:	4618      	mov	r0, r3
 800205a:	371c      	adds	r7, #28
 800205c:	46bd      	mov	sp, r7
 800205e:	bd90      	pop	{r4, r7, pc}

08002060 <lis2dw12_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	461a      	mov	r2, r3
 800206c:	460b      	mov	r3, r1
 800206e:	72fb      	strb	r3, [r7, #11]
 8002070:	4613      	mov	r3, r2
 8002072:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	685c      	ldr	r4, [r3, #4]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6898      	ldr	r0, [r3, #8]
 800207c:	893b      	ldrh	r3, [r7, #8]
 800207e:	7af9      	ldrb	r1, [r7, #11]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	47a0      	blx	r4
 8002084:	6178      	str	r0, [r7, #20]
  return ret;
 8002086:	697b      	ldr	r3, [r7, #20]
}
 8002088:	4618      	mov	r0, r3
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd90      	pop	{r4, r7, pc}

08002090 <lis2dw12_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	461a      	mov	r2, r3
 800209c:	460b      	mov	r3, r1
 800209e:	72fb      	strb	r3, [r7, #11]
 80020a0:	4613      	mov	r3, r2
 80020a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681c      	ldr	r4, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6898      	ldr	r0, [r3, #8]
 80020ac:	893b      	ldrh	r3, [r7, #8]
 80020ae:	7af9      	ldrb	r1, [r7, #11]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	47a0      	blx	r4
 80020b4:	6178      	str	r0, [r7, #20]
  return ret;
 80020b6:	697b      	ldr	r3, [r7, #20]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	371c      	adds	r7, #28
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd90      	pop	{r4, r7, pc}

080020c0 <lis2dw12_power_mode_set>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx, lis2dw12_mode_t val)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 80020cc:	f107 0210 	add.w	r2, r7, #16
 80020d0:	2301      	movs	r3, #1
 80020d2:	2120      	movs	r1, #32
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ffc3 	bl	8002060 <lis2dw12_read_reg>
 80020da:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d118      	bne.n	8002114 <lis2dw12_power_mode_set+0x54>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	7c3b      	ldrb	r3, [r7, #16]
 80020ee:	f362 0383 	bfi	r3, r2, #2, #2
 80020f2:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	7c3b      	ldrb	r3, [r7, #16]
 80020fe:	f362 0301 	bfi	r3, r2, #0, #2
 8002102:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002104:	f107 0210 	add.w	r2, r7, #16
 8002108:	2301      	movs	r3, #1
 800210a:	2120      	movs	r1, #32
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ffbf 	bl	8002090 <lis2dw12_write_reg>
 8002112:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d107      	bne.n	800212a <lis2dw12_power_mode_set+0x6a>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 800211a:	f107 020c 	add.w	r2, r7, #12
 800211e:	2301      	movs	r3, #1
 8002120:	2125      	movs	r1, #37	; 0x25
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ff9c 	bl	8002060 <lis2dw12_read_reg>
 8002128:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d110      	bne.n	8002152 <lis2dw12_power_mode_set+0x92>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	b2da      	uxtb	r2, r3
 800213a:	7b3b      	ldrb	r3, [r7, #12]
 800213c:	f362 0382 	bfi	r3, r2, #2, #1
 8002140:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8002142:	f107 020c 	add.w	r2, r7, #12
 8002146:	2301      	movs	r3, #1
 8002148:	2125      	movs	r1, #37	; 0x25
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff ffa0 	bl	8002090 <lis2dw12_write_reg>
 8002150:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8002152:	697b      	ldr	r3, [r7, #20]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <lis2dw12_power_mode_get>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx, lis2dw12_mode_t *val)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002166:	f107 0210 	add.w	r2, r7, #16
 800216a:	2301      	movs	r3, #1
 800216c:	2120      	movs	r1, #32
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ff76 	bl	8002060 <lis2dw12_read_reg>
 8002174:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	f040 80a3 	bne.w	80022c4 <lis2dw12_power_mode_get+0x168>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 800217e:	f107 020c 	add.w	r2, r7, #12
 8002182:	2301      	movs	r3, #1
 8002184:	2125      	movs	r1, #37	; 0x25
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ff6a 	bl	8002060 <lis2dw12_read_reg>
 800218c:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800218e:	7b3b      	ldrb	r3, [r7, #12]
 8002190:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002194:	b2db      	uxtb	r3, r3
 8002196:	011a      	lsls	r2, r3, #4
 8002198:	7c3b      	ldrb	r3, [r7, #16]
 800219a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
            ctrl1.lp_mode)) {
 80021a4:	7c3a      	ldrb	r2, [r7, #16]
 80021a6:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80021aa:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80021ac:	4413      	add	r3, r2
 80021ae:	2b1b      	cmp	r3, #27
 80021b0:	f200 8084 	bhi.w	80022bc <lis2dw12_power_mode_get+0x160>
 80021b4:	a201      	add	r2, pc, #4	; (adr r2, 80021bc <lis2dw12_power_mode_get+0x60>)
 80021b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ba:	bf00      	nop
 80021bc:	0800224d 	.word	0x0800224d
 80021c0:	08002245 	.word	0x08002245
 80021c4:	0800223d 	.word	0x0800223d
 80021c8:	08002235 	.word	0x08002235
 80021cc:	0800222d 	.word	0x0800222d
 80021d0:	080022bd 	.word	0x080022bd
 80021d4:	080022bd 	.word	0x080022bd
 80021d8:	080022bd 	.word	0x080022bd
 80021dc:	0800226d 	.word	0x0800226d
 80021e0:	08002265 	.word	0x08002265
 80021e4:	0800225d 	.word	0x0800225d
 80021e8:	08002255 	.word	0x08002255
 80021ec:	080022bd 	.word	0x080022bd
 80021f0:	080022bd 	.word	0x080022bd
 80021f4:	080022bd 	.word	0x080022bd
 80021f8:	080022bd 	.word	0x080022bd
 80021fc:	08002295 	.word	0x08002295
 8002200:	0800228d 	.word	0x0800228d
 8002204:	08002285 	.word	0x08002285
 8002208:	0800227d 	.word	0x0800227d
 800220c:	08002275 	.word	0x08002275
 8002210:	080022bd 	.word	0x080022bd
 8002214:	080022bd 	.word	0x080022bd
 8002218:	080022bd 	.word	0x080022bd
 800221c:	080022b5 	.word	0x080022b5
 8002220:	080022ad 	.word	0x080022ad
 8002224:	080022a5 	.word	0x080022a5
 8002228:	0800229d 	.word	0x0800229d
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2204      	movs	r2, #4
 8002230:	701a      	strb	r2, [r3, #0]
        break;
 8002232:	e048      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2203      	movs	r2, #3
 8002238:	701a      	strb	r2, [r3, #0]
        break;
 800223a:	e044      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2202      	movs	r2, #2
 8002240:	701a      	strb	r2, [r3, #0]
        break;
 8002242:	e040      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
        break;
 800224a:	e03c      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2200      	movs	r2, #0
 8002250:	701a      	strb	r2, [r3, #0]
        break;
 8002252:	e038      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	220b      	movs	r2, #11
 8002258:	701a      	strb	r2, [r3, #0]
        break;
 800225a:	e034      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	220a      	movs	r2, #10
 8002260:	701a      	strb	r2, [r3, #0]
        break;
 8002262:	e030      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2209      	movs	r2, #9
 8002268:	701a      	strb	r2, [r3, #0]
        break;
 800226a:	e02c      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	2208      	movs	r2, #8
 8002270:	701a      	strb	r2, [r3, #0]
        break;
 8002272:	e028      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2214      	movs	r2, #20
 8002278:	701a      	strb	r2, [r3, #0]
        break;
 800227a:	e024      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2213      	movs	r2, #19
 8002280:	701a      	strb	r2, [r3, #0]
        break;
 8002282:	e020      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2212      	movs	r2, #18
 8002288:	701a      	strb	r2, [r3, #0]
        break;
 800228a:	e01c      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2211      	movs	r2, #17
 8002290:	701a      	strb	r2, [r3, #0]
        break;
 8002292:	e018      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2210      	movs	r2, #16
 8002298:	701a      	strb	r2, [r3, #0]
        break;
 800229a:	e014      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	221b      	movs	r2, #27
 80022a0:	701a      	strb	r2, [r3, #0]
        break;
 80022a2:	e010      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	221a      	movs	r2, #26
 80022a8:	701a      	strb	r2, [r3, #0]
        break;
 80022aa:	e00c      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2219      	movs	r2, #25
 80022b0:	701a      	strb	r2, [r3, #0]
        break;
 80022b2:	e008      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2218      	movs	r2, #24
 80022b8:	701a      	strb	r2, [r3, #0]
        break;
 80022ba:	e004      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2204      	movs	r2, #4
 80022c0:	701a      	strb	r2, [r3, #0]
        break;
 80022c2:	e000      	b.n	80022c6 <lis2dw12_power_mode_get+0x16a>
    }
  }
 80022c4:	bf00      	nop
  return ret;
 80022c6:	697b      	ldr	r3, [r7, #20]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 80022dc:	f107 0210 	add.w	r2, r7, #16
 80022e0:	2301      	movs	r3, #1
 80022e2:	2120      	movs	r1, #32
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff febb 	bl	8002060 <lis2dw12_read_reg>
 80022ea:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10f      	bne.n	8002312 <lis2dw12_data_rate_set+0x42>
    ctrl1.odr = (uint8_t) val;
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	7c3b      	ldrb	r3, [r7, #16]
 80022fc:	f362 1307 	bfi	r3, r2, #4, #4
 8002300:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002302:	f107 0210 	add.w	r2, r7, #16
 8002306:	2301      	movs	r3, #1
 8002308:	2120      	movs	r1, #32
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fec0 	bl	8002090 <lis2dw12_write_reg>
 8002310:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <lis2dw12_data_rate_set+0x58>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8002318:	f107 020c 	add.w	r2, r7, #12
 800231c:	2301      	movs	r3, #1
 800231e:	2122      	movs	r1, #34	; 0x22
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff fe9d 	bl	8002060 <lis2dw12_read_reg>
 8002326:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d110      	bne.n	8002350 <lis2dw12_data_rate_set+0x80>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	b2da      	uxtb	r2, r3
 8002338:	7b3b      	ldrb	r3, [r7, #12]
 800233a:	f362 0301 	bfi	r3, r2, #0, #2
 800233e:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8002340:	f107 020c 	add.w	r2, r7, #12
 8002344:	2301      	movs	r3, #1
 8002346:	2122      	movs	r1, #34	; 0x22
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff fea1 	bl	8002090 <lis2dw12_write_reg>
 800234e:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8002350:	697b      	ldr	r3, [r7, #20]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002366:	f107 0210 	add.w	r2, r7, #16
 800236a:	2301      	movs	r3, #1
 800236c:	2120      	movs	r1, #32
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff fe76 	bl	8002060 <lis2dw12_read_reg>
 8002374:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2b00      	cmp	r3, #0
 800237a:	f040 80b3 	bne.w	80024e4 <lis2dw12_data_rate_get+0x188>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 800237e:	f107 020c 	add.w	r2, r7, #12
 8002382:	2301      	movs	r3, #1
 8002384:	2122      	movs	r1, #34	; 0x22
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff fe6a 	bl	8002060 <lis2dw12_read_reg>
 800238c:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr) {
 800238e:	7b3b      	ldrb	r3, [r7, #12]
 8002390:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002394:	b2db      	uxtb	r3, r3
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	7c3a      	ldrb	r2, [r7, #16]
 800239a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	4413      	add	r3, r2
 80023a2:	2b32      	cmp	r3, #50	; 0x32
 80023a4:	f200 809a 	bhi.w	80024dc <lis2dw12_data_rate_get+0x180>
 80023a8:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <lis2dw12_data_rate_get+0x54>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	0800247d 	.word	0x0800247d
 80023b4:	08002485 	.word	0x08002485
 80023b8:	0800248d 	.word	0x0800248d
 80023bc:	08002495 	.word	0x08002495
 80023c0:	0800249d 	.word	0x0800249d
 80023c4:	080024a5 	.word	0x080024a5
 80023c8:	080024ad 	.word	0x080024ad
 80023cc:	080024b5 	.word	0x080024b5
 80023d0:	080024bd 	.word	0x080024bd
 80023d4:	080024c5 	.word	0x080024c5
 80023d8:	080024dd 	.word	0x080024dd
 80023dc:	080024dd 	.word	0x080024dd
 80023e0:	080024dd 	.word	0x080024dd
 80023e4:	080024dd 	.word	0x080024dd
 80023e8:	080024dd 	.word	0x080024dd
 80023ec:	080024dd 	.word	0x080024dd
 80023f0:	080024dd 	.word	0x080024dd
 80023f4:	080024dd 	.word	0x080024dd
 80023f8:	080024d5 	.word	0x080024d5
 80023fc:	080024dd 	.word	0x080024dd
 8002400:	080024dd 	.word	0x080024dd
 8002404:	080024dd 	.word	0x080024dd
 8002408:	080024dd 	.word	0x080024dd
 800240c:	080024dd 	.word	0x080024dd
 8002410:	080024dd 	.word	0x080024dd
 8002414:	080024dd 	.word	0x080024dd
 8002418:	080024dd 	.word	0x080024dd
 800241c:	080024dd 	.word	0x080024dd
 8002420:	080024dd 	.word	0x080024dd
 8002424:	080024dd 	.word	0x080024dd
 8002428:	080024dd 	.word	0x080024dd
 800242c:	080024dd 	.word	0x080024dd
 8002430:	080024dd 	.word	0x080024dd
 8002434:	080024dd 	.word	0x080024dd
 8002438:	080024dd 	.word	0x080024dd
 800243c:	080024dd 	.word	0x080024dd
 8002440:	080024dd 	.word	0x080024dd
 8002444:	080024dd 	.word	0x080024dd
 8002448:	080024dd 	.word	0x080024dd
 800244c:	080024dd 	.word	0x080024dd
 8002450:	080024dd 	.word	0x080024dd
 8002454:	080024dd 	.word	0x080024dd
 8002458:	080024dd 	.word	0x080024dd
 800245c:	080024dd 	.word	0x080024dd
 8002460:	080024dd 	.word	0x080024dd
 8002464:	080024dd 	.word	0x080024dd
 8002468:	080024dd 	.word	0x080024dd
 800246c:	080024dd 	.word	0x080024dd
 8002470:	080024dd 	.word	0x080024dd
 8002474:	080024dd 	.word	0x080024dd
 8002478:	080024cd 	.word	0x080024cd
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
        break;
 8002482:	e030      	b.n	80024e6 <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
        break;
 800248a:	e02c      	b.n	80024e6 <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	2202      	movs	r2, #2
 8002490:	701a      	strb	r2, [r3, #0]
        break;
 8002492:	e028      	b.n	80024e6 <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	2203      	movs	r2, #3
 8002498:	701a      	strb	r2, [r3, #0]
        break;
 800249a:	e024      	b.n	80024e6 <lis2dw12_data_rate_get+0x18a>
       case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	2204      	movs	r2, #4
 80024a0:	701a      	strb	r2, [r3, #0]
        break;
 80024a2:	e020      	b.n	80024e6 <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	2205      	movs	r2, #5
 80024a8:	701a      	strb	r2, [r3, #0]
        break;
 80024aa:	e01c      	b.n	80024e6 <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2206      	movs	r2, #6
 80024b0:	701a      	strb	r2, [r3, #0]
        break;
 80024b2:	e018      	b.n	80024e6 <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2207      	movs	r2, #7
 80024b8:	701a      	strb	r2, [r3, #0]
        break;
 80024ba:	e014      	b.n	80024e6 <lis2dw12_data_rate_get+0x18a>
       case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2208      	movs	r2, #8
 80024c0:	701a      	strb	r2, [r3, #0]
        break;
 80024c2:	e010      	b.n	80024e6 <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2209      	movs	r2, #9
 80024c8:	701a      	strb	r2, [r3, #0]
        break;
 80024ca:	e00c      	b.n	80024e6 <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	2232      	movs	r2, #50	; 0x32
 80024d0:	701a      	strb	r2, [r3, #0]
        break;
 80024d2:	e008      	b.n	80024e6 <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2212      	movs	r2, #18
 80024d8:	701a      	strb	r2, [r3, #0]
        break;
 80024da:	e004      	b.n	80024e6 <lis2dw12_data_rate_get+0x18a>
      default:
        *val = LIS2DW12_XL_ODR_OFF;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
        break;
 80024e2:	e000      	b.n	80024e6 <lis2dw12_data_rate_get+0x18a>
    }
  }
 80024e4:	bf00      	nop
  return ret;
 80024e6:	697b      	ldr	r3, [r7, #20]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 80024fc:	f107 0208 	add.w	r2, r7, #8
 8002500:	2301      	movs	r3, #1
 8002502:	2121      	movs	r1, #33	; 0x21
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff fdab 	bl	8002060 <lis2dw12_read_reg>
 800250a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10f      	bne.n	8002532 <lis2dw12_block_data_update_set+0x42>
    reg.bdu = val;
 8002512:	78fb      	ldrb	r3, [r7, #3]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	b2da      	uxtb	r2, r3
 800251a:	7a3b      	ldrb	r3, [r7, #8]
 800251c:	f362 03c3 	bfi	r3, r2, #3, #1
 8002520:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8002522:	f107 0208 	add.w	r2, r7, #8
 8002526:	2301      	movs	r3, #1
 8002528:	2121      	movs	r1, #33	; 0x21
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff fdb0 	bl	8002090 <lis2dw12_write_reg>
 8002530:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002532:	68fb      	ldr	r3, [r7, #12]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8002548:	f107 0208 	add.w	r2, r7, #8
 800254c:	2301      	movs	r3, #1
 800254e:	2125      	movs	r1, #37	; 0x25
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff fd85 	bl	8002060 <lis2dw12_read_reg>
 8002556:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10f      	bne.n	800257e <lis2dw12_full_scale_set+0x42>
    reg.fs = (uint8_t) val;
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	b2da      	uxtb	r2, r3
 8002566:	7a3b      	ldrb	r3, [r7, #8]
 8002568:	f362 1305 	bfi	r3, r2, #4, #2
 800256c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 800256e:	f107 0208 	add.w	r2, r7, #8
 8002572:	2301      	movs	r3, #1
 8002574:	2125      	movs	r1, #37	; 0x25
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff fd8a 	bl	8002090 <lis2dw12_write_reg>
 800257c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800257e:	68fb      	ldr	r3, [r7, #12]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8002592:	f107 0208 	add.w	r2, r7, #8
 8002596:	2301      	movs	r3, #1
 8002598:	2125      	movs	r1, #37	; 0x25
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff fd60 	bl	8002060 <lis2dw12_read_reg>
 80025a0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs) {
 80025a2:	7a3b      	ldrb	r3, [r7, #8]
 80025a4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d81a      	bhi.n	80025e4 <lis2dw12_full_scale_get+0x5c>
 80025ae:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <lis2dw12_full_scale_get+0x2c>)
 80025b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b4:	080025c5 	.word	0x080025c5
 80025b8:	080025cd 	.word	0x080025cd
 80025bc:	080025d5 	.word	0x080025d5
 80025c0:	080025dd 	.word	0x080025dd
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
      break;
 80025ca:	e00f      	b.n	80025ec <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
      break;
 80025d2:	e00b      	b.n	80025ec <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2202      	movs	r2, #2
 80025d8:	701a      	strb	r2, [r3, #0]
      break;
 80025da:	e007      	b.n	80025ec <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2203      	movs	r2, #3
 80025e0:	701a      	strb	r2, [r3, #0]
      break;
 80025e2:	e003      	b.n	80025ec <lis2dw12_full_scale_get+0x64>
    default:
      *val = LIS2DW12_2g;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
      break;
 80025ea:	bf00      	nop
  }
  return ret;
 80025ec:	68fb      	ldr	r3, [r7, #12]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop

080025f8 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8002602:	f107 020c 	add.w	r2, r7, #12
 8002606:	2306      	movs	r3, #6
 8002608:	2128      	movs	r1, #40	; 0x28
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff fd28 	bl	8002060 <lis2dw12_read_reg>
 8002610:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002612:	7b7b      	ldrb	r3, [r7, #13]
 8002614:	b21a      	sxth	r2, r3
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002620:	b29b      	uxth	r3, r3
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	b29a      	uxth	r2, r3
 8002626:	7b3b      	ldrb	r3, [r7, #12]
 8002628:	b29b      	uxth	r3, r3
 800262a:	4413      	add	r3, r2
 800262c:	b29b      	uxth	r3, r3
 800262e:	b21a      	sxth	r2, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	3302      	adds	r3, #2
 800263a:	b212      	sxth	r2, r2
 800263c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	3302      	adds	r3, #2
 8002642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002646:	b29b      	uxth	r3, r3
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	b29a      	uxth	r2, r3
 800264c:	7bbb      	ldrb	r3, [r7, #14]
 800264e:	b29b      	uxth	r3, r3
 8002650:	4413      	add	r3, r2
 8002652:	b29a      	uxth	r2, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	3302      	adds	r3, #2
 8002658:	b212      	sxth	r2, r2
 800265a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800265c:	7c7a      	ldrb	r2, [r7, #17]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	3304      	adds	r3, #4
 8002662:	b212      	sxth	r2, r2
 8002664:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	3304      	adds	r3, #4
 800266a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800266e:	b29b      	uxth	r3, r3
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	b29a      	uxth	r2, r3
 8002674:	7c3b      	ldrb	r3, [r7, #16]
 8002676:	b29b      	uxth	r3, r3
 8002678:	4413      	add	r3, r2
 800267a:	b29a      	uxth	r2, r3
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	3304      	adds	r3, #4
 8002680:	b212      	sxth	r2, r2
 8002682:	801a      	strh	r2, [r3, #0]

  return ret;
 8002684:	697b      	ldr	r3, [r7, #20]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8002698:	2301      	movs	r3, #1
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	210f      	movs	r1, #15
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fcde 	bl	8002060 <lis2dw12_read_reg>
 80026a4:	60f8      	str	r0, [r7, #12]
  return ret;
 80026a6:	68fb      	ldr	r3, [r7, #12]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 80026bc:	f107 0208 	add.w	r2, r7, #8
 80026c0:	2301      	movs	r3, #1
 80026c2:	2121      	movs	r1, #33	; 0x21
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff fccb 	bl	8002060 <lis2dw12_read_reg>
 80026ca:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10f      	bne.n	80026f2 <lis2dw12_auto_increment_set+0x42>
    reg.if_add_inc = val;
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	7a3b      	ldrb	r3, [r7, #8]
 80026dc:	f362 0382 	bfi	r3, r2, #2, #1
 80026e0:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 80026e2:	f107 0208 	add.w	r2, r7, #8
 80026e6:	2301      	movs	r3, #1
 80026e8:	2121      	movs	r1, #33	; 0x21
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff fcd0 	bl	8002090 <lis2dw12_write_reg>
 80026f0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80026f2:	68fb      	ldr	r3, [r7, #12]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <lis2dw12_fifo_mode_set>:
  * @param  val      change the values of fmode in reg FIFO_CTRL
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx, lis2dw12_fmode_t val)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 8002708:	f107 0208 	add.w	r2, r7, #8
 800270c:	2301      	movs	r3, #1
 800270e:	212e      	movs	r1, #46	; 0x2e
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff fca5 	bl	8002060 <lis2dw12_read_reg>
 8002716:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <lis2dw12_fifo_mode_set+0x42>
    reg.fmode = (uint8_t) val;
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	b2da      	uxtb	r2, r3
 8002726:	7a3b      	ldrb	r3, [r7, #8]
 8002728:	f362 1347 	bfi	r3, r2, #5, #3
 800272c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 800272e:	f107 0208 	add.w	r2, r7, #8
 8002732:	2301      	movs	r3, #1
 8002734:	212e      	movs	r1, #46	; 0x2e
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff fcaa 	bl	8002090 <lis2dw12_write_reg>
 800273c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800273e:	68fb      	ldr	r3, [r7, #12]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <LIS2MDL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d103      	bne.n	8002764 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 800275c:	f04f 33ff 	mov.w	r3, #4294967295
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	e05d      	b.n	8002820 <LIS2MDL_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	7b1a      	ldrb	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	699a      	ldr	r2, [r3, #24]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a23      	ldr	r2, [pc, #140]	; (800282c <LIS2MDL_RegisterBusIO+0xe4>)
 80027a0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a22      	ldr	r2, [pc, #136]	; (8002830 <LIS2MDL_RegisterBusIO+0xe8>)
 80027a6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d103      	bne.n	80027be <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e030      	b.n	8002820 <LIS2MDL_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4798      	blx	r3
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <LIS2MDL_RegisterBusIO+0x8a>
    {
      ret = LIS2MDL_ERROR;
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	e026      	b.n	8002820 <LIS2MDL_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d022      	beq.n	8002820 <LIS2MDL_RegisterBusIO+0xd8>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d11d      	bne.n	8002820 <LIS2MDL_RegisterBusIO+0xd8>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d10d      	bne.n	8002808 <LIS2MDL_RegisterBusIO+0xc0>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80027ec:	2334      	movs	r3, #52	; 0x34
 80027ee:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80027f0:	7afb      	ldrb	r3, [r7, #11]
 80027f2:	461a      	mov	r2, r3
 80027f4:	2162      	movs	r1, #98	; 0x62
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fa15 	bl	8002c26 <LIS2MDL_Write_Reg>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00e      	beq.n	8002820 <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	e00c      	b.n	8002822 <LIS2MDL_RegisterBusIO+0xda>
            }
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	331c      	adds	r3, #28
 800280c:	2101      	movs	r1, #1
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fbe2 	bl	8002fd8 <lis2mdl_i2c_interface_set>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	e000      	b.n	8002822 <LIS2MDL_RegisterBusIO+0xda>
        }
      }
    }
  }

  return ret;
 8002820:	68fb      	ldr	r3, [r7, #12]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	08002c5d 	.word	0x08002c5d
 8002830:	08002cbf 	.word	0x08002cbf

08002834 <LIS2MDL_Init>:
 * @brief  Initialize the LIS2MDL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	331c      	adds	r3, #28
 8002840:	2101      	movs	r1, #1
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fb20 	bl	8002e88 <lis2mdl_block_data_update_set>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <LIS2MDL_Init+0x20>
  {
    return LIS2MDL_ERROR;
 800284e:	f04f 33ff 	mov.w	r3, #4294967295
 8002852:	e028      	b.n	80028a6 <LIS2MDL_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	331c      	adds	r3, #28
 8002858:	2102      	movs	r1, #2
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fa90 	bl	8002d80 <lis2mdl_operating_mode_set>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <LIS2MDL_Init+0x38>
  {
    return LIS2MDL_ERROR;
 8002866:	f04f 33ff 	mov.w	r3, #4294967295
 800286a:	e01c      	b.n	80028a6 <LIS2MDL_Init+0x72>
  }

  /* Output data rate selection */
  if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	331c      	adds	r3, #28
 8002870:	2103      	movs	r1, #3
 8002872:	4618      	mov	r0, r3
 8002874:	f000 faaa 	bl	8002dcc <lis2mdl_data_rate_set>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <LIS2MDL_Init+0x50>
  {
    return LIS2MDL_ERROR;
 800287e:	f04f 33ff 	mov.w	r3, #4294967295
 8002882:	e010      	b.n	80028a6 <LIS2MDL_Init+0x72>
  }

  /* Self Test disabled. */
  if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	331c      	adds	r3, #28
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fb7e 	bl	8002f8c <lis2mdl_self_test_set>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <LIS2MDL_Init+0x68>
  {
    return LIS2MDL_ERROR;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
 800289a:	e004      	b.n	80028a6 <LIS2MDL_Init+0x72>
  }

  pObj->is_initialized = 1;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <LIS2MDL_DeInit>:
 * @brief  Deinitialize the LIS2MDL magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f874 	bl	80029a4 <LIS2MDL_MAG_Disable>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
 80028c6:	e004      	b.n	80028d2 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <LIS2MDL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
  if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	331c      	adds	r3, #28
 80028e8:	6839      	ldr	r1, [r7, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fb3d 	bl	8002f6a <lis2mdl_device_id_get>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <LIS2MDL_ReadID+0x22>
  {
    return LIS2MDL_ERROR;
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
 80028fa:	e000      	b.n	80028fe <LIS2MDL_ReadID+0x24>
  }

  return LIS2MDL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <LIS2MDL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2200      	movs	r2, #0
 800291c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2201      	movs	r2, #1
 8002922:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2200      	movs	r2, #0
 8002928:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2200      	movs	r2, #0
 800292e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2232      	movs	r2, #50	; 0x32
 800293a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <LIS2MDL_GetCapabilities+0x58>)
 8002950:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	42c80000 	.word	0x42c80000

08002964 <LIS2MDL_MAG_Enable>:
 * @brief Enable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e010      	b.n	800299c <LIS2MDL_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	331c      	adds	r3, #28
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f000 f9fd 	bl	8002d80 <lis2mdl_operating_mode_set>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <LIS2MDL_MAG_Enable+0x2e>
  {
    return LIS2MDL_ERROR;
 800298c:	f04f 33ff 	mov.w	r3, #4294967295
 8002990:	e004      	b.n	800299c <LIS2MDL_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <LIS2MDL_MAG_Disable>:
 * @brief Disable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e010      	b.n	80029dc <LIS2MDL_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	331c      	adds	r3, #28
 80029be:	2102      	movs	r1, #2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 f9dd 	bl	8002d80 <lis2mdl_operating_mode_set>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <LIS2MDL_MAG_Disable+0x2e>
  {
    return LIS2MDL_ERROR;
 80029cc:	f04f 33ff 	mov.w	r3, #4294967295
 80029d0:	e004      	b.n	80029dc <LIS2MDL_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <LIS2MDL_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80029f4:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LIS2MDL_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	331c      	adds	r3, #28
 8002a16:	f107 020b 	add.w	r2, r7, #11
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 f9fb 	bl	8002e18 <lis2mdl_data_rate_get>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8002a28:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2c:	e023      	b.n	8002a76 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002a2e:	7afb      	ldrb	r3, [r7, #11]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d81b      	bhi.n	8002a6c <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8002a34:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8002a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3a:	bf00      	nop
 8002a3c:	08002a4d 	.word	0x08002a4d
 8002a40:	08002a55 	.word	0x08002a55
 8002a44:	08002a5d 	.word	0x08002a5d
 8002a48:	08002a65 	.word	0x08002a65
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4a0c      	ldr	r2, [pc, #48]	; (8002a80 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8002a50:	601a      	str	r2, [r3, #0]
      break;
 8002a52:	e00f      	b.n	8002a74 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	4a0b      	ldr	r2, [pc, #44]	; (8002a84 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8002a58:	601a      	str	r2, [r3, #0]
      break;
 8002a5a:	e00b      	b.n	8002a74 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8002a60:	601a      	str	r2, [r3, #0]
      break;
 8002a62:	e007      	b.n	8002a74 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8002a68:	601a      	str	r2, [r3, #0]
      break;
 8002a6a:	e003      	b.n	8002a74 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a70:	60fb      	str	r3, [r7, #12]
      break;
 8002a72:	bf00      	nop
  }

  return ret;
 8002a74:	68fb      	ldr	r3, [r7, #12]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	41200000 	.word	0x41200000
 8002a84:	41a00000 	.word	0x41a00000
 8002a88:	42480000 	.word	0x42480000
 8002a8c:	42c80000 	.word	0x42c80000

08002a90 <LIS2MDL_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8002a9c:	edd7 7a00 	vldr	s15, [r7]
 8002aa0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aac:	d801      	bhi.n	8002ab2 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e016      	b.n	8002ae0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002ab2:	edd7 7a00 	vldr	s15, [r7]
 8002ab6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac2:	d801      	bhi.n	8002ac8 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e00b      	b.n	8002ae0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002ac8:	edd7 7a00 	vldr	s15, [r7]
 8002acc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002b08 <LIS2MDL_MAG_SetOutputDataRate+0x78>
 8002ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad8:	d801      	bhi.n	8002ade <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e000      	b.n	8002ae0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002ade:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8002ae0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	331c      	adds	r3, #28
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f96e 	bl	8002dcc <lis2mdl_data_rate_set>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <LIS2MDL_MAG_SetOutputDataRate+0x6c>
  {
    return LIS2MDL_ERROR;
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295
 8002afa:	e000      	b.n	8002afe <LIS2MDL_MAG_SetOutputDataRate+0x6e>
  }

  return LIS2MDL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	42480000 	.word	0x42480000

08002b0c <LIS2MDL_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2232      	movs	r2, #50	; 0x32
 8002b1a:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <LIS2MDL_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <LIS2MDL_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	331c      	adds	r3, #28
 8002b50:	f107 0208 	add.w	r2, r7, #8
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f9bc 	bl	8002ed4 <lis2mdl_magnetic_raw_get>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	e00c      	b.n	8002b82 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002b68:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002b70:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002b78:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <LIS2MDL_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b086      	sub	sp, #24
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	331c      	adds	r3, #28
 8002b98:	f107 0210 	add.w	r2, r7, #16
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f998 	bl	8002ed4 <lis2mdl_magnetic_raw_get>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <LIS2MDL_MAG_GetAxes+0x26>
  {
    return LIS2MDL_ERROR;
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bae:	e036      	b.n	8002c1e <LIS2MDL_MAG_GetAxes+0x94>
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8002bb0:	f107 030c 	add.w	r3, r7, #12
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff ff14 	bl	80029e4 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002bbc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002bc0:	ee07 3a90 	vmov	s15, r3
 8002bc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bd4:	ee17 2a90 	vmov	r2, s15
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002bdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002be8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bf4:	ee17 2a90 	vmov	r2, s15
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002bfc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c14:	ee17 2a90 	vmov	r2, s15
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <LIS2MDL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	70fb      	strb	r3, [r7, #3]
 8002c32:	4613      	mov	r3, r2
 8002c34:	70bb      	strb	r3, [r7, #2]
  if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f103 001c 	add.w	r0, r3, #28
 8002c3c:	1cba      	adds	r2, r7, #2
 8002c3e:	78f9      	ldrb	r1, [r7, #3]
 8002c40:	2301      	movs	r3, #1
 8002c42:	f000 f885 	bl	8002d50 <lis2mdl_write_reg>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <LIS2MDL_Write_Reg+0x2c>
  {
    return LIS2MDL_ERROR;
 8002c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c50:	e000      	b.n	8002c54 <LIS2MDL_Write_Reg+0x2e>
  }

  return LIS2MDL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	461a      	mov	r2, r3
 8002c68:	460b      	mov	r3, r1
 8002c6a:	72fb      	strb	r3, [r7, #11]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10e      	bne.n	8002c9a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	695c      	ldr	r4, [r3, #20]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	7b1b      	ldrb	r3, [r3, #12]
 8002c84:	b298      	uxth	r0, r3
 8002c86:	7afb      	ldrb	r3, [r7, #11]
 8002c88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	b299      	uxth	r1, r3
 8002c90:	893b      	ldrh	r3, [r7, #8]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	47a0      	blx	r4
 8002c96:	4603      	mov	r3, r0
 8002c98:	e00d      	b.n	8002cb6 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	695c      	ldr	r4, [r3, #20]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	7b1b      	ldrb	r3, [r3, #12]
 8002ca2:	b298      	uxth	r0, r3
 8002ca4:	7afb      	ldrb	r3, [r7, #11]
 8002ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	b299      	uxth	r1, r3
 8002cae:	893b      	ldrh	r3, [r7, #8]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	47a0      	blx	r4
 8002cb4:	4603      	mov	r3, r0
  }
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd90      	pop	{r4, r7, pc}

08002cbe <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002cbe:	b590      	push	{r4, r7, lr}
 8002cc0:	b087      	sub	sp, #28
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	460b      	mov	r3, r1
 8002ccc:	72fb      	strb	r3, [r7, #11]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10e      	bne.n	8002cfc <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	691c      	ldr	r4, [r3, #16]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	7b1b      	ldrb	r3, [r3, #12]
 8002ce6:	b298      	uxth	r0, r3
 8002ce8:	7afb      	ldrb	r3, [r7, #11]
 8002cea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	b299      	uxth	r1, r3
 8002cf2:	893b      	ldrh	r3, [r7, #8]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	47a0      	blx	r4
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	e00d      	b.n	8002d18 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	691c      	ldr	r4, [r3, #16]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	7b1b      	ldrb	r3, [r3, #12]
 8002d04:	b298      	uxth	r0, r3
 8002d06:	7afb      	ldrb	r3, [r7, #11]
 8002d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	b299      	uxth	r1, r3
 8002d10:	893b      	ldrh	r3, [r7, #8]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	47a0      	blx	r4
 8002d16:	4603      	mov	r3, r0
  }
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	371c      	adds	r7, #28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd90      	pop	{r4, r7, pc}

08002d20 <lis2mdl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	72fb      	strb	r3, [r7, #11]
 8002d30:	4613      	mov	r3, r2
 8002d32:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685c      	ldr	r4, [r3, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6898      	ldr	r0, [r3, #8]
 8002d3c:	893b      	ldrh	r3, [r7, #8]
 8002d3e:	7af9      	ldrb	r1, [r7, #11]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	47a0      	blx	r4
 8002d44:	6178      	str	r0, [r7, #20]
  return ret;
 8002d46:	697b      	ldr	r3, [r7, #20]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	371c      	adds	r7, #28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd90      	pop	{r4, r7, pc}

08002d50 <lis2mdl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	72fb      	strb	r3, [r7, #11]
 8002d60:	4613      	mov	r3, r2
 8002d62:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681c      	ldr	r4, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6898      	ldr	r0, [r3, #8]
 8002d6c:	893b      	ldrh	r3, [r7, #8]
 8002d6e:	7af9      	ldrb	r1, [r7, #11]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	47a0      	blx	r4
 8002d74:	6178      	str	r0, [r7, #20]
  return ret;
 8002d76:	697b      	ldr	r3, [r7, #20]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	371c      	adds	r7, #28
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd90      	pop	{r4, r7, pc}

08002d80 <lis2mdl_operating_mode_set>:
  * @param  val    change the values of md in reg CFG_REG_A
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx, lis2mdl_md_t val)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8002d8c:	f107 0208 	add.w	r2, r7, #8
 8002d90:	2301      	movs	r3, #1
 8002d92:	2160      	movs	r1, #96	; 0x60
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff ffc3 	bl	8002d20 <lis2mdl_read_reg>
 8002d9a:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10f      	bne.n	8002dc2 <lis2mdl_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	7a3b      	ldrb	r3, [r7, #8]
 8002dac:	f362 0301 	bfi	r3, r2, #0, #2
 8002db0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8002db2:	f107 0208 	add.w	r2, r7, #8
 8002db6:	2301      	movs	r3, #1
 8002db8:	2160      	movs	r1, #96	; 0x60
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ffc8 	bl	8002d50 <lis2mdl_write_reg>
 8002dc0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8002dd8:	f107 0208 	add.w	r2, r7, #8
 8002ddc:	2301      	movs	r3, #1
 8002dde:	2160      	movs	r1, #96	; 0x60
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ff9d 	bl	8002d20 <lis2mdl_read_reg>
 8002de6:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10f      	bne.n	8002e0e <lis2mdl_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	7a3b      	ldrb	r3, [r7, #8]
 8002df8:	f362 0383 	bfi	r3, r2, #2, #2
 8002dfc:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8002dfe:	f107 0208 	add.w	r2, r7, #8
 8002e02:	2301      	movs	r3, #1
 8002e04:	2160      	movs	r1, #96	; 0x60
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff ffa2 	bl	8002d50 <lis2mdl_write_reg>
 8002e0c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8002e22:	f107 0208 	add.w	r2, r7, #8
 8002e26:	2301      	movs	r3, #1
 8002e28:	2160      	movs	r1, #96	; 0x60
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff ff78 	bl	8002d20 <lis2mdl_read_reg>
 8002e30:	60f8      	str	r0, [r7, #12]
  switch (reg.odr){
 8002e32:	7a3b      	ldrb	r3, [r7, #8]
 8002e34:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d81a      	bhi.n	8002e74 <lis2mdl_data_rate_get+0x5c>
 8002e3e:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <lis2mdl_data_rate_get+0x2c>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002e55 	.word	0x08002e55
 8002e48:	08002e5d 	.word	0x08002e5d
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e6d 	.word	0x08002e6d
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
      break;
 8002e5a:	e00f      	b.n	8002e7c <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
      break;
 8002e62:	e00b      	b.n	8002e7c <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	2202      	movs	r2, #2
 8002e68:	701a      	strb	r2, [r3, #0]
      break;
 8002e6a:	e007      	b.n	8002e7c <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	701a      	strb	r2, [r3, #0]
      break;
 8002e72:	e003      	b.n	8002e7c <lis2mdl_data_rate_get+0x64>
    default:
      *val = LIS2MDL_ODR_10Hz;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
      break;
 8002e7a:	bf00      	nop
  }
  return ret;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop

08002e88 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8002e94:	f107 0208 	add.w	r2, r7, #8
 8002e98:	2301      	movs	r3, #1
 8002e9a:	2162      	movs	r1, #98	; 0x62
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff ff3f 	bl	8002d20 <lis2mdl_read_reg>
 8002ea2:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10f      	bne.n	8002eca <lis2mdl_block_data_update_set+0x42>
    reg.bdu = val;
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	7a3b      	ldrb	r3, [r7, #8]
 8002eb4:	f362 1304 	bfi	r3, r2, #4, #1
 8002eb8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8002eba:	f107 0208 	add.w	r2, r7, #8
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	2162      	movs	r1, #98	; 0x62
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ff44 	bl	8002d50 <lis2mdl_write_reg>
 8002ec8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002eca:	68fb      	ldr	r3, [r7, #12]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8002ede:	f107 020c 	add.w	r2, r7, #12
 8002ee2:	2306      	movs	r3, #6
 8002ee4:	2168      	movs	r1, #104	; 0x68
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff ff1a 	bl	8002d20 <lis2mdl_read_reg>
 8002eec:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002eee:	7b7b      	ldrb	r3, [r7, #13]
 8002ef0:	b21a      	sxth	r2, r3
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	7b3b      	ldrb	r3, [r7, #12]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	b21a      	sxth	r2, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	3302      	adds	r3, #2
 8002f16:	b212      	sxth	r2, r2
 8002f18:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	7bbb      	ldrb	r3, [r7, #14]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	3302      	adds	r3, #2
 8002f34:	b212      	sxth	r2, r2
 8002f36:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002f38:	7c7a      	ldrb	r2, [r7, #17]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	b212      	sxth	r2, r2
 8002f40:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	3304      	adds	r3, #4
 8002f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	7c3b      	ldrb	r3, [r7, #16]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	b212      	sxth	r2, r2
 8002f5e:	801a      	strh	r2, [r3, #0]

  return ret;
 8002f60:	697b      	ldr	r3, [r7, #20]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8002f74:	2301      	movs	r3, #1
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	214f      	movs	r1, #79	; 0x4f
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff fed0 	bl	8002d20 <lis2mdl_read_reg>
 8002f80:	60f8      	str	r0, [r7, #12]
  return ret;
 8002f82:	68fb      	ldr	r3, [r7, #12]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8002f98:	f107 0208 	add.w	r2, r7, #8
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	2162      	movs	r1, #98	; 0x62
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff febd 	bl	8002d20 <lis2mdl_read_reg>
 8002fa6:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10f      	bne.n	8002fce <lis2mdl_self_test_set+0x42>
    reg.self_test = val;
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	7a3b      	ldrb	r3, [r7, #8]
 8002fb8:	f362 0341 	bfi	r3, r2, #1, #1
 8002fbc:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8002fbe:	f107 0208 	add.w	r2, r7, #8
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	2162      	movs	r1, #98	; 0x62
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff fec2 	bl	8002d50 <lis2mdl_write_reg>
 8002fcc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002fce:	68fb      	ldr	r3, [r7, #12]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <lis2mdl_i2c_interface_set>:
  * @param  val   change the values of i2c_dis in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx, lis2mdl_i2c_dis_t val)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8002fe4:	f107 0208 	add.w	r2, r7, #8
 8002fe8:	2301      	movs	r3, #1
 8002fea:	2162      	movs	r1, #98	; 0x62
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff fe97 	bl	8002d20 <lis2mdl_read_reg>
 8002ff2:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10f      	bne.n	800301a <lis2mdl_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	b2da      	uxtb	r2, r3
 8003002:	7a3b      	ldrb	r3, [r7, #8]
 8003004:	f362 1345 	bfi	r3, r2, #5, #1
 8003008:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 800300a:	f107 0208 	add.w	r2, r7, #8
 800300e:	2301      	movs	r3, #1
 8003010:	2162      	movs	r1, #98	; 0x62
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fe9c 	bl	8002d50 <lis2mdl_write_reg>
 8003018:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800301a:	68fb      	ldr	r3, [r7, #12]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <LSM6DSO_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d103      	bne.n	8003040 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	e04d      	b.n	80030dc <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	7b1a      	ldrb	r2, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	699a      	ldr	r2, [r3, #24]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <LSM6DSO_RegisterBusIO+0xc4>)
 800307c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a1a      	ldr	r2, [pc, #104]	; (80030ec <LSM6DSO_RegisterBusIO+0xc8>)
 8003082:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d103      	bne.n	800309a <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 8003092:	f04f 33ff 	mov.w	r3, #4294967295
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	e020      	b.n	80030dc <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4798      	blx	r3
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	e016      	b.n	80030dc <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d112      	bne.n	80030dc <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10d      	bne.n	80030dc <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80030c0:	230c      	movs	r3, #12
 80030c2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 80030c4:	7afb      	ldrb	r3, [r7, #11]
 80030c6:	461a      	mov	r2, r3
 80030c8:	2112      	movs	r1, #18
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 ff57 	bl	8003f7e <LSM6DSO_Write_Reg>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 80030d6:	f04f 33ff 	mov.w	r3, #4294967295
 80030da:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80030dc:	68fb      	ldr	r3, [r7, #12]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	08004421 	.word	0x08004421
 80030ec:	08004457 	.word	0x08004457

080030f0 <LSM6DSO_Init>:
 * @brief  Initialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	331c      	adds	r3, #28
 80030fc:	2180      	movs	r1, #128	; 0x80
 80030fe:	4618      	mov	r0, r3
 8003100:	f001 fe21 	bl	8004d46 <lsm6dso_i3c_disable_set>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 800310a:	f04f 33ff 	mov.w	r3, #4294967295
 800310e:	e060      	b.n	80031d2 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	331c      	adds	r3, #28
 8003114:	2101      	movs	r1, #1
 8003116:	4618      	mov	r0, r3
 8003118:	f001 fdef 	bl	8004cfa <lsm6dso_auto_increment_set>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 8003122:	f04f 33ff 	mov.w	r3, #4294967295
 8003126:	e054      	b.n	80031d2 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	331c      	adds	r3, #28
 800312c:	2101      	movs	r1, #1
 800312e:	4618      	mov	r0, r3
 8003130:	f001 fd64 	bl	8004bfc <lsm6dso_block_data_update_set>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 800313a:	f04f 33ff 	mov.w	r3, #4294967295
 800313e:	e048      	b.n	80031d2 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	331c      	adds	r3, #28
 8003144:	2100      	movs	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f001 fe43 	bl	8004dd2 <lsm6dso_fifo_mode_set>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 8003152:	f04f 33ff 	mov.w	r3, #4294967295
 8003156:	e03c      	b.n	80031d2 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2204      	movs	r2, #4
 800315c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	331c      	adds	r3, #28
 8003164:	2100      	movs	r1, #0
 8003166:	4618      	mov	r0, r3
 8003168:	f001 fa1e 	bl	80045a8 <lsm6dso_xl_data_rate_set>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8003172:	f04f 33ff 	mov.w	r3, #4294967295
 8003176:	e02c      	b.n	80031d2 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	331c      	adds	r3, #28
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f001 f9b4 	bl	80044ec <lsm6dso_xl_full_scale_set>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
 800318e:	e020      	b.n	80031d2 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2204      	movs	r2, #4
 8003194:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	331c      	adds	r3, #28
 800319c:	2100      	movs	r1, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	f001 fbce 	bl	8004940 <lsm6dso_gy_data_rate_set>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295
 80031ae:	e010      	b.n	80031d2 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	331c      	adds	r3, #28
 80031b4:	2106      	movs	r1, #6
 80031b6:	4618      	mov	r0, r3
 80031b8:	f001 fb5a 	bl	8004870 <lsm6dso_gy_full_scale_set>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	e004      	b.n	80031d2 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <LSM6DSO_DeInit>:
 * @brief  Deinitialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f888 	bl	80032f8 <LSM6DSO_ACC_Disable>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
 80031f2:	e015      	b.n	8003220 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fc2c 	bl	8003a52 <LSM6DSO_GYRO_Disable>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8003200:	f04f 33ff 	mov.w	r3, #4294967295
 8003204:	e00c      	b.n	8003220 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <LSM6DSO_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	331c      	adds	r3, #28
 8003236:	6839      	ldr	r1, [r7, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f001 fd4d 	bl	8004cd8 <lsm6dso_device_id_get>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8003244:	f04f 33ff 	mov.w	r3, #4294967295
 8003248:	e000      	b.n	800324c <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <LSM6DSO_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSO sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2201      	movs	r2, #1
 8003262:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2201      	movs	r2, #1
 8003268:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2200      	movs	r2, #0
 800326e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2200      	movs	r2, #0
 8003274:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800327c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2210      	movs	r2, #16
 8003282:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2200      	movs	r2, #0
 8003288:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	4a07      	ldr	r2, [pc, #28]	; (80032ac <LSM6DSO_GetCapabilities+0x58>)
 800328e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	4a06      	ldr	r2, [pc, #24]	; (80032ac <LSM6DSO_GetCapabilities+0x58>)
 8003294:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	45d02000 	.word	0x45d02000

080032b0 <LSM6DSO_ACC_Enable>:
 * @brief  Enable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e014      	b.n	80032f0 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f103 021c 	add.w	r2, r3, #28
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80032d2:	4619      	mov	r1, r3
 80032d4:	4610      	mov	r0, r2
 80032d6:	f001 f967 	bl	80045a8 <lsm6dso_xl_data_rate_set>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80032e0:	f04f 33ff 	mov.w	r3, #4294967295
 80032e4:	e004      	b.n	80032f0 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <LSM6DSO_ACC_Disable>:
 * @brief  Disable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	e01f      	b.n	800334e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f103 021c 	add.w	r2, r3, #28
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	332b      	adds	r3, #43	; 0x2b
 8003318:	4619      	mov	r1, r3
 800331a:	4610      	mov	r0, r2
 800331c:	f001 fa40 	bl	80047a0 <lsm6dso_xl_data_rate_get>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8003326:	f04f 33ff 	mov.w	r3, #4294967295
 800332a:	e010      	b.n	800334e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	331c      	adds	r3, #28
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f001 f938 	bl	80045a8 <lsm6dso_xl_data_rate_set>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295
 8003342:	e004      	b.n	800334e <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <LSM6DSO_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	331c      	adds	r3, #28
 800336a:	f107 020b 	add.w	r2, r7, #11
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f001 f8e1 	bl	8004538 <lsm6dso_xl_full_scale_get>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800337c:	f04f 33ff 	mov.w	r3, #4294967295
 8003380:	e023      	b.n	80033ca <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003382:	7afb      	ldrb	r3, [r7, #11]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d81b      	bhi.n	80033c0 <LSM6DSO_ACC_GetSensitivity+0x68>
 8003388:	a201      	add	r2, pc, #4	; (adr r2, 8003390 <LSM6DSO_ACC_GetSensitivity+0x38>)
 800338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338e:	bf00      	nop
 8003390:	080033a1 	.word	0x080033a1
 8003394:	080033b9 	.word	0x080033b9
 8003398:	080033a9 	.word	0x080033a9
 800339c:	080033b1 	.word	0x080033b1
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 80033a4:	601a      	str	r2, [r3, #0]
      break;
 80033a6:	e00f      	b.n	80033c8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <LSM6DSO_ACC_GetSensitivity+0x80>)
 80033ac:	601a      	str	r2, [r3, #0]
      break;
 80033ae:	e00b      	b.n	80033c8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <LSM6DSO_ACC_GetSensitivity+0x84>)
 80033b4:	601a      	str	r2, [r3, #0]
      break;
 80033b6:	e007      	b.n	80033c8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <LSM6DSO_ACC_GetSensitivity+0x88>)
 80033bc:	601a      	str	r2, [r3, #0]
      break;
 80033be:	e003      	b.n	80033c8 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80033c0:	f04f 33ff 	mov.w	r3, #4294967295
 80033c4:	60fb      	str	r3, [r7, #12]
      break;
 80033c6:	bf00      	nop
  }

  return ret;
 80033c8:	68fb      	ldr	r3, [r7, #12]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	3d79db23 	.word	0x3d79db23
 80033d8:	3df9db23 	.word	0x3df9db23
 80033dc:	3e79db23 	.word	0x3e79db23
 80033e0:	3ef9db23 	.word	0x3ef9db23

080033e4 <LSM6DSO_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	331c      	adds	r3, #28
 80033f6:	f107 020b 	add.w	r2, r7, #11
 80033fa:	4611      	mov	r1, r2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f001 f9cf 	bl	80047a0 <lsm6dso_xl_data_rate_get>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8003408:	f04f 33ff 	mov.w	r3, #4294967295
 800340c:	e054      	b.n	80034b8 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800340e:	7afb      	ldrb	r3, [r7, #11]
 8003410:	2b0b      	cmp	r3, #11
 8003412:	d84c      	bhi.n	80034ae <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8003414:	a201      	add	r2, pc, #4	; (adr r2, 800341c <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	0800344d 	.word	0x0800344d
 8003420:	0800345f 	.word	0x0800345f
 8003424:	08003467 	.word	0x08003467
 8003428:	0800346f 	.word	0x0800346f
 800342c:	08003477 	.word	0x08003477
 8003430:	0800347f 	.word	0x0800347f
 8003434:	08003487 	.word	0x08003487
 8003438:	0800348f 	.word	0x0800348f
 800343c:	08003497 	.word	0x08003497
 8003440:	0800349f 	.word	0x0800349f
 8003444:	080034a7 	.word	0x080034a7
 8003448:	08003457 	.word	0x08003457
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
      break;
 8003454:	e02f      	b.n	80034b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	4a19      	ldr	r2, [pc, #100]	; (80034c0 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 800345a:	601a      	str	r2, [r3, #0]
      break;
 800345c:	e02b      	b.n	80034b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	4a18      	ldr	r2, [pc, #96]	; (80034c4 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8003462:	601a      	str	r2, [r3, #0]
      break;
 8003464:	e027      	b.n	80034b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	4a17      	ldr	r2, [pc, #92]	; (80034c8 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 800346a:	601a      	str	r2, [r3, #0]
      break;
 800346c:	e023      	b.n	80034b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	4a16      	ldr	r2, [pc, #88]	; (80034cc <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8003472:	601a      	str	r2, [r3, #0]
      break;
 8003474:	e01f      	b.n	80034b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	4a15      	ldr	r2, [pc, #84]	; (80034d0 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 800347a:	601a      	str	r2, [r3, #0]
      break;
 800347c:	e01b      	b.n	80034b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	4a14      	ldr	r2, [pc, #80]	; (80034d4 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8003482:	601a      	str	r2, [r3, #0]
      break;
 8003484:	e017      	b.n	80034b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	4a13      	ldr	r2, [pc, #76]	; (80034d8 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 800348a:	601a      	str	r2, [r3, #0]
      break;
 800348c:	e013      	b.n	80034b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	4a12      	ldr	r2, [pc, #72]	; (80034dc <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8003492:	601a      	str	r2, [r3, #0]
      break;
 8003494:	e00f      	b.n	80034b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	4a11      	ldr	r2, [pc, #68]	; (80034e0 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 800349a:	601a      	str	r2, [r3, #0]
      break;
 800349c:	e00b      	b.n	80034b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	4a10      	ldr	r2, [pc, #64]	; (80034e4 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80034a2:	601a      	str	r2, [r3, #0]
      break;
 80034a4:	e007      	b.n	80034b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	4a0f      	ldr	r2, [pc, #60]	; (80034e8 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80034aa:	601a      	str	r2, [r3, #0]
      break;
 80034ac:	e003      	b.n	80034b6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80034ae:	f04f 33ff 	mov.w	r3, #4294967295
 80034b2:	60fb      	str	r3, [r7, #12]
      break;
 80034b4:	bf00      	nop
  }

  return ret;
 80034b6:	68fb      	ldr	r3, [r7, #12]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	3fcccccd 	.word	0x3fcccccd
 80034c4:	41480000 	.word	0x41480000
 80034c8:	41d00000 	.word	0x41d00000
 80034cc:	42500000 	.word	0x42500000
 80034d0:	42d00000 	.word	0x42d00000
 80034d4:	43500000 	.word	0x43500000
 80034d8:	43d08000 	.word	0x43d08000
 80034dc:	44504000 	.word	0x44504000
 80034e0:	44d06000 	.word	0x44d06000
 80034e4:	45505000 	.word	0x45505000
 80034e8:	45d05800 	.word	0x45d05800

080034ec <LSM6DSO_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80034f8:	2100      	movs	r1, #0
 80034fa:	ed97 0a00 	vldr	s0, [r7]
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f806 	bl	8003510 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8003504:	4603      	mov	r3, r0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the accelerometer operating mode
 * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08c      	sub	sp, #48	; 0x30
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	ed87 0a02 	vstr	s0, [r7, #8]
 800351c:	460b      	mov	r3, r1
 800351e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	62bb      	str	r3, [r7, #40]	; 0x28
  
  switch (Mode)
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d079      	beq.n	8003622 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
 800352e:	2b02      	cmp	r3, #2
 8003530:	f000 80e5 	beq.w	80036fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
 8003534:	2b00      	cmp	r3, #0
 8003536:	f040 815e 	bne.w	80037f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f103 001c 	add.w	r0, r3, #28
 8003540:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003544:	2301      	movs	r3, #1
 8003546:	2114      	movs	r1, #20
 8003548:	f000 ffa0 	bl	800448c <lsm6dso_read_reg>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x48>
      {
        return LSM6DSO_ERROR;
 8003552:	f04f 33ff 	mov.w	r3, #4294967295
 8003556:	e16c      	b.n	8003832 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val1.xl_ulp_en != 0U)
 8003558:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800355c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d025      	beq.n	80035b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800356c:	2b01      	cmp	r3, #1
 800356e:	d10b      	bne.n	8003588 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x78>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	331c      	adds	r3, #28
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f001 f816 	bl	80045a8 <lsm6dso_xl_data_rate_set>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x78>
          {
            return LSM6DSO_ERROR;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	e154      	b.n	8003832 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
          }
        }

        val1.xl_ulp_en = 0;
 8003588:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800358c:	f36f 13c7 	bfc	r3, #7, #1
 8003590:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f103 001c 	add.w	r0, r3, #28
 800359a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800359e:	2301      	movs	r3, #1
 80035a0:	2114      	movs	r1, #20
 80035a2:	f000 ff8b 	bl	80044bc <lsm6dso_write_reg>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
        {
          return LSM6DSO_ERROR;
 80035ac:	f04f 33ff 	mov.w	r3, #4294967295
 80035b0:	e13f      	b.n	8003832 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f103 001c 	add.w	r0, r3, #28
 80035b8:	f107 0220 	add.w	r2, r7, #32
 80035bc:	2301      	movs	r3, #1
 80035be:	2115      	movs	r1, #21
 80035c0:	f000 ff64 	bl	800448c <lsm6dso_read_reg>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc0>
      {
        return LSM6DSO_ERROR;
 80035ca:	f04f 33ff 	mov.w	r3, #4294967295
 80035ce:	e130      	b.n	8003832 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val2.xl_hm_mode != 0U)
 80035d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d014      	beq.n	8003608 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf8>
      {
        val2.xl_hm_mode = 0U;
 80035de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035e2:	f36f 1304 	bfc	r3, #4, #1
 80035e6:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f103 001c 	add.w	r0, r3, #28
 80035f0:	f107 0220 	add.w	r2, r7, #32
 80035f4:	2301      	movs	r3, #1
 80035f6:	2115      	movs	r1, #21
 80035f8:	f000 ff60 	bl	80044bc <lsm6dso_write_reg>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf8>
        {
          return LSM6DSO_ERROR;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	e114      	b.n	8003832 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8003608:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800360c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003618:	d400      	bmi.n	800361c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x10c>
      {
        newOdr = 12.5f;
      }
      break;
 800361a:	e0f0      	b.n	80037fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
        newOdr = 12.5f;
 800361c:	4b87      	ldr	r3, [pc, #540]	; (800383c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x32c>)
 800361e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003620:	e0ed      	b.n	80037fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f103 001c 	add.w	r0, r3, #28
 8003628:	f107 021c 	add.w	r2, r7, #28
 800362c:	2301      	movs	r3, #1
 800362e:	2114      	movs	r1, #20
 8003630:	f000 ff2c 	bl	800448c <lsm6dso_read_reg>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x130>
      {
        return LSM6DSO_ERROR;
 800363a:	f04f 33ff 	mov.w	r3, #4294967295
 800363e:	e0f8      	b.n	8003832 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val1.xl_ulp_en != 0U)
 8003640:	7f3b      	ldrb	r3, [r7, #28]
 8003642:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d023      	beq.n	8003694 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003652:	2b01      	cmp	r3, #1
 8003654:	d10b      	bne.n	800366e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	331c      	adds	r3, #28
 800365a:	2100      	movs	r1, #0
 800365c:	4618      	mov	r0, r3
 800365e:	f000 ffa3 	bl	80045a8 <lsm6dso_xl_data_rate_set>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
          {
            return LSM6DSO_ERROR;
 8003668:	f04f 33ff 	mov.w	r3, #4294967295
 800366c:	e0e1      	b.n	8003832 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
          }
        }

        val1.xl_ulp_en = 0;
 800366e:	7f3b      	ldrb	r3, [r7, #28]
 8003670:	f36f 13c7 	bfc	r3, #7, #1
 8003674:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f103 001c 	add.w	r0, r3, #28
 800367c:	f107 021c 	add.w	r2, r7, #28
 8003680:	2301      	movs	r3, #1
 8003682:	2114      	movs	r1, #20
 8003684:	f000 ff1a 	bl	80044bc <lsm6dso_write_reg>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
        {
          return LSM6DSO_ERROR;
 800368e:	f04f 33ff 	mov.w	r3, #4294967295
 8003692:	e0ce      	b.n	8003832 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f103 001c 	add.w	r0, r3, #28
 800369a:	f107 0218 	add.w	r2, r7, #24
 800369e:	2301      	movs	r3, #1
 80036a0:	2115      	movs	r1, #21
 80036a2:	f000 fef3 	bl	800448c <lsm6dso_read_reg>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a2>
      {
        return LSM6DSO_ERROR;
 80036ac:	f04f 33ff 	mov.w	r3, #4294967295
 80036b0:	e0bf      	b.n	8003832 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val2.xl_hm_mode == 0U)
 80036b2:	7e3b      	ldrb	r3, [r7, #24]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d112      	bne.n	80036e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
      {
        val2.xl_hm_mode = 1U;
 80036be:	7e3b      	ldrb	r3, [r7, #24]
 80036c0:	f043 0310 	orr.w	r3, r3, #16
 80036c4:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f103 001c 	add.w	r0, r3, #28
 80036cc:	f107 0218 	add.w	r2, r7, #24
 80036d0:	2301      	movs	r3, #1
 80036d2:	2115      	movs	r1, #21
 80036d4:	f000 fef2 	bl	80044bc <lsm6dso_write_reg>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
        {
          return LSM6DSO_ERROR;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
 80036e2:	e0a6      	b.n	8003832 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80036e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80036e8:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003840 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>
 80036ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f4:	dc00      	bgt.n	80036f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e8>
      {
        newOdr = 208.0f;
      }
      break;
 80036f6:	e082      	b.n	80037fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
        newOdr = 208.0f;
 80036f8:	4b52      	ldr	r3, [pc, #328]	; (8003844 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>)
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fc:	e07f      	b.n	80037fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f103 001c 	add.w	r0, r3, #28
 8003704:	f107 0210 	add.w	r2, r7, #16
 8003708:	2301      	movs	r3, #1
 800370a:	2115      	movs	r1, #21
 800370c:	f000 febe 	bl	800448c <lsm6dso_read_reg>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20c>
      {
        return LSM6DSO_ERROR;
 8003716:	f04f 33ff 	mov.w	r3, #4294967295
 800371a:	e08a      	b.n	8003832 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val2.xl_hm_mode != 0U)
 800371c:	7c3b      	ldrb	r3, [r7, #16]
 800371e:	f003 0310 	and.w	r3, r3, #16
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d012      	beq.n	800374e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23e>
      {
        val2.xl_hm_mode = 0U;
 8003728:	7c3b      	ldrb	r3, [r7, #16]
 800372a:	f36f 1304 	bfc	r3, #4, #1
 800372e:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f103 001c 	add.w	r0, r3, #28
 8003736:	f107 0210 	add.w	r2, r7, #16
 800373a:	2301      	movs	r3, #1
 800373c:	2115      	movs	r1, #21
 800373e:	f000 febd 	bl	80044bc <lsm6dso_write_reg>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23e>
        {
          return LSM6DSO_ERROR;
 8003748:	f04f 33ff 	mov.w	r3, #4294967295
 800374c:	e071      	b.n	8003832 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003754:	2b01      	cmp	r3, #1
 8003756:	d108      	bne.n	800376a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x25a>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 f97a 	bl	8003a52 <LSM6DSO_GYRO_Disable>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x25a>
        {
          return LSM6DSO_ERROR;
 8003764:	f04f 33ff 	mov.w	r3, #4294967295
 8003768:	e063      	b.n	8003832 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f103 001c 	add.w	r0, r3, #28
 8003770:	f107 0214 	add.w	r2, r7, #20
 8003774:	2301      	movs	r3, #1
 8003776:	2114      	movs	r1, #20
 8003778:	f000 fe88 	bl	800448c <lsm6dso_read_reg>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x278>
      {
        return LSM6DSO_ERROR;
 8003782:	f04f 33ff 	mov.w	r3, #4294967295
 8003786:	e054      	b.n	8003832 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val1.xl_ulp_en == 0U)
 8003788:	7d3b      	ldrb	r3, [r7, #20]
 800378a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d123      	bne.n	80037dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2cc>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800379a:	2b01      	cmp	r3, #1
 800379c:	d10b      	bne.n	80037b6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a6>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	331c      	adds	r3, #28
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 feff 	bl	80045a8 <lsm6dso_xl_data_rate_set>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a6>
          {
            return LSM6DSO_ERROR;
 80037b0:	f04f 33ff 	mov.w	r3, #4294967295
 80037b4:	e03d      	b.n	8003832 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
          }
        }

        val1.xl_ulp_en = 1U;
 80037b6:	7d3b      	ldrb	r3, [r7, #20]
 80037b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037bc:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f103 001c 	add.w	r0, r3, #28
 80037c4:	f107 0214 	add.w	r2, r7, #20
 80037c8:	2301      	movs	r3, #1
 80037ca:	2114      	movs	r1, #20
 80037cc:	f000 fe76 	bl	80044bc <lsm6dso_write_reg>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2cc>
        {
          return LSM6DSO_ERROR;
 80037d6:	f04f 33ff 	mov.w	r3, #4294967295
 80037da:	e02a      	b.n	8003832 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80037dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80037e0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003840 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>
 80037e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ec:	dc00      	bgt.n	80037f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e0>
      {
        newOdr = 208.0f;
      }
      break;
 80037ee:	e006      	b.n	80037fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
        newOdr = 208.0f;
 80037f0:	4b14      	ldr	r3, [pc, #80]	; (8003844 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>)
 80037f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037f4:	e003      	b.n	80037fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
    }
    default:
      ret = LSM6DSO_ERROR;
 80037f6:	f04f 33ff 	mov.w	r3, #4294967295
 80037fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80037fc:	bf00      	nop
  }

  if(ret == LSM6DSO_ERROR)
 80037fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d102      	bne.n	800380c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2fc>
  {
    return LSM6DSO_ERROR;
 8003806:	f04f 33ff 	mov.w	r3, #4294967295
 800380a:	e012      	b.n	8003832 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
  }

  if (pObj->acc_is_enabled == 1U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003812:	2b01      	cmp	r3, #1
 8003814:	d106      	bne.n	8003824 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x314>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8003816:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fbca 	bl	8003fb4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8003820:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003822:	e005      	b.n	8003830 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8003824:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fc5b 	bl	80040e4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 800382e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003832:	4618      	mov	r0, r3
 8003834:	3730      	adds	r7, #48	; 0x30
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	41480000 	.word	0x41480000
 8003840:	43500000 	.word	0x43500000
 8003844:	43500000 	.word	0x43500000

08003848 <LSM6DSO_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	331c      	adds	r3, #28
 800385a:	f107 020b 	add.w	r2, r7, #11
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fe69 	bl	8004538 <lsm6dso_xl_full_scale_get>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 800386c:	f04f 33ff 	mov.w	r3, #4294967295
 8003870:	e023      	b.n	80038ba <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003872:	7afb      	ldrb	r3, [r7, #11]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d81b      	bhi.n	80038b0 <LSM6DSO_ACC_GetFullScale+0x68>
 8003878:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <LSM6DSO_ACC_GetFullScale+0x38>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	08003891 	.word	0x08003891
 8003884:	080038a9 	.word	0x080038a9
 8003888:	08003899 	.word	0x08003899
 800388c:	080038a1 	.word	0x080038a1
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2202      	movs	r2, #2
 8003894:	601a      	str	r2, [r3, #0]
      break;
 8003896:	e00f      	b.n	80038b8 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2204      	movs	r2, #4
 800389c:	601a      	str	r2, [r3, #0]
      break;
 800389e:	e00b      	b.n	80038b8 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2208      	movs	r2, #8
 80038a4:	601a      	str	r2, [r3, #0]
      break;
 80038a6:	e007      	b.n	80038b8 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2210      	movs	r2, #16
 80038ac:	601a      	str	r2, [r3, #0]
      break;
 80038ae:	e003      	b.n	80038b8 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80038b0:	f04f 33ff 	mov.w	r3, #4294967295
 80038b4:	60fb      	str	r3, [r7, #12]
      break;
 80038b6:	bf00      	nop
  }

  return ret;
 80038b8:	68fb      	ldr	r3, [r7, #12]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop

080038c4 <LSM6DSO_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	dd0b      	ble.n	80038ec <LSM6DSO_ACC_SetFullScale+0x28>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	dd06      	ble.n	80038e8 <LSM6DSO_ACC_SetFullScale+0x24>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	dc01      	bgt.n	80038e4 <LSM6DSO_ACC_SetFullScale+0x20>
 80038e0:	2303      	movs	r3, #3
 80038e2:	e004      	b.n	80038ee <LSM6DSO_ACC_SetFullScale+0x2a>
 80038e4:	2301      	movs	r3, #1
 80038e6:	e002      	b.n	80038ee <LSM6DSO_ACC_SetFullScale+0x2a>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e000      	b.n	80038ee <LSM6DSO_ACC_SetFullScale+0x2a>
 80038ec:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 80038ee:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	331c      	adds	r3, #28
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fdf7 	bl	80044ec <lsm6dso_xl_full_scale_set>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8003904:	f04f 33ff 	mov.w	r3, #4294967295
 8003908:	e000      	b.n	800390c <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <LSM6DSO_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	331c      	adds	r3, #28
 8003922:	f107 0208 	add.w	r2, r7, #8
 8003926:	4611      	mov	r1, r2
 8003928:	4618      	mov	r0, r3
 800392a:	f001 f99e 	bl	8004c6a <lsm6dso_acceleration_raw_get>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8003934:	f04f 33ff 	mov.w	r3, #4294967295
 8003938:	e00c      	b.n	8003954 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800393a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003942:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800394a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <LSM6DSO_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	331c      	adds	r3, #28
 8003970:	f107 0210 	add.w	r2, r7, #16
 8003974:	4611      	mov	r1, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f001 f977 	bl	8004c6a <lsm6dso_acceleration_raw_get>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8003982:	f04f 33ff 	mov.w	r3, #4294967295
 8003986:	e03c      	b.n	8003a02 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8003988:	f107 030c 	add.w	r3, r7, #12
 800398c:	4619      	mov	r1, r3
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff fce2 	bl	8003358 <LSM6DSO_ACC_GetSensitivity>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 800399a:	f04f 33ff 	mov.w	r3, #4294967295
 800399e:	e030      	b.n	8003a02 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80039a0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80039a4:	ee07 3a90 	vmov	s15, r3
 80039a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80039b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039b8:	ee17 2a90 	vmov	r2, s15
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80039c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80039c4:	ee07 3a90 	vmov	s15, r3
 80039c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80039d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039d8:	ee17 2a90 	vmov	r2, s15
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80039e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80039e4:	ee07 3a90 	vmov	s15, r3
 80039e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80039f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039f8:	ee17 2a90 	vmov	r2, s15
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <LSM6DSO_GYRO_Enable>:
 * @brief  Enable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e014      	b.n	8003a4a <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f103 021c 	add.w	r2, r3, #28
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4610      	mov	r0, r2
 8003a30:	f000 ff86 	bl	8004940 <lsm6dso_gy_data_rate_set>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8003a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3e:	e004      	b.n	8003a4a <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <LSM6DSO_GYRO_Disable>:
 * @brief  Disable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	e01f      	b.n	8003aa8 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f103 021c 	add.w	r2, r3, #28
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	332c      	adds	r3, #44	; 0x2c
 8003a72:	4619      	mov	r1, r3
 8003a74:	4610      	mov	r0, r2
 8003a76:	f001 f85f 	bl	8004b38 <lsm6dso_gy_data_rate_get>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8003a80:	f04f 33ff 	mov.w	r3, #4294967295
 8003a84:	e010      	b.n	8003aa8 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	331c      	adds	r3, #28
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 ff57 	bl	8004940 <lsm6dso_gy_data_rate_set>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8003a98:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9c:	e004      	b.n	8003aa8 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <LSM6DSO_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	331c      	adds	r3, #28
 8003ac2:	f107 020b 	add.w	r2, r7, #11
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fef7 	bl	80048bc <lsm6dso_gy_full_scale_get>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8003ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad8:	e02d      	b.n	8003b36 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003ada:	7afb      	ldrb	r3, [r7, #11]
 8003adc:	2b06      	cmp	r3, #6
 8003ade:	d825      	bhi.n	8003b2c <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8003ae0:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8003ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae6:	bf00      	nop
 8003ae8:	08003b0d 	.word	0x08003b0d
 8003aec:	08003b05 	.word	0x08003b05
 8003af0:	08003b15 	.word	0x08003b15
 8003af4:	08003b2d 	.word	0x08003b2d
 8003af8:	08003b1d 	.word	0x08003b1d
 8003afc:	08003b2d 	.word	0x08003b2d
 8003b00:	08003b25 	.word	0x08003b25
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	4a0e      	ldr	r2, [pc, #56]	; (8003b40 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8003b08:	601a      	str	r2, [r3, #0]
      break;
 8003b0a:	e013      	b.n	8003b34 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	4a0d      	ldr	r2, [pc, #52]	; (8003b44 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8003b10:	601a      	str	r2, [r3, #0]
      break;
 8003b12:	e00f      	b.n	8003b34 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	4a0c      	ldr	r2, [pc, #48]	; (8003b48 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8003b18:	601a      	str	r2, [r3, #0]
      break;
 8003b1a:	e00b      	b.n	8003b34 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	4a0b      	ldr	r2, [pc, #44]	; (8003b4c <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8003b20:	601a      	str	r2, [r3, #0]
      break;
 8003b22:	e007      	b.n	8003b34 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8003b28:	601a      	str	r2, [r3, #0]
      break;
 8003b2a:	e003      	b.n	8003b34 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8003b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b30:	60fb      	str	r3, [r7, #12]
      break;
 8003b32:	bf00      	nop
  }

  return ret;
 8003b34:	68fb      	ldr	r3, [r7, #12]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	408c0000 	.word	0x408c0000
 8003b44:	410c0000 	.word	0x410c0000
 8003b48:	418c0000 	.word	0x418c0000
 8003b4c:	420c0000 	.word	0x420c0000
 8003b50:	428c0000 	.word	0x428c0000

08003b54 <LSM6DSO_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	331c      	adds	r3, #28
 8003b66:	f107 020b 	add.w	r2, r7, #11
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 ffe3 	bl	8004b38 <lsm6dso_gy_data_rate_get>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7c:	e04e      	b.n	8003c1c <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003b7e:	7afb      	ldrb	r3, [r7, #11]
 8003b80:	2b0a      	cmp	r3, #10
 8003b82:	d846      	bhi.n	8003c12 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8003b84:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003bb9 	.word	0x08003bb9
 8003b90:	08003bc3 	.word	0x08003bc3
 8003b94:	08003bcb 	.word	0x08003bcb
 8003b98:	08003bd3 	.word	0x08003bd3
 8003b9c:	08003bdb 	.word	0x08003bdb
 8003ba0:	08003be3 	.word	0x08003be3
 8003ba4:	08003beb 	.word	0x08003beb
 8003ba8:	08003bf3 	.word	0x08003bf3
 8003bac:	08003bfb 	.word	0x08003bfb
 8003bb0:	08003c03 	.word	0x08003c03
 8003bb4:	08003c0b 	.word	0x08003c0b
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
      break;
 8003bc0:	e02b      	b.n	8003c1a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8003bc6:	601a      	str	r2, [r3, #0]
      break;
 8003bc8:	e027      	b.n	8003c1a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	4a16      	ldr	r2, [pc, #88]	; (8003c28 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8003bce:	601a      	str	r2, [r3, #0]
      break;
 8003bd0:	e023      	b.n	8003c1a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8003bd6:	601a      	str	r2, [r3, #0]
      break;
 8003bd8:	e01f      	b.n	8003c1a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	4a14      	ldr	r2, [pc, #80]	; (8003c30 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8003bde:	601a      	str	r2, [r3, #0]
      break;
 8003be0:	e01b      	b.n	8003c1a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	4a13      	ldr	r2, [pc, #76]	; (8003c34 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8003be6:	601a      	str	r2, [r3, #0]
      break;
 8003be8:	e017      	b.n	8003c1a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	4a12      	ldr	r2, [pc, #72]	; (8003c38 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8003bee:	601a      	str	r2, [r3, #0]
      break;
 8003bf0:	e013      	b.n	8003c1a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	4a11      	ldr	r2, [pc, #68]	; (8003c3c <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8003bf6:	601a      	str	r2, [r3, #0]
      break;
 8003bf8:	e00f      	b.n	8003c1a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	4a10      	ldr	r2, [pc, #64]	; (8003c40 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8003bfe:	601a      	str	r2, [r3, #0]
      break;
 8003c00:	e00b      	b.n	8003c1a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	4a0f      	ldr	r2, [pc, #60]	; (8003c44 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8003c06:	601a      	str	r2, [r3, #0]
      break;
 8003c08:	e007      	b.n	8003c1a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	4a0e      	ldr	r2, [pc, #56]	; (8003c48 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8003c0e:	601a      	str	r2, [r3, #0]
      break;
 8003c10:	e003      	b.n	8003c1a <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8003c12:	f04f 33ff 	mov.w	r3, #4294967295
 8003c16:	60fb      	str	r3, [r7, #12]
      break;
 8003c18:	bf00      	nop
  }

  return ret;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	41480000 	.word	0x41480000
 8003c28:	41d00000 	.word	0x41d00000
 8003c2c:	42500000 	.word	0x42500000
 8003c30:	42d00000 	.word	0x42d00000
 8003c34:	43500000 	.word	0x43500000
 8003c38:	43d08000 	.word	0x43d08000
 8003c3c:	44504000 	.word	0x44504000
 8003c40:	44d06000 	.word	0x44d06000
 8003c44:	45505000 	.word	0x45505000
 8003c48:	45d05800 	.word	0x45d05800

08003c4c <LSM6DSO_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8003c58:	2100      	movs	r1, #0
 8003c5a:	ed97 0a00 	vldr	s0, [r7]
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f806 	bl	8003c70 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8003c64:	4603      	mov	r3, r0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
 * @param  Odr the output data rate value to be set
 * @param  Mode the gyroscope operating mode
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d028      	beq.n	8003ce4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8003c92:	e05c      	b.n	8003d4e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f103 001c 	add.w	r0, r3, #28
 8003c9a:	f107 0214 	add.w	r2, r7, #20
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	2116      	movs	r1, #22
 8003ca2:	f000 fbf3 	bl	800448c <lsm6dso_read_reg>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8003cac:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb0:	e06c      	b.n	8003d8c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8003cb2:	7d3b      	ldrb	r3, [r7, #20]
 8003cb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d04b      	beq.n	8003d56 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8003cbe:	7d3b      	ldrb	r3, [r7, #20]
 8003cc0:	f36f 13c7 	bfc	r3, #7, #1
 8003cc4:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f103 001c 	add.w	r0, r3, #28
 8003ccc:	f107 0214 	add.w	r2, r7, #20
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	2116      	movs	r1, #22
 8003cd4:	f000 fbf2 	bl	80044bc <lsm6dso_write_reg>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d03b      	beq.n	8003d56 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8003cde:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce2:	e053      	b.n	8003d8c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f103 001c 	add.w	r0, r3, #28
 8003cea:	f107 0210 	add.w	r2, r7, #16
 8003cee:	2301      	movs	r3, #1
 8003cf0:	2116      	movs	r1, #22
 8003cf2:	f000 fbcb 	bl	800448c <lsm6dso_read_reg>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8003cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003d00:	e044      	b.n	8003d8c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8003d02:	7c3b      	ldrb	r3, [r7, #16]
 8003d04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d112      	bne.n	8003d34 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8003d0e:	7c3b      	ldrb	r3, [r7, #16]
 8003d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d14:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f103 001c 	add.w	r0, r3, #28
 8003d1c:	f107 0210 	add.w	r2, r7, #16
 8003d20:	2301      	movs	r3, #1
 8003d22:	2116      	movs	r1, #22
 8003d24:	f000 fbca 	bl	80044bc <lsm6dso_write_reg>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d32:	e02b      	b.n	8003d8c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003d34:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d38:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003d94 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8003d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d44:	dc00      	bgt.n	8003d48 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8003d46:	e007      	b.n	8003d58 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8003d48:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8003d4a:	61bb      	str	r3, [r7, #24]
 8003d4c:	e004      	b.n	8003d58 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8003d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d52:	61fb      	str	r3, [r7, #28]
      break;
 8003d54:	e000      	b.n	8003d58 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8003d56:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5e:	d102      	bne.n	8003d66 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8003d60:	f04f 33ff 	mov.w	r3, #4294967295
 8003d64:	e012      	b.n	8003d8c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d106      	bne.n	8003d7e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8003d70:	ed97 0a06 	vldr	s0, [r7, #24]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 fa45 	bl	8004204 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8003d7a:	61f8      	str	r0, [r7, #28]
 8003d7c:	e005      	b.n	8003d8a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8003d7e:	ed97 0a06 	vldr	s0, [r7, #24]
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 faca 	bl	800431c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8003d88:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8003d8a:	69fb      	ldr	r3, [r7, #28]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3720      	adds	r7, #32
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	43500000 	.word	0x43500000
 8003d98:	43500000 	.word	0x43500000

08003d9c <LSM6DSO_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	331c      	adds	r3, #28
 8003dae:	f107 020b 	add.w	r2, r7, #11
 8003db2:	4611      	mov	r1, r2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fd81 	bl	80048bc <lsm6dso_gy_full_scale_get>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8003dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc4:	e030      	b.n	8003e28 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8003dc6:	7afb      	ldrb	r3, [r7, #11]
 8003dc8:	2b06      	cmp	r3, #6
 8003dca:	d828      	bhi.n	8003e1e <LSM6DSO_GYRO_GetFullScale+0x82>
 8003dcc:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <LSM6DSO_GYRO_GetFullScale+0x38>)
 8003dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd2:	bf00      	nop
 8003dd4:	08003df9 	.word	0x08003df9
 8003dd8:	08003df1 	.word	0x08003df1
 8003ddc:	08003e01 	.word	0x08003e01
 8003de0:	08003e1f 	.word	0x08003e1f
 8003de4:	08003e0b 	.word	0x08003e0b
 8003de8:	08003e1f 	.word	0x08003e1f
 8003dec:	08003e15 	.word	0x08003e15
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	227d      	movs	r2, #125	; 0x7d
 8003df4:	601a      	str	r2, [r3, #0]
      break;
 8003df6:	e016      	b.n	8003e26 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	22fa      	movs	r2, #250	; 0xfa
 8003dfc:	601a      	str	r2, [r3, #0]
      break;
 8003dfe:	e012      	b.n	8003e26 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e06:	601a      	str	r2, [r3, #0]
      break;
 8003e08:	e00d      	b.n	8003e26 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e10:	601a      	str	r2, [r3, #0]
      break;
 8003e12:	e008      	b.n	8003e26 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003e1a:	601a      	str	r2, [r3, #0]
      break;
 8003e1c:	e003      	b.n	8003e26 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8003e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e22:	60fb      	str	r3, [r7, #12]
      break;
 8003e24:	bf00      	nop
  }

  return ret;
 8003e26:	68fb      	ldr	r3, [r7, #12]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <LSM6DSO_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b7d      	cmp	r3, #125	; 0x7d
 8003e3e:	dd12      	ble.n	8003e66 <LSM6DSO_GYRO_SetFullScale+0x36>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2bfa      	cmp	r3, #250	; 0xfa
 8003e44:	dd0d      	ble.n	8003e62 <LSM6DSO_GYRO_SetFullScale+0x32>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e4c:	dd07      	ble.n	8003e5e <LSM6DSO_GYRO_SetFullScale+0x2e>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e54:	dc01      	bgt.n	8003e5a <LSM6DSO_GYRO_SetFullScale+0x2a>
 8003e56:	2304      	movs	r3, #4
 8003e58:	e006      	b.n	8003e68 <LSM6DSO_GYRO_SetFullScale+0x38>
 8003e5a:	2306      	movs	r3, #6
 8003e5c:	e004      	b.n	8003e68 <LSM6DSO_GYRO_SetFullScale+0x38>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e002      	b.n	8003e68 <LSM6DSO_GYRO_SetFullScale+0x38>
 8003e62:	2300      	movs	r3, #0
 8003e64:	e000      	b.n	8003e68 <LSM6DSO_GYRO_SetFullScale+0x38>
 8003e66:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8003e68:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	331c      	adds	r3, #28
 8003e6e:	7bfa      	ldrb	r2, [r7, #15]
 8003e70:	4611      	mov	r1, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fcfc 	bl	8004870 <lsm6dso_gy_full_scale_set>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8003e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e82:	e000      	b.n	8003e86 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <LSM6DSO_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	331c      	adds	r3, #28
 8003e9c:	f107 0208 	add.w	r2, r7, #8
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fed0 	bl	8004c48 <lsm6dso_angular_rate_raw_get>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8003eae:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb2:	e00c      	b.n	8003ece <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003eb4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003ebc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003ec4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <LSM6DSO_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b086      	sub	sp, #24
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	331c      	adds	r3, #28
 8003ee4:	f107 0210 	add.w	r2, r7, #16
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 feac 	bl	8004c48 <lsm6dso_angular_rate_raw_get>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8003efa:	e03c      	b.n	8003f76 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8003efc:	f107 030c 	add.w	r3, r7, #12
 8003f00:	4619      	mov	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff fdd4 	bl	8003ab0 <LSM6DSO_GYRO_GetSensitivity>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8003f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f12:	e030      	b.n	8003f76 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003f14:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003f18:	ee07 3a90 	vmov	s15, r3
 8003f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f20:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f2c:	ee17 2a90 	vmov	r2, s15
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003f34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003f38:	ee07 3a90 	vmov	s15, r3
 8003f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f40:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f4c:	ee17 2a90 	vmov	r2, s15
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8003f54:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003f58:	ee07 3a90 	vmov	s15, r3
 8003f5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f60:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f6c:	ee17 2a90 	vmov	r2, s15
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <LSM6DSO_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	460b      	mov	r3, r1
 8003f88:	70fb      	strb	r3, [r7, #3]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f103 001c 	add.w	r0, r3, #28
 8003f94:	1cba      	adds	r2, r7, #2
 8003f96:	78f9      	ldrb	r1, [r7, #3]
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f000 fa8f 	bl	80044bc <lsm6dso_write_reg>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8003fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa8:	e000      	b.n	8003fac <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003fc0:	edd7 7a00 	vldr	s15, [r7]
 8003fc4:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80040c4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8003fc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd0:	d801      	bhi.n	8003fd6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003fd2:	230b      	movs	r3, #11
 8003fd4:	e063      	b.n	800409e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8003fd6:	edd7 7a00 	vldr	s15, [r7]
 8003fda:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003fde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe6:	d801      	bhi.n	8003fec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e058      	b.n	800409e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8003fec:	edd7 7a00 	vldr	s15, [r7]
 8003ff0:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffc:	d801      	bhi.n	8004002 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e04d      	b.n	800409e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004002:	edd7 7a00 	vldr	s15, [r7]
 8004006:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80040c8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 800400a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800400e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004012:	d801      	bhi.n	8004018 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004014:	2303      	movs	r3, #3
 8004016:	e042      	b.n	800409e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004018:	edd7 7a00 	vldr	s15, [r7]
 800401c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80040cc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8004020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004028:	d801      	bhi.n	800402e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800402a:	2304      	movs	r3, #4
 800402c:	e037      	b.n	800409e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800402e:	edd7 7a00 	vldr	s15, [r7]
 8004032:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80040d0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8004036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800403a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403e:	d801      	bhi.n	8004044 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004040:	2305      	movs	r3, #5
 8004042:	e02c      	b.n	800409e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004044:	edd7 7a00 	vldr	s15, [r7]
 8004048:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80040d4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 800404c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004054:	d801      	bhi.n	800405a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004056:	2306      	movs	r3, #6
 8004058:	e021      	b.n	800409e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800405a:	edd7 7a00 	vldr	s15, [r7]
 800405e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80040d8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8004062:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406a:	d801      	bhi.n	8004070 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800406c:	2307      	movs	r3, #7
 800406e:	e016      	b.n	800409e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004070:	edd7 7a00 	vldr	s15, [r7]
 8004074:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80040dc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8004078:	eef4 7ac7 	vcmpe.f32	s15, s14
 800407c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004080:	d801      	bhi.n	8004086 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004082:	2308      	movs	r3, #8
 8004084:	e00b      	b.n	800409e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004086:	edd7 7a00 	vldr	s15, [r7]
 800408a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80040e0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 800408e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004096:	d801      	bhi.n	800409c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8004098:	2309      	movs	r3, #9
 800409a:	e000      	b.n	800409e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800409c:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800409e:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
          :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	331c      	adds	r3, #28
 80040a4:	7bfa      	ldrb	r2, [r7, #15]
 80040a6:	4611      	mov	r1, r2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fa7d 	bl	80045a8 <lsm6dso_xl_data_rate_set>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 80040b4:	f04f 33ff 	mov.w	r3, #4294967295
 80040b8:	e000      	b.n	80040bc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	3fcccccd 	.word	0x3fcccccd
 80040c8:	42500000 	.word	0x42500000
 80040cc:	42d00000 	.word	0x42d00000
 80040d0:	43500000 	.word	0x43500000
 80040d4:	43d08000 	.word	0x43d08000
 80040d8:	44504000 	.word	0x44504000
 80040dc:	44d06000 	.word	0x44d06000
 80040e0:	45505000 	.word	0x45505000

080040e4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80040f0:	edd7 7a00 	vldr	s15, [r7]
 80040f4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80041e4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 80040f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004100:	d801      	bhi.n	8004106 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004102:	230b      	movs	r3, #11
 8004104:	e063      	b.n	80041ce <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004106:	edd7 7a00 	vldr	s15, [r7]
 800410a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800410e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004116:	d801      	bhi.n	800411c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004118:	2301      	movs	r3, #1
 800411a:	e058      	b.n	80041ce <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800411c:	edd7 7a00 	vldr	s15, [r7]
 8004120:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800412c:	d801      	bhi.n	8004132 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800412e:	2302      	movs	r3, #2
 8004130:	e04d      	b.n	80041ce <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004132:	edd7 7a00 	vldr	s15, [r7]
 8004136:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80041e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 800413a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800413e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004142:	d801      	bhi.n	8004148 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004144:	2303      	movs	r3, #3
 8004146:	e042      	b.n	80041ce <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004148:	edd7 7a00 	vldr	s15, [r7]
 800414c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80041ec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8004150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004158:	d801      	bhi.n	800415e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800415a:	2304      	movs	r3, #4
 800415c:	e037      	b.n	80041ce <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800415e:	edd7 7a00 	vldr	s15, [r7]
 8004162:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80041f0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8004166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800416a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416e:	d801      	bhi.n	8004174 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004170:	2305      	movs	r3, #5
 8004172:	e02c      	b.n	80041ce <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004174:	edd7 7a00 	vldr	s15, [r7]
 8004178:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80041f4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 800417c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004184:	d801      	bhi.n	800418a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004186:	2306      	movs	r3, #6
 8004188:	e021      	b.n	80041ce <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800418a:	edd7 7a00 	vldr	s15, [r7]
 800418e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80041f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8004192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419a:	d801      	bhi.n	80041a0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800419c:	2307      	movs	r3, #7
 800419e:	e016      	b.n	80041ce <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80041a0:	edd7 7a00 	vldr	s15, [r7]
 80041a4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80041fc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 80041a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b0:	d801      	bhi.n	80041b6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80041b2:	2308      	movs	r3, #8
 80041b4:	e00b      	b.n	80041ce <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80041b6:	edd7 7a00 	vldr	s15, [r7]
 80041ba:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004200 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80041be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c6:	d801      	bhi.n	80041cc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80041c8:	2309      	movs	r3, #9
 80041ca:	e000      	b.n	80041ce <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80041cc:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	3fcccccd 	.word	0x3fcccccd
 80041e8:	42500000 	.word	0x42500000
 80041ec:	42d00000 	.word	0x42d00000
 80041f0:	43500000 	.word	0x43500000
 80041f4:	43d08000 	.word	0x43d08000
 80041f8:	44504000 	.word	0x44504000
 80041fc:	44d06000 	.word	0x44d06000
 8004200:	45505000 	.word	0x45505000

08004204 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004210:	edd7 7a00 	vldr	s15, [r7]
 8004214:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004220:	d801      	bhi.n	8004226 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004222:	2301      	movs	r3, #1
 8004224:	e058      	b.n	80042d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004226:	edd7 7a00 	vldr	s15, [r7]
 800422a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800422e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004236:	d801      	bhi.n	800423c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004238:	2302      	movs	r3, #2
 800423a:	e04d      	b.n	80042d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800423c:	edd7 7a00 	vldr	s15, [r7]
 8004240:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004300 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424c:	d801      	bhi.n	8004252 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800424e:	2303      	movs	r3, #3
 8004250:	e042      	b.n	80042d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004252:	edd7 7a00 	vldr	s15, [r7]
 8004256:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004304 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800425a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800425e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004262:	d801      	bhi.n	8004268 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004264:	2304      	movs	r3, #4
 8004266:	e037      	b.n	80042d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004268:	edd7 7a00 	vldr	s15, [r7]
 800426c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004308 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004278:	d801      	bhi.n	800427e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800427a:	2305      	movs	r3, #5
 800427c:	e02c      	b.n	80042d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800427e:	edd7 7a00 	vldr	s15, [r7]
 8004282:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800430c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800428a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800428e:	d801      	bhi.n	8004294 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004290:	2306      	movs	r3, #6
 8004292:	e021      	b.n	80042d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004294:	edd7 7a00 	vldr	s15, [r7]
 8004298:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004310 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800429c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a4:	d801      	bhi.n	80042aa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80042a6:	2307      	movs	r3, #7
 80042a8:	e016      	b.n	80042d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80042aa:	edd7 7a00 	vldr	s15, [r7]
 80042ae:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004314 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80042b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ba:	d801      	bhi.n	80042c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80042bc:	2308      	movs	r3, #8
 80042be:	e00b      	b.n	80042d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80042c0:	edd7 7a00 	vldr	s15, [r7]
 80042c4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004318 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80042c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d0:	d801      	bhi.n	80042d6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80042d2:	2309      	movs	r3, #9
 80042d4:	e000      	b.n	80042d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80042d6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80042d8:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
          :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	331c      	adds	r3, #28
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	4611      	mov	r1, r2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fb2c 	bl	8004940 <lsm6dso_gy_data_rate_set>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80042ee:	f04f 33ff 	mov.w	r3, #4294967295
 80042f2:	e000      	b.n	80042f6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	42500000 	.word	0x42500000
 8004304:	42d00000 	.word	0x42d00000
 8004308:	43500000 	.word	0x43500000
 800430c:	43d08000 	.word	0x43d08000
 8004310:	44504000 	.word	0x44504000
 8004314:	44d06000 	.word	0x44d06000
 8004318:	45505000 	.word	0x45505000

0800431c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004328:	edd7 7a00 	vldr	s15, [r7]
 800432c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004338:	d801      	bhi.n	800433e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800433a:	2301      	movs	r3, #1
 800433c:	e058      	b.n	80043f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800433e:	edd7 7a00 	vldr	s15, [r7]
 8004342:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800434a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434e:	d801      	bhi.n	8004354 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004350:	2302      	movs	r3, #2
 8004352:	e04d      	b.n	80043f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004354:	edd7 7a00 	vldr	s15, [r7]
 8004358:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004404 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800435c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004364:	d801      	bhi.n	800436a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004366:	2303      	movs	r3, #3
 8004368:	e042      	b.n	80043f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800436a:	edd7 7a00 	vldr	s15, [r7]
 800436e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004408 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437a:	d801      	bhi.n	8004380 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800437c:	2304      	movs	r3, #4
 800437e:	e037      	b.n	80043f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004380:	edd7 7a00 	vldr	s15, [r7]
 8004384:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800440c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800438c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004390:	d801      	bhi.n	8004396 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004392:	2305      	movs	r3, #5
 8004394:	e02c      	b.n	80043f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004396:	edd7 7a00 	vldr	s15, [r7]
 800439a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004410 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800439e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a6:	d801      	bhi.n	80043ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80043a8:	2306      	movs	r3, #6
 80043aa:	e021      	b.n	80043f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80043ac:	edd7 7a00 	vldr	s15, [r7]
 80043b0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004414 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80043b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043bc:	d801      	bhi.n	80043c2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80043be:	2307      	movs	r3, #7
 80043c0:	e016      	b.n	80043f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80043c2:	edd7 7a00 	vldr	s15, [r7]
 80043c6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004418 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80043ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d2:	d801      	bhi.n	80043d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80043d4:	2308      	movs	r3, #8
 80043d6:	e00b      	b.n	80043f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80043d8:	edd7 7a00 	vldr	s15, [r7]
 80043dc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800441c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80043e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e8:	d801      	bhi.n	80043ee <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80043ea:	2309      	movs	r3, #9
 80043ec:	e000      	b.n	80043f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80043ee:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                 :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	42500000 	.word	0x42500000
 8004408:	42d00000 	.word	0x42d00000
 800440c:	43500000 	.word	0x43500000
 8004410:	43d08000 	.word	0x43d08000
 8004414:	44504000 	.word	0x44504000
 8004418:	44d06000 	.word	0x44d06000
 800441c:	45505000 	.word	0x45505000

08004420 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004420:	b590      	push	{r4, r7, lr}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	607a      	str	r2, [r7, #4]
 800442a:	461a      	mov	r2, r3
 800442c:	460b      	mov	r3, r1
 800442e:	72fb      	strb	r3, [r7, #11]
 8004430:	4613      	mov	r3, r2
 8004432:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	695c      	ldr	r4, [r3, #20]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	7b1b      	ldrb	r3, [r3, #12]
 8004440:	b298      	uxth	r0, r3
 8004442:	7afb      	ldrb	r3, [r7, #11]
 8004444:	b299      	uxth	r1, r3
 8004446:	893b      	ldrh	r3, [r7, #8]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	47a0      	blx	r4
 800444c:	4603      	mov	r3, r0
}
 800444e:	4618      	mov	r0, r3
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	bd90      	pop	{r4, r7, pc}

08004456 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004456:	b590      	push	{r4, r7, lr}
 8004458:	b087      	sub	sp, #28
 800445a:	af00      	add	r7, sp, #0
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	461a      	mov	r2, r3
 8004462:	460b      	mov	r3, r1
 8004464:	72fb      	strb	r3, [r7, #11]
 8004466:	4613      	mov	r3, r2
 8004468:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	691c      	ldr	r4, [r3, #16]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	7b1b      	ldrb	r3, [r3, #12]
 8004476:	b298      	uxth	r0, r3
 8004478:	7afb      	ldrb	r3, [r7, #11]
 800447a:	b299      	uxth	r1, r3
 800447c:	893b      	ldrh	r3, [r7, #8]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	47a0      	blx	r4
 8004482:	4603      	mov	r3, r0
}
 8004484:	4618      	mov	r0, r3
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	bd90      	pop	{r4, r7, pc}

0800448c <lsm6dso_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800448c:	b590      	push	{r4, r7, lr}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	461a      	mov	r2, r3
 8004498:	460b      	mov	r3, r1
 800449a:	72fb      	strb	r3, [r7, #11]
 800449c:	4613      	mov	r3, r2
 800449e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685c      	ldr	r4, [r3, #4]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6898      	ldr	r0, [r3, #8]
 80044a8:	893b      	ldrh	r3, [r7, #8]
 80044aa:	7af9      	ldrb	r1, [r7, #11]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	47a0      	blx	r4
 80044b0:	6178      	str	r0, [r7, #20]
  return ret;
 80044b2:	697b      	ldr	r3, [r7, #20]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd90      	pop	{r4, r7, pc}

080044bc <lsm6dso_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80044bc:	b590      	push	{r4, r7, lr}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	461a      	mov	r2, r3
 80044c8:	460b      	mov	r3, r1
 80044ca:	72fb      	strb	r3, [r7, #11]
 80044cc:	4613      	mov	r3, r2
 80044ce:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681c      	ldr	r4, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6898      	ldr	r0, [r3, #8]
 80044d8:	893b      	ldrh	r3, [r7, #8]
 80044da:	7af9      	ldrb	r1, [r7, #11]
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	47a0      	blx	r4
 80044e0:	6178      	str	r0, [r7, #20]
  return ret;
 80044e2:	697b      	ldr	r3, [r7, #20]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd90      	pop	{r4, r7, pc}

080044ec <lsm6dso_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 80044f8:	f107 0208 	add.w	r2, r7, #8
 80044fc:	2301      	movs	r3, #1
 80044fe:	2110      	movs	r1, #16
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff ffc3 	bl	800448c <lsm6dso_read_reg>
 8004506:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10f      	bne.n	800452e <lsm6dso_xl_full_scale_set+0x42>
    reg.fs_xl = (uint8_t) val;
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	b2da      	uxtb	r2, r3
 8004516:	7a3b      	ldrb	r3, [r7, #8]
 8004518:	f362 0383 	bfi	r3, r2, #2, #2
 800451c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 800451e:	f107 0208 	add.w	r2, r7, #8
 8004522:	2301      	movs	r3, #1
 8004524:	2110      	movs	r1, #16
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff ffc8 	bl	80044bc <lsm6dso_write_reg>
 800452c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800452e:	68fb      	ldr	r3, [r7, #12]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <lsm6dso_xl_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dso_fs_xl_t *val)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8004542:	f107 0208 	add.w	r2, r7, #8
 8004546:	2301      	movs	r3, #1
 8004548:	2110      	movs	r1, #16
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff ff9e 	bl	800448c <lsm6dso_read_reg>
 8004550:	60f8      	str	r0, [r7, #12]
  switch (reg.fs_xl) {
 8004552:	7a3b      	ldrb	r3, [r7, #8]
 8004554:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b03      	cmp	r3, #3
 800455c:	d81a      	bhi.n	8004594 <lsm6dso_xl_full_scale_get+0x5c>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <lsm6dso_xl_full_scale_get+0x2c>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	08004575 	.word	0x08004575
 8004568:	0800457d 	.word	0x0800457d
 800456c:	08004585 	.word	0x08004585
 8004570:	0800458d 	.word	0x0800458d
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2200      	movs	r2, #0
 8004578:	701a      	strb	r2, [r3, #0]
      break;
 800457a:	e00f      	b.n	800459c <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2201      	movs	r2, #1
 8004580:	701a      	strb	r2, [r3, #0]
      break;
 8004582:	e00b      	b.n	800459c <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2202      	movs	r2, #2
 8004588:	701a      	strb	r2, [r3, #0]
      break;
 800458a:	e007      	b.n	800459c <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2203      	movs	r2, #3
 8004590:	701a      	strb	r2, [r3, #0]
      break;
 8004592:	e003      	b.n	800459c <lsm6dso_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSO_2g;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2200      	movs	r2, #0
 8004598:	701a      	strb	r2, [r3, #0]
      break;
 800459a:	bf00      	nop
  }

  return ret;
 800459c:	68fb      	ldr	r3, [r7, #12]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop

080045a8 <lsm6dso_xl_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dso_odr_xl_t val)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80045b8:	f107 030c 	add.w	r3, r7, #12
 80045bc:	4619      	mov	r1, r3
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fc2d 	bl	8004e1e <lsm6dso_fsm_enable_get>
 80045c4:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f040 80c4 	bne.w	8004756 <lsm6dso_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80045ce:	7b3b      	ldrb	r3, [r7, #12]
 80045d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80045d4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80045d6:	7b3b      	ldrb	r3, [r7, #12]
 80045d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80045dc:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80045de:	4313      	orrs	r3, r2
 80045e0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80045e2:	7b3b      	ldrb	r3, [r7, #12]
 80045e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80045e8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80045ea:	4313      	orrs	r3, r2
 80045ec:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80045ee:	7b3b      	ldrb	r3, [r7, #12]
 80045f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80045f4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80045f6:	4313      	orrs	r3, r2
 80045f8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80045fa:	7b3b      	ldrb	r3, [r7, #12]
 80045fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004600:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004602:	4313      	orrs	r3, r2
 8004604:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004606:	7b3b      	ldrb	r3, [r7, #12]
 8004608:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800460c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 800460e:	4313      	orrs	r3, r2
 8004610:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004612:	7b3b      	ldrb	r3, [r7, #12]
 8004614:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004618:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800461a:	4313      	orrs	r3, r2
 800461c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 800461e:	7b3b      	ldrb	r3, [r7, #12]
 8004620:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004624:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004626:	4313      	orrs	r3, r2
 8004628:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800462a:	7b7b      	ldrb	r3, [r7, #13]
 800462c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004630:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8004632:	4313      	orrs	r3, r2
 8004634:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8004636:	7b7b      	ldrb	r3, [r7, #13]
 8004638:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800463c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800463e:	4313      	orrs	r3, r2
 8004640:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8004642:	7b7b      	ldrb	r3, [r7, #13]
 8004644:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004648:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800464a:	4313      	orrs	r3, r2
 800464c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 800464e:	7b7b      	ldrb	r3, [r7, #13]
 8004650:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004654:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8004656:	4313      	orrs	r3, r2
 8004658:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800465a:	7b7b      	ldrb	r3, [r7, #13]
 800465c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004660:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8004662:	4313      	orrs	r3, r2
 8004664:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8004666:	7b7b      	ldrb	r3, [r7, #13]
 8004668:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800466c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800466e:	4313      	orrs	r3, r2
 8004670:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8004672:	7b7b      	ldrb	r3, [r7, #13]
 8004674:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004678:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800467a:	4313      	orrs	r3, r2
 800467c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 800467e:	7b7b      	ldrb	r3, [r7, #13]
 8004680:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004684:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8004686:	4313      	orrs	r3, r2
 8004688:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800468a:	2b01      	cmp	r3, #1
 800468c:	d163      	bne.n	8004756 <lsm6dso_xl_data_rate_set+0x1ae>

      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800468e:	f107 030b 	add.w	r3, r7, #11
 8004692:	4619      	mov	r1, r3
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fbe3 	bl	8004e60 <lsm6dso_fsm_data_rate_get>
 800469a:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d159      	bne.n	8004756 <lsm6dso_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 80046a2:	7afb      	ldrb	r3, [r7, #11]
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d853      	bhi.n	8004750 <lsm6dso_xl_data_rate_set+0x1a8>
 80046a8:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <lsm6dso_xl_data_rate_set+0x108>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046d3 	.word	0x080046d3
 80046b8:	080046f1 	.word	0x080046f1
 80046bc:	0800471b 	.word	0x0800471b
          case LSM6DSO_ODR_FSM_12Hz5:

            if (val == LSM6DSO_XL_ODR_OFF){
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d102      	bne.n	80046cc <lsm6dso_xl_data_rate_set+0x124>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80046c6:	2301      	movs	r3, #1
 80046c8:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 80046ca:	e045      	b.n	8004758 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	75fb      	strb	r3, [r7, #23]
            break;
 80046d0:	e042      	b.n	8004758 <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_26Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d102      	bne.n	80046de <lsm6dso_xl_data_rate_set+0x136>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80046d8:	2302      	movs	r3, #2
 80046da:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 80046dc:	e03c      	b.n	8004758 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d102      	bne.n	80046ea <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80046e4:	2302      	movs	r3, #2
 80046e6:	75fb      	strb	r3, [r7, #23]
            break;
 80046e8:	e036      	b.n	8004758 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80046ea:	78fb      	ldrb	r3, [r7, #3]
 80046ec:	75fb      	strb	r3, [r7, #23]
            break;
 80046ee:	e033      	b.n	8004758 <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_52Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d102      	bne.n	80046fc <lsm6dso_xl_data_rate_set+0x154>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80046f6:	2303      	movs	r3, #3
 80046f8:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 80046fa:	e02d      	b.n	8004758 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 80046fc:	78fb      	ldrb	r3, [r7, #3]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d102      	bne.n	8004708 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004702:	2303      	movs	r3, #3
 8004704:	75fb      	strb	r3, [r7, #23]
            break;
 8004706:	e027      	b.n	8004758 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_26Hz){
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d102      	bne.n	8004714 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800470e:	2303      	movs	r3, #3
 8004710:	75fb      	strb	r3, [r7, #23]
            break;
 8004712:	e021      	b.n	8004758 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	75fb      	strb	r3, [r7, #23]
            break;
 8004718:	e01e      	b.n	8004758 <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_104Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 800471a:	78fb      	ldrb	r3, [r7, #3]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d102      	bne.n	8004726 <lsm6dso_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004720:	2304      	movs	r3, #4
 8004722:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 8004724:	e018      	b.n	8004758 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 8004726:	78fb      	ldrb	r3, [r7, #3]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d102      	bne.n	8004732 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800472c:	2304      	movs	r3, #4
 800472e:	75fb      	strb	r3, [r7, #23]
            break;
 8004730:	e012      	b.n	8004758 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_26Hz){
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	2b02      	cmp	r3, #2
 8004736:	d102      	bne.n	800473e <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004738:	2304      	movs	r3, #4
 800473a:	75fb      	strb	r3, [r7, #23]
            break;
 800473c:	e00c      	b.n	8004758 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_52Hz){
 800473e:	78fb      	ldrb	r3, [r7, #3]
 8004740:	2b03      	cmp	r3, #3
 8004742:	d102      	bne.n	800474a <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004744:	2304      	movs	r3, #4
 8004746:	75fb      	strb	r3, [r7, #23]
            break;
 8004748:	e006      	b.n	8004758 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	75fb      	strb	r3, [r7, #23]
            break;
 800474e:	e003      	b.n	8004758 <lsm6dso_xl_data_rate_set+0x1b0>
          default:
            odr_xl = val;
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	75fb      	strb	r3, [r7, #23]
            break;
 8004754:	e000      	b.n	8004758 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8004756:	bf00      	nop
    }
  }
  if (ret == 0) {
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d107      	bne.n	800476e <lsm6dso_xl_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 800475e:	f107 0208 	add.w	r2, r7, #8
 8004762:	2301      	movs	r3, #1
 8004764:	2110      	movs	r1, #16
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff fe90 	bl	800448c <lsm6dso_read_reg>
 800476c:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10f      	bne.n	8004794 <lsm6dso_xl_data_rate_set+0x1ec>
    reg.odr_xl = (uint8_t) odr_xl;
 8004774:	7dfb      	ldrb	r3, [r7, #23]
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	b2da      	uxtb	r2, r3
 800477c:	7a3b      	ldrb	r3, [r7, #8]
 800477e:	f362 1307 	bfi	r3, r2, #4, #4
 8004782:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8004784:	f107 0208 	add.w	r2, r7, #8
 8004788:	2301      	movs	r3, #1
 800478a:	2110      	movs	r1, #16
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff fe95 	bl	80044bc <lsm6dso_write_reg>
 8004792:	6138      	str	r0, [r7, #16]
  }
  return ret;
 8004794:	693b      	ldr	r3, [r7, #16]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop

080047a0 <lsm6dso_xl_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_odr_xl_t *val)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 80047aa:	f107 0208 	add.w	r2, r7, #8
 80047ae:	2301      	movs	r3, #1
 80047b0:	2110      	movs	r1, #16
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff fe6a 	bl	800448c <lsm6dso_read_reg>
 80047b8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl) {
 80047ba:	7a3b      	ldrb	r3, [r7, #8]
 80047bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b0b      	cmp	r3, #11
 80047c4:	d84a      	bhi.n	800485c <lsm6dso_xl_data_rate_get+0xbc>
 80047c6:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <lsm6dso_xl_data_rate_get+0x2c>)
 80047c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047cc:	080047fd 	.word	0x080047fd
 80047d0:	08004805 	.word	0x08004805
 80047d4:	0800480d 	.word	0x0800480d
 80047d8:	08004815 	.word	0x08004815
 80047dc:	0800481d 	.word	0x0800481d
 80047e0:	08004825 	.word	0x08004825
 80047e4:	0800482d 	.word	0x0800482d
 80047e8:	08004835 	.word	0x08004835
 80047ec:	0800483d 	.word	0x0800483d
 80047f0:	08004845 	.word	0x08004845
 80047f4:	0800484d 	.word	0x0800484d
 80047f8:	08004855 	.word	0x08004855
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2200      	movs	r2, #0
 8004800:	701a      	strb	r2, [r3, #0]
      break;
 8004802:	e02f      	b.n	8004864 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2201      	movs	r2, #1
 8004808:	701a      	strb	r2, [r3, #0]
      break;
 800480a:	e02b      	b.n	8004864 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2202      	movs	r2, #2
 8004810:	701a      	strb	r2, [r3, #0]
      break;
 8004812:	e027      	b.n	8004864 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2203      	movs	r2, #3
 8004818:	701a      	strb	r2, [r3, #0]
      break;
 800481a:	e023      	b.n	8004864 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2204      	movs	r2, #4
 8004820:	701a      	strb	r2, [r3, #0]
      break;
 8004822:	e01f      	b.n	8004864 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2205      	movs	r2, #5
 8004828:	701a      	strb	r2, [r3, #0]
      break;
 800482a:	e01b      	b.n	8004864 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2206      	movs	r2, #6
 8004830:	701a      	strb	r2, [r3, #0]
      break;
 8004832:	e017      	b.n	8004864 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2207      	movs	r2, #7
 8004838:	701a      	strb	r2, [r3, #0]
      break;
 800483a:	e013      	b.n	8004864 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2208      	movs	r2, #8
 8004840:	701a      	strb	r2, [r3, #0]
      break;
 8004842:	e00f      	b.n	8004864 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2209      	movs	r2, #9
 8004848:	701a      	strb	r2, [r3, #0]
      break;
 800484a:	e00b      	b.n	8004864 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	220a      	movs	r2, #10
 8004850:	701a      	strb	r2, [r3, #0]
      break;
 8004852:	e007      	b.n	8004864 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	220b      	movs	r2, #11
 8004858:	701a      	strb	r2, [r3, #0]
      break;
 800485a:	e003      	b.n	8004864 <lsm6dso_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSO_XL_ODR_OFF;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
      break;
 8004862:	bf00      	nop
  }
  return ret;
 8004864:	68fb      	ldr	r3, [r7, #12]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop

08004870 <lsm6dso_gy_full_scale_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dso_fs_g_t val)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 800487c:	f107 0208 	add.w	r2, r7, #8
 8004880:	2301      	movs	r3, #1
 8004882:	2111      	movs	r1, #17
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff fe01 	bl	800448c <lsm6dso_read_reg>
 800488a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10f      	bne.n	80048b2 <lsm6dso_gy_full_scale_set+0x42>
    reg.fs_g = (uint8_t) val;
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	b2da      	uxtb	r2, r3
 800489a:	7a3b      	ldrb	r3, [r7, #8]
 800489c:	f362 0343 	bfi	r3, r2, #1, #3
 80048a0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 80048a2:	f107 0208 	add.w	r2, r7, #8
 80048a6:	2301      	movs	r3, #1
 80048a8:	2111      	movs	r1, #17
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff fe06 	bl	80044bc <lsm6dso_write_reg>
 80048b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80048b2:	68fb      	ldr	r3, [r7, #12]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <lsm6dso_gy_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dso_fs_g_t *val)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 80048c6:	f107 0208 	add.w	r2, r7, #8
 80048ca:	2301      	movs	r3, #1
 80048cc:	2111      	movs	r1, #17
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff fddc 	bl	800448c <lsm6dso_read_reg>
 80048d4:	60f8      	str	r0, [r7, #12]
  switch (reg.fs_g) {
 80048d6:	7a3b      	ldrb	r3, [r7, #8]
 80048d8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b06      	cmp	r3, #6
 80048e0:	d824      	bhi.n	800492c <lsm6dso_gy_full_scale_get+0x70>
 80048e2:	a201      	add	r2, pc, #4	; (adr r2, 80048e8 <lsm6dso_gy_full_scale_get+0x2c>)
 80048e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e8:	08004905 	.word	0x08004905
 80048ec:	0800490d 	.word	0x0800490d
 80048f0:	08004915 	.word	0x08004915
 80048f4:	0800492d 	.word	0x0800492d
 80048f8:	0800491d 	.word	0x0800491d
 80048fc:	0800492d 	.word	0x0800492d
 8004900:	08004925 	.word	0x08004925
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2200      	movs	r2, #0
 8004908:	701a      	strb	r2, [r3, #0]
      break;
 800490a:	e013      	b.n	8004934 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2201      	movs	r2, #1
 8004910:	701a      	strb	r2, [r3, #0]
      break;
 8004912:	e00f      	b.n	8004934 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2202      	movs	r2, #2
 8004918:	701a      	strb	r2, [r3, #0]
      break;
 800491a:	e00b      	b.n	8004934 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2204      	movs	r2, #4
 8004920:	701a      	strb	r2, [r3, #0]
      break;
 8004922:	e007      	b.n	8004934 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2206      	movs	r2, #6
 8004928:	701a      	strb	r2, [r3, #0]
      break;
 800492a:	e003      	b.n	8004934 <lsm6dso_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSO_250dps;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2200      	movs	r2, #0
 8004930:	701a      	strb	r2, [r3, #0]
      break;
 8004932:	bf00      	nop
  }

  return ret;
 8004934:	68fb      	ldr	r3, [r7, #12]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop

08004940 <lsm6dso_gy_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dso_odr_g_t val)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004950:	f107 030c 	add.w	r3, r7, #12
 8004954:	4619      	mov	r1, r3
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fa61 	bl	8004e1e <lsm6dso_fsm_enable_get>
 800495c:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	f040 80c4 	bne.w	8004aee <lsm6dso_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004966:	7b3b      	ldrb	r3, [r7, #12]
 8004968:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800496c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800496e:	7b3b      	ldrb	r3, [r7, #12]
 8004970:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004974:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004976:	4313      	orrs	r3, r2
 8004978:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800497a:	7b3b      	ldrb	r3, [r7, #12]
 800497c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004980:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004982:	4313      	orrs	r3, r2
 8004984:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004986:	7b3b      	ldrb	r3, [r7, #12]
 8004988:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800498c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800498e:	4313      	orrs	r3, r2
 8004990:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004992:	7b3b      	ldrb	r3, [r7, #12]
 8004994:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004998:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800499a:	4313      	orrs	r3, r2
 800499c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800499e:	7b3b      	ldrb	r3, [r7, #12]
 80049a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80049a4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80049a6:	4313      	orrs	r3, r2
 80049a8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80049aa:	7b3b      	ldrb	r3, [r7, #12]
 80049ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80049b0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80049b2:	4313      	orrs	r3, r2
 80049b4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80049b6:	7b3b      	ldrb	r3, [r7, #12]
 80049b8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80049bc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80049be:	4313      	orrs	r3, r2
 80049c0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80049c2:	7b7b      	ldrb	r3, [r7, #13]
 80049c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80049c8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80049ca:	4313      	orrs	r3, r2
 80049cc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80049ce:	7b7b      	ldrb	r3, [r7, #13]
 80049d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80049d4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80049d6:	4313      	orrs	r3, r2
 80049d8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80049da:	7b7b      	ldrb	r3, [r7, #13]
 80049dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80049e0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80049e2:	4313      	orrs	r3, r2
 80049e4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80049e6:	7b7b      	ldrb	r3, [r7, #13]
 80049e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80049ec:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80049ee:	4313      	orrs	r3, r2
 80049f0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80049f2:	7b7b      	ldrb	r3, [r7, #13]
 80049f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80049f8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80049fa:	4313      	orrs	r3, r2
 80049fc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80049fe:	7b7b      	ldrb	r3, [r7, #13]
 8004a00:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004a04:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8004a06:	4313      	orrs	r3, r2
 8004a08:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8004a0a:	7b7b      	ldrb	r3, [r7, #13]
 8004a0c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004a10:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8004a12:	4313      	orrs	r3, r2
 8004a14:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 8004a16:	7b7b      	ldrb	r3, [r7, #13]
 8004a18:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004a1c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d163      	bne.n	8004aee <lsm6dso_gy_data_rate_set+0x1ae>

      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004a26:	f107 030b 	add.w	r3, r7, #11
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fa17 	bl	8004e60 <lsm6dso_fsm_data_rate_get>
 8004a32:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d159      	bne.n	8004aee <lsm6dso_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8004a3a:	7afb      	ldrb	r3, [r7, #11]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d853      	bhi.n	8004ae8 <lsm6dso_gy_data_rate_set+0x1a8>
 8004a40:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <lsm6dso_gy_data_rate_set+0x108>)
 8004a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a46:	bf00      	nop
 8004a48:	08004a59 	.word	0x08004a59
 8004a4c:	08004a6b 	.word	0x08004a6b
 8004a50:	08004a89 	.word	0x08004a89
 8004a54:	08004ab3 	.word	0x08004ab3
          case LSM6DSO_ODR_FSM_12Hz5:

            if (val == LSM6DSO_GY_ODR_OFF){
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d102      	bne.n	8004a64 <lsm6dso_gy_data_rate_set+0x124>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 8004a62:	e045      	b.n	8004af0 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	75fb      	strb	r3, [r7, #23]
            break;
 8004a68:	e042      	b.n	8004af0 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_26Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d102      	bne.n	8004a76 <lsm6dso_gy_data_rate_set+0x136>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004a70:	2302      	movs	r3, #2
 8004a72:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 8004a74:	e03c      	b.n	8004af0 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d102      	bne.n	8004a82 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	75fb      	strb	r3, [r7, #23]
            break;
 8004a80:	e036      	b.n	8004af0 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004a82:	78fb      	ldrb	r3, [r7, #3]
 8004a84:	75fb      	strb	r3, [r7, #23]
            break;
 8004a86:	e033      	b.n	8004af0 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_52Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d102      	bne.n	8004a94 <lsm6dso_gy_data_rate_set+0x154>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 8004a92:	e02d      	b.n	8004af0 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d102      	bne.n	8004aa0 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	75fb      	strb	r3, [r7, #23]
            break;
 8004a9e:	e027      	b.n	8004af0 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_26Hz){
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d102      	bne.n	8004aac <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	75fb      	strb	r3, [r7, #23]
            break;
 8004aaa:	e021      	b.n	8004af0 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004aac:	78fb      	ldrb	r3, [r7, #3]
 8004aae:	75fb      	strb	r3, [r7, #23]
            break;
 8004ab0:	e01e      	b.n	8004af0 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_104Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d102      	bne.n	8004abe <lsm6dso_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004ab8:	2304      	movs	r3, #4
 8004aba:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 8004abc:	e018      	b.n	8004af0 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d102      	bne.n	8004aca <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004ac4:	2304      	movs	r3, #4
 8004ac6:	75fb      	strb	r3, [r7, #23]
            break;
 8004ac8:	e012      	b.n	8004af0 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_26Hz){
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d102      	bne.n	8004ad6 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	75fb      	strb	r3, [r7, #23]
            break;
 8004ad4:	e00c      	b.n	8004af0 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_52Hz){
 8004ad6:	78fb      	ldrb	r3, [r7, #3]
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d102      	bne.n	8004ae2 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004adc:	2304      	movs	r3, #4
 8004ade:	75fb      	strb	r3, [r7, #23]
            break;
 8004ae0:	e006      	b.n	8004af0 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004ae2:	78fb      	ldrb	r3, [r7, #3]
 8004ae4:	75fb      	strb	r3, [r7, #23]
            break;
 8004ae6:	e003      	b.n	8004af0 <lsm6dso_gy_data_rate_set+0x1b0>
          default:
            odr_gy = val;
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	75fb      	strb	r3, [r7, #23]
            break;
 8004aec:	e000      	b.n	8004af0 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8004aee:	bf00      	nop
    }
  }

  if (ret == 0) {
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d107      	bne.n	8004b06 <lsm6dso_gy_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8004af6:	f107 0208 	add.w	r2, r7, #8
 8004afa:	2301      	movs	r3, #1
 8004afc:	2111      	movs	r1, #17
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff fcc4 	bl	800448c <lsm6dso_read_reg>
 8004b04:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10f      	bne.n	8004b2c <lsm6dso_gy_data_rate_set+0x1ec>
    reg.odr_g = (uint8_t) odr_gy;
 8004b0c:	7dfb      	ldrb	r3, [r7, #23]
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	7a3b      	ldrb	r3, [r7, #8]
 8004b16:	f362 1307 	bfi	r3, r2, #4, #4
 8004b1a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8004b1c:	f107 0208 	add.w	r2, r7, #8
 8004b20:	2301      	movs	r3, #1
 8004b22:	2111      	movs	r1, #17
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff fcc9 	bl	80044bc <lsm6dso_write_reg>
 8004b2a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8004b2c:	693b      	ldr	r3, [r7, #16]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop

08004b38 <lsm6dso_gy_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_odr_g_t *val)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8004b42:	f107 0208 	add.w	r2, r7, #8
 8004b46:	2301      	movs	r3, #1
 8004b48:	2111      	movs	r1, #17
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff fc9e 	bl	800448c <lsm6dso_read_reg>
 8004b50:	60f8      	str	r0, [r7, #12]
  switch (reg.odr_g) {
 8004b52:	7a3b      	ldrb	r3, [r7, #8]
 8004b54:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b0a      	cmp	r3, #10
 8004b5c:	d844      	bhi.n	8004be8 <lsm6dso_gy_data_rate_get+0xb0>
 8004b5e:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <lsm6dso_gy_data_rate_get+0x2c>)
 8004b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b64:	08004b91 	.word	0x08004b91
 8004b68:	08004b99 	.word	0x08004b99
 8004b6c:	08004ba1 	.word	0x08004ba1
 8004b70:	08004ba9 	.word	0x08004ba9
 8004b74:	08004bb1 	.word	0x08004bb1
 8004b78:	08004bb9 	.word	0x08004bb9
 8004b7c:	08004bc1 	.word	0x08004bc1
 8004b80:	08004bc9 	.word	0x08004bc9
 8004b84:	08004bd1 	.word	0x08004bd1
 8004b88:	08004bd9 	.word	0x08004bd9
 8004b8c:	08004be1 	.word	0x08004be1
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2200      	movs	r2, #0
 8004b94:	701a      	strb	r2, [r3, #0]
      break;
 8004b96:	e02b      	b.n	8004bf0 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	701a      	strb	r2, [r3, #0]
      break;
 8004b9e:	e027      	b.n	8004bf0 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	701a      	strb	r2, [r3, #0]
      break;
 8004ba6:	e023      	b.n	8004bf0 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2203      	movs	r2, #3
 8004bac:	701a      	strb	r2, [r3, #0]
      break;
 8004bae:	e01f      	b.n	8004bf0 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2204      	movs	r2, #4
 8004bb4:	701a      	strb	r2, [r3, #0]
      break;
 8004bb6:	e01b      	b.n	8004bf0 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2205      	movs	r2, #5
 8004bbc:	701a      	strb	r2, [r3, #0]
      break;
 8004bbe:	e017      	b.n	8004bf0 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2206      	movs	r2, #6
 8004bc4:	701a      	strb	r2, [r3, #0]
      break;
 8004bc6:	e013      	b.n	8004bf0 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2207      	movs	r2, #7
 8004bcc:	701a      	strb	r2, [r3, #0]
      break;
 8004bce:	e00f      	b.n	8004bf0 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2208      	movs	r2, #8
 8004bd4:	701a      	strb	r2, [r3, #0]
      break;
 8004bd6:	e00b      	b.n	8004bf0 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2209      	movs	r2, #9
 8004bdc:	701a      	strb	r2, [r3, #0]
      break;
 8004bde:	e007      	b.n	8004bf0 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	220a      	movs	r2, #10
 8004be4:	701a      	strb	r2, [r3, #0]
      break;
 8004be6:	e003      	b.n	8004bf0 <lsm6dso_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
      break;
 8004bee:	bf00      	nop
  }
  return ret;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop

08004bfc <lsm6dso_block_data_update_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of bdu in reg CTRL3_C
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8004c08:	f107 0208 	add.w	r2, r7, #8
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	2112      	movs	r1, #18
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff fc3b 	bl	800448c <lsm6dso_read_reg>
 8004c16:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10f      	bne.n	8004c3e <lsm6dso_block_data_update_set+0x42>
    reg.bdu = val;
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	7a3b      	ldrb	r3, [r7, #8]
 8004c28:	f362 1386 	bfi	r3, r2, #6, #1
 8004c2c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8004c2e:	f107 0208 	add.w	r2, r7, #8
 8004c32:	2301      	movs	r3, #1
 8004c34:	2112      	movs	r1, #18
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff fc40 	bl	80044bc <lsm6dso_write_reg>
 8004c3c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <lsm6dso_angular_rate_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8004c52:	2306      	movs	r3, #6
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	2122      	movs	r1, #34	; 0x22
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff fc17 	bl	800448c <lsm6dso_read_reg>
 8004c5e:	60f8      	str	r0, [r7, #12]
  return ret;
 8004c60:	68fb      	ldr	r3, [r7, #12]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <lsm6dso_acceleration_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8004c74:	2306      	movs	r3, #6
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	2128      	movs	r1, #40	; 0x28
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff fc06 	bl	800448c <lsm6dso_read_reg>
 8004c80:	60f8      	str	r0, [r7, #12]
  return ret;
 8004c82:	68fb      	ldr	r3, [r7, #12]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <lsm6dso_mem_bank_set>:
  * @param  val      change the values of reg_access in
  *                               reg FUNC_CFG_ACCESS
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx, lsm6dso_reg_access_t val)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 8004c98:	f107 0208 	add.w	r2, r7, #8
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff fbf3 	bl	800448c <lsm6dso_read_reg>
 8004ca6:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10f      	bne.n	8004cce <lsm6dso_mem_bank_set+0x42>
    reg.reg_access = (uint8_t)val;
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	f003 0303 	and.w	r3, r3, #3
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	7a3b      	ldrb	r3, [r7, #8]
 8004cb8:	f362 1387 	bfi	r3, r2, #6, #2
 8004cbc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 8004cbe:	f107 0208 	add.w	r2, r7, #8
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7ff fbf8 	bl	80044bc <lsm6dso_write_reg>
 8004ccc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004cce:	68fb      	ldr	r3, [r7, #12]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <lsm6dso_device_id_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	210f      	movs	r1, #15
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff fbcf 	bl	800448c <lsm6dso_read_reg>
 8004cee:	60f8      	str	r0, [r7, #12]
  return ret;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <lsm6dso_auto_increment_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of if_inc in reg CTRL3_C
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	460b      	mov	r3, r1
 8004d04:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8004d06:	f107 0208 	add.w	r2, r7, #8
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	2112      	movs	r1, #18
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff fbbc 	bl	800448c <lsm6dso_read_reg>
 8004d14:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10f      	bne.n	8004d3c <lsm6dso_auto_increment_set+0x42>
    reg.if_inc = val;
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	7a3b      	ldrb	r3, [r7, #8]
 8004d26:	f362 0382 	bfi	r3, r2, #2, #1
 8004d2a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8004d2c:	f107 0208 	add.w	r2, r7, #8
 8004d30:	2301      	movs	r3, #1
 8004d32:	2112      	movs	r1, #18
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff fbc1 	bl	80044bc <lsm6dso_write_reg>
 8004d3a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <lsm6dso_i3c_disable_set>:
  * @param  val      change the values of i3c_disable
  *                                    in reg CTRL9_XL
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx, lsm6dso_i3c_disable_t val)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b086      	sub	sp, #24
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	460b      	mov	r3, r1
 8004d50:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 8004d52:	f107 020c 	add.w	r2, r7, #12
 8004d56:	2301      	movs	r3, #1
 8004d58:	2118      	movs	r1, #24
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7ff fb96 	bl	800448c <lsm6dso_read_reg>
 8004d60:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d111      	bne.n	8004d8c <lsm6dso_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	09db      	lsrs	r3, r3, #7
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	7b3b      	ldrb	r3, [r7, #12]
 8004d76:	f362 0341 	bfi	r3, r2, #1, #1
 8004d7a:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 8004d7c:	f107 020c 	add.w	r2, r7, #12
 8004d80:	2301      	movs	r3, #1
 8004d82:	2118      	movs	r1, #24
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff fb99 	bl	80044bc <lsm6dso_write_reg>
 8004d8a:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d107      	bne.n	8004da2 <lsm6dso_i3c_disable_set+0x5c>

    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8004d92:	f107 0210 	add.w	r2, r7, #16
 8004d96:	2301      	movs	r3, #1
 8004d98:	2162      	movs	r1, #98	; 0x62
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff fb76 	bl	800448c <lsm6dso_read_reg>
 8004da0:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&i3c_bus_avb, 1);
  }
  if (ret == 0) {
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10f      	bne.n	8004dc8 <lsm6dso_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	7c3b      	ldrb	r3, [r7, #16]
 8004db2:	f362 03c4 	bfi	r3, r2, #3, #2
 8004db6:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8004db8:	f107 0210 	add.w	r2, r7, #16
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	2162      	movs	r1, #98	; 0x62
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff fb7b 	bl	80044bc <lsm6dso_write_reg>
 8004dc6:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&i3c_bus_avb, 1);
  }

  return ret;
 8004dc8:	697b      	ldr	r3, [r7, #20]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <lsm6dso_fifo_mode_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fifo_mode in reg FIFO_CTRL4
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dso_fifo_mode_t val)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 8004dde:	f107 0208 	add.w	r2, r7, #8
 8004de2:	2301      	movs	r3, #1
 8004de4:	210a      	movs	r1, #10
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7ff fb50 	bl	800448c <lsm6dso_read_reg>
 8004dec:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10f      	bne.n	8004e14 <lsm6dso_fifo_mode_set+0x42>
    reg.fifo_mode = (uint8_t)val;
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	7a3b      	ldrb	r3, [r7, #8]
 8004dfe:	f362 0302 	bfi	r3, r2, #0, #3
 8004e02:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 8004e04:	f107 0208 	add.w	r2, r7, #8
 8004e08:	2301      	movs	r3, #1
 8004e0a:	210a      	movs	r1, #10
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff fb55 	bl	80044bc <lsm6dso_write_reg>
 8004e12:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004e14:	68fb      	ldr	r3, [r7, #12]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <lsm6dso_fsm_enable_get>:
  * @param  val      union of registers from FSM_ENABLE_A to FSM_ENABLE_B
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8004e28:	2102      	movs	r1, #2
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7ff ff2e 	bl	8004c8c <lsm6dso_mem_bank_set>
 8004e30:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <lsm6dso_fsm_enable_get+0x28>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t*) val, 2);
 8004e38:	2302      	movs	r3, #2
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	2146      	movs	r1, #70	; 0x46
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff fb24 	bl	800448c <lsm6dso_read_reg>
 8004e44:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d104      	bne.n	8004e56 <lsm6dso_fsm_enable_get+0x38>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff ff1c 	bl	8004c8c <lsm6dso_mem_bank_set>
 8004e54:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004e56:	68fb      	ldr	r3, [r7, #12]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <lsm6dso_fsm_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fsm_odr in reg EMB_FUNC_ODR_CFG_B
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_fsm_odr_t *val)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8004e6a:	2102      	movs	r1, #2
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff ff0d 	bl	8004c8c <lsm6dso_mem_bank_set>
 8004e72:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d107      	bne.n	8004e8a <lsm6dso_fsm_data_rate_get+0x2a>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8004e7a:	f107 0208 	add.w	r2, r7, #8
 8004e7e:	2301      	movs	r3, #1
 8004e80:	215f      	movs	r1, #95	; 0x5f
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7ff fb02 	bl	800448c <lsm6dso_read_reg>
 8004e88:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&reg, 1);
  }
  if (ret == 0) {
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d12a      	bne.n	8004ee6 <lsm6dso_fsm_data_rate_get+0x86>
    switch (reg.fsm_odr) {
 8004e90:	7a3b      	ldrb	r3, [r7, #8]
 8004e92:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d81b      	bhi.n	8004ed4 <lsm6dso_fsm_data_rate_get+0x74>
 8004e9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <lsm6dso_fsm_data_rate_get+0x44>)
 8004e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea2:	bf00      	nop
 8004ea4:	08004eb5 	.word	0x08004eb5
 8004ea8:	08004ebd 	.word	0x08004ebd
 8004eac:	08004ec5 	.word	0x08004ec5
 8004eb0:	08004ecd 	.word	0x08004ecd
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	701a      	strb	r2, [r3, #0]
        break;
 8004eba:	e00f      	b.n	8004edc <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	701a      	strb	r2, [r3, #0]
        break;
 8004ec2:	e00b      	b.n	8004edc <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	701a      	strb	r2, [r3, #0]
        break;
 8004eca:	e007      	b.n	8004edc <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2203      	movs	r2, #3
 8004ed0:	701a      	strb	r2, [r3, #0]
        break;
 8004ed2:	e003      	b.n	8004edc <lsm6dso_fsm_data_rate_get+0x7c>
      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	701a      	strb	r2, [r3, #0]
        break;
 8004eda:	bf00      	nop
    }
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8004edc:	2100      	movs	r1, #0
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff fed4 	bl	8004c8c <lsm6dso_mem_bank_set>
 8004ee4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8004efa:	79fb      	ldrb	r3, [r7, #7]
 8004efc:	4a06      	ldr	r2, [pc, #24]	; (8004f18 <BSP_LED_On+0x28>)
 8004efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f02:	2120      	movs	r1, #32
 8004f04:	2201      	movs	r2, #1
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fc84 	bl	8005814 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	200000e4 	.word	0x200000e4

08004f1c <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	4603      	mov	r3, r0
 8004f24:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	4a06      	ldr	r2, [pc, #24]	; (8004f44 <BSP_LED_Off+0x28>)
 8004f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f2e:	2120      	movs	r1, #32
 8004f30:	2200      	movs	r2, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fc6e 	bl	8005814 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	200000e4 	.word	0x200000e4

08004f48 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d903      	bls.n	8004f64 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004f5c:	f06f 0301 	mvn.w	r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	e01c      	b.n	8004f9e <BSP_COM_Init+0x56>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8004f64:	79fa      	ldrb	r2, [r7, #7]
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	490f      	ldr	r1, [pc, #60]	; (8004fa8 <BSP_COM_Init+0x60>)
 8004f6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004f6e:	490f      	ldr	r1, [pc, #60]	; (8004fac <BSP_COM_Init+0x64>)
 8004f70:	019b      	lsls	r3, r3, #6
 8004f72:	440b      	add	r3, r1
 8004f74:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	019b      	lsls	r3, r3, #6
 8004f7a:	4a0c      	ldr	r2, [pc, #48]	; (8004fac <BSP_COM_Init+0x64>)
 8004f7c:	4413      	add	r3, r2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 f85c 	bl	800503c <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	019b      	lsls	r3, r3, #6
 8004f88:	4a08      	ldr	r2, [pc, #32]	; (8004fac <BSP_COM_Init+0x64>)
 8004f8a:	4413      	add	r3, r2
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 f80f 	bl	8004fb0 <MX_USART2_UART_Init>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <BSP_COM_Init+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004f98:	f06f 0303 	mvn.w	r3, #3
 8004f9c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	200000e8 	.word	0x200000e8
 8004fac:	200091b0 	.word	0x200091b0

08004fb0 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a12      	ldr	r2, [pc, #72]	; (8005008 <MX_USART2_UART_Init+0x58>)
 8004fc0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004fc8:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	220c      	movs	r2, #12
 8004fe0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f002 faee 	bl	80075d0 <HAL_UART_Init>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40004400 	.word	0x40004400

0800500c <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) /* For IAR and MDK-ARM */
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8005014:	4b07      	ldr	r3, [pc, #28]	; (8005034 <__io_putchar+0x28>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	019b      	lsls	r3, r3, #6
 800501a:	4a07      	ldr	r2, [pc, #28]	; (8005038 <__io_putchar+0x2c>)
 800501c:	1898      	adds	r0, r3, r2
 800501e:	1d39      	adds	r1, r7, #4
 8005020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005024:	2201      	movs	r2, #1
 8005026:	f002 fb2a 	bl	800767e <HAL_UART_Transmit>
  return ch;
 800502a:	687b      	ldr	r3, [r7, #4]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20000190 	.word	0x20000190
 8005038:	200091b0 	.word	0x200091b0

0800503c <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	; 0x28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005044:	2300      	movs	r3, #0
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	4b1e      	ldr	r3, [pc, #120]	; (80050c4 <USART2_MspInit+0x88>)
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	4a1d      	ldr	r2, [pc, #116]	; (80050c4 <USART2_MspInit+0x88>)
 800504e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005052:	6413      	str	r3, [r2, #64]	; 0x40
 8005054:	4b1b      	ldr	r3, [pc, #108]	; (80050c4 <USART2_MspInit+0x88>)
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	4b17      	ldr	r3, [pc, #92]	; (80050c4 <USART2_MspInit+0x88>)
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	4a16      	ldr	r2, [pc, #88]	; (80050c4 <USART2_MspInit+0x88>)
 800506a:	f043 0301 	orr.w	r3, r3, #1
 800506e:	6313      	str	r3, [r2, #48]	; 0x30
 8005070:	4b14      	ldr	r3, [pc, #80]	; (80050c4 <USART2_MspInit+0x88>)
 8005072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800507c:	2304      	movs	r3, #4
 800507e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005080:	2302      	movs	r3, #2
 8005082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005084:	2300      	movs	r3, #0
 8005086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005088:	2300      	movs	r3, #0
 800508a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800508c:	2307      	movs	r3, #7
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8005090:	f107 0314 	add.w	r3, r7, #20
 8005094:	4619      	mov	r1, r3
 8005096:	480c      	ldr	r0, [pc, #48]	; (80050c8 <USART2_MspInit+0x8c>)
 8005098:	f000 f958 	bl	800534c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800509c:	2308      	movs	r3, #8
 800509e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a0:	2302      	movs	r3, #2
 80050a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a8:	2300      	movs	r3, #0
 80050aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80050ac:	2307      	movs	r3, #7
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80050b0:	f107 0314 	add.w	r3, r7, #20
 80050b4:	4619      	mov	r1, r3
 80050b6:	4804      	ldr	r0, [pc, #16]	; (80050c8 <USART2_MspInit+0x8c>)
 80050b8:	f000 f948 	bl	800534c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80050bc:	bf00      	nop
 80050be:	3728      	adds	r7, #40	; 0x28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40023800 	.word	0x40023800
 80050c8:	40020000 	.word	0x40020000

080050cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050d0:	4b0e      	ldr	r3, [pc, #56]	; (800510c <HAL_Init+0x40>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a0d      	ldr	r2, [pc, #52]	; (800510c <HAL_Init+0x40>)
 80050d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80050dc:	4b0b      	ldr	r3, [pc, #44]	; (800510c <HAL_Init+0x40>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a0a      	ldr	r2, [pc, #40]	; (800510c <HAL_Init+0x40>)
 80050e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050e8:	4b08      	ldr	r3, [pc, #32]	; (800510c <HAL_Init+0x40>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a07      	ldr	r2, [pc, #28]	; (800510c <HAL_Init+0x40>)
 80050ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050f4:	2003      	movs	r0, #3
 80050f6:	f000 f8d8 	bl	80052aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050fa:	2000      	movs	r0, #0
 80050fc:	f7fb fd18 	bl	8000b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005100:	f7fb fcc8 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40023c00 	.word	0x40023c00

08005110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005114:	4b06      	ldr	r3, [pc, #24]	; (8005130 <HAL_IncTick+0x20>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	4b06      	ldr	r3, [pc, #24]	; (8005134 <HAL_IncTick+0x24>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4413      	add	r3, r2
 8005120:	4a04      	ldr	r2, [pc, #16]	; (8005134 <HAL_IncTick+0x24>)
 8005122:	6013      	str	r3, [r2, #0]
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	200000f0 	.word	0x200000f0
 8005134:	200091f0 	.word	0x200091f0

08005138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  return uwTick;
 800513c:	4b03      	ldr	r3, [pc, #12]	; (800514c <HAL_GetTick+0x14>)
 800513e:	681b      	ldr	r3, [r3, #0]
}
 8005140:	4618      	mov	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	200091f0 	.word	0x200091f0

08005150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005160:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <__NVIC_SetPriorityGrouping+0x44>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800516c:	4013      	ands	r3, r2
 800516e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800517c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005182:	4a04      	ldr	r2, [pc, #16]	; (8005194 <__NVIC_SetPriorityGrouping+0x44>)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	60d3      	str	r3, [r2, #12]
}
 8005188:	bf00      	nop
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	e000ed00 	.word	0xe000ed00

08005198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800519c:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <__NVIC_GetPriorityGrouping+0x18>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	0a1b      	lsrs	r3, r3, #8
 80051a2:	f003 0307 	and.w	r3, r3, #7
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	e000ed00 	.word	0xe000ed00

080051b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	db0b      	blt.n	80051de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	f003 021f 	and.w	r2, r3, #31
 80051cc:	4907      	ldr	r1, [pc, #28]	; (80051ec <__NVIC_EnableIRQ+0x38>)
 80051ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	2001      	movs	r0, #1
 80051d6:	fa00 f202 	lsl.w	r2, r0, r2
 80051da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	e000e100 	.word	0xe000e100

080051f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	6039      	str	r1, [r7, #0]
 80051fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005200:	2b00      	cmp	r3, #0
 8005202:	db0a      	blt.n	800521a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	b2da      	uxtb	r2, r3
 8005208:	490c      	ldr	r1, [pc, #48]	; (800523c <__NVIC_SetPriority+0x4c>)
 800520a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800520e:	0112      	lsls	r2, r2, #4
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	440b      	add	r3, r1
 8005214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005218:	e00a      	b.n	8005230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	b2da      	uxtb	r2, r3
 800521e:	4908      	ldr	r1, [pc, #32]	; (8005240 <__NVIC_SetPriority+0x50>)
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	3b04      	subs	r3, #4
 8005228:	0112      	lsls	r2, r2, #4
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	440b      	add	r3, r1
 800522e:	761a      	strb	r2, [r3, #24]
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	e000e100 	.word	0xe000e100
 8005240:	e000ed00 	.word	0xe000ed00

08005244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005244:	b480      	push	{r7}
 8005246:	b089      	sub	sp, #36	; 0x24
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f1c3 0307 	rsb	r3, r3, #7
 800525e:	2b04      	cmp	r3, #4
 8005260:	bf28      	it	cs
 8005262:	2304      	movcs	r3, #4
 8005264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	3304      	adds	r3, #4
 800526a:	2b06      	cmp	r3, #6
 800526c:	d902      	bls.n	8005274 <NVIC_EncodePriority+0x30>
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	3b03      	subs	r3, #3
 8005272:	e000      	b.n	8005276 <NVIC_EncodePriority+0x32>
 8005274:	2300      	movs	r3, #0
 8005276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005278:	f04f 32ff 	mov.w	r2, #4294967295
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	43da      	mvns	r2, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	401a      	ands	r2, r3
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800528c:	f04f 31ff 	mov.w	r1, #4294967295
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	fa01 f303 	lsl.w	r3, r1, r3
 8005296:	43d9      	mvns	r1, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800529c:	4313      	orrs	r3, r2
         );
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3724      	adds	r7, #36	; 0x24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b082      	sub	sp, #8
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff ff4c 	bl	8005150 <__NVIC_SetPriorityGrouping>
}
 80052b8:	bf00      	nop
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	4603      	mov	r3, r0
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052d2:	f7ff ff61 	bl	8005198 <__NVIC_GetPriorityGrouping>
 80052d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	6978      	ldr	r0, [r7, #20]
 80052de:	f7ff ffb1 	bl	8005244 <NVIC_EncodePriority>
 80052e2:	4602      	mov	r2, r0
 80052e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052e8:	4611      	mov	r1, r2
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff ff80 	bl	80051f0 <__NVIC_SetPriority>
}
 80052f0:	bf00      	nop
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005306:	4618      	mov	r0, r3
 8005308:	f7ff ff54 	bl	80051b4 <__NVIC_EnableIRQ>
}
 800530c:	bf00      	nop
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e00e      	b.n	8005344 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	795b      	ldrb	r3, [r3, #5]
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d105      	bne.n	800533c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fb fbd8 	bl	8000aec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800534c:	b480      	push	{r7}
 800534e:	b089      	sub	sp, #36	; 0x24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800535a:	2300      	movs	r3, #0
 800535c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800535e:	2300      	movs	r3, #0
 8005360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005362:	2300      	movs	r3, #0
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	e159      	b.n	800561c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005368:	2201      	movs	r2, #1
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4013      	ands	r3, r2
 800537a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	429a      	cmp	r2, r3
 8005382:	f040 8148 	bne.w	8005616 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d00b      	beq.n	80053a6 <HAL_GPIO_Init+0x5a>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d007      	beq.n	80053a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800539a:	2b11      	cmp	r3, #17
 800539c:	d003      	beq.n	80053a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b12      	cmp	r3, #18
 80053a4:	d130      	bne.n	8005408 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	2203      	movs	r2, #3
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	43db      	mvns	r3, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	4013      	ands	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053dc:	2201      	movs	r2, #1
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	fa02 f303 	lsl.w	r3, r2, r3
 80053e4:	43db      	mvns	r3, r3
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	4013      	ands	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	091b      	lsrs	r3, r3, #4
 80053f2:	f003 0201 	and.w	r2, r3, #1
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	4313      	orrs	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	2203      	movs	r2, #3
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	4013      	ands	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	4313      	orrs	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2b02      	cmp	r3, #2
 800543e:	d003      	beq.n	8005448 <HAL_GPIO_Init+0xfc>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b12      	cmp	r3, #18
 8005446:	d123      	bne.n	8005490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	08da      	lsrs	r2, r3, #3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3208      	adds	r2, #8
 8005450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	220f      	movs	r2, #15
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	43db      	mvns	r3, r3
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	4013      	ands	r3, r2
 800546a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	fa02 f303 	lsl.w	r3, r2, r3
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	4313      	orrs	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	08da      	lsrs	r2, r3, #3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3208      	adds	r2, #8
 800548a:	69b9      	ldr	r1, [r7, #24]
 800548c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	2203      	movs	r2, #3
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	43db      	mvns	r3, r3
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	4013      	ands	r3, r2
 80054a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f003 0203 	and.w	r2, r3, #3
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80a2 	beq.w	8005616 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	4b56      	ldr	r3, [pc, #344]	; (8005630 <HAL_GPIO_Init+0x2e4>)
 80054d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054da:	4a55      	ldr	r2, [pc, #340]	; (8005630 <HAL_GPIO_Init+0x2e4>)
 80054dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054e0:	6453      	str	r3, [r2, #68]	; 0x44
 80054e2:	4b53      	ldr	r3, [pc, #332]	; (8005630 <HAL_GPIO_Init+0x2e4>)
 80054e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054ee:	4a51      	ldr	r2, [pc, #324]	; (8005634 <HAL_GPIO_Init+0x2e8>)
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	089b      	lsrs	r3, r3, #2
 80054f4:	3302      	adds	r3, #2
 80054f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	220f      	movs	r2, #15
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	43db      	mvns	r3, r3
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	4013      	ands	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a48      	ldr	r2, [pc, #288]	; (8005638 <HAL_GPIO_Init+0x2ec>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d019      	beq.n	800554e <HAL_GPIO_Init+0x202>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a47      	ldr	r2, [pc, #284]	; (800563c <HAL_GPIO_Init+0x2f0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d013      	beq.n	800554a <HAL_GPIO_Init+0x1fe>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a46      	ldr	r2, [pc, #280]	; (8005640 <HAL_GPIO_Init+0x2f4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00d      	beq.n	8005546 <HAL_GPIO_Init+0x1fa>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a45      	ldr	r2, [pc, #276]	; (8005644 <HAL_GPIO_Init+0x2f8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d007      	beq.n	8005542 <HAL_GPIO_Init+0x1f6>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a44      	ldr	r2, [pc, #272]	; (8005648 <HAL_GPIO_Init+0x2fc>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d101      	bne.n	800553e <HAL_GPIO_Init+0x1f2>
 800553a:	2304      	movs	r3, #4
 800553c:	e008      	b.n	8005550 <HAL_GPIO_Init+0x204>
 800553e:	2307      	movs	r3, #7
 8005540:	e006      	b.n	8005550 <HAL_GPIO_Init+0x204>
 8005542:	2303      	movs	r3, #3
 8005544:	e004      	b.n	8005550 <HAL_GPIO_Init+0x204>
 8005546:	2302      	movs	r3, #2
 8005548:	e002      	b.n	8005550 <HAL_GPIO_Init+0x204>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <HAL_GPIO_Init+0x204>
 800554e:	2300      	movs	r3, #0
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	f002 0203 	and.w	r2, r2, #3
 8005556:	0092      	lsls	r2, r2, #2
 8005558:	4093      	lsls	r3, r2
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	4313      	orrs	r3, r2
 800555e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005560:	4934      	ldr	r1, [pc, #208]	; (8005634 <HAL_GPIO_Init+0x2e8>)
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	089b      	lsrs	r3, r3, #2
 8005566:	3302      	adds	r3, #2
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800556e:	4b37      	ldr	r3, [pc, #220]	; (800564c <HAL_GPIO_Init+0x300>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	43db      	mvns	r3, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4013      	ands	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005592:	4a2e      	ldr	r2, [pc, #184]	; (800564c <HAL_GPIO_Init+0x300>)
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005598:	4b2c      	ldr	r3, [pc, #176]	; (800564c <HAL_GPIO_Init+0x300>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4013      	ands	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055bc:	4a23      	ldr	r2, [pc, #140]	; (800564c <HAL_GPIO_Init+0x300>)
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055c2:	4b22      	ldr	r3, [pc, #136]	; (800564c <HAL_GPIO_Init+0x300>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	43db      	mvns	r3, r3
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	4013      	ands	r3, r2
 80055d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055e6:	4a19      	ldr	r2, [pc, #100]	; (800564c <HAL_GPIO_Init+0x300>)
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055ec:	4b17      	ldr	r3, [pc, #92]	; (800564c <HAL_GPIO_Init+0x300>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	43db      	mvns	r3, r3
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	4013      	ands	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005610:	4a0e      	ldr	r2, [pc, #56]	; (800564c <HAL_GPIO_Init+0x300>)
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	3301      	adds	r3, #1
 800561a:	61fb      	str	r3, [r7, #28]
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	2b0f      	cmp	r3, #15
 8005620:	f67f aea2 	bls.w	8005368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005624:	bf00      	nop
 8005626:	3724      	adds	r7, #36	; 0x24
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	40023800 	.word	0x40023800
 8005634:	40013800 	.word	0x40013800
 8005638:	40020000 	.word	0x40020000
 800563c:	40020400 	.word	0x40020400
 8005640:	40020800 	.word	0x40020800
 8005644:	40020c00 	.word	0x40020c00
 8005648:	40021000 	.word	0x40021000
 800564c:	40013c00 	.word	0x40013c00

08005650 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800565a:	2300      	movs	r3, #0
 800565c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005662:	2300      	movs	r3, #0
 8005664:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005666:	2300      	movs	r3, #0
 8005668:	617b      	str	r3, [r7, #20]
 800566a:	e0bb      	b.n	80057e4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800566c:	2201      	movs	r2, #1
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	4013      	ands	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	429a      	cmp	r2, r3
 8005684:	f040 80ab 	bne.w	80057de <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005688:	4a5b      	ldr	r2, [pc, #364]	; (80057f8 <HAL_GPIO_DeInit+0x1a8>)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	089b      	lsrs	r3, r3, #2
 800568e:	3302      	adds	r3, #2
 8005690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005694:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f003 0303 	and.w	r3, r3, #3
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	220f      	movs	r2, #15
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	4013      	ands	r3, r2
 80056a8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a53      	ldr	r2, [pc, #332]	; (80057fc <HAL_GPIO_DeInit+0x1ac>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d019      	beq.n	80056e6 <HAL_GPIO_DeInit+0x96>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a52      	ldr	r2, [pc, #328]	; (8005800 <HAL_GPIO_DeInit+0x1b0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d013      	beq.n	80056e2 <HAL_GPIO_DeInit+0x92>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a51      	ldr	r2, [pc, #324]	; (8005804 <HAL_GPIO_DeInit+0x1b4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00d      	beq.n	80056de <HAL_GPIO_DeInit+0x8e>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a50      	ldr	r2, [pc, #320]	; (8005808 <HAL_GPIO_DeInit+0x1b8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d007      	beq.n	80056da <HAL_GPIO_DeInit+0x8a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a4f      	ldr	r2, [pc, #316]	; (800580c <HAL_GPIO_DeInit+0x1bc>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d101      	bne.n	80056d6 <HAL_GPIO_DeInit+0x86>
 80056d2:	2304      	movs	r3, #4
 80056d4:	e008      	b.n	80056e8 <HAL_GPIO_DeInit+0x98>
 80056d6:	2307      	movs	r3, #7
 80056d8:	e006      	b.n	80056e8 <HAL_GPIO_DeInit+0x98>
 80056da:	2303      	movs	r3, #3
 80056dc:	e004      	b.n	80056e8 <HAL_GPIO_DeInit+0x98>
 80056de:	2302      	movs	r3, #2
 80056e0:	e002      	b.n	80056e8 <HAL_GPIO_DeInit+0x98>
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <HAL_GPIO_DeInit+0x98>
 80056e6:	2300      	movs	r3, #0
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	f002 0203 	and.w	r2, r2, #3
 80056ee:	0092      	lsls	r2, r2, #2
 80056f0:	4093      	lsls	r3, r2
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d132      	bne.n	800575e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80056f8:	4b45      	ldr	r3, [pc, #276]	; (8005810 <HAL_GPIO_DeInit+0x1c0>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	43db      	mvns	r3, r3
 8005700:	4943      	ldr	r1, [pc, #268]	; (8005810 <HAL_GPIO_DeInit+0x1c0>)
 8005702:	4013      	ands	r3, r2
 8005704:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005706:	4b42      	ldr	r3, [pc, #264]	; (8005810 <HAL_GPIO_DeInit+0x1c0>)
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	43db      	mvns	r3, r3
 800570e:	4940      	ldr	r1, [pc, #256]	; (8005810 <HAL_GPIO_DeInit+0x1c0>)
 8005710:	4013      	ands	r3, r2
 8005712:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005714:	4b3e      	ldr	r3, [pc, #248]	; (8005810 <HAL_GPIO_DeInit+0x1c0>)
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	43db      	mvns	r3, r3
 800571c:	493c      	ldr	r1, [pc, #240]	; (8005810 <HAL_GPIO_DeInit+0x1c0>)
 800571e:	4013      	ands	r3, r2
 8005720:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005722:	4b3b      	ldr	r3, [pc, #236]	; (8005810 <HAL_GPIO_DeInit+0x1c0>)
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	43db      	mvns	r3, r3
 800572a:	4939      	ldr	r1, [pc, #228]	; (8005810 <HAL_GPIO_DeInit+0x1c0>)
 800572c:	4013      	ands	r3, r2
 800572e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	220f      	movs	r2, #15
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005740:	4a2d      	ldr	r2, [pc, #180]	; (80057f8 <HAL_GPIO_DeInit+0x1a8>)
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	089b      	lsrs	r3, r3, #2
 8005746:	3302      	adds	r3, #2
 8005748:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	43da      	mvns	r2, r3
 8005750:	4829      	ldr	r0, [pc, #164]	; (80057f8 <HAL_GPIO_DeInit+0x1a8>)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	089b      	lsrs	r3, r3, #2
 8005756:	400a      	ands	r2, r1
 8005758:	3302      	adds	r3, #2
 800575a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	2103      	movs	r1, #3
 8005768:	fa01 f303 	lsl.w	r3, r1, r3
 800576c:	43db      	mvns	r3, r3
 800576e:	401a      	ands	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	08da      	lsrs	r2, r3, #3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3208      	adds	r2, #8
 800577c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	220f      	movs	r2, #15
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	43db      	mvns	r3, r3
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	08d2      	lsrs	r2, r2, #3
 8005794:	4019      	ands	r1, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3208      	adds	r2, #8
 800579a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	2103      	movs	r1, #3
 80057a8:	fa01 f303 	lsl.w	r3, r1, r3
 80057ac:	43db      	mvns	r3, r3
 80057ae:	401a      	ands	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	2101      	movs	r1, #1
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	fa01 f303 	lsl.w	r3, r1, r3
 80057c0:	43db      	mvns	r3, r3
 80057c2:	401a      	ands	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	2103      	movs	r1, #3
 80057d2:	fa01 f303 	lsl.w	r3, r1, r3
 80057d6:	43db      	mvns	r3, r3
 80057d8:	401a      	ands	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	3301      	adds	r3, #1
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b0f      	cmp	r3, #15
 80057e8:	f67f af40 	bls.w	800566c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80057ec:	bf00      	nop
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	40013800 	.word	0x40013800
 80057fc:	40020000 	.word	0x40020000
 8005800:	40020400 	.word	0x40020400
 8005804:	40020800 	.word	0x40020800
 8005808:	40020c00 	.word	0x40020c00
 800580c:	40021000 	.word	0x40021000
 8005810:	40013c00 	.word	0x40013c00

08005814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	807b      	strh	r3, [r7, #2]
 8005820:	4613      	mov	r3, r2
 8005822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005824:	787b      	ldrb	r3, [r7, #1]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800582a:	887a      	ldrh	r2, [r7, #2]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005830:	e003      	b.n	800583a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005832:	887b      	ldrh	r3, [r7, #2]
 8005834:	041a      	lsls	r2, r3, #16
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	619a      	str	r2, [r3, #24]
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e11f      	b.n	8005a9a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f951 	bl	8005b16 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2224      	movs	r2, #36	; 0x24
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0201 	bic.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800589a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058ac:	f001 fc18 	bl	80070e0 <HAL_RCC_GetPCLK1Freq>
 80058b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	4a7b      	ldr	r2, [pc, #492]	; (8005aa4 <HAL_I2C_Init+0x25c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d807      	bhi.n	80058cc <HAL_I2C_Init+0x84>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4a7a      	ldr	r2, [pc, #488]	; (8005aa8 <HAL_I2C_Init+0x260>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	bf94      	ite	ls
 80058c4:	2301      	movls	r3, #1
 80058c6:	2300      	movhi	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	e006      	b.n	80058da <HAL_I2C_Init+0x92>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4a77      	ldr	r2, [pc, #476]	; (8005aac <HAL_I2C_Init+0x264>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	bf94      	ite	ls
 80058d4:	2301      	movls	r3, #1
 80058d6:	2300      	movhi	r3, #0
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e0db      	b.n	8005a9a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4a72      	ldr	r2, [pc, #456]	; (8005ab0 <HAL_I2C_Init+0x268>)
 80058e6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ea:	0c9b      	lsrs	r3, r3, #18
 80058ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	4a64      	ldr	r2, [pc, #400]	; (8005aa4 <HAL_I2C_Init+0x25c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d802      	bhi.n	800591c <HAL_I2C_Init+0xd4>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	3301      	adds	r3, #1
 800591a:	e009      	b.n	8005930 <HAL_I2C_Init+0xe8>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005922:	fb02 f303 	mul.w	r3, r2, r3
 8005926:	4a63      	ldr	r2, [pc, #396]	; (8005ab4 <HAL_I2C_Init+0x26c>)
 8005928:	fba2 2303 	umull	r2, r3, r2, r3
 800592c:	099b      	lsrs	r3, r3, #6
 800592e:	3301      	adds	r3, #1
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	430b      	orrs	r3, r1
 8005936:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005942:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	4956      	ldr	r1, [pc, #344]	; (8005aa4 <HAL_I2C_Init+0x25c>)
 800594c:	428b      	cmp	r3, r1
 800594e:	d80d      	bhi.n	800596c <HAL_I2C_Init+0x124>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	1e59      	subs	r1, r3, #1
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	fbb1 f3f3 	udiv	r3, r1, r3
 800595e:	3301      	adds	r3, #1
 8005960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005964:	2b04      	cmp	r3, #4
 8005966:	bf38      	it	cc
 8005968:	2304      	movcc	r3, #4
 800596a:	e04f      	b.n	8005a0c <HAL_I2C_Init+0x1c4>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d111      	bne.n	8005998 <HAL_I2C_Init+0x150>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	1e58      	subs	r0, r3, #1
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6859      	ldr	r1, [r3, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	440b      	add	r3, r1
 8005982:	fbb0 f3f3 	udiv	r3, r0, r3
 8005986:	3301      	adds	r3, #1
 8005988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800598c:	2b00      	cmp	r3, #0
 800598e:	bf0c      	ite	eq
 8005990:	2301      	moveq	r3, #1
 8005992:	2300      	movne	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	e012      	b.n	80059be <HAL_I2C_Init+0x176>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	1e58      	subs	r0, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6859      	ldr	r1, [r3, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	0099      	lsls	r1, r3, #2
 80059a8:	440b      	add	r3, r1
 80059aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ae:	3301      	adds	r3, #1
 80059b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	bf0c      	ite	eq
 80059b8:	2301      	moveq	r3, #1
 80059ba:	2300      	movne	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <HAL_I2C_Init+0x17e>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e022      	b.n	8005a0c <HAL_I2C_Init+0x1c4>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10e      	bne.n	80059ec <HAL_I2C_Init+0x1a4>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1e58      	subs	r0, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6859      	ldr	r1, [r3, #4]
 80059d6:	460b      	mov	r3, r1
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	440b      	add	r3, r1
 80059dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80059e0:	3301      	adds	r3, #1
 80059e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ea:	e00f      	b.n	8005a0c <HAL_I2C_Init+0x1c4>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	1e58      	subs	r0, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6859      	ldr	r1, [r3, #4]
 80059f4:	460b      	mov	r3, r1
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	0099      	lsls	r1, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a02:	3301      	adds	r3, #1
 8005a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a0c:	6879      	ldr	r1, [r7, #4]
 8005a0e:	6809      	ldr	r1, [r1, #0]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69da      	ldr	r2, [r3, #28]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6911      	ldr	r1, [r2, #16]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	68d2      	ldr	r2, [r2, #12]
 8005a46:	4311      	orrs	r1, r2
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6812      	ldr	r2, [r2, #0]
 8005a4c:	430b      	orrs	r3, r1
 8005a4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	695a      	ldr	r2, [r3, #20]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	000186a0 	.word	0x000186a0
 8005aa8:	001e847f 	.word	0x001e847f
 8005aac:	003d08ff 	.word	0x003d08ff
 8005ab0:	431bde83 	.word	0x431bde83
 8005ab4:	10624dd3 	.word	0x10624dd3

08005ab8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e021      	b.n	8005b0e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2224      	movs	r2, #36	; 0x24
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0201 	bic.w	r2, r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f821 	bl	8005b2a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
	...

08005b40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	4608      	mov	r0, r1
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	4603      	mov	r3, r0
 8005b50:	817b      	strh	r3, [r7, #10]
 8005b52:	460b      	mov	r3, r1
 8005b54:	813b      	strh	r3, [r7, #8]
 8005b56:	4613      	mov	r3, r2
 8005b58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b5a:	f7ff faed 	bl	8005138 <HAL_GetTick>
 8005b5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	f040 80d9 	bne.w	8005d20 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	2319      	movs	r3, #25
 8005b74:	2201      	movs	r2, #1
 8005b76:	496d      	ldr	r1, [pc, #436]	; (8005d2c <HAL_I2C_Mem_Write+0x1ec>)
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 fc99 	bl	80064b0 <I2C_WaitOnFlagUntilTimeout>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b84:	2302      	movs	r3, #2
 8005b86:	e0cc      	b.n	8005d22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_I2C_Mem_Write+0x56>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e0c5      	b.n	8005d22 <HAL_I2C_Mem_Write+0x1e2>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d007      	beq.n	8005bbc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2221      	movs	r2, #33	; 0x21
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2240      	movs	r2, #64	; 0x40
 8005bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6a3a      	ldr	r2, [r7, #32]
 8005be6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4a4d      	ldr	r2, [pc, #308]	; (8005d30 <HAL_I2C_Mem_Write+0x1f0>)
 8005bfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bfe:	88f8      	ldrh	r0, [r7, #6]
 8005c00:	893a      	ldrh	r2, [r7, #8]
 8005c02:	8979      	ldrh	r1, [r7, #10]
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	9301      	str	r3, [sp, #4]
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 fad0 	bl	80061b4 <I2C_RequestMemoryWrite>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d052      	beq.n	8005cc0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e081      	b.n	8005d22 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 fd1a 	bl	800665c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00d      	beq.n	8005c4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d107      	bne.n	8005c46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e06b      	b.n	8005d22 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	781a      	ldrb	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d11b      	bne.n	8005cc0 <HAL_I2C_Mem_Write+0x180>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d017      	beq.n	8005cc0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	781a      	ldrb	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1aa      	bne.n	8005c1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 fd06 	bl	80066de <I2C_WaitOnBTFFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00d      	beq.n	8005cf4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d107      	bne.n	8005cf0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e016      	b.n	8005d22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e000      	b.n	8005d22 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d20:	2302      	movs	r3, #2
  }
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	00100002 	.word	0x00100002
 8005d30:	ffff0000 	.word	0xffff0000

08005d34 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08c      	sub	sp, #48	; 0x30
 8005d38:	af02      	add	r7, sp, #8
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	4608      	mov	r0, r1
 8005d3e:	4611      	mov	r1, r2
 8005d40:	461a      	mov	r2, r3
 8005d42:	4603      	mov	r3, r0
 8005d44:	817b      	strh	r3, [r7, #10]
 8005d46:	460b      	mov	r3, r1
 8005d48:	813b      	strh	r3, [r7, #8]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d4e:	f7ff f9f3 	bl	8005138 <HAL_GetTick>
 8005d52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	f040 8208 	bne.w	8006172 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	2319      	movs	r3, #25
 8005d68:	2201      	movs	r2, #1
 8005d6a:	497b      	ldr	r1, [pc, #492]	; (8005f58 <HAL_I2C_Mem_Read+0x224>)
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 fb9f 	bl	80064b0 <I2C_WaitOnFlagUntilTimeout>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e1fb      	b.n	8006174 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_I2C_Mem_Read+0x56>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e1f4      	b.n	8006174 <HAL_I2C_Mem_Read+0x440>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d007      	beq.n	8005db0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0201 	orr.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2222      	movs	r2, #34	; 0x22
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2240      	movs	r2, #64	; 0x40
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005de0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4a5b      	ldr	r2, [pc, #364]	; (8005f5c <HAL_I2C_Mem_Read+0x228>)
 8005df0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005df2:	88f8      	ldrh	r0, [r7, #6]
 8005df4:	893a      	ldrh	r2, [r7, #8]
 8005df6:	8979      	ldrh	r1, [r7, #10]
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	9301      	str	r3, [sp, #4]
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	4603      	mov	r3, r0
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fa6c 	bl	80062e0 <I2C_RequestMemoryRead>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e1b0      	b.n	8006174 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d113      	bne.n	8005e42 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	623b      	str	r3, [r7, #32]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	623b      	str	r3, [r7, #32]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	623b      	str	r3, [r7, #32]
 8005e2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	e184      	b.n	800614c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d11b      	bne.n	8005e82 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	61fb      	str	r3, [r7, #28]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	61fb      	str	r3, [r7, #28]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	61fb      	str	r3, [r7, #28]
 8005e6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	e164      	b.n	800614c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d11b      	bne.n	8005ec2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ea8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	61bb      	str	r3, [r7, #24]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	61bb      	str	r3, [r7, #24]
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	e144      	b.n	800614c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ed8:	e138      	b.n	800614c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	f200 80f1 	bhi.w	80060c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d123      	bne.n	8005f34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 fc35 	bl	8006760 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e139      	b.n	8006174 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f32:	e10b      	b.n	800614c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d14e      	bne.n	8005fda <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	2200      	movs	r2, #0
 8005f44:	4906      	ldr	r1, [pc, #24]	; (8005f60 <HAL_I2C_Mem_Read+0x22c>)
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 fab2 	bl	80064b0 <I2C_WaitOnFlagUntilTimeout>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d008      	beq.n	8005f64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e10e      	b.n	8006174 <HAL_I2C_Mem_Read+0x440>
 8005f56:	bf00      	nop
 8005f58:	00100002 	.word	0x00100002
 8005f5c:	ffff0000 	.word	0xffff0000
 8005f60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691a      	ldr	r2, [r3, #16]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	691a      	ldr	r2, [r3, #16]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fd8:	e0b8      	b.n	800614c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	4966      	ldr	r1, [pc, #408]	; (800617c <HAL_I2C_Mem_Read+0x448>)
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 fa63 	bl	80064b0 <I2C_WaitOnFlagUntilTimeout>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e0bf      	b.n	8006174 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691a      	ldr	r2, [r3, #16]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006020:	3b01      	subs	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	2200      	movs	r2, #0
 800603e:	494f      	ldr	r1, [pc, #316]	; (800617c <HAL_I2C_Mem_Read+0x448>)
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fa35 	bl	80064b0 <I2C_WaitOnFlagUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e091      	b.n	8006174 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800605e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691a      	ldr	r2, [r3, #16]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006088:	b29b      	uxth	r3, r3
 800608a:	3b01      	subs	r3, #1
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	691a      	ldr	r2, [r3, #16]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060c4:	e042      	b.n	800614c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 fb48 	bl	8006760 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e04c      	b.n	8006174 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	691a      	ldr	r2, [r3, #16]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006102:	b29b      	uxth	r3, r3
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	f003 0304 	and.w	r3, r3, #4
 8006116:	2b04      	cmp	r3, #4
 8006118:	d118      	bne.n	800614c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	691a      	ldr	r2, [r3, #16]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006150:	2b00      	cmp	r3, #0
 8006152:	f47f aec2 	bne.w	8005eda <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2220      	movs	r2, #32
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800616e:	2300      	movs	r3, #0
 8006170:	e000      	b.n	8006174 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006172:	2302      	movs	r3, #2
  }
}
 8006174:	4618      	mov	r0, r3
 8006176:	3728      	adds	r7, #40	; 0x28
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	00010004 	.word	0x00010004

08006180 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618e:	b2db      	uxtb	r3, r3
}
 8006190:	4618      	mov	r0, r3
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af02      	add	r7, sp, #8
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	4608      	mov	r0, r1
 80061be:	4611      	mov	r1, r2
 80061c0:	461a      	mov	r2, r3
 80061c2:	4603      	mov	r3, r0
 80061c4:	817b      	strh	r3, [r7, #10]
 80061c6:	460b      	mov	r3, r1
 80061c8:	813b      	strh	r3, [r7, #8]
 80061ca:	4613      	mov	r3, r2
 80061cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 f960 	bl	80064b0 <I2C_WaitOnFlagUntilTimeout>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00d      	beq.n	8006212 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006204:	d103      	bne.n	800620e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800620c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e05f      	b.n	80062d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006212:	897b      	ldrh	r3, [r7, #10]
 8006214:	b2db      	uxtb	r3, r3
 8006216:	461a      	mov	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006220:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	6a3a      	ldr	r2, [r7, #32]
 8006226:	492d      	ldr	r1, [pc, #180]	; (80062dc <I2C_RequestMemoryWrite+0x128>)
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 f998 	bl	800655e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e04c      	b.n	80062d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006238:	2300      	movs	r3, #0
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800624e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006250:	6a39      	ldr	r1, [r7, #32]
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fa02 	bl	800665c <I2C_WaitOnTXEFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00d      	beq.n	800627a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	2b04      	cmp	r3, #4
 8006264:	d107      	bne.n	8006276 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006274:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e02b      	b.n	80062d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d105      	bne.n	800628c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006280:	893b      	ldrh	r3, [r7, #8]
 8006282:	b2da      	uxtb	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	611a      	str	r2, [r3, #16]
 800628a:	e021      	b.n	80062d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800628c:	893b      	ldrh	r3, [r7, #8]
 800628e:	0a1b      	lsrs	r3, r3, #8
 8006290:	b29b      	uxth	r3, r3
 8006292:	b2da      	uxtb	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800629a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800629c:	6a39      	ldr	r1, [r7, #32]
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f9dc 	bl	800665c <I2C_WaitOnTXEFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00d      	beq.n	80062c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	d107      	bne.n	80062c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e005      	b.n	80062d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062c6:	893b      	ldrh	r3, [r7, #8]
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	00010002 	.word	0x00010002

080062e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	4608      	mov	r0, r1
 80062ea:	4611      	mov	r1, r2
 80062ec:	461a      	mov	r2, r3
 80062ee:	4603      	mov	r3, r0
 80062f0:	817b      	strh	r3, [r7, #10]
 80062f2:	460b      	mov	r3, r1
 80062f4:	813b      	strh	r3, [r7, #8]
 80062f6:	4613      	mov	r3, r2
 80062f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006308:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006318:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	2200      	movs	r2, #0
 8006322:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f000 f8c2 	bl	80064b0 <I2C_WaitOnFlagUntilTimeout>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00d      	beq.n	800634e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800633c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006340:	d103      	bne.n	800634a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006348:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e0aa      	b.n	80064a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800634e:	897b      	ldrh	r3, [r7, #10]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	461a      	mov	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800635c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	6a3a      	ldr	r2, [r7, #32]
 8006362:	4952      	ldr	r1, [pc, #328]	; (80064ac <I2C_RequestMemoryRead+0x1cc>)
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 f8fa 	bl	800655e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e097      	b.n	80064a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006374:	2300      	movs	r3, #0
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800638a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800638c:	6a39      	ldr	r1, [r7, #32]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 f964 	bl	800665c <I2C_WaitOnTXEFlagUntilTimeout>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00d      	beq.n	80063b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d107      	bne.n	80063b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e076      	b.n	80064a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063b6:	88fb      	ldrh	r3, [r7, #6]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d105      	bne.n	80063c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063bc:	893b      	ldrh	r3, [r7, #8]
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	611a      	str	r2, [r3, #16]
 80063c6:	e021      	b.n	800640c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063c8:	893b      	ldrh	r3, [r7, #8]
 80063ca:	0a1b      	lsrs	r3, r3, #8
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d8:	6a39      	ldr	r1, [r7, #32]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 f93e 	bl	800665c <I2C_WaitOnTXEFlagUntilTimeout>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00d      	beq.n	8006402 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d107      	bne.n	80063fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e050      	b.n	80064a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006402:	893b      	ldrh	r3, [r7, #8]
 8006404:	b2da      	uxtb	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800640c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640e:	6a39      	ldr	r1, [r7, #32]
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 f923 	bl	800665c <I2C_WaitOnTXEFlagUntilTimeout>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00d      	beq.n	8006438 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006420:	2b04      	cmp	r3, #4
 8006422:	d107      	bne.n	8006434 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006432:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e035      	b.n	80064a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006446:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	2200      	movs	r2, #0
 8006450:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 f82b 	bl	80064b0 <I2C_WaitOnFlagUntilTimeout>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00d      	beq.n	800647c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800646e:	d103      	bne.n	8006478 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006476:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e013      	b.n	80064a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800647c:	897b      	ldrh	r3, [r7, #10]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	f043 0301 	orr.w	r3, r3, #1
 8006484:	b2da      	uxtb	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	6a3a      	ldr	r2, [r7, #32]
 8006490:	4906      	ldr	r1, [pc, #24]	; (80064ac <I2C_RequestMemoryRead+0x1cc>)
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f863 	bl	800655e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e000      	b.n	80064a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	00010002 	.word	0x00010002

080064b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	603b      	str	r3, [r7, #0]
 80064bc:	4613      	mov	r3, r2
 80064be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064c0:	e025      	b.n	800650e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c8:	d021      	beq.n	800650e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ca:	f7fe fe35 	bl	8005138 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d302      	bcc.n	80064e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d116      	bne.n	800650e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	f043 0220 	orr.w	r2, r3, #32
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e023      	b.n	8006556 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	0c1b      	lsrs	r3, r3, #16
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b01      	cmp	r3, #1
 8006516:	d10d      	bne.n	8006534 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	43da      	mvns	r2, r3
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4013      	ands	r3, r2
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	bf0c      	ite	eq
 800652a:	2301      	moveq	r3, #1
 800652c:	2300      	movne	r3, #0
 800652e:	b2db      	uxtb	r3, r3
 8006530:	461a      	mov	r2, r3
 8006532:	e00c      	b.n	800654e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	43da      	mvns	r2, r3
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	4013      	ands	r3, r2
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	bf0c      	ite	eq
 8006546:	2301      	moveq	r3, #1
 8006548:	2300      	movne	r3, #0
 800654a:	b2db      	uxtb	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	79fb      	ldrb	r3, [r7, #7]
 8006550:	429a      	cmp	r2, r3
 8006552:	d0b6      	beq.n	80064c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	60f8      	str	r0, [r7, #12]
 8006566:	60b9      	str	r1, [r7, #8]
 8006568:	607a      	str	r2, [r7, #4]
 800656a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800656c:	e051      	b.n	8006612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657c:	d123      	bne.n	80065c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800658c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006596:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	f043 0204 	orr.w	r2, r3, #4
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e046      	b.n	8006654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065cc:	d021      	beq.n	8006612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ce:	f7fe fdb3 	bl	8005138 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d302      	bcc.n	80065e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d116      	bne.n	8006612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	f043 0220 	orr.w	r2, r3, #32
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e020      	b.n	8006654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	0c1b      	lsrs	r3, r3, #16
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b01      	cmp	r3, #1
 800661a:	d10c      	bne.n	8006636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	43da      	mvns	r2, r3
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	4013      	ands	r3, r2
 8006628:	b29b      	uxth	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	bf14      	ite	ne
 800662e:	2301      	movne	r3, #1
 8006630:	2300      	moveq	r3, #0
 8006632:	b2db      	uxtb	r3, r3
 8006634:	e00b      	b.n	800664e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	43da      	mvns	r2, r3
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	4013      	ands	r3, r2
 8006642:	b29b      	uxth	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	bf14      	ite	ne
 8006648:	2301      	movne	r3, #1
 800664a:	2300      	moveq	r3, #0
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d18d      	bne.n	800656e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006668:	e02d      	b.n	80066c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 f8ce 	bl	800680c <I2C_IsAcknowledgeFailed>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e02d      	b.n	80066d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006680:	d021      	beq.n	80066c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006682:	f7fe fd59 	bl	8005138 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	429a      	cmp	r2, r3
 8006690:	d302      	bcc.n	8006698 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d116      	bne.n	80066c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	f043 0220 	orr.w	r2, r3, #32
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e007      	b.n	80066d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d0:	2b80      	cmp	r3, #128	; 0x80
 80066d2:	d1ca      	bne.n	800666a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b084      	sub	sp, #16
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066ea:	e02d      	b.n	8006748 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 f88d 	bl	800680c <I2C_IsAcknowledgeFailed>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d001      	beq.n	80066fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e02d      	b.n	8006758 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006702:	d021      	beq.n	8006748 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006704:	f7fe fd18 	bl	8005138 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	429a      	cmp	r2, r3
 8006712:	d302      	bcc.n	800671a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d116      	bne.n	8006748 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006734:	f043 0220 	orr.w	r2, r3, #32
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e007      	b.n	8006758 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b04      	cmp	r3, #4
 8006754:	d1ca      	bne.n	80066ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800676c:	e042      	b.n	80067f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	f003 0310 	and.w	r3, r3, #16
 8006778:	2b10      	cmp	r3, #16
 800677a:	d119      	bne.n	80067b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f06f 0210 	mvn.w	r2, #16
 8006784:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e029      	b.n	8006804 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b0:	f7fe fcc2 	bl	8005138 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d302      	bcc.n	80067c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d116      	bne.n	80067f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	f043 0220 	orr.w	r2, r3, #32
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e007      	b.n	8006804 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fe:	2b40      	cmp	r3, #64	; 0x40
 8006800:	d1b5      	bne.n	800676e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800681e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006822:	d11b      	bne.n	800685c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800682c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2220      	movs	r2, #32
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006848:	f043 0204 	orr.w	r2, r3, #4
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e000      	b.n	800685e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
	...

0800686c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e25b      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	d075      	beq.n	8006976 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800688a:	4ba3      	ldr	r3, [pc, #652]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 030c 	and.w	r3, r3, #12
 8006892:	2b04      	cmp	r3, #4
 8006894:	d00c      	beq.n	80068b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006896:	4ba0      	ldr	r3, [pc, #640]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800689e:	2b08      	cmp	r3, #8
 80068a0:	d112      	bne.n	80068c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068a2:	4b9d      	ldr	r3, [pc, #628]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068ae:	d10b      	bne.n	80068c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068b0:	4b99      	ldr	r3, [pc, #612]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d05b      	beq.n	8006974 <HAL_RCC_OscConfig+0x108>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d157      	bne.n	8006974 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e236      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d0:	d106      	bne.n	80068e0 <HAL_RCC_OscConfig+0x74>
 80068d2:	4b91      	ldr	r3, [pc, #580]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a90      	ldr	r2, [pc, #576]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80068d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	e01d      	b.n	800691c <HAL_RCC_OscConfig+0xb0>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068e8:	d10c      	bne.n	8006904 <HAL_RCC_OscConfig+0x98>
 80068ea:	4b8b      	ldr	r3, [pc, #556]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a8a      	ldr	r2, [pc, #552]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80068f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	4b88      	ldr	r3, [pc, #544]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a87      	ldr	r2, [pc, #540]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80068fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	e00b      	b.n	800691c <HAL_RCC_OscConfig+0xb0>
 8006904:	4b84      	ldr	r3, [pc, #528]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a83      	ldr	r2, [pc, #524]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 800690a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	4b81      	ldr	r3, [pc, #516]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a80      	ldr	r2, [pc, #512]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800691a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d013      	beq.n	800694c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006924:	f7fe fc08 	bl	8005138 <HAL_GetTick>
 8006928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800692c:	f7fe fc04 	bl	8005138 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b64      	cmp	r3, #100	; 0x64
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e1fb      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800693e:	4b76      	ldr	r3, [pc, #472]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0f0      	beq.n	800692c <HAL_RCC_OscConfig+0xc0>
 800694a:	e014      	b.n	8006976 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800694c:	f7fe fbf4 	bl	8005138 <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006954:	f7fe fbf0 	bl	8005138 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b64      	cmp	r3, #100	; 0x64
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e1e7      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006966:	4b6c      	ldr	r3, [pc, #432]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1f0      	bne.n	8006954 <HAL_RCC_OscConfig+0xe8>
 8006972:	e000      	b.n	8006976 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d063      	beq.n	8006a4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006982:	4b65      	ldr	r3, [pc, #404]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 030c 	and.w	r3, r3, #12
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00b      	beq.n	80069a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800698e:	4b62      	ldr	r3, [pc, #392]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006996:	2b08      	cmp	r3, #8
 8006998:	d11c      	bne.n	80069d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800699a:	4b5f      	ldr	r3, [pc, #380]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d116      	bne.n	80069d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069a6:	4b5c      	ldr	r3, [pc, #368]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d005      	beq.n	80069be <HAL_RCC_OscConfig+0x152>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d001      	beq.n	80069be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e1bb      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069be:	4b56      	ldr	r3, [pc, #344]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	4952      	ldr	r1, [pc, #328]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069d2:	e03a      	b.n	8006a4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d020      	beq.n	8006a1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069dc:	4b4f      	ldr	r3, [pc, #316]	; (8006b1c <HAL_RCC_OscConfig+0x2b0>)
 80069de:	2201      	movs	r2, #1
 80069e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e2:	f7fe fba9 	bl	8005138 <HAL_GetTick>
 80069e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069e8:	e008      	b.n	80069fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069ea:	f7fe fba5 	bl	8005138 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d901      	bls.n	80069fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e19c      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069fc:	4b46      	ldr	r3, [pc, #280]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0f0      	beq.n	80069ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a08:	4b43      	ldr	r3, [pc, #268]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	4940      	ldr	r1, [pc, #256]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	600b      	str	r3, [r1, #0]
 8006a1c:	e015      	b.n	8006a4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a1e:	4b3f      	ldr	r3, [pc, #252]	; (8006b1c <HAL_RCC_OscConfig+0x2b0>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a24:	f7fe fb88 	bl	8005138 <HAL_GetTick>
 8006a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a2c:	f7fe fb84 	bl	8005138 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e17b      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a3e:	4b36      	ldr	r3, [pc, #216]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1f0      	bne.n	8006a2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0308 	and.w	r3, r3, #8
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d030      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d016      	beq.n	8006a8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a5e:	4b30      	ldr	r3, [pc, #192]	; (8006b20 <HAL_RCC_OscConfig+0x2b4>)
 8006a60:	2201      	movs	r2, #1
 8006a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a64:	f7fe fb68 	bl	8005138 <HAL_GetTick>
 8006a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a6a:	e008      	b.n	8006a7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a6c:	f7fe fb64 	bl	8005138 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e15b      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a7e:	4b26      	ldr	r3, [pc, #152]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0f0      	beq.n	8006a6c <HAL_RCC_OscConfig+0x200>
 8006a8a:	e015      	b.n	8006ab8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a8c:	4b24      	ldr	r3, [pc, #144]	; (8006b20 <HAL_RCC_OscConfig+0x2b4>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a92:	f7fe fb51 	bl	8005138 <HAL_GetTick>
 8006a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a98:	e008      	b.n	8006aac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a9a:	f7fe fb4d 	bl	8005138 <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d901      	bls.n	8006aac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e144      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006aac:	4b1a      	ldr	r3, [pc, #104]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1f0      	bne.n	8006a9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 80a0 	beq.w	8006c06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006aca:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10f      	bne.n	8006af6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60bb      	str	r3, [r7, #8]
 8006ada:	4b0f      	ldr	r3, [pc, #60]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	4a0e      	ldr	r2, [pc, #56]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ae6:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aee:	60bb      	str	r3, [r7, #8]
 8006af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006af2:	2301      	movs	r3, #1
 8006af4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006af6:	4b0b      	ldr	r3, [pc, #44]	; (8006b24 <HAL_RCC_OscConfig+0x2b8>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d121      	bne.n	8006b46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b02:	4b08      	ldr	r3, [pc, #32]	; (8006b24 <HAL_RCC_OscConfig+0x2b8>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a07      	ldr	r2, [pc, #28]	; (8006b24 <HAL_RCC_OscConfig+0x2b8>)
 8006b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b0e:	f7fe fb13 	bl	8005138 <HAL_GetTick>
 8006b12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b14:	e011      	b.n	8006b3a <HAL_RCC_OscConfig+0x2ce>
 8006b16:	bf00      	nop
 8006b18:	40023800 	.word	0x40023800
 8006b1c:	42470000 	.word	0x42470000
 8006b20:	42470e80 	.word	0x42470e80
 8006b24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b28:	f7fe fb06 	bl	8005138 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e0fd      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b3a:	4b81      	ldr	r3, [pc, #516]	; (8006d40 <HAL_RCC_OscConfig+0x4d4>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0f0      	beq.n	8006b28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d106      	bne.n	8006b5c <HAL_RCC_OscConfig+0x2f0>
 8006b4e:	4b7d      	ldr	r3, [pc, #500]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b52:	4a7c      	ldr	r2, [pc, #496]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006b54:	f043 0301 	orr.w	r3, r3, #1
 8006b58:	6713      	str	r3, [r2, #112]	; 0x70
 8006b5a:	e01c      	b.n	8006b96 <HAL_RCC_OscConfig+0x32a>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	2b05      	cmp	r3, #5
 8006b62:	d10c      	bne.n	8006b7e <HAL_RCC_OscConfig+0x312>
 8006b64:	4b77      	ldr	r3, [pc, #476]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b68:	4a76      	ldr	r2, [pc, #472]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006b6a:	f043 0304 	orr.w	r3, r3, #4
 8006b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b70:	4b74      	ldr	r3, [pc, #464]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b74:	4a73      	ldr	r2, [pc, #460]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006b76:	f043 0301 	orr.w	r3, r3, #1
 8006b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b7c:	e00b      	b.n	8006b96 <HAL_RCC_OscConfig+0x32a>
 8006b7e:	4b71      	ldr	r3, [pc, #452]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b82:	4a70      	ldr	r2, [pc, #448]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006b84:	f023 0301 	bic.w	r3, r3, #1
 8006b88:	6713      	str	r3, [r2, #112]	; 0x70
 8006b8a:	4b6e      	ldr	r3, [pc, #440]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8e:	4a6d      	ldr	r2, [pc, #436]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006b90:	f023 0304 	bic.w	r3, r3, #4
 8006b94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d015      	beq.n	8006bca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b9e:	f7fe facb 	bl	8005138 <HAL_GetTick>
 8006ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ba4:	e00a      	b.n	8006bbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ba6:	f7fe fac7 	bl	8005138 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d901      	bls.n	8006bbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e0bc      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bbc:	4b61      	ldr	r3, [pc, #388]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0ee      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x33a>
 8006bc8:	e014      	b.n	8006bf4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bca:	f7fe fab5 	bl	8005138 <HAL_GetTick>
 8006bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bd0:	e00a      	b.n	8006be8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bd2:	f7fe fab1 	bl	8005138 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d901      	bls.n	8006be8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e0a6      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006be8:	4b56      	ldr	r3, [pc, #344]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1ee      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d105      	bne.n	8006c06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bfa:	4b52      	ldr	r3, [pc, #328]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	4a51      	ldr	r2, [pc, #324]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 8092 	beq.w	8006d34 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c10:	4b4c      	ldr	r3, [pc, #304]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f003 030c 	and.w	r3, r3, #12
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	d05c      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d141      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c24:	4b48      	ldr	r3, [pc, #288]	; (8006d48 <HAL_RCC_OscConfig+0x4dc>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c2a:	f7fe fa85 	bl	8005138 <HAL_GetTick>
 8006c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c30:	e008      	b.n	8006c44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c32:	f7fe fa81 	bl	8005138 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e078      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c44:	4b3f      	ldr	r3, [pc, #252]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1f0      	bne.n	8006c32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	69da      	ldr	r2, [r3, #28]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	019b      	lsls	r3, r3, #6
 8006c60:	431a      	orrs	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c66:	085b      	lsrs	r3, r3, #1
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	041b      	lsls	r3, r3, #16
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c72:	061b      	lsls	r3, r3, #24
 8006c74:	4933      	ldr	r1, [pc, #204]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c7a:	4b33      	ldr	r3, [pc, #204]	; (8006d48 <HAL_RCC_OscConfig+0x4dc>)
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c80:	f7fe fa5a 	bl	8005138 <HAL_GetTick>
 8006c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c86:	e008      	b.n	8006c9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c88:	f7fe fa56 	bl	8005138 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e04d      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c9a:	4b2a      	ldr	r3, [pc, #168]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d0f0      	beq.n	8006c88 <HAL_RCC_OscConfig+0x41c>
 8006ca6:	e045      	b.n	8006d34 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ca8:	4b27      	ldr	r3, [pc, #156]	; (8006d48 <HAL_RCC_OscConfig+0x4dc>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cae:	f7fe fa43 	bl	8005138 <HAL_GetTick>
 8006cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cb6:	f7fe fa3f 	bl	8005138 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e036      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cc8:	4b1e      	ldr	r3, [pc, #120]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1f0      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x44a>
 8006cd4:	e02e      	b.n	8006d34 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d101      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e029      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ce2:	4b18      	ldr	r3, [pc, #96]	; (8006d44 <HAL_RCC_OscConfig+0x4d8>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d11c      	bne.n	8006d30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d115      	bne.n	8006d30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d10d      	bne.n	8006d30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d106      	bne.n	8006d30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d001      	beq.n	8006d34 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	40007000 	.word	0x40007000
 8006d44:	40023800 	.word	0x40023800
 8006d48:	42470060 	.word	0x42470060

08006d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e0cc      	b.n	8006efa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d60:	4b68      	ldr	r3, [pc, #416]	; (8006f04 <HAL_RCC_ClockConfig+0x1b8>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 030f 	and.w	r3, r3, #15
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d90c      	bls.n	8006d88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d6e:	4b65      	ldr	r3, [pc, #404]	; (8006f04 <HAL_RCC_ClockConfig+0x1b8>)
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d76:	4b63      	ldr	r3, [pc, #396]	; (8006f04 <HAL_RCC_ClockConfig+0x1b8>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 030f 	and.w	r3, r3, #15
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d001      	beq.n	8006d88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e0b8      	b.n	8006efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d020      	beq.n	8006dd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006da0:	4b59      	ldr	r3, [pc, #356]	; (8006f08 <HAL_RCC_ClockConfig+0x1bc>)
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	4a58      	ldr	r2, [pc, #352]	; (8006f08 <HAL_RCC_ClockConfig+0x1bc>)
 8006da6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006daa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0308 	and.w	r3, r3, #8
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d005      	beq.n	8006dc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006db8:	4b53      	ldr	r3, [pc, #332]	; (8006f08 <HAL_RCC_ClockConfig+0x1bc>)
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	4a52      	ldr	r2, [pc, #328]	; (8006f08 <HAL_RCC_ClockConfig+0x1bc>)
 8006dbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006dc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dc4:	4b50      	ldr	r3, [pc, #320]	; (8006f08 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	494d      	ldr	r1, [pc, #308]	; (8006f08 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d044      	beq.n	8006e6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d107      	bne.n	8006dfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dea:	4b47      	ldr	r3, [pc, #284]	; (8006f08 <HAL_RCC_ClockConfig+0x1bc>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d119      	bne.n	8006e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e07f      	b.n	8006efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d003      	beq.n	8006e0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	d107      	bne.n	8006e1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e0a:	4b3f      	ldr	r3, [pc, #252]	; (8006f08 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d109      	bne.n	8006e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e06f      	b.n	8006efa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e1a:	4b3b      	ldr	r3, [pc, #236]	; (8006f08 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e067      	b.n	8006efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e2a:	4b37      	ldr	r3, [pc, #220]	; (8006f08 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f023 0203 	bic.w	r2, r3, #3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	4934      	ldr	r1, [pc, #208]	; (8006f08 <HAL_RCC_ClockConfig+0x1bc>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e3c:	f7fe f97c 	bl	8005138 <HAL_GetTick>
 8006e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e42:	e00a      	b.n	8006e5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e44:	f7fe f978 	bl	8005138 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e04f      	b.n	8006efa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e5a:	4b2b      	ldr	r3, [pc, #172]	; (8006f08 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 020c 	and.w	r2, r3, #12
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d1eb      	bne.n	8006e44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e6c:	4b25      	ldr	r3, [pc, #148]	; (8006f04 <HAL_RCC_ClockConfig+0x1b8>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 030f 	and.w	r3, r3, #15
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d20c      	bcs.n	8006e94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e7a:	4b22      	ldr	r3, [pc, #136]	; (8006f04 <HAL_RCC_ClockConfig+0x1b8>)
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e82:	4b20      	ldr	r3, [pc, #128]	; (8006f04 <HAL_RCC_ClockConfig+0x1b8>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d001      	beq.n	8006e94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e032      	b.n	8006efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0304 	and.w	r3, r3, #4
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d008      	beq.n	8006eb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ea0:	4b19      	ldr	r3, [pc, #100]	; (8006f08 <HAL_RCC_ClockConfig+0x1bc>)
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	4916      	ldr	r1, [pc, #88]	; (8006f08 <HAL_RCC_ClockConfig+0x1bc>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0308 	and.w	r3, r3, #8
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d009      	beq.n	8006ed2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ebe:	4b12      	ldr	r3, [pc, #72]	; (8006f08 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	490e      	ldr	r1, [pc, #56]	; (8006f08 <HAL_RCC_ClockConfig+0x1bc>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ed2:	f000 f821 	bl	8006f18 <HAL_RCC_GetSysClockFreq>
 8006ed6:	4601      	mov	r1, r0
 8006ed8:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <HAL_RCC_ClockConfig+0x1bc>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	091b      	lsrs	r3, r3, #4
 8006ede:	f003 030f 	and.w	r3, r3, #15
 8006ee2:	4a0a      	ldr	r2, [pc, #40]	; (8006f0c <HAL_RCC_ClockConfig+0x1c0>)
 8006ee4:	5cd3      	ldrb	r3, [r2, r3]
 8006ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8006eea:	4a09      	ldr	r2, [pc, #36]	; (8006f10 <HAL_RCC_ClockConfig+0x1c4>)
 8006eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006eee:	4b09      	ldr	r3, [pc, #36]	; (8006f14 <HAL_RCC_ClockConfig+0x1c8>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7f9 fe1c 	bl	8000b30 <HAL_InitTick>

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	40023c00 	.word	0x40023c00
 8006f08:	40023800 	.word	0x40023800
 8006f0c:	0800c7ec 	.word	0x0800c7ec
 8006f10:	20000020 	.word	0x20000020
 8006f14:	200000ec 	.word	0x200000ec

08006f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	607b      	str	r3, [r7, #4]
 8006f22:	2300      	movs	r3, #0
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	2300      	movs	r3, #0
 8006f28:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f2e:	4b63      	ldr	r3, [pc, #396]	; (80070bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 030c 	and.w	r3, r3, #12
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d007      	beq.n	8006f4a <HAL_RCC_GetSysClockFreq+0x32>
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d008      	beq.n	8006f50 <HAL_RCC_GetSysClockFreq+0x38>
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f040 80b4 	bne.w	80070ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f44:	4b5e      	ldr	r3, [pc, #376]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006f46:	60bb      	str	r3, [r7, #8]
       break;
 8006f48:	e0b3      	b.n	80070b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f4a:	4b5e      	ldr	r3, [pc, #376]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006f4c:	60bb      	str	r3, [r7, #8]
      break;
 8006f4e:	e0b0      	b.n	80070b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f50:	4b5a      	ldr	r3, [pc, #360]	; (80070bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f5a:	4b58      	ldr	r3, [pc, #352]	; (80070bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d04a      	beq.n	8006ffc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f66:	4b55      	ldr	r3, [pc, #340]	; (80070bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	099b      	lsrs	r3, r3, #6
 8006f6c:	f04f 0400 	mov.w	r4, #0
 8006f70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f74:	f04f 0200 	mov.w	r2, #0
 8006f78:	ea03 0501 	and.w	r5, r3, r1
 8006f7c:	ea04 0602 	and.w	r6, r4, r2
 8006f80:	4629      	mov	r1, r5
 8006f82:	4632      	mov	r2, r6
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	f04f 0400 	mov.w	r4, #0
 8006f8c:	0154      	lsls	r4, r2, #5
 8006f8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006f92:	014b      	lsls	r3, r1, #5
 8006f94:	4619      	mov	r1, r3
 8006f96:	4622      	mov	r2, r4
 8006f98:	1b49      	subs	r1, r1, r5
 8006f9a:	eb62 0206 	sbc.w	r2, r2, r6
 8006f9e:	f04f 0300 	mov.w	r3, #0
 8006fa2:	f04f 0400 	mov.w	r4, #0
 8006fa6:	0194      	lsls	r4, r2, #6
 8006fa8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006fac:	018b      	lsls	r3, r1, #6
 8006fae:	1a5b      	subs	r3, r3, r1
 8006fb0:	eb64 0402 	sbc.w	r4, r4, r2
 8006fb4:	f04f 0100 	mov.w	r1, #0
 8006fb8:	f04f 0200 	mov.w	r2, #0
 8006fbc:	00e2      	lsls	r2, r4, #3
 8006fbe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006fc2:	00d9      	lsls	r1, r3, #3
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4614      	mov	r4, r2
 8006fc8:	195b      	adds	r3, r3, r5
 8006fca:	eb44 0406 	adc.w	r4, r4, r6
 8006fce:	f04f 0100 	mov.w	r1, #0
 8006fd2:	f04f 0200 	mov.w	r2, #0
 8006fd6:	0262      	lsls	r2, r4, #9
 8006fd8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006fdc:	0259      	lsls	r1, r3, #9
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4614      	mov	r4, r2
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f04f 0400 	mov.w	r4, #0
 8006fec:	461a      	mov	r2, r3
 8006fee:	4623      	mov	r3, r4
 8006ff0:	f7f9 f946 	bl	8000280 <__aeabi_uldivmod>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	e049      	b.n	8007090 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ffc:	4b2f      	ldr	r3, [pc, #188]	; (80070bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	099b      	lsrs	r3, r3, #6
 8007002:	f04f 0400 	mov.w	r4, #0
 8007006:	f240 11ff 	movw	r1, #511	; 0x1ff
 800700a:	f04f 0200 	mov.w	r2, #0
 800700e:	ea03 0501 	and.w	r5, r3, r1
 8007012:	ea04 0602 	and.w	r6, r4, r2
 8007016:	4629      	mov	r1, r5
 8007018:	4632      	mov	r2, r6
 800701a:	f04f 0300 	mov.w	r3, #0
 800701e:	f04f 0400 	mov.w	r4, #0
 8007022:	0154      	lsls	r4, r2, #5
 8007024:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007028:	014b      	lsls	r3, r1, #5
 800702a:	4619      	mov	r1, r3
 800702c:	4622      	mov	r2, r4
 800702e:	1b49      	subs	r1, r1, r5
 8007030:	eb62 0206 	sbc.w	r2, r2, r6
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	f04f 0400 	mov.w	r4, #0
 800703c:	0194      	lsls	r4, r2, #6
 800703e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007042:	018b      	lsls	r3, r1, #6
 8007044:	1a5b      	subs	r3, r3, r1
 8007046:	eb64 0402 	sbc.w	r4, r4, r2
 800704a:	f04f 0100 	mov.w	r1, #0
 800704e:	f04f 0200 	mov.w	r2, #0
 8007052:	00e2      	lsls	r2, r4, #3
 8007054:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007058:	00d9      	lsls	r1, r3, #3
 800705a:	460b      	mov	r3, r1
 800705c:	4614      	mov	r4, r2
 800705e:	195b      	adds	r3, r3, r5
 8007060:	eb44 0406 	adc.w	r4, r4, r6
 8007064:	f04f 0100 	mov.w	r1, #0
 8007068:	f04f 0200 	mov.w	r2, #0
 800706c:	02a2      	lsls	r2, r4, #10
 800706e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007072:	0299      	lsls	r1, r3, #10
 8007074:	460b      	mov	r3, r1
 8007076:	4614      	mov	r4, r2
 8007078:	4618      	mov	r0, r3
 800707a:	4621      	mov	r1, r4
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f04f 0400 	mov.w	r4, #0
 8007082:	461a      	mov	r2, r3
 8007084:	4623      	mov	r3, r4
 8007086:	f7f9 f8fb 	bl	8000280 <__aeabi_uldivmod>
 800708a:	4603      	mov	r3, r0
 800708c:	460c      	mov	r4, r1
 800708e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007090:	4b0a      	ldr	r3, [pc, #40]	; (80070bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	0c1b      	lsrs	r3, r3, #16
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	3301      	adds	r3, #1
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a8:	60bb      	str	r3, [r7, #8]
      break;
 80070aa:	e002      	b.n	80070b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070ac:	4b04      	ldr	r3, [pc, #16]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80070ae:	60bb      	str	r3, [r7, #8]
      break;
 80070b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070b2:	68bb      	ldr	r3, [r7, #8]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070bc:	40023800 	.word	0x40023800
 80070c0:	00f42400 	.word	0x00f42400
 80070c4:	007a1200 	.word	0x007a1200

080070c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070c8:	b480      	push	{r7}
 80070ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070cc:	4b03      	ldr	r3, [pc, #12]	; (80070dc <HAL_RCC_GetHCLKFreq+0x14>)
 80070ce:	681b      	ldr	r3, [r3, #0]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	20000020 	.word	0x20000020

080070e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070e4:	f7ff fff0 	bl	80070c8 <HAL_RCC_GetHCLKFreq>
 80070e8:	4601      	mov	r1, r0
 80070ea:	4b05      	ldr	r3, [pc, #20]	; (8007100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	0a9b      	lsrs	r3, r3, #10
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	4a03      	ldr	r2, [pc, #12]	; (8007104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070f6:	5cd3      	ldrb	r3, [r2, r3]
 80070f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	40023800 	.word	0x40023800
 8007104:	0800c7fc 	.word	0x0800c7fc

08007108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800710c:	f7ff ffdc 	bl	80070c8 <HAL_RCC_GetHCLKFreq>
 8007110:	4601      	mov	r1, r0
 8007112:	4b05      	ldr	r3, [pc, #20]	; (8007128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	0b5b      	lsrs	r3, r3, #13
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	4a03      	ldr	r2, [pc, #12]	; (800712c <HAL_RCC_GetPCLK2Freq+0x24>)
 800711e:	5cd3      	ldrb	r3, [r2, r3]
 8007120:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007124:	4618      	mov	r0, r3
 8007126:	bd80      	pop	{r7, pc}
 8007128:	40023800 	.word	0x40023800
 800712c:	0800c7fc 	.word	0x0800c7fc

08007130 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	220f      	movs	r2, #15
 800713e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007140:	4b12      	ldr	r3, [pc, #72]	; (800718c <HAL_RCC_GetClockConfig+0x5c>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f003 0203 	and.w	r2, r3, #3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800714c:	4b0f      	ldr	r3, [pc, #60]	; (800718c <HAL_RCC_GetClockConfig+0x5c>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007158:	4b0c      	ldr	r3, [pc, #48]	; (800718c <HAL_RCC_GetClockConfig+0x5c>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007164:	4b09      	ldr	r3, [pc, #36]	; (800718c <HAL_RCC_GetClockConfig+0x5c>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	08db      	lsrs	r3, r3, #3
 800716a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007172:	4b07      	ldr	r3, [pc, #28]	; (8007190 <HAL_RCC_GetClockConfig+0x60>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 020f 	and.w	r2, r3, #15
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	601a      	str	r2, [r3, #0]
}
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40023800 	.word	0x40023800
 8007190:	40023c00 	.word	0x40023c00

08007194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e01d      	b.n	80071e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f815 	bl	80071ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3304      	adds	r3, #4
 80071d0:	4619      	mov	r1, r3
 80071d2:	4610      	mov	r0, r2
 80071d4:	f000 f968 	bl	80074a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80071f2:	bf00      	nop
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071fe:	b480      	push	{r7}
 8007200:	b085      	sub	sp, #20
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f042 0201 	orr.w	r2, r2, #1
 8007214:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 0307 	and.w	r3, r3, #7
 8007220:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b06      	cmp	r3, #6
 8007226:	d007      	beq.n	8007238 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0201 	orr.w	r2, r2, #1
 8007236:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b082      	sub	sp, #8
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	2b02      	cmp	r3, #2
 800725a:	d122      	bne.n	80072a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b02      	cmp	r3, #2
 8007268:	d11b      	bne.n	80072a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f06f 0202 	mvn.w	r2, #2
 8007272:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	f003 0303 	and.w	r3, r3, #3
 8007284:	2b00      	cmp	r3, #0
 8007286:	d003      	beq.n	8007290 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f8ee 	bl	800746a <HAL_TIM_IC_CaptureCallback>
 800728e:	e005      	b.n	800729c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f8e0 	bl	8007456 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f8f1 	bl	800747e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d122      	bne.n	80072f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f003 0304 	and.w	r3, r3, #4
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d11b      	bne.n	80072f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f06f 0204 	mvn.w	r2, #4
 80072c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f8c4 	bl	800746a <HAL_TIM_IC_CaptureCallback>
 80072e2:	e005      	b.n	80072f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f8b6 	bl	8007456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f8c7 	bl	800747e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	f003 0308 	and.w	r3, r3, #8
 8007300:	2b08      	cmp	r3, #8
 8007302:	d122      	bne.n	800734a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b08      	cmp	r3, #8
 8007310:	d11b      	bne.n	800734a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f06f 0208 	mvn.w	r2, #8
 800731a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2204      	movs	r2, #4
 8007320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	f003 0303 	and.w	r3, r3, #3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f89a 	bl	800746a <HAL_TIM_IC_CaptureCallback>
 8007336:	e005      	b.n	8007344 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f88c 	bl	8007456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f89d 	bl	800747e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	f003 0310 	and.w	r3, r3, #16
 8007354:	2b10      	cmp	r3, #16
 8007356:	d122      	bne.n	800739e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f003 0310 	and.w	r3, r3, #16
 8007362:	2b10      	cmp	r3, #16
 8007364:	d11b      	bne.n	800739e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f06f 0210 	mvn.w	r2, #16
 800736e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2208      	movs	r2, #8
 8007374:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f870 	bl	800746a <HAL_TIM_IC_CaptureCallback>
 800738a:	e005      	b.n	8007398 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f862 	bl	8007456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f873 	bl	800747e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d10e      	bne.n	80073ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d107      	bne.n	80073ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f06f 0201 	mvn.w	r2, #1
 80073c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7f9 faad 	bl	8000924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d4:	2b80      	cmp	r3, #128	; 0x80
 80073d6:	d10e      	bne.n	80073f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e2:	2b80      	cmp	r3, #128	; 0x80
 80073e4:	d107      	bne.n	80073f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f8e3 	bl	80075bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007400:	2b40      	cmp	r3, #64	; 0x40
 8007402:	d10e      	bne.n	8007422 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800740e:	2b40      	cmp	r3, #64	; 0x40
 8007410:	d107      	bne.n	8007422 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800741a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f838 	bl	8007492 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b20      	cmp	r3, #32
 800742e:	d10e      	bne.n	800744e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	f003 0320 	and.w	r3, r3, #32
 800743a:	2b20      	cmp	r3, #32
 800743c:	d107      	bne.n	800744e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f06f 0220 	mvn.w	r2, #32
 8007446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f8ad 	bl	80075a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800744e:	bf00      	nop
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800745e:	bf00      	nop
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007472:	bf00      	nop
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007486:	bf00      	nop
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
	...

080074a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a34      	ldr	r2, [pc, #208]	; (800758c <TIM_Base_SetConfig+0xe4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00f      	beq.n	80074e0 <TIM_Base_SetConfig+0x38>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c6:	d00b      	beq.n	80074e0 <TIM_Base_SetConfig+0x38>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a31      	ldr	r2, [pc, #196]	; (8007590 <TIM_Base_SetConfig+0xe8>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d007      	beq.n	80074e0 <TIM_Base_SetConfig+0x38>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a30      	ldr	r2, [pc, #192]	; (8007594 <TIM_Base_SetConfig+0xec>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d003      	beq.n	80074e0 <TIM_Base_SetConfig+0x38>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a2f      	ldr	r2, [pc, #188]	; (8007598 <TIM_Base_SetConfig+0xf0>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d108      	bne.n	80074f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a25      	ldr	r2, [pc, #148]	; (800758c <TIM_Base_SetConfig+0xe4>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d01b      	beq.n	8007532 <TIM_Base_SetConfig+0x8a>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007500:	d017      	beq.n	8007532 <TIM_Base_SetConfig+0x8a>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a22      	ldr	r2, [pc, #136]	; (8007590 <TIM_Base_SetConfig+0xe8>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d013      	beq.n	8007532 <TIM_Base_SetConfig+0x8a>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a21      	ldr	r2, [pc, #132]	; (8007594 <TIM_Base_SetConfig+0xec>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00f      	beq.n	8007532 <TIM_Base_SetConfig+0x8a>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a20      	ldr	r2, [pc, #128]	; (8007598 <TIM_Base_SetConfig+0xf0>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d00b      	beq.n	8007532 <TIM_Base_SetConfig+0x8a>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a1f      	ldr	r2, [pc, #124]	; (800759c <TIM_Base_SetConfig+0xf4>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d007      	beq.n	8007532 <TIM_Base_SetConfig+0x8a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a1e      	ldr	r2, [pc, #120]	; (80075a0 <TIM_Base_SetConfig+0xf8>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d003      	beq.n	8007532 <TIM_Base_SetConfig+0x8a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a1d      	ldr	r2, [pc, #116]	; (80075a4 <TIM_Base_SetConfig+0xfc>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d108      	bne.n	8007544 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	4313      	orrs	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	689a      	ldr	r2, [r3, #8]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a08      	ldr	r2, [pc, #32]	; (800758c <TIM_Base_SetConfig+0xe4>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d103      	bne.n	8007578 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	691a      	ldr	r2, [r3, #16]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	615a      	str	r2, [r3, #20]
}
 800757e:	bf00      	nop
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	40010000 	.word	0x40010000
 8007590:	40000400 	.word	0x40000400
 8007594:	40000800 	.word	0x40000800
 8007598:	40000c00 	.word	0x40000c00
 800759c:	40014000 	.word	0x40014000
 80075a0:	40014400 	.word	0x40014400
 80075a4:	40014800 	.word	0x40014800

080075a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e03f      	b.n	8007662 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f837 	bl	800766a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2224      	movs	r2, #36	; 0x24
 8007600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007612:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f915 	bl	8007844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	691a      	ldr	r2, [r3, #16]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007628:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	695a      	ldr	r2, [r3, #20]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007638:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007648:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2220      	movs	r2, #32
 8007654:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b088      	sub	sp, #32
 8007682:	af02      	add	r7, sp, #8
 8007684:	60f8      	str	r0, [r7, #12]
 8007686:	60b9      	str	r1, [r7, #8]
 8007688:	603b      	str	r3, [r7, #0]
 800768a:	4613      	mov	r3, r2
 800768c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b20      	cmp	r3, #32
 800769c:	f040 8083 	bne.w	80077a6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <HAL_UART_Transmit+0x2e>
 80076a6:	88fb      	ldrh	r3, [r7, #6]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e07b      	b.n	80077a8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d101      	bne.n	80076be <HAL_UART_Transmit+0x40>
 80076ba:	2302      	movs	r3, #2
 80076bc:	e074      	b.n	80077a8 <HAL_UART_Transmit+0x12a>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2221      	movs	r2, #33	; 0x21
 80076d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80076d4:	f7fd fd30 	bl	8005138 <HAL_GetTick>
 80076d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	88fa      	ldrh	r2, [r7, #6]
 80076de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	88fa      	ldrh	r2, [r7, #6]
 80076e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80076ee:	e042      	b.n	8007776 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007706:	d122      	bne.n	800774e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2200      	movs	r2, #0
 8007710:	2180      	movs	r1, #128	; 0x80
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f000 f84c 	bl	80077b0 <UART_WaitOnFlagUntilTimeout>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e042      	b.n	80077a8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007734:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d103      	bne.n	8007746 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	3302      	adds	r3, #2
 8007742:	60bb      	str	r3, [r7, #8]
 8007744:	e017      	b.n	8007776 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	3301      	adds	r3, #1
 800774a:	60bb      	str	r3, [r7, #8]
 800774c:	e013      	b.n	8007776 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2200      	movs	r2, #0
 8007756:	2180      	movs	r1, #128	; 0x80
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 f829 	bl	80077b0 <UART_WaitOnFlagUntilTimeout>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e01f      	b.n	80077a8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	1c5a      	adds	r2, r3, #1
 800776c:	60ba      	str	r2, [r7, #8]
 800776e:	781a      	ldrb	r2, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800777a:	b29b      	uxth	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1b7      	bne.n	80076f0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	2200      	movs	r2, #0
 8007788:	2140      	movs	r1, #64	; 0x40
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 f810 	bl	80077b0 <UART_WaitOnFlagUntilTimeout>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e006      	b.n	80077a8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2220      	movs	r2, #32
 800779e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	e000      	b.n	80077a8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80077a6:	2302      	movs	r3, #2
  }
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	603b      	str	r3, [r7, #0]
 80077bc:	4613      	mov	r3, r2
 80077be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077c0:	e02c      	b.n	800781c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c8:	d028      	beq.n	800781c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d007      	beq.n	80077e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80077d0:	f7fd fcb2 	bl	8005138 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d21d      	bcs.n	800781c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80077ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	695a      	ldr	r2, [r3, #20]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 0201 	bic.w	r2, r2, #1
 80077fe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2220      	movs	r2, #32
 8007804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2220      	movs	r2, #32
 800780c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e00f      	b.n	800783c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	4013      	ands	r3, r2
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	429a      	cmp	r2, r3
 800782a:	bf0c      	ite	eq
 800782c:	2301      	moveq	r3, #1
 800782e:	2300      	movne	r3, #0
 8007830:	b2db      	uxtb	r3, r3
 8007832:	461a      	mov	r2, r3
 8007834:	79fb      	ldrb	r3, [r7, #7]
 8007836:	429a      	cmp	r2, r3
 8007838:	d0c3      	beq.n	80077c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007848:	b085      	sub	sp, #20
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	689a      	ldr	r2, [r3, #8]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	431a      	orrs	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	431a      	orrs	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	69db      	ldr	r3, [r3, #28]
 8007878:	4313      	orrs	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007886:	f023 030c 	bic.w	r3, r3, #12
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6812      	ldr	r2, [r2, #0]
 800788e:	68f9      	ldr	r1, [r7, #12]
 8007890:	430b      	orrs	r3, r1
 8007892:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	699a      	ldr	r2, [r3, #24]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078b2:	f040 818b 	bne.w	8007bcc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4ac1      	ldr	r2, [pc, #772]	; (8007bc0 <UART_SetConfig+0x37c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d005      	beq.n	80078cc <UART_SetConfig+0x88>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4abf      	ldr	r2, [pc, #764]	; (8007bc4 <UART_SetConfig+0x380>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	f040 80bd 	bne.w	8007a46 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078cc:	f7ff fc1c 	bl	8007108 <HAL_RCC_GetPCLK2Freq>
 80078d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	461d      	mov	r5, r3
 80078d6:	f04f 0600 	mov.w	r6, #0
 80078da:	46a8      	mov	r8, r5
 80078dc:	46b1      	mov	r9, r6
 80078de:	eb18 0308 	adds.w	r3, r8, r8
 80078e2:	eb49 0409 	adc.w	r4, r9, r9
 80078e6:	4698      	mov	r8, r3
 80078e8:	46a1      	mov	r9, r4
 80078ea:	eb18 0805 	adds.w	r8, r8, r5
 80078ee:	eb49 0906 	adc.w	r9, r9, r6
 80078f2:	f04f 0100 	mov.w	r1, #0
 80078f6:	f04f 0200 	mov.w	r2, #0
 80078fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80078fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007902:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007906:	4688      	mov	r8, r1
 8007908:	4691      	mov	r9, r2
 800790a:	eb18 0005 	adds.w	r0, r8, r5
 800790e:	eb49 0106 	adc.w	r1, r9, r6
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	461d      	mov	r5, r3
 8007918:	f04f 0600 	mov.w	r6, #0
 800791c:	196b      	adds	r3, r5, r5
 800791e:	eb46 0406 	adc.w	r4, r6, r6
 8007922:	461a      	mov	r2, r3
 8007924:	4623      	mov	r3, r4
 8007926:	f7f8 fcab 	bl	8000280 <__aeabi_uldivmod>
 800792a:	4603      	mov	r3, r0
 800792c:	460c      	mov	r4, r1
 800792e:	461a      	mov	r2, r3
 8007930:	4ba5      	ldr	r3, [pc, #660]	; (8007bc8 <UART_SetConfig+0x384>)
 8007932:	fba3 2302 	umull	r2, r3, r3, r2
 8007936:	095b      	lsrs	r3, r3, #5
 8007938:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	461d      	mov	r5, r3
 8007940:	f04f 0600 	mov.w	r6, #0
 8007944:	46a9      	mov	r9, r5
 8007946:	46b2      	mov	sl, r6
 8007948:	eb19 0309 	adds.w	r3, r9, r9
 800794c:	eb4a 040a 	adc.w	r4, sl, sl
 8007950:	4699      	mov	r9, r3
 8007952:	46a2      	mov	sl, r4
 8007954:	eb19 0905 	adds.w	r9, r9, r5
 8007958:	eb4a 0a06 	adc.w	sl, sl, r6
 800795c:	f04f 0100 	mov.w	r1, #0
 8007960:	f04f 0200 	mov.w	r2, #0
 8007964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007968:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800796c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007970:	4689      	mov	r9, r1
 8007972:	4692      	mov	sl, r2
 8007974:	eb19 0005 	adds.w	r0, r9, r5
 8007978:	eb4a 0106 	adc.w	r1, sl, r6
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	461d      	mov	r5, r3
 8007982:	f04f 0600 	mov.w	r6, #0
 8007986:	196b      	adds	r3, r5, r5
 8007988:	eb46 0406 	adc.w	r4, r6, r6
 800798c:	461a      	mov	r2, r3
 800798e:	4623      	mov	r3, r4
 8007990:	f7f8 fc76 	bl	8000280 <__aeabi_uldivmod>
 8007994:	4603      	mov	r3, r0
 8007996:	460c      	mov	r4, r1
 8007998:	461a      	mov	r2, r3
 800799a:	4b8b      	ldr	r3, [pc, #556]	; (8007bc8 <UART_SetConfig+0x384>)
 800799c:	fba3 1302 	umull	r1, r3, r3, r2
 80079a0:	095b      	lsrs	r3, r3, #5
 80079a2:	2164      	movs	r1, #100	; 0x64
 80079a4:	fb01 f303 	mul.w	r3, r1, r3
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	00db      	lsls	r3, r3, #3
 80079ac:	3332      	adds	r3, #50	; 0x32
 80079ae:	4a86      	ldr	r2, [pc, #536]	; (8007bc8 <UART_SetConfig+0x384>)
 80079b0:	fba2 2303 	umull	r2, r3, r2, r3
 80079b4:	095b      	lsrs	r3, r3, #5
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079bc:	4498      	add	r8, r3
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	461d      	mov	r5, r3
 80079c2:	f04f 0600 	mov.w	r6, #0
 80079c6:	46a9      	mov	r9, r5
 80079c8:	46b2      	mov	sl, r6
 80079ca:	eb19 0309 	adds.w	r3, r9, r9
 80079ce:	eb4a 040a 	adc.w	r4, sl, sl
 80079d2:	4699      	mov	r9, r3
 80079d4:	46a2      	mov	sl, r4
 80079d6:	eb19 0905 	adds.w	r9, r9, r5
 80079da:	eb4a 0a06 	adc.w	sl, sl, r6
 80079de:	f04f 0100 	mov.w	r1, #0
 80079e2:	f04f 0200 	mov.w	r2, #0
 80079e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079f2:	4689      	mov	r9, r1
 80079f4:	4692      	mov	sl, r2
 80079f6:	eb19 0005 	adds.w	r0, r9, r5
 80079fa:	eb4a 0106 	adc.w	r1, sl, r6
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	461d      	mov	r5, r3
 8007a04:	f04f 0600 	mov.w	r6, #0
 8007a08:	196b      	adds	r3, r5, r5
 8007a0a:	eb46 0406 	adc.w	r4, r6, r6
 8007a0e:	461a      	mov	r2, r3
 8007a10:	4623      	mov	r3, r4
 8007a12:	f7f8 fc35 	bl	8000280 <__aeabi_uldivmod>
 8007a16:	4603      	mov	r3, r0
 8007a18:	460c      	mov	r4, r1
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	4b6a      	ldr	r3, [pc, #424]	; (8007bc8 <UART_SetConfig+0x384>)
 8007a1e:	fba3 1302 	umull	r1, r3, r3, r2
 8007a22:	095b      	lsrs	r3, r3, #5
 8007a24:	2164      	movs	r1, #100	; 0x64
 8007a26:	fb01 f303 	mul.w	r3, r1, r3
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	00db      	lsls	r3, r3, #3
 8007a2e:	3332      	adds	r3, #50	; 0x32
 8007a30:	4a65      	ldr	r2, [pc, #404]	; (8007bc8 <UART_SetConfig+0x384>)
 8007a32:	fba2 2303 	umull	r2, r3, r2, r3
 8007a36:	095b      	lsrs	r3, r3, #5
 8007a38:	f003 0207 	and.w	r2, r3, #7
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4442      	add	r2, r8
 8007a42:	609a      	str	r2, [r3, #8]
 8007a44:	e26f      	b.n	8007f26 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a46:	f7ff fb4b 	bl	80070e0 <HAL_RCC_GetPCLK1Freq>
 8007a4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	461d      	mov	r5, r3
 8007a50:	f04f 0600 	mov.w	r6, #0
 8007a54:	46a8      	mov	r8, r5
 8007a56:	46b1      	mov	r9, r6
 8007a58:	eb18 0308 	adds.w	r3, r8, r8
 8007a5c:	eb49 0409 	adc.w	r4, r9, r9
 8007a60:	4698      	mov	r8, r3
 8007a62:	46a1      	mov	r9, r4
 8007a64:	eb18 0805 	adds.w	r8, r8, r5
 8007a68:	eb49 0906 	adc.w	r9, r9, r6
 8007a6c:	f04f 0100 	mov.w	r1, #0
 8007a70:	f04f 0200 	mov.w	r2, #0
 8007a74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a80:	4688      	mov	r8, r1
 8007a82:	4691      	mov	r9, r2
 8007a84:	eb18 0005 	adds.w	r0, r8, r5
 8007a88:	eb49 0106 	adc.w	r1, r9, r6
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	461d      	mov	r5, r3
 8007a92:	f04f 0600 	mov.w	r6, #0
 8007a96:	196b      	adds	r3, r5, r5
 8007a98:	eb46 0406 	adc.w	r4, r6, r6
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	4623      	mov	r3, r4
 8007aa0:	f7f8 fbee 	bl	8000280 <__aeabi_uldivmod>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	4b47      	ldr	r3, [pc, #284]	; (8007bc8 <UART_SetConfig+0x384>)
 8007aac:	fba3 2302 	umull	r2, r3, r3, r2
 8007ab0:	095b      	lsrs	r3, r3, #5
 8007ab2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	461d      	mov	r5, r3
 8007aba:	f04f 0600 	mov.w	r6, #0
 8007abe:	46a9      	mov	r9, r5
 8007ac0:	46b2      	mov	sl, r6
 8007ac2:	eb19 0309 	adds.w	r3, r9, r9
 8007ac6:	eb4a 040a 	adc.w	r4, sl, sl
 8007aca:	4699      	mov	r9, r3
 8007acc:	46a2      	mov	sl, r4
 8007ace:	eb19 0905 	adds.w	r9, r9, r5
 8007ad2:	eb4a 0a06 	adc.w	sl, sl, r6
 8007ad6:	f04f 0100 	mov.w	r1, #0
 8007ada:	f04f 0200 	mov.w	r2, #0
 8007ade:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ae2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ae6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007aea:	4689      	mov	r9, r1
 8007aec:	4692      	mov	sl, r2
 8007aee:	eb19 0005 	adds.w	r0, r9, r5
 8007af2:	eb4a 0106 	adc.w	r1, sl, r6
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	461d      	mov	r5, r3
 8007afc:	f04f 0600 	mov.w	r6, #0
 8007b00:	196b      	adds	r3, r5, r5
 8007b02:	eb46 0406 	adc.w	r4, r6, r6
 8007b06:	461a      	mov	r2, r3
 8007b08:	4623      	mov	r3, r4
 8007b0a:	f7f8 fbb9 	bl	8000280 <__aeabi_uldivmod>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	460c      	mov	r4, r1
 8007b12:	461a      	mov	r2, r3
 8007b14:	4b2c      	ldr	r3, [pc, #176]	; (8007bc8 <UART_SetConfig+0x384>)
 8007b16:	fba3 1302 	umull	r1, r3, r3, r2
 8007b1a:	095b      	lsrs	r3, r3, #5
 8007b1c:	2164      	movs	r1, #100	; 0x64
 8007b1e:	fb01 f303 	mul.w	r3, r1, r3
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	00db      	lsls	r3, r3, #3
 8007b26:	3332      	adds	r3, #50	; 0x32
 8007b28:	4a27      	ldr	r2, [pc, #156]	; (8007bc8 <UART_SetConfig+0x384>)
 8007b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2e:	095b      	lsrs	r3, r3, #5
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b36:	4498      	add	r8, r3
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	461d      	mov	r5, r3
 8007b3c:	f04f 0600 	mov.w	r6, #0
 8007b40:	46a9      	mov	r9, r5
 8007b42:	46b2      	mov	sl, r6
 8007b44:	eb19 0309 	adds.w	r3, r9, r9
 8007b48:	eb4a 040a 	adc.w	r4, sl, sl
 8007b4c:	4699      	mov	r9, r3
 8007b4e:	46a2      	mov	sl, r4
 8007b50:	eb19 0905 	adds.w	r9, r9, r5
 8007b54:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b58:	f04f 0100 	mov.w	r1, #0
 8007b5c:	f04f 0200 	mov.w	r2, #0
 8007b60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b6c:	4689      	mov	r9, r1
 8007b6e:	4692      	mov	sl, r2
 8007b70:	eb19 0005 	adds.w	r0, r9, r5
 8007b74:	eb4a 0106 	adc.w	r1, sl, r6
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	461d      	mov	r5, r3
 8007b7e:	f04f 0600 	mov.w	r6, #0
 8007b82:	196b      	adds	r3, r5, r5
 8007b84:	eb46 0406 	adc.w	r4, r6, r6
 8007b88:	461a      	mov	r2, r3
 8007b8a:	4623      	mov	r3, r4
 8007b8c:	f7f8 fb78 	bl	8000280 <__aeabi_uldivmod>
 8007b90:	4603      	mov	r3, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	461a      	mov	r2, r3
 8007b96:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <UART_SetConfig+0x384>)
 8007b98:	fba3 1302 	umull	r1, r3, r3, r2
 8007b9c:	095b      	lsrs	r3, r3, #5
 8007b9e:	2164      	movs	r1, #100	; 0x64
 8007ba0:	fb01 f303 	mul.w	r3, r1, r3
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	3332      	adds	r3, #50	; 0x32
 8007baa:	4a07      	ldr	r2, [pc, #28]	; (8007bc8 <UART_SetConfig+0x384>)
 8007bac:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb0:	095b      	lsrs	r3, r3, #5
 8007bb2:	f003 0207 	and.w	r2, r3, #7
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4442      	add	r2, r8
 8007bbc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007bbe:	e1b2      	b.n	8007f26 <UART_SetConfig+0x6e2>
 8007bc0:	40011000 	.word	0x40011000
 8007bc4:	40011400 	.word	0x40011400
 8007bc8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4ad7      	ldr	r2, [pc, #860]	; (8007f30 <UART_SetConfig+0x6ec>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d005      	beq.n	8007be2 <UART_SetConfig+0x39e>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4ad6      	ldr	r2, [pc, #856]	; (8007f34 <UART_SetConfig+0x6f0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	f040 80d1 	bne.w	8007d84 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007be2:	f7ff fa91 	bl	8007108 <HAL_RCC_GetPCLK2Freq>
 8007be6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	469a      	mov	sl, r3
 8007bec:	f04f 0b00 	mov.w	fp, #0
 8007bf0:	46d0      	mov	r8, sl
 8007bf2:	46d9      	mov	r9, fp
 8007bf4:	eb18 0308 	adds.w	r3, r8, r8
 8007bf8:	eb49 0409 	adc.w	r4, r9, r9
 8007bfc:	4698      	mov	r8, r3
 8007bfe:	46a1      	mov	r9, r4
 8007c00:	eb18 080a 	adds.w	r8, r8, sl
 8007c04:	eb49 090b 	adc.w	r9, r9, fp
 8007c08:	f04f 0100 	mov.w	r1, #0
 8007c0c:	f04f 0200 	mov.w	r2, #0
 8007c10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c1c:	4688      	mov	r8, r1
 8007c1e:	4691      	mov	r9, r2
 8007c20:	eb1a 0508 	adds.w	r5, sl, r8
 8007c24:	eb4b 0609 	adc.w	r6, fp, r9
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	f04f 0200 	mov.w	r2, #0
 8007c32:	f04f 0300 	mov.w	r3, #0
 8007c36:	f04f 0400 	mov.w	r4, #0
 8007c3a:	0094      	lsls	r4, r2, #2
 8007c3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c40:	008b      	lsls	r3, r1, #2
 8007c42:	461a      	mov	r2, r3
 8007c44:	4623      	mov	r3, r4
 8007c46:	4628      	mov	r0, r5
 8007c48:	4631      	mov	r1, r6
 8007c4a:	f7f8 fb19 	bl	8000280 <__aeabi_uldivmod>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	460c      	mov	r4, r1
 8007c52:	461a      	mov	r2, r3
 8007c54:	4bb8      	ldr	r3, [pc, #736]	; (8007f38 <UART_SetConfig+0x6f4>)
 8007c56:	fba3 2302 	umull	r2, r3, r3, r2
 8007c5a:	095b      	lsrs	r3, r3, #5
 8007c5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	469b      	mov	fp, r3
 8007c64:	f04f 0c00 	mov.w	ip, #0
 8007c68:	46d9      	mov	r9, fp
 8007c6a:	46e2      	mov	sl, ip
 8007c6c:	eb19 0309 	adds.w	r3, r9, r9
 8007c70:	eb4a 040a 	adc.w	r4, sl, sl
 8007c74:	4699      	mov	r9, r3
 8007c76:	46a2      	mov	sl, r4
 8007c78:	eb19 090b 	adds.w	r9, r9, fp
 8007c7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c80:	f04f 0100 	mov.w	r1, #0
 8007c84:	f04f 0200 	mov.w	r2, #0
 8007c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c94:	4689      	mov	r9, r1
 8007c96:	4692      	mov	sl, r2
 8007c98:	eb1b 0509 	adds.w	r5, fp, r9
 8007c9c:	eb4c 060a 	adc.w	r6, ip, sl
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	f04f 0200 	mov.w	r2, #0
 8007caa:	f04f 0300 	mov.w	r3, #0
 8007cae:	f04f 0400 	mov.w	r4, #0
 8007cb2:	0094      	lsls	r4, r2, #2
 8007cb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cb8:	008b      	lsls	r3, r1, #2
 8007cba:	461a      	mov	r2, r3
 8007cbc:	4623      	mov	r3, r4
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	f7f8 fadd 	bl	8000280 <__aeabi_uldivmod>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	460c      	mov	r4, r1
 8007cca:	461a      	mov	r2, r3
 8007ccc:	4b9a      	ldr	r3, [pc, #616]	; (8007f38 <UART_SetConfig+0x6f4>)
 8007cce:	fba3 1302 	umull	r1, r3, r3, r2
 8007cd2:	095b      	lsrs	r3, r3, #5
 8007cd4:	2164      	movs	r1, #100	; 0x64
 8007cd6:	fb01 f303 	mul.w	r3, r1, r3
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	011b      	lsls	r3, r3, #4
 8007cde:	3332      	adds	r3, #50	; 0x32
 8007ce0:	4a95      	ldr	r2, [pc, #596]	; (8007f38 <UART_SetConfig+0x6f4>)
 8007ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce6:	095b      	lsrs	r3, r3, #5
 8007ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cec:	4498      	add	r8, r3
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	469b      	mov	fp, r3
 8007cf2:	f04f 0c00 	mov.w	ip, #0
 8007cf6:	46d9      	mov	r9, fp
 8007cf8:	46e2      	mov	sl, ip
 8007cfa:	eb19 0309 	adds.w	r3, r9, r9
 8007cfe:	eb4a 040a 	adc.w	r4, sl, sl
 8007d02:	4699      	mov	r9, r3
 8007d04:	46a2      	mov	sl, r4
 8007d06:	eb19 090b 	adds.w	r9, r9, fp
 8007d0a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d0e:	f04f 0100 	mov.w	r1, #0
 8007d12:	f04f 0200 	mov.w	r2, #0
 8007d16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d22:	4689      	mov	r9, r1
 8007d24:	4692      	mov	sl, r2
 8007d26:	eb1b 0509 	adds.w	r5, fp, r9
 8007d2a:	eb4c 060a 	adc.w	r6, ip, sl
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	4619      	mov	r1, r3
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	f04f 0400 	mov.w	r4, #0
 8007d40:	0094      	lsls	r4, r2, #2
 8007d42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d46:	008b      	lsls	r3, r1, #2
 8007d48:	461a      	mov	r2, r3
 8007d4a:	4623      	mov	r3, r4
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	4631      	mov	r1, r6
 8007d50:	f7f8 fa96 	bl	8000280 <__aeabi_uldivmod>
 8007d54:	4603      	mov	r3, r0
 8007d56:	460c      	mov	r4, r1
 8007d58:	461a      	mov	r2, r3
 8007d5a:	4b77      	ldr	r3, [pc, #476]	; (8007f38 <UART_SetConfig+0x6f4>)
 8007d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d60:	095b      	lsrs	r3, r3, #5
 8007d62:	2164      	movs	r1, #100	; 0x64
 8007d64:	fb01 f303 	mul.w	r3, r1, r3
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	011b      	lsls	r3, r3, #4
 8007d6c:	3332      	adds	r3, #50	; 0x32
 8007d6e:	4a72      	ldr	r2, [pc, #456]	; (8007f38 <UART_SetConfig+0x6f4>)
 8007d70:	fba2 2303 	umull	r2, r3, r2, r3
 8007d74:	095b      	lsrs	r3, r3, #5
 8007d76:	f003 020f 	and.w	r2, r3, #15
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4442      	add	r2, r8
 8007d80:	609a      	str	r2, [r3, #8]
 8007d82:	e0d0      	b.n	8007f26 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d84:	f7ff f9ac 	bl	80070e0 <HAL_RCC_GetPCLK1Freq>
 8007d88:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	469a      	mov	sl, r3
 8007d8e:	f04f 0b00 	mov.w	fp, #0
 8007d92:	46d0      	mov	r8, sl
 8007d94:	46d9      	mov	r9, fp
 8007d96:	eb18 0308 	adds.w	r3, r8, r8
 8007d9a:	eb49 0409 	adc.w	r4, r9, r9
 8007d9e:	4698      	mov	r8, r3
 8007da0:	46a1      	mov	r9, r4
 8007da2:	eb18 080a 	adds.w	r8, r8, sl
 8007da6:	eb49 090b 	adc.w	r9, r9, fp
 8007daa:	f04f 0100 	mov.w	r1, #0
 8007dae:	f04f 0200 	mov.w	r2, #0
 8007db2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007db6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007dba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007dbe:	4688      	mov	r8, r1
 8007dc0:	4691      	mov	r9, r2
 8007dc2:	eb1a 0508 	adds.w	r5, sl, r8
 8007dc6:	eb4b 0609 	adc.w	r6, fp, r9
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	f04f 0200 	mov.w	r2, #0
 8007dd4:	f04f 0300 	mov.w	r3, #0
 8007dd8:	f04f 0400 	mov.w	r4, #0
 8007ddc:	0094      	lsls	r4, r2, #2
 8007dde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007de2:	008b      	lsls	r3, r1, #2
 8007de4:	461a      	mov	r2, r3
 8007de6:	4623      	mov	r3, r4
 8007de8:	4628      	mov	r0, r5
 8007dea:	4631      	mov	r1, r6
 8007dec:	f7f8 fa48 	bl	8000280 <__aeabi_uldivmod>
 8007df0:	4603      	mov	r3, r0
 8007df2:	460c      	mov	r4, r1
 8007df4:	461a      	mov	r2, r3
 8007df6:	4b50      	ldr	r3, [pc, #320]	; (8007f38 <UART_SetConfig+0x6f4>)
 8007df8:	fba3 2302 	umull	r2, r3, r3, r2
 8007dfc:	095b      	lsrs	r3, r3, #5
 8007dfe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	469b      	mov	fp, r3
 8007e06:	f04f 0c00 	mov.w	ip, #0
 8007e0a:	46d9      	mov	r9, fp
 8007e0c:	46e2      	mov	sl, ip
 8007e0e:	eb19 0309 	adds.w	r3, r9, r9
 8007e12:	eb4a 040a 	adc.w	r4, sl, sl
 8007e16:	4699      	mov	r9, r3
 8007e18:	46a2      	mov	sl, r4
 8007e1a:	eb19 090b 	adds.w	r9, r9, fp
 8007e1e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e22:	f04f 0100 	mov.w	r1, #0
 8007e26:	f04f 0200 	mov.w	r2, #0
 8007e2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e36:	4689      	mov	r9, r1
 8007e38:	4692      	mov	sl, r2
 8007e3a:	eb1b 0509 	adds.w	r5, fp, r9
 8007e3e:	eb4c 060a 	adc.w	r6, ip, sl
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	4619      	mov	r1, r3
 8007e48:	f04f 0200 	mov.w	r2, #0
 8007e4c:	f04f 0300 	mov.w	r3, #0
 8007e50:	f04f 0400 	mov.w	r4, #0
 8007e54:	0094      	lsls	r4, r2, #2
 8007e56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e5a:	008b      	lsls	r3, r1, #2
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	4623      	mov	r3, r4
 8007e60:	4628      	mov	r0, r5
 8007e62:	4631      	mov	r1, r6
 8007e64:	f7f8 fa0c 	bl	8000280 <__aeabi_uldivmod>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	4b32      	ldr	r3, [pc, #200]	; (8007f38 <UART_SetConfig+0x6f4>)
 8007e70:	fba3 1302 	umull	r1, r3, r3, r2
 8007e74:	095b      	lsrs	r3, r3, #5
 8007e76:	2164      	movs	r1, #100	; 0x64
 8007e78:	fb01 f303 	mul.w	r3, r1, r3
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	011b      	lsls	r3, r3, #4
 8007e80:	3332      	adds	r3, #50	; 0x32
 8007e82:	4a2d      	ldr	r2, [pc, #180]	; (8007f38 <UART_SetConfig+0x6f4>)
 8007e84:	fba2 2303 	umull	r2, r3, r2, r3
 8007e88:	095b      	lsrs	r3, r3, #5
 8007e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e8e:	4498      	add	r8, r3
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	469b      	mov	fp, r3
 8007e94:	f04f 0c00 	mov.w	ip, #0
 8007e98:	46d9      	mov	r9, fp
 8007e9a:	46e2      	mov	sl, ip
 8007e9c:	eb19 0309 	adds.w	r3, r9, r9
 8007ea0:	eb4a 040a 	adc.w	r4, sl, sl
 8007ea4:	4699      	mov	r9, r3
 8007ea6:	46a2      	mov	sl, r4
 8007ea8:	eb19 090b 	adds.w	r9, r9, fp
 8007eac:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007eb0:	f04f 0100 	mov.w	r1, #0
 8007eb4:	f04f 0200 	mov.w	r2, #0
 8007eb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ebc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ec0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ec4:	4689      	mov	r9, r1
 8007ec6:	4692      	mov	sl, r2
 8007ec8:	eb1b 0509 	adds.w	r5, fp, r9
 8007ecc:	eb4c 060a 	adc.w	r6, ip, sl
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	f04f 0200 	mov.w	r2, #0
 8007eda:	f04f 0300 	mov.w	r3, #0
 8007ede:	f04f 0400 	mov.w	r4, #0
 8007ee2:	0094      	lsls	r4, r2, #2
 8007ee4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ee8:	008b      	lsls	r3, r1, #2
 8007eea:	461a      	mov	r2, r3
 8007eec:	4623      	mov	r3, r4
 8007eee:	4628      	mov	r0, r5
 8007ef0:	4631      	mov	r1, r6
 8007ef2:	f7f8 f9c5 	bl	8000280 <__aeabi_uldivmod>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	460c      	mov	r4, r1
 8007efa:	461a      	mov	r2, r3
 8007efc:	4b0e      	ldr	r3, [pc, #56]	; (8007f38 <UART_SetConfig+0x6f4>)
 8007efe:	fba3 1302 	umull	r1, r3, r3, r2
 8007f02:	095b      	lsrs	r3, r3, #5
 8007f04:	2164      	movs	r1, #100	; 0x64
 8007f06:	fb01 f303 	mul.w	r3, r1, r3
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	011b      	lsls	r3, r3, #4
 8007f0e:	3332      	adds	r3, #50	; 0x32
 8007f10:	4a09      	ldr	r2, [pc, #36]	; (8007f38 <UART_SetConfig+0x6f4>)
 8007f12:	fba2 2303 	umull	r2, r3, r2, r3
 8007f16:	095b      	lsrs	r3, r3, #5
 8007f18:	f003 020f 	and.w	r2, r3, #15
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4442      	add	r2, r8
 8007f22:	609a      	str	r2, [r3, #8]
}
 8007f24:	e7ff      	b.n	8007f26 <UART_SetConfig+0x6e2>
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f30:	40011000 	.word	0x40011000
 8007f34:	40011400 	.word	0x40011400
 8007f38:	51eb851f 	.word	0x51eb851f

08007f3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f3c:	b480      	push	{r7}
 8007f3e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007f40:	bf00      	nop
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
	...

08007f4c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f52:	f3ef 8305 	mrs	r3, IPSR
 8007f56:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10f      	bne.n	8007f7e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8007f62:	607b      	str	r3, [r7, #4]
  return(result);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d105      	bne.n	8007f76 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f6a:	f3ef 8311 	mrs	r3, BASEPRI
 8007f6e:	603b      	str	r3, [r7, #0]
  return(result);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d007      	beq.n	8007f86 <osKernelInitialize+0x3a>
 8007f76:	4b0e      	ldr	r3, [pc, #56]	; (8007fb0 <osKernelInitialize+0x64>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d103      	bne.n	8007f86 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007f7e:	f06f 0305 	mvn.w	r3, #5
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	e00c      	b.n	8007fa0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f86:	4b0a      	ldr	r3, [pc, #40]	; (8007fb0 <osKernelInitialize+0x64>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d105      	bne.n	8007f9a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f8e:	4b08      	ldr	r3, [pc, #32]	; (8007fb0 <osKernelInitialize+0x64>)
 8007f90:	2201      	movs	r2, #1
 8007f92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	60fb      	str	r3, [r7, #12]
 8007f98:	e002      	b.n	8007fa0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	20000194 	.word	0x20000194

08007fb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fba:	f3ef 8305 	mrs	r3, IPSR
 8007fbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10f      	bne.n	8007fe6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8007fca:	607b      	str	r3, [r7, #4]
  return(result);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d105      	bne.n	8007fde <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007fd2:	f3ef 8311 	mrs	r3, BASEPRI
 8007fd6:	603b      	str	r3, [r7, #0]
  return(result);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d007      	beq.n	8007fee <osKernelStart+0x3a>
 8007fde:	4b0f      	ldr	r3, [pc, #60]	; (800801c <osKernelStart+0x68>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d103      	bne.n	8007fee <osKernelStart+0x3a>
    stat = osErrorISR;
 8007fe6:	f06f 0305 	mvn.w	r3, #5
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	e010      	b.n	8008010 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007fee:	4b0b      	ldr	r3, [pc, #44]	; (800801c <osKernelStart+0x68>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d109      	bne.n	800800a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007ff6:	f7ff ffa1 	bl	8007f3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007ffa:	4b08      	ldr	r3, [pc, #32]	; (800801c <osKernelStart+0x68>)
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008000:	f001 fc34 	bl	800986c <vTaskStartScheduler>
      stat = osOK;
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	e002      	b.n	8008010 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800800a:	f04f 33ff 	mov.w	r3, #4294967295
 800800e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008010:	68fb      	ldr	r3, [r7, #12]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20000194 	.word	0x20000194

08008020 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008020:	b580      	push	{r7, lr}
 8008022:	b090      	sub	sp, #64	; 0x40
 8008024:	af04      	add	r7, sp, #16
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800802c:	2300      	movs	r3, #0
 800802e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008030:	f3ef 8305 	mrs	r3, IPSR
 8008034:	61fb      	str	r3, [r7, #28]
  return(result);
 8008036:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008038:	2b00      	cmp	r3, #0
 800803a:	f040 808f 	bne.w	800815c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800803e:	f3ef 8310 	mrs	r3, PRIMASK
 8008042:	61bb      	str	r3, [r7, #24]
  return(result);
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d105      	bne.n	8008056 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800804a:	f3ef 8311 	mrs	r3, BASEPRI
 800804e:	617b      	str	r3, [r7, #20]
  return(result);
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <osThreadNew+0x3e>
 8008056:	4b44      	ldr	r3, [pc, #272]	; (8008168 <osThreadNew+0x148>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b02      	cmp	r3, #2
 800805c:	d07e      	beq.n	800815c <osThreadNew+0x13c>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d07b      	beq.n	800815c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008064:	2380      	movs	r3, #128	; 0x80
 8008066:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008068:	2318      	movs	r3, #24
 800806a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800806c:	2300      	movs	r3, #0
 800806e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008070:	f04f 33ff 	mov.w	r3, #4294967295
 8008074:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d045      	beq.n	8008108 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <osThreadNew+0x6a>
        name = attr->name;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d002      	beq.n	8008098 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	2b00      	cmp	r3, #0
 800809c:	d008      	beq.n	80080b0 <osThreadNew+0x90>
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	2b38      	cmp	r3, #56	; 0x38
 80080a2:	d805      	bhi.n	80080b0 <osThreadNew+0x90>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <osThreadNew+0x94>
        return (NULL);
 80080b0:	2300      	movs	r3, #0
 80080b2:	e054      	b.n	800815e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d003      	beq.n	80080c4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	089b      	lsrs	r3, r3, #2
 80080c2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00e      	beq.n	80080ea <osThreadNew+0xca>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	2b5b      	cmp	r3, #91	; 0x5b
 80080d2:	d90a      	bls.n	80080ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d006      	beq.n	80080ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <osThreadNew+0xca>
        mem = 1;
 80080e4:	2301      	movs	r3, #1
 80080e6:	623b      	str	r3, [r7, #32]
 80080e8:	e010      	b.n	800810c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10c      	bne.n	800810c <osThreadNew+0xec>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d108      	bne.n	800810c <osThreadNew+0xec>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d104      	bne.n	800810c <osThreadNew+0xec>
          mem = 0;
 8008102:	2300      	movs	r3, #0
 8008104:	623b      	str	r3, [r7, #32]
 8008106:	e001      	b.n	800810c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d110      	bne.n	8008134 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800811a:	9202      	str	r2, [sp, #8]
 800811c:	9301      	str	r3, [sp, #4]
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f001 f9cd 	bl	80094c8 <xTaskCreateStatic>
 800812e:	4603      	mov	r3, r0
 8008130:	613b      	str	r3, [r7, #16]
 8008132:	e013      	b.n	800815c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d110      	bne.n	800815c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800813a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813c:	b29a      	uxth	r2, r3
 800813e:	f107 0310 	add.w	r3, r7, #16
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f001 fa15 	bl	800957c <xTaskCreate>
 8008152:	4603      	mov	r3, r0
 8008154:	2b01      	cmp	r3, #1
 8008156:	d001      	beq.n	800815c <osThreadNew+0x13c>
          hTask = NULL;
 8008158:	2300      	movs	r3, #0
 800815a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800815c:	693b      	ldr	r3, [r7, #16]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3730      	adds	r7, #48	; 0x30
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20000194 	.word	0x20000194

0800816c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008174:	f3ef 8305 	mrs	r3, IPSR
 8008178:	613b      	str	r3, [r7, #16]
  return(result);
 800817a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10f      	bne.n	80081a0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008180:	f3ef 8310 	mrs	r3, PRIMASK
 8008184:	60fb      	str	r3, [r7, #12]
  return(result);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d105      	bne.n	8008198 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800818c:	f3ef 8311 	mrs	r3, BASEPRI
 8008190:	60bb      	str	r3, [r7, #8]
  return(result);
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d007      	beq.n	80081a8 <osDelay+0x3c>
 8008198:	4b0a      	ldr	r3, [pc, #40]	; (80081c4 <osDelay+0x58>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b02      	cmp	r3, #2
 800819e:	d103      	bne.n	80081a8 <osDelay+0x3c>
    stat = osErrorISR;
 80081a0:	f06f 0305 	mvn.w	r3, #5
 80081a4:	617b      	str	r3, [r7, #20]
 80081a6:	e007      	b.n	80081b8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 fb26 	bl	8009804 <vTaskDelay>
    }
  }

  return (stat);
 80081b8:	697b      	ldr	r3, [r7, #20]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20000194 	.word	0x20000194

080081c8 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80081d0:	2300      	movs	r3, #0
 80081d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081d4:	f3ef 8305 	mrs	r3, IPSR
 80081d8:	617b      	str	r3, [r7, #20]
  return(result);
 80081da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d13d      	bne.n	800825c <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081e0:	f3ef 8310 	mrs	r3, PRIMASK
 80081e4:	613b      	str	r3, [r7, #16]
  return(result);
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d105      	bne.n	80081f8 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80081ec:	f3ef 8311 	mrs	r3, BASEPRI
 80081f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <osEventFlagsNew+0x38>
 80081f8:	4b1b      	ldr	r3, [pc, #108]	; (8008268 <osEventFlagsNew+0xa0>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d02d      	beq.n	800825c <osEventFlagsNew+0x94>
    mem = -1;
 8008200:	f04f 33ff 	mov.w	r3, #4294967295
 8008204:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d015      	beq.n	8008238 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d006      	beq.n	8008222 <osEventFlagsNew+0x5a>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	2b1f      	cmp	r3, #31
 800821a:	d902      	bls.n	8008222 <osEventFlagsNew+0x5a>
        mem = 1;
 800821c:	2301      	movs	r3, #1
 800821e:	61bb      	str	r3, [r7, #24]
 8008220:	e00c      	b.n	800823c <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d108      	bne.n	800823c <osEventFlagsNew+0x74>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d104      	bne.n	800823c <osEventFlagsNew+0x74>
          mem = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	61bb      	str	r3, [r7, #24]
 8008236:	e001      	b.n	800823c <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8008238:	2300      	movs	r3, #0
 800823a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d106      	bne.n	8008250 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	4618      	mov	r0, r3
 8008248:	f000 f956 	bl	80084f8 <xEventGroupCreateStatic>
 800824c:	61f8      	str	r0, [r7, #28]
 800824e:	e005      	b.n	800825c <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d102      	bne.n	800825c <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8008256:	f000 f984 	bl	8008562 <xEventGroupCreate>
 800825a:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800825c:	69fb      	ldr	r3, [r7, #28]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3720      	adds	r7, #32
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20000194 	.word	0x20000194

0800826c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d004      	beq.n	800828a <osEventFlagsSet+0x1e>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800828a:	f06f 0303 	mvn.w	r3, #3
 800828e:	61fb      	str	r3, [r7, #28]
 8008290:	e03a      	b.n	8008308 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008292:	f3ef 8305 	mrs	r3, IPSR
 8008296:	617b      	str	r3, [r7, #20]
  return(result);
 8008298:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10f      	bne.n	80082be <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800829e:	f3ef 8310 	mrs	r3, PRIMASK
 80082a2:	613b      	str	r3, [r7, #16]
  return(result);
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d105      	bne.n	80082b6 <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80082aa:	f3ef 8311 	mrs	r3, BASEPRI
 80082ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d021      	beq.n	80082fa <osEventFlagsSet+0x8e>
 80082b6:	4b17      	ldr	r3, [pc, #92]	; (8008314 <osEventFlagsSet+0xa8>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d11d      	bne.n	80082fa <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 80082be:	2300      	movs	r3, #0
 80082c0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80082c2:	f107 0308 	add.w	r3, r7, #8
 80082c6:	461a      	mov	r2, r3
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	69b8      	ldr	r0, [r7, #24]
 80082cc:	f000 fb60 	bl	8008990 <xEventGroupSetBitsFromISR>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d103      	bne.n	80082de <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 80082d6:	f06f 0302 	mvn.w	r3, #2
 80082da:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80082dc:	e013      	b.n	8008306 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00e      	beq.n	8008306 <osEventFlagsSet+0x9a>
 80082e8:	4b0b      	ldr	r3, [pc, #44]	; (8008318 <osEventFlagsSet+0xac>)
 80082ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80082f8:	e005      	b.n	8008306 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	69b8      	ldr	r0, [r7, #24]
 80082fe:	f000 fa82 	bl	8008806 <xEventGroupSetBits>
 8008302:	61f8      	str	r0, [r7, #28]
 8008304:	e000      	b.n	8008308 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8008306:	bf00      	nop
  }

  return (rflags);
 8008308:	69fb      	ldr	r3, [r7, #28]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3720      	adds	r7, #32
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20000194 	.word	0x20000194
 8008318:	e000ed04 	.word	0xe000ed04

0800831c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800831c:	b580      	push	{r7, lr}
 800831e:	b088      	sub	sp, #32
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d004      	beq.n	800833a <osEventFlagsClear+0x1e>
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800833a:	f06f 0303 	mvn.w	r3, #3
 800833e:	61fb      	str	r3, [r7, #28]
 8008340:	e029      	b.n	8008396 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008342:	f3ef 8305 	mrs	r3, IPSR
 8008346:	617b      	str	r3, [r7, #20]
  return(result);
 8008348:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10f      	bne.n	800836e <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800834e:	f3ef 8310 	mrs	r3, PRIMASK
 8008352:	613b      	str	r3, [r7, #16]
  return(result);
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d105      	bne.n	8008366 <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800835a:	f3ef 8311 	mrs	r3, BASEPRI
 800835e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d012      	beq.n	800838c <osEventFlagsClear+0x70>
 8008366:	4b0e      	ldr	r3, [pc, #56]	; (80083a0 <osEventFlagsClear+0x84>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b02      	cmp	r3, #2
 800836c:	d10e      	bne.n	800838c <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800836e:	69b8      	ldr	r0, [r7, #24]
 8008370:	f000 fa26 	bl	80087c0 <xEventGroupGetBitsFromISR>
 8008374:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	69b8      	ldr	r0, [r7, #24]
 800837a:	f000 fa0d 	bl	8008798 <xEventGroupClearBitsFromISR>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d108      	bne.n	8008396 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 8008384:	f06f 0302 	mvn.w	r3, #2
 8008388:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800838a:	e004      	b.n	8008396 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	69b8      	ldr	r0, [r7, #24]
 8008390:	f000 f9cc 	bl	800872c <xEventGroupClearBits>
 8008394:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8008396:	69fb      	ldr	r3, [r7, #28]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3720      	adds	r7, #32
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	20000194 	.word	0x20000194

080083a4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08e      	sub	sp, #56	; 0x38
 80083a8:	af02      	add	r7, sp, #8
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d004      	beq.n	80083c6 <osEventFlagsWait+0x22>
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80083c6:	f06f 0303 	mvn.w	r3, #3
 80083ca:	627b      	str	r3, [r7, #36]	; 0x24
 80083cc:	e059      	b.n	8008482 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083ce:	f3ef 8305 	mrs	r3, IPSR
 80083d2:	61fb      	str	r3, [r7, #28]
  return(result);
 80083d4:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10f      	bne.n	80083fa <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083da:	f3ef 8310 	mrs	r3, PRIMASK
 80083de:	61bb      	str	r3, [r7, #24]
  return(result);
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d105      	bne.n	80083f2 <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083e6:	f3ef 8311 	mrs	r3, BASEPRI
 80083ea:	617b      	str	r3, [r7, #20]
  return(result);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d007      	beq.n	8008402 <osEventFlagsWait+0x5e>
 80083f2:	4b26      	ldr	r3, [pc, #152]	; (800848c <osEventFlagsWait+0xe8>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d103      	bne.n	8008402 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 80083fa:	f06f 0305 	mvn.w	r3, #5
 80083fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008400:	e03f      	b.n	8008482 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f003 0301 	and.w	r3, r3, #1
 8008408:	2b00      	cmp	r3, #0
 800840a:	d002      	beq.n	8008412 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 800840c:	2301      	movs	r3, #1
 800840e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008410:	e001      	b.n	8008416 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8008412:	2300      	movs	r3, #0
 8008414:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f003 0302 	and.w	r3, r3, #2
 800841c:	2b00      	cmp	r3, #0
 800841e:	d002      	beq.n	8008426 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8008420:	2300      	movs	r3, #0
 8008422:	62bb      	str	r3, [r7, #40]	; 0x28
 8008424:	e001      	b.n	800842a <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8008426:	2301      	movs	r3, #1
 8008428:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008432:	68b9      	ldr	r1, [r7, #8]
 8008434:	6a38      	ldr	r0, [r7, #32]
 8008436:	f000 f8af 	bl	8008598 <xEventGroupWaitBits>
 800843a:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00e      	beq.n	8008464 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	429a      	cmp	r2, r3
 800844c:	d019      	beq.n	8008482 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d003      	beq.n	800845c <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8008454:	f06f 0301 	mvn.w	r3, #1
 8008458:	627b      	str	r3, [r7, #36]	; 0x24
 800845a:	e012      	b.n	8008482 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800845c:	f06f 0302 	mvn.w	r3, #2
 8008460:	627b      	str	r3, [r7, #36]	; 0x24
 8008462:	e00e      	b.n	8008482 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	4013      	ands	r3, r2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d109      	bne.n	8008482 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8008474:	f06f 0301 	mvn.w	r3, #1
 8008478:	627b      	str	r3, [r7, #36]	; 0x24
 800847a:	e002      	b.n	8008482 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800847c:	f06f 0302 	mvn.w	r3, #2
 8008480:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008484:	4618      	mov	r0, r3
 8008486:	3730      	adds	r7, #48	; 0x30
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	20000194 	.word	0x20000194

08008490 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4a07      	ldr	r2, [pc, #28]	; (80084bc <vApplicationGetIdleTaskMemory+0x2c>)
 80084a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	4a06      	ldr	r2, [pc, #24]	; (80084c0 <vApplicationGetIdleTaskMemory+0x30>)
 80084a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2280      	movs	r2, #128	; 0x80
 80084ac:	601a      	str	r2, [r3, #0]
}
 80084ae:	bf00      	nop
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	20000198 	.word	0x20000198
 80084c0:	200001f4 	.word	0x200001f4

080084c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	4a07      	ldr	r2, [pc, #28]	; (80084f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80084d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	4a06      	ldr	r2, [pc, #24]	; (80084f4 <vApplicationGetTimerTaskMemory+0x30>)
 80084da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084e2:	601a      	str	r2, [r3, #0]
}
 80084e4:	bf00      	nop
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	200003f4 	.word	0x200003f4
 80084f4:	20000450 	.word	0x20000450

080084f8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d109      	bne.n	800851a <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	613b      	str	r3, [r7, #16]
 8008518:	e7fe      	b.n	8008518 <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800851a:	2320      	movs	r3, #32
 800851c:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	2b20      	cmp	r3, #32
 8008522:	d009      	beq.n	8008538 <xEventGroupCreateStatic+0x40>
 8008524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	60fb      	str	r3, [r7, #12]
 8008536:	e7fe      	b.n	8008536 <xEventGroupCreateStatic+0x3e>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00a      	beq.n	8008558 <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	3304      	adds	r3, #4
 800854c:	4618      	mov	r0, r3
 800854e:	f000 fa33 	bl	80089b8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2201      	movs	r2, #1
 8008556:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8008558:	697b      	ldr	r3, [r7, #20]
	}
 800855a:	4618      	mov	r0, r3
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8008568:	2020      	movs	r0, #32
 800856a:	f002 fce9 	bl	800af40 <pvPortMalloc>
 800856e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00a      	beq.n	800858c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	3304      	adds	r3, #4
 8008580:	4618      	mov	r0, r3
 8008582:	f000 fa19 	bl	80089b8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800858c:	687b      	ldr	r3, [r7, #4]
	}
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
	...

08008598 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b090      	sub	sp, #64	; 0x40
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80085aa:	2300      	movs	r3, #0
 80085ac:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80085ae:	2300      	movs	r3, #0
 80085b0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d109      	bne.n	80085cc <xEventGroupWaitBits+0x34>
 80085b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	623b      	str	r3, [r7, #32]
 80085ca:	e7fe      	b.n	80085ca <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d009      	beq.n	80085ea <xEventGroupWaitBits+0x52>
 80085d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	61fb      	str	r3, [r7, #28]
 80085e8:	e7fe      	b.n	80085e8 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d109      	bne.n	8008604 <xEventGroupWaitBits+0x6c>
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	61bb      	str	r3, [r7, #24]
 8008602:	e7fe      	b.n	8008602 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008604:	f001 fe02 	bl	800a20c <xTaskGetSchedulerState>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d102      	bne.n	8008614 <xEventGroupWaitBits+0x7c>
 800860e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <xEventGroupWaitBits+0x80>
 8008614:	2301      	movs	r3, #1
 8008616:	e000      	b.n	800861a <xEventGroupWaitBits+0x82>
 8008618:	2300      	movs	r3, #0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d109      	bne.n	8008632 <xEventGroupWaitBits+0x9a>
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	e7fe      	b.n	8008630 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8008632:	f001 f97f 	bl	8009934 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	68b9      	ldr	r1, [r7, #8]
 8008640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008642:	f000 f983 	bl	800894c <prvTestWaitCondition>
 8008646:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00e      	beq.n	800866c <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800864e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008650:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8008652:	2300      	movs	r3, #0
 8008654:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d028      	beq.n	80086ae <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800865c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	43db      	mvns	r3, r3
 8008664:	401a      	ands	r2, r3
 8008666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008668:	601a      	str	r2, [r3, #0]
 800866a:	e020      	b.n	80086ae <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800866c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800866e:	2b00      	cmp	r3, #0
 8008670:	d104      	bne.n	800867c <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8008672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008674:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8008676:	2301      	movs	r3, #1
 8008678:	633b      	str	r3, [r7, #48]	; 0x30
 800867a:	e018      	b.n	80086ae <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008688:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d003      	beq.n	8008698 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8008690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008692:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008696:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8008698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869a:	1d18      	adds	r0, r3, #4
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a0:	4313      	orrs	r3, r2
 80086a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086a4:	4619      	mov	r1, r3
 80086a6:	f001 fb37 	bl	8009d18 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80086aa:	2300      	movs	r3, #0
 80086ac:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80086ae:	f001 f94f 	bl	8009950 <xTaskResumeAll>
 80086b2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80086b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d031      	beq.n	800871e <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d107      	bne.n	80086d0 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 80086c0:	4b19      	ldr	r3, [pc, #100]	; (8008728 <xEventGroupWaitBits+0x190>)
 80086c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80086d0:	f001 fe26 	bl	800a320 <uxTaskResetEventItemValue>
 80086d4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80086d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d11a      	bne.n	8008716 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 80086e0:	f002 fb14 	bl	800ad0c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80086e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	68b9      	ldr	r1, [r7, #8]
 80086ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80086f0:	f000 f92c 	bl	800894c <prvTestWaitCondition>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d009      	beq.n	800870e <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d006      	beq.n	800870e <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	43db      	mvns	r3, r3
 8008708:	401a      	ands	r2, r3
 800870a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800870e:	2301      	movs	r3, #1
 8008710:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8008712:	f002 fb29 	bl	800ad68 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008718:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800871c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800871e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008720:	4618      	mov	r0, r3
 8008722:	3740      	adds	r7, #64	; 0x40
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	e000ed04 	.word	0xe000ed04

0800872c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d109      	bne.n	8008754 <xEventGroupClearBits+0x28>
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	60fb      	str	r3, [r7, #12]
 8008752:	e7fe      	b.n	8008752 <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d009      	beq.n	8008772 <xEventGroupClearBits+0x46>
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	60bb      	str	r3, [r7, #8]
 8008770:	e7fe      	b.n	8008770 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 8008772:	f002 facb 	bl	800ad0c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	43db      	mvns	r3, r3
 8008784:	401a      	ands	r2, r3
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800878a:	f002 faed 	bl	800ad68 <vPortExitCritical>

	return uxReturn;
 800878e:	693b      	ldr	r3, [r7, #16]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80087a2:	2300      	movs	r3, #0
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	4804      	ldr	r0, [pc, #16]	; (80087bc <xEventGroupClearBitsFromISR+0x24>)
 80087aa:	f002 f96b 	bl	800aa84 <xTimerPendFunctionCallFromISR>
 80087ae:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80087b0:	68fb      	ldr	r3, [r7, #12]
	}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	08008933 	.word	0x08008933

080087c0 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80087c0:	b480      	push	{r7}
 80087c2:	b089      	sub	sp, #36	; 0x24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80087cc:	f3ef 8211 	mrs	r2, BASEPRI
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	60fa      	str	r2, [r7, #12]
 80087e2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80087e4:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087e6:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	617b      	str	r3, [r7, #20]
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f383 8811 	msr	BASEPRI, r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80087f8:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80087fa:	4618      	mov	r0, r3
 80087fc:	3724      	adds	r7, #36	; 0x24
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b08e      	sub	sp, #56	; 0x38
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008810:	2300      	movs	r3, #0
 8008812:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8008818:	2300      	movs	r3, #0
 800881a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d109      	bne.n	8008836 <xEventGroupSetBits+0x30>
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	613b      	str	r3, [r7, #16]
 8008834:	e7fe      	b.n	8008834 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d009      	beq.n	8008854 <xEventGroupSetBits+0x4e>
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	60fb      	str	r3, [r7, #12]
 8008852:	e7fe      	b.n	8008852 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8008854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008856:	3304      	adds	r3, #4
 8008858:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	3308      	adds	r3, #8
 800885e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8008860:	f001 f868 	bl	8009934 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	431a      	orrs	r2, r3
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008876:	e03c      	b.n	80088f2 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8008878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800887e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008884:	2300      	movs	r3, #0
 8008886:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800888e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008896:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d108      	bne.n	80088b4 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80088a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	4013      	ands	r3, r2
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00b      	beq.n	80088c6 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 80088ae:	2301      	movs	r3, #1
 80088b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088b2:	e008      	b.n	80088c6 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80088b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	4013      	ands	r3, r2
 80088bc:	69ba      	ldr	r2, [r7, #24]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d101      	bne.n	80088c6 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80088c2:	2301      	movs	r3, #1
 80088c4:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80088c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d010      	beq.n	80088ee <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d003      	beq.n	80088de <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80088d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	4313      	orrs	r3, r2
 80088dc:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80088e6:	4619      	mov	r1, r3
 80088e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80088ea:	f001 fadb 	bl	8009ea4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80088f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d1be      	bne.n	8008878 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	43db      	mvns	r3, r3
 8008902:	401a      	ands	r2, r3
 8008904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008906:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008908:	f001 f822 	bl	8009950 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800890c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890e:	681b      	ldr	r3, [r3, #0]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3738      	adds	r7, #56	; 0x38
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8008922:	6839      	ldr	r1, [r7, #0]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff ff6e 	bl	8008806 <xEventGroupSetBits>
}
 800892a:	bf00      	nop
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b082      	sub	sp, #8
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7ff fef4 	bl	800872c <xEventGroupClearBits>
}
 8008944:	bf00      	nop
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800894c:	b480      	push	{r7}
 800894e:	b087      	sub	sp, #28
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8008958:	2300      	movs	r3, #0
 800895a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d107      	bne.n	8008972 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	4013      	ands	r3, r2
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00a      	beq.n	8008982 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800896c:	2301      	movs	r3, #1
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	e007      	b.n	8008982 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	4013      	ands	r3, r2
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	429a      	cmp	r2, r3
 800897c:	d101      	bne.n	8008982 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800897e:	2301      	movs	r3, #1
 8008980:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8008982:	697b      	ldr	r3, [r7, #20]
}
 8008984:	4618      	mov	r0, r3
 8008986:	371c      	adds	r7, #28
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	68f9      	ldr	r1, [r7, #12]
 80089a2:	4804      	ldr	r0, [pc, #16]	; (80089b4 <xEventGroupSetBitsFromISR+0x24>)
 80089a4:	f002 f86e 	bl	800aa84 <xTimerPendFunctionCallFromISR>
 80089a8:	6178      	str	r0, [r7, #20]

		return xReturn;
 80089aa:	697b      	ldr	r3, [r7, #20]
	}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	08008919 	.word	0x08008919

080089b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f103 0208 	add.w	r2, r3, #8
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f04f 32ff 	mov.w	r2, #4294967295
 80089d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f103 0208 	add.w	r2, r3, #8
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f103 0208 	add.w	r2, r3, #8
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a06:	bf00      	nop
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a12:	b480      	push	{r7}
 8008a14:	b085      	sub	sp, #20
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	689a      	ldr	r2, [r3, #8]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	683a      	ldr	r2, [r7, #0]
 8008a36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	1c5a      	adds	r2, r3, #1
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	601a      	str	r2, [r3, #0]
}
 8008a4e:	bf00      	nop
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b085      	sub	sp, #20
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a70:	d103      	bne.n	8008a7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	e00c      	b.n	8008a94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	3308      	adds	r3, #8
 8008a7e:	60fb      	str	r3, [r7, #12]
 8008a80:	e002      	b.n	8008a88 <vListInsert+0x2e>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	60fb      	str	r3, [r7, #12]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d2f6      	bcs.n	8008a82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	685a      	ldr	r2, [r3, #4]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	1c5a      	adds	r2, r3, #1
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	601a      	str	r2, [r3, #0]
}
 8008ac0:	bf00      	nop
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	6892      	ldr	r2, [r2, #8]
 8008ae2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	6852      	ldr	r2, [r2, #4]
 8008aec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d103      	bne.n	8008b00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	689a      	ldr	r2, [r3, #8]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	1e5a      	subs	r2, r3, #1
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d109      	bne.n	8008b48 <xQueueGenericReset+0x28>
 8008b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b38:	f383 8811 	msr	BASEPRI, r3
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	60bb      	str	r3, [r7, #8]
 8008b46:	e7fe      	b.n	8008b46 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008b48:	f002 f8e0 	bl	800ad0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b54:	68f9      	ldr	r1, [r7, #12]
 8008b56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b58:	fb01 f303 	mul.w	r3, r1, r3
 8008b5c:	441a      	add	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	68f9      	ldr	r1, [r7, #12]
 8008b7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b7e:	fb01 f303 	mul.w	r3, r1, r3
 8008b82:	441a      	add	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	22ff      	movs	r2, #255	; 0xff
 8008b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	22ff      	movs	r2, #255	; 0xff
 8008b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d114      	bne.n	8008bc8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d01a      	beq.n	8008bdc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	3310      	adds	r3, #16
 8008baa:	4618      	mov	r0, r3
 8008bac:	f001 f918 	bl	8009de0 <xTaskRemoveFromEventList>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d012      	beq.n	8008bdc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008bb6:	4b0d      	ldr	r3, [pc, #52]	; (8008bec <xQueueGenericReset+0xcc>)
 8008bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bbc:	601a      	str	r2, [r3, #0]
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	e009      	b.n	8008bdc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	3310      	adds	r3, #16
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7ff fef3 	bl	80089b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3324      	adds	r3, #36	; 0x24
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7ff feee 	bl	80089b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008bdc:	f002 f8c4 	bl	800ad68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008be0:	2301      	movs	r3, #1
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	e000ed04 	.word	0xe000ed04

08008bf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b08e      	sub	sp, #56	; 0x38
 8008bf4:	af02      	add	r7, sp, #8
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
 8008bfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d109      	bne.n	8008c18 <xQueueGenericCreateStatic+0x28>
 8008c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c16:	e7fe      	b.n	8008c16 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d109      	bne.n	8008c32 <xQueueGenericCreateStatic+0x42>
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c30:	e7fe      	b.n	8008c30 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d002      	beq.n	8008c3e <xQueueGenericCreateStatic+0x4e>
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d001      	beq.n	8008c42 <xQueueGenericCreateStatic+0x52>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e000      	b.n	8008c44 <xQueueGenericCreateStatic+0x54>
 8008c42:	2300      	movs	r3, #0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d109      	bne.n	8008c5c <xQueueGenericCreateStatic+0x6c>
 8008c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	623b      	str	r3, [r7, #32]
 8008c5a:	e7fe      	b.n	8008c5a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d102      	bne.n	8008c68 <xQueueGenericCreateStatic+0x78>
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d101      	bne.n	8008c6c <xQueueGenericCreateStatic+0x7c>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e000      	b.n	8008c6e <xQueueGenericCreateStatic+0x7e>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d109      	bne.n	8008c86 <xQueueGenericCreateStatic+0x96>
 8008c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c76:	f383 8811 	msr	BASEPRI, r3
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	61fb      	str	r3, [r7, #28]
 8008c84:	e7fe      	b.n	8008c84 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c86:	2350      	movs	r3, #80	; 0x50
 8008c88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b50      	cmp	r3, #80	; 0x50
 8008c8e:	d009      	beq.n	8008ca4 <xQueueGenericCreateStatic+0xb4>
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	61bb      	str	r3, [r7, #24]
 8008ca2:	e7fe      	b.n	8008ca2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ca4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00d      	beq.n	8008ccc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cb8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	68b9      	ldr	r1, [r7, #8]
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 f805 	bl	8008cd6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3730      	adds	r7, #48	; 0x30
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b084      	sub	sp, #16
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	60f8      	str	r0, [r7, #12]
 8008cde:	60b9      	str	r1, [r7, #8]
 8008ce0:	607a      	str	r2, [r7, #4]
 8008ce2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d103      	bne.n	8008cf2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	601a      	str	r2, [r3, #0]
 8008cf0:	e002      	b.n	8008cf8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d04:	2101      	movs	r1, #1
 8008d06:	69b8      	ldr	r0, [r7, #24]
 8008d08:	f7ff ff0a 	bl	8008b20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	78fa      	ldrb	r2, [r7, #3]
 8008d10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d14:	bf00      	nop
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08e      	sub	sp, #56	; 0x38
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
 8008d28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d109      	bne.n	8008d4c <xQueueGenericSend+0x30>
 8008d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3c:	f383 8811 	msr	BASEPRI, r3
 8008d40:	f3bf 8f6f 	isb	sy
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d4a:	e7fe      	b.n	8008d4a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d103      	bne.n	8008d5a <xQueueGenericSend+0x3e>
 8008d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <xQueueGenericSend+0x42>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e000      	b.n	8008d60 <xQueueGenericSend+0x44>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d109      	bne.n	8008d78 <xQueueGenericSend+0x5c>
 8008d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	627b      	str	r3, [r7, #36]	; 0x24
 8008d76:	e7fe      	b.n	8008d76 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d103      	bne.n	8008d86 <xQueueGenericSend+0x6a>
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d101      	bne.n	8008d8a <xQueueGenericSend+0x6e>
 8008d86:	2301      	movs	r3, #1
 8008d88:	e000      	b.n	8008d8c <xQueueGenericSend+0x70>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d109      	bne.n	8008da4 <xQueueGenericSend+0x88>
 8008d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	623b      	str	r3, [r7, #32]
 8008da2:	e7fe      	b.n	8008da2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008da4:	f001 fa32 	bl	800a20c <xTaskGetSchedulerState>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d102      	bne.n	8008db4 <xQueueGenericSend+0x98>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <xQueueGenericSend+0x9c>
 8008db4:	2301      	movs	r3, #1
 8008db6:	e000      	b.n	8008dba <xQueueGenericSend+0x9e>
 8008db8:	2300      	movs	r3, #0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d109      	bne.n	8008dd2 <xQueueGenericSend+0xb6>
 8008dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	61fb      	str	r3, [r7, #28]
 8008dd0:	e7fe      	b.n	8008dd0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008dd2:	f001 ff9b 	bl	800ad0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d302      	bcc.n	8008de8 <xQueueGenericSend+0xcc>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d129      	bne.n	8008e3c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	68b9      	ldr	r1, [r7, #8]
 8008dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dee:	f000 f9ff 	bl	80091f0 <prvCopyDataToQueue>
 8008df2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d010      	beq.n	8008e1e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfe:	3324      	adds	r3, #36	; 0x24
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 ffed 	bl	8009de0 <xTaskRemoveFromEventList>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d013      	beq.n	8008e34 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e0c:	4b3f      	ldr	r3, [pc, #252]	; (8008f0c <xQueueGenericSend+0x1f0>)
 8008e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	e00a      	b.n	8008e34 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d007      	beq.n	8008e34 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e24:	4b39      	ldr	r3, [pc, #228]	; (8008f0c <xQueueGenericSend+0x1f0>)
 8008e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e34:	f001 ff98 	bl	800ad68 <vPortExitCritical>
				return pdPASS;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e063      	b.n	8008f04 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d103      	bne.n	8008e4a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e42:	f001 ff91 	bl	800ad68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e46:	2300      	movs	r3, #0
 8008e48:	e05c      	b.n	8008f04 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d106      	bne.n	8008e5e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e50:	f107 0314 	add.w	r3, r7, #20
 8008e54:	4618      	mov	r0, r3
 8008e56:	f001 f885 	bl	8009f64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e5e:	f001 ff83 	bl	800ad68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e62:	f000 fd67 	bl	8009934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e66:	f001 ff51 	bl	800ad0c <vPortEnterCritical>
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e70:	b25b      	sxtb	r3, r3
 8008e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e76:	d103      	bne.n	8008e80 <xQueueGenericSend+0x164>
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e86:	b25b      	sxtb	r3, r3
 8008e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8c:	d103      	bne.n	8008e96 <xQueueGenericSend+0x17a>
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	2200      	movs	r2, #0
 8008e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e96:	f001 ff67 	bl	800ad68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e9a:	1d3a      	adds	r2, r7, #4
 8008e9c:	f107 0314 	add.w	r3, r7, #20
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f001 f874 	bl	8009f90 <xTaskCheckForTimeOut>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d124      	bne.n	8008ef8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008eae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eb0:	f000 fa96 	bl	80093e0 <prvIsQueueFull>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d018      	beq.n	8008eec <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebc:	3310      	adds	r3, #16
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 ff04 	bl	8009cd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eca:	f000 fa21 	bl	8009310 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008ece:	f000 fd3f 	bl	8009950 <xTaskResumeAll>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f47f af7c 	bne.w	8008dd2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008eda:	4b0c      	ldr	r3, [pc, #48]	; (8008f0c <xQueueGenericSend+0x1f0>)
 8008edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ee0:	601a      	str	r2, [r3, #0]
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	e772      	b.n	8008dd2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eee:	f000 fa0f 	bl	8009310 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ef2:	f000 fd2d 	bl	8009950 <xTaskResumeAll>
 8008ef6:	e76c      	b.n	8008dd2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008efa:	f000 fa09 	bl	8009310 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008efe:	f000 fd27 	bl	8009950 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3738      	adds	r7, #56	; 0x38
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	e000ed04 	.word	0xe000ed04

08008f10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b08e      	sub	sp, #56	; 0x38
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
 8008f1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d109      	bne.n	8008f3c <xQueueGenericSendFromISR+0x2c>
 8008f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2c:	f383 8811 	msr	BASEPRI, r3
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
 8008f3a:	e7fe      	b.n	8008f3a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d103      	bne.n	8008f4a <xQueueGenericSendFromISR+0x3a>
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <xQueueGenericSendFromISR+0x3e>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e000      	b.n	8008f50 <xQueueGenericSendFromISR+0x40>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d109      	bne.n	8008f68 <xQueueGenericSendFromISR+0x58>
 8008f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	623b      	str	r3, [r7, #32]
 8008f66:	e7fe      	b.n	8008f66 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d103      	bne.n	8008f76 <xQueueGenericSendFromISR+0x66>
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d101      	bne.n	8008f7a <xQueueGenericSendFromISR+0x6a>
 8008f76:	2301      	movs	r3, #1
 8008f78:	e000      	b.n	8008f7c <xQueueGenericSendFromISR+0x6c>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d109      	bne.n	8008f94 <xQueueGenericSendFromISR+0x84>
 8008f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	61fb      	str	r3, [r7, #28]
 8008f92:	e7fe      	b.n	8008f92 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f94:	f001 ff96 	bl	800aec4 <vPortValidateInterruptPriority>
	__asm volatile
 8008f98:	f3ef 8211 	mrs	r2, BASEPRI
 8008f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	61ba      	str	r2, [r7, #24]
 8008fae:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008fb0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d302      	bcc.n	8008fc6 <xQueueGenericSendFromISR+0xb6>
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d12c      	bne.n	8009020 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	68b9      	ldr	r1, [r7, #8]
 8008fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fd6:	f000 f90b 	bl	80091f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008fda:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe2:	d112      	bne.n	800900a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d016      	beq.n	800901a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fee:	3324      	adds	r3, #36	; 0x24
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 fef5 	bl	8009de0 <xTaskRemoveFromEventList>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00e      	beq.n	800901a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00b      	beq.n	800901a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	e007      	b.n	800901a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800900a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800900e:	3301      	adds	r3, #1
 8009010:	b2db      	uxtb	r3, r3
 8009012:	b25a      	sxtb	r2, r3
 8009014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800901a:	2301      	movs	r3, #1
 800901c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800901e:	e001      	b.n	8009024 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009020:	2300      	movs	r3, #0
 8009022:	637b      	str	r3, [r7, #52]	; 0x34
 8009024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009026:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800902e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009030:	4618      	mov	r0, r3
 8009032:	3738      	adds	r7, #56	; 0x38
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b08c      	sub	sp, #48	; 0x30
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009044:	2300      	movs	r3, #0
 8009046:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800904c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904e:	2b00      	cmp	r3, #0
 8009050:	d109      	bne.n	8009066 <xQueueReceive+0x2e>
	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	623b      	str	r3, [r7, #32]
 8009064:	e7fe      	b.n	8009064 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d103      	bne.n	8009074 <xQueueReceive+0x3c>
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009070:	2b00      	cmp	r3, #0
 8009072:	d101      	bne.n	8009078 <xQueueReceive+0x40>
 8009074:	2301      	movs	r3, #1
 8009076:	e000      	b.n	800907a <xQueueReceive+0x42>
 8009078:	2300      	movs	r3, #0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d109      	bne.n	8009092 <xQueueReceive+0x5a>
 800907e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009082:	f383 8811 	msr	BASEPRI, r3
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	61fb      	str	r3, [r7, #28]
 8009090:	e7fe      	b.n	8009090 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009092:	f001 f8bb 	bl	800a20c <xTaskGetSchedulerState>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d102      	bne.n	80090a2 <xQueueReceive+0x6a>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <xQueueReceive+0x6e>
 80090a2:	2301      	movs	r3, #1
 80090a4:	e000      	b.n	80090a8 <xQueueReceive+0x70>
 80090a6:	2300      	movs	r3, #0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d109      	bne.n	80090c0 <xQueueReceive+0x88>
 80090ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	61bb      	str	r3, [r7, #24]
 80090be:	e7fe      	b.n	80090be <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090c0:	f001 fe24 	bl	800ad0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d01f      	beq.n	8009110 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80090d0:	68b9      	ldr	r1, [r7, #8]
 80090d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090d4:	f000 f8f6 	bl	80092c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	1e5a      	subs	r2, r3, #1
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00f      	beq.n	8009108 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ea:	3310      	adds	r3, #16
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 fe77 	bl	8009de0 <xTaskRemoveFromEventList>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d007      	beq.n	8009108 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80090f8:	4b3c      	ldr	r3, [pc, #240]	; (80091ec <xQueueReceive+0x1b4>)
 80090fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009108:	f001 fe2e 	bl	800ad68 <vPortExitCritical>
				return pdPASS;
 800910c:	2301      	movs	r3, #1
 800910e:	e069      	b.n	80091e4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d103      	bne.n	800911e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009116:	f001 fe27 	bl	800ad68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800911a:	2300      	movs	r3, #0
 800911c:	e062      	b.n	80091e4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800911e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009120:	2b00      	cmp	r3, #0
 8009122:	d106      	bne.n	8009132 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009124:	f107 0310 	add.w	r3, r7, #16
 8009128:	4618      	mov	r0, r3
 800912a:	f000 ff1b 	bl	8009f64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800912e:	2301      	movs	r3, #1
 8009130:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009132:	f001 fe19 	bl	800ad68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009136:	f000 fbfd 	bl	8009934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800913a:	f001 fde7 	bl	800ad0c <vPortEnterCritical>
 800913e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009144:	b25b      	sxtb	r3, r3
 8009146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914a:	d103      	bne.n	8009154 <xQueueReceive+0x11c>
 800914c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914e:	2200      	movs	r2, #0
 8009150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800915a:	b25b      	sxtb	r3, r3
 800915c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009160:	d103      	bne.n	800916a <xQueueReceive+0x132>
 8009162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009164:	2200      	movs	r2, #0
 8009166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800916a:	f001 fdfd 	bl	800ad68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800916e:	1d3a      	adds	r2, r7, #4
 8009170:	f107 0310 	add.w	r3, r7, #16
 8009174:	4611      	mov	r1, r2
 8009176:	4618      	mov	r0, r3
 8009178:	f000 ff0a 	bl	8009f90 <xTaskCheckForTimeOut>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d123      	bne.n	80091ca <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009184:	f000 f916 	bl	80093b4 <prvIsQueueEmpty>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d017      	beq.n	80091be <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800918e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009190:	3324      	adds	r3, #36	; 0x24
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	4611      	mov	r1, r2
 8009196:	4618      	mov	r0, r3
 8009198:	f000 fd9a 	bl	8009cd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800919c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800919e:	f000 f8b7 	bl	8009310 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80091a2:	f000 fbd5 	bl	8009950 <xTaskResumeAll>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d189      	bne.n	80090c0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80091ac:	4b0f      	ldr	r3, [pc, #60]	; (80091ec <xQueueReceive+0x1b4>)
 80091ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	e780      	b.n	80090c0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80091be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091c0:	f000 f8a6 	bl	8009310 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091c4:	f000 fbc4 	bl	8009950 <xTaskResumeAll>
 80091c8:	e77a      	b.n	80090c0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80091ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091cc:	f000 f8a0 	bl	8009310 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091d0:	f000 fbbe 	bl	8009950 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091d6:	f000 f8ed 	bl	80093b4 <prvIsQueueEmpty>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f43f af6f 	beq.w	80090c0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3730      	adds	r7, #48	; 0x30
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	e000ed04 	.word	0xe000ed04

080091f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80091fc:	2300      	movs	r3, #0
 80091fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009204:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10d      	bne.n	800922a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d14d      	bne.n	80092b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	4618      	mov	r0, r3
 800921c:	f001 f814 	bl	800a248 <xTaskPriorityDisinherit>
 8009220:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	609a      	str	r2, [r3, #8]
 8009228:	e043      	b.n	80092b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d119      	bne.n	8009264 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6858      	ldr	r0, [r3, #4]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009238:	461a      	mov	r2, r3
 800923a:	68b9      	ldr	r1, [r7, #8]
 800923c:	f002 fb0a 	bl	800b854 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009248:	441a      	add	r2, r3
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	429a      	cmp	r2, r3
 8009258:	d32b      	bcc.n	80092b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	605a      	str	r2, [r3, #4]
 8009262:	e026      	b.n	80092b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	68d8      	ldr	r0, [r3, #12]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926c:	461a      	mov	r2, r3
 800926e:	68b9      	ldr	r1, [r7, #8]
 8009270:	f002 faf0 	bl	800b854 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	68da      	ldr	r2, [r3, #12]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927c:	425b      	negs	r3, r3
 800927e:	441a      	add	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	68da      	ldr	r2, [r3, #12]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	429a      	cmp	r2, r3
 800928e:	d207      	bcs.n	80092a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	689a      	ldr	r2, [r3, #8]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009298:	425b      	negs	r3, r3
 800929a:	441a      	add	r2, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d105      	bne.n	80092b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	3b01      	subs	r3, #1
 80092b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	1c5a      	adds	r2, r3, #1
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80092ba:	697b      	ldr	r3, [r7, #20]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d018      	beq.n	8009308 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092de:	441a      	add	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	68da      	ldr	r2, [r3, #12]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d303      	bcc.n	80092f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	68d9      	ldr	r1, [r3, #12]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009300:	461a      	mov	r2, r3
 8009302:	6838      	ldr	r0, [r7, #0]
 8009304:	f002 faa6 	bl	800b854 <memcpy>
	}
}
 8009308:	bf00      	nop
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009318:	f001 fcf8 	bl	800ad0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009322:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009324:	e011      	b.n	800934a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932a:	2b00      	cmp	r3, #0
 800932c:	d012      	beq.n	8009354 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	3324      	adds	r3, #36	; 0x24
 8009332:	4618      	mov	r0, r3
 8009334:	f000 fd54 	bl	8009de0 <xTaskRemoveFromEventList>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d001      	beq.n	8009342 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800933e:	f000 fe87 	bl	800a050 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009342:	7bfb      	ldrb	r3, [r7, #15]
 8009344:	3b01      	subs	r3, #1
 8009346:	b2db      	uxtb	r3, r3
 8009348:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800934a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800934e:	2b00      	cmp	r3, #0
 8009350:	dce9      	bgt.n	8009326 <prvUnlockQueue+0x16>
 8009352:	e000      	b.n	8009356 <prvUnlockQueue+0x46>
					break;
 8009354:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	22ff      	movs	r2, #255	; 0xff
 800935a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800935e:	f001 fd03 	bl	800ad68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009362:	f001 fcd3 	bl	800ad0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800936c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800936e:	e011      	b.n	8009394 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d012      	beq.n	800939e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3310      	adds	r3, #16
 800937c:	4618      	mov	r0, r3
 800937e:	f000 fd2f 	bl	8009de0 <xTaskRemoveFromEventList>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009388:	f000 fe62 	bl	800a050 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800938c:	7bbb      	ldrb	r3, [r7, #14]
 800938e:	3b01      	subs	r3, #1
 8009390:	b2db      	uxtb	r3, r3
 8009392:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009394:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009398:	2b00      	cmp	r3, #0
 800939a:	dce9      	bgt.n	8009370 <prvUnlockQueue+0x60>
 800939c:	e000      	b.n	80093a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800939e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	22ff      	movs	r2, #255	; 0xff
 80093a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80093a8:	f001 fcde 	bl	800ad68 <vPortExitCritical>
}
 80093ac:	bf00      	nop
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093bc:	f001 fca6 	bl	800ad0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d102      	bne.n	80093ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80093c8:	2301      	movs	r3, #1
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	e001      	b.n	80093d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80093ce:	2300      	movs	r3, #0
 80093d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093d2:	f001 fcc9 	bl	800ad68 <vPortExitCritical>

	return xReturn;
 80093d6:	68fb      	ldr	r3, [r7, #12]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093e8:	f001 fc90 	bl	800ad0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d102      	bne.n	80093fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80093f8:	2301      	movs	r3, #1
 80093fa:	60fb      	str	r3, [r7, #12]
 80093fc:	e001      	b.n	8009402 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80093fe:	2300      	movs	r3, #0
 8009400:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009402:	f001 fcb1 	bl	800ad68 <vPortExitCritical>

	return xReturn;
 8009406:	68fb      	ldr	r3, [r7, #12]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800941a:	2300      	movs	r3, #0
 800941c:	60fb      	str	r3, [r7, #12]
 800941e:	e014      	b.n	800944a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009420:	4a0e      	ldr	r2, [pc, #56]	; (800945c <vQueueAddToRegistry+0x4c>)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10b      	bne.n	8009444 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800942c:	490b      	ldr	r1, [pc, #44]	; (800945c <vQueueAddToRegistry+0x4c>)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009436:	4a09      	ldr	r2, [pc, #36]	; (800945c <vQueueAddToRegistry+0x4c>)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	4413      	add	r3, r2
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009442:	e005      	b.n	8009450 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	3301      	adds	r3, #1
 8009448:	60fb      	str	r3, [r7, #12]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2b07      	cmp	r3, #7
 800944e:	d9e7      	bls.n	8009420 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009450:	bf00      	nop
 8009452:	3714      	adds	r7, #20
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	200091f4 	.word	0x200091f4

08009460 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009470:	f001 fc4c 	bl	800ad0c <vPortEnterCritical>
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800947a:	b25b      	sxtb	r3, r3
 800947c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009480:	d103      	bne.n	800948a <vQueueWaitForMessageRestricted+0x2a>
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009490:	b25b      	sxtb	r3, r3
 8009492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009496:	d103      	bne.n	80094a0 <vQueueWaitForMessageRestricted+0x40>
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094a0:	f001 fc62 	bl	800ad68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d106      	bne.n	80094ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	3324      	adds	r3, #36	; 0x24
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	68b9      	ldr	r1, [r7, #8]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f000 fc69 	bl	8009d8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80094ba:	6978      	ldr	r0, [r7, #20]
 80094bc:	f7ff ff28 	bl	8009310 <prvUnlockQueue>
	}
 80094c0:	bf00      	nop
 80094c2:	3718      	adds	r7, #24
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b08e      	sub	sp, #56	; 0x38
 80094cc:	af04      	add	r7, sp, #16
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
 80094d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80094d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d109      	bne.n	80094f0 <xTaskCreateStatic+0x28>
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	623b      	str	r3, [r7, #32]
 80094ee:	e7fe      	b.n	80094ee <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80094f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d109      	bne.n	800950a <xTaskCreateStatic+0x42>
 80094f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fa:	f383 8811 	msr	BASEPRI, r3
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	61fb      	str	r3, [r7, #28]
 8009508:	e7fe      	b.n	8009508 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800950a:	235c      	movs	r3, #92	; 0x5c
 800950c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	2b5c      	cmp	r3, #92	; 0x5c
 8009512:	d009      	beq.n	8009528 <xTaskCreateStatic+0x60>
 8009514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	61bb      	str	r3, [r7, #24]
 8009526:	e7fe      	b.n	8009526 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009528:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800952a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952c:	2b00      	cmp	r3, #0
 800952e:	d01e      	beq.n	800956e <xTaskCreateStatic+0xa6>
 8009530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009532:	2b00      	cmp	r3, #0
 8009534:	d01b      	beq.n	800956e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009538:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800953e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	2202      	movs	r2, #2
 8009544:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009548:	2300      	movs	r3, #0
 800954a:	9303      	str	r3, [sp, #12]
 800954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954e:	9302      	str	r3, [sp, #8]
 8009550:	f107 0314 	add.w	r3, r7, #20
 8009554:	9301      	str	r3, [sp, #4]
 8009556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	68b9      	ldr	r1, [r7, #8]
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f000 f850 	bl	8009606 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009566:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009568:	f000 f8dc 	bl	8009724 <prvAddNewTaskToReadyList>
 800956c:	e001      	b.n	8009572 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800956e:	2300      	movs	r3, #0
 8009570:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009572:	697b      	ldr	r3, [r7, #20]
	}
 8009574:	4618      	mov	r0, r3
 8009576:	3728      	adds	r7, #40	; 0x28
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08c      	sub	sp, #48	; 0x30
 8009580:	af04      	add	r7, sp, #16
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	603b      	str	r3, [r7, #0]
 8009588:	4613      	mov	r3, r2
 800958a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800958c:	88fb      	ldrh	r3, [r7, #6]
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4618      	mov	r0, r3
 8009592:	f001 fcd5 	bl	800af40 <pvPortMalloc>
 8009596:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00e      	beq.n	80095bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800959e:	205c      	movs	r0, #92	; 0x5c
 80095a0:	f001 fcce 	bl	800af40 <pvPortMalloc>
 80095a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d003      	beq.n	80095b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	631a      	str	r2, [r3, #48]	; 0x30
 80095b2:	e005      	b.n	80095c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80095b4:	6978      	ldr	r0, [r7, #20]
 80095b6:	f001 fd85 	bl	800b0c4 <vPortFree>
 80095ba:	e001      	b.n	80095c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80095bc:	2300      	movs	r3, #0
 80095be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d017      	beq.n	80095f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80095ce:	88fa      	ldrh	r2, [r7, #6]
 80095d0:	2300      	movs	r3, #0
 80095d2:	9303      	str	r3, [sp, #12]
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	9302      	str	r3, [sp, #8]
 80095d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095da:	9301      	str	r3, [sp, #4]
 80095dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	68b9      	ldr	r1, [r7, #8]
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 f80e 	bl	8009606 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095ea:	69f8      	ldr	r0, [r7, #28]
 80095ec:	f000 f89a 	bl	8009724 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80095f0:	2301      	movs	r3, #1
 80095f2:	61bb      	str	r3, [r7, #24]
 80095f4:	e002      	b.n	80095fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80095f6:	f04f 33ff 	mov.w	r3, #4294967295
 80095fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80095fc:	69bb      	ldr	r3, [r7, #24]
	}
 80095fe:	4618      	mov	r0, r3
 8009600:	3720      	adds	r7, #32
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b088      	sub	sp, #32
 800960a:	af00      	add	r7, sp, #0
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	607a      	str	r2, [r7, #4]
 8009612:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009616:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	461a      	mov	r2, r3
 800961e:	21a5      	movs	r1, #165	; 0xa5
 8009620:	f002 f923 	bl	800b86a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800962e:	3b01      	subs	r3, #1
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4413      	add	r3, r2
 8009634:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	f023 0307 	bic.w	r3, r3, #7
 800963c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	f003 0307 	and.w	r3, r3, #7
 8009644:	2b00      	cmp	r3, #0
 8009646:	d009      	beq.n	800965c <prvInitialiseNewTask+0x56>
 8009648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	617b      	str	r3, [r7, #20]
 800965a:	e7fe      	b.n	800965a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d01f      	beq.n	80096a2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009662:	2300      	movs	r3, #0
 8009664:	61fb      	str	r3, [r7, #28]
 8009666:	e012      	b.n	800968e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	4413      	add	r3, r2
 800966e:	7819      	ldrb	r1, [r3, #0]
 8009670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	4413      	add	r3, r2
 8009676:	3334      	adds	r3, #52	; 0x34
 8009678:	460a      	mov	r2, r1
 800967a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	4413      	add	r3, r2
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d006      	beq.n	8009696 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	3301      	adds	r3, #1
 800968c:	61fb      	str	r3, [r7, #28]
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	2b0f      	cmp	r3, #15
 8009692:	d9e9      	bls.n	8009668 <prvInitialiseNewTask+0x62>
 8009694:	e000      	b.n	8009698 <prvInitialiseNewTask+0x92>
			{
				break;
 8009696:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969a:	2200      	movs	r2, #0
 800969c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096a0:	e003      	b.n	80096aa <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80096a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80096aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ac:	2b37      	cmp	r3, #55	; 0x37
 80096ae:	d901      	bls.n	80096b4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096b0:	2337      	movs	r3, #55	; 0x37
 80096b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80096c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c2:	2200      	movs	r2, #0
 80096c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80096c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c8:	3304      	adds	r3, #4
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7ff f994 	bl	80089f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80096d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d2:	3318      	adds	r3, #24
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7ff f98f 	bl	80089f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80096da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80096ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80096f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f2:	2200      	movs	r2, #0
 80096f4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	68f9      	ldr	r1, [r7, #12]
 8009702:	69b8      	ldr	r0, [r7, #24]
 8009704:	f001 f9de 	bl	800aac4 <pxPortInitialiseStack>
 8009708:	4602      	mov	r2, r0
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800970e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009718:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800971a:	bf00      	nop
 800971c:	3720      	adds	r7, #32
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800972c:	f001 faee 	bl	800ad0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009730:	4b2d      	ldr	r3, [pc, #180]	; (80097e8 <prvAddNewTaskToReadyList+0xc4>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3301      	adds	r3, #1
 8009736:	4a2c      	ldr	r2, [pc, #176]	; (80097e8 <prvAddNewTaskToReadyList+0xc4>)
 8009738:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800973a:	4b2c      	ldr	r3, [pc, #176]	; (80097ec <prvAddNewTaskToReadyList+0xc8>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d109      	bne.n	8009756 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009742:	4a2a      	ldr	r2, [pc, #168]	; (80097ec <prvAddNewTaskToReadyList+0xc8>)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009748:	4b27      	ldr	r3, [pc, #156]	; (80097e8 <prvAddNewTaskToReadyList+0xc4>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d110      	bne.n	8009772 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009750:	f000 fca2 	bl	800a098 <prvInitialiseTaskLists>
 8009754:	e00d      	b.n	8009772 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009756:	4b26      	ldr	r3, [pc, #152]	; (80097f0 <prvAddNewTaskToReadyList+0xcc>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d109      	bne.n	8009772 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800975e:	4b23      	ldr	r3, [pc, #140]	; (80097ec <prvAddNewTaskToReadyList+0xc8>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009768:	429a      	cmp	r2, r3
 800976a:	d802      	bhi.n	8009772 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800976c:	4a1f      	ldr	r2, [pc, #124]	; (80097ec <prvAddNewTaskToReadyList+0xc8>)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009772:	4b20      	ldr	r3, [pc, #128]	; (80097f4 <prvAddNewTaskToReadyList+0xd0>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3301      	adds	r3, #1
 8009778:	4a1e      	ldr	r2, [pc, #120]	; (80097f4 <prvAddNewTaskToReadyList+0xd0>)
 800977a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800977c:	4b1d      	ldr	r3, [pc, #116]	; (80097f4 <prvAddNewTaskToReadyList+0xd0>)
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009788:	4b1b      	ldr	r3, [pc, #108]	; (80097f8 <prvAddNewTaskToReadyList+0xd4>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	429a      	cmp	r2, r3
 800978e:	d903      	bls.n	8009798 <prvAddNewTaskToReadyList+0x74>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009794:	4a18      	ldr	r2, [pc, #96]	; (80097f8 <prvAddNewTaskToReadyList+0xd4>)
 8009796:	6013      	str	r3, [r2, #0]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800979c:	4613      	mov	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4413      	add	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	4a15      	ldr	r2, [pc, #84]	; (80097fc <prvAddNewTaskToReadyList+0xd8>)
 80097a6:	441a      	add	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	3304      	adds	r3, #4
 80097ac:	4619      	mov	r1, r3
 80097ae:	4610      	mov	r0, r2
 80097b0:	f7ff f92f 	bl	8008a12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097b4:	f001 fad8 	bl	800ad68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80097b8:	4b0d      	ldr	r3, [pc, #52]	; (80097f0 <prvAddNewTaskToReadyList+0xcc>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00e      	beq.n	80097de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80097c0:	4b0a      	ldr	r3, [pc, #40]	; (80097ec <prvAddNewTaskToReadyList+0xc8>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d207      	bcs.n	80097de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80097ce:	4b0c      	ldr	r3, [pc, #48]	; (8009800 <prvAddNewTaskToReadyList+0xdc>)
 80097d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097de:	bf00      	nop
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	20002924 	.word	0x20002924
 80097ec:	20002450 	.word	0x20002450
 80097f0:	20002930 	.word	0x20002930
 80097f4:	20002940 	.word	0x20002940
 80097f8:	2000292c 	.word	0x2000292c
 80097fc:	20002454 	.word	0x20002454
 8009800:	e000ed04 	.word	0xe000ed04

08009804 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800980c:	2300      	movs	r3, #0
 800980e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d016      	beq.n	8009844 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009816:	4b13      	ldr	r3, [pc, #76]	; (8009864 <vTaskDelay+0x60>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d009      	beq.n	8009832 <vTaskDelay+0x2e>
 800981e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	60bb      	str	r3, [r7, #8]
 8009830:	e7fe      	b.n	8009830 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009832:	f000 f87f 	bl	8009934 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009836:	2100      	movs	r1, #0
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 fd89 	bl	800a350 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800983e:	f000 f887 	bl	8009950 <xTaskResumeAll>
 8009842:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d107      	bne.n	800985a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800984a:	4b07      	ldr	r3, [pc, #28]	; (8009868 <vTaskDelay+0x64>)
 800984c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009850:	601a      	str	r2, [r3, #0]
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800985a:	bf00      	nop
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	2000294c 	.word	0x2000294c
 8009868:	e000ed04 	.word	0xe000ed04

0800986c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b08a      	sub	sp, #40	; 0x28
 8009870:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009872:	2300      	movs	r3, #0
 8009874:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009876:	2300      	movs	r3, #0
 8009878:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800987a:	463a      	mov	r2, r7
 800987c:	1d39      	adds	r1, r7, #4
 800987e:	f107 0308 	add.w	r3, r7, #8
 8009882:	4618      	mov	r0, r3
 8009884:	f7fe fe04 	bl	8008490 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	9202      	str	r2, [sp, #8]
 8009890:	9301      	str	r3, [sp, #4]
 8009892:	2300      	movs	r3, #0
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	2300      	movs	r3, #0
 8009898:	460a      	mov	r2, r1
 800989a:	4920      	ldr	r1, [pc, #128]	; (800991c <vTaskStartScheduler+0xb0>)
 800989c:	4820      	ldr	r0, [pc, #128]	; (8009920 <vTaskStartScheduler+0xb4>)
 800989e:	f7ff fe13 	bl	80094c8 <xTaskCreateStatic>
 80098a2:	4602      	mov	r2, r0
 80098a4:	4b1f      	ldr	r3, [pc, #124]	; (8009924 <vTaskStartScheduler+0xb8>)
 80098a6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80098a8:	4b1e      	ldr	r3, [pc, #120]	; (8009924 <vTaskStartScheduler+0xb8>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d002      	beq.n	80098b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80098b0:	2301      	movs	r3, #1
 80098b2:	617b      	str	r3, [r7, #20]
 80098b4:	e001      	b.n	80098ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80098b6:	2300      	movs	r3, #0
 80098b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d102      	bne.n	80098c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80098c0:	f000 fd9a 	bl	800a3f8 <xTimerCreateTimerTask>
 80098c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d115      	bne.n	80098f8 <vTaskStartScheduler+0x8c>
 80098cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d0:	f383 8811 	msr	BASEPRI, r3
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80098de:	4b12      	ldr	r3, [pc, #72]	; (8009928 <vTaskStartScheduler+0xbc>)
 80098e0:	f04f 32ff 	mov.w	r2, #4294967295
 80098e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80098e6:	4b11      	ldr	r3, [pc, #68]	; (800992c <vTaskStartScheduler+0xc0>)
 80098e8:	2201      	movs	r2, #1
 80098ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80098ec:	4b10      	ldr	r3, [pc, #64]	; (8009930 <vTaskStartScheduler+0xc4>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80098f2:	f001 f96d 	bl	800abd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80098f6:	e00d      	b.n	8009914 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098fe:	d109      	bne.n	8009914 <vTaskStartScheduler+0xa8>
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	60fb      	str	r3, [r7, #12]
 8009912:	e7fe      	b.n	8009912 <vTaskStartScheduler+0xa6>
}
 8009914:	bf00      	nop
 8009916:	3718      	adds	r7, #24
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	0800c6ac 	.word	0x0800c6ac
 8009920:	0800a069 	.word	0x0800a069
 8009924:	20002948 	.word	0x20002948
 8009928:	20002944 	.word	0x20002944
 800992c:	20002930 	.word	0x20002930
 8009930:	20002928 	.word	0x20002928

08009934 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009934:	b480      	push	{r7}
 8009936:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009938:	4b04      	ldr	r3, [pc, #16]	; (800994c <vTaskSuspendAll+0x18>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3301      	adds	r3, #1
 800993e:	4a03      	ldr	r2, [pc, #12]	; (800994c <vTaskSuspendAll+0x18>)
 8009940:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009942:	bf00      	nop
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	2000294c 	.word	0x2000294c

08009950 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009956:	2300      	movs	r3, #0
 8009958:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800995a:	2300      	movs	r3, #0
 800995c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800995e:	4b41      	ldr	r3, [pc, #260]	; (8009a64 <xTaskResumeAll+0x114>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d109      	bne.n	800997a <xTaskResumeAll+0x2a>
 8009966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	603b      	str	r3, [r7, #0]
 8009978:	e7fe      	b.n	8009978 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800997a:	f001 f9c7 	bl	800ad0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800997e:	4b39      	ldr	r3, [pc, #228]	; (8009a64 <xTaskResumeAll+0x114>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3b01      	subs	r3, #1
 8009984:	4a37      	ldr	r2, [pc, #220]	; (8009a64 <xTaskResumeAll+0x114>)
 8009986:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009988:	4b36      	ldr	r3, [pc, #216]	; (8009a64 <xTaskResumeAll+0x114>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d162      	bne.n	8009a56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009990:	4b35      	ldr	r3, [pc, #212]	; (8009a68 <xTaskResumeAll+0x118>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d05e      	beq.n	8009a56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009998:	e02f      	b.n	80099fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800999a:	4b34      	ldr	r3, [pc, #208]	; (8009a6c <xTaskResumeAll+0x11c>)
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	3318      	adds	r3, #24
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7ff f890 	bl	8008acc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3304      	adds	r3, #4
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7ff f88b 	bl	8008acc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ba:	4b2d      	ldr	r3, [pc, #180]	; (8009a70 <xTaskResumeAll+0x120>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d903      	bls.n	80099ca <xTaskResumeAll+0x7a>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c6:	4a2a      	ldr	r2, [pc, #168]	; (8009a70 <xTaskResumeAll+0x120>)
 80099c8:	6013      	str	r3, [r2, #0]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ce:	4613      	mov	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4a27      	ldr	r2, [pc, #156]	; (8009a74 <xTaskResumeAll+0x124>)
 80099d8:	441a      	add	r2, r3
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	3304      	adds	r3, #4
 80099de:	4619      	mov	r1, r3
 80099e0:	4610      	mov	r0, r2
 80099e2:	f7ff f816 	bl	8008a12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ea:	4b23      	ldr	r3, [pc, #140]	; (8009a78 <xTaskResumeAll+0x128>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d302      	bcc.n	80099fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80099f4:	4b21      	ldr	r3, [pc, #132]	; (8009a7c <xTaskResumeAll+0x12c>)
 80099f6:	2201      	movs	r2, #1
 80099f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099fa:	4b1c      	ldr	r3, [pc, #112]	; (8009a6c <xTaskResumeAll+0x11c>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1cb      	bne.n	800999a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a08:	f000 fbe0 	bl	800a1cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009a0c:	4b1c      	ldr	r3, [pc, #112]	; (8009a80 <xTaskResumeAll+0x130>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d010      	beq.n	8009a3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a18:	f000 f846 	bl	8009aa8 <xTaskIncrementTick>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009a22:	4b16      	ldr	r3, [pc, #88]	; (8009a7c <xTaskResumeAll+0x12c>)
 8009a24:	2201      	movs	r2, #1
 8009a26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1f1      	bne.n	8009a18 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009a34:	4b12      	ldr	r3, [pc, #72]	; (8009a80 <xTaskResumeAll+0x130>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a3a:	4b10      	ldr	r3, [pc, #64]	; (8009a7c <xTaskResumeAll+0x12c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d009      	beq.n	8009a56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a42:	2301      	movs	r3, #1
 8009a44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a46:	4b0f      	ldr	r3, [pc, #60]	; (8009a84 <xTaskResumeAll+0x134>)
 8009a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a4c:	601a      	str	r2, [r3, #0]
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a56:	f001 f987 	bl	800ad68 <vPortExitCritical>

	return xAlreadyYielded;
 8009a5a:	68bb      	ldr	r3, [r7, #8]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	2000294c 	.word	0x2000294c
 8009a68:	20002924 	.word	0x20002924
 8009a6c:	200028e4 	.word	0x200028e4
 8009a70:	2000292c 	.word	0x2000292c
 8009a74:	20002454 	.word	0x20002454
 8009a78:	20002450 	.word	0x20002450
 8009a7c:	20002938 	.word	0x20002938
 8009a80:	20002934 	.word	0x20002934
 8009a84:	e000ed04 	.word	0xe000ed04

08009a88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009a8e:	4b05      	ldr	r3, [pc, #20]	; (8009aa4 <xTaskGetTickCount+0x1c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009a94:	687b      	ldr	r3, [r7, #4]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	370c      	adds	r7, #12
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	20002928 	.word	0x20002928

08009aa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ab2:	4b4e      	ldr	r3, [pc, #312]	; (8009bec <xTaskIncrementTick+0x144>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f040 8088 	bne.w	8009bcc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009abc:	4b4c      	ldr	r3, [pc, #304]	; (8009bf0 <xTaskIncrementTick+0x148>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009ac4:	4a4a      	ldr	r2, [pc, #296]	; (8009bf0 <xTaskIncrementTick+0x148>)
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d11f      	bne.n	8009b10 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ad0:	4b48      	ldr	r3, [pc, #288]	; (8009bf4 <xTaskIncrementTick+0x14c>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d009      	beq.n	8009aee <xTaskIncrementTick+0x46>
 8009ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ade:	f383 8811 	msr	BASEPRI, r3
 8009ae2:	f3bf 8f6f 	isb	sy
 8009ae6:	f3bf 8f4f 	dsb	sy
 8009aea:	603b      	str	r3, [r7, #0]
 8009aec:	e7fe      	b.n	8009aec <xTaskIncrementTick+0x44>
 8009aee:	4b41      	ldr	r3, [pc, #260]	; (8009bf4 <xTaskIncrementTick+0x14c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	60fb      	str	r3, [r7, #12]
 8009af4:	4b40      	ldr	r3, [pc, #256]	; (8009bf8 <xTaskIncrementTick+0x150>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a3e      	ldr	r2, [pc, #248]	; (8009bf4 <xTaskIncrementTick+0x14c>)
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	4a3e      	ldr	r2, [pc, #248]	; (8009bf8 <xTaskIncrementTick+0x150>)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6013      	str	r3, [r2, #0]
 8009b02:	4b3e      	ldr	r3, [pc, #248]	; (8009bfc <xTaskIncrementTick+0x154>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	3301      	adds	r3, #1
 8009b08:	4a3c      	ldr	r2, [pc, #240]	; (8009bfc <xTaskIncrementTick+0x154>)
 8009b0a:	6013      	str	r3, [r2, #0]
 8009b0c:	f000 fb5e 	bl	800a1cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b10:	4b3b      	ldr	r3, [pc, #236]	; (8009c00 <xTaskIncrementTick+0x158>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d349      	bcc.n	8009bae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b1a:	4b36      	ldr	r3, [pc, #216]	; (8009bf4 <xTaskIncrementTick+0x14c>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d104      	bne.n	8009b2e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b24:	4b36      	ldr	r3, [pc, #216]	; (8009c00 <xTaskIncrementTick+0x158>)
 8009b26:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2a:	601a      	str	r2, [r3, #0]
					break;
 8009b2c:	e03f      	b.n	8009bae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b2e:	4b31      	ldr	r3, [pc, #196]	; (8009bf4 <xTaskIncrementTick+0x14c>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d203      	bcs.n	8009b4e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b46:	4a2e      	ldr	r2, [pc, #184]	; (8009c00 <xTaskIncrementTick+0x158>)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b4c:	e02f      	b.n	8009bae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	3304      	adds	r3, #4
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fe ffba 	bl	8008acc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d004      	beq.n	8009b6a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	3318      	adds	r3, #24
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7fe ffb1 	bl	8008acc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6e:	4b25      	ldr	r3, [pc, #148]	; (8009c04 <xTaskIncrementTick+0x15c>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d903      	bls.n	8009b7e <xTaskIncrementTick+0xd6>
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7a:	4a22      	ldr	r2, [pc, #136]	; (8009c04 <xTaskIncrementTick+0x15c>)
 8009b7c:	6013      	str	r3, [r2, #0]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b82:	4613      	mov	r3, r2
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	4413      	add	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4a1f      	ldr	r2, [pc, #124]	; (8009c08 <xTaskIncrementTick+0x160>)
 8009b8c:	441a      	add	r2, r3
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	3304      	adds	r3, #4
 8009b92:	4619      	mov	r1, r3
 8009b94:	4610      	mov	r0, r2
 8009b96:	f7fe ff3c 	bl	8008a12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b9e:	4b1b      	ldr	r3, [pc, #108]	; (8009c0c <xTaskIncrementTick+0x164>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d3b8      	bcc.n	8009b1a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bac:	e7b5      	b.n	8009b1a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009bae:	4b17      	ldr	r3, [pc, #92]	; (8009c0c <xTaskIncrementTick+0x164>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb4:	4914      	ldr	r1, [pc, #80]	; (8009c08 <xTaskIncrementTick+0x160>)
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	4413      	add	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	440b      	add	r3, r1
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d907      	bls.n	8009bd6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	617b      	str	r3, [r7, #20]
 8009bca:	e004      	b.n	8009bd6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009bcc:	4b10      	ldr	r3, [pc, #64]	; (8009c10 <xTaskIncrementTick+0x168>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	4a0f      	ldr	r2, [pc, #60]	; (8009c10 <xTaskIncrementTick+0x168>)
 8009bd4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009bd6:	4b0f      	ldr	r3, [pc, #60]	; (8009c14 <xTaskIncrementTick+0x16c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009bde:	2301      	movs	r3, #1
 8009be0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009be2:	697b      	ldr	r3, [r7, #20]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3718      	adds	r7, #24
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	2000294c 	.word	0x2000294c
 8009bf0:	20002928 	.word	0x20002928
 8009bf4:	200028dc 	.word	0x200028dc
 8009bf8:	200028e0 	.word	0x200028e0
 8009bfc:	2000293c 	.word	0x2000293c
 8009c00:	20002944 	.word	0x20002944
 8009c04:	2000292c 	.word	0x2000292c
 8009c08:	20002454 	.word	0x20002454
 8009c0c:	20002450 	.word	0x20002450
 8009c10:	20002934 	.word	0x20002934
 8009c14:	20002938 	.word	0x20002938

08009c18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c1e:	4b27      	ldr	r3, [pc, #156]	; (8009cbc <vTaskSwitchContext+0xa4>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d003      	beq.n	8009c2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c26:	4b26      	ldr	r3, [pc, #152]	; (8009cc0 <vTaskSwitchContext+0xa8>)
 8009c28:	2201      	movs	r2, #1
 8009c2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c2c:	e040      	b.n	8009cb0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009c2e:	4b24      	ldr	r3, [pc, #144]	; (8009cc0 <vTaskSwitchContext+0xa8>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c34:	4b23      	ldr	r3, [pc, #140]	; (8009cc4 <vTaskSwitchContext+0xac>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	e00f      	b.n	8009c5c <vTaskSwitchContext+0x44>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d109      	bne.n	8009c56 <vTaskSwitchContext+0x3e>
 8009c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c46:	f383 8811 	msr	BASEPRI, r3
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	607b      	str	r3, [r7, #4]
 8009c54:	e7fe      	b.n	8009c54 <vTaskSwitchContext+0x3c>
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	60fb      	str	r3, [r7, #12]
 8009c5c:	491a      	ldr	r1, [pc, #104]	; (8009cc8 <vTaskSwitchContext+0xb0>)
 8009c5e:	68fa      	ldr	r2, [r7, #12]
 8009c60:	4613      	mov	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	440b      	add	r3, r1
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d0e5      	beq.n	8009c3c <vTaskSwitchContext+0x24>
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	4613      	mov	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4a13      	ldr	r2, [pc, #76]	; (8009cc8 <vTaskSwitchContext+0xb0>)
 8009c7c:	4413      	add	r3, r2
 8009c7e:	60bb      	str	r3, [r7, #8]
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	685a      	ldr	r2, [r3, #4]
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	605a      	str	r2, [r3, #4]
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	685a      	ldr	r2, [r3, #4]
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	3308      	adds	r3, #8
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d104      	bne.n	8009ca0 <vTaskSwitchContext+0x88>
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	605a      	str	r2, [r3, #4]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	4a09      	ldr	r2, [pc, #36]	; (8009ccc <vTaskSwitchContext+0xb4>)
 8009ca8:	6013      	str	r3, [r2, #0]
 8009caa:	4a06      	ldr	r2, [pc, #24]	; (8009cc4 <vTaskSwitchContext+0xac>)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6013      	str	r3, [r2, #0]
}
 8009cb0:	bf00      	nop
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr
 8009cbc:	2000294c 	.word	0x2000294c
 8009cc0:	20002938 	.word	0x20002938
 8009cc4:	2000292c 	.word	0x2000292c
 8009cc8:	20002454 	.word	0x20002454
 8009ccc:	20002450 	.word	0x20002450

08009cd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d109      	bne.n	8009cf4 <vTaskPlaceOnEventList+0x24>
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	60fb      	str	r3, [r7, #12]
 8009cf2:	e7fe      	b.n	8009cf2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009cf4:	4b07      	ldr	r3, [pc, #28]	; (8009d14 <vTaskPlaceOnEventList+0x44>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	3318      	adds	r3, #24
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7fe feac 	bl	8008a5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d02:	2101      	movs	r1, #1
 8009d04:	6838      	ldr	r0, [r7, #0]
 8009d06:	f000 fb23 	bl	800a350 <prvAddCurrentTaskToDelayedList>
}
 8009d0a:	bf00      	nop
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20002450 	.word	0x20002450

08009d18 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d109      	bne.n	8009d3e <vTaskPlaceOnUnorderedEventList+0x26>
 8009d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	617b      	str	r3, [r7, #20]
 8009d3c:	e7fe      	b.n	8009d3c <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009d3e:	4b11      	ldr	r3, [pc, #68]	; (8009d84 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d109      	bne.n	8009d5a <vTaskPlaceOnUnorderedEventList+0x42>
 8009d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	613b      	str	r3, [r7, #16]
 8009d58:	e7fe      	b.n	8009d58 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009d5a:	4b0b      	ldr	r3, [pc, #44]	; (8009d88 <vTaskPlaceOnUnorderedEventList+0x70>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009d64:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d66:	4b08      	ldr	r3, [pc, #32]	; (8009d88 <vTaskPlaceOnUnorderedEventList+0x70>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	3318      	adds	r3, #24
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f7fe fe4f 	bl	8008a12 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d74:	2101      	movs	r1, #1
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 faea 	bl	800a350 <prvAddCurrentTaskToDelayedList>
}
 8009d7c:	bf00      	nop
 8009d7e:	3718      	adds	r7, #24
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	2000294c 	.word	0x2000294c
 8009d88:	20002450 	.word	0x20002450

08009d8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d109      	bne.n	8009db2 <vTaskPlaceOnEventListRestricted+0x26>
 8009d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	617b      	str	r3, [r7, #20]
 8009db0:	e7fe      	b.n	8009db0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009db2:	4b0a      	ldr	r3, [pc, #40]	; (8009ddc <vTaskPlaceOnEventListRestricted+0x50>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	3318      	adds	r3, #24
 8009db8:	4619      	mov	r1, r3
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f7fe fe29 	bl	8008a12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d002      	beq.n	8009dcc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009dca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009dcc:	6879      	ldr	r1, [r7, #4]
 8009dce:	68b8      	ldr	r0, [r7, #8]
 8009dd0:	f000 fabe 	bl	800a350 <prvAddCurrentTaskToDelayedList>
	}
 8009dd4:	bf00      	nop
 8009dd6:	3718      	adds	r7, #24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	20002450 	.word	0x20002450

08009de0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d109      	bne.n	8009e0a <xTaskRemoveFromEventList+0x2a>
 8009df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfa:	f383 8811 	msr	BASEPRI, r3
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f3bf 8f4f 	dsb	sy
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	e7fe      	b.n	8009e08 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	3318      	adds	r3, #24
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7fe fe5c 	bl	8008acc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e14:	4b1d      	ldr	r3, [pc, #116]	; (8009e8c <xTaskRemoveFromEventList+0xac>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d11d      	bne.n	8009e58 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	3304      	adds	r3, #4
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7fe fe53 	bl	8008acc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e2a:	4b19      	ldr	r3, [pc, #100]	; (8009e90 <xTaskRemoveFromEventList+0xb0>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d903      	bls.n	8009e3a <xTaskRemoveFromEventList+0x5a>
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e36:	4a16      	ldr	r2, [pc, #88]	; (8009e90 <xTaskRemoveFromEventList+0xb0>)
 8009e38:	6013      	str	r3, [r2, #0]
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3e:	4613      	mov	r3, r2
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	4413      	add	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4a13      	ldr	r2, [pc, #76]	; (8009e94 <xTaskRemoveFromEventList+0xb4>)
 8009e48:	441a      	add	r2, r3
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	4619      	mov	r1, r3
 8009e50:	4610      	mov	r0, r2
 8009e52:	f7fe fdde 	bl	8008a12 <vListInsertEnd>
 8009e56:	e005      	b.n	8009e64 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	3318      	adds	r3, #24
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	480e      	ldr	r0, [pc, #56]	; (8009e98 <xTaskRemoveFromEventList+0xb8>)
 8009e60:	f7fe fdd7 	bl	8008a12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e68:	4b0c      	ldr	r3, [pc, #48]	; (8009e9c <xTaskRemoveFromEventList+0xbc>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d905      	bls.n	8009e7e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e72:	2301      	movs	r3, #1
 8009e74:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e76:	4b0a      	ldr	r3, [pc, #40]	; (8009ea0 <xTaskRemoveFromEventList+0xc0>)
 8009e78:	2201      	movs	r2, #1
 8009e7a:	601a      	str	r2, [r3, #0]
 8009e7c:	e001      	b.n	8009e82 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e82:	697b      	ldr	r3, [r7, #20]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	2000294c 	.word	0x2000294c
 8009e90:	2000292c 	.word	0x2000292c
 8009e94:	20002454 	.word	0x20002454
 8009e98:	200028e4 	.word	0x200028e4
 8009e9c:	20002450 	.word	0x20002450
 8009ea0:	20002938 	.word	0x20002938

08009ea4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009eae:	4b28      	ldr	r3, [pc, #160]	; (8009f50 <vTaskRemoveFromUnorderedEventList+0xac>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d109      	bne.n	8009eca <vTaskRemoveFromUnorderedEventList+0x26>
 8009eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	613b      	str	r3, [r7, #16]
 8009ec8:	e7fe      	b.n	8009ec8 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d109      	bne.n	8009ef4 <vTaskRemoveFromUnorderedEventList+0x50>
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	60fb      	str	r3, [r7, #12]
 8009ef2:	e7fe      	b.n	8009ef2 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7fe fde9 	bl	8008acc <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	3304      	adds	r3, #4
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fe fde4 	bl	8008acc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f08:	4b12      	ldr	r3, [pc, #72]	; (8009f54 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d903      	bls.n	8009f18 <vTaskRemoveFromUnorderedEventList+0x74>
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f14:	4a0f      	ldr	r2, [pc, #60]	; (8009f54 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4a0c      	ldr	r2, [pc, #48]	; (8009f58 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009f26:	441a      	add	r2, r3
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	4610      	mov	r0, r2
 8009f30:	f7fe fd6f 	bl	8008a12 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f38:	4b08      	ldr	r3, [pc, #32]	; (8009f5c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d902      	bls.n	8009f48 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009f42:	4b07      	ldr	r3, [pc, #28]	; (8009f60 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009f44:	2201      	movs	r2, #1
 8009f46:	601a      	str	r2, [r3, #0]
	}
}
 8009f48:	bf00      	nop
 8009f4a:	3718      	adds	r7, #24
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	2000294c 	.word	0x2000294c
 8009f54:	2000292c 	.word	0x2000292c
 8009f58:	20002454 	.word	0x20002454
 8009f5c:	20002450 	.word	0x20002450
 8009f60:	20002938 	.word	0x20002938

08009f64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f6c:	4b06      	ldr	r3, [pc, #24]	; (8009f88 <vTaskInternalSetTimeOutState+0x24>)
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f74:	4b05      	ldr	r3, [pc, #20]	; (8009f8c <vTaskInternalSetTimeOutState+0x28>)
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	605a      	str	r2, [r3, #4]
}
 8009f7c:	bf00      	nop
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr
 8009f88:	2000293c 	.word	0x2000293c
 8009f8c:	20002928 	.word	0x20002928

08009f90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b088      	sub	sp, #32
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d109      	bne.n	8009fb4 <xTaskCheckForTimeOut+0x24>
 8009fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	613b      	str	r3, [r7, #16]
 8009fb2:	e7fe      	b.n	8009fb2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d109      	bne.n	8009fce <xTaskCheckForTimeOut+0x3e>
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	60fb      	str	r3, [r7, #12]
 8009fcc:	e7fe      	b.n	8009fcc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009fce:	f000 fe9d 	bl	800ad0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009fd2:	4b1d      	ldr	r3, [pc, #116]	; (800a048 <xTaskCheckForTimeOut+0xb8>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	69ba      	ldr	r2, [r7, #24]
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fea:	d102      	bne.n	8009ff2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009fec:	2300      	movs	r3, #0
 8009fee:	61fb      	str	r3, [r7, #28]
 8009ff0:	e023      	b.n	800a03a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	4b15      	ldr	r3, [pc, #84]	; (800a04c <xTaskCheckForTimeOut+0xbc>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d007      	beq.n	800a00e <xTaskCheckForTimeOut+0x7e>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	69ba      	ldr	r2, [r7, #24]
 800a004:	429a      	cmp	r2, r3
 800a006:	d302      	bcc.n	800a00e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a008:	2301      	movs	r3, #1
 800a00a:	61fb      	str	r3, [r7, #28]
 800a00c:	e015      	b.n	800a03a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	697a      	ldr	r2, [r7, #20]
 800a014:	429a      	cmp	r2, r3
 800a016:	d20b      	bcs.n	800a030 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	1ad2      	subs	r2, r2, r3
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7ff ff9d 	bl	8009f64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a02a:	2300      	movs	r3, #0
 800a02c:	61fb      	str	r3, [r7, #28]
 800a02e:	e004      	b.n	800a03a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	2200      	movs	r2, #0
 800a034:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a036:	2301      	movs	r3, #1
 800a038:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a03a:	f000 fe95 	bl	800ad68 <vPortExitCritical>

	return xReturn;
 800a03e:	69fb      	ldr	r3, [r7, #28]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3720      	adds	r7, #32
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	20002928 	.word	0x20002928
 800a04c:	2000293c 	.word	0x2000293c

0800a050 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a050:	b480      	push	{r7}
 800a052:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a054:	4b03      	ldr	r3, [pc, #12]	; (800a064 <vTaskMissedYield+0x14>)
 800a056:	2201      	movs	r2, #1
 800a058:	601a      	str	r2, [r3, #0]
}
 800a05a:	bf00      	nop
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr
 800a064:	20002938 	.word	0x20002938

0800a068 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a070:	f000 f852 	bl	800a118 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a074:	4b06      	ldr	r3, [pc, #24]	; (800a090 <prvIdleTask+0x28>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d9f9      	bls.n	800a070 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a07c:	4b05      	ldr	r3, [pc, #20]	; (800a094 <prvIdleTask+0x2c>)
 800a07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a08c:	e7f0      	b.n	800a070 <prvIdleTask+0x8>
 800a08e:	bf00      	nop
 800a090:	20002454 	.word	0x20002454
 800a094:	e000ed04 	.word	0xe000ed04

0800a098 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a09e:	2300      	movs	r3, #0
 800a0a0:	607b      	str	r3, [r7, #4]
 800a0a2:	e00c      	b.n	800a0be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4a12      	ldr	r2, [pc, #72]	; (800a0f8 <prvInitialiseTaskLists+0x60>)
 800a0b0:	4413      	add	r3, r2
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fe fc80 	bl	80089b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	607b      	str	r3, [r7, #4]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2b37      	cmp	r3, #55	; 0x37
 800a0c2:	d9ef      	bls.n	800a0a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0c4:	480d      	ldr	r0, [pc, #52]	; (800a0fc <prvInitialiseTaskLists+0x64>)
 800a0c6:	f7fe fc77 	bl	80089b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0ca:	480d      	ldr	r0, [pc, #52]	; (800a100 <prvInitialiseTaskLists+0x68>)
 800a0cc:	f7fe fc74 	bl	80089b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a0d0:	480c      	ldr	r0, [pc, #48]	; (800a104 <prvInitialiseTaskLists+0x6c>)
 800a0d2:	f7fe fc71 	bl	80089b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a0d6:	480c      	ldr	r0, [pc, #48]	; (800a108 <prvInitialiseTaskLists+0x70>)
 800a0d8:	f7fe fc6e 	bl	80089b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a0dc:	480b      	ldr	r0, [pc, #44]	; (800a10c <prvInitialiseTaskLists+0x74>)
 800a0de:	f7fe fc6b 	bl	80089b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a0e2:	4b0b      	ldr	r3, [pc, #44]	; (800a110 <prvInitialiseTaskLists+0x78>)
 800a0e4:	4a05      	ldr	r2, [pc, #20]	; (800a0fc <prvInitialiseTaskLists+0x64>)
 800a0e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a0e8:	4b0a      	ldr	r3, [pc, #40]	; (800a114 <prvInitialiseTaskLists+0x7c>)
 800a0ea:	4a05      	ldr	r2, [pc, #20]	; (800a100 <prvInitialiseTaskLists+0x68>)
 800a0ec:	601a      	str	r2, [r3, #0]
}
 800a0ee:	bf00      	nop
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	20002454 	.word	0x20002454
 800a0fc:	200028b4 	.word	0x200028b4
 800a100:	200028c8 	.word	0x200028c8
 800a104:	200028e4 	.word	0x200028e4
 800a108:	200028f8 	.word	0x200028f8
 800a10c:	20002910 	.word	0x20002910
 800a110:	200028dc 	.word	0x200028dc
 800a114:	200028e0 	.word	0x200028e0

0800a118 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a11e:	e019      	b.n	800a154 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a120:	f000 fdf4 	bl	800ad0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a124:	4b0f      	ldr	r3, [pc, #60]	; (800a164 <prvCheckTasksWaitingTermination+0x4c>)
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	3304      	adds	r3, #4
 800a130:	4618      	mov	r0, r3
 800a132:	f7fe fccb 	bl	8008acc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a136:	4b0c      	ldr	r3, [pc, #48]	; (800a168 <prvCheckTasksWaitingTermination+0x50>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	4a0a      	ldr	r2, [pc, #40]	; (800a168 <prvCheckTasksWaitingTermination+0x50>)
 800a13e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a140:	4b0a      	ldr	r3, [pc, #40]	; (800a16c <prvCheckTasksWaitingTermination+0x54>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	3b01      	subs	r3, #1
 800a146:	4a09      	ldr	r2, [pc, #36]	; (800a16c <prvCheckTasksWaitingTermination+0x54>)
 800a148:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a14a:	f000 fe0d 	bl	800ad68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f80e 	bl	800a170 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a154:	4b05      	ldr	r3, [pc, #20]	; (800a16c <prvCheckTasksWaitingTermination+0x54>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1e1      	bne.n	800a120 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a15c:	bf00      	nop
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	200028f8 	.word	0x200028f8
 800a168:	20002924 	.word	0x20002924
 800a16c:	2000290c 	.word	0x2000290c

0800a170 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d108      	bne.n	800a194 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a186:	4618      	mov	r0, r3
 800a188:	f000 ff9c 	bl	800b0c4 <vPortFree>
				vPortFree( pxTCB );
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 ff99 	bl	800b0c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a192:	e017      	b.n	800a1c4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d103      	bne.n	800a1a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 ff90 	bl	800b0c4 <vPortFree>
	}
 800a1a4:	e00e      	b.n	800a1c4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d009      	beq.n	800a1c4 <prvDeleteTCB+0x54>
 800a1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	60fb      	str	r3, [r7, #12]
 800a1c2:	e7fe      	b.n	800a1c2 <prvDeleteTCB+0x52>
	}
 800a1c4:	bf00      	nop
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1d2:	4b0c      	ldr	r3, [pc, #48]	; (800a204 <prvResetNextTaskUnblockTime+0x38>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d104      	bne.n	800a1e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1dc:	4b0a      	ldr	r3, [pc, #40]	; (800a208 <prvResetNextTaskUnblockTime+0x3c>)
 800a1de:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a1e4:	e008      	b.n	800a1f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1e6:	4b07      	ldr	r3, [pc, #28]	; (800a204 <prvResetNextTaskUnblockTime+0x38>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	4a04      	ldr	r2, [pc, #16]	; (800a208 <prvResetNextTaskUnblockTime+0x3c>)
 800a1f6:	6013      	str	r3, [r2, #0]
}
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr
 800a204:	200028dc 	.word	0x200028dc
 800a208:	20002944 	.word	0x20002944

0800a20c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a212:	4b0b      	ldr	r3, [pc, #44]	; (800a240 <xTaskGetSchedulerState+0x34>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d102      	bne.n	800a220 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a21a:	2301      	movs	r3, #1
 800a21c:	607b      	str	r3, [r7, #4]
 800a21e:	e008      	b.n	800a232 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a220:	4b08      	ldr	r3, [pc, #32]	; (800a244 <xTaskGetSchedulerState+0x38>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d102      	bne.n	800a22e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a228:	2302      	movs	r3, #2
 800a22a:	607b      	str	r3, [r7, #4]
 800a22c:	e001      	b.n	800a232 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a22e:	2300      	movs	r3, #0
 800a230:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a232:	687b      	ldr	r3, [r7, #4]
	}
 800a234:	4618      	mov	r0, r3
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr
 800a240:	20002930 	.word	0x20002930
 800a244:	2000294c 	.word	0x2000294c

0800a248 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a254:	2300      	movs	r3, #0
 800a256:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d054      	beq.n	800a308 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a25e:	4b2d      	ldr	r3, [pc, #180]	; (800a314 <xTaskPriorityDisinherit+0xcc>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	693a      	ldr	r2, [r7, #16]
 800a264:	429a      	cmp	r2, r3
 800a266:	d009      	beq.n	800a27c <xTaskPriorityDisinherit+0x34>
 800a268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	60fb      	str	r3, [r7, #12]
 800a27a:	e7fe      	b.n	800a27a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a280:	2b00      	cmp	r3, #0
 800a282:	d109      	bne.n	800a298 <xTaskPriorityDisinherit+0x50>
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	60bb      	str	r3, [r7, #8]
 800a296:	e7fe      	b.n	800a296 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a29c:	1e5a      	subs	r2, r3, #1
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d02c      	beq.n	800a308 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d128      	bne.n	800a308 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fe fc06 	bl	8008acc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d8:	4b0f      	ldr	r3, [pc, #60]	; (800a318 <xTaskPriorityDisinherit+0xd0>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d903      	bls.n	800a2e8 <xTaskPriorityDisinherit+0xa0>
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e4:	4a0c      	ldr	r2, [pc, #48]	; (800a318 <xTaskPriorityDisinherit+0xd0>)
 800a2e6:	6013      	str	r3, [r2, #0]
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4a09      	ldr	r2, [pc, #36]	; (800a31c <xTaskPriorityDisinherit+0xd4>)
 800a2f6:	441a      	add	r2, r3
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	4610      	mov	r0, r2
 800a300:	f7fe fb87 	bl	8008a12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a304:	2301      	movs	r3, #1
 800a306:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a308:	697b      	ldr	r3, [r7, #20]
	}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3718      	adds	r7, #24
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	20002450 	.word	0x20002450
 800a318:	2000292c 	.word	0x2000292c
 800a31c:	20002454 	.word	0x20002454

0800a320 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a326:	4b09      	ldr	r3, [pc, #36]	; (800a34c <uxTaskResetEventItemValue+0x2c>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	699b      	ldr	r3, [r3, #24]
 800a32c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a32e:	4b07      	ldr	r3, [pc, #28]	; (800a34c <uxTaskResetEventItemValue+0x2c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a334:	4b05      	ldr	r3, [pc, #20]	; (800a34c <uxTaskResetEventItemValue+0x2c>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a33c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a33e:	687b      	ldr	r3, [r7, #4]
}
 800a340:	4618      	mov	r0, r3
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	20002450 	.word	0x20002450

0800a350 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a35a:	4b21      	ldr	r3, [pc, #132]	; (800a3e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a360:	4b20      	ldr	r3, [pc, #128]	; (800a3e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	3304      	adds	r3, #4
 800a366:	4618      	mov	r0, r3
 800a368:	f7fe fbb0 	bl	8008acc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a372:	d10a      	bne.n	800a38a <prvAddCurrentTaskToDelayedList+0x3a>
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d007      	beq.n	800a38a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a37a:	4b1a      	ldr	r3, [pc, #104]	; (800a3e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	3304      	adds	r3, #4
 800a380:	4619      	mov	r1, r3
 800a382:	4819      	ldr	r0, [pc, #100]	; (800a3e8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a384:	f7fe fb45 	bl	8008a12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a388:	e026      	b.n	800a3d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4413      	add	r3, r2
 800a390:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a392:	4b14      	ldr	r3, [pc, #80]	; (800a3e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d209      	bcs.n	800a3b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3a2:	4b12      	ldr	r3, [pc, #72]	; (800a3ec <prvAddCurrentTaskToDelayedList+0x9c>)
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	4b0f      	ldr	r3, [pc, #60]	; (800a3e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	4610      	mov	r0, r2
 800a3b0:	f7fe fb53 	bl	8008a5a <vListInsert>
}
 800a3b4:	e010      	b.n	800a3d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3b6:	4b0e      	ldr	r3, [pc, #56]	; (800a3f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	4b0a      	ldr	r3, [pc, #40]	; (800a3e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	3304      	adds	r3, #4
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	f7fe fb49 	bl	8008a5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3c8:	4b0a      	ldr	r3, [pc, #40]	; (800a3f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68ba      	ldr	r2, [r7, #8]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d202      	bcs.n	800a3d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a3d2:	4a08      	ldr	r2, [pc, #32]	; (800a3f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	6013      	str	r3, [r2, #0]
}
 800a3d8:	bf00      	nop
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	20002928 	.word	0x20002928
 800a3e4:	20002450 	.word	0x20002450
 800a3e8:	20002910 	.word	0x20002910
 800a3ec:	200028e0 	.word	0x200028e0
 800a3f0:	200028dc 	.word	0x200028dc
 800a3f4:	20002944 	.word	0x20002944

0800a3f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08a      	sub	sp, #40	; 0x28
 800a3fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a3fe:	2300      	movs	r3, #0
 800a400:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a402:	f000 faff 	bl	800aa04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a406:	4b1c      	ldr	r3, [pc, #112]	; (800a478 <xTimerCreateTimerTask+0x80>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d021      	beq.n	800a452 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a40e:	2300      	movs	r3, #0
 800a410:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a412:	2300      	movs	r3, #0
 800a414:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a416:	1d3a      	adds	r2, r7, #4
 800a418:	f107 0108 	add.w	r1, r7, #8
 800a41c:	f107 030c 	add.w	r3, r7, #12
 800a420:	4618      	mov	r0, r3
 800a422:	f7fe f84f 	bl	80084c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a426:	6879      	ldr	r1, [r7, #4]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	9202      	str	r2, [sp, #8]
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	2302      	movs	r3, #2
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	2300      	movs	r3, #0
 800a436:	460a      	mov	r2, r1
 800a438:	4910      	ldr	r1, [pc, #64]	; (800a47c <xTimerCreateTimerTask+0x84>)
 800a43a:	4811      	ldr	r0, [pc, #68]	; (800a480 <xTimerCreateTimerTask+0x88>)
 800a43c:	f7ff f844 	bl	80094c8 <xTaskCreateStatic>
 800a440:	4602      	mov	r2, r0
 800a442:	4b10      	ldr	r3, [pc, #64]	; (800a484 <xTimerCreateTimerTask+0x8c>)
 800a444:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a446:	4b0f      	ldr	r3, [pc, #60]	; (800a484 <xTimerCreateTimerTask+0x8c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d001      	beq.n	800a452 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a44e:	2301      	movs	r3, #1
 800a450:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d109      	bne.n	800a46c <xTimerCreateTimerTask+0x74>
 800a458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	613b      	str	r3, [r7, #16]
 800a46a:	e7fe      	b.n	800a46a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a46c:	697b      	ldr	r3, [r7, #20]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3718      	adds	r7, #24
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20002980 	.word	0x20002980
 800a47c:	0800c6b4 	.word	0x0800c6b4
 800a480:	0800a5b9 	.word	0x0800a5b9
 800a484:	20002984 	.word	0x20002984

0800a488 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08a      	sub	sp, #40	; 0x28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a496:	2300      	movs	r3, #0
 800a498:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d109      	bne.n	800a4b4 <xTimerGenericCommand+0x2c>
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	623b      	str	r3, [r7, #32]
 800a4b2:	e7fe      	b.n	800a4b2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a4b4:	4b19      	ldr	r3, [pc, #100]	; (800a51c <xTimerGenericCommand+0x94>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d02a      	beq.n	800a512 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	2b05      	cmp	r3, #5
 800a4cc:	dc18      	bgt.n	800a500 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a4ce:	f7ff fe9d 	bl	800a20c <xTaskGetSchedulerState>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d109      	bne.n	800a4ec <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a4d8:	4b10      	ldr	r3, [pc, #64]	; (800a51c <xTimerGenericCommand+0x94>)
 800a4da:	6818      	ldr	r0, [r3, #0]
 800a4dc:	f107 0110 	add.w	r1, r7, #16
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4e4:	f7fe fc1a 	bl	8008d1c <xQueueGenericSend>
 800a4e8:	6278      	str	r0, [r7, #36]	; 0x24
 800a4ea:	e012      	b.n	800a512 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a4ec:	4b0b      	ldr	r3, [pc, #44]	; (800a51c <xTimerGenericCommand+0x94>)
 800a4ee:	6818      	ldr	r0, [r3, #0]
 800a4f0:	f107 0110 	add.w	r1, r7, #16
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f7fe fc10 	bl	8008d1c <xQueueGenericSend>
 800a4fc:	6278      	str	r0, [r7, #36]	; 0x24
 800a4fe:	e008      	b.n	800a512 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a500:	4b06      	ldr	r3, [pc, #24]	; (800a51c <xTimerGenericCommand+0x94>)
 800a502:	6818      	ldr	r0, [r3, #0]
 800a504:	f107 0110 	add.w	r1, r7, #16
 800a508:	2300      	movs	r3, #0
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	f7fe fd00 	bl	8008f10 <xQueueGenericSendFromISR>
 800a510:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a514:	4618      	mov	r0, r3
 800a516:	3728      	adds	r7, #40	; 0x28
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	20002980 	.word	0x20002980

0800a520 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af02      	add	r7, sp, #8
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a52a:	4b22      	ldr	r3, [pc, #136]	; (800a5b4 <prvProcessExpiredTimer+0x94>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	3304      	adds	r3, #4
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe fac7 	bl	8008acc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a544:	f003 0304 	and.w	r3, r3, #4
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d021      	beq.n	800a590 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	699a      	ldr	r2, [r3, #24]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	18d1      	adds	r1, r2, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	6978      	ldr	r0, [r7, #20]
 800a55a:	f000 f8d1 	bl	800a700 <prvInsertTimerInActiveList>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d01e      	beq.n	800a5a2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a564:	2300      	movs	r3, #0
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	2300      	movs	r3, #0
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	2100      	movs	r1, #0
 800a56e:	6978      	ldr	r0, [r7, #20]
 800a570:	f7ff ff8a 	bl	800a488 <xTimerGenericCommand>
 800a574:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d112      	bne.n	800a5a2 <prvProcessExpiredTimer+0x82>
 800a57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	60fb      	str	r3, [r7, #12]
 800a58e:	e7fe      	b.n	800a58e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a596:	f023 0301 	bic.w	r3, r3, #1
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	6978      	ldr	r0, [r7, #20]
 800a5a8:	4798      	blx	r3
}
 800a5aa:	bf00      	nop
 800a5ac:	3718      	adds	r7, #24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	20002978 	.word	0x20002978

0800a5b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5c0:	f107 0308 	add.w	r3, r7, #8
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f000 f857 	bl	800a678 <prvGetNextExpireTime>
 800a5ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f000 f803 	bl	800a5dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a5d6:	f000 f8d5 	bl	800a784 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5da:	e7f1      	b.n	800a5c0 <prvTimerTask+0x8>

0800a5dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a5e6:	f7ff f9a5 	bl	8009934 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5ea:	f107 0308 	add.w	r3, r7, #8
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 f866 	bl	800a6c0 <prvSampleTimeNow>
 800a5f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d130      	bne.n	800a65e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10a      	bne.n	800a618 <prvProcessTimerOrBlockTask+0x3c>
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	429a      	cmp	r2, r3
 800a608:	d806      	bhi.n	800a618 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a60a:	f7ff f9a1 	bl	8009950 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a60e:	68f9      	ldr	r1, [r7, #12]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f7ff ff85 	bl	800a520 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a616:	e024      	b.n	800a662 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d008      	beq.n	800a630 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a61e:	4b13      	ldr	r3, [pc, #76]	; (800a66c <prvProcessTimerOrBlockTask+0x90>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d101      	bne.n	800a62c <prvProcessTimerOrBlockTask+0x50>
 800a628:	2301      	movs	r3, #1
 800a62a:	e000      	b.n	800a62e <prvProcessTimerOrBlockTask+0x52>
 800a62c:	2300      	movs	r3, #0
 800a62e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a630:	4b0f      	ldr	r3, [pc, #60]	; (800a670 <prvProcessTimerOrBlockTask+0x94>)
 800a632:	6818      	ldr	r0, [r3, #0]
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	683a      	ldr	r2, [r7, #0]
 800a63c:	4619      	mov	r1, r3
 800a63e:	f7fe ff0f 	bl	8009460 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a642:	f7ff f985 	bl	8009950 <xTaskResumeAll>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10a      	bne.n	800a662 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a64c:	4b09      	ldr	r3, [pc, #36]	; (800a674 <prvProcessTimerOrBlockTask+0x98>)
 800a64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a652:	601a      	str	r2, [r3, #0]
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	f3bf 8f6f 	isb	sy
}
 800a65c:	e001      	b.n	800a662 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a65e:	f7ff f977 	bl	8009950 <xTaskResumeAll>
}
 800a662:	bf00      	nop
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	2000297c 	.word	0x2000297c
 800a670:	20002980 	.word	0x20002980
 800a674:	e000ed04 	.word	0xe000ed04

0800a678 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a680:	4b0e      	ldr	r3, [pc, #56]	; (800a6bc <prvGetNextExpireTime+0x44>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d101      	bne.n	800a68e <prvGetNextExpireTime+0x16>
 800a68a:	2201      	movs	r2, #1
 800a68c:	e000      	b.n	800a690 <prvGetNextExpireTime+0x18>
 800a68e:	2200      	movs	r2, #0
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d105      	bne.n	800a6a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a69c:	4b07      	ldr	r3, [pc, #28]	; (800a6bc <prvGetNextExpireTime+0x44>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	60fb      	str	r3, [r7, #12]
 800a6a6:	e001      	b.n	800a6ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3714      	adds	r7, #20
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr
 800a6ba:	bf00      	nop
 800a6bc:	20002978 	.word	0x20002978

0800a6c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a6c8:	f7ff f9de 	bl	8009a88 <xTaskGetTickCount>
 800a6cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a6ce:	4b0b      	ldr	r3, [pc, #44]	; (800a6fc <prvSampleTimeNow+0x3c>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d205      	bcs.n	800a6e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a6d8:	f000 f930 	bl	800a93c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	601a      	str	r2, [r3, #0]
 800a6e2:	e002      	b.n	800a6ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a6ea:	4a04      	ldr	r2, [pc, #16]	; (800a6fc <prvSampleTimeNow+0x3c>)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20002988 	.word	0x20002988

0800a700 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a70e:	2300      	movs	r3, #0
 800a710:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	429a      	cmp	r2, r3
 800a724:	d812      	bhi.n	800a74c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	1ad2      	subs	r2, r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	699b      	ldr	r3, [r3, #24]
 800a730:	429a      	cmp	r2, r3
 800a732:	d302      	bcc.n	800a73a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a734:	2301      	movs	r3, #1
 800a736:	617b      	str	r3, [r7, #20]
 800a738:	e01b      	b.n	800a772 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a73a:	4b10      	ldr	r3, [pc, #64]	; (800a77c <prvInsertTimerInActiveList+0x7c>)
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	3304      	adds	r3, #4
 800a742:	4619      	mov	r1, r3
 800a744:	4610      	mov	r0, r2
 800a746:	f7fe f988 	bl	8008a5a <vListInsert>
 800a74a:	e012      	b.n	800a772 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	429a      	cmp	r2, r3
 800a752:	d206      	bcs.n	800a762 <prvInsertTimerInActiveList+0x62>
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d302      	bcc.n	800a762 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a75c:	2301      	movs	r3, #1
 800a75e:	617b      	str	r3, [r7, #20]
 800a760:	e007      	b.n	800a772 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a762:	4b07      	ldr	r3, [pc, #28]	; (800a780 <prvInsertTimerInActiveList+0x80>)
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	3304      	adds	r3, #4
 800a76a:	4619      	mov	r1, r3
 800a76c:	4610      	mov	r0, r2
 800a76e:	f7fe f974 	bl	8008a5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a772:	697b      	ldr	r3, [r7, #20]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3718      	adds	r7, #24
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	2000297c 	.word	0x2000297c
 800a780:	20002978 	.word	0x20002978

0800a784 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b08e      	sub	sp, #56	; 0x38
 800a788:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a78a:	e0c6      	b.n	800a91a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	da17      	bge.n	800a7c2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a792:	1d3b      	adds	r3, r7, #4
 800a794:	3304      	adds	r3, #4
 800a796:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d109      	bne.n	800a7b2 <prvProcessReceivedCommands+0x2e>
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	61fb      	str	r3, [r7, #28]
 800a7b0:	e7fe      	b.n	800a7b0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7b8:	6850      	ldr	r0, [r2, #4]
 800a7ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7bc:	6892      	ldr	r2, [r2, #8]
 800a7be:	4611      	mov	r1, r2
 800a7c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f2c0 80a7 	blt.w	800a918 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d004      	beq.n	800a7e0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d8:	3304      	adds	r3, #4
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fe f976 	bl	8008acc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7e0:	463b      	mov	r3, r7
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7ff ff6c 	bl	800a6c0 <prvSampleTimeNow>
 800a7e8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2b09      	cmp	r3, #9
 800a7ee:	f200 8094 	bhi.w	800a91a <prvProcessReceivedCommands+0x196>
 800a7f2:	a201      	add	r2, pc, #4	; (adr r2, 800a7f8 <prvProcessReceivedCommands+0x74>)
 800a7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f8:	0800a821 	.word	0x0800a821
 800a7fc:	0800a821 	.word	0x0800a821
 800a800:	0800a821 	.word	0x0800a821
 800a804:	0800a893 	.word	0x0800a893
 800a808:	0800a8a7 	.word	0x0800a8a7
 800a80c:	0800a8ef 	.word	0x0800a8ef
 800a810:	0800a821 	.word	0x0800a821
 800a814:	0800a821 	.word	0x0800a821
 800a818:	0800a893 	.word	0x0800a893
 800a81c:	0800a8a7 	.word	0x0800a8a7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a826:	f043 0301 	orr.w	r3, r3, #1
 800a82a:	b2da      	uxtb	r2, r3
 800a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	18d1      	adds	r1, r2, r3
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a83e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a840:	f7ff ff5e 	bl	800a700 <prvInsertTimerInActiveList>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d067      	beq.n	800a91a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84c:	6a1b      	ldr	r3, [r3, #32]
 800a84e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a850:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a858:	f003 0304 	and.w	r3, r3, #4
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d05c      	beq.n	800a91a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	441a      	add	r2, r3
 800a868:	2300      	movs	r3, #0
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	2300      	movs	r3, #0
 800a86e:	2100      	movs	r1, #0
 800a870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a872:	f7ff fe09 	bl	800a488 <xTimerGenericCommand>
 800a876:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a878:	6a3b      	ldr	r3, [r7, #32]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d14d      	bne.n	800a91a <prvProcessReceivedCommands+0x196>
 800a87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	61bb      	str	r3, [r7, #24]
 800a890:	e7fe      	b.n	800a890 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a894:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a898:	f023 0301 	bic.w	r3, r3, #1
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a8a4:	e039      	b.n	800a91a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8ac:	f043 0301 	orr.w	r3, r3, #1
 800a8b0:	b2da      	uxtb	r2, r3
 800a8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d109      	bne.n	800a8da <prvProcessReceivedCommands+0x156>
 800a8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	617b      	str	r3, [r7, #20]
 800a8d8:	e7fe      	b.n	800a8d8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8dc:	699a      	ldr	r2, [r3, #24]
 800a8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e0:	18d1      	adds	r1, r2, r3
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8e8:	f7ff ff0a 	bl	800a700 <prvInsertTimerInActiveList>
					break;
 800a8ec:	e015      	b.n	800a91a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8f4:	f003 0302 	and.w	r3, r3, #2
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d103      	bne.n	800a904 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800a8fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8fe:	f000 fbe1 	bl	800b0c4 <vPortFree>
 800a902:	e00a      	b.n	800a91a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a906:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a90a:	f023 0301 	bic.w	r3, r3, #1
 800a90e:	b2da      	uxtb	r2, r3
 800a910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a916:	e000      	b.n	800a91a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a918:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a91a:	4b07      	ldr	r3, [pc, #28]	; (800a938 <prvProcessReceivedCommands+0x1b4>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	1d39      	adds	r1, r7, #4
 800a920:	2200      	movs	r2, #0
 800a922:	4618      	mov	r0, r3
 800a924:	f7fe fb88 	bl	8009038 <xQueueReceive>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f47f af2e 	bne.w	800a78c <prvProcessReceivedCommands+0x8>
	}
}
 800a930:	bf00      	nop
 800a932:	3730      	adds	r7, #48	; 0x30
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	20002980 	.word	0x20002980

0800a93c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b088      	sub	sp, #32
 800a940:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a942:	e047      	b.n	800a9d4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a944:	4b2d      	ldr	r3, [pc, #180]	; (800a9fc <prvSwitchTimerLists+0xc0>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a94e:	4b2b      	ldr	r3, [pc, #172]	; (800a9fc <prvSwitchTimerLists+0xc0>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	3304      	adds	r3, #4
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7fe f8b5 	bl	8008acc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6a1b      	ldr	r3, [r3, #32]
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a970:	f003 0304 	and.w	r3, r3, #4
 800a974:	2b00      	cmp	r3, #0
 800a976:	d02d      	beq.n	800a9d4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	699b      	ldr	r3, [r3, #24]
 800a97c:	693a      	ldr	r2, [r7, #16]
 800a97e:	4413      	add	r3, r2
 800a980:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	429a      	cmp	r2, r3
 800a988:	d90e      	bls.n	800a9a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a996:	4b19      	ldr	r3, [pc, #100]	; (800a9fc <prvSwitchTimerLists+0xc0>)
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	3304      	adds	r3, #4
 800a99e:	4619      	mov	r1, r3
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	f7fe f85a 	bl	8008a5a <vListInsert>
 800a9a6:	e015      	b.n	800a9d4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f7ff fd68 	bl	800a488 <xTimerGenericCommand>
 800a9b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d109      	bne.n	800a9d4 <prvSwitchTimerLists+0x98>
 800a9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c4:	f383 8811 	msr	BASEPRI, r3
 800a9c8:	f3bf 8f6f 	isb	sy
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	603b      	str	r3, [r7, #0]
 800a9d2:	e7fe      	b.n	800a9d2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9d4:	4b09      	ldr	r3, [pc, #36]	; (800a9fc <prvSwitchTimerLists+0xc0>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1b2      	bne.n	800a944 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a9de:	4b07      	ldr	r3, [pc, #28]	; (800a9fc <prvSwitchTimerLists+0xc0>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a9e4:	4b06      	ldr	r3, [pc, #24]	; (800aa00 <prvSwitchTimerLists+0xc4>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a04      	ldr	r2, [pc, #16]	; (800a9fc <prvSwitchTimerLists+0xc0>)
 800a9ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a9ec:	4a04      	ldr	r2, [pc, #16]	; (800aa00 <prvSwitchTimerLists+0xc4>)
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	6013      	str	r3, [r2, #0]
}
 800a9f2:	bf00      	nop
 800a9f4:	3718      	adds	r7, #24
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	20002978 	.word	0x20002978
 800aa00:	2000297c 	.word	0x2000297c

0800aa04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa0a:	f000 f97f 	bl	800ad0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa0e:	4b15      	ldr	r3, [pc, #84]	; (800aa64 <prvCheckForValidListAndQueue+0x60>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d120      	bne.n	800aa58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa16:	4814      	ldr	r0, [pc, #80]	; (800aa68 <prvCheckForValidListAndQueue+0x64>)
 800aa18:	f7fd ffce 	bl	80089b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa1c:	4813      	ldr	r0, [pc, #76]	; (800aa6c <prvCheckForValidListAndQueue+0x68>)
 800aa1e:	f7fd ffcb 	bl	80089b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa22:	4b13      	ldr	r3, [pc, #76]	; (800aa70 <prvCheckForValidListAndQueue+0x6c>)
 800aa24:	4a10      	ldr	r2, [pc, #64]	; (800aa68 <prvCheckForValidListAndQueue+0x64>)
 800aa26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa28:	4b12      	ldr	r3, [pc, #72]	; (800aa74 <prvCheckForValidListAndQueue+0x70>)
 800aa2a:	4a10      	ldr	r2, [pc, #64]	; (800aa6c <prvCheckForValidListAndQueue+0x68>)
 800aa2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa2e:	2300      	movs	r3, #0
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	4b11      	ldr	r3, [pc, #68]	; (800aa78 <prvCheckForValidListAndQueue+0x74>)
 800aa34:	4a11      	ldr	r2, [pc, #68]	; (800aa7c <prvCheckForValidListAndQueue+0x78>)
 800aa36:	2110      	movs	r1, #16
 800aa38:	200a      	movs	r0, #10
 800aa3a:	f7fe f8d9 	bl	8008bf0 <xQueueGenericCreateStatic>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	4b08      	ldr	r3, [pc, #32]	; (800aa64 <prvCheckForValidListAndQueue+0x60>)
 800aa42:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa44:	4b07      	ldr	r3, [pc, #28]	; (800aa64 <prvCheckForValidListAndQueue+0x60>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d005      	beq.n	800aa58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa4c:	4b05      	ldr	r3, [pc, #20]	; (800aa64 <prvCheckForValidListAndQueue+0x60>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	490b      	ldr	r1, [pc, #44]	; (800aa80 <prvCheckForValidListAndQueue+0x7c>)
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fe fcdc 	bl	8009410 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa58:	f000 f986 	bl	800ad68 <vPortExitCritical>
}
 800aa5c:	bf00      	nop
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	20002980 	.word	0x20002980
 800aa68:	20002950 	.word	0x20002950
 800aa6c:	20002964 	.word	0x20002964
 800aa70:	20002978 	.word	0x20002978
 800aa74:	2000297c 	.word	0x2000297c
 800aa78:	20002a2c 	.word	0x20002a2c
 800aa7c:	2000298c 	.word	0x2000298c
 800aa80:	0800c6bc 	.word	0x0800c6bc

0800aa84 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b08a      	sub	sp, #40	; 0x28
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
 800aa90:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800aa92:	f06f 0301 	mvn.w	r3, #1
 800aa96:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aaa4:	4b06      	ldr	r3, [pc, #24]	; (800aac0 <xTimerPendFunctionCallFromISR+0x3c>)
 800aaa6:	6818      	ldr	r0, [r3, #0]
 800aaa8:	f107 0114 	add.w	r1, r7, #20
 800aaac:	2300      	movs	r3, #0
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	f7fe fa2e 	bl	8008f10 <xQueueGenericSendFromISR>
 800aab4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3728      	adds	r7, #40	; 0x28
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20002980 	.word	0x20002980

0800aac4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	3b04      	subs	r3, #4
 800aad4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aadc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	3b04      	subs	r3, #4
 800aae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	f023 0201 	bic.w	r2, r3, #1
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	3b04      	subs	r3, #4
 800aaf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aaf4:	4a0c      	ldr	r2, [pc, #48]	; (800ab28 <pxPortInitialiseStack+0x64>)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	3b14      	subs	r3, #20
 800aafe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	3b04      	subs	r3, #4
 800ab0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f06f 0202 	mvn.w	r2, #2
 800ab12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	3b20      	subs	r3, #32
 800ab18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3714      	adds	r7, #20
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr
 800ab28:	0800ab2d 	.word	0x0800ab2d

0800ab2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab32:	2300      	movs	r3, #0
 800ab34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab36:	4b11      	ldr	r3, [pc, #68]	; (800ab7c <prvTaskExitError+0x50>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3e:	d009      	beq.n	800ab54 <prvTaskExitError+0x28>
 800ab40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	60fb      	str	r3, [r7, #12]
 800ab52:	e7fe      	b.n	800ab52 <prvTaskExitError+0x26>
 800ab54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab66:	bf00      	nop
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d0fc      	beq.n	800ab68 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab6e:	bf00      	nop
 800ab70:	3714      	adds	r7, #20
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	200000f4 	.word	0x200000f4

0800ab80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab80:	4b07      	ldr	r3, [pc, #28]	; (800aba0 <pxCurrentTCBConst2>)
 800ab82:	6819      	ldr	r1, [r3, #0]
 800ab84:	6808      	ldr	r0, [r1, #0]
 800ab86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8a:	f380 8809 	msr	PSP, r0
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	f04f 0000 	mov.w	r0, #0
 800ab96:	f380 8811 	msr	BASEPRI, r0
 800ab9a:	4770      	bx	lr
 800ab9c:	f3af 8000 	nop.w

0800aba0 <pxCurrentTCBConst2>:
 800aba0:	20002450 	.word	0x20002450
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aba4:	bf00      	nop
 800aba6:	bf00      	nop

0800aba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aba8:	4808      	ldr	r0, [pc, #32]	; (800abcc <prvPortStartFirstTask+0x24>)
 800abaa:	6800      	ldr	r0, [r0, #0]
 800abac:	6800      	ldr	r0, [r0, #0]
 800abae:	f380 8808 	msr	MSP, r0
 800abb2:	f04f 0000 	mov.w	r0, #0
 800abb6:	f380 8814 	msr	CONTROL, r0
 800abba:	b662      	cpsie	i
 800abbc:	b661      	cpsie	f
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	df00      	svc	0
 800abc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abca:	bf00      	nop
 800abcc:	e000ed08 	.word	0xe000ed08

0800abd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800abd6:	4b44      	ldr	r3, [pc, #272]	; (800ace8 <xPortStartScheduler+0x118>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a44      	ldr	r2, [pc, #272]	; (800acec <xPortStartScheduler+0x11c>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d109      	bne.n	800abf4 <xPortStartScheduler+0x24>
 800abe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	613b      	str	r3, [r7, #16]
 800abf2:	e7fe      	b.n	800abf2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800abf4:	4b3c      	ldr	r3, [pc, #240]	; (800ace8 <xPortStartScheduler+0x118>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a3d      	ldr	r2, [pc, #244]	; (800acf0 <xPortStartScheduler+0x120>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d109      	bne.n	800ac12 <xPortStartScheduler+0x42>
 800abfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac02:	f383 8811 	msr	BASEPRI, r3
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	60fb      	str	r3, [r7, #12]
 800ac10:	e7fe      	b.n	800ac10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac12:	4b38      	ldr	r3, [pc, #224]	; (800acf4 <xPortStartScheduler+0x124>)
 800ac14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	22ff      	movs	r2, #255	; 0xff
 800ac22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac2c:	78fb      	ldrb	r3, [r7, #3]
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ac34:	b2da      	uxtb	r2, r3
 800ac36:	4b30      	ldr	r3, [pc, #192]	; (800acf8 <xPortStartScheduler+0x128>)
 800ac38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac3a:	4b30      	ldr	r3, [pc, #192]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac3c:	2207      	movs	r2, #7
 800ac3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac40:	e009      	b.n	800ac56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ac42:	4b2e      	ldr	r3, [pc, #184]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3b01      	subs	r3, #1
 800ac48:	4a2c      	ldr	r2, [pc, #176]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac4c:	78fb      	ldrb	r3, [r7, #3]
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	005b      	lsls	r3, r3, #1
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac56:	78fb      	ldrb	r3, [r7, #3]
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac5e:	2b80      	cmp	r3, #128	; 0x80
 800ac60:	d0ef      	beq.n	800ac42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac62:	4b26      	ldr	r3, [pc, #152]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f1c3 0307 	rsb	r3, r3, #7
 800ac6a:	2b04      	cmp	r3, #4
 800ac6c:	d009      	beq.n	800ac82 <xPortStartScheduler+0xb2>
 800ac6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	60bb      	str	r3, [r7, #8]
 800ac80:	e7fe      	b.n	800ac80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac82:	4b1e      	ldr	r3, [pc, #120]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	021b      	lsls	r3, r3, #8
 800ac88:	4a1c      	ldr	r2, [pc, #112]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac8c:	4b1b      	ldr	r3, [pc, #108]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac94:	4a19      	ldr	r2, [pc, #100]	; (800acfc <xPortStartScheduler+0x12c>)
 800ac96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aca0:	4b17      	ldr	r3, [pc, #92]	; (800ad00 <xPortStartScheduler+0x130>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a16      	ldr	r2, [pc, #88]	; (800ad00 <xPortStartScheduler+0x130>)
 800aca6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800acaa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800acac:	4b14      	ldr	r3, [pc, #80]	; (800ad00 <xPortStartScheduler+0x130>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a13      	ldr	r2, [pc, #76]	; (800ad00 <xPortStartScheduler+0x130>)
 800acb2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800acb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800acb8:	f000 f8d6 	bl	800ae68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800acbc:	4b11      	ldr	r3, [pc, #68]	; (800ad04 <xPortStartScheduler+0x134>)
 800acbe:	2200      	movs	r2, #0
 800acc0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800acc2:	f000 f8f5 	bl	800aeb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800acc6:	4b10      	ldr	r3, [pc, #64]	; (800ad08 <xPortStartScheduler+0x138>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a0f      	ldr	r2, [pc, #60]	; (800ad08 <xPortStartScheduler+0x138>)
 800accc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800acd0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800acd2:	f7ff ff69 	bl	800aba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800acd6:	f7fe ff9f 	bl	8009c18 <vTaskSwitchContext>
	prvTaskExitError();
 800acda:	f7ff ff27 	bl	800ab2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3718      	adds	r7, #24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	e000ed00 	.word	0xe000ed00
 800acec:	410fc271 	.word	0x410fc271
 800acf0:	410fc270 	.word	0x410fc270
 800acf4:	e000e400 	.word	0xe000e400
 800acf8:	20002a7c 	.word	0x20002a7c
 800acfc:	20002a80 	.word	0x20002a80
 800ad00:	e000ed20 	.word	0xe000ed20
 800ad04:	200000f4 	.word	0x200000f4
 800ad08:	e000ef34 	.word	0xe000ef34

0800ad0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad16:	f383 8811 	msr	BASEPRI, r3
 800ad1a:	f3bf 8f6f 	isb	sy
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad24:	4b0e      	ldr	r3, [pc, #56]	; (800ad60 <vPortEnterCritical+0x54>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	4a0d      	ldr	r2, [pc, #52]	; (800ad60 <vPortEnterCritical+0x54>)
 800ad2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad2e:	4b0c      	ldr	r3, [pc, #48]	; (800ad60 <vPortEnterCritical+0x54>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d10e      	bne.n	800ad54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad36:	4b0b      	ldr	r3, [pc, #44]	; (800ad64 <vPortEnterCritical+0x58>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d009      	beq.n	800ad54 <vPortEnterCritical+0x48>
 800ad40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	603b      	str	r3, [r7, #0]
 800ad52:	e7fe      	b.n	800ad52 <vPortEnterCritical+0x46>
	}
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr
 800ad60:	200000f4 	.word	0x200000f4
 800ad64:	e000ed04 	.word	0xe000ed04

0800ad68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad6e:	4b11      	ldr	r3, [pc, #68]	; (800adb4 <vPortExitCritical+0x4c>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d109      	bne.n	800ad8a <vPortExitCritical+0x22>
 800ad76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7a:	f383 8811 	msr	BASEPRI, r3
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	607b      	str	r3, [r7, #4]
 800ad88:	e7fe      	b.n	800ad88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ad8a:	4b0a      	ldr	r3, [pc, #40]	; (800adb4 <vPortExitCritical+0x4c>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	4a08      	ldr	r2, [pc, #32]	; (800adb4 <vPortExitCritical+0x4c>)
 800ad92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad94:	4b07      	ldr	r3, [pc, #28]	; (800adb4 <vPortExitCritical+0x4c>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d104      	bne.n	800ada6 <vPortExitCritical+0x3e>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ada6:	bf00      	nop
 800ada8:	370c      	adds	r7, #12
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	200000f4 	.word	0x200000f4
	...

0800adc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800adc0:	f3ef 8009 	mrs	r0, PSP
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	4b15      	ldr	r3, [pc, #84]	; (800ae20 <pxCurrentTCBConst>)
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	f01e 0f10 	tst.w	lr, #16
 800add0:	bf08      	it	eq
 800add2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800add6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adda:	6010      	str	r0, [r2, #0]
 800addc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ade0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ade4:	f380 8811 	msr	BASEPRI, r0
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f7fe ff12 	bl	8009c18 <vTaskSwitchContext>
 800adf4:	f04f 0000 	mov.w	r0, #0
 800adf8:	f380 8811 	msr	BASEPRI, r0
 800adfc:	bc09      	pop	{r0, r3}
 800adfe:	6819      	ldr	r1, [r3, #0]
 800ae00:	6808      	ldr	r0, [r1, #0]
 800ae02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae06:	f01e 0f10 	tst.w	lr, #16
 800ae0a:	bf08      	it	eq
 800ae0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae10:	f380 8809 	msr	PSP, r0
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	f3af 8000 	nop.w

0800ae20 <pxCurrentTCBConst>:
 800ae20:	20002450 	.word	0x20002450
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae24:	bf00      	nop
 800ae26:	bf00      	nop

0800ae28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae32:	f383 8811 	msr	BASEPRI, r3
 800ae36:	f3bf 8f6f 	isb	sy
 800ae3a:	f3bf 8f4f 	dsb	sy
 800ae3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae40:	f7fe fe32 	bl	8009aa8 <xTaskIncrementTick>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae4a:	4b06      	ldr	r3, [pc, #24]	; (800ae64 <SysTick_Handler+0x3c>)
 800ae4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae50:	601a      	str	r2, [r3, #0]
 800ae52:	2300      	movs	r3, #0
 800ae54:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae5c:	bf00      	nop
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	e000ed04 	.word	0xe000ed04

0800ae68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae68:	b480      	push	{r7}
 800ae6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae6c:	4b0b      	ldr	r3, [pc, #44]	; (800ae9c <vPortSetupTimerInterrupt+0x34>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae72:	4b0b      	ldr	r3, [pc, #44]	; (800aea0 <vPortSetupTimerInterrupt+0x38>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae78:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <vPortSetupTimerInterrupt+0x3c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a0a      	ldr	r2, [pc, #40]	; (800aea8 <vPortSetupTimerInterrupt+0x40>)
 800ae7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae82:	099b      	lsrs	r3, r3, #6
 800ae84:	4a09      	ldr	r2, [pc, #36]	; (800aeac <vPortSetupTimerInterrupt+0x44>)
 800ae86:	3b01      	subs	r3, #1
 800ae88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae8a:	4b04      	ldr	r3, [pc, #16]	; (800ae9c <vPortSetupTimerInterrupt+0x34>)
 800ae8c:	2207      	movs	r2, #7
 800ae8e:	601a      	str	r2, [r3, #0]
}
 800ae90:	bf00      	nop
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	e000e010 	.word	0xe000e010
 800aea0:	e000e018 	.word	0xe000e018
 800aea4:	20000020 	.word	0x20000020
 800aea8:	10624dd3 	.word	0x10624dd3
 800aeac:	e000e014 	.word	0xe000e014

0800aeb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aeb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aec0 <vPortEnableVFP+0x10>
 800aeb4:	6801      	ldr	r1, [r0, #0]
 800aeb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aeba:	6001      	str	r1, [r0, #0]
 800aebc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aebe:	bf00      	nop
 800aec0:	e000ed88 	.word	0xe000ed88

0800aec4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aeca:	f3ef 8305 	mrs	r3, IPSR
 800aece:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2b0f      	cmp	r3, #15
 800aed4:	d913      	bls.n	800aefe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aed6:	4a16      	ldr	r2, [pc, #88]	; (800af30 <vPortValidateInterruptPriority+0x6c>)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	4413      	add	r3, r2
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aee0:	4b14      	ldr	r3, [pc, #80]	; (800af34 <vPortValidateInterruptPriority+0x70>)
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	7afa      	ldrb	r2, [r7, #11]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d209      	bcs.n	800aefe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800aeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeee:	f383 8811 	msr	BASEPRI, r3
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	f3bf 8f4f 	dsb	sy
 800aefa:	607b      	str	r3, [r7, #4]
 800aefc:	e7fe      	b.n	800aefc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aefe:	4b0e      	ldr	r3, [pc, #56]	; (800af38 <vPortValidateInterruptPriority+0x74>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af06:	4b0d      	ldr	r3, [pc, #52]	; (800af3c <vPortValidateInterruptPriority+0x78>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d909      	bls.n	800af22 <vPortValidateInterruptPriority+0x5e>
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	603b      	str	r3, [r7, #0]
 800af20:	e7fe      	b.n	800af20 <vPortValidateInterruptPriority+0x5c>
	}
 800af22:	bf00      	nop
 800af24:	3714      	adds	r7, #20
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	e000e3f0 	.word	0xe000e3f0
 800af34:	20002a7c 	.word	0x20002a7c
 800af38:	e000ed0c 	.word	0xe000ed0c
 800af3c:	20002a80 	.word	0x20002a80

0800af40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b08a      	sub	sp, #40	; 0x28
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af48:	2300      	movs	r3, #0
 800af4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af4c:	f7fe fcf2 	bl	8009934 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af50:	4b57      	ldr	r3, [pc, #348]	; (800b0b0 <pvPortMalloc+0x170>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af58:	f000 f90c 	bl	800b174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af5c:	4b55      	ldr	r3, [pc, #340]	; (800b0b4 <pvPortMalloc+0x174>)
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4013      	ands	r3, r2
 800af64:	2b00      	cmp	r3, #0
 800af66:	f040 808c 	bne.w	800b082 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d01c      	beq.n	800afaa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800af70:	2208      	movs	r2, #8
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4413      	add	r3, r2
 800af76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f003 0307 	and.w	r3, r3, #7
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d013      	beq.n	800afaa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f023 0307 	bic.w	r3, r3, #7
 800af88:	3308      	adds	r3, #8
 800af8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f003 0307 	and.w	r3, r3, #7
 800af92:	2b00      	cmp	r3, #0
 800af94:	d009      	beq.n	800afaa <pvPortMalloc+0x6a>
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	e7fe      	b.n	800afa8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d068      	beq.n	800b082 <pvPortMalloc+0x142>
 800afb0:	4b41      	ldr	r3, [pc, #260]	; (800b0b8 <pvPortMalloc+0x178>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d863      	bhi.n	800b082 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800afba:	4b40      	ldr	r3, [pc, #256]	; (800b0bc <pvPortMalloc+0x17c>)
 800afbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800afbe:	4b3f      	ldr	r3, [pc, #252]	; (800b0bc <pvPortMalloc+0x17c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afc4:	e004      	b.n	800afd0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800afc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d903      	bls.n	800afe2 <pvPortMalloc+0xa2>
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1f1      	bne.n	800afc6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800afe2:	4b33      	ldr	r3, [pc, #204]	; (800b0b0 <pvPortMalloc+0x170>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe8:	429a      	cmp	r2, r3
 800afea:	d04a      	beq.n	800b082 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800afec:	6a3b      	ldr	r3, [r7, #32]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2208      	movs	r2, #8
 800aff2:	4413      	add	r3, r2
 800aff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	6a3b      	ldr	r3, [r7, #32]
 800affc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	1ad2      	subs	r2, r2, r3
 800b006:	2308      	movs	r3, #8
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d91e      	bls.n	800b04c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4413      	add	r3, r2
 800b014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	f003 0307 	and.w	r3, r3, #7
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d009      	beq.n	800b034 <pvPortMalloc+0xf4>
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	613b      	str	r3, [r7, #16]
 800b032:	e7fe      	b.n	800b032 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b036:	685a      	ldr	r2, [r3, #4]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	1ad2      	subs	r2, r2, r3
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b046:	69b8      	ldr	r0, [r7, #24]
 800b048:	f000 f8f6 	bl	800b238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b04c:	4b1a      	ldr	r3, [pc, #104]	; (800b0b8 <pvPortMalloc+0x178>)
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	1ad3      	subs	r3, r2, r3
 800b056:	4a18      	ldr	r2, [pc, #96]	; (800b0b8 <pvPortMalloc+0x178>)
 800b058:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b05a:	4b17      	ldr	r3, [pc, #92]	; (800b0b8 <pvPortMalloc+0x178>)
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	4b18      	ldr	r3, [pc, #96]	; (800b0c0 <pvPortMalloc+0x180>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	429a      	cmp	r2, r3
 800b064:	d203      	bcs.n	800b06e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b066:	4b14      	ldr	r3, [pc, #80]	; (800b0b8 <pvPortMalloc+0x178>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a15      	ldr	r2, [pc, #84]	; (800b0c0 <pvPortMalloc+0x180>)
 800b06c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b070:	685a      	ldr	r2, [r3, #4]
 800b072:	4b10      	ldr	r3, [pc, #64]	; (800b0b4 <pvPortMalloc+0x174>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	431a      	orrs	r2, r3
 800b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	2200      	movs	r2, #0
 800b080:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b082:	f7fe fc65 	bl	8009950 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	f003 0307 	and.w	r3, r3, #7
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d009      	beq.n	800b0a4 <pvPortMalloc+0x164>
 800b090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	60fb      	str	r3, [r7, #12]
 800b0a2:	e7fe      	b.n	800b0a2 <pvPortMalloc+0x162>
	return pvReturn;
 800b0a4:	69fb      	ldr	r3, [r7, #28]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3728      	adds	r7, #40	; 0x28
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	2000668c 	.word	0x2000668c
 800b0b4:	20006698 	.word	0x20006698
 800b0b8:	20006690 	.word	0x20006690
 800b0bc:	20006684 	.word	0x20006684
 800b0c0:	20006694 	.word	0x20006694

0800b0c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d046      	beq.n	800b164 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b0d6:	2308      	movs	r3, #8
 800b0d8:	425b      	negs	r3, r3
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	4413      	add	r3, r2
 800b0de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	685a      	ldr	r2, [r3, #4]
 800b0e8:	4b20      	ldr	r3, [pc, #128]	; (800b16c <vPortFree+0xa8>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d109      	bne.n	800b106 <vPortFree+0x42>
 800b0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f6:	f383 8811 	msr	BASEPRI, r3
 800b0fa:	f3bf 8f6f 	isb	sy
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	60fb      	str	r3, [r7, #12]
 800b104:	e7fe      	b.n	800b104 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d009      	beq.n	800b122 <vPortFree+0x5e>
 800b10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	60bb      	str	r3, [r7, #8]
 800b120:	e7fe      	b.n	800b120 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	4b11      	ldr	r3, [pc, #68]	; (800b16c <vPortFree+0xa8>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4013      	ands	r3, r2
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d019      	beq.n	800b164 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d115      	bne.n	800b164 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	685a      	ldr	r2, [r3, #4]
 800b13c:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <vPortFree+0xa8>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	43db      	mvns	r3, r3
 800b142:	401a      	ands	r2, r3
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b148:	f7fe fbf4 	bl	8009934 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	685a      	ldr	r2, [r3, #4]
 800b150:	4b07      	ldr	r3, [pc, #28]	; (800b170 <vPortFree+0xac>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4413      	add	r3, r2
 800b156:	4a06      	ldr	r2, [pc, #24]	; (800b170 <vPortFree+0xac>)
 800b158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b15a:	6938      	ldr	r0, [r7, #16]
 800b15c:	f000 f86c 	bl	800b238 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b160:	f7fe fbf6 	bl	8009950 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b164:	bf00      	nop
 800b166:	3718      	adds	r7, #24
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	20006698 	.word	0x20006698
 800b170:	20006690 	.word	0x20006690

0800b174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b17a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b17e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b180:	4b27      	ldr	r3, [pc, #156]	; (800b220 <prvHeapInit+0xac>)
 800b182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f003 0307 	and.w	r3, r3, #7
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00c      	beq.n	800b1a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	3307      	adds	r3, #7
 800b192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f023 0307 	bic.w	r3, r3, #7
 800b19a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	1ad3      	subs	r3, r2, r3
 800b1a2:	4a1f      	ldr	r2, [pc, #124]	; (800b220 <prvHeapInit+0xac>)
 800b1a4:	4413      	add	r3, r2
 800b1a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1ac:	4a1d      	ldr	r2, [pc, #116]	; (800b224 <prvHeapInit+0xb0>)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b1b2:	4b1c      	ldr	r3, [pc, #112]	; (800b224 <prvHeapInit+0xb0>)
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	68ba      	ldr	r2, [r7, #8]
 800b1bc:	4413      	add	r3, r2
 800b1be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b1c0:	2208      	movs	r2, #8
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	1a9b      	subs	r3, r3, r2
 800b1c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f023 0307 	bic.w	r3, r3, #7
 800b1ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	4a15      	ldr	r2, [pc, #84]	; (800b228 <prvHeapInit+0xb4>)
 800b1d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b1d6:	4b14      	ldr	r3, [pc, #80]	; (800b228 <prvHeapInit+0xb4>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b1de:	4b12      	ldr	r3, [pc, #72]	; (800b228 <prvHeapInit+0xb4>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	1ad2      	subs	r2, r2, r3
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b1f4:	4b0c      	ldr	r3, [pc, #48]	; (800b228 <prvHeapInit+0xb4>)
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	4a0a      	ldr	r2, [pc, #40]	; (800b22c <prvHeapInit+0xb8>)
 800b202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	4a09      	ldr	r2, [pc, #36]	; (800b230 <prvHeapInit+0xbc>)
 800b20a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b20c:	4b09      	ldr	r3, [pc, #36]	; (800b234 <prvHeapInit+0xc0>)
 800b20e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b212:	601a      	str	r2, [r3, #0]
}
 800b214:	bf00      	nop
 800b216:	3714      	adds	r7, #20
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr
 800b220:	20002a84 	.word	0x20002a84
 800b224:	20006684 	.word	0x20006684
 800b228:	2000668c 	.word	0x2000668c
 800b22c:	20006694 	.word	0x20006694
 800b230:	20006690 	.word	0x20006690
 800b234:	20006698 	.word	0x20006698

0800b238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b240:	4b28      	ldr	r3, [pc, #160]	; (800b2e4 <prvInsertBlockIntoFreeList+0xac>)
 800b242:	60fb      	str	r3, [r7, #12]
 800b244:	e002      	b.n	800b24c <prvInsertBlockIntoFreeList+0x14>
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	429a      	cmp	r2, r3
 800b254:	d8f7      	bhi.n	800b246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	4413      	add	r3, r2
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	429a      	cmp	r2, r3
 800b266:	d108      	bne.n	800b27a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	685a      	ldr	r2, [r3, #4]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	441a      	add	r2, r3
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	441a      	add	r2, r3
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d118      	bne.n	800b2c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	4b15      	ldr	r3, [pc, #84]	; (800b2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	429a      	cmp	r2, r3
 800b298:	d00d      	beq.n	800b2b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	685a      	ldr	r2, [r3, #4]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	441a      	add	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	601a      	str	r2, [r3, #0]
 800b2b4:	e008      	b.n	800b2c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2b6:	4b0c      	ldr	r3, [pc, #48]	; (800b2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	601a      	str	r2, [r3, #0]
 800b2be:	e003      	b.n	800b2c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d002      	beq.n	800b2d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2d6:	bf00      	nop
 800b2d8:	3714      	adds	r7, #20
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	20006684 	.word	0x20006684
 800b2e8:	2000668c 	.word	0x2000668c

0800b2ec <initCompass>:


static uint32_t test = 0;

void initCompass(uint32_t cInit)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
	test = cInit;
 800b2f4:	4a04      	ldr	r2, [pc, #16]	; (800b308 <initCompass+0x1c>)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6013      	str	r3, [r2, #0]
}
 800b2fa:	bf00      	nop
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	2000669c 	.word	0x2000669c

0800b30c <position_Init>:
static void motionSensor_Init(void);



void position_Init(void)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	af00      	add	r7, sp, #0
	motionSensor_Init();
 800b310:	f000 f85a 	bl	800b3c8 <motionSensor_Init>


	/////
//	POS_MOTION_SENSOR_Axes_t AccAxesLsm6dso;
//	POS_MOTION_SENSOR_GetAxes(ACC_LSM6DSO, &AccAxesLsm6dso);
}
 800b314:	bf00      	nop
 800b316:	bd80      	pop	{r7, pc}

0800b318 <PositionProcess>:

void PositionProcess(void)
{
 800b318:	b5b0      	push	{r4, r5, r7, lr}
 800b31a:	b090      	sub	sp, #64	; 0x40
 800b31c:	af04      	add	r7, sp, #16
	POS_MOTION_SENSOR_Axes_t AccAxesLis2dw={0,0,0};
 800b31e:	2300      	movs	r3, #0
 800b320:	627b      	str	r3, [r7, #36]	; 0x24
 800b322:	2300      	movs	r3, #0
 800b324:	62bb      	str	r3, [r7, #40]	; 0x28
 800b326:	2300      	movs	r3, #0
 800b328:	62fb      	str	r3, [r7, #44]	; 0x2c
	POS_MOTION_SENSOR_Axes_t AccAxesLsm6dso={0,0,0};
 800b32a:	2300      	movs	r3, #0
 800b32c:	61bb      	str	r3, [r7, #24]
 800b32e:	2300      	movs	r3, #0
 800b330:	61fb      	str	r3, [r7, #28]
 800b332:	2300      	movs	r3, #0
 800b334:	623b      	str	r3, [r7, #32]
	POS_MOTION_SENSOR_Axes_t GyrAxesLsm6dso={0,0,0};
 800b336:	2300      	movs	r3, #0
 800b338:	60fb      	str	r3, [r7, #12]
 800b33a:	2300      	movs	r3, #0
 800b33c:	613b      	str	r3, [r7, #16]
 800b33e:	2300      	movs	r3, #0
 800b340:	617b      	str	r3, [r7, #20]
	POS_MOTION_SENSOR_Axes_t MagAxes={0,0,0};
 800b342:	2300      	movs	r3, #0
 800b344:	603b      	str	r3, [r7, #0]
 800b346:	2300      	movs	r3, #0
 800b348:	607b      	str	r3, [r7, #4]
 800b34a:	2300      	movs	r3, #0
 800b34c:	60bb      	str	r3, [r7, #8]
	POS_MOTION_SENSOR_GetAxes(ACC_LIS2DW12, &AccAxesLis2dw);
 800b34e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b352:	4619      	mov	r1, r3
 800b354:	2003      	movs	r0, #3
 800b356:	f000 f897 	bl	800b488 <POS_MOTION_SENSOR_GetAxes>
	POS_MOTION_SENSOR_GetAxes(MAG_LIS2MDL, &MagAxes);
 800b35a:	463b      	mov	r3, r7
 800b35c:	4619      	mov	r1, r3
 800b35e:	2002      	movs	r0, #2
 800b360:	f000 f892 	bl	800b488 <POS_MOTION_SENSOR_GetAxes>
	POS_MOTION_SENSOR_GetAxes(ACC_LSM6DSO, &AccAxesLsm6dso);
 800b364:	f107 0318 	add.w	r3, r7, #24
 800b368:	4619      	mov	r1, r3
 800b36a:	2000      	movs	r0, #0
 800b36c:	f000 f88c 	bl	800b488 <POS_MOTION_SENSOR_GetAxes>
	POS_MOTION_SENSOR_GetAxes(GYR_LSM6DSO, &GyrAxesLsm6dso);
 800b370:	f107 030c 	add.w	r3, r7, #12
 800b374:	4619      	mov	r1, r3
 800b376:	2001      	movs	r0, #1
 800b378:	f000 f886 	bl	800b488 <POS_MOTION_SENSOR_GetAxes>

	printf("\n\rACC x = %5d y = %5d z = %5d MAG x = %5d y = %5d z = %5d",(int)AccAxesLis2dw.x,(int)AccAxesLis2dw.y,(int)AccAxesLis2dw.z,(int)MagAxes.x,(int)MagAxes.y,(int)MagAxes.z);
 800b37c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b37e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800b380:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	68b9      	ldr	r1, [r7, #8]
 800b388:	9102      	str	r1, [sp, #8]
 800b38a:	9201      	str	r2, [sp, #4]
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	462b      	mov	r3, r5
 800b390:	4622      	mov	r2, r4
 800b392:	4601      	mov	r1, r0
 800b394:	480a      	ldr	r0, [pc, #40]	; (800b3c0 <PositionProcess+0xa8>)
 800b396:	f000 fa71 	bl	800b87c <iprintf>
	printf("\n\rACC x = %5d y = %5d z = %5d GYR x = %5d y = %5d z = %5d\n\r",(int)AccAxesLsm6dso.x,(int)AccAxesLsm6dso.y,(int)AccAxesLsm6dso.z,(int)GyrAxesLsm6dso.x,(int)GyrAxesLsm6dso.y,(int)GyrAxesLsm6dso.z);
 800b39a:	69b8      	ldr	r0, [r7, #24]
 800b39c:	69fc      	ldr	r4, [r7, #28]
 800b39e:	6a3d      	ldr	r5, [r7, #32]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	693a      	ldr	r2, [r7, #16]
 800b3a4:	6979      	ldr	r1, [r7, #20]
 800b3a6:	9102      	str	r1, [sp, #8]
 800b3a8:	9201      	str	r2, [sp, #4]
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	462b      	mov	r3, r5
 800b3ae:	4622      	mov	r2, r4
 800b3b0:	4601      	mov	r1, r0
 800b3b2:	4804      	ldr	r0, [pc, #16]	; (800b3c4 <PositionProcess+0xac>)
 800b3b4:	f000 fa62 	bl	800b87c <iprintf>
}
 800b3b8:	bf00      	nop
 800b3ba:	3730      	adds	r7, #48	; 0x30
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bdb0      	pop	{r4, r5, r7, pc}
 800b3c0:	0800c6c4 	.word	0x0800c6c4
 800b3c4:	0800c700 	.word	0x0800c700

0800b3c8 <motionSensor_Init>:
/**
  * @brief  Initialize the accelerometer and  magnetometer
  * @retval None
  */
static void motionSensor_Init(void)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	af00      	add	r7, sp, #0
//  displayFloatToInt_t out_value_odr;
//  int i;

	  /* Initialize Virtual COM Port */
	  BSP_COM_Init(COM1);
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	f7f9 fdbb 	bl	8004f48 <BSP_COM_Init>


	POS_MOTION_SENSOR_Init();
 800b3d2:	f000 f80b 	bl	800b3ec <POS_MOTION_SENSOR_Init>
      break;
#endif


//	LIS2DW12_Init(&accObj);
	LIS2DW12_GetCapabilities(&accObj, &accCap);
 800b3d6:	4903      	ldr	r1, [pc, #12]	; (800b3e4 <motionSensor_Init+0x1c>)
 800b3d8:	4803      	ldr	r0, [pc, #12]	; (800b3e8 <motionSensor_Init+0x20>)
 800b3da:	f7f5 ff65 	bl	80012a8 <LIS2DW12_GetCapabilities>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
    printf("%s", dataOut);
  }
  */
}
 800b3de:	bf00      	nop
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	200066d4 	.word	0x200066d4
 800b3e8:	200066a0 	.word	0x200066a0

0800b3ec <POS_MOTION_SENSOR_Init>:
 * @brief  Initializes the motion sensors
 * @retval BSP status
 */
#include "position.h"
int32_t POS_MOTION_SENSOR_Init(void)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	607b      	str	r3, [r7, #4]

  ret = LIS2DW12_0_Probe(ACC_LIS2DW12);
 800b3f6:	2003      	movs	r0, #3
 800b3f8:	f000 f912 	bl	800b620 <LIS2DW12_0_Probe>
 800b3fc:	6078      	str	r0, [r7, #4]
  ret = LIS2MDL_0_Probe(MAG_LIS2MDL);
 800b3fe:	2002      	movs	r0, #2
 800b400:	f000 f986 	bl	800b710 <LIS2MDL_0_Probe>
 800b404:	6078      	str	r0, [r7, #4]
  ret = LSM6DSO_0_Probe(GYR_LSM6DSO);
 800b406:	2001      	movs	r0, #1
 800b408:	f000 f86a 	bl	800b4e0 <LSM6DSO_0_Probe>
 800b40c:	6078      	str	r0, [r7, #4]

// nur test a
  uint8_t Id1,Id2;
  ret = POS_MOTION_SENSOR_ReadID(ACC_LIS2DW12, &Id1);
 800b40e:	1cfb      	adds	r3, r7, #3
 800b410:	4619      	mov	r1, r3
 800b412:	2003      	movs	r0, #3
 800b414:	f000 f80c 	bl	800b430 <POS_MOTION_SENSOR_ReadID>
 800b418:	6078      	str	r0, [r7, #4]
  ret = POS_MOTION_SENSOR_ReadID(MAG_LIS2MDL, &Id2);
 800b41a:	1cbb      	adds	r3, r7, #2
 800b41c:	4619      	mov	r1, r3
 800b41e:	2002      	movs	r0, #2
 800b420:	f000 f806 	bl	800b430 <POS_MOTION_SENSOR_ReadID>
 800b424:	6078      	str	r0, [r7, #4]

// nur test e

  return ret;
 800b426:	687b      	ldr	r3, [r7, #4]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <POS_MOTION_SENSOR_ReadID>:
 * @param  sensor Motion sensor instance
 * @param  Id WHOAMI value
 * @retval BSP status
 */
int32_t POS_MOTION_SENSOR_ReadID(POS_MOTION_SENSORS sensor, uint8_t *Id)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	4603      	mov	r3, r0
 800b438:	6039      	str	r1, [r7, #0]
 800b43a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if (sensor >= POS_MOTION_SENSORS_MAX)
 800b43c:	79fb      	ldrb	r3, [r7, #7]
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d903      	bls.n	800b44a <POS_MOTION_SENSOR_ReadID+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b442:	f06f 0301 	mvn.w	r3, #1
 800b446:	60fb      	str	r3, [r7, #12]
 800b448:	e014      	b.n	800b474 <POS_MOTION_SENSOR_ReadID+0x44>
  }
  else if (PosMotionDrv[sensor]->ReadID(PosMotionCompObj[sensor], Id) != BSP_ERROR_NONE)
 800b44a:	79fb      	ldrb	r3, [r7, #7]
 800b44c:	4a0c      	ldr	r2, [pc, #48]	; (800b480 <POS_MOTION_SENSOR_ReadID+0x50>)
 800b44e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	79fa      	ldrb	r2, [r7, #7]
 800b456:	490b      	ldr	r1, [pc, #44]	; (800b484 <POS_MOTION_SENSOR_ReadID+0x54>)
 800b458:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b45c:	6839      	ldr	r1, [r7, #0]
 800b45e:	4610      	mov	r0, r2
 800b460:	4798      	blx	r3
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d003      	beq.n	800b470 <POS_MOTION_SENSOR_ReadID+0x40>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b468:	f06f 0306 	mvn.w	r3, #6
 800b46c:	60fb      	str	r3, [r7, #12]
 800b46e:	e001      	b.n	800b474 <POS_MOTION_SENSOR_ReadID+0x44>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b470:	2300      	movs	r3, #0
 800b472:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b474:	68fb      	ldr	r3, [r7, #12]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20006700 	.word	0x20006700
 800b484:	20009234 	.word	0x20009234

0800b488 <POS_MOTION_SENSOR_GetAxes>:
 * @param  Sensor Motion sensor instance
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t POS_MOTION_SENSOR_GetAxes(POS_MOTION_SENSORS sensor, POS_MOTION_SENSOR_Axes_t *Axes)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	4603      	mov	r3, r0
 800b490:	6039      	str	r1, [r7, #0]
 800b492:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if (sensor >= POS_MOTION_SENSORS_MAX)
 800b494:	79fb      	ldrb	r3, [r7, #7]
 800b496:	2b03      	cmp	r3, #3
 800b498:	d903      	bls.n	800b4a2 <POS_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b49a:	f06f 0301 	mvn.w	r3, #1
 800b49e:	60fb      	str	r3, [r7, #12]
 800b4a0:	e014      	b.n	800b4cc <POS_MOTION_SENSOR_GetAxes+0x44>
  }
  else
  {
    if (PosMotionFuncDrv[sensor]->GetAxes(PosMotionCompObj[sensor], Axes) != BSP_ERROR_NONE)
 800b4a2:	79fb      	ldrb	r3, [r7, #7]
 800b4a4:	4a0c      	ldr	r2, [pc, #48]	; (800b4d8 <POS_MOTION_SENSOR_GetAxes+0x50>)
 800b4a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4aa:	69db      	ldr	r3, [r3, #28]
 800b4ac:	79fa      	ldrb	r2, [r7, #7]
 800b4ae:	490b      	ldr	r1, [pc, #44]	; (800b4dc <POS_MOTION_SENSOR_GetAxes+0x54>)
 800b4b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b4b4:	6839      	ldr	r1, [r7, #0]
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	4798      	blx	r3
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d003      	beq.n	800b4c8 <POS_MOTION_SENSOR_GetAxes+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4c0:	f06f 0304 	mvn.w	r3, #4
 800b4c4:	60fb      	str	r3, [r7, #12]
 800b4c6:	e001      	b.n	800b4cc <POS_MOTION_SENSOR_GetAxes+0x44>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	200066f0 	.word	0x200066f0
 800b4dc:	20009234 	.word	0x20009234

0800b4e0 <LSM6DSO_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSO_0_Probe(POS_MOTION_SENSORS sensor)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b092      	sub	sp, #72	; 0x48
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	71fb      	strb	r3, [r7, #7]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800b4f2:	23d7      	movs	r3, #215	; 0xd7
 800b4f4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = POS_I2C_Init;
 800b4f8:	4b3d      	ldr	r3, [pc, #244]	; (800b5f0 <LSM6DSO_0_Probe+0x110>)
 800b4fa:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = POS_I2C_DeInit;
 800b4fc:	4b3d      	ldr	r3, [pc, #244]	; (800b5f4 <LSM6DSO_0_Probe+0x114>)
 800b4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = POS_I2C_ReadReg;
 800b500:	4b3d      	ldr	r3, [pc, #244]	; (800b5f8 <LSM6DSO_0_Probe+0x118>)
 800b502:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = POS_I2C_WriteReg;
 800b504:	4b3d      	ldr	r3, [pc, #244]	; (800b5fc <LSM6DSO_0_Probe+0x11c>)
 800b506:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = POS_GetTick;
 800b508:	4b3d      	ldr	r3, [pc, #244]	; (800b600 <LSM6DSO_0_Probe+0x120>)
 800b50a:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800b50c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b510:	4619      	mov	r1, r3
 800b512:	483c      	ldr	r0, [pc, #240]	; (800b604 <LSM6DSO_0_Probe+0x124>)
 800b514:	f7f7 fd86 	bl	8003024 <LSM6DSO_RegisterBusIO>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d003      	beq.n	800b526 <LSM6DSO_0_Probe+0x46>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b51e:	f06f 0306 	mvn.w	r3, #6
 800b522:	647b      	str	r3, [r7, #68]	; 0x44
 800b524:	e05f      	b.n	800b5e6 <LSM6DSO_0_Probe+0x106>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800b526:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800b52a:	4619      	mov	r1, r3
 800b52c:	4835      	ldr	r0, [pc, #212]	; (800b604 <LSM6DSO_0_Probe+0x124>)
 800b52e:	f7f7 fe7b 	bl	8003228 <LSM6DSO_ReadID>
 800b532:	4603      	mov	r3, r0
 800b534:	2b00      	cmp	r3, #0
 800b536:	d003      	beq.n	800b540 <LSM6DSO_0_Probe+0x60>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b538:	f06f 0306 	mvn.w	r3, #6
 800b53c:	647b      	str	r3, [r7, #68]	; 0x44
 800b53e:	e052      	b.n	800b5e6 <LSM6DSO_0_Probe+0x106>
  }
  else if (id != LSM6DSO_ID)
 800b540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b544:	2b6c      	cmp	r3, #108	; 0x6c
 800b546:	d003      	beq.n	800b550 <LSM6DSO_0_Probe+0x70>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b548:	f06f 0306 	mvn.w	r3, #6
 800b54c:	647b      	str	r3, [r7, #68]	; 0x44
 800b54e:	e04a      	b.n	800b5e6 <LSM6DSO_0_Probe+0x106>
  }
  else
  {
	PosMotionCompObj[ACC_LSM6DSO] = &lsm6dso_obj_0;
 800b550:	4b2d      	ldr	r3, [pc, #180]	; (800b608 <LSM6DSO_0_Probe+0x128>)
 800b552:	4a2c      	ldr	r2, [pc, #176]	; (800b604 <LSM6DSO_0_Probe+0x124>)
 800b554:	601a      	str	r2, [r3, #0]
	PosMotionCompObj[GYR_LSM6DSO] = &lsm6dso_obj_0;
 800b556:	4b2c      	ldr	r3, [pc, #176]	; (800b608 <LSM6DSO_0_Probe+0x128>)
 800b558:	4a2a      	ldr	r2, [pc, #168]	; (800b604 <LSM6DSO_0_Probe+0x124>)
 800b55a:	605a      	str	r2, [r3, #4]
	/* The second cast (void *) is added to bypass Misra R11.3 rule */
	PosMotionDrv[ACC_LSM6DSO] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800b55c:	4b2b      	ldr	r3, [pc, #172]	; (800b60c <LSM6DSO_0_Probe+0x12c>)
 800b55e:	4a2c      	ldr	r2, [pc, #176]	; (800b610 <LSM6DSO_0_Probe+0x130>)
 800b560:	601a      	str	r2, [r3, #0]
	PosMotionDrv[GYR_LSM6DSO] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800b562:	4b2a      	ldr	r3, [pc, #168]	; (800b60c <LSM6DSO_0_Probe+0x12c>)
 800b564:	4a2a      	ldr	r2, [pc, #168]	; (800b610 <LSM6DSO_0_Probe+0x130>)
 800b566:	605a      	str	r2, [r3, #4]

	/* The second cast (void *) is added to bypass Misra R11.3 rule */
	PosMotionFuncDrv[ACC_LSM6DSO] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_ACC_Driver;
 800b568:	4b2a      	ldr	r3, [pc, #168]	; (800b614 <LSM6DSO_0_Probe+0x134>)
 800b56a:	4a2b      	ldr	r2, [pc, #172]	; (800b618 <LSM6DSO_0_Probe+0x138>)
 800b56c:	601a      	str	r2, [r3, #0]
	PosMotionFuncDrv[GYR_LSM6DSO] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800b56e:	4b29      	ldr	r3, [pc, #164]	; (800b614 <LSM6DSO_0_Probe+0x134>)
 800b570:	4a2a      	ldr	r2, [pc, #168]	; (800b61c <LSM6DSO_0_Probe+0x13c>)
 800b572:	605a      	str	r2, [r3, #4]

	if (PosMotionDrv[ACC_LSM6DSO]->Init(PosMotionCompObj[ACC_LSM6DSO]) != LSM6DSO_OK)
 800b574:	4b25      	ldr	r3, [pc, #148]	; (800b60c <LSM6DSO_0_Probe+0x12c>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a23      	ldr	r2, [pc, #140]	; (800b608 <LSM6DSO_0_Probe+0x128>)
 800b57c:	6812      	ldr	r2, [r2, #0]
 800b57e:	4610      	mov	r0, r2
 800b580:	4798      	blx	r3
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d003      	beq.n	800b590 <LSM6DSO_0_Probe+0xb0>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 800b588:	f06f 0304 	mvn.w	r3, #4
 800b58c:	647b      	str	r3, [r7, #68]	; 0x44
 800b58e:	e02a      	b.n	800b5e6 <LSM6DSO_0_Probe+0x106>
	}
	else if (PosMotionDrv[GYR_LSM6DSO]->Init(PosMotionCompObj[GYR_LSM6DSO]) != LSM6DSO_OK)
 800b590:	4b1e      	ldr	r3, [pc, #120]	; (800b60c <LSM6DSO_0_Probe+0x12c>)
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a1c      	ldr	r2, [pc, #112]	; (800b608 <LSM6DSO_0_Probe+0x128>)
 800b598:	6852      	ldr	r2, [r2, #4]
 800b59a:	4610      	mov	r0, r2
 800b59c:	4798      	blx	r3
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d003      	beq.n	800b5ac <LSM6DSO_0_Probe+0xcc>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 800b5a4:	f06f 0304 	mvn.w	r3, #4
 800b5a8:	647b      	str	r3, [r7, #68]	; 0x44
 800b5aa:	e01c      	b.n	800b5e6 <LSM6DSO_0_Probe+0x106>
	}
	else
	{
		ret = BSP_ERROR_NONE;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	647b      	str	r3, [r7, #68]	; 0x44
		if (PosMotionFuncDrv[ACC_LSM6DSO]->Enable(PosMotionCompObj[ACC_LSM6DSO]) != LSM6DSO_OK)
 800b5b0:	4b18      	ldr	r3, [pc, #96]	; (800b614 <LSM6DSO_0_Probe+0x134>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a14      	ldr	r2, [pc, #80]	; (800b608 <LSM6DSO_0_Probe+0x128>)
 800b5b8:	6812      	ldr	r2, [r2, #0]
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	4798      	blx	r3
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d003      	beq.n	800b5cc <LSM6DSO_0_Probe+0xec>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800b5c4:	f06f 0304 	mvn.w	r3, #4
 800b5c8:	647b      	str	r3, [r7, #68]	; 0x44
 800b5ca:	e00c      	b.n	800b5e6 <LSM6DSO_0_Probe+0x106>
		}
		else if (PosMotionFuncDrv[GYR_LSM6DSO]->Enable(PosMotionCompObj[GYR_LSM6DSO]) != LSM6DSO_OK)
 800b5cc:	4b11      	ldr	r3, [pc, #68]	; (800b614 <LSM6DSO_0_Probe+0x134>)
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a0d      	ldr	r2, [pc, #52]	; (800b608 <LSM6DSO_0_Probe+0x128>)
 800b5d4:	6852      	ldr	r2, [r2, #4]
 800b5d6:	4610      	mov	r0, r2
 800b5d8:	4798      	blx	r3
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d002      	beq.n	800b5e6 <LSM6DSO_0_Probe+0x106>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800b5e0:	f06f 0304 	mvn.w	r3, #4
 800b5e4:	647b      	str	r3, [r7, #68]	; 0x44
		}
	}
  }
	  return ret;
 800b5e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3748      	adds	r7, #72	; 0x48
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	08000c21 	.word	0x08000c21
 800b5f4:	08000c85 	.word	0x08000c85
 800b5f8:	08000d39 	.word	0x08000d39
 800b5fc:	08000cd5 	.word	0x08000cd5
 800b600:	08000d9d 	.word	0x08000d9d
 800b604:	20006710 	.word	0x20006710
 800b608:	20009234 	.word	0x20009234
 800b60c:	20006700 	.word	0x20006700
 800b610:	2000008c 	.word	0x2000008c
 800b614:	200066f0 	.word	0x200066f0
 800b618:	2000009c 	.word	0x2000009c
 800b61c:	200000c0 	.word	0x200000c0

0800b620 <LIS2DW12_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2DW12_0_Probe(POS_MOTION_SENSORS sensor)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b08c      	sub	sp, #48	; 0x30
 800b624:	af00      	add	r7, sp, #0
 800b626:	4603      	mov	r3, r0
 800b628:	71fb      	strb	r3, [r7, #7]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  int32_t ret = BSP_ERROR_NONE;
 800b62a:	2300      	movs	r3, #0
 800b62c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800b62e:	2300      	movs	r3, #0
 800b630:	61bb      	str	r3, [r7, #24]
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800b632:	2333      	movs	r3, #51	; 0x33
 800b634:	773b      	strb	r3, [r7, #28]
  io_ctx.Init        = POS_I2C_Init;
 800b636:	4b2b      	ldr	r3, [pc, #172]	; (800b6e4 <LIS2DW12_0_Probe+0xc4>)
 800b638:	613b      	str	r3, [r7, #16]
  io_ctx.DeInit      = POS_I2C_DeInit;
 800b63a:	4b2b      	ldr	r3, [pc, #172]	; (800b6e8 <LIS2DW12_0_Probe+0xc8>)
 800b63c:	617b      	str	r3, [r7, #20]
  io_ctx.ReadReg     = POS_I2C_ReadReg;
 800b63e:	4b2b      	ldr	r3, [pc, #172]	; (800b6ec <LIS2DW12_0_Probe+0xcc>)
 800b640:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.WriteReg    = POS_I2C_WriteReg;
 800b642:	4b2b      	ldr	r3, [pc, #172]	; (800b6f0 <LIS2DW12_0_Probe+0xd0>)
 800b644:	623b      	str	r3, [r7, #32]
  io_ctx.GetTick     = POS_GetTick;
 800b646:	4b2b      	ldr	r3, [pc, #172]	; (800b6f4 <LIS2DW12_0_Probe+0xd4>)
 800b648:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800b64a:	f107 0310 	add.w	r3, r7, #16
 800b64e:	4619      	mov	r1, r3
 800b650:	4829      	ldr	r0, [pc, #164]	; (800b6f8 <LIS2DW12_0_Probe+0xd8>)
 800b652:	f7f5 fd29 	bl	80010a8 <LIS2DW12_RegisterBusIO>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d003      	beq.n	800b664 <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b65c:	f06f 0306 	mvn.w	r3, #6
 800b660:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b662:	e039      	b.n	800b6d8 <LIS2DW12_0_Probe+0xb8>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800b664:	f107 030f 	add.w	r3, r7, #15
 800b668:	4619      	mov	r1, r3
 800b66a:	4823      	ldr	r0, [pc, #140]	; (800b6f8 <LIS2DW12_0_Probe+0xd8>)
 800b66c:	f7f5 fe06 	bl	800127c <LIS2DW12_ReadID>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d003      	beq.n	800b67e <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b676:	f06f 0306 	mvn.w	r3, #6
 800b67a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b67c:	e02c      	b.n	800b6d8 <LIS2DW12_0_Probe+0xb8>
  }
  else if (id != LIS2DW12_ID)
 800b67e:	7bfb      	ldrb	r3, [r7, #15]
 800b680:	2b44      	cmp	r3, #68	; 0x44
 800b682:	d003      	beq.n	800b68c <LIS2DW12_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b684:	f06f 0306 	mvn.w	r3, #6
 800b688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b68a:	e025      	b.n	800b6d8 <LIS2DW12_0_Probe+0xb8>
  }
  else
  {
    PosMotionCompObj[ACC_LIS2DW12] = &lis2dw12_obj_0;
 800b68c:	4b1b      	ldr	r3, [pc, #108]	; (800b6fc <LIS2DW12_0_Probe+0xdc>)
 800b68e:	4a1a      	ldr	r2, [pc, #104]	; (800b6f8 <LIS2DW12_0_Probe+0xd8>)
 800b690:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionDrv[ACC_LIS2DW12] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800b692:	4b1b      	ldr	r3, [pc, #108]	; (800b700 <LIS2DW12_0_Probe+0xe0>)
 800b694:	4a1b      	ldr	r2, [pc, #108]	; (800b704 <LIS2DW12_0_Probe+0xe4>)
 800b696:	60da      	str	r2, [r3, #12]

	/* The second cast (void *) is added to bypass Misra R11.3 rule */
	PosMotionFuncDrv[ACC_LIS2DW12] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2DW12_ACC_Driver;
 800b698:	4b1b      	ldr	r3, [pc, #108]	; (800b708 <LIS2DW12_0_Probe+0xe8>)
 800b69a:	4a1c      	ldr	r2, [pc, #112]	; (800b70c <LIS2DW12_0_Probe+0xec>)
 800b69c:	60da      	str	r2, [r3, #12]

	if (PosMotionDrv[ACC_LIS2DW12]->Init(PosMotionCompObj[ACC_LIS2DW12]) != LIS2DW12_OK)
 800b69e:	4b18      	ldr	r3, [pc, #96]	; (800b700 <LIS2DW12_0_Probe+0xe0>)
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a15      	ldr	r2, [pc, #84]	; (800b6fc <LIS2DW12_0_Probe+0xdc>)
 800b6a6:	68d2      	ldr	r2, [r2, #12]
 800b6a8:	4610      	mov	r0, r2
 800b6aa:	4798      	blx	r3
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d003      	beq.n	800b6ba <LIS2DW12_0_Probe+0x9a>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 800b6b2:	f06f 0304 	mvn.w	r3, #4
 800b6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6b8:	e00e      	b.n	800b6d8 <LIS2DW12_0_Probe+0xb8>
	}
	else
	{
		ret = BSP_ERROR_NONE;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (PosMotionFuncDrv[ACC_LIS2DW12]->Enable(PosMotionCompObj[ACC_LIS2DW12]) != LSM6DSO_OK)
 800b6be:	4b12      	ldr	r3, [pc, #72]	; (800b708 <LIS2DW12_0_Probe+0xe8>)
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a0d      	ldr	r2, [pc, #52]	; (800b6fc <LIS2DW12_0_Probe+0xdc>)
 800b6c6:	68d2      	ldr	r2, [r2, #12]
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	4798      	blx	r3
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d002      	beq.n	800b6d8 <LIS2DW12_0_Probe+0xb8>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800b6d2:	f06f 0304 	mvn.w	r3, #4
 800b6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
	}
  }
  return ret;
 800b6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3730      	adds	r7, #48	; 0x30
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	08000c21 	.word	0x08000c21
 800b6e8:	08000c85 	.word	0x08000c85
 800b6ec:	08000d39 	.word	0x08000d39
 800b6f0:	08000cd5 	.word	0x08000cd5
 800b6f4:	08000d9d 	.word	0x08000d9d
 800b6f8:	20006740 	.word	0x20006740
 800b6fc:	20009234 	.word	0x20009234
 800b700:	20006700 	.word	0x20006700
 800b704:	20000024 	.word	0x20000024
 800b708:	200066f0 	.word	0x200066f0
 800b70c:	20000034 	.word	0x20000034

0800b710 <LIS2MDL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2MDL_0_Probe(POS_MOTION_SENSORS sensor)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b08c      	sub	sp, #48	; 0x30
 800b714:	af00      	add	r7, sp, #0
 800b716:	4603      	mov	r3, r0
 800b718:	71fb      	strb	r3, [r7, #7]

  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  int32_t                 ret = BSP_ERROR_NONE;
 800b71a:	2300      	movs	r3, #0
 800b71c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the magneto driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800b71e:	2300      	movs	r3, #0
 800b720:	61bb      	str	r3, [r7, #24]
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800b722:	233d      	movs	r3, #61	; 0x3d
 800b724:	773b      	strb	r3, [r7, #28]
  io_ctx.Init        = POS_I2C_Init;
 800b726:	4b2b      	ldr	r3, [pc, #172]	; (800b7d4 <LIS2MDL_0_Probe+0xc4>)
 800b728:	613b      	str	r3, [r7, #16]
  io_ctx.DeInit      = POS_I2C_DeInit;
 800b72a:	4b2b      	ldr	r3, [pc, #172]	; (800b7d8 <LIS2MDL_0_Probe+0xc8>)
 800b72c:	617b      	str	r3, [r7, #20]
  io_ctx.ReadReg     = POS_I2C_ReadReg;
 800b72e:	4b2b      	ldr	r3, [pc, #172]	; (800b7dc <LIS2MDL_0_Probe+0xcc>)
 800b730:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.WriteReg    = POS_I2C_WriteReg;
 800b732:	4b2b      	ldr	r3, [pc, #172]	; (800b7e0 <LIS2MDL_0_Probe+0xd0>)
 800b734:	623b      	str	r3, [r7, #32]
  io_ctx.GetTick     = POS_GetTick;
 800b736:	4b2b      	ldr	r3, [pc, #172]	; (800b7e4 <LIS2MDL_0_Probe+0xd4>)
 800b738:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800b73a:	f107 0310 	add.w	r3, r7, #16
 800b73e:	4619      	mov	r1, r3
 800b740:	4829      	ldr	r0, [pc, #164]	; (800b7e8 <LIS2MDL_0_Probe+0xd8>)
 800b742:	f7f7 f801 	bl	8002748 <LIS2MDL_RegisterBusIO>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d003      	beq.n	800b754 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b74c:	f06f 0306 	mvn.w	r3, #6
 800b750:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b752:	e039      	b.n	800b7c8 <LIS2MDL_0_Probe+0xb8>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800b754:	f107 030f 	add.w	r3, r7, #15
 800b758:	4619      	mov	r1, r3
 800b75a:	4823      	ldr	r0, [pc, #140]	; (800b7e8 <LIS2MDL_0_Probe+0xd8>)
 800b75c:	f7f7 f8bd 	bl	80028da <LIS2MDL_ReadID>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d003      	beq.n	800b76e <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b766:	f06f 0306 	mvn.w	r3, #6
 800b76a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b76c:	e02c      	b.n	800b7c8 <LIS2MDL_0_Probe+0xb8>
  }
  else if (id != LIS2MDL_ID)
 800b76e:	7bfb      	ldrb	r3, [r7, #15]
 800b770:	2b40      	cmp	r3, #64	; 0x40
 800b772:	d003      	beq.n	800b77c <LIS2MDL_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b774:	f06f 0306 	mvn.w	r3, #6
 800b778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b77a:	e025      	b.n	800b7c8 <LIS2MDL_0_Probe+0xb8>
  }
  else
  {

    PosMotionCompObj[MAG_LIS2MDL] = &lis2mdl_obj_0;
 800b77c:	4b1b      	ldr	r3, [pc, #108]	; (800b7ec <LIS2MDL_0_Probe+0xdc>)
 800b77e:	4a1a      	ldr	r2, [pc, #104]	; (800b7e8 <LIS2MDL_0_Probe+0xd8>)
 800b780:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionDrv[MAG_LIS2MDL] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800b782:	4b1b      	ldr	r3, [pc, #108]	; (800b7f0 <LIS2MDL_0_Probe+0xe0>)
 800b784:	4a1b      	ldr	r2, [pc, #108]	; (800b7f4 <LIS2MDL_0_Probe+0xe4>)
 800b786:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionFuncDrv[MAG_LIS2MDL] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2MDL_MAG_Driver;
 800b788:	4b1b      	ldr	r3, [pc, #108]	; (800b7f8 <LIS2MDL_0_Probe+0xe8>)
 800b78a:	4a1c      	ldr	r2, [pc, #112]	; (800b7fc <LIS2MDL_0_Probe+0xec>)
 800b78c:	609a      	str	r2, [r3, #8]

    if (PosMotionDrv[MAG_LIS2MDL]->Init(PosMotionCompObj[MAG_LIS2MDL]) != LIS2MDL_OK)
 800b78e:	4b18      	ldr	r3, [pc, #96]	; (800b7f0 <LIS2MDL_0_Probe+0xe0>)
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a15      	ldr	r2, [pc, #84]	; (800b7ec <LIS2MDL_0_Probe+0xdc>)
 800b796:	6892      	ldr	r2, [r2, #8]
 800b798:	4610      	mov	r0, r2
 800b79a:	4798      	blx	r3
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d003      	beq.n	800b7aa <LIS2MDL_0_Probe+0x9a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b7a2:	f06f 0304 	mvn.w	r3, #4
 800b7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7a8:	e00e      	b.n	800b7c8 <LIS2MDL_0_Probe+0xb8>
    }
	else
	{
		ret = BSP_ERROR_NONE;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (PosMotionFuncDrv[MAG_LIS2MDL]->Enable(PosMotionCompObj[MAG_LIS2MDL]) != LSM6DSO_OK)
 800b7ae:	4b12      	ldr	r3, [pc, #72]	; (800b7f8 <LIS2MDL_0_Probe+0xe8>)
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a0d      	ldr	r2, [pc, #52]	; (800b7ec <LIS2MDL_0_Probe+0xdc>)
 800b7b6:	6892      	ldr	r2, [r2, #8]
 800b7b8:	4610      	mov	r0, r2
 800b7ba:	4798      	blx	r3
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d002      	beq.n	800b7c8 <LIS2MDL_0_Probe+0xb8>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800b7c2:	f06f 0304 	mvn.w	r3, #4
 800b7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
	}
  }
  return ret;
 800b7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3730      	adds	r7, #48	; 0x30
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	08000c21 	.word	0x08000c21
 800b7d8:	08000c85 	.word	0x08000c85
 800b7dc:	08000d39 	.word	0x08000d39
 800b7e0:	08000cd5 	.word	0x08000cd5
 800b7e4:	08000d9d 	.word	0x08000d9d
 800b7e8:	20006774 	.word	0x20006774
 800b7ec:	20009234 	.word	0x20009234
 800b7f0:	20006700 	.word	0x20006700
 800b7f4:	20000058 	.word	0x20000058
 800b7f8:	200066f0 	.word	0x200066f0
 800b7fc:	20000068 	.word	0x20000068

0800b800 <__errno>:
 800b800:	4b01      	ldr	r3, [pc, #4]	; (800b808 <__errno+0x8>)
 800b802:	6818      	ldr	r0, [r3, #0]
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	200000f8 	.word	0x200000f8

0800b80c <__libc_init_array>:
 800b80c:	b570      	push	{r4, r5, r6, lr}
 800b80e:	4e0d      	ldr	r6, [pc, #52]	; (800b844 <__libc_init_array+0x38>)
 800b810:	4c0d      	ldr	r4, [pc, #52]	; (800b848 <__libc_init_array+0x3c>)
 800b812:	1ba4      	subs	r4, r4, r6
 800b814:	10a4      	asrs	r4, r4, #2
 800b816:	2500      	movs	r5, #0
 800b818:	42a5      	cmp	r5, r4
 800b81a:	d109      	bne.n	800b830 <__libc_init_array+0x24>
 800b81c:	4e0b      	ldr	r6, [pc, #44]	; (800b84c <__libc_init_array+0x40>)
 800b81e:	4c0c      	ldr	r4, [pc, #48]	; (800b850 <__libc_init_array+0x44>)
 800b820:	f000 ff10 	bl	800c644 <_init>
 800b824:	1ba4      	subs	r4, r4, r6
 800b826:	10a4      	asrs	r4, r4, #2
 800b828:	2500      	movs	r5, #0
 800b82a:	42a5      	cmp	r5, r4
 800b82c:	d105      	bne.n	800b83a <__libc_init_array+0x2e>
 800b82e:	bd70      	pop	{r4, r5, r6, pc}
 800b830:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b834:	4798      	blx	r3
 800b836:	3501      	adds	r5, #1
 800b838:	e7ee      	b.n	800b818 <__libc_init_array+0xc>
 800b83a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b83e:	4798      	blx	r3
 800b840:	3501      	adds	r5, #1
 800b842:	e7f2      	b.n	800b82a <__libc_init_array+0x1e>
 800b844:	0800c8a4 	.word	0x0800c8a4
 800b848:	0800c8a4 	.word	0x0800c8a4
 800b84c:	0800c8a4 	.word	0x0800c8a4
 800b850:	0800c8a8 	.word	0x0800c8a8

0800b854 <memcpy>:
 800b854:	b510      	push	{r4, lr}
 800b856:	1e43      	subs	r3, r0, #1
 800b858:	440a      	add	r2, r1
 800b85a:	4291      	cmp	r1, r2
 800b85c:	d100      	bne.n	800b860 <memcpy+0xc>
 800b85e:	bd10      	pop	{r4, pc}
 800b860:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b864:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b868:	e7f7      	b.n	800b85a <memcpy+0x6>

0800b86a <memset>:
 800b86a:	4402      	add	r2, r0
 800b86c:	4603      	mov	r3, r0
 800b86e:	4293      	cmp	r3, r2
 800b870:	d100      	bne.n	800b874 <memset+0xa>
 800b872:	4770      	bx	lr
 800b874:	f803 1b01 	strb.w	r1, [r3], #1
 800b878:	e7f9      	b.n	800b86e <memset+0x4>
	...

0800b87c <iprintf>:
 800b87c:	b40f      	push	{r0, r1, r2, r3}
 800b87e:	4b0a      	ldr	r3, [pc, #40]	; (800b8a8 <iprintf+0x2c>)
 800b880:	b513      	push	{r0, r1, r4, lr}
 800b882:	681c      	ldr	r4, [r3, #0]
 800b884:	b124      	cbz	r4, 800b890 <iprintf+0x14>
 800b886:	69a3      	ldr	r3, [r4, #24]
 800b888:	b913      	cbnz	r3, 800b890 <iprintf+0x14>
 800b88a:	4620      	mov	r0, r4
 800b88c:	f000 f84e 	bl	800b92c <__sinit>
 800b890:	ab05      	add	r3, sp, #20
 800b892:	9a04      	ldr	r2, [sp, #16]
 800b894:	68a1      	ldr	r1, [r4, #8]
 800b896:	9301      	str	r3, [sp, #4]
 800b898:	4620      	mov	r0, r4
 800b89a:	f000 f955 	bl	800bb48 <_vfiprintf_r>
 800b89e:	b002      	add	sp, #8
 800b8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8a4:	b004      	add	sp, #16
 800b8a6:	4770      	bx	lr
 800b8a8:	200000f8 	.word	0x200000f8

0800b8ac <std>:
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	b510      	push	{r4, lr}
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	e9c0 3300 	strd	r3, r3, [r0]
 800b8b6:	6083      	str	r3, [r0, #8]
 800b8b8:	8181      	strh	r1, [r0, #12]
 800b8ba:	6643      	str	r3, [r0, #100]	; 0x64
 800b8bc:	81c2      	strh	r2, [r0, #14]
 800b8be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8c2:	6183      	str	r3, [r0, #24]
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	2208      	movs	r2, #8
 800b8c8:	305c      	adds	r0, #92	; 0x5c
 800b8ca:	f7ff ffce 	bl	800b86a <memset>
 800b8ce:	4b05      	ldr	r3, [pc, #20]	; (800b8e4 <std+0x38>)
 800b8d0:	6263      	str	r3, [r4, #36]	; 0x24
 800b8d2:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <std+0x3c>)
 800b8d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8d6:	4b05      	ldr	r3, [pc, #20]	; (800b8ec <std+0x40>)
 800b8d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8da:	4b05      	ldr	r3, [pc, #20]	; (800b8f0 <std+0x44>)
 800b8dc:	6224      	str	r4, [r4, #32]
 800b8de:	6323      	str	r3, [r4, #48]	; 0x30
 800b8e0:	bd10      	pop	{r4, pc}
 800b8e2:	bf00      	nop
 800b8e4:	0800c0a5 	.word	0x0800c0a5
 800b8e8:	0800c0c7 	.word	0x0800c0c7
 800b8ec:	0800c0ff 	.word	0x0800c0ff
 800b8f0:	0800c123 	.word	0x0800c123

0800b8f4 <_cleanup_r>:
 800b8f4:	4901      	ldr	r1, [pc, #4]	; (800b8fc <_cleanup_r+0x8>)
 800b8f6:	f000 b885 	b.w	800ba04 <_fwalk_reent>
 800b8fa:	bf00      	nop
 800b8fc:	0800c3fd 	.word	0x0800c3fd

0800b900 <__sfmoreglue>:
 800b900:	b570      	push	{r4, r5, r6, lr}
 800b902:	1e4a      	subs	r2, r1, #1
 800b904:	2568      	movs	r5, #104	; 0x68
 800b906:	4355      	muls	r5, r2
 800b908:	460e      	mov	r6, r1
 800b90a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b90e:	f000 f897 	bl	800ba40 <_malloc_r>
 800b912:	4604      	mov	r4, r0
 800b914:	b140      	cbz	r0, 800b928 <__sfmoreglue+0x28>
 800b916:	2100      	movs	r1, #0
 800b918:	e9c0 1600 	strd	r1, r6, [r0]
 800b91c:	300c      	adds	r0, #12
 800b91e:	60a0      	str	r0, [r4, #8]
 800b920:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b924:	f7ff ffa1 	bl	800b86a <memset>
 800b928:	4620      	mov	r0, r4
 800b92a:	bd70      	pop	{r4, r5, r6, pc}

0800b92c <__sinit>:
 800b92c:	6983      	ldr	r3, [r0, #24]
 800b92e:	b510      	push	{r4, lr}
 800b930:	4604      	mov	r4, r0
 800b932:	bb33      	cbnz	r3, 800b982 <__sinit+0x56>
 800b934:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b938:	6503      	str	r3, [r0, #80]	; 0x50
 800b93a:	4b12      	ldr	r3, [pc, #72]	; (800b984 <__sinit+0x58>)
 800b93c:	4a12      	ldr	r2, [pc, #72]	; (800b988 <__sinit+0x5c>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6282      	str	r2, [r0, #40]	; 0x28
 800b942:	4298      	cmp	r0, r3
 800b944:	bf04      	itt	eq
 800b946:	2301      	moveq	r3, #1
 800b948:	6183      	streq	r3, [r0, #24]
 800b94a:	f000 f81f 	bl	800b98c <__sfp>
 800b94e:	6060      	str	r0, [r4, #4]
 800b950:	4620      	mov	r0, r4
 800b952:	f000 f81b 	bl	800b98c <__sfp>
 800b956:	60a0      	str	r0, [r4, #8]
 800b958:	4620      	mov	r0, r4
 800b95a:	f000 f817 	bl	800b98c <__sfp>
 800b95e:	2200      	movs	r2, #0
 800b960:	60e0      	str	r0, [r4, #12]
 800b962:	2104      	movs	r1, #4
 800b964:	6860      	ldr	r0, [r4, #4]
 800b966:	f7ff ffa1 	bl	800b8ac <std>
 800b96a:	2201      	movs	r2, #1
 800b96c:	2109      	movs	r1, #9
 800b96e:	68a0      	ldr	r0, [r4, #8]
 800b970:	f7ff ff9c 	bl	800b8ac <std>
 800b974:	2202      	movs	r2, #2
 800b976:	2112      	movs	r1, #18
 800b978:	68e0      	ldr	r0, [r4, #12]
 800b97a:	f7ff ff97 	bl	800b8ac <std>
 800b97e:	2301      	movs	r3, #1
 800b980:	61a3      	str	r3, [r4, #24]
 800b982:	bd10      	pop	{r4, pc}
 800b984:	0800c804 	.word	0x0800c804
 800b988:	0800b8f5 	.word	0x0800b8f5

0800b98c <__sfp>:
 800b98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98e:	4b1b      	ldr	r3, [pc, #108]	; (800b9fc <__sfp+0x70>)
 800b990:	681e      	ldr	r6, [r3, #0]
 800b992:	69b3      	ldr	r3, [r6, #24]
 800b994:	4607      	mov	r7, r0
 800b996:	b913      	cbnz	r3, 800b99e <__sfp+0x12>
 800b998:	4630      	mov	r0, r6
 800b99a:	f7ff ffc7 	bl	800b92c <__sinit>
 800b99e:	3648      	adds	r6, #72	; 0x48
 800b9a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	d503      	bpl.n	800b9b0 <__sfp+0x24>
 800b9a8:	6833      	ldr	r3, [r6, #0]
 800b9aa:	b133      	cbz	r3, 800b9ba <__sfp+0x2e>
 800b9ac:	6836      	ldr	r6, [r6, #0]
 800b9ae:	e7f7      	b.n	800b9a0 <__sfp+0x14>
 800b9b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9b4:	b16d      	cbz	r5, 800b9d2 <__sfp+0x46>
 800b9b6:	3468      	adds	r4, #104	; 0x68
 800b9b8:	e7f4      	b.n	800b9a4 <__sfp+0x18>
 800b9ba:	2104      	movs	r1, #4
 800b9bc:	4638      	mov	r0, r7
 800b9be:	f7ff ff9f 	bl	800b900 <__sfmoreglue>
 800b9c2:	6030      	str	r0, [r6, #0]
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	d1f1      	bne.n	800b9ac <__sfp+0x20>
 800b9c8:	230c      	movs	r3, #12
 800b9ca:	603b      	str	r3, [r7, #0]
 800b9cc:	4604      	mov	r4, r0
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9d2:	4b0b      	ldr	r3, [pc, #44]	; (800ba00 <__sfp+0x74>)
 800b9d4:	6665      	str	r5, [r4, #100]	; 0x64
 800b9d6:	e9c4 5500 	strd	r5, r5, [r4]
 800b9da:	60a5      	str	r5, [r4, #8]
 800b9dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b9e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b9e4:	2208      	movs	r2, #8
 800b9e6:	4629      	mov	r1, r5
 800b9e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9ec:	f7ff ff3d 	bl	800b86a <memset>
 800b9f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b9f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b9f8:	e7e9      	b.n	800b9ce <__sfp+0x42>
 800b9fa:	bf00      	nop
 800b9fc:	0800c804 	.word	0x0800c804
 800ba00:	ffff0001 	.word	0xffff0001

0800ba04 <_fwalk_reent>:
 800ba04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba08:	4680      	mov	r8, r0
 800ba0a:	4689      	mov	r9, r1
 800ba0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba10:	2600      	movs	r6, #0
 800ba12:	b914      	cbnz	r4, 800ba1a <_fwalk_reent+0x16>
 800ba14:	4630      	mov	r0, r6
 800ba16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba1a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ba1e:	3f01      	subs	r7, #1
 800ba20:	d501      	bpl.n	800ba26 <_fwalk_reent+0x22>
 800ba22:	6824      	ldr	r4, [r4, #0]
 800ba24:	e7f5      	b.n	800ba12 <_fwalk_reent+0xe>
 800ba26:	89ab      	ldrh	r3, [r5, #12]
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d907      	bls.n	800ba3c <_fwalk_reent+0x38>
 800ba2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba30:	3301      	adds	r3, #1
 800ba32:	d003      	beq.n	800ba3c <_fwalk_reent+0x38>
 800ba34:	4629      	mov	r1, r5
 800ba36:	4640      	mov	r0, r8
 800ba38:	47c8      	blx	r9
 800ba3a:	4306      	orrs	r6, r0
 800ba3c:	3568      	adds	r5, #104	; 0x68
 800ba3e:	e7ee      	b.n	800ba1e <_fwalk_reent+0x1a>

0800ba40 <_malloc_r>:
 800ba40:	b570      	push	{r4, r5, r6, lr}
 800ba42:	1ccd      	adds	r5, r1, #3
 800ba44:	f025 0503 	bic.w	r5, r5, #3
 800ba48:	3508      	adds	r5, #8
 800ba4a:	2d0c      	cmp	r5, #12
 800ba4c:	bf38      	it	cc
 800ba4e:	250c      	movcc	r5, #12
 800ba50:	2d00      	cmp	r5, #0
 800ba52:	4606      	mov	r6, r0
 800ba54:	db01      	blt.n	800ba5a <_malloc_r+0x1a>
 800ba56:	42a9      	cmp	r1, r5
 800ba58:	d903      	bls.n	800ba62 <_malloc_r+0x22>
 800ba5a:	230c      	movs	r3, #12
 800ba5c:	6033      	str	r3, [r6, #0]
 800ba5e:	2000      	movs	r0, #0
 800ba60:	bd70      	pop	{r4, r5, r6, pc}
 800ba62:	f000 fd6b 	bl	800c53c <__malloc_lock>
 800ba66:	4a21      	ldr	r2, [pc, #132]	; (800baec <_malloc_r+0xac>)
 800ba68:	6814      	ldr	r4, [r2, #0]
 800ba6a:	4621      	mov	r1, r4
 800ba6c:	b991      	cbnz	r1, 800ba94 <_malloc_r+0x54>
 800ba6e:	4c20      	ldr	r4, [pc, #128]	; (800baf0 <_malloc_r+0xb0>)
 800ba70:	6823      	ldr	r3, [r4, #0]
 800ba72:	b91b      	cbnz	r3, 800ba7c <_malloc_r+0x3c>
 800ba74:	4630      	mov	r0, r6
 800ba76:	f000 fb05 	bl	800c084 <_sbrk_r>
 800ba7a:	6020      	str	r0, [r4, #0]
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	4630      	mov	r0, r6
 800ba80:	f000 fb00 	bl	800c084 <_sbrk_r>
 800ba84:	1c43      	adds	r3, r0, #1
 800ba86:	d124      	bne.n	800bad2 <_malloc_r+0x92>
 800ba88:	230c      	movs	r3, #12
 800ba8a:	6033      	str	r3, [r6, #0]
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	f000 fd56 	bl	800c53e <__malloc_unlock>
 800ba92:	e7e4      	b.n	800ba5e <_malloc_r+0x1e>
 800ba94:	680b      	ldr	r3, [r1, #0]
 800ba96:	1b5b      	subs	r3, r3, r5
 800ba98:	d418      	bmi.n	800bacc <_malloc_r+0x8c>
 800ba9a:	2b0b      	cmp	r3, #11
 800ba9c:	d90f      	bls.n	800babe <_malloc_r+0x7e>
 800ba9e:	600b      	str	r3, [r1, #0]
 800baa0:	50cd      	str	r5, [r1, r3]
 800baa2:	18cc      	adds	r4, r1, r3
 800baa4:	4630      	mov	r0, r6
 800baa6:	f000 fd4a 	bl	800c53e <__malloc_unlock>
 800baaa:	f104 000b 	add.w	r0, r4, #11
 800baae:	1d23      	adds	r3, r4, #4
 800bab0:	f020 0007 	bic.w	r0, r0, #7
 800bab4:	1ac3      	subs	r3, r0, r3
 800bab6:	d0d3      	beq.n	800ba60 <_malloc_r+0x20>
 800bab8:	425a      	negs	r2, r3
 800baba:	50e2      	str	r2, [r4, r3]
 800babc:	e7d0      	b.n	800ba60 <_malloc_r+0x20>
 800babe:	428c      	cmp	r4, r1
 800bac0:	684b      	ldr	r3, [r1, #4]
 800bac2:	bf16      	itet	ne
 800bac4:	6063      	strne	r3, [r4, #4]
 800bac6:	6013      	streq	r3, [r2, #0]
 800bac8:	460c      	movne	r4, r1
 800baca:	e7eb      	b.n	800baa4 <_malloc_r+0x64>
 800bacc:	460c      	mov	r4, r1
 800bace:	6849      	ldr	r1, [r1, #4]
 800bad0:	e7cc      	b.n	800ba6c <_malloc_r+0x2c>
 800bad2:	1cc4      	adds	r4, r0, #3
 800bad4:	f024 0403 	bic.w	r4, r4, #3
 800bad8:	42a0      	cmp	r0, r4
 800bada:	d005      	beq.n	800bae8 <_malloc_r+0xa8>
 800badc:	1a21      	subs	r1, r4, r0
 800bade:	4630      	mov	r0, r6
 800bae0:	f000 fad0 	bl	800c084 <_sbrk_r>
 800bae4:	3001      	adds	r0, #1
 800bae6:	d0cf      	beq.n	800ba88 <_malloc_r+0x48>
 800bae8:	6025      	str	r5, [r4, #0]
 800baea:	e7db      	b.n	800baa4 <_malloc_r+0x64>
 800baec:	200067a0 	.word	0x200067a0
 800baf0:	200067a4 	.word	0x200067a4

0800baf4 <__sfputc_r>:
 800baf4:	6893      	ldr	r3, [r2, #8]
 800baf6:	3b01      	subs	r3, #1
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	b410      	push	{r4}
 800bafc:	6093      	str	r3, [r2, #8]
 800bafe:	da08      	bge.n	800bb12 <__sfputc_r+0x1e>
 800bb00:	6994      	ldr	r4, [r2, #24]
 800bb02:	42a3      	cmp	r3, r4
 800bb04:	db01      	blt.n	800bb0a <__sfputc_r+0x16>
 800bb06:	290a      	cmp	r1, #10
 800bb08:	d103      	bne.n	800bb12 <__sfputc_r+0x1e>
 800bb0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb0e:	f000 bb0d 	b.w	800c12c <__swbuf_r>
 800bb12:	6813      	ldr	r3, [r2, #0]
 800bb14:	1c58      	adds	r0, r3, #1
 800bb16:	6010      	str	r0, [r2, #0]
 800bb18:	7019      	strb	r1, [r3, #0]
 800bb1a:	4608      	mov	r0, r1
 800bb1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb20:	4770      	bx	lr

0800bb22 <__sfputs_r>:
 800bb22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb24:	4606      	mov	r6, r0
 800bb26:	460f      	mov	r7, r1
 800bb28:	4614      	mov	r4, r2
 800bb2a:	18d5      	adds	r5, r2, r3
 800bb2c:	42ac      	cmp	r4, r5
 800bb2e:	d101      	bne.n	800bb34 <__sfputs_r+0x12>
 800bb30:	2000      	movs	r0, #0
 800bb32:	e007      	b.n	800bb44 <__sfputs_r+0x22>
 800bb34:	463a      	mov	r2, r7
 800bb36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	f7ff ffda 	bl	800baf4 <__sfputc_r>
 800bb40:	1c43      	adds	r3, r0, #1
 800bb42:	d1f3      	bne.n	800bb2c <__sfputs_r+0xa>
 800bb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb48 <_vfiprintf_r>:
 800bb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4c:	460c      	mov	r4, r1
 800bb4e:	b09d      	sub	sp, #116	; 0x74
 800bb50:	4617      	mov	r7, r2
 800bb52:	461d      	mov	r5, r3
 800bb54:	4606      	mov	r6, r0
 800bb56:	b118      	cbz	r0, 800bb60 <_vfiprintf_r+0x18>
 800bb58:	6983      	ldr	r3, [r0, #24]
 800bb5a:	b90b      	cbnz	r3, 800bb60 <_vfiprintf_r+0x18>
 800bb5c:	f7ff fee6 	bl	800b92c <__sinit>
 800bb60:	4b7c      	ldr	r3, [pc, #496]	; (800bd54 <_vfiprintf_r+0x20c>)
 800bb62:	429c      	cmp	r4, r3
 800bb64:	d158      	bne.n	800bc18 <_vfiprintf_r+0xd0>
 800bb66:	6874      	ldr	r4, [r6, #4]
 800bb68:	89a3      	ldrh	r3, [r4, #12]
 800bb6a:	0718      	lsls	r0, r3, #28
 800bb6c:	d55e      	bpl.n	800bc2c <_vfiprintf_r+0xe4>
 800bb6e:	6923      	ldr	r3, [r4, #16]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d05b      	beq.n	800bc2c <_vfiprintf_r+0xe4>
 800bb74:	2300      	movs	r3, #0
 800bb76:	9309      	str	r3, [sp, #36]	; 0x24
 800bb78:	2320      	movs	r3, #32
 800bb7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb7e:	2330      	movs	r3, #48	; 0x30
 800bb80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb84:	9503      	str	r5, [sp, #12]
 800bb86:	f04f 0b01 	mov.w	fp, #1
 800bb8a:	46b8      	mov	r8, r7
 800bb8c:	4645      	mov	r5, r8
 800bb8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bb92:	b10b      	cbz	r3, 800bb98 <_vfiprintf_r+0x50>
 800bb94:	2b25      	cmp	r3, #37	; 0x25
 800bb96:	d154      	bne.n	800bc42 <_vfiprintf_r+0xfa>
 800bb98:	ebb8 0a07 	subs.w	sl, r8, r7
 800bb9c:	d00b      	beq.n	800bbb6 <_vfiprintf_r+0x6e>
 800bb9e:	4653      	mov	r3, sl
 800bba0:	463a      	mov	r2, r7
 800bba2:	4621      	mov	r1, r4
 800bba4:	4630      	mov	r0, r6
 800bba6:	f7ff ffbc 	bl	800bb22 <__sfputs_r>
 800bbaa:	3001      	adds	r0, #1
 800bbac:	f000 80c2 	beq.w	800bd34 <_vfiprintf_r+0x1ec>
 800bbb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbb2:	4453      	add	r3, sl
 800bbb4:	9309      	str	r3, [sp, #36]	; 0x24
 800bbb6:	f898 3000 	ldrb.w	r3, [r8]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f000 80ba 	beq.w	800bd34 <_vfiprintf_r+0x1ec>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f04f 32ff 	mov.w	r2, #4294967295
 800bbc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbca:	9304      	str	r3, [sp, #16]
 800bbcc:	9307      	str	r3, [sp, #28]
 800bbce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbd2:	931a      	str	r3, [sp, #104]	; 0x68
 800bbd4:	46a8      	mov	r8, r5
 800bbd6:	2205      	movs	r2, #5
 800bbd8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800bbdc:	485e      	ldr	r0, [pc, #376]	; (800bd58 <_vfiprintf_r+0x210>)
 800bbde:	f7f4 faff 	bl	80001e0 <memchr>
 800bbe2:	9b04      	ldr	r3, [sp, #16]
 800bbe4:	bb78      	cbnz	r0, 800bc46 <_vfiprintf_r+0xfe>
 800bbe6:	06d9      	lsls	r1, r3, #27
 800bbe8:	bf44      	itt	mi
 800bbea:	2220      	movmi	r2, #32
 800bbec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bbf0:	071a      	lsls	r2, r3, #28
 800bbf2:	bf44      	itt	mi
 800bbf4:	222b      	movmi	r2, #43	; 0x2b
 800bbf6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bbfa:	782a      	ldrb	r2, [r5, #0]
 800bbfc:	2a2a      	cmp	r2, #42	; 0x2a
 800bbfe:	d02a      	beq.n	800bc56 <_vfiprintf_r+0x10e>
 800bc00:	9a07      	ldr	r2, [sp, #28]
 800bc02:	46a8      	mov	r8, r5
 800bc04:	2000      	movs	r0, #0
 800bc06:	250a      	movs	r5, #10
 800bc08:	4641      	mov	r1, r8
 800bc0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc0e:	3b30      	subs	r3, #48	; 0x30
 800bc10:	2b09      	cmp	r3, #9
 800bc12:	d969      	bls.n	800bce8 <_vfiprintf_r+0x1a0>
 800bc14:	b360      	cbz	r0, 800bc70 <_vfiprintf_r+0x128>
 800bc16:	e024      	b.n	800bc62 <_vfiprintf_r+0x11a>
 800bc18:	4b50      	ldr	r3, [pc, #320]	; (800bd5c <_vfiprintf_r+0x214>)
 800bc1a:	429c      	cmp	r4, r3
 800bc1c:	d101      	bne.n	800bc22 <_vfiprintf_r+0xda>
 800bc1e:	68b4      	ldr	r4, [r6, #8]
 800bc20:	e7a2      	b.n	800bb68 <_vfiprintf_r+0x20>
 800bc22:	4b4f      	ldr	r3, [pc, #316]	; (800bd60 <_vfiprintf_r+0x218>)
 800bc24:	429c      	cmp	r4, r3
 800bc26:	bf08      	it	eq
 800bc28:	68f4      	ldreq	r4, [r6, #12]
 800bc2a:	e79d      	b.n	800bb68 <_vfiprintf_r+0x20>
 800bc2c:	4621      	mov	r1, r4
 800bc2e:	4630      	mov	r0, r6
 800bc30:	f000 fae0 	bl	800c1f4 <__swsetup_r>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	d09d      	beq.n	800bb74 <_vfiprintf_r+0x2c>
 800bc38:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3c:	b01d      	add	sp, #116	; 0x74
 800bc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc42:	46a8      	mov	r8, r5
 800bc44:	e7a2      	b.n	800bb8c <_vfiprintf_r+0x44>
 800bc46:	4a44      	ldr	r2, [pc, #272]	; (800bd58 <_vfiprintf_r+0x210>)
 800bc48:	1a80      	subs	r0, r0, r2
 800bc4a:	fa0b f000 	lsl.w	r0, fp, r0
 800bc4e:	4318      	orrs	r0, r3
 800bc50:	9004      	str	r0, [sp, #16]
 800bc52:	4645      	mov	r5, r8
 800bc54:	e7be      	b.n	800bbd4 <_vfiprintf_r+0x8c>
 800bc56:	9a03      	ldr	r2, [sp, #12]
 800bc58:	1d11      	adds	r1, r2, #4
 800bc5a:	6812      	ldr	r2, [r2, #0]
 800bc5c:	9103      	str	r1, [sp, #12]
 800bc5e:	2a00      	cmp	r2, #0
 800bc60:	db01      	blt.n	800bc66 <_vfiprintf_r+0x11e>
 800bc62:	9207      	str	r2, [sp, #28]
 800bc64:	e004      	b.n	800bc70 <_vfiprintf_r+0x128>
 800bc66:	4252      	negs	r2, r2
 800bc68:	f043 0302 	orr.w	r3, r3, #2
 800bc6c:	9207      	str	r2, [sp, #28]
 800bc6e:	9304      	str	r3, [sp, #16]
 800bc70:	f898 3000 	ldrb.w	r3, [r8]
 800bc74:	2b2e      	cmp	r3, #46	; 0x2e
 800bc76:	d10e      	bne.n	800bc96 <_vfiprintf_r+0x14e>
 800bc78:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bc7c:	2b2a      	cmp	r3, #42	; 0x2a
 800bc7e:	d138      	bne.n	800bcf2 <_vfiprintf_r+0x1aa>
 800bc80:	9b03      	ldr	r3, [sp, #12]
 800bc82:	1d1a      	adds	r2, r3, #4
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	9203      	str	r2, [sp, #12]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	bfb8      	it	lt
 800bc8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc90:	f108 0802 	add.w	r8, r8, #2
 800bc94:	9305      	str	r3, [sp, #20]
 800bc96:	4d33      	ldr	r5, [pc, #204]	; (800bd64 <_vfiprintf_r+0x21c>)
 800bc98:	f898 1000 	ldrb.w	r1, [r8]
 800bc9c:	2203      	movs	r2, #3
 800bc9e:	4628      	mov	r0, r5
 800bca0:	f7f4 fa9e 	bl	80001e0 <memchr>
 800bca4:	b140      	cbz	r0, 800bcb8 <_vfiprintf_r+0x170>
 800bca6:	2340      	movs	r3, #64	; 0x40
 800bca8:	1b40      	subs	r0, r0, r5
 800bcaa:	fa03 f000 	lsl.w	r0, r3, r0
 800bcae:	9b04      	ldr	r3, [sp, #16]
 800bcb0:	4303      	orrs	r3, r0
 800bcb2:	f108 0801 	add.w	r8, r8, #1
 800bcb6:	9304      	str	r3, [sp, #16]
 800bcb8:	f898 1000 	ldrb.w	r1, [r8]
 800bcbc:	482a      	ldr	r0, [pc, #168]	; (800bd68 <_vfiprintf_r+0x220>)
 800bcbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcc2:	2206      	movs	r2, #6
 800bcc4:	f108 0701 	add.w	r7, r8, #1
 800bcc8:	f7f4 fa8a 	bl	80001e0 <memchr>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	d037      	beq.n	800bd40 <_vfiprintf_r+0x1f8>
 800bcd0:	4b26      	ldr	r3, [pc, #152]	; (800bd6c <_vfiprintf_r+0x224>)
 800bcd2:	bb1b      	cbnz	r3, 800bd1c <_vfiprintf_r+0x1d4>
 800bcd4:	9b03      	ldr	r3, [sp, #12]
 800bcd6:	3307      	adds	r3, #7
 800bcd8:	f023 0307 	bic.w	r3, r3, #7
 800bcdc:	3308      	adds	r3, #8
 800bcde:	9303      	str	r3, [sp, #12]
 800bce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bce2:	444b      	add	r3, r9
 800bce4:	9309      	str	r3, [sp, #36]	; 0x24
 800bce6:	e750      	b.n	800bb8a <_vfiprintf_r+0x42>
 800bce8:	fb05 3202 	mla	r2, r5, r2, r3
 800bcec:	2001      	movs	r0, #1
 800bcee:	4688      	mov	r8, r1
 800bcf0:	e78a      	b.n	800bc08 <_vfiprintf_r+0xc0>
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	f108 0801 	add.w	r8, r8, #1
 800bcf8:	9305      	str	r3, [sp, #20]
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	250a      	movs	r5, #10
 800bcfe:	4640      	mov	r0, r8
 800bd00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd04:	3a30      	subs	r2, #48	; 0x30
 800bd06:	2a09      	cmp	r2, #9
 800bd08:	d903      	bls.n	800bd12 <_vfiprintf_r+0x1ca>
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d0c3      	beq.n	800bc96 <_vfiprintf_r+0x14e>
 800bd0e:	9105      	str	r1, [sp, #20]
 800bd10:	e7c1      	b.n	800bc96 <_vfiprintf_r+0x14e>
 800bd12:	fb05 2101 	mla	r1, r5, r1, r2
 800bd16:	2301      	movs	r3, #1
 800bd18:	4680      	mov	r8, r0
 800bd1a:	e7f0      	b.n	800bcfe <_vfiprintf_r+0x1b6>
 800bd1c:	ab03      	add	r3, sp, #12
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	4622      	mov	r2, r4
 800bd22:	4b13      	ldr	r3, [pc, #76]	; (800bd70 <_vfiprintf_r+0x228>)
 800bd24:	a904      	add	r1, sp, #16
 800bd26:	4630      	mov	r0, r6
 800bd28:	f3af 8000 	nop.w
 800bd2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bd30:	4681      	mov	r9, r0
 800bd32:	d1d5      	bne.n	800bce0 <_vfiprintf_r+0x198>
 800bd34:	89a3      	ldrh	r3, [r4, #12]
 800bd36:	065b      	lsls	r3, r3, #25
 800bd38:	f53f af7e 	bmi.w	800bc38 <_vfiprintf_r+0xf0>
 800bd3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd3e:	e77d      	b.n	800bc3c <_vfiprintf_r+0xf4>
 800bd40:	ab03      	add	r3, sp, #12
 800bd42:	9300      	str	r3, [sp, #0]
 800bd44:	4622      	mov	r2, r4
 800bd46:	4b0a      	ldr	r3, [pc, #40]	; (800bd70 <_vfiprintf_r+0x228>)
 800bd48:	a904      	add	r1, sp, #16
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	f000 f888 	bl	800be60 <_printf_i>
 800bd50:	e7ec      	b.n	800bd2c <_vfiprintf_r+0x1e4>
 800bd52:	bf00      	nop
 800bd54:	0800c828 	.word	0x0800c828
 800bd58:	0800c868 	.word	0x0800c868
 800bd5c:	0800c848 	.word	0x0800c848
 800bd60:	0800c808 	.word	0x0800c808
 800bd64:	0800c86e 	.word	0x0800c86e
 800bd68:	0800c872 	.word	0x0800c872
 800bd6c:	00000000 	.word	0x00000000
 800bd70:	0800bb23 	.word	0x0800bb23

0800bd74 <_printf_common>:
 800bd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd78:	4691      	mov	r9, r2
 800bd7a:	461f      	mov	r7, r3
 800bd7c:	688a      	ldr	r2, [r1, #8]
 800bd7e:	690b      	ldr	r3, [r1, #16]
 800bd80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd84:	4293      	cmp	r3, r2
 800bd86:	bfb8      	it	lt
 800bd88:	4613      	movlt	r3, r2
 800bd8a:	f8c9 3000 	str.w	r3, [r9]
 800bd8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd92:	4606      	mov	r6, r0
 800bd94:	460c      	mov	r4, r1
 800bd96:	b112      	cbz	r2, 800bd9e <_printf_common+0x2a>
 800bd98:	3301      	adds	r3, #1
 800bd9a:	f8c9 3000 	str.w	r3, [r9]
 800bd9e:	6823      	ldr	r3, [r4, #0]
 800bda0:	0699      	lsls	r1, r3, #26
 800bda2:	bf42      	ittt	mi
 800bda4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bda8:	3302      	addmi	r3, #2
 800bdaa:	f8c9 3000 	strmi.w	r3, [r9]
 800bdae:	6825      	ldr	r5, [r4, #0]
 800bdb0:	f015 0506 	ands.w	r5, r5, #6
 800bdb4:	d107      	bne.n	800bdc6 <_printf_common+0x52>
 800bdb6:	f104 0a19 	add.w	sl, r4, #25
 800bdba:	68e3      	ldr	r3, [r4, #12]
 800bdbc:	f8d9 2000 	ldr.w	r2, [r9]
 800bdc0:	1a9b      	subs	r3, r3, r2
 800bdc2:	42ab      	cmp	r3, r5
 800bdc4:	dc28      	bgt.n	800be18 <_printf_common+0xa4>
 800bdc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bdca:	6822      	ldr	r2, [r4, #0]
 800bdcc:	3300      	adds	r3, #0
 800bdce:	bf18      	it	ne
 800bdd0:	2301      	movne	r3, #1
 800bdd2:	0692      	lsls	r2, r2, #26
 800bdd4:	d42d      	bmi.n	800be32 <_printf_common+0xbe>
 800bdd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdda:	4639      	mov	r1, r7
 800bddc:	4630      	mov	r0, r6
 800bdde:	47c0      	blx	r8
 800bde0:	3001      	adds	r0, #1
 800bde2:	d020      	beq.n	800be26 <_printf_common+0xb2>
 800bde4:	6823      	ldr	r3, [r4, #0]
 800bde6:	68e5      	ldr	r5, [r4, #12]
 800bde8:	f8d9 2000 	ldr.w	r2, [r9]
 800bdec:	f003 0306 	and.w	r3, r3, #6
 800bdf0:	2b04      	cmp	r3, #4
 800bdf2:	bf08      	it	eq
 800bdf4:	1aad      	subeq	r5, r5, r2
 800bdf6:	68a3      	ldr	r3, [r4, #8]
 800bdf8:	6922      	ldr	r2, [r4, #16]
 800bdfa:	bf0c      	ite	eq
 800bdfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be00:	2500      	movne	r5, #0
 800be02:	4293      	cmp	r3, r2
 800be04:	bfc4      	itt	gt
 800be06:	1a9b      	subgt	r3, r3, r2
 800be08:	18ed      	addgt	r5, r5, r3
 800be0a:	f04f 0900 	mov.w	r9, #0
 800be0e:	341a      	adds	r4, #26
 800be10:	454d      	cmp	r5, r9
 800be12:	d11a      	bne.n	800be4a <_printf_common+0xd6>
 800be14:	2000      	movs	r0, #0
 800be16:	e008      	b.n	800be2a <_printf_common+0xb6>
 800be18:	2301      	movs	r3, #1
 800be1a:	4652      	mov	r2, sl
 800be1c:	4639      	mov	r1, r7
 800be1e:	4630      	mov	r0, r6
 800be20:	47c0      	blx	r8
 800be22:	3001      	adds	r0, #1
 800be24:	d103      	bne.n	800be2e <_printf_common+0xba>
 800be26:	f04f 30ff 	mov.w	r0, #4294967295
 800be2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be2e:	3501      	adds	r5, #1
 800be30:	e7c3      	b.n	800bdba <_printf_common+0x46>
 800be32:	18e1      	adds	r1, r4, r3
 800be34:	1c5a      	adds	r2, r3, #1
 800be36:	2030      	movs	r0, #48	; 0x30
 800be38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be3c:	4422      	add	r2, r4
 800be3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be46:	3302      	adds	r3, #2
 800be48:	e7c5      	b.n	800bdd6 <_printf_common+0x62>
 800be4a:	2301      	movs	r3, #1
 800be4c:	4622      	mov	r2, r4
 800be4e:	4639      	mov	r1, r7
 800be50:	4630      	mov	r0, r6
 800be52:	47c0      	blx	r8
 800be54:	3001      	adds	r0, #1
 800be56:	d0e6      	beq.n	800be26 <_printf_common+0xb2>
 800be58:	f109 0901 	add.w	r9, r9, #1
 800be5c:	e7d8      	b.n	800be10 <_printf_common+0x9c>
	...

0800be60 <_printf_i>:
 800be60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800be68:	460c      	mov	r4, r1
 800be6a:	7e09      	ldrb	r1, [r1, #24]
 800be6c:	b085      	sub	sp, #20
 800be6e:	296e      	cmp	r1, #110	; 0x6e
 800be70:	4617      	mov	r7, r2
 800be72:	4606      	mov	r6, r0
 800be74:	4698      	mov	r8, r3
 800be76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be78:	f000 80b3 	beq.w	800bfe2 <_printf_i+0x182>
 800be7c:	d822      	bhi.n	800bec4 <_printf_i+0x64>
 800be7e:	2963      	cmp	r1, #99	; 0x63
 800be80:	d036      	beq.n	800bef0 <_printf_i+0x90>
 800be82:	d80a      	bhi.n	800be9a <_printf_i+0x3a>
 800be84:	2900      	cmp	r1, #0
 800be86:	f000 80b9 	beq.w	800bffc <_printf_i+0x19c>
 800be8a:	2958      	cmp	r1, #88	; 0x58
 800be8c:	f000 8083 	beq.w	800bf96 <_printf_i+0x136>
 800be90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800be98:	e032      	b.n	800bf00 <_printf_i+0xa0>
 800be9a:	2964      	cmp	r1, #100	; 0x64
 800be9c:	d001      	beq.n	800bea2 <_printf_i+0x42>
 800be9e:	2969      	cmp	r1, #105	; 0x69
 800bea0:	d1f6      	bne.n	800be90 <_printf_i+0x30>
 800bea2:	6820      	ldr	r0, [r4, #0]
 800bea4:	6813      	ldr	r3, [r2, #0]
 800bea6:	0605      	lsls	r5, r0, #24
 800bea8:	f103 0104 	add.w	r1, r3, #4
 800beac:	d52a      	bpl.n	800bf04 <_printf_i+0xa4>
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6011      	str	r1, [r2, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	da03      	bge.n	800bebe <_printf_i+0x5e>
 800beb6:	222d      	movs	r2, #45	; 0x2d
 800beb8:	425b      	negs	r3, r3
 800beba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bebe:	486f      	ldr	r0, [pc, #444]	; (800c07c <_printf_i+0x21c>)
 800bec0:	220a      	movs	r2, #10
 800bec2:	e039      	b.n	800bf38 <_printf_i+0xd8>
 800bec4:	2973      	cmp	r1, #115	; 0x73
 800bec6:	f000 809d 	beq.w	800c004 <_printf_i+0x1a4>
 800beca:	d808      	bhi.n	800bede <_printf_i+0x7e>
 800becc:	296f      	cmp	r1, #111	; 0x6f
 800bece:	d020      	beq.n	800bf12 <_printf_i+0xb2>
 800bed0:	2970      	cmp	r1, #112	; 0x70
 800bed2:	d1dd      	bne.n	800be90 <_printf_i+0x30>
 800bed4:	6823      	ldr	r3, [r4, #0]
 800bed6:	f043 0320 	orr.w	r3, r3, #32
 800beda:	6023      	str	r3, [r4, #0]
 800bedc:	e003      	b.n	800bee6 <_printf_i+0x86>
 800bede:	2975      	cmp	r1, #117	; 0x75
 800bee0:	d017      	beq.n	800bf12 <_printf_i+0xb2>
 800bee2:	2978      	cmp	r1, #120	; 0x78
 800bee4:	d1d4      	bne.n	800be90 <_printf_i+0x30>
 800bee6:	2378      	movs	r3, #120	; 0x78
 800bee8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800beec:	4864      	ldr	r0, [pc, #400]	; (800c080 <_printf_i+0x220>)
 800beee:	e055      	b.n	800bf9c <_printf_i+0x13c>
 800bef0:	6813      	ldr	r3, [r2, #0]
 800bef2:	1d19      	adds	r1, r3, #4
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	6011      	str	r1, [r2, #0]
 800bef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800befc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf00:	2301      	movs	r3, #1
 800bf02:	e08c      	b.n	800c01e <_printf_i+0x1be>
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	6011      	str	r1, [r2, #0]
 800bf08:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf0c:	bf18      	it	ne
 800bf0e:	b21b      	sxthne	r3, r3
 800bf10:	e7cf      	b.n	800beb2 <_printf_i+0x52>
 800bf12:	6813      	ldr	r3, [r2, #0]
 800bf14:	6825      	ldr	r5, [r4, #0]
 800bf16:	1d18      	adds	r0, r3, #4
 800bf18:	6010      	str	r0, [r2, #0]
 800bf1a:	0628      	lsls	r0, r5, #24
 800bf1c:	d501      	bpl.n	800bf22 <_printf_i+0xc2>
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	e002      	b.n	800bf28 <_printf_i+0xc8>
 800bf22:	0668      	lsls	r0, r5, #25
 800bf24:	d5fb      	bpl.n	800bf1e <_printf_i+0xbe>
 800bf26:	881b      	ldrh	r3, [r3, #0]
 800bf28:	4854      	ldr	r0, [pc, #336]	; (800c07c <_printf_i+0x21c>)
 800bf2a:	296f      	cmp	r1, #111	; 0x6f
 800bf2c:	bf14      	ite	ne
 800bf2e:	220a      	movne	r2, #10
 800bf30:	2208      	moveq	r2, #8
 800bf32:	2100      	movs	r1, #0
 800bf34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf38:	6865      	ldr	r5, [r4, #4]
 800bf3a:	60a5      	str	r5, [r4, #8]
 800bf3c:	2d00      	cmp	r5, #0
 800bf3e:	f2c0 8095 	blt.w	800c06c <_printf_i+0x20c>
 800bf42:	6821      	ldr	r1, [r4, #0]
 800bf44:	f021 0104 	bic.w	r1, r1, #4
 800bf48:	6021      	str	r1, [r4, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d13d      	bne.n	800bfca <_printf_i+0x16a>
 800bf4e:	2d00      	cmp	r5, #0
 800bf50:	f040 808e 	bne.w	800c070 <_printf_i+0x210>
 800bf54:	4665      	mov	r5, ip
 800bf56:	2a08      	cmp	r2, #8
 800bf58:	d10b      	bne.n	800bf72 <_printf_i+0x112>
 800bf5a:	6823      	ldr	r3, [r4, #0]
 800bf5c:	07db      	lsls	r3, r3, #31
 800bf5e:	d508      	bpl.n	800bf72 <_printf_i+0x112>
 800bf60:	6923      	ldr	r3, [r4, #16]
 800bf62:	6862      	ldr	r2, [r4, #4]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	bfde      	ittt	le
 800bf68:	2330      	movle	r3, #48	; 0x30
 800bf6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf72:	ebac 0305 	sub.w	r3, ip, r5
 800bf76:	6123      	str	r3, [r4, #16]
 800bf78:	f8cd 8000 	str.w	r8, [sp]
 800bf7c:	463b      	mov	r3, r7
 800bf7e:	aa03      	add	r2, sp, #12
 800bf80:	4621      	mov	r1, r4
 800bf82:	4630      	mov	r0, r6
 800bf84:	f7ff fef6 	bl	800bd74 <_printf_common>
 800bf88:	3001      	adds	r0, #1
 800bf8a:	d14d      	bne.n	800c028 <_printf_i+0x1c8>
 800bf8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf90:	b005      	add	sp, #20
 800bf92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf96:	4839      	ldr	r0, [pc, #228]	; (800c07c <_printf_i+0x21c>)
 800bf98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bf9c:	6813      	ldr	r3, [r2, #0]
 800bf9e:	6821      	ldr	r1, [r4, #0]
 800bfa0:	1d1d      	adds	r5, r3, #4
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	6015      	str	r5, [r2, #0]
 800bfa6:	060a      	lsls	r2, r1, #24
 800bfa8:	d50b      	bpl.n	800bfc2 <_printf_i+0x162>
 800bfaa:	07ca      	lsls	r2, r1, #31
 800bfac:	bf44      	itt	mi
 800bfae:	f041 0120 	orrmi.w	r1, r1, #32
 800bfb2:	6021      	strmi	r1, [r4, #0]
 800bfb4:	b91b      	cbnz	r3, 800bfbe <_printf_i+0x15e>
 800bfb6:	6822      	ldr	r2, [r4, #0]
 800bfb8:	f022 0220 	bic.w	r2, r2, #32
 800bfbc:	6022      	str	r2, [r4, #0]
 800bfbe:	2210      	movs	r2, #16
 800bfc0:	e7b7      	b.n	800bf32 <_printf_i+0xd2>
 800bfc2:	064d      	lsls	r5, r1, #25
 800bfc4:	bf48      	it	mi
 800bfc6:	b29b      	uxthmi	r3, r3
 800bfc8:	e7ef      	b.n	800bfaa <_printf_i+0x14a>
 800bfca:	4665      	mov	r5, ip
 800bfcc:	fbb3 f1f2 	udiv	r1, r3, r2
 800bfd0:	fb02 3311 	mls	r3, r2, r1, r3
 800bfd4:	5cc3      	ldrb	r3, [r0, r3]
 800bfd6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bfda:	460b      	mov	r3, r1
 800bfdc:	2900      	cmp	r1, #0
 800bfde:	d1f5      	bne.n	800bfcc <_printf_i+0x16c>
 800bfe0:	e7b9      	b.n	800bf56 <_printf_i+0xf6>
 800bfe2:	6813      	ldr	r3, [r2, #0]
 800bfe4:	6825      	ldr	r5, [r4, #0]
 800bfe6:	6961      	ldr	r1, [r4, #20]
 800bfe8:	1d18      	adds	r0, r3, #4
 800bfea:	6010      	str	r0, [r2, #0]
 800bfec:	0628      	lsls	r0, r5, #24
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	d501      	bpl.n	800bff6 <_printf_i+0x196>
 800bff2:	6019      	str	r1, [r3, #0]
 800bff4:	e002      	b.n	800bffc <_printf_i+0x19c>
 800bff6:	066a      	lsls	r2, r5, #25
 800bff8:	d5fb      	bpl.n	800bff2 <_printf_i+0x192>
 800bffa:	8019      	strh	r1, [r3, #0]
 800bffc:	2300      	movs	r3, #0
 800bffe:	6123      	str	r3, [r4, #16]
 800c000:	4665      	mov	r5, ip
 800c002:	e7b9      	b.n	800bf78 <_printf_i+0x118>
 800c004:	6813      	ldr	r3, [r2, #0]
 800c006:	1d19      	adds	r1, r3, #4
 800c008:	6011      	str	r1, [r2, #0]
 800c00a:	681d      	ldr	r5, [r3, #0]
 800c00c:	6862      	ldr	r2, [r4, #4]
 800c00e:	2100      	movs	r1, #0
 800c010:	4628      	mov	r0, r5
 800c012:	f7f4 f8e5 	bl	80001e0 <memchr>
 800c016:	b108      	cbz	r0, 800c01c <_printf_i+0x1bc>
 800c018:	1b40      	subs	r0, r0, r5
 800c01a:	6060      	str	r0, [r4, #4]
 800c01c:	6863      	ldr	r3, [r4, #4]
 800c01e:	6123      	str	r3, [r4, #16]
 800c020:	2300      	movs	r3, #0
 800c022:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c026:	e7a7      	b.n	800bf78 <_printf_i+0x118>
 800c028:	6923      	ldr	r3, [r4, #16]
 800c02a:	462a      	mov	r2, r5
 800c02c:	4639      	mov	r1, r7
 800c02e:	4630      	mov	r0, r6
 800c030:	47c0      	blx	r8
 800c032:	3001      	adds	r0, #1
 800c034:	d0aa      	beq.n	800bf8c <_printf_i+0x12c>
 800c036:	6823      	ldr	r3, [r4, #0]
 800c038:	079b      	lsls	r3, r3, #30
 800c03a:	d413      	bmi.n	800c064 <_printf_i+0x204>
 800c03c:	68e0      	ldr	r0, [r4, #12]
 800c03e:	9b03      	ldr	r3, [sp, #12]
 800c040:	4298      	cmp	r0, r3
 800c042:	bfb8      	it	lt
 800c044:	4618      	movlt	r0, r3
 800c046:	e7a3      	b.n	800bf90 <_printf_i+0x130>
 800c048:	2301      	movs	r3, #1
 800c04a:	464a      	mov	r2, r9
 800c04c:	4639      	mov	r1, r7
 800c04e:	4630      	mov	r0, r6
 800c050:	47c0      	blx	r8
 800c052:	3001      	adds	r0, #1
 800c054:	d09a      	beq.n	800bf8c <_printf_i+0x12c>
 800c056:	3501      	adds	r5, #1
 800c058:	68e3      	ldr	r3, [r4, #12]
 800c05a:	9a03      	ldr	r2, [sp, #12]
 800c05c:	1a9b      	subs	r3, r3, r2
 800c05e:	42ab      	cmp	r3, r5
 800c060:	dcf2      	bgt.n	800c048 <_printf_i+0x1e8>
 800c062:	e7eb      	b.n	800c03c <_printf_i+0x1dc>
 800c064:	2500      	movs	r5, #0
 800c066:	f104 0919 	add.w	r9, r4, #25
 800c06a:	e7f5      	b.n	800c058 <_printf_i+0x1f8>
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1ac      	bne.n	800bfca <_printf_i+0x16a>
 800c070:	7803      	ldrb	r3, [r0, #0]
 800c072:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c076:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c07a:	e76c      	b.n	800bf56 <_printf_i+0xf6>
 800c07c:	0800c879 	.word	0x0800c879
 800c080:	0800c88a 	.word	0x0800c88a

0800c084 <_sbrk_r>:
 800c084:	b538      	push	{r3, r4, r5, lr}
 800c086:	4c06      	ldr	r4, [pc, #24]	; (800c0a0 <_sbrk_r+0x1c>)
 800c088:	2300      	movs	r3, #0
 800c08a:	4605      	mov	r5, r0
 800c08c:	4608      	mov	r0, r1
 800c08e:	6023      	str	r3, [r4, #0]
 800c090:	f7f4 ff94 	bl	8000fbc <_sbrk>
 800c094:	1c43      	adds	r3, r0, #1
 800c096:	d102      	bne.n	800c09e <_sbrk_r+0x1a>
 800c098:	6823      	ldr	r3, [r4, #0]
 800c09a:	b103      	cbz	r3, 800c09e <_sbrk_r+0x1a>
 800c09c:	602b      	str	r3, [r5, #0]
 800c09e:	bd38      	pop	{r3, r4, r5, pc}
 800c0a0:	20009244 	.word	0x20009244

0800c0a4 <__sread>:
 800c0a4:	b510      	push	{r4, lr}
 800c0a6:	460c      	mov	r4, r1
 800c0a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ac:	f000 fa96 	bl	800c5dc <_read_r>
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	bfab      	itete	ge
 800c0b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0b6:	89a3      	ldrhlt	r3, [r4, #12]
 800c0b8:	181b      	addge	r3, r3, r0
 800c0ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0be:	bfac      	ite	ge
 800c0c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0c2:	81a3      	strhlt	r3, [r4, #12]
 800c0c4:	bd10      	pop	{r4, pc}

0800c0c6 <__swrite>:
 800c0c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ca:	461f      	mov	r7, r3
 800c0cc:	898b      	ldrh	r3, [r1, #12]
 800c0ce:	05db      	lsls	r3, r3, #23
 800c0d0:	4605      	mov	r5, r0
 800c0d2:	460c      	mov	r4, r1
 800c0d4:	4616      	mov	r6, r2
 800c0d6:	d505      	bpl.n	800c0e4 <__swrite+0x1e>
 800c0d8:	2302      	movs	r3, #2
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0e0:	f000 f9b6 	bl	800c450 <_lseek_r>
 800c0e4:	89a3      	ldrh	r3, [r4, #12]
 800c0e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0ee:	81a3      	strh	r3, [r4, #12]
 800c0f0:	4632      	mov	r2, r6
 800c0f2:	463b      	mov	r3, r7
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0fa:	f000 b869 	b.w	800c1d0 <_write_r>

0800c0fe <__sseek>:
 800c0fe:	b510      	push	{r4, lr}
 800c100:	460c      	mov	r4, r1
 800c102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c106:	f000 f9a3 	bl	800c450 <_lseek_r>
 800c10a:	1c43      	adds	r3, r0, #1
 800c10c:	89a3      	ldrh	r3, [r4, #12]
 800c10e:	bf15      	itete	ne
 800c110:	6560      	strne	r0, [r4, #84]	; 0x54
 800c112:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c116:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c11a:	81a3      	strheq	r3, [r4, #12]
 800c11c:	bf18      	it	ne
 800c11e:	81a3      	strhne	r3, [r4, #12]
 800c120:	bd10      	pop	{r4, pc}

0800c122 <__sclose>:
 800c122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c126:	f000 b8d3 	b.w	800c2d0 <_close_r>
	...

0800c12c <__swbuf_r>:
 800c12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c12e:	460e      	mov	r6, r1
 800c130:	4614      	mov	r4, r2
 800c132:	4605      	mov	r5, r0
 800c134:	b118      	cbz	r0, 800c13e <__swbuf_r+0x12>
 800c136:	6983      	ldr	r3, [r0, #24]
 800c138:	b90b      	cbnz	r3, 800c13e <__swbuf_r+0x12>
 800c13a:	f7ff fbf7 	bl	800b92c <__sinit>
 800c13e:	4b21      	ldr	r3, [pc, #132]	; (800c1c4 <__swbuf_r+0x98>)
 800c140:	429c      	cmp	r4, r3
 800c142:	d12a      	bne.n	800c19a <__swbuf_r+0x6e>
 800c144:	686c      	ldr	r4, [r5, #4]
 800c146:	69a3      	ldr	r3, [r4, #24]
 800c148:	60a3      	str	r3, [r4, #8]
 800c14a:	89a3      	ldrh	r3, [r4, #12]
 800c14c:	071a      	lsls	r2, r3, #28
 800c14e:	d52e      	bpl.n	800c1ae <__swbuf_r+0x82>
 800c150:	6923      	ldr	r3, [r4, #16]
 800c152:	b363      	cbz	r3, 800c1ae <__swbuf_r+0x82>
 800c154:	6923      	ldr	r3, [r4, #16]
 800c156:	6820      	ldr	r0, [r4, #0]
 800c158:	1ac0      	subs	r0, r0, r3
 800c15a:	6963      	ldr	r3, [r4, #20]
 800c15c:	b2f6      	uxtb	r6, r6
 800c15e:	4283      	cmp	r3, r0
 800c160:	4637      	mov	r7, r6
 800c162:	dc04      	bgt.n	800c16e <__swbuf_r+0x42>
 800c164:	4621      	mov	r1, r4
 800c166:	4628      	mov	r0, r5
 800c168:	f000 f948 	bl	800c3fc <_fflush_r>
 800c16c:	bb28      	cbnz	r0, 800c1ba <__swbuf_r+0x8e>
 800c16e:	68a3      	ldr	r3, [r4, #8]
 800c170:	3b01      	subs	r3, #1
 800c172:	60a3      	str	r3, [r4, #8]
 800c174:	6823      	ldr	r3, [r4, #0]
 800c176:	1c5a      	adds	r2, r3, #1
 800c178:	6022      	str	r2, [r4, #0]
 800c17a:	701e      	strb	r6, [r3, #0]
 800c17c:	6963      	ldr	r3, [r4, #20]
 800c17e:	3001      	adds	r0, #1
 800c180:	4283      	cmp	r3, r0
 800c182:	d004      	beq.n	800c18e <__swbuf_r+0x62>
 800c184:	89a3      	ldrh	r3, [r4, #12]
 800c186:	07db      	lsls	r3, r3, #31
 800c188:	d519      	bpl.n	800c1be <__swbuf_r+0x92>
 800c18a:	2e0a      	cmp	r6, #10
 800c18c:	d117      	bne.n	800c1be <__swbuf_r+0x92>
 800c18e:	4621      	mov	r1, r4
 800c190:	4628      	mov	r0, r5
 800c192:	f000 f933 	bl	800c3fc <_fflush_r>
 800c196:	b190      	cbz	r0, 800c1be <__swbuf_r+0x92>
 800c198:	e00f      	b.n	800c1ba <__swbuf_r+0x8e>
 800c19a:	4b0b      	ldr	r3, [pc, #44]	; (800c1c8 <__swbuf_r+0x9c>)
 800c19c:	429c      	cmp	r4, r3
 800c19e:	d101      	bne.n	800c1a4 <__swbuf_r+0x78>
 800c1a0:	68ac      	ldr	r4, [r5, #8]
 800c1a2:	e7d0      	b.n	800c146 <__swbuf_r+0x1a>
 800c1a4:	4b09      	ldr	r3, [pc, #36]	; (800c1cc <__swbuf_r+0xa0>)
 800c1a6:	429c      	cmp	r4, r3
 800c1a8:	bf08      	it	eq
 800c1aa:	68ec      	ldreq	r4, [r5, #12]
 800c1ac:	e7cb      	b.n	800c146 <__swbuf_r+0x1a>
 800c1ae:	4621      	mov	r1, r4
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	f000 f81f 	bl	800c1f4 <__swsetup_r>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d0cc      	beq.n	800c154 <__swbuf_r+0x28>
 800c1ba:	f04f 37ff 	mov.w	r7, #4294967295
 800c1be:	4638      	mov	r0, r7
 800c1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	0800c828 	.word	0x0800c828
 800c1c8:	0800c848 	.word	0x0800c848
 800c1cc:	0800c808 	.word	0x0800c808

0800c1d0 <_write_r>:
 800c1d0:	b538      	push	{r3, r4, r5, lr}
 800c1d2:	4c07      	ldr	r4, [pc, #28]	; (800c1f0 <_write_r+0x20>)
 800c1d4:	4605      	mov	r5, r0
 800c1d6:	4608      	mov	r0, r1
 800c1d8:	4611      	mov	r1, r2
 800c1da:	2200      	movs	r2, #0
 800c1dc:	6022      	str	r2, [r4, #0]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	f7f4 fe9b 	bl	8000f1a <_write>
 800c1e4:	1c43      	adds	r3, r0, #1
 800c1e6:	d102      	bne.n	800c1ee <_write_r+0x1e>
 800c1e8:	6823      	ldr	r3, [r4, #0]
 800c1ea:	b103      	cbz	r3, 800c1ee <_write_r+0x1e>
 800c1ec:	602b      	str	r3, [r5, #0]
 800c1ee:	bd38      	pop	{r3, r4, r5, pc}
 800c1f0:	20009244 	.word	0x20009244

0800c1f4 <__swsetup_r>:
 800c1f4:	4b32      	ldr	r3, [pc, #200]	; (800c2c0 <__swsetup_r+0xcc>)
 800c1f6:	b570      	push	{r4, r5, r6, lr}
 800c1f8:	681d      	ldr	r5, [r3, #0]
 800c1fa:	4606      	mov	r6, r0
 800c1fc:	460c      	mov	r4, r1
 800c1fe:	b125      	cbz	r5, 800c20a <__swsetup_r+0x16>
 800c200:	69ab      	ldr	r3, [r5, #24]
 800c202:	b913      	cbnz	r3, 800c20a <__swsetup_r+0x16>
 800c204:	4628      	mov	r0, r5
 800c206:	f7ff fb91 	bl	800b92c <__sinit>
 800c20a:	4b2e      	ldr	r3, [pc, #184]	; (800c2c4 <__swsetup_r+0xd0>)
 800c20c:	429c      	cmp	r4, r3
 800c20e:	d10f      	bne.n	800c230 <__swsetup_r+0x3c>
 800c210:	686c      	ldr	r4, [r5, #4]
 800c212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c216:	b29a      	uxth	r2, r3
 800c218:	0715      	lsls	r5, r2, #28
 800c21a:	d42c      	bmi.n	800c276 <__swsetup_r+0x82>
 800c21c:	06d0      	lsls	r0, r2, #27
 800c21e:	d411      	bmi.n	800c244 <__swsetup_r+0x50>
 800c220:	2209      	movs	r2, #9
 800c222:	6032      	str	r2, [r6, #0]
 800c224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c228:	81a3      	strh	r3, [r4, #12]
 800c22a:	f04f 30ff 	mov.w	r0, #4294967295
 800c22e:	e03e      	b.n	800c2ae <__swsetup_r+0xba>
 800c230:	4b25      	ldr	r3, [pc, #148]	; (800c2c8 <__swsetup_r+0xd4>)
 800c232:	429c      	cmp	r4, r3
 800c234:	d101      	bne.n	800c23a <__swsetup_r+0x46>
 800c236:	68ac      	ldr	r4, [r5, #8]
 800c238:	e7eb      	b.n	800c212 <__swsetup_r+0x1e>
 800c23a:	4b24      	ldr	r3, [pc, #144]	; (800c2cc <__swsetup_r+0xd8>)
 800c23c:	429c      	cmp	r4, r3
 800c23e:	bf08      	it	eq
 800c240:	68ec      	ldreq	r4, [r5, #12]
 800c242:	e7e6      	b.n	800c212 <__swsetup_r+0x1e>
 800c244:	0751      	lsls	r1, r2, #29
 800c246:	d512      	bpl.n	800c26e <__swsetup_r+0x7a>
 800c248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c24a:	b141      	cbz	r1, 800c25e <__swsetup_r+0x6a>
 800c24c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c250:	4299      	cmp	r1, r3
 800c252:	d002      	beq.n	800c25a <__swsetup_r+0x66>
 800c254:	4630      	mov	r0, r6
 800c256:	f000 f973 	bl	800c540 <_free_r>
 800c25a:	2300      	movs	r3, #0
 800c25c:	6363      	str	r3, [r4, #52]	; 0x34
 800c25e:	89a3      	ldrh	r3, [r4, #12]
 800c260:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c264:	81a3      	strh	r3, [r4, #12]
 800c266:	2300      	movs	r3, #0
 800c268:	6063      	str	r3, [r4, #4]
 800c26a:	6923      	ldr	r3, [r4, #16]
 800c26c:	6023      	str	r3, [r4, #0]
 800c26e:	89a3      	ldrh	r3, [r4, #12]
 800c270:	f043 0308 	orr.w	r3, r3, #8
 800c274:	81a3      	strh	r3, [r4, #12]
 800c276:	6923      	ldr	r3, [r4, #16]
 800c278:	b94b      	cbnz	r3, 800c28e <__swsetup_r+0x9a>
 800c27a:	89a3      	ldrh	r3, [r4, #12]
 800c27c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c284:	d003      	beq.n	800c28e <__swsetup_r+0x9a>
 800c286:	4621      	mov	r1, r4
 800c288:	4630      	mov	r0, r6
 800c28a:	f000 f917 	bl	800c4bc <__smakebuf_r>
 800c28e:	89a2      	ldrh	r2, [r4, #12]
 800c290:	f012 0301 	ands.w	r3, r2, #1
 800c294:	d00c      	beq.n	800c2b0 <__swsetup_r+0xbc>
 800c296:	2300      	movs	r3, #0
 800c298:	60a3      	str	r3, [r4, #8]
 800c29a:	6963      	ldr	r3, [r4, #20]
 800c29c:	425b      	negs	r3, r3
 800c29e:	61a3      	str	r3, [r4, #24]
 800c2a0:	6923      	ldr	r3, [r4, #16]
 800c2a2:	b953      	cbnz	r3, 800c2ba <__swsetup_r+0xc6>
 800c2a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c2ac:	d1ba      	bne.n	800c224 <__swsetup_r+0x30>
 800c2ae:	bd70      	pop	{r4, r5, r6, pc}
 800c2b0:	0792      	lsls	r2, r2, #30
 800c2b2:	bf58      	it	pl
 800c2b4:	6963      	ldrpl	r3, [r4, #20]
 800c2b6:	60a3      	str	r3, [r4, #8]
 800c2b8:	e7f2      	b.n	800c2a0 <__swsetup_r+0xac>
 800c2ba:	2000      	movs	r0, #0
 800c2bc:	e7f7      	b.n	800c2ae <__swsetup_r+0xba>
 800c2be:	bf00      	nop
 800c2c0:	200000f8 	.word	0x200000f8
 800c2c4:	0800c828 	.word	0x0800c828
 800c2c8:	0800c848 	.word	0x0800c848
 800c2cc:	0800c808 	.word	0x0800c808

0800c2d0 <_close_r>:
 800c2d0:	b538      	push	{r3, r4, r5, lr}
 800c2d2:	4c06      	ldr	r4, [pc, #24]	; (800c2ec <_close_r+0x1c>)
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	4605      	mov	r5, r0
 800c2d8:	4608      	mov	r0, r1
 800c2da:	6023      	str	r3, [r4, #0]
 800c2dc:	f7f4 fe39 	bl	8000f52 <_close>
 800c2e0:	1c43      	adds	r3, r0, #1
 800c2e2:	d102      	bne.n	800c2ea <_close_r+0x1a>
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	b103      	cbz	r3, 800c2ea <_close_r+0x1a>
 800c2e8:	602b      	str	r3, [r5, #0]
 800c2ea:	bd38      	pop	{r3, r4, r5, pc}
 800c2ec:	20009244 	.word	0x20009244

0800c2f0 <__sflush_r>:
 800c2f0:	898a      	ldrh	r2, [r1, #12]
 800c2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2f6:	4605      	mov	r5, r0
 800c2f8:	0710      	lsls	r0, r2, #28
 800c2fa:	460c      	mov	r4, r1
 800c2fc:	d458      	bmi.n	800c3b0 <__sflush_r+0xc0>
 800c2fe:	684b      	ldr	r3, [r1, #4]
 800c300:	2b00      	cmp	r3, #0
 800c302:	dc05      	bgt.n	800c310 <__sflush_r+0x20>
 800c304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c306:	2b00      	cmp	r3, #0
 800c308:	dc02      	bgt.n	800c310 <__sflush_r+0x20>
 800c30a:	2000      	movs	r0, #0
 800c30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c312:	2e00      	cmp	r6, #0
 800c314:	d0f9      	beq.n	800c30a <__sflush_r+0x1a>
 800c316:	2300      	movs	r3, #0
 800c318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c31c:	682f      	ldr	r7, [r5, #0]
 800c31e:	6a21      	ldr	r1, [r4, #32]
 800c320:	602b      	str	r3, [r5, #0]
 800c322:	d032      	beq.n	800c38a <__sflush_r+0x9a>
 800c324:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c326:	89a3      	ldrh	r3, [r4, #12]
 800c328:	075a      	lsls	r2, r3, #29
 800c32a:	d505      	bpl.n	800c338 <__sflush_r+0x48>
 800c32c:	6863      	ldr	r3, [r4, #4]
 800c32e:	1ac0      	subs	r0, r0, r3
 800c330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c332:	b10b      	cbz	r3, 800c338 <__sflush_r+0x48>
 800c334:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c336:	1ac0      	subs	r0, r0, r3
 800c338:	2300      	movs	r3, #0
 800c33a:	4602      	mov	r2, r0
 800c33c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c33e:	6a21      	ldr	r1, [r4, #32]
 800c340:	4628      	mov	r0, r5
 800c342:	47b0      	blx	r6
 800c344:	1c43      	adds	r3, r0, #1
 800c346:	89a3      	ldrh	r3, [r4, #12]
 800c348:	d106      	bne.n	800c358 <__sflush_r+0x68>
 800c34a:	6829      	ldr	r1, [r5, #0]
 800c34c:	291d      	cmp	r1, #29
 800c34e:	d848      	bhi.n	800c3e2 <__sflush_r+0xf2>
 800c350:	4a29      	ldr	r2, [pc, #164]	; (800c3f8 <__sflush_r+0x108>)
 800c352:	40ca      	lsrs	r2, r1
 800c354:	07d6      	lsls	r6, r2, #31
 800c356:	d544      	bpl.n	800c3e2 <__sflush_r+0xf2>
 800c358:	2200      	movs	r2, #0
 800c35a:	6062      	str	r2, [r4, #4]
 800c35c:	04d9      	lsls	r1, r3, #19
 800c35e:	6922      	ldr	r2, [r4, #16]
 800c360:	6022      	str	r2, [r4, #0]
 800c362:	d504      	bpl.n	800c36e <__sflush_r+0x7e>
 800c364:	1c42      	adds	r2, r0, #1
 800c366:	d101      	bne.n	800c36c <__sflush_r+0x7c>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	b903      	cbnz	r3, 800c36e <__sflush_r+0x7e>
 800c36c:	6560      	str	r0, [r4, #84]	; 0x54
 800c36e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c370:	602f      	str	r7, [r5, #0]
 800c372:	2900      	cmp	r1, #0
 800c374:	d0c9      	beq.n	800c30a <__sflush_r+0x1a>
 800c376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c37a:	4299      	cmp	r1, r3
 800c37c:	d002      	beq.n	800c384 <__sflush_r+0x94>
 800c37e:	4628      	mov	r0, r5
 800c380:	f000 f8de 	bl	800c540 <_free_r>
 800c384:	2000      	movs	r0, #0
 800c386:	6360      	str	r0, [r4, #52]	; 0x34
 800c388:	e7c0      	b.n	800c30c <__sflush_r+0x1c>
 800c38a:	2301      	movs	r3, #1
 800c38c:	4628      	mov	r0, r5
 800c38e:	47b0      	blx	r6
 800c390:	1c41      	adds	r1, r0, #1
 800c392:	d1c8      	bne.n	800c326 <__sflush_r+0x36>
 800c394:	682b      	ldr	r3, [r5, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d0c5      	beq.n	800c326 <__sflush_r+0x36>
 800c39a:	2b1d      	cmp	r3, #29
 800c39c:	d001      	beq.n	800c3a2 <__sflush_r+0xb2>
 800c39e:	2b16      	cmp	r3, #22
 800c3a0:	d101      	bne.n	800c3a6 <__sflush_r+0xb6>
 800c3a2:	602f      	str	r7, [r5, #0]
 800c3a4:	e7b1      	b.n	800c30a <__sflush_r+0x1a>
 800c3a6:	89a3      	ldrh	r3, [r4, #12]
 800c3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ac:	81a3      	strh	r3, [r4, #12]
 800c3ae:	e7ad      	b.n	800c30c <__sflush_r+0x1c>
 800c3b0:	690f      	ldr	r7, [r1, #16]
 800c3b2:	2f00      	cmp	r7, #0
 800c3b4:	d0a9      	beq.n	800c30a <__sflush_r+0x1a>
 800c3b6:	0793      	lsls	r3, r2, #30
 800c3b8:	680e      	ldr	r6, [r1, #0]
 800c3ba:	bf08      	it	eq
 800c3bc:	694b      	ldreq	r3, [r1, #20]
 800c3be:	600f      	str	r7, [r1, #0]
 800c3c0:	bf18      	it	ne
 800c3c2:	2300      	movne	r3, #0
 800c3c4:	eba6 0807 	sub.w	r8, r6, r7
 800c3c8:	608b      	str	r3, [r1, #8]
 800c3ca:	f1b8 0f00 	cmp.w	r8, #0
 800c3ce:	dd9c      	ble.n	800c30a <__sflush_r+0x1a>
 800c3d0:	4643      	mov	r3, r8
 800c3d2:	463a      	mov	r2, r7
 800c3d4:	6a21      	ldr	r1, [r4, #32]
 800c3d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3d8:	4628      	mov	r0, r5
 800c3da:	47b0      	blx	r6
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	dc06      	bgt.n	800c3ee <__sflush_r+0xfe>
 800c3e0:	89a3      	ldrh	r3, [r4, #12]
 800c3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3e6:	81a3      	strh	r3, [r4, #12]
 800c3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ec:	e78e      	b.n	800c30c <__sflush_r+0x1c>
 800c3ee:	4407      	add	r7, r0
 800c3f0:	eba8 0800 	sub.w	r8, r8, r0
 800c3f4:	e7e9      	b.n	800c3ca <__sflush_r+0xda>
 800c3f6:	bf00      	nop
 800c3f8:	20400001 	.word	0x20400001

0800c3fc <_fflush_r>:
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	690b      	ldr	r3, [r1, #16]
 800c400:	4605      	mov	r5, r0
 800c402:	460c      	mov	r4, r1
 800c404:	b1db      	cbz	r3, 800c43e <_fflush_r+0x42>
 800c406:	b118      	cbz	r0, 800c410 <_fflush_r+0x14>
 800c408:	6983      	ldr	r3, [r0, #24]
 800c40a:	b90b      	cbnz	r3, 800c410 <_fflush_r+0x14>
 800c40c:	f7ff fa8e 	bl	800b92c <__sinit>
 800c410:	4b0c      	ldr	r3, [pc, #48]	; (800c444 <_fflush_r+0x48>)
 800c412:	429c      	cmp	r4, r3
 800c414:	d109      	bne.n	800c42a <_fflush_r+0x2e>
 800c416:	686c      	ldr	r4, [r5, #4]
 800c418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c41c:	b17b      	cbz	r3, 800c43e <_fflush_r+0x42>
 800c41e:	4621      	mov	r1, r4
 800c420:	4628      	mov	r0, r5
 800c422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c426:	f7ff bf63 	b.w	800c2f0 <__sflush_r>
 800c42a:	4b07      	ldr	r3, [pc, #28]	; (800c448 <_fflush_r+0x4c>)
 800c42c:	429c      	cmp	r4, r3
 800c42e:	d101      	bne.n	800c434 <_fflush_r+0x38>
 800c430:	68ac      	ldr	r4, [r5, #8]
 800c432:	e7f1      	b.n	800c418 <_fflush_r+0x1c>
 800c434:	4b05      	ldr	r3, [pc, #20]	; (800c44c <_fflush_r+0x50>)
 800c436:	429c      	cmp	r4, r3
 800c438:	bf08      	it	eq
 800c43a:	68ec      	ldreq	r4, [r5, #12]
 800c43c:	e7ec      	b.n	800c418 <_fflush_r+0x1c>
 800c43e:	2000      	movs	r0, #0
 800c440:	bd38      	pop	{r3, r4, r5, pc}
 800c442:	bf00      	nop
 800c444:	0800c828 	.word	0x0800c828
 800c448:	0800c848 	.word	0x0800c848
 800c44c:	0800c808 	.word	0x0800c808

0800c450 <_lseek_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4c07      	ldr	r4, [pc, #28]	; (800c470 <_lseek_r+0x20>)
 800c454:	4605      	mov	r5, r0
 800c456:	4608      	mov	r0, r1
 800c458:	4611      	mov	r1, r2
 800c45a:	2200      	movs	r2, #0
 800c45c:	6022      	str	r2, [r4, #0]
 800c45e:	461a      	mov	r2, r3
 800c460:	f7f4 fd9e 	bl	8000fa0 <_lseek>
 800c464:	1c43      	adds	r3, r0, #1
 800c466:	d102      	bne.n	800c46e <_lseek_r+0x1e>
 800c468:	6823      	ldr	r3, [r4, #0]
 800c46a:	b103      	cbz	r3, 800c46e <_lseek_r+0x1e>
 800c46c:	602b      	str	r3, [r5, #0]
 800c46e:	bd38      	pop	{r3, r4, r5, pc}
 800c470:	20009244 	.word	0x20009244

0800c474 <__swhatbuf_r>:
 800c474:	b570      	push	{r4, r5, r6, lr}
 800c476:	460e      	mov	r6, r1
 800c478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c47c:	2900      	cmp	r1, #0
 800c47e:	b096      	sub	sp, #88	; 0x58
 800c480:	4614      	mov	r4, r2
 800c482:	461d      	mov	r5, r3
 800c484:	da07      	bge.n	800c496 <__swhatbuf_r+0x22>
 800c486:	2300      	movs	r3, #0
 800c488:	602b      	str	r3, [r5, #0]
 800c48a:	89b3      	ldrh	r3, [r6, #12]
 800c48c:	061a      	lsls	r2, r3, #24
 800c48e:	d410      	bmi.n	800c4b2 <__swhatbuf_r+0x3e>
 800c490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c494:	e00e      	b.n	800c4b4 <__swhatbuf_r+0x40>
 800c496:	466a      	mov	r2, sp
 800c498:	f000 f8b2 	bl	800c600 <_fstat_r>
 800c49c:	2800      	cmp	r0, #0
 800c49e:	dbf2      	blt.n	800c486 <__swhatbuf_r+0x12>
 800c4a0:	9a01      	ldr	r2, [sp, #4]
 800c4a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c4a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c4aa:	425a      	negs	r2, r3
 800c4ac:	415a      	adcs	r2, r3
 800c4ae:	602a      	str	r2, [r5, #0]
 800c4b0:	e7ee      	b.n	800c490 <__swhatbuf_r+0x1c>
 800c4b2:	2340      	movs	r3, #64	; 0x40
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	6023      	str	r3, [r4, #0]
 800c4b8:	b016      	add	sp, #88	; 0x58
 800c4ba:	bd70      	pop	{r4, r5, r6, pc}

0800c4bc <__smakebuf_r>:
 800c4bc:	898b      	ldrh	r3, [r1, #12]
 800c4be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4c0:	079d      	lsls	r5, r3, #30
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	460c      	mov	r4, r1
 800c4c6:	d507      	bpl.n	800c4d8 <__smakebuf_r+0x1c>
 800c4c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4cc:	6023      	str	r3, [r4, #0]
 800c4ce:	6123      	str	r3, [r4, #16]
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	6163      	str	r3, [r4, #20]
 800c4d4:	b002      	add	sp, #8
 800c4d6:	bd70      	pop	{r4, r5, r6, pc}
 800c4d8:	ab01      	add	r3, sp, #4
 800c4da:	466a      	mov	r2, sp
 800c4dc:	f7ff ffca 	bl	800c474 <__swhatbuf_r>
 800c4e0:	9900      	ldr	r1, [sp, #0]
 800c4e2:	4605      	mov	r5, r0
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	f7ff faab 	bl	800ba40 <_malloc_r>
 800c4ea:	b948      	cbnz	r0, 800c500 <__smakebuf_r+0x44>
 800c4ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4f0:	059a      	lsls	r2, r3, #22
 800c4f2:	d4ef      	bmi.n	800c4d4 <__smakebuf_r+0x18>
 800c4f4:	f023 0303 	bic.w	r3, r3, #3
 800c4f8:	f043 0302 	orr.w	r3, r3, #2
 800c4fc:	81a3      	strh	r3, [r4, #12]
 800c4fe:	e7e3      	b.n	800c4c8 <__smakebuf_r+0xc>
 800c500:	4b0d      	ldr	r3, [pc, #52]	; (800c538 <__smakebuf_r+0x7c>)
 800c502:	62b3      	str	r3, [r6, #40]	; 0x28
 800c504:	89a3      	ldrh	r3, [r4, #12]
 800c506:	6020      	str	r0, [r4, #0]
 800c508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c50c:	81a3      	strh	r3, [r4, #12]
 800c50e:	9b00      	ldr	r3, [sp, #0]
 800c510:	6163      	str	r3, [r4, #20]
 800c512:	9b01      	ldr	r3, [sp, #4]
 800c514:	6120      	str	r0, [r4, #16]
 800c516:	b15b      	cbz	r3, 800c530 <__smakebuf_r+0x74>
 800c518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c51c:	4630      	mov	r0, r6
 800c51e:	f000 f881 	bl	800c624 <_isatty_r>
 800c522:	b128      	cbz	r0, 800c530 <__smakebuf_r+0x74>
 800c524:	89a3      	ldrh	r3, [r4, #12]
 800c526:	f023 0303 	bic.w	r3, r3, #3
 800c52a:	f043 0301 	orr.w	r3, r3, #1
 800c52e:	81a3      	strh	r3, [r4, #12]
 800c530:	89a3      	ldrh	r3, [r4, #12]
 800c532:	431d      	orrs	r5, r3
 800c534:	81a5      	strh	r5, [r4, #12]
 800c536:	e7cd      	b.n	800c4d4 <__smakebuf_r+0x18>
 800c538:	0800b8f5 	.word	0x0800b8f5

0800c53c <__malloc_lock>:
 800c53c:	4770      	bx	lr

0800c53e <__malloc_unlock>:
 800c53e:	4770      	bx	lr

0800c540 <_free_r>:
 800c540:	b538      	push	{r3, r4, r5, lr}
 800c542:	4605      	mov	r5, r0
 800c544:	2900      	cmp	r1, #0
 800c546:	d045      	beq.n	800c5d4 <_free_r+0x94>
 800c548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c54c:	1f0c      	subs	r4, r1, #4
 800c54e:	2b00      	cmp	r3, #0
 800c550:	bfb8      	it	lt
 800c552:	18e4      	addlt	r4, r4, r3
 800c554:	f7ff fff2 	bl	800c53c <__malloc_lock>
 800c558:	4a1f      	ldr	r2, [pc, #124]	; (800c5d8 <_free_r+0x98>)
 800c55a:	6813      	ldr	r3, [r2, #0]
 800c55c:	4610      	mov	r0, r2
 800c55e:	b933      	cbnz	r3, 800c56e <_free_r+0x2e>
 800c560:	6063      	str	r3, [r4, #4]
 800c562:	6014      	str	r4, [r2, #0]
 800c564:	4628      	mov	r0, r5
 800c566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c56a:	f7ff bfe8 	b.w	800c53e <__malloc_unlock>
 800c56e:	42a3      	cmp	r3, r4
 800c570:	d90c      	bls.n	800c58c <_free_r+0x4c>
 800c572:	6821      	ldr	r1, [r4, #0]
 800c574:	1862      	adds	r2, r4, r1
 800c576:	4293      	cmp	r3, r2
 800c578:	bf04      	itt	eq
 800c57a:	681a      	ldreq	r2, [r3, #0]
 800c57c:	685b      	ldreq	r3, [r3, #4]
 800c57e:	6063      	str	r3, [r4, #4]
 800c580:	bf04      	itt	eq
 800c582:	1852      	addeq	r2, r2, r1
 800c584:	6022      	streq	r2, [r4, #0]
 800c586:	6004      	str	r4, [r0, #0]
 800c588:	e7ec      	b.n	800c564 <_free_r+0x24>
 800c58a:	4613      	mov	r3, r2
 800c58c:	685a      	ldr	r2, [r3, #4]
 800c58e:	b10a      	cbz	r2, 800c594 <_free_r+0x54>
 800c590:	42a2      	cmp	r2, r4
 800c592:	d9fa      	bls.n	800c58a <_free_r+0x4a>
 800c594:	6819      	ldr	r1, [r3, #0]
 800c596:	1858      	adds	r0, r3, r1
 800c598:	42a0      	cmp	r0, r4
 800c59a:	d10b      	bne.n	800c5b4 <_free_r+0x74>
 800c59c:	6820      	ldr	r0, [r4, #0]
 800c59e:	4401      	add	r1, r0
 800c5a0:	1858      	adds	r0, r3, r1
 800c5a2:	4282      	cmp	r2, r0
 800c5a4:	6019      	str	r1, [r3, #0]
 800c5a6:	d1dd      	bne.n	800c564 <_free_r+0x24>
 800c5a8:	6810      	ldr	r0, [r2, #0]
 800c5aa:	6852      	ldr	r2, [r2, #4]
 800c5ac:	605a      	str	r2, [r3, #4]
 800c5ae:	4401      	add	r1, r0
 800c5b0:	6019      	str	r1, [r3, #0]
 800c5b2:	e7d7      	b.n	800c564 <_free_r+0x24>
 800c5b4:	d902      	bls.n	800c5bc <_free_r+0x7c>
 800c5b6:	230c      	movs	r3, #12
 800c5b8:	602b      	str	r3, [r5, #0]
 800c5ba:	e7d3      	b.n	800c564 <_free_r+0x24>
 800c5bc:	6820      	ldr	r0, [r4, #0]
 800c5be:	1821      	adds	r1, r4, r0
 800c5c0:	428a      	cmp	r2, r1
 800c5c2:	bf04      	itt	eq
 800c5c4:	6811      	ldreq	r1, [r2, #0]
 800c5c6:	6852      	ldreq	r2, [r2, #4]
 800c5c8:	6062      	str	r2, [r4, #4]
 800c5ca:	bf04      	itt	eq
 800c5cc:	1809      	addeq	r1, r1, r0
 800c5ce:	6021      	streq	r1, [r4, #0]
 800c5d0:	605c      	str	r4, [r3, #4]
 800c5d2:	e7c7      	b.n	800c564 <_free_r+0x24>
 800c5d4:	bd38      	pop	{r3, r4, r5, pc}
 800c5d6:	bf00      	nop
 800c5d8:	200067a0 	.word	0x200067a0

0800c5dc <_read_r>:
 800c5dc:	b538      	push	{r3, r4, r5, lr}
 800c5de:	4c07      	ldr	r4, [pc, #28]	; (800c5fc <_read_r+0x20>)
 800c5e0:	4605      	mov	r5, r0
 800c5e2:	4608      	mov	r0, r1
 800c5e4:	4611      	mov	r1, r2
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	6022      	str	r2, [r4, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	f7f4 fc78 	bl	8000ee0 <_read>
 800c5f0:	1c43      	adds	r3, r0, #1
 800c5f2:	d102      	bne.n	800c5fa <_read_r+0x1e>
 800c5f4:	6823      	ldr	r3, [r4, #0]
 800c5f6:	b103      	cbz	r3, 800c5fa <_read_r+0x1e>
 800c5f8:	602b      	str	r3, [r5, #0]
 800c5fa:	bd38      	pop	{r3, r4, r5, pc}
 800c5fc:	20009244 	.word	0x20009244

0800c600 <_fstat_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4c07      	ldr	r4, [pc, #28]	; (800c620 <_fstat_r+0x20>)
 800c604:	2300      	movs	r3, #0
 800c606:	4605      	mov	r5, r0
 800c608:	4608      	mov	r0, r1
 800c60a:	4611      	mov	r1, r2
 800c60c:	6023      	str	r3, [r4, #0]
 800c60e:	f7f4 fcac 	bl	8000f6a <_fstat>
 800c612:	1c43      	adds	r3, r0, #1
 800c614:	d102      	bne.n	800c61c <_fstat_r+0x1c>
 800c616:	6823      	ldr	r3, [r4, #0]
 800c618:	b103      	cbz	r3, 800c61c <_fstat_r+0x1c>
 800c61a:	602b      	str	r3, [r5, #0]
 800c61c:	bd38      	pop	{r3, r4, r5, pc}
 800c61e:	bf00      	nop
 800c620:	20009244 	.word	0x20009244

0800c624 <_isatty_r>:
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	4c06      	ldr	r4, [pc, #24]	; (800c640 <_isatty_r+0x1c>)
 800c628:	2300      	movs	r3, #0
 800c62a:	4605      	mov	r5, r0
 800c62c:	4608      	mov	r0, r1
 800c62e:	6023      	str	r3, [r4, #0]
 800c630:	f7f4 fcab 	bl	8000f8a <_isatty>
 800c634:	1c43      	adds	r3, r0, #1
 800c636:	d102      	bne.n	800c63e <_isatty_r+0x1a>
 800c638:	6823      	ldr	r3, [r4, #0]
 800c63a:	b103      	cbz	r3, 800c63e <_isatty_r+0x1a>
 800c63c:	602b      	str	r3, [r5, #0]
 800c63e:	bd38      	pop	{r3, r4, r5, pc}
 800c640:	20009244 	.word	0x20009244

0800c644 <_init>:
 800c644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c646:	bf00      	nop
 800c648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c64a:	bc08      	pop	{r3}
 800c64c:	469e      	mov	lr, r3
 800c64e:	4770      	bx	lr

0800c650 <_fini>:
 800c650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c652:	bf00      	nop
 800c654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c656:	bc08      	pop	{r3}
 800c658:	469e      	mov	lr, r3
 800c65a:	4770      	bx	lr
