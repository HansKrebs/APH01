
APH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  08011340  08011340  00021340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a60  08011a60  000314d4  2**0
                  CONTENTS
  4 .ARM          00000008  08011a60  08011a60  00021a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a68  08011a68  000314d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a68  08011a68  00021a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a6c  08011a6c  00021a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000014d4  20000000  08011a70  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aed4  200014d8  08012f44  000314d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000c3ac  08012f44  0003c3ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000314d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042dc3  00000000  00000000  00031504  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005a65  00000000  00000000  000742c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002f00  00000000  00000000  00079d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002cc8  00000000  00000000  0007cc30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ce76  00000000  00000000  0007f8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e3d1  00000000  00000000  0009c76e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a868e  00000000  00000000  000bab3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001631cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d8b4  00000000  00000000  00163248  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200014d8 	.word	0x200014d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011328 	.word	0x08011328

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200014dc 	.word	0x200014dc
 80001dc:	08011328 	.word	0x08011328

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <Set_Output>:




void Set_Output(GPIO_DebugPins dp, GPIO_PinState st)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	460a      	mov	r2, r1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(dpArray[dp].PORT, dpArray[dp].PIN, st);
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <Set_Output+0x34>)
 8000f6c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <Set_Output+0x34>)
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	4413      	add	r3, r2
 8000f78:	889b      	ldrh	r3, [r3, #4]
 8000f7a:	79ba      	ldrb	r2, [r7, #6]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f005 f933 	bl	80061e8 <HAL_GPIO_WritePin>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20001208 	.word	0x20001208

08000f90 <initFastTask>:
/* Private variables ---------------------------------------------------------*/

static osEventFlagsId_t ntFlag = NULL;

void initFastTask(osEventFlagsId_t normTaskEventHandle)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	ntFlag = normTaskEventHandle;
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <initFastTask+0x1c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	200029ac 	.word	0x200029ac

08000fb0 <StartFastTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFastTask */
void StartFastTask(void *argument)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFastTask */
  uint32_t cnt = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  uint32_t loop = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
  uint32_t test = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]

  while (ntFlag == NULL)
 8000fc4:	e002      	b.n	8000fcc <StartFastTask+0x1c>
  {
	  osDelay(1);
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f007 fdba 	bl	8008b40 <osDelay>
  while (ntFlag == NULL)
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <StartFastTask+0x98>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f8      	beq.n	8000fc6 <StartFastTask+0x16>
  }
 /* Infinite loop */

  for(;;)
  {
  	Set_Output(OUT_TEST_1, 1);
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff ffbe 	bl	8000f58 <Set_Output>
  	for(loop = 0; loop < 2000; loop++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	e005      	b.n	8000fee <StartFastTask+0x3e>
  	{
  		test = test + 3;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3303      	adds	r3, #3
 8000fe6:	60fb      	str	r3, [r7, #12]
  	for(loop = 0; loop < 2000; loop++)
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	3301      	adds	r3, #1
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ff4:	d3f5      	bcc.n	8000fe2 <StartFastTask+0x32>
  	}
  	if(test > 3000)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d902      	bls.n	8001006 <StartFastTask+0x56>
  		test = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	e001      	b.n	800100a <StartFastTask+0x5a>
  	else
  		test = 7;
 8001006:	2307      	movs	r3, #7
 8001008:	60fb      	str	r3, [r7, #12]
  	Set_Output(OUT_TEST_1, 0);
 800100a:	2100      	movs	r1, #0
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff ffa3 	bl	8000f58 <Set_Output>

  	Set_Output(OUT_TEST_2, 1);
 8001012:	2101      	movs	r1, #1
 8001014:	2001      	movs	r0, #1
 8001016:	f7ff ff9f 	bl	8000f58 <Set_Output>
    osDelay(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f007 fd90 	bl	8008b40 <osDelay>
  	Set_Output(OUT_TEST_2, 0);
 8001020:	2100      	movs	r1, #0
 8001022:	2001      	movs	r0, #1
 8001024:	f7ff ff98 	bl	8000f58 <Set_Output>
    cnt++;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3301      	adds	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
    if (cnt >= 10)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	2b09      	cmp	r3, #9
 8001032:	d9cf      	bls.n	8000fd4 <StartFastTask+0x24>
    {
    	cnt = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
    	osEventFlagsSet(ntFlag,1);
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <StartFastTask+0x98>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2101      	movs	r1, #1
 800103e:	4618      	mov	r0, r3
 8001040:	f007 fdfe 	bl	8008c40 <osEventFlagsSet>
  	Set_Output(OUT_TEST_1, 1);
 8001044:	e7c6      	b.n	8000fd4 <StartFastTask+0x24>
 8001046:	bf00      	nop
 8001048:	200029ac 	.word	0x200029ac

0800104c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001050:	f004 fd26 	bl	8005aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001054:	f000 f86a 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001058:	f000 f8e8 	bl	800122c <MX_GPIO_Init>
  MX_CRC_Init();
 800105c:	f000 f8d2 	bl	8001204 <MX_CRC_Init>
 // MX_MEMS_Init();
  /* USER CODE BEGIN 2 */
  position_Init();
 8001060:	f00a ff98 	bl	800bf94 <position_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001064:	f007 fc5c 	bl	8008920 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001068:	4a20      	ldr	r2, [pc, #128]	; (80010ec <main+0xa0>)
 800106a:	2100      	movs	r1, #0
 800106c:	4820      	ldr	r0, [pc, #128]	; (80010f0 <main+0xa4>)
 800106e:	f007 fcc1 	bl	80089f4 <osThreadNew>
 8001072:	4602      	mov	r2, r0
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <main+0xa8>)
 8001076:	601a      	str	r2, [r3, #0]

  /* creation of fastTask */
  fastTaskHandle = osThreadNew(StartFastTask, NULL, &fastTask_attributes);
 8001078:	4a1f      	ldr	r2, [pc, #124]	; (80010f8 <main+0xac>)
 800107a:	2100      	movs	r1, #0
 800107c:	481f      	ldr	r0, [pc, #124]	; (80010fc <main+0xb0>)
 800107e:	f007 fcb9 	bl	80089f4 <osThreadNew>
 8001082:	4602      	mov	r2, r0
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <main+0xb4>)
 8001086:	601a      	str	r2, [r3, #0]

  /* creation of normalTask */
  normalTaskHandle = osThreadNew(StartNormalTask, NULL, &normalTask_attributes);
 8001088:	4a1e      	ldr	r2, [pc, #120]	; (8001104 <main+0xb8>)
 800108a:	2100      	movs	r1, #0
 800108c:	481e      	ldr	r0, [pc, #120]	; (8001108 <main+0xbc>)
 800108e:	f007 fcb1 	bl	80089f4 <osThreadNew>
 8001092:	4602      	mov	r2, r0
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <main+0xc0>)
 8001096:	601a      	str	r2, [r3, #0]

  /* creation of slowTask */
  slowTaskHandle = osThreadNew(StartSlowTask, NULL, &slowTask_attributes);
 8001098:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <main+0xc4>)
 800109a:	2100      	movs	r1, #0
 800109c:	481d      	ldr	r0, [pc, #116]	; (8001114 <main+0xc8>)
 800109e:	f007 fca9 	bl	80089f4 <osThreadNew>
 80010a2:	4602      	mov	r2, r0
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <main+0xcc>)
 80010a6:	601a      	str	r2, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of normTaskEvent */
  normTaskEventHandle = osEventFlagsNew(&normTaskEvent_attributes);
 80010a8:	481c      	ldr	r0, [pc, #112]	; (800111c <main+0xd0>)
 80010aa:	f007 fd77 	bl	8008b9c <osEventFlagsNew>
 80010ae:	4602      	mov	r2, r0
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <main+0xd4>)
 80010b2:	601a      	str	r2, [r3, #0]

  /* creation of slowTaskEvent */
  slowTaskEventHandle = osEventFlagsNew(&slowTaskEvent_attributes);
 80010b4:	481b      	ldr	r0, [pc, #108]	; (8001124 <main+0xd8>)
 80010b6:	f007 fd71 	bl	8008b9c <osEventFlagsNew>
 80010ba:	4602      	mov	r2, r0
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <main+0xdc>)
 80010be:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  initFastTask(normTaskEventHandle);
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <main+0xd4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff63 	bl	8000f90 <initFastTask>
  initSlowTask(slowTaskEventHandle);
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <main+0xdc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f97c 	bl	80013cc <initSlowTask>
  initNormalTask(normTaskEventHandle ,slowTaskEventHandle);
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <main+0xd4>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <main+0xdc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	4610      	mov	r0, r2
 80010e0:	f000 f922 	bl	8001328 <initNormalTask>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010e4:	f007 fc50 	bl	8008988 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <main+0x9c>
 80010ea:	bf00      	nop
 80010ec:	08011684 	.word	0x08011684
 80010f0:	080012ed 	.word	0x080012ed
 80010f4:	2000908c 	.word	0x2000908c
 80010f8:	080116a8 	.word	0x080116a8
 80010fc:	08000fb1 	.word	0x08000fb1
 8001100:	2000a9d8 	.word	0x2000a9d8
 8001104:	080116cc 	.word	0x080116cc
 8001108:	08001355 	.word	0x08001355
 800110c:	2000a914 	.word	0x2000a914
 8001110:	080116f0 	.word	0x080116f0
 8001114:	080013ed 	.word	0x080013ed
 8001118:	2000a91c 	.word	0x2000a91c
 800111c:	08011714 	.word	0x08011714
 8001120:	2000a918 	.word	0x2000a918
 8001124:	08011724 	.word	0x08011724
 8001128:	2000a9dc 	.word	0x2000a9dc

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	; 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2230      	movs	r2, #48	; 0x30
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f00c ffc5 	bl	800e0ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b29      	ldr	r3, [pc, #164]	; (80011fc <SystemClock_Config+0xd0>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a28      	ldr	r2, [pc, #160]	; (80011fc <SystemClock_Config+0xd0>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b26      	ldr	r3, [pc, #152]	; (80011fc <SystemClock_Config+0xd0>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <SystemClock_Config+0xd4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001178:	4a21      	ldr	r2, [pc, #132]	; (8001200 <SystemClock_Config+0xd4>)
 800117a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <SystemClock_Config+0xd4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800118c:	2302      	movs	r3, #2
 800118e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001190:	2301      	movs	r3, #1
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001194:	2310      	movs	r3, #16
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001198:	2302      	movs	r3, #2
 800119a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800119c:	2300      	movs	r3, #0
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011a0:	2310      	movs	r3, #16
 80011a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011aa:	2304      	movs	r3, #4
 80011ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011ae:	2307      	movs	r3, #7
 80011b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	4618      	mov	r0, r3
 80011b8:	f006 f842 	bl	8007240 <HAL_RCC_OscConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011c2:	f000 f8ad 	bl	8001320 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c6:	230f      	movs	r3, #15
 80011c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ca:	2302      	movs	r3, #2
 80011cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2102      	movs	r1, #2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f006 fa9c 	bl	8007720 <HAL_RCC_ClockConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011ee:	f000 f897 	bl	8001320 <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	3750      	adds	r7, #80	; 0x50
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800
 8001200:	40007000 	.word	0x40007000

08001204 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_CRC_Init+0x20>)
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <MX_CRC_Init+0x24>)
 800120c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_CRC_Init+0x20>)
 8001210:	f004 fd6a 	bl	8005ce8 <HAL_CRC_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800121a:	f000 f881 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200098b0 	.word	0x200098b0
 8001228:	40023000 	.word	0x40023000

0800122c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a26      	ldr	r2, [pc, #152]	; (80012e4 <MX_GPIO_Init+0xb8>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a1f      	ldr	r2, [pc, #124]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <MX_GPIO_Init+0xb8>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MX_GPIO_Init+0xb8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_GPIO_Init+0xb8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <MX_GPIO_Init+0xb8>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_GPIO_Init+0xb8>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_TEST_1_Pin|OUT_TEST_2_Pin|OUT_TEST_3_Pin|OUT_TEST_4_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 7158 	mov.w	r1, #864	; 0x360
 80012b8:	480b      	ldr	r0, [pc, #44]	; (80012e8 <MX_GPIO_Init+0xbc>)
 80012ba:	f004 ff95 	bl	80061e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT_TEST_1_Pin OUT_TEST_2_Pin OUT_TEST_3_Pin OUT_TEST_4_Pin */
  GPIO_InitStruct.Pin = OUT_TEST_1_Pin|OUT_TEST_2_Pin|OUT_TEST_3_Pin|OUT_TEST_4_Pin;
 80012be:	f44f 7358 	mov.w	r3, #864	; 0x360
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	4804      	ldr	r0, [pc, #16]	; (80012e8 <MX_GPIO_Init+0xbc>)
 80012d8:	f004 fd22 	bl	8005d20 <HAL_GPIO_Init>

}
 80012dc:	bf00      	nop
 80012de:	3728      	adds	r7, #40	; 0x28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020800 	.word	0x40020800

080012ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f007 fc23 	bl	8008b40 <osDelay>
 80012fa:	e7fb      	b.n	80012f4 <StartDefaultTask+0x8>

080012fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800130e:	f004 fbe9 	bl	8005ae4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40014400 	.word	0x40014400

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001326:	e7fe      	b.n	8001326 <Error_Handler+0x6>

08001328 <initNormalTask>:
static osEventFlagsId_t ntFlag = NULL;
static osEventFlagsId_t stFlag = NULL;


void initNormalTask(osEventFlagsId_t normTaskEventHandle, osEventFlagsId_t slowTaskEventHandle)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
	ntFlag = normTaskEventHandle;
 8001332:	4a06      	ldr	r2, [pc, #24]	; (800134c <initNormalTask+0x24>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6013      	str	r3, [r2, #0]
	stFlag = slowTaskEventHandle;
 8001338:	4a05      	ldr	r2, [pc, #20]	; (8001350 <initNormalTask+0x28>)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	6013      	str	r3, [r2, #0]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	200029b0 	.word	0x200029b0
 8001350:	200029b4 	.word	0x200029b4

08001354 <StartNormalTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartNormalTask */
void StartNormalTask(void *argument)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	uint32_t cnt;
	uint32_t blink;



    while ((ntFlag == NULL) || (stFlag == NULL))
 800135c:	e002      	b.n	8001364 <StartNormalTask+0x10>
	{
    	osDelay(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f007 fbee 	bl	8008b40 <osDelay>
    while ((ntFlag == NULL) || (stFlag == NULL))
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <StartNormalTask+0x70>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f8      	beq.n	800135e <StartNormalTask+0xa>
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <StartNormalTask+0x74>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f4      	beq.n	800135e <StartNormalTask+0xa>


  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait (ntFlag,1, 0, 15);
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <StartNormalTask+0x70>)
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	230f      	movs	r3, #15
 800137a:	2200      	movs	r2, #0
 800137c:	2101      	movs	r1, #1
 800137e:	f007 fcfb 	bl	8008d78 <osEventFlagsWait>
	  osEventFlagsClear(ntFlag,1);
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <StartNormalTask+0x70>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2101      	movs	r1, #1
 8001388:	4618      	mov	r0, r3
 800138a:	f007 fcb1 	bl	8008cf0 <osEventFlagsClear>
	  cnt++;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	3301      	adds	r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
	  blink++;
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	3301      	adds	r3, #1
 8001398:	60bb      	str	r3, [r7, #8]
	  Set_Output(OUT_TEST_3,blink & 1);
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fdd6 	bl	8000f58 <Set_Output>
	  if(cnt >= 10)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b09      	cmp	r3, #9
 80013b0:	d9e0      	bls.n	8001374 <StartNormalTask+0x20>
	  {
		  cnt = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
		  osEventFlagsSet(stFlag,1);
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <StartNormalTask+0x74>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2101      	movs	r1, #1
 80013bc:	4618      	mov	r0, r3
 80013be:	f007 fc3f 	bl	8008c40 <osEventFlagsSet>
	  osEventFlagsWait (ntFlag,1, 0, 15);
 80013c2:	e7d7      	b.n	8001374 <StartNormalTask+0x20>
 80013c4:	200029b0 	.word	0x200029b0
 80013c8:	200029b4 	.word	0x200029b4

080013cc <initSlowTask>:
/* Private variables ---------------------------------------------------------*/
static osEventFlagsId_t stFlag = NULL;


void initSlowTask(osEventFlagsId_t slowTaskEventHandle)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	stFlag = slowTaskEventHandle;
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <initSlowTask+0x1c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	200029b8 	.word	0x200029b8

080013ec <StartSlowTask>:

void StartSlowTask(void *argument)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

	uint32_t cnt;
	uint32_t blink;
	//TaskHandle_t stHandle = xTaskGetHandle( "slowTask" );

	while (stFlag == NULL)
 80013f4:	e002      	b.n	80013fc <StartSlowTask+0x10>
    {
	  osDelay(1);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f007 fba2 	bl	8008b40 <osDelay>
	while (stFlag == NULL)
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <StartSlowTask+0x78>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f8      	beq.n	80013f6 <StartSlowTask+0xa>


  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait (stFlag,1, 0, 150);
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <StartSlowTask+0x78>)
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	2396      	movs	r3, #150	; 0x96
 800140a:	2200      	movs	r2, #0
 800140c:	2101      	movs	r1, #1
 800140e:	f007 fcb3 	bl	8008d78 <osEventFlagsWait>
	  osEventFlagsClear(stFlag,1);
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <StartSlowTask+0x78>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2101      	movs	r1, #1
 8001418:	4618      	mov	r0, r3
 800141a:	f007 fc69 	bl	8008cf0 <osEventFlagsClear>
	  if(blink & 8)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <StartSlowTask+0x44>
	  {
		  BSP_LED_On(LED_GREEN);
 8001428:	2000      	movs	r0, #0
 800142a:	f004 fa4b 	bl	80058c4 <BSP_LED_On>
 800142e:	e002      	b.n	8001436 <StartSlowTask+0x4a>
	  }
	  else
	  {
		  BSP_LED_Off(LED_GREEN);
 8001430:	2000      	movs	r0, #0
 8001432:	f004 fa5d 	bl	80058f0 <BSP_LED_Off>
	  }
	  //Set_Output(OUT_TEST_4,blink & 1);
	  cnt++;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3301      	adds	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
	  blink++;
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	3301      	adds	r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
	  Set_Output(OUT_TEST_4, 1);
 8001442:	2101      	movs	r1, #1
 8001444:	2003      	movs	r0, #3
 8001446:	f7ff fd87 	bl	8000f58 <Set_Output>
	  PositionProcess();
 800144a:	f00a fdab 	bl	800bfa4 <PositionProcess>
	  Set_Output(OUT_TEST_4, 0);
 800144e:	2100      	movs	r1, #0
 8001450:	2003      	movs	r0, #3
 8001452:	f7ff fd81 	bl	8000f58 <Set_Output>
	  if(cnt >= 10)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2b09      	cmp	r3, #9
 800145a:	d9d3      	bls.n	8001404 <StartSlowTask+0x18>
	  {
//		  Set_Output(OUT_TEST_4, 1);
////		  printf("\n\n\n\rHallo\n\n\r");
		  cnt= 0;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
	  osEventFlagsWait (stFlag,1, 0, 150);
 8001460:	e7d0      	b.n	8001404 <StartSlowTask+0x18>
 8001462:	bf00      	nop
 8001464:	200029b8 	.word	0x200029b8

08001468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_MspInit+0x54>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_MspInit+0x54>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_MspInit+0x54>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_MspInit+0x54>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <HAL_MspInit+0x54>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_MspInit+0x54>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	210f      	movs	r1, #15
 80014aa:	f06f 0001 	mvn.w	r0, #1
 80014ae:	f004 fbf1 	bl	8005c94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800

080014c0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <HAL_CRC_MspInit+0x3c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d10d      	bne.n	80014ee <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_CRC_MspInit+0x40>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a09      	ldr	r2, [pc, #36]	; (8001500 <HAL_CRC_MspInit+0x40>)
 80014dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_CRC_MspInit+0x40>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023000 	.word	0x40023000
 8001500:	40023800 	.word	0x40023800

08001504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	; 0x30
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001514:	2200      	movs	r2, #0
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	2019      	movs	r0, #25
 800151a:	f004 fbbb 	bl	8005c94 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800151e:	2019      	movs	r0, #25
 8001520:	f004 fbd4 	bl	8005ccc <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <HAL_InitTick+0xa0>)
 800152a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152c:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <HAL_InitTick+0xa0>)
 800152e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001532:	6453      	str	r3, [r2, #68]	; 0x44
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_InitTick+0xa0>)
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001540:	f107 0210 	add.w	r2, r7, #16
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f006 fada 	bl	8007b04 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001550:	f006 fac4 	bl	8007adc <HAL_RCC_GetPCLK2Freq>
 8001554:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001558:	4a13      	ldr	r2, [pc, #76]	; (80015a8 <HAL_InitTick+0xa4>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	0c9b      	lsrs	r3, r3, #18
 8001560:	3b01      	subs	r3, #1
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_InitTick+0xa8>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <HAL_InitTick+0xac>)
 8001568:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_InitTick+0xa8>)
 800156c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001570:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_InitTick+0xa8>)
 8001574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001576:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_InitTick+0xa8>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_InitTick+0xa8>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001584:	4809      	ldr	r0, [pc, #36]	; (80015ac <HAL_InitTick+0xa8>)
 8001586:	f006 faef 	bl	8007b68 <HAL_TIM_Base_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d104      	bne.n	800159a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <HAL_InitTick+0xa8>)
 8001592:	f006 fb1e 	bl	8007bd2 <HAL_TIM_Base_Start_IT>
 8001596:	4603      	mov	r3, r0
 8001598:	e000      	b.n	800159c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3730      	adds	r7, #48	; 0x30
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	431bde83 	.word	0x431bde83
 80015ac:	2000ba00 	.word	0x2000ba00
 80015b0:	40014400 	.word	0x40014400

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <NMI_Handler+0x4>

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80015e6:	f006 fb18 	bl	8007c1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000ba00 	.word	0x2000ba00

080015f4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <BSP_I2C1_Init+0x58>)
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <BSP_I2C1_Init+0x5c>)
 8001602:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <BSP_I2C1_Init+0x60>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	4912      	ldr	r1, [pc, #72]	; (8001654 <BSP_I2C1_Init+0x60>)
 800160c:	600a      	str	r2, [r1, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d117      	bne.n	8001642 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001612:	480e      	ldr	r0, [pc, #56]	; (800164c <BSP_I2C1_Init+0x58>)
 8001614:	f005 fa9e 	bl	8006b54 <HAL_I2C_GetState>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d111      	bne.n	8001642 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800161e:	480b      	ldr	r0, [pc, #44]	; (800164c <BSP_I2C1_Init+0x58>)
 8001620:	f000 f8e2 	bl	80017e8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10b      	bne.n	8001642 <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800162a:	4808      	ldr	r0, [pc, #32]	; (800164c <BSP_I2C1_Init+0x58>)
 800162c:	f000 f8a8 	bl	8001780 <MX_I2C1_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8001636:	f06f 0307 	mvn.w	r3, #7
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	e001      	b.n	8001642 <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001642:	687b      	ldr	r3, [r7, #4]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2000ba40 	.word	0x2000ba40
 8001650:	40005400 	.word	0x40005400
 8001654:	200029bc 	.word	0x200029bc

08001658 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <BSP_I2C1_DeInit+0x48>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d014      	beq.n	8001694 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <BSP_I2C1_DeInit+0x48>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3b01      	subs	r3, #1
 8001670:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <BSP_I2C1_DeInit+0x48>)
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <BSP_I2C1_DeInit+0x48>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10b      	bne.n	8001694 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800167c:	4809      	ldr	r0, [pc, #36]	; (80016a4 <BSP_I2C1_DeInit+0x4c>)
 800167e:	f000 f8fd 	bl	800187c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001682:	4808      	ldr	r0, [pc, #32]	; (80016a4 <BSP_I2C1_DeInit+0x4c>)
 8001684:	f004 ff02 	bl	800648c <HAL_I2C_DeInit>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800168e:	f06f 0307 	mvn.w	r3, #7
 8001692:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001694:	687b      	ldr	r3, [r7, #4]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200029bc 	.word	0x200029bc
 80016a4:	2000ba40 	.word	0x2000ba40

080016a8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af04      	add	r7, sp, #16
 80016ae:	60ba      	str	r2, [r7, #8]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4603      	mov	r3, r0
 80016b4:	81fb      	strh	r3, [r7, #14]
 80016b6:	460b      	mov	r3, r1
 80016b8:	81bb      	strh	r3, [r7, #12]
 80016ba:	4613      	mov	r3, r2
 80016bc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80016c2:	89ba      	ldrh	r2, [r7, #12]
 80016c4:	89f9      	ldrh	r1, [r7, #14]
 80016c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ca:	9302      	str	r3, [sp, #8]
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2301      	movs	r3, #1
 80016d6:	480c      	ldr	r0, [pc, #48]	; (8001708 <BSP_I2C1_WriteReg+0x60>)
 80016d8:	f004 ff1c 	bl	8006514 <HAL_I2C_Mem_Write>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00c      	beq.n	80016fc <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80016e2:	4809      	ldr	r0, [pc, #36]	; (8001708 <BSP_I2C1_WriteReg+0x60>)
 80016e4:	f005 fa44 	bl	8006b70 <HAL_I2C_GetError>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d103      	bne.n	80016f6 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80016ee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e002      	b.n	80016fc <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80016f6:	f06f 0303 	mvn.w	r3, #3
 80016fa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80016fc:	697b      	ldr	r3, [r7, #20]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000ba40 	.word	0x2000ba40

0800170c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af04      	add	r7, sp, #16
 8001712:	60ba      	str	r2, [r7, #8]
 8001714:	461a      	mov	r2, r3
 8001716:	4603      	mov	r3, r0
 8001718:	81fb      	strh	r3, [r7, #14]
 800171a:	460b      	mov	r3, r1
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	4613      	mov	r3, r2
 8001720:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001726:	89ba      	ldrh	r2, [r7, #12]
 8001728:	89f9      	ldrh	r1, [r7, #14]
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2301      	movs	r3, #1
 800173a:	480c      	ldr	r0, [pc, #48]	; (800176c <BSP_I2C1_ReadReg+0x60>)
 800173c:	f004 ffe4 	bl	8006708 <HAL_I2C_Mem_Read>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001746:	4809      	ldr	r0, [pc, #36]	; (800176c <BSP_I2C1_ReadReg+0x60>)
 8001748:	f005 fa12 	bl	8006b70 <HAL_I2C_GetError>
 800174c:	4603      	mov	r3, r0
 800174e:	2b04      	cmp	r3, #4
 8001750:	d103      	bne.n	800175a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001752:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e002      	b.n	8001760 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800175a:	f06f 0303 	mvn.w	r3, #3
 800175e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001760:	697b      	ldr	r3, [r7, #20]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000ba40 	.word	0x2000ba40

08001770 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001774:	f004 f9ca 	bl	8005b0c <HAL_GetTick>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <MX_I2C1_Init+0x60>)
 8001790:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <MX_I2C1_Init+0x64>)
 8001796:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017aa:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f004 fd29 	bl	800621c <HAL_I2C_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40005400 	.word	0x40005400
 80017e4:	000186a0 	.word	0x000186a0

080017e8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <I2C1_MspInit+0x8c>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	4a1e      	ldr	r2, [pc, #120]	; (8001874 <I2C1_MspInit+0x8c>)
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <I2C1_MspInit+0x8c>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800180c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001812:	2312      	movs	r3, #18
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001816:	2301      	movs	r3, #1
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800181e:	2304      	movs	r3, #4
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4813      	ldr	r0, [pc, #76]	; (8001878 <I2C1_MspInit+0x90>)
 800182a:	f004 fa79 	bl	8005d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800182e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001834:	2312      	movs	r3, #18
 8001836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001838:	2301      	movs	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001840:	2304      	movs	r3, #4
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	480b      	ldr	r0, [pc, #44]	; (8001878 <I2C1_MspInit+0x90>)
 800184c:	f004 fa68 	bl	8005d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <I2C1_MspInit+0x8c>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <I2C1_MspInit+0x8c>)
 800185a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800185e:	6413      	str	r3, [r2, #64]	; 0x40
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <I2C1_MspInit+0x8c>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800186c:	bf00      	nop
 800186e:	3728      	adds	r7, #40	; 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	40020400 	.word	0x40020400

0800187c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <I2C1_MspDeInit+0x30>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	4a08      	ldr	r2, [pc, #32]	; (80018ac <I2C1_MspDeInit+0x30>)
 800188a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800188e:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001894:	4806      	ldr	r0, [pc, #24]	; (80018b0 <I2C1_MspDeInit+0x34>)
 8001896:	f004 fbc5 	bl	8006024 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800189a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800189e:	4804      	ldr	r0, [pc, #16]	; (80018b0 <I2C1_MspDeInit+0x34>)
 80018a0:	f004 fbc0 	bl	8006024 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020400 	.word	0x40020400

080018b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	e00a      	b.n	80018dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018c6:	f3af 8000 	nop.w
 80018ca:	4601      	mov	r1, r0
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	60ba      	str	r2, [r7, #8]
 80018d2:	b2ca      	uxtb	r2, r1
 80018d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3301      	adds	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	dbf0      	blt.n	80018c6 <_read+0x12>
	}

return len;
 80018e4:	687b      	ldr	r3, [r7, #4]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e009      	b.n	8001914 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	60ba      	str	r2, [r7, #8]
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f004 f869 	bl	80059e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	429a      	cmp	r2, r3
 800191a:	dbf1      	blt.n	8001900 <_write+0x12>
	}
	return len;
 800191c:	687b      	ldr	r3, [r7, #4]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <_close>:

int _close(int file)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
	return -1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194e:	605a      	str	r2, [r3, #4]
	return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_isatty>:

int _isatty(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	return 1;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
	return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001998:	4a14      	ldr	r2, [pc, #80]	; (80019ec <_sbrk+0x5c>)
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <_sbrk+0x60>)
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <_sbrk+0x64>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <_sbrk+0x68>)
 80019b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d207      	bcs.n	80019d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c0:	f00c fb4e 	bl	800e060 <__errno>
 80019c4:	4602      	mov	r2, r0
 80019c6:	230c      	movs	r3, #12
 80019c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	e009      	b.n	80019e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <_sbrk+0x64>)
 80019e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e2:	68fb      	ldr	r3, [r7, #12]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20018000 	.word	0x20018000
 80019f0:	00000400 	.word	0x00000400
 80019f4:	200029c0 	.word	0x200029c0
 80019f8:	2000c3b0 	.word	0x2000c3b0

080019fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <SystemInit+0x28>)
 8001a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a06:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <SystemInit+0x28>)
 8001a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <SystemInit+0x28>)
 8001a12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a16:	609a      	str	r2, [r3, #8]
#endif
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a2e:	e003      	b.n	8001a38 <LoopCopyDataInit>

08001a30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a36:	3104      	adds	r1, #4

08001a38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a38:	480b      	ldr	r0, [pc, #44]	; (8001a68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a40:	d3f6      	bcc.n	8001a30 <CopyDataInit>
  ldr  r2, =_sbss
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a44:	e002      	b.n	8001a4c <LoopFillZerobss>

08001a46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a48:	f842 3b04 	str.w	r3, [r2], #4

08001a4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a50:	d3f9      	bcc.n	8001a46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a52:	f7ff ffd3 	bl	80019fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a56:	f00c fb09 	bl	800e06c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a5a:	f7ff faf7 	bl	800104c <main>
  bx  lr    
 8001a5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a60:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001a64:	08011a70 	.word	0x08011a70
  ldr  r0, =_sdata
 8001a68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a6c:	200014d4 	.word	0x200014d4
  ldr  r2, =_sbss
 8001a70:	200014d8 	.word	0x200014d8
  ldr  r3, = _ebss
 8001a74:	2000c3ac 	.word	0x2000c3ac

08001a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC_IRQHandler>
	...

08001a7c <LIS2DW12_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d103      	bne.n	8001a98 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	e04d      	b.n	8001b34 <LIS2DW12_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	7b1a      	ldrb	r2, [r3, #12]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	699a      	ldr	r2, [r3, #24]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <LIS2DW12_RegisterBusIO+0xc4>)
 8001ad4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a1a      	ldr	r2, [pc, #104]	; (8001b44 <LIS2DW12_RegisterBusIO+0xc8>)
 8001ada:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d103      	bne.n	8001af2 <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	e020      	b.n	8001b34 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4798      	blx	r3
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <LIS2DW12_RegisterBusIO+0x8a>
    {
      ret = LIS2DW12_ERROR;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e016      	b.n	8001b34 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d112      	bne.n	8001b34 <LIS2DW12_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10d      	bne.n	8001b34 <LIS2DW12_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001b18:	2305      	movs	r3, #5
 8001b1a:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001b1c:	7afb      	ldrb	r3, [r7, #11]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	2121      	movs	r1, #33	; 0x21
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fd87 	bl	8002636 <LIS2DW12_Write_Reg>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <LIS2DW12_RegisterBusIO+0xb8>
          {
            ret = LIS2DW12_ERROR;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001b34:	68fb      	ldr	r3, [r7, #12]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	080029c9 	.word	0x080029c9
 8001b44:	080029ff 	.word	0x080029ff

08001b48 <LIS2DW12_Init>:
 * @brief  Initialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	331c      	adds	r3, #28
 8001b54:	2101      	movs	r1, #1
 8001b56:	4618      	mov	r0, r3
 8001b58:	f001 fa94 	bl	8003084 <lis2dw12_auto_increment_set>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	e04b      	b.n	8001c00 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	331c      	adds	r3, #28
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f001 f9a8 	bl	8002ec4 <lis2dw12_block_data_update_set>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	e03f      	b.n	8001c00 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	331c      	adds	r3, #28
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 faa2 	bl	80030d0 <lis2dw12_fifo_mode_set>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e033      	b.n	8001c00 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	331c      	adds	r3, #28
 8001b9c:	2104      	movs	r1, #4
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 ff78 	bl	8002a94 <lis2dw12_power_mode_set>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d002      	beq.n	8001bb0 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	e027      	b.n	8001c00 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <LIS2DW12_Init+0xc0>)
 8001bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	331c      	adds	r3, #28
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f001 f869 	bl	8002ca4 <lis2dw12_data_rate_set>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bdc:	e010      	b.n	8001c00 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	331c      	adds	r3, #28
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f001 f993 	bl	8002f10 <lis2dw12_full_scale_set>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf4:	e004      	b.n	8001c00 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	42c80000 	.word	0x42c80000

08001c0c <LIS2DW12_DeInit>:
 * @brief  Deinitialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f888 	bl	8001d2a <LIS2DW12_ACC_Disable>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
 8001c24:	e010      	b.n	8001c48 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <LIS2DW12_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	331c      	adds	r3, #28
 8001c5e:	6839      	ldr	r1, [r7, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f001 f9fe 	bl	8003062 <lis2dw12_device_id_get>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c70:	e000      	b.n	8001c74 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <LIS2DW12_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2DW12 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2200      	movs	r2, #0
 8001c96:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2210      	movs	r2, #16
 8001ca8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <LIS2DW12_GetCapabilities+0x58>)
 8001cbc:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	44c80000 	.word	0x44c80000

08001cd8 <LIS2DW12_ACC_Enable>:
 * @brief  Enable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e019      	b.n	8001d22 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode, pObj->acc_low_noise) != LIS2DW12_OK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001d00:	461a      	mov	r2, r3
 8001d02:	eeb0 0a67 	vmov.f32	s0, s15
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fcb0 	bl	800266c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <LIS2DW12_ACC_Enable+0x40>
  {
    return LIS2DW12_ERROR;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	e004      	b.n	8001d22 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <LIS2DW12_ACC_Disable>:
 * @brief  Disable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e010      	b.n	8001d62 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	331c      	adds	r3, #28
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 ffac 	bl	8002ca4 <lis2dw12_data_rate_set>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	e004      	b.n	8001d62 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <LIS2DW12_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	331c      	adds	r3, #28
 8001d7e:	f107 020b 	add.w	r2, r7, #11
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f001 f8e9 	bl	8002f5c <lis2dw12_full_scale_get>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295
 8001d94:	e0a0      	b.n	8001ed8 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	331c      	adds	r3, #28
 8001d9a:	f107 020a 	add.w	r2, r7, #10
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fec5 	bl	8002b30 <lis2dw12_power_mode_get>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
 8001db0:	e092      	b.n	8001ed8 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch(mode)
 8001db2:	7abb      	ldrb	r3, [r7, #10]
 8001db4:	2b1b      	cmp	r3, #27
 8001db6:	f200 8087 	bhi.w	8001ec8 <LIS2DW12_ACC_GetSensitivity+0x15c>
 8001dba:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <LIS2DW12_ACC_GetSensitivity+0x54>)
 8001dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc0:	08001e31 	.word	0x08001e31
 8001dc4:	08001e7d 	.word	0x08001e7d
 8001dc8:	08001e7d 	.word	0x08001e7d
 8001dcc:	08001e7d 	.word	0x08001e7d
 8001dd0:	08001e7d 	.word	0x08001e7d
 8001dd4:	08001ec9 	.word	0x08001ec9
 8001dd8:	08001ec9 	.word	0x08001ec9
 8001ddc:	08001ec9 	.word	0x08001ec9
 8001de0:	08001e31 	.word	0x08001e31
 8001de4:	08001e7d 	.word	0x08001e7d
 8001de8:	08001e7d 	.word	0x08001e7d
 8001dec:	08001e7d 	.word	0x08001e7d
 8001df0:	08001ec9 	.word	0x08001ec9
 8001df4:	08001ec9 	.word	0x08001ec9
 8001df8:	08001ec9 	.word	0x08001ec9
 8001dfc:	08001ec9 	.word	0x08001ec9
 8001e00:	08001e31 	.word	0x08001e31
 8001e04:	08001e7d 	.word	0x08001e7d
 8001e08:	08001e7d 	.word	0x08001e7d
 8001e0c:	08001e7d 	.word	0x08001e7d
 8001e10:	08001e7d 	.word	0x08001e7d
 8001e14:	08001ec9 	.word	0x08001ec9
 8001e18:	08001ec9 	.word	0x08001ec9
 8001e1c:	08001ec9 	.word	0x08001ec9
 8001e20:	08001e31 	.word	0x08001e31
 8001e24:	08001e7d 	.word	0x08001e7d
 8001e28:	08001e7d 	.word	0x08001e7d
 8001e2c:	08001e7d 	.word	0x08001e7d
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d81a      	bhi.n	8001e6c <LIS2DW12_ACC_GetSensitivity+0x100>
 8001e36:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001e4d 	.word	0x08001e4d
 8001e40:	08001e55 	.word	0x08001e55
 8001e44:	08001e5d 	.word	0x08001e5d
 8001e48:	08001e65 	.word	0x08001e65
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	4a24      	ldr	r2, [pc, #144]	; (8001ee0 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8001e50:	601a      	str	r2, [r3, #0]
           break;
 8001e52:	e012      	b.n	8001e7a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4a23      	ldr	r2, [pc, #140]	; (8001ee4 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8001e58:	601a      	str	r2, [r3, #0]
          break;
 8001e5a:	e00e      	b.n	8001e7a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4a22      	ldr	r2, [pc, #136]	; (8001ee8 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8001e60:	601a      	str	r2, [r3, #0]
           break;
 8001e62:	e00a      	b.n	8001e7a <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	4a21      	ldr	r2, [pc, #132]	; (8001eec <LIS2DW12_ACC_GetSensitivity+0x180>)
 8001e68:	601a      	str	r2, [r3, #0]
          break;
 8001e6a:	e006      	b.n	8001e7a <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	4a20      	ldr	r2, [pc, #128]	; (8001ef0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001e70:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	60fb      	str	r3, [r7, #12]
          break;
 8001e78:	bf00      	nop
      }
      break;
 8001e7a:	e02c      	b.n	8001ed6 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8001e7c:	7afb      	ldrb	r3, [r7, #11]
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d81a      	bhi.n	8001eb8 <LIS2DW12_ACC_GetSensitivity+0x14c>
 8001e82:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8001e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e88:	08001e99 	.word	0x08001e99
 8001e8c:	08001ea1 	.word	0x08001ea1
 8001e90:	08001ea9 	.word	0x08001ea9
 8001e94:	08001eb1 	.word	0x08001eb1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4a16      	ldr	r2, [pc, #88]	; (8001ef4 <LIS2DW12_ACC_GetSensitivity+0x188>)
 8001e9c:	601a      	str	r2, [r3, #0]
           break;
 8001e9e:	e012      	b.n	8001ec6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4a15      	ldr	r2, [pc, #84]	; (8001ef8 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8001ea4:	601a      	str	r2, [r3, #0]
          break;
 8001ea6:	e00e      	b.n	8001ec6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	4a0d      	ldr	r2, [pc, #52]	; (8001ee0 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8001eac:	601a      	str	r2, [r3, #0]
           break;
 8001eae:	e00a      	b.n	8001ec6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8001eb4:	601a      	str	r2, [r3, #0]
          break;
 8001eb6:	e006      	b.n	8001ec6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4a0d      	ldr	r2, [pc, #52]	; (8001ef0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001ebc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	60fb      	str	r3, [r7, #12]
          break;
 8001ec4:	bf00      	nop
      }
      break;
 8001ec6:	e006      	b.n	8001ed6 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001ecc:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	60fb      	str	r3, [r7, #12]
      break;
 8001ed4:	bf00      	nop
  }

  return ret;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	3f79db23 	.word	0x3f79db23
 8001ee4:	3ff9db23 	.word	0x3ff9db23
 8001ee8:	4079db23 	.word	0x4079db23
 8001eec:	40f9db23 	.word	0x40f9db23
 8001ef0:	bf800000 	.word	0xbf800000
 8001ef4:	3e79db23 	.word	0x3e79db23
 8001ef8:	3ef9db23 	.word	0x3ef9db23

08001efc <LIS2DW12_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	331c      	adds	r3, #28
 8001f0e:	f107 020b 	add.w	r2, r7, #11
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 ff0b 	bl	8002d30 <lis2dw12_data_rate_get>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
 8001f24:	e1d4      	b.n	80022d0 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	331c      	adds	r3, #28
 8001f2a:	f107 020a 	add.w	r2, r7, #10
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fdfd 	bl	8002b30 <lis2dw12_power_mode_get>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8001f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f40:	e1c6      	b.n	80022d0 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 8001f42:	7afb      	ldrb	r3, [r7, #11]
 8001f44:	2b32      	cmp	r3, #50	; 0x32
 8001f46:	f200 81bb 	bhi.w	80022c0 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 8001f4a:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8001f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f50:	0800201d 	.word	0x0800201d
 8001f54:	08002027 	.word	0x08002027
 8001f58:	080020c5 	.word	0x080020c5
 8001f5c:	080020cd 	.word	0x080020cd
 8001f60:	080020d5 	.word	0x080020d5
 8001f64:	080020dd 	.word	0x080020dd
 8001f68:	080020e5 	.word	0x080020e5
 8001f6c:	080020ed 	.word	0x080020ed
 8001f70:	08002189 	.word	0x08002189
 8001f74:	08002225 	.word	0x08002225
 8001f78:	080022c1 	.word	0x080022c1
 8001f7c:	080022c1 	.word	0x080022c1
 8001f80:	080022c1 	.word	0x080022c1
 8001f84:	080022c1 	.word	0x080022c1
 8001f88:	080022c1 	.word	0x080022c1
 8001f8c:	080022c1 	.word	0x080022c1
 8001f90:	080022c1 	.word	0x080022c1
 8001f94:	080022c1 	.word	0x080022c1
 8001f98:	0800201d 	.word	0x0800201d
 8001f9c:	080022c1 	.word	0x080022c1
 8001fa0:	080022c1 	.word	0x080022c1
 8001fa4:	080022c1 	.word	0x080022c1
 8001fa8:	080022c1 	.word	0x080022c1
 8001fac:	080022c1 	.word	0x080022c1
 8001fb0:	080022c1 	.word	0x080022c1
 8001fb4:	080022c1 	.word	0x080022c1
 8001fb8:	080022c1 	.word	0x080022c1
 8001fbc:	080022c1 	.word	0x080022c1
 8001fc0:	080022c1 	.word	0x080022c1
 8001fc4:	080022c1 	.word	0x080022c1
 8001fc8:	080022c1 	.word	0x080022c1
 8001fcc:	080022c1 	.word	0x080022c1
 8001fd0:	080022c1 	.word	0x080022c1
 8001fd4:	080022c1 	.word	0x080022c1
 8001fd8:	080022c1 	.word	0x080022c1
 8001fdc:	080022c1 	.word	0x080022c1
 8001fe0:	080022c1 	.word	0x080022c1
 8001fe4:	080022c1 	.word	0x080022c1
 8001fe8:	080022c1 	.word	0x080022c1
 8001fec:	080022c1 	.word	0x080022c1
 8001ff0:	080022c1 	.word	0x080022c1
 8001ff4:	080022c1 	.word	0x080022c1
 8001ff8:	080022c1 	.word	0x080022c1
 8001ffc:	080022c1 	.word	0x080022c1
 8002000:	080022c1 	.word	0x080022c1
 8002004:	080022c1 	.word	0x080022c1
 8002008:	080022c1 	.word	0x080022c1
 800200c:	080022c1 	.word	0x080022c1
 8002010:	080022c1 	.word	0x080022c1
 8002014:	080022c1 	.word	0x080022c1
 8002018:	0800201d 	.word	0x0800201d
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
      break;
 8002024:	e153      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8002026:	7abb      	ldrb	r3, [r7, #10]
 8002028:	2b1b      	cmp	r3, #27
 800202a:	d843      	bhi.n	80020b4 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 800202c:	a201      	add	r2, pc, #4	; (adr r2, 8002034 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 800202e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002032:	bf00      	nop
 8002034:	080020ad 	.word	0x080020ad
 8002038:	080020ad 	.word	0x080020ad
 800203c:	080020ad 	.word	0x080020ad
 8002040:	080020ad 	.word	0x080020ad
 8002044:	080020a5 	.word	0x080020a5
 8002048:	080020b5 	.word	0x080020b5
 800204c:	080020b5 	.word	0x080020b5
 8002050:	080020b5 	.word	0x080020b5
 8002054:	080020ad 	.word	0x080020ad
 8002058:	080020ad 	.word	0x080020ad
 800205c:	080020ad 	.word	0x080020ad
 8002060:	080020ad 	.word	0x080020ad
 8002064:	080020b5 	.word	0x080020b5
 8002068:	080020b5 	.word	0x080020b5
 800206c:	080020b5 	.word	0x080020b5
 8002070:	080020b5 	.word	0x080020b5
 8002074:	080020ad 	.word	0x080020ad
 8002078:	080020ad 	.word	0x080020ad
 800207c:	080020ad 	.word	0x080020ad
 8002080:	080020ad 	.word	0x080020ad
 8002084:	080020a5 	.word	0x080020a5
 8002088:	080020b5 	.word	0x080020b5
 800208c:	080020b5 	.word	0x080020b5
 8002090:	080020b5 	.word	0x080020b5
 8002094:	080020ad 	.word	0x080020ad
 8002098:	080020ad 	.word	0x080020ad
 800209c:	080020ad 	.word	0x080020ad
 80020a0:	080020ad 	.word	0x080020ad
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4a8c      	ldr	r2, [pc, #560]	; (80022d8 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80020a8:	601a      	str	r2, [r3, #0]
           break;
 80020aa:	e00a      	b.n	80020c2 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4a8b      	ldr	r2, [pc, #556]	; (80022dc <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 80020b0:	601a      	str	r2, [r3, #0]
          break;
 80020b2:	e006      	b.n	80020c2 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	4a8a      	ldr	r2, [pc, #552]	; (80022e0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80020b8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
 80020be:	60fb      	str	r3, [r7, #12]
          break;
 80020c0:	bf00      	nop
      }
      break;
 80020c2:	e104      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	4a84      	ldr	r2, [pc, #528]	; (80022d8 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80020c8:	601a      	str	r2, [r3, #0]
      break;
 80020ca:	e100      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4a85      	ldr	r2, [pc, #532]	; (80022e4 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 80020d0:	601a      	str	r2, [r3, #0]
      break;
 80020d2:	e0fc      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4a84      	ldr	r2, [pc, #528]	; (80022e8 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 80020d8:	601a      	str	r2, [r3, #0]
      break;
 80020da:	e0f8      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	4a83      	ldr	r2, [pc, #524]	; (80022ec <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 80020e0:	601a      	str	r2, [r3, #0]
      break;
 80020e2:	e0f4      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	4a82      	ldr	r2, [pc, #520]	; (80022f0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80020e8:	601a      	str	r2, [r3, #0]
      break;
 80020ea:	e0f0      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 80020ec:	7abb      	ldrb	r3, [r7, #10]
 80020ee:	2b1b      	cmp	r3, #27
 80020f0:	d842      	bhi.n	8002178 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 80020f2:	a201      	add	r2, pc, #4	; (adr r2, 80020f8 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 80020f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f8:	08002171 	.word	0x08002171
 80020fc:	08002171 	.word	0x08002171
 8002100:	08002171 	.word	0x08002171
 8002104:	08002171 	.word	0x08002171
 8002108:	08002169 	.word	0x08002169
 800210c:	08002179 	.word	0x08002179
 8002110:	08002179 	.word	0x08002179
 8002114:	08002179 	.word	0x08002179
 8002118:	08002171 	.word	0x08002171
 800211c:	08002171 	.word	0x08002171
 8002120:	08002171 	.word	0x08002171
 8002124:	08002171 	.word	0x08002171
 8002128:	08002179 	.word	0x08002179
 800212c:	08002179 	.word	0x08002179
 8002130:	08002179 	.word	0x08002179
 8002134:	08002179 	.word	0x08002179
 8002138:	08002171 	.word	0x08002171
 800213c:	08002171 	.word	0x08002171
 8002140:	08002171 	.word	0x08002171
 8002144:	08002171 	.word	0x08002171
 8002148:	08002169 	.word	0x08002169
 800214c:	08002179 	.word	0x08002179
 8002150:	08002179 	.word	0x08002179
 8002154:	08002179 	.word	0x08002179
 8002158:	08002171 	.word	0x08002171
 800215c:	08002171 	.word	0x08002171
 8002160:	08002171 	.word	0x08002171
 8002164:	08002171 	.word	0x08002171
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4a62      	ldr	r2, [pc, #392]	; (80022f4 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 800216c:	601a      	str	r2, [r3, #0]
           break;
 800216e:	e00a      	b.n	8002186 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4a5f      	ldr	r2, [pc, #380]	; (80022f0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002174:	601a      	str	r2, [r3, #0]
          break;
 8002176:	e006      	b.n	8002186 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4a59      	ldr	r2, [pc, #356]	; (80022e0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 800217c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
 8002182:	60fb      	str	r3, [r7, #12]
          break;
 8002184:	bf00      	nop
      }
      break;
 8002186:	e0a2      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8002188:	7abb      	ldrb	r3, [r7, #10]
 800218a:	2b1b      	cmp	r3, #27
 800218c:	d842      	bhi.n	8002214 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 800218e:	a201      	add	r2, pc, #4	; (adr r2, 8002194 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8002190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002194:	0800220d 	.word	0x0800220d
 8002198:	0800220d 	.word	0x0800220d
 800219c:	0800220d 	.word	0x0800220d
 80021a0:	0800220d 	.word	0x0800220d
 80021a4:	08002205 	.word	0x08002205
 80021a8:	08002215 	.word	0x08002215
 80021ac:	08002215 	.word	0x08002215
 80021b0:	08002215 	.word	0x08002215
 80021b4:	0800220d 	.word	0x0800220d
 80021b8:	0800220d 	.word	0x0800220d
 80021bc:	0800220d 	.word	0x0800220d
 80021c0:	0800220d 	.word	0x0800220d
 80021c4:	08002215 	.word	0x08002215
 80021c8:	08002215 	.word	0x08002215
 80021cc:	08002215 	.word	0x08002215
 80021d0:	08002215 	.word	0x08002215
 80021d4:	0800220d 	.word	0x0800220d
 80021d8:	0800220d 	.word	0x0800220d
 80021dc:	0800220d 	.word	0x0800220d
 80021e0:	0800220d 	.word	0x0800220d
 80021e4:	08002205 	.word	0x08002205
 80021e8:	08002215 	.word	0x08002215
 80021ec:	08002215 	.word	0x08002215
 80021f0:	08002215 	.word	0x08002215
 80021f4:	0800220d 	.word	0x0800220d
 80021f8:	0800220d 	.word	0x0800220d
 80021fc:	0800220d 	.word	0x0800220d
 8002200:	0800220d 	.word	0x0800220d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4a3c      	ldr	r2, [pc, #240]	; (80022f8 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8002208:	601a      	str	r2, [r3, #0]
           break;
 800220a:	e00a      	b.n	8002222 <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	4a38      	ldr	r2, [pc, #224]	; (80022f0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002210:	601a      	str	r2, [r3, #0]
          break;
 8002212:	e006      	b.n	8002222 <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4a32      	ldr	r2, [pc, #200]	; (80022e0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002218:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	60fb      	str	r3, [r7, #12]
          break;
 8002220:	bf00      	nop
      }
      break;
 8002222:	e054      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8002224:	7abb      	ldrb	r3, [r7, #10]
 8002226:	2b1b      	cmp	r3, #27
 8002228:	d842      	bhi.n	80022b0 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 800222a:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	080022a9 	.word	0x080022a9
 8002234:	080022a9 	.word	0x080022a9
 8002238:	080022a9 	.word	0x080022a9
 800223c:	080022a9 	.word	0x080022a9
 8002240:	080022a1 	.word	0x080022a1
 8002244:	080022b1 	.word	0x080022b1
 8002248:	080022b1 	.word	0x080022b1
 800224c:	080022b1 	.word	0x080022b1
 8002250:	080022a9 	.word	0x080022a9
 8002254:	080022a9 	.word	0x080022a9
 8002258:	080022a9 	.word	0x080022a9
 800225c:	080022a9 	.word	0x080022a9
 8002260:	080022b1 	.word	0x080022b1
 8002264:	080022b1 	.word	0x080022b1
 8002268:	080022b1 	.word	0x080022b1
 800226c:	080022b1 	.word	0x080022b1
 8002270:	080022a9 	.word	0x080022a9
 8002274:	080022a9 	.word	0x080022a9
 8002278:	080022a9 	.word	0x080022a9
 800227c:	080022a9 	.word	0x080022a9
 8002280:	080022a1 	.word	0x080022a1
 8002284:	080022b1 	.word	0x080022b1
 8002288:	080022b1 	.word	0x080022b1
 800228c:	080022b1 	.word	0x080022b1
 8002290:	080022a9 	.word	0x080022a9
 8002294:	080022a9 	.word	0x080022a9
 8002298:	080022a9 	.word	0x080022a9
 800229c:	080022a9 	.word	0x080022a9
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	4a16      	ldr	r2, [pc, #88]	; (80022fc <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 80022a4:	601a      	str	r2, [r3, #0]
           break;
 80022a6:	e00a      	b.n	80022be <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4a11      	ldr	r2, [pc, #68]	; (80022f0 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80022ac:	601a      	str	r2, [r3, #0]
          break;
 80022ae:	e006      	b.n	80022be <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80022b4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	60fb      	str	r3, [r7, #12]
          break;
 80022bc:	bf00      	nop
      }
      break;
 80022be:	e006      	b.n	80022ce <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80022c4:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ca:	60fb      	str	r3, [r7, #12]
      break;
 80022cc:	bf00      	nop
  }

  return ret;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	41480000 	.word	0x41480000
 80022dc:	3fcccccd 	.word	0x3fcccccd
 80022e0:	bf800000 	.word	0xbf800000
 80022e4:	41c80000 	.word	0x41c80000
 80022e8:	42480000 	.word	0x42480000
 80022ec:	42c80000 	.word	0x42c80000
 80022f0:	43480000 	.word	0x43480000
 80022f4:	43c80000 	.word	0x43c80000
 80022f8:	44480000 	.word	0x44480000
 80022fc:	44c80000 	.word	0x44c80000

08002300 <LIS2DW12_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 800230c:	2200      	movs	r2, #0
 800230e:	2100      	movs	r1, #0
 8002310:	ed97 0a00 	vldr	s0, [r7]
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f805 	bl	8002324 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800231a:	4603      	mov	r3, r0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002330:	460b      	mov	r3, r1
 8002332:	71fb      	strb	r3, [r7, #7]
 8002334:	4613      	mov	r3, r2
 8002336:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800233e:	2b01      	cmp	r3, #1
 8002340:	d109      	bne.n	8002356 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8002342:	79ba      	ldrb	r2, [r7, #6]
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	4619      	mov	r1, r3
 8002348:	ed97 0a02 	vldr	s0, [r7, #8]
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f98d 	bl	800266c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002352:	4603      	mov	r3, r0
 8002354:	e008      	b.n	8002368 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8002356:	79ba      	ldrb	r2, [r7, #6]
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	4619      	mov	r1, r3
 800235c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fa9f 	bl	80028a4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8002366:	4603      	mov	r3, r0
  }
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <LIS2DW12_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	331c      	adds	r3, #28
 8002382:	f107 020b 	add.w	r2, r7, #11
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fde7 	bl	8002f5c <lis2dw12_full_scale_get>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8002394:	f04f 33ff 	mov.w	r3, #4294967295
 8002398:	e027      	b.n	80023ea <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800239a:	7afb      	ldrb	r3, [r7, #11]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d81b      	bhi.n	80023d8 <LIS2DW12_ACC_GetFullScale+0x68>
 80023a0:	a201      	add	r2, pc, #4	; (adr r2, 80023a8 <LIS2DW12_ACC_GetFullScale+0x38>)
 80023a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a6:	bf00      	nop
 80023a8:	080023b9 	.word	0x080023b9
 80023ac:	080023c1 	.word	0x080023c1
 80023b0:	080023c9 	.word	0x080023c9
 80023b4:	080023d1 	.word	0x080023d1
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2202      	movs	r2, #2
 80023bc:	601a      	str	r2, [r3, #0]
      break;
 80023be:	e013      	b.n	80023e8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2204      	movs	r2, #4
 80023c4:	601a      	str	r2, [r3, #0]
      break;
 80023c6:	e00f      	b.n	80023e8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2208      	movs	r2, #8
 80023cc:	601a      	str	r2, [r3, #0]
      break;
 80023ce:	e00b      	b.n	80023e8 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2210      	movs	r2, #16
 80023d4:	601a      	str	r2, [r3, #0]
      break;
 80023d6:	e007      	b.n	80023e8 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f04f 32ff 	mov.w	r2, #4294967295
 80023de:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80023e0:	f04f 33ff 	mov.w	r3, #4294967295
 80023e4:	60fb      	str	r3, [r7, #12]
      break;
 80023e6:	bf00      	nop
  }

  return ret;
 80023e8:	68fb      	ldr	r3, [r7, #12]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop

080023f4 <LIS2DW12_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
         : (FullScale <= 4) ? LIS2DW12_4g
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b02      	cmp	r3, #2
 8002402:	dd0b      	ble.n	800241c <LIS2DW12_ACC_SetFullScale+0x28>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b04      	cmp	r3, #4
 8002408:	dd06      	ble.n	8002418 <LIS2DW12_ACC_SetFullScale+0x24>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b08      	cmp	r3, #8
 800240e:	dc01      	bgt.n	8002414 <LIS2DW12_ACC_SetFullScale+0x20>
 8002410:	2302      	movs	r3, #2
 8002412:	e004      	b.n	800241e <LIS2DW12_ACC_SetFullScale+0x2a>
 8002414:	2303      	movs	r3, #3
 8002416:	e002      	b.n	800241e <LIS2DW12_ACC_SetFullScale+0x2a>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <LIS2DW12_ACC_SetFullScale+0x2a>
 800241c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 800241e:	73fb      	strb	r3, [r7, #15]
         : (FullScale <= 8) ? LIS2DW12_8g
         :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	331c      	adds	r3, #28
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f000 fd71 	bl	8002f10 <lis2dw12_full_scale_set>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8002434:	f04f 33ff 	mov.w	r3, #4294967295
 8002438:	e000      	b.n	800243c <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <LIS2DW12_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	331c      	adds	r3, #28
 8002456:	f107 020b 	add.w	r2, r7, #11
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fb67 	bl	8002b30 <lis2dw12_power_mode_get>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8002468:	f04f 33ff 	mov.w	r3, #4294967295
 800246c:	e089      	b.n	8002582 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	331c      	adds	r3, #28
 8002472:	f107 020c 	add.w	r2, r7, #12
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fda7 	bl	8002fcc <lis2dw12_acceleration_raw_get>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	e07b      	b.n	8002582 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch(mode)
 800248a:	7afb      	ldrb	r3, [r7, #11]
 800248c:	2b1b      	cmp	r3, #27
 800248e:	d873      	bhi.n	8002578 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8002490:	a201      	add	r2, pc, #4	; (adr r2, 8002498 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8002492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002496:	bf00      	nop
 8002498:	08002509 	.word	0x08002509
 800249c:	08002541 	.word	0x08002541
 80024a0:	08002541 	.word	0x08002541
 80024a4:	08002541 	.word	0x08002541
 80024a8:	08002541 	.word	0x08002541
 80024ac:	08002579 	.word	0x08002579
 80024b0:	08002579 	.word	0x08002579
 80024b4:	08002579 	.word	0x08002579
 80024b8:	08002509 	.word	0x08002509
 80024bc:	08002541 	.word	0x08002541
 80024c0:	08002541 	.word	0x08002541
 80024c4:	08002541 	.word	0x08002541
 80024c8:	08002579 	.word	0x08002579
 80024cc:	08002579 	.word	0x08002579
 80024d0:	08002579 	.word	0x08002579
 80024d4:	08002579 	.word	0x08002579
 80024d8:	08002509 	.word	0x08002509
 80024dc:	08002541 	.word	0x08002541
 80024e0:	08002541 	.word	0x08002541
 80024e4:	08002541 	.word	0x08002541
 80024e8:	08002541 	.word	0x08002541
 80024ec:	08002579 	.word	0x08002579
 80024f0:	08002579 	.word	0x08002579
 80024f4:	08002579 	.word	0x08002579
 80024f8:	08002509 	.word	0x08002509
 80024fc:	08002541 	.word	0x08002541
 8002500:	08002541 	.word	0x08002541
 8002504:	08002541 	.word	0x08002541
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8002508:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	da00      	bge.n	8002512 <LIS2DW12_ACC_GetAxesRaw+0xce>
 8002510:	330f      	adds	r3, #15
 8002512:	111b      	asrs	r3, r3, #4
 8002514:	b21a      	sxth	r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800251a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800251e:	2b00      	cmp	r3, #0
 8002520:	da00      	bge.n	8002524 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8002522:	330f      	adds	r3, #15
 8002524:	111b      	asrs	r3, r3, #4
 8002526:	b21a      	sxth	r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800252c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	da00      	bge.n	8002536 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8002534:	330f      	adds	r3, #15
 8002536:	111b      	asrs	r3, r3, #4
 8002538:	b21a      	sxth	r2, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	809a      	strh	r2, [r3, #4]
      break;
 800253e:	e01f      	b.n	8002580 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8002540:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	da00      	bge.n	800254a <LIS2DW12_ACC_GetAxesRaw+0x106>
 8002548:	3303      	adds	r3, #3
 800254a:	109b      	asrs	r3, r3, #2
 800254c:	b21a      	sxth	r2, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8002552:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002556:	2b00      	cmp	r3, #0
 8002558:	da00      	bge.n	800255c <LIS2DW12_ACC_GetAxesRaw+0x118>
 800255a:	3303      	adds	r3, #3
 800255c:	109b      	asrs	r3, r3, #2
 800255e:	b21a      	sxth	r2, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8002564:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002568:	2b00      	cmp	r3, #0
 800256a:	da00      	bge.n	800256e <LIS2DW12_ACC_GetAxesRaw+0x12a>
 800256c:	3303      	adds	r3, #3
 800256e:	109b      	asrs	r3, r3, #2
 8002570:	b21a      	sxth	r2, r3
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	809a      	strh	r2, [r3, #4]
      break;
 8002576:	e003      	b.n	8002580 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8002578:	f04f 33ff 	mov.w	r3, #4294967295
 800257c:	617b      	str	r3, [r7, #20]
      break;
 800257e:	bf00      	nop
  }

  return ret;
 8002580:	697b      	ldr	r3, [r7, #20]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop

0800258c <LIS2DW12_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	4619      	mov	r1, r3
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ff4e 	bl	8002444 <LIS2DW12_ACC_GetAxesRaw>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
 80025b2:	e03c      	b.n	800262e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80025b4:	f107 030c 	add.w	r3, r7, #12
 80025b8:	4619      	mov	r1, r3
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff fbd6 	bl	8001d6c <LIS2DW12_ACC_GetSensitivity>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	e030      	b.n	800262e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80025cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80025d0:	ee07 3a90 	vmov	s15, r3
 80025d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e4:	ee17 2a90 	vmov	r2, s15
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80025ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025f0:	ee07 3a90 	vmov	s15, r3
 80025f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002600:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002604:	ee17 2a90 	vmov	r2, s15
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800260c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002610:	ee07 3a90 	vmov	s15, r3
 8002614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002618:	edd7 7a03 	vldr	s15, [r7, #12]
 800261c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002624:	ee17 2a90 	vmov	r2, s15
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <LIS2DW12_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	70fb      	strb	r3, [r7, #3]
 8002642:	4613      	mov	r3, r2
 8002644:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f103 001c 	add.w	r0, r3, #28
 800264c:	1cba      	adds	r2, r7, #2
 800264e:	78f9      	ldrb	r1, [r7, #3]
 8002650:	2301      	movs	r3, #1
 8002652:	f000 fa07 	bl	8002a64 <lis2dw12_write_reg>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 800265c:	f04f 33ff 	mov.w	r3, #4294967295
 8002660:	e000      	b.n	8002664 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	ed87 0a02 	vstr	s0, [r7, #8]
 8002678:	460b      	mov	r3, r1
 800267a:	71fb      	strb	r3, [r7, #7]
 800267c:	4613      	mov	r3, r2
 800267e:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	3b01      	subs	r3, #1
 8002684:	2b03      	cmp	r3, #3
 8002686:	d80b      	bhi.n	80026a0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8002688:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 800268a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268e:	bf00      	nop
 8002690:	080026cd 	.word	0x080026cd
 8002694:	080026f9 	.word	0x080026f9
 8002698:	08002725 	.word	0x08002725
 800269c:	08002751 	.word	0x08002751
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 80026a0:	79bb      	ldrb	r3, [r7, #6]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d002      	beq.n	80026ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 80026a6:	2304      	movs	r3, #4
 80026a8:	75fb      	strb	r3, [r7, #23]
          break;
 80026aa:	e002      	b.n	80026b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80026ac:	2314      	movs	r3, #20
 80026ae:	75fb      	strb	r3, [r7, #23]
          break;
 80026b0:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if(Odr < 12.5f)
 80026b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80026b6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80026ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c2:	d400      	bmi.n	80026c6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80026c4:	e05a      	b.n	800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 80026c6:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80026c8:	60bb      	str	r3, [r7, #8]
      break;
 80026ca:	e057      	b.n	800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80026cc:	79bb      	ldrb	r3, [r7, #6]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d002      	beq.n	80026d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80026d2:	2303      	movs	r3, #3
 80026d4:	75fb      	strb	r3, [r7, #23]
          break;
 80026d6:	e002      	b.n	80026de <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80026d8:	2313      	movs	r3, #19
 80026da:	75fb      	strb	r3, [r7, #23]
          break;
 80026dc:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 80026de:	edd7 7a02 	vldr	s15, [r7, #8]
 80026e2:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002888 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80026e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ee:	dc00      	bgt.n	80026f2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 80026f0:	e044      	b.n	800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80026f2:	4b66      	ldr	r3, [pc, #408]	; (800288c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80026f4:	60bb      	str	r3, [r7, #8]
      break;
 80026f6:	e041      	b.n	800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 80026f8:	79bb      	ldrb	r3, [r7, #6]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d002      	beq.n	8002704 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 80026fe:	2302      	movs	r3, #2
 8002700:	75fb      	strb	r3, [r7, #23]
          break;
 8002702:	e002      	b.n	800270a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002704:	2312      	movs	r3, #18
 8002706:	75fb      	strb	r3, [r7, #23]
          break;
 8002708:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 800270a:	edd7 7a02 	vldr	s15, [r7, #8]
 800270e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002888 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271a:	dc00      	bgt.n	800271e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 800271c:	e02e      	b.n	800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800271e:	4b5b      	ldr	r3, [pc, #364]	; (800288c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002720:	60bb      	str	r3, [r7, #8]
      break;
 8002722:	e02b      	b.n	800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8002724:	79bb      	ldrb	r3, [r7, #6]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d002      	beq.n	8002730 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 800272a:	2301      	movs	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
          break;
 800272e:	e002      	b.n	8002736 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002730:	2311      	movs	r3, #17
 8002732:	75fb      	strb	r3, [r7, #23]
          break;
 8002734:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8002736:	edd7 7a02 	vldr	s15, [r7, #8]
 800273a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002888 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800273e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002746:	dc00      	bgt.n	800274a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002748:	e018      	b.n	800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800274a:	4b50      	ldr	r3, [pc, #320]	; (800288c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800274c:	60bb      	str	r3, [r7, #8]
      break;
 800274e:	e015      	b.n	800277c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8002750:	79bb      	ldrb	r3, [r7, #6]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d002      	beq.n	800275c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8002756:	2300      	movs	r3, #0
 8002758:	75fb      	strb	r3, [r7, #23]
          break;
 800275a:	e002      	b.n	8002762 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 800275c:	2310      	movs	r3, #16
 800275e:	75fb      	strb	r3, [r7, #23]
          break;
 8002760:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8002762:	edd7 7a02 	vldr	s15, [r7, #8]
 8002766:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002888 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800276a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002772:	dc00      	bgt.n	8002776 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8002774:	e001      	b.n	800277a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8002776:	4b45      	ldr	r3, [pc, #276]	; (800288c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002778:	60bb      	str	r3, [r7, #8]
      break;
 800277a:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 800277c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002780:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002890 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8002784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278c:	d801      	bhi.n	8002792 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 800278e:	2301      	movs	r3, #1
 8002790:	e04d      	b.n	800282e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002792:	edd7 7a02 	vldr	s15, [r7, #8]
 8002796:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800279a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800279e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a2:	d801      	bhi.n	80027a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e042      	b.n	800282e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80027a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ac:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80027b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b8:	d801      	bhi.n	80027be <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80027ba:	2303      	movs	r3, #3
 80027bc:	e037      	b.n	800282e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80027be:	edd7 7a02 	vldr	s15, [r7, #8]
 80027c2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002894 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 80027c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ce:	d801      	bhi.n	80027d4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80027d0:	2304      	movs	r3, #4
 80027d2:	e02c      	b.n	800282e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80027d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80027d8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002898 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 80027dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e4:	d801      	bhi.n	80027ea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 80027e6:	2305      	movs	r3, #5
 80027e8:	e021      	b.n	800282e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80027ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ee:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002888 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80027f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fa:	d801      	bhi.n	8002800 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 80027fc:	2306      	movs	r3, #6
 80027fe:	e016      	b.n	800282e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002800:	edd7 7a02 	vldr	s15, [r7, #8]
 8002804:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800289c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8002808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002810:	d801      	bhi.n	8002816 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8002812:	2307      	movs	r3, #7
 8002814:	e00b      	b.n	800282e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002816:	edd7 7a02 	vldr	s15, [r7, #8]
 800281a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80028a0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 800281e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002826:	d801      	bhi.n	800282c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002828:	2308      	movs	r3, #8
 800282a:	e000      	b.n	800282e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800282c:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 800282e:	75bb      	strb	r3, [r7, #22]
          : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
          : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
          :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	331c      	adds	r3, #28
 8002834:	7dba      	ldrb	r2, [r7, #22]
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fa33 	bl	8002ca4 <lis2dw12_data_rate_set>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8002844:	f04f 33ff 	mov.w	r3, #4294967295
 8002848:	e018      	b.n	800287c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	331c      	adds	r3, #28
 800284e:	7dfa      	ldrb	r2, [r7, #23]
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f91e 	bl	8002a94 <lis2dw12_power_mode_set>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 800285e:	f04f 33ff 	mov.w	r3, #4294967295
 8002862:	e00b      	b.n	800287c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	79fa      	ldrb	r2, [r7, #7]
 800286e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	79ba      	ldrb	r2, [r7, #6]
 8002876:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	41480000 	.word	0x41480000
 8002888:	43480000 	.word	0x43480000
 800288c:	43480000 	.word	0x43480000
 8002890:	3fcccccd 	.word	0x3fcccccd
 8002894:	42480000 	.word	0x42480000
 8002898:	42c80000 	.word	0x42c80000
 800289c:	43c80000 	.word	0x43c80000
 80028a0:	44480000 	.word	0x44480000

080028a4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80028b0:	460b      	mov	r3, r1
 80028b2:	71fb      	strb	r3, [r7, #7]
 80028b4:	4613      	mov	r3, r2
 80028b6:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	79fa      	ldrb	r2, [r7, #7]
 80028bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	79ba      	ldrb	r2, [r7, #6]
 80028c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                : (Odr <=   12.5f) ?   12.5f
 80028c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80028cc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800298c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80028d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	d801      	bhi.n	80028de <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 80028da:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 80028dc:	e04d      	b.n	800297a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   25.0f) ?   25.0f
 80028de:	edd7 7a02 	vldr	s15, [r7, #8]
 80028e2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80028e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ee:	d801      	bhi.n	80028f4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 80028f0:	4b28      	ldr	r3, [pc, #160]	; (8002994 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 80028f2:	e042      	b.n	800297a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   50.0f) ?   50.0f
 80028f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80028f8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80028fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002904:	d801      	bhi.n	800290a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8002908:	e037      	b.n	800297a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  100.0f) ?  100.0f
 800290a:	edd7 7a02 	vldr	s15, [r7, #8]
 800290e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800299c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291a:	d801      	bhi.n	8002920 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 800291c:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 800291e:	e02c      	b.n	800297a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  200.0f) ?  200.0f
 8002920:	edd7 7a02 	vldr	s15, [r7, #8]
 8002924:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80029a4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800292c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002930:	d801      	bhi.n	8002936 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002934:	e021      	b.n	800297a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  400.0f) ?  400.0f
 8002936:	edd7 7a02 	vldr	s15, [r7, #8]
 800293a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80029ac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 800293e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002946:	d801      	bhi.n	800294c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 800294a:	e016      	b.n	800297a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  800.0f) ?  800.0f
 800294c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002950:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80029b4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295c:	d801      	bhi.n	8002962 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 800295e:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002960:	e00b      	b.n	800297a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                :                    1600.0f;
 8002962:	edd7 7a02 	vldr	s15, [r7, #8]
 8002966:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80029bc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 800296a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800296e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002972:	d801      	bhi.n	8002978 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002976:	e000      	b.n	800297a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	3fcccccd 	.word	0x3fcccccd
 8002990:	3fcccccd 	.word	0x3fcccccd
 8002994:	41480000 	.word	0x41480000
 8002998:	41c80000 	.word	0x41c80000
 800299c:	42480000 	.word	0x42480000
 80029a0:	42480000 	.word	0x42480000
 80029a4:	42c80000 	.word	0x42c80000
 80029a8:	42c80000 	.word	0x42c80000
 80029ac:	43480000 	.word	0x43480000
 80029b0:	43480000 	.word	0x43480000
 80029b4:	43c80000 	.word	0x43c80000
 80029b8:	43c80000 	.word	0x43c80000
 80029bc:	44480000 	.word	0x44480000
 80029c0:	44480000 	.word	0x44480000
 80029c4:	44c80000 	.word	0x44c80000

080029c8 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	461a      	mov	r2, r3
 80029d4:	460b      	mov	r3, r1
 80029d6:	72fb      	strb	r3, [r7, #11]
 80029d8:	4613      	mov	r3, r2
 80029da:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	695c      	ldr	r4, [r3, #20]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	7b1b      	ldrb	r3, [r3, #12]
 80029e8:	b298      	uxth	r0, r3
 80029ea:	7afb      	ldrb	r3, [r7, #11]
 80029ec:	b299      	uxth	r1, r3
 80029ee:	893b      	ldrh	r3, [r7, #8]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	47a0      	blx	r4
 80029f4:	4603      	mov	r3, r0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd90      	pop	{r4, r7, pc}

080029fe <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80029fe:	b590      	push	{r4, r7, lr}
 8002a00:	b087      	sub	sp, #28
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	72fb      	strb	r3, [r7, #11]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	691c      	ldr	r4, [r3, #16]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	7b1b      	ldrb	r3, [r3, #12]
 8002a1e:	b298      	uxth	r0, r3
 8002a20:	7afb      	ldrb	r3, [r7, #11]
 8002a22:	b299      	uxth	r1, r3
 8002a24:	893b      	ldrh	r3, [r7, #8]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	47a0      	blx	r4
 8002a2a:	4603      	mov	r3, r0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	371c      	adds	r7, #28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd90      	pop	{r4, r7, pc}

08002a34 <lis2dw12_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	460b      	mov	r3, r1
 8002a42:	72fb      	strb	r3, [r7, #11]
 8002a44:	4613      	mov	r3, r2
 8002a46:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	685c      	ldr	r4, [r3, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6898      	ldr	r0, [r3, #8]
 8002a50:	893b      	ldrh	r3, [r7, #8]
 8002a52:	7af9      	ldrb	r1, [r7, #11]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	47a0      	blx	r4
 8002a58:	6178      	str	r0, [r7, #20]
  return ret;
 8002a5a:	697b      	ldr	r3, [r7, #20]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd90      	pop	{r4, r7, pc}

08002a64 <lis2dw12_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	460b      	mov	r3, r1
 8002a72:	72fb      	strb	r3, [r7, #11]
 8002a74:	4613      	mov	r3, r2
 8002a76:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681c      	ldr	r4, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6898      	ldr	r0, [r3, #8]
 8002a80:	893b      	ldrh	r3, [r7, #8]
 8002a82:	7af9      	ldrb	r1, [r7, #11]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	47a0      	blx	r4
 8002a88:	6178      	str	r0, [r7, #20]
  return ret;
 8002a8a:	697b      	ldr	r3, [r7, #20]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd90      	pop	{r4, r7, pc}

08002a94 <lis2dw12_power_mode_set>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx, lis2dw12_mode_t val)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002aa0:	f107 0210 	add.w	r2, r7, #16
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	2120      	movs	r1, #32
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ffc3 	bl	8002a34 <lis2dw12_read_reg>
 8002aae:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d118      	bne.n	8002ae8 <lis2dw12_power_mode_set+0x54>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	7c3b      	ldrb	r3, [r7, #16]
 8002ac2:	f362 0383 	bfi	r3, r2, #2, #2
 8002ac6:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	7c3b      	ldrb	r3, [r7, #16]
 8002ad2:	f362 0301 	bfi	r3, r2, #0, #2
 8002ad6:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002ad8:	f107 0210 	add.w	r2, r7, #16
 8002adc:	2301      	movs	r3, #1
 8002ade:	2120      	movs	r1, #32
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ffbf 	bl	8002a64 <lis2dw12_write_reg>
 8002ae6:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d107      	bne.n	8002afe <lis2dw12_power_mode_set+0x6a>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8002aee:	f107 020c 	add.w	r2, r7, #12
 8002af2:	2301      	movs	r3, #1
 8002af4:	2125      	movs	r1, #37	; 0x25
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ff9c 	bl	8002a34 <lis2dw12_read_reg>
 8002afc:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d110      	bne.n	8002b26 <lis2dw12_power_mode_set+0x92>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	7b3b      	ldrb	r3, [r7, #12]
 8002b10:	f362 0382 	bfi	r3, r2, #2, #1
 8002b14:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8002b16:	f107 020c 	add.w	r2, r7, #12
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	2125      	movs	r1, #37	; 0x25
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ffa0 	bl	8002a64 <lis2dw12_write_reg>
 8002b24:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8002b26:	697b      	ldr	r3, [r7, #20]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <lis2dw12_power_mode_get>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx, lis2dw12_mode_t *val)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002b3a:	f107 0210 	add.w	r2, r7, #16
 8002b3e:	2301      	movs	r3, #1
 8002b40:	2120      	movs	r1, #32
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff ff76 	bl	8002a34 <lis2dw12_read_reg>
 8002b48:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f040 80a3 	bne.w	8002c98 <lis2dw12_power_mode_get+0x168>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8002b52:	f107 020c 	add.w	r2, r7, #12
 8002b56:	2301      	movs	r3, #1
 8002b58:	2125      	movs	r1, #37	; 0x25
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff ff6a 	bl	8002a34 <lis2dw12_read_reg>
 8002b60:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002b62:	7b3b      	ldrb	r3, [r7, #12]
 8002b64:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	011a      	lsls	r2, r3, #4
 8002b6c:	7c3b      	ldrb	r3, [r7, #16]
 8002b6e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
            ctrl1.lp_mode)) {
 8002b78:	7c3a      	ldrb	r2, [r7, #16]
 8002b7a:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8002b7e:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002b80:	4413      	add	r3, r2
 8002b82:	2b1b      	cmp	r3, #27
 8002b84:	f200 8084 	bhi.w	8002c90 <lis2dw12_power_mode_get+0x160>
 8002b88:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <lis2dw12_power_mode_get+0x60>)
 8002b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8e:	bf00      	nop
 8002b90:	08002c21 	.word	0x08002c21
 8002b94:	08002c19 	.word	0x08002c19
 8002b98:	08002c11 	.word	0x08002c11
 8002b9c:	08002c09 	.word	0x08002c09
 8002ba0:	08002c01 	.word	0x08002c01
 8002ba4:	08002c91 	.word	0x08002c91
 8002ba8:	08002c91 	.word	0x08002c91
 8002bac:	08002c91 	.word	0x08002c91
 8002bb0:	08002c41 	.word	0x08002c41
 8002bb4:	08002c39 	.word	0x08002c39
 8002bb8:	08002c31 	.word	0x08002c31
 8002bbc:	08002c29 	.word	0x08002c29
 8002bc0:	08002c91 	.word	0x08002c91
 8002bc4:	08002c91 	.word	0x08002c91
 8002bc8:	08002c91 	.word	0x08002c91
 8002bcc:	08002c91 	.word	0x08002c91
 8002bd0:	08002c69 	.word	0x08002c69
 8002bd4:	08002c61 	.word	0x08002c61
 8002bd8:	08002c59 	.word	0x08002c59
 8002bdc:	08002c51 	.word	0x08002c51
 8002be0:	08002c49 	.word	0x08002c49
 8002be4:	08002c91 	.word	0x08002c91
 8002be8:	08002c91 	.word	0x08002c91
 8002bec:	08002c91 	.word	0x08002c91
 8002bf0:	08002c89 	.word	0x08002c89
 8002bf4:	08002c81 	.word	0x08002c81
 8002bf8:	08002c79 	.word	0x08002c79
 8002bfc:	08002c71 	.word	0x08002c71
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2204      	movs	r2, #4
 8002c04:	701a      	strb	r2, [r3, #0]
        break;
 8002c06:	e048      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	701a      	strb	r2, [r3, #0]
        break;
 8002c0e:	e044      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2202      	movs	r2, #2
 8002c14:	701a      	strb	r2, [r3, #0]
        break;
 8002c16:	e040      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]
        break;
 8002c1e:	e03c      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
        break;
 8002c26:	e038      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	220b      	movs	r2, #11
 8002c2c:	701a      	strb	r2, [r3, #0]
        break;
 8002c2e:	e034      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	220a      	movs	r2, #10
 8002c34:	701a      	strb	r2, [r3, #0]
        break;
 8002c36:	e030      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2209      	movs	r2, #9
 8002c3c:	701a      	strb	r2, [r3, #0]
        break;
 8002c3e:	e02c      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2208      	movs	r2, #8
 8002c44:	701a      	strb	r2, [r3, #0]
        break;
 8002c46:	e028      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2214      	movs	r2, #20
 8002c4c:	701a      	strb	r2, [r3, #0]
        break;
 8002c4e:	e024      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2213      	movs	r2, #19
 8002c54:	701a      	strb	r2, [r3, #0]
        break;
 8002c56:	e020      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2212      	movs	r2, #18
 8002c5c:	701a      	strb	r2, [r3, #0]
        break;
 8002c5e:	e01c      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2211      	movs	r2, #17
 8002c64:	701a      	strb	r2, [r3, #0]
        break;
 8002c66:	e018      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2210      	movs	r2, #16
 8002c6c:	701a      	strb	r2, [r3, #0]
        break;
 8002c6e:	e014      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	221b      	movs	r2, #27
 8002c74:	701a      	strb	r2, [r3, #0]
        break;
 8002c76:	e010      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	221a      	movs	r2, #26
 8002c7c:	701a      	strb	r2, [r3, #0]
        break;
 8002c7e:	e00c      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2219      	movs	r2, #25
 8002c84:	701a      	strb	r2, [r3, #0]
        break;
 8002c86:	e008      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2218      	movs	r2, #24
 8002c8c:	701a      	strb	r2, [r3, #0]
        break;
 8002c8e:	e004      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2204      	movs	r2, #4
 8002c94:	701a      	strb	r2, [r3, #0]
        break;
 8002c96:	e000      	b.n	8002c9a <lis2dw12_power_mode_get+0x16a>
    }
  }
 8002c98:	bf00      	nop
  return ret;
 8002c9a:	697b      	ldr	r3, [r7, #20]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002cb0:	f107 0210 	add.w	r2, r7, #16
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	2120      	movs	r1, #32
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff febb 	bl	8002a34 <lis2dw12_read_reg>
 8002cbe:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <lis2dw12_data_rate_set+0x42>
    ctrl1.odr = (uint8_t) val;
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	7c3b      	ldrb	r3, [r7, #16]
 8002cd0:	f362 1307 	bfi	r3, r2, #4, #4
 8002cd4:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002cd6:	f107 0210 	add.w	r2, r7, #16
 8002cda:	2301      	movs	r3, #1
 8002cdc:	2120      	movs	r1, #32
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff fec0 	bl	8002a64 <lis2dw12_write_reg>
 8002ce4:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d107      	bne.n	8002cfc <lis2dw12_data_rate_set+0x58>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8002cec:	f107 020c 	add.w	r2, r7, #12
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	2122      	movs	r1, #34	; 0x22
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff fe9d 	bl	8002a34 <lis2dw12_read_reg>
 8002cfa:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d110      	bne.n	8002d24 <lis2dw12_data_rate_set+0x80>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	7b3b      	ldrb	r3, [r7, #12]
 8002d0e:	f362 0301 	bfi	r3, r2, #0, #2
 8002d12:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8002d14:	f107 020c 	add.w	r2, r7, #12
 8002d18:	2301      	movs	r3, #1
 8002d1a:	2122      	movs	r1, #34	; 0x22
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff fea1 	bl	8002a64 <lis2dw12_write_reg>
 8002d22:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8002d24:	697b      	ldr	r3, [r7, #20]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8002d3a:	f107 0210 	add.w	r2, r7, #16
 8002d3e:	2301      	movs	r3, #1
 8002d40:	2120      	movs	r1, #32
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff fe76 	bl	8002a34 <lis2dw12_read_reg>
 8002d48:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f040 80b3 	bne.w	8002eb8 <lis2dw12_data_rate_get+0x188>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8002d52:	f107 020c 	add.w	r2, r7, #12
 8002d56:	2301      	movs	r3, #1
 8002d58:	2122      	movs	r1, #34	; 0x22
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff fe6a 	bl	8002a34 <lis2dw12_read_reg>
 8002d60:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr) {
 8002d62:	7b3b      	ldrb	r3, [r7, #12]
 8002d64:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	7c3a      	ldrb	r2, [r7, #16]
 8002d6e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	4413      	add	r3, r2
 8002d76:	2b32      	cmp	r3, #50	; 0x32
 8002d78:	f200 809a 	bhi.w	8002eb0 <lis2dw12_data_rate_get+0x180>
 8002d7c:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <lis2dw12_data_rate_get+0x54>)
 8002d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d82:	bf00      	nop
 8002d84:	08002e51 	.word	0x08002e51
 8002d88:	08002e59 	.word	0x08002e59
 8002d8c:	08002e61 	.word	0x08002e61
 8002d90:	08002e69 	.word	0x08002e69
 8002d94:	08002e71 	.word	0x08002e71
 8002d98:	08002e79 	.word	0x08002e79
 8002d9c:	08002e81 	.word	0x08002e81
 8002da0:	08002e89 	.word	0x08002e89
 8002da4:	08002e91 	.word	0x08002e91
 8002da8:	08002e99 	.word	0x08002e99
 8002dac:	08002eb1 	.word	0x08002eb1
 8002db0:	08002eb1 	.word	0x08002eb1
 8002db4:	08002eb1 	.word	0x08002eb1
 8002db8:	08002eb1 	.word	0x08002eb1
 8002dbc:	08002eb1 	.word	0x08002eb1
 8002dc0:	08002eb1 	.word	0x08002eb1
 8002dc4:	08002eb1 	.word	0x08002eb1
 8002dc8:	08002eb1 	.word	0x08002eb1
 8002dcc:	08002ea9 	.word	0x08002ea9
 8002dd0:	08002eb1 	.word	0x08002eb1
 8002dd4:	08002eb1 	.word	0x08002eb1
 8002dd8:	08002eb1 	.word	0x08002eb1
 8002ddc:	08002eb1 	.word	0x08002eb1
 8002de0:	08002eb1 	.word	0x08002eb1
 8002de4:	08002eb1 	.word	0x08002eb1
 8002de8:	08002eb1 	.word	0x08002eb1
 8002dec:	08002eb1 	.word	0x08002eb1
 8002df0:	08002eb1 	.word	0x08002eb1
 8002df4:	08002eb1 	.word	0x08002eb1
 8002df8:	08002eb1 	.word	0x08002eb1
 8002dfc:	08002eb1 	.word	0x08002eb1
 8002e00:	08002eb1 	.word	0x08002eb1
 8002e04:	08002eb1 	.word	0x08002eb1
 8002e08:	08002eb1 	.word	0x08002eb1
 8002e0c:	08002eb1 	.word	0x08002eb1
 8002e10:	08002eb1 	.word	0x08002eb1
 8002e14:	08002eb1 	.word	0x08002eb1
 8002e18:	08002eb1 	.word	0x08002eb1
 8002e1c:	08002eb1 	.word	0x08002eb1
 8002e20:	08002eb1 	.word	0x08002eb1
 8002e24:	08002eb1 	.word	0x08002eb1
 8002e28:	08002eb1 	.word	0x08002eb1
 8002e2c:	08002eb1 	.word	0x08002eb1
 8002e30:	08002eb1 	.word	0x08002eb1
 8002e34:	08002eb1 	.word	0x08002eb1
 8002e38:	08002eb1 	.word	0x08002eb1
 8002e3c:	08002eb1 	.word	0x08002eb1
 8002e40:	08002eb1 	.word	0x08002eb1
 8002e44:	08002eb1 	.word	0x08002eb1
 8002e48:	08002eb1 	.word	0x08002eb1
 8002e4c:	08002ea1 	.word	0x08002ea1
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
        break;
 8002e56:	e030      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
        break;
 8002e5e:	e02c      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2202      	movs	r2, #2
 8002e64:	701a      	strb	r2, [r3, #0]
        break;
 8002e66:	e028      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	701a      	strb	r2, [r3, #0]
        break;
 8002e6e:	e024      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
       case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2204      	movs	r2, #4
 8002e74:	701a      	strb	r2, [r3, #0]
        break;
 8002e76:	e020      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2205      	movs	r2, #5
 8002e7c:	701a      	strb	r2, [r3, #0]
        break;
 8002e7e:	e01c      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2206      	movs	r2, #6
 8002e84:	701a      	strb	r2, [r3, #0]
        break;
 8002e86:	e018      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2207      	movs	r2, #7
 8002e8c:	701a      	strb	r2, [r3, #0]
        break;
 8002e8e:	e014      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
       case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2208      	movs	r2, #8
 8002e94:	701a      	strb	r2, [r3, #0]
        break;
 8002e96:	e010      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2209      	movs	r2, #9
 8002e9c:	701a      	strb	r2, [r3, #0]
        break;
 8002e9e:	e00c      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2232      	movs	r2, #50	; 0x32
 8002ea4:	701a      	strb	r2, [r3, #0]
        break;
 8002ea6:	e008      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2212      	movs	r2, #18
 8002eac:	701a      	strb	r2, [r3, #0]
        break;
 8002eae:	e004      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
        break;
 8002eb6:	e000      	b.n	8002eba <lis2dw12_data_rate_get+0x18a>
    }
  }
 8002eb8:	bf00      	nop
  return ret;
 8002eba:	697b      	ldr	r3, [r7, #20]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8002ed0:	f107 0208 	add.w	r2, r7, #8
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	2121      	movs	r1, #33	; 0x21
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff fdab 	bl	8002a34 <lis2dw12_read_reg>
 8002ede:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10f      	bne.n	8002f06 <lis2dw12_block_data_update_set+0x42>
    reg.bdu = val;
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	7a3b      	ldrb	r3, [r7, #8]
 8002ef0:	f362 03c3 	bfi	r3, r2, #3, #1
 8002ef4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8002ef6:	f107 0208 	add.w	r2, r7, #8
 8002efa:	2301      	movs	r3, #1
 8002efc:	2121      	movs	r1, #33	; 0x21
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff fdb0 	bl	8002a64 <lis2dw12_write_reg>
 8002f04:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002f06:	68fb      	ldr	r3, [r7, #12]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8002f1c:	f107 0208 	add.w	r2, r7, #8
 8002f20:	2301      	movs	r3, #1
 8002f22:	2125      	movs	r1, #37	; 0x25
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff fd85 	bl	8002a34 <lis2dw12_read_reg>
 8002f2a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10f      	bne.n	8002f52 <lis2dw12_full_scale_set+0x42>
    reg.fs = (uint8_t) val;
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	7a3b      	ldrb	r3, [r7, #8]
 8002f3c:	f362 1305 	bfi	r3, r2, #4, #2
 8002f40:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8002f42:	f107 0208 	add.w	r2, r7, #8
 8002f46:	2301      	movs	r3, #1
 8002f48:	2125      	movs	r1, #37	; 0x25
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff fd8a 	bl	8002a64 <lis2dw12_write_reg>
 8002f50:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002f52:	68fb      	ldr	r3, [r7, #12]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8002f66:	f107 0208 	add.w	r2, r7, #8
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	2125      	movs	r1, #37	; 0x25
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff fd60 	bl	8002a34 <lis2dw12_read_reg>
 8002f74:	60f8      	str	r0, [r7, #12]

  switch (reg.fs) {
 8002f76:	7a3b      	ldrb	r3, [r7, #8]
 8002f78:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d81a      	bhi.n	8002fb8 <lis2dw12_full_scale_get+0x5c>
 8002f82:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <lis2dw12_full_scale_get+0x2c>)
 8002f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f88:	08002f99 	.word	0x08002f99
 8002f8c:	08002fa1 	.word	0x08002fa1
 8002f90:	08002fa9 	.word	0x08002fa9
 8002f94:	08002fb1 	.word	0x08002fb1
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
      break;
 8002f9e:	e00f      	b.n	8002fc0 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	701a      	strb	r2, [r3, #0]
      break;
 8002fa6:	e00b      	b.n	8002fc0 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2202      	movs	r2, #2
 8002fac:	701a      	strb	r2, [r3, #0]
      break;
 8002fae:	e007      	b.n	8002fc0 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	701a      	strb	r2, [r3, #0]
      break;
 8002fb6:	e003      	b.n	8002fc0 <lis2dw12_full_scale_get+0x64>
    default:
      *val = LIS2DW12_2g;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
      break;
 8002fbe:	bf00      	nop
  }
  return ret;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop

08002fcc <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8002fd6:	f107 020c 	add.w	r2, r7, #12
 8002fda:	2306      	movs	r3, #6
 8002fdc:	2128      	movs	r1, #40	; 0x28
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff fd28 	bl	8002a34 <lis2dw12_read_reg>
 8002fe4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002fe6:	7b7b      	ldrb	r3, [r7, #13]
 8002fe8:	b21a      	sxth	r2, r3
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	021b      	lsls	r3, r3, #8
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	7b3b      	ldrb	r3, [r7, #12]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	b29b      	uxth	r3, r3
 8003002:	b21a      	sxth	r2, r3
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003008:	7bfa      	ldrb	r2, [r7, #15]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	3302      	adds	r3, #2
 800300e:	b212      	sxth	r2, r2
 8003010:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	3302      	adds	r3, #2
 8003016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800301a:	b29b      	uxth	r3, r3
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	b29a      	uxth	r2, r3
 8003020:	7bbb      	ldrb	r3, [r7, #14]
 8003022:	b29b      	uxth	r3, r3
 8003024:	4413      	add	r3, r2
 8003026:	b29a      	uxth	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	3302      	adds	r3, #2
 800302c:	b212      	sxth	r2, r2
 800302e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003030:	7c7a      	ldrb	r2, [r7, #17]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	3304      	adds	r3, #4
 8003036:	b212      	sxth	r2, r2
 8003038:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	3304      	adds	r3, #4
 800303e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003042:	b29b      	uxth	r3, r3
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	b29a      	uxth	r2, r3
 8003048:	7c3b      	ldrb	r3, [r7, #16]
 800304a:	b29b      	uxth	r3, r3
 800304c:	4413      	add	r3, r2
 800304e:	b29a      	uxth	r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	3304      	adds	r3, #4
 8003054:	b212      	sxth	r2, r2
 8003056:	801a      	strh	r2, [r3, #0]

  return ret;
 8003058:	697b      	ldr	r3, [r7, #20]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 800306c:	2301      	movs	r3, #1
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	210f      	movs	r1, #15
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fcde 	bl	8002a34 <lis2dw12_read_reg>
 8003078:	60f8      	str	r0, [r7, #12]
  return ret;
 800307a:	68fb      	ldr	r3, [r7, #12]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8003090:	f107 0208 	add.w	r2, r7, #8
 8003094:	2301      	movs	r3, #1
 8003096:	2121      	movs	r1, #33	; 0x21
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff fccb 	bl	8002a34 <lis2dw12_read_reg>
 800309e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10f      	bne.n	80030c6 <lis2dw12_auto_increment_set+0x42>
    reg.if_add_inc = val;
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	7a3b      	ldrb	r3, [r7, #8]
 80030b0:	f362 0382 	bfi	r3, r2, #2, #1
 80030b4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 80030b6:	f107 0208 	add.w	r2, r7, #8
 80030ba:	2301      	movs	r3, #1
 80030bc:	2121      	movs	r1, #33	; 0x21
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff fcd0 	bl	8002a64 <lis2dw12_write_reg>
 80030c4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80030c6:	68fb      	ldr	r3, [r7, #12]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <lis2dw12_fifo_mode_set>:
  * @param  val      change the values of fmode in reg FIFO_CTRL
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx, lis2dw12_fmode_t val)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 80030dc:	f107 0208 	add.w	r2, r7, #8
 80030e0:	2301      	movs	r3, #1
 80030e2:	212e      	movs	r1, #46	; 0x2e
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff fca5 	bl	8002a34 <lis2dw12_read_reg>
 80030ea:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10f      	bne.n	8003112 <lis2dw12_fifo_mode_set+0x42>
    reg.fmode = (uint8_t) val;
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	7a3b      	ldrb	r3, [r7, #8]
 80030fc:	f362 1347 	bfi	r3, r2, #5, #3
 8003100:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 8003102:	f107 0208 	add.w	r2, r7, #8
 8003106:	2301      	movs	r3, #1
 8003108:	212e      	movs	r1, #46	; 0x2e
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff fcaa 	bl	8002a64 <lis2dw12_write_reg>
 8003110:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8003112:	68fb      	ldr	r3, [r7, #12]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <LIS2MDL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d103      	bne.n	8003138 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003130:	f04f 33ff 	mov.w	r3, #4294967295
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	e05d      	b.n	80031f4 <LIS2MDL_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	7b1a      	ldrb	r2, [r3, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	699a      	ldr	r2, [r3, #24]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a23      	ldr	r2, [pc, #140]	; (8003200 <LIS2MDL_RegisterBusIO+0xe4>)
 8003174:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a22      	ldr	r2, [pc, #136]	; (8003204 <LIS2MDL_RegisterBusIO+0xe8>)
 800317a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d103      	bne.n	8003192 <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	e030      	b.n	80031f4 <LIS2MDL_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4798      	blx	r3
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <LIS2MDL_RegisterBusIO+0x8a>
    {
      ret = LIS2MDL_ERROR;
 800319e:	f04f 33ff 	mov.w	r3, #4294967295
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e026      	b.n	80031f4 <LIS2MDL_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d022      	beq.n	80031f4 <LIS2MDL_RegisterBusIO+0xd8>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d11d      	bne.n	80031f4 <LIS2MDL_RegisterBusIO+0xd8>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d10d      	bne.n	80031dc <LIS2MDL_RegisterBusIO+0xc0>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80031c0:	2334      	movs	r3, #52	; 0x34
 80031c2:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80031c4:	7afb      	ldrb	r3, [r7, #11]
 80031c6:	461a      	mov	r2, r3
 80031c8:	2162      	movs	r1, #98	; 0x62
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fa15 	bl	80035fa <LIS2MDL_Write_Reg>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00e      	beq.n	80031f4 <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
 80031da:	e00c      	b.n	80031f6 <LIS2MDL_RegisterBusIO+0xda>
            }
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	331c      	adds	r3, #28
 80031e0:	2101      	movs	r1, #1
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fbe2 	bl	80039ac <lis2mdl_i2c_interface_set>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
 80031f2:	e000      	b.n	80031f6 <LIS2MDL_RegisterBusIO+0xda>
        }
      }
    }
  }

  return ret;
 80031f4:	68fb      	ldr	r3, [r7, #12]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	08003631 	.word	0x08003631
 8003204:	08003693 	.word	0x08003693

08003208 <LIS2MDL_Init>:
 * @brief  Initialize the LIS2MDL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	331c      	adds	r3, #28
 8003214:	2101      	movs	r1, #1
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fb20 	bl	800385c <lis2mdl_block_data_update_set>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <LIS2MDL_Init+0x20>
  {
    return LIS2MDL_ERROR;
 8003222:	f04f 33ff 	mov.w	r3, #4294967295
 8003226:	e028      	b.n	800327a <LIS2MDL_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	331c      	adds	r3, #28
 800322c:	2102      	movs	r1, #2
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fa90 	bl	8003754 <lis2mdl_operating_mode_set>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <LIS2MDL_Init+0x38>
  {
    return LIS2MDL_ERROR;
 800323a:	f04f 33ff 	mov.w	r3, #4294967295
 800323e:	e01c      	b.n	800327a <LIS2MDL_Init+0x72>
  }

  /* Output data rate selection */
  if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	331c      	adds	r3, #28
 8003244:	2103      	movs	r1, #3
 8003246:	4618      	mov	r0, r3
 8003248:	f000 faaa 	bl	80037a0 <lis2mdl_data_rate_set>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <LIS2MDL_Init+0x50>
  {
    return LIS2MDL_ERROR;
 8003252:	f04f 33ff 	mov.w	r3, #4294967295
 8003256:	e010      	b.n	800327a <LIS2MDL_Init+0x72>
  }

  /* Self Test disabled. */
  if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	331c      	adds	r3, #28
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fb7e 	bl	8003960 <lis2mdl_self_test_set>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <LIS2MDL_Init+0x68>
  {
    return LIS2MDL_ERROR;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	e004      	b.n	800327a <LIS2MDL_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <LIS2MDL_DeInit>:
 * @brief  Deinitialize the LIS2MDL magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f874 	bl	8003378 <LIS2MDL_MAG_Disable>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003296:	f04f 33ff 	mov.w	r3, #4294967295
 800329a:	e004      	b.n	80032a6 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <LIS2MDL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	6039      	str	r1, [r7, #0]
  if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	331c      	adds	r3, #28
 80032bc:	6839      	ldr	r1, [r7, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fb3d 	bl	800393e <lis2mdl_device_id_get>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <LIS2MDL_ReadID+0x22>
  {
    return LIS2MDL_ERROR;
 80032ca:	f04f 33ff 	mov.w	r3, #4294967295
 80032ce:	e000      	b.n	80032d2 <LIS2MDL_ReadID+0x24>
  }

  return LIS2MDL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <LIS2MDL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2200      	movs	r2, #0
 80032f0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2201      	movs	r2, #1
 80032f6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2200      	movs	r2, #0
 80032fc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2200      	movs	r2, #0
 8003302:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2232      	movs	r2, #50	; 0x32
 800330e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	4a04      	ldr	r2, [pc, #16]	; (8003334 <LIS2MDL_GetCapabilities+0x58>)
 8003324:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	42c80000 	.word	0x42c80000

08003338 <LIS2MDL_MAG_Enable>:
 * @brief Enable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	e010      	b.n	8003370 <LIS2MDL_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	331c      	adds	r3, #28
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f000 f9fd 	bl	8003754 <lis2mdl_operating_mode_set>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <LIS2MDL_MAG_Enable+0x2e>
  {
    return LIS2MDL_ERROR;
 8003360:	f04f 33ff 	mov.w	r3, #4294967295
 8003364:	e004      	b.n	8003370 <LIS2MDL_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <LIS2MDL_MAG_Disable>:
 * @brief Disable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e010      	b.n	80033b0 <LIS2MDL_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	331c      	adds	r3, #28
 8003392:	2102      	movs	r1, #2
 8003394:	4618      	mov	r0, r3
 8003396:	f000 f9dd 	bl	8003754 <lis2mdl_operating_mode_set>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <LIS2MDL_MAG_Disable+0x2e>
  {
    return LIS2MDL_ERROR;
 80033a0:	f04f 33ff 	mov.w	r3, #4294967295
 80033a4:	e004      	b.n	80033b0 <LIS2MDL_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <LIS2MDL_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80033c8:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <LIS2MDL_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	331c      	adds	r3, #28
 80033ea:	f107 020b 	add.w	r2, r7, #11
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 f9fb 	bl	80037ec <lis2mdl_data_rate_get>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80033fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003400:	e023      	b.n	800344a <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003402:	7afb      	ldrb	r3, [r7, #11]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d81b      	bhi.n	8003440 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8003408:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003421 	.word	0x08003421
 8003414:	08003429 	.word	0x08003429
 8003418:	08003431 	.word	0x08003431
 800341c:	08003439 	.word	0x08003439
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4a0c      	ldr	r2, [pc, #48]	; (8003454 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8003424:	601a      	str	r2, [r3, #0]
      break;
 8003426:	e00f      	b.n	8003448 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4a0b      	ldr	r2, [pc, #44]	; (8003458 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 800342c:	601a      	str	r2, [r3, #0]
      break;
 800342e:	e00b      	b.n	8003448 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	4a0a      	ldr	r2, [pc, #40]	; (800345c <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8003434:	601a      	str	r2, [r3, #0]
      break;
 8003436:	e007      	b.n	8003448 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4a09      	ldr	r2, [pc, #36]	; (8003460 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 800343c:	601a      	str	r2, [r3, #0]
      break;
 800343e:	e003      	b.n	8003448 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8003440:	f04f 33ff 	mov.w	r3, #4294967295
 8003444:	60fb      	str	r3, [r7, #12]
      break;
 8003446:	bf00      	nop
  }

  return ret;
 8003448:	68fb      	ldr	r3, [r7, #12]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	41200000 	.word	0x41200000
 8003458:	41a00000 	.word	0x41a00000
 800345c:	42480000 	.word	0x42480000
 8003460:	42c80000 	.word	0x42c80000

08003464 <LIS2MDL_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003470:	edd7 7a00 	vldr	s15, [r7]
 8003474:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800347c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003480:	d801      	bhi.n	8003486 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8003482:	2300      	movs	r3, #0
 8003484:	e016      	b.n	80034b4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003486:	edd7 7a00 	vldr	s15, [r7]
 800348a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800348e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003496:	d801      	bhi.n	800349c <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8003498:	2301      	movs	r3, #1
 800349a:	e00b      	b.n	80034b4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800349c:	edd7 7a00 	vldr	s15, [r7]
 80034a0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80034dc <LIS2MDL_MAG_SetOutputDataRate+0x78>
 80034a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ac:	d801      	bhi.n	80034b2 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e000      	b.n	80034b4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80034b2:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 80034b4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	331c      	adds	r3, #28
 80034ba:	7bfa      	ldrb	r2, [r7, #15]
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f96e 	bl	80037a0 <lis2mdl_data_rate_set>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <LIS2MDL_MAG_SetOutputDataRate+0x6c>
  {
    return LIS2MDL_ERROR;
 80034ca:	f04f 33ff 	mov.w	r3, #4294967295
 80034ce:	e000      	b.n	80034d2 <LIS2MDL_MAG_SetOutputDataRate+0x6e>
  }

  return LIS2MDL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	42480000 	.word	0x42480000

080034e0 <LIS2MDL_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2232      	movs	r2, #50	; 0x32
 80034ee:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <LIS2MDL_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <LIS2MDL_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	331c      	adds	r3, #28
 8003524:	f107 0208 	add.w	r2, r7, #8
 8003528:	4611      	mov	r1, r2
 800352a:	4618      	mov	r0, r3
 800352c:	f000 f9bc 	bl	80038a8 <lis2mdl_magnetic_raw_get>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8003536:	f04f 33ff 	mov.w	r3, #4294967295
 800353a:	e00c      	b.n	8003556 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800353c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003544:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800354c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <LIS2MDL_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	331c      	adds	r3, #28
 800356c:	f107 0210 	add.w	r2, r7, #16
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f998 	bl	80038a8 <lis2mdl_magnetic_raw_get>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <LIS2MDL_MAG_GetAxes+0x26>
  {
    return LIS2MDL_ERROR;
 800357e:	f04f 33ff 	mov.w	r3, #4294967295
 8003582:	e036      	b.n	80035f2 <LIS2MDL_MAG_GetAxes+0x94>
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8003584:	f107 030c 	add.w	r3, r7, #12
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ff14 	bl	80033b8 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003590:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003594:	ee07 3a90 	vmov	s15, r3
 8003598:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800359c:	edd7 7a03 	vldr	s15, [r7, #12]
 80035a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035a8:	ee17 2a90 	vmov	r2, s15
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80035b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80035b4:	ee07 3a90 	vmov	s15, r3
 80035b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80035c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035c8:	ee17 2a90 	vmov	r2, s15
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80035d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80035d4:	ee07 3a90 	vmov	s15, r3
 80035d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80035e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035e8:	ee17 2a90 	vmov	r2, s15
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <LIS2MDL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	70fb      	strb	r3, [r7, #3]
 8003606:	4613      	mov	r3, r2
 8003608:	70bb      	strb	r3, [r7, #2]
  if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f103 001c 	add.w	r0, r3, #28
 8003610:	1cba      	adds	r2, r7, #2
 8003612:	78f9      	ldrb	r1, [r7, #3]
 8003614:	2301      	movs	r3, #1
 8003616:	f000 f885 	bl	8003724 <lis2mdl_write_reg>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <LIS2MDL_Write_Reg+0x2c>
  {
    return LIS2MDL_ERROR;
 8003620:	f04f 33ff 	mov.w	r3, #4294967295
 8003624:	e000      	b.n	8003628 <LIS2MDL_Write_Reg+0x2e>
  }

  return LIS2MDL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003630:	b590      	push	{r4, r7, lr}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	461a      	mov	r2, r3
 800363c:	460b      	mov	r3, r1
 800363e:	72fb      	strb	r3, [r7, #11]
 8003640:	4613      	mov	r3, r2
 8003642:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10e      	bne.n	800366e <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	695c      	ldr	r4, [r3, #20]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	7b1b      	ldrb	r3, [r3, #12]
 8003658:	b298      	uxth	r0, r3
 800365a:	7afb      	ldrb	r3, [r7, #11]
 800365c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003660:	b2db      	uxtb	r3, r3
 8003662:	b299      	uxth	r1, r3
 8003664:	893b      	ldrh	r3, [r7, #8]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	47a0      	blx	r4
 800366a:	4603      	mov	r3, r0
 800366c:	e00d      	b.n	800368a <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	695c      	ldr	r4, [r3, #20]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	7b1b      	ldrb	r3, [r3, #12]
 8003676:	b298      	uxth	r0, r3
 8003678:	7afb      	ldrb	r3, [r7, #11]
 800367a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800367e:	b2db      	uxtb	r3, r3
 8003680:	b299      	uxth	r1, r3
 8003682:	893b      	ldrh	r3, [r7, #8]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	47a0      	blx	r4
 8003688:	4603      	mov	r3, r0
  }
}
 800368a:	4618      	mov	r0, r3
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	bd90      	pop	{r4, r7, pc}

08003692 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003692:	b590      	push	{r4, r7, lr}
 8003694:	b087      	sub	sp, #28
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	461a      	mov	r2, r3
 800369e:	460b      	mov	r3, r1
 80036a0:	72fb      	strb	r3, [r7, #11]
 80036a2:	4613      	mov	r3, r2
 80036a4:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10e      	bne.n	80036d0 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	691c      	ldr	r4, [r3, #16]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	7b1b      	ldrb	r3, [r3, #12]
 80036ba:	b298      	uxth	r0, r3
 80036bc:	7afb      	ldrb	r3, [r7, #11]
 80036be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	b299      	uxth	r1, r3
 80036c6:	893b      	ldrh	r3, [r7, #8]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	47a0      	blx	r4
 80036cc:	4603      	mov	r3, r0
 80036ce:	e00d      	b.n	80036ec <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	691c      	ldr	r4, [r3, #16]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	7b1b      	ldrb	r3, [r3, #12]
 80036d8:	b298      	uxth	r0, r3
 80036da:	7afb      	ldrb	r3, [r7, #11]
 80036dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	b299      	uxth	r1, r3
 80036e4:	893b      	ldrh	r3, [r7, #8]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	47a0      	blx	r4
 80036ea:	4603      	mov	r3, r0
  }
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd90      	pop	{r4, r7, pc}

080036f4 <lis2mdl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	461a      	mov	r2, r3
 8003700:	460b      	mov	r3, r1
 8003702:	72fb      	strb	r3, [r7, #11]
 8003704:	4613      	mov	r3, r2
 8003706:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685c      	ldr	r4, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6898      	ldr	r0, [r3, #8]
 8003710:	893b      	ldrh	r3, [r7, #8]
 8003712:	7af9      	ldrb	r1, [r7, #11]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	47a0      	blx	r4
 8003718:	6178      	str	r0, [r7, #20]
  return ret;
 800371a:	697b      	ldr	r3, [r7, #20]
}
 800371c:	4618      	mov	r0, r3
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	bd90      	pop	{r4, r7, pc}

08003724 <lis2mdl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8003724:	b590      	push	{r4, r7, lr}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	607a      	str	r2, [r7, #4]
 800372e:	461a      	mov	r2, r3
 8003730:	460b      	mov	r3, r1
 8003732:	72fb      	strb	r3, [r7, #11]
 8003734:	4613      	mov	r3, r2
 8003736:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681c      	ldr	r4, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6898      	ldr	r0, [r3, #8]
 8003740:	893b      	ldrh	r3, [r7, #8]
 8003742:	7af9      	ldrb	r1, [r7, #11]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	47a0      	blx	r4
 8003748:	6178      	str	r0, [r7, #20]
  return ret;
 800374a:	697b      	ldr	r3, [r7, #20]
}
 800374c:	4618      	mov	r0, r3
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	bd90      	pop	{r4, r7, pc}

08003754 <lis2mdl_operating_mode_set>:
  * @param  val    change the values of md in reg CFG_REG_A
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx, lis2mdl_md_t val)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8003760:	f107 0208 	add.w	r2, r7, #8
 8003764:	2301      	movs	r3, #1
 8003766:	2160      	movs	r1, #96	; 0x60
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ffc3 	bl	80036f4 <lis2mdl_read_reg>
 800376e:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10f      	bne.n	8003796 <lis2mdl_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 8003776:	78fb      	ldrb	r3, [r7, #3]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	b2da      	uxtb	r2, r3
 800377e:	7a3b      	ldrb	r3, [r7, #8]
 8003780:	f362 0301 	bfi	r3, r2, #0, #2
 8003784:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8003786:	f107 0208 	add.w	r2, r7, #8
 800378a:	2301      	movs	r3, #1
 800378c:	2160      	movs	r1, #96	; 0x60
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ffc8 	bl	8003724 <lis2mdl_write_reg>
 8003794:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003796:	68fb      	ldr	r3, [r7, #12]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 80037ac:	f107 0208 	add.w	r2, r7, #8
 80037b0:	2301      	movs	r3, #1
 80037b2:	2160      	movs	r1, #96	; 0x60
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ff9d 	bl	80036f4 <lis2mdl_read_reg>
 80037ba:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10f      	bne.n	80037e2 <lis2mdl_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	7a3b      	ldrb	r3, [r7, #8]
 80037cc:	f362 0383 	bfi	r3, r2, #2, #2
 80037d0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 80037d2:	f107 0208 	add.w	r2, r7, #8
 80037d6:	2301      	movs	r3, #1
 80037d8:	2160      	movs	r1, #96	; 0x60
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ffa2 	bl	8003724 <lis2mdl_write_reg>
 80037e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80037e2:	68fb      	ldr	r3, [r7, #12]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 80037f6:	f107 0208 	add.w	r2, r7, #8
 80037fa:	2301      	movs	r3, #1
 80037fc:	2160      	movs	r1, #96	; 0x60
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff ff78 	bl	80036f4 <lis2mdl_read_reg>
 8003804:	60f8      	str	r0, [r7, #12]
  switch (reg.odr){
 8003806:	7a3b      	ldrb	r3, [r7, #8]
 8003808:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b03      	cmp	r3, #3
 8003810:	d81a      	bhi.n	8003848 <lis2mdl_data_rate_get+0x5c>
 8003812:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <lis2mdl_data_rate_get+0x2c>)
 8003814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003818:	08003829 	.word	0x08003829
 800381c:	08003831 	.word	0x08003831
 8003820:	08003839 	.word	0x08003839
 8003824:	08003841 	.word	0x08003841
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
      break;
 800382e:	e00f      	b.n	8003850 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
      break;
 8003836:	e00b      	b.n	8003850 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2202      	movs	r2, #2
 800383c:	701a      	strb	r2, [r3, #0]
      break;
 800383e:	e007      	b.n	8003850 <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2203      	movs	r2, #3
 8003844:	701a      	strb	r2, [r3, #0]
      break;
 8003846:	e003      	b.n	8003850 <lis2mdl_data_rate_get+0x64>
    default:
      *val = LIS2MDL_ODR_10Hz;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
      break;
 800384e:	bf00      	nop
  }
  return ret;
 8003850:	68fb      	ldr	r3, [r7, #12]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop

0800385c <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8003868:	f107 0208 	add.w	r2, r7, #8
 800386c:	2301      	movs	r3, #1
 800386e:	2162      	movs	r1, #98	; 0x62
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff ff3f 	bl	80036f4 <lis2mdl_read_reg>
 8003876:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10f      	bne.n	800389e <lis2mdl_block_data_update_set+0x42>
    reg.bdu = val;
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	b2da      	uxtb	r2, r3
 8003886:	7a3b      	ldrb	r3, [r7, #8]
 8003888:	f362 1304 	bfi	r3, r2, #4, #1
 800388c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 800388e:	f107 0208 	add.w	r2, r7, #8
 8003892:	2301      	movs	r3, #1
 8003894:	2162      	movs	r1, #98	; 0x62
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ff44 	bl	8003724 <lis2mdl_write_reg>
 800389c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800389e:	68fb      	ldr	r3, [r7, #12]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80038b2:	f107 020c 	add.w	r2, r7, #12
 80038b6:	2306      	movs	r3, #6
 80038b8:	2168      	movs	r1, #104	; 0x68
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff ff1a 	bl	80036f4 <lis2mdl_read_reg>
 80038c0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80038c2:	7b7b      	ldrb	r3, [r7, #13]
 80038c4:	b21a      	sxth	r2, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	7b3b      	ldrb	r3, [r7, #12]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	4413      	add	r3, r2
 80038dc:	b29b      	uxth	r3, r3
 80038de:	b21a      	sxth	r2, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80038e4:	7bfa      	ldrb	r2, [r7, #15]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	3302      	adds	r3, #2
 80038ea:	b212      	sxth	r2, r2
 80038ec:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	3302      	adds	r3, #2
 80038f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	7bbb      	ldrb	r3, [r7, #14]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	4413      	add	r3, r2
 8003902:	b29a      	uxth	r2, r3
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	3302      	adds	r3, #2
 8003908:	b212      	sxth	r2, r2
 800390a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800390c:	7c7a      	ldrb	r2, [r7, #17]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	3304      	adds	r3, #4
 8003912:	b212      	sxth	r2, r2
 8003914:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	3304      	adds	r3, #4
 800391a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800391e:	b29b      	uxth	r3, r3
 8003920:	021b      	lsls	r3, r3, #8
 8003922:	b29a      	uxth	r2, r3
 8003924:	7c3b      	ldrb	r3, [r7, #16]
 8003926:	b29b      	uxth	r3, r3
 8003928:	4413      	add	r3, r2
 800392a:	b29a      	uxth	r2, r3
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	3304      	adds	r3, #4
 8003930:	b212      	sxth	r2, r2
 8003932:	801a      	strh	r2, [r3, #0]

  return ret;
 8003934:	697b      	ldr	r3, [r7, #20]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8003948:	2301      	movs	r3, #1
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	214f      	movs	r1, #79	; 0x4f
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff fed0 	bl	80036f4 <lis2mdl_read_reg>
 8003954:	60f8      	str	r0, [r7, #12]
  return ret;
 8003956:	68fb      	ldr	r3, [r7, #12]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 800396c:	f107 0208 	add.w	r2, r7, #8
 8003970:	2301      	movs	r3, #1
 8003972:	2162      	movs	r1, #98	; 0x62
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff febd 	bl	80036f4 <lis2mdl_read_reg>
 800397a:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <lis2mdl_self_test_set+0x42>
    reg.self_test = val;
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	b2da      	uxtb	r2, r3
 800398a:	7a3b      	ldrb	r3, [r7, #8]
 800398c:	f362 0341 	bfi	r3, r2, #1, #1
 8003990:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8003992:	f107 0208 	add.w	r2, r7, #8
 8003996:	2301      	movs	r3, #1
 8003998:	2162      	movs	r1, #98	; 0x62
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff fec2 	bl	8003724 <lis2mdl_write_reg>
 80039a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80039a2:	68fb      	ldr	r3, [r7, #12]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <lis2mdl_i2c_interface_set>:
  * @param  val   change the values of i2c_dis in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx, lis2mdl_i2c_dis_t val)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 80039b8:	f107 0208 	add.w	r2, r7, #8
 80039bc:	2301      	movs	r3, #1
 80039be:	2162      	movs	r1, #98	; 0x62
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff fe97 	bl	80036f4 <lis2mdl_read_reg>
 80039c6:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <lis2mdl_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	7a3b      	ldrb	r3, [r7, #8]
 80039d8:	f362 1345 	bfi	r3, r2, #5, #1
 80039dc:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 80039de:	f107 0208 	add.w	r2, r7, #8
 80039e2:	2301      	movs	r3, #1
 80039e4:	2162      	movs	r1, #98	; 0x62
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff fe9c 	bl	8003724 <lis2mdl_write_reg>
 80039ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80039ee:	68fb      	ldr	r3, [r7, #12]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <LSM6DSO_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d103      	bne.n	8003a14 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8003a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	e04d      	b.n	8003ab0 <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	7b1a      	ldrb	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a1b      	ldr	r2, [pc, #108]	; (8003abc <LSM6DSO_RegisterBusIO+0xc4>)
 8003a50:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a1a      	ldr	r2, [pc, #104]	; (8003ac0 <LSM6DSO_RegisterBusIO+0xc8>)
 8003a56:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d103      	bne.n	8003a6e <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e020      	b.n	8003ab0 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4798      	blx	r3
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	e016      	b.n	8003ab0 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d112      	bne.n	8003ab0 <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10d      	bne.n	8003ab0 <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003a94:	230c      	movs	r3, #12
 8003a96:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8003a98:	7afb      	ldrb	r3, [r7, #11]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2112      	movs	r1, #18
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 ff57 	bl	8004952 <LSM6DSO_Write_Reg>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 8003aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003aae:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	08004df5 	.word	0x08004df5
 8003ac0:	08004e2b 	.word	0x08004e2b

08003ac4 <LSM6DSO_Init>:
 * @brief  Initialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	331c      	adds	r3, #28
 8003ad0:	2180      	movs	r1, #128	; 0x80
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f001 fe21 	bl	800571a <lsm6dso_i3c_disable_set>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8003ade:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae2:	e060      	b.n	8003ba6 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	331c      	adds	r3, #28
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 fdef 	bl	80056ce <lsm6dso_auto_increment_set>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 8003af6:	f04f 33ff 	mov.w	r3, #4294967295
 8003afa:	e054      	b.n	8003ba6 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	331c      	adds	r3, #28
 8003b00:	2101      	movs	r1, #1
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 fd64 	bl	80055d0 <lsm6dso_block_data_update_set>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b12:	e048      	b.n	8003ba6 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	331c      	adds	r3, #28
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 fe43 	bl	80057a6 <lsm6dso_fifo_mode_set>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	e03c      	b.n	8003ba6 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2204      	movs	r2, #4
 8003b30:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	331c      	adds	r3, #28
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 fa1e 	bl	8004f7c <lsm6dso_xl_data_rate_set>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8003b46:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4a:	e02c      	b.n	8003ba6 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	331c      	adds	r3, #28
 8003b50:	2100      	movs	r1, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 f9b4 	bl	8004ec0 <lsm6dso_xl_full_scale_set>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8003b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b62:	e020      	b.n	8003ba6 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2204      	movs	r2, #4
 8003b68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	331c      	adds	r3, #28
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 fbce 	bl	8005314 <lsm6dso_gy_data_rate_set>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8003b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b82:	e010      	b.n	8003ba6 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	331c      	adds	r3, #28
 8003b88:	2106      	movs	r1, #6
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 fb5a 	bl	8005244 <lsm6dso_gy_full_scale_set>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8003b96:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9a:	e004      	b.n	8003ba6 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <LSM6DSO_DeInit>:
 * @brief  Deinitialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f888 	bl	8003ccc <LSM6DSO_ACC_Disable>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8003bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc6:	e015      	b.n	8003bf4 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fc2c 	bl	8004426 <LSM6DSO_GYRO_Disable>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8003bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd8:	e00c      	b.n	8003bf4 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <LSM6DSO_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	331c      	adds	r3, #28
 8003c0a:	6839      	ldr	r1, [r7, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 fd4d 	bl	80056ac <lsm6dso_device_id_get>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8003c18:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1c:	e000      	b.n	8003c20 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <LSM6DSO_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSO sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2200      	movs	r2, #0
 8003c42:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2200      	movs	r2, #0
 8003c48:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003c50:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2210      	movs	r2, #16
 8003c56:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	4a07      	ldr	r2, [pc, #28]	; (8003c80 <LSM6DSO_GetCapabilities+0x58>)
 8003c62:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4a06      	ldr	r2, [pc, #24]	; (8003c80 <LSM6DSO_GetCapabilities+0x58>)
 8003c68:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	45d02000 	.word	0x45d02000

08003c84 <LSM6DSO_ACC_Enable>:
 * @brief  Enable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d101      	bne.n	8003c9a <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e014      	b.n	8003cc4 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f103 021c 	add.w	r2, r3, #28
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f001 f967 	bl	8004f7c <lsm6dso_xl_data_rate_set>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8003cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb8:	e004      	b.n	8003cc4 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <LSM6DSO_ACC_Disable>:
 * @brief  Disable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e01f      	b.n	8003d22 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f103 021c 	add.w	r2, r3, #28
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	332b      	adds	r3, #43	; 0x2b
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f001 fa40 	bl	8005174 <lsm6dso_xl_data_rate_get>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfe:	e010      	b.n	8003d22 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	331c      	adds	r3, #28
 8003d04:	2100      	movs	r1, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f001 f938 	bl	8004f7c <lsm6dso_xl_data_rate_set>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295
 8003d16:	e004      	b.n	8003d22 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <LSM6DSO_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	331c      	adds	r3, #28
 8003d3e:	f107 020b 	add.w	r2, r7, #11
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 f8e1 	bl	8004f0c <lsm6dso_xl_full_scale_get>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8003d50:	f04f 33ff 	mov.w	r3, #4294967295
 8003d54:	e023      	b.n	8003d9e <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003d56:	7afb      	ldrb	r3, [r7, #11]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d81b      	bhi.n	8003d94 <LSM6DSO_ACC_GetSensitivity+0x68>
 8003d5c:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003d75 	.word	0x08003d75
 8003d68:	08003d8d 	.word	0x08003d8d
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d85 	.word	0x08003d85
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4a0c      	ldr	r2, [pc, #48]	; (8003da8 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8003d78:	601a      	str	r2, [r3, #0]
      break;
 8003d7a:	e00f      	b.n	8003d9c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	4a0b      	ldr	r2, [pc, #44]	; (8003dac <LSM6DSO_ACC_GetSensitivity+0x80>)
 8003d80:	601a      	str	r2, [r3, #0]
      break;
 8003d82:	e00b      	b.n	8003d9c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8003d88:	601a      	str	r2, [r3, #0]
      break;
 8003d8a:	e007      	b.n	8003d9c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	4a09      	ldr	r2, [pc, #36]	; (8003db4 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8003d90:	601a      	str	r2, [r3, #0]
      break;
 8003d92:	e003      	b.n	8003d9c <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003d94:	f04f 33ff 	mov.w	r3, #4294967295
 8003d98:	60fb      	str	r3, [r7, #12]
      break;
 8003d9a:	bf00      	nop
  }

  return ret;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	3d79db23 	.word	0x3d79db23
 8003dac:	3df9db23 	.word	0x3df9db23
 8003db0:	3e79db23 	.word	0x3e79db23
 8003db4:	3ef9db23 	.word	0x3ef9db23

08003db8 <LSM6DSO_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	331c      	adds	r3, #28
 8003dca:	f107 020b 	add.w	r2, r7, #11
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 f9cf 	bl	8005174 <lsm6dso_xl_data_rate_get>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8003ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8003de0:	e054      	b.n	8003e8c <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003de2:	7afb      	ldrb	r3, [r7, #11]
 8003de4:	2b0b      	cmp	r3, #11
 8003de6:	d84c      	bhi.n	8003e82 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8003de8:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8003dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dee:	bf00      	nop
 8003df0:	08003e21 	.word	0x08003e21
 8003df4:	08003e33 	.word	0x08003e33
 8003df8:	08003e3b 	.word	0x08003e3b
 8003dfc:	08003e43 	.word	0x08003e43
 8003e00:	08003e4b 	.word	0x08003e4b
 8003e04:	08003e53 	.word	0x08003e53
 8003e08:	08003e5b 	.word	0x08003e5b
 8003e0c:	08003e63 	.word	0x08003e63
 8003e10:	08003e6b 	.word	0x08003e6b
 8003e14:	08003e73 	.word	0x08003e73
 8003e18:	08003e7b 	.word	0x08003e7b
 8003e1c:	08003e2b 	.word	0x08003e2b
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
      break;
 8003e28:	e02f      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	4a19      	ldr	r2, [pc, #100]	; (8003e94 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8003e2e:	601a      	str	r2, [r3, #0]
      break;
 8003e30:	e02b      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	4a18      	ldr	r2, [pc, #96]	; (8003e98 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8003e36:	601a      	str	r2, [r3, #0]
      break;
 8003e38:	e027      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8003e3e:	601a      	str	r2, [r3, #0]
      break;
 8003e40:	e023      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	4a16      	ldr	r2, [pc, #88]	; (8003ea0 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8003e46:	601a      	str	r2, [r3, #0]
      break;
 8003e48:	e01f      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	4a15      	ldr	r2, [pc, #84]	; (8003ea4 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8003e4e:	601a      	str	r2, [r3, #0]
      break;
 8003e50:	e01b      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	4a14      	ldr	r2, [pc, #80]	; (8003ea8 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8003e56:	601a      	str	r2, [r3, #0]
      break;
 8003e58:	e017      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	4a13      	ldr	r2, [pc, #76]	; (8003eac <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8003e5e:	601a      	str	r2, [r3, #0]
      break;
 8003e60:	e013      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	4a12      	ldr	r2, [pc, #72]	; (8003eb0 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8003e66:	601a      	str	r2, [r3, #0]
      break;
 8003e68:	e00f      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	4a11      	ldr	r2, [pc, #68]	; (8003eb4 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8003e6e:	601a      	str	r2, [r3, #0]
      break;
 8003e70:	e00b      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	4a10      	ldr	r2, [pc, #64]	; (8003eb8 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8003e76:	601a      	str	r2, [r3, #0]
      break;
 8003e78:	e007      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	4a0f      	ldr	r2, [pc, #60]	; (8003ebc <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8003e7e:	601a      	str	r2, [r3, #0]
      break;
 8003e80:	e003      	b.n	8003e8a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295
 8003e86:	60fb      	str	r3, [r7, #12]
      break;
 8003e88:	bf00      	nop
  }

  return ret;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	3fcccccd 	.word	0x3fcccccd
 8003e98:	41480000 	.word	0x41480000
 8003e9c:	41d00000 	.word	0x41d00000
 8003ea0:	42500000 	.word	0x42500000
 8003ea4:	42d00000 	.word	0x42d00000
 8003ea8:	43500000 	.word	0x43500000
 8003eac:	43d08000 	.word	0x43d08000
 8003eb0:	44504000 	.word	0x44504000
 8003eb4:	44d06000 	.word	0x44d06000
 8003eb8:	45505000 	.word	0x45505000
 8003ebc:	45d05800 	.word	0x45d05800

08003ec0 <LSM6DSO_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8003ecc:	2100      	movs	r1, #0
 8003ece:	ed97 0a00 	vldr	s0, [r7]
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f806 	bl	8003ee4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8003ed8:	4603      	mov	r3, r0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the accelerometer operating mode
 * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08c      	sub	sp, #48	; 0x30
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  switch (Mode)
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d079      	beq.n	8003ff6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	f000 80e5 	beq.w	80040d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f040 815e 	bne.w	80041ca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f103 001c 	add.w	r0, r3, #28
 8003f14:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003f18:	2301      	movs	r3, #1
 8003f1a:	2114      	movs	r1, #20
 8003f1c:	f000 ffa0 	bl	8004e60 <lsm6dso_read_reg>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x48>
      {
        return LSM6DSO_ERROR;
 8003f26:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2a:	e16c      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val1.xl_ulp_en != 0U)
 8003f2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d025      	beq.n	8003f86 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d10b      	bne.n	8003f5c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x78>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	331c      	adds	r3, #28
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 f816 	bl	8004f7c <lsm6dso_xl_data_rate_set>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x78>
          {
            return LSM6DSO_ERROR;
 8003f56:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5a:	e154      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
          }
        }

        val1.xl_ulp_en = 0;
 8003f5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f60:	f36f 13c7 	bfc	r3, #7, #1
 8003f64:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f103 001c 	add.w	r0, r3, #28
 8003f6e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003f72:	2301      	movs	r3, #1
 8003f74:	2114      	movs	r1, #20
 8003f76:	f000 ff8b 	bl	8004e90 <lsm6dso_write_reg>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
        {
          return LSM6DSO_ERROR;
 8003f80:	f04f 33ff 	mov.w	r3, #4294967295
 8003f84:	e13f      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f103 001c 	add.w	r0, r3, #28
 8003f8c:	f107 0220 	add.w	r2, r7, #32
 8003f90:	2301      	movs	r3, #1
 8003f92:	2115      	movs	r1, #21
 8003f94:	f000 ff64 	bl	8004e60 <lsm6dso_read_reg>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc0>
      {
        return LSM6DSO_ERROR;
 8003f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa2:	e130      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val2.xl_hm_mode != 0U)
 8003fa4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d014      	beq.n	8003fdc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf8>
      {
        val2.xl_hm_mode = 0U;
 8003fb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fb6:	f36f 1304 	bfc	r3, #4, #1
 8003fba:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f103 001c 	add.w	r0, r3, #28
 8003fc4:	f107 0220 	add.w	r2, r7, #32
 8003fc8:	2301      	movs	r3, #1
 8003fca:	2115      	movs	r1, #21
 8003fcc:	f000 ff60 	bl	8004e90 <lsm6dso_write_reg>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf8>
        {
          return LSM6DSO_ERROR;
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fda:	e114      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8003fdc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003fe0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fec:	d400      	bmi.n	8003ff0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x10c>
      {
        newOdr = 12.5f;
      }
      break;
 8003fee:	e0f0      	b.n	80041d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
        newOdr = 12.5f;
 8003ff0:	4b87      	ldr	r3, [pc, #540]	; (8004210 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x32c>)
 8003ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff4:	e0ed      	b.n	80041d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f103 001c 	add.w	r0, r3, #28
 8003ffc:	f107 021c 	add.w	r2, r7, #28
 8004000:	2301      	movs	r3, #1
 8004002:	2114      	movs	r1, #20
 8004004:	f000 ff2c 	bl	8004e60 <lsm6dso_read_reg>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x130>
      {
        return LSM6DSO_ERROR;
 800400e:	f04f 33ff 	mov.w	r3, #4294967295
 8004012:	e0f8      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val1.xl_ulp_en != 0U)
 8004014:	7f3b      	ldrb	r3, [r7, #28]
 8004016:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d023      	beq.n	8004068 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004026:	2b01      	cmp	r3, #1
 8004028:	d10b      	bne.n	8004042 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	331c      	adds	r3, #28
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f000 ffa3 	bl	8004f7c <lsm6dso_xl_data_rate_set>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
          {
            return LSM6DSO_ERROR;
 800403c:	f04f 33ff 	mov.w	r3, #4294967295
 8004040:	e0e1      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
          }
        }

        val1.xl_ulp_en = 0;
 8004042:	7f3b      	ldrb	r3, [r7, #28]
 8004044:	f36f 13c7 	bfc	r3, #7, #1
 8004048:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f103 001c 	add.w	r0, r3, #28
 8004050:	f107 021c 	add.w	r2, r7, #28
 8004054:	2301      	movs	r3, #1
 8004056:	2114      	movs	r1, #20
 8004058:	f000 ff1a 	bl	8004e90 <lsm6dso_write_reg>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
        {
          return LSM6DSO_ERROR;
 8004062:	f04f 33ff 	mov.w	r3, #4294967295
 8004066:	e0ce      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f103 001c 	add.w	r0, r3, #28
 800406e:	f107 0218 	add.w	r2, r7, #24
 8004072:	2301      	movs	r3, #1
 8004074:	2115      	movs	r1, #21
 8004076:	f000 fef3 	bl	8004e60 <lsm6dso_read_reg>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a2>
      {
        return LSM6DSO_ERROR;
 8004080:	f04f 33ff 	mov.w	r3, #4294967295
 8004084:	e0bf      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val2.xl_hm_mode == 0U)
 8004086:	7e3b      	ldrb	r3, [r7, #24]
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d112      	bne.n	80040b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
      {
        val2.xl_hm_mode = 1U;
 8004092:	7e3b      	ldrb	r3, [r7, #24]
 8004094:	f043 0310 	orr.w	r3, r3, #16
 8004098:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f103 001c 	add.w	r0, r3, #28
 80040a0:	f107 0218 	add.w	r2, r7, #24
 80040a4:	2301      	movs	r3, #1
 80040a6:	2115      	movs	r1, #21
 80040a8:	f000 fef2 	bl	8004e90 <lsm6dso_write_reg>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
        {
          return LSM6DSO_ERROR;
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295
 80040b6:	e0a6      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80040b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80040bc:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004214 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>
 80040c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c8:	dc00      	bgt.n	80040cc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e8>
      {
        newOdr = 208.0f;
      }
      break;
 80040ca:	e082      	b.n	80041d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
        newOdr = 208.0f;
 80040cc:	4b52      	ldr	r3, [pc, #328]	; (8004218 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>)
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80040d0:	e07f      	b.n	80041d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f103 001c 	add.w	r0, r3, #28
 80040d8:	f107 0210 	add.w	r2, r7, #16
 80040dc:	2301      	movs	r3, #1
 80040de:	2115      	movs	r1, #21
 80040e0:	f000 febe 	bl	8004e60 <lsm6dso_read_reg>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20c>
      {
        return LSM6DSO_ERROR;
 80040ea:	f04f 33ff 	mov.w	r3, #4294967295
 80040ee:	e08a      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val2.xl_hm_mode != 0U)
 80040f0:	7c3b      	ldrb	r3, [r7, #16]
 80040f2:	f003 0310 	and.w	r3, r3, #16
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d012      	beq.n	8004122 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23e>
      {
        val2.xl_hm_mode = 0U;
 80040fc:	7c3b      	ldrb	r3, [r7, #16]
 80040fe:	f36f 1304 	bfc	r3, #4, #1
 8004102:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f103 001c 	add.w	r0, r3, #28
 800410a:	f107 0210 	add.w	r2, r7, #16
 800410e:	2301      	movs	r3, #1
 8004110:	2115      	movs	r1, #21
 8004112:	f000 febd 	bl	8004e90 <lsm6dso_write_reg>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23e>
        {
          return LSM6DSO_ERROR;
 800411c:	f04f 33ff 	mov.w	r3, #4294967295
 8004120:	e071      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004128:	2b01      	cmp	r3, #1
 800412a:	d108      	bne.n	800413e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x25a>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f97a 	bl	8004426 <LSM6DSO_GYRO_Disable>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x25a>
        {
          return LSM6DSO_ERROR;
 8004138:	f04f 33ff 	mov.w	r3, #4294967295
 800413c:	e063      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f103 001c 	add.w	r0, r3, #28
 8004144:	f107 0214 	add.w	r2, r7, #20
 8004148:	2301      	movs	r3, #1
 800414a:	2114      	movs	r1, #20
 800414c:	f000 fe88 	bl	8004e60 <lsm6dso_read_reg>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x278>
      {
        return LSM6DSO_ERROR;
 8004156:	f04f 33ff 	mov.w	r3, #4294967295
 800415a:	e054      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val1.xl_ulp_en == 0U)
 800415c:	7d3b      	ldrb	r3, [r7, #20]
 800415e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d123      	bne.n	80041b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2cc>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800416e:	2b01      	cmp	r3, #1
 8004170:	d10b      	bne.n	800418a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a6>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	331c      	adds	r3, #28
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f000 feff 	bl	8004f7c <lsm6dso_xl_data_rate_set>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a6>
          {
            return LSM6DSO_ERROR;
 8004184:	f04f 33ff 	mov.w	r3, #4294967295
 8004188:	e03d      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
          }
        }

        val1.xl_ulp_en = 1U;
 800418a:	7d3b      	ldrb	r3, [r7, #20]
 800418c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004190:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f103 001c 	add.w	r0, r3, #28
 8004198:	f107 0214 	add.w	r2, r7, #20
 800419c:	2301      	movs	r3, #1
 800419e:	2114      	movs	r1, #20
 80041a0:	f000 fe76 	bl	8004e90 <lsm6dso_write_reg>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2cc>
        {
          return LSM6DSO_ERROR;
 80041aa:	f04f 33ff 	mov.w	r3, #4294967295
 80041ae:	e02a      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80041b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80041b4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004214 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>
 80041b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c0:	dc00      	bgt.n	80041c4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e0>
      {
        newOdr = 208.0f;
      }
      break;
 80041c2:	e006      	b.n	80041d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
        newOdr = 208.0f;
 80041c4:	4b14      	ldr	r3, [pc, #80]	; (8004218 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>)
 80041c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80041c8:	e003      	b.n	80041d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
    }
    default:
      ret = LSM6DSO_ERROR;
 80041ca:	f04f 33ff 	mov.w	r3, #4294967295
 80041ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80041d0:	bf00      	nop
  }

  if(ret == LSM6DSO_ERROR)
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d102      	bne.n	80041e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2fc>
  {
    return LSM6DSO_ERROR;
 80041da:	f04f 33ff 	mov.w	r3, #4294967295
 80041de:	e012      	b.n	8004206 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
  }

  if (pObj->acc_is_enabled == 1U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d106      	bne.n	80041f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x314>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80041ea:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fbca 	bl	8004988 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 80041f4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80041f6:	e005      	b.n	8004204 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80041f8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 fc5b 	bl	8004ab8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8004202:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8004204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004206:	4618      	mov	r0, r3
 8004208:	3730      	adds	r7, #48	; 0x30
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	41480000 	.word	0x41480000
 8004214:	43500000 	.word	0x43500000
 8004218:	43500000 	.word	0x43500000

0800421c <LSM6DSO_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	331c      	adds	r3, #28
 800422e:	f107 020b 	add.w	r2, r7, #11
 8004232:	4611      	mov	r1, r2
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fe69 	bl	8004f0c <lsm6dso_xl_full_scale_get>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004240:	f04f 33ff 	mov.w	r3, #4294967295
 8004244:	e023      	b.n	800428e <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004246:	7afb      	ldrb	r3, [r7, #11]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d81b      	bhi.n	8004284 <LSM6DSO_ACC_GetFullScale+0x68>
 800424c:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <LSM6DSO_ACC_GetFullScale+0x38>)
 800424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004252:	bf00      	nop
 8004254:	08004265 	.word	0x08004265
 8004258:	0800427d 	.word	0x0800427d
 800425c:	0800426d 	.word	0x0800426d
 8004260:	08004275 	.word	0x08004275
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2202      	movs	r2, #2
 8004268:	601a      	str	r2, [r3, #0]
      break;
 800426a:	e00f      	b.n	800428c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2204      	movs	r2, #4
 8004270:	601a      	str	r2, [r3, #0]
      break;
 8004272:	e00b      	b.n	800428c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2208      	movs	r2, #8
 8004278:	601a      	str	r2, [r3, #0]
      break;
 800427a:	e007      	b.n	800428c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2210      	movs	r2, #16
 8004280:	601a      	str	r2, [r3, #0]
      break;
 8004282:	e003      	b.n	800428c <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8004284:	f04f 33ff 	mov.w	r3, #4294967295
 8004288:	60fb      	str	r3, [r7, #12]
      break;
 800428a:	bf00      	nop
  }

  return ret;
 800428c:	68fb      	ldr	r3, [r7, #12]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop

08004298 <LSM6DSO_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	dd0b      	ble.n	80042c0 <LSM6DSO_ACC_SetFullScale+0x28>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	dd06      	ble.n	80042bc <LSM6DSO_ACC_SetFullScale+0x24>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	dc01      	bgt.n	80042b8 <LSM6DSO_ACC_SetFullScale+0x20>
 80042b4:	2303      	movs	r3, #3
 80042b6:	e004      	b.n	80042c2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e002      	b.n	80042c2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80042bc:	2302      	movs	r3, #2
 80042be:	e000      	b.n	80042c2 <LSM6DSO_ACC_SetFullScale+0x2a>
 80042c0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 80042c2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	331c      	adds	r3, #28
 80042c8:	7bfa      	ldrb	r2, [r7, #15]
 80042ca:	4611      	mov	r1, r2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fdf7 	bl	8004ec0 <lsm6dso_xl_full_scale_set>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 80042d8:	f04f 33ff 	mov.w	r3, #4294967295
 80042dc:	e000      	b.n	80042e0 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <LSM6DSO_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	331c      	adds	r3, #28
 80042f6:	f107 0208 	add.w	r2, r7, #8
 80042fa:	4611      	mov	r1, r2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 f99e 	bl	800563e <lsm6dso_acceleration_raw_get>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004308:	f04f 33ff 	mov.w	r3, #4294967295
 800430c:	e00c      	b.n	8004328 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800430e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004316:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800431e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <LSM6DSO_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	331c      	adds	r3, #28
 8004344:	f107 0210 	add.w	r2, r7, #16
 8004348:	4611      	mov	r1, r2
 800434a:	4618      	mov	r0, r3
 800434c:	f001 f977 	bl	800563e <lsm6dso_acceleration_raw_get>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8004356:	f04f 33ff 	mov.w	r3, #4294967295
 800435a:	e03c      	b.n	80043d6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800435c:	f107 030c 	add.w	r3, r7, #12
 8004360:	4619      	mov	r1, r3
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff fce2 	bl	8003d2c <LSM6DSO_ACC_GetSensitivity>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 800436e:	f04f 33ff 	mov.w	r3, #4294967295
 8004372:	e030      	b.n	80043d6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004374:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004378:	ee07 3a90 	vmov	s15, r3
 800437c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004380:	edd7 7a03 	vldr	s15, [r7, #12]
 8004384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800438c:	ee17 2a90 	vmov	r2, s15
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004394:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004398:	ee07 3a90 	vmov	s15, r3
 800439c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80043a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043ac:	ee17 2a90 	vmov	r2, s15
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80043b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80043b8:	ee07 3a90 	vmov	s15, r3
 80043bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80043c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043cc:	ee17 2a90 	vmov	r2, s15
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <LSM6DSO_GYRO_Enable>:
 * @brief  Enable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e014      	b.n	800441e <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f103 021c 	add.w	r2, r3, #28
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f000 ff86 	bl	8005314 <lsm6dso_gy_data_rate_set>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800440e:	f04f 33ff 	mov.w	r3, #4294967295
 8004412:	e004      	b.n	800441e <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <LSM6DSO_GYRO_Disable>:
 * @brief  Disable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	e01f      	b.n	800447c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f103 021c 	add.w	r2, r3, #28
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	332c      	adds	r3, #44	; 0x2c
 8004446:	4619      	mov	r1, r3
 8004448:	4610      	mov	r0, r2
 800444a:	f001 f85f 	bl	800550c <lsm6dso_gy_data_rate_get>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004454:	f04f 33ff 	mov.w	r3, #4294967295
 8004458:	e010      	b.n	800447c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	331c      	adds	r3, #28
 800445e:	2100      	movs	r1, #0
 8004460:	4618      	mov	r0, r3
 8004462:	f000 ff57 	bl	8005314 <lsm6dso_gy_data_rate_set>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800446c:	f04f 33ff 	mov.w	r3, #4294967295
 8004470:	e004      	b.n	800447c <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <LSM6DSO_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	331c      	adds	r3, #28
 8004496:	f107 020b 	add.w	r2, r7, #11
 800449a:	4611      	mov	r1, r2
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fef7 	bl	8005290 <lsm6dso_gy_full_scale_get>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80044a8:	f04f 33ff 	mov.w	r3, #4294967295
 80044ac:	e02d      	b.n	800450a <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80044ae:	7afb      	ldrb	r3, [r7, #11]
 80044b0:	2b06      	cmp	r3, #6
 80044b2:	d825      	bhi.n	8004500 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 80044b4:	a201      	add	r2, pc, #4	; (adr r2, 80044bc <LSM6DSO_GYRO_GetSensitivity+0x38>)
 80044b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ba:	bf00      	nop
 80044bc:	080044e1 	.word	0x080044e1
 80044c0:	080044d9 	.word	0x080044d9
 80044c4:	080044e9 	.word	0x080044e9
 80044c8:	08004501 	.word	0x08004501
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	08004501 	.word	0x08004501
 80044d4:	080044f9 	.word	0x080044f9
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	4a0e      	ldr	r2, [pc, #56]	; (8004514 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 80044dc:	601a      	str	r2, [r3, #0]
      break;
 80044de:	e013      	b.n	8004508 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	4a0d      	ldr	r2, [pc, #52]	; (8004518 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 80044e4:	601a      	str	r2, [r3, #0]
      break;
 80044e6:	e00f      	b.n	8004508 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4a0c      	ldr	r2, [pc, #48]	; (800451c <LSM6DSO_GYRO_GetSensitivity+0x98>)
 80044ec:	601a      	str	r2, [r3, #0]
      break;
 80044ee:	e00b      	b.n	8004508 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	4a0b      	ldr	r2, [pc, #44]	; (8004520 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 80044f4:	601a      	str	r2, [r3, #0]
      break;
 80044f6:	e007      	b.n	8004508 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	4a0a      	ldr	r2, [pc, #40]	; (8004524 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 80044fc:	601a      	str	r2, [r3, #0]
      break;
 80044fe:	e003      	b.n	8004508 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8004500:	f04f 33ff 	mov.w	r3, #4294967295
 8004504:	60fb      	str	r3, [r7, #12]
      break;
 8004506:	bf00      	nop
  }

  return ret;
 8004508:	68fb      	ldr	r3, [r7, #12]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	408c0000 	.word	0x408c0000
 8004518:	410c0000 	.word	0x410c0000
 800451c:	418c0000 	.word	0x418c0000
 8004520:	420c0000 	.word	0x420c0000
 8004524:	428c0000 	.word	0x428c0000

08004528 <LSM6DSO_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	331c      	adds	r3, #28
 800453a:	f107 020b 	add.w	r2, r7, #11
 800453e:	4611      	mov	r1, r2
 8004540:	4618      	mov	r0, r3
 8004542:	f000 ffe3 	bl	800550c <lsm6dso_gy_data_rate_get>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 800454c:	f04f 33ff 	mov.w	r3, #4294967295
 8004550:	e04e      	b.n	80045f0 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004552:	7afb      	ldrb	r3, [r7, #11]
 8004554:	2b0a      	cmp	r3, #10
 8004556:	d846      	bhi.n	80045e6 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8004558:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	0800458d 	.word	0x0800458d
 8004564:	08004597 	.word	0x08004597
 8004568:	0800459f 	.word	0x0800459f
 800456c:	080045a7 	.word	0x080045a7
 8004570:	080045af 	.word	0x080045af
 8004574:	080045b7 	.word	0x080045b7
 8004578:	080045bf 	.word	0x080045bf
 800457c:	080045c7 	.word	0x080045c7
 8004580:	080045cf 	.word	0x080045cf
 8004584:	080045d7 	.word	0x080045d7
 8004588:	080045df 	.word	0x080045df
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
      break;
 8004594:	e02b      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 800459a:	601a      	str	r2, [r3, #0]
      break;
 800459c:	e027      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	4a16      	ldr	r2, [pc, #88]	; (80045fc <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 80045a2:	601a      	str	r2, [r3, #0]
      break;
 80045a4:	e023      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	4a15      	ldr	r2, [pc, #84]	; (8004600 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 80045aa:	601a      	str	r2, [r3, #0]
      break;
 80045ac:	e01f      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	4a14      	ldr	r2, [pc, #80]	; (8004604 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 80045b2:	601a      	str	r2, [r3, #0]
      break;
 80045b4:	e01b      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	4a13      	ldr	r2, [pc, #76]	; (8004608 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 80045ba:	601a      	str	r2, [r3, #0]
      break;
 80045bc:	e017      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	4a12      	ldr	r2, [pc, #72]	; (800460c <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 80045c2:	601a      	str	r2, [r3, #0]
      break;
 80045c4:	e013      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	4a11      	ldr	r2, [pc, #68]	; (8004610 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 80045ca:	601a      	str	r2, [r3, #0]
      break;
 80045cc:	e00f      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	4a10      	ldr	r2, [pc, #64]	; (8004614 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 80045d2:	601a      	str	r2, [r3, #0]
      break;
 80045d4:	e00b      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	4a0f      	ldr	r2, [pc, #60]	; (8004618 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 80045da:	601a      	str	r2, [r3, #0]
      break;
 80045dc:	e007      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	4a0e      	ldr	r2, [pc, #56]	; (800461c <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 80045e2:	601a      	str	r2, [r3, #0]
      break;
 80045e4:	e003      	b.n	80045ee <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 80045e6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ea:	60fb      	str	r3, [r7, #12]
      break;
 80045ec:	bf00      	nop
  }

  return ret;
 80045ee:	68fb      	ldr	r3, [r7, #12]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	41480000 	.word	0x41480000
 80045fc:	41d00000 	.word	0x41d00000
 8004600:	42500000 	.word	0x42500000
 8004604:	42d00000 	.word	0x42d00000
 8004608:	43500000 	.word	0x43500000
 800460c:	43d08000 	.word	0x43d08000
 8004610:	44504000 	.word	0x44504000
 8004614:	44d06000 	.word	0x44d06000
 8004618:	45505000 	.word	0x45505000
 800461c:	45d05800 	.word	0x45d05800

08004620 <LSM6DSO_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 800462c:	2100      	movs	r1, #0
 800462e:	ed97 0a00 	vldr	s0, [r7]
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f806 	bl	8004644 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8004638:	4603      	mov	r3, r0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
 * @param  Odr the output data rate value to be set
 * @param  Mode the gyroscope operating mode
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004650:	460b      	mov	r3, r1
 8004652:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8004662:	2b01      	cmp	r3, #1
 8004664:	d028      	beq.n	80046b8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8004666:	e05c      	b.n	8004722 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f103 001c 	add.w	r0, r3, #28
 800466e:	f107 0214 	add.w	r2, r7, #20
 8004672:	2301      	movs	r3, #1
 8004674:	2116      	movs	r1, #22
 8004676:	f000 fbf3 	bl	8004e60 <lsm6dso_read_reg>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8004680:	f04f 33ff 	mov.w	r3, #4294967295
 8004684:	e06c      	b.n	8004760 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8004686:	7d3b      	ldrb	r3, [r7, #20]
 8004688:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d04b      	beq.n	800472a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8004692:	7d3b      	ldrb	r3, [r7, #20]
 8004694:	f36f 13c7 	bfc	r3, #7, #1
 8004698:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f103 001c 	add.w	r0, r3, #28
 80046a0:	f107 0214 	add.w	r2, r7, #20
 80046a4:	2301      	movs	r3, #1
 80046a6:	2116      	movs	r1, #22
 80046a8:	f000 fbf2 	bl	8004e90 <lsm6dso_write_reg>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d03b      	beq.n	800472a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 80046b2:	f04f 33ff 	mov.w	r3, #4294967295
 80046b6:	e053      	b.n	8004760 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f103 001c 	add.w	r0, r3, #28
 80046be:	f107 0210 	add.w	r2, r7, #16
 80046c2:	2301      	movs	r3, #1
 80046c4:	2116      	movs	r1, #22
 80046c6:	f000 fbcb 	bl	8004e60 <lsm6dso_read_reg>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 80046d0:	f04f 33ff 	mov.w	r3, #4294967295
 80046d4:	e044      	b.n	8004760 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 80046d6:	7c3b      	ldrb	r3, [r7, #16]
 80046d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d112      	bne.n	8004708 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 80046e2:	7c3b      	ldrb	r3, [r7, #16]
 80046e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e8:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f103 001c 	add.w	r0, r3, #28
 80046f0:	f107 0210 	add.w	r2, r7, #16
 80046f4:	2301      	movs	r3, #1
 80046f6:	2116      	movs	r1, #22
 80046f8:	f000 fbca 	bl	8004e90 <lsm6dso_write_reg>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8004702:	f04f 33ff 	mov.w	r3, #4294967295
 8004706:	e02b      	b.n	8004760 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004708:	edd7 7a06 	vldr	s15, [r7, #24]
 800470c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004768 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8004710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004718:	dc00      	bgt.n	800471c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 800471a:	e007      	b.n	800472c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 800471c:	4b13      	ldr	r3, [pc, #76]	; (800476c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 800471e:	61bb      	str	r3, [r7, #24]
 8004720:	e004      	b.n	800472c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004722:	f04f 33ff 	mov.w	r3, #4294967295
 8004726:	61fb      	str	r3, [r7, #28]
      break;
 8004728:	e000      	b.n	800472c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 800472a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d102      	bne.n	800473a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8004734:	f04f 33ff 	mov.w	r3, #4294967295
 8004738:	e012      	b.n	8004760 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004740:	2b01      	cmp	r3, #1
 8004742:	d106      	bne.n	8004752 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004744:	ed97 0a06 	vldr	s0, [r7, #24]
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 fa45 	bl	8004bd8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800474e:	61f8      	str	r0, [r7, #28]
 8004750:	e005      	b.n	800475e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004752:	ed97 0a06 	vldr	s0, [r7, #24]
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 faca 	bl	8004cf0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 800475c:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800475e:	69fb      	ldr	r3, [r7, #28]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3720      	adds	r7, #32
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	43500000 	.word	0x43500000
 800476c:	43500000 	.word	0x43500000

08004770 <LSM6DSO_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	331c      	adds	r3, #28
 8004782:	f107 020b 	add.w	r2, r7, #11
 8004786:	4611      	mov	r1, r2
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fd81 	bl	8005290 <lsm6dso_gy_full_scale_get>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004794:	f04f 33ff 	mov.w	r3, #4294967295
 8004798:	e030      	b.n	80047fc <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800479a:	7afb      	ldrb	r3, [r7, #11]
 800479c:	2b06      	cmp	r3, #6
 800479e:	d828      	bhi.n	80047f2 <LSM6DSO_GYRO_GetFullScale+0x82>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <LSM6DSO_GYRO_GetFullScale+0x38>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047c5 	.word	0x080047c5
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	080047f3 	.word	0x080047f3
 80047b8:	080047df 	.word	0x080047df
 80047bc:	080047f3 	.word	0x080047f3
 80047c0:	080047e9 	.word	0x080047e9
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	227d      	movs	r2, #125	; 0x7d
 80047c8:	601a      	str	r2, [r3, #0]
      break;
 80047ca:	e016      	b.n	80047fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	22fa      	movs	r2, #250	; 0xfa
 80047d0:	601a      	str	r2, [r3, #0]
      break;
 80047d2:	e012      	b.n	80047fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80047da:	601a      	str	r2, [r3, #0]
      break;
 80047dc:	e00d      	b.n	80047fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047e4:	601a      	str	r2, [r3, #0]
      break;
 80047e6:	e008      	b.n	80047fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80047ee:	601a      	str	r2, [r3, #0]
      break;
 80047f0:	e003      	b.n	80047fa <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 80047f2:	f04f 33ff 	mov.w	r3, #4294967295
 80047f6:	60fb      	str	r3, [r7, #12]
      break;
 80047f8:	bf00      	nop
  }

  return ret;
 80047fa:	68fb      	ldr	r3, [r7, #12]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <LSM6DSO_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b7d      	cmp	r3, #125	; 0x7d
 8004812:	dd12      	ble.n	800483a <LSM6DSO_GYRO_SetFullScale+0x36>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2bfa      	cmp	r3, #250	; 0xfa
 8004818:	dd0d      	ble.n	8004836 <LSM6DSO_GYRO_SetFullScale+0x32>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004820:	dd07      	ble.n	8004832 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004828:	dc01      	bgt.n	800482e <LSM6DSO_GYRO_SetFullScale+0x2a>
 800482a:	2304      	movs	r3, #4
 800482c:	e006      	b.n	800483c <LSM6DSO_GYRO_SetFullScale+0x38>
 800482e:	2306      	movs	r3, #6
 8004830:	e004      	b.n	800483c <LSM6DSO_GYRO_SetFullScale+0x38>
 8004832:	2302      	movs	r3, #2
 8004834:	e002      	b.n	800483c <LSM6DSO_GYRO_SetFullScale+0x38>
 8004836:	2300      	movs	r3, #0
 8004838:	e000      	b.n	800483c <LSM6DSO_GYRO_SetFullScale+0x38>
 800483a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 800483c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	331c      	adds	r3, #28
 8004842:	7bfa      	ldrb	r2, [r7, #15]
 8004844:	4611      	mov	r1, r2
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fcfc 	bl	8005244 <lsm6dso_gy_full_scale_set>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8004852:	f04f 33ff 	mov.w	r3, #4294967295
 8004856:	e000      	b.n	800485a <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <LSM6DSO_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	331c      	adds	r3, #28
 8004870:	f107 0208 	add.w	r2, r7, #8
 8004874:	4611      	mov	r1, r2
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fed0 	bl	800561c <lsm6dso_angular_rate_raw_get>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004882:	f04f 33ff 	mov.w	r3, #4294967295
 8004886:	e00c      	b.n	80048a2 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004888:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004890:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004898:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <LSM6DSO_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b086      	sub	sp, #24
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	331c      	adds	r3, #28
 80048b8:	f107 0210 	add.w	r2, r7, #16
 80048bc:	4611      	mov	r1, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 feac 	bl	800561c <lsm6dso_angular_rate_raw_get>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80048ca:	f04f 33ff 	mov.w	r3, #4294967295
 80048ce:	e03c      	b.n	800494a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80048d0:	f107 030c 	add.w	r3, r7, #12
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff fdd4 	bl	8004484 <LSM6DSO_GYRO_GetSensitivity>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80048e2:	f04f 33ff 	mov.w	r3, #4294967295
 80048e6:	e030      	b.n	800494a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80048e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80048ec:	ee07 3a90 	vmov	s15, r3
 80048f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80048f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004900:	ee17 2a90 	vmov	r2, s15
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004908:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800490c:	ee07 3a90 	vmov	s15, r3
 8004910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004914:	edd7 7a03 	vldr	s15, [r7, #12]
 8004918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004920:	ee17 2a90 	vmov	r2, s15
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004928:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800492c:	ee07 3a90 	vmov	s15, r3
 8004930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004934:	edd7 7a03 	vldr	s15, [r7, #12]
 8004938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800493c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004940:	ee17 2a90 	vmov	r2, s15
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <LSM6DSO_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	460b      	mov	r3, r1
 800495c:	70fb      	strb	r3, [r7, #3]
 800495e:	4613      	mov	r3, r2
 8004960:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f103 001c 	add.w	r0, r3, #28
 8004968:	1cba      	adds	r2, r7, #2
 800496a:	78f9      	ldrb	r1, [r7, #3]
 800496c:	2301      	movs	r3, #1
 800496e:	f000 fa8f 	bl	8004e90 <lsm6dso_write_reg>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8004978:	f04f 33ff 	mov.w	r3, #4294967295
 800497c:	e000      	b.n	8004980 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004994:	edd7 7a00 	vldr	s15, [r7]
 8004998:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004a98 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 800499c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a4:	d801      	bhi.n	80049aa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 80049a6:	230b      	movs	r3, #11
 80049a8:	e063      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80049aa:	edd7 7a00 	vldr	s15, [r7]
 80049ae:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80049b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ba:	d801      	bhi.n	80049c0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 80049bc:	2301      	movs	r3, #1
 80049be:	e058      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80049c0:	edd7 7a00 	vldr	s15, [r7]
 80049c4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80049c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d0:	d801      	bhi.n	80049d6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e04d      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80049d6:	edd7 7a00 	vldr	s15, [r7]
 80049da:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004a9c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 80049de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e6:	d801      	bhi.n	80049ec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80049e8:	2303      	movs	r3, #3
 80049ea:	e042      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80049ec:	edd7 7a00 	vldr	s15, [r7]
 80049f0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004aa0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80049f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049fc:	d801      	bhi.n	8004a02 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80049fe:	2304      	movs	r3, #4
 8004a00:	e037      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004a02:	edd7 7a00 	vldr	s15, [r7]
 8004a06:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004aa4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8004a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a12:	d801      	bhi.n	8004a18 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004a14:	2305      	movs	r3, #5
 8004a16:	e02c      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004a18:	edd7 7a00 	vldr	s15, [r7]
 8004a1c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004aa8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8004a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a28:	d801      	bhi.n	8004a2e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004a2a:	2306      	movs	r3, #6
 8004a2c:	e021      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004a2e:	edd7 7a00 	vldr	s15, [r7]
 8004a32:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004aac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8004a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3e:	d801      	bhi.n	8004a44 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004a40:	2307      	movs	r3, #7
 8004a42:	e016      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004a44:	edd7 7a00 	vldr	s15, [r7]
 8004a48:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004ab0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8004a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a54:	d801      	bhi.n	8004a5a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004a56:	2308      	movs	r3, #8
 8004a58:	e00b      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004a5a:	edd7 7a00 	vldr	s15, [r7]
 8004a5e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004ab4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8004a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6a:	d801      	bhi.n	8004a70 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8004a6c:	2309      	movs	r3, #9
 8004a6e:	e000      	b.n	8004a72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004a70:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004a72:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
          :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	331c      	adds	r3, #28
 8004a78:	7bfa      	ldrb	r2, [r7, #15]
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fa7d 	bl	8004f7c <lsm6dso_xl_data_rate_set>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8004a88:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8c:	e000      	b.n	8004a90 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	3fcccccd 	.word	0x3fcccccd
 8004a9c:	42500000 	.word	0x42500000
 8004aa0:	42d00000 	.word	0x42d00000
 8004aa4:	43500000 	.word	0x43500000
 8004aa8:	43d08000 	.word	0x43d08000
 8004aac:	44504000 	.word	0x44504000
 8004ab0:	44d06000 	.word	0x44d06000
 8004ab4:	45505000 	.word	0x45505000

08004ab8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004ac4:	edd7 7a00 	vldr	s15, [r7]
 8004ac8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004bb8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004acc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad4:	d801      	bhi.n	8004ada <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004ad6:	230b      	movs	r3, #11
 8004ad8:	e063      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004ada:	edd7 7a00 	vldr	s15, [r7]
 8004ade:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aea:	d801      	bhi.n	8004af0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e058      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004af0:	edd7 7a00 	vldr	s15, [r7]
 8004af4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b00:	d801      	bhi.n	8004b06 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e04d      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004b06:	edd7 7a00 	vldr	s15, [r7]
 8004b0a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004bbc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8004b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b16:	d801      	bhi.n	8004b1c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e042      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004b1c:	edd7 7a00 	vldr	s15, [r7]
 8004b20:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004bc0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8004b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b2c:	d801      	bhi.n	8004b32 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004b2e:	2304      	movs	r3, #4
 8004b30:	e037      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004b32:	edd7 7a00 	vldr	s15, [r7]
 8004b36:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004bc4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8004b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b42:	d801      	bhi.n	8004b48 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004b44:	2305      	movs	r3, #5
 8004b46:	e02c      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004b48:	edd7 7a00 	vldr	s15, [r7]
 8004b4c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004bc8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8004b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b58:	d801      	bhi.n	8004b5e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004b5a:	2306      	movs	r3, #6
 8004b5c:	e021      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004b5e:	edd7 7a00 	vldr	s15, [r7]
 8004b62:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004bcc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8004b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6e:	d801      	bhi.n	8004b74 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004b70:	2307      	movs	r3, #7
 8004b72:	e016      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004b74:	edd7 7a00 	vldr	s15, [r7]
 8004b78:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004bd0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8004b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b84:	d801      	bhi.n	8004b8a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004b86:	2308      	movs	r3, #8
 8004b88:	e00b      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004b8a:	edd7 7a00 	vldr	s15, [r7]
 8004b8e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004bd4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8004b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b9a:	d801      	bhi.n	8004ba0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004b9c:	2309      	movs	r3, #9
 8004b9e:	e000      	b.n	8004ba2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004ba0:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	3fcccccd 	.word	0x3fcccccd
 8004bbc:	42500000 	.word	0x42500000
 8004bc0:	42d00000 	.word	0x42d00000
 8004bc4:	43500000 	.word	0x43500000
 8004bc8:	43d08000 	.word	0x43d08000
 8004bcc:	44504000 	.word	0x44504000
 8004bd0:	44d06000 	.word	0x44d06000
 8004bd4:	45505000 	.word	0x45505000

08004bd8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004be4:	edd7 7a00 	vldr	s15, [r7]
 8004be8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf4:	d801      	bhi.n	8004bfa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e058      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004bfa:	edd7 7a00 	vldr	s15, [r7]
 8004bfe:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0a:	d801      	bhi.n	8004c10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e04d      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c10:	edd7 7a00 	vldr	s15, [r7]
 8004c14:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004cd4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c20:	d801      	bhi.n	8004c26 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004c22:	2303      	movs	r3, #3
 8004c24:	e042      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c26:	edd7 7a00 	vldr	s15, [r7]
 8004c2a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004cd8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c36:	d801      	bhi.n	8004c3c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004c38:	2304      	movs	r3, #4
 8004c3a:	e037      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c3c:	edd7 7a00 	vldr	s15, [r7]
 8004c40:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004cdc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4c:	d801      	bhi.n	8004c52 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004c4e:	2305      	movs	r3, #5
 8004c50:	e02c      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c52:	edd7 7a00 	vldr	s15, [r7]
 8004c56:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004ce0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c62:	d801      	bhi.n	8004c68 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004c64:	2306      	movs	r3, #6
 8004c66:	e021      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c68:	edd7 7a00 	vldr	s15, [r7]
 8004c6c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004ce4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c78:	d801      	bhi.n	8004c7e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004c7a:	2307      	movs	r3, #7
 8004c7c:	e016      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c7e:	edd7 7a00 	vldr	s15, [r7]
 8004c82:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004ce8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8e:	d801      	bhi.n	8004c94 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004c90:	2308      	movs	r3, #8
 8004c92:	e00b      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c94:	edd7 7a00 	vldr	s15, [r7]
 8004c98:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004cec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004c9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca4:	d801      	bhi.n	8004caa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004ca6:	2309      	movs	r3, #9
 8004ca8:	e000      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004caa:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004cac:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
          :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	331c      	adds	r3, #28
 8004cb2:	7bfa      	ldrb	r2, [r7, #15]
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fb2c 	bl	8005314 <lsm6dso_gy_data_rate_set>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8004cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc6:	e000      	b.n	8004cca <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	42500000 	.word	0x42500000
 8004cd8:	42d00000 	.word	0x42d00000
 8004cdc:	43500000 	.word	0x43500000
 8004ce0:	43d08000 	.word	0x43d08000
 8004ce4:	44504000 	.word	0x44504000
 8004ce8:	44d06000 	.word	0x44d06000
 8004cec:	45505000 	.word	0x45505000

08004cf0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004cfc:	edd7 7a00 	vldr	s15, [r7]
 8004d00:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0c:	d801      	bhi.n	8004d12 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e058      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004d12:	edd7 7a00 	vldr	s15, [r7]
 8004d16:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d22:	d801      	bhi.n	8004d28 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e04d      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004d28:	edd7 7a00 	vldr	s15, [r7]
 8004d2c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004dd8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d38:	d801      	bhi.n	8004d3e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e042      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004d3e:	edd7 7a00 	vldr	s15, [r7]
 8004d42:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004ddc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4e:	d801      	bhi.n	8004d54 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004d50:	2304      	movs	r3, #4
 8004d52:	e037      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004d54:	edd7 7a00 	vldr	s15, [r7]
 8004d58:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004de0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d64:	d801      	bhi.n	8004d6a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004d66:	2305      	movs	r3, #5
 8004d68:	e02c      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004d6a:	edd7 7a00 	vldr	s15, [r7]
 8004d6e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004de4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7a:	d801      	bhi.n	8004d80 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004d7c:	2306      	movs	r3, #6
 8004d7e:	e021      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004d80:	edd7 7a00 	vldr	s15, [r7]
 8004d84:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004de8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d90:	d801      	bhi.n	8004d96 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004d92:	2307      	movs	r3, #7
 8004d94:	e016      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004d96:	edd7 7a00 	vldr	s15, [r7]
 8004d9a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004dec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da6:	d801      	bhi.n	8004dac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004da8:	2308      	movs	r3, #8
 8004daa:	e00b      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004dac:	edd7 7a00 	vldr	s15, [r7]
 8004db0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004df0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dbc:	d801      	bhi.n	8004dc2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004dbe:	2309      	movs	r3, #9
 8004dc0:	e000      	b.n	8004dc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004dc2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                 :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	42500000 	.word	0x42500000
 8004ddc:	42d00000 	.word	0x42d00000
 8004de0:	43500000 	.word	0x43500000
 8004de4:	43d08000 	.word	0x43d08000
 8004de8:	44504000 	.word	0x44504000
 8004dec:	44d06000 	.word	0x44d06000
 8004df0:	45505000 	.word	0x45505000

08004df4 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	607a      	str	r2, [r7, #4]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	460b      	mov	r3, r1
 8004e02:	72fb      	strb	r3, [r7, #11]
 8004e04:	4613      	mov	r3, r2
 8004e06:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	695c      	ldr	r4, [r3, #20]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	7b1b      	ldrb	r3, [r3, #12]
 8004e14:	b298      	uxth	r0, r3
 8004e16:	7afb      	ldrb	r3, [r7, #11]
 8004e18:	b299      	uxth	r1, r3
 8004e1a:	893b      	ldrh	r3, [r7, #8]
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	47a0      	blx	r4
 8004e20:	4603      	mov	r3, r0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd90      	pop	{r4, r7, pc}

08004e2a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004e2a:	b590      	push	{r4, r7, lr}
 8004e2c:	b087      	sub	sp, #28
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	461a      	mov	r2, r3
 8004e36:	460b      	mov	r3, r1
 8004e38:	72fb      	strb	r3, [r7, #11]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	691c      	ldr	r4, [r3, #16]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	7b1b      	ldrb	r3, [r3, #12]
 8004e4a:	b298      	uxth	r0, r3
 8004e4c:	7afb      	ldrb	r3, [r7, #11]
 8004e4e:	b299      	uxth	r1, r3
 8004e50:	893b      	ldrh	r3, [r7, #8]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	47a0      	blx	r4
 8004e56:	4603      	mov	r3, r0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	371c      	adds	r7, #28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd90      	pop	{r4, r7, pc}

08004e60 <lsm6dso_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004e60:	b590      	push	{r4, r7, lr}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	607a      	str	r2, [r7, #4]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	72fb      	strb	r3, [r7, #11]
 8004e70:	4613      	mov	r3, r2
 8004e72:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	685c      	ldr	r4, [r3, #4]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6898      	ldr	r0, [r3, #8]
 8004e7c:	893b      	ldrh	r3, [r7, #8]
 8004e7e:	7af9      	ldrb	r1, [r7, #11]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	47a0      	blx	r4
 8004e84:	6178      	str	r0, [r7, #20]
  return ret;
 8004e86:	697b      	ldr	r3, [r7, #20]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd90      	pop	{r4, r7, pc}

08004e90 <lsm6dso_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	607a      	str	r2, [r7, #4]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	72fb      	strb	r3, [r7, #11]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681c      	ldr	r4, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6898      	ldr	r0, [r3, #8]
 8004eac:	893b      	ldrh	r3, [r7, #8]
 8004eae:	7af9      	ldrb	r1, [r7, #11]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	47a0      	blx	r4
 8004eb4:	6178      	str	r0, [r7, #20]
  return ret;
 8004eb6:	697b      	ldr	r3, [r7, #20]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd90      	pop	{r4, r7, pc}

08004ec0 <lsm6dso_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8004ecc:	f107 0208 	add.w	r2, r7, #8
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	2110      	movs	r1, #16
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff ffc3 	bl	8004e60 <lsm6dso_read_reg>
 8004eda:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10f      	bne.n	8004f02 <lsm6dso_xl_full_scale_set+0x42>
    reg.fs_xl = (uint8_t) val;
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	7a3b      	ldrb	r3, [r7, #8]
 8004eec:	f362 0383 	bfi	r3, r2, #2, #2
 8004ef0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8004ef2:	f107 0208 	add.w	r2, r7, #8
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	2110      	movs	r1, #16
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff ffc8 	bl	8004e90 <lsm6dso_write_reg>
 8004f00:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004f02:	68fb      	ldr	r3, [r7, #12]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <lsm6dso_xl_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dso_fs_xl_t *val)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8004f16:	f107 0208 	add.w	r2, r7, #8
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	2110      	movs	r1, #16
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7ff ff9e 	bl	8004e60 <lsm6dso_read_reg>
 8004f24:	60f8      	str	r0, [r7, #12]
  switch (reg.fs_xl) {
 8004f26:	7a3b      	ldrb	r3, [r7, #8]
 8004f28:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d81a      	bhi.n	8004f68 <lsm6dso_xl_full_scale_get+0x5c>
 8004f32:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <lsm6dso_xl_full_scale_get+0x2c>)
 8004f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f38:	08004f49 	.word	0x08004f49
 8004f3c:	08004f51 	.word	0x08004f51
 8004f40:	08004f59 	.word	0x08004f59
 8004f44:	08004f61 	.word	0x08004f61
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	701a      	strb	r2, [r3, #0]
      break;
 8004f4e:	e00f      	b.n	8004f70 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2201      	movs	r2, #1
 8004f54:	701a      	strb	r2, [r3, #0]
      break;
 8004f56:	e00b      	b.n	8004f70 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	701a      	strb	r2, [r3, #0]
      break;
 8004f5e:	e007      	b.n	8004f70 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2203      	movs	r2, #3
 8004f64:	701a      	strb	r2, [r3, #0]
      break;
 8004f66:	e003      	b.n	8004f70 <lsm6dso_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSO_2g;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
      break;
 8004f6e:	bf00      	nop
  }

  return ret;
 8004f70:	68fb      	ldr	r3, [r7, #12]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop

08004f7c <lsm6dso_xl_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dso_odr_xl_t val)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004f8c:	f107 030c 	add.w	r3, r7, #12
 8004f90:	4619      	mov	r1, r3
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fc2d 	bl	80057f2 <lsm6dso_fsm_enable_get>
 8004f98:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f040 80c4 	bne.w	800512a <lsm6dso_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004fa2:	7b3b      	ldrb	r3, [r7, #12]
 8004fa4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004fa8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004faa:	7b3b      	ldrb	r3, [r7, #12]
 8004fac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004fb0:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004fb6:	7b3b      	ldrb	r3, [r7, #12]
 8004fb8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004fbc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004fc2:	7b3b      	ldrb	r3, [r7, #12]
 8004fc4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004fc8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004fce:	7b3b      	ldrb	r3, [r7, #12]
 8004fd0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004fd4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004fda:	7b3b      	ldrb	r3, [r7, #12]
 8004fdc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004fe0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004fe6:	7b3b      	ldrb	r3, [r7, #12]
 8004fe8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004fec:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8004ff2:	7b3b      	ldrb	r3, [r7, #12]
 8004ff4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ff8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004ffe:	7b7b      	ldrb	r3, [r7, #13]
 8005000:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005004:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8005006:	4313      	orrs	r3, r2
 8005008:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800500a:	7b7b      	ldrb	r3, [r7, #13]
 800500c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005010:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8005012:	4313      	orrs	r3, r2
 8005014:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8005016:	7b7b      	ldrb	r3, [r7, #13]
 8005018:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800501c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800501e:	4313      	orrs	r3, r2
 8005020:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8005022:	7b7b      	ldrb	r3, [r7, #13]
 8005024:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005028:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800502a:	4313      	orrs	r3, r2
 800502c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800502e:	7b7b      	ldrb	r3, [r7, #13]
 8005030:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005034:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8005036:	4313      	orrs	r3, r2
 8005038:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800503a:	7b7b      	ldrb	r3, [r7, #13]
 800503c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005040:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8005042:	4313      	orrs	r3, r2
 8005044:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8005046:	7b7b      	ldrb	r3, [r7, #13]
 8005048:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800504c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800504e:	4313      	orrs	r3, r2
 8005050:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 8005052:	7b7b      	ldrb	r3, [r7, #13]
 8005054:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005058:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800505a:	4313      	orrs	r3, r2
 800505c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800505e:	2b01      	cmp	r3, #1
 8005060:	d163      	bne.n	800512a <lsm6dso_xl_data_rate_set+0x1ae>

      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005062:	f107 030b 	add.w	r3, r7, #11
 8005066:	4619      	mov	r1, r3
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fbe3 	bl	8005834 <lsm6dso_fsm_data_rate_get>
 800506e:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d159      	bne.n	800512a <lsm6dso_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8005076:	7afb      	ldrb	r3, [r7, #11]
 8005078:	2b03      	cmp	r3, #3
 800507a:	d853      	bhi.n	8005124 <lsm6dso_xl_data_rate_set+0x1a8>
 800507c:	a201      	add	r2, pc, #4	; (adr r2, 8005084 <lsm6dso_xl_data_rate_set+0x108>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	08005095 	.word	0x08005095
 8005088:	080050a7 	.word	0x080050a7
 800508c:	080050c5 	.word	0x080050c5
 8005090:	080050ef 	.word	0x080050ef
          case LSM6DSO_ODR_FSM_12Hz5:

            if (val == LSM6DSO_XL_ODR_OFF){
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <lsm6dso_xl_data_rate_set+0x124>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 800509a:	2301      	movs	r3, #1
 800509c:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 800509e:	e045      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	75fb      	strb	r3, [r7, #23]
            break;
 80050a4:	e042      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_26Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d102      	bne.n	80050b2 <lsm6dso_xl_data_rate_set+0x136>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80050ac:	2302      	movs	r3, #2
 80050ae:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 80050b0:	e03c      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d102      	bne.n	80050be <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80050b8:	2302      	movs	r3, #2
 80050ba:	75fb      	strb	r3, [r7, #23]
            break;
 80050bc:	e036      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	75fb      	strb	r3, [r7, #23]
            break;
 80050c2:	e033      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_52Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d102      	bne.n	80050d0 <lsm6dso_xl_data_rate_set+0x154>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80050ca:	2303      	movs	r3, #3
 80050cc:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 80050ce:	e02d      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d102      	bne.n	80050dc <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80050d6:	2303      	movs	r3, #3
 80050d8:	75fb      	strb	r3, [r7, #23]
            break;
 80050da:	e027      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_26Hz){
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d102      	bne.n	80050e8 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80050e2:	2303      	movs	r3, #3
 80050e4:	75fb      	strb	r3, [r7, #23]
            break;
 80050e6:	e021      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	75fb      	strb	r3, [r7, #23]
            break;
 80050ec:	e01e      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_104Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d102      	bne.n	80050fa <lsm6dso_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80050f4:	2304      	movs	r3, #4
 80050f6:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 80050f8:	e018      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d102      	bne.n	8005106 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005100:	2304      	movs	r3, #4
 8005102:	75fb      	strb	r3, [r7, #23]
            break;
 8005104:	e012      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_26Hz){
 8005106:	78fb      	ldrb	r3, [r7, #3]
 8005108:	2b02      	cmp	r3, #2
 800510a:	d102      	bne.n	8005112 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800510c:	2304      	movs	r3, #4
 800510e:	75fb      	strb	r3, [r7, #23]
            break;
 8005110:	e00c      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_52Hz){
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	2b03      	cmp	r3, #3
 8005116:	d102      	bne.n	800511e <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005118:	2304      	movs	r3, #4
 800511a:	75fb      	strb	r3, [r7, #23]
            break;
 800511c:	e006      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800511e:	78fb      	ldrb	r3, [r7, #3]
 8005120:	75fb      	strb	r3, [r7, #23]
            break;
 8005122:	e003      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
          default:
            odr_xl = val;
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	75fb      	strb	r3, [r7, #23]
            break;
 8005128:	e000      	b.n	800512c <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 800512a:	bf00      	nop
    }
  }
  if (ret == 0) {
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d107      	bne.n	8005142 <lsm6dso_xl_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8005132:	f107 0208 	add.w	r2, r7, #8
 8005136:	2301      	movs	r3, #1
 8005138:	2110      	movs	r1, #16
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff fe90 	bl	8004e60 <lsm6dso_read_reg>
 8005140:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10f      	bne.n	8005168 <lsm6dso_xl_data_rate_set+0x1ec>
    reg.odr_xl = (uint8_t) odr_xl;
 8005148:	7dfb      	ldrb	r3, [r7, #23]
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	b2da      	uxtb	r2, r3
 8005150:	7a3b      	ldrb	r3, [r7, #8]
 8005152:	f362 1307 	bfi	r3, r2, #4, #4
 8005156:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8005158:	f107 0208 	add.w	r2, r7, #8
 800515c:	2301      	movs	r3, #1
 800515e:	2110      	movs	r1, #16
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7ff fe95 	bl	8004e90 <lsm6dso_write_reg>
 8005166:	6138      	str	r0, [r7, #16]
  }
  return ret;
 8005168:	693b      	ldr	r3, [r7, #16]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop

08005174 <lsm6dso_xl_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_odr_xl_t *val)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 800517e:	f107 0208 	add.w	r2, r7, #8
 8005182:	2301      	movs	r3, #1
 8005184:	2110      	movs	r1, #16
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff fe6a 	bl	8004e60 <lsm6dso_read_reg>
 800518c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl) {
 800518e:	7a3b      	ldrb	r3, [r7, #8]
 8005190:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b0b      	cmp	r3, #11
 8005198:	d84a      	bhi.n	8005230 <lsm6dso_xl_data_rate_get+0xbc>
 800519a:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <lsm6dso_xl_data_rate_get+0x2c>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	080051d1 	.word	0x080051d1
 80051a4:	080051d9 	.word	0x080051d9
 80051a8:	080051e1 	.word	0x080051e1
 80051ac:	080051e9 	.word	0x080051e9
 80051b0:	080051f1 	.word	0x080051f1
 80051b4:	080051f9 	.word	0x080051f9
 80051b8:	08005201 	.word	0x08005201
 80051bc:	08005209 	.word	0x08005209
 80051c0:	08005211 	.word	0x08005211
 80051c4:	08005219 	.word	0x08005219
 80051c8:	08005221 	.word	0x08005221
 80051cc:	08005229 	.word	0x08005229
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
      break;
 80051d6:	e02f      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2201      	movs	r2, #1
 80051dc:	701a      	strb	r2, [r3, #0]
      break;
 80051de:	e02b      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2202      	movs	r2, #2
 80051e4:	701a      	strb	r2, [r3, #0]
      break;
 80051e6:	e027      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2203      	movs	r2, #3
 80051ec:	701a      	strb	r2, [r3, #0]
      break;
 80051ee:	e023      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2204      	movs	r2, #4
 80051f4:	701a      	strb	r2, [r3, #0]
      break;
 80051f6:	e01f      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2205      	movs	r2, #5
 80051fc:	701a      	strb	r2, [r3, #0]
      break;
 80051fe:	e01b      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2206      	movs	r2, #6
 8005204:	701a      	strb	r2, [r3, #0]
      break;
 8005206:	e017      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2207      	movs	r2, #7
 800520c:	701a      	strb	r2, [r3, #0]
      break;
 800520e:	e013      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2208      	movs	r2, #8
 8005214:	701a      	strb	r2, [r3, #0]
      break;
 8005216:	e00f      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2209      	movs	r2, #9
 800521c:	701a      	strb	r2, [r3, #0]
      break;
 800521e:	e00b      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	220a      	movs	r2, #10
 8005224:	701a      	strb	r2, [r3, #0]
      break;
 8005226:	e007      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	220b      	movs	r2, #11
 800522c:	701a      	strb	r2, [r3, #0]
      break;
 800522e:	e003      	b.n	8005238 <lsm6dso_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2200      	movs	r2, #0
 8005234:	701a      	strb	r2, [r3, #0]
      break;
 8005236:	bf00      	nop
  }
  return ret;
 8005238:	68fb      	ldr	r3, [r7, #12]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop

08005244 <lsm6dso_gy_full_scale_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dso_fs_g_t val)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8005250:	f107 0208 	add.w	r2, r7, #8
 8005254:	2301      	movs	r3, #1
 8005256:	2111      	movs	r1, #17
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff fe01 	bl	8004e60 <lsm6dso_read_reg>
 800525e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10f      	bne.n	8005286 <lsm6dso_gy_full_scale_set+0x42>
    reg.fs_g = (uint8_t) val;
 8005266:	78fb      	ldrb	r3, [r7, #3]
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	b2da      	uxtb	r2, r3
 800526e:	7a3b      	ldrb	r3, [r7, #8]
 8005270:	f362 0343 	bfi	r3, r2, #1, #3
 8005274:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8005276:	f107 0208 	add.w	r2, r7, #8
 800527a:	2301      	movs	r3, #1
 800527c:	2111      	movs	r1, #17
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff fe06 	bl	8004e90 <lsm6dso_write_reg>
 8005284:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005286:	68fb      	ldr	r3, [r7, #12]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <lsm6dso_gy_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dso_fs_g_t *val)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 800529a:	f107 0208 	add.w	r2, r7, #8
 800529e:	2301      	movs	r3, #1
 80052a0:	2111      	movs	r1, #17
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff fddc 	bl	8004e60 <lsm6dso_read_reg>
 80052a8:	60f8      	str	r0, [r7, #12]
  switch (reg.fs_g) {
 80052aa:	7a3b      	ldrb	r3, [r7, #8]
 80052ac:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b06      	cmp	r3, #6
 80052b4:	d824      	bhi.n	8005300 <lsm6dso_gy_full_scale_get+0x70>
 80052b6:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <lsm6dso_gy_full_scale_get+0x2c>)
 80052b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052bc:	080052d9 	.word	0x080052d9
 80052c0:	080052e1 	.word	0x080052e1
 80052c4:	080052e9 	.word	0x080052e9
 80052c8:	08005301 	.word	0x08005301
 80052cc:	080052f1 	.word	0x080052f1
 80052d0:	08005301 	.word	0x08005301
 80052d4:	080052f9 	.word	0x080052f9
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2200      	movs	r2, #0
 80052dc:	701a      	strb	r2, [r3, #0]
      break;
 80052de:	e013      	b.n	8005308 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2201      	movs	r2, #1
 80052e4:	701a      	strb	r2, [r3, #0]
      break;
 80052e6:	e00f      	b.n	8005308 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2202      	movs	r2, #2
 80052ec:	701a      	strb	r2, [r3, #0]
      break;
 80052ee:	e00b      	b.n	8005308 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2204      	movs	r2, #4
 80052f4:	701a      	strb	r2, [r3, #0]
      break;
 80052f6:	e007      	b.n	8005308 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2206      	movs	r2, #6
 80052fc:	701a      	strb	r2, [r3, #0]
      break;
 80052fe:	e003      	b.n	8005308 <lsm6dso_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSO_250dps;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2200      	movs	r2, #0
 8005304:	701a      	strb	r2, [r3, #0]
      break;
 8005306:	bf00      	nop
  }

  return ret;
 8005308:	68fb      	ldr	r3, [r7, #12]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop

08005314 <lsm6dso_gy_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dso_odr_g_t val)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005324:	f107 030c 	add.w	r3, r7, #12
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fa61 	bl	80057f2 <lsm6dso_fsm_enable_get>
 8005330:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f040 80c4 	bne.w	80054c2 <lsm6dso_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800533a:	7b3b      	ldrb	r3, [r7, #12]
 800533c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005340:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8005342:	7b3b      	ldrb	r3, [r7, #12]
 8005344:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005348:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800534a:	4313      	orrs	r3, r2
 800534c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800534e:	7b3b      	ldrb	r3, [r7, #12]
 8005350:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005354:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8005356:	4313      	orrs	r3, r2
 8005358:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800535a:	7b3b      	ldrb	r3, [r7, #12]
 800535c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005360:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8005362:	4313      	orrs	r3, r2
 8005364:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8005366:	7b3b      	ldrb	r3, [r7, #12]
 8005368:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800536c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800536e:	4313      	orrs	r3, r2
 8005370:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8005372:	7b3b      	ldrb	r3, [r7, #12]
 8005374:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005378:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 800537a:	4313      	orrs	r3, r2
 800537c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800537e:	7b3b      	ldrb	r3, [r7, #12]
 8005380:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005384:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8005386:	4313      	orrs	r3, r2
 8005388:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 800538a:	7b3b      	ldrb	r3, [r7, #12]
 800538c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005390:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8005392:	4313      	orrs	r3, r2
 8005394:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8005396:	7b7b      	ldrb	r3, [r7, #13]
 8005398:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800539c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 800539e:	4313      	orrs	r3, r2
 80053a0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80053a2:	7b7b      	ldrb	r3, [r7, #13]
 80053a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80053a8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80053aa:	4313      	orrs	r3, r2
 80053ac:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80053ae:	7b7b      	ldrb	r3, [r7, #13]
 80053b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80053b4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80053b6:	4313      	orrs	r3, r2
 80053b8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80053ba:	7b7b      	ldrb	r3, [r7, #13]
 80053bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80053c0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80053c2:	4313      	orrs	r3, r2
 80053c4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80053c6:	7b7b      	ldrb	r3, [r7, #13]
 80053c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80053cc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80053ce:	4313      	orrs	r3, r2
 80053d0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80053d2:	7b7b      	ldrb	r3, [r7, #13]
 80053d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80053d8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80053da:	4313      	orrs	r3, r2
 80053dc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80053de:	7b7b      	ldrb	r3, [r7, #13]
 80053e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80053e4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80053e6:	4313      	orrs	r3, r2
 80053e8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 80053ea:	7b7b      	ldrb	r3, [r7, #13]
 80053ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80053f0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80053f2:	4313      	orrs	r3, r2
 80053f4:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d163      	bne.n	80054c2 <lsm6dso_gy_data_rate_set+0x1ae>

      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80053fa:	f107 030b 	add.w	r3, r7, #11
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fa17 	bl	8005834 <lsm6dso_fsm_data_rate_get>
 8005406:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d159      	bne.n	80054c2 <lsm6dso_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 800540e:	7afb      	ldrb	r3, [r7, #11]
 8005410:	2b03      	cmp	r3, #3
 8005412:	d853      	bhi.n	80054bc <lsm6dso_gy_data_rate_set+0x1a8>
 8005414:	a201      	add	r2, pc, #4	; (adr r2, 800541c <lsm6dso_gy_data_rate_set+0x108>)
 8005416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541a:	bf00      	nop
 800541c:	0800542d 	.word	0x0800542d
 8005420:	0800543f 	.word	0x0800543f
 8005424:	0800545d 	.word	0x0800545d
 8005428:	08005487 	.word	0x08005487
          case LSM6DSO_ODR_FSM_12Hz5:

            if (val == LSM6DSO_GY_ODR_OFF){
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d102      	bne.n	8005438 <lsm6dso_gy_data_rate_set+0x124>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8005432:	2301      	movs	r3, #1
 8005434:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 8005436:	e045      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	75fb      	strb	r3, [r7, #23]
            break;
 800543c:	e042      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_26Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <lsm6dso_gy_data_rate_set+0x136>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005444:	2302      	movs	r3, #2
 8005446:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 8005448:	e03c      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 800544a:	78fb      	ldrb	r3, [r7, #3]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d102      	bne.n	8005456 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005450:	2302      	movs	r3, #2
 8005452:	75fb      	strb	r3, [r7, #23]
            break;
 8005454:	e036      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	75fb      	strb	r3, [r7, #23]
            break;
 800545a:	e033      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_52Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d102      	bne.n	8005468 <lsm6dso_gy_data_rate_set+0x154>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005462:	2303      	movs	r3, #3
 8005464:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 8005466:	e02d      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d102      	bne.n	8005474 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800546e:	2303      	movs	r3, #3
 8005470:	75fb      	strb	r3, [r7, #23]
            break;
 8005472:	e027      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_26Hz){
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d102      	bne.n	8005480 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800547a:	2303      	movs	r3, #3
 800547c:	75fb      	strb	r3, [r7, #23]
            break;
 800547e:	e021      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	75fb      	strb	r3, [r7, #23]
            break;
 8005484:	e01e      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_104Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 8005486:	78fb      	ldrb	r3, [r7, #3]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <lsm6dso_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800548c:	2304      	movs	r3, #4
 800548e:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 8005490:	e018      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d102      	bne.n	800549e <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005498:	2304      	movs	r3, #4
 800549a:	75fb      	strb	r3, [r7, #23]
            break;
 800549c:	e012      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_26Hz){
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d102      	bne.n	80054aa <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80054a4:	2304      	movs	r3, #4
 80054a6:	75fb      	strb	r3, [r7, #23]
            break;
 80054a8:	e00c      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_52Hz){
 80054aa:	78fb      	ldrb	r3, [r7, #3]
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d102      	bne.n	80054b6 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80054b0:	2304      	movs	r3, #4
 80054b2:	75fb      	strb	r3, [r7, #23]
            break;
 80054b4:	e006      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80054b6:	78fb      	ldrb	r3, [r7, #3]
 80054b8:	75fb      	strb	r3, [r7, #23]
            break;
 80054ba:	e003      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
          default:
            odr_gy = val;
 80054bc:	78fb      	ldrb	r3, [r7, #3]
 80054be:	75fb      	strb	r3, [r7, #23]
            break;
 80054c0:	e000      	b.n	80054c4 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 80054c2:	bf00      	nop
    }
  }

  if (ret == 0) {
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d107      	bne.n	80054da <lsm6dso_gy_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 80054ca:	f107 0208 	add.w	r2, r7, #8
 80054ce:	2301      	movs	r3, #1
 80054d0:	2111      	movs	r1, #17
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff fcc4 	bl	8004e60 <lsm6dso_read_reg>
 80054d8:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10f      	bne.n	8005500 <lsm6dso_gy_data_rate_set+0x1ec>
    reg.odr_g = (uint8_t) odr_gy;
 80054e0:	7dfb      	ldrb	r3, [r7, #23]
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	7a3b      	ldrb	r3, [r7, #8]
 80054ea:	f362 1307 	bfi	r3, r2, #4, #4
 80054ee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 80054f0:	f107 0208 	add.w	r2, r7, #8
 80054f4:	2301      	movs	r3, #1
 80054f6:	2111      	movs	r1, #17
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff fcc9 	bl	8004e90 <lsm6dso_write_reg>
 80054fe:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005500:	693b      	ldr	r3, [r7, #16]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop

0800550c <lsm6dso_gy_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_odr_g_t *val)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8005516:	f107 0208 	add.w	r2, r7, #8
 800551a:	2301      	movs	r3, #1
 800551c:	2111      	movs	r1, #17
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff fc9e 	bl	8004e60 <lsm6dso_read_reg>
 8005524:	60f8      	str	r0, [r7, #12]
  switch (reg.odr_g) {
 8005526:	7a3b      	ldrb	r3, [r7, #8]
 8005528:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b0a      	cmp	r3, #10
 8005530:	d844      	bhi.n	80055bc <lsm6dso_gy_data_rate_get+0xb0>
 8005532:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <lsm6dso_gy_data_rate_get+0x2c>)
 8005534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005538:	08005565 	.word	0x08005565
 800553c:	0800556d 	.word	0x0800556d
 8005540:	08005575 	.word	0x08005575
 8005544:	0800557d 	.word	0x0800557d
 8005548:	08005585 	.word	0x08005585
 800554c:	0800558d 	.word	0x0800558d
 8005550:	08005595 	.word	0x08005595
 8005554:	0800559d 	.word	0x0800559d
 8005558:	080055a5 	.word	0x080055a5
 800555c:	080055ad 	.word	0x080055ad
 8005560:	080055b5 	.word	0x080055b5
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
      break;
 800556a:	e02b      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2201      	movs	r2, #1
 8005570:	701a      	strb	r2, [r3, #0]
      break;
 8005572:	e027      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2202      	movs	r2, #2
 8005578:	701a      	strb	r2, [r3, #0]
      break;
 800557a:	e023      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2203      	movs	r2, #3
 8005580:	701a      	strb	r2, [r3, #0]
      break;
 8005582:	e01f      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2204      	movs	r2, #4
 8005588:	701a      	strb	r2, [r3, #0]
      break;
 800558a:	e01b      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2205      	movs	r2, #5
 8005590:	701a      	strb	r2, [r3, #0]
      break;
 8005592:	e017      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2206      	movs	r2, #6
 8005598:	701a      	strb	r2, [r3, #0]
      break;
 800559a:	e013      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2207      	movs	r2, #7
 80055a0:	701a      	strb	r2, [r3, #0]
      break;
 80055a2:	e00f      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2208      	movs	r2, #8
 80055a8:	701a      	strb	r2, [r3, #0]
      break;
 80055aa:	e00b      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2209      	movs	r2, #9
 80055b0:	701a      	strb	r2, [r3, #0]
      break;
 80055b2:	e007      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	220a      	movs	r2, #10
 80055b8:	701a      	strb	r2, [r3, #0]
      break;
 80055ba:	e003      	b.n	80055c4 <lsm6dso_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSO_GY_ODR_OFF;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
      break;
 80055c2:	bf00      	nop
  }
  return ret;
 80055c4:	68fb      	ldr	r3, [r7, #12]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop

080055d0 <lsm6dso_block_data_update_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of bdu in reg CTRL3_C
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 80055dc:	f107 0208 	add.w	r2, r7, #8
 80055e0:	2301      	movs	r3, #1
 80055e2:	2112      	movs	r1, #18
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff fc3b 	bl	8004e60 <lsm6dso_read_reg>
 80055ea:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10f      	bne.n	8005612 <lsm6dso_block_data_update_set+0x42>
    reg.bdu = val;
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	7a3b      	ldrb	r3, [r7, #8]
 80055fc:	f362 1386 	bfi	r3, r2, #6, #1
 8005600:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8005602:	f107 0208 	add.w	r2, r7, #8
 8005606:	2301      	movs	r3, #1
 8005608:	2112      	movs	r1, #18
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff fc40 	bl	8004e90 <lsm6dso_write_reg>
 8005610:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005612:	68fb      	ldr	r3, [r7, #12]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <lsm6dso_angular_rate_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8005626:	2306      	movs	r3, #6
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	2122      	movs	r1, #34	; 0x22
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff fc17 	bl	8004e60 <lsm6dso_read_reg>
 8005632:	60f8      	str	r0, [r7, #12]
  return ret;
 8005634:	68fb      	ldr	r3, [r7, #12]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <lsm6dso_acceleration_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8005648:	2306      	movs	r3, #6
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	2128      	movs	r1, #40	; 0x28
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff fc06 	bl	8004e60 <lsm6dso_read_reg>
 8005654:	60f8      	str	r0, [r7, #12]
  return ret;
 8005656:	68fb      	ldr	r3, [r7, #12]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <lsm6dso_mem_bank_set>:
  * @param  val      change the values of reg_access in
  *                               reg FUNC_CFG_ACCESS
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx, lsm6dso_reg_access_t val)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 800566c:	f107 0208 	add.w	r2, r7, #8
 8005670:	2301      	movs	r3, #1
 8005672:	2101      	movs	r1, #1
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff fbf3 	bl	8004e60 <lsm6dso_read_reg>
 800567a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10f      	bne.n	80056a2 <lsm6dso_mem_bank_set+0x42>
    reg.reg_access = (uint8_t)val;
 8005682:	78fb      	ldrb	r3, [r7, #3]
 8005684:	f003 0303 	and.w	r3, r3, #3
 8005688:	b2da      	uxtb	r2, r3
 800568a:	7a3b      	ldrb	r3, [r7, #8]
 800568c:	f362 1387 	bfi	r3, r2, #6, #2
 8005690:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 8005692:	f107 0208 	add.w	r2, r7, #8
 8005696:	2301      	movs	r3, #1
 8005698:	2101      	movs	r1, #1
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff fbf8 	bl	8004e90 <lsm6dso_write_reg>
 80056a0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80056a2:	68fb      	ldr	r3, [r7, #12]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <lsm6dso_device_id_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80056b6:	2301      	movs	r3, #1
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	210f      	movs	r1, #15
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff fbcf 	bl	8004e60 <lsm6dso_read_reg>
 80056c2:	60f8      	str	r0, [r7, #12]
  return ret;
 80056c4:	68fb      	ldr	r3, [r7, #12]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <lsm6dso_auto_increment_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of if_inc in reg CTRL3_C
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	460b      	mov	r3, r1
 80056d8:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 80056da:	f107 0208 	add.w	r2, r7, #8
 80056de:	2301      	movs	r3, #1
 80056e0:	2112      	movs	r1, #18
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff fbbc 	bl	8004e60 <lsm6dso_read_reg>
 80056e8:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10f      	bne.n	8005710 <lsm6dso_auto_increment_set+0x42>
    reg.if_inc = val;
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	7a3b      	ldrb	r3, [r7, #8]
 80056fa:	f362 0382 	bfi	r3, r2, #2, #1
 80056fe:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8005700:	f107 0208 	add.w	r2, r7, #8
 8005704:	2301      	movs	r3, #1
 8005706:	2112      	movs	r1, #18
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff fbc1 	bl	8004e90 <lsm6dso_write_reg>
 800570e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005710:	68fb      	ldr	r3, [r7, #12]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <lsm6dso_i3c_disable_set>:
  * @param  val      change the values of i3c_disable
  *                                    in reg CTRL9_XL
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx, lsm6dso_i3c_disable_t val)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b086      	sub	sp, #24
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	460b      	mov	r3, r1
 8005724:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 8005726:	f107 020c 	add.w	r2, r7, #12
 800572a:	2301      	movs	r3, #1
 800572c:	2118      	movs	r1, #24
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff fb96 	bl	8004e60 <lsm6dso_read_reg>
 8005734:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d111      	bne.n	8005760 <lsm6dso_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	09db      	lsrs	r3, r3, #7
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	b2da      	uxtb	r2, r3
 8005748:	7b3b      	ldrb	r3, [r7, #12]
 800574a:	f362 0341 	bfi	r3, r2, #1, #1
 800574e:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 8005750:	f107 020c 	add.w	r2, r7, #12
 8005754:	2301      	movs	r3, #1
 8005756:	2118      	movs	r1, #24
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff fb99 	bl	8004e90 <lsm6dso_write_reg>
 800575e:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d107      	bne.n	8005776 <lsm6dso_i3c_disable_set+0x5c>

    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8005766:	f107 0210 	add.w	r2, r7, #16
 800576a:	2301      	movs	r3, #1
 800576c:	2162      	movs	r1, #98	; 0x62
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff fb76 	bl	8004e60 <lsm6dso_read_reg>
 8005774:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&i3c_bus_avb, 1);
  }
  if (ret == 0) {
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10f      	bne.n	800579c <lsm6dso_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	b2da      	uxtb	r2, r3
 8005784:	7c3b      	ldrb	r3, [r7, #16]
 8005786:	f362 03c4 	bfi	r3, r2, #3, #2
 800578a:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800578c:	f107 0210 	add.w	r2, r7, #16
 8005790:	2301      	movs	r3, #1
 8005792:	2162      	movs	r1, #98	; 0x62
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff fb7b 	bl	8004e90 <lsm6dso_write_reg>
 800579a:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&i3c_bus_avb, 1);
  }

  return ret;
 800579c:	697b      	ldr	r3, [r7, #20]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <lsm6dso_fifo_mode_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fifo_mode in reg FIFO_CTRL4
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dso_fifo_mode_t val)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	460b      	mov	r3, r1
 80057b0:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 80057b2:	f107 0208 	add.w	r2, r7, #8
 80057b6:	2301      	movs	r3, #1
 80057b8:	210a      	movs	r1, #10
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7ff fb50 	bl	8004e60 <lsm6dso_read_reg>
 80057c0:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10f      	bne.n	80057e8 <lsm6dso_fifo_mode_set+0x42>
    reg.fifo_mode = (uint8_t)val;
 80057c8:	78fb      	ldrb	r3, [r7, #3]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	7a3b      	ldrb	r3, [r7, #8]
 80057d2:	f362 0302 	bfi	r3, r2, #0, #3
 80057d6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 80057d8:	f107 0208 	add.w	r2, r7, #8
 80057dc:	2301      	movs	r3, #1
 80057de:	210a      	movs	r1, #10
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff fb55 	bl	8004e90 <lsm6dso_write_reg>
 80057e6:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80057e8:	68fb      	ldr	r3, [r7, #12]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <lsm6dso_fsm_enable_get>:
  * @param  val      union of registers from FSM_ENABLE_A to FSM_ENABLE_B
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80057fc:	2102      	movs	r1, #2
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff ff2e 	bl	8005660 <lsm6dso_mem_bank_set>
 8005804:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d106      	bne.n	800581a <lsm6dso_fsm_enable_get+0x28>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t*) val, 2);
 800580c:	2302      	movs	r3, #2
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	2146      	movs	r1, #70	; 0x46
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff fb24 	bl	8004e60 <lsm6dso_read_reg>
 8005818:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d104      	bne.n	800582a <lsm6dso_fsm_enable_get+0x38>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005820:	2100      	movs	r1, #0
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff ff1c 	bl	8005660 <lsm6dso_mem_bank_set>
 8005828:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800582a:	68fb      	ldr	r3, [r7, #12]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <lsm6dso_fsm_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fsm_odr in reg EMB_FUNC_ODR_CFG_B
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_fsm_odr_t *val)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800583e:	2102      	movs	r1, #2
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff ff0d 	bl	8005660 <lsm6dso_mem_bank_set>
 8005846:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d107      	bne.n	800585e <lsm6dso_fsm_data_rate_get+0x2a>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 800584e:	f107 0208 	add.w	r2, r7, #8
 8005852:	2301      	movs	r3, #1
 8005854:	215f      	movs	r1, #95	; 0x5f
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff fb02 	bl	8004e60 <lsm6dso_read_reg>
 800585c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&reg, 1);
  }
  if (ret == 0) {
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d12a      	bne.n	80058ba <lsm6dso_fsm_data_rate_get+0x86>
    switch (reg.fsm_odr) {
 8005864:	7a3b      	ldrb	r3, [r7, #8]
 8005866:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b03      	cmp	r3, #3
 800586e:	d81b      	bhi.n	80058a8 <lsm6dso_fsm_data_rate_get+0x74>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <lsm6dso_fsm_data_rate_get+0x44>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	08005889 	.word	0x08005889
 800587c:	08005891 	.word	0x08005891
 8005880:	08005899 	.word	0x08005899
 8005884:	080058a1 	.word	0x080058a1
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2200      	movs	r2, #0
 800588c:	701a      	strb	r2, [r3, #0]
        break;
 800588e:	e00f      	b.n	80058b0 <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2201      	movs	r2, #1
 8005894:	701a      	strb	r2, [r3, #0]
        break;
 8005896:	e00b      	b.n	80058b0 <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2202      	movs	r2, #2
 800589c:	701a      	strb	r2, [r3, #0]
        break;
 800589e:	e007      	b.n	80058b0 <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2203      	movs	r2, #3
 80058a4:	701a      	strb	r2, [r3, #0]
        break;
 80058a6:	e003      	b.n	80058b0 <lsm6dso_fsm_data_rate_get+0x7c>
      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2200      	movs	r2, #0
 80058ac:	701a      	strb	r2, [r3, #0]
        break;
 80058ae:	bf00      	nop
    }
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80058b0:	2100      	movs	r1, #0
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff fed4 	bl	8005660 <lsm6dso_mem_bank_set>
 80058b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80058ba:	68fb      	ldr	r3, [r7, #12]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	4a06      	ldr	r2, [pc, #24]	; (80058ec <BSP_LED_On+0x28>)
 80058d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d6:	2120      	movs	r1, #32
 80058d8:	2201      	movs	r2, #1
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fc84 	bl	80061e8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	200012ec 	.word	0x200012ec

080058f0 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	4603      	mov	r3, r0
 80058f8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	4a06      	ldr	r2, [pc, #24]	; (8005918 <BSP_LED_Off+0x28>)
 80058fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005902:	2120      	movs	r1, #32
 8005904:	2200      	movs	r2, #0
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fc6e 	bl	80061e8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	200012ec 	.word	0x200012ec

0800591c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800592a:	79fb      	ldrb	r3, [r7, #7]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d903      	bls.n	8005938 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005930:	f06f 0301 	mvn.w	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	e01c      	b.n	8005972 <BSP_COM_Init+0x56>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8005938:	79fa      	ldrb	r2, [r7, #7]
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	490f      	ldr	r1, [pc, #60]	; (800597c <BSP_COM_Init+0x60>)
 800593e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005942:	490f      	ldr	r1, [pc, #60]	; (8005980 <BSP_COM_Init+0x64>)
 8005944:	019b      	lsls	r3, r3, #6
 8005946:	440b      	add	r3, r1
 8005948:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	019b      	lsls	r3, r3, #6
 800594e:	4a0c      	ldr	r2, [pc, #48]	; (8005980 <BSP_COM_Init+0x64>)
 8005950:	4413      	add	r3, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f000 f85c 	bl	8005a10 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	019b      	lsls	r3, r3, #6
 800595c:	4a08      	ldr	r2, [pc, #32]	; (8005980 <BSP_COM_Init+0x64>)
 800595e:	4413      	add	r3, r2
 8005960:	4618      	mov	r0, r3
 8005962:	f000 f80f 	bl	8005984 <MX_USART2_UART_Init>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <BSP_COM_Init+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800596c:	f06f 0303 	mvn.w	r3, #3
 8005970:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005972:	68fb      	ldr	r3, [r7, #12]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	200012f0 	.word	0x200012f0
 8005980:	2000ba94 	.word	0x2000ba94

08005984 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800598c:	2300      	movs	r3, #0
 800598e:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a12      	ldr	r2, [pc, #72]	; (80059dc <MX_USART2_UART_Init+0x58>)
 8005994:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800599c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	220c      	movs	r2, #12
 80059b4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f002 faee 	bl	8007fa4 <HAL_UART_Init>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	40004400 	.word	0x40004400

080059e0 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) /* For IAR and MDK-ARM */
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80059e8:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <__io_putchar+0x28>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	019b      	lsls	r3, r3, #6
 80059ee:	4a07      	ldr	r2, [pc, #28]	; (8005a0c <__io_putchar+0x2c>)
 80059f0:	1898      	adds	r0, r3, r2
 80059f2:	1d39      	adds	r1, r7, #4
 80059f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059f8:	2201      	movs	r2, #1
 80059fa:	f002 fb2a 	bl	8008052 <HAL_UART_Transmit>
  return ch;
 80059fe:	687b      	ldr	r3, [r7, #4]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	200029c4 	.word	0x200029c4
 8005a0c:	2000ba94 	.word	0x2000ba94

08005a10 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08a      	sub	sp, #40	; 0x28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005a18:	2300      	movs	r3, #0
 8005a1a:	613b      	str	r3, [r7, #16]
 8005a1c:	4b1e      	ldr	r3, [pc, #120]	; (8005a98 <USART2_MspInit+0x88>)
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	4a1d      	ldr	r2, [pc, #116]	; (8005a98 <USART2_MspInit+0x88>)
 8005a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a26:	6413      	str	r3, [r2, #64]	; 0x40
 8005a28:	4b1b      	ldr	r3, [pc, #108]	; (8005a98 <USART2_MspInit+0x88>)
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <USART2_MspInit+0x88>)
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3c:	4a16      	ldr	r2, [pc, #88]	; (8005a98 <USART2_MspInit+0x88>)
 8005a3e:	f043 0301 	orr.w	r3, r3, #1
 8005a42:	6313      	str	r3, [r2, #48]	; 0x30
 8005a44:	4b14      	ldr	r3, [pc, #80]	; (8005a98 <USART2_MspInit+0x88>)
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8005a50:	2304      	movs	r3, #4
 8005a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a54:	2302      	movs	r3, #2
 8005a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8005a60:	2307      	movs	r3, #7
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8005a64:	f107 0314 	add.w	r3, r7, #20
 8005a68:	4619      	mov	r1, r3
 8005a6a:	480c      	ldr	r0, [pc, #48]	; (8005a9c <USART2_MspInit+0x8c>)
 8005a6c:	f000 f958 	bl	8005d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8005a70:	2308      	movs	r3, #8
 8005a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a74:	2302      	movs	r3, #2
 8005a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8005a80:	2307      	movs	r3, #7
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8005a84:	f107 0314 	add.w	r3, r7, #20
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4804      	ldr	r0, [pc, #16]	; (8005a9c <USART2_MspInit+0x8c>)
 8005a8c:	f000 f948 	bl	8005d20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8005a90:	bf00      	nop
 8005a92:	3728      	adds	r7, #40	; 0x28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	40020000 	.word	0x40020000

08005aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005aa4:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <HAL_Init+0x40>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a0d      	ldr	r2, [pc, #52]	; (8005ae0 <HAL_Init+0x40>)
 8005aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005aae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <HAL_Init+0x40>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a0a      	ldr	r2, [pc, #40]	; (8005ae0 <HAL_Init+0x40>)
 8005ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005aba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005abc:	4b08      	ldr	r3, [pc, #32]	; (8005ae0 <HAL_Init+0x40>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a07      	ldr	r2, [pc, #28]	; (8005ae0 <HAL_Init+0x40>)
 8005ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ac8:	2003      	movs	r0, #3
 8005aca:	f000 f8d8 	bl	8005c7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ace:	2000      	movs	r0, #0
 8005ad0:	f7fb fd18 	bl	8001504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ad4:	f7fb fcc8 	bl	8001468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	40023c00 	.word	0x40023c00

08005ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ae8:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <HAL_IncTick+0x20>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	461a      	mov	r2, r3
 8005aee:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <HAL_IncTick+0x24>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4413      	add	r3, r2
 8005af4:	4a04      	ldr	r2, [pc, #16]	; (8005b08 <HAL_IncTick+0x24>)
 8005af6:	6013      	str	r3, [r2, #0]
}
 8005af8:	bf00      	nop
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	200012f8 	.word	0x200012f8
 8005b08:	2000bad4 	.word	0x2000bad4

08005b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b10:	4b03      	ldr	r3, [pc, #12]	; (8005b20 <HAL_GetTick+0x14>)
 8005b12:	681b      	ldr	r3, [r3, #0]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	2000bad4 	.word	0x2000bad4

08005b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b34:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <__NVIC_SetPriorityGrouping+0x44>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b40:	4013      	ands	r3, r2
 8005b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b56:	4a04      	ldr	r2, [pc, #16]	; (8005b68 <__NVIC_SetPriorityGrouping+0x44>)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	60d3      	str	r3, [r2, #12]
}
 8005b5c:	bf00      	nop
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	e000ed00 	.word	0xe000ed00

08005b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b70:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <__NVIC_GetPriorityGrouping+0x18>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	0a1b      	lsrs	r3, r3, #8
 8005b76:	f003 0307 	and.w	r3, r3, #7
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	e000ed00 	.word	0xe000ed00

08005b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	db0b      	blt.n	8005bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	f003 021f 	and.w	r2, r3, #31
 8005ba0:	4907      	ldr	r1, [pc, #28]	; (8005bc0 <__NVIC_EnableIRQ+0x38>)
 8005ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	2001      	movs	r0, #1
 8005baa:	fa00 f202 	lsl.w	r2, r0, r2
 8005bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	e000e100 	.word	0xe000e100

08005bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	6039      	str	r1, [r7, #0]
 8005bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	db0a      	blt.n	8005bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	490c      	ldr	r1, [pc, #48]	; (8005c10 <__NVIC_SetPriority+0x4c>)
 8005bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be2:	0112      	lsls	r2, r2, #4
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	440b      	add	r3, r1
 8005be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bec:	e00a      	b.n	8005c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	4908      	ldr	r1, [pc, #32]	; (8005c14 <__NVIC_SetPriority+0x50>)
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	3b04      	subs	r3, #4
 8005bfc:	0112      	lsls	r2, r2, #4
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	440b      	add	r3, r1
 8005c02:	761a      	strb	r2, [r3, #24]
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	e000e100 	.word	0xe000e100
 8005c14:	e000ed00 	.word	0xe000ed00

08005c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b089      	sub	sp, #36	; 0x24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f1c3 0307 	rsb	r3, r3, #7
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	bf28      	it	cs
 8005c36:	2304      	movcs	r3, #4
 8005c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	2b06      	cmp	r3, #6
 8005c40:	d902      	bls.n	8005c48 <NVIC_EncodePriority+0x30>
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	3b03      	subs	r3, #3
 8005c46:	e000      	b.n	8005c4a <NVIC_EncodePriority+0x32>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43da      	mvns	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	401a      	ands	r2, r3
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c60:	f04f 31ff 	mov.w	r1, #4294967295
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6a:	43d9      	mvns	r1, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c70:	4313      	orrs	r3, r2
         );
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3724      	adds	r7, #36	; 0x24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b082      	sub	sp, #8
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff ff4c 	bl	8005b24 <__NVIC_SetPriorityGrouping>
}
 8005c8c:	bf00      	nop
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ca6:	f7ff ff61 	bl	8005b6c <__NVIC_GetPriorityGrouping>
 8005caa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	6978      	ldr	r0, [r7, #20]
 8005cb2:	f7ff ffb1 	bl	8005c18 <NVIC_EncodePriority>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff ff80 	bl	8005bc4 <__NVIC_SetPriority>
}
 8005cc4:	bf00      	nop
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff ff54 	bl	8005b88 <__NVIC_EnableIRQ>
}
 8005ce0:	bf00      	nop
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e00e      	b.n	8005d18 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	795b      	ldrb	r3, [r3, #5]
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d105      	bne.n	8005d10 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fb fbd8 	bl	80014c0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b089      	sub	sp, #36	; 0x24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d36:	2300      	movs	r3, #0
 8005d38:	61fb      	str	r3, [r7, #28]
 8005d3a:	e159      	b.n	8005ff0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	f040 8148 	bne.w	8005fea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d00b      	beq.n	8005d7a <HAL_GPIO_Init+0x5a>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d007      	beq.n	8005d7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d6e:	2b11      	cmp	r3, #17
 8005d70:	d003      	beq.n	8005d7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b12      	cmp	r3, #18
 8005d78:	d130      	bne.n	8005ddc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	2203      	movs	r2, #3
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	43db      	mvns	r3, r3
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005db0:	2201      	movs	r2, #1
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	43db      	mvns	r3, r3
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	091b      	lsrs	r3, r3, #4
 8005dc6:	f003 0201 	and.w	r2, r3, #1
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	2203      	movs	r2, #3
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	43db      	mvns	r3, r3
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	4013      	ands	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d003      	beq.n	8005e1c <HAL_GPIO_Init+0xfc>
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2b12      	cmp	r3, #18
 8005e1a:	d123      	bne.n	8005e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	08da      	lsrs	r2, r3, #3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3208      	adds	r2, #8
 8005e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	220f      	movs	r2, #15
 8005e34:	fa02 f303 	lsl.w	r3, r2, r3
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	08da      	lsrs	r2, r3, #3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3208      	adds	r2, #8
 8005e5e:	69b9      	ldr	r1, [r7, #24]
 8005e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	2203      	movs	r2, #3
 8005e70:	fa02 f303 	lsl.w	r3, r2, r3
 8005e74:	43db      	mvns	r3, r3
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f003 0203 	and.w	r2, r3, #3
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 80a2 	beq.w	8005fea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	4b56      	ldr	r3, [pc, #344]	; (8006004 <HAL_GPIO_Init+0x2e4>)
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	4a55      	ldr	r2, [pc, #340]	; (8006004 <HAL_GPIO_Init+0x2e4>)
 8005eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8005eb6:	4b53      	ldr	r3, [pc, #332]	; (8006004 <HAL_GPIO_Init+0x2e4>)
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ec2:	4a51      	ldr	r2, [pc, #324]	; (8006008 <HAL_GPIO_Init+0x2e8>)
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	089b      	lsrs	r3, r3, #2
 8005ec8:	3302      	adds	r3, #2
 8005eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	220f      	movs	r2, #15
 8005eda:	fa02 f303 	lsl.w	r3, r2, r3
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a48      	ldr	r2, [pc, #288]	; (800600c <HAL_GPIO_Init+0x2ec>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d019      	beq.n	8005f22 <HAL_GPIO_Init+0x202>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a47      	ldr	r2, [pc, #284]	; (8006010 <HAL_GPIO_Init+0x2f0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d013      	beq.n	8005f1e <HAL_GPIO_Init+0x1fe>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a46      	ldr	r2, [pc, #280]	; (8006014 <HAL_GPIO_Init+0x2f4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00d      	beq.n	8005f1a <HAL_GPIO_Init+0x1fa>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a45      	ldr	r2, [pc, #276]	; (8006018 <HAL_GPIO_Init+0x2f8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d007      	beq.n	8005f16 <HAL_GPIO_Init+0x1f6>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a44      	ldr	r2, [pc, #272]	; (800601c <HAL_GPIO_Init+0x2fc>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d101      	bne.n	8005f12 <HAL_GPIO_Init+0x1f2>
 8005f0e:	2304      	movs	r3, #4
 8005f10:	e008      	b.n	8005f24 <HAL_GPIO_Init+0x204>
 8005f12:	2307      	movs	r3, #7
 8005f14:	e006      	b.n	8005f24 <HAL_GPIO_Init+0x204>
 8005f16:	2303      	movs	r3, #3
 8005f18:	e004      	b.n	8005f24 <HAL_GPIO_Init+0x204>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e002      	b.n	8005f24 <HAL_GPIO_Init+0x204>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <HAL_GPIO_Init+0x204>
 8005f22:	2300      	movs	r3, #0
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	f002 0203 	and.w	r2, r2, #3
 8005f2a:	0092      	lsls	r2, r2, #2
 8005f2c:	4093      	lsls	r3, r2
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f34:	4934      	ldr	r1, [pc, #208]	; (8006008 <HAL_GPIO_Init+0x2e8>)
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	089b      	lsrs	r3, r3, #2
 8005f3a:	3302      	adds	r3, #2
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f42:	4b37      	ldr	r3, [pc, #220]	; (8006020 <HAL_GPIO_Init+0x300>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	43db      	mvns	r3, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f66:	4a2e      	ldr	r2, [pc, #184]	; (8006020 <HAL_GPIO_Init+0x300>)
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005f6c:	4b2c      	ldr	r3, [pc, #176]	; (8006020 <HAL_GPIO_Init+0x300>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	43db      	mvns	r3, r3
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f90:	4a23      	ldr	r2, [pc, #140]	; (8006020 <HAL_GPIO_Init+0x300>)
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f96:	4b22      	ldr	r3, [pc, #136]	; (8006020 <HAL_GPIO_Init+0x300>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	43db      	mvns	r3, r3
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005fba:	4a19      	ldr	r2, [pc, #100]	; (8006020 <HAL_GPIO_Init+0x300>)
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005fc0:	4b17      	ldr	r3, [pc, #92]	; (8006020 <HAL_GPIO_Init+0x300>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	43db      	mvns	r3, r3
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fe4:	4a0e      	ldr	r2, [pc, #56]	; (8006020 <HAL_GPIO_Init+0x300>)
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	3301      	adds	r3, #1
 8005fee:	61fb      	str	r3, [r7, #28]
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	2b0f      	cmp	r3, #15
 8005ff4:	f67f aea2 	bls.w	8005d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ff8:	bf00      	nop
 8005ffa:	3724      	adds	r7, #36	; 0x24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	40023800 	.word	0x40023800
 8006008:	40013800 	.word	0x40013800
 800600c:	40020000 	.word	0x40020000
 8006010:	40020400 	.word	0x40020400
 8006014:	40020800 	.word	0x40020800
 8006018:	40020c00 	.word	0x40020c00
 800601c:	40021000 	.word	0x40021000
 8006020:	40013c00 	.word	0x40013c00

08006024 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800602e:	2300      	movs	r3, #0
 8006030:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006036:	2300      	movs	r3, #0
 8006038:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	e0bb      	b.n	80061b8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006040:	2201      	movs	r2, #1
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	fa02 f303 	lsl.w	r3, r2, r3
 8006048:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	4013      	ands	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	429a      	cmp	r2, r3
 8006058:	f040 80ab 	bne.w	80061b2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800605c:	4a5b      	ldr	r2, [pc, #364]	; (80061cc <HAL_GPIO_DeInit+0x1a8>)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	089b      	lsrs	r3, r3, #2
 8006062:	3302      	adds	r3, #2
 8006064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006068:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f003 0303 	and.w	r3, r3, #3
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	220f      	movs	r2, #15
 8006074:	fa02 f303 	lsl.w	r3, r2, r3
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	4013      	ands	r3, r2
 800607c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a53      	ldr	r2, [pc, #332]	; (80061d0 <HAL_GPIO_DeInit+0x1ac>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d019      	beq.n	80060ba <HAL_GPIO_DeInit+0x96>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a52      	ldr	r2, [pc, #328]	; (80061d4 <HAL_GPIO_DeInit+0x1b0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d013      	beq.n	80060b6 <HAL_GPIO_DeInit+0x92>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a51      	ldr	r2, [pc, #324]	; (80061d8 <HAL_GPIO_DeInit+0x1b4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00d      	beq.n	80060b2 <HAL_GPIO_DeInit+0x8e>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a50      	ldr	r2, [pc, #320]	; (80061dc <HAL_GPIO_DeInit+0x1b8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d007      	beq.n	80060ae <HAL_GPIO_DeInit+0x8a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a4f      	ldr	r2, [pc, #316]	; (80061e0 <HAL_GPIO_DeInit+0x1bc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d101      	bne.n	80060aa <HAL_GPIO_DeInit+0x86>
 80060a6:	2304      	movs	r3, #4
 80060a8:	e008      	b.n	80060bc <HAL_GPIO_DeInit+0x98>
 80060aa:	2307      	movs	r3, #7
 80060ac:	e006      	b.n	80060bc <HAL_GPIO_DeInit+0x98>
 80060ae:	2303      	movs	r3, #3
 80060b0:	e004      	b.n	80060bc <HAL_GPIO_DeInit+0x98>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e002      	b.n	80060bc <HAL_GPIO_DeInit+0x98>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <HAL_GPIO_DeInit+0x98>
 80060ba:	2300      	movs	r3, #0
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	f002 0203 	and.w	r2, r2, #3
 80060c2:	0092      	lsls	r2, r2, #2
 80060c4:	4093      	lsls	r3, r2
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d132      	bne.n	8006132 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80060cc:	4b45      	ldr	r3, [pc, #276]	; (80061e4 <HAL_GPIO_DeInit+0x1c0>)
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	43db      	mvns	r3, r3
 80060d4:	4943      	ldr	r1, [pc, #268]	; (80061e4 <HAL_GPIO_DeInit+0x1c0>)
 80060d6:	4013      	ands	r3, r2
 80060d8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80060da:	4b42      	ldr	r3, [pc, #264]	; (80061e4 <HAL_GPIO_DeInit+0x1c0>)
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	43db      	mvns	r3, r3
 80060e2:	4940      	ldr	r1, [pc, #256]	; (80061e4 <HAL_GPIO_DeInit+0x1c0>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80060e8:	4b3e      	ldr	r3, [pc, #248]	; (80061e4 <HAL_GPIO_DeInit+0x1c0>)
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	43db      	mvns	r3, r3
 80060f0:	493c      	ldr	r1, [pc, #240]	; (80061e4 <HAL_GPIO_DeInit+0x1c0>)
 80060f2:	4013      	ands	r3, r2
 80060f4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80060f6:	4b3b      	ldr	r3, [pc, #236]	; (80061e4 <HAL_GPIO_DeInit+0x1c0>)
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	43db      	mvns	r3, r3
 80060fe:	4939      	ldr	r1, [pc, #228]	; (80061e4 <HAL_GPIO_DeInit+0x1c0>)
 8006100:	4013      	ands	r3, r2
 8006102:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	220f      	movs	r2, #15
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006114:	4a2d      	ldr	r2, [pc, #180]	; (80061cc <HAL_GPIO_DeInit+0x1a8>)
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	089b      	lsrs	r3, r3, #2
 800611a:	3302      	adds	r3, #2
 800611c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	43da      	mvns	r2, r3
 8006124:	4829      	ldr	r0, [pc, #164]	; (80061cc <HAL_GPIO_DeInit+0x1a8>)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	089b      	lsrs	r3, r3, #2
 800612a:	400a      	ands	r2, r1
 800612c:	3302      	adds	r3, #2
 800612e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	2103      	movs	r1, #3
 800613c:	fa01 f303 	lsl.w	r3, r1, r3
 8006140:	43db      	mvns	r3, r3
 8006142:	401a      	ands	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	08da      	lsrs	r2, r3, #3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3208      	adds	r2, #8
 8006150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	220f      	movs	r2, #15
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	43db      	mvns	r3, r3
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	08d2      	lsrs	r2, r2, #3
 8006168:	4019      	ands	r1, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3208      	adds	r2, #8
 800616e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	2103      	movs	r1, #3
 800617c:	fa01 f303 	lsl.w	r3, r1, r3
 8006180:	43db      	mvns	r3, r3
 8006182:	401a      	ands	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	2101      	movs	r1, #1
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	fa01 f303 	lsl.w	r3, r1, r3
 8006194:	43db      	mvns	r3, r3
 8006196:	401a      	ands	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	2103      	movs	r1, #3
 80061a6:	fa01 f303 	lsl.w	r3, r1, r3
 80061aa:	43db      	mvns	r3, r3
 80061ac:	401a      	ands	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	3301      	adds	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2b0f      	cmp	r3, #15
 80061bc:	f67f af40 	bls.w	8006040 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80061c0:	bf00      	nop
 80061c2:	371c      	adds	r7, #28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	40013800 	.word	0x40013800
 80061d0:	40020000 	.word	0x40020000
 80061d4:	40020400 	.word	0x40020400
 80061d8:	40020800 	.word	0x40020800
 80061dc:	40020c00 	.word	0x40020c00
 80061e0:	40021000 	.word	0x40021000
 80061e4:	40013c00 	.word	0x40013c00

080061e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	807b      	strh	r3, [r7, #2]
 80061f4:	4613      	mov	r3, r2
 80061f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061f8:	787b      	ldrb	r3, [r7, #1]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061fe:	887a      	ldrh	r2, [r7, #2]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006204:	e003      	b.n	800620e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006206:	887b      	ldrh	r3, [r7, #2]
 8006208:	041a      	lsls	r2, r3, #16
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	619a      	str	r2, [r3, #24]
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
	...

0800621c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e11f      	b.n	800646e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f951 	bl	80064ea <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2224      	movs	r2, #36	; 0x24
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0201 	bic.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800626e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800627e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006280:	f001 fc18 	bl	8007ab4 <HAL_RCC_GetPCLK1Freq>
 8006284:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	4a7b      	ldr	r2, [pc, #492]	; (8006478 <HAL_I2C_Init+0x25c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d807      	bhi.n	80062a0 <HAL_I2C_Init+0x84>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4a7a      	ldr	r2, [pc, #488]	; (800647c <HAL_I2C_Init+0x260>)
 8006294:	4293      	cmp	r3, r2
 8006296:	bf94      	ite	ls
 8006298:	2301      	movls	r3, #1
 800629a:	2300      	movhi	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	e006      	b.n	80062ae <HAL_I2C_Init+0x92>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4a77      	ldr	r2, [pc, #476]	; (8006480 <HAL_I2C_Init+0x264>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	bf94      	ite	ls
 80062a8:	2301      	movls	r3, #1
 80062aa:	2300      	movhi	r3, #0
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e0db      	b.n	800646e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4a72      	ldr	r2, [pc, #456]	; (8006484 <HAL_I2C_Init+0x268>)
 80062ba:	fba2 2303 	umull	r2, r3, r2, r3
 80062be:	0c9b      	lsrs	r3, r3, #18
 80062c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	4a64      	ldr	r2, [pc, #400]	; (8006478 <HAL_I2C_Init+0x25c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d802      	bhi.n	80062f0 <HAL_I2C_Init+0xd4>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	3301      	adds	r3, #1
 80062ee:	e009      	b.n	8006304 <HAL_I2C_Init+0xe8>
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80062f6:	fb02 f303 	mul.w	r3, r2, r3
 80062fa:	4a63      	ldr	r2, [pc, #396]	; (8006488 <HAL_I2C_Init+0x26c>)
 80062fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006300:	099b      	lsrs	r3, r3, #6
 8006302:	3301      	adds	r3, #1
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6812      	ldr	r2, [r2, #0]
 8006308:	430b      	orrs	r3, r1
 800630a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006316:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	4956      	ldr	r1, [pc, #344]	; (8006478 <HAL_I2C_Init+0x25c>)
 8006320:	428b      	cmp	r3, r1
 8006322:	d80d      	bhi.n	8006340 <HAL_I2C_Init+0x124>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	1e59      	subs	r1, r3, #1
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006332:	3301      	adds	r3, #1
 8006334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006338:	2b04      	cmp	r3, #4
 800633a:	bf38      	it	cc
 800633c:	2304      	movcc	r3, #4
 800633e:	e04f      	b.n	80063e0 <HAL_I2C_Init+0x1c4>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d111      	bne.n	800636c <HAL_I2C_Init+0x150>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	1e58      	subs	r0, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6859      	ldr	r1, [r3, #4]
 8006350:	460b      	mov	r3, r1
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	440b      	add	r3, r1
 8006356:	fbb0 f3f3 	udiv	r3, r0, r3
 800635a:	3301      	adds	r3, #1
 800635c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006360:	2b00      	cmp	r3, #0
 8006362:	bf0c      	ite	eq
 8006364:	2301      	moveq	r3, #1
 8006366:	2300      	movne	r3, #0
 8006368:	b2db      	uxtb	r3, r3
 800636a:	e012      	b.n	8006392 <HAL_I2C_Init+0x176>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	1e58      	subs	r0, r3, #1
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6859      	ldr	r1, [r3, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	440b      	add	r3, r1
 800637a:	0099      	lsls	r1, r3, #2
 800637c:	440b      	add	r3, r1
 800637e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006382:	3301      	adds	r3, #1
 8006384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006388:	2b00      	cmp	r3, #0
 800638a:	bf0c      	ite	eq
 800638c:	2301      	moveq	r3, #1
 800638e:	2300      	movne	r3, #0
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <HAL_I2C_Init+0x17e>
 8006396:	2301      	movs	r3, #1
 8006398:	e022      	b.n	80063e0 <HAL_I2C_Init+0x1c4>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10e      	bne.n	80063c0 <HAL_I2C_Init+0x1a4>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	1e58      	subs	r0, r3, #1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6859      	ldr	r1, [r3, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	440b      	add	r3, r1
 80063b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80063b4:	3301      	adds	r3, #1
 80063b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063be:	e00f      	b.n	80063e0 <HAL_I2C_Init+0x1c4>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	1e58      	subs	r0, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6859      	ldr	r1, [r3, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	440b      	add	r3, r1
 80063ce:	0099      	lsls	r1, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80063d6:	3301      	adds	r3, #1
 80063d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063e0:	6879      	ldr	r1, [r7, #4]
 80063e2:	6809      	ldr	r1, [r1, #0]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69da      	ldr	r2, [r3, #28]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800640e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6911      	ldr	r1, [r2, #16]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	68d2      	ldr	r2, [r2, #12]
 800641a:	4311      	orrs	r1, r2
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6812      	ldr	r2, [r2, #0]
 8006420:	430b      	orrs	r3, r1
 8006422:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	695a      	ldr	r2, [r3, #20]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0201 	orr.w	r2, r2, #1
 800644e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	000186a0 	.word	0x000186a0
 800647c:	001e847f 	.word	0x001e847f
 8006480:	003d08ff 	.word	0x003d08ff
 8006484:	431bde83 	.word	0x431bde83
 8006488:	10624dd3 	.word	0x10624dd3

0800648c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e021      	b.n	80064e2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2224      	movs	r2, #36	; 0x24
 80064a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 0201 	bic.w	r2, r2, #1
 80064b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f821 	bl	80064fe <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
	...

08006514 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af02      	add	r7, sp, #8
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	4608      	mov	r0, r1
 800651e:	4611      	mov	r1, r2
 8006520:	461a      	mov	r2, r3
 8006522:	4603      	mov	r3, r0
 8006524:	817b      	strh	r3, [r7, #10]
 8006526:	460b      	mov	r3, r1
 8006528:	813b      	strh	r3, [r7, #8]
 800652a:	4613      	mov	r3, r2
 800652c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800652e:	f7ff faed 	bl	8005b0c <HAL_GetTick>
 8006532:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b20      	cmp	r3, #32
 800653e:	f040 80d9 	bne.w	80066f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	2319      	movs	r3, #25
 8006548:	2201      	movs	r2, #1
 800654a:	496d      	ldr	r1, [pc, #436]	; (8006700 <HAL_I2C_Mem_Write+0x1ec>)
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 fc99 	bl	8006e84 <I2C_WaitOnFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006558:	2302      	movs	r3, #2
 800655a:	e0cc      	b.n	80066f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006562:	2b01      	cmp	r3, #1
 8006564:	d101      	bne.n	800656a <HAL_I2C_Mem_Write+0x56>
 8006566:	2302      	movs	r3, #2
 8006568:	e0c5      	b.n	80066f6 <HAL_I2C_Mem_Write+0x1e2>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b01      	cmp	r3, #1
 800657e:	d007      	beq.n	8006590 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f042 0201 	orr.w	r2, r2, #1
 800658e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800659e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2221      	movs	r2, #33	; 0x21
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2240      	movs	r2, #64	; 0x40
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6a3a      	ldr	r2, [r7, #32]
 80065ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4a4d      	ldr	r2, [pc, #308]	; (8006704 <HAL_I2C_Mem_Write+0x1f0>)
 80065d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065d2:	88f8      	ldrh	r0, [r7, #6]
 80065d4:	893a      	ldrh	r2, [r7, #8]
 80065d6:	8979      	ldrh	r1, [r7, #10]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	9301      	str	r3, [sp, #4]
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	4603      	mov	r3, r0
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 fad0 	bl	8006b88 <I2C_RequestMemoryWrite>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d052      	beq.n	8006694 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e081      	b.n	80066f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 fd1a 	bl	8007030 <I2C_WaitOnTXEFlagUntilTimeout>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00d      	beq.n	800661e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	2b04      	cmp	r3, #4
 8006608:	d107      	bne.n	800661a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006618:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e06b      	b.n	80066f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	781a      	ldrb	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b04      	cmp	r3, #4
 800665a:	d11b      	bne.n	8006694 <HAL_I2C_Mem_Write+0x180>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006660:	2b00      	cmp	r3, #0
 8006662:	d017      	beq.n	8006694 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	781a      	ldrb	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800667e:	3b01      	subs	r3, #1
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668a:	b29b      	uxth	r3, r3
 800668c:	3b01      	subs	r3, #1
 800668e:	b29a      	uxth	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1aa      	bne.n	80065f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 fd06 	bl	80070b2 <I2C_WaitOnBTFFlagUntilTimeout>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00d      	beq.n	80066c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d107      	bne.n	80066c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e016      	b.n	80066f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	e000      	b.n	80066f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80066f4:	2302      	movs	r3, #2
  }
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	00100002 	.word	0x00100002
 8006704:	ffff0000 	.word	0xffff0000

08006708 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08c      	sub	sp, #48	; 0x30
 800670c:	af02      	add	r7, sp, #8
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	4608      	mov	r0, r1
 8006712:	4611      	mov	r1, r2
 8006714:	461a      	mov	r2, r3
 8006716:	4603      	mov	r3, r0
 8006718:	817b      	strh	r3, [r7, #10]
 800671a:	460b      	mov	r3, r1
 800671c:	813b      	strh	r3, [r7, #8]
 800671e:	4613      	mov	r3, r2
 8006720:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006722:	f7ff f9f3 	bl	8005b0c <HAL_GetTick>
 8006726:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b20      	cmp	r3, #32
 8006732:	f040 8208 	bne.w	8006b46 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	2319      	movs	r3, #25
 800673c:	2201      	movs	r2, #1
 800673e:	497b      	ldr	r1, [pc, #492]	; (800692c <HAL_I2C_Mem_Read+0x224>)
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 fb9f 	bl	8006e84 <I2C_WaitOnFlagUntilTimeout>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800674c:	2302      	movs	r3, #2
 800674e:	e1fb      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006756:	2b01      	cmp	r3, #1
 8006758:	d101      	bne.n	800675e <HAL_I2C_Mem_Read+0x56>
 800675a:	2302      	movs	r3, #2
 800675c:	e1f4      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b01      	cmp	r3, #1
 8006772:	d007      	beq.n	8006784 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0201 	orr.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006792:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2222      	movs	r2, #34	; 0x22
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2240      	movs	r2, #64	; 0x40
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80067b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4a5b      	ldr	r2, [pc, #364]	; (8006930 <HAL_I2C_Mem_Read+0x228>)
 80067c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067c6:	88f8      	ldrh	r0, [r7, #6]
 80067c8:	893a      	ldrh	r2, [r7, #8]
 80067ca:	8979      	ldrh	r1, [r7, #10]
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	9301      	str	r3, [sp, #4]
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	4603      	mov	r3, r0
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 fa6c 	bl	8006cb4 <I2C_RequestMemoryRead>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e1b0      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d113      	bne.n	8006816 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ee:	2300      	movs	r3, #0
 80067f0:	623b      	str	r3, [r7, #32]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	623b      	str	r3, [r7, #32]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	623b      	str	r3, [r7, #32]
 8006802:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	e184      	b.n	8006b20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681a:	2b01      	cmp	r3, #1
 800681c:	d11b      	bne.n	8006856 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800682c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800682e:	2300      	movs	r3, #0
 8006830:	61fb      	str	r3, [r7, #28]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	61fb      	str	r3, [r7, #28]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	61fb      	str	r3, [r7, #28]
 8006842:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	e164      	b.n	8006b20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685a:	2b02      	cmp	r3, #2
 800685c:	d11b      	bne.n	8006896 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800686c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800687c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800687e:	2300      	movs	r3, #0
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	61bb      	str	r3, [r7, #24]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	e144      	b.n	8006b20 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	617b      	str	r3, [r7, #20]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80068ac:	e138      	b.n	8006b20 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	f200 80f1 	bhi.w	8006a9a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d123      	bne.n	8006908 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 fc35 	bl	8007134 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e139      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691a      	ldr	r2, [r3, #16]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006906:	e10b      	b.n	8006b20 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800690c:	2b02      	cmp	r3, #2
 800690e:	d14e      	bne.n	80069ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	2200      	movs	r2, #0
 8006918:	4906      	ldr	r1, [pc, #24]	; (8006934 <HAL_I2C_Mem_Read+0x22c>)
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 fab2 	bl	8006e84 <I2C_WaitOnFlagUntilTimeout>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d008      	beq.n	8006938 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e10e      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
 800692a:	bf00      	nop
 800692c:	00100002 	.word	0x00100002
 8006930:	ffff0000 	.word	0xffff0000
 8006934:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006946:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691a      	ldr	r2, [r3, #16]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006964:	3b01      	subs	r3, #1
 8006966:	b29a      	uxth	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	691a      	ldr	r2, [r3, #16]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	3b01      	subs	r3, #1
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069ac:	e0b8      	b.n	8006b20 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b4:	2200      	movs	r2, #0
 80069b6:	4966      	ldr	r1, [pc, #408]	; (8006b50 <HAL_I2C_Mem_Read+0x448>)
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fa63 	bl	8006e84 <I2C_WaitOnFlagUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e0bf      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691a      	ldr	r2, [r3, #16]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	b2d2      	uxtb	r2, r2
 80069e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	3b01      	subs	r3, #1
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a10:	2200      	movs	r2, #0
 8006a12:	494f      	ldr	r1, [pc, #316]	; (8006b50 <HAL_I2C_Mem_Read+0x448>)
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 fa35 	bl	8006e84 <I2C_WaitOnFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e091      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	691a      	ldr	r2, [r3, #16]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a50:	3b01      	subs	r3, #1
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	691a      	ldr	r2, [r3, #16]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a98:	e042      	b.n	8006b20 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fb48 	bl	8007134 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e04c      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aca:	3b01      	subs	r3, #1
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f003 0304 	and.w	r3, r3, #4
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d118      	bne.n	8006b20 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	1c5a      	adds	r2, r3, #1
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f47f aec2 	bne.w	80068ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	e000      	b.n	8006b48 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006b46:	2302      	movs	r3, #2
  }
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3728      	adds	r7, #40	; 0x28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	00010004 	.word	0x00010004

08006b54 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b62:	b2db      	uxtb	r3, r3
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	4608      	mov	r0, r1
 8006b92:	4611      	mov	r1, r2
 8006b94:	461a      	mov	r2, r3
 8006b96:	4603      	mov	r3, r0
 8006b98:	817b      	strh	r3, [r7, #10]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	813b      	strh	r3, [r7, #8]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 f960 	bl	8006e84 <I2C_WaitOnFlagUntilTimeout>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00d      	beq.n	8006be6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd8:	d103      	bne.n	8006be2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006be0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e05f      	b.n	8006ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006be6:	897b      	ldrh	r3, [r7, #10]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	461a      	mov	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bf4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	6a3a      	ldr	r2, [r7, #32]
 8006bfa:	492d      	ldr	r1, [pc, #180]	; (8006cb0 <I2C_RequestMemoryWrite+0x128>)
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 f998 	bl	8006f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e04c      	b.n	8006ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c24:	6a39      	ldr	r1, [r7, #32]
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 fa02 	bl	8007030 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00d      	beq.n	8006c4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d107      	bne.n	8006c4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e02b      	b.n	8006ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c4e:	88fb      	ldrh	r3, [r7, #6]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d105      	bne.n	8006c60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c54:	893b      	ldrh	r3, [r7, #8]
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	611a      	str	r2, [r3, #16]
 8006c5e:	e021      	b.n	8006ca4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c60:	893b      	ldrh	r3, [r7, #8]
 8006c62:	0a1b      	lsrs	r3, r3, #8
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c70:	6a39      	ldr	r1, [r7, #32]
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 f9dc 	bl	8007030 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00d      	beq.n	8006c9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	d107      	bne.n	8006c96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e005      	b.n	8006ca6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c9a:	893b      	ldrh	r3, [r7, #8]
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	00010002 	.word	0x00010002

08006cb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b088      	sub	sp, #32
 8006cb8:	af02      	add	r7, sp, #8
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	4608      	mov	r0, r1
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	817b      	strh	r3, [r7, #10]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	813b      	strh	r3, [r7, #8]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cdc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 f8c2 	bl	8006e84 <I2C_WaitOnFlagUntilTimeout>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00d      	beq.n	8006d22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d14:	d103      	bne.n	8006d1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e0aa      	b.n	8006e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d22:	897b      	ldrh	r3, [r7, #10]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	461a      	mov	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	6a3a      	ldr	r2, [r7, #32]
 8006d36:	4952      	ldr	r1, [pc, #328]	; (8006e80 <I2C_RequestMemoryRead+0x1cc>)
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f8fa 	bl	8006f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e097      	b.n	8006e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d48:	2300      	movs	r3, #0
 8006d4a:	617b      	str	r3, [r7, #20]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d60:	6a39      	ldr	r1, [r7, #32]
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 f964 	bl	8007030 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00d      	beq.n	8006d8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d107      	bne.n	8006d86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e076      	b.n	8006e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d8a:	88fb      	ldrh	r3, [r7, #6]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d105      	bne.n	8006d9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d90:	893b      	ldrh	r3, [r7, #8]
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	611a      	str	r2, [r3, #16]
 8006d9a:	e021      	b.n	8006de0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d9c:	893b      	ldrh	r3, [r7, #8]
 8006d9e:	0a1b      	lsrs	r3, r3, #8
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dac:	6a39      	ldr	r1, [r7, #32]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 f93e 	bl	8007030 <I2C_WaitOnTXEFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00d      	beq.n	8006dd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d107      	bne.n	8006dd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e050      	b.n	8006e78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006dd6:	893b      	ldrh	r3, [r7, #8]
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de2:	6a39      	ldr	r1, [r7, #32]
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 f923 	bl	8007030 <I2C_WaitOnTXEFlagUntilTimeout>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00d      	beq.n	8006e0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d107      	bne.n	8006e08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e035      	b.n	8006e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 f82b 	bl	8006e84 <I2C_WaitOnFlagUntilTimeout>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00d      	beq.n	8006e50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e42:	d103      	bne.n	8006e4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e013      	b.n	8006e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e50:	897b      	ldrh	r3, [r7, #10]
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	f043 0301 	orr.w	r3, r3, #1
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	6a3a      	ldr	r2, [r7, #32]
 8006e64:	4906      	ldr	r1, [pc, #24]	; (8006e80 <I2C_RequestMemoryRead+0x1cc>)
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 f863 	bl	8006f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e000      	b.n	8006e78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3718      	adds	r7, #24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	00010002 	.word	0x00010002

08006e84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	603b      	str	r3, [r7, #0]
 8006e90:	4613      	mov	r3, r2
 8006e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e94:	e025      	b.n	8006ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9c:	d021      	beq.n	8006ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e9e:	f7fe fe35 	bl	8005b0c <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d302      	bcc.n	8006eb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d116      	bne.n	8006ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2220      	movs	r2, #32
 8006ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	f043 0220 	orr.w	r2, r3, #32
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e023      	b.n	8006f2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	0c1b      	lsrs	r3, r3, #16
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d10d      	bne.n	8006f08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	43da      	mvns	r2, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bf0c      	ite	eq
 8006efe:	2301      	moveq	r3, #1
 8006f00:	2300      	movne	r3, #0
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	e00c      	b.n	8006f22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	43da      	mvns	r2, r3
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4013      	ands	r3, r2
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bf0c      	ite	eq
 8006f1a:	2301      	moveq	r3, #1
 8006f1c:	2300      	movne	r3, #0
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	461a      	mov	r2, r3
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d0b6      	beq.n	8006e96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	607a      	str	r2, [r7, #4]
 8006f3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f40:	e051      	b.n	8006fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f50:	d123      	bne.n	8006f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	f043 0204 	orr.w	r2, r3, #4
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e046      	b.n	8007028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa0:	d021      	beq.n	8006fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fa2:	f7fe fdb3 	bl	8005b0c <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d302      	bcc.n	8006fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d116      	bne.n	8006fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f043 0220 	orr.w	r2, r3, #32
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e020      	b.n	8007028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	0c1b      	lsrs	r3, r3, #16
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d10c      	bne.n	800700a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	43da      	mvns	r2, r3
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	bf14      	ite	ne
 8007002:	2301      	movne	r3, #1
 8007004:	2300      	moveq	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	e00b      	b.n	8007022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	43da      	mvns	r2, r3
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	4013      	ands	r3, r2
 8007016:	b29b      	uxth	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	bf14      	ite	ne
 800701c:	2301      	movne	r3, #1
 800701e:	2300      	moveq	r3, #0
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d18d      	bne.n	8006f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800703c:	e02d      	b.n	800709a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 f8ce 	bl	80071e0 <I2C_IsAcknowledgeFailed>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e02d      	b.n	80070aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007054:	d021      	beq.n	800709a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007056:	f7fe fd59 	bl	8005b0c <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	429a      	cmp	r2, r3
 8007064:	d302      	bcc.n	800706c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d116      	bne.n	800709a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2220      	movs	r2, #32
 8007076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	f043 0220 	orr.w	r2, r3, #32
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e007      	b.n	80070aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a4:	2b80      	cmp	r3, #128	; 0x80
 80070a6:	d1ca      	bne.n	800703e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070be:	e02d      	b.n	800711c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 f88d 	bl	80071e0 <I2C_IsAcknowledgeFailed>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e02d      	b.n	800712c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d6:	d021      	beq.n	800711c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070d8:	f7fe fd18 	bl	8005b0c <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d302      	bcc.n	80070ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d116      	bne.n	800711c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007108:	f043 0220 	orr.w	r2, r3, #32
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e007      	b.n	800712c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	f003 0304 	and.w	r3, r3, #4
 8007126:	2b04      	cmp	r3, #4
 8007128:	d1ca      	bne.n	80070c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007140:	e042      	b.n	80071c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	f003 0310 	and.w	r3, r3, #16
 800714c:	2b10      	cmp	r3, #16
 800714e:	d119      	bne.n	8007184 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f06f 0210 	mvn.w	r2, #16
 8007158:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2220      	movs	r2, #32
 8007164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e029      	b.n	80071d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007184:	f7fe fcc2 	bl	8005b0c <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	429a      	cmp	r2, r3
 8007192:	d302      	bcc.n	800719a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d116      	bne.n	80071c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b4:	f043 0220 	orr.w	r2, r3, #32
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e007      	b.n	80071d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d2:	2b40      	cmp	r3, #64	; 0x40
 80071d4:	d1b5      	bne.n	8007142 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f6:	d11b      	bne.n	8007230 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007200:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721c:	f043 0204 	orr.w	r2, r3, #4
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e000      	b.n	8007232 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
	...

08007240 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e25b      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d075      	beq.n	800734a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800725e:	4ba3      	ldr	r3, [pc, #652]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f003 030c 	and.w	r3, r3, #12
 8007266:	2b04      	cmp	r3, #4
 8007268:	d00c      	beq.n	8007284 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800726a:	4ba0      	ldr	r3, [pc, #640]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007272:	2b08      	cmp	r3, #8
 8007274:	d112      	bne.n	800729c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007276:	4b9d      	ldr	r3, [pc, #628]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800727e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007282:	d10b      	bne.n	800729c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007284:	4b99      	ldr	r3, [pc, #612]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d05b      	beq.n	8007348 <HAL_RCC_OscConfig+0x108>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d157      	bne.n	8007348 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e236      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a4:	d106      	bne.n	80072b4 <HAL_RCC_OscConfig+0x74>
 80072a6:	4b91      	ldr	r3, [pc, #580]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a90      	ldr	r2, [pc, #576]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072b0:	6013      	str	r3, [r2, #0]
 80072b2:	e01d      	b.n	80072f0 <HAL_RCC_OscConfig+0xb0>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072bc:	d10c      	bne.n	80072d8 <HAL_RCC_OscConfig+0x98>
 80072be:	4b8b      	ldr	r3, [pc, #556]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a8a      	ldr	r2, [pc, #552]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	4b88      	ldr	r3, [pc, #544]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a87      	ldr	r2, [pc, #540]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	e00b      	b.n	80072f0 <HAL_RCC_OscConfig+0xb0>
 80072d8:	4b84      	ldr	r3, [pc, #528]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a83      	ldr	r2, [pc, #524]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072e2:	6013      	str	r3, [r2, #0]
 80072e4:	4b81      	ldr	r3, [pc, #516]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a80      	ldr	r2, [pc, #512]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80072ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d013      	beq.n	8007320 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072f8:	f7fe fc08 	bl	8005b0c <HAL_GetTick>
 80072fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072fe:	e008      	b.n	8007312 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007300:	f7fe fc04 	bl	8005b0c <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	2b64      	cmp	r3, #100	; 0x64
 800730c:	d901      	bls.n	8007312 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e1fb      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007312:	4b76      	ldr	r3, [pc, #472]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0f0      	beq.n	8007300 <HAL_RCC_OscConfig+0xc0>
 800731e:	e014      	b.n	800734a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007320:	f7fe fbf4 	bl	8005b0c <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007328:	f7fe fbf0 	bl	8005b0c <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b64      	cmp	r3, #100	; 0x64
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e1e7      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800733a:	4b6c      	ldr	r3, [pc, #432]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f0      	bne.n	8007328 <HAL_RCC_OscConfig+0xe8>
 8007346:	e000      	b.n	800734a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d063      	beq.n	800741e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007356:	4b65      	ldr	r3, [pc, #404]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f003 030c 	and.w	r3, r3, #12
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00b      	beq.n	800737a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007362:	4b62      	ldr	r3, [pc, #392]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800736a:	2b08      	cmp	r3, #8
 800736c:	d11c      	bne.n	80073a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800736e:	4b5f      	ldr	r3, [pc, #380]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d116      	bne.n	80073a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800737a:	4b5c      	ldr	r3, [pc, #368]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d005      	beq.n	8007392 <HAL_RCC_OscConfig+0x152>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d001      	beq.n	8007392 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e1bb      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007392:	4b56      	ldr	r3, [pc, #344]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	4952      	ldr	r1, [pc, #328]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073a6:	e03a      	b.n	800741e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d020      	beq.n	80073f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073b0:	4b4f      	ldr	r3, [pc, #316]	; (80074f0 <HAL_RCC_OscConfig+0x2b0>)
 80073b2:	2201      	movs	r2, #1
 80073b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b6:	f7fe fba9 	bl	8005b0c <HAL_GetTick>
 80073ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073bc:	e008      	b.n	80073d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073be:	f7fe fba5 	bl	8005b0c <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d901      	bls.n	80073d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e19c      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073d0:	4b46      	ldr	r3, [pc, #280]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0f0      	beq.n	80073be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073dc:	4b43      	ldr	r3, [pc, #268]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	00db      	lsls	r3, r3, #3
 80073ea:	4940      	ldr	r1, [pc, #256]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	600b      	str	r3, [r1, #0]
 80073f0:	e015      	b.n	800741e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073f2:	4b3f      	ldr	r3, [pc, #252]	; (80074f0 <HAL_RCC_OscConfig+0x2b0>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f8:	f7fe fb88 	bl	8005b0c <HAL_GetTick>
 80073fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073fe:	e008      	b.n	8007412 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007400:	f7fe fb84 	bl	8005b0c <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d901      	bls.n	8007412 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e17b      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007412:	4b36      	ldr	r3, [pc, #216]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1f0      	bne.n	8007400 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0308 	and.w	r3, r3, #8
 8007426:	2b00      	cmp	r3, #0
 8007428:	d030      	beq.n	800748c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d016      	beq.n	8007460 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007432:	4b30      	ldr	r3, [pc, #192]	; (80074f4 <HAL_RCC_OscConfig+0x2b4>)
 8007434:	2201      	movs	r2, #1
 8007436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007438:	f7fe fb68 	bl	8005b0c <HAL_GetTick>
 800743c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800743e:	e008      	b.n	8007452 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007440:	f7fe fb64 	bl	8005b0c <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b02      	cmp	r3, #2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e15b      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007452:	4b26      	ldr	r3, [pc, #152]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0f0      	beq.n	8007440 <HAL_RCC_OscConfig+0x200>
 800745e:	e015      	b.n	800748c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007460:	4b24      	ldr	r3, [pc, #144]	; (80074f4 <HAL_RCC_OscConfig+0x2b4>)
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007466:	f7fe fb51 	bl	8005b0c <HAL_GetTick>
 800746a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800746c:	e008      	b.n	8007480 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800746e:	f7fe fb4d 	bl	8005b0c <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d901      	bls.n	8007480 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e144      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007480:	4b1a      	ldr	r3, [pc, #104]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 8007482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1f0      	bne.n	800746e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 80a0 	beq.w	80075da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800749a:	2300      	movs	r3, #0
 800749c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800749e:	4b13      	ldr	r3, [pc, #76]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10f      	bne.n	80074ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074aa:	2300      	movs	r3, #0
 80074ac:	60bb      	str	r3, [r7, #8]
 80074ae:	4b0f      	ldr	r3, [pc, #60]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	4a0e      	ldr	r2, [pc, #56]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80074b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074b8:	6413      	str	r3, [r2, #64]	; 0x40
 80074ba:	4b0c      	ldr	r3, [pc, #48]	; (80074ec <HAL_RCC_OscConfig+0x2ac>)
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074c2:	60bb      	str	r3, [r7, #8]
 80074c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074c6:	2301      	movs	r3, #1
 80074c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074ca:	4b0b      	ldr	r3, [pc, #44]	; (80074f8 <HAL_RCC_OscConfig+0x2b8>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d121      	bne.n	800751a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074d6:	4b08      	ldr	r3, [pc, #32]	; (80074f8 <HAL_RCC_OscConfig+0x2b8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a07      	ldr	r2, [pc, #28]	; (80074f8 <HAL_RCC_OscConfig+0x2b8>)
 80074dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074e2:	f7fe fb13 	bl	8005b0c <HAL_GetTick>
 80074e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074e8:	e011      	b.n	800750e <HAL_RCC_OscConfig+0x2ce>
 80074ea:	bf00      	nop
 80074ec:	40023800 	.word	0x40023800
 80074f0:	42470000 	.word	0x42470000
 80074f4:	42470e80 	.word	0x42470e80
 80074f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074fc:	f7fe fb06 	bl	8005b0c <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d901      	bls.n	800750e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e0fd      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800750e:	4b81      	ldr	r3, [pc, #516]	; (8007714 <HAL_RCC_OscConfig+0x4d4>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0f0      	beq.n	80074fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d106      	bne.n	8007530 <HAL_RCC_OscConfig+0x2f0>
 8007522:	4b7d      	ldr	r3, [pc, #500]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007526:	4a7c      	ldr	r2, [pc, #496]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007528:	f043 0301 	orr.w	r3, r3, #1
 800752c:	6713      	str	r3, [r2, #112]	; 0x70
 800752e:	e01c      	b.n	800756a <HAL_RCC_OscConfig+0x32a>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	2b05      	cmp	r3, #5
 8007536:	d10c      	bne.n	8007552 <HAL_RCC_OscConfig+0x312>
 8007538:	4b77      	ldr	r3, [pc, #476]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 800753a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753c:	4a76      	ldr	r2, [pc, #472]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 800753e:	f043 0304 	orr.w	r3, r3, #4
 8007542:	6713      	str	r3, [r2, #112]	; 0x70
 8007544:	4b74      	ldr	r3, [pc, #464]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007548:	4a73      	ldr	r2, [pc, #460]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 800754a:	f043 0301 	orr.w	r3, r3, #1
 800754e:	6713      	str	r3, [r2, #112]	; 0x70
 8007550:	e00b      	b.n	800756a <HAL_RCC_OscConfig+0x32a>
 8007552:	4b71      	ldr	r3, [pc, #452]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007556:	4a70      	ldr	r2, [pc, #448]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007558:	f023 0301 	bic.w	r3, r3, #1
 800755c:	6713      	str	r3, [r2, #112]	; 0x70
 800755e:	4b6e      	ldr	r3, [pc, #440]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007562:	4a6d      	ldr	r2, [pc, #436]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007564:	f023 0304 	bic.w	r3, r3, #4
 8007568:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d015      	beq.n	800759e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007572:	f7fe facb 	bl	8005b0c <HAL_GetTick>
 8007576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007578:	e00a      	b.n	8007590 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800757a:	f7fe fac7 	bl	8005b0c <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	f241 3288 	movw	r2, #5000	; 0x1388
 8007588:	4293      	cmp	r3, r2
 800758a:	d901      	bls.n	8007590 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e0bc      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007590:	4b61      	ldr	r3, [pc, #388]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007594:	f003 0302 	and.w	r3, r3, #2
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0ee      	beq.n	800757a <HAL_RCC_OscConfig+0x33a>
 800759c:	e014      	b.n	80075c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800759e:	f7fe fab5 	bl	8005b0c <HAL_GetTick>
 80075a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075a4:	e00a      	b.n	80075bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075a6:	f7fe fab1 	bl	8005b0c <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d901      	bls.n	80075bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e0a6      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075bc:	4b56      	ldr	r3, [pc, #344]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 80075be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1ee      	bne.n	80075a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d105      	bne.n	80075da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075ce:	4b52      	ldr	r3, [pc, #328]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	4a51      	ldr	r2, [pc, #324]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 80075d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 8092 	beq.w	8007708 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075e4:	4b4c      	ldr	r3, [pc, #304]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f003 030c 	and.w	r3, r3, #12
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d05c      	beq.n	80076aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d141      	bne.n	800767c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075f8:	4b48      	ldr	r3, [pc, #288]	; (800771c <HAL_RCC_OscConfig+0x4dc>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075fe:	f7fe fa85 	bl	8005b0c <HAL_GetTick>
 8007602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007604:	e008      	b.n	8007618 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007606:	f7fe fa81 	bl	8005b0c <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	2b02      	cmp	r3, #2
 8007612:	d901      	bls.n	8007618 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e078      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007618:	4b3f      	ldr	r3, [pc, #252]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1f0      	bne.n	8007606 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	69da      	ldr	r2, [r3, #28]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	431a      	orrs	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	019b      	lsls	r3, r3, #6
 8007634:	431a      	orrs	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763a:	085b      	lsrs	r3, r3, #1
 800763c:	3b01      	subs	r3, #1
 800763e:	041b      	lsls	r3, r3, #16
 8007640:	431a      	orrs	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	061b      	lsls	r3, r3, #24
 8007648:	4933      	ldr	r1, [pc, #204]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 800764a:	4313      	orrs	r3, r2
 800764c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800764e:	4b33      	ldr	r3, [pc, #204]	; (800771c <HAL_RCC_OscConfig+0x4dc>)
 8007650:	2201      	movs	r2, #1
 8007652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007654:	f7fe fa5a 	bl	8005b0c <HAL_GetTick>
 8007658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800765c:	f7fe fa56 	bl	8005b0c <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e04d      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800766e:	4b2a      	ldr	r3, [pc, #168]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0f0      	beq.n	800765c <HAL_RCC_OscConfig+0x41c>
 800767a:	e045      	b.n	8007708 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800767c:	4b27      	ldr	r3, [pc, #156]	; (800771c <HAL_RCC_OscConfig+0x4dc>)
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007682:	f7fe fa43 	bl	8005b0c <HAL_GetTick>
 8007686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007688:	e008      	b.n	800769c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800768a:	f7fe fa3f 	bl	8005b0c <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d901      	bls.n	800769c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e036      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800769c:	4b1e      	ldr	r3, [pc, #120]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1f0      	bne.n	800768a <HAL_RCC_OscConfig+0x44a>
 80076a8:	e02e      	b.n	8007708 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d101      	bne.n	80076b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e029      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80076b6:	4b18      	ldr	r3, [pc, #96]	; (8007718 <HAL_RCC_OscConfig+0x4d8>)
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d11c      	bne.n	8007704 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d115      	bne.n	8007704 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076de:	4013      	ands	r3, r2
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d10d      	bne.n	8007704 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d106      	bne.n	8007704 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007700:	429a      	cmp	r2, r3
 8007702:	d001      	beq.n	8007708 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e000      	b.n	800770a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	40007000 	.word	0x40007000
 8007718:	40023800 	.word	0x40023800
 800771c:	42470060 	.word	0x42470060

08007720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e0cc      	b.n	80078ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007734:	4b68      	ldr	r3, [pc, #416]	; (80078d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 030f 	and.w	r3, r3, #15
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	429a      	cmp	r2, r3
 8007740:	d90c      	bls.n	800775c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007742:	4b65      	ldr	r3, [pc, #404]	; (80078d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	b2d2      	uxtb	r2, r2
 8007748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800774a:	4b63      	ldr	r3, [pc, #396]	; (80078d8 <HAL_RCC_ClockConfig+0x1b8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	429a      	cmp	r2, r3
 8007756:	d001      	beq.n	800775c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e0b8      	b.n	80078ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d020      	beq.n	80077aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0304 	and.w	r3, r3, #4
 8007770:	2b00      	cmp	r3, #0
 8007772:	d005      	beq.n	8007780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007774:	4b59      	ldr	r3, [pc, #356]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	4a58      	ldr	r2, [pc, #352]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 800777a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800777e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0308 	and.w	r3, r3, #8
 8007788:	2b00      	cmp	r3, #0
 800778a:	d005      	beq.n	8007798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800778c:	4b53      	ldr	r3, [pc, #332]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	4a52      	ldr	r2, [pc, #328]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 8007792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007798:	4b50      	ldr	r3, [pc, #320]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	494d      	ldr	r1, [pc, #308]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d044      	beq.n	8007840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d107      	bne.n	80077ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077be:	4b47      	ldr	r3, [pc, #284]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d119      	bne.n	80077fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e07f      	b.n	80078ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d003      	beq.n	80077de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d107      	bne.n	80077ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077de:	4b3f      	ldr	r3, [pc, #252]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d109      	bne.n	80077fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e06f      	b.n	80078ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077ee:	4b3b      	ldr	r3, [pc, #236]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e067      	b.n	80078ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80077fe:	4b37      	ldr	r3, [pc, #220]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f023 0203 	bic.w	r2, r3, #3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	4934      	ldr	r1, [pc, #208]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 800780c:	4313      	orrs	r3, r2
 800780e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007810:	f7fe f97c 	bl	8005b0c <HAL_GetTick>
 8007814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007816:	e00a      	b.n	800782e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007818:	f7fe f978 	bl	8005b0c <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	f241 3288 	movw	r2, #5000	; 0x1388
 8007826:	4293      	cmp	r3, r2
 8007828:	d901      	bls.n	800782e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e04f      	b.n	80078ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800782e:	4b2b      	ldr	r3, [pc, #172]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f003 020c 	and.w	r2, r3, #12
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	429a      	cmp	r2, r3
 800783e:	d1eb      	bne.n	8007818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007840:	4b25      	ldr	r3, [pc, #148]	; (80078d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 030f 	and.w	r3, r3, #15
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	429a      	cmp	r2, r3
 800784c:	d20c      	bcs.n	8007868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800784e:	4b22      	ldr	r3, [pc, #136]	; (80078d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	b2d2      	uxtb	r2, r2
 8007854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007856:	4b20      	ldr	r3, [pc, #128]	; (80078d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 030f 	and.w	r3, r3, #15
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d001      	beq.n	8007868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e032      	b.n	80078ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b00      	cmp	r3, #0
 8007872:	d008      	beq.n	8007886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007874:	4b19      	ldr	r3, [pc, #100]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	4916      	ldr	r1, [pc, #88]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 8007882:	4313      	orrs	r3, r2
 8007884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0308 	and.w	r3, r3, #8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d009      	beq.n	80078a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007892:	4b12      	ldr	r3, [pc, #72]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	00db      	lsls	r3, r3, #3
 80078a0:	490e      	ldr	r1, [pc, #56]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80078a6:	f000 f821 	bl	80078ec <HAL_RCC_GetSysClockFreq>
 80078aa:	4601      	mov	r1, r0
 80078ac:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <HAL_RCC_ClockConfig+0x1bc>)
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	091b      	lsrs	r3, r3, #4
 80078b2:	f003 030f 	and.w	r3, r3, #15
 80078b6:	4a0a      	ldr	r2, [pc, #40]	; (80078e0 <HAL_RCC_ClockConfig+0x1c0>)
 80078b8:	5cd3      	ldrb	r3, [r2, r3]
 80078ba:	fa21 f303 	lsr.w	r3, r1, r3
 80078be:	4a09      	ldr	r2, [pc, #36]	; (80078e4 <HAL_RCC_ClockConfig+0x1c4>)
 80078c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80078c2:	4b09      	ldr	r3, [pc, #36]	; (80078e8 <HAL_RCC_ClockConfig+0x1c8>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7f9 fe1c 	bl	8001504 <HAL_InitTick>

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	40023c00 	.word	0x40023c00
 80078dc:	40023800 	.word	0x40023800
 80078e0:	08011734 	.word	0x08011734
 80078e4:	20001228 	.word	0x20001228
 80078e8:	200012f4 	.word	0x200012f4

080078ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	607b      	str	r3, [r7, #4]
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	2300      	movs	r3, #0
 80078fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007902:	4b63      	ldr	r3, [pc, #396]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f003 030c 	and.w	r3, r3, #12
 800790a:	2b04      	cmp	r3, #4
 800790c:	d007      	beq.n	800791e <HAL_RCC_GetSysClockFreq+0x32>
 800790e:	2b08      	cmp	r3, #8
 8007910:	d008      	beq.n	8007924 <HAL_RCC_GetSysClockFreq+0x38>
 8007912:	2b00      	cmp	r3, #0
 8007914:	f040 80b4 	bne.w	8007a80 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007918:	4b5e      	ldr	r3, [pc, #376]	; (8007a94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800791a:	60bb      	str	r3, [r7, #8]
       break;
 800791c:	e0b3      	b.n	8007a86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800791e:	4b5e      	ldr	r3, [pc, #376]	; (8007a98 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007920:	60bb      	str	r3, [r7, #8]
      break;
 8007922:	e0b0      	b.n	8007a86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007924:	4b5a      	ldr	r3, [pc, #360]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800792c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800792e:	4b58      	ldr	r3, [pc, #352]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d04a      	beq.n	80079d0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800793a:	4b55      	ldr	r3, [pc, #340]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	099b      	lsrs	r3, r3, #6
 8007940:	f04f 0400 	mov.w	r4, #0
 8007944:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007948:	f04f 0200 	mov.w	r2, #0
 800794c:	ea03 0501 	and.w	r5, r3, r1
 8007950:	ea04 0602 	and.w	r6, r4, r2
 8007954:	4629      	mov	r1, r5
 8007956:	4632      	mov	r2, r6
 8007958:	f04f 0300 	mov.w	r3, #0
 800795c:	f04f 0400 	mov.w	r4, #0
 8007960:	0154      	lsls	r4, r2, #5
 8007962:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007966:	014b      	lsls	r3, r1, #5
 8007968:	4619      	mov	r1, r3
 800796a:	4622      	mov	r2, r4
 800796c:	1b49      	subs	r1, r1, r5
 800796e:	eb62 0206 	sbc.w	r2, r2, r6
 8007972:	f04f 0300 	mov.w	r3, #0
 8007976:	f04f 0400 	mov.w	r4, #0
 800797a:	0194      	lsls	r4, r2, #6
 800797c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007980:	018b      	lsls	r3, r1, #6
 8007982:	1a5b      	subs	r3, r3, r1
 8007984:	eb64 0402 	sbc.w	r4, r4, r2
 8007988:	f04f 0100 	mov.w	r1, #0
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	00e2      	lsls	r2, r4, #3
 8007992:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007996:	00d9      	lsls	r1, r3, #3
 8007998:	460b      	mov	r3, r1
 800799a:	4614      	mov	r4, r2
 800799c:	195b      	adds	r3, r3, r5
 800799e:	eb44 0406 	adc.w	r4, r4, r6
 80079a2:	f04f 0100 	mov.w	r1, #0
 80079a6:	f04f 0200 	mov.w	r2, #0
 80079aa:	0262      	lsls	r2, r4, #9
 80079ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80079b0:	0259      	lsls	r1, r3, #9
 80079b2:	460b      	mov	r3, r1
 80079b4:	4614      	mov	r4, r2
 80079b6:	4618      	mov	r0, r3
 80079b8:	4621      	mov	r1, r4
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f04f 0400 	mov.w	r4, #0
 80079c0:	461a      	mov	r2, r3
 80079c2:	4623      	mov	r3, r4
 80079c4:	f7f9 f948 	bl	8000c58 <__aeabi_uldivmod>
 80079c8:	4603      	mov	r3, r0
 80079ca:	460c      	mov	r4, r1
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	e049      	b.n	8007a64 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079d0:	4b2f      	ldr	r3, [pc, #188]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	099b      	lsrs	r3, r3, #6
 80079d6:	f04f 0400 	mov.w	r4, #0
 80079da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80079de:	f04f 0200 	mov.w	r2, #0
 80079e2:	ea03 0501 	and.w	r5, r3, r1
 80079e6:	ea04 0602 	and.w	r6, r4, r2
 80079ea:	4629      	mov	r1, r5
 80079ec:	4632      	mov	r2, r6
 80079ee:	f04f 0300 	mov.w	r3, #0
 80079f2:	f04f 0400 	mov.w	r4, #0
 80079f6:	0154      	lsls	r4, r2, #5
 80079f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80079fc:	014b      	lsls	r3, r1, #5
 80079fe:	4619      	mov	r1, r3
 8007a00:	4622      	mov	r2, r4
 8007a02:	1b49      	subs	r1, r1, r5
 8007a04:	eb62 0206 	sbc.w	r2, r2, r6
 8007a08:	f04f 0300 	mov.w	r3, #0
 8007a0c:	f04f 0400 	mov.w	r4, #0
 8007a10:	0194      	lsls	r4, r2, #6
 8007a12:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007a16:	018b      	lsls	r3, r1, #6
 8007a18:	1a5b      	subs	r3, r3, r1
 8007a1a:	eb64 0402 	sbc.w	r4, r4, r2
 8007a1e:	f04f 0100 	mov.w	r1, #0
 8007a22:	f04f 0200 	mov.w	r2, #0
 8007a26:	00e2      	lsls	r2, r4, #3
 8007a28:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007a2c:	00d9      	lsls	r1, r3, #3
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4614      	mov	r4, r2
 8007a32:	195b      	adds	r3, r3, r5
 8007a34:	eb44 0406 	adc.w	r4, r4, r6
 8007a38:	f04f 0100 	mov.w	r1, #0
 8007a3c:	f04f 0200 	mov.w	r2, #0
 8007a40:	02a2      	lsls	r2, r4, #10
 8007a42:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007a46:	0299      	lsls	r1, r3, #10
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4614      	mov	r4, r2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	4621      	mov	r1, r4
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f04f 0400 	mov.w	r4, #0
 8007a56:	461a      	mov	r2, r3
 8007a58:	4623      	mov	r3, r4
 8007a5a:	f7f9 f8fd 	bl	8000c58 <__aeabi_uldivmod>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	460c      	mov	r4, r1
 8007a62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a64:	4b0a      	ldr	r3, [pc, #40]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	0c1b      	lsrs	r3, r3, #16
 8007a6a:	f003 0303 	and.w	r3, r3, #3
 8007a6e:	3301      	adds	r3, #1
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a7c:	60bb      	str	r3, [r7, #8]
      break;
 8007a7e:	e002      	b.n	8007a86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a80:	4b04      	ldr	r3, [pc, #16]	; (8007a94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007a82:	60bb      	str	r3, [r7, #8]
      break;
 8007a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a86:	68bb      	ldr	r3, [r7, #8]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a90:	40023800 	.word	0x40023800
 8007a94:	00f42400 	.word	0x00f42400
 8007a98:	007a1200 	.word	0x007a1200

08007a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007aa0:	4b03      	ldr	r3, [pc, #12]	; (8007ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	20001228 	.word	0x20001228

08007ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ab8:	f7ff fff0 	bl	8007a9c <HAL_RCC_GetHCLKFreq>
 8007abc:	4601      	mov	r1, r0
 8007abe:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	0a9b      	lsrs	r3, r3, #10
 8007ac4:	f003 0307 	and.w	r3, r3, #7
 8007ac8:	4a03      	ldr	r2, [pc, #12]	; (8007ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007aca:	5cd3      	ldrb	r3, [r2, r3]
 8007acc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	40023800 	.word	0x40023800
 8007ad8:	08011744 	.word	0x08011744

08007adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ae0:	f7ff ffdc 	bl	8007a9c <HAL_RCC_GetHCLKFreq>
 8007ae4:	4601      	mov	r1, r0
 8007ae6:	4b05      	ldr	r3, [pc, #20]	; (8007afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	0b5b      	lsrs	r3, r3, #13
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	4a03      	ldr	r2, [pc, #12]	; (8007b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007af2:	5cd3      	ldrb	r3, [r2, r3]
 8007af4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	40023800 	.word	0x40023800
 8007b00:	08011744 	.word	0x08011744

08007b04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	220f      	movs	r2, #15
 8007b12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b14:	4b12      	ldr	r3, [pc, #72]	; (8007b60 <HAL_RCC_GetClockConfig+0x5c>)
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f003 0203 	and.w	r2, r3, #3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007b20:	4b0f      	ldr	r3, [pc, #60]	; (8007b60 <HAL_RCC_GetClockConfig+0x5c>)
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007b2c:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <HAL_RCC_GetClockConfig+0x5c>)
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007b38:	4b09      	ldr	r3, [pc, #36]	; (8007b60 <HAL_RCC_GetClockConfig+0x5c>)
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	08db      	lsrs	r3, r3, #3
 8007b3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b46:	4b07      	ldr	r3, [pc, #28]	; (8007b64 <HAL_RCC_GetClockConfig+0x60>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 020f 	and.w	r2, r3, #15
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	601a      	str	r2, [r3, #0]
}
 8007b52:	bf00      	nop
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	40023800 	.word	0x40023800
 8007b64:	40023c00 	.word	0x40023c00

08007b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e01d      	b.n	8007bb6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d106      	bne.n	8007b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f815 	bl	8007bbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	f000 f968 	bl	8007e7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b085      	sub	sp, #20
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f042 0201 	orr.w	r2, r2, #1
 8007be8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 0307 	and.w	r3, r3, #7
 8007bf4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b06      	cmp	r3, #6
 8007bfa:	d007      	beq.n	8007c0c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f042 0201 	orr.w	r2, r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d122      	bne.n	8007c76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d11b      	bne.n	8007c76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f06f 0202 	mvn.w	r2, #2
 8007c46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	f003 0303 	and.w	r3, r3, #3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f8ee 	bl	8007e3e <HAL_TIM_IC_CaptureCallback>
 8007c62:	e005      	b.n	8007c70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f8e0 	bl	8007e2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f8f1 	bl	8007e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b04      	cmp	r3, #4
 8007c82:	d122      	bne.n	8007cca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f003 0304 	and.w	r3, r3, #4
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	d11b      	bne.n	8007cca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f06f 0204 	mvn.w	r2, #4
 8007c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f8c4 	bl	8007e3e <HAL_TIM_IC_CaptureCallback>
 8007cb6:	e005      	b.n	8007cc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f8b6 	bl	8007e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f8c7 	bl	8007e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b08      	cmp	r3, #8
 8007cd6:	d122      	bne.n	8007d1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f003 0308 	and.w	r3, r3, #8
 8007ce2:	2b08      	cmp	r3, #8
 8007ce4:	d11b      	bne.n	8007d1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f06f 0208 	mvn.w	r2, #8
 8007cee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2204      	movs	r2, #4
 8007cf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	f003 0303 	and.w	r3, r3, #3
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f89a 	bl	8007e3e <HAL_TIM_IC_CaptureCallback>
 8007d0a:	e005      	b.n	8007d18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f88c 	bl	8007e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f89d 	bl	8007e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	f003 0310 	and.w	r3, r3, #16
 8007d28:	2b10      	cmp	r3, #16
 8007d2a:	d122      	bne.n	8007d72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	f003 0310 	and.w	r3, r3, #16
 8007d36:	2b10      	cmp	r3, #16
 8007d38:	d11b      	bne.n	8007d72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f06f 0210 	mvn.w	r2, #16
 8007d42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2208      	movs	r2, #8
 8007d48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f870 	bl	8007e3e <HAL_TIM_IC_CaptureCallback>
 8007d5e:	e005      	b.n	8007d6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f862 	bl	8007e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f873 	bl	8007e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d10e      	bne.n	8007d9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d107      	bne.n	8007d9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f06f 0201 	mvn.w	r2, #1
 8007d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7f9 faaf 	bl	80012fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da8:	2b80      	cmp	r3, #128	; 0x80
 8007daa:	d10e      	bne.n	8007dca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db6:	2b80      	cmp	r3, #128	; 0x80
 8007db8:	d107      	bne.n	8007dca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f8e3 	bl	8007f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd4:	2b40      	cmp	r3, #64	; 0x40
 8007dd6:	d10e      	bne.n	8007df6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de2:	2b40      	cmp	r3, #64	; 0x40
 8007de4:	d107      	bne.n	8007df6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f838 	bl	8007e66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	f003 0320 	and.w	r3, r3, #32
 8007e00:	2b20      	cmp	r3, #32
 8007e02:	d10e      	bne.n	8007e22 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b20      	cmp	r3, #32
 8007e10:	d107      	bne.n	8007e22 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f06f 0220 	mvn.w	r2, #32
 8007e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f8ad 	bl	8007f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e22:	bf00      	nop
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e32:	bf00      	nop
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b083      	sub	sp, #12
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b083      	sub	sp, #12
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e5a:	bf00      	nop
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e6e:	bf00      	nop
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
	...

08007e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a34      	ldr	r2, [pc, #208]	; (8007f60 <TIM_Base_SetConfig+0xe4>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d00f      	beq.n	8007eb4 <TIM_Base_SetConfig+0x38>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e9a:	d00b      	beq.n	8007eb4 <TIM_Base_SetConfig+0x38>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a31      	ldr	r2, [pc, #196]	; (8007f64 <TIM_Base_SetConfig+0xe8>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d007      	beq.n	8007eb4 <TIM_Base_SetConfig+0x38>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a30      	ldr	r2, [pc, #192]	; (8007f68 <TIM_Base_SetConfig+0xec>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d003      	beq.n	8007eb4 <TIM_Base_SetConfig+0x38>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a2f      	ldr	r2, [pc, #188]	; (8007f6c <TIM_Base_SetConfig+0xf0>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d108      	bne.n	8007ec6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a25      	ldr	r2, [pc, #148]	; (8007f60 <TIM_Base_SetConfig+0xe4>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d01b      	beq.n	8007f06 <TIM_Base_SetConfig+0x8a>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ed4:	d017      	beq.n	8007f06 <TIM_Base_SetConfig+0x8a>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a22      	ldr	r2, [pc, #136]	; (8007f64 <TIM_Base_SetConfig+0xe8>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d013      	beq.n	8007f06 <TIM_Base_SetConfig+0x8a>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a21      	ldr	r2, [pc, #132]	; (8007f68 <TIM_Base_SetConfig+0xec>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d00f      	beq.n	8007f06 <TIM_Base_SetConfig+0x8a>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a20      	ldr	r2, [pc, #128]	; (8007f6c <TIM_Base_SetConfig+0xf0>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d00b      	beq.n	8007f06 <TIM_Base_SetConfig+0x8a>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a1f      	ldr	r2, [pc, #124]	; (8007f70 <TIM_Base_SetConfig+0xf4>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d007      	beq.n	8007f06 <TIM_Base_SetConfig+0x8a>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a1e      	ldr	r2, [pc, #120]	; (8007f74 <TIM_Base_SetConfig+0xf8>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d003      	beq.n	8007f06 <TIM_Base_SetConfig+0x8a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a1d      	ldr	r2, [pc, #116]	; (8007f78 <TIM_Base_SetConfig+0xfc>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d108      	bne.n	8007f18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a08      	ldr	r2, [pc, #32]	; (8007f60 <TIM_Base_SetConfig+0xe4>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d103      	bne.n	8007f4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	615a      	str	r2, [r3, #20]
}
 8007f52:	bf00      	nop
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	40010000 	.word	0x40010000
 8007f64:	40000400 	.word	0x40000400
 8007f68:	40000800 	.word	0x40000800
 8007f6c:	40000c00 	.word	0x40000c00
 8007f70:	40014000 	.word	0x40014000
 8007f74:	40014400 	.word	0x40014400
 8007f78:	40014800 	.word	0x40014800

08007f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e03f      	b.n	8008036 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d106      	bne.n	8007fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f837 	bl	800803e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2224      	movs	r2, #36	; 0x24
 8007fd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f915 	bl	8008218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	691a      	ldr	r2, [r3, #16]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	695a      	ldr	r2, [r3, #20]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800800c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68da      	ldr	r2, [r3, #12]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800801c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2220      	movs	r2, #32
 8008028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2220      	movs	r2, #32
 8008030:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b088      	sub	sp, #32
 8008056:	af02      	add	r7, sp, #8
 8008058:	60f8      	str	r0, [r7, #12]
 800805a:	60b9      	str	r1, [r7, #8]
 800805c:	603b      	str	r3, [r7, #0]
 800805e:	4613      	mov	r3, r2
 8008060:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b20      	cmp	r3, #32
 8008070:	f040 8083 	bne.w	800817a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <HAL_UART_Transmit+0x2e>
 800807a:	88fb      	ldrh	r3, [r7, #6]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e07b      	b.n	800817c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800808a:	2b01      	cmp	r3, #1
 800808c:	d101      	bne.n	8008092 <HAL_UART_Transmit+0x40>
 800808e:	2302      	movs	r3, #2
 8008090:	e074      	b.n	800817c <HAL_UART_Transmit+0x12a>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2221      	movs	r2, #33	; 0x21
 80080a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80080a8:	f7fd fd30 	bl	8005b0c <HAL_GetTick>
 80080ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	88fa      	ldrh	r2, [r7, #6]
 80080b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	88fa      	ldrh	r2, [r7, #6]
 80080b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80080c2:	e042      	b.n	800814a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	3b01      	subs	r3, #1
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080da:	d122      	bne.n	8008122 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	2200      	movs	r2, #0
 80080e4:	2180      	movs	r1, #128	; 0x80
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 f84c 	bl	8008184 <UART_WaitOnFlagUntilTimeout>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e042      	b.n	800817c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008108:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d103      	bne.n	800811a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	3302      	adds	r3, #2
 8008116:	60bb      	str	r3, [r7, #8]
 8008118:	e017      	b.n	800814a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	3301      	adds	r3, #1
 800811e:	60bb      	str	r3, [r7, #8]
 8008120:	e013      	b.n	800814a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2200      	movs	r2, #0
 800812a:	2180      	movs	r1, #128	; 0x80
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 f829 	bl	8008184 <UART_WaitOnFlagUntilTimeout>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e01f      	b.n	800817c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	60ba      	str	r2, [r7, #8]
 8008142:	781a      	ldrb	r2, [r3, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800814e:	b29b      	uxth	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1b7      	bne.n	80080c4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	2200      	movs	r2, #0
 800815c:	2140      	movs	r1, #64	; 0x40
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 f810 	bl	8008184 <UART_WaitOnFlagUntilTimeout>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e006      	b.n	800817c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2220      	movs	r2, #32
 8008172:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	e000      	b.n	800817c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800817a:	2302      	movs	r3, #2
  }
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	603b      	str	r3, [r7, #0]
 8008190:	4613      	mov	r3, r2
 8008192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008194:	e02c      	b.n	80081f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819c:	d028      	beq.n	80081f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d007      	beq.n	80081b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80081a4:	f7fd fcb2 	bl	8005b0c <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	69ba      	ldr	r2, [r7, #24]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d21d      	bcs.n	80081f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68da      	ldr	r2, [r3, #12]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80081c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	695a      	ldr	r2, [r3, #20]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f022 0201 	bic.w	r2, r2, #1
 80081d2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2220      	movs	r2, #32
 80081d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2220      	movs	r2, #32
 80081e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e00f      	b.n	8008210 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	4013      	ands	r3, r2
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	bf0c      	ite	eq
 8008200:	2301      	moveq	r3, #1
 8008202:	2300      	movne	r3, #0
 8008204:	b2db      	uxtb	r3, r3
 8008206:	461a      	mov	r2, r3
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	429a      	cmp	r2, r3
 800820c:	d0c3      	beq.n	8008196 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	b085      	sub	sp, #20
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68da      	ldr	r2, [r3, #12]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689a      	ldr	r2, [r3, #8]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	431a      	orrs	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	431a      	orrs	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	4313      	orrs	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800825a:	f023 030c 	bic.w	r3, r3, #12
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	6812      	ldr	r2, [r2, #0]
 8008262:	68f9      	ldr	r1, [r7, #12]
 8008264:	430b      	orrs	r3, r1
 8008266:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	699a      	ldr	r2, [r3, #24]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008286:	f040 818b 	bne.w	80085a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4ac1      	ldr	r2, [pc, #772]	; (8008594 <UART_SetConfig+0x37c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d005      	beq.n	80082a0 <UART_SetConfig+0x88>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4abf      	ldr	r2, [pc, #764]	; (8008598 <UART_SetConfig+0x380>)
 800829a:	4293      	cmp	r3, r2
 800829c:	f040 80bd 	bne.w	800841a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082a0:	f7ff fc1c 	bl	8007adc <HAL_RCC_GetPCLK2Freq>
 80082a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	461d      	mov	r5, r3
 80082aa:	f04f 0600 	mov.w	r6, #0
 80082ae:	46a8      	mov	r8, r5
 80082b0:	46b1      	mov	r9, r6
 80082b2:	eb18 0308 	adds.w	r3, r8, r8
 80082b6:	eb49 0409 	adc.w	r4, r9, r9
 80082ba:	4698      	mov	r8, r3
 80082bc:	46a1      	mov	r9, r4
 80082be:	eb18 0805 	adds.w	r8, r8, r5
 80082c2:	eb49 0906 	adc.w	r9, r9, r6
 80082c6:	f04f 0100 	mov.w	r1, #0
 80082ca:	f04f 0200 	mov.w	r2, #0
 80082ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80082d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80082d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80082da:	4688      	mov	r8, r1
 80082dc:	4691      	mov	r9, r2
 80082de:	eb18 0005 	adds.w	r0, r8, r5
 80082e2:	eb49 0106 	adc.w	r1, r9, r6
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	461d      	mov	r5, r3
 80082ec:	f04f 0600 	mov.w	r6, #0
 80082f0:	196b      	adds	r3, r5, r5
 80082f2:	eb46 0406 	adc.w	r4, r6, r6
 80082f6:	461a      	mov	r2, r3
 80082f8:	4623      	mov	r3, r4
 80082fa:	f7f8 fcad 	bl	8000c58 <__aeabi_uldivmod>
 80082fe:	4603      	mov	r3, r0
 8008300:	460c      	mov	r4, r1
 8008302:	461a      	mov	r2, r3
 8008304:	4ba5      	ldr	r3, [pc, #660]	; (800859c <UART_SetConfig+0x384>)
 8008306:	fba3 2302 	umull	r2, r3, r3, r2
 800830a:	095b      	lsrs	r3, r3, #5
 800830c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	461d      	mov	r5, r3
 8008314:	f04f 0600 	mov.w	r6, #0
 8008318:	46a9      	mov	r9, r5
 800831a:	46b2      	mov	sl, r6
 800831c:	eb19 0309 	adds.w	r3, r9, r9
 8008320:	eb4a 040a 	adc.w	r4, sl, sl
 8008324:	4699      	mov	r9, r3
 8008326:	46a2      	mov	sl, r4
 8008328:	eb19 0905 	adds.w	r9, r9, r5
 800832c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008330:	f04f 0100 	mov.w	r1, #0
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800833c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008340:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008344:	4689      	mov	r9, r1
 8008346:	4692      	mov	sl, r2
 8008348:	eb19 0005 	adds.w	r0, r9, r5
 800834c:	eb4a 0106 	adc.w	r1, sl, r6
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	461d      	mov	r5, r3
 8008356:	f04f 0600 	mov.w	r6, #0
 800835a:	196b      	adds	r3, r5, r5
 800835c:	eb46 0406 	adc.w	r4, r6, r6
 8008360:	461a      	mov	r2, r3
 8008362:	4623      	mov	r3, r4
 8008364:	f7f8 fc78 	bl	8000c58 <__aeabi_uldivmod>
 8008368:	4603      	mov	r3, r0
 800836a:	460c      	mov	r4, r1
 800836c:	461a      	mov	r2, r3
 800836e:	4b8b      	ldr	r3, [pc, #556]	; (800859c <UART_SetConfig+0x384>)
 8008370:	fba3 1302 	umull	r1, r3, r3, r2
 8008374:	095b      	lsrs	r3, r3, #5
 8008376:	2164      	movs	r1, #100	; 0x64
 8008378:	fb01 f303 	mul.w	r3, r1, r3
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	3332      	adds	r3, #50	; 0x32
 8008382:	4a86      	ldr	r2, [pc, #536]	; (800859c <UART_SetConfig+0x384>)
 8008384:	fba2 2303 	umull	r2, r3, r2, r3
 8008388:	095b      	lsrs	r3, r3, #5
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008390:	4498      	add	r8, r3
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	461d      	mov	r5, r3
 8008396:	f04f 0600 	mov.w	r6, #0
 800839a:	46a9      	mov	r9, r5
 800839c:	46b2      	mov	sl, r6
 800839e:	eb19 0309 	adds.w	r3, r9, r9
 80083a2:	eb4a 040a 	adc.w	r4, sl, sl
 80083a6:	4699      	mov	r9, r3
 80083a8:	46a2      	mov	sl, r4
 80083aa:	eb19 0905 	adds.w	r9, r9, r5
 80083ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80083b2:	f04f 0100 	mov.w	r1, #0
 80083b6:	f04f 0200 	mov.w	r2, #0
 80083ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083c6:	4689      	mov	r9, r1
 80083c8:	4692      	mov	sl, r2
 80083ca:	eb19 0005 	adds.w	r0, r9, r5
 80083ce:	eb4a 0106 	adc.w	r1, sl, r6
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	461d      	mov	r5, r3
 80083d8:	f04f 0600 	mov.w	r6, #0
 80083dc:	196b      	adds	r3, r5, r5
 80083de:	eb46 0406 	adc.w	r4, r6, r6
 80083e2:	461a      	mov	r2, r3
 80083e4:	4623      	mov	r3, r4
 80083e6:	f7f8 fc37 	bl	8000c58 <__aeabi_uldivmod>
 80083ea:	4603      	mov	r3, r0
 80083ec:	460c      	mov	r4, r1
 80083ee:	461a      	mov	r2, r3
 80083f0:	4b6a      	ldr	r3, [pc, #424]	; (800859c <UART_SetConfig+0x384>)
 80083f2:	fba3 1302 	umull	r1, r3, r3, r2
 80083f6:	095b      	lsrs	r3, r3, #5
 80083f8:	2164      	movs	r1, #100	; 0x64
 80083fa:	fb01 f303 	mul.w	r3, r1, r3
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	00db      	lsls	r3, r3, #3
 8008402:	3332      	adds	r3, #50	; 0x32
 8008404:	4a65      	ldr	r2, [pc, #404]	; (800859c <UART_SetConfig+0x384>)
 8008406:	fba2 2303 	umull	r2, r3, r2, r3
 800840a:	095b      	lsrs	r3, r3, #5
 800840c:	f003 0207 	and.w	r2, r3, #7
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4442      	add	r2, r8
 8008416:	609a      	str	r2, [r3, #8]
 8008418:	e26f      	b.n	80088fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800841a:	f7ff fb4b 	bl	8007ab4 <HAL_RCC_GetPCLK1Freq>
 800841e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	461d      	mov	r5, r3
 8008424:	f04f 0600 	mov.w	r6, #0
 8008428:	46a8      	mov	r8, r5
 800842a:	46b1      	mov	r9, r6
 800842c:	eb18 0308 	adds.w	r3, r8, r8
 8008430:	eb49 0409 	adc.w	r4, r9, r9
 8008434:	4698      	mov	r8, r3
 8008436:	46a1      	mov	r9, r4
 8008438:	eb18 0805 	adds.w	r8, r8, r5
 800843c:	eb49 0906 	adc.w	r9, r9, r6
 8008440:	f04f 0100 	mov.w	r1, #0
 8008444:	f04f 0200 	mov.w	r2, #0
 8008448:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800844c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008450:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008454:	4688      	mov	r8, r1
 8008456:	4691      	mov	r9, r2
 8008458:	eb18 0005 	adds.w	r0, r8, r5
 800845c:	eb49 0106 	adc.w	r1, r9, r6
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	461d      	mov	r5, r3
 8008466:	f04f 0600 	mov.w	r6, #0
 800846a:	196b      	adds	r3, r5, r5
 800846c:	eb46 0406 	adc.w	r4, r6, r6
 8008470:	461a      	mov	r2, r3
 8008472:	4623      	mov	r3, r4
 8008474:	f7f8 fbf0 	bl	8000c58 <__aeabi_uldivmod>
 8008478:	4603      	mov	r3, r0
 800847a:	460c      	mov	r4, r1
 800847c:	461a      	mov	r2, r3
 800847e:	4b47      	ldr	r3, [pc, #284]	; (800859c <UART_SetConfig+0x384>)
 8008480:	fba3 2302 	umull	r2, r3, r3, r2
 8008484:	095b      	lsrs	r3, r3, #5
 8008486:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	461d      	mov	r5, r3
 800848e:	f04f 0600 	mov.w	r6, #0
 8008492:	46a9      	mov	r9, r5
 8008494:	46b2      	mov	sl, r6
 8008496:	eb19 0309 	adds.w	r3, r9, r9
 800849a:	eb4a 040a 	adc.w	r4, sl, sl
 800849e:	4699      	mov	r9, r3
 80084a0:	46a2      	mov	sl, r4
 80084a2:	eb19 0905 	adds.w	r9, r9, r5
 80084a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80084aa:	f04f 0100 	mov.w	r1, #0
 80084ae:	f04f 0200 	mov.w	r2, #0
 80084b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80084ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084be:	4689      	mov	r9, r1
 80084c0:	4692      	mov	sl, r2
 80084c2:	eb19 0005 	adds.w	r0, r9, r5
 80084c6:	eb4a 0106 	adc.w	r1, sl, r6
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	461d      	mov	r5, r3
 80084d0:	f04f 0600 	mov.w	r6, #0
 80084d4:	196b      	adds	r3, r5, r5
 80084d6:	eb46 0406 	adc.w	r4, r6, r6
 80084da:	461a      	mov	r2, r3
 80084dc:	4623      	mov	r3, r4
 80084de:	f7f8 fbbb 	bl	8000c58 <__aeabi_uldivmod>
 80084e2:	4603      	mov	r3, r0
 80084e4:	460c      	mov	r4, r1
 80084e6:	461a      	mov	r2, r3
 80084e8:	4b2c      	ldr	r3, [pc, #176]	; (800859c <UART_SetConfig+0x384>)
 80084ea:	fba3 1302 	umull	r1, r3, r3, r2
 80084ee:	095b      	lsrs	r3, r3, #5
 80084f0:	2164      	movs	r1, #100	; 0x64
 80084f2:	fb01 f303 	mul.w	r3, r1, r3
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	00db      	lsls	r3, r3, #3
 80084fa:	3332      	adds	r3, #50	; 0x32
 80084fc:	4a27      	ldr	r2, [pc, #156]	; (800859c <UART_SetConfig+0x384>)
 80084fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008502:	095b      	lsrs	r3, r3, #5
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800850a:	4498      	add	r8, r3
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	461d      	mov	r5, r3
 8008510:	f04f 0600 	mov.w	r6, #0
 8008514:	46a9      	mov	r9, r5
 8008516:	46b2      	mov	sl, r6
 8008518:	eb19 0309 	adds.w	r3, r9, r9
 800851c:	eb4a 040a 	adc.w	r4, sl, sl
 8008520:	4699      	mov	r9, r3
 8008522:	46a2      	mov	sl, r4
 8008524:	eb19 0905 	adds.w	r9, r9, r5
 8008528:	eb4a 0a06 	adc.w	sl, sl, r6
 800852c:	f04f 0100 	mov.w	r1, #0
 8008530:	f04f 0200 	mov.w	r2, #0
 8008534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008538:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800853c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008540:	4689      	mov	r9, r1
 8008542:	4692      	mov	sl, r2
 8008544:	eb19 0005 	adds.w	r0, r9, r5
 8008548:	eb4a 0106 	adc.w	r1, sl, r6
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	461d      	mov	r5, r3
 8008552:	f04f 0600 	mov.w	r6, #0
 8008556:	196b      	adds	r3, r5, r5
 8008558:	eb46 0406 	adc.w	r4, r6, r6
 800855c:	461a      	mov	r2, r3
 800855e:	4623      	mov	r3, r4
 8008560:	f7f8 fb7a 	bl	8000c58 <__aeabi_uldivmod>
 8008564:	4603      	mov	r3, r0
 8008566:	460c      	mov	r4, r1
 8008568:	461a      	mov	r2, r3
 800856a:	4b0c      	ldr	r3, [pc, #48]	; (800859c <UART_SetConfig+0x384>)
 800856c:	fba3 1302 	umull	r1, r3, r3, r2
 8008570:	095b      	lsrs	r3, r3, #5
 8008572:	2164      	movs	r1, #100	; 0x64
 8008574:	fb01 f303 	mul.w	r3, r1, r3
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	00db      	lsls	r3, r3, #3
 800857c:	3332      	adds	r3, #50	; 0x32
 800857e:	4a07      	ldr	r2, [pc, #28]	; (800859c <UART_SetConfig+0x384>)
 8008580:	fba2 2303 	umull	r2, r3, r2, r3
 8008584:	095b      	lsrs	r3, r3, #5
 8008586:	f003 0207 	and.w	r2, r3, #7
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4442      	add	r2, r8
 8008590:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008592:	e1b2      	b.n	80088fa <UART_SetConfig+0x6e2>
 8008594:	40011000 	.word	0x40011000
 8008598:	40011400 	.word	0x40011400
 800859c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4ad7      	ldr	r2, [pc, #860]	; (8008904 <UART_SetConfig+0x6ec>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d005      	beq.n	80085b6 <UART_SetConfig+0x39e>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4ad6      	ldr	r2, [pc, #856]	; (8008908 <UART_SetConfig+0x6f0>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	f040 80d1 	bne.w	8008758 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80085b6:	f7ff fa91 	bl	8007adc <HAL_RCC_GetPCLK2Freq>
 80085ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	469a      	mov	sl, r3
 80085c0:	f04f 0b00 	mov.w	fp, #0
 80085c4:	46d0      	mov	r8, sl
 80085c6:	46d9      	mov	r9, fp
 80085c8:	eb18 0308 	adds.w	r3, r8, r8
 80085cc:	eb49 0409 	adc.w	r4, r9, r9
 80085d0:	4698      	mov	r8, r3
 80085d2:	46a1      	mov	r9, r4
 80085d4:	eb18 080a 	adds.w	r8, r8, sl
 80085d8:	eb49 090b 	adc.w	r9, r9, fp
 80085dc:	f04f 0100 	mov.w	r1, #0
 80085e0:	f04f 0200 	mov.w	r2, #0
 80085e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80085e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80085ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80085f0:	4688      	mov	r8, r1
 80085f2:	4691      	mov	r9, r2
 80085f4:	eb1a 0508 	adds.w	r5, sl, r8
 80085f8:	eb4b 0609 	adc.w	r6, fp, r9
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	4619      	mov	r1, r3
 8008602:	f04f 0200 	mov.w	r2, #0
 8008606:	f04f 0300 	mov.w	r3, #0
 800860a:	f04f 0400 	mov.w	r4, #0
 800860e:	0094      	lsls	r4, r2, #2
 8008610:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008614:	008b      	lsls	r3, r1, #2
 8008616:	461a      	mov	r2, r3
 8008618:	4623      	mov	r3, r4
 800861a:	4628      	mov	r0, r5
 800861c:	4631      	mov	r1, r6
 800861e:	f7f8 fb1b 	bl	8000c58 <__aeabi_uldivmod>
 8008622:	4603      	mov	r3, r0
 8008624:	460c      	mov	r4, r1
 8008626:	461a      	mov	r2, r3
 8008628:	4bb8      	ldr	r3, [pc, #736]	; (800890c <UART_SetConfig+0x6f4>)
 800862a:	fba3 2302 	umull	r2, r3, r3, r2
 800862e:	095b      	lsrs	r3, r3, #5
 8008630:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	469b      	mov	fp, r3
 8008638:	f04f 0c00 	mov.w	ip, #0
 800863c:	46d9      	mov	r9, fp
 800863e:	46e2      	mov	sl, ip
 8008640:	eb19 0309 	adds.w	r3, r9, r9
 8008644:	eb4a 040a 	adc.w	r4, sl, sl
 8008648:	4699      	mov	r9, r3
 800864a:	46a2      	mov	sl, r4
 800864c:	eb19 090b 	adds.w	r9, r9, fp
 8008650:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008654:	f04f 0100 	mov.w	r1, #0
 8008658:	f04f 0200 	mov.w	r2, #0
 800865c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008660:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008664:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008668:	4689      	mov	r9, r1
 800866a:	4692      	mov	sl, r2
 800866c:	eb1b 0509 	adds.w	r5, fp, r9
 8008670:	eb4c 060a 	adc.w	r6, ip, sl
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	4619      	mov	r1, r3
 800867a:	f04f 0200 	mov.w	r2, #0
 800867e:	f04f 0300 	mov.w	r3, #0
 8008682:	f04f 0400 	mov.w	r4, #0
 8008686:	0094      	lsls	r4, r2, #2
 8008688:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800868c:	008b      	lsls	r3, r1, #2
 800868e:	461a      	mov	r2, r3
 8008690:	4623      	mov	r3, r4
 8008692:	4628      	mov	r0, r5
 8008694:	4631      	mov	r1, r6
 8008696:	f7f8 fadf 	bl	8000c58 <__aeabi_uldivmod>
 800869a:	4603      	mov	r3, r0
 800869c:	460c      	mov	r4, r1
 800869e:	461a      	mov	r2, r3
 80086a0:	4b9a      	ldr	r3, [pc, #616]	; (800890c <UART_SetConfig+0x6f4>)
 80086a2:	fba3 1302 	umull	r1, r3, r3, r2
 80086a6:	095b      	lsrs	r3, r3, #5
 80086a8:	2164      	movs	r1, #100	; 0x64
 80086aa:	fb01 f303 	mul.w	r3, r1, r3
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	011b      	lsls	r3, r3, #4
 80086b2:	3332      	adds	r3, #50	; 0x32
 80086b4:	4a95      	ldr	r2, [pc, #596]	; (800890c <UART_SetConfig+0x6f4>)
 80086b6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ba:	095b      	lsrs	r3, r3, #5
 80086bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086c0:	4498      	add	r8, r3
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	469b      	mov	fp, r3
 80086c6:	f04f 0c00 	mov.w	ip, #0
 80086ca:	46d9      	mov	r9, fp
 80086cc:	46e2      	mov	sl, ip
 80086ce:	eb19 0309 	adds.w	r3, r9, r9
 80086d2:	eb4a 040a 	adc.w	r4, sl, sl
 80086d6:	4699      	mov	r9, r3
 80086d8:	46a2      	mov	sl, r4
 80086da:	eb19 090b 	adds.w	r9, r9, fp
 80086de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80086e2:	f04f 0100 	mov.w	r1, #0
 80086e6:	f04f 0200 	mov.w	r2, #0
 80086ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086f6:	4689      	mov	r9, r1
 80086f8:	4692      	mov	sl, r2
 80086fa:	eb1b 0509 	adds.w	r5, fp, r9
 80086fe:	eb4c 060a 	adc.w	r6, ip, sl
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	4619      	mov	r1, r3
 8008708:	f04f 0200 	mov.w	r2, #0
 800870c:	f04f 0300 	mov.w	r3, #0
 8008710:	f04f 0400 	mov.w	r4, #0
 8008714:	0094      	lsls	r4, r2, #2
 8008716:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800871a:	008b      	lsls	r3, r1, #2
 800871c:	461a      	mov	r2, r3
 800871e:	4623      	mov	r3, r4
 8008720:	4628      	mov	r0, r5
 8008722:	4631      	mov	r1, r6
 8008724:	f7f8 fa98 	bl	8000c58 <__aeabi_uldivmod>
 8008728:	4603      	mov	r3, r0
 800872a:	460c      	mov	r4, r1
 800872c:	461a      	mov	r2, r3
 800872e:	4b77      	ldr	r3, [pc, #476]	; (800890c <UART_SetConfig+0x6f4>)
 8008730:	fba3 1302 	umull	r1, r3, r3, r2
 8008734:	095b      	lsrs	r3, r3, #5
 8008736:	2164      	movs	r1, #100	; 0x64
 8008738:	fb01 f303 	mul.w	r3, r1, r3
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	3332      	adds	r3, #50	; 0x32
 8008742:	4a72      	ldr	r2, [pc, #456]	; (800890c <UART_SetConfig+0x6f4>)
 8008744:	fba2 2303 	umull	r2, r3, r2, r3
 8008748:	095b      	lsrs	r3, r3, #5
 800874a:	f003 020f 	and.w	r2, r3, #15
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4442      	add	r2, r8
 8008754:	609a      	str	r2, [r3, #8]
 8008756:	e0d0      	b.n	80088fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008758:	f7ff f9ac 	bl	8007ab4 <HAL_RCC_GetPCLK1Freq>
 800875c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	469a      	mov	sl, r3
 8008762:	f04f 0b00 	mov.w	fp, #0
 8008766:	46d0      	mov	r8, sl
 8008768:	46d9      	mov	r9, fp
 800876a:	eb18 0308 	adds.w	r3, r8, r8
 800876e:	eb49 0409 	adc.w	r4, r9, r9
 8008772:	4698      	mov	r8, r3
 8008774:	46a1      	mov	r9, r4
 8008776:	eb18 080a 	adds.w	r8, r8, sl
 800877a:	eb49 090b 	adc.w	r9, r9, fp
 800877e:	f04f 0100 	mov.w	r1, #0
 8008782:	f04f 0200 	mov.w	r2, #0
 8008786:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800878a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800878e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008792:	4688      	mov	r8, r1
 8008794:	4691      	mov	r9, r2
 8008796:	eb1a 0508 	adds.w	r5, sl, r8
 800879a:	eb4b 0609 	adc.w	r6, fp, r9
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	4619      	mov	r1, r3
 80087a4:	f04f 0200 	mov.w	r2, #0
 80087a8:	f04f 0300 	mov.w	r3, #0
 80087ac:	f04f 0400 	mov.w	r4, #0
 80087b0:	0094      	lsls	r4, r2, #2
 80087b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80087b6:	008b      	lsls	r3, r1, #2
 80087b8:	461a      	mov	r2, r3
 80087ba:	4623      	mov	r3, r4
 80087bc:	4628      	mov	r0, r5
 80087be:	4631      	mov	r1, r6
 80087c0:	f7f8 fa4a 	bl	8000c58 <__aeabi_uldivmod>
 80087c4:	4603      	mov	r3, r0
 80087c6:	460c      	mov	r4, r1
 80087c8:	461a      	mov	r2, r3
 80087ca:	4b50      	ldr	r3, [pc, #320]	; (800890c <UART_SetConfig+0x6f4>)
 80087cc:	fba3 2302 	umull	r2, r3, r3, r2
 80087d0:	095b      	lsrs	r3, r3, #5
 80087d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	469b      	mov	fp, r3
 80087da:	f04f 0c00 	mov.w	ip, #0
 80087de:	46d9      	mov	r9, fp
 80087e0:	46e2      	mov	sl, ip
 80087e2:	eb19 0309 	adds.w	r3, r9, r9
 80087e6:	eb4a 040a 	adc.w	r4, sl, sl
 80087ea:	4699      	mov	r9, r3
 80087ec:	46a2      	mov	sl, r4
 80087ee:	eb19 090b 	adds.w	r9, r9, fp
 80087f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80087f6:	f04f 0100 	mov.w	r1, #0
 80087fa:	f04f 0200 	mov.w	r2, #0
 80087fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008802:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008806:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800880a:	4689      	mov	r9, r1
 800880c:	4692      	mov	sl, r2
 800880e:	eb1b 0509 	adds.w	r5, fp, r9
 8008812:	eb4c 060a 	adc.w	r6, ip, sl
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	4619      	mov	r1, r3
 800881c:	f04f 0200 	mov.w	r2, #0
 8008820:	f04f 0300 	mov.w	r3, #0
 8008824:	f04f 0400 	mov.w	r4, #0
 8008828:	0094      	lsls	r4, r2, #2
 800882a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800882e:	008b      	lsls	r3, r1, #2
 8008830:	461a      	mov	r2, r3
 8008832:	4623      	mov	r3, r4
 8008834:	4628      	mov	r0, r5
 8008836:	4631      	mov	r1, r6
 8008838:	f7f8 fa0e 	bl	8000c58 <__aeabi_uldivmod>
 800883c:	4603      	mov	r3, r0
 800883e:	460c      	mov	r4, r1
 8008840:	461a      	mov	r2, r3
 8008842:	4b32      	ldr	r3, [pc, #200]	; (800890c <UART_SetConfig+0x6f4>)
 8008844:	fba3 1302 	umull	r1, r3, r3, r2
 8008848:	095b      	lsrs	r3, r3, #5
 800884a:	2164      	movs	r1, #100	; 0x64
 800884c:	fb01 f303 	mul.w	r3, r1, r3
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	011b      	lsls	r3, r3, #4
 8008854:	3332      	adds	r3, #50	; 0x32
 8008856:	4a2d      	ldr	r2, [pc, #180]	; (800890c <UART_SetConfig+0x6f4>)
 8008858:	fba2 2303 	umull	r2, r3, r2, r3
 800885c:	095b      	lsrs	r3, r3, #5
 800885e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008862:	4498      	add	r8, r3
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	469b      	mov	fp, r3
 8008868:	f04f 0c00 	mov.w	ip, #0
 800886c:	46d9      	mov	r9, fp
 800886e:	46e2      	mov	sl, ip
 8008870:	eb19 0309 	adds.w	r3, r9, r9
 8008874:	eb4a 040a 	adc.w	r4, sl, sl
 8008878:	4699      	mov	r9, r3
 800887a:	46a2      	mov	sl, r4
 800887c:	eb19 090b 	adds.w	r9, r9, fp
 8008880:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008884:	f04f 0100 	mov.w	r1, #0
 8008888:	f04f 0200 	mov.w	r2, #0
 800888c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008890:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008894:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008898:	4689      	mov	r9, r1
 800889a:	4692      	mov	sl, r2
 800889c:	eb1b 0509 	adds.w	r5, fp, r9
 80088a0:	eb4c 060a 	adc.w	r6, ip, sl
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	4619      	mov	r1, r3
 80088aa:	f04f 0200 	mov.w	r2, #0
 80088ae:	f04f 0300 	mov.w	r3, #0
 80088b2:	f04f 0400 	mov.w	r4, #0
 80088b6:	0094      	lsls	r4, r2, #2
 80088b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088bc:	008b      	lsls	r3, r1, #2
 80088be:	461a      	mov	r2, r3
 80088c0:	4623      	mov	r3, r4
 80088c2:	4628      	mov	r0, r5
 80088c4:	4631      	mov	r1, r6
 80088c6:	f7f8 f9c7 	bl	8000c58 <__aeabi_uldivmod>
 80088ca:	4603      	mov	r3, r0
 80088cc:	460c      	mov	r4, r1
 80088ce:	461a      	mov	r2, r3
 80088d0:	4b0e      	ldr	r3, [pc, #56]	; (800890c <UART_SetConfig+0x6f4>)
 80088d2:	fba3 1302 	umull	r1, r3, r3, r2
 80088d6:	095b      	lsrs	r3, r3, #5
 80088d8:	2164      	movs	r1, #100	; 0x64
 80088da:	fb01 f303 	mul.w	r3, r1, r3
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	011b      	lsls	r3, r3, #4
 80088e2:	3332      	adds	r3, #50	; 0x32
 80088e4:	4a09      	ldr	r2, [pc, #36]	; (800890c <UART_SetConfig+0x6f4>)
 80088e6:	fba2 2303 	umull	r2, r3, r2, r3
 80088ea:	095b      	lsrs	r3, r3, #5
 80088ec:	f003 020f 	and.w	r2, r3, #15
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4442      	add	r2, r8
 80088f6:	609a      	str	r2, [r3, #8]
}
 80088f8:	e7ff      	b.n	80088fa <UART_SetConfig+0x6e2>
 80088fa:	bf00      	nop
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008904:	40011000 	.word	0x40011000
 8008908:	40011400 	.word	0x40011400
 800890c:	51eb851f 	.word	0x51eb851f

08008910 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008910:	b480      	push	{r7}
 8008912:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008914:	bf00      	nop
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
	...

08008920 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008926:	f3ef 8305 	mrs	r3, IPSR
 800892a:	60bb      	str	r3, [r7, #8]
  return(result);
 800892c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10f      	bne.n	8008952 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008932:	f3ef 8310 	mrs	r3, PRIMASK
 8008936:	607b      	str	r3, [r7, #4]
  return(result);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d105      	bne.n	800894a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800893e:	f3ef 8311 	mrs	r3, BASEPRI
 8008942:	603b      	str	r3, [r7, #0]
  return(result);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d007      	beq.n	800895a <osKernelInitialize+0x3a>
 800894a:	4b0e      	ldr	r3, [pc, #56]	; (8008984 <osKernelInitialize+0x64>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b02      	cmp	r3, #2
 8008950:	d103      	bne.n	800895a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008952:	f06f 0305 	mvn.w	r3, #5
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	e00c      	b.n	8008974 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800895a:	4b0a      	ldr	r3, [pc, #40]	; (8008984 <osKernelInitialize+0x64>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d105      	bne.n	800896e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008962:	4b08      	ldr	r3, [pc, #32]	; (8008984 <osKernelInitialize+0x64>)
 8008964:	2201      	movs	r2, #1
 8008966:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008968:	2300      	movs	r3, #0
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	e002      	b.n	8008974 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800896e:	f04f 33ff 	mov.w	r3, #4294967295
 8008972:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008974:	68fb      	ldr	r3, [r7, #12]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	200029c8 	.word	0x200029c8

08008988 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800898e:	f3ef 8305 	mrs	r3, IPSR
 8008992:	60bb      	str	r3, [r7, #8]
  return(result);
 8008994:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10f      	bne.n	80089ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800899a:	f3ef 8310 	mrs	r3, PRIMASK
 800899e:	607b      	str	r3, [r7, #4]
  return(result);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d105      	bne.n	80089b2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089a6:	f3ef 8311 	mrs	r3, BASEPRI
 80089aa:	603b      	str	r3, [r7, #0]
  return(result);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d007      	beq.n	80089c2 <osKernelStart+0x3a>
 80089b2:	4b0f      	ldr	r3, [pc, #60]	; (80089f0 <osKernelStart+0x68>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d103      	bne.n	80089c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80089ba:	f06f 0305 	mvn.w	r3, #5
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	e010      	b.n	80089e4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80089c2:	4b0b      	ldr	r3, [pc, #44]	; (80089f0 <osKernelStart+0x68>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d109      	bne.n	80089de <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80089ca:	f7ff ffa1 	bl	8008910 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80089ce:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <osKernelStart+0x68>)
 80089d0:	2202      	movs	r2, #2
 80089d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80089d4:	f001 fc34 	bl	800a240 <vTaskStartScheduler>
      stat = osOK;
 80089d8:	2300      	movs	r3, #0
 80089da:	60fb      	str	r3, [r7, #12]
 80089dc:	e002      	b.n	80089e4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80089de:	f04f 33ff 	mov.w	r3, #4294967295
 80089e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80089e4:	68fb      	ldr	r3, [r7, #12]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	200029c8 	.word	0x200029c8

080089f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b090      	sub	sp, #64	; 0x40
 80089f8:	af04      	add	r7, sp, #16
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008a00:	2300      	movs	r3, #0
 8008a02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a04:	f3ef 8305 	mrs	r3, IPSR
 8008a08:	61fb      	str	r3, [r7, #28]
  return(result);
 8008a0a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f040 808f 	bne.w	8008b30 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a12:	f3ef 8310 	mrs	r3, PRIMASK
 8008a16:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d105      	bne.n	8008a2a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8008a22:	617b      	str	r3, [r7, #20]
  return(result);
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <osThreadNew+0x3e>
 8008a2a:	4b44      	ldr	r3, [pc, #272]	; (8008b3c <osThreadNew+0x148>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d07e      	beq.n	8008b30 <osThreadNew+0x13c>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d07b      	beq.n	8008b30 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008a38:	2380      	movs	r3, #128	; 0x80
 8008a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008a3c:	2318      	movs	r3, #24
 8008a3e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008a40:	2300      	movs	r3, #0
 8008a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008a44:	f04f 33ff 	mov.w	r3, #4294967295
 8008a48:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d045      	beq.n	8008adc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <osThreadNew+0x6a>
        name = attr->name;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d002      	beq.n	8008a6c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d008      	beq.n	8008a84 <osThreadNew+0x90>
 8008a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a74:	2b38      	cmp	r3, #56	; 0x38
 8008a76:	d805      	bhi.n	8008a84 <osThreadNew+0x90>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <osThreadNew+0x94>
        return (NULL);
 8008a84:	2300      	movs	r3, #0
 8008a86:	e054      	b.n	8008b32 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	695b      	ldr	r3, [r3, #20]
 8008a94:	089b      	lsrs	r3, r3, #2
 8008a96:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00e      	beq.n	8008abe <osThreadNew+0xca>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	2b5b      	cmp	r3, #91	; 0x5b
 8008aa6:	d90a      	bls.n	8008abe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d006      	beq.n	8008abe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <osThreadNew+0xca>
        mem = 1;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	623b      	str	r3, [r7, #32]
 8008abc:	e010      	b.n	8008ae0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10c      	bne.n	8008ae0 <osThreadNew+0xec>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d108      	bne.n	8008ae0 <osThreadNew+0xec>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d104      	bne.n	8008ae0 <osThreadNew+0xec>
          mem = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	623b      	str	r3, [r7, #32]
 8008ada:	e001      	b.n	8008ae0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d110      	bne.n	8008b08 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008aee:	9202      	str	r2, [sp, #8]
 8008af0:	9301      	str	r3, [sp, #4]
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f001 f9cd 	bl	8009e9c <xTaskCreateStatic>
 8008b02:	4603      	mov	r3, r0
 8008b04:	613b      	str	r3, [r7, #16]
 8008b06:	e013      	b.n	8008b30 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d110      	bne.n	8008b30 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	f107 0310 	add.w	r3, r7, #16
 8008b16:	9301      	str	r3, [sp, #4]
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f001 fa15 	bl	8009f50 <xTaskCreate>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d001      	beq.n	8008b30 <osThreadNew+0x13c>
          hTask = NULL;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b30:	693b      	ldr	r3, [r7, #16]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3730      	adds	r7, #48	; 0x30
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	200029c8 	.word	0x200029c8

08008b40 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b48:	f3ef 8305 	mrs	r3, IPSR
 8008b4c:	613b      	str	r3, [r7, #16]
  return(result);
 8008b4e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10f      	bne.n	8008b74 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b54:	f3ef 8310 	mrs	r3, PRIMASK
 8008b58:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d105      	bne.n	8008b6c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b60:	f3ef 8311 	mrs	r3, BASEPRI
 8008b64:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d007      	beq.n	8008b7c <osDelay+0x3c>
 8008b6c:	4b0a      	ldr	r3, [pc, #40]	; (8008b98 <osDelay+0x58>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d103      	bne.n	8008b7c <osDelay+0x3c>
    stat = osErrorISR;
 8008b74:	f06f 0305 	mvn.w	r3, #5
 8008b78:	617b      	str	r3, [r7, #20]
 8008b7a:	e007      	b.n	8008b8c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d002      	beq.n	8008b8c <osDelay+0x4c>
      vTaskDelay(ticks);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f001 fb26 	bl	800a1d8 <vTaskDelay>
    }
  }

  return (stat);
 8008b8c:	697b      	ldr	r3, [r7, #20]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	200029c8 	.word	0x200029c8

08008b9c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b088      	sub	sp, #32
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ba8:	f3ef 8305 	mrs	r3, IPSR
 8008bac:	617b      	str	r3, [r7, #20]
  return(result);
 8008bae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d13d      	bne.n	8008c30 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8008bb8:	613b      	str	r3, [r7, #16]
  return(result);
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d105      	bne.n	8008bcc <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008bc0:	f3ef 8311 	mrs	r3, BASEPRI
 8008bc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d003      	beq.n	8008bd4 <osEventFlagsNew+0x38>
 8008bcc:	4b1b      	ldr	r3, [pc, #108]	; (8008c3c <osEventFlagsNew+0xa0>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d02d      	beq.n	8008c30 <osEventFlagsNew+0x94>
    mem = -1;
 8008bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d015      	beq.n	8008c0c <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d006      	beq.n	8008bf6 <osEventFlagsNew+0x5a>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	2b1f      	cmp	r3, #31
 8008bee:	d902      	bls.n	8008bf6 <osEventFlagsNew+0x5a>
        mem = 1;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	61bb      	str	r3, [r7, #24]
 8008bf4:	e00c      	b.n	8008c10 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d108      	bne.n	8008c10 <osEventFlagsNew+0x74>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d104      	bne.n	8008c10 <osEventFlagsNew+0x74>
          mem = 0;
 8008c06:	2300      	movs	r3, #0
 8008c08:	61bb      	str	r3, [r7, #24]
 8008c0a:	e001      	b.n	8008c10 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d106      	bne.n	8008c24 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 f956 	bl	8008ecc <xEventGroupCreateStatic>
 8008c20:	61f8      	str	r0, [r7, #28]
 8008c22:	e005      	b.n	8008c30 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d102      	bne.n	8008c30 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8008c2a:	f000 f984 	bl	8008f36 <xEventGroupCreate>
 8008c2e:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8008c30:	69fb      	ldr	r3, [r7, #28]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3720      	adds	r7, #32
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	200029c8 	.word	0x200029c8

08008c40 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d004      	beq.n	8008c5e <osEventFlagsSet+0x1e>
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d003      	beq.n	8008c66 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8008c5e:	f06f 0303 	mvn.w	r3, #3
 8008c62:	61fb      	str	r3, [r7, #28]
 8008c64:	e03a      	b.n	8008cdc <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c66:	f3ef 8305 	mrs	r3, IPSR
 8008c6a:	617b      	str	r3, [r7, #20]
  return(result);
 8008c6c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10f      	bne.n	8008c92 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c72:	f3ef 8310 	mrs	r3, PRIMASK
 8008c76:	613b      	str	r3, [r7, #16]
  return(result);
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d105      	bne.n	8008c8a <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c7e:	f3ef 8311 	mrs	r3, BASEPRI
 8008c82:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d021      	beq.n	8008cce <osEventFlagsSet+0x8e>
 8008c8a:	4b17      	ldr	r3, [pc, #92]	; (8008ce8 <osEventFlagsSet+0xa8>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d11d      	bne.n	8008cce <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8008c92:	2300      	movs	r3, #0
 8008c94:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8008c96:	f107 0308 	add.w	r3, r7, #8
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	69b8      	ldr	r0, [r7, #24]
 8008ca0:	f000 fb60 	bl	8009364 <xEventGroupSetBitsFromISR>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d103      	bne.n	8008cb2 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8008caa:	f06f 0302 	mvn.w	r3, #2
 8008cae:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8008cb0:	e013      	b.n	8008cda <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00e      	beq.n	8008cda <osEventFlagsSet+0x9a>
 8008cbc:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <osEventFlagsSet+0xac>)
 8008cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8008ccc:	e005      	b.n	8008cda <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	69b8      	ldr	r0, [r7, #24]
 8008cd2:	f000 fa82 	bl	80091da <xEventGroupSetBits>
 8008cd6:	61f8      	str	r0, [r7, #28]
 8008cd8:	e000      	b.n	8008cdc <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8008cda:	bf00      	nop
  }

  return (rflags);
 8008cdc:	69fb      	ldr	r3, [r7, #28]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3720      	adds	r7, #32
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	200029c8 	.word	0x200029c8
 8008cec:	e000ed04 	.word	0xe000ed04

08008cf0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b088      	sub	sp, #32
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d004      	beq.n	8008d0e <osEventFlagsClear+0x1e>
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8008d0e:	f06f 0303 	mvn.w	r3, #3
 8008d12:	61fb      	str	r3, [r7, #28]
 8008d14:	e029      	b.n	8008d6a <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d16:	f3ef 8305 	mrs	r3, IPSR
 8008d1a:	617b      	str	r3, [r7, #20]
  return(result);
 8008d1c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10f      	bne.n	8008d42 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d22:	f3ef 8310 	mrs	r3, PRIMASK
 8008d26:	613b      	str	r3, [r7, #16]
  return(result);
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d105      	bne.n	8008d3a <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d2e:	f3ef 8311 	mrs	r3, BASEPRI
 8008d32:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d012      	beq.n	8008d60 <osEventFlagsClear+0x70>
 8008d3a:	4b0e      	ldr	r3, [pc, #56]	; (8008d74 <osEventFlagsClear+0x84>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d10e      	bne.n	8008d60 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8008d42:	69b8      	ldr	r0, [r7, #24]
 8008d44:	f000 fa26 	bl	8009194 <xEventGroupGetBitsFromISR>
 8008d48:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	69b8      	ldr	r0, [r7, #24]
 8008d4e:	f000 fa0d 	bl	800916c <xEventGroupClearBitsFromISR>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d108      	bne.n	8008d6a <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 8008d58:	f06f 0302 	mvn.w	r3, #2
 8008d5c:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8008d5e:	e004      	b.n	8008d6a <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	69b8      	ldr	r0, [r7, #24]
 8008d64:	f000 f9cc 	bl	8009100 <xEventGroupClearBits>
 8008d68:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8008d6a:	69fb      	ldr	r3, [r7, #28]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3720      	adds	r7, #32
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	200029c8 	.word	0x200029c8

08008d78 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b08e      	sub	sp, #56	; 0x38
 8008d7c:	af02      	add	r7, sp, #8
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
 8008d84:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008d8a:	6a3b      	ldr	r3, [r7, #32]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d004      	beq.n	8008d9a <osEventFlagsWait+0x22>
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d003      	beq.n	8008da2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8008d9a:	f06f 0303 	mvn.w	r3, #3
 8008d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8008da0:	e059      	b.n	8008e56 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008da2:	f3ef 8305 	mrs	r3, IPSR
 8008da6:	61fb      	str	r3, [r7, #28]
  return(result);
 8008da8:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10f      	bne.n	8008dce <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dae:	f3ef 8310 	mrs	r3, PRIMASK
 8008db2:	61bb      	str	r3, [r7, #24]
  return(result);
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d105      	bne.n	8008dc6 <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008dba:	f3ef 8311 	mrs	r3, BASEPRI
 8008dbe:	617b      	str	r3, [r7, #20]
  return(result);
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d007      	beq.n	8008dd6 <osEventFlagsWait+0x5e>
 8008dc6:	4b26      	ldr	r3, [pc, #152]	; (8008e60 <osEventFlagsWait+0xe8>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d103      	bne.n	8008dd6 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8008dce:	f06f 0305 	mvn.w	r3, #5
 8008dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8008dd4:	e03f      	b.n	8008e56 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f003 0301 	and.w	r3, r3, #1
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8008de0:	2301      	movs	r3, #1
 8008de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008de4:	e001      	b.n	8008dea <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f003 0302 	and.w	r3, r3, #2
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8008df4:	2300      	movs	r3, #0
 8008df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008df8:	e001      	b.n	8008dfe <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e06:	68b9      	ldr	r1, [r7, #8]
 8008e08:	6a38      	ldr	r0, [r7, #32]
 8008e0a:	f000 f8af 	bl	8008f6c <xEventGroupWaitBits>
 8008e0e:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00e      	beq.n	8008e38 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d019      	beq.n	8008e56 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d003      	beq.n	8008e30 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8008e28:	f06f 0301 	mvn.w	r3, #1
 8008e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e2e:	e012      	b.n	8008e56 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8008e30:	f06f 0302 	mvn.w	r3, #2
 8008e34:	627b      	str	r3, [r7, #36]	; 0x24
 8008e36:	e00e      	b.n	8008e56 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d109      	bne.n	8008e56 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d003      	beq.n	8008e50 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8008e48:	f06f 0301 	mvn.w	r3, #1
 8008e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e4e:	e002      	b.n	8008e56 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8008e50:	f06f 0302 	mvn.w	r3, #2
 8008e54:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3730      	adds	r7, #48	; 0x30
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	200029c8 	.word	0x200029c8

08008e64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4a07      	ldr	r2, [pc, #28]	; (8008e90 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	4a06      	ldr	r2, [pc, #24]	; (8008e94 <vApplicationGetIdleTaskMemory+0x30>)
 8008e7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2280      	movs	r2, #128	; 0x80
 8008e80:	601a      	str	r2, [r3, #0]
}
 8008e82:	bf00      	nop
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	200029cc 	.word	0x200029cc
 8008e94:	20002a28 	.word	0x20002a28

08008e98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	4a07      	ldr	r2, [pc, #28]	; (8008ec4 <vApplicationGetTimerTaskMemory+0x2c>)
 8008ea8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	4a06      	ldr	r2, [pc, #24]	; (8008ec8 <vApplicationGetTimerTaskMemory+0x30>)
 8008eae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008eb6:	601a      	str	r2, [r3, #0]
}
 8008eb8:	bf00      	nop
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	20002c28 	.word	0x20002c28
 8008ec8:	20002c84 	.word	0x20002c84

08008ecc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d109      	bne.n	8008eee <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	613b      	str	r3, [r7, #16]
 8008eec:	e7fe      	b.n	8008eec <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008eee:	2320      	movs	r3, #32
 8008ef0:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	2b20      	cmp	r3, #32
 8008ef6:	d009      	beq.n	8008f0c <xEventGroupCreateStatic+0x40>
 8008ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efc:	f383 8811 	msr	BASEPRI, r3
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	60fb      	str	r3, [r7, #12]
 8008f0a:	e7fe      	b.n	8008f0a <xEventGroupCreateStatic+0x3e>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00a      	beq.n	8008f2c <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	3304      	adds	r3, #4
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 fa33 	bl	800938c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8008f2c:	697b      	ldr	r3, [r7, #20]
	}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3718      	adds	r7, #24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b082      	sub	sp, #8
 8008f3a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8008f3c:	2020      	movs	r0, #32
 8008f3e:	f002 fcef 	bl	800b920 <pvPortMalloc>
 8008f42:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00a      	beq.n	8008f60 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3304      	adds	r3, #4
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 fa19 	bl	800938c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8008f60:	687b      	ldr	r3, [r7, #4]
	}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b090      	sub	sp, #64	; 0x40
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8008f82:	2300      	movs	r3, #0
 8008f84:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d109      	bne.n	8008fa0 <xEventGroupWaitBits+0x34>
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	623b      	str	r3, [r7, #32]
 8008f9e:	e7fe      	b.n	8008f9e <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d009      	beq.n	8008fbe <xEventGroupWaitBits+0x52>
 8008faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	61fb      	str	r3, [r7, #28]
 8008fbc:	e7fe      	b.n	8008fbc <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d109      	bne.n	8008fd8 <xEventGroupWaitBits+0x6c>
 8008fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	61bb      	str	r3, [r7, #24]
 8008fd6:	e7fe      	b.n	8008fd6 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fd8:	f001 fe02 	bl	800abe0 <xTaskGetSchedulerState>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d102      	bne.n	8008fe8 <xEventGroupWaitBits+0x7c>
 8008fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <xEventGroupWaitBits+0x80>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e000      	b.n	8008fee <xEventGroupWaitBits+0x82>
 8008fec:	2300      	movs	r3, #0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d109      	bne.n	8009006 <xEventGroupWaitBits+0x9a>
 8008ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	617b      	str	r3, [r7, #20]
 8009004:	e7fe      	b.n	8009004 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8009006:	f001 f97f 	bl	800a308 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800900a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8009010:	683a      	ldr	r2, [r7, #0]
 8009012:	68b9      	ldr	r1, [r7, #8]
 8009014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009016:	f000 f983 	bl	8009320 <prvTestWaitCondition>
 800901a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00e      	beq.n	8009040 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8009022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009024:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8009026:	2300      	movs	r3, #0
 8009028:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d028      	beq.n	8009082 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	43db      	mvns	r3, r3
 8009038:	401a      	ands	r2, r3
 800903a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903c:	601a      	str	r2, [r3, #0]
 800903e:	e020      	b.n	8009082 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8009040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009042:	2b00      	cmp	r3, #0
 8009044:	d104      	bne.n	8009050 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800904a:	2301      	movs	r3, #1
 800904c:	633b      	str	r3, [r7, #48]	; 0x30
 800904e:	e018      	b.n	8009082 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800905c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d003      	beq.n	800906c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8009064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009066:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800906a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800906c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906e:	1d18      	adds	r0, r3, #4
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009074:	4313      	orrs	r3, r2
 8009076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009078:	4619      	mov	r1, r3
 800907a:	f001 fb37 	bl	800a6ec <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8009082:	f001 f94f 	bl	800a324 <xTaskResumeAll>
 8009086:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8009088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800908a:	2b00      	cmp	r3, #0
 800908c:	d031      	beq.n	80090f2 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	2b00      	cmp	r3, #0
 8009092:	d107      	bne.n	80090a4 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8009094:	4b19      	ldr	r3, [pc, #100]	; (80090fc <xEventGroupWaitBits+0x190>)
 8009096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80090a4:	f001 fe26 	bl	800acf4 <uxTaskResetEventItemValue>
 80090a8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80090aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d11a      	bne.n	80090ea <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 80090b4:	f002 fb1a 	bl	800b6ec <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80090b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80090be:	683a      	ldr	r2, [r7, #0]
 80090c0:	68b9      	ldr	r1, [r7, #8]
 80090c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090c4:	f000 f92c 	bl	8009320 <prvTestWaitCondition>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d009      	beq.n	80090e2 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d006      	beq.n	80090e2 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80090d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	43db      	mvns	r3, r3
 80090dc:	401a      	ands	r2, r3
 80090de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80090e2:	2301      	movs	r3, #1
 80090e4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80090e6:	f002 fb2f 	bl	800b748 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80090ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80090f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80090f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3740      	adds	r7, #64	; 0x40
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	e000ed04 	.word	0xe000ed04

08009100 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d109      	bne.n	8009128 <xEventGroupClearBits+0x28>
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	e7fe      	b.n	8009126 <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d009      	beq.n	8009146 <xEventGroupClearBits+0x46>
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	60bb      	str	r3, [r7, #8]
 8009144:	e7fe      	b.n	8009144 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 8009146:	f002 fad1 	bl	800b6ec <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	43db      	mvns	r3, r3
 8009158:	401a      	ands	r2, r3
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800915e:	f002 faf3 	bl	800b748 <vPortExitCritical>

	return uxReturn;
 8009162:	693b      	ldr	r3, [r7, #16]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8009176:	2300      	movs	r3, #0
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	6879      	ldr	r1, [r7, #4]
 800917c:	4804      	ldr	r0, [pc, #16]	; (8009190 <xEventGroupClearBitsFromISR+0x24>)
 800917e:	f002 f96b 	bl	800b458 <xTimerPendFunctionCallFromISR>
 8009182:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8009184:	68fb      	ldr	r3, [r7, #12]
	}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	08009307 	.word	0x08009307

08009194 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8009194:	b480      	push	{r7}
 8009196:	b089      	sub	sp, #36	; 0x24
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80091a0:	f3ef 8211 	mrs	r2, BASEPRI
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	60fa      	str	r2, [r7, #12]
 80091b6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80091b8:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091ba:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	617b      	str	r3, [r7, #20]
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f383 8811 	msr	BASEPRI, r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80091cc:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80091ce:	4618      	mov	r0, r3
 80091d0:	3724      	adds	r7, #36	; 0x24
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b08e      	sub	sp, #56	; 0x38
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80091e4:	2300      	movs	r3, #0
 80091e6:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80091ec:	2300      	movs	r3, #0
 80091ee:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d109      	bne.n	800920a <xEventGroupSetBits+0x30>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	613b      	str	r3, [r7, #16]
 8009208:	e7fe      	b.n	8009208 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d009      	beq.n	8009228 <xEventGroupSetBits+0x4e>
 8009214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	e7fe      	b.n	8009226 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8009228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922a:	3304      	adds	r3, #4
 800922c:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	3308      	adds	r3, #8
 8009232:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8009234:	f001 f868 	bl	800a308 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	431a      	orrs	r2, r3
 8009246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009248:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800924a:	e03c      	b.n	80092c6 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 800924c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8009252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8009258:	2300      	movs	r3, #0
 800925a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009262:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800926a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d108      	bne.n	8009288 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8009276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	4013      	ands	r3, r2
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00b      	beq.n	800929a <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8009282:	2301      	movs	r3, #1
 8009284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009286:	e008      	b.n	800929a <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8009288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	4013      	ands	r3, r2
 8009290:	69ba      	ldr	r2, [r7, #24]
 8009292:	429a      	cmp	r2, r3
 8009294:	d101      	bne.n	800929a <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8009296:	2301      	movs	r3, #1
 8009298:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800929a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929c:	2b00      	cmp	r3, #0
 800929e:	d010      	beq.n	80092c2 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80092aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80092b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80092ba:	4619      	mov	r1, r3
 80092bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80092be:	f001 fadb 	bl	800a878 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80092c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d1be      	bne.n	800924c <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80092ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	43db      	mvns	r3, r3
 80092d6:	401a      	ands	r2, r3
 80092d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092da:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80092dc:	f001 f822 	bl	800a324 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80092e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e2:	681b      	ldr	r3, [r3, #0]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3738      	adds	r7, #56	; 0x38
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7ff ff6e 	bl	80091da <xEventGroupSetBits>
}
 80092fe:	bf00      	nop
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b082      	sub	sp, #8
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7ff fef4 	bl	8009100 <xEventGroupClearBits>
}
 8009318:	bf00      	nop
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8009320:	b480      	push	{r7}
 8009322:	b087      	sub	sp, #28
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800932c:	2300      	movs	r3, #0
 800932e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d107      	bne.n	8009346 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	4013      	ands	r3, r2
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00a      	beq.n	8009356 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009340:	2301      	movs	r3, #1
 8009342:	617b      	str	r3, [r7, #20]
 8009344:	e007      	b.n	8009356 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	4013      	ands	r3, r2
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	429a      	cmp	r2, r3
 8009350:	d101      	bne.n	8009356 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009352:	2301      	movs	r3, #1
 8009354:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8009356:	697b      	ldr	r3, [r7, #20]
}
 8009358:	4618      	mov	r0, r3
 800935a:	371c      	adds	r7, #28
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	68f9      	ldr	r1, [r7, #12]
 8009376:	4804      	ldr	r0, [pc, #16]	; (8009388 <xEventGroupSetBitsFromISR+0x24>)
 8009378:	f002 f86e 	bl	800b458 <xTimerPendFunctionCallFromISR>
 800937c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800937e:	697b      	ldr	r3, [r7, #20]
	}
 8009380:	4618      	mov	r0, r3
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	080092ed 	.word	0x080092ed

0800938c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f103 0208 	add.w	r2, r3, #8
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f04f 32ff 	mov.w	r2, #4294967295
 80093a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f103 0208 	add.w	r2, r3, #8
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f103 0208 	add.w	r2, r3, #8
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80093da:	bf00      	nop
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093e6:	b480      	push	{r7}
 80093e8:	b085      	sub	sp, #20
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	689a      	ldr	r2, [r3, #8]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	1c5a      	adds	r2, r3, #1
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	601a      	str	r2, [r3, #0]
}
 8009422:	bf00      	nop
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800942e:	b480      	push	{r7}
 8009430:	b085      	sub	sp, #20
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009444:	d103      	bne.n	800944e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	60fb      	str	r3, [r7, #12]
 800944c:	e00c      	b.n	8009468 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	3308      	adds	r3, #8
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	e002      	b.n	800945c <vListInsert+0x2e>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	429a      	cmp	r2, r3
 8009466:	d2f6      	bcs.n	8009456 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	685a      	ldr	r2, [r3, #4]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	1c5a      	adds	r2, r3, #1
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	601a      	str	r2, [r3, #0]
}
 8009494:	bf00      	nop
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	6892      	ldr	r2, [r2, #8]
 80094b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	6852      	ldr	r2, [r2, #4]
 80094c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d103      	bne.n	80094d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	689a      	ldr	r2, [r3, #8]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	1e5a      	subs	r2, r3, #1
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3714      	adds	r7, #20
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d109      	bne.n	800951c <xQueueGenericReset+0x28>
 8009508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	60bb      	str	r3, [r7, #8]
 800951a:	e7fe      	b.n	800951a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800951c:	f002 f8e6 	bl	800b6ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009528:	68f9      	ldr	r1, [r7, #12]
 800952a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800952c:	fb01 f303 	mul.w	r3, r1, r3
 8009530:	441a      	add	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954c:	3b01      	subs	r3, #1
 800954e:	68f9      	ldr	r1, [r7, #12]
 8009550:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009552:	fb01 f303 	mul.w	r3, r1, r3
 8009556:	441a      	add	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	22ff      	movs	r2, #255	; 0xff
 8009560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	22ff      	movs	r2, #255	; 0xff
 8009568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d114      	bne.n	800959c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d01a      	beq.n	80095b0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	3310      	adds	r3, #16
 800957e:	4618      	mov	r0, r3
 8009580:	f001 f918 	bl	800a7b4 <xTaskRemoveFromEventList>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d012      	beq.n	80095b0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800958a:	4b0d      	ldr	r3, [pc, #52]	; (80095c0 <xQueueGenericReset+0xcc>)
 800958c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009590:	601a      	str	r2, [r3, #0]
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	e009      	b.n	80095b0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	3310      	adds	r3, #16
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7ff fef3 	bl	800938c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3324      	adds	r3, #36	; 0x24
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7ff feee 	bl	800938c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80095b0:	f002 f8ca 	bl	800b748 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80095b4:	2301      	movs	r3, #1
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	e000ed04 	.word	0xe000ed04

080095c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08e      	sub	sp, #56	; 0x38
 80095c8:	af02      	add	r7, sp, #8
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
 80095d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d109      	bne.n	80095ec <xQueueGenericCreateStatic+0x28>
 80095d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095dc:	f383 8811 	msr	BASEPRI, r3
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80095ea:	e7fe      	b.n	80095ea <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d109      	bne.n	8009606 <xQueueGenericCreateStatic+0x42>
 80095f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	627b      	str	r3, [r7, #36]	; 0x24
 8009604:	e7fe      	b.n	8009604 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <xQueueGenericCreateStatic+0x4e>
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <xQueueGenericCreateStatic+0x52>
 8009612:	2301      	movs	r3, #1
 8009614:	e000      	b.n	8009618 <xQueueGenericCreateStatic+0x54>
 8009616:	2300      	movs	r3, #0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d109      	bne.n	8009630 <xQueueGenericCreateStatic+0x6c>
 800961c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	623b      	str	r3, [r7, #32]
 800962e:	e7fe      	b.n	800962e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d102      	bne.n	800963c <xQueueGenericCreateStatic+0x78>
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d101      	bne.n	8009640 <xQueueGenericCreateStatic+0x7c>
 800963c:	2301      	movs	r3, #1
 800963e:	e000      	b.n	8009642 <xQueueGenericCreateStatic+0x7e>
 8009640:	2300      	movs	r3, #0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d109      	bne.n	800965a <xQueueGenericCreateStatic+0x96>
 8009646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	61fb      	str	r3, [r7, #28]
 8009658:	e7fe      	b.n	8009658 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800965a:	2350      	movs	r3, #80	; 0x50
 800965c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2b50      	cmp	r3, #80	; 0x50
 8009662:	d009      	beq.n	8009678 <xQueueGenericCreateStatic+0xb4>
 8009664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009668:	f383 8811 	msr	BASEPRI, r3
 800966c:	f3bf 8f6f 	isb	sy
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	61bb      	str	r3, [r7, #24]
 8009676:	e7fe      	b.n	8009676 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009678:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800967e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00d      	beq.n	80096a0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800968c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	4613      	mov	r3, r2
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	68b9      	ldr	r1, [r7, #8]
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f000 f805 	bl	80096aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3730      	adds	r7, #48	; 0x30
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b084      	sub	sp, #16
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	60f8      	str	r0, [r7, #12]
 80096b2:	60b9      	str	r1, [r7, #8]
 80096b4:	607a      	str	r2, [r7, #4]
 80096b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d103      	bne.n	80096c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	69ba      	ldr	r2, [r7, #24]
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	e002      	b.n	80096cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80096d8:	2101      	movs	r1, #1
 80096da:	69b8      	ldr	r0, [r7, #24]
 80096dc:	f7ff ff0a 	bl	80094f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	78fa      	ldrb	r2, [r7, #3]
 80096e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80096e8:	bf00      	nop
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b08e      	sub	sp, #56	; 0x38
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
 80096fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80096fe:	2300      	movs	r3, #0
 8009700:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	2b00      	cmp	r3, #0
 800970a:	d109      	bne.n	8009720 <xQueueGenericSend+0x30>
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	62bb      	str	r3, [r7, #40]	; 0x28
 800971e:	e7fe      	b.n	800971e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d103      	bne.n	800972e <xQueueGenericSend+0x3e>
 8009726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <xQueueGenericSend+0x42>
 800972e:	2301      	movs	r3, #1
 8009730:	e000      	b.n	8009734 <xQueueGenericSend+0x44>
 8009732:	2300      	movs	r3, #0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d109      	bne.n	800974c <xQueueGenericSend+0x5c>
 8009738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	627b      	str	r3, [r7, #36]	; 0x24
 800974a:	e7fe      	b.n	800974a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	2b02      	cmp	r3, #2
 8009750:	d103      	bne.n	800975a <xQueueGenericSend+0x6a>
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009756:	2b01      	cmp	r3, #1
 8009758:	d101      	bne.n	800975e <xQueueGenericSend+0x6e>
 800975a:	2301      	movs	r3, #1
 800975c:	e000      	b.n	8009760 <xQueueGenericSend+0x70>
 800975e:	2300      	movs	r3, #0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d109      	bne.n	8009778 <xQueueGenericSend+0x88>
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	623b      	str	r3, [r7, #32]
 8009776:	e7fe      	b.n	8009776 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009778:	f001 fa32 	bl	800abe0 <xTaskGetSchedulerState>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d102      	bne.n	8009788 <xQueueGenericSend+0x98>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <xQueueGenericSend+0x9c>
 8009788:	2301      	movs	r3, #1
 800978a:	e000      	b.n	800978e <xQueueGenericSend+0x9e>
 800978c:	2300      	movs	r3, #0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d109      	bne.n	80097a6 <xQueueGenericSend+0xb6>
 8009792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	61fb      	str	r3, [r7, #28]
 80097a4:	e7fe      	b.n	80097a4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097a6:	f001 ffa1 	bl	800b6ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d302      	bcc.n	80097bc <xQueueGenericSend+0xcc>
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d129      	bne.n	8009810 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097bc:	683a      	ldr	r2, [r7, #0]
 80097be:	68b9      	ldr	r1, [r7, #8]
 80097c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097c2:	f000 f9ff 	bl	8009bc4 <prvCopyDataToQueue>
 80097c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d010      	beq.n	80097f2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d2:	3324      	adds	r3, #36	; 0x24
 80097d4:	4618      	mov	r0, r3
 80097d6:	f000 ffed 	bl	800a7b4 <xTaskRemoveFromEventList>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d013      	beq.n	8009808 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80097e0:	4b3f      	ldr	r3, [pc, #252]	; (80098e0 <xQueueGenericSend+0x1f0>)
 80097e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097e6:	601a      	str	r2, [r3, #0]
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	e00a      	b.n	8009808 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80097f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d007      	beq.n	8009808 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80097f8:	4b39      	ldr	r3, [pc, #228]	; (80098e0 <xQueueGenericSend+0x1f0>)
 80097fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097fe:	601a      	str	r2, [r3, #0]
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009808:	f001 ff9e 	bl	800b748 <vPortExitCritical>
				return pdPASS;
 800980c:	2301      	movs	r3, #1
 800980e:	e063      	b.n	80098d8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d103      	bne.n	800981e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009816:	f001 ff97 	bl	800b748 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800981a:	2300      	movs	r3, #0
 800981c:	e05c      	b.n	80098d8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800981e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009820:	2b00      	cmp	r3, #0
 8009822:	d106      	bne.n	8009832 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009824:	f107 0314 	add.w	r3, r7, #20
 8009828:	4618      	mov	r0, r3
 800982a:	f001 f885 	bl	800a938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800982e:	2301      	movs	r3, #1
 8009830:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009832:	f001 ff89 	bl	800b748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009836:	f000 fd67 	bl	800a308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800983a:	f001 ff57 	bl	800b6ec <vPortEnterCritical>
 800983e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009844:	b25b      	sxtb	r3, r3
 8009846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984a:	d103      	bne.n	8009854 <xQueueGenericSend+0x164>
 800984c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984e:	2200      	movs	r2, #0
 8009850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800985a:	b25b      	sxtb	r3, r3
 800985c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009860:	d103      	bne.n	800986a <xQueueGenericSend+0x17a>
 8009862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009864:	2200      	movs	r2, #0
 8009866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800986a:	f001 ff6d 	bl	800b748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800986e:	1d3a      	adds	r2, r7, #4
 8009870:	f107 0314 	add.w	r3, r7, #20
 8009874:	4611      	mov	r1, r2
 8009876:	4618      	mov	r0, r3
 8009878:	f001 f874 	bl	800a964 <xTaskCheckForTimeOut>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d124      	bne.n	80098cc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009882:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009884:	f000 fa96 	bl	8009db4 <prvIsQueueFull>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d018      	beq.n	80098c0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800988e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009890:	3310      	adds	r3, #16
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	4611      	mov	r1, r2
 8009896:	4618      	mov	r0, r3
 8009898:	f000 ff04 	bl	800a6a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800989c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800989e:	f000 fa21 	bl	8009ce4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80098a2:	f000 fd3f 	bl	800a324 <xTaskResumeAll>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f47f af7c 	bne.w	80097a6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80098ae:	4b0c      	ldr	r3, [pc, #48]	; (80098e0 <xQueueGenericSend+0x1f0>)
 80098b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	e772      	b.n	80097a6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80098c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098c2:	f000 fa0f 	bl	8009ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098c6:	f000 fd2d 	bl	800a324 <xTaskResumeAll>
 80098ca:	e76c      	b.n	80097a6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80098cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098ce:	f000 fa09 	bl	8009ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098d2:	f000 fd27 	bl	800a324 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80098d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3738      	adds	r7, #56	; 0x38
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	e000ed04 	.word	0xe000ed04

080098e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b08e      	sub	sp, #56	; 0x38
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80098f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d109      	bne.n	8009910 <xQueueGenericSendFromISR+0x2c>
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	627b      	str	r3, [r7, #36]	; 0x24
 800990e:	e7fe      	b.n	800990e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d103      	bne.n	800991e <xQueueGenericSendFromISR+0x3a>
 8009916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991a:	2b00      	cmp	r3, #0
 800991c:	d101      	bne.n	8009922 <xQueueGenericSendFromISR+0x3e>
 800991e:	2301      	movs	r3, #1
 8009920:	e000      	b.n	8009924 <xQueueGenericSendFromISR+0x40>
 8009922:	2300      	movs	r3, #0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d109      	bne.n	800993c <xQueueGenericSendFromISR+0x58>
 8009928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	623b      	str	r3, [r7, #32]
 800993a:	e7fe      	b.n	800993a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	2b02      	cmp	r3, #2
 8009940:	d103      	bne.n	800994a <xQueueGenericSendFromISR+0x66>
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009946:	2b01      	cmp	r3, #1
 8009948:	d101      	bne.n	800994e <xQueueGenericSendFromISR+0x6a>
 800994a:	2301      	movs	r3, #1
 800994c:	e000      	b.n	8009950 <xQueueGenericSendFromISR+0x6c>
 800994e:	2300      	movs	r3, #0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d109      	bne.n	8009968 <xQueueGenericSendFromISR+0x84>
 8009954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	61fb      	str	r3, [r7, #28]
 8009966:	e7fe      	b.n	8009966 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009968:	f001 ff9c 	bl	800b8a4 <vPortValidateInterruptPriority>
	__asm volatile
 800996c:	f3ef 8211 	mrs	r2, BASEPRI
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	61ba      	str	r2, [r7, #24]
 8009982:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009984:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009986:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800998c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009990:	429a      	cmp	r2, r3
 8009992:	d302      	bcc.n	800999a <xQueueGenericSendFromISR+0xb6>
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	2b02      	cmp	r3, #2
 8009998:	d12c      	bne.n	80099f4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800999a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	68b9      	ldr	r1, [r7, #8]
 80099a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099aa:	f000 f90b 	bl	8009bc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80099ae:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80099b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b6:	d112      	bne.n	80099de <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d016      	beq.n	80099ee <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c2:	3324      	adds	r3, #36	; 0x24
 80099c4:	4618      	mov	r0, r3
 80099c6:	f000 fef5 	bl	800a7b4 <xTaskRemoveFromEventList>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00e      	beq.n	80099ee <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00b      	beq.n	80099ee <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2201      	movs	r2, #1
 80099da:	601a      	str	r2, [r3, #0]
 80099dc:	e007      	b.n	80099ee <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80099de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80099e2:	3301      	adds	r3, #1
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	b25a      	sxtb	r2, r3
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80099ee:	2301      	movs	r3, #1
 80099f0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80099f2:	e001      	b.n	80099f8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099f4:	2300      	movs	r3, #0
 80099f6:	637b      	str	r3, [r7, #52]	; 0x34
 80099f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fa:	613b      	str	r3, [r7, #16]
	__asm volatile
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3738      	adds	r7, #56	; 0x38
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b08c      	sub	sp, #48	; 0x30
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d109      	bne.n	8009a3a <xQueueReceive+0x2e>
	__asm volatile
 8009a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	623b      	str	r3, [r7, #32]
 8009a38:	e7fe      	b.n	8009a38 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d103      	bne.n	8009a48 <xQueueReceive+0x3c>
 8009a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d101      	bne.n	8009a4c <xQueueReceive+0x40>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e000      	b.n	8009a4e <xQueueReceive+0x42>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d109      	bne.n	8009a66 <xQueueReceive+0x5a>
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	61fb      	str	r3, [r7, #28]
 8009a64:	e7fe      	b.n	8009a64 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a66:	f001 f8bb 	bl	800abe0 <xTaskGetSchedulerState>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d102      	bne.n	8009a76 <xQueueReceive+0x6a>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <xQueueReceive+0x6e>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e000      	b.n	8009a7c <xQueueReceive+0x70>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d109      	bne.n	8009a94 <xQueueReceive+0x88>
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	61bb      	str	r3, [r7, #24]
 8009a92:	e7fe      	b.n	8009a92 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a94:	f001 fe2a 	bl	800b6ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d01f      	beq.n	8009ae4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009aa4:	68b9      	ldr	r1, [r7, #8]
 8009aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aa8:	f000 f8f6 	bl	8009c98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	1e5a      	subs	r2, r3, #1
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00f      	beq.n	8009adc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	3310      	adds	r3, #16
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f000 fe77 	bl	800a7b4 <xTaskRemoveFromEventList>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d007      	beq.n	8009adc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009acc:	4b3c      	ldr	r3, [pc, #240]	; (8009bc0 <xQueueReceive+0x1b4>)
 8009ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009adc:	f001 fe34 	bl	800b748 <vPortExitCritical>
				return pdPASS;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e069      	b.n	8009bb8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d103      	bne.n	8009af2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009aea:	f001 fe2d 	bl	800b748 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009aee:	2300      	movs	r3, #0
 8009af0:	e062      	b.n	8009bb8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d106      	bne.n	8009b06 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009af8:	f107 0310 	add.w	r3, r7, #16
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 ff1b 	bl	800a938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b02:	2301      	movs	r3, #1
 8009b04:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b06:	f001 fe1f 	bl	800b748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b0a:	f000 fbfd 	bl	800a308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b0e:	f001 fded 	bl	800b6ec <vPortEnterCritical>
 8009b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b18:	b25b      	sxtb	r3, r3
 8009b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1e:	d103      	bne.n	8009b28 <xQueueReceive+0x11c>
 8009b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b22:	2200      	movs	r2, #0
 8009b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b2e:	b25b      	sxtb	r3, r3
 8009b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b34:	d103      	bne.n	8009b3e <xQueueReceive+0x132>
 8009b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b3e:	f001 fe03 	bl	800b748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b42:	1d3a      	adds	r2, r7, #4
 8009b44:	f107 0310 	add.w	r3, r7, #16
 8009b48:	4611      	mov	r1, r2
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 ff0a 	bl	800a964 <xTaskCheckForTimeOut>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d123      	bne.n	8009b9e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b58:	f000 f916 	bl	8009d88 <prvIsQueueEmpty>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d017      	beq.n	8009b92 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b64:	3324      	adds	r3, #36	; 0x24
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	4611      	mov	r1, r2
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f000 fd9a 	bl	800a6a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b72:	f000 f8b7 	bl	8009ce4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b76:	f000 fbd5 	bl	800a324 <xTaskResumeAll>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d189      	bne.n	8009a94 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009b80:	4b0f      	ldr	r3, [pc, #60]	; (8009bc0 <xQueueReceive+0x1b4>)
 8009b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b86:	601a      	str	r2, [r3, #0]
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	e780      	b.n	8009a94 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b94:	f000 f8a6 	bl	8009ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b98:	f000 fbc4 	bl	800a324 <xTaskResumeAll>
 8009b9c:	e77a      	b.n	8009a94 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ba0:	f000 f8a0 	bl	8009ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ba4:	f000 fbbe 	bl	800a324 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009baa:	f000 f8ed 	bl	8009d88 <prvIsQueueEmpty>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f43f af6f 	beq.w	8009a94 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009bb6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3730      	adds	r7, #48	; 0x30
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	e000ed04 	.word	0xe000ed04

08009bc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10d      	bne.n	8009bfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d14d      	bne.n	8009c86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f001 f814 	bl	800ac1c <xTaskPriorityDisinherit>
 8009bf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	609a      	str	r2, [r3, #8]
 8009bfc:	e043      	b.n	8009c86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d119      	bne.n	8009c38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6858      	ldr	r0, [r3, #4]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	68b9      	ldr	r1, [r7, #8]
 8009c10:	f004 fa50 	bl	800e0b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1c:	441a      	add	r2, r3
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	685a      	ldr	r2, [r3, #4]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d32b      	bcc.n	8009c86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	605a      	str	r2, [r3, #4]
 8009c36:	e026      	b.n	8009c86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	68d8      	ldr	r0, [r3, #12]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c40:	461a      	mov	r2, r3
 8009c42:	68b9      	ldr	r1, [r7, #8]
 8009c44:	f004 fa36 	bl	800e0b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	68da      	ldr	r2, [r3, #12]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c50:	425b      	negs	r3, r3
 8009c52:	441a      	add	r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	68da      	ldr	r2, [r3, #12]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d207      	bcs.n	8009c74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	689a      	ldr	r2, [r3, #8]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6c:	425b      	negs	r3, r3
 8009c6e:	441a      	add	r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d105      	bne.n	8009c86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d002      	beq.n	8009c86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	3b01      	subs	r3, #1
 8009c84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	1c5a      	adds	r2, r3, #1
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009c8e:	697b      	ldr	r3, [r7, #20]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3718      	adds	r7, #24
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d018      	beq.n	8009cdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68da      	ldr	r2, [r3, #12]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb2:	441a      	add	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68da      	ldr	r2, [r3, #12]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d303      	bcc.n	8009ccc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	68d9      	ldr	r1, [r3, #12]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	6838      	ldr	r0, [r7, #0]
 8009cd8:	f004 f9ec 	bl	800e0b4 <memcpy>
	}
}
 8009cdc:	bf00      	nop
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009cec:	f001 fcfe 	bl	800b6ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009cf8:	e011      	b.n	8009d1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d012      	beq.n	8009d28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	3324      	adds	r3, #36	; 0x24
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 fd54 	bl	800a7b4 <xTaskRemoveFromEventList>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009d12:	f000 fe87 	bl	800aa24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	dce9      	bgt.n	8009cfa <prvUnlockQueue+0x16>
 8009d26:	e000      	b.n	8009d2a <prvUnlockQueue+0x46>
					break;
 8009d28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	22ff      	movs	r2, #255	; 0xff
 8009d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009d32:	f001 fd09 	bl	800b748 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009d36:	f001 fcd9 	bl	800b6ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d42:	e011      	b.n	8009d68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d012      	beq.n	8009d72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	3310      	adds	r3, #16
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 fd2f 	bl	800a7b4 <xTaskRemoveFromEventList>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d001      	beq.n	8009d60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009d5c:	f000 fe62 	bl	800aa24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009d60:	7bbb      	ldrb	r3, [r7, #14]
 8009d62:	3b01      	subs	r3, #1
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	dce9      	bgt.n	8009d44 <prvUnlockQueue+0x60>
 8009d70:	e000      	b.n	8009d74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009d72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	22ff      	movs	r2, #255	; 0xff
 8009d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009d7c:	f001 fce4 	bl	800b748 <vPortExitCritical>
}
 8009d80:	bf00      	nop
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d90:	f001 fcac 	bl	800b6ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d102      	bne.n	8009da2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	60fb      	str	r3, [r7, #12]
 8009da0:	e001      	b.n	8009da6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009da2:	2300      	movs	r3, #0
 8009da4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009da6:	f001 fccf 	bl	800b748 <vPortExitCritical>

	return xReturn;
 8009daa:	68fb      	ldr	r3, [r7, #12]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009dbc:	f001 fc96 	bl	800b6ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d102      	bne.n	8009dd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	e001      	b.n	8009dd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009dd6:	f001 fcb7 	bl	800b748 <vPortExitCritical>

	return xReturn;
 8009dda:	68fb      	ldr	r3, [r7, #12]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009dee:	2300      	movs	r3, #0
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	e014      	b.n	8009e1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009df4:	4a0e      	ldr	r2, [pc, #56]	; (8009e30 <vQueueAddToRegistry+0x4c>)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10b      	bne.n	8009e18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009e00:	490b      	ldr	r1, [pc, #44]	; (8009e30 <vQueueAddToRegistry+0x4c>)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009e0a:	4a09      	ldr	r2, [pc, #36]	; (8009e30 <vQueueAddToRegistry+0x4c>)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	00db      	lsls	r3, r3, #3
 8009e10:	4413      	add	r3, r2
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009e16:	e005      	b.n	8009e24 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2b07      	cmp	r3, #7
 8009e22:	d9e7      	bls.n	8009df4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009e24:	bf00      	nop
 8009e26:	3714      	adds	r7, #20
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr
 8009e30:	2000bad8 	.word	0x2000bad8

08009e34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009e44:	f001 fc52 	bl	800b6ec <vPortEnterCritical>
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e4e:	b25b      	sxtb	r3, r3
 8009e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e54:	d103      	bne.n	8009e5e <vQueueWaitForMessageRestricted+0x2a>
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e64:	b25b      	sxtb	r3, r3
 8009e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e6a:	d103      	bne.n	8009e74 <vQueueWaitForMessageRestricted+0x40>
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e74:	f001 fc68 	bl	800b748 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d106      	bne.n	8009e8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	3324      	adds	r3, #36	; 0x24
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	68b9      	ldr	r1, [r7, #8]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 fc69 	bl	800a760 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009e8e:	6978      	ldr	r0, [r7, #20]
 8009e90:	f7ff ff28 	bl	8009ce4 <prvUnlockQueue>
	}
 8009e94:	bf00      	nop
 8009e96:	3718      	adds	r7, #24
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08e      	sub	sp, #56	; 0x38
 8009ea0:	af04      	add	r7, sp, #16
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
 8009ea8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d109      	bne.n	8009ec4 <xTaskCreateStatic+0x28>
 8009eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	623b      	str	r3, [r7, #32]
 8009ec2:	e7fe      	b.n	8009ec2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d109      	bne.n	8009ede <xTaskCreateStatic+0x42>
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	61fb      	str	r3, [r7, #28]
 8009edc:	e7fe      	b.n	8009edc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ede:	235c      	movs	r3, #92	; 0x5c
 8009ee0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	2b5c      	cmp	r3, #92	; 0x5c
 8009ee6:	d009      	beq.n	8009efc <xTaskCreateStatic+0x60>
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	61bb      	str	r3, [r7, #24]
 8009efa:	e7fe      	b.n	8009efa <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009efc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d01e      	beq.n	8009f42 <xTaskCreateStatic+0xa6>
 8009f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d01b      	beq.n	8009f42 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f12:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	2202      	movs	r2, #2
 8009f18:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	9303      	str	r3, [sp, #12]
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	9302      	str	r3, [sp, #8]
 8009f24:	f107 0314 	add.w	r3, r7, #20
 8009f28:	9301      	str	r3, [sp, #4]
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	68b9      	ldr	r1, [r7, #8]
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 f850 	bl	8009fda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f3c:	f000 f8dc 	bl	800a0f8 <prvAddNewTaskToReadyList>
 8009f40:	e001      	b.n	8009f46 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f46:	697b      	ldr	r3, [r7, #20]
	}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3728      	adds	r7, #40	; 0x28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b08c      	sub	sp, #48	; 0x30
 8009f54:	af04      	add	r7, sp, #16
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	603b      	str	r3, [r7, #0]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f60:	88fb      	ldrh	r3, [r7, #6]
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4618      	mov	r0, r3
 8009f66:	f001 fcdb 	bl	800b920 <pvPortMalloc>
 8009f6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00e      	beq.n	8009f90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f72:	205c      	movs	r0, #92	; 0x5c
 8009f74:	f001 fcd4 	bl	800b920 <pvPortMalloc>
 8009f78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	631a      	str	r2, [r3, #48]	; 0x30
 8009f86:	e005      	b.n	8009f94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f88:	6978      	ldr	r0, [r7, #20]
 8009f8a:	f001 fd8b 	bl	800baa4 <vPortFree>
 8009f8e:	e001      	b.n	8009f94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f90:	2300      	movs	r3, #0
 8009f92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d017      	beq.n	8009fca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fa2:	88fa      	ldrh	r2, [r7, #6]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	9303      	str	r3, [sp, #12]
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	9302      	str	r3, [sp, #8]
 8009fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fae:	9301      	str	r3, [sp, #4]
 8009fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	68b9      	ldr	r1, [r7, #8]
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f000 f80e 	bl	8009fda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fbe:	69f8      	ldr	r0, [r7, #28]
 8009fc0:	f000 f89a 	bl	800a0f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	61bb      	str	r3, [r7, #24]
 8009fc8:	e002      	b.n	8009fd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009fca:	f04f 33ff 	mov.w	r3, #4294967295
 8009fce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009fd0:	69bb      	ldr	r3, [r7, #24]
	}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3720      	adds	r7, #32
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b088      	sub	sp, #32
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	60f8      	str	r0, [r7, #12]
 8009fe2:	60b9      	str	r1, [r7, #8]
 8009fe4:	607a      	str	r2, [r7, #4]
 8009fe6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	21a5      	movs	r1, #165	; 0xa5
 8009ff4:	f004 f869 	bl	800e0ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a002:	3b01      	subs	r3, #1
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	f023 0307 	bic.w	r3, r3, #7
 800a010:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	f003 0307 	and.w	r3, r3, #7
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d009      	beq.n	800a030 <prvInitialiseNewTask+0x56>
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	617b      	str	r3, [r7, #20]
 800a02e:	e7fe      	b.n	800a02e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d01f      	beq.n	800a076 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a036:	2300      	movs	r3, #0
 800a038:	61fb      	str	r3, [r7, #28]
 800a03a:	e012      	b.n	800a062 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	4413      	add	r3, r2
 800a042:	7819      	ldrb	r1, [r3, #0]
 800a044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	4413      	add	r3, r2
 800a04a:	3334      	adds	r3, #52	; 0x34
 800a04c:	460a      	mov	r2, r1
 800a04e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	4413      	add	r3, r2
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d006      	beq.n	800a06a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	3301      	adds	r3, #1
 800a060:	61fb      	str	r3, [r7, #28]
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	2b0f      	cmp	r3, #15
 800a066:	d9e9      	bls.n	800a03c <prvInitialiseNewTask+0x62>
 800a068:	e000      	b.n	800a06c <prvInitialiseNewTask+0x92>
			{
				break;
 800a06a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a074:	e003      	b.n	800a07e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a080:	2b37      	cmp	r3, #55	; 0x37
 800a082:	d901      	bls.n	800a088 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a084:	2337      	movs	r3, #55	; 0x37
 800a086:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a08c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a092:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	2200      	movs	r2, #0
 800a098:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	3304      	adds	r3, #4
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7ff f994 	bl	80093cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	3318      	adds	r3, #24
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7ff f98f 	bl	80093cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	68f9      	ldr	r1, [r7, #12]
 800a0d6:	69b8      	ldr	r0, [r7, #24]
 800a0d8:	f001 f9de 	bl	800b498 <pxPortInitialiseStack>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0ee:	bf00      	nop
 800a0f0:	3720      	adds	r7, #32
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
	...

0800a0f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a100:	f001 faf4 	bl	800b6ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a104:	4b2d      	ldr	r3, [pc, #180]	; (800a1bc <prvAddNewTaskToReadyList+0xc4>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3301      	adds	r3, #1
 800a10a:	4a2c      	ldr	r2, [pc, #176]	; (800a1bc <prvAddNewTaskToReadyList+0xc4>)
 800a10c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a10e:	4b2c      	ldr	r3, [pc, #176]	; (800a1c0 <prvAddNewTaskToReadyList+0xc8>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d109      	bne.n	800a12a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a116:	4a2a      	ldr	r2, [pc, #168]	; (800a1c0 <prvAddNewTaskToReadyList+0xc8>)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a11c:	4b27      	ldr	r3, [pc, #156]	; (800a1bc <prvAddNewTaskToReadyList+0xc4>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d110      	bne.n	800a146 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a124:	f000 fca2 	bl	800aa6c <prvInitialiseTaskLists>
 800a128:	e00d      	b.n	800a146 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a12a:	4b26      	ldr	r3, [pc, #152]	; (800a1c4 <prvAddNewTaskToReadyList+0xcc>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d109      	bne.n	800a146 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a132:	4b23      	ldr	r3, [pc, #140]	; (800a1c0 <prvAddNewTaskToReadyList+0xc8>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d802      	bhi.n	800a146 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a140:	4a1f      	ldr	r2, [pc, #124]	; (800a1c0 <prvAddNewTaskToReadyList+0xc8>)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a146:	4b20      	ldr	r3, [pc, #128]	; (800a1c8 <prvAddNewTaskToReadyList+0xd0>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3301      	adds	r3, #1
 800a14c:	4a1e      	ldr	r2, [pc, #120]	; (800a1c8 <prvAddNewTaskToReadyList+0xd0>)
 800a14e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a150:	4b1d      	ldr	r3, [pc, #116]	; (800a1c8 <prvAddNewTaskToReadyList+0xd0>)
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a15c:	4b1b      	ldr	r3, [pc, #108]	; (800a1cc <prvAddNewTaskToReadyList+0xd4>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	429a      	cmp	r2, r3
 800a162:	d903      	bls.n	800a16c <prvAddNewTaskToReadyList+0x74>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a168:	4a18      	ldr	r2, [pc, #96]	; (800a1cc <prvAddNewTaskToReadyList+0xd4>)
 800a16a:	6013      	str	r3, [r2, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4a15      	ldr	r2, [pc, #84]	; (800a1d0 <prvAddNewTaskToReadyList+0xd8>)
 800a17a:	441a      	add	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	3304      	adds	r3, #4
 800a180:	4619      	mov	r1, r3
 800a182:	4610      	mov	r0, r2
 800a184:	f7ff f92f 	bl	80093e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a188:	f001 fade 	bl	800b748 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a18c:	4b0d      	ldr	r3, [pc, #52]	; (800a1c4 <prvAddNewTaskToReadyList+0xcc>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00e      	beq.n	800a1b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a194:	4b0a      	ldr	r3, [pc, #40]	; (800a1c0 <prvAddNewTaskToReadyList+0xc8>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d207      	bcs.n	800a1b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1a2:	4b0c      	ldr	r3, [pc, #48]	; (800a1d4 <prvAddNewTaskToReadyList+0xdc>)
 800a1a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1a8:	601a      	str	r2, [r3, #0]
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1b2:	bf00      	nop
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20005158 	.word	0x20005158
 800a1c0:	20004c84 	.word	0x20004c84
 800a1c4:	20005164 	.word	0x20005164
 800a1c8:	20005174 	.word	0x20005174
 800a1cc:	20005160 	.word	0x20005160
 800a1d0:	20004c88 	.word	0x20004c88
 800a1d4:	e000ed04 	.word	0xe000ed04

0800a1d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d016      	beq.n	800a218 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a1ea:	4b13      	ldr	r3, [pc, #76]	; (800a238 <vTaskDelay+0x60>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d009      	beq.n	800a206 <vTaskDelay+0x2e>
 800a1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f6:	f383 8811 	msr	BASEPRI, r3
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	60bb      	str	r3, [r7, #8]
 800a204:	e7fe      	b.n	800a204 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a206:	f000 f87f 	bl	800a308 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a20a:	2100      	movs	r1, #0
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fd89 	bl	800ad24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a212:	f000 f887 	bl	800a324 <xTaskResumeAll>
 800a216:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d107      	bne.n	800a22e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a21e:	4b07      	ldr	r3, [pc, #28]	; (800a23c <vTaskDelay+0x64>)
 800a220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a224:	601a      	str	r2, [r3, #0]
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a22e:	bf00      	nop
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20005180 	.word	0x20005180
 800a23c:	e000ed04 	.word	0xe000ed04

0800a240 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08a      	sub	sp, #40	; 0x28
 800a244:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a246:	2300      	movs	r3, #0
 800a248:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a24e:	463a      	mov	r2, r7
 800a250:	1d39      	adds	r1, r7, #4
 800a252:	f107 0308 	add.w	r3, r7, #8
 800a256:	4618      	mov	r0, r3
 800a258:	f7fe fe04 	bl	8008e64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	9202      	str	r2, [sp, #8]
 800a264:	9301      	str	r3, [sp, #4]
 800a266:	2300      	movs	r3, #0
 800a268:	9300      	str	r3, [sp, #0]
 800a26a:	2300      	movs	r3, #0
 800a26c:	460a      	mov	r2, r1
 800a26e:	4920      	ldr	r1, [pc, #128]	; (800a2f0 <vTaskStartScheduler+0xb0>)
 800a270:	4820      	ldr	r0, [pc, #128]	; (800a2f4 <vTaskStartScheduler+0xb4>)
 800a272:	f7ff fe13 	bl	8009e9c <xTaskCreateStatic>
 800a276:	4602      	mov	r2, r0
 800a278:	4b1f      	ldr	r3, [pc, #124]	; (800a2f8 <vTaskStartScheduler+0xb8>)
 800a27a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a27c:	4b1e      	ldr	r3, [pc, #120]	; (800a2f8 <vTaskStartScheduler+0xb8>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a284:	2301      	movs	r3, #1
 800a286:	617b      	str	r3, [r7, #20]
 800a288:	e001      	b.n	800a28e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d102      	bne.n	800a29a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a294:	f000 fd9a 	bl	800adcc <xTimerCreateTimerTask>
 800a298:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d115      	bne.n	800a2cc <vTaskStartScheduler+0x8c>
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a2b2:	4b12      	ldr	r3, [pc, #72]	; (800a2fc <vTaskStartScheduler+0xbc>)
 800a2b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a2ba:	4b11      	ldr	r3, [pc, #68]	; (800a300 <vTaskStartScheduler+0xc0>)
 800a2bc:	2201      	movs	r2, #1
 800a2be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a2c0:	4b10      	ldr	r3, [pc, #64]	; (800a304 <vTaskStartScheduler+0xc4>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2c6:	f001 f973 	bl	800b5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a2ca:	e00d      	b.n	800a2e8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d2:	d109      	bne.n	800a2e8 <vTaskStartScheduler+0xa8>
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	e7fe      	b.n	800a2e6 <vTaskStartScheduler+0xa6>
}
 800a2e8:	bf00      	nop
 800a2ea:	3718      	adds	r7, #24
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	08011390 	.word	0x08011390
 800a2f4:	0800aa3d 	.word	0x0800aa3d
 800a2f8:	2000517c 	.word	0x2000517c
 800a2fc:	20005178 	.word	0x20005178
 800a300:	20005164 	.word	0x20005164
 800a304:	2000515c 	.word	0x2000515c

0800a308 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a308:	b480      	push	{r7}
 800a30a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a30c:	4b04      	ldr	r3, [pc, #16]	; (800a320 <vTaskSuspendAll+0x18>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3301      	adds	r3, #1
 800a312:	4a03      	ldr	r2, [pc, #12]	; (800a320 <vTaskSuspendAll+0x18>)
 800a314:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a316:	bf00      	nop
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	20005180 	.word	0x20005180

0800a324 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a32a:	2300      	movs	r3, #0
 800a32c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a32e:	2300      	movs	r3, #0
 800a330:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a332:	4b41      	ldr	r3, [pc, #260]	; (800a438 <xTaskResumeAll+0x114>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d109      	bne.n	800a34e <xTaskResumeAll+0x2a>
 800a33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33e:	f383 8811 	msr	BASEPRI, r3
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	e7fe      	b.n	800a34c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a34e:	f001 f9cd 	bl	800b6ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a352:	4b39      	ldr	r3, [pc, #228]	; (800a438 <xTaskResumeAll+0x114>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3b01      	subs	r3, #1
 800a358:	4a37      	ldr	r2, [pc, #220]	; (800a438 <xTaskResumeAll+0x114>)
 800a35a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a35c:	4b36      	ldr	r3, [pc, #216]	; (800a438 <xTaskResumeAll+0x114>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d162      	bne.n	800a42a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a364:	4b35      	ldr	r3, [pc, #212]	; (800a43c <xTaskResumeAll+0x118>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d05e      	beq.n	800a42a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a36c:	e02f      	b.n	800a3ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a36e:	4b34      	ldr	r3, [pc, #208]	; (800a440 <xTaskResumeAll+0x11c>)
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3318      	adds	r3, #24
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff f890 	bl	80094a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	3304      	adds	r3, #4
 800a384:	4618      	mov	r0, r3
 800a386:	f7ff f88b 	bl	80094a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38e:	4b2d      	ldr	r3, [pc, #180]	; (800a444 <xTaskResumeAll+0x120>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	429a      	cmp	r2, r3
 800a394:	d903      	bls.n	800a39e <xTaskResumeAll+0x7a>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39a:	4a2a      	ldr	r2, [pc, #168]	; (800a444 <xTaskResumeAll+0x120>)
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	4a27      	ldr	r2, [pc, #156]	; (800a448 <xTaskResumeAll+0x124>)
 800a3ac:	441a      	add	r2, r3
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	f7ff f816 	bl	80093e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3be:	4b23      	ldr	r3, [pc, #140]	; (800a44c <xTaskResumeAll+0x128>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d302      	bcc.n	800a3ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a3c8:	4b21      	ldr	r3, [pc, #132]	; (800a450 <xTaskResumeAll+0x12c>)
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3ce:	4b1c      	ldr	r3, [pc, #112]	; (800a440 <xTaskResumeAll+0x11c>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1cb      	bne.n	800a36e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a3dc:	f000 fbe0 	bl	800aba0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a3e0:	4b1c      	ldr	r3, [pc, #112]	; (800a454 <xTaskResumeAll+0x130>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d010      	beq.n	800a40e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3ec:	f000 f846 	bl	800a47c <xTaskIncrementTick>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d002      	beq.n	800a3fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a3f6:	4b16      	ldr	r3, [pc, #88]	; (800a450 <xTaskResumeAll+0x12c>)
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	3b01      	subs	r3, #1
 800a400:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1f1      	bne.n	800a3ec <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a408:	4b12      	ldr	r3, [pc, #72]	; (800a454 <xTaskResumeAll+0x130>)
 800a40a:	2200      	movs	r2, #0
 800a40c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a40e:	4b10      	ldr	r3, [pc, #64]	; (800a450 <xTaskResumeAll+0x12c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d009      	beq.n	800a42a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a416:	2301      	movs	r3, #1
 800a418:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a41a:	4b0f      	ldr	r3, [pc, #60]	; (800a458 <xTaskResumeAll+0x134>)
 800a41c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a42a:	f001 f98d 	bl	800b748 <vPortExitCritical>

	return xAlreadyYielded;
 800a42e:	68bb      	ldr	r3, [r7, #8]
}
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	20005180 	.word	0x20005180
 800a43c:	20005158 	.word	0x20005158
 800a440:	20005118 	.word	0x20005118
 800a444:	20005160 	.word	0x20005160
 800a448:	20004c88 	.word	0x20004c88
 800a44c:	20004c84 	.word	0x20004c84
 800a450:	2000516c 	.word	0x2000516c
 800a454:	20005168 	.word	0x20005168
 800a458:	e000ed04 	.word	0xe000ed04

0800a45c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a462:	4b05      	ldr	r3, [pc, #20]	; (800a478 <xTaskGetTickCount+0x1c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a468:	687b      	ldr	r3, [r7, #4]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	370c      	adds	r7, #12
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	2000515c 	.word	0x2000515c

0800a47c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a482:	2300      	movs	r3, #0
 800a484:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a486:	4b4e      	ldr	r3, [pc, #312]	; (800a5c0 <xTaskIncrementTick+0x144>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f040 8088 	bne.w	800a5a0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a490:	4b4c      	ldr	r3, [pc, #304]	; (800a5c4 <xTaskIncrementTick+0x148>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3301      	adds	r3, #1
 800a496:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a498:	4a4a      	ldr	r2, [pc, #296]	; (800a5c4 <xTaskIncrementTick+0x148>)
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d11f      	bne.n	800a4e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a4a4:	4b48      	ldr	r3, [pc, #288]	; (800a5c8 <xTaskIncrementTick+0x14c>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d009      	beq.n	800a4c2 <xTaskIncrementTick+0x46>
 800a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	603b      	str	r3, [r7, #0]
 800a4c0:	e7fe      	b.n	800a4c0 <xTaskIncrementTick+0x44>
 800a4c2:	4b41      	ldr	r3, [pc, #260]	; (800a5c8 <xTaskIncrementTick+0x14c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	4b40      	ldr	r3, [pc, #256]	; (800a5cc <xTaskIncrementTick+0x150>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a3e      	ldr	r2, [pc, #248]	; (800a5c8 <xTaskIncrementTick+0x14c>)
 800a4ce:	6013      	str	r3, [r2, #0]
 800a4d0:	4a3e      	ldr	r2, [pc, #248]	; (800a5cc <xTaskIncrementTick+0x150>)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	4b3e      	ldr	r3, [pc, #248]	; (800a5d0 <xTaskIncrementTick+0x154>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	4a3c      	ldr	r2, [pc, #240]	; (800a5d0 <xTaskIncrementTick+0x154>)
 800a4de:	6013      	str	r3, [r2, #0]
 800a4e0:	f000 fb5e 	bl	800aba0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4e4:	4b3b      	ldr	r3, [pc, #236]	; (800a5d4 <xTaskIncrementTick+0x158>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d349      	bcc.n	800a582 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4ee:	4b36      	ldr	r3, [pc, #216]	; (800a5c8 <xTaskIncrementTick+0x14c>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d104      	bne.n	800a502 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4f8:	4b36      	ldr	r3, [pc, #216]	; (800a5d4 <xTaskIncrementTick+0x158>)
 800a4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a4fe:	601a      	str	r2, [r3, #0]
					break;
 800a500:	e03f      	b.n	800a582 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a502:	4b31      	ldr	r3, [pc, #196]	; (800a5c8 <xTaskIncrementTick+0x14c>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a512:	693a      	ldr	r2, [r7, #16]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	429a      	cmp	r2, r3
 800a518:	d203      	bcs.n	800a522 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a51a:	4a2e      	ldr	r2, [pc, #184]	; (800a5d4 <xTaskIncrementTick+0x158>)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a520:	e02f      	b.n	800a582 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	3304      	adds	r3, #4
 800a526:	4618      	mov	r0, r3
 800a528:	f7fe ffba 	bl	80094a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a530:	2b00      	cmp	r3, #0
 800a532:	d004      	beq.n	800a53e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	3318      	adds	r3, #24
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe ffb1 	bl	80094a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a542:	4b25      	ldr	r3, [pc, #148]	; (800a5d8 <xTaskIncrementTick+0x15c>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	429a      	cmp	r2, r3
 800a548:	d903      	bls.n	800a552 <xTaskIncrementTick+0xd6>
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a54e:	4a22      	ldr	r2, [pc, #136]	; (800a5d8 <xTaskIncrementTick+0x15c>)
 800a550:	6013      	str	r3, [r2, #0]
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a556:	4613      	mov	r3, r2
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	4413      	add	r3, r2
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	4a1f      	ldr	r2, [pc, #124]	; (800a5dc <xTaskIncrementTick+0x160>)
 800a560:	441a      	add	r2, r3
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	3304      	adds	r3, #4
 800a566:	4619      	mov	r1, r3
 800a568:	4610      	mov	r0, r2
 800a56a:	f7fe ff3c 	bl	80093e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a572:	4b1b      	ldr	r3, [pc, #108]	; (800a5e0 <xTaskIncrementTick+0x164>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a578:	429a      	cmp	r2, r3
 800a57a:	d3b8      	bcc.n	800a4ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a57c:	2301      	movs	r3, #1
 800a57e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a580:	e7b5      	b.n	800a4ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a582:	4b17      	ldr	r3, [pc, #92]	; (800a5e0 <xTaskIncrementTick+0x164>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a588:	4914      	ldr	r1, [pc, #80]	; (800a5dc <xTaskIncrementTick+0x160>)
 800a58a:	4613      	mov	r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4413      	add	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	440b      	add	r3, r1
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2b01      	cmp	r3, #1
 800a598:	d907      	bls.n	800a5aa <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a59a:	2301      	movs	r3, #1
 800a59c:	617b      	str	r3, [r7, #20]
 800a59e:	e004      	b.n	800a5aa <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a5a0:	4b10      	ldr	r3, [pc, #64]	; (800a5e4 <xTaskIncrementTick+0x168>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	4a0f      	ldr	r2, [pc, #60]	; (800a5e4 <xTaskIncrementTick+0x168>)
 800a5a8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a5aa:	4b0f      	ldr	r3, [pc, #60]	; (800a5e8 <xTaskIncrementTick+0x16c>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d001      	beq.n	800a5b6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a5b6:	697b      	ldr	r3, [r7, #20]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3718      	adds	r7, #24
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	20005180 	.word	0x20005180
 800a5c4:	2000515c 	.word	0x2000515c
 800a5c8:	20005110 	.word	0x20005110
 800a5cc:	20005114 	.word	0x20005114
 800a5d0:	20005170 	.word	0x20005170
 800a5d4:	20005178 	.word	0x20005178
 800a5d8:	20005160 	.word	0x20005160
 800a5dc:	20004c88 	.word	0x20004c88
 800a5e0:	20004c84 	.word	0x20004c84
 800a5e4:	20005168 	.word	0x20005168
 800a5e8:	2000516c 	.word	0x2000516c

0800a5ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5f2:	4b27      	ldr	r3, [pc, #156]	; (800a690 <vTaskSwitchContext+0xa4>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d003      	beq.n	800a602 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5fa:	4b26      	ldr	r3, [pc, #152]	; (800a694 <vTaskSwitchContext+0xa8>)
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a600:	e040      	b.n	800a684 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a602:	4b24      	ldr	r3, [pc, #144]	; (800a694 <vTaskSwitchContext+0xa8>)
 800a604:	2200      	movs	r2, #0
 800a606:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a608:	4b23      	ldr	r3, [pc, #140]	; (800a698 <vTaskSwitchContext+0xac>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	e00f      	b.n	800a630 <vTaskSwitchContext+0x44>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d109      	bne.n	800a62a <vTaskSwitchContext+0x3e>
 800a616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61a:	f383 8811 	msr	BASEPRI, r3
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	f3bf 8f4f 	dsb	sy
 800a626:	607b      	str	r3, [r7, #4]
 800a628:	e7fe      	b.n	800a628 <vTaskSwitchContext+0x3c>
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	3b01      	subs	r3, #1
 800a62e:	60fb      	str	r3, [r7, #12]
 800a630:	491a      	ldr	r1, [pc, #104]	; (800a69c <vTaskSwitchContext+0xb0>)
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	4613      	mov	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	440b      	add	r3, r1
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d0e5      	beq.n	800a610 <vTaskSwitchContext+0x24>
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	4613      	mov	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4a13      	ldr	r2, [pc, #76]	; (800a69c <vTaskSwitchContext+0xb0>)
 800a650:	4413      	add	r3, r2
 800a652:	60bb      	str	r3, [r7, #8]
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	685a      	ldr	r2, [r3, #4]
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	605a      	str	r2, [r3, #4]
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	3308      	adds	r3, #8
 800a666:	429a      	cmp	r2, r3
 800a668:	d104      	bne.n	800a674 <vTaskSwitchContext+0x88>
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	605a      	str	r2, [r3, #4]
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	4a09      	ldr	r2, [pc, #36]	; (800a6a0 <vTaskSwitchContext+0xb4>)
 800a67c:	6013      	str	r3, [r2, #0]
 800a67e:	4a06      	ldr	r2, [pc, #24]	; (800a698 <vTaskSwitchContext+0xac>)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6013      	str	r3, [r2, #0]
}
 800a684:	bf00      	nop
 800a686:	3714      	adds	r7, #20
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	20005180 	.word	0x20005180
 800a694:	2000516c 	.word	0x2000516c
 800a698:	20005160 	.word	0x20005160
 800a69c:	20004c88 	.word	0x20004c88
 800a6a0:	20004c84 	.word	0x20004c84

0800a6a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d109      	bne.n	800a6c8 <vTaskPlaceOnEventList+0x24>
 800a6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b8:	f383 8811 	msr	BASEPRI, r3
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	60fb      	str	r3, [r7, #12]
 800a6c6:	e7fe      	b.n	800a6c6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6c8:	4b07      	ldr	r3, [pc, #28]	; (800a6e8 <vTaskPlaceOnEventList+0x44>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3318      	adds	r3, #24
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7fe feac 	bl	800942e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6d6:	2101      	movs	r1, #1
 800a6d8:	6838      	ldr	r0, [r7, #0]
 800a6da:	f000 fb23 	bl	800ad24 <prvAddCurrentTaskToDelayedList>
}
 800a6de:	bf00      	nop
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	20004c84 	.word	0x20004c84

0800a6ec <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d109      	bne.n	800a712 <vTaskPlaceOnUnorderedEventList+0x26>
 800a6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	617b      	str	r3, [r7, #20]
 800a710:	e7fe      	b.n	800a710 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800a712:	4b11      	ldr	r3, [pc, #68]	; (800a758 <vTaskPlaceOnUnorderedEventList+0x6c>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d109      	bne.n	800a72e <vTaskPlaceOnUnorderedEventList+0x42>
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	613b      	str	r3, [r7, #16]
 800a72c:	e7fe      	b.n	800a72c <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a72e:	4b0b      	ldr	r3, [pc, #44]	; (800a75c <vTaskPlaceOnUnorderedEventList+0x70>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800a738:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a73a:	4b08      	ldr	r3, [pc, #32]	; (800a75c <vTaskPlaceOnUnorderedEventList+0x70>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	3318      	adds	r3, #24
 800a740:	4619      	mov	r1, r3
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f7fe fe4f 	bl	80093e6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a748:	2101      	movs	r1, #1
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 faea 	bl	800ad24 <prvAddCurrentTaskToDelayedList>
}
 800a750:	bf00      	nop
 800a752:	3718      	adds	r7, #24
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	20005180 	.word	0x20005180
 800a75c:	20004c84 	.word	0x20004c84

0800a760 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d109      	bne.n	800a786 <vTaskPlaceOnEventListRestricted+0x26>
 800a772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a776:	f383 8811 	msr	BASEPRI, r3
 800a77a:	f3bf 8f6f 	isb	sy
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	617b      	str	r3, [r7, #20]
 800a784:	e7fe      	b.n	800a784 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a786:	4b0a      	ldr	r3, [pc, #40]	; (800a7b0 <vTaskPlaceOnEventListRestricted+0x50>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	3318      	adds	r3, #24
 800a78c:	4619      	mov	r1, r3
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	f7fe fe29 	bl	80093e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d002      	beq.n	800a7a0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a79a:	f04f 33ff 	mov.w	r3, #4294967295
 800a79e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a7a0:	6879      	ldr	r1, [r7, #4]
 800a7a2:	68b8      	ldr	r0, [r7, #8]
 800a7a4:	f000 fabe 	bl	800ad24 <prvAddCurrentTaskToDelayedList>
	}
 800a7a8:	bf00      	nop
 800a7aa:	3718      	adds	r7, #24
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	20004c84 	.word	0x20004c84

0800a7b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d109      	bne.n	800a7de <xTaskRemoveFromEventList+0x2a>
 800a7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	60fb      	str	r3, [r7, #12]
 800a7dc:	e7fe      	b.n	800a7dc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	3318      	adds	r3, #24
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fe fe5c 	bl	80094a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7e8:	4b1d      	ldr	r3, [pc, #116]	; (800a860 <xTaskRemoveFromEventList+0xac>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d11d      	bne.n	800a82c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fe fe53 	bl	80094a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7fe:	4b19      	ldr	r3, [pc, #100]	; (800a864 <xTaskRemoveFromEventList+0xb0>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	429a      	cmp	r2, r3
 800a804:	d903      	bls.n	800a80e <xTaskRemoveFromEventList+0x5a>
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80a:	4a16      	ldr	r2, [pc, #88]	; (800a864 <xTaskRemoveFromEventList+0xb0>)
 800a80c:	6013      	str	r3, [r2, #0]
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a812:	4613      	mov	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	4a13      	ldr	r2, [pc, #76]	; (800a868 <xTaskRemoveFromEventList+0xb4>)
 800a81c:	441a      	add	r2, r3
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	3304      	adds	r3, #4
 800a822:	4619      	mov	r1, r3
 800a824:	4610      	mov	r0, r2
 800a826:	f7fe fdde 	bl	80093e6 <vListInsertEnd>
 800a82a:	e005      	b.n	800a838 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	3318      	adds	r3, #24
 800a830:	4619      	mov	r1, r3
 800a832:	480e      	ldr	r0, [pc, #56]	; (800a86c <xTaskRemoveFromEventList+0xb8>)
 800a834:	f7fe fdd7 	bl	80093e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a83c:	4b0c      	ldr	r3, [pc, #48]	; (800a870 <xTaskRemoveFromEventList+0xbc>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a842:	429a      	cmp	r2, r3
 800a844:	d905      	bls.n	800a852 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a846:	2301      	movs	r3, #1
 800a848:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a84a:	4b0a      	ldr	r3, [pc, #40]	; (800a874 <xTaskRemoveFromEventList+0xc0>)
 800a84c:	2201      	movs	r2, #1
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	e001      	b.n	800a856 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a852:	2300      	movs	r3, #0
 800a854:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a856:	697b      	ldr	r3, [r7, #20]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	20005180 	.word	0x20005180
 800a864:	20005160 	.word	0x20005160
 800a868:	20004c88 	.word	0x20004c88
 800a86c:	20005118 	.word	0x20005118
 800a870:	20004c84 	.word	0x20004c84
 800a874:	2000516c 	.word	0x2000516c

0800a878 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a882:	4b28      	ldr	r3, [pc, #160]	; (800a924 <vTaskRemoveFromUnorderedEventList+0xac>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d109      	bne.n	800a89e <vTaskRemoveFromUnorderedEventList+0x26>
 800a88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	613b      	str	r3, [r7, #16]
 800a89c:	e7fe      	b.n	800a89c <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d109      	bne.n	800a8c8 <vTaskRemoveFromUnorderedEventList+0x50>
 800a8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b8:	f383 8811 	msr	BASEPRI, r3
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	60fb      	str	r3, [r7, #12]
 800a8c6:	e7fe      	b.n	800a8c6 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f7fe fde9 	bl	80094a0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	3304      	adds	r3, #4
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fe fde4 	bl	80094a0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8dc:	4b12      	ldr	r3, [pc, #72]	; (800a928 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d903      	bls.n	800a8ec <vTaskRemoveFromUnorderedEventList+0x74>
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e8:	4a0f      	ldr	r2, [pc, #60]	; (800a928 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800a8ea:	6013      	str	r3, [r2, #0]
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4a0c      	ldr	r2, [pc, #48]	; (800a92c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a8fa:	441a      	add	r2, r3
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	3304      	adds	r3, #4
 800a900:	4619      	mov	r1, r3
 800a902:	4610      	mov	r0, r2
 800a904:	f7fe fd6f 	bl	80093e6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a90c:	4b08      	ldr	r3, [pc, #32]	; (800a930 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a912:	429a      	cmp	r2, r3
 800a914:	d902      	bls.n	800a91c <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a916:	4b07      	ldr	r3, [pc, #28]	; (800a934 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a918:	2201      	movs	r2, #1
 800a91a:	601a      	str	r2, [r3, #0]
	}
}
 800a91c:	bf00      	nop
 800a91e:	3718      	adds	r7, #24
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	20005180 	.word	0x20005180
 800a928:	20005160 	.word	0x20005160
 800a92c:	20004c88 	.word	0x20004c88
 800a930:	20004c84 	.word	0x20004c84
 800a934:	2000516c 	.word	0x2000516c

0800a938 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a940:	4b06      	ldr	r3, [pc, #24]	; (800a95c <vTaskInternalSetTimeOutState+0x24>)
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a948:	4b05      	ldr	r3, [pc, #20]	; (800a960 <vTaskInternalSetTimeOutState+0x28>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	605a      	str	r2, [r3, #4]
}
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	20005170 	.word	0x20005170
 800a960:	2000515c 	.word	0x2000515c

0800a964 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b088      	sub	sp, #32
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d109      	bne.n	800a988 <xTaskCheckForTimeOut+0x24>
 800a974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a978:	f383 8811 	msr	BASEPRI, r3
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	613b      	str	r3, [r7, #16]
 800a986:	e7fe      	b.n	800a986 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d109      	bne.n	800a9a2 <xTaskCheckForTimeOut+0x3e>
 800a98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	60fb      	str	r3, [r7, #12]
 800a9a0:	e7fe      	b.n	800a9a0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a9a2:	f000 fea3 	bl	800b6ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a9a6:	4b1d      	ldr	r3, [pc, #116]	; (800aa1c <xTaskCheckForTimeOut+0xb8>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	69ba      	ldr	r2, [r7, #24]
 800a9b2:	1ad3      	subs	r3, r2, r3
 800a9b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9be:	d102      	bne.n	800a9c6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	61fb      	str	r3, [r7, #28]
 800a9c4:	e023      	b.n	800aa0e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	4b15      	ldr	r3, [pc, #84]	; (800aa20 <xTaskCheckForTimeOut+0xbc>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d007      	beq.n	800a9e2 <xTaskCheckForTimeOut+0x7e>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	69ba      	ldr	r2, [r7, #24]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d302      	bcc.n	800a9e2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	61fb      	str	r3, [r7, #28]
 800a9e0:	e015      	b.n	800aa0e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d20b      	bcs.n	800aa04 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	1ad2      	subs	r2, r2, r3
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f7ff ff9d 	bl	800a938 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	61fb      	str	r3, [r7, #28]
 800aa02:	e004      	b.n	800aa0e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	2200      	movs	r2, #0
 800aa08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa0e:	f000 fe9b 	bl	800b748 <vPortExitCritical>

	return xReturn;
 800aa12:	69fb      	ldr	r3, [r7, #28]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3720      	adds	r7, #32
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	2000515c 	.word	0x2000515c
 800aa20:	20005170 	.word	0x20005170

0800aa24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa24:	b480      	push	{r7}
 800aa26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa28:	4b03      	ldr	r3, [pc, #12]	; (800aa38 <vTaskMissedYield+0x14>)
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	601a      	str	r2, [r3, #0]
}
 800aa2e:	bf00      	nop
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr
 800aa38:	2000516c 	.word	0x2000516c

0800aa3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa44:	f000 f852 	bl	800aaec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa48:	4b06      	ldr	r3, [pc, #24]	; (800aa64 <prvIdleTask+0x28>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d9f9      	bls.n	800aa44 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa50:	4b05      	ldr	r3, [pc, #20]	; (800aa68 <prvIdleTask+0x2c>)
 800aa52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa56:	601a      	str	r2, [r3, #0]
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa60:	e7f0      	b.n	800aa44 <prvIdleTask+0x8>
 800aa62:	bf00      	nop
 800aa64:	20004c88 	.word	0x20004c88
 800aa68:	e000ed04 	.word	0xe000ed04

0800aa6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa72:	2300      	movs	r3, #0
 800aa74:	607b      	str	r3, [r7, #4]
 800aa76:	e00c      	b.n	800aa92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4413      	add	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4a12      	ldr	r2, [pc, #72]	; (800aacc <prvInitialiseTaskLists+0x60>)
 800aa84:	4413      	add	r3, r2
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7fe fc80 	bl	800938c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	607b      	str	r3, [r7, #4]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2b37      	cmp	r3, #55	; 0x37
 800aa96:	d9ef      	bls.n	800aa78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aa98:	480d      	ldr	r0, [pc, #52]	; (800aad0 <prvInitialiseTaskLists+0x64>)
 800aa9a:	f7fe fc77 	bl	800938c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa9e:	480d      	ldr	r0, [pc, #52]	; (800aad4 <prvInitialiseTaskLists+0x68>)
 800aaa0:	f7fe fc74 	bl	800938c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aaa4:	480c      	ldr	r0, [pc, #48]	; (800aad8 <prvInitialiseTaskLists+0x6c>)
 800aaa6:	f7fe fc71 	bl	800938c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aaaa:	480c      	ldr	r0, [pc, #48]	; (800aadc <prvInitialiseTaskLists+0x70>)
 800aaac:	f7fe fc6e 	bl	800938c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aab0:	480b      	ldr	r0, [pc, #44]	; (800aae0 <prvInitialiseTaskLists+0x74>)
 800aab2:	f7fe fc6b 	bl	800938c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aab6:	4b0b      	ldr	r3, [pc, #44]	; (800aae4 <prvInitialiseTaskLists+0x78>)
 800aab8:	4a05      	ldr	r2, [pc, #20]	; (800aad0 <prvInitialiseTaskLists+0x64>)
 800aaba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aabc:	4b0a      	ldr	r3, [pc, #40]	; (800aae8 <prvInitialiseTaskLists+0x7c>)
 800aabe:	4a05      	ldr	r2, [pc, #20]	; (800aad4 <prvInitialiseTaskLists+0x68>)
 800aac0:	601a      	str	r2, [r3, #0]
}
 800aac2:	bf00      	nop
 800aac4:	3708      	adds	r7, #8
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	20004c88 	.word	0x20004c88
 800aad0:	200050e8 	.word	0x200050e8
 800aad4:	200050fc 	.word	0x200050fc
 800aad8:	20005118 	.word	0x20005118
 800aadc:	2000512c 	.word	0x2000512c
 800aae0:	20005144 	.word	0x20005144
 800aae4:	20005110 	.word	0x20005110
 800aae8:	20005114 	.word	0x20005114

0800aaec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aaf2:	e019      	b.n	800ab28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aaf4:	f000 fdfa 	bl	800b6ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaf8:	4b0f      	ldr	r3, [pc, #60]	; (800ab38 <prvCheckTasksWaitingTermination+0x4c>)
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	3304      	adds	r3, #4
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fe fccb 	bl	80094a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab0a:	4b0c      	ldr	r3, [pc, #48]	; (800ab3c <prvCheckTasksWaitingTermination+0x50>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	4a0a      	ldr	r2, [pc, #40]	; (800ab3c <prvCheckTasksWaitingTermination+0x50>)
 800ab12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab14:	4b0a      	ldr	r3, [pc, #40]	; (800ab40 <prvCheckTasksWaitingTermination+0x54>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	4a09      	ldr	r2, [pc, #36]	; (800ab40 <prvCheckTasksWaitingTermination+0x54>)
 800ab1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab1e:	f000 fe13 	bl	800b748 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 f80e 	bl	800ab44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab28:	4b05      	ldr	r3, [pc, #20]	; (800ab40 <prvCheckTasksWaitingTermination+0x54>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d1e1      	bne.n	800aaf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	2000512c 	.word	0x2000512c
 800ab3c:	20005158 	.word	0x20005158
 800ab40:	20005140 	.word	0x20005140

0800ab44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d108      	bne.n	800ab68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f000 ffa2 	bl	800baa4 <vPortFree>
				vPortFree( pxTCB );
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 ff9f 	bl	800baa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab66:	e017      	b.n	800ab98 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d103      	bne.n	800ab7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 ff96 	bl	800baa4 <vPortFree>
	}
 800ab78:	e00e      	b.n	800ab98 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d009      	beq.n	800ab98 <prvDeleteTCB+0x54>
 800ab84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab88:	f383 8811 	msr	BASEPRI, r3
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	60fb      	str	r3, [r7, #12]
 800ab96:	e7fe      	b.n	800ab96 <prvDeleteTCB+0x52>
	}
 800ab98:	bf00      	nop
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aba6:	4b0c      	ldr	r3, [pc, #48]	; (800abd8 <prvResetNextTaskUnblockTime+0x38>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d104      	bne.n	800abba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800abb0:	4b0a      	ldr	r3, [pc, #40]	; (800abdc <prvResetNextTaskUnblockTime+0x3c>)
 800abb2:	f04f 32ff 	mov.w	r2, #4294967295
 800abb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800abb8:	e008      	b.n	800abcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abba:	4b07      	ldr	r3, [pc, #28]	; (800abd8 <prvResetNextTaskUnblockTime+0x38>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	4a04      	ldr	r2, [pc, #16]	; (800abdc <prvResetNextTaskUnblockTime+0x3c>)
 800abca:	6013      	str	r3, [r2, #0]
}
 800abcc:	bf00      	nop
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr
 800abd8:	20005110 	.word	0x20005110
 800abdc:	20005178 	.word	0x20005178

0800abe0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800abe6:	4b0b      	ldr	r3, [pc, #44]	; (800ac14 <xTaskGetSchedulerState+0x34>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d102      	bne.n	800abf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800abee:	2301      	movs	r3, #1
 800abf0:	607b      	str	r3, [r7, #4]
 800abf2:	e008      	b.n	800ac06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abf4:	4b08      	ldr	r3, [pc, #32]	; (800ac18 <xTaskGetSchedulerState+0x38>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d102      	bne.n	800ac02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800abfc:	2302      	movs	r3, #2
 800abfe:	607b      	str	r3, [r7, #4]
 800ac00:	e001      	b.n	800ac06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac02:	2300      	movs	r3, #0
 800ac04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac06:	687b      	ldr	r3, [r7, #4]
	}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr
 800ac14:	20005164 	.word	0x20005164
 800ac18:	20005180 	.word	0x20005180

0800ac1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b086      	sub	sp, #24
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d054      	beq.n	800acdc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac32:	4b2d      	ldr	r3, [pc, #180]	; (800ace8 <xTaskPriorityDisinherit+0xcc>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d009      	beq.n	800ac50 <xTaskPriorityDisinherit+0x34>
 800ac3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	60fb      	str	r3, [r7, #12]
 800ac4e:	e7fe      	b.n	800ac4e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d109      	bne.n	800ac6c <xTaskPriorityDisinherit+0x50>
 800ac58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5c:	f383 8811 	msr	BASEPRI, r3
 800ac60:	f3bf 8f6f 	isb	sy
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	60bb      	str	r3, [r7, #8]
 800ac6a:	e7fe      	b.n	800ac6a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac70:	1e5a      	subs	r2, r3, #1
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d02c      	beq.n	800acdc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d128      	bne.n	800acdc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fe fc06 	bl	80094a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acac:	4b0f      	ldr	r3, [pc, #60]	; (800acec <xTaskPriorityDisinherit+0xd0>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d903      	bls.n	800acbc <xTaskPriorityDisinherit+0xa0>
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb8:	4a0c      	ldr	r2, [pc, #48]	; (800acec <xTaskPriorityDisinherit+0xd0>)
 800acba:	6013      	str	r3, [r2, #0]
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc0:	4613      	mov	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	4413      	add	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4a09      	ldr	r2, [pc, #36]	; (800acf0 <xTaskPriorityDisinherit+0xd4>)
 800acca:	441a      	add	r2, r3
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	3304      	adds	r3, #4
 800acd0:	4619      	mov	r1, r3
 800acd2:	4610      	mov	r0, r2
 800acd4:	f7fe fb87 	bl	80093e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800acd8:	2301      	movs	r3, #1
 800acda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800acdc:	697b      	ldr	r3, [r7, #20]
	}
 800acde:	4618      	mov	r0, r3
 800ace0:	3718      	adds	r7, #24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	20004c84 	.word	0x20004c84
 800acec:	20005160 	.word	0x20005160
 800acf0:	20004c88 	.word	0x20004c88

0800acf4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800acfa:	4b09      	ldr	r3, [pc, #36]	; (800ad20 <uxTaskResetEventItemValue+0x2c>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	699b      	ldr	r3, [r3, #24]
 800ad00:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad02:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <uxTaskResetEventItemValue+0x2c>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad08:	4b05      	ldr	r3, [pc, #20]	; (800ad20 <uxTaskResetEventItemValue+0x2c>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ad10:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ad12:	687b      	ldr	r3, [r7, #4]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	20004c84 	.word	0x20004c84

0800ad24 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad2e:	4b21      	ldr	r3, [pc, #132]	; (800adb4 <prvAddCurrentTaskToDelayedList+0x90>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad34:	4b20      	ldr	r3, [pc, #128]	; (800adb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	3304      	adds	r3, #4
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fe fbb0 	bl	80094a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad46:	d10a      	bne.n	800ad5e <prvAddCurrentTaskToDelayedList+0x3a>
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d007      	beq.n	800ad5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad4e:	4b1a      	ldr	r3, [pc, #104]	; (800adb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	3304      	adds	r3, #4
 800ad54:	4619      	mov	r1, r3
 800ad56:	4819      	ldr	r0, [pc, #100]	; (800adbc <prvAddCurrentTaskToDelayedList+0x98>)
 800ad58:	f7fe fb45 	bl	80093e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad5c:	e026      	b.n	800adac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4413      	add	r3, r2
 800ad64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad66:	4b14      	ldr	r3, [pc, #80]	; (800adb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d209      	bcs.n	800ad8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad76:	4b12      	ldr	r3, [pc, #72]	; (800adc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	4b0f      	ldr	r3, [pc, #60]	; (800adb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	3304      	adds	r3, #4
 800ad80:	4619      	mov	r1, r3
 800ad82:	4610      	mov	r0, r2
 800ad84:	f7fe fb53 	bl	800942e <vListInsert>
}
 800ad88:	e010      	b.n	800adac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad8a:	4b0e      	ldr	r3, [pc, #56]	; (800adc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	4b0a      	ldr	r3, [pc, #40]	; (800adb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	3304      	adds	r3, #4
 800ad94:	4619      	mov	r1, r3
 800ad96:	4610      	mov	r0, r2
 800ad98:	f7fe fb49 	bl	800942e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad9c:	4b0a      	ldr	r3, [pc, #40]	; (800adc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d202      	bcs.n	800adac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ada6:	4a08      	ldr	r2, [pc, #32]	; (800adc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	6013      	str	r3, [r2, #0]
}
 800adac:	bf00      	nop
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	2000515c 	.word	0x2000515c
 800adb8:	20004c84 	.word	0x20004c84
 800adbc:	20005144 	.word	0x20005144
 800adc0:	20005114 	.word	0x20005114
 800adc4:	20005110 	.word	0x20005110
 800adc8:	20005178 	.word	0x20005178

0800adcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b08a      	sub	sp, #40	; 0x28
 800add0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800add2:	2300      	movs	r3, #0
 800add4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800add6:	f000 faff 	bl	800b3d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800adda:	4b1c      	ldr	r3, [pc, #112]	; (800ae4c <xTimerCreateTimerTask+0x80>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d021      	beq.n	800ae26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ade2:	2300      	movs	r3, #0
 800ade4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800adea:	1d3a      	adds	r2, r7, #4
 800adec:	f107 0108 	add.w	r1, r7, #8
 800adf0:	f107 030c 	add.w	r3, r7, #12
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fe f84f 	bl	8008e98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800adfa:	6879      	ldr	r1, [r7, #4]
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	9202      	str	r2, [sp, #8]
 800ae02:	9301      	str	r3, [sp, #4]
 800ae04:	2302      	movs	r3, #2
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	2300      	movs	r3, #0
 800ae0a:	460a      	mov	r2, r1
 800ae0c:	4910      	ldr	r1, [pc, #64]	; (800ae50 <xTimerCreateTimerTask+0x84>)
 800ae0e:	4811      	ldr	r0, [pc, #68]	; (800ae54 <xTimerCreateTimerTask+0x88>)
 800ae10:	f7ff f844 	bl	8009e9c <xTaskCreateStatic>
 800ae14:	4602      	mov	r2, r0
 800ae16:	4b10      	ldr	r3, [pc, #64]	; (800ae58 <xTimerCreateTimerTask+0x8c>)
 800ae18:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae1a:	4b0f      	ldr	r3, [pc, #60]	; (800ae58 <xTimerCreateTimerTask+0x8c>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae22:	2301      	movs	r3, #1
 800ae24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d109      	bne.n	800ae40 <xTimerCreateTimerTask+0x74>
 800ae2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae30:	f383 8811 	msr	BASEPRI, r3
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	613b      	str	r3, [r7, #16]
 800ae3e:	e7fe      	b.n	800ae3e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800ae40:	697b      	ldr	r3, [r7, #20]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3718      	adds	r7, #24
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	200051b4 	.word	0x200051b4
 800ae50:	08011398 	.word	0x08011398
 800ae54:	0800af8d 	.word	0x0800af8d
 800ae58:	200051b8 	.word	0x200051b8

0800ae5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b08a      	sub	sp, #40	; 0x28
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
 800ae68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d109      	bne.n	800ae88 <xTimerGenericCommand+0x2c>
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	623b      	str	r3, [r7, #32]
 800ae86:	e7fe      	b.n	800ae86 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae88:	4b19      	ldr	r3, [pc, #100]	; (800aef0 <xTimerGenericCommand+0x94>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d02a      	beq.n	800aee6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	2b05      	cmp	r3, #5
 800aea0:	dc18      	bgt.n	800aed4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aea2:	f7ff fe9d 	bl	800abe0 <xTaskGetSchedulerState>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d109      	bne.n	800aec0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aeac:	4b10      	ldr	r3, [pc, #64]	; (800aef0 <xTimerGenericCommand+0x94>)
 800aeae:	6818      	ldr	r0, [r3, #0]
 800aeb0:	f107 0110 	add.w	r1, r7, #16
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeb8:	f7fe fc1a 	bl	80096f0 <xQueueGenericSend>
 800aebc:	6278      	str	r0, [r7, #36]	; 0x24
 800aebe:	e012      	b.n	800aee6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aec0:	4b0b      	ldr	r3, [pc, #44]	; (800aef0 <xTimerGenericCommand+0x94>)
 800aec2:	6818      	ldr	r0, [r3, #0]
 800aec4:	f107 0110 	add.w	r1, r7, #16
 800aec8:	2300      	movs	r3, #0
 800aeca:	2200      	movs	r2, #0
 800aecc:	f7fe fc10 	bl	80096f0 <xQueueGenericSend>
 800aed0:	6278      	str	r0, [r7, #36]	; 0x24
 800aed2:	e008      	b.n	800aee6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aed4:	4b06      	ldr	r3, [pc, #24]	; (800aef0 <xTimerGenericCommand+0x94>)
 800aed6:	6818      	ldr	r0, [r3, #0]
 800aed8:	f107 0110 	add.w	r1, r7, #16
 800aedc:	2300      	movs	r3, #0
 800aede:	683a      	ldr	r2, [r7, #0]
 800aee0:	f7fe fd00 	bl	80098e4 <xQueueGenericSendFromISR>
 800aee4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3728      	adds	r7, #40	; 0x28
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	200051b4 	.word	0x200051b4

0800aef4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b088      	sub	sp, #32
 800aef8:	af02      	add	r7, sp, #8
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aefe:	4b22      	ldr	r3, [pc, #136]	; (800af88 <prvProcessExpiredTimer+0x94>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	3304      	adds	r3, #4
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7fe fac7 	bl	80094a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af18:	f003 0304 	and.w	r3, r3, #4
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d021      	beq.n	800af64 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	699a      	ldr	r2, [r3, #24]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	18d1      	adds	r1, r2, r3
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	6978      	ldr	r0, [r7, #20]
 800af2e:	f000 f8d1 	bl	800b0d4 <prvInsertTimerInActiveList>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d01e      	beq.n	800af76 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af38:	2300      	movs	r3, #0
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	2300      	movs	r3, #0
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	2100      	movs	r1, #0
 800af42:	6978      	ldr	r0, [r7, #20]
 800af44:	f7ff ff8a 	bl	800ae5c <xTimerGenericCommand>
 800af48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d112      	bne.n	800af76 <prvProcessExpiredTimer+0x82>
 800af50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af54:	f383 8811 	msr	BASEPRI, r3
 800af58:	f3bf 8f6f 	isb	sy
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	60fb      	str	r3, [r7, #12]
 800af62:	e7fe      	b.n	800af62 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af6a:	f023 0301 	bic.w	r3, r3, #1
 800af6e:	b2da      	uxtb	r2, r3
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	6978      	ldr	r0, [r7, #20]
 800af7c:	4798      	blx	r3
}
 800af7e:	bf00      	nop
 800af80:	3718      	adds	r7, #24
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	200051ac 	.word	0x200051ac

0800af8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af94:	f107 0308 	add.w	r3, r7, #8
 800af98:	4618      	mov	r0, r3
 800af9a:	f000 f857 	bl	800b04c <prvGetNextExpireTime>
 800af9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	4619      	mov	r1, r3
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f000 f803 	bl	800afb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800afaa:	f000 f8d5 	bl	800b158 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afae:	e7f1      	b.n	800af94 <prvTimerTask+0x8>

0800afb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800afba:	f7ff f9a5 	bl	800a308 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afbe:	f107 0308 	add.w	r3, r7, #8
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 f866 	bl	800b094 <prvSampleTimeNow>
 800afc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d130      	bne.n	800b032 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d10a      	bne.n	800afec <prvProcessTimerOrBlockTask+0x3c>
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d806      	bhi.n	800afec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800afde:	f7ff f9a1 	bl	800a324 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800afe2:	68f9      	ldr	r1, [r7, #12]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7ff ff85 	bl	800aef4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800afea:	e024      	b.n	800b036 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d008      	beq.n	800b004 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aff2:	4b13      	ldr	r3, [pc, #76]	; (800b040 <prvProcessTimerOrBlockTask+0x90>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <prvProcessTimerOrBlockTask+0x50>
 800affc:	2301      	movs	r3, #1
 800affe:	e000      	b.n	800b002 <prvProcessTimerOrBlockTask+0x52>
 800b000:	2300      	movs	r3, #0
 800b002:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b004:	4b0f      	ldr	r3, [pc, #60]	; (800b044 <prvProcessTimerOrBlockTask+0x94>)
 800b006:	6818      	ldr	r0, [r3, #0]
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	4619      	mov	r1, r3
 800b012:	f7fe ff0f 	bl	8009e34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b016:	f7ff f985 	bl	800a324 <xTaskResumeAll>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10a      	bne.n	800b036 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b020:	4b09      	ldr	r3, [pc, #36]	; (800b048 <prvProcessTimerOrBlockTask+0x98>)
 800b022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b026:	601a      	str	r2, [r3, #0]
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	f3bf 8f6f 	isb	sy
}
 800b030:	e001      	b.n	800b036 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b032:	f7ff f977 	bl	800a324 <xTaskResumeAll>
}
 800b036:	bf00      	nop
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	200051b0 	.word	0x200051b0
 800b044:	200051b4 	.word	0x200051b4
 800b048:	e000ed04 	.word	0xe000ed04

0800b04c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b04c:	b480      	push	{r7}
 800b04e:	b085      	sub	sp, #20
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b054:	4b0e      	ldr	r3, [pc, #56]	; (800b090 <prvGetNextExpireTime+0x44>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <prvGetNextExpireTime+0x16>
 800b05e:	2201      	movs	r2, #1
 800b060:	e000      	b.n	800b064 <prvGetNextExpireTime+0x18>
 800b062:	2200      	movs	r2, #0
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d105      	bne.n	800b07c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b070:	4b07      	ldr	r3, [pc, #28]	; (800b090 <prvGetNextExpireTime+0x44>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	60fb      	str	r3, [r7, #12]
 800b07a:	e001      	b.n	800b080 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b07c:	2300      	movs	r3, #0
 800b07e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b080:	68fb      	ldr	r3, [r7, #12]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	200051ac 	.word	0x200051ac

0800b094 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b09c:	f7ff f9de 	bl	800a45c <xTaskGetTickCount>
 800b0a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b0a2:	4b0b      	ldr	r3, [pc, #44]	; (800b0d0 <prvSampleTimeNow+0x3c>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d205      	bcs.n	800b0b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b0ac:	f000 f930 	bl	800b310 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	601a      	str	r2, [r3, #0]
 800b0b6:	e002      	b.n	800b0be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b0be:	4a04      	ldr	r2, [pc, #16]	; (800b0d0 <prvSampleTimeNow+0x3c>)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	200051bc 	.word	0x200051bc

0800b0d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
 800b0e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	68ba      	ldr	r2, [r7, #8]
 800b0ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b0f2:	68ba      	ldr	r2, [r7, #8]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d812      	bhi.n	800b120 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	1ad2      	subs	r2, r2, r3
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	429a      	cmp	r2, r3
 800b106:	d302      	bcc.n	800b10e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b108:	2301      	movs	r3, #1
 800b10a:	617b      	str	r3, [r7, #20]
 800b10c:	e01b      	b.n	800b146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b10e:	4b10      	ldr	r3, [pc, #64]	; (800b150 <prvInsertTimerInActiveList+0x7c>)
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	3304      	adds	r3, #4
 800b116:	4619      	mov	r1, r3
 800b118:	4610      	mov	r0, r2
 800b11a:	f7fe f988 	bl	800942e <vListInsert>
 800b11e:	e012      	b.n	800b146 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	429a      	cmp	r2, r3
 800b126:	d206      	bcs.n	800b136 <prvInsertTimerInActiveList+0x62>
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d302      	bcc.n	800b136 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b130:	2301      	movs	r3, #1
 800b132:	617b      	str	r3, [r7, #20]
 800b134:	e007      	b.n	800b146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b136:	4b07      	ldr	r3, [pc, #28]	; (800b154 <prvInsertTimerInActiveList+0x80>)
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	3304      	adds	r3, #4
 800b13e:	4619      	mov	r1, r3
 800b140:	4610      	mov	r0, r2
 800b142:	f7fe f974 	bl	800942e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b146:	697b      	ldr	r3, [r7, #20]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	200051b0 	.word	0x200051b0
 800b154:	200051ac 	.word	0x200051ac

0800b158 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b08e      	sub	sp, #56	; 0x38
 800b15c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b15e:	e0c6      	b.n	800b2ee <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	da17      	bge.n	800b196 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b166:	1d3b      	adds	r3, r7, #4
 800b168:	3304      	adds	r3, #4
 800b16a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d109      	bne.n	800b186 <prvProcessReceivedCommands+0x2e>
 800b172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	61fb      	str	r3, [r7, #28]
 800b184:	e7fe      	b.n	800b184 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b18c:	6850      	ldr	r0, [r2, #4]
 800b18e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b190:	6892      	ldr	r2, [r2, #8]
 800b192:	4611      	mov	r1, r2
 800b194:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f2c0 80a7 	blt.w	800b2ec <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a4:	695b      	ldr	r3, [r3, #20]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d004      	beq.n	800b1b4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fe f976 	bl	80094a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1b4:	463b      	mov	r3, r7
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7ff ff6c 	bl	800b094 <prvSampleTimeNow>
 800b1bc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2b09      	cmp	r3, #9
 800b1c2:	f200 8094 	bhi.w	800b2ee <prvProcessReceivedCommands+0x196>
 800b1c6:	a201      	add	r2, pc, #4	; (adr r2, 800b1cc <prvProcessReceivedCommands+0x74>)
 800b1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1cc:	0800b1f5 	.word	0x0800b1f5
 800b1d0:	0800b1f5 	.word	0x0800b1f5
 800b1d4:	0800b1f5 	.word	0x0800b1f5
 800b1d8:	0800b267 	.word	0x0800b267
 800b1dc:	0800b27b 	.word	0x0800b27b
 800b1e0:	0800b2c3 	.word	0x0800b2c3
 800b1e4:	0800b1f5 	.word	0x0800b1f5
 800b1e8:	0800b1f5 	.word	0x0800b1f5
 800b1ec:	0800b267 	.word	0x0800b267
 800b1f0:	0800b27b 	.word	0x0800b27b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1fa:	f043 0301 	orr.w	r3, r3, #1
 800b1fe:	b2da      	uxtb	r2, r3
 800b200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b202:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b206:	68ba      	ldr	r2, [r7, #8]
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	699b      	ldr	r3, [r3, #24]
 800b20c:	18d1      	adds	r1, r2, r3
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b214:	f7ff ff5e 	bl	800b0d4 <prvInsertTimerInActiveList>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d067      	beq.n	800b2ee <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b220:	6a1b      	ldr	r3, [r3, #32]
 800b222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b224:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b22c:	f003 0304 	and.w	r3, r3, #4
 800b230:	2b00      	cmp	r3, #0
 800b232:	d05c      	beq.n	800b2ee <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b238:	699b      	ldr	r3, [r3, #24]
 800b23a:	441a      	add	r2, r3
 800b23c:	2300      	movs	r3, #0
 800b23e:	9300      	str	r3, [sp, #0]
 800b240:	2300      	movs	r3, #0
 800b242:	2100      	movs	r1, #0
 800b244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b246:	f7ff fe09 	bl	800ae5c <xTimerGenericCommand>
 800b24a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d14d      	bne.n	800b2ee <prvProcessReceivedCommands+0x196>
 800b252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b256:	f383 8811 	msr	BASEPRI, r3
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	61bb      	str	r3, [r7, #24]
 800b264:	e7fe      	b.n	800b264 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b26c:	f023 0301 	bic.w	r3, r3, #1
 800b270:	b2da      	uxtb	r2, r3
 800b272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b274:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b278:	e039      	b.n	800b2ee <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b280:	f043 0301 	orr.w	r3, r3, #1
 800b284:	b2da      	uxtb	r2, r3
 800b286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b288:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b290:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b294:	699b      	ldr	r3, [r3, #24]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d109      	bne.n	800b2ae <prvProcessReceivedCommands+0x156>
 800b29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	617b      	str	r3, [r7, #20]
 800b2ac:	e7fe      	b.n	800b2ac <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b0:	699a      	ldr	r2, [r3, #24]
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b4:	18d1      	adds	r1, r2, r3
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2bc:	f7ff ff0a 	bl	800b0d4 <prvInsertTimerInActiveList>
					break;
 800b2c0:	e015      	b.n	800b2ee <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2c8:	f003 0302 	and.w	r3, r3, #2
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d103      	bne.n	800b2d8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800b2d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2d2:	f000 fbe7 	bl	800baa4 <vPortFree>
 800b2d6:	e00a      	b.n	800b2ee <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2de:	f023 0301 	bic.w	r3, r3, #1
 800b2e2:	b2da      	uxtb	r2, r3
 800b2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b2ea:	e000      	b.n	800b2ee <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b2ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2ee:	4b07      	ldr	r3, [pc, #28]	; (800b30c <prvProcessReceivedCommands+0x1b4>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	1d39      	adds	r1, r7, #4
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7fe fb88 	bl	8009a0c <xQueueReceive>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f47f af2e 	bne.w	800b160 <prvProcessReceivedCommands+0x8>
	}
}
 800b304:	bf00      	nop
 800b306:	3730      	adds	r7, #48	; 0x30
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	200051b4 	.word	0x200051b4

0800b310 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b088      	sub	sp, #32
 800b314:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b316:	e047      	b.n	800b3a8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b318:	4b2d      	ldr	r3, [pc, #180]	; (800b3d0 <prvSwitchTimerLists+0xc0>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b322:	4b2b      	ldr	r3, [pc, #172]	; (800b3d0 <prvSwitchTimerLists+0xc0>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	3304      	adds	r3, #4
 800b330:	4618      	mov	r0, r3
 800b332:	f7fe f8b5 	bl	80094a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b344:	f003 0304 	and.w	r3, r3, #4
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d02d      	beq.n	800b3a8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	699b      	ldr	r3, [r3, #24]
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	4413      	add	r3, r2
 800b354:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d90e      	bls.n	800b37c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b36a:	4b19      	ldr	r3, [pc, #100]	; (800b3d0 <prvSwitchTimerLists+0xc0>)
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	3304      	adds	r3, #4
 800b372:	4619      	mov	r1, r3
 800b374:	4610      	mov	r0, r2
 800b376:	f7fe f85a 	bl	800942e <vListInsert>
 800b37a:	e015      	b.n	800b3a8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b37c:	2300      	movs	r3, #0
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	2300      	movs	r3, #0
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	2100      	movs	r1, #0
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f7ff fd68 	bl	800ae5c <xTimerGenericCommand>
 800b38c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d109      	bne.n	800b3a8 <prvSwitchTimerLists+0x98>
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	603b      	str	r3, [r7, #0]
 800b3a6:	e7fe      	b.n	800b3a6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3a8:	4b09      	ldr	r3, [pc, #36]	; (800b3d0 <prvSwitchTimerLists+0xc0>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1b2      	bne.n	800b318 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3b2:	4b07      	ldr	r3, [pc, #28]	; (800b3d0 <prvSwitchTimerLists+0xc0>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3b8:	4b06      	ldr	r3, [pc, #24]	; (800b3d4 <prvSwitchTimerLists+0xc4>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a04      	ldr	r2, [pc, #16]	; (800b3d0 <prvSwitchTimerLists+0xc0>)
 800b3be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3c0:	4a04      	ldr	r2, [pc, #16]	; (800b3d4 <prvSwitchTimerLists+0xc4>)
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	6013      	str	r3, [r2, #0]
}
 800b3c6:	bf00      	nop
 800b3c8:	3718      	adds	r7, #24
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	200051ac 	.word	0x200051ac
 800b3d4:	200051b0 	.word	0x200051b0

0800b3d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b3de:	f000 f985 	bl	800b6ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b3e2:	4b15      	ldr	r3, [pc, #84]	; (800b438 <prvCheckForValidListAndQueue+0x60>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d120      	bne.n	800b42c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b3ea:	4814      	ldr	r0, [pc, #80]	; (800b43c <prvCheckForValidListAndQueue+0x64>)
 800b3ec:	f7fd ffce 	bl	800938c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b3f0:	4813      	ldr	r0, [pc, #76]	; (800b440 <prvCheckForValidListAndQueue+0x68>)
 800b3f2:	f7fd ffcb 	bl	800938c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b3f6:	4b13      	ldr	r3, [pc, #76]	; (800b444 <prvCheckForValidListAndQueue+0x6c>)
 800b3f8:	4a10      	ldr	r2, [pc, #64]	; (800b43c <prvCheckForValidListAndQueue+0x64>)
 800b3fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b3fc:	4b12      	ldr	r3, [pc, #72]	; (800b448 <prvCheckForValidListAndQueue+0x70>)
 800b3fe:	4a10      	ldr	r2, [pc, #64]	; (800b440 <prvCheckForValidListAndQueue+0x68>)
 800b400:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b402:	2300      	movs	r3, #0
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	4b11      	ldr	r3, [pc, #68]	; (800b44c <prvCheckForValidListAndQueue+0x74>)
 800b408:	4a11      	ldr	r2, [pc, #68]	; (800b450 <prvCheckForValidListAndQueue+0x78>)
 800b40a:	2110      	movs	r1, #16
 800b40c:	200a      	movs	r0, #10
 800b40e:	f7fe f8d9 	bl	80095c4 <xQueueGenericCreateStatic>
 800b412:	4602      	mov	r2, r0
 800b414:	4b08      	ldr	r3, [pc, #32]	; (800b438 <prvCheckForValidListAndQueue+0x60>)
 800b416:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b418:	4b07      	ldr	r3, [pc, #28]	; (800b438 <prvCheckForValidListAndQueue+0x60>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d005      	beq.n	800b42c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b420:	4b05      	ldr	r3, [pc, #20]	; (800b438 <prvCheckForValidListAndQueue+0x60>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	490b      	ldr	r1, [pc, #44]	; (800b454 <prvCheckForValidListAndQueue+0x7c>)
 800b426:	4618      	mov	r0, r3
 800b428:	f7fe fcdc 	bl	8009de4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b42c:	f000 f98c 	bl	800b748 <vPortExitCritical>
}
 800b430:	bf00      	nop
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	200051b4 	.word	0x200051b4
 800b43c:	20005184 	.word	0x20005184
 800b440:	20005198 	.word	0x20005198
 800b444:	200051ac 	.word	0x200051ac
 800b448:	200051b0 	.word	0x200051b0
 800b44c:	20005260 	.word	0x20005260
 800b450:	200051c0 	.word	0x200051c0
 800b454:	080113a0 	.word	0x080113a0

0800b458 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b08a      	sub	sp, #40	; 0x28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
 800b464:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800b466:	f06f 0301 	mvn.w	r3, #1
 800b46a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b478:	4b06      	ldr	r3, [pc, #24]	; (800b494 <xTimerPendFunctionCallFromISR+0x3c>)
 800b47a:	6818      	ldr	r0, [r3, #0]
 800b47c:	f107 0114 	add.w	r1, r7, #20
 800b480:	2300      	movs	r3, #0
 800b482:	683a      	ldr	r2, [r7, #0]
 800b484:	f7fe fa2e 	bl	80098e4 <xQueueGenericSendFromISR>
 800b488:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3728      	adds	r7, #40	; 0x28
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	200051b4 	.word	0x200051b4

0800b498 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	3b04      	subs	r3, #4
 800b4a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b4b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	3b04      	subs	r3, #4
 800b4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	f023 0201 	bic.w	r2, r3, #1
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	3b04      	subs	r3, #4
 800b4c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4c8:	4a0c      	ldr	r2, [pc, #48]	; (800b4fc <pxPortInitialiseStack+0x64>)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3b14      	subs	r3, #20
 800b4d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	3b04      	subs	r3, #4
 800b4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f06f 0202 	mvn.w	r2, #2
 800b4e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	3b20      	subs	r3, #32
 800b4ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3714      	adds	r7, #20
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	0800b501 	.word	0x0800b501

0800b500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b506:	2300      	movs	r3, #0
 800b508:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b50a:	4b11      	ldr	r3, [pc, #68]	; (800b550 <prvTaskExitError+0x50>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b512:	d009      	beq.n	800b528 <prvTaskExitError+0x28>
 800b514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b518:	f383 8811 	msr	BASEPRI, r3
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	60fb      	str	r3, [r7, #12]
 800b526:	e7fe      	b.n	800b526 <prvTaskExitError+0x26>
 800b528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52c:	f383 8811 	msr	BASEPRI, r3
 800b530:	f3bf 8f6f 	isb	sy
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b53a:	bf00      	nop
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d0fc      	beq.n	800b53c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b542:	bf00      	nop
 800b544:	3714      	adds	r7, #20
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	200012fc 	.word	0x200012fc
	...

0800b560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b560:	4b07      	ldr	r3, [pc, #28]	; (800b580 <pxCurrentTCBConst2>)
 800b562:	6819      	ldr	r1, [r3, #0]
 800b564:	6808      	ldr	r0, [r1, #0]
 800b566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56a:	f380 8809 	msr	PSP, r0
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f04f 0000 	mov.w	r0, #0
 800b576:	f380 8811 	msr	BASEPRI, r0
 800b57a:	4770      	bx	lr
 800b57c:	f3af 8000 	nop.w

0800b580 <pxCurrentTCBConst2>:
 800b580:	20004c84 	.word	0x20004c84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b584:	bf00      	nop
 800b586:	bf00      	nop

0800b588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b588:	4808      	ldr	r0, [pc, #32]	; (800b5ac <prvPortStartFirstTask+0x24>)
 800b58a:	6800      	ldr	r0, [r0, #0]
 800b58c:	6800      	ldr	r0, [r0, #0]
 800b58e:	f380 8808 	msr	MSP, r0
 800b592:	f04f 0000 	mov.w	r0, #0
 800b596:	f380 8814 	msr	CONTROL, r0
 800b59a:	b662      	cpsie	i
 800b59c:	b661      	cpsie	f
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	df00      	svc	0
 800b5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5aa:	bf00      	nop
 800b5ac:	e000ed08 	.word	0xe000ed08

0800b5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5b6:	4b44      	ldr	r3, [pc, #272]	; (800b6c8 <xPortStartScheduler+0x118>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a44      	ldr	r2, [pc, #272]	; (800b6cc <xPortStartScheduler+0x11c>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d109      	bne.n	800b5d4 <xPortStartScheduler+0x24>
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	613b      	str	r3, [r7, #16]
 800b5d2:	e7fe      	b.n	800b5d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5d4:	4b3c      	ldr	r3, [pc, #240]	; (800b6c8 <xPortStartScheduler+0x118>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4a3d      	ldr	r2, [pc, #244]	; (800b6d0 <xPortStartScheduler+0x120>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d109      	bne.n	800b5f2 <xPortStartScheduler+0x42>
 800b5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	60fb      	str	r3, [r7, #12]
 800b5f0:	e7fe      	b.n	800b5f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5f2:	4b38      	ldr	r3, [pc, #224]	; (800b6d4 <xPortStartScheduler+0x124>)
 800b5f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	22ff      	movs	r2, #255	; 0xff
 800b602:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b60c:	78fb      	ldrb	r3, [r7, #3]
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b614:	b2da      	uxtb	r2, r3
 800b616:	4b30      	ldr	r3, [pc, #192]	; (800b6d8 <xPortStartScheduler+0x128>)
 800b618:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b61a:	4b30      	ldr	r3, [pc, #192]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b61c:	2207      	movs	r2, #7
 800b61e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b620:	e009      	b.n	800b636 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b622:	4b2e      	ldr	r3, [pc, #184]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	3b01      	subs	r3, #1
 800b628:	4a2c      	ldr	r2, [pc, #176]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b62a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b62c:	78fb      	ldrb	r3, [r7, #3]
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	005b      	lsls	r3, r3, #1
 800b632:	b2db      	uxtb	r3, r3
 800b634:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b636:	78fb      	ldrb	r3, [r7, #3]
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b63e:	2b80      	cmp	r3, #128	; 0x80
 800b640:	d0ef      	beq.n	800b622 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b642:	4b26      	ldr	r3, [pc, #152]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f1c3 0307 	rsb	r3, r3, #7
 800b64a:	2b04      	cmp	r3, #4
 800b64c:	d009      	beq.n	800b662 <xPortStartScheduler+0xb2>
 800b64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	60bb      	str	r3, [r7, #8]
 800b660:	e7fe      	b.n	800b660 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b662:	4b1e      	ldr	r3, [pc, #120]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	021b      	lsls	r3, r3, #8
 800b668:	4a1c      	ldr	r2, [pc, #112]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b66a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b66c:	4b1b      	ldr	r3, [pc, #108]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b674:	4a19      	ldr	r2, [pc, #100]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b676:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	b2da      	uxtb	r2, r3
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b680:	4b17      	ldr	r3, [pc, #92]	; (800b6e0 <xPortStartScheduler+0x130>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a16      	ldr	r2, [pc, #88]	; (800b6e0 <xPortStartScheduler+0x130>)
 800b686:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b68a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b68c:	4b14      	ldr	r3, [pc, #80]	; (800b6e0 <xPortStartScheduler+0x130>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a13      	ldr	r2, [pc, #76]	; (800b6e0 <xPortStartScheduler+0x130>)
 800b692:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b696:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b698:	f000 f8d6 	bl	800b848 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b69c:	4b11      	ldr	r3, [pc, #68]	; (800b6e4 <xPortStartScheduler+0x134>)
 800b69e:	2200      	movs	r2, #0
 800b6a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b6a2:	f000 f8f5 	bl	800b890 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b6a6:	4b10      	ldr	r3, [pc, #64]	; (800b6e8 <xPortStartScheduler+0x138>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a0f      	ldr	r2, [pc, #60]	; (800b6e8 <xPortStartScheduler+0x138>)
 800b6ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b6b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b6b2:	f7ff ff69 	bl	800b588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b6b6:	f7fe ff99 	bl	800a5ec <vTaskSwitchContext>
	prvTaskExitError();
 800b6ba:	f7ff ff21 	bl	800b500 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	e000ed00 	.word	0xe000ed00
 800b6cc:	410fc271 	.word	0x410fc271
 800b6d0:	410fc270 	.word	0x410fc270
 800b6d4:	e000e400 	.word	0xe000e400
 800b6d8:	200052b0 	.word	0x200052b0
 800b6dc:	200052b4 	.word	0x200052b4
 800b6e0:	e000ed20 	.word	0xe000ed20
 800b6e4:	200012fc 	.word	0x200012fc
 800b6e8:	e000ef34 	.word	0xe000ef34

0800b6ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f6:	f383 8811 	msr	BASEPRI, r3
 800b6fa:	f3bf 8f6f 	isb	sy
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b704:	4b0e      	ldr	r3, [pc, #56]	; (800b740 <vPortEnterCritical+0x54>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	3301      	adds	r3, #1
 800b70a:	4a0d      	ldr	r2, [pc, #52]	; (800b740 <vPortEnterCritical+0x54>)
 800b70c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b70e:	4b0c      	ldr	r3, [pc, #48]	; (800b740 <vPortEnterCritical+0x54>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d10e      	bne.n	800b734 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b716:	4b0b      	ldr	r3, [pc, #44]	; (800b744 <vPortEnterCritical+0x58>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d009      	beq.n	800b734 <vPortEnterCritical+0x48>
 800b720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b724:	f383 8811 	msr	BASEPRI, r3
 800b728:	f3bf 8f6f 	isb	sy
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	603b      	str	r3, [r7, #0]
 800b732:	e7fe      	b.n	800b732 <vPortEnterCritical+0x46>
	}
}
 800b734:	bf00      	nop
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr
 800b740:	200012fc 	.word	0x200012fc
 800b744:	e000ed04 	.word	0xe000ed04

0800b748 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b74e:	4b11      	ldr	r3, [pc, #68]	; (800b794 <vPortExitCritical+0x4c>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d109      	bne.n	800b76a <vPortExitCritical+0x22>
 800b756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75a:	f383 8811 	msr	BASEPRI, r3
 800b75e:	f3bf 8f6f 	isb	sy
 800b762:	f3bf 8f4f 	dsb	sy
 800b766:	607b      	str	r3, [r7, #4]
 800b768:	e7fe      	b.n	800b768 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b76a:	4b0a      	ldr	r3, [pc, #40]	; (800b794 <vPortExitCritical+0x4c>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3b01      	subs	r3, #1
 800b770:	4a08      	ldr	r2, [pc, #32]	; (800b794 <vPortExitCritical+0x4c>)
 800b772:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b774:	4b07      	ldr	r3, [pc, #28]	; (800b794 <vPortExitCritical+0x4c>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d104      	bne.n	800b786 <vPortExitCritical+0x3e>
 800b77c:	2300      	movs	r3, #0
 800b77e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	200012fc 	.word	0x200012fc
	...

0800b7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b7a0:	f3ef 8009 	mrs	r0, PSP
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	4b15      	ldr	r3, [pc, #84]	; (800b800 <pxCurrentTCBConst>)
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	f01e 0f10 	tst.w	lr, #16
 800b7b0:	bf08      	it	eq
 800b7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ba:	6010      	str	r0, [r2, #0]
 800b7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b7c4:	f380 8811 	msr	BASEPRI, r0
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f7fe ff0c 	bl	800a5ec <vTaskSwitchContext>
 800b7d4:	f04f 0000 	mov.w	r0, #0
 800b7d8:	f380 8811 	msr	BASEPRI, r0
 800b7dc:	bc09      	pop	{r0, r3}
 800b7de:	6819      	ldr	r1, [r3, #0]
 800b7e0:	6808      	ldr	r0, [r1, #0]
 800b7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e6:	f01e 0f10 	tst.w	lr, #16
 800b7ea:	bf08      	it	eq
 800b7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7f0:	f380 8809 	msr	PSP, r0
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	f3af 8000 	nop.w

0800b800 <pxCurrentTCBConst>:
 800b800:	20004c84 	.word	0x20004c84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b804:	bf00      	nop
 800b806:	bf00      	nop

0800b808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b820:	f7fe fe2c 	bl	800a47c <xTaskIncrementTick>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d003      	beq.n	800b832 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b82a:	4b06      	ldr	r3, [pc, #24]	; (800b844 <SysTick_Handler+0x3c>)
 800b82c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b830:	601a      	str	r2, [r3, #0]
 800b832:	2300      	movs	r3, #0
 800b834:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b83c:	bf00      	nop
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	e000ed04 	.word	0xe000ed04

0800b848 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b848:	b480      	push	{r7}
 800b84a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b84c:	4b0b      	ldr	r3, [pc, #44]	; (800b87c <vPortSetupTimerInterrupt+0x34>)
 800b84e:	2200      	movs	r2, #0
 800b850:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b852:	4b0b      	ldr	r3, [pc, #44]	; (800b880 <vPortSetupTimerInterrupt+0x38>)
 800b854:	2200      	movs	r2, #0
 800b856:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b858:	4b0a      	ldr	r3, [pc, #40]	; (800b884 <vPortSetupTimerInterrupt+0x3c>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a0a      	ldr	r2, [pc, #40]	; (800b888 <vPortSetupTimerInterrupt+0x40>)
 800b85e:	fba2 2303 	umull	r2, r3, r2, r3
 800b862:	099b      	lsrs	r3, r3, #6
 800b864:	4a09      	ldr	r2, [pc, #36]	; (800b88c <vPortSetupTimerInterrupt+0x44>)
 800b866:	3b01      	subs	r3, #1
 800b868:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b86a:	4b04      	ldr	r3, [pc, #16]	; (800b87c <vPortSetupTimerInterrupt+0x34>)
 800b86c:	2207      	movs	r2, #7
 800b86e:	601a      	str	r2, [r3, #0]
}
 800b870:	bf00      	nop
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	e000e010 	.word	0xe000e010
 800b880:	e000e018 	.word	0xe000e018
 800b884:	20001228 	.word	0x20001228
 800b888:	10624dd3 	.word	0x10624dd3
 800b88c:	e000e014 	.word	0xe000e014

0800b890 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b890:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b8a0 <vPortEnableVFP+0x10>
 800b894:	6801      	ldr	r1, [r0, #0]
 800b896:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b89a:	6001      	str	r1, [r0, #0]
 800b89c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b89e:	bf00      	nop
 800b8a0:	e000ed88 	.word	0xe000ed88

0800b8a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b8aa:	f3ef 8305 	mrs	r3, IPSR
 800b8ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2b0f      	cmp	r3, #15
 800b8b4:	d913      	bls.n	800b8de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b8b6:	4a16      	ldr	r2, [pc, #88]	; (800b910 <vPortValidateInterruptPriority+0x6c>)
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8c0:	4b14      	ldr	r3, [pc, #80]	; (800b914 <vPortValidateInterruptPriority+0x70>)
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	7afa      	ldrb	r2, [r7, #11]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d209      	bcs.n	800b8de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	607b      	str	r3, [r7, #4]
 800b8dc:	e7fe      	b.n	800b8dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8de:	4b0e      	ldr	r3, [pc, #56]	; (800b918 <vPortValidateInterruptPriority+0x74>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8e6:	4b0d      	ldr	r3, [pc, #52]	; (800b91c <vPortValidateInterruptPriority+0x78>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d909      	bls.n	800b902 <vPortValidateInterruptPriority+0x5e>
 800b8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	603b      	str	r3, [r7, #0]
 800b900:	e7fe      	b.n	800b900 <vPortValidateInterruptPriority+0x5c>
	}
 800b902:	bf00      	nop
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	e000e3f0 	.word	0xe000e3f0
 800b914:	200052b0 	.word	0x200052b0
 800b918:	e000ed0c 	.word	0xe000ed0c
 800b91c:	200052b4 	.word	0x200052b4

0800b920 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b08a      	sub	sp, #40	; 0x28
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b928:	2300      	movs	r3, #0
 800b92a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b92c:	f7fe fcec 	bl	800a308 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b930:	4b57      	ldr	r3, [pc, #348]	; (800ba90 <pvPortMalloc+0x170>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d101      	bne.n	800b93c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b938:	f000 f90c 	bl	800bb54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b93c:	4b55      	ldr	r3, [pc, #340]	; (800ba94 <pvPortMalloc+0x174>)
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4013      	ands	r3, r2
 800b944:	2b00      	cmp	r3, #0
 800b946:	f040 808c 	bne.w	800ba62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d01c      	beq.n	800b98a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b950:	2208      	movs	r2, #8
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4413      	add	r3, r2
 800b956:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f003 0307 	and.w	r3, r3, #7
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d013      	beq.n	800b98a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f023 0307 	bic.w	r3, r3, #7
 800b968:	3308      	adds	r3, #8
 800b96a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f003 0307 	and.w	r3, r3, #7
 800b972:	2b00      	cmp	r3, #0
 800b974:	d009      	beq.n	800b98a <pvPortMalloc+0x6a>
 800b976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	617b      	str	r3, [r7, #20]
 800b988:	e7fe      	b.n	800b988 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d068      	beq.n	800ba62 <pvPortMalloc+0x142>
 800b990:	4b41      	ldr	r3, [pc, #260]	; (800ba98 <pvPortMalloc+0x178>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	429a      	cmp	r2, r3
 800b998:	d863      	bhi.n	800ba62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b99a:	4b40      	ldr	r3, [pc, #256]	; (800ba9c <pvPortMalloc+0x17c>)
 800b99c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b99e:	4b3f      	ldr	r3, [pc, #252]	; (800ba9c <pvPortMalloc+0x17c>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9a4:	e004      	b.n	800b9b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d903      	bls.n	800b9c2 <pvPortMalloc+0xa2>
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1f1      	bne.n	800b9a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9c2:	4b33      	ldr	r3, [pc, #204]	; (800ba90 <pvPortMalloc+0x170>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d04a      	beq.n	800ba62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9cc:	6a3b      	ldr	r3, [r7, #32]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2208      	movs	r2, #8
 800b9d2:	4413      	add	r3, r2
 800b9d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	6a3b      	ldr	r3, [r7, #32]
 800b9dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e0:	685a      	ldr	r2, [r3, #4]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	1ad2      	subs	r2, r2, r3
 800b9e6:	2308      	movs	r3, #8
 800b9e8:	005b      	lsls	r3, r3, #1
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d91e      	bls.n	800ba2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	f003 0307 	and.w	r3, r3, #7
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d009      	beq.n	800ba14 <pvPortMalloc+0xf4>
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	613b      	str	r3, [r7, #16]
 800ba12:	e7fe      	b.n	800ba12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba16:	685a      	ldr	r2, [r3, #4]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	1ad2      	subs	r2, r2, r3
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba26:	69b8      	ldr	r0, [r7, #24]
 800ba28:	f000 f8f6 	bl	800bc18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba2c:	4b1a      	ldr	r3, [pc, #104]	; (800ba98 <pvPortMalloc+0x178>)
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	4a18      	ldr	r2, [pc, #96]	; (800ba98 <pvPortMalloc+0x178>)
 800ba38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba3a:	4b17      	ldr	r3, [pc, #92]	; (800ba98 <pvPortMalloc+0x178>)
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	4b18      	ldr	r3, [pc, #96]	; (800baa0 <pvPortMalloc+0x180>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d203      	bcs.n	800ba4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba46:	4b14      	ldr	r3, [pc, #80]	; (800ba98 <pvPortMalloc+0x178>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a15      	ldr	r2, [pc, #84]	; (800baa0 <pvPortMalloc+0x180>)
 800ba4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba50:	685a      	ldr	r2, [r3, #4]
 800ba52:	4b10      	ldr	r3, [pc, #64]	; (800ba94 <pvPortMalloc+0x174>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	431a      	orrs	r2, r3
 800ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5e:	2200      	movs	r2, #0
 800ba60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba62:	f7fe fc5f 	bl	800a324 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba66:	69fb      	ldr	r3, [r7, #28]
 800ba68:	f003 0307 	and.w	r3, r3, #7
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d009      	beq.n	800ba84 <pvPortMalloc+0x164>
 800ba70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba74:	f383 8811 	msr	BASEPRI, r3
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	60fb      	str	r3, [r7, #12]
 800ba82:	e7fe      	b.n	800ba82 <pvPortMalloc+0x162>
	return pvReturn;
 800ba84:	69fb      	ldr	r3, [r7, #28]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3728      	adds	r7, #40	; 0x28
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	20008ec0 	.word	0x20008ec0
 800ba94:	20008ecc 	.word	0x20008ecc
 800ba98:	20008ec4 	.word	0x20008ec4
 800ba9c:	20008eb8 	.word	0x20008eb8
 800baa0:	20008ec8 	.word	0x20008ec8

0800baa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d046      	beq.n	800bb44 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bab6:	2308      	movs	r3, #8
 800bab8:	425b      	negs	r3, r3
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	4413      	add	r3, r2
 800babe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	685a      	ldr	r2, [r3, #4]
 800bac8:	4b20      	ldr	r3, [pc, #128]	; (800bb4c <vPortFree+0xa8>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4013      	ands	r3, r2
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d109      	bne.n	800bae6 <vPortFree+0x42>
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	60fb      	str	r3, [r7, #12]
 800bae4:	e7fe      	b.n	800bae4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d009      	beq.n	800bb02 <vPortFree+0x5e>
 800baee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	60bb      	str	r3, [r7, #8]
 800bb00:	e7fe      	b.n	800bb00 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	685a      	ldr	r2, [r3, #4]
 800bb06:	4b11      	ldr	r3, [pc, #68]	; (800bb4c <vPortFree+0xa8>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4013      	ands	r3, r2
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d019      	beq.n	800bb44 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d115      	bne.n	800bb44 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	685a      	ldr	r2, [r3, #4]
 800bb1c:	4b0b      	ldr	r3, [pc, #44]	; (800bb4c <vPortFree+0xa8>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	43db      	mvns	r3, r3
 800bb22:	401a      	ands	r2, r3
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb28:	f7fe fbee 	bl	800a308 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	685a      	ldr	r2, [r3, #4]
 800bb30:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <vPortFree+0xac>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4413      	add	r3, r2
 800bb36:	4a06      	ldr	r2, [pc, #24]	; (800bb50 <vPortFree+0xac>)
 800bb38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb3a:	6938      	ldr	r0, [r7, #16]
 800bb3c:	f000 f86c 	bl	800bc18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bb40:	f7fe fbf0 	bl	800a324 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb44:	bf00      	nop
 800bb46:	3718      	adds	r7, #24
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	20008ecc 	.word	0x20008ecc
 800bb50:	20008ec4 	.word	0x20008ec4

0800bb54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bb5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb60:	4b27      	ldr	r3, [pc, #156]	; (800bc00 <prvHeapInit+0xac>)
 800bb62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f003 0307 	and.w	r3, r3, #7
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00c      	beq.n	800bb88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3307      	adds	r3, #7
 800bb72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f023 0307 	bic.w	r3, r3, #7
 800bb7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	4a1f      	ldr	r2, [pc, #124]	; (800bc00 <prvHeapInit+0xac>)
 800bb84:	4413      	add	r3, r2
 800bb86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb8c:	4a1d      	ldr	r2, [pc, #116]	; (800bc04 <prvHeapInit+0xb0>)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb92:	4b1c      	ldr	r3, [pc, #112]	; (800bc04 <prvHeapInit+0xb0>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bba0:	2208      	movs	r2, #8
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	1a9b      	subs	r3, r3, r2
 800bba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f023 0307 	bic.w	r3, r3, #7
 800bbae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	4a15      	ldr	r2, [pc, #84]	; (800bc08 <prvHeapInit+0xb4>)
 800bbb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbb6:	4b14      	ldr	r3, [pc, #80]	; (800bc08 <prvHeapInit+0xb4>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbbe:	4b12      	ldr	r3, [pc, #72]	; (800bc08 <prvHeapInit+0xb4>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	1ad2      	subs	r2, r2, r3
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bbd4:	4b0c      	ldr	r3, [pc, #48]	; (800bc08 <prvHeapInit+0xb4>)
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	4a0a      	ldr	r2, [pc, #40]	; (800bc0c <prvHeapInit+0xb8>)
 800bbe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	4a09      	ldr	r2, [pc, #36]	; (800bc10 <prvHeapInit+0xbc>)
 800bbea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bbec:	4b09      	ldr	r3, [pc, #36]	; (800bc14 <prvHeapInit+0xc0>)
 800bbee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bbf2:	601a      	str	r2, [r3, #0]
}
 800bbf4:	bf00      	nop
 800bbf6:	3714      	adds	r7, #20
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	200052b8 	.word	0x200052b8
 800bc04:	20008eb8 	.word	0x20008eb8
 800bc08:	20008ec0 	.word	0x20008ec0
 800bc0c:	20008ec8 	.word	0x20008ec8
 800bc10:	20008ec4 	.word	0x20008ec4
 800bc14:	20008ecc 	.word	0x20008ecc

0800bc18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc20:	4b28      	ldr	r3, [pc, #160]	; (800bcc4 <prvInsertBlockIntoFreeList+0xac>)
 800bc22:	60fb      	str	r3, [r7, #12]
 800bc24:	e002      	b.n	800bc2c <prvInsertBlockIntoFreeList+0x14>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d8f7      	bhi.n	800bc26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	4413      	add	r3, r2
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d108      	bne.n	800bc5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	441a      	add	r2, r3
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	68ba      	ldr	r2, [r7, #8]
 800bc64:	441a      	add	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d118      	bne.n	800bca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	4b15      	ldr	r3, [pc, #84]	; (800bcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d00d      	beq.n	800bc96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	441a      	add	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	601a      	str	r2, [r3, #0]
 800bc94:	e008      	b.n	800bca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc96:	4b0c      	ldr	r3, [pc, #48]	; (800bcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	e003      	b.n	800bca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d002      	beq.n	800bcb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcb6:	bf00      	nop
 800bcb8:	3714      	adds	r7, #20
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	20008eb8 	.word	0x20008eb8
 800bcc8:	20008ec0 	.word	0x20008ec0

0800bccc <compass_init>:




void compass_init(void)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b082      	sub	sp, #8
 800bcd0:	af00      	add	r7, sp, #0
	float_t freq = SAMPLE_FREQ;
 800bcd2:	4b1d      	ldr	r3, [pc, #116]	; (800bd48 <compass_init+0x7c>)
 800bcd4:	607b      	str	r3, [r7, #4]

	/* E-Compass API initialization function */
	MotionEC_Initialize(&freq);
 800bcd6:	1d3b      	adds	r3, r7, #4
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f000 fbef 	bl	800c4bc <MotionEC_Initialize>
	MotionGC_Initialize(&freq);
 800bcde:	1d3b      	adds	r3, r7, #4
 800bce0:	4618      	mov	r0, r3
 800bce2:	f001 f951 	bl	800cf88 <MotionGC_Initialize>
	MotionAC_Initialize(1);
 800bce6:	2001      	movs	r0, #1
 800bce8:	f001 f858 	bl	800cd9c <MotionAC_Initialize>

	MotionMC_Initialize(100,1);
 800bcec:	2101      	movs	r1, #1
 800bcee:	2064      	movs	r0, #100	; 0x64
 800bcf0:	f001 f9fc 	bl	800d0ec <MotionMC_Initialize>
	MotionFX_initialize();
 800bcf4:	f001 ff2c 	bl	800db50 <MotionFX_initialize>
	/* Optional: Get version */
	MotionEC_GetLibVersion(lib_version_ec);
 800bcf8:	4814      	ldr	r0, [pc, #80]	; (800bd4c <compass_init+0x80>)
 800bcfa:	f001 f82b 	bl	800cd54 <MotionEC_GetLibVersion>
	MotionAC_GetLibVersion(lib_version_ac);
 800bcfe:	4814      	ldr	r0, [pc, #80]	; (800bd50 <compass_init+0x84>)
 800bd00:	f001 f91e 	bl	800cf40 <MotionAC_GetLibVersion>
	MotionGC_GetLibVersion(lib_version_gc);
 800bd04:	4813      	ldr	r0, [pc, #76]	; (800bd54 <compass_init+0x88>)
 800bd06:	f001 f9cd 	bl	800d0a4 <MotionGC_GetLibVersion>
	MotionMC_GetLibVersion(lib_version_mc);
 800bd0a:	4813      	ldr	r0, [pc, #76]	; (800bd58 <compass_init+0x8c>)
 800bd0c:	f001 fb38 	bl	800d380 <MotionMC_GetLibVersion>
	MotionFX_GetLibVersion(lib_version_fx);
 800bd10:	4812      	ldr	r0, [pc, #72]	; (800bd5c <compass_init+0x90>)
 800bd12:	f002 f97f 	bl	800e014 <MotionFX_GetLibVersion>

	printf("\n\r%s",lib_version_ec);
 800bd16:	490d      	ldr	r1, [pc, #52]	; (800bd4c <compass_init+0x80>)
 800bd18:	4811      	ldr	r0, [pc, #68]	; (800bd60 <compass_init+0x94>)
 800bd1a:	f002 fe3b 	bl	800e994 <iprintf>
	printf("\n\r%s",lib_version_ac);
 800bd1e:	490c      	ldr	r1, [pc, #48]	; (800bd50 <compass_init+0x84>)
 800bd20:	480f      	ldr	r0, [pc, #60]	; (800bd60 <compass_init+0x94>)
 800bd22:	f002 fe37 	bl	800e994 <iprintf>
	printf("\n\r%s",lib_version_gc);
 800bd26:	490b      	ldr	r1, [pc, #44]	; (800bd54 <compass_init+0x88>)
 800bd28:	480d      	ldr	r0, [pc, #52]	; (800bd60 <compass_init+0x94>)
 800bd2a:	f002 fe33 	bl	800e994 <iprintf>
	printf("\n\r%s",lib_version_mc);
 800bd2e:	490a      	ldr	r1, [pc, #40]	; (800bd58 <compass_init+0x8c>)
 800bd30:	480b      	ldr	r0, [pc, #44]	; (800bd60 <compass_init+0x94>)
 800bd32:	f002 fe2f 	bl	800e994 <iprintf>
	printf("\n\r%s",lib_version_fx);
 800bd36:	4909      	ldr	r1, [pc, #36]	; (800bd5c <compass_init+0x90>)
 800bd38:	4809      	ldr	r0, [pc, #36]	; (800bd60 <compass_init+0x94>)
 800bd3a:	f002 fe2b 	bl	800e994 <iprintf>

}
 800bd3e:	bf00      	nop
 800bd40:	3708      	adds	r7, #8
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	41200000 	.word	0x41200000
 800bd4c:	20008ed0 	.word	0x20008ed0
 800bd50:	20008ef4 	.word	0x20008ef4
 800bd54:	20008f3c 	.word	0x20008f3c
 800bd58:	20008f60 	.word	0x20008f60
 800bd5c:	20008f18 	.word	0x20008f18
 800bd60:	080113a8 	.word	0x080113a8

0800bd64 <setEcParameter>:

static void setEcParameter(POS_MOTION_SENSOR_Axes_t *acc, POS_MOTION_SENSOR_Axes_t *mag, MEC_input_t *in, float timeS)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	607a      	str	r2, [r7, #4]
 800bd70:	ed87 0a00 	vstr	s0, [r7]
	in->acc[0] = (float)((float)acc->x) / 1000;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	ee07 3a90 	vmov	s15, r3
 800bd7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd80:	eddf 6a28 	vldr	s13, [pc, #160]	; 800be24 <setEcParameter+0xc0>
 800bd84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	edc3 7a00 	vstr	s15, [r3]
	in->acc[1] = (float)acc->y / 1000;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	ee07 3a90 	vmov	s15, r3
 800bd96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd9a:	eddf 6a22 	vldr	s13, [pc, #136]	; 800be24 <setEcParameter+0xc0>
 800bd9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	edc3 7a01 	vstr	s15, [r3, #4]
	in->acc[2] = (float)acc->z / 1000;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	ee07 3a90 	vmov	s15, r3
 800bdb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bdb4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800be24 <setEcParameter+0xc0>
 800bdb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	edc3 7a02 	vstr	s15, [r3, #8]

	in->mag[0] = (float)mag->x / 50;
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	ee07 3a90 	vmov	s15, r3
 800bdca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bdce:	eddf 6a16 	vldr	s13, [pc, #88]	; 800be28 <setEcParameter+0xc4>
 800bdd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	edc3 7a03 	vstr	s15, [r3, #12]
	in->mag[1] = (float)mag->y / 50;
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	ee07 3a90 	vmov	s15, r3
 800bde4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bde8:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800be28 <setEcParameter+0xc4>
 800bdec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	edc3 7a04 	vstr	s15, [r3, #16]
	in->mag[2] = (float)mag->z / 50;
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	ee07 3a90 	vmov	s15, r3
 800bdfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800be02:	eddf 6a09 	vldr	s13, [pc, #36]	; 800be28 <setEcParameter+0xc4>
 800be06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	edc3 7a05 	vstr	s15, [r3, #20]

	in->deltatime_s = timeS;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	619a      	str	r2, [r3, #24]
}
 800be16:	bf00      	nop
 800be18:	3714      	adds	r7, #20
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	447a0000 	.word	0x447a0000
 800be28:	42480000 	.word	0x42480000

0800be2c <GetCompassData>:

void GetCompassData()
{
 800be2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be30:	b0a9      	sub	sp, #164	; 0xa4
 800be32:	af06      	add	r7, sp, #24
	MEC_input_t in;
	MEC_output_t out;

	POS_MOTION_SENSOR_Axes_t AccAxesLsm6dso = {0,0,0};
 800be34:	2300      	movs	r3, #0
 800be36:	623b      	str	r3, [r7, #32]
 800be38:	2300      	movs	r3, #0
 800be3a:	627b      	str	r3, [r7, #36]	; 0x24
 800be3c:	2300      	movs	r3, #0
 800be3e:	62bb      	str	r3, [r7, #40]	; 0x28
	POS_MOTION_SENSOR_Axes_t GyrAxesLsm6dso = {0,0,0};
 800be40:	2300      	movs	r3, #0
 800be42:	617b      	str	r3, [r7, #20]
 800be44:	2300      	movs	r3, #0
 800be46:	61bb      	str	r3, [r7, #24]
 800be48:	2300      	movs	r3, #0
 800be4a:	61fb      	str	r3, [r7, #28]
	POS_MOTION_SENSOR_Axes_t MagAxes = {0,0,0};
 800be4c:	2300      	movs	r3, #0
 800be4e:	60bb      	str	r3, [r7, #8]
 800be50:	2300      	movs	r3, #0
 800be52:	60fb      	str	r3, [r7, #12]
 800be54:	2300      	movs	r3, #0
 800be56:	613b      	str	r3, [r7, #16]

	POS_MOTION_SENSOR_GetAxes(MAG_LIS2MDL, &MagAxes);
 800be58:	f107 0308 	add.w	r3, r7, #8
 800be5c:	4619      	mov	r1, r3
 800be5e:	2002      	movs	r0, #2
 800be60:	f000 f906 	bl	800c070 <POS_MOTION_SENSOR_GetAxes>
	POS_MOTION_SENSOR_GetAxes(ACC_LSM6DSO, &AccAxesLsm6dso);
 800be64:	f107 0320 	add.w	r3, r7, #32
 800be68:	4619      	mov	r1, r3
 800be6a:	2000      	movs	r0, #0
 800be6c:	f000 f900 	bl	800c070 <POS_MOTION_SENSOR_GetAxes>
	POS_MOTION_SENSOR_GetAxes(GYR_LSM6DSO, &GyrAxesLsm6dso);
 800be70:	f107 0314 	add.w	r3, r7, #20
 800be74:	4619      	mov	r1, r3
 800be76:	2001      	movs	r0, #1
 800be78:	f000 f8fa 	bl	800c070 <POS_MOTION_SENSOR_GetAxes>
//
//	printf("\n\rACC x = %5d y = %5d z = %5d MAG x = %5d y = %5d z = %5d",(int)AccAxesLis2dw.x,(int)AccAxesLis2dw.y,(int)AccAxesLis2dw.z,(int)MagAxes.x,(int)MagAxes.y,(int)MagAxes.z);
	printf("\n\rACC x = %5d y = %5d z = %5d GYR x = %5d y = %5d z = %5d MAG x = %5d y = %5d z = %5d\n\r",(int)AccAxesLsm6dso.x,(int)AccAxesLsm6dso.y,(int)AccAxesLsm6dso.z,(int)GyrAxesLsm6dso.x,(int)GyrAxesLsm6dso.y,(int)GyrAxesLsm6dso.z,(int)MagAxes.x,(int)MagAxes.y,(int)MagAxes.z);
 800be7c:	6a3e      	ldr	r6, [r7, #32]
 800be7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be80:	607b      	str	r3, [r7, #4]
 800be82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be84:	6039      	str	r1, [r7, #0]
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	69ba      	ldr	r2, [r7, #24]
 800be8a:	69f9      	ldr	r1, [r7, #28]
 800be8c:	68b8      	ldr	r0, [r7, #8]
 800be8e:	68fc      	ldr	r4, [r7, #12]
 800be90:	693d      	ldr	r5, [r7, #16]
 800be92:	9505      	str	r5, [sp, #20]
 800be94:	9404      	str	r4, [sp, #16]
 800be96:	9003      	str	r0, [sp, #12]
 800be98:	9102      	str	r1, [sp, #8]
 800be9a:	9201      	str	r2, [sp, #4]
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	4631      	mov	r1, r6
 800bea4:	481e      	ldr	r0, [pc, #120]	; (800bf20 <GetCompassData+0xf4>)
 800bea6:	f002 fd75 	bl	800e994 <iprintf>

	setEcParameter(&AccAxesLsm6dso, &MagAxes, &in, 0.1);
 800beaa:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800beae:	f107 0108 	add.w	r1, r7, #8
 800beb2:	f107 0320 	add.w	r3, r7, #32
 800beb6:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800bf24 <GetCompassData+0xf8>
 800beba:	4618      	mov	r0, r3
 800bebc:	f7ff ff52 	bl	800bd64 <setEcParameter>
	MotionEC_Run(&in, &out);
 800bec0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800bec4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800bec8:	4611      	mov	r1, r2
 800beca:	4618      	mov	r0, r3
 800becc:	f000 fb84 	bl	800c5d8 <MotionEC_Run>

	printf("\n\rQ %2.2f %2.2f %2.2f %2.2f",out.quaternion[0],out.quaternion[1],out.quaternion[2],out.quaternion[3]);
 800bed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7f4 fb40 	bl	8000558 <__aeabi_f2d>
 800bed8:	4682      	mov	sl, r0
 800beda:	468b      	mov	fp, r1
 800bedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bede:	4618      	mov	r0, r3
 800bee0:	f7f4 fb3a 	bl	8000558 <__aeabi_f2d>
 800bee4:	4604      	mov	r4, r0
 800bee6:	460d      	mov	r5, r1
 800bee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beea:	4618      	mov	r0, r3
 800beec:	f7f4 fb34 	bl	8000558 <__aeabi_f2d>
 800bef0:	4680      	mov	r8, r0
 800bef2:	4689      	mov	r9, r1
 800bef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7f4 fb2e 	bl	8000558 <__aeabi_f2d>
 800befc:	4602      	mov	r2, r0
 800befe:	460b      	mov	r3, r1
 800bf00:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bf04:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800bf08:	e9cd 4500 	strd	r4, r5, [sp]
 800bf0c:	4652      	mov	r2, sl
 800bf0e:	465b      	mov	r3, fp
 800bf10:	4805      	ldr	r0, [pc, #20]	; (800bf28 <GetCompassData+0xfc>)
 800bf12:	f002 fd3f 	bl	800e994 <iprintf>

	//LIS2DW12_ACC_GetAxes();

}
 800bf16:	bf00      	nop
 800bf18:	378c      	adds	r7, #140	; 0x8c
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf20:	080113b0 	.word	0x080113b0
 800bf24:	3dcccccd 	.word	0x3dcccccd
 800bf28:	08011408 	.word	0x08011408

0800bf2c <MotionAC_LoadCalFromNVM>:

///////////////////////////

char MotionAC_LoadCalFromNVM (unsigned short intdataSize, unsigned int *data)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	4603      	mov	r3, r0
 800bf34:	6039      	str	r1, [r7, #0]
 800bf36:	80fb      	strh	r3, [r7, #6]
	return 0;
 800bf38:	2300      	movs	r3, #0

}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	370c      	adds	r7, #12
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr

0800bf46 <MotionAC_SaveCalInNVM>:
char MotionAC_SaveCalInNVM (unsigned short intdataSize, unsigned int *data)
{
 800bf46:	b480      	push	{r7}
 800bf48:	b083      	sub	sp, #12
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	6039      	str	r1, [r7, #0]
 800bf50:	80fb      	strh	r3, [r7, #6]
	return 0;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <MotionMC_LoadCalFromNVM>:

char MotionMC_LoadCalFromNVM (unsigned short intdataSize, unsigned int *data)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	4603      	mov	r3, r0
 800bf68:	6039      	str	r1, [r7, #0]
 800bf6a:	80fb      	strh	r3, [r7, #6]
	return 0;
 800bf6c:	2300      	movs	r3, #0

}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	370c      	adds	r7, #12
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr

0800bf7a <MotionMC_SaveCalInNVM>:
char MotionMC_SaveCalInNVM (unsigned short intdataSize, unsigned int *data)
{
 800bf7a:	b480      	push	{r7}
 800bf7c:	b083      	sub	sp, #12
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	4603      	mov	r3, r0
 800bf82:	6039      	str	r1, [r7, #0]
 800bf84:	80fb      	strh	r3, [r7, #6]
	return 0;
 800bf86:	2300      	movs	r3, #0
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <position_Init>:
static void motionSensor_Init(void);



void position_Init(void)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	af00      	add	r7, sp, #0
	motionSensor_Init();
 800bf98:	f000 f80a 	bl	800bfb0 <motionSensor_Init>
	compass_init();
 800bf9c:	f7ff fe96 	bl	800bccc <compass_init>


	/////
//	POS_MOTION_SENSOR_Axes_t AccAxesLsm6dso;
//	POS_MOTION_SENSOR_GetAxes(ACC_LSM6DSO, &AccAxesLsm6dso);
}
 800bfa0:	bf00      	nop
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <PositionProcess>:

void PositionProcess(void)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	af00      	add	r7, sp, #0
	GetCompassData();
 800bfa8:	f7ff ff40 	bl	800be2c <GetCompassData>
//	POS_MOTION_SENSOR_GetAxes(ACC_LSM6DSO, &AccAxesLsm6dso);
//	POS_MOTION_SENSOR_GetAxes(GYR_LSM6DSO, &GyrAxesLsm6dso);
//
//	printf("\n\rACC x = %5d y = %5d z = %5d MAG x = %5d y = %5d z = %5d",(int)AccAxesLis2dw.x,(int)AccAxesLis2dw.y,(int)AccAxesLis2dw.z,(int)MagAxes.x,(int)MagAxes.y,(int)MagAxes.z);
//	printf("\n\rACC x = %5d y = %5d z = %5d GYR x = %5d y = %5d z = %5d\n\r",(int)AccAxesLsm6dso.x,(int)AccAxesLsm6dso.y,(int)AccAxesLsm6dso.z,(int)GyrAxesLsm6dso.x,(int)GyrAxesLsm6dso.y,(int)GyrAxesLsm6dso.z);
}
 800bfac:	bf00      	nop
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <motionSensor_Init>:
/**
  * @brief  Initialize the accelerometer and  magnetometer
  * @retval None
  */
static void motionSensor_Init(void)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	af00      	add	r7, sp, #0
//  displayFloatToInt_t out_value_odr;
//  int i;

	  /* Initialize Virtual COM Port */
	  BSP_COM_Init(COM1);
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	f7f9 fcb1 	bl	800591c <BSP_COM_Init>


	POS_MOTION_SENSOR_Init();
 800bfba:	f000 f80b 	bl	800bfd4 <POS_MOTION_SENSOR_Init>
      break;
#endif


//	LIS2DW12_Init(&accObj);
	LIS2DW12_GetCapabilities(&accObj, &accCap);
 800bfbe:	4903      	ldr	r1, [pc, #12]	; (800bfcc <motionSensor_Init+0x1c>)
 800bfc0:	4803      	ldr	r0, [pc, #12]	; (800bfd0 <motionSensor_Init+0x20>)
 800bfc2:	f7f5 fe5b 	bl	8001c7c <LIS2DW12_GetCapabilities>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
    printf("%s", dataOut);
  }
  */
}
 800bfc6:	bf00      	nop
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	20008fb8 	.word	0x20008fb8
 800bfd0:	20008f84 	.word	0x20008f84

0800bfd4 <POS_MOTION_SENSOR_Init>:
 * @brief  Initializes the motion sensors
 * @retval BSP status
 */
#include "position.h"
int32_t POS_MOTION_SENSOR_Init(void)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	607b      	str	r3, [r7, #4]

  ret = LIS2DW12_0_Probe(ACC_LIS2DW12);
 800bfde:	2003      	movs	r0, #3
 800bfe0:	f000 f912 	bl	800c208 <LIS2DW12_0_Probe>
 800bfe4:	6078      	str	r0, [r7, #4]
  ret = LIS2MDL_0_Probe(MAG_LIS2MDL);
 800bfe6:	2002      	movs	r0, #2
 800bfe8:	f000 f986 	bl	800c2f8 <LIS2MDL_0_Probe>
 800bfec:	6078      	str	r0, [r7, #4]
  ret = LSM6DSO_0_Probe(GYR_LSM6DSO);
 800bfee:	2001      	movs	r0, #1
 800bff0:	f000 f86a 	bl	800c0c8 <LSM6DSO_0_Probe>
 800bff4:	6078      	str	r0, [r7, #4]

// nur test a
  uint8_t Id1,Id2;
  ret = POS_MOTION_SENSOR_ReadID(ACC_LIS2DW12, &Id1);
 800bff6:	1cfb      	adds	r3, r7, #3
 800bff8:	4619      	mov	r1, r3
 800bffa:	2003      	movs	r0, #3
 800bffc:	f000 f80c 	bl	800c018 <POS_MOTION_SENSOR_ReadID>
 800c000:	6078      	str	r0, [r7, #4]
  ret = POS_MOTION_SENSOR_ReadID(MAG_LIS2MDL, &Id2);
 800c002:	1cbb      	adds	r3, r7, #2
 800c004:	4619      	mov	r1, r3
 800c006:	2002      	movs	r0, #2
 800c008:	f000 f806 	bl	800c018 <POS_MOTION_SENSOR_ReadID>
 800c00c:	6078      	str	r0, [r7, #4]

// nur test e

  return ret;
 800c00e:	687b      	ldr	r3, [r7, #4]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3708      	adds	r7, #8
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <POS_MOTION_SENSOR_ReadID>:
 * @param  sensor Motion sensor instance
 * @param  Id WHOAMI value
 * @retval BSP status
 */
int32_t POS_MOTION_SENSOR_ReadID(POS_MOTION_SENSORS sensor, uint8_t *Id)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	4603      	mov	r3, r0
 800c020:	6039      	str	r1, [r7, #0]
 800c022:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if (sensor >= POS_MOTION_SENSORS_MAX)
 800c024:	79fb      	ldrb	r3, [r7, #7]
 800c026:	2b03      	cmp	r3, #3
 800c028:	d903      	bls.n	800c032 <POS_MOTION_SENSOR_ReadID+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c02a:	f06f 0301 	mvn.w	r3, #1
 800c02e:	60fb      	str	r3, [r7, #12]
 800c030:	e014      	b.n	800c05c <POS_MOTION_SENSOR_ReadID+0x44>
  }
  else if (PosMotionDrv[sensor]->ReadID(PosMotionCompObj[sensor], Id) != BSP_ERROR_NONE)
 800c032:	79fb      	ldrb	r3, [r7, #7]
 800c034:	4a0c      	ldr	r2, [pc, #48]	; (800c068 <POS_MOTION_SENSOR_ReadID+0x50>)
 800c036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	79fa      	ldrb	r2, [r7, #7]
 800c03e:	490b      	ldr	r1, [pc, #44]	; (800c06c <POS_MOTION_SENSOR_ReadID+0x54>)
 800c040:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c044:	6839      	ldr	r1, [r7, #0]
 800c046:	4610      	mov	r0, r2
 800c048:	4798      	blx	r3
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d003      	beq.n	800c058 <POS_MOTION_SENSOR_ReadID+0x40>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c050:	f06f 0306 	mvn.w	r3, #6
 800c054:	60fb      	str	r3, [r7, #12]
 800c056:	e001      	b.n	800c05c <POS_MOTION_SENSOR_ReadID+0x44>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800c058:	2300      	movs	r3, #0
 800c05a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c05c:	68fb      	ldr	r3, [r7, #12]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3710      	adds	r7, #16
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	20008fe4 	.word	0x20008fe4
 800c06c:	2000bb18 	.word	0x2000bb18

0800c070 <POS_MOTION_SENSOR_GetAxes>:
 * @param  Sensor Motion sensor instance
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t POS_MOTION_SENSOR_GetAxes(POS_MOTION_SENSORS sensor, POS_MOTION_SENSOR_Axes_t *Axes)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	4603      	mov	r3, r0
 800c078:	6039      	str	r1, [r7, #0]
 800c07a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if (sensor >= POS_MOTION_SENSORS_MAX)
 800c07c:	79fb      	ldrb	r3, [r7, #7]
 800c07e:	2b03      	cmp	r3, #3
 800c080:	d903      	bls.n	800c08a <POS_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c082:	f06f 0301 	mvn.w	r3, #1
 800c086:	60fb      	str	r3, [r7, #12]
 800c088:	e014      	b.n	800c0b4 <POS_MOTION_SENSOR_GetAxes+0x44>
  }
  else
  {
    if (PosMotionFuncDrv[sensor]->GetAxes(PosMotionCompObj[sensor], Axes) != BSP_ERROR_NONE)
 800c08a:	79fb      	ldrb	r3, [r7, #7]
 800c08c:	4a0c      	ldr	r2, [pc, #48]	; (800c0c0 <POS_MOTION_SENSOR_GetAxes+0x50>)
 800c08e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c092:	69db      	ldr	r3, [r3, #28]
 800c094:	79fa      	ldrb	r2, [r7, #7]
 800c096:	490b      	ldr	r1, [pc, #44]	; (800c0c4 <POS_MOTION_SENSOR_GetAxes+0x54>)
 800c098:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c09c:	6839      	ldr	r1, [r7, #0]
 800c09e:	4610      	mov	r0, r2
 800c0a0:	4798      	blx	r3
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d003      	beq.n	800c0b0 <POS_MOTION_SENSOR_GetAxes+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c0a8:	f06f 0304 	mvn.w	r3, #4
 800c0ac:	60fb      	str	r3, [r7, #12]
 800c0ae:	e001      	b.n	800c0b4 <POS_MOTION_SENSOR_GetAxes+0x44>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	20008fd4 	.word	0x20008fd4
 800c0c4:	2000bb18 	.word	0x2000bb18

0800c0c8 <LSM6DSO_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSO_0_Probe(POS_MOTION_SENSORS sensor)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b092      	sub	sp, #72	; 0x48
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	71fb      	strb	r3, [r7, #7]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800c0da:	23d7      	movs	r3, #215	; 0xd7
 800c0dc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = POS_I2C_Init;
 800c0e0:	4b3d      	ldr	r3, [pc, #244]	; (800c1d8 <LSM6DSO_0_Probe+0x110>)
 800c0e2:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = POS_I2C_DeInit;
 800c0e4:	4b3d      	ldr	r3, [pc, #244]	; (800c1dc <LSM6DSO_0_Probe+0x114>)
 800c0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = POS_I2C_ReadReg;
 800c0e8:	4b3d      	ldr	r3, [pc, #244]	; (800c1e0 <LSM6DSO_0_Probe+0x118>)
 800c0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = POS_I2C_WriteReg;
 800c0ec:	4b3d      	ldr	r3, [pc, #244]	; (800c1e4 <LSM6DSO_0_Probe+0x11c>)
 800c0ee:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = POS_GetTick;
 800c0f0:	4b3d      	ldr	r3, [pc, #244]	; (800c1e8 <LSM6DSO_0_Probe+0x120>)
 800c0f2:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800c0f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	483c      	ldr	r0, [pc, #240]	; (800c1ec <LSM6DSO_0_Probe+0x124>)
 800c0fc:	f7f7 fc7c 	bl	80039f8 <LSM6DSO_RegisterBusIO>
 800c100:	4603      	mov	r3, r0
 800c102:	2b00      	cmp	r3, #0
 800c104:	d003      	beq.n	800c10e <LSM6DSO_0_Probe+0x46>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c106:	f06f 0306 	mvn.w	r3, #6
 800c10a:	647b      	str	r3, [r7, #68]	; 0x44
 800c10c:	e05f      	b.n	800c1ce <LSM6DSO_0_Probe+0x106>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800c10e:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800c112:	4619      	mov	r1, r3
 800c114:	4835      	ldr	r0, [pc, #212]	; (800c1ec <LSM6DSO_0_Probe+0x124>)
 800c116:	f7f7 fd71 	bl	8003bfc <LSM6DSO_ReadID>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d003      	beq.n	800c128 <LSM6DSO_0_Probe+0x60>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c120:	f06f 0306 	mvn.w	r3, #6
 800c124:	647b      	str	r3, [r7, #68]	; 0x44
 800c126:	e052      	b.n	800c1ce <LSM6DSO_0_Probe+0x106>
  }
  else if (id != LSM6DSO_ID)
 800c128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c12c:	2b6c      	cmp	r3, #108	; 0x6c
 800c12e:	d003      	beq.n	800c138 <LSM6DSO_0_Probe+0x70>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c130:	f06f 0306 	mvn.w	r3, #6
 800c134:	647b      	str	r3, [r7, #68]	; 0x44
 800c136:	e04a      	b.n	800c1ce <LSM6DSO_0_Probe+0x106>
  }
  else
  {
	PosMotionCompObj[ACC_LSM6DSO] = &lsm6dso_obj_0;
 800c138:	4b2d      	ldr	r3, [pc, #180]	; (800c1f0 <LSM6DSO_0_Probe+0x128>)
 800c13a:	4a2c      	ldr	r2, [pc, #176]	; (800c1ec <LSM6DSO_0_Probe+0x124>)
 800c13c:	601a      	str	r2, [r3, #0]
	PosMotionCompObj[GYR_LSM6DSO] = &lsm6dso_obj_0;
 800c13e:	4b2c      	ldr	r3, [pc, #176]	; (800c1f0 <LSM6DSO_0_Probe+0x128>)
 800c140:	4a2a      	ldr	r2, [pc, #168]	; (800c1ec <LSM6DSO_0_Probe+0x124>)
 800c142:	605a      	str	r2, [r3, #4]
	/* The second cast (void *) is added to bypass Misra R11.3 rule */
	PosMotionDrv[ACC_LSM6DSO] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800c144:	4b2b      	ldr	r3, [pc, #172]	; (800c1f4 <LSM6DSO_0_Probe+0x12c>)
 800c146:	4a2c      	ldr	r2, [pc, #176]	; (800c1f8 <LSM6DSO_0_Probe+0x130>)
 800c148:	601a      	str	r2, [r3, #0]
	PosMotionDrv[GYR_LSM6DSO] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800c14a:	4b2a      	ldr	r3, [pc, #168]	; (800c1f4 <LSM6DSO_0_Probe+0x12c>)
 800c14c:	4a2a      	ldr	r2, [pc, #168]	; (800c1f8 <LSM6DSO_0_Probe+0x130>)
 800c14e:	605a      	str	r2, [r3, #4]

	/* The second cast (void *) is added to bypass Misra R11.3 rule */
	PosMotionFuncDrv[ACC_LSM6DSO] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_ACC_Driver;
 800c150:	4b2a      	ldr	r3, [pc, #168]	; (800c1fc <LSM6DSO_0_Probe+0x134>)
 800c152:	4a2b      	ldr	r2, [pc, #172]	; (800c200 <LSM6DSO_0_Probe+0x138>)
 800c154:	601a      	str	r2, [r3, #0]
	PosMotionFuncDrv[GYR_LSM6DSO] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800c156:	4b29      	ldr	r3, [pc, #164]	; (800c1fc <LSM6DSO_0_Probe+0x134>)
 800c158:	4a2a      	ldr	r2, [pc, #168]	; (800c204 <LSM6DSO_0_Probe+0x13c>)
 800c15a:	605a      	str	r2, [r3, #4]

	if (PosMotionDrv[ACC_LSM6DSO]->Init(PosMotionCompObj[ACC_LSM6DSO]) != LSM6DSO_OK)
 800c15c:	4b25      	ldr	r3, [pc, #148]	; (800c1f4 <LSM6DSO_0_Probe+0x12c>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a23      	ldr	r2, [pc, #140]	; (800c1f0 <LSM6DSO_0_Probe+0x128>)
 800c164:	6812      	ldr	r2, [r2, #0]
 800c166:	4610      	mov	r0, r2
 800c168:	4798      	blx	r3
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d003      	beq.n	800c178 <LSM6DSO_0_Probe+0xb0>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 800c170:	f06f 0304 	mvn.w	r3, #4
 800c174:	647b      	str	r3, [r7, #68]	; 0x44
 800c176:	e02a      	b.n	800c1ce <LSM6DSO_0_Probe+0x106>
	}
	else if (PosMotionDrv[GYR_LSM6DSO]->Init(PosMotionCompObj[GYR_LSM6DSO]) != LSM6DSO_OK)
 800c178:	4b1e      	ldr	r3, [pc, #120]	; (800c1f4 <LSM6DSO_0_Probe+0x12c>)
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4a1c      	ldr	r2, [pc, #112]	; (800c1f0 <LSM6DSO_0_Probe+0x128>)
 800c180:	6852      	ldr	r2, [r2, #4]
 800c182:	4610      	mov	r0, r2
 800c184:	4798      	blx	r3
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d003      	beq.n	800c194 <LSM6DSO_0_Probe+0xcc>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 800c18c:	f06f 0304 	mvn.w	r3, #4
 800c190:	647b      	str	r3, [r7, #68]	; 0x44
 800c192:	e01c      	b.n	800c1ce <LSM6DSO_0_Probe+0x106>
	}
	else
	{
		ret = BSP_ERROR_NONE;
 800c194:	2300      	movs	r3, #0
 800c196:	647b      	str	r3, [r7, #68]	; 0x44
		if (PosMotionFuncDrv[ACC_LSM6DSO]->Enable(PosMotionCompObj[ACC_LSM6DSO]) != LSM6DSO_OK)
 800c198:	4b18      	ldr	r3, [pc, #96]	; (800c1fc <LSM6DSO_0_Probe+0x134>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a14      	ldr	r2, [pc, #80]	; (800c1f0 <LSM6DSO_0_Probe+0x128>)
 800c1a0:	6812      	ldr	r2, [r2, #0]
 800c1a2:	4610      	mov	r0, r2
 800c1a4:	4798      	blx	r3
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d003      	beq.n	800c1b4 <LSM6DSO_0_Probe+0xec>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800c1ac:	f06f 0304 	mvn.w	r3, #4
 800c1b0:	647b      	str	r3, [r7, #68]	; 0x44
 800c1b2:	e00c      	b.n	800c1ce <LSM6DSO_0_Probe+0x106>
		}
		else if (PosMotionFuncDrv[GYR_LSM6DSO]->Enable(PosMotionCompObj[GYR_LSM6DSO]) != LSM6DSO_OK)
 800c1b4:	4b11      	ldr	r3, [pc, #68]	; (800c1fc <LSM6DSO_0_Probe+0x134>)
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a0d      	ldr	r2, [pc, #52]	; (800c1f0 <LSM6DSO_0_Probe+0x128>)
 800c1bc:	6852      	ldr	r2, [r2, #4]
 800c1be:	4610      	mov	r0, r2
 800c1c0:	4798      	blx	r3
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d002      	beq.n	800c1ce <LSM6DSO_0_Probe+0x106>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800c1c8:	f06f 0304 	mvn.w	r3, #4
 800c1cc:	647b      	str	r3, [r7, #68]	; 0x44
		}
	}
  }
	  return ret;
 800c1ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3748      	adds	r7, #72	; 0x48
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	080015f5 	.word	0x080015f5
 800c1dc:	08001659 	.word	0x08001659
 800c1e0:	0800170d 	.word	0x0800170d
 800c1e4:	080016a9 	.word	0x080016a9
 800c1e8:	08001771 	.word	0x08001771
 800c1ec:	20008ff4 	.word	0x20008ff4
 800c1f0:	2000bb18 	.word	0x2000bb18
 800c1f4:	20008fe4 	.word	0x20008fe4
 800c1f8:	20001294 	.word	0x20001294
 800c1fc:	20008fd4 	.word	0x20008fd4
 800c200:	200012a4 	.word	0x200012a4
 800c204:	200012c8 	.word	0x200012c8

0800c208 <LIS2DW12_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2DW12_0_Probe(POS_MOTION_SENSORS sensor)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b08c      	sub	sp, #48	; 0x30
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	4603      	mov	r3, r0
 800c210:	71fb      	strb	r3, [r7, #7]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  int32_t ret = BSP_ERROR_NONE;
 800c212:	2300      	movs	r3, #0
 800c214:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800c216:	2300      	movs	r3, #0
 800c218:	61bb      	str	r3, [r7, #24]
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800c21a:	2333      	movs	r3, #51	; 0x33
 800c21c:	773b      	strb	r3, [r7, #28]
  io_ctx.Init        = POS_I2C_Init;
 800c21e:	4b2b      	ldr	r3, [pc, #172]	; (800c2cc <LIS2DW12_0_Probe+0xc4>)
 800c220:	613b      	str	r3, [r7, #16]
  io_ctx.DeInit      = POS_I2C_DeInit;
 800c222:	4b2b      	ldr	r3, [pc, #172]	; (800c2d0 <LIS2DW12_0_Probe+0xc8>)
 800c224:	617b      	str	r3, [r7, #20]
  io_ctx.ReadReg     = POS_I2C_ReadReg;
 800c226:	4b2b      	ldr	r3, [pc, #172]	; (800c2d4 <LIS2DW12_0_Probe+0xcc>)
 800c228:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.WriteReg    = POS_I2C_WriteReg;
 800c22a:	4b2b      	ldr	r3, [pc, #172]	; (800c2d8 <LIS2DW12_0_Probe+0xd0>)
 800c22c:	623b      	str	r3, [r7, #32]
  io_ctx.GetTick     = POS_GetTick;
 800c22e:	4b2b      	ldr	r3, [pc, #172]	; (800c2dc <LIS2DW12_0_Probe+0xd4>)
 800c230:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800c232:	f107 0310 	add.w	r3, r7, #16
 800c236:	4619      	mov	r1, r3
 800c238:	4829      	ldr	r0, [pc, #164]	; (800c2e0 <LIS2DW12_0_Probe+0xd8>)
 800c23a:	f7f5 fc1f 	bl	8001a7c <LIS2DW12_RegisterBusIO>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d003      	beq.n	800c24c <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c244:	f06f 0306 	mvn.w	r3, #6
 800c248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c24a:	e039      	b.n	800c2c0 <LIS2DW12_0_Probe+0xb8>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800c24c:	f107 030f 	add.w	r3, r7, #15
 800c250:	4619      	mov	r1, r3
 800c252:	4823      	ldr	r0, [pc, #140]	; (800c2e0 <LIS2DW12_0_Probe+0xd8>)
 800c254:	f7f5 fcfc 	bl	8001c50 <LIS2DW12_ReadID>
 800c258:	4603      	mov	r3, r0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d003      	beq.n	800c266 <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c25e:	f06f 0306 	mvn.w	r3, #6
 800c262:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c264:	e02c      	b.n	800c2c0 <LIS2DW12_0_Probe+0xb8>
  }
  else if (id != LIS2DW12_ID)
 800c266:	7bfb      	ldrb	r3, [r7, #15]
 800c268:	2b44      	cmp	r3, #68	; 0x44
 800c26a:	d003      	beq.n	800c274 <LIS2DW12_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c26c:	f06f 0306 	mvn.w	r3, #6
 800c270:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c272:	e025      	b.n	800c2c0 <LIS2DW12_0_Probe+0xb8>
  }
  else
  {
    PosMotionCompObj[ACC_LIS2DW12] = &lis2dw12_obj_0;
 800c274:	4b1b      	ldr	r3, [pc, #108]	; (800c2e4 <LIS2DW12_0_Probe+0xdc>)
 800c276:	4a1a      	ldr	r2, [pc, #104]	; (800c2e0 <LIS2DW12_0_Probe+0xd8>)
 800c278:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionDrv[ACC_LIS2DW12] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800c27a:	4b1b      	ldr	r3, [pc, #108]	; (800c2e8 <LIS2DW12_0_Probe+0xe0>)
 800c27c:	4a1b      	ldr	r2, [pc, #108]	; (800c2ec <LIS2DW12_0_Probe+0xe4>)
 800c27e:	60da      	str	r2, [r3, #12]

	/* The second cast (void *) is added to bypass Misra R11.3 rule */
	PosMotionFuncDrv[ACC_LIS2DW12] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2DW12_ACC_Driver;
 800c280:	4b1b      	ldr	r3, [pc, #108]	; (800c2f0 <LIS2DW12_0_Probe+0xe8>)
 800c282:	4a1c      	ldr	r2, [pc, #112]	; (800c2f4 <LIS2DW12_0_Probe+0xec>)
 800c284:	60da      	str	r2, [r3, #12]

	if (PosMotionDrv[ACC_LIS2DW12]->Init(PosMotionCompObj[ACC_LIS2DW12]) != LIS2DW12_OK)
 800c286:	4b18      	ldr	r3, [pc, #96]	; (800c2e8 <LIS2DW12_0_Probe+0xe0>)
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a15      	ldr	r2, [pc, #84]	; (800c2e4 <LIS2DW12_0_Probe+0xdc>)
 800c28e:	68d2      	ldr	r2, [r2, #12]
 800c290:	4610      	mov	r0, r2
 800c292:	4798      	blx	r3
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d003      	beq.n	800c2a2 <LIS2DW12_0_Probe+0x9a>
	{
		ret = BSP_ERROR_COMPONENT_FAILURE;
 800c29a:	f06f 0304 	mvn.w	r3, #4
 800c29e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2a0:	e00e      	b.n	800c2c0 <LIS2DW12_0_Probe+0xb8>
	}
	else
	{
		ret = BSP_ERROR_NONE;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (PosMotionFuncDrv[ACC_LIS2DW12]->Enable(PosMotionCompObj[ACC_LIS2DW12]) != LSM6DSO_OK)
 800c2a6:	4b12      	ldr	r3, [pc, #72]	; (800c2f0 <LIS2DW12_0_Probe+0xe8>)
 800c2a8:	68db      	ldr	r3, [r3, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a0d      	ldr	r2, [pc, #52]	; (800c2e4 <LIS2DW12_0_Probe+0xdc>)
 800c2ae:	68d2      	ldr	r2, [r2, #12]
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	4798      	blx	r3
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d002      	beq.n	800c2c0 <LIS2DW12_0_Probe+0xb8>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800c2ba:	f06f 0304 	mvn.w	r3, #4
 800c2be:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
	}
  }
  return ret;
 800c2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3730      	adds	r7, #48	; 0x30
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	080015f5 	.word	0x080015f5
 800c2d0:	08001659 	.word	0x08001659
 800c2d4:	0800170d 	.word	0x0800170d
 800c2d8:	080016a9 	.word	0x080016a9
 800c2dc:	08001771 	.word	0x08001771
 800c2e0:	20009024 	.word	0x20009024
 800c2e4:	2000bb18 	.word	0x2000bb18
 800c2e8:	20008fe4 	.word	0x20008fe4
 800c2ec:	2000122c 	.word	0x2000122c
 800c2f0:	20008fd4 	.word	0x20008fd4
 800c2f4:	2000123c 	.word	0x2000123c

0800c2f8 <LIS2MDL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2MDL_0_Probe(POS_MOTION_SENSORS sensor)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b08c      	sub	sp, #48	; 0x30
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	4603      	mov	r3, r0
 800c300:	71fb      	strb	r3, [r7, #7]

  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  int32_t                 ret = BSP_ERROR_NONE;
 800c302:	2300      	movs	r3, #0
 800c304:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the magneto driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800c306:	2300      	movs	r3, #0
 800c308:	61bb      	str	r3, [r7, #24]
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800c30a:	233d      	movs	r3, #61	; 0x3d
 800c30c:	773b      	strb	r3, [r7, #28]
  io_ctx.Init        = POS_I2C_Init;
 800c30e:	4b2b      	ldr	r3, [pc, #172]	; (800c3bc <LIS2MDL_0_Probe+0xc4>)
 800c310:	613b      	str	r3, [r7, #16]
  io_ctx.DeInit      = POS_I2C_DeInit;
 800c312:	4b2b      	ldr	r3, [pc, #172]	; (800c3c0 <LIS2MDL_0_Probe+0xc8>)
 800c314:	617b      	str	r3, [r7, #20]
  io_ctx.ReadReg     = POS_I2C_ReadReg;
 800c316:	4b2b      	ldr	r3, [pc, #172]	; (800c3c4 <LIS2MDL_0_Probe+0xcc>)
 800c318:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.WriteReg    = POS_I2C_WriteReg;
 800c31a:	4b2b      	ldr	r3, [pc, #172]	; (800c3c8 <LIS2MDL_0_Probe+0xd0>)
 800c31c:	623b      	str	r3, [r7, #32]
  io_ctx.GetTick     = POS_GetTick;
 800c31e:	4b2b      	ldr	r3, [pc, #172]	; (800c3cc <LIS2MDL_0_Probe+0xd4>)
 800c320:	62bb      	str	r3, [r7, #40]	; 0x28

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800c322:	f107 0310 	add.w	r3, r7, #16
 800c326:	4619      	mov	r1, r3
 800c328:	4829      	ldr	r0, [pc, #164]	; (800c3d0 <LIS2MDL_0_Probe+0xd8>)
 800c32a:	f7f6 fef7 	bl	800311c <LIS2MDL_RegisterBusIO>
 800c32e:	4603      	mov	r3, r0
 800c330:	2b00      	cmp	r3, #0
 800c332:	d003      	beq.n	800c33c <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c334:	f06f 0306 	mvn.w	r3, #6
 800c338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c33a:	e039      	b.n	800c3b0 <LIS2MDL_0_Probe+0xb8>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800c33c:	f107 030f 	add.w	r3, r7, #15
 800c340:	4619      	mov	r1, r3
 800c342:	4823      	ldr	r0, [pc, #140]	; (800c3d0 <LIS2MDL_0_Probe+0xd8>)
 800c344:	f7f6 ffb3 	bl	80032ae <LIS2MDL_ReadID>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d003      	beq.n	800c356 <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c34e:	f06f 0306 	mvn.w	r3, #6
 800c352:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c354:	e02c      	b.n	800c3b0 <LIS2MDL_0_Probe+0xb8>
  }
  else if (id != LIS2MDL_ID)
 800c356:	7bfb      	ldrb	r3, [r7, #15]
 800c358:	2b40      	cmp	r3, #64	; 0x40
 800c35a:	d003      	beq.n	800c364 <LIS2MDL_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c35c:	f06f 0306 	mvn.w	r3, #6
 800c360:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c362:	e025      	b.n	800c3b0 <LIS2MDL_0_Probe+0xb8>
  }
  else
  {

    PosMotionCompObj[MAG_LIS2MDL] = &lis2mdl_obj_0;
 800c364:	4b1b      	ldr	r3, [pc, #108]	; (800c3d4 <LIS2MDL_0_Probe+0xdc>)
 800c366:	4a1a      	ldr	r2, [pc, #104]	; (800c3d0 <LIS2MDL_0_Probe+0xd8>)
 800c368:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionDrv[MAG_LIS2MDL] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800c36a:	4b1b      	ldr	r3, [pc, #108]	; (800c3d8 <LIS2MDL_0_Probe+0xe0>)
 800c36c:	4a1b      	ldr	r2, [pc, #108]	; (800c3dc <LIS2MDL_0_Probe+0xe4>)
 800c36e:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    PosMotionFuncDrv[MAG_LIS2MDL] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2MDL_MAG_Driver;
 800c370:	4b1b      	ldr	r3, [pc, #108]	; (800c3e0 <LIS2MDL_0_Probe+0xe8>)
 800c372:	4a1c      	ldr	r2, [pc, #112]	; (800c3e4 <LIS2MDL_0_Probe+0xec>)
 800c374:	609a      	str	r2, [r3, #8]

    if (PosMotionDrv[MAG_LIS2MDL]->Init(PosMotionCompObj[MAG_LIS2MDL]) != LIS2MDL_OK)
 800c376:	4b18      	ldr	r3, [pc, #96]	; (800c3d8 <LIS2MDL_0_Probe+0xe0>)
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a15      	ldr	r2, [pc, #84]	; (800c3d4 <LIS2MDL_0_Probe+0xdc>)
 800c37e:	6892      	ldr	r2, [r2, #8]
 800c380:	4610      	mov	r0, r2
 800c382:	4798      	blx	r3
 800c384:	4603      	mov	r3, r0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d003      	beq.n	800c392 <LIS2MDL_0_Probe+0x9a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c38a:	f06f 0304 	mvn.w	r3, #4
 800c38e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c390:	e00e      	b.n	800c3b0 <LIS2MDL_0_Probe+0xb8>
    }
	else
	{
		ret = BSP_ERROR_NONE;
 800c392:	2300      	movs	r3, #0
 800c394:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (PosMotionFuncDrv[MAG_LIS2MDL]->Enable(PosMotionCompObj[MAG_LIS2MDL]) != LSM6DSO_OK)
 800c396:	4b12      	ldr	r3, [pc, #72]	; (800c3e0 <LIS2MDL_0_Probe+0xe8>)
 800c398:	689b      	ldr	r3, [r3, #8]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	4a0d      	ldr	r2, [pc, #52]	; (800c3d4 <LIS2MDL_0_Probe+0xdc>)
 800c39e:	6892      	ldr	r2, [r2, #8]
 800c3a0:	4610      	mov	r0, r2
 800c3a2:	4798      	blx	r3
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d002      	beq.n	800c3b0 <LIS2MDL_0_Probe+0xb8>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 800c3aa:	f06f 0304 	mvn.w	r3, #4
 800c3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
	}
  }
  return ret;
 800c3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3730      	adds	r7, #48	; 0x30
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	080015f5 	.word	0x080015f5
 800c3c0:	08001659 	.word	0x08001659
 800c3c4:	0800170d 	.word	0x0800170d
 800c3c8:	080016a9 	.word	0x080016a9
 800c3cc:	08001771 	.word	0x08001771
 800c3d0:	20009058 	.word	0x20009058
 800c3d4:	2000bb18 	.word	0x2000bb18
 800c3d8:	20008fe4 	.word	0x20008fe4
 800c3dc:	20001260 	.word	0x20001260
 800c3e0:	20008fd4 	.word	0x20008fd4
 800c3e4:	20001270 	.word	0x20001270

0800c3e8 <quaternionsMult>:
 800c3e8:	ed90 4a01 	vldr	s8, [r0, #4]
 800c3ec:	edd1 7a01 	vldr	s15, [r1, #4]
 800c3f0:	edd0 4a00 	vldr	s9, [r0]
 800c3f4:	ed91 5a00 	vldr	s10, [r1]
 800c3f8:	edd0 5a02 	vldr	s11, [r0, #8]
 800c3fc:	ed91 6a02 	vldr	s12, [r1, #8]
 800c400:	edd0 6a03 	vldr	s13, [r0, #12]
 800c404:	ed91 7a03 	vldr	s14, [r1, #12]
 800c408:	ee67 7ac4 	vnmul.f32	s15, s15, s8
 800c40c:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c410:	eee5 7ac6 	vfms.f32	s15, s11, s12
 800c414:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c418:	edc2 7a00 	vstr	s15, [r2]
 800c41c:	ed91 4a00 	vldr	s8, [r1]
 800c420:	edd0 7a01 	vldr	s15, [r0, #4]
 800c424:	edd0 4a00 	vldr	s9, [r0]
 800c428:	ed91 5a01 	vldr	s10, [r1, #4]
 800c42c:	edd0 5a02 	vldr	s11, [r0, #8]
 800c430:	ed91 6a03 	vldr	s12, [r1, #12]
 800c434:	edd0 6a03 	vldr	s13, [r0, #12]
 800c438:	ed91 7a02 	vldr	s14, [r1, #8]
 800c43c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c440:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c444:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c448:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c44c:	edc2 7a01 	vstr	s15, [r2, #4]
 800c450:	ed91 4a00 	vldr	s8, [r1]
 800c454:	edd0 7a02 	vldr	s15, [r0, #8]
 800c458:	edd0 4a00 	vldr	s9, [r0]
 800c45c:	ed91 5a02 	vldr	s10, [r1, #8]
 800c460:	ed91 6a01 	vldr	s12, [r1, #4]
 800c464:	edd0 5a03 	vldr	s11, [r0, #12]
 800c468:	edd0 6a01 	vldr	s13, [r0, #4]
 800c46c:	ed91 7a03 	vldr	s14, [r1, #12]
 800c470:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c474:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c478:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c47c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c480:	edc2 7a02 	vstr	s15, [r2, #8]
 800c484:	edd0 7a01 	vldr	s15, [r0, #4]
 800c488:	ed91 4a02 	vldr	s8, [r1, #8]
 800c48c:	edd0 4a00 	vldr	s9, [r0]
 800c490:	ed91 5a03 	vldr	s10, [r1, #12]
 800c494:	edd0 6a02 	vldr	s13, [r0, #8]
 800c498:	edd0 5a03 	vldr	s11, [r0, #12]
 800c49c:	ed91 6a00 	vldr	s12, [r1]
 800c4a0:	ed91 7a01 	vldr	s14, [r1, #4]
 800c4a4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c4a8:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c4ac:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c4b0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c4b4:	edc2 7a03 	vstr	s15, [r2, #12]
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop

0800c4bc <MotionEC_Initialize>:
 800c4bc:	4a3a      	ldr	r2, [pc, #232]	; (800c5a8 <MotionEC_Initialize+0xec>)
 800c4be:	493b      	ldr	r1, [pc, #236]	; (800c5ac <MotionEC_Initialize+0xf0>)
 800c4c0:	6813      	ldr	r3, [r2, #0]
 800c4c2:	f023 0301 	bic.w	r3, r3, #1
 800c4c6:	b410      	push	{r4}
 800c4c8:	6013      	str	r3, [r2, #0]
 800c4ca:	680b      	ldr	r3, [r1, #0]
 800c4cc:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800c4d0:	4013      	ands	r3, r2
 800c4d2:	f24c 2440 	movw	r4, #49728	; 0xc240
 800c4d6:	42a3      	cmp	r3, r4
 800c4d8:	d013      	beq.n	800c502 <MotionEC_Initialize+0x46>
 800c4da:	680b      	ldr	r3, [r1, #0]
 800c4dc:	f24c 2170 	movw	r1, #49776	; 0xc270
 800c4e0:	4013      	ands	r3, r2
 800c4e2:	428b      	cmp	r3, r1
 800c4e4:	d00d      	beq.n	800c502 <MotionEC_Initialize+0x46>
 800c4e6:	4b32      	ldr	r3, [pc, #200]	; (800c5b0 <MotionEC_Initialize+0xf4>)
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	601a      	str	r2, [r3, #0]
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	2a00      	cmp	r2, #0
 800c4f0:	d1fc      	bne.n	800c4ec <MotionEC_Initialize+0x30>
 800c4f2:	4b30      	ldr	r3, [pc, #192]	; (800c5b4 <MotionEC_Initialize+0xf8>)
 800c4f4:	4a30      	ldr	r2, [pc, #192]	; (800c5b8 <MotionEC_Initialize+0xfc>)
 800c4f6:	601a      	str	r2, [r3, #0]
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	4b30      	ldr	r3, [pc, #192]	; (800c5bc <MotionEC_Initialize+0x100>)
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d01f      	beq.n	800c540 <MotionEC_Initialize+0x84>
 800c500:	e7fe      	b.n	800c500 <MotionEC_Initialize+0x44>
 800c502:	4b2f      	ldr	r3, [pc, #188]	; (800c5c0 <MotionEC_Initialize+0x104>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d1ed      	bne.n	800c4e6 <MotionEC_Initialize+0x2a>
 800c50a:	4a2e      	ldr	r2, [pc, #184]	; (800c5c4 <MotionEC_Initialize+0x108>)
 800c50c:	6813      	ldr	r3, [r2, #0]
 800c50e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c512:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c516:	d006      	beq.n	800c526 <MotionEC_Initialize+0x6a>
 800c518:	6813      	ldr	r3, [r2, #0]
 800c51a:	f240 4283 	movw	r2, #1155	; 0x483
 800c51e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c522:	4293      	cmp	r3, r2
 800c524:	d1df      	bne.n	800c4e6 <MotionEC_Initialize+0x2a>
 800c526:	4b28      	ldr	r3, [pc, #160]	; (800c5c8 <MotionEC_Initialize+0x10c>)
 800c528:	2201      	movs	r2, #1
 800c52a:	601a      	str	r2, [r3, #0]
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	2a00      	cmp	r2, #0
 800c530:	d1fc      	bne.n	800c52c <MotionEC_Initialize+0x70>
 800c532:	4b26      	ldr	r3, [pc, #152]	; (800c5cc <MotionEC_Initialize+0x110>)
 800c534:	4a20      	ldr	r2, [pc, #128]	; (800c5b8 <MotionEC_Initialize+0xfc>)
 800c536:	601a      	str	r2, [r3, #0]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	4b20      	ldr	r3, [pc, #128]	; (800c5bc <MotionEC_Initialize+0x100>)
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d1df      	bne.n	800c500 <MotionEC_Initialize+0x44>
 800c540:	edd0 6a00 	vldr	s13, [r0]
 800c544:	4822      	ldr	r0, [pc, #136]	; (800c5d0 <MotionEC_Initialize+0x114>)
 800c546:	4a23      	ldr	r2, [pc, #140]	; (800c5d4 <MotionEC_Initialize+0x118>)
 800c548:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c54c:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 800c550:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800c554:	4601      	mov	r1, r0
 800c556:	2301      	movs	r3, #1
 800c558:	f801 3b04 	strb.w	r3, [r1], #4
 800c55c:	f100 0410 	add.w	r4, r0, #16
 800c560:	7313      	strb	r3, [r2, #12]
 800c562:	2300      	movs	r3, #0
 800c564:	6043      	str	r3, [r0, #4]
 800c566:	6103      	str	r3, [r0, #16]
 800c568:	e9c1 3301 	strd	r3, r3, [r1, #4]
 800c56c:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800c570:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800c574:	e9c2 3305 	strd	r3, r3, [r2, #20]
 800c578:	e9c2 330a 	strd	r3, r3, [r2, #40]	; 0x28
 800c57c:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 800c580:	6113      	str	r3, [r2, #16]
 800c582:	6253      	str	r3, [r2, #36]	; 0x24
 800c584:	63d3      	str	r3, [r2, #60]	; 0x3c
 800c586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c58a:	edc2 7a07 	vstr	s15, [r2, #28]
 800c58e:	edc2 7a08 	vstr	s15, [r2, #32]
 800c592:	edc2 7a0c 	vstr	s15, [r2, #48]	; 0x30
 800c596:	edc2 7a10 	vstr	s15, [r2, #64]	; 0x40
 800c59a:	ed82 6a02 	vstr	s12, [r2, #8]
 800c59e:	ed82 7a00 	vstr	s14, [r2]
 800c5a2:	ed82 7a01 	vstr	s14, [r2, #4]
 800c5a6:	4770      	bx	lr
 800c5a8:	e0002000 	.word	0xe0002000
 800c5ac:	e000ed00 	.word	0xe000ed00
 800c5b0:	40023008 	.word	0x40023008
 800c5b4:	40023000 	.word	0x40023000
 800c5b8:	f407a5c2 	.word	0xf407a5c2
 800c5bc:	b5e8b5cd 	.word	0xb5e8b5cd
 800c5c0:	e0042000 	.word	0xe0042000
 800c5c4:	5c001000 	.word	0x5c001000
 800c5c8:	58024c08 	.word	0x58024c08
 800c5cc:	58024c00 	.word	0x58024c00
 800c5d0:	200014f4 	.word	0x200014f4
 800c5d4:	20000000 	.word	0x20000000

0800c5d8 <MotionEC_Run>:
 800c5d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5dc:	ed2d 8b10 	vpush	{d8-d15}
 800c5e0:	4c04      	ldr	r4, [pc, #16]	; (800c5f4 <MotionEC_Run+0x1c>)
 800c5e2:	7823      	ldrb	r3, [r4, #0]
 800c5e4:	b09f      	sub	sp, #124	; 0x7c
 800c5e6:	b93b      	cbnz	r3, 800c5f8 <MotionEC_Run+0x20>
 800c5e8:	b01f      	add	sp, #124	; 0x7c
 800c5ea:	ecbd 8b10 	vpop	{d8-d15}
 800c5ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5f2:	bf00      	nop
 800c5f4:	200014f4 	.word	0x200014f4
 800c5f8:	4607      	mov	r7, r0
 800c5fa:	460d      	mov	r5, r1
 800c5fc:	6800      	ldr	r0, [r0, #0]
 800c5fe:	6879      	ldr	r1, [r7, #4]
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	4ef7      	ldr	r6, [pc, #988]	; (800c9e0 <MotionEC_Run+0x408>)
 800c604:	f10d 0910 	add.w	r9, sp, #16
 800c608:	464b      	mov	r3, r9
 800c60a:	c307      	stmia	r3!, {r0, r1, r2}
 800c60c:	ed9d ba05 	vldr	s22, [sp, #20]
 800c610:	eddd ba04 	vldr	s23, [sp, #16]
 800c614:	eddd 9a06 	vldr	s19, [sp, #24]
 800c618:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 800c61c:	463b      	mov	r3, r7
 800c61e:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800c622:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 800c626:	f10d 081c 	add.w	r8, sp, #28
 800c62a:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800c62e:	689a      	ldr	r2, [r3, #8]
 800c630:	6859      	ldr	r1, [r3, #4]
 800c632:	4643      	mov	r3, r8
 800c634:	c307      	stmia	r3!, {r0, r1, r2}
 800c636:	ee17 0a90 	vmov	r0, s15
 800c63a:	f7f3 ff8d 	bl	8000558 <__aeabi_f2d>
 800c63e:	ec41 0b10 	vmov	d0, r0, r1
 800c642:	f004 f8c3 	bl	80107cc <sqrt>
 800c646:	ec51 0b10 	vmov	r0, r1, d0
 800c64a:	f7f4 fab5 	bl	8000bb8 <__aeabi_d2f>
 800c64e:	ed9d 8a08 	vldr	s16, [sp, #32]
 800c652:	ed9d 9a07 	vldr	s18, [sp, #28]
 800c656:	eddd 8a09 	vldr	s17, [sp, #36]	; 0x24
 800c65a:	ee68 7a08 	vmul.f32	s15, s16, s16
 800c65e:	ee0a 0a10 	vmov	s20, r0
 800c662:	eee9 7a09 	vfma.f32	s15, s18, s18
 800c666:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800c66a:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800c66e:	eecc aa0a 	vdiv.f32	s21, s24, s20
 800c672:	ee17 0a90 	vmov	r0, s15
 800c676:	f7f3 ff6f 	bl	8000558 <__aeabi_f2d>
 800c67a:	ec41 0b10 	vmov	d0, r0, r1
 800c67e:	f004 f8a5 	bl	80107cc <sqrt>
 800c682:	ec51 0b10 	vmov	r0, r1, d0
 800c686:	f7f4 fa97 	bl	8000bb8 <__aeabi_d2f>
 800c68a:	ee07 0a90 	vmov	s15, r0
 800c68e:	eecc 7a27 	vdiv.f32	s15, s24, s15
 800c692:	7b33      	ldrb	r3, [r6, #12]
 800c694:	ee6b baaa 	vmul.f32	s23, s23, s21
 800c698:	ee29 9a27 	vmul.f32	s18, s18, s15
 800c69c:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c6a0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800c6a4:	ee69 9aaa 	vmul.f32	s19, s19, s21
 800c6a8:	ee6b 7a2a 	vmul.f32	s15, s22, s21
 800c6ac:	ed8d 9a07 	vstr	s18, [sp, #28]
 800c6b0:	ed8d 8a08 	vstr	s16, [sp, #32]
 800c6b4:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 800c6b8:	edcd ba04 	vstr	s23, [sp, #16]
 800c6bc:	edcd 7a05 	vstr	s15, [sp, #20]
 800c6c0:	edcd 9a06 	vstr	s19, [sp, #24]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f040 822f 	bne.w	800cb28 <MotionEC_Run+0x550>
 800c6ca:	ee7a 6a4c 	vsub.f32	s13, s20, s24
 800c6ce:	ed96 7a01 	vldr	s14, [r6, #4]
 800c6d2:	ed96 5a00 	vldr	s10, [r6]
 800c6d6:	edd4 2a04 	vldr	s5, [r4, #16]
 800c6da:	ed94 3a05 	vldr	s6, [r4, #20]
 800c6de:	edd4 3a06 	vldr	s7, [r4, #24]
 800c6e2:	ed94 4a01 	vldr	s8, [r4, #4]
 800c6e6:	edd4 4a02 	vldr	s9, [r4, #8]
 800c6ea:	eef0 6ae6 	vabs.f32	s13, s13
 800c6ee:	ee7c 6a66 	vsub.f32	s13, s24, s13
 800c6f2:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
 800c6f6:	ee26 6a87 	vmul.f32	s12, s13, s14
 800c6fa:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c6fe:	ee66 6a85 	vmul.f32	s13, s13, s10
 800c702:	ee25 5a25 	vmul.f32	s10, s10, s11
 800c706:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800c70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c70e:	eeb4 5ae6 	vcmpe.f32	s10, s13
 800c712:	bfb8      	it	lt
 800c714:	eeb0 7a46 	vmovlt.f32	s14, s12
 800c718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c71c:	bfa8      	it	ge
 800c71e:	eef0 6a45 	vmovge.f32	s13, s10
 800c722:	ee27 9a09 	vmul.f32	s18, s14, s18
 800c726:	ee27 8a08 	vmul.f32	s16, s14, s16
 800c72a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800c72e:	ee26 6aab 	vmul.f32	s12, s13, s23
 800c732:	ee3c 7a47 	vsub.f32	s14, s24, s14
 800c736:	ee7c 5a66 	vsub.f32	s11, s24, s13
 800c73a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c73e:	ee69 9aa6 	vmul.f32	s19, s19, s13
 800c742:	edd4 6a03 	vldr	s13, [r4, #12]
 800c746:	eea7 9a22 	vfma.f32	s18, s14, s5
 800c74a:	eea7 8a03 	vfma.f32	s16, s14, s6
 800c74e:	eee7 8a23 	vfma.f32	s17, s14, s7
 800c752:	eeb0 7a46 	vmov.f32	s14, s12
 800c756:	eea5 7a84 	vfma.f32	s14, s11, s8
 800c75a:	eee5 7aa4 	vfma.f32	s15, s11, s9
 800c75e:	eee5 9aa6 	vfma.f32	s19, s11, s13
 800c762:	ed84 9a04 	vstr	s18, [r4, #16]
 800c766:	ed84 8a05 	vstr	s16, [r4, #20]
 800c76a:	edc4 8a06 	vstr	s17, [r4, #24]
 800c76e:	ed84 7a01 	vstr	s14, [r4, #4]
 800c772:	edc4 7a02 	vstr	s15, [r4, #8]
 800c776:	edc4 9a03 	vstr	s19, [r4, #12]
 800c77a:	eef0 aa47 	vmov.f32	s21, s14
 800c77e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c782:	ee28 8a08 	vmul.f32	s16, s16, s16
 800c786:	eee7 7a07 	vfma.f32	s15, s14, s14
 800c78a:	eea9 8a09 	vfma.f32	s16, s18, s18
 800c78e:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800c792:	eea8 8aa8 	vfma.f32	s16, s17, s17
 800c796:	ee17 0a90 	vmov	r0, s15
 800c79a:	f7f3 fedd 	bl	8000558 <__aeabi_f2d>
 800c79e:	ec41 0b10 	vmov	d0, r0, r1
 800c7a2:	f004 f813 	bl	80107cc <sqrt>
 800c7a6:	ee18 0a10 	vmov	r0, s16
 800c7aa:	ec59 8b10 	vmov	r8, r9, d0
 800c7ae:	f7f3 fed3 	bl	8000558 <__aeabi_f2d>
 800c7b2:	ec41 0b10 	vmov	d0, r0, r1
 800c7b6:	f004 f809 	bl	80107cc <sqrt>
 800c7ba:	4649      	mov	r1, r9
 800c7bc:	4640      	mov	r0, r8
 800c7be:	ed8d 0b00 	vstr	d0, [sp]
 800c7c2:	f7f4 f9f9 	bl	8000bb8 <__aeabi_d2f>
 800c7c6:	ed9d 0b00 	vldr	d0, [sp]
 800c7ca:	ee07 0a90 	vmov	s15, r0
 800c7ce:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 800c7d2:	ec51 0b10 	vmov	r0, r1, d0
 800c7d6:	ee8b 9aa7 	vdiv.f32	s18, s23, s15
 800c7da:	f7f4 f9ed 	bl	8000bb8 <__aeabi_d2f>
 800c7de:	ee07 0a90 	vmov	s15, r0
 800c7e2:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 800c7e6:	edd4 6a04 	vldr	s13, [r4, #16]
 800c7ea:	edd4 8a03 	vldr	s17, [r4, #12]
 800c7ee:	edd4 5a02 	vldr	s11, [r4, #8]
 800c7f2:	ed94 7a06 	vldr	s14, [r4, #24]
 800c7f6:	ed94 6a05 	vldr	s12, [r4, #20]
 800c7fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c7fe:	ee69 8a28 	vmul.f32	s17, s18, s17
 800c802:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c806:	ee69 aa2a 	vmul.f32	s21, s18, s21
 800c80a:	ee66 9ae8 	vnmul.f32	s19, s13, s17
 800c80e:	ee29 9a25 	vmul.f32	s18, s18, s11
 800c812:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c816:	eee7 9a2a 	vfma.f32	s19, s14, s21
 800c81a:	ee29 8a47 	vnmul.f32	s16, s18, s14
 800c81e:	ee27 aaea 	vnmul.f32	s20, s15, s21
 800c822:	eea8 8aa7 	vfma.f32	s16, s17, s15
 800c826:	ee29 6aa9 	vmul.f32	s12, s19, s19
 800c82a:	eea9 aa26 	vfma.f32	s20, s18, s13
 800c82e:	eea8 6a08 	vfma.f32	s12, s16, s16
 800c832:	edc4 7a05 	vstr	s15, [r4, #20]
 800c836:	eeaa 6a0a 	vfma.f32	s12, s20, s20
 800c83a:	ed84 7a06 	vstr	s14, [r4, #24]
 800c83e:	edc4 6a04 	vstr	s13, [r4, #16]
 800c842:	ee16 0a10 	vmov	r0, s12
 800c846:	edc4 8a03 	vstr	s17, [r4, #12]
 800c84a:	edc4 aa01 	vstr	s21, [r4, #4]
 800c84e:	ed84 9a02 	vstr	s18, [r4, #8]
 800c852:	f7f3 fe81 	bl	8000558 <__aeabi_f2d>
 800c856:	ec41 0b10 	vmov	d0, r0, r1
 800c85a:	f003 ffb7 	bl	80107cc <sqrt>
 800c85e:	ec51 0b10 	vmov	r0, r1, d0
 800c862:	f7f4 f9a9 	bl	8000bb8 <__aeabi_d2f>
 800c866:	ee07 0a90 	vmov	s15, r0
 800c86a:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 800c86e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c872:	ee2a aa27 	vmul.f32	s20, s20, s15
 800c876:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c87a:	ee2a baca 	vnmul.f32	s22, s21, s20
 800c87e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800c882:	eea8 ba28 	vfma.f32	s22, s16, s17
 800c886:	ee29 cae8 	vnmul.f32	s24, s19, s17
 800c88a:	ee78 7a4b 	vsub.f32	s15, s16, s22
 800c88e:	ee69 ca48 	vnmul.f32	s25, s18, s16
 800c892:	ee77 7ae8 	vsub.f32	s15, s15, s17
 800c896:	eeaa ca09 	vfma.f32	s24, s20, s18
 800c89a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8a2:	eee9 caaa 	vfma.f32	s25, s19, s21
 800c8a6:	f2c0 815b 	blt.w	800cb60 <MotionEC_Run+0x588>
 800c8aa:	ee77 7aab 	vadd.f32	s15, s15, s23
 800c8ae:	ee17 0a90 	vmov	r0, s15
 800c8b2:	f7f3 fe51 	bl	8000558 <__aeabi_f2d>
 800c8b6:	ec41 0b10 	vmov	d0, r0, r1
 800c8ba:	f003 ff87 	bl	80107cc <sqrt>
 800c8be:	2200      	movs	r2, #0
 800c8c0:	4b48      	ldr	r3, [pc, #288]	; (800c9e4 <MotionEC_Run+0x40c>)
 800c8c2:	ec51 0b10 	vmov	r0, r1, d0
 800c8c6:	f7f3 fe9f 	bl	8000608 <__aeabi_dmul>
 800c8ca:	ee79 7a6c 	vsub.f32	s15, s18, s25
 800c8ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8d6:	da02      	bge.n	800c8de <MotionEC_Run+0x306>
 800c8d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8dc:	4619      	mov	r1, r3
 800c8de:	f7f4 f96b 	bl	8000bb8 <__aeabi_d2f>
 800c8e2:	ee7b 7a48 	vsub.f32	s15, s22, s16
 800c8e6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c8ea:	ee77 7ae8 	vsub.f32	s15, s15, s17
 800c8ee:	ee0b 0a90 	vmov	s23, r0
 800c8f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8fa:	6028      	str	r0, [r5, #0]
 800c8fc:	f2c0 8136 	blt.w	800cb6c <MotionEC_Run+0x594>
 800c900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c904:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c908:	ee17 0a90 	vmov	r0, s15
 800c90c:	f7f3 fe24 	bl	8000558 <__aeabi_f2d>
 800c910:	ec41 0b10 	vmov	d0, r0, r1
 800c914:	f003 ff5a 	bl	80107cc <sqrt>
 800c918:	2200      	movs	r2, #0
 800c91a:	4b32      	ldr	r3, [pc, #200]	; (800c9e4 <MotionEC_Run+0x40c>)
 800c91c:	ec51 0b10 	vmov	r0, r1, d0
 800c920:	f7f3 fe72 	bl	8000608 <__aeabi_dmul>
 800c924:	ee7a 7a6a 	vsub.f32	s15, s20, s21
 800c928:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c930:	da02      	bge.n	800c938 <MotionEC_Run+0x360>
 800c932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c936:	4619      	mov	r1, r3
 800c938:	f7f4 f93e 	bl	8000bb8 <__aeabi_d2f>
 800c93c:	ee78 7ac8 	vsub.f32	s15, s17, s16
 800c940:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c944:	ee77 7acb 	vsub.f32	s15, s15, s22
 800c948:	ee0d 0a10 	vmov	s26, r0
 800c94c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c954:	6068      	str	r0, [r5, #4]
 800c956:	f2c0 8106 	blt.w	800cb66 <MotionEC_Run+0x58e>
 800c95a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c95e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c962:	ee17 0a90 	vmov	r0, s15
 800c966:	f7f3 fdf7 	bl	8000558 <__aeabi_f2d>
 800c96a:	ec41 0b10 	vmov	d0, r0, r1
 800c96e:	f003 ff2d 	bl	80107cc <sqrt>
 800c972:	2200      	movs	r2, #0
 800c974:	4b1b      	ldr	r3, [pc, #108]	; (800c9e4 <MotionEC_Run+0x40c>)
 800c976:	ec51 0b10 	vmov	r0, r1, d0
 800c97a:	f7f3 fe45 	bl	8000608 <__aeabi_dmul>
 800c97e:	ee7c 7a69 	vsub.f32	s15, s24, s19
 800c982:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c98a:	da02      	bge.n	800c992 <MotionEC_Run+0x3ba>
 800c98c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c990:	4619      	mov	r1, r3
 800c992:	f7f4 f911 	bl	8000bb8 <__aeabi_d2f>
 800c996:	ee78 7a28 	vadd.f32	s15, s16, s17
 800c99a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c99e:	ee77 7a8b 	vadd.f32	s15, s15, s22
 800c9a2:	ee0d 0a90 	vmov	s27, r0
 800c9a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9ae:	60a8      	str	r0, [r5, #8]
 800c9b0:	f2c0 81c3 	blt.w	800cd3a <MotionEC_Run+0x762>
 800c9b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c9bc:	ee17 0a90 	vmov	r0, s15
 800c9c0:	f7f3 fdca 	bl	8000558 <__aeabi_f2d>
 800c9c4:	ec41 0b10 	vmov	d0, r0, r1
 800c9c8:	f003 ff00 	bl	80107cc <sqrt>
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	4b05      	ldr	r3, [pc, #20]	; (800c9e4 <MotionEC_Run+0x40c>)
 800c9d0:	ec51 0b10 	vmov	r0, r1, d0
 800c9d4:	f7f3 fe18 	bl	8000608 <__aeabi_dmul>
 800c9d8:	f7f4 f8ee 	bl	8000bb8 <__aeabi_d2f>
 800c9dc:	e006      	b.n	800c9ec <MotionEC_Run+0x414>
 800c9de:	bf00      	nop
 800c9e0:	20000000 	.word	0x20000000
 800c9e4:	3fe00000 	.word	0x3fe00000
 800c9e8:	42652edf 	.word	0x42652edf
 800c9ec:	ee0e 0a10 	vmov	s28, r0
 800c9f0:	7fe3      	ldrb	r3, [r4, #31]
 800c9f2:	ed85 ea03 	vstr	s28, [r5, #12]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f040 8116 	bne.w	800cc28 <MotionEC_Run+0x650>
 800c9fc:	7f23      	ldrb	r3, [r4, #28]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d06a      	beq.n	800cad8 <MotionEC_Run+0x500>
 800ca02:	ed96 5a0d 	vldr	s10, [r6, #52]	; 0x34
 800ca06:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 800ca0a:	edd6 5a10 	vldr	s11, [r6, #64]	; 0x40
 800ca0e:	ed97 6a06 	vldr	s12, [r7, #24]
 800ca12:	edd6 4a0b 	vldr	s9, [r6, #44]	; 0x2c
 800ca16:	ed96 4a0e 	vldr	s8, [r6, #56]	; 0x38
 800ca1a:	ed86 9a0d 	vstr	s18, [r6, #52]	; 0x34
 800ca1e:	ee65 6a68 	vnmul.f32	s13, s10, s17
 800ca22:	ee29 7a67 	vnmul.f32	s14, s18, s15
 800ca26:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800ca2a:	eea5 7a2a 	vfma.f32	s14, s10, s21
 800ca2e:	eee5 6a89 	vfma.f32	s13, s11, s18
 800ca32:	eee5 7aea 	vfms.f32	s15, s11, s21
 800ca36:	ed96 5a08 	vldr	s10, [r6, #32]
 800ca3a:	edc6 aa0a 	vstr	s21, [r6, #40]	; 0x28
 800ca3e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ca42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca46:	eee5 7a0a 	vfma.f32	s15, s10, s20
 800ca4a:	eea8 7a24 	vfma.f32	s14, s16, s9
 800ca4e:	eee9 6a84 	vfma.f32	s13, s19, s8
 800ca52:	bf0c      	ite	eq
 800ca54:	ed96 6a02 	vldreq	s12, [r6, #8]
 800ca58:	ed86 6a02 	vstrne	s12, [r6, #8]
 800ca5c:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800ca60:	eec3 5a86 	vdiv.f32	s11, s7, s12
 800ca64:	eee4 6aca 	vfms.f32	s13, s9, s20
 800ca68:	eea9 7ac5 	vfms.f32	s14, s19, s10
 800ca6c:	eee8 7a44 	vfms.f32	s15, s16, s8
 800ca70:	edd6 4a0f 	vldr	s9, [r6, #60]	; 0x3c
 800ca74:	ed96 6a09 	vldr	s12, [r6, #36]	; 0x24
 800ca78:	ed96 5a0c 	vldr	s10, [r6, #48]	; 0x30
 800ca7c:	ed86 aa0e 	vstr	s20, [r6, #56]	; 0x38
 800ca80:	eeec 7a86 	vfma.f32	s15, s25, s12
 800ca84:	eeeb 6a24 	vfma.f32	s13, s22, s9
 800ca88:	eeac 7a05 	vfma.f32	s14, s24, s10
 800ca8c:	eeec 7a64 	vfms.f32	s15, s24, s9
 800ca90:	eeab 7a46 	vfms.f32	s14, s22, s12
 800ca94:	eeec 6ac5 	vfms.f32	s13, s25, s10
 800ca98:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 800c9e8 <MotionEC_Run+0x410>
 800ca9c:	ed86 8a08 	vstr	s16, [r6, #32]
 800caa0:	ee66 6a86 	vmul.f32	s13, s13, s12
 800caa4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800caa8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800caac:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800cab0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cab4:	ee27 7a25 	vmul.f32	s14, s14, s11
 800cab8:	edc5 6a07 	vstr	s13, [r5, #28]
 800cabc:	edc5 7a08 	vstr	s15, [r5, #32]
 800cac0:	edc6 9a0b 	vstr	s19, [r6, #44]	; 0x2c
 800cac4:	ed86 ca09 	vstr	s24, [r6, #36]	; 0x24
 800cac8:	ed86 ba0c 	vstr	s22, [r6, #48]	; 0x30
 800cacc:	ed85 7a09 	vstr	s14, [r5, #36]	; 0x24
 800cad0:	edc6 ca0f 	vstr	s25, [r6, #60]	; 0x3c
 800cad4:	edc6 8a10 	vstr	s17, [r6, #64]	; 0x40
 800cad8:	7f63      	ldrb	r3, [r4, #29]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d149      	bne.n	800cb72 <MotionEC_Run+0x59a>
 800cade:	7fa3      	ldrb	r3, [r4, #30]
 800cae0:	b1bb      	cbz	r3, 800cb12 <MotionEC_Run+0x53a>
 800cae2:	edd7 6a00 	vldr	s13, [r7]
 800cae6:	ed97 7a01 	vldr	s14, [r7, #4]
 800caea:	edd7 7a02 	vldr	s15, [r7, #8]
 800caee:	ed95 5a0a 	vldr	s10, [r5, #40]	; 0x28
 800caf2:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 800caf6:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 800cafa:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800cafe:	ee37 7a65 	vsub.f32	s14, s14, s11
 800cb02:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cb06:	edc5 6a0d 	vstr	s13, [r5, #52]	; 0x34
 800cb0a:	ed85 7a0e 	vstr	s14, [r5, #56]	; 0x38
 800cb0e:	edc5 7a0f 	vstr	s15, [r5, #60]	; 0x3c
 800cb12:	6828      	ldr	r0, [r5, #0]
 800cb14:	6869      	ldr	r1, [r5, #4]
 800cb16:	68aa      	ldr	r2, [r5, #8]
 800cb18:	68eb      	ldr	r3, [r5, #12]
 800cb1a:	4c89      	ldr	r4, [pc, #548]	; (800cd40 <MotionEC_Run+0x768>)
 800cb1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb1e:	b01f      	add	sp, #124	; 0x7c
 800cb20:	ecbd 8b10 	vpop	{d8-d15}
 800cb24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb28:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800cb2c:	1d23      	adds	r3, r4, #4
 800cb2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cb32:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800cb36:	f104 0310 	add.w	r3, r4, #16
 800cb3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cb3e:	2300      	movs	r3, #0
 800cb40:	ed94 7a01 	vldr	s14, [r4, #4]
 800cb44:	edd4 7a02 	vldr	s15, [r4, #8]
 800cb48:	edd4 9a03 	vldr	s19, [r4, #12]
 800cb4c:	ed94 9a04 	vldr	s18, [r4, #16]
 800cb50:	ed94 8a05 	vldr	s16, [r4, #20]
 800cb54:	edd4 8a06 	vldr	s17, [r4, #24]
 800cb58:	7333      	strb	r3, [r6, #12]
 800cb5a:	edd4 aa01 	vldr	s21, [r4, #4]
 800cb5e:	e60e      	b.n	800c77e <MotionEC_Run+0x1a6>
 800cb60:	2000      	movs	r0, #0
 800cb62:	2100      	movs	r1, #0
 800cb64:	e6b1      	b.n	800c8ca <MotionEC_Run+0x2f2>
 800cb66:	2000      	movs	r0, #0
 800cb68:	2100      	movs	r1, #0
 800cb6a:	e708      	b.n	800c97e <MotionEC_Run+0x3a6>
 800cb6c:	2000      	movs	r0, #0
 800cb6e:	2100      	movs	r1, #0
 800cb70:	e6d8      	b.n	800c924 <MotionEC_Run+0x34c>
 800cb72:	2300      	movs	r3, #0
 800cb74:	eef1 6a6b 	vneg.f32	s13, s23
 800cb78:	eeb1 7a4d 	vneg.f32	s14, s26
 800cb7c:	eef1 7a6d 	vneg.f32	s15, s27
 800cb80:	aa12      	add	r2, sp, #72	; 0x48
 800cb82:	a916      	add	r1, sp, #88	; 0x58
 800cb84:	a80a      	add	r0, sp, #40	; 0x28
 800cb86:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 800cb8a:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 800cb8e:	9316      	str	r3, [sp, #88]	; 0x58
 800cb90:	9317      	str	r3, [sp, #92]	; 0x5c
 800cb92:	9318      	str	r3, [sp, #96]	; 0x60
 800cb94:	ed8d 7a0c 	vstr	s14, [sp, #48]	; 0x30
 800cb98:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 800cb9c:	ed8d ea0a 	vstr	s28, [sp, #40]	; 0x28
 800cba0:	ed8d ea0e 	vstr	s28, [sp, #56]	; 0x38
 800cba4:	edcd ba0f 	vstr	s23, [sp, #60]	; 0x3c
 800cba8:	ed8d da10 	vstr	s26, [sp, #64]	; 0x40
 800cbac:	edcd da11 	vstr	s27, [sp, #68]	; 0x44
 800cbb0:	9619      	str	r6, [sp, #100]	; 0x64
 800cbb2:	f7ff fc19 	bl	800c3e8 <quaternionsMult>
 800cbb6:	aa1a      	add	r2, sp, #104	; 0x68
 800cbb8:	a812      	add	r0, sp, #72	; 0x48
 800cbba:	a90e      	add	r1, sp, #56	; 0x38
 800cbbc:	f7ff fc14 	bl	800c3e8 <quaternionsMult>
 800cbc0:	ed9d 9a1b 	vldr	s18, [sp, #108]	; 0x6c
 800cbc4:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 800cbc8:	eddd 8a1c 	vldr	s17, [sp, #112]	; 0x70
 800cbcc:	ed9d 8a1d 	vldr	s16, [sp, #116]	; 0x74
 800cbd0:	ee69 7a09 	vmul.f32	s15, s18, s18
 800cbd4:	eee7 7a07 	vfma.f32	s15, s14, s14
 800cbd8:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800cbdc:	eee8 7a08 	vfma.f32	s15, s16, s16
 800cbe0:	ee17 0a90 	vmov	r0, s15
 800cbe4:	f7f3 fcb8 	bl	8000558 <__aeabi_f2d>
 800cbe8:	ec41 0b10 	vmov	d0, r0, r1
 800cbec:	f003 fdee 	bl	80107cc <sqrt>
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	ec53 2b10 	vmov	r2, r3, d0
 800cbf6:	4953      	ldr	r1, [pc, #332]	; (800cd44 <MotionEC_Run+0x76c>)
 800cbf8:	f7f3 fe30 	bl	800085c <__aeabi_ddiv>
 800cbfc:	f7f3 ffdc 	bl	8000bb8 <__aeabi_d2f>
 800cc00:	ee07 0a90 	vmov	s15, r0
 800cc04:	ee29 9a27 	vmul.f32	s18, s18, s15
 800cc08:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800cc0c:	ee28 8a27 	vmul.f32	s16, s16, s15
 800cc10:	ed8d 9a1b 	vstr	s18, [sp, #108]	; 0x6c
 800cc14:	edcd 8a1c 	vstr	s17, [sp, #112]	; 0x70
 800cc18:	ed8d 8a1d 	vstr	s16, [sp, #116]	; 0x74
 800cc1c:	ab1b      	add	r3, sp, #108	; 0x6c
 800cc1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cc20:	62a8      	str	r0, [r5, #40]	; 0x28
 800cc22:	62e9      	str	r1, [r5, #44]	; 0x2c
 800cc24:	632a      	str	r2, [r5, #48]	; 0x30
 800cc26:	e75a      	b.n	800cade <MotionEC_Run+0x506>
 800cc28:	ee6d 6a4d 	vnmul.f32	s13, s26, s26
 800cc2c:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
 800cc30:	eef0 fa00 	vmov.f32	s31, #0	; 0x40000000  2.0
 800cc34:	eef0 7a4f 	vmov.f32	s15, s30
 800cc38:	eee6 7aaf 	vfma.f32	s15, s13, s31
 800cc3c:	ee2d 7aed 	vnmul.f32	s14, s27, s27
 800cc40:	edcd 6a03 	vstr	s13, [sp, #12]
 800cc44:	eee7 7a2f 	vfma.f32	s15, s14, s31
 800cc48:	ee17 0a90 	vmov	r0, s15
 800cc4c:	f7f3 fc84 	bl	8000558 <__aeabi_f2d>
 800cc50:	ee6b 7a8d 	vmul.f32	s15, s23, s26
 800cc54:	e9cd 0100 	strd	r0, r1, [sp]
 800cc58:	eeed 7a8e 	vfma.f32	s15, s27, s28
 800cc5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cc60:	ee17 0a90 	vmov	r0, s15
 800cc64:	f7f3 fc78 	bl	8000558 <__aeabi_f2d>
 800cc68:	ed9d 1b00 	vldr	d1, [sp]
 800cc6c:	ec41 0b10 	vmov	d0, r0, r1
 800cc70:	f003 fdaa 	bl	80107c8 <atan2>
 800cc74:	ec51 0b10 	vmov	r0, r1, d0
 800cc78:	f7f3 ff9e 	bl	8000bb8 <__aeabi_d2f>
 800cc7c:	ee6b 7aeb 	vnmul.f32	s15, s23, s23
 800cc80:	eddd 6a03 	vldr	s13, [sp, #12]
 800cc84:	9002      	str	r0, [sp, #8]
 800cc86:	eea7 faaf 	vfma.f32	s30, s15, s31
 800cc8a:	ee07 0a10 	vmov	s14, r0
 800cc8e:	eea6 faaf 	vfma.f32	s30, s13, s31
 800cc92:	eef1 ea47 	vneg.f32	s29, s14
 800cc96:	edc5 ea04 	vstr	s29, [r5, #16]
 800cc9a:	ee1f 0a10 	vmov	r0, s30
 800cc9e:	f7f3 fc5b 	bl	8000558 <__aeabi_f2d>
 800cca2:	ee6b 7a8e 	vmul.f32	s15, s23, s28
 800cca6:	e9cd 0100 	strd	r0, r1, [sp]
 800ccaa:	eeed 7a2d 	vfma.f32	s15, s26, s27
 800ccae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ccb2:	ee17 0a90 	vmov	r0, s15
 800ccb6:	f7f3 fc4f 	bl	8000558 <__aeabi_f2d>
 800ccba:	ed9d 1b00 	vldr	d1, [sp]
 800ccbe:	ec41 0b10 	vmov	d0, r0, r1
 800ccc2:	f003 fd81 	bl	80107c8 <atan2>
 800ccc6:	ec51 0b10 	vmov	r0, r1, d0
 800ccca:	f7f3 ff75 	bl	8000bb8 <__aeabi_d2f>
 800ccce:	ee6e 7a4d 	vnmul.f32	s15, s28, s26
 800ccd2:	ee07 0a10 	vmov	s14, r0
 800ccd6:	eeeb 7aad 	vfma.f32	s15, s23, s27
 800ccda:	eeb1 fa47 	vneg.f32	s30, s14
 800ccde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cce2:	ed85 fa05 	vstr	s30, [r5, #20]
 800cce6:	ee17 0a90 	vmov	r0, s15
 800ccea:	f7f3 fc35 	bl	8000558 <__aeabi_f2d>
 800ccee:	ec41 0b10 	vmov	d0, r0, r1
 800ccf2:	f003 fd11 	bl	8010718 <asin>
 800ccf6:	ec51 0b10 	vmov	r0, r1, d0
 800ccfa:	f7f3 ff5d 	bl	8000bb8 <__aeabi_d2f>
 800ccfe:	ed9d 7a02 	vldr	s14, [sp, #8]
 800cd02:	61a8      	str	r0, [r5, #24]
 800cd04:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800cd08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd0c:	bfc8      	it	gt
 800cd0e:	eddf ea0e 	vldrgt	s29, [pc, #56]	; 800cd48 <MotionEC_Run+0x770>
 800cd12:	ee07 0a90 	vmov	s15, r0
 800cd16:	bfc8      	it	gt
 800cd18:	ee7e eac7 	vsubgt.f32	s29, s29, s14
 800cd1c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800cd4c <MotionEC_Run+0x774>
 800cd20:	ee6e ea87 	vmul.f32	s29, s29, s14
 800cd24:	ee2f fa07 	vmul.f32	s30, s30, s14
 800cd28:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd2c:	edc5 ea04 	vstr	s29, [r5, #16]
 800cd30:	ed85 fa05 	vstr	s30, [r5, #20]
 800cd34:	edc5 7a06 	vstr	s15, [r5, #24]
 800cd38:	e660      	b.n	800c9fc <MotionEC_Run+0x424>
 800cd3a:	ed9f ea05 	vldr	s28, [pc, #20]	; 800cd50 <MotionEC_Run+0x778>
 800cd3e:	e657      	b.n	800c9f0 <MotionEC_Run+0x418>
 800cd40:	20000010 	.word	0x20000010
 800cd44:	3ff00000 	.word	0x3ff00000
 800cd48:	40c90fdc 	.word	0x40c90fdc
 800cd4c:	42652edf 	.word	0x42652edf
 800cd50:	00000000 	.word	0x00000000

0800cd54 <MotionEC_GetLibVersion>:
 800cd54:	4b0f      	ldr	r3, [pc, #60]	; (800cd94 <MotionEC_GetLibVersion+0x40>)
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	b90b      	cbnz	r3, 800cd5e <MotionEC_GetLibVersion+0xa>
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	4770      	bx	lr
 800cd5e:	b470      	push	{r4, r5, r6}
 800cd60:	4e0d      	ldr	r6, [pc, #52]	; (800cd98 <MotionEC_GetLibVersion+0x44>)
 800cd62:	4605      	mov	r5, r0
 800cd64:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cd66:	b08b      	sub	sp, #44	; 0x2c
 800cd68:	ac01      	add	r4, sp, #4
 800cd6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd6c:	6833      	ldr	r3, [r6, #0]
 800cd6e:	f824 3b02 	strh.w	r3, [r4], #2
 800cd72:	0c1b      	lsrs	r3, r3, #16
 800cd74:	7023      	strb	r3, [r4, #0]
 800cd76:	ac01      	add	r4, sp, #4
 800cd78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd7a:	8826      	ldrh	r6, [r4, #0]
 800cd7c:	60eb      	str	r3, [r5, #12]
 800cd7e:	78a4      	ldrb	r4, [r4, #2]
 800cd80:	6028      	str	r0, [r5, #0]
 800cd82:	2312      	movs	r3, #18
 800cd84:	4618      	mov	r0, r3
 800cd86:	6069      	str	r1, [r5, #4]
 800cd88:	60aa      	str	r2, [r5, #8]
 800cd8a:	822e      	strh	r6, [r5, #16]
 800cd8c:	74ac      	strb	r4, [r5, #18]
 800cd8e:	b00b      	add	sp, #44	; 0x2c
 800cd90:	bc70      	pop	{r4, r5, r6}
 800cd92:	4770      	bx	lr
 800cd94:	200014f4 	.word	0x200014f4
 800cd98:	08011424 	.word	0x08011424

0800cd9c <MotionAC_Initialize>:
 800cd9c:	4a5a      	ldr	r2, [pc, #360]	; (800cf08 <MotionAC_Initialize+0x16c>)
 800cd9e:	495b      	ldr	r1, [pc, #364]	; (800cf0c <MotionAC_Initialize+0x170>)
 800cda0:	6813      	ldr	r3, [r2, #0]
 800cda2:	f023 0301 	bic.w	r3, r3, #1
 800cda6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdaa:	6013      	str	r3, [r2, #0]
 800cdac:	680b      	ldr	r3, [r1, #0]
 800cdae:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800cdb2:	4013      	ands	r3, r2
 800cdb4:	f24c 2440 	movw	r4, #49728	; 0xc240
 800cdb8:	42a3      	cmp	r3, r4
 800cdba:	b091      	sub	sp, #68	; 0x44
 800cdbc:	d013      	beq.n	800cde6 <MotionAC_Initialize+0x4a>
 800cdbe:	680b      	ldr	r3, [r1, #0]
 800cdc0:	f24c 2170 	movw	r1, #49776	; 0xc270
 800cdc4:	4013      	ands	r3, r2
 800cdc6:	428b      	cmp	r3, r1
 800cdc8:	d00d      	beq.n	800cde6 <MotionAC_Initialize+0x4a>
 800cdca:	4b51      	ldr	r3, [pc, #324]	; (800cf10 <MotionAC_Initialize+0x174>)
 800cdcc:	2201      	movs	r2, #1
 800cdce:	601a      	str	r2, [r3, #0]
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	2a00      	cmp	r2, #0
 800cdd4:	d1fc      	bne.n	800cdd0 <MotionAC_Initialize+0x34>
 800cdd6:	4b4f      	ldr	r3, [pc, #316]	; (800cf14 <MotionAC_Initialize+0x178>)
 800cdd8:	4a4f      	ldr	r2, [pc, #316]	; (800cf18 <MotionAC_Initialize+0x17c>)
 800cdda:	601a      	str	r2, [r3, #0]
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	4b4f      	ldr	r3, [pc, #316]	; (800cf1c <MotionAC_Initialize+0x180>)
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d01f      	beq.n	800ce24 <MotionAC_Initialize+0x88>
 800cde4:	e7fe      	b.n	800cde4 <MotionAC_Initialize+0x48>
 800cde6:	4b4e      	ldr	r3, [pc, #312]	; (800cf20 <MotionAC_Initialize+0x184>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d1ed      	bne.n	800cdca <MotionAC_Initialize+0x2e>
 800cdee:	4a4d      	ldr	r2, [pc, #308]	; (800cf24 <MotionAC_Initialize+0x188>)
 800cdf0:	6813      	ldr	r3, [r2, #0]
 800cdf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cdf6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cdfa:	d006      	beq.n	800ce0a <MotionAC_Initialize+0x6e>
 800cdfc:	6813      	ldr	r3, [r2, #0]
 800cdfe:	f240 4283 	movw	r2, #1155	; 0x483
 800ce02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d1df      	bne.n	800cdca <MotionAC_Initialize+0x2e>
 800ce0a:	4b47      	ldr	r3, [pc, #284]	; (800cf28 <MotionAC_Initialize+0x18c>)
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	601a      	str	r2, [r3, #0]
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	2a00      	cmp	r2, #0
 800ce14:	d1fc      	bne.n	800ce10 <MotionAC_Initialize+0x74>
 800ce16:	4b45      	ldr	r3, [pc, #276]	; (800cf2c <MotionAC_Initialize+0x190>)
 800ce18:	4a3f      	ldr	r2, [pc, #252]	; (800cf18 <MotionAC_Initialize+0x17c>)
 800ce1a:	601a      	str	r2, [r3, #0]
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	4b3f      	ldr	r3, [pc, #252]	; (800cf1c <MotionAC_Initialize+0x180>)
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d1df      	bne.n	800cde4 <MotionAC_Initialize+0x48>
 800ce24:	4f42      	ldr	r7, [pc, #264]	; (800cf30 <MotionAC_Initialize+0x194>)
 800ce26:	f04f 0901 	mov.w	r9, #1
 800ce2a:	4606      	mov	r6, r0
 800ce2c:	f887 9000 	strb.w	r9, [r7]
 800ce30:	b9e0      	cbnz	r0, 800ce6c <MotionAC_Initialize+0xd0>
 800ce32:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800cf34 <MotionAC_Initialize+0x198>
 800ce36:	f88d 9004 	strb.w	r9, [sp, #4]
 800ce3a:	f108 0514 	add.w	r5, r8, #20
 800ce3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce40:	ac03      	add	r4, sp, #12
 800ce42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce4c:	682a      	ldr	r2, [r5, #0]
 800ce4e:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 800ce52:	6022      	str	r2, [r4, #0]
 800ce54:	a901      	add	r1, sp, #4
 800ce56:	203c      	movs	r0, #60	; 0x3c
 800ce58:	9302      	str	r3, [sp, #8]
 800ce5a:	f7ff f874 	bl	800bf46 <MotionAC_SaveCalInNVM>
 800ce5e:	f888 6000 	strb.w	r6, [r8]
 800ce62:	2300      	movs	r3, #0
 800ce64:	707b      	strb	r3, [r7, #1]
 800ce66:	b011      	add	sp, #68	; 0x44
 800ce68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce6c:	4c31      	ldr	r4, [pc, #196]	; (800cf34 <MotionAC_Initialize+0x198>)
 800ce6e:	4832      	ldr	r0, [pc, #200]	; (800cf38 <MotionAC_Initialize+0x19c>)
 800ce70:	4a32      	ldr	r2, [pc, #200]	; (800cf3c <MotionAC_Initialize+0x1a0>)
 800ce72:	2114      	movs	r1, #20
 800ce74:	f44f 13f0 	mov.w	r3, #1966080	; 0x1e0000
 800ce78:	f8c4 1464 	str.w	r1, [r4, #1124]	; 0x464
 800ce7c:	6523      	str	r3, [r4, #80]	; 0x50
 800ce7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ce82:	f44f 03dc 	mov.w	r3, #7208960	; 0x6e0000
 800ce86:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
 800ce8a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
 800ce8e:	f504 618c 	add.w	r1, r4, #1120	; 0x460
 800ce92:	f504 638d 	add.w	r3, r4, #1128	; 0x468
 800ce96:	2500      	movs	r5, #0
 800ce98:	6008      	str	r0, [r1, #0]
 800ce9a:	601a      	str	r2, [r3, #0]
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	222e      	movs	r2, #46	; 0x2e
 800cea0:	f104 0016 	add.w	r0, r4, #22
 800cea4:	7025      	strb	r5, [r4, #0]
 800cea6:	f884 546c 	strb.w	r5, [r4, #1132]	; 0x46c
 800ceaa:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 800ceae:	6565      	str	r5, [r4, #84]	; 0x54
 800ceb0:	6125      	str	r5, [r4, #16]
 800ceb2:	64a5      	str	r5, [r4, #72]	; 0x48
 800ceb4:	f001 f909 	bl	800e0ca <memset>
 800ceb8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cebc:	2202      	movs	r2, #2
 800cebe:	a901      	add	r1, sp, #4
 800cec0:	203c      	movs	r0, #60	; 0x3c
 800cec2:	f884 9015 	strb.w	r9, [r4, #21]
 800cec6:	7522      	strb	r2, [r4, #20]
 800cec8:	6263      	str	r3, [r4, #36]	; 0x24
 800ceca:	6363      	str	r3, [r4, #52]	; 0x34
 800cecc:	6463      	str	r3, [r4, #68]	; 0x44
 800cece:	f7ff f82d 	bl	800bf2c <MotionAC_LoadCalFromNVM>
 800ced2:	4548      	cmp	r0, r9
 800ced4:	d0c5      	beq.n	800ce62 <MotionAC_Initialize+0xc6>
 800ced6:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ceda:	f88d 5004 	strb.w	r5, [sp, #4]
 800cede:	f1bc 0f00 	cmp.w	ip, #0
 800cee2:	d0be      	beq.n	800ce62 <MotionAC_Initialize+0xc6>
 800cee4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d0ba      	beq.n	800ce62 <MotionAC_Initialize+0xc6>
 800ceec:	ae03      	add	r6, sp, #12
 800ceee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cef0:	f104 0514 	add.w	r5, r4, #20
 800cef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cef6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cefa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cefc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cefe:	6833      	ldr	r3, [r6, #0]
 800cf00:	602b      	str	r3, [r5, #0]
 800cf02:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
 800cf06:	e7ac      	b.n	800ce62 <MotionAC_Initialize+0xc6>
 800cf08:	e0002000 	.word	0xe0002000
 800cf0c:	e000ed00 	.word	0xe000ed00
 800cf10:	40023008 	.word	0x40023008
 800cf14:	40023000 	.word	0x40023000
 800cf18:	f407a5c2 	.word	0xf407a5c2
 800cf1c:	b5e8b5cd 	.word	0xb5e8b5cd
 800cf20:	e0042000 	.word	0xe0042000
 800cf24:	5c001000 	.word	0x5c001000
 800cf28:	58024c08 	.word	0x58024c08
 800cf2c:	58024c00 	.word	0x58024c00
 800cf30:	20001514 	.word	0x20001514
 800cf34:	2000bb28 	.word	0x2000bb28
 800cf38:	3a83126f 	.word	0x3a83126f
 800cf3c:	3e4ccccd 	.word	0x3e4ccccd

0800cf40 <MotionAC_GetLibVersion>:
 800cf40:	4b0f      	ldr	r3, [pc, #60]	; (800cf80 <MotionAC_GetLibVersion+0x40>)
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	b90b      	cbnz	r3, 800cf4a <MotionAC_GetLibVersion+0xa>
 800cf46:	4618      	mov	r0, r3
 800cf48:	4770      	bx	lr
 800cf4a:	b470      	push	{r4, r5, r6}
 800cf4c:	4e0d      	ldr	r6, [pc, #52]	; (800cf84 <MotionAC_GetLibVersion+0x44>)
 800cf4e:	4605      	mov	r5, r0
 800cf50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cf52:	b08b      	sub	sp, #44	; 0x2c
 800cf54:	ac01      	add	r4, sp, #4
 800cf56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf58:	6833      	ldr	r3, [r6, #0]
 800cf5a:	f824 3b02 	strh.w	r3, [r4], #2
 800cf5e:	0c1b      	lsrs	r3, r3, #16
 800cf60:	7023      	strb	r3, [r4, #0]
 800cf62:	ac01      	add	r4, sp, #4
 800cf64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf66:	8826      	ldrh	r6, [r4, #0]
 800cf68:	60eb      	str	r3, [r5, #12]
 800cf6a:	78a4      	ldrb	r4, [r4, #2]
 800cf6c:	6028      	str	r0, [r5, #0]
 800cf6e:	2312      	movs	r3, #18
 800cf70:	4618      	mov	r0, r3
 800cf72:	6069      	str	r1, [r5, #4]
 800cf74:	60aa      	str	r2, [r5, #8]
 800cf76:	822e      	strh	r6, [r5, #16]
 800cf78:	74ac      	strb	r4, [r5, #18]
 800cf7a:	b00b      	add	sp, #44	; 0x2c
 800cf7c:	bc70      	pop	{r4, r5, r6}
 800cf7e:	4770      	bx	lr
 800cf80:	20001514 	.word	0x20001514
 800cf84:	08011448 	.word	0x08011448

0800cf88 <MotionGC_Initialize>:
 800cf88:	4a35      	ldr	r2, [pc, #212]	; (800d060 <MotionGC_Initialize+0xd8>)
 800cf8a:	4936      	ldr	r1, [pc, #216]	; (800d064 <MotionGC_Initialize+0xdc>)
 800cf8c:	6813      	ldr	r3, [r2, #0]
 800cf8e:	f023 0301 	bic.w	r3, r3, #1
 800cf92:	b470      	push	{r4, r5, r6}
 800cf94:	6013      	str	r3, [r2, #0]
 800cf96:	680b      	ldr	r3, [r1, #0]
 800cf98:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800cf9c:	4013      	ands	r3, r2
 800cf9e:	f24c 2440 	movw	r4, #49728	; 0xc240
 800cfa2:	42a3      	cmp	r3, r4
 800cfa4:	d013      	beq.n	800cfce <MotionGC_Initialize+0x46>
 800cfa6:	680b      	ldr	r3, [r1, #0]
 800cfa8:	f24c 2170 	movw	r1, #49776	; 0xc270
 800cfac:	4013      	ands	r3, r2
 800cfae:	428b      	cmp	r3, r1
 800cfb0:	d00d      	beq.n	800cfce <MotionGC_Initialize+0x46>
 800cfb2:	4b2d      	ldr	r3, [pc, #180]	; (800d068 <MotionGC_Initialize+0xe0>)
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	601a      	str	r2, [r3, #0]
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	2a00      	cmp	r2, #0
 800cfbc:	d1fc      	bne.n	800cfb8 <MotionGC_Initialize+0x30>
 800cfbe:	4b2b      	ldr	r3, [pc, #172]	; (800d06c <MotionGC_Initialize+0xe4>)
 800cfc0:	4a2b      	ldr	r2, [pc, #172]	; (800d070 <MotionGC_Initialize+0xe8>)
 800cfc2:	601a      	str	r2, [r3, #0]
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	4b2b      	ldr	r3, [pc, #172]	; (800d074 <MotionGC_Initialize+0xec>)
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d01f      	beq.n	800d00c <MotionGC_Initialize+0x84>
 800cfcc:	e7fe      	b.n	800cfcc <MotionGC_Initialize+0x44>
 800cfce:	4b2a      	ldr	r3, [pc, #168]	; (800d078 <MotionGC_Initialize+0xf0>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1ed      	bne.n	800cfb2 <MotionGC_Initialize+0x2a>
 800cfd6:	4a29      	ldr	r2, [pc, #164]	; (800d07c <MotionGC_Initialize+0xf4>)
 800cfd8:	6813      	ldr	r3, [r2, #0]
 800cfda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfde:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cfe2:	d006      	beq.n	800cff2 <MotionGC_Initialize+0x6a>
 800cfe4:	6813      	ldr	r3, [r2, #0]
 800cfe6:	f240 4283 	movw	r2, #1155	; 0x483
 800cfea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d1df      	bne.n	800cfb2 <MotionGC_Initialize+0x2a>
 800cff2:	4b23      	ldr	r3, [pc, #140]	; (800d080 <MotionGC_Initialize+0xf8>)
 800cff4:	2201      	movs	r2, #1
 800cff6:	601a      	str	r2, [r3, #0]
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	2a00      	cmp	r2, #0
 800cffc:	d1fc      	bne.n	800cff8 <MotionGC_Initialize+0x70>
 800cffe:	4b21      	ldr	r3, [pc, #132]	; (800d084 <MotionGC_Initialize+0xfc>)
 800d000:	4a1b      	ldr	r2, [pc, #108]	; (800d070 <MotionGC_Initialize+0xe8>)
 800d002:	601a      	str	r2, [r3, #0]
 800d004:	681a      	ldr	r2, [r3, #0]
 800d006:	4b1b      	ldr	r3, [pc, #108]	; (800d074 <MotionGC_Initialize+0xec>)
 800d008:	429a      	cmp	r2, r3
 800d00a:	d1df      	bne.n	800cfcc <MotionGC_Initialize+0x44>
 800d00c:	ed90 7a00 	vldr	s14, [r0]
 800d010:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800d088 <MotionGC_Initialize+0x100>
 800d014:	4b1d      	ldr	r3, [pc, #116]	; (800d08c <MotionGC_Initialize+0x104>)
 800d016:	4a1e      	ldr	r2, [pc, #120]	; (800d090 <MotionGC_Initialize+0x108>)
 800d018:	605a      	str	r2, [r3, #4]
 800d01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d01e:	2200      	movs	r2, #0
 800d020:	2101      	movs	r1, #1
 800d022:	4e1c      	ldr	r6, [pc, #112]	; (800d094 <MotionGC_Initialize+0x10c>)
 800d024:	4c1c      	ldr	r4, [pc, #112]	; (800d098 <MotionGC_Initialize+0x110>)
 800d026:	7019      	strb	r1, [r3, #0]
 800d028:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 800d02c:	f04f 557c 	mov.w	r5, #1056964608	; 0x3f000000
 800d030:	481a      	ldr	r0, [pc, #104]	; (800d09c <MotionGC_Initialize+0x114>)
 800d032:	6159      	str	r1, [r3, #20]
 800d034:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 800d038:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
 800d03c:	4918      	ldr	r1, [pc, #96]	; (800d0a0 <MotionGC_Initialize+0x118>)
 800d03e:	609e      	str	r6, [r3, #8]
 800d040:	2200      	movs	r2, #0
 800d042:	60dd      	str	r5, [r3, #12]
 800d044:	611c      	str	r4, [r3, #16]
 800d046:	edc3 7a08 	vstr	s15, [r3, #32]
 800d04a:	6199      	str	r1, [r3, #24]
 800d04c:	61d8      	str	r0, [r3, #28]
 800d04e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800d052:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 800d056:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 800d05a:	bc70      	pop	{r4, r5, r6}
 800d05c:	4770      	bx	lr
 800d05e:	bf00      	nop
 800d060:	e0002000 	.word	0xe0002000
 800d064:	e000ed00 	.word	0xe000ed00
 800d068:	40023008 	.word	0x40023008
 800d06c:	40023000 	.word	0x40023000
 800d070:	f407a5c2 	.word	0xf407a5c2
 800d074:	b5e8b5cd 	.word	0xb5e8b5cd
 800d078:	e0042000 	.word	0xe0042000
 800d07c:	5c001000 	.word	0x5c001000
 800d080:	58024c08 	.word	0x58024c08
 800d084:	58024c00 	.word	0x58024c00
 800d088:	3e4ccccd 	.word	0x3e4ccccd
 800d08c:	20001518 	.word	0x20001518
 800d090:	3b83126f 	.word	0x3b83126f
 800d094:	3dcccccd 	.word	0x3dcccccd
 800d098:	3b03126f 	.word	0x3b03126f
 800d09c:	3fa66666 	.word	0x3fa66666
 800d0a0:	41700000 	.word	0x41700000

0800d0a4 <MotionGC_GetLibVersion>:
 800d0a4:	4b0f      	ldr	r3, [pc, #60]	; (800d0e4 <MotionGC_GetLibVersion+0x40>)
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	b90b      	cbnz	r3, 800d0ae <MotionGC_GetLibVersion+0xa>
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	4770      	bx	lr
 800d0ae:	b470      	push	{r4, r5, r6}
 800d0b0:	4e0d      	ldr	r6, [pc, #52]	; (800d0e8 <MotionGC_GetLibVersion+0x44>)
 800d0b2:	4605      	mov	r5, r0
 800d0b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d0b6:	b08b      	sub	sp, #44	; 0x2c
 800d0b8:	ac01      	add	r4, sp, #4
 800d0ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0bc:	6833      	ldr	r3, [r6, #0]
 800d0be:	f824 3b02 	strh.w	r3, [r4], #2
 800d0c2:	0c1b      	lsrs	r3, r3, #16
 800d0c4:	7023      	strb	r3, [r4, #0]
 800d0c6:	ac01      	add	r4, sp, #4
 800d0c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d0ca:	8826      	ldrh	r6, [r4, #0]
 800d0cc:	60eb      	str	r3, [r5, #12]
 800d0ce:	78a4      	ldrb	r4, [r4, #2]
 800d0d0:	6028      	str	r0, [r5, #0]
 800d0d2:	2312      	movs	r3, #18
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	6069      	str	r1, [r5, #4]
 800d0d8:	60aa      	str	r2, [r5, #8]
 800d0da:	822e      	strh	r6, [r5, #16]
 800d0dc:	74ac      	strb	r4, [r5, #18]
 800d0de:	b00b      	add	sp, #44	; 0x2c
 800d0e0:	bc70      	pop	{r4, r5, r6}
 800d0e2:	4770      	bx	lr
 800d0e4:	20001518 	.word	0x20001518
 800d0e8:	08011474 	.word	0x08011474

0800d0ec <MotionMC_Initialize>:
 800d0ec:	4a93      	ldr	r2, [pc, #588]	; (800d33c <MotionMC_Initialize+0x250>)
 800d0ee:	6813      	ldr	r3, [r2, #0]
 800d0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0f4:	f023 0301 	bic.w	r3, r3, #1
 800d0f8:	4c91      	ldr	r4, [pc, #580]	; (800d340 <MotionMC_Initialize+0x254>)
 800d0fa:	6013      	str	r3, [r2, #0]
 800d0fc:	6823      	ldr	r3, [r4, #0]
 800d0fe:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800d102:	4013      	ands	r3, r2
 800d104:	f24c 2540 	movw	r5, #49728	; 0xc240
 800d108:	42ab      	cmp	r3, r5
 800d10a:	b0ae      	sub	sp, #184	; 0xb8
 800d10c:	d013      	beq.n	800d136 <MotionMC_Initialize+0x4a>
 800d10e:	6823      	ldr	r3, [r4, #0]
 800d110:	f24c 2470 	movw	r4, #49776	; 0xc270
 800d114:	4013      	ands	r3, r2
 800d116:	42a3      	cmp	r3, r4
 800d118:	d00d      	beq.n	800d136 <MotionMC_Initialize+0x4a>
 800d11a:	4b8a      	ldr	r3, [pc, #552]	; (800d344 <MotionMC_Initialize+0x258>)
 800d11c:	2201      	movs	r2, #1
 800d11e:	601a      	str	r2, [r3, #0]
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	2a00      	cmp	r2, #0
 800d124:	d1fc      	bne.n	800d120 <MotionMC_Initialize+0x34>
 800d126:	4b88      	ldr	r3, [pc, #544]	; (800d348 <MotionMC_Initialize+0x25c>)
 800d128:	4a88      	ldr	r2, [pc, #544]	; (800d34c <MotionMC_Initialize+0x260>)
 800d12a:	601a      	str	r2, [r3, #0]
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	4b88      	ldr	r3, [pc, #544]	; (800d350 <MotionMC_Initialize+0x264>)
 800d130:	429a      	cmp	r2, r3
 800d132:	d01f      	beq.n	800d174 <MotionMC_Initialize+0x88>
 800d134:	e7fe      	b.n	800d134 <MotionMC_Initialize+0x48>
 800d136:	4b87      	ldr	r3, [pc, #540]	; (800d354 <MotionMC_Initialize+0x268>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d1ed      	bne.n	800d11a <MotionMC_Initialize+0x2e>
 800d13e:	4a86      	ldr	r2, [pc, #536]	; (800d358 <MotionMC_Initialize+0x26c>)
 800d140:	6813      	ldr	r3, [r2, #0]
 800d142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d146:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d14a:	d006      	beq.n	800d15a <MotionMC_Initialize+0x6e>
 800d14c:	6813      	ldr	r3, [r2, #0]
 800d14e:	f240 4283 	movw	r2, #1155	; 0x483
 800d152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d156:	4293      	cmp	r3, r2
 800d158:	d1df      	bne.n	800d11a <MotionMC_Initialize+0x2e>
 800d15a:	4b80      	ldr	r3, [pc, #512]	; (800d35c <MotionMC_Initialize+0x270>)
 800d15c:	2201      	movs	r2, #1
 800d15e:	601a      	str	r2, [r3, #0]
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	2a00      	cmp	r2, #0
 800d164:	d1fc      	bne.n	800d160 <MotionMC_Initialize+0x74>
 800d166:	4b7e      	ldr	r3, [pc, #504]	; (800d360 <MotionMC_Initialize+0x274>)
 800d168:	4a78      	ldr	r2, [pc, #480]	; (800d34c <MotionMC_Initialize+0x260>)
 800d16a:	601a      	str	r2, [r3, #0]
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	4b78      	ldr	r3, [pc, #480]	; (800d350 <MotionMC_Initialize+0x264>)
 800d170:	429a      	cmp	r2, r3
 800d172:	d1df      	bne.n	800d134 <MotionMC_Initialize+0x48>
 800d174:	4c7b      	ldr	r4, [pc, #492]	; (800d364 <MotionMC_Initialize+0x278>)
 800d176:	1e43      	subs	r3, r0, #1
 800d178:	f04f 0901 	mov.w	r9, #1
 800d17c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d180:	f884 93e0 	strb.w	r9, [r4, #992]	; 0x3e0
 800d184:	d302      	bcc.n	800d18c <MotionMC_Initialize+0xa0>
 800d186:	b02e      	add	sp, #184	; 0xb8
 800d188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d18c:	468a      	mov	sl, r1
 800d18e:	4607      	mov	r7, r0
 800d190:	fa0f f880 	sxth.w	r8, r0
 800d194:	2900      	cmp	r1, #0
 800d196:	d154      	bne.n	800d242 <MotionMC_Initialize+0x156>
 800d198:	f104 06a4 	add.w	r6, r4, #164	; 0xa4
 800d19c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d19e:	ad02      	add	r5, sp, #8
 800d1a0:	f88d 9000 	strb.w	r9, [sp]
 800d1a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d1a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d1a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d1aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d1ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d1ae:	4631      	mov	r1, r6
 800d1b0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800d1b4:	f851 29b0 	ldr.w	r2, [r1], #-176
 800d1b8:	602a      	str	r2, [r5, #0]
 800d1ba:	a80f      	add	r0, sp, #60	; 0x3c
 800d1bc:	227c      	movs	r2, #124	; 0x7c
 800d1be:	9301      	str	r3, [sp, #4]
 800d1c0:	f000 ff78 	bl	800e0b4 <memcpy>
 800d1c4:	4669      	mov	r1, sp
 800d1c6:	20b8      	movs	r0, #184	; 0xb8
 800d1c8:	f7fe fed7 	bl	800bf7a <MotionMC_SaveCalInNVM>
 800d1cc:	f884 a014 	strb.w	sl, [r4, #20]
 800d1d0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800d1d4:	4a64      	ldr	r2, [pc, #400]	; (800d368 <MotionMC_Initialize+0x27c>)
 800d1d6:	1bdb      	subs	r3, r3, r7
 800d1d8:	ee07 3a90 	vmov	s15, r3
 800d1dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d1e0:	23c8      	movs	r3, #200	; 0xc8
 800d1e2:	eef0 7ae7 	vabs.f32	s15, s15
 800d1e6:	fb93 f3f7 	sdiv	r3, r3, r7
 800d1ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	2b32      	cmp	r3, #50	; 0x32
 800d1f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1f6:	bf28      	it	cs
 800d1f8:	2332      	movcs	r3, #50	; 0x32
 800d1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1fe:	f884 33ea 	strb.w	r3, [r4, #1002]	; 0x3ea
 800d202:	6017      	str	r7, [r2, #0]
 800d204:	dd0d      	ble.n	800d222 <MotionMC_Initialize+0x136>
 800d206:	2300      	movs	r3, #0
 800d208:	4958      	ldr	r1, [pc, #352]	; (800d36c <MotionMC_Initialize+0x280>)
 800d20a:	f8a4 8002 	strh.w	r8, [r4, #2]
 800d20e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800d212:	6061      	str	r1, [r4, #4]
 800d214:	8123      	strh	r3, [r4, #8]
 800d216:	60e3      	str	r3, [r4, #12]
 800d218:	8022      	strh	r2, [r4, #0]
 800d21a:	2300      	movs	r3, #0
 800d21c:	f884 357c 	strb.w	r3, [r4, #1404]	; 0x57c
 800d220:	e7b1      	b.n	800d186 <MotionMC_Initialize+0x9a>
 800d222:	edd4 7a01 	vldr	s15, [r4, #4]
 800d226:	eddf 6a52 	vldr	s13, [pc, #328]	; 800d370 <MotionMC_Initialize+0x284>
 800d22a:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800d374 <MotionMC_Initialize+0x288>
 800d22e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d232:	eef0 7ae7 	vabs.f32	s15, s15
 800d236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d23e:	dce2      	bgt.n	800d206 <MotionMC_Initialize+0x11a>
 800d240:	e7eb      	b.n	800d21a <MotionMC_Initialize+0x12e>
 800d242:	2500      	movs	r5, #0
 800d244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d248:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 800d24c:	484a      	ldr	r0, [pc, #296]	; (800d378 <MotionMC_Initialize+0x28c>)
 800d24e:	60e5      	str	r5, [r4, #12]
 800d250:	4629      	mov	r1, r5
 800d252:	7525      	strb	r5, [r4, #20]
 800d254:	61a5      	str	r5, [r4, #24]
 800d256:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 800d25a:	f884 5020 	strb.w	r5, [r4, #32]
 800d25e:	60a2      	str	r2, [r4, #8]
 800d260:	6120      	str	r0, [r4, #16]
 800d262:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d266:	83a3      	strh	r3, [r4, #28]
 800d268:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 800d26c:	f000 ff2d 	bl	800e0ca <memset>
 800d270:	f44f 66a0 	mov.w	r6, #1280	; 0x500
 800d274:	23ff      	movs	r3, #255	; 0xff
 800d276:	224b      	movs	r2, #75	; 0x4b
 800d278:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800d27c:	4629      	mov	r1, r5
 800d27e:	f8c4 5360 	str.w	r5, [r4, #864]	; 0x360
 800d282:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 800d286:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
 800d28a:	f884 20e1 	strb.w	r2, [r4, #225]	; 0xe1
 800d28e:	f884 30e2 	strb.w	r3, [r4, #226]	; 0xe2
 800d292:	f884 3366 	strb.w	r3, [r4, #870]	; 0x366
 800d296:	222e      	movs	r2, #46	; 0x2e
 800d298:	f8a4 0364 	strh.w	r0, [r4, #868]	; 0x364
 800d29c:	84a6      	strh	r6, [r4, #36]	; 0x24
 800d29e:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
 800d2a2:	f000 ff12 	bl	800e0ca <memset>
 800d2a6:	f1a7 030a 	sub.w	r3, r7, #10
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	a92e      	add	r1, sp, #184	; 0xb8
 800d2ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d2b2:	2b32      	cmp	r3, #50	; 0x32
 800d2b4:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 800d2b8:	f04f 0500 	mov.w	r5, #0
 800d2bc:	bf98      	it	ls
 800d2be:	f884 9014 	strbls.w	r9, [r4, #20]
 800d2c2:	2305      	movs	r3, #5
 800d2c4:	f884 90a5 	strb.w	r9, [r4, #165]	; 0xa5
 800d2c8:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 800d2cc:	f8c4 20c4 	str.w	r2, [r4, #196]	; 0xc4
 800d2d0:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
 800d2d4:	f801 5db8 	strb.w	r5, [r1, #-184]!
 800d2d8:	20b8      	movs	r0, #184	; 0xb8
 800d2da:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 800d2de:	f7fe fe3f 	bl	800bf60 <MotionMC_LoadCalFromNVM>
 800d2e2:	2801      	cmp	r0, #1
 800d2e4:	f43f af74 	beq.w	800d1d0 <MotionMC_Initialize+0xe4>
 800d2e8:	f8dd c004 	ldr.w	ip, [sp, #4]
 800d2ec:	f88d 5000 	strb.w	r5, [sp]
 800d2f0:	f1bc 0f00 	cmp.w	ip, #0
 800d2f4:	f43f af6c 	beq.w	800d1d0 <MotionMC_Initialize+0xe4>
 800d2f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	f43f af67 	beq.w	800d1d0 <MotionMC_Initialize+0xe4>
 800d302:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800d306:	2b00      	cmp	r3, #0
 800d308:	f43f af62 	beq.w	800d1d0 <MotionMC_Initialize+0xe4>
 800d30c:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800d310:	429a      	cmp	r2, r3
 800d312:	f4ff af5d 	bcc.w	800d1d0 <MotionMC_Initialize+0xe4>
 800d316:	ad02      	add	r5, sp, #8
 800d318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d31a:	4e18      	ldr	r6, [pc, #96]	; (800d37c <MotionMC_Initialize+0x290>)
 800d31c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d31e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d320:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d324:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d326:	4630      	mov	r0, r6
 800d328:	682b      	ldr	r3, [r5, #0]
 800d32a:	f840 39b0 	str.w	r3, [r0], #-176
 800d32e:	227c      	movs	r2, #124	; 0x7c
 800d330:	a90f      	add	r1, sp, #60	; 0x3c
 800d332:	f8c4 c0d8 	str.w	ip, [r4, #216]	; 0xd8
 800d336:	f000 febd 	bl	800e0b4 <memcpy>
 800d33a:	e749      	b.n	800d1d0 <MotionMC_Initialize+0xe4>
 800d33c:	e0002000 	.word	0xe0002000
 800d340:	e000ed00 	.word	0xe000ed00
 800d344:	40023008 	.word	0x40023008
 800d348:	40023000 	.word	0x40023000
 800d34c:	f407a5c2 	.word	0xf407a5c2
 800d350:	b5e8b5cd 	.word	0xb5e8b5cd
 800d354:	e0042000 	.word	0xe0042000
 800d358:	5c001000 	.word	0x5c001000
 800d35c:	58024c08 	.word	0x58024c08
 800d360:	58024c00 	.word	0x58024c00
 800d364:	20001640 	.word	0x20001640
 800d368:	20000044 	.word	0x20000044
 800d36c:	3dcccccd 	.word	0x3dcccccd
 800d370:	3dcccccd 	.word	0x3dcccccd
 800d374:	3c23d70a 	.word	0x3c23d70a
 800d378:	2000bf98 	.word	0x2000bf98
 800d37c:	200016e4 	.word	0x200016e4

0800d380 <MotionMC_GetLibVersion>:
 800d380:	4b10      	ldr	r3, [pc, #64]	; (800d3c4 <MotionMC_GetLibVersion+0x44>)
 800d382:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800d386:	b90b      	cbnz	r3, 800d38c <MotionMC_GetLibVersion+0xc>
 800d388:	4618      	mov	r0, r3
 800d38a:	4770      	bx	lr
 800d38c:	b470      	push	{r4, r5, r6}
 800d38e:	4e0e      	ldr	r6, [pc, #56]	; (800d3c8 <MotionMC_GetLibVersion+0x48>)
 800d390:	4605      	mov	r5, r0
 800d392:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d394:	b08b      	sub	sp, #44	; 0x2c
 800d396:	ac01      	add	r4, sp, #4
 800d398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d39a:	6833      	ldr	r3, [r6, #0]
 800d39c:	f824 3b02 	strh.w	r3, [r4], #2
 800d3a0:	0c1b      	lsrs	r3, r3, #16
 800d3a2:	7023      	strb	r3, [r4, #0]
 800d3a4:	ac01      	add	r4, sp, #4
 800d3a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d3a8:	8826      	ldrh	r6, [r4, #0]
 800d3aa:	60eb      	str	r3, [r5, #12]
 800d3ac:	78a4      	ldrb	r4, [r4, #2]
 800d3ae:	6028      	str	r0, [r5, #0]
 800d3b0:	2312      	movs	r3, #18
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	6069      	str	r1, [r5, #4]
 800d3b6:	60aa      	str	r2, [r5, #8]
 800d3b8:	822e      	strh	r6, [r5, #16]
 800d3ba:	74ac      	strb	r4, [r5, #18]
 800d3bc:	b00b      	add	sp, #44	; 0x2c
 800d3be:	bc70      	pop	{r4, r5, r6}
 800d3c0:	4770      	bx	lr
 800d3c2:	bf00      	nop
 800d3c4:	20001640 	.word	0x20001640
 800d3c8:	080114a4 	.word	0x080114a4

0800d3cc <rt_InitInfAndNaN.isra.3>:
 800d3cc:	4b05      	ldr	r3, [pc, #20]	; (800d3e4 <rt_InitInfAndNaN.isra.3+0x18>)
 800d3ce:	4a06      	ldr	r2, [pc, #24]	; (800d3e8 <rt_InitInfAndNaN.isra.3+0x1c>)
 800d3d0:	f503 6182 	add.w	r1, r3, #1040	; 0x410
 800d3d4:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800d3d8:	f04f 40ff 	mov.w	r0, #2139095040	; 0x7f800000
 800d3dc:	6008      	str	r0, [r1, #0]
 800d3de:	601a      	str	r2, [r3, #0]
 800d3e0:	4770      	bx	lr
 800d3e2:	bf00      	nop
 800d3e4:	20001bc0 	.word	0x20001bc0
 800d3e8:	ff800000 	.word	0xff800000

0800d3ec <iNemo_setOrientation.constprop.40>:
 800d3ec:	b4f0      	push	{r4, r5, r6, r7}
 800d3ee:	4973      	ldr	r1, [pc, #460]	; (800d5bc <iNemo_setOrientation.constprop.40+0x1d0>)
 800d3f0:	4b73      	ldr	r3, [pc, #460]	; (800d5c0 <iNemo_setOrientation.constprop.40+0x1d4>)
 800d3f2:	7808      	ldrb	r0, [r1, #0]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	2f17      	cmp	r7, #23
 800d3fe:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800d402:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800d406:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 800d40a:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 800d40e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800d412:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 800d416:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 800d41a:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
 800d41e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 800d422:	790a      	ldrb	r2, [r1, #4]
 800d424:	bf98      	it	ls
 800d426:	3020      	addls	r0, #32
 800d428:	f88d 0004 	strb.w	r0, [sp, #4]
 800d42c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800d430:	2817      	cmp	r0, #23
 800d432:	bf98      	it	ls
 800d434:	3220      	addls	r2, #32
 800d436:	f88d 2008 	strb.w	r2, [sp, #8]
 800d43a:	7a0a      	ldrb	r2, [r1, #8]
 800d43c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800d440:	2817      	cmp	r0, #23
 800d442:	bf98      	it	ls
 800d444:	3220      	addls	r2, #32
 800d446:	f88d 200c 	strb.w	r2, [sp, #12]
 800d44a:	784a      	ldrb	r2, [r1, #1]
 800d44c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800d450:	2817      	cmp	r0, #23
 800d452:	bf98      	it	ls
 800d454:	3220      	addls	r2, #32
 800d456:	f88d 2005 	strb.w	r2, [sp, #5]
 800d45a:	794a      	ldrb	r2, [r1, #5]
 800d45c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800d460:	2817      	cmp	r0, #23
 800d462:	bf98      	it	ls
 800d464:	3220      	addls	r2, #32
 800d466:	f88d 2009 	strb.w	r2, [sp, #9]
 800d46a:	7a4a      	ldrb	r2, [r1, #9]
 800d46c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800d470:	2817      	cmp	r0, #23
 800d472:	bf98      	it	ls
 800d474:	3220      	addls	r2, #32
 800d476:	f88d 200d 	strb.w	r2, [sp, #13]
 800d47a:	788a      	ldrb	r2, [r1, #2]
 800d47c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800d480:	2817      	cmp	r0, #23
 800d482:	bf98      	it	ls
 800d484:	3220      	addls	r2, #32
 800d486:	f88d 2006 	strb.w	r2, [sp, #6]
 800d48a:	798a      	ldrb	r2, [r1, #6]
 800d48c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800d490:	2817      	cmp	r0, #23
 800d492:	bf98      	it	ls
 800d494:	3220      	addls	r2, #32
 800d496:	f88d 200a 	strb.w	r2, [sp, #10]
 800d49a:	7a8a      	ldrb	r2, [r1, #10]
 800d49c:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 800d4a0:	2917      	cmp	r1, #23
 800d4a2:	bf98      	it	ls
 800d4a4:	3220      	addls	r2, #32
 800d4a6:	f88d 200e 	strb.w	r2, [sp, #14]
 800d4aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d4ae:	3a64      	subs	r2, #100	; 0x64
 800d4b0:	2a13      	cmp	r2, #19
 800d4b2:	d80e      	bhi.n	800d4d2 <iNemo_setOrientation.constprop.40+0xe6>
 800d4b4:	e8df f002 	tbb	[pc, r2]
 800d4b8:	0d0dba0a 	.word	0x0d0dba0a
 800d4bc:	0d0d0d0d 	.word	0x0d0d0d0d
 800d4c0:	0dbe0d0d 	.word	0x0dbe0d0d
 800d4c4:	c20d0d0d 	.word	0xc20d0d0d
 800d4c8:	ca0dc60d 	.word	0xca0dc60d
 800d4cc:	22ff      	movs	r2, #255	; 0xff
 800d4ce:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 800d4d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d4d6:	3a64      	subs	r2, #100	; 0x64
 800d4d8:	2a13      	cmp	r2, #19
 800d4da:	d80e      	bhi.n	800d4fa <iNemo_setOrientation.constprop.40+0x10e>
 800d4dc:	e8df f002 	tbb	[pc, r2]
 800d4e0:	0d0dba0a 	.word	0x0d0dba0a
 800d4e4:	0d0d0d0d 	.word	0x0d0d0d0d
 800d4e8:	0dbe0d0d 	.word	0x0dbe0d0d
 800d4ec:	c20d0d0d 	.word	0xc20d0d0d
 800d4f0:	ca0dc60d 	.word	0xca0dc60d
 800d4f4:	22ff      	movs	r2, #255	; 0xff
 800d4f6:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 800d4fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d4fe:	3a64      	subs	r2, #100	; 0x64
 800d500:	2a13      	cmp	r2, #19
 800d502:	d80e      	bhi.n	800d522 <iNemo_setOrientation.constprop.40+0x136>
 800d504:	e8df f002 	tbb	[pc, r2]
 800d508:	0d0dba0a 	.word	0x0d0dba0a
 800d50c:	0d0d0d0d 	.word	0x0d0d0d0d
 800d510:	0dbe0d0d 	.word	0x0dbe0d0d
 800d514:	c20d0d0d 	.word	0xc20d0d0d
 800d518:	ca0dc60d 	.word	0xca0dc60d
 800d51c:	22ff      	movs	r2, #255	; 0xff
 800d51e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800d522:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800d526:	3a64      	subs	r2, #100	; 0x64
 800d528:	2a13      	cmp	r2, #19
 800d52a:	d80e      	bhi.n	800d54a <iNemo_setOrientation.constprop.40+0x15e>
 800d52c:	e8df f002 	tbb	[pc, r2]
 800d530:	0d0dba0a 	.word	0x0d0dba0a
 800d534:	0d0d0d0d 	.word	0x0d0d0d0d
 800d538:	0dbe0d0d 	.word	0x0dbe0d0d
 800d53c:	c20d0d0d 	.word	0xc20d0d0d
 800d540:	ca0dc60d 	.word	0xca0dc60d
 800d544:	22ff      	movs	r2, #255	; 0xff
 800d546:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 800d54a:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800d54e:	3a64      	subs	r2, #100	; 0x64
 800d550:	2a13      	cmp	r2, #19
 800d552:	d80e      	bhi.n	800d572 <iNemo_setOrientation.constprop.40+0x186>
 800d554:	e8df f002 	tbb	[pc, r2]
 800d558:	0d0dba0a 	.word	0x0d0dba0a
 800d55c:	0d0d0d0d 	.word	0x0d0d0d0d
 800d560:	0dbe0d0d 	.word	0x0dbe0d0d
 800d564:	c20d0d0d 	.word	0xc20d0d0d
 800d568:	ca0dc60d 	.word	0xca0dc60d
 800d56c:	22ff      	movs	r2, #255	; 0xff
 800d56e:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 800d572:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800d576:	3a64      	subs	r2, #100	; 0x64
 800d578:	2a13      	cmp	r2, #19
 800d57a:	d80e      	bhi.n	800d59a <iNemo_setOrientation.constprop.40+0x1ae>
 800d57c:	e8df f002 	tbb	[pc, r2]
 800d580:	0d0dba0a 	.word	0x0d0dba0a
 800d584:	0d0d0d0d 	.word	0x0d0d0d0d
 800d588:	0dbe0d0d 	.word	0x0dbe0d0d
 800d58c:	c20d0d0d 	.word	0xc20d0d0d
 800d590:	ca0dc60d 	.word	0xca0dc60d
 800d594:	22ff      	movs	r2, #255	; 0xff
 800d596:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 800d59a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800d59e:	3a64      	subs	r2, #100	; 0x64
 800d5a0:	2a13      	cmp	r2, #19
 800d5a2:	d812      	bhi.n	800d5ca <iNemo_setOrientation.constprop.40+0x1de>
 800d5a4:	e8df f002 	tbb	[pc, r2]
 800d5a8:	1111ba0e 	.word	0x1111ba0e
 800d5ac:	11111111 	.word	0x11111111
 800d5b0:	11be1111 	.word	0x11be1111
 800d5b4:	c2111111 	.word	0xc2111111
 800d5b8:	ca11c611 	.word	0xca11c611
 800d5bc:	20000048 	.word	0x20000048
 800d5c0:	20001bc0 	.word	0x20001bc0
 800d5c4:	22ff      	movs	r2, #255	; 0xff
 800d5c6:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 800d5ca:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800d5ce:	3a64      	subs	r2, #100	; 0x64
 800d5d0:	2a13      	cmp	r2, #19
 800d5d2:	d80e      	bhi.n	800d5f2 <iNemo_setOrientation.constprop.40+0x206>
 800d5d4:	e8df f002 	tbb	[pc, r2]
 800d5d8:	0d0db60a 	.word	0x0d0db60a
 800d5dc:	0d0d0d0d 	.word	0x0d0d0d0d
 800d5e0:	0dba0d0d 	.word	0x0dba0d0d
 800d5e4:	be0d0d0d 	.word	0xbe0d0d0d
 800d5e8:	c60dc20d 	.word	0xc60dc20d
 800d5ec:	22ff      	movs	r2, #255	; 0xff
 800d5ee:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 800d5f2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800d5f6:	3a64      	subs	r2, #100	; 0x64
 800d5f8:	2a13      	cmp	r2, #19
 800d5fa:	d80e      	bhi.n	800d61a <iNemo_setOrientation.constprop.40+0x22e>
 800d5fc:	e8df f002 	tbb	[pc, r2]
 800d600:	0d0db60a 	.word	0x0d0db60a
 800d604:	0d0d0d0d 	.word	0x0d0d0d0d
 800d608:	0dbc0d0d 	.word	0x0dbc0d0d
 800d60c:	c20d0d0d 	.word	0xc20d0d0d
 800d610:	100dc80d 	.word	0x100dc80d
 800d614:	22ff      	movs	r2, #255	; 0xff
 800d616:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 800d61a:	b004      	add	sp, #16
 800d61c:	bcf0      	pop	{r4, r5, r6, r7}
 800d61e:	4770      	bx	lr
 800d620:	22ff      	movs	r2, #255	; 0xff
 800d622:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 800d626:	b004      	add	sp, #16
 800d628:	bcf0      	pop	{r4, r5, r6, r7}
 800d62a:	4770      	bx	lr
 800d62c:	2201      	movs	r2, #1
 800d62e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800d632:	e74e      	b.n	800d4d2 <iNemo_setOrientation.constprop.40+0xe6>
 800d634:	2201      	movs	r2, #1
 800d636:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 800d63a:	e74a      	b.n	800d4d2 <iNemo_setOrientation.constprop.40+0xe6>
 800d63c:	22ff      	movs	r2, #255	; 0xff
 800d63e:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 800d642:	e746      	b.n	800d4d2 <iNemo_setOrientation.constprop.40+0xe6>
 800d644:	2201      	movs	r2, #1
 800d646:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 800d64a:	e742      	b.n	800d4d2 <iNemo_setOrientation.constprop.40+0xe6>
 800d64c:	22ff      	movs	r2, #255	; 0xff
 800d64e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800d652:	e73e      	b.n	800d4d2 <iNemo_setOrientation.constprop.40+0xe6>
 800d654:	2201      	movs	r2, #1
 800d656:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 800d65a:	e74e      	b.n	800d4fa <iNemo_setOrientation.constprop.40+0x10e>
 800d65c:	2201      	movs	r2, #1
 800d65e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800d662:	e74a      	b.n	800d4fa <iNemo_setOrientation.constprop.40+0x10e>
 800d664:	22ff      	movs	r2, #255	; 0xff
 800d666:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800d66a:	e746      	b.n	800d4fa <iNemo_setOrientation.constprop.40+0x10e>
 800d66c:	2201      	movs	r2, #1
 800d66e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 800d672:	e742      	b.n	800d4fa <iNemo_setOrientation.constprop.40+0x10e>
 800d674:	22ff      	movs	r2, #255	; 0xff
 800d676:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 800d67a:	e73e      	b.n	800d4fa <iNemo_setOrientation.constprop.40+0x10e>
 800d67c:	2201      	movs	r2, #1
 800d67e:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 800d682:	e74e      	b.n	800d522 <iNemo_setOrientation.constprop.40+0x136>
 800d684:	2201      	movs	r2, #1
 800d686:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800d68a:	e74a      	b.n	800d522 <iNemo_setOrientation.constprop.40+0x136>
 800d68c:	22ff      	movs	r2, #255	; 0xff
 800d68e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800d692:	e746      	b.n	800d522 <iNemo_setOrientation.constprop.40+0x136>
 800d694:	2201      	movs	r2, #1
 800d696:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800d69a:	e742      	b.n	800d522 <iNemo_setOrientation.constprop.40+0x136>
 800d69c:	22ff      	movs	r2, #255	; 0xff
 800d69e:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 800d6a2:	e73e      	b.n	800d522 <iNemo_setOrientation.constprop.40+0x136>
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 800d6aa:	e74e      	b.n	800d54a <iNemo_setOrientation.constprop.40+0x15e>
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 800d6b2:	e74a      	b.n	800d54a <iNemo_setOrientation.constprop.40+0x15e>
 800d6b4:	22ff      	movs	r2, #255	; 0xff
 800d6b6:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 800d6ba:	e746      	b.n	800d54a <iNemo_setOrientation.constprop.40+0x15e>
 800d6bc:	2201      	movs	r2, #1
 800d6be:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 800d6c2:	e742      	b.n	800d54a <iNemo_setOrientation.constprop.40+0x15e>
 800d6c4:	22ff      	movs	r2, #255	; 0xff
 800d6c6:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 800d6ca:	e73e      	b.n	800d54a <iNemo_setOrientation.constprop.40+0x15e>
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 800d6d2:	e74e      	b.n	800d572 <iNemo_setOrientation.constprop.40+0x186>
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 800d6da:	e74a      	b.n	800d572 <iNemo_setOrientation.constprop.40+0x186>
 800d6dc:	22ff      	movs	r2, #255	; 0xff
 800d6de:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 800d6e2:	e746      	b.n	800d572 <iNemo_setOrientation.constprop.40+0x186>
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 800d6ea:	e742      	b.n	800d572 <iNemo_setOrientation.constprop.40+0x186>
 800d6ec:	22ff      	movs	r2, #255	; 0xff
 800d6ee:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 800d6f2:	e73e      	b.n	800d572 <iNemo_setOrientation.constprop.40+0x186>
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 800d6fa:	e74e      	b.n	800d59a <iNemo_setOrientation.constprop.40+0x1ae>
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 800d702:	e74a      	b.n	800d59a <iNemo_setOrientation.constprop.40+0x1ae>
 800d704:	22ff      	movs	r2, #255	; 0xff
 800d706:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 800d70a:	e746      	b.n	800d59a <iNemo_setOrientation.constprop.40+0x1ae>
 800d70c:	2201      	movs	r2, #1
 800d70e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 800d712:	e742      	b.n	800d59a <iNemo_setOrientation.constprop.40+0x1ae>
 800d714:	22ff      	movs	r2, #255	; 0xff
 800d716:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 800d71a:	e73e      	b.n	800d59a <iNemo_setOrientation.constprop.40+0x1ae>
 800d71c:	2201      	movs	r2, #1
 800d71e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 800d722:	e752      	b.n	800d5ca <iNemo_setOrientation.constprop.40+0x1de>
 800d724:	2201      	movs	r2, #1
 800d726:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 800d72a:	e74e      	b.n	800d5ca <iNemo_setOrientation.constprop.40+0x1de>
 800d72c:	22ff      	movs	r2, #255	; 0xff
 800d72e:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 800d732:	e74a      	b.n	800d5ca <iNemo_setOrientation.constprop.40+0x1de>
 800d734:	2201      	movs	r2, #1
 800d736:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 800d73a:	e746      	b.n	800d5ca <iNemo_setOrientation.constprop.40+0x1de>
 800d73c:	22ff      	movs	r2, #255	; 0xff
 800d73e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 800d742:	e742      	b.n	800d5ca <iNemo_setOrientation.constprop.40+0x1de>
 800d744:	2201      	movs	r2, #1
 800d746:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800d74a:	e752      	b.n	800d5f2 <iNemo_setOrientation.constprop.40+0x206>
 800d74c:	2201      	movs	r2, #1
 800d74e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 800d752:	e74e      	b.n	800d5f2 <iNemo_setOrientation.constprop.40+0x206>
 800d754:	22ff      	movs	r2, #255	; 0xff
 800d756:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 800d75a:	e74a      	b.n	800d5f2 <iNemo_setOrientation.constprop.40+0x206>
 800d75c:	2201      	movs	r2, #1
 800d75e:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 800d762:	e746      	b.n	800d5f2 <iNemo_setOrientation.constprop.40+0x206>
 800d764:	22ff      	movs	r2, #255	; 0xff
 800d766:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800d76a:	e742      	b.n	800d5f2 <iNemo_setOrientation.constprop.40+0x206>
 800d76c:	2201      	movs	r2, #1
 800d76e:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 800d772:	b004      	add	sp, #16
 800d774:	bcf0      	pop	{r4, r5, r6, r7}
 800d776:	4770      	bx	lr
 800d778:	2201      	movs	r2, #1
 800d77a:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 800d77e:	b004      	add	sp, #16
 800d780:	bcf0      	pop	{r4, r5, r6, r7}
 800d782:	4770      	bx	lr
 800d784:	22ff      	movs	r2, #255	; 0xff
 800d786:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 800d78a:	b004      	add	sp, #16
 800d78c:	bcf0      	pop	{r4, r5, r6, r7}
 800d78e:	4770      	bx	lr
 800d790:	2201      	movs	r2, #1
 800d792:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 800d796:	b004      	add	sp, #16
 800d798:	bcf0      	pop	{r4, r5, r6, r7}
 800d79a:	4770      	bx	lr

0800d79c <iNemo_setOrientation_6X.constprop.41>:
 800d79c:	b4f0      	push	{r4, r5, r6, r7}
 800d79e:	4973      	ldr	r1, [pc, #460]	; (800d96c <iNemo_setOrientation_6X.constprop.41+0x1d0>)
 800d7a0:	4b73      	ldr	r3, [pc, #460]	; (800d970 <iNemo_setOrientation_6X.constprop.41+0x1d4>)
 800d7a2:	7808      	ldrb	r0, [r1, #0]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	2f17      	cmp	r7, #23
 800d7ae:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
 800d7b2:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 800d7b6:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
 800d7ba:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 800d7be:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
 800d7c2:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
 800d7c6:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 800d7ca:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
 800d7ce:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 800d7d2:	790a      	ldrb	r2, [r1, #4]
 800d7d4:	bf98      	it	ls
 800d7d6:	3020      	addls	r0, #32
 800d7d8:	f88d 0004 	strb.w	r0, [sp, #4]
 800d7dc:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800d7e0:	2817      	cmp	r0, #23
 800d7e2:	bf98      	it	ls
 800d7e4:	3220      	addls	r2, #32
 800d7e6:	f88d 2008 	strb.w	r2, [sp, #8]
 800d7ea:	7a0a      	ldrb	r2, [r1, #8]
 800d7ec:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800d7f0:	2817      	cmp	r0, #23
 800d7f2:	bf98      	it	ls
 800d7f4:	3220      	addls	r2, #32
 800d7f6:	f88d 200c 	strb.w	r2, [sp, #12]
 800d7fa:	784a      	ldrb	r2, [r1, #1]
 800d7fc:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800d800:	2817      	cmp	r0, #23
 800d802:	bf98      	it	ls
 800d804:	3220      	addls	r2, #32
 800d806:	f88d 2005 	strb.w	r2, [sp, #5]
 800d80a:	794a      	ldrb	r2, [r1, #5]
 800d80c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800d810:	2817      	cmp	r0, #23
 800d812:	bf98      	it	ls
 800d814:	3220      	addls	r2, #32
 800d816:	f88d 2009 	strb.w	r2, [sp, #9]
 800d81a:	7a4a      	ldrb	r2, [r1, #9]
 800d81c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800d820:	2817      	cmp	r0, #23
 800d822:	bf98      	it	ls
 800d824:	3220      	addls	r2, #32
 800d826:	f88d 200d 	strb.w	r2, [sp, #13]
 800d82a:	788a      	ldrb	r2, [r1, #2]
 800d82c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800d830:	2817      	cmp	r0, #23
 800d832:	bf98      	it	ls
 800d834:	3220      	addls	r2, #32
 800d836:	f88d 2006 	strb.w	r2, [sp, #6]
 800d83a:	798a      	ldrb	r2, [r1, #6]
 800d83c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800d840:	2817      	cmp	r0, #23
 800d842:	bf98      	it	ls
 800d844:	3220      	addls	r2, #32
 800d846:	f88d 200a 	strb.w	r2, [sp, #10]
 800d84a:	7a8a      	ldrb	r2, [r1, #10]
 800d84c:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 800d850:	2917      	cmp	r1, #23
 800d852:	bf98      	it	ls
 800d854:	3220      	addls	r2, #32
 800d856:	f88d 200e 	strb.w	r2, [sp, #14]
 800d85a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d85e:	3a64      	subs	r2, #100	; 0x64
 800d860:	2a13      	cmp	r2, #19
 800d862:	d80e      	bhi.n	800d882 <iNemo_setOrientation_6X.constprop.41+0xe6>
 800d864:	e8df f002 	tbb	[pc, r2]
 800d868:	0d0dba0a 	.word	0x0d0dba0a
 800d86c:	0d0d0d0d 	.word	0x0d0d0d0d
 800d870:	0dbe0d0d 	.word	0x0dbe0d0d
 800d874:	c20d0d0d 	.word	0xc20d0d0d
 800d878:	ca0dc60d 	.word	0xca0dc60d
 800d87c:	22ff      	movs	r2, #255	; 0xff
 800d87e:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 800d882:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d886:	3a64      	subs	r2, #100	; 0x64
 800d888:	2a13      	cmp	r2, #19
 800d88a:	d80e      	bhi.n	800d8aa <iNemo_setOrientation_6X.constprop.41+0x10e>
 800d88c:	e8df f002 	tbb	[pc, r2]
 800d890:	0d0dba0a 	.word	0x0d0dba0a
 800d894:	0d0d0d0d 	.word	0x0d0d0d0d
 800d898:	0dbe0d0d 	.word	0x0dbe0d0d
 800d89c:	c20d0d0d 	.word	0xc20d0d0d
 800d8a0:	ca0dc60d 	.word	0xca0dc60d
 800d8a4:	22ff      	movs	r2, #255	; 0xff
 800d8a6:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 800d8aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d8ae:	3a64      	subs	r2, #100	; 0x64
 800d8b0:	2a13      	cmp	r2, #19
 800d8b2:	d80e      	bhi.n	800d8d2 <iNemo_setOrientation_6X.constprop.41+0x136>
 800d8b4:	e8df f002 	tbb	[pc, r2]
 800d8b8:	0d0dba0a 	.word	0x0d0dba0a
 800d8bc:	0d0d0d0d 	.word	0x0d0d0d0d
 800d8c0:	0dbe0d0d 	.word	0x0dbe0d0d
 800d8c4:	c20d0d0d 	.word	0xc20d0d0d
 800d8c8:	ca0dc60d 	.word	0xca0dc60d
 800d8cc:	22ff      	movs	r2, #255	; 0xff
 800d8ce:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 800d8d2:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800d8d6:	3a64      	subs	r2, #100	; 0x64
 800d8d8:	2a13      	cmp	r2, #19
 800d8da:	d80e      	bhi.n	800d8fa <iNemo_setOrientation_6X.constprop.41+0x15e>
 800d8dc:	e8df f002 	tbb	[pc, r2]
 800d8e0:	0d0dba0a 	.word	0x0d0dba0a
 800d8e4:	0d0d0d0d 	.word	0x0d0d0d0d
 800d8e8:	0dbe0d0d 	.word	0x0dbe0d0d
 800d8ec:	c20d0d0d 	.word	0xc20d0d0d
 800d8f0:	ca0dc60d 	.word	0xca0dc60d
 800d8f4:	22ff      	movs	r2, #255	; 0xff
 800d8f6:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 800d8fa:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800d8fe:	3a64      	subs	r2, #100	; 0x64
 800d900:	2a13      	cmp	r2, #19
 800d902:	d80e      	bhi.n	800d922 <iNemo_setOrientation_6X.constprop.41+0x186>
 800d904:	e8df f002 	tbb	[pc, r2]
 800d908:	0d0dba0a 	.word	0x0d0dba0a
 800d90c:	0d0d0d0d 	.word	0x0d0d0d0d
 800d910:	0dbe0d0d 	.word	0x0dbe0d0d
 800d914:	c20d0d0d 	.word	0xc20d0d0d
 800d918:	ca0dc60d 	.word	0xca0dc60d
 800d91c:	22ff      	movs	r2, #255	; 0xff
 800d91e:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 800d922:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800d926:	3a64      	subs	r2, #100	; 0x64
 800d928:	2a13      	cmp	r2, #19
 800d92a:	d80e      	bhi.n	800d94a <iNemo_setOrientation_6X.constprop.41+0x1ae>
 800d92c:	e8df f002 	tbb	[pc, r2]
 800d930:	0d0dba0a 	.word	0x0d0dba0a
 800d934:	0d0d0d0d 	.word	0x0d0d0d0d
 800d938:	0dbe0d0d 	.word	0x0dbe0d0d
 800d93c:	c20d0d0d 	.word	0xc20d0d0d
 800d940:	ca0dc60d 	.word	0xca0dc60d
 800d944:	22ff      	movs	r2, #255	; 0xff
 800d946:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 800d94a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800d94e:	3a64      	subs	r2, #100	; 0x64
 800d950:	2a13      	cmp	r2, #19
 800d952:	d812      	bhi.n	800d97a <iNemo_setOrientation_6X.constprop.41+0x1de>
 800d954:	e8df f002 	tbb	[pc, r2]
 800d958:	1111ba0e 	.word	0x1111ba0e
 800d95c:	11111111 	.word	0x11111111
 800d960:	11be1111 	.word	0x11be1111
 800d964:	c2111111 	.word	0xc2111111
 800d968:	ca11c611 	.word	0xca11c611
 800d96c:	20000048 	.word	0x20000048
 800d970:	20001bc0 	.word	0x20001bc0
 800d974:	22ff      	movs	r2, #255	; 0xff
 800d976:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 800d97a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800d97e:	3a64      	subs	r2, #100	; 0x64
 800d980:	2a13      	cmp	r2, #19
 800d982:	d80e      	bhi.n	800d9a2 <iNemo_setOrientation_6X.constprop.41+0x206>
 800d984:	e8df f002 	tbb	[pc, r2]
 800d988:	0d0db60a 	.word	0x0d0db60a
 800d98c:	0d0d0d0d 	.word	0x0d0d0d0d
 800d990:	0dba0d0d 	.word	0x0dba0d0d
 800d994:	be0d0d0d 	.word	0xbe0d0d0d
 800d998:	c60dc20d 	.word	0xc60dc20d
 800d99c:	22ff      	movs	r2, #255	; 0xff
 800d99e:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 800d9a2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800d9a6:	3a64      	subs	r2, #100	; 0x64
 800d9a8:	2a13      	cmp	r2, #19
 800d9aa:	d80e      	bhi.n	800d9ca <iNemo_setOrientation_6X.constprop.41+0x22e>
 800d9ac:	e8df f002 	tbb	[pc, r2]
 800d9b0:	0d0db60a 	.word	0x0d0db60a
 800d9b4:	0d0d0d0d 	.word	0x0d0d0d0d
 800d9b8:	0dbc0d0d 	.word	0x0dbc0d0d
 800d9bc:	c20d0d0d 	.word	0xc20d0d0d
 800d9c0:	100dc80d 	.word	0x100dc80d
 800d9c4:	22ff      	movs	r2, #255	; 0xff
 800d9c6:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 800d9ca:	b004      	add	sp, #16
 800d9cc:	bcf0      	pop	{r4, r5, r6, r7}
 800d9ce:	4770      	bx	lr
 800d9d0:	22ff      	movs	r2, #255	; 0xff
 800d9d2:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 800d9d6:	b004      	add	sp, #16
 800d9d8:	bcf0      	pop	{r4, r5, r6, r7}
 800d9da:	4770      	bx	lr
 800d9dc:	2201      	movs	r2, #1
 800d9de:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 800d9e2:	e74e      	b.n	800d882 <iNemo_setOrientation_6X.constprop.41+0xe6>
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 800d9ea:	e74a      	b.n	800d882 <iNemo_setOrientation_6X.constprop.41+0xe6>
 800d9ec:	22ff      	movs	r2, #255	; 0xff
 800d9ee:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 800d9f2:	e746      	b.n	800d882 <iNemo_setOrientation_6X.constprop.41+0xe6>
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 800d9fa:	e742      	b.n	800d882 <iNemo_setOrientation_6X.constprop.41+0xe6>
 800d9fc:	22ff      	movs	r2, #255	; 0xff
 800d9fe:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 800da02:	e73e      	b.n	800d882 <iNemo_setOrientation_6X.constprop.41+0xe6>
 800da04:	2201      	movs	r2, #1
 800da06:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 800da0a:	e74e      	b.n	800d8aa <iNemo_setOrientation_6X.constprop.41+0x10e>
 800da0c:	2201      	movs	r2, #1
 800da0e:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 800da12:	e74a      	b.n	800d8aa <iNemo_setOrientation_6X.constprop.41+0x10e>
 800da14:	22ff      	movs	r2, #255	; 0xff
 800da16:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 800da1a:	e746      	b.n	800d8aa <iNemo_setOrientation_6X.constprop.41+0x10e>
 800da1c:	2201      	movs	r2, #1
 800da1e:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 800da22:	e742      	b.n	800d8aa <iNemo_setOrientation_6X.constprop.41+0x10e>
 800da24:	22ff      	movs	r2, #255	; 0xff
 800da26:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 800da2a:	e73e      	b.n	800d8aa <iNemo_setOrientation_6X.constprop.41+0x10e>
 800da2c:	2201      	movs	r2, #1
 800da2e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 800da32:	e74e      	b.n	800d8d2 <iNemo_setOrientation_6X.constprop.41+0x136>
 800da34:	2201      	movs	r2, #1
 800da36:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 800da3a:	e74a      	b.n	800d8d2 <iNemo_setOrientation_6X.constprop.41+0x136>
 800da3c:	22ff      	movs	r2, #255	; 0xff
 800da3e:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 800da42:	e746      	b.n	800d8d2 <iNemo_setOrientation_6X.constprop.41+0x136>
 800da44:	2201      	movs	r2, #1
 800da46:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 800da4a:	e742      	b.n	800d8d2 <iNemo_setOrientation_6X.constprop.41+0x136>
 800da4c:	22ff      	movs	r2, #255	; 0xff
 800da4e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 800da52:	e73e      	b.n	800d8d2 <iNemo_setOrientation_6X.constprop.41+0x136>
 800da54:	2201      	movs	r2, #1
 800da56:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 800da5a:	e74e      	b.n	800d8fa <iNemo_setOrientation_6X.constprop.41+0x15e>
 800da5c:	2201      	movs	r2, #1
 800da5e:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 800da62:	e74a      	b.n	800d8fa <iNemo_setOrientation_6X.constprop.41+0x15e>
 800da64:	22ff      	movs	r2, #255	; 0xff
 800da66:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 800da6a:	e746      	b.n	800d8fa <iNemo_setOrientation_6X.constprop.41+0x15e>
 800da6c:	2201      	movs	r2, #1
 800da6e:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 800da72:	e742      	b.n	800d8fa <iNemo_setOrientation_6X.constprop.41+0x15e>
 800da74:	22ff      	movs	r2, #255	; 0xff
 800da76:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 800da7a:	e73e      	b.n	800d8fa <iNemo_setOrientation_6X.constprop.41+0x15e>
 800da7c:	2201      	movs	r2, #1
 800da7e:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 800da82:	e74e      	b.n	800d922 <iNemo_setOrientation_6X.constprop.41+0x186>
 800da84:	2201      	movs	r2, #1
 800da86:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 800da8a:	e74a      	b.n	800d922 <iNemo_setOrientation_6X.constprop.41+0x186>
 800da8c:	22ff      	movs	r2, #255	; 0xff
 800da8e:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 800da92:	e746      	b.n	800d922 <iNemo_setOrientation_6X.constprop.41+0x186>
 800da94:	2201      	movs	r2, #1
 800da96:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 800da9a:	e742      	b.n	800d922 <iNemo_setOrientation_6X.constprop.41+0x186>
 800da9c:	22ff      	movs	r2, #255	; 0xff
 800da9e:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 800daa2:	e73e      	b.n	800d922 <iNemo_setOrientation_6X.constprop.41+0x186>
 800daa4:	2201      	movs	r2, #1
 800daa6:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 800daaa:	e74e      	b.n	800d94a <iNemo_setOrientation_6X.constprop.41+0x1ae>
 800daac:	2201      	movs	r2, #1
 800daae:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 800dab2:	e74a      	b.n	800d94a <iNemo_setOrientation_6X.constprop.41+0x1ae>
 800dab4:	22ff      	movs	r2, #255	; 0xff
 800dab6:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 800daba:	e746      	b.n	800d94a <iNemo_setOrientation_6X.constprop.41+0x1ae>
 800dabc:	2201      	movs	r2, #1
 800dabe:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 800dac2:	e742      	b.n	800d94a <iNemo_setOrientation_6X.constprop.41+0x1ae>
 800dac4:	22ff      	movs	r2, #255	; 0xff
 800dac6:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 800daca:	e73e      	b.n	800d94a <iNemo_setOrientation_6X.constprop.41+0x1ae>
 800dacc:	2201      	movs	r2, #1
 800dace:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 800dad2:	e752      	b.n	800d97a <iNemo_setOrientation_6X.constprop.41+0x1de>
 800dad4:	2201      	movs	r2, #1
 800dad6:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 800dada:	e74e      	b.n	800d97a <iNemo_setOrientation_6X.constprop.41+0x1de>
 800dadc:	22ff      	movs	r2, #255	; 0xff
 800dade:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 800dae2:	e74a      	b.n	800d97a <iNemo_setOrientation_6X.constprop.41+0x1de>
 800dae4:	2201      	movs	r2, #1
 800dae6:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 800daea:	e746      	b.n	800d97a <iNemo_setOrientation_6X.constprop.41+0x1de>
 800daec:	22ff      	movs	r2, #255	; 0xff
 800daee:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 800daf2:	e742      	b.n	800d97a <iNemo_setOrientation_6X.constprop.41+0x1de>
 800daf4:	2201      	movs	r2, #1
 800daf6:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 800dafa:	e752      	b.n	800d9a2 <iNemo_setOrientation_6X.constprop.41+0x206>
 800dafc:	2201      	movs	r2, #1
 800dafe:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 800db02:	e74e      	b.n	800d9a2 <iNemo_setOrientation_6X.constprop.41+0x206>
 800db04:	22ff      	movs	r2, #255	; 0xff
 800db06:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 800db0a:	e74a      	b.n	800d9a2 <iNemo_setOrientation_6X.constprop.41+0x206>
 800db0c:	2201      	movs	r2, #1
 800db0e:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 800db12:	e746      	b.n	800d9a2 <iNemo_setOrientation_6X.constprop.41+0x206>
 800db14:	22ff      	movs	r2, #255	; 0xff
 800db16:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 800db1a:	e742      	b.n	800d9a2 <iNemo_setOrientation_6X.constprop.41+0x206>
 800db1c:	2201      	movs	r2, #1
 800db1e:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 800db22:	b004      	add	sp, #16
 800db24:	bcf0      	pop	{r4, r5, r6, r7}
 800db26:	4770      	bx	lr
 800db28:	2201      	movs	r2, #1
 800db2a:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 800db2e:	b004      	add	sp, #16
 800db30:	bcf0      	pop	{r4, r5, r6, r7}
 800db32:	4770      	bx	lr
 800db34:	22ff      	movs	r2, #255	; 0xff
 800db36:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 800db3a:	b004      	add	sp, #16
 800db3c:	bcf0      	pop	{r4, r5, r6, r7}
 800db3e:	4770      	bx	lr
 800db40:	2201      	movs	r2, #1
 800db42:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 800db46:	b004      	add	sp, #16
 800db48:	bcf0      	pop	{r4, r5, r6, r7}
 800db4a:	4770      	bx	lr
 800db4c:	0000      	movs	r0, r0
	...

0800db50 <MotionFX_initialize>:
 800db50:	4a11      	ldr	r2, [pc, #68]	; (800db98 <MotionFX_initialize+0x48>)
 800db52:	4912      	ldr	r1, [pc, #72]	; (800db9c <MotionFX_initialize+0x4c>)
 800db54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db58:	6813      	ldr	r3, [r2, #0]
 800db5a:	f023 0301 	bic.w	r3, r3, #1
 800db5e:	6013      	str	r3, [r2, #0]
 800db60:	680b      	ldr	r3, [r1, #0]
 800db62:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800db66:	4013      	ands	r3, r2
 800db68:	f24c 2040 	movw	r0, #49728	; 0xc240
 800db6c:	4283      	cmp	r3, r0
 800db6e:	d01f      	beq.n	800dbb0 <MotionFX_initialize+0x60>
 800db70:	680b      	ldr	r3, [r1, #0]
 800db72:	f24c 2170 	movw	r1, #49776	; 0xc270
 800db76:	4013      	ands	r3, r2
 800db78:	428b      	cmp	r3, r1
 800db7a:	d019      	beq.n	800dbb0 <MotionFX_initialize+0x60>
 800db7c:	4b08      	ldr	r3, [pc, #32]	; (800dba0 <MotionFX_initialize+0x50>)
 800db7e:	2201      	movs	r2, #1
 800db80:	601a      	str	r2, [r3, #0]
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	2a00      	cmp	r2, #0
 800db86:	d1fc      	bne.n	800db82 <MotionFX_initialize+0x32>
 800db88:	4b06      	ldr	r3, [pc, #24]	; (800dba4 <MotionFX_initialize+0x54>)
 800db8a:	4a07      	ldr	r2, [pc, #28]	; (800dba8 <MotionFX_initialize+0x58>)
 800db8c:	601a      	str	r2, [r3, #0]
 800db8e:	681a      	ldr	r2, [r3, #0]
 800db90:	4b06      	ldr	r3, [pc, #24]	; (800dbac <MotionFX_initialize+0x5c>)
 800db92:	429a      	cmp	r2, r3
 800db94:	d02b      	beq.n	800dbee <MotionFX_initialize+0x9e>
 800db96:	e7fe      	b.n	800db96 <MotionFX_initialize+0x46>
 800db98:	e0002000 	.word	0xe0002000
 800db9c:	e000ed00 	.word	0xe000ed00
 800dba0:	40023008 	.word	0x40023008
 800dba4:	40023000 	.word	0x40023000
 800dba8:	f407a5c2 	.word	0xf407a5c2
 800dbac:	b5e8b5cd 	.word	0xb5e8b5cd
 800dbb0:	4beb      	ldr	r3, [pc, #940]	; (800df60 <MotionFX_initialize+0x410>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d1e1      	bne.n	800db7c <MotionFX_initialize+0x2c>
 800dbb8:	4aea      	ldr	r2, [pc, #936]	; (800df64 <MotionFX_initialize+0x414>)
 800dbba:	6813      	ldr	r3, [r2, #0]
 800dbbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dbc0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800dbc4:	d006      	beq.n	800dbd4 <MotionFX_initialize+0x84>
 800dbc6:	6813      	ldr	r3, [r2, #0]
 800dbc8:	f240 4283 	movw	r2, #1155	; 0x483
 800dbcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d1d3      	bne.n	800db7c <MotionFX_initialize+0x2c>
 800dbd4:	4be4      	ldr	r3, [pc, #912]	; (800df68 <MotionFX_initialize+0x418>)
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	601a      	str	r2, [r3, #0]
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	2a00      	cmp	r2, #0
 800dbde:	d1fc      	bne.n	800dbda <MotionFX_initialize+0x8a>
 800dbe0:	4be2      	ldr	r3, [pc, #904]	; (800df6c <MotionFX_initialize+0x41c>)
 800dbe2:	4ae3      	ldr	r2, [pc, #908]	; (800df70 <MotionFX_initialize+0x420>)
 800dbe4:	601a      	str	r2, [r3, #0]
 800dbe6:	681a      	ldr	r2, [r3, #0]
 800dbe8:	4be2      	ldr	r3, [pc, #904]	; (800df74 <MotionFX_initialize+0x424>)
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d1d3      	bne.n	800db96 <MotionFX_initialize+0x46>
 800dbee:	4ce2      	ldr	r4, [pc, #904]	; (800df78 <MotionFX_initialize+0x428>)
 800dbf0:	eddf 7ae2 	vldr	s15, [pc, #904]	; 800df7c <MotionFX_initialize+0x42c>
 800dbf4:	4ee2      	ldr	r6, [pc, #904]	; (800df80 <MotionFX_initialize+0x430>)
 800dbf6:	eddf 6ae3 	vldr	s13, [pc, #908]	; 800df84 <MotionFX_initialize+0x434>
 800dbfa:	2500      	movs	r5, #0
 800dbfc:	f04f 0901 	mov.w	r9, #1
 800dc00:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 800df38 <MotionFX_initialize+0x3e8>
 800dc04:	ed9f 1bce 	vldr	d1, [pc, #824]	; 800df40 <MotionFX_initialize+0x3f0>
 800dc08:	ed9f 2bcf 	vldr	d2, [pc, #828]	; 800df48 <MotionFX_initialize+0x3f8>
 800dc0c:	ed9f 3bd0 	vldr	d3, [pc, #832]	; 800df50 <MotionFX_initialize+0x400>
 800dc10:	f20f 3b44 	addw	fp, pc, #836	; 0x344
 800dc14:	e9db ab00 	ldrd	sl, fp, [fp]
 800dc18:	f241 17b6 	movw	r7, #4534	; 0x11b6
 800dc1c:	f884 9d49 	strb.w	r9, [r4, #3401]	; 0xd49
 800dc20:	f8c4 5d4c 	str.w	r5, [r4, #3404]	; 0xd4c
 800dc24:	f8c4 5d50 	str.w	r5, [r4, #3408]	; 0xd50
 800dc28:	f7ff fbd0 	bl	800d3cc <rt_InitInfAndNaN.isra.3>
 800dc2c:	f241 10b4 	movw	r0, #4532	; 0x11b4
 800dc30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc34:	f606 08e8 	addw	r8, r6, #2280	; 0x8e8
 800dc38:	5235      	strh	r5, [r6, r0]
 800dc3a:	55f5      	strb	r5, [r6, r7]
 800dc3c:	200a      	movs	r0, #10
 800dc3e:	ed88 5b02 	vstr	d5, [r8, #8]
 800dc42:	ed88 1b04 	vstr	d1, [r8, #16]
 800dc46:	ed88 2b06 	vstr	d2, [r8, #24]
 800dc4a:	e9c8 ab08 	strd	sl, fp, [r8, #32]
 800dc4e:	ed88 3b0a 	vstr	d3, [r8, #40]	; 0x28
 800dc52:	ed88 7a82 	vstr	s14, [r8, #520]	; 0x208
 800dc56:	f886 08e0 	strb.w	r0, [r6, #2272]	; 0x8e0
 800dc5a:	edc8 7a83 	vstr	s15, [r8, #524]	; 0x20c
 800dc5e:	edc8 7a84 	vstr	s15, [r8, #528]	; 0x210
 800dc62:	f8c4 5418 	str.w	r5, [r4, #1048]	; 0x418
 800dc66:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
 800dc6a:	f8c4 5430 	str.w	r5, [r4, #1072]	; 0x430
 800dc6e:	f8c4 541c 	str.w	r5, [r4, #1052]	; 0x41c
 800dc72:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
 800dc76:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
 800dc7a:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
 800dc7e:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
 800dc82:	f884 5438 	strb.w	r5, [r4, #1080]	; 0x438
 800dc86:	f7ff fba1 	bl	800d3cc <rt_InitInfAndNaN.isra.3>
 800dc8a:	f604 330c 	addw	r3, r4, #2828	; 0xb0c
 800dc8e:	ed86 5b06 	vstr	d5, [r6, #24]
 800dc92:	eddf 4abd 	vldr	s9, [pc, #756]	; 800df88 <MotionFX_initialize+0x438>
 800dc96:	ed9f 5abd 	vldr	s10, [pc, #756]	; 800df8c <MotionFX_initialize+0x43c>
 800dc9a:	eddf 5abd 	vldr	s11, [pc, #756]	; 800df90 <MotionFX_initialize+0x440>
 800dc9e:	f8df c30c 	ldr.w	ip, [pc, #780]	; 800dfac <MotionFX_initialize+0x45c>
 800dca2:	48bc      	ldr	r0, [pc, #752]	; (800df94 <MotionFX_initialize+0x444>)
 800dca4:	49bc      	ldr	r1, [pc, #752]	; (800df98 <MotionFX_initialize+0x448>)
 800dca6:	4abd      	ldr	r2, [pc, #756]	; (800df9c <MotionFX_initialize+0x44c>)
 800dca8:	ed86 7a86 	vstr	s14, [r6, #536]	; 0x218
 800dcac:	f604 0ecc 	addw	lr, r4, #2252	; 0x8cc
 800dcb0:	f604 4704 	addw	r7, r4, #3076	; 0xc04
 800dcb4:	ed86 1b08 	vstr	d1, [r6, #32]
 800dcb8:	ed86 2b0a 	vstr	d2, [r6, #40]	; 0x28
 800dcbc:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800dcc0:	e9c6 ab0c 	strd	sl, fp, [r6, #48]	; 0x30
 800dcc4:	ed86 3b0e 	vstr	d3, [r6, #56]	; 0x38
 800dcc8:	f04f 0a02 	mov.w	sl, #2
 800dccc:	ed83 7a21 	vstr	s14, [r3, #132]	; 0x84
 800dcd0:	ed83 7a25 	vstr	s14, [r3, #148]	; 0x94
 800dcd4:	ed83 7a29 	vstr	s14, [r3, #164]	; 0xa4
 800dcd8:	edc6 7a87 	vstr	s15, [r6, #540]	; 0x21c
 800dcdc:	edc6 7a88 	vstr	s15, [r6, #544]	; 0x220
 800dce0:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
 800dce4:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 800dce8:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
 800dcec:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
 800dcf0:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
 800dcf4:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
 800dcf8:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
 800dcfc:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
 800dd00:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
 800dd04:	f8a6 58dc 	strh.w	r5, [r6, #2268]	; 0x8dc
 800dd08:	f886 58de 	strb.w	r5, [r6, #2270]	; 0x8de
 800dd0c:	f886 900c 	strb.w	r9, [r6, #12]
 800dd10:	f04f 3b01 	mov.w	fp, #16843009	; 0x1010101
 800dd14:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
 800dd18:	f8c4 5448 	str.w	r5, [r4, #1096]	; 0x448
 800dd1c:	f8c4 5454 	str.w	r5, [r4, #1108]	; 0x454
 800dd20:	f8c4 5440 	str.w	r5, [r4, #1088]	; 0x440
 800dd24:	f884 5444 	strb.w	r5, [r4, #1092]	; 0x444
 800dd28:	f8c4 544c 	str.w	r5, [r4, #1100]	; 0x44c
 800dd2c:	f884 5450 	strb.w	r5, [r4, #1104]	; 0x450
 800dd30:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
 800dd34:	f884 545c 	strb.w	r5, [r4, #1116]	; 0x45c
 800dd38:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
 800dd3c:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 800dd40:	ed83 7a31 	vstr	s14, [r3, #196]	; 0xc4
 800dd44:	ed83 7a35 	vstr	s14, [r3, #212]	; 0xd4
 800dd48:	ed83 7a39 	vstr	s14, [r3, #228]	; 0xe4
 800dd4c:	ed83 7a3d 	vstr	s14, [r3, #244]	; 0xf4
 800dd50:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
 800dd54:	ed83 7a13 	vstr	s14, [r3, #76]	; 0x4c
 800dd58:	ed83 7a17 	vstr	s14, [r3, #92]	; 0x5c
 800dd5c:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 800dd60:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800dd64:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
 800dd68:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
 800dd6c:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
 800dd70:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
 800dd74:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
 800dd78:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 800dd7c:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
 800dd80:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
 800dd84:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
 800dd88:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
 800dd8c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
 800dd90:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
 800dd94:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 800dd98:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 800dd9c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 800dda0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 800dda4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 800dda8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 800ddac:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
 800ddb0:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 800ddb4:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
 800ddb8:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 800ddbc:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 800ddc0:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 800ddc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddc8:	f8c4 cc2c 	str.w	ip, [r4, #3116]	; 0xc2c
 800ddcc:	f8c4 0c30 	str.w	r0, [r4, #3120]	; 0xc30
 800ddd0:	f8c4 1c34 	str.w	r1, [r4, #3124]	; 0xc34
 800ddd4:	f8c4 2c38 	str.w	r2, [r4, #3128]	; 0xc38
 800ddd8:	edc8 7a28 	vstr	s15, [r8, #160]	; 0xa0
 800dddc:	edc8 7a29 	vstr	s15, [r8, #164]	; 0xa4
 800dde0:	edc8 7a2a 	vstr	s15, [r8, #168]	; 0xa8
 800dde4:	ed87 7a08 	vstr	s14, [r7, #32]
 800dde8:	f604 18c4 	addw	r8, r4, #2500	; 0x9c4
 800ddec:	edc7 4a00 	vstr	s9, [r7]
 800ddf0:	ed87 5a01 	vstr	s10, [r7, #4]
 800ddf4:	edc7 5a02 	vstr	s11, [r7, #8]
 800ddf8:	edc7 6a03 	vstr	s13, [r7, #12]
 800ddfc:	ed87 6a04 	vstr	s12, [r7, #16]
 800de00:	ed8e 7a21 	vstr	s14, [lr, #132]	; 0x84
 800de04:	ed8e 7a25 	vstr	s14, [lr, #148]	; 0x94
 800de08:	ed8e 7a29 	vstr	s14, [lr, #164]	; 0xa4
 800de0c:	edce 7a1e 	vstr	s15, [lr, #120]	; 0x78
 800de10:	edce 7a1f 	vstr	s15, [lr, #124]	; 0x7c
 800de14:	edce 7a20 	vstr	s15, [lr, #128]	; 0x80
 800de18:	edce 7a22 	vstr	s15, [lr, #136]	; 0x88
 800de1c:	edce 7a23 	vstr	s15, [lr, #140]	; 0x8c
 800de20:	edce 7a24 	vstr	s15, [lr, #144]	; 0x90
 800de24:	edce 7a26 	vstr	s15, [lr, #152]	; 0x98
 800de28:	edce 7a27 	vstr	s15, [lr, #156]	; 0x9c
 800de2c:	edce 7a28 	vstr	s15, [lr, #160]	; 0xa0
 800de30:	f8a4 3c3c 	strh.w	r3, [r4, #3132]	; 0xc3c
 800de34:	f8c4 9c1c 	str.w	r9, [r4, #3100]	; 0xc1c
 800de38:	f884 9c28 	strb.w	r9, [r4, #3112]	; 0xc28
 800de3c:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 800de40:	f8c4 bc18 	str.w	fp, [r4, #3096]	; 0xc18
 800de44:	f884 ac20 	strb.w	sl, [r4, #3104]	; 0xc20
 800de48:	edce 7a2a 	vstr	s15, [lr, #168]	; 0xa8
 800de4c:	ed8e 7a2d 	vstr	s14, [lr, #180]	; 0xb4
 800de50:	ed8e 7a31 	vstr	s14, [lr, #196]	; 0xc4
 800de54:	ed8e 7a35 	vstr	s14, [lr, #212]	; 0xd4
 800de58:	ed8e 7a39 	vstr	s14, [lr, #228]	; 0xe4
 800de5c:	ed8e 7a3d 	vstr	s14, [lr, #244]	; 0xf4
 800de60:	ed8e 7a0f 	vstr	s14, [lr, #60]	; 0x3c
 800de64:	ed8e 7a13 	vstr	s14, [lr, #76]	; 0x4c
 800de68:	ed8e 7a17 	vstr	s14, [lr, #92]	; 0x5c
 800de6c:	edce 7a2b 	vstr	s15, [lr, #172]	; 0xac
 800de70:	edce 7a2c 	vstr	s15, [lr, #176]	; 0xb0
 800de74:	edce 7a2e 	vstr	s15, [lr, #184]	; 0xb8
 800de78:	edce 7a2f 	vstr	s15, [lr, #188]	; 0xbc
 800de7c:	edce 7a30 	vstr	s15, [lr, #192]	; 0xc0
 800de80:	edce 7a32 	vstr	s15, [lr, #200]	; 0xc8
 800de84:	edce 7a33 	vstr	s15, [lr, #204]	; 0xcc
 800de88:	edce 7a34 	vstr	s15, [lr, #208]	; 0xd0
 800de8c:	edce 7a36 	vstr	s15, [lr, #216]	; 0xd8
 800de90:	edce 7a37 	vstr	s15, [lr, #220]	; 0xdc
 800de94:	edce 7a38 	vstr	s15, [lr, #224]	; 0xe0
 800de98:	edce 7a3a 	vstr	s15, [lr, #232]	; 0xe8
 800de9c:	edce 7a3b 	vstr	s15, [lr, #236]	; 0xec
 800dea0:	edce 7a3c 	vstr	s15, [lr, #240]	; 0xf0
 800dea4:	edce 7a10 	vstr	s15, [lr, #64]	; 0x40
 800dea8:	edce 7a11 	vstr	s15, [lr, #68]	; 0x44
 800deac:	edce 7a12 	vstr	s15, [lr, #72]	; 0x48
 800deb0:	edce 7a14 	vstr	s15, [lr, #80]	; 0x50
 800deb4:	edce 7a15 	vstr	s15, [lr, #84]	; 0x54
 800deb8:	edce 7a16 	vstr	s15, [lr, #88]	; 0x58
 800debc:	edce 7a18 	vstr	s15, [lr, #96]	; 0x60
 800dec0:	edce 7a19 	vstr	s15, [lr, #100]	; 0x64
 800dec4:	edce 7a1a 	vstr	s15, [lr, #104]	; 0x68
 800dec8:	edce 7a1b 	vstr	s15, [lr, #108]	; 0x6c
 800decc:	edce 7a1c 	vstr	s15, [lr, #112]	; 0x70
 800ded0:	f8a4 39fc 	strh.w	r3, [r4, #2556]	; 0x9fc
 800ded4:	4b32      	ldr	r3, [pc, #200]	; (800dfa0 <MotionFX_initialize+0x450>)
 800ded6:	f8c4 c9ec 	str.w	ip, [r4, #2540]	; 0x9ec
 800deda:	f8c4 09f0 	str.w	r0, [r4, #2544]	; 0x9f0
 800dede:	f8c4 19f4 	str.w	r1, [r4, #2548]	; 0x9f4
 800dee2:	f8c4 29f8 	str.w	r2, [r4, #2552]	; 0x9f8
 800dee6:	f8c4 39d8 	str.w	r3, [r4, #2520]	; 0x9d8
 800deea:	edc6 7a2c 	vstr	s15, [r6, #176]	; 0xb0
 800deee:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
 800def2:	edc6 7a2e 	vstr	s15, [r6, #184]	; 0xb8
 800def6:	edc8 4a00 	vstr	s9, [r8]
 800defa:	ed88 5a01 	vstr	s10, [r8, #4]
 800defe:	edc8 5a02 	vstr	s11, [r8, #8]
 800df02:	edc8 6a03 	vstr	s13, [r8, #12]
 800df06:	ed88 6a04 	vstr	s12, [r8, #16]
 800df0a:	ed88 7a08 	vstr	s14, [r8, #32]
 800df0e:	edce 7a1d 	vstr	s15, [lr, #116]	; 0x74
 800df12:	f8c4 99dc 	str.w	r9, [r4, #2524]	; 0x9dc
 800df16:	f884 99e8 	strb.w	r9, [r4, #2536]	; 0x9e8
 800df1a:	f884 a9e0 	strb.w	sl, [r4, #2528]	; 0x9e0
 800df1e:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 800df22:	f7ff fa63 	bl	800d3ec <iNemo_setOrientation.constprop.40>
 800df26:	f7ff fc39 	bl	800d79c <iNemo_setOrientation_6X.constprop.41>
 800df2a:	f04f 567f 	mov.w	r6, #1069547520	; 0x3fc00000
 800df2e:	f8df c080 	ldr.w	ip, [pc, #128]	; 800dfb0 <MotionFX_initialize+0x460>
 800df32:	481c      	ldr	r0, [pc, #112]	; (800dfa4 <MotionFX_initialize+0x454>)
 800df34:	491c      	ldr	r1, [pc, #112]	; (800dfa8 <MotionFX_initialize+0x458>)
 800df36:	e03d      	b.n	800dfb4 <MotionFX_initialize+0x464>
 800df38:	60000000 	.word	0x60000000
 800df3c:	3fc76cab 	.word	0x3fc76cab
 800df40:	20000000 	.word	0x20000000
 800df44:	3fc55a40 	.word	0x3fc55a40
 800df48:	00000000 	.word	0x00000000
 800df4c:	3fbfdfb7 	.word	0x3fbfdfb7
 800df50:	60000000 	.word	0x60000000
 800df54:	3f9f1fed 	.word	0x3f9f1fed
 800df58:	c0000000 	.word	0xc0000000
 800df5c:	3fb2875e 	.word	0x3fb2875e
 800df60:	e0042000 	.word	0xe0042000
 800df64:	5c001000 	.word	0x5c001000
 800df68:	58024c08 	.word	0x58024c08
 800df6c:	58024c00 	.word	0x58024c00
 800df70:	f407a5c2 	.word	0xf407a5c2
 800df74:	b5e8b5cd 	.word	0xb5e8b5cd
 800df78:	20001bc0 	.word	0x20001bc0
 800df7c:	00000000 	.word	0x00000000
 800df80:	20000048 	.word	0x20000048
 800df84:	3f2ac083 	.word	0x3f2ac083
 800df88:	3f639581 	.word	0x3f639581
 800df8c:	402ab021 	.word	0x402ab021
 800df90:	3f13f7cf 	.word	0x3f13f7cf
 800df94:	3a09a027 	.word	0x3a09a027
 800df98:	39b24207 	.word	0x39b24207
 800df9c:	3dcccccd 	.word	0x3dcccccd
 800dfa0:	01000101 	.word	0x01000101
 800dfa4:	3a51b717 	.word	0x3a51b717
 800dfa8:	3a378034 	.word	0x3a378034
 800dfac:	39712c28 	.word	0x39712c28
 800dfb0:	3f666666 	.word	0x3f666666
 800dfb4:	4a14      	ldr	r2, [pc, #80]	; (800e008 <MotionFX_initialize+0x4b8>)
 800dfb6:	4b15      	ldr	r3, [pc, #84]	; (800e00c <MotionFX_initialize+0x4bc>)
 800dfb8:	f8df e054 	ldr.w	lr, [pc, #84]	; 800e010 <MotionFX_initialize+0x4c0>
 800dfbc:	edc8 6a03 	vstr	s13, [r8, #12]
 800dfc0:	edc7 6a03 	vstr	s13, [r7, #12]
 800dfc4:	f884 a9fd 	strb.w	sl, [r4, #2557]	; 0x9fd
 800dfc8:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 800dfcc:	f884 ac3d 	strb.w	sl, [r4, #3133]	; 0xc3d
 800dfd0:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 800dfd4:	f8c4 bc19 	str.w	fp, [r4, #3097]	; 0xc19
 800dfd8:	f8c4 e9d9 	str.w	lr, [r4, #2521]	; 0x9d9
 800dfdc:	f8c8 c000 	str.w	ip, [r8]
 800dfe0:	f8c7 c000 	str.w	ip, [r7]
 800dfe4:	f8c8 6004 	str.w	r6, [r8, #4]
 800dfe8:	607e      	str	r6, [r7, #4]
 800dfea:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
 800dfee:	62b8      	str	r0, [r7, #40]	; 0x28
 800dff0:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
 800dff4:	62f9      	str	r1, [r7, #44]	; 0x2c
 800dff6:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
 800dffa:	633a      	str	r2, [r7, #48]	; 0x30
 800dffc:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 800e000:	637b      	str	r3, [r7, #52]	; 0x34
 800e002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e006:	bf00      	nop
 800e008:	3b378034 	.word	0x3b378034
 800e00c:	3dcccccd 	.word	0x3dcccccd
 800e010:	01010001 	.word	0x01010001

0800e014 <MotionFX_GetLibVersion>:
 800e014:	4b10      	ldr	r3, [pc, #64]	; (800e058 <MotionFX_GetLibVersion+0x44>)
 800e016:	f893 3d49 	ldrb.w	r3, [r3, #3401]	; 0xd49
 800e01a:	b90b      	cbnz	r3, 800e020 <MotionFX_GetLibVersion+0xc>
 800e01c:	4618      	mov	r0, r3
 800e01e:	4770      	bx	lr
 800e020:	b470      	push	{r4, r5, r6}
 800e022:	4e0e      	ldr	r6, [pc, #56]	; (800e05c <MotionFX_GetLibVersion+0x48>)
 800e024:	4605      	mov	r5, r0
 800e026:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e028:	b08b      	sub	sp, #44	; 0x2c
 800e02a:	ac01      	add	r4, sp, #4
 800e02c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e02e:	6833      	ldr	r3, [r6, #0]
 800e030:	f824 3b02 	strh.w	r3, [r4], #2
 800e034:	0c1b      	lsrs	r3, r3, #16
 800e036:	7023      	strb	r3, [r4, #0]
 800e038:	ac01      	add	r4, sp, #4
 800e03a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e03c:	8826      	ldrh	r6, [r4, #0]
 800e03e:	60eb      	str	r3, [r5, #12]
 800e040:	78a4      	ldrb	r4, [r4, #2]
 800e042:	6028      	str	r0, [r5, #0]
 800e044:	2312      	movs	r3, #18
 800e046:	4618      	mov	r0, r3
 800e048:	6069      	str	r1, [r5, #4]
 800e04a:	60aa      	str	r2, [r5, #8]
 800e04c:	822e      	strh	r6, [r5, #16]
 800e04e:	74ac      	strb	r4, [r5, #18]
 800e050:	b00b      	add	sp, #44	; 0x2c
 800e052:	bc70      	pop	{r4, r5, r6}
 800e054:	4770      	bx	lr
 800e056:	bf00      	nop
 800e058:	20001bc0 	.word	0x20001bc0
 800e05c:	08011660 	.word	0x08011660

0800e060 <__errno>:
 800e060:	4b01      	ldr	r3, [pc, #4]	; (800e068 <__errno+0x8>)
 800e062:	6818      	ldr	r0, [r3, #0]
 800e064:	4770      	bx	lr
 800e066:	bf00      	nop
 800e068:	20001300 	.word	0x20001300

0800e06c <__libc_init_array>:
 800e06c:	b570      	push	{r4, r5, r6, lr}
 800e06e:	4e0d      	ldr	r6, [pc, #52]	; (800e0a4 <__libc_init_array+0x38>)
 800e070:	4c0d      	ldr	r4, [pc, #52]	; (800e0a8 <__libc_init_array+0x3c>)
 800e072:	1ba4      	subs	r4, r4, r6
 800e074:	10a4      	asrs	r4, r4, #2
 800e076:	2500      	movs	r5, #0
 800e078:	42a5      	cmp	r5, r4
 800e07a:	d109      	bne.n	800e090 <__libc_init_array+0x24>
 800e07c:	4e0b      	ldr	r6, [pc, #44]	; (800e0ac <__libc_init_array+0x40>)
 800e07e:	4c0c      	ldr	r4, [pc, #48]	; (800e0b0 <__libc_init_array+0x44>)
 800e080:	f003 f952 	bl	8011328 <_init>
 800e084:	1ba4      	subs	r4, r4, r6
 800e086:	10a4      	asrs	r4, r4, #2
 800e088:	2500      	movs	r5, #0
 800e08a:	42a5      	cmp	r5, r4
 800e08c:	d105      	bne.n	800e09a <__libc_init_array+0x2e>
 800e08e:	bd70      	pop	{r4, r5, r6, pc}
 800e090:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e094:	4798      	blx	r3
 800e096:	3501      	adds	r5, #1
 800e098:	e7ee      	b.n	800e078 <__libc_init_array+0xc>
 800e09a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e09e:	4798      	blx	r3
 800e0a0:	3501      	adds	r5, #1
 800e0a2:	e7f2      	b.n	800e08a <__libc_init_array+0x1e>
 800e0a4:	08011a68 	.word	0x08011a68
 800e0a8:	08011a68 	.word	0x08011a68
 800e0ac:	08011a68 	.word	0x08011a68
 800e0b0:	08011a6c 	.word	0x08011a6c

0800e0b4 <memcpy>:
 800e0b4:	b510      	push	{r4, lr}
 800e0b6:	1e43      	subs	r3, r0, #1
 800e0b8:	440a      	add	r2, r1
 800e0ba:	4291      	cmp	r1, r2
 800e0bc:	d100      	bne.n	800e0c0 <memcpy+0xc>
 800e0be:	bd10      	pop	{r4, pc}
 800e0c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0c8:	e7f7      	b.n	800e0ba <memcpy+0x6>

0800e0ca <memset>:
 800e0ca:	4402      	add	r2, r0
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d100      	bne.n	800e0d4 <memset+0xa>
 800e0d2:	4770      	bx	lr
 800e0d4:	f803 1b01 	strb.w	r1, [r3], #1
 800e0d8:	e7f9      	b.n	800e0ce <memset+0x4>

0800e0da <__cvt>:
 800e0da:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0de:	ec55 4b10 	vmov	r4, r5, d0
 800e0e2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e0e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e0e8:	2d00      	cmp	r5, #0
 800e0ea:	460e      	mov	r6, r1
 800e0ec:	4691      	mov	r9, r2
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	bfb8      	it	lt
 800e0f2:	4622      	movlt	r2, r4
 800e0f4:	462b      	mov	r3, r5
 800e0f6:	f027 0720 	bic.w	r7, r7, #32
 800e0fa:	bfbb      	ittet	lt
 800e0fc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e100:	461d      	movlt	r5, r3
 800e102:	2300      	movge	r3, #0
 800e104:	232d      	movlt	r3, #45	; 0x2d
 800e106:	bfb8      	it	lt
 800e108:	4614      	movlt	r4, r2
 800e10a:	2f46      	cmp	r7, #70	; 0x46
 800e10c:	700b      	strb	r3, [r1, #0]
 800e10e:	d004      	beq.n	800e11a <__cvt+0x40>
 800e110:	2f45      	cmp	r7, #69	; 0x45
 800e112:	d100      	bne.n	800e116 <__cvt+0x3c>
 800e114:	3601      	adds	r6, #1
 800e116:	2102      	movs	r1, #2
 800e118:	e000      	b.n	800e11c <__cvt+0x42>
 800e11a:	2103      	movs	r1, #3
 800e11c:	ab03      	add	r3, sp, #12
 800e11e:	9301      	str	r3, [sp, #4]
 800e120:	ab02      	add	r3, sp, #8
 800e122:	9300      	str	r3, [sp, #0]
 800e124:	4632      	mov	r2, r6
 800e126:	4653      	mov	r3, sl
 800e128:	ec45 4b10 	vmov	d0, r4, r5
 800e12c:	f000 fcd8 	bl	800eae0 <_dtoa_r>
 800e130:	2f47      	cmp	r7, #71	; 0x47
 800e132:	4680      	mov	r8, r0
 800e134:	d102      	bne.n	800e13c <__cvt+0x62>
 800e136:	f019 0f01 	tst.w	r9, #1
 800e13a:	d026      	beq.n	800e18a <__cvt+0xb0>
 800e13c:	2f46      	cmp	r7, #70	; 0x46
 800e13e:	eb08 0906 	add.w	r9, r8, r6
 800e142:	d111      	bne.n	800e168 <__cvt+0x8e>
 800e144:	f898 3000 	ldrb.w	r3, [r8]
 800e148:	2b30      	cmp	r3, #48	; 0x30
 800e14a:	d10a      	bne.n	800e162 <__cvt+0x88>
 800e14c:	2200      	movs	r2, #0
 800e14e:	2300      	movs	r3, #0
 800e150:	4620      	mov	r0, r4
 800e152:	4629      	mov	r1, r5
 800e154:	f7f2 fcc0 	bl	8000ad8 <__aeabi_dcmpeq>
 800e158:	b918      	cbnz	r0, 800e162 <__cvt+0x88>
 800e15a:	f1c6 0601 	rsb	r6, r6, #1
 800e15e:	f8ca 6000 	str.w	r6, [sl]
 800e162:	f8da 3000 	ldr.w	r3, [sl]
 800e166:	4499      	add	r9, r3
 800e168:	2200      	movs	r2, #0
 800e16a:	2300      	movs	r3, #0
 800e16c:	4620      	mov	r0, r4
 800e16e:	4629      	mov	r1, r5
 800e170:	f7f2 fcb2 	bl	8000ad8 <__aeabi_dcmpeq>
 800e174:	b938      	cbnz	r0, 800e186 <__cvt+0xac>
 800e176:	2230      	movs	r2, #48	; 0x30
 800e178:	9b03      	ldr	r3, [sp, #12]
 800e17a:	454b      	cmp	r3, r9
 800e17c:	d205      	bcs.n	800e18a <__cvt+0xb0>
 800e17e:	1c59      	adds	r1, r3, #1
 800e180:	9103      	str	r1, [sp, #12]
 800e182:	701a      	strb	r2, [r3, #0]
 800e184:	e7f8      	b.n	800e178 <__cvt+0x9e>
 800e186:	f8cd 900c 	str.w	r9, [sp, #12]
 800e18a:	9b03      	ldr	r3, [sp, #12]
 800e18c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e18e:	eba3 0308 	sub.w	r3, r3, r8
 800e192:	4640      	mov	r0, r8
 800e194:	6013      	str	r3, [r2, #0]
 800e196:	b004      	add	sp, #16
 800e198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e19c <__exponent>:
 800e19c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e19e:	2900      	cmp	r1, #0
 800e1a0:	4604      	mov	r4, r0
 800e1a2:	bfba      	itte	lt
 800e1a4:	4249      	neglt	r1, r1
 800e1a6:	232d      	movlt	r3, #45	; 0x2d
 800e1a8:	232b      	movge	r3, #43	; 0x2b
 800e1aa:	2909      	cmp	r1, #9
 800e1ac:	f804 2b02 	strb.w	r2, [r4], #2
 800e1b0:	7043      	strb	r3, [r0, #1]
 800e1b2:	dd20      	ble.n	800e1f6 <__exponent+0x5a>
 800e1b4:	f10d 0307 	add.w	r3, sp, #7
 800e1b8:	461f      	mov	r7, r3
 800e1ba:	260a      	movs	r6, #10
 800e1bc:	fb91 f5f6 	sdiv	r5, r1, r6
 800e1c0:	fb06 1115 	mls	r1, r6, r5, r1
 800e1c4:	3130      	adds	r1, #48	; 0x30
 800e1c6:	2d09      	cmp	r5, #9
 800e1c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e1cc:	f103 32ff 	add.w	r2, r3, #4294967295
 800e1d0:	4629      	mov	r1, r5
 800e1d2:	dc09      	bgt.n	800e1e8 <__exponent+0x4c>
 800e1d4:	3130      	adds	r1, #48	; 0x30
 800e1d6:	3b02      	subs	r3, #2
 800e1d8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e1dc:	42bb      	cmp	r3, r7
 800e1de:	4622      	mov	r2, r4
 800e1e0:	d304      	bcc.n	800e1ec <__exponent+0x50>
 800e1e2:	1a10      	subs	r0, r2, r0
 800e1e4:	b003      	add	sp, #12
 800e1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1e8:	4613      	mov	r3, r2
 800e1ea:	e7e7      	b.n	800e1bc <__exponent+0x20>
 800e1ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1f0:	f804 2b01 	strb.w	r2, [r4], #1
 800e1f4:	e7f2      	b.n	800e1dc <__exponent+0x40>
 800e1f6:	2330      	movs	r3, #48	; 0x30
 800e1f8:	4419      	add	r1, r3
 800e1fa:	7083      	strb	r3, [r0, #2]
 800e1fc:	1d02      	adds	r2, r0, #4
 800e1fe:	70c1      	strb	r1, [r0, #3]
 800e200:	e7ef      	b.n	800e1e2 <__exponent+0x46>
	...

0800e204 <_printf_float>:
 800e204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e208:	b08d      	sub	sp, #52	; 0x34
 800e20a:	460c      	mov	r4, r1
 800e20c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e210:	4616      	mov	r6, r2
 800e212:	461f      	mov	r7, r3
 800e214:	4605      	mov	r5, r0
 800e216:	f001 fae5 	bl	800f7e4 <_localeconv_r>
 800e21a:	6803      	ldr	r3, [r0, #0]
 800e21c:	9304      	str	r3, [sp, #16]
 800e21e:	4618      	mov	r0, r3
 800e220:	f7f1 ffde 	bl	80001e0 <strlen>
 800e224:	2300      	movs	r3, #0
 800e226:	930a      	str	r3, [sp, #40]	; 0x28
 800e228:	f8d8 3000 	ldr.w	r3, [r8]
 800e22c:	9005      	str	r0, [sp, #20]
 800e22e:	3307      	adds	r3, #7
 800e230:	f023 0307 	bic.w	r3, r3, #7
 800e234:	f103 0208 	add.w	r2, r3, #8
 800e238:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e23c:	f8d4 b000 	ldr.w	fp, [r4]
 800e240:	f8c8 2000 	str.w	r2, [r8]
 800e244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e248:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e24c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e250:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e254:	9307      	str	r3, [sp, #28]
 800e256:	f8cd 8018 	str.w	r8, [sp, #24]
 800e25a:	f04f 32ff 	mov.w	r2, #4294967295
 800e25e:	4ba7      	ldr	r3, [pc, #668]	; (800e4fc <_printf_float+0x2f8>)
 800e260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e264:	f7f2 fc6a 	bl	8000b3c <__aeabi_dcmpun>
 800e268:	bb70      	cbnz	r0, 800e2c8 <_printf_float+0xc4>
 800e26a:	f04f 32ff 	mov.w	r2, #4294967295
 800e26e:	4ba3      	ldr	r3, [pc, #652]	; (800e4fc <_printf_float+0x2f8>)
 800e270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e274:	f7f2 fc44 	bl	8000b00 <__aeabi_dcmple>
 800e278:	bb30      	cbnz	r0, 800e2c8 <_printf_float+0xc4>
 800e27a:	2200      	movs	r2, #0
 800e27c:	2300      	movs	r3, #0
 800e27e:	4640      	mov	r0, r8
 800e280:	4649      	mov	r1, r9
 800e282:	f7f2 fc33 	bl	8000aec <__aeabi_dcmplt>
 800e286:	b110      	cbz	r0, 800e28e <_printf_float+0x8a>
 800e288:	232d      	movs	r3, #45	; 0x2d
 800e28a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e28e:	4a9c      	ldr	r2, [pc, #624]	; (800e500 <_printf_float+0x2fc>)
 800e290:	4b9c      	ldr	r3, [pc, #624]	; (800e504 <_printf_float+0x300>)
 800e292:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e296:	bf8c      	ite	hi
 800e298:	4690      	movhi	r8, r2
 800e29a:	4698      	movls	r8, r3
 800e29c:	2303      	movs	r3, #3
 800e29e:	f02b 0204 	bic.w	r2, fp, #4
 800e2a2:	6123      	str	r3, [r4, #16]
 800e2a4:	6022      	str	r2, [r4, #0]
 800e2a6:	f04f 0900 	mov.w	r9, #0
 800e2aa:	9700      	str	r7, [sp, #0]
 800e2ac:	4633      	mov	r3, r6
 800e2ae:	aa0b      	add	r2, sp, #44	; 0x2c
 800e2b0:	4621      	mov	r1, r4
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	f000 f9e6 	bl	800e684 <_printf_common>
 800e2b8:	3001      	adds	r0, #1
 800e2ba:	f040 808d 	bne.w	800e3d8 <_printf_float+0x1d4>
 800e2be:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c2:	b00d      	add	sp, #52	; 0x34
 800e2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c8:	4642      	mov	r2, r8
 800e2ca:	464b      	mov	r3, r9
 800e2cc:	4640      	mov	r0, r8
 800e2ce:	4649      	mov	r1, r9
 800e2d0:	f7f2 fc34 	bl	8000b3c <__aeabi_dcmpun>
 800e2d4:	b110      	cbz	r0, 800e2dc <_printf_float+0xd8>
 800e2d6:	4a8c      	ldr	r2, [pc, #560]	; (800e508 <_printf_float+0x304>)
 800e2d8:	4b8c      	ldr	r3, [pc, #560]	; (800e50c <_printf_float+0x308>)
 800e2da:	e7da      	b.n	800e292 <_printf_float+0x8e>
 800e2dc:	6861      	ldr	r1, [r4, #4]
 800e2de:	1c4b      	adds	r3, r1, #1
 800e2e0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e2e4:	a80a      	add	r0, sp, #40	; 0x28
 800e2e6:	d13e      	bne.n	800e366 <_printf_float+0x162>
 800e2e8:	2306      	movs	r3, #6
 800e2ea:	6063      	str	r3, [r4, #4]
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e2f2:	ab09      	add	r3, sp, #36	; 0x24
 800e2f4:	9300      	str	r3, [sp, #0]
 800e2f6:	ec49 8b10 	vmov	d0, r8, r9
 800e2fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e2fe:	6022      	str	r2, [r4, #0]
 800e300:	f8cd a004 	str.w	sl, [sp, #4]
 800e304:	6861      	ldr	r1, [r4, #4]
 800e306:	4628      	mov	r0, r5
 800e308:	f7ff fee7 	bl	800e0da <__cvt>
 800e30c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e310:	2b47      	cmp	r3, #71	; 0x47
 800e312:	4680      	mov	r8, r0
 800e314:	d109      	bne.n	800e32a <_printf_float+0x126>
 800e316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e318:	1cd8      	adds	r0, r3, #3
 800e31a:	db02      	blt.n	800e322 <_printf_float+0x11e>
 800e31c:	6862      	ldr	r2, [r4, #4]
 800e31e:	4293      	cmp	r3, r2
 800e320:	dd47      	ble.n	800e3b2 <_printf_float+0x1ae>
 800e322:	f1aa 0a02 	sub.w	sl, sl, #2
 800e326:	fa5f fa8a 	uxtb.w	sl, sl
 800e32a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e32e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e330:	d824      	bhi.n	800e37c <_printf_float+0x178>
 800e332:	3901      	subs	r1, #1
 800e334:	4652      	mov	r2, sl
 800e336:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e33a:	9109      	str	r1, [sp, #36]	; 0x24
 800e33c:	f7ff ff2e 	bl	800e19c <__exponent>
 800e340:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e342:	1813      	adds	r3, r2, r0
 800e344:	2a01      	cmp	r2, #1
 800e346:	4681      	mov	r9, r0
 800e348:	6123      	str	r3, [r4, #16]
 800e34a:	dc02      	bgt.n	800e352 <_printf_float+0x14e>
 800e34c:	6822      	ldr	r2, [r4, #0]
 800e34e:	07d1      	lsls	r1, r2, #31
 800e350:	d501      	bpl.n	800e356 <_printf_float+0x152>
 800e352:	3301      	adds	r3, #1
 800e354:	6123      	str	r3, [r4, #16]
 800e356:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d0a5      	beq.n	800e2aa <_printf_float+0xa6>
 800e35e:	232d      	movs	r3, #45	; 0x2d
 800e360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e364:	e7a1      	b.n	800e2aa <_printf_float+0xa6>
 800e366:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e36a:	f000 8177 	beq.w	800e65c <_printf_float+0x458>
 800e36e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e372:	d1bb      	bne.n	800e2ec <_printf_float+0xe8>
 800e374:	2900      	cmp	r1, #0
 800e376:	d1b9      	bne.n	800e2ec <_printf_float+0xe8>
 800e378:	2301      	movs	r3, #1
 800e37a:	e7b6      	b.n	800e2ea <_printf_float+0xe6>
 800e37c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e380:	d119      	bne.n	800e3b6 <_printf_float+0x1b2>
 800e382:	2900      	cmp	r1, #0
 800e384:	6863      	ldr	r3, [r4, #4]
 800e386:	dd0c      	ble.n	800e3a2 <_printf_float+0x19e>
 800e388:	6121      	str	r1, [r4, #16]
 800e38a:	b913      	cbnz	r3, 800e392 <_printf_float+0x18e>
 800e38c:	6822      	ldr	r2, [r4, #0]
 800e38e:	07d2      	lsls	r2, r2, #31
 800e390:	d502      	bpl.n	800e398 <_printf_float+0x194>
 800e392:	3301      	adds	r3, #1
 800e394:	440b      	add	r3, r1
 800e396:	6123      	str	r3, [r4, #16]
 800e398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e39a:	65a3      	str	r3, [r4, #88]	; 0x58
 800e39c:	f04f 0900 	mov.w	r9, #0
 800e3a0:	e7d9      	b.n	800e356 <_printf_float+0x152>
 800e3a2:	b913      	cbnz	r3, 800e3aa <_printf_float+0x1a6>
 800e3a4:	6822      	ldr	r2, [r4, #0]
 800e3a6:	07d0      	lsls	r0, r2, #31
 800e3a8:	d501      	bpl.n	800e3ae <_printf_float+0x1aa>
 800e3aa:	3302      	adds	r3, #2
 800e3ac:	e7f3      	b.n	800e396 <_printf_float+0x192>
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	e7f1      	b.n	800e396 <_printf_float+0x192>
 800e3b2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e3b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	db05      	blt.n	800e3ca <_printf_float+0x1c6>
 800e3be:	6822      	ldr	r2, [r4, #0]
 800e3c0:	6123      	str	r3, [r4, #16]
 800e3c2:	07d1      	lsls	r1, r2, #31
 800e3c4:	d5e8      	bpl.n	800e398 <_printf_float+0x194>
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	e7e5      	b.n	800e396 <_printf_float+0x192>
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	bfd4      	ite	le
 800e3ce:	f1c3 0302 	rsble	r3, r3, #2
 800e3d2:	2301      	movgt	r3, #1
 800e3d4:	4413      	add	r3, r2
 800e3d6:	e7de      	b.n	800e396 <_printf_float+0x192>
 800e3d8:	6823      	ldr	r3, [r4, #0]
 800e3da:	055a      	lsls	r2, r3, #21
 800e3dc:	d407      	bmi.n	800e3ee <_printf_float+0x1ea>
 800e3de:	6923      	ldr	r3, [r4, #16]
 800e3e0:	4642      	mov	r2, r8
 800e3e2:	4631      	mov	r1, r6
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	47b8      	blx	r7
 800e3e8:	3001      	adds	r0, #1
 800e3ea:	d12b      	bne.n	800e444 <_printf_float+0x240>
 800e3ec:	e767      	b.n	800e2be <_printf_float+0xba>
 800e3ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e3f2:	f240 80dc 	bls.w	800e5ae <_printf_float+0x3aa>
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e3fe:	f7f2 fb6b 	bl	8000ad8 <__aeabi_dcmpeq>
 800e402:	2800      	cmp	r0, #0
 800e404:	d033      	beq.n	800e46e <_printf_float+0x26a>
 800e406:	2301      	movs	r3, #1
 800e408:	4a41      	ldr	r2, [pc, #260]	; (800e510 <_printf_float+0x30c>)
 800e40a:	4631      	mov	r1, r6
 800e40c:	4628      	mov	r0, r5
 800e40e:	47b8      	blx	r7
 800e410:	3001      	adds	r0, #1
 800e412:	f43f af54 	beq.w	800e2be <_printf_float+0xba>
 800e416:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e41a:	429a      	cmp	r2, r3
 800e41c:	db02      	blt.n	800e424 <_printf_float+0x220>
 800e41e:	6823      	ldr	r3, [r4, #0]
 800e420:	07d8      	lsls	r0, r3, #31
 800e422:	d50f      	bpl.n	800e444 <_printf_float+0x240>
 800e424:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e428:	4631      	mov	r1, r6
 800e42a:	4628      	mov	r0, r5
 800e42c:	47b8      	blx	r7
 800e42e:	3001      	adds	r0, #1
 800e430:	f43f af45 	beq.w	800e2be <_printf_float+0xba>
 800e434:	f04f 0800 	mov.w	r8, #0
 800e438:	f104 091a 	add.w	r9, r4, #26
 800e43c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e43e:	3b01      	subs	r3, #1
 800e440:	4543      	cmp	r3, r8
 800e442:	dc09      	bgt.n	800e458 <_printf_float+0x254>
 800e444:	6823      	ldr	r3, [r4, #0]
 800e446:	079b      	lsls	r3, r3, #30
 800e448:	f100 8103 	bmi.w	800e652 <_printf_float+0x44e>
 800e44c:	68e0      	ldr	r0, [r4, #12]
 800e44e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e450:	4298      	cmp	r0, r3
 800e452:	bfb8      	it	lt
 800e454:	4618      	movlt	r0, r3
 800e456:	e734      	b.n	800e2c2 <_printf_float+0xbe>
 800e458:	2301      	movs	r3, #1
 800e45a:	464a      	mov	r2, r9
 800e45c:	4631      	mov	r1, r6
 800e45e:	4628      	mov	r0, r5
 800e460:	47b8      	blx	r7
 800e462:	3001      	adds	r0, #1
 800e464:	f43f af2b 	beq.w	800e2be <_printf_float+0xba>
 800e468:	f108 0801 	add.w	r8, r8, #1
 800e46c:	e7e6      	b.n	800e43c <_printf_float+0x238>
 800e46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e470:	2b00      	cmp	r3, #0
 800e472:	dc2b      	bgt.n	800e4cc <_printf_float+0x2c8>
 800e474:	2301      	movs	r3, #1
 800e476:	4a26      	ldr	r2, [pc, #152]	; (800e510 <_printf_float+0x30c>)
 800e478:	4631      	mov	r1, r6
 800e47a:	4628      	mov	r0, r5
 800e47c:	47b8      	blx	r7
 800e47e:	3001      	adds	r0, #1
 800e480:	f43f af1d 	beq.w	800e2be <_printf_float+0xba>
 800e484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e486:	b923      	cbnz	r3, 800e492 <_printf_float+0x28e>
 800e488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e48a:	b913      	cbnz	r3, 800e492 <_printf_float+0x28e>
 800e48c:	6823      	ldr	r3, [r4, #0]
 800e48e:	07d9      	lsls	r1, r3, #31
 800e490:	d5d8      	bpl.n	800e444 <_printf_float+0x240>
 800e492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e496:	4631      	mov	r1, r6
 800e498:	4628      	mov	r0, r5
 800e49a:	47b8      	blx	r7
 800e49c:	3001      	adds	r0, #1
 800e49e:	f43f af0e 	beq.w	800e2be <_printf_float+0xba>
 800e4a2:	f04f 0900 	mov.w	r9, #0
 800e4a6:	f104 0a1a 	add.w	sl, r4, #26
 800e4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4ac:	425b      	negs	r3, r3
 800e4ae:	454b      	cmp	r3, r9
 800e4b0:	dc01      	bgt.n	800e4b6 <_printf_float+0x2b2>
 800e4b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4b4:	e794      	b.n	800e3e0 <_printf_float+0x1dc>
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	4652      	mov	r2, sl
 800e4ba:	4631      	mov	r1, r6
 800e4bc:	4628      	mov	r0, r5
 800e4be:	47b8      	blx	r7
 800e4c0:	3001      	adds	r0, #1
 800e4c2:	f43f aefc 	beq.w	800e2be <_printf_float+0xba>
 800e4c6:	f109 0901 	add.w	r9, r9, #1
 800e4ca:	e7ee      	b.n	800e4aa <_printf_float+0x2a6>
 800e4cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	bfa8      	it	ge
 800e4d4:	461a      	movge	r2, r3
 800e4d6:	2a00      	cmp	r2, #0
 800e4d8:	4691      	mov	r9, r2
 800e4da:	dd07      	ble.n	800e4ec <_printf_float+0x2e8>
 800e4dc:	4613      	mov	r3, r2
 800e4de:	4631      	mov	r1, r6
 800e4e0:	4642      	mov	r2, r8
 800e4e2:	4628      	mov	r0, r5
 800e4e4:	47b8      	blx	r7
 800e4e6:	3001      	adds	r0, #1
 800e4e8:	f43f aee9 	beq.w	800e2be <_printf_float+0xba>
 800e4ec:	f104 031a 	add.w	r3, r4, #26
 800e4f0:	f04f 0b00 	mov.w	fp, #0
 800e4f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4f8:	9306      	str	r3, [sp, #24]
 800e4fa:	e015      	b.n	800e528 <_printf_float+0x324>
 800e4fc:	7fefffff 	.word	0x7fefffff
 800e500:	08011754 	.word	0x08011754
 800e504:	08011750 	.word	0x08011750
 800e508:	0801175c 	.word	0x0801175c
 800e50c:	08011758 	.word	0x08011758
 800e510:	08011760 	.word	0x08011760
 800e514:	2301      	movs	r3, #1
 800e516:	9a06      	ldr	r2, [sp, #24]
 800e518:	4631      	mov	r1, r6
 800e51a:	4628      	mov	r0, r5
 800e51c:	47b8      	blx	r7
 800e51e:	3001      	adds	r0, #1
 800e520:	f43f aecd 	beq.w	800e2be <_printf_float+0xba>
 800e524:	f10b 0b01 	add.w	fp, fp, #1
 800e528:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e52c:	ebaa 0309 	sub.w	r3, sl, r9
 800e530:	455b      	cmp	r3, fp
 800e532:	dcef      	bgt.n	800e514 <_printf_float+0x310>
 800e534:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e538:	429a      	cmp	r2, r3
 800e53a:	44d0      	add	r8, sl
 800e53c:	db15      	blt.n	800e56a <_printf_float+0x366>
 800e53e:	6823      	ldr	r3, [r4, #0]
 800e540:	07da      	lsls	r2, r3, #31
 800e542:	d412      	bmi.n	800e56a <_printf_float+0x366>
 800e544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e546:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e548:	eba3 020a 	sub.w	r2, r3, sl
 800e54c:	eba3 0a01 	sub.w	sl, r3, r1
 800e550:	4592      	cmp	sl, r2
 800e552:	bfa8      	it	ge
 800e554:	4692      	movge	sl, r2
 800e556:	f1ba 0f00 	cmp.w	sl, #0
 800e55a:	dc0e      	bgt.n	800e57a <_printf_float+0x376>
 800e55c:	f04f 0800 	mov.w	r8, #0
 800e560:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e564:	f104 091a 	add.w	r9, r4, #26
 800e568:	e019      	b.n	800e59e <_printf_float+0x39a>
 800e56a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e56e:	4631      	mov	r1, r6
 800e570:	4628      	mov	r0, r5
 800e572:	47b8      	blx	r7
 800e574:	3001      	adds	r0, #1
 800e576:	d1e5      	bne.n	800e544 <_printf_float+0x340>
 800e578:	e6a1      	b.n	800e2be <_printf_float+0xba>
 800e57a:	4653      	mov	r3, sl
 800e57c:	4642      	mov	r2, r8
 800e57e:	4631      	mov	r1, r6
 800e580:	4628      	mov	r0, r5
 800e582:	47b8      	blx	r7
 800e584:	3001      	adds	r0, #1
 800e586:	d1e9      	bne.n	800e55c <_printf_float+0x358>
 800e588:	e699      	b.n	800e2be <_printf_float+0xba>
 800e58a:	2301      	movs	r3, #1
 800e58c:	464a      	mov	r2, r9
 800e58e:	4631      	mov	r1, r6
 800e590:	4628      	mov	r0, r5
 800e592:	47b8      	blx	r7
 800e594:	3001      	adds	r0, #1
 800e596:	f43f ae92 	beq.w	800e2be <_printf_float+0xba>
 800e59a:	f108 0801 	add.w	r8, r8, #1
 800e59e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e5a2:	1a9b      	subs	r3, r3, r2
 800e5a4:	eba3 030a 	sub.w	r3, r3, sl
 800e5a8:	4543      	cmp	r3, r8
 800e5aa:	dcee      	bgt.n	800e58a <_printf_float+0x386>
 800e5ac:	e74a      	b.n	800e444 <_printf_float+0x240>
 800e5ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5b0:	2a01      	cmp	r2, #1
 800e5b2:	dc01      	bgt.n	800e5b8 <_printf_float+0x3b4>
 800e5b4:	07db      	lsls	r3, r3, #31
 800e5b6:	d53a      	bpl.n	800e62e <_printf_float+0x42a>
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	4642      	mov	r2, r8
 800e5bc:	4631      	mov	r1, r6
 800e5be:	4628      	mov	r0, r5
 800e5c0:	47b8      	blx	r7
 800e5c2:	3001      	adds	r0, #1
 800e5c4:	f43f ae7b 	beq.w	800e2be <_printf_float+0xba>
 800e5c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5cc:	4631      	mov	r1, r6
 800e5ce:	4628      	mov	r0, r5
 800e5d0:	47b8      	blx	r7
 800e5d2:	3001      	adds	r0, #1
 800e5d4:	f108 0801 	add.w	r8, r8, #1
 800e5d8:	f43f ae71 	beq.w	800e2be <_printf_float+0xba>
 800e5dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5de:	2200      	movs	r2, #0
 800e5e0:	f103 3aff 	add.w	sl, r3, #4294967295
 800e5e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	f7f2 fa75 	bl	8000ad8 <__aeabi_dcmpeq>
 800e5ee:	b9c8      	cbnz	r0, 800e624 <_printf_float+0x420>
 800e5f0:	4653      	mov	r3, sl
 800e5f2:	4642      	mov	r2, r8
 800e5f4:	4631      	mov	r1, r6
 800e5f6:	4628      	mov	r0, r5
 800e5f8:	47b8      	blx	r7
 800e5fa:	3001      	adds	r0, #1
 800e5fc:	d10e      	bne.n	800e61c <_printf_float+0x418>
 800e5fe:	e65e      	b.n	800e2be <_printf_float+0xba>
 800e600:	2301      	movs	r3, #1
 800e602:	4652      	mov	r2, sl
 800e604:	4631      	mov	r1, r6
 800e606:	4628      	mov	r0, r5
 800e608:	47b8      	blx	r7
 800e60a:	3001      	adds	r0, #1
 800e60c:	f43f ae57 	beq.w	800e2be <_printf_float+0xba>
 800e610:	f108 0801 	add.w	r8, r8, #1
 800e614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e616:	3b01      	subs	r3, #1
 800e618:	4543      	cmp	r3, r8
 800e61a:	dcf1      	bgt.n	800e600 <_printf_float+0x3fc>
 800e61c:	464b      	mov	r3, r9
 800e61e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e622:	e6de      	b.n	800e3e2 <_printf_float+0x1de>
 800e624:	f04f 0800 	mov.w	r8, #0
 800e628:	f104 0a1a 	add.w	sl, r4, #26
 800e62c:	e7f2      	b.n	800e614 <_printf_float+0x410>
 800e62e:	2301      	movs	r3, #1
 800e630:	e7df      	b.n	800e5f2 <_printf_float+0x3ee>
 800e632:	2301      	movs	r3, #1
 800e634:	464a      	mov	r2, r9
 800e636:	4631      	mov	r1, r6
 800e638:	4628      	mov	r0, r5
 800e63a:	47b8      	blx	r7
 800e63c:	3001      	adds	r0, #1
 800e63e:	f43f ae3e 	beq.w	800e2be <_printf_float+0xba>
 800e642:	f108 0801 	add.w	r8, r8, #1
 800e646:	68e3      	ldr	r3, [r4, #12]
 800e648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e64a:	1a9b      	subs	r3, r3, r2
 800e64c:	4543      	cmp	r3, r8
 800e64e:	dcf0      	bgt.n	800e632 <_printf_float+0x42e>
 800e650:	e6fc      	b.n	800e44c <_printf_float+0x248>
 800e652:	f04f 0800 	mov.w	r8, #0
 800e656:	f104 0919 	add.w	r9, r4, #25
 800e65a:	e7f4      	b.n	800e646 <_printf_float+0x442>
 800e65c:	2900      	cmp	r1, #0
 800e65e:	f43f ae8b 	beq.w	800e378 <_printf_float+0x174>
 800e662:	2300      	movs	r3, #0
 800e664:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e668:	ab09      	add	r3, sp, #36	; 0x24
 800e66a:	9300      	str	r3, [sp, #0]
 800e66c:	ec49 8b10 	vmov	d0, r8, r9
 800e670:	6022      	str	r2, [r4, #0]
 800e672:	f8cd a004 	str.w	sl, [sp, #4]
 800e676:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e67a:	4628      	mov	r0, r5
 800e67c:	f7ff fd2d 	bl	800e0da <__cvt>
 800e680:	4680      	mov	r8, r0
 800e682:	e648      	b.n	800e316 <_printf_float+0x112>

0800e684 <_printf_common>:
 800e684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e688:	4691      	mov	r9, r2
 800e68a:	461f      	mov	r7, r3
 800e68c:	688a      	ldr	r2, [r1, #8]
 800e68e:	690b      	ldr	r3, [r1, #16]
 800e690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e694:	4293      	cmp	r3, r2
 800e696:	bfb8      	it	lt
 800e698:	4613      	movlt	r3, r2
 800e69a:	f8c9 3000 	str.w	r3, [r9]
 800e69e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e6a2:	4606      	mov	r6, r0
 800e6a4:	460c      	mov	r4, r1
 800e6a6:	b112      	cbz	r2, 800e6ae <_printf_common+0x2a>
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	f8c9 3000 	str.w	r3, [r9]
 800e6ae:	6823      	ldr	r3, [r4, #0]
 800e6b0:	0699      	lsls	r1, r3, #26
 800e6b2:	bf42      	ittt	mi
 800e6b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e6b8:	3302      	addmi	r3, #2
 800e6ba:	f8c9 3000 	strmi.w	r3, [r9]
 800e6be:	6825      	ldr	r5, [r4, #0]
 800e6c0:	f015 0506 	ands.w	r5, r5, #6
 800e6c4:	d107      	bne.n	800e6d6 <_printf_common+0x52>
 800e6c6:	f104 0a19 	add.w	sl, r4, #25
 800e6ca:	68e3      	ldr	r3, [r4, #12]
 800e6cc:	f8d9 2000 	ldr.w	r2, [r9]
 800e6d0:	1a9b      	subs	r3, r3, r2
 800e6d2:	42ab      	cmp	r3, r5
 800e6d4:	dc28      	bgt.n	800e728 <_printf_common+0xa4>
 800e6d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e6da:	6822      	ldr	r2, [r4, #0]
 800e6dc:	3300      	adds	r3, #0
 800e6de:	bf18      	it	ne
 800e6e0:	2301      	movne	r3, #1
 800e6e2:	0692      	lsls	r2, r2, #26
 800e6e4:	d42d      	bmi.n	800e742 <_printf_common+0xbe>
 800e6e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e6ea:	4639      	mov	r1, r7
 800e6ec:	4630      	mov	r0, r6
 800e6ee:	47c0      	blx	r8
 800e6f0:	3001      	adds	r0, #1
 800e6f2:	d020      	beq.n	800e736 <_printf_common+0xb2>
 800e6f4:	6823      	ldr	r3, [r4, #0]
 800e6f6:	68e5      	ldr	r5, [r4, #12]
 800e6f8:	f8d9 2000 	ldr.w	r2, [r9]
 800e6fc:	f003 0306 	and.w	r3, r3, #6
 800e700:	2b04      	cmp	r3, #4
 800e702:	bf08      	it	eq
 800e704:	1aad      	subeq	r5, r5, r2
 800e706:	68a3      	ldr	r3, [r4, #8]
 800e708:	6922      	ldr	r2, [r4, #16]
 800e70a:	bf0c      	ite	eq
 800e70c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e710:	2500      	movne	r5, #0
 800e712:	4293      	cmp	r3, r2
 800e714:	bfc4      	itt	gt
 800e716:	1a9b      	subgt	r3, r3, r2
 800e718:	18ed      	addgt	r5, r5, r3
 800e71a:	f04f 0900 	mov.w	r9, #0
 800e71e:	341a      	adds	r4, #26
 800e720:	454d      	cmp	r5, r9
 800e722:	d11a      	bne.n	800e75a <_printf_common+0xd6>
 800e724:	2000      	movs	r0, #0
 800e726:	e008      	b.n	800e73a <_printf_common+0xb6>
 800e728:	2301      	movs	r3, #1
 800e72a:	4652      	mov	r2, sl
 800e72c:	4639      	mov	r1, r7
 800e72e:	4630      	mov	r0, r6
 800e730:	47c0      	blx	r8
 800e732:	3001      	adds	r0, #1
 800e734:	d103      	bne.n	800e73e <_printf_common+0xba>
 800e736:	f04f 30ff 	mov.w	r0, #4294967295
 800e73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e73e:	3501      	adds	r5, #1
 800e740:	e7c3      	b.n	800e6ca <_printf_common+0x46>
 800e742:	18e1      	adds	r1, r4, r3
 800e744:	1c5a      	adds	r2, r3, #1
 800e746:	2030      	movs	r0, #48	; 0x30
 800e748:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e74c:	4422      	add	r2, r4
 800e74e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e752:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e756:	3302      	adds	r3, #2
 800e758:	e7c5      	b.n	800e6e6 <_printf_common+0x62>
 800e75a:	2301      	movs	r3, #1
 800e75c:	4622      	mov	r2, r4
 800e75e:	4639      	mov	r1, r7
 800e760:	4630      	mov	r0, r6
 800e762:	47c0      	blx	r8
 800e764:	3001      	adds	r0, #1
 800e766:	d0e6      	beq.n	800e736 <_printf_common+0xb2>
 800e768:	f109 0901 	add.w	r9, r9, #1
 800e76c:	e7d8      	b.n	800e720 <_printf_common+0x9c>
	...

0800e770 <_printf_i>:
 800e770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e774:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e778:	460c      	mov	r4, r1
 800e77a:	7e09      	ldrb	r1, [r1, #24]
 800e77c:	b085      	sub	sp, #20
 800e77e:	296e      	cmp	r1, #110	; 0x6e
 800e780:	4617      	mov	r7, r2
 800e782:	4606      	mov	r6, r0
 800e784:	4698      	mov	r8, r3
 800e786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e788:	f000 80b3 	beq.w	800e8f2 <_printf_i+0x182>
 800e78c:	d822      	bhi.n	800e7d4 <_printf_i+0x64>
 800e78e:	2963      	cmp	r1, #99	; 0x63
 800e790:	d036      	beq.n	800e800 <_printf_i+0x90>
 800e792:	d80a      	bhi.n	800e7aa <_printf_i+0x3a>
 800e794:	2900      	cmp	r1, #0
 800e796:	f000 80b9 	beq.w	800e90c <_printf_i+0x19c>
 800e79a:	2958      	cmp	r1, #88	; 0x58
 800e79c:	f000 8083 	beq.w	800e8a6 <_printf_i+0x136>
 800e7a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e7a8:	e032      	b.n	800e810 <_printf_i+0xa0>
 800e7aa:	2964      	cmp	r1, #100	; 0x64
 800e7ac:	d001      	beq.n	800e7b2 <_printf_i+0x42>
 800e7ae:	2969      	cmp	r1, #105	; 0x69
 800e7b0:	d1f6      	bne.n	800e7a0 <_printf_i+0x30>
 800e7b2:	6820      	ldr	r0, [r4, #0]
 800e7b4:	6813      	ldr	r3, [r2, #0]
 800e7b6:	0605      	lsls	r5, r0, #24
 800e7b8:	f103 0104 	add.w	r1, r3, #4
 800e7bc:	d52a      	bpl.n	800e814 <_printf_i+0xa4>
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	6011      	str	r1, [r2, #0]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	da03      	bge.n	800e7ce <_printf_i+0x5e>
 800e7c6:	222d      	movs	r2, #45	; 0x2d
 800e7c8:	425b      	negs	r3, r3
 800e7ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e7ce:	486f      	ldr	r0, [pc, #444]	; (800e98c <_printf_i+0x21c>)
 800e7d0:	220a      	movs	r2, #10
 800e7d2:	e039      	b.n	800e848 <_printf_i+0xd8>
 800e7d4:	2973      	cmp	r1, #115	; 0x73
 800e7d6:	f000 809d 	beq.w	800e914 <_printf_i+0x1a4>
 800e7da:	d808      	bhi.n	800e7ee <_printf_i+0x7e>
 800e7dc:	296f      	cmp	r1, #111	; 0x6f
 800e7de:	d020      	beq.n	800e822 <_printf_i+0xb2>
 800e7e0:	2970      	cmp	r1, #112	; 0x70
 800e7e2:	d1dd      	bne.n	800e7a0 <_printf_i+0x30>
 800e7e4:	6823      	ldr	r3, [r4, #0]
 800e7e6:	f043 0320 	orr.w	r3, r3, #32
 800e7ea:	6023      	str	r3, [r4, #0]
 800e7ec:	e003      	b.n	800e7f6 <_printf_i+0x86>
 800e7ee:	2975      	cmp	r1, #117	; 0x75
 800e7f0:	d017      	beq.n	800e822 <_printf_i+0xb2>
 800e7f2:	2978      	cmp	r1, #120	; 0x78
 800e7f4:	d1d4      	bne.n	800e7a0 <_printf_i+0x30>
 800e7f6:	2378      	movs	r3, #120	; 0x78
 800e7f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e7fc:	4864      	ldr	r0, [pc, #400]	; (800e990 <_printf_i+0x220>)
 800e7fe:	e055      	b.n	800e8ac <_printf_i+0x13c>
 800e800:	6813      	ldr	r3, [r2, #0]
 800e802:	1d19      	adds	r1, r3, #4
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	6011      	str	r1, [r2, #0]
 800e808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e80c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e810:	2301      	movs	r3, #1
 800e812:	e08c      	b.n	800e92e <_printf_i+0x1be>
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	6011      	str	r1, [r2, #0]
 800e818:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e81c:	bf18      	it	ne
 800e81e:	b21b      	sxthne	r3, r3
 800e820:	e7cf      	b.n	800e7c2 <_printf_i+0x52>
 800e822:	6813      	ldr	r3, [r2, #0]
 800e824:	6825      	ldr	r5, [r4, #0]
 800e826:	1d18      	adds	r0, r3, #4
 800e828:	6010      	str	r0, [r2, #0]
 800e82a:	0628      	lsls	r0, r5, #24
 800e82c:	d501      	bpl.n	800e832 <_printf_i+0xc2>
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	e002      	b.n	800e838 <_printf_i+0xc8>
 800e832:	0668      	lsls	r0, r5, #25
 800e834:	d5fb      	bpl.n	800e82e <_printf_i+0xbe>
 800e836:	881b      	ldrh	r3, [r3, #0]
 800e838:	4854      	ldr	r0, [pc, #336]	; (800e98c <_printf_i+0x21c>)
 800e83a:	296f      	cmp	r1, #111	; 0x6f
 800e83c:	bf14      	ite	ne
 800e83e:	220a      	movne	r2, #10
 800e840:	2208      	moveq	r2, #8
 800e842:	2100      	movs	r1, #0
 800e844:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e848:	6865      	ldr	r5, [r4, #4]
 800e84a:	60a5      	str	r5, [r4, #8]
 800e84c:	2d00      	cmp	r5, #0
 800e84e:	f2c0 8095 	blt.w	800e97c <_printf_i+0x20c>
 800e852:	6821      	ldr	r1, [r4, #0]
 800e854:	f021 0104 	bic.w	r1, r1, #4
 800e858:	6021      	str	r1, [r4, #0]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d13d      	bne.n	800e8da <_printf_i+0x16a>
 800e85e:	2d00      	cmp	r5, #0
 800e860:	f040 808e 	bne.w	800e980 <_printf_i+0x210>
 800e864:	4665      	mov	r5, ip
 800e866:	2a08      	cmp	r2, #8
 800e868:	d10b      	bne.n	800e882 <_printf_i+0x112>
 800e86a:	6823      	ldr	r3, [r4, #0]
 800e86c:	07db      	lsls	r3, r3, #31
 800e86e:	d508      	bpl.n	800e882 <_printf_i+0x112>
 800e870:	6923      	ldr	r3, [r4, #16]
 800e872:	6862      	ldr	r2, [r4, #4]
 800e874:	429a      	cmp	r2, r3
 800e876:	bfde      	ittt	le
 800e878:	2330      	movle	r3, #48	; 0x30
 800e87a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e87e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e882:	ebac 0305 	sub.w	r3, ip, r5
 800e886:	6123      	str	r3, [r4, #16]
 800e888:	f8cd 8000 	str.w	r8, [sp]
 800e88c:	463b      	mov	r3, r7
 800e88e:	aa03      	add	r2, sp, #12
 800e890:	4621      	mov	r1, r4
 800e892:	4630      	mov	r0, r6
 800e894:	f7ff fef6 	bl	800e684 <_printf_common>
 800e898:	3001      	adds	r0, #1
 800e89a:	d14d      	bne.n	800e938 <_printf_i+0x1c8>
 800e89c:	f04f 30ff 	mov.w	r0, #4294967295
 800e8a0:	b005      	add	sp, #20
 800e8a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8a6:	4839      	ldr	r0, [pc, #228]	; (800e98c <_printf_i+0x21c>)
 800e8a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e8ac:	6813      	ldr	r3, [r2, #0]
 800e8ae:	6821      	ldr	r1, [r4, #0]
 800e8b0:	1d1d      	adds	r5, r3, #4
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	6015      	str	r5, [r2, #0]
 800e8b6:	060a      	lsls	r2, r1, #24
 800e8b8:	d50b      	bpl.n	800e8d2 <_printf_i+0x162>
 800e8ba:	07ca      	lsls	r2, r1, #31
 800e8bc:	bf44      	itt	mi
 800e8be:	f041 0120 	orrmi.w	r1, r1, #32
 800e8c2:	6021      	strmi	r1, [r4, #0]
 800e8c4:	b91b      	cbnz	r3, 800e8ce <_printf_i+0x15e>
 800e8c6:	6822      	ldr	r2, [r4, #0]
 800e8c8:	f022 0220 	bic.w	r2, r2, #32
 800e8cc:	6022      	str	r2, [r4, #0]
 800e8ce:	2210      	movs	r2, #16
 800e8d0:	e7b7      	b.n	800e842 <_printf_i+0xd2>
 800e8d2:	064d      	lsls	r5, r1, #25
 800e8d4:	bf48      	it	mi
 800e8d6:	b29b      	uxthmi	r3, r3
 800e8d8:	e7ef      	b.n	800e8ba <_printf_i+0x14a>
 800e8da:	4665      	mov	r5, ip
 800e8dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8e0:	fb02 3311 	mls	r3, r2, r1, r3
 800e8e4:	5cc3      	ldrb	r3, [r0, r3]
 800e8e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	2900      	cmp	r1, #0
 800e8ee:	d1f5      	bne.n	800e8dc <_printf_i+0x16c>
 800e8f0:	e7b9      	b.n	800e866 <_printf_i+0xf6>
 800e8f2:	6813      	ldr	r3, [r2, #0]
 800e8f4:	6825      	ldr	r5, [r4, #0]
 800e8f6:	6961      	ldr	r1, [r4, #20]
 800e8f8:	1d18      	adds	r0, r3, #4
 800e8fa:	6010      	str	r0, [r2, #0]
 800e8fc:	0628      	lsls	r0, r5, #24
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	d501      	bpl.n	800e906 <_printf_i+0x196>
 800e902:	6019      	str	r1, [r3, #0]
 800e904:	e002      	b.n	800e90c <_printf_i+0x19c>
 800e906:	066a      	lsls	r2, r5, #25
 800e908:	d5fb      	bpl.n	800e902 <_printf_i+0x192>
 800e90a:	8019      	strh	r1, [r3, #0]
 800e90c:	2300      	movs	r3, #0
 800e90e:	6123      	str	r3, [r4, #16]
 800e910:	4665      	mov	r5, ip
 800e912:	e7b9      	b.n	800e888 <_printf_i+0x118>
 800e914:	6813      	ldr	r3, [r2, #0]
 800e916:	1d19      	adds	r1, r3, #4
 800e918:	6011      	str	r1, [r2, #0]
 800e91a:	681d      	ldr	r5, [r3, #0]
 800e91c:	6862      	ldr	r2, [r4, #4]
 800e91e:	2100      	movs	r1, #0
 800e920:	4628      	mov	r0, r5
 800e922:	f7f1 fc65 	bl	80001f0 <memchr>
 800e926:	b108      	cbz	r0, 800e92c <_printf_i+0x1bc>
 800e928:	1b40      	subs	r0, r0, r5
 800e92a:	6060      	str	r0, [r4, #4]
 800e92c:	6863      	ldr	r3, [r4, #4]
 800e92e:	6123      	str	r3, [r4, #16]
 800e930:	2300      	movs	r3, #0
 800e932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e936:	e7a7      	b.n	800e888 <_printf_i+0x118>
 800e938:	6923      	ldr	r3, [r4, #16]
 800e93a:	462a      	mov	r2, r5
 800e93c:	4639      	mov	r1, r7
 800e93e:	4630      	mov	r0, r6
 800e940:	47c0      	blx	r8
 800e942:	3001      	adds	r0, #1
 800e944:	d0aa      	beq.n	800e89c <_printf_i+0x12c>
 800e946:	6823      	ldr	r3, [r4, #0]
 800e948:	079b      	lsls	r3, r3, #30
 800e94a:	d413      	bmi.n	800e974 <_printf_i+0x204>
 800e94c:	68e0      	ldr	r0, [r4, #12]
 800e94e:	9b03      	ldr	r3, [sp, #12]
 800e950:	4298      	cmp	r0, r3
 800e952:	bfb8      	it	lt
 800e954:	4618      	movlt	r0, r3
 800e956:	e7a3      	b.n	800e8a0 <_printf_i+0x130>
 800e958:	2301      	movs	r3, #1
 800e95a:	464a      	mov	r2, r9
 800e95c:	4639      	mov	r1, r7
 800e95e:	4630      	mov	r0, r6
 800e960:	47c0      	blx	r8
 800e962:	3001      	adds	r0, #1
 800e964:	d09a      	beq.n	800e89c <_printf_i+0x12c>
 800e966:	3501      	adds	r5, #1
 800e968:	68e3      	ldr	r3, [r4, #12]
 800e96a:	9a03      	ldr	r2, [sp, #12]
 800e96c:	1a9b      	subs	r3, r3, r2
 800e96e:	42ab      	cmp	r3, r5
 800e970:	dcf2      	bgt.n	800e958 <_printf_i+0x1e8>
 800e972:	e7eb      	b.n	800e94c <_printf_i+0x1dc>
 800e974:	2500      	movs	r5, #0
 800e976:	f104 0919 	add.w	r9, r4, #25
 800e97a:	e7f5      	b.n	800e968 <_printf_i+0x1f8>
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d1ac      	bne.n	800e8da <_printf_i+0x16a>
 800e980:	7803      	ldrb	r3, [r0, #0]
 800e982:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e986:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e98a:	e76c      	b.n	800e866 <_printf_i+0xf6>
 800e98c:	08011762 	.word	0x08011762
 800e990:	08011773 	.word	0x08011773

0800e994 <iprintf>:
 800e994:	b40f      	push	{r0, r1, r2, r3}
 800e996:	4b0a      	ldr	r3, [pc, #40]	; (800e9c0 <iprintf+0x2c>)
 800e998:	b513      	push	{r0, r1, r4, lr}
 800e99a:	681c      	ldr	r4, [r3, #0]
 800e99c:	b124      	cbz	r4, 800e9a8 <iprintf+0x14>
 800e99e:	69a3      	ldr	r3, [r4, #24]
 800e9a0:	b913      	cbnz	r3, 800e9a8 <iprintf+0x14>
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	f000 fe94 	bl	800f6d0 <__sinit>
 800e9a8:	ab05      	add	r3, sp, #20
 800e9aa:	9a04      	ldr	r2, [sp, #16]
 800e9ac:	68a1      	ldr	r1, [r4, #8]
 800e9ae:	9301      	str	r3, [sp, #4]
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	f001 fae9 	bl	800ff88 <_vfiprintf_r>
 800e9b6:	b002      	add	sp, #8
 800e9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9bc:	b004      	add	sp, #16
 800e9be:	4770      	bx	lr
 800e9c0:	20001300 	.word	0x20001300

0800e9c4 <quorem>:
 800e9c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c8:	6903      	ldr	r3, [r0, #16]
 800e9ca:	690c      	ldr	r4, [r1, #16]
 800e9cc:	42a3      	cmp	r3, r4
 800e9ce:	4680      	mov	r8, r0
 800e9d0:	f2c0 8082 	blt.w	800ead8 <quorem+0x114>
 800e9d4:	3c01      	subs	r4, #1
 800e9d6:	f101 0714 	add.w	r7, r1, #20
 800e9da:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e9de:	f100 0614 	add.w	r6, r0, #20
 800e9e2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e9e6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e9ea:	eb06 030c 	add.w	r3, r6, ip
 800e9ee:	3501      	adds	r5, #1
 800e9f0:	eb07 090c 	add.w	r9, r7, ip
 800e9f4:	9301      	str	r3, [sp, #4]
 800e9f6:	fbb0 f5f5 	udiv	r5, r0, r5
 800e9fa:	b395      	cbz	r5, 800ea62 <quorem+0x9e>
 800e9fc:	f04f 0a00 	mov.w	sl, #0
 800ea00:	4638      	mov	r0, r7
 800ea02:	46b6      	mov	lr, r6
 800ea04:	46d3      	mov	fp, sl
 800ea06:	f850 2b04 	ldr.w	r2, [r0], #4
 800ea0a:	b293      	uxth	r3, r2
 800ea0c:	fb05 a303 	mla	r3, r5, r3, sl
 800ea10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea14:	b29b      	uxth	r3, r3
 800ea16:	ebab 0303 	sub.w	r3, fp, r3
 800ea1a:	0c12      	lsrs	r2, r2, #16
 800ea1c:	f8de b000 	ldr.w	fp, [lr]
 800ea20:	fb05 a202 	mla	r2, r5, r2, sl
 800ea24:	fa13 f38b 	uxtah	r3, r3, fp
 800ea28:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ea2c:	fa1f fb82 	uxth.w	fp, r2
 800ea30:	f8de 2000 	ldr.w	r2, [lr]
 800ea34:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ea38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea3c:	b29b      	uxth	r3, r3
 800ea3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea42:	4581      	cmp	r9, r0
 800ea44:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ea48:	f84e 3b04 	str.w	r3, [lr], #4
 800ea4c:	d2db      	bcs.n	800ea06 <quorem+0x42>
 800ea4e:	f856 300c 	ldr.w	r3, [r6, ip]
 800ea52:	b933      	cbnz	r3, 800ea62 <quorem+0x9e>
 800ea54:	9b01      	ldr	r3, [sp, #4]
 800ea56:	3b04      	subs	r3, #4
 800ea58:	429e      	cmp	r6, r3
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	d330      	bcc.n	800eac0 <quorem+0xfc>
 800ea5e:	f8c8 4010 	str.w	r4, [r8, #16]
 800ea62:	4640      	mov	r0, r8
 800ea64:	f001 f8ea 	bl	800fc3c <__mcmp>
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	db25      	blt.n	800eab8 <quorem+0xf4>
 800ea6c:	3501      	adds	r5, #1
 800ea6e:	4630      	mov	r0, r6
 800ea70:	f04f 0c00 	mov.w	ip, #0
 800ea74:	f857 2b04 	ldr.w	r2, [r7], #4
 800ea78:	f8d0 e000 	ldr.w	lr, [r0]
 800ea7c:	b293      	uxth	r3, r2
 800ea7e:	ebac 0303 	sub.w	r3, ip, r3
 800ea82:	0c12      	lsrs	r2, r2, #16
 800ea84:	fa13 f38e 	uxtah	r3, r3, lr
 800ea88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ea8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea96:	45b9      	cmp	r9, r7
 800ea98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ea9c:	f840 3b04 	str.w	r3, [r0], #4
 800eaa0:	d2e8      	bcs.n	800ea74 <quorem+0xb0>
 800eaa2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800eaa6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800eaaa:	b92a      	cbnz	r2, 800eab8 <quorem+0xf4>
 800eaac:	3b04      	subs	r3, #4
 800eaae:	429e      	cmp	r6, r3
 800eab0:	461a      	mov	r2, r3
 800eab2:	d30b      	bcc.n	800eacc <quorem+0x108>
 800eab4:	f8c8 4010 	str.w	r4, [r8, #16]
 800eab8:	4628      	mov	r0, r5
 800eaba:	b003      	add	sp, #12
 800eabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac0:	6812      	ldr	r2, [r2, #0]
 800eac2:	3b04      	subs	r3, #4
 800eac4:	2a00      	cmp	r2, #0
 800eac6:	d1ca      	bne.n	800ea5e <quorem+0x9a>
 800eac8:	3c01      	subs	r4, #1
 800eaca:	e7c5      	b.n	800ea58 <quorem+0x94>
 800eacc:	6812      	ldr	r2, [r2, #0]
 800eace:	3b04      	subs	r3, #4
 800ead0:	2a00      	cmp	r2, #0
 800ead2:	d1ef      	bne.n	800eab4 <quorem+0xf0>
 800ead4:	3c01      	subs	r4, #1
 800ead6:	e7ea      	b.n	800eaae <quorem+0xea>
 800ead8:	2000      	movs	r0, #0
 800eada:	e7ee      	b.n	800eaba <quorem+0xf6>
 800eadc:	0000      	movs	r0, r0
	...

0800eae0 <_dtoa_r>:
 800eae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae4:	ec57 6b10 	vmov	r6, r7, d0
 800eae8:	b097      	sub	sp, #92	; 0x5c
 800eaea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eaec:	9106      	str	r1, [sp, #24]
 800eaee:	4604      	mov	r4, r0
 800eaf0:	920b      	str	r2, [sp, #44]	; 0x2c
 800eaf2:	9312      	str	r3, [sp, #72]	; 0x48
 800eaf4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800eaf8:	e9cd 6700 	strd	r6, r7, [sp]
 800eafc:	b93d      	cbnz	r5, 800eb0e <_dtoa_r+0x2e>
 800eafe:	2010      	movs	r0, #16
 800eb00:	f000 fe7e 	bl	800f800 <malloc>
 800eb04:	6260      	str	r0, [r4, #36]	; 0x24
 800eb06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eb0a:	6005      	str	r5, [r0, #0]
 800eb0c:	60c5      	str	r5, [r0, #12]
 800eb0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb10:	6819      	ldr	r1, [r3, #0]
 800eb12:	b151      	cbz	r1, 800eb2a <_dtoa_r+0x4a>
 800eb14:	685a      	ldr	r2, [r3, #4]
 800eb16:	604a      	str	r2, [r1, #4]
 800eb18:	2301      	movs	r3, #1
 800eb1a:	4093      	lsls	r3, r2
 800eb1c:	608b      	str	r3, [r1, #8]
 800eb1e:	4620      	mov	r0, r4
 800eb20:	f000 feaa 	bl	800f878 <_Bfree>
 800eb24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb26:	2200      	movs	r2, #0
 800eb28:	601a      	str	r2, [r3, #0]
 800eb2a:	1e3b      	subs	r3, r7, #0
 800eb2c:	bfbb      	ittet	lt
 800eb2e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eb32:	9301      	strlt	r3, [sp, #4]
 800eb34:	2300      	movge	r3, #0
 800eb36:	2201      	movlt	r2, #1
 800eb38:	bfac      	ite	ge
 800eb3a:	f8c8 3000 	strge.w	r3, [r8]
 800eb3e:	f8c8 2000 	strlt.w	r2, [r8]
 800eb42:	4baf      	ldr	r3, [pc, #700]	; (800ee00 <_dtoa_r+0x320>)
 800eb44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800eb48:	ea33 0308 	bics.w	r3, r3, r8
 800eb4c:	d114      	bne.n	800eb78 <_dtoa_r+0x98>
 800eb4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eb50:	f242 730f 	movw	r3, #9999	; 0x270f
 800eb54:	6013      	str	r3, [r2, #0]
 800eb56:	9b00      	ldr	r3, [sp, #0]
 800eb58:	b923      	cbnz	r3, 800eb64 <_dtoa_r+0x84>
 800eb5a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	f000 8542 	beq.w	800f5e8 <_dtoa_r+0xb08>
 800eb64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb66:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ee14 <_dtoa_r+0x334>
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	f000 8544 	beq.w	800f5f8 <_dtoa_r+0xb18>
 800eb70:	f10b 0303 	add.w	r3, fp, #3
 800eb74:	f000 bd3e 	b.w	800f5f4 <_dtoa_r+0xb14>
 800eb78:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	2300      	movs	r3, #0
 800eb80:	4630      	mov	r0, r6
 800eb82:	4639      	mov	r1, r7
 800eb84:	f7f1 ffa8 	bl	8000ad8 <__aeabi_dcmpeq>
 800eb88:	4681      	mov	r9, r0
 800eb8a:	b168      	cbz	r0, 800eba8 <_dtoa_r+0xc8>
 800eb8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eb8e:	2301      	movs	r3, #1
 800eb90:	6013      	str	r3, [r2, #0]
 800eb92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f000 8524 	beq.w	800f5e2 <_dtoa_r+0xb02>
 800eb9a:	4b9a      	ldr	r3, [pc, #616]	; (800ee04 <_dtoa_r+0x324>)
 800eb9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eb9e:	f103 3bff 	add.w	fp, r3, #4294967295
 800eba2:	6013      	str	r3, [r2, #0]
 800eba4:	f000 bd28 	b.w	800f5f8 <_dtoa_r+0xb18>
 800eba8:	aa14      	add	r2, sp, #80	; 0x50
 800ebaa:	a915      	add	r1, sp, #84	; 0x54
 800ebac:	ec47 6b10 	vmov	d0, r6, r7
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	f001 f8ba 	bl	800fd2a <__d2b>
 800ebb6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ebba:	9004      	str	r0, [sp, #16]
 800ebbc:	2d00      	cmp	r5, #0
 800ebbe:	d07c      	beq.n	800ecba <_dtoa_r+0x1da>
 800ebc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ebc4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ebc8:	46b2      	mov	sl, r6
 800ebca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ebce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ebd2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	4b8b      	ldr	r3, [pc, #556]	; (800ee08 <_dtoa_r+0x328>)
 800ebda:	4650      	mov	r0, sl
 800ebdc:	4659      	mov	r1, fp
 800ebde:	f7f1 fb5b 	bl	8000298 <__aeabi_dsub>
 800ebe2:	a381      	add	r3, pc, #516	; (adr r3, 800ede8 <_dtoa_r+0x308>)
 800ebe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe8:	f7f1 fd0e 	bl	8000608 <__aeabi_dmul>
 800ebec:	a380      	add	r3, pc, #512	; (adr r3, 800edf0 <_dtoa_r+0x310>)
 800ebee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf2:	f7f1 fb53 	bl	800029c <__adddf3>
 800ebf6:	4606      	mov	r6, r0
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	460f      	mov	r7, r1
 800ebfc:	f7f1 fc9a 	bl	8000534 <__aeabi_i2d>
 800ec00:	a37d      	add	r3, pc, #500	; (adr r3, 800edf8 <_dtoa_r+0x318>)
 800ec02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec06:	f7f1 fcff 	bl	8000608 <__aeabi_dmul>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	4630      	mov	r0, r6
 800ec10:	4639      	mov	r1, r7
 800ec12:	f7f1 fb43 	bl	800029c <__adddf3>
 800ec16:	4606      	mov	r6, r0
 800ec18:	460f      	mov	r7, r1
 800ec1a:	f7f1 ffa5 	bl	8000b68 <__aeabi_d2iz>
 800ec1e:	2200      	movs	r2, #0
 800ec20:	4682      	mov	sl, r0
 800ec22:	2300      	movs	r3, #0
 800ec24:	4630      	mov	r0, r6
 800ec26:	4639      	mov	r1, r7
 800ec28:	f7f1 ff60 	bl	8000aec <__aeabi_dcmplt>
 800ec2c:	b148      	cbz	r0, 800ec42 <_dtoa_r+0x162>
 800ec2e:	4650      	mov	r0, sl
 800ec30:	f7f1 fc80 	bl	8000534 <__aeabi_i2d>
 800ec34:	4632      	mov	r2, r6
 800ec36:	463b      	mov	r3, r7
 800ec38:	f7f1 ff4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ec3c:	b908      	cbnz	r0, 800ec42 <_dtoa_r+0x162>
 800ec3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec42:	f1ba 0f16 	cmp.w	sl, #22
 800ec46:	d859      	bhi.n	800ecfc <_dtoa_r+0x21c>
 800ec48:	4970      	ldr	r1, [pc, #448]	; (800ee0c <_dtoa_r+0x32c>)
 800ec4a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ec4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec56:	f7f1 ff67 	bl	8000b28 <__aeabi_dcmpgt>
 800ec5a:	2800      	cmp	r0, #0
 800ec5c:	d050      	beq.n	800ed00 <_dtoa_r+0x220>
 800ec5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec62:	2300      	movs	r3, #0
 800ec64:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec68:	1b5d      	subs	r5, r3, r5
 800ec6a:	f1b5 0801 	subs.w	r8, r5, #1
 800ec6e:	bf49      	itett	mi
 800ec70:	f1c5 0301 	rsbmi	r3, r5, #1
 800ec74:	2300      	movpl	r3, #0
 800ec76:	9305      	strmi	r3, [sp, #20]
 800ec78:	f04f 0800 	movmi.w	r8, #0
 800ec7c:	bf58      	it	pl
 800ec7e:	9305      	strpl	r3, [sp, #20]
 800ec80:	f1ba 0f00 	cmp.w	sl, #0
 800ec84:	db3e      	blt.n	800ed04 <_dtoa_r+0x224>
 800ec86:	2300      	movs	r3, #0
 800ec88:	44d0      	add	r8, sl
 800ec8a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ec8e:	9307      	str	r3, [sp, #28]
 800ec90:	9b06      	ldr	r3, [sp, #24]
 800ec92:	2b09      	cmp	r3, #9
 800ec94:	f200 8090 	bhi.w	800edb8 <_dtoa_r+0x2d8>
 800ec98:	2b05      	cmp	r3, #5
 800ec9a:	bfc4      	itt	gt
 800ec9c:	3b04      	subgt	r3, #4
 800ec9e:	9306      	strgt	r3, [sp, #24]
 800eca0:	9b06      	ldr	r3, [sp, #24]
 800eca2:	f1a3 0302 	sub.w	r3, r3, #2
 800eca6:	bfcc      	ite	gt
 800eca8:	2500      	movgt	r5, #0
 800ecaa:	2501      	movle	r5, #1
 800ecac:	2b03      	cmp	r3, #3
 800ecae:	f200 808f 	bhi.w	800edd0 <_dtoa_r+0x2f0>
 800ecb2:	e8df f003 	tbb	[pc, r3]
 800ecb6:	7f7d      	.short	0x7f7d
 800ecb8:	7131      	.short	0x7131
 800ecba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ecbe:	441d      	add	r5, r3
 800ecc0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ecc4:	2820      	cmp	r0, #32
 800ecc6:	dd13      	ble.n	800ecf0 <_dtoa_r+0x210>
 800ecc8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800eccc:	9b00      	ldr	r3, [sp, #0]
 800ecce:	fa08 f800 	lsl.w	r8, r8, r0
 800ecd2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ecd6:	fa23 f000 	lsr.w	r0, r3, r0
 800ecda:	ea48 0000 	orr.w	r0, r8, r0
 800ecde:	f7f1 fc19 	bl	8000514 <__aeabi_ui2d>
 800ece2:	2301      	movs	r3, #1
 800ece4:	4682      	mov	sl, r0
 800ece6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ecea:	3d01      	subs	r5, #1
 800ecec:	9313      	str	r3, [sp, #76]	; 0x4c
 800ecee:	e772      	b.n	800ebd6 <_dtoa_r+0xf6>
 800ecf0:	9b00      	ldr	r3, [sp, #0]
 800ecf2:	f1c0 0020 	rsb	r0, r0, #32
 800ecf6:	fa03 f000 	lsl.w	r0, r3, r0
 800ecfa:	e7f0      	b.n	800ecde <_dtoa_r+0x1fe>
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	e7b1      	b.n	800ec64 <_dtoa_r+0x184>
 800ed00:	900f      	str	r0, [sp, #60]	; 0x3c
 800ed02:	e7b0      	b.n	800ec66 <_dtoa_r+0x186>
 800ed04:	9b05      	ldr	r3, [sp, #20]
 800ed06:	eba3 030a 	sub.w	r3, r3, sl
 800ed0a:	9305      	str	r3, [sp, #20]
 800ed0c:	f1ca 0300 	rsb	r3, sl, #0
 800ed10:	9307      	str	r3, [sp, #28]
 800ed12:	2300      	movs	r3, #0
 800ed14:	930e      	str	r3, [sp, #56]	; 0x38
 800ed16:	e7bb      	b.n	800ec90 <_dtoa_r+0x1b0>
 800ed18:	2301      	movs	r3, #1
 800ed1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ed1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	dd59      	ble.n	800edd6 <_dtoa_r+0x2f6>
 800ed22:	9302      	str	r3, [sp, #8]
 800ed24:	4699      	mov	r9, r3
 800ed26:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ed28:	2200      	movs	r2, #0
 800ed2a:	6072      	str	r2, [r6, #4]
 800ed2c:	2204      	movs	r2, #4
 800ed2e:	f102 0014 	add.w	r0, r2, #20
 800ed32:	4298      	cmp	r0, r3
 800ed34:	6871      	ldr	r1, [r6, #4]
 800ed36:	d953      	bls.n	800ede0 <_dtoa_r+0x300>
 800ed38:	4620      	mov	r0, r4
 800ed3a:	f000 fd69 	bl	800f810 <_Balloc>
 800ed3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed40:	6030      	str	r0, [r6, #0]
 800ed42:	f1b9 0f0e 	cmp.w	r9, #14
 800ed46:	f8d3 b000 	ldr.w	fp, [r3]
 800ed4a:	f200 80e6 	bhi.w	800ef1a <_dtoa_r+0x43a>
 800ed4e:	2d00      	cmp	r5, #0
 800ed50:	f000 80e3 	beq.w	800ef1a <_dtoa_r+0x43a>
 800ed54:	ed9d 7b00 	vldr	d7, [sp]
 800ed58:	f1ba 0f00 	cmp.w	sl, #0
 800ed5c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ed60:	dd74      	ble.n	800ee4c <_dtoa_r+0x36c>
 800ed62:	4a2a      	ldr	r2, [pc, #168]	; (800ee0c <_dtoa_r+0x32c>)
 800ed64:	f00a 030f 	and.w	r3, sl, #15
 800ed68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ed6c:	ed93 7b00 	vldr	d7, [r3]
 800ed70:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ed74:	06f0      	lsls	r0, r6, #27
 800ed76:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ed7a:	d565      	bpl.n	800ee48 <_dtoa_r+0x368>
 800ed7c:	4b24      	ldr	r3, [pc, #144]	; (800ee10 <_dtoa_r+0x330>)
 800ed7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ed82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ed86:	f7f1 fd69 	bl	800085c <__aeabi_ddiv>
 800ed8a:	e9cd 0100 	strd	r0, r1, [sp]
 800ed8e:	f006 060f 	and.w	r6, r6, #15
 800ed92:	2503      	movs	r5, #3
 800ed94:	4f1e      	ldr	r7, [pc, #120]	; (800ee10 <_dtoa_r+0x330>)
 800ed96:	e04c      	b.n	800ee32 <_dtoa_r+0x352>
 800ed98:	2301      	movs	r3, #1
 800ed9a:	930a      	str	r3, [sp, #40]	; 0x28
 800ed9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed9e:	4453      	add	r3, sl
 800eda0:	f103 0901 	add.w	r9, r3, #1
 800eda4:	9302      	str	r3, [sp, #8]
 800eda6:	464b      	mov	r3, r9
 800eda8:	2b01      	cmp	r3, #1
 800edaa:	bfb8      	it	lt
 800edac:	2301      	movlt	r3, #1
 800edae:	e7ba      	b.n	800ed26 <_dtoa_r+0x246>
 800edb0:	2300      	movs	r3, #0
 800edb2:	e7b2      	b.n	800ed1a <_dtoa_r+0x23a>
 800edb4:	2300      	movs	r3, #0
 800edb6:	e7f0      	b.n	800ed9a <_dtoa_r+0x2ba>
 800edb8:	2501      	movs	r5, #1
 800edba:	2300      	movs	r3, #0
 800edbc:	9306      	str	r3, [sp, #24]
 800edbe:	950a      	str	r5, [sp, #40]	; 0x28
 800edc0:	f04f 33ff 	mov.w	r3, #4294967295
 800edc4:	9302      	str	r3, [sp, #8]
 800edc6:	4699      	mov	r9, r3
 800edc8:	2200      	movs	r2, #0
 800edca:	2312      	movs	r3, #18
 800edcc:	920b      	str	r2, [sp, #44]	; 0x2c
 800edce:	e7aa      	b.n	800ed26 <_dtoa_r+0x246>
 800edd0:	2301      	movs	r3, #1
 800edd2:	930a      	str	r3, [sp, #40]	; 0x28
 800edd4:	e7f4      	b.n	800edc0 <_dtoa_r+0x2e0>
 800edd6:	2301      	movs	r3, #1
 800edd8:	9302      	str	r3, [sp, #8]
 800edda:	4699      	mov	r9, r3
 800eddc:	461a      	mov	r2, r3
 800edde:	e7f5      	b.n	800edcc <_dtoa_r+0x2ec>
 800ede0:	3101      	adds	r1, #1
 800ede2:	6071      	str	r1, [r6, #4]
 800ede4:	0052      	lsls	r2, r2, #1
 800ede6:	e7a2      	b.n	800ed2e <_dtoa_r+0x24e>
 800ede8:	636f4361 	.word	0x636f4361
 800edec:	3fd287a7 	.word	0x3fd287a7
 800edf0:	8b60c8b3 	.word	0x8b60c8b3
 800edf4:	3fc68a28 	.word	0x3fc68a28
 800edf8:	509f79fb 	.word	0x509f79fb
 800edfc:	3fd34413 	.word	0x3fd34413
 800ee00:	7ff00000 	.word	0x7ff00000
 800ee04:	08011761 	.word	0x08011761
 800ee08:	3ff80000 	.word	0x3ff80000
 800ee0c:	08011820 	.word	0x08011820
 800ee10:	080117f8 	.word	0x080117f8
 800ee14:	0801178d 	.word	0x0801178d
 800ee18:	07f1      	lsls	r1, r6, #31
 800ee1a:	d508      	bpl.n	800ee2e <_dtoa_r+0x34e>
 800ee1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ee20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee24:	f7f1 fbf0 	bl	8000608 <__aeabi_dmul>
 800ee28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ee2c:	3501      	adds	r5, #1
 800ee2e:	1076      	asrs	r6, r6, #1
 800ee30:	3708      	adds	r7, #8
 800ee32:	2e00      	cmp	r6, #0
 800ee34:	d1f0      	bne.n	800ee18 <_dtoa_r+0x338>
 800ee36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ee3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee3e:	f7f1 fd0d 	bl	800085c <__aeabi_ddiv>
 800ee42:	e9cd 0100 	strd	r0, r1, [sp]
 800ee46:	e01a      	b.n	800ee7e <_dtoa_r+0x39e>
 800ee48:	2502      	movs	r5, #2
 800ee4a:	e7a3      	b.n	800ed94 <_dtoa_r+0x2b4>
 800ee4c:	f000 80a0 	beq.w	800ef90 <_dtoa_r+0x4b0>
 800ee50:	f1ca 0600 	rsb	r6, sl, #0
 800ee54:	4b9f      	ldr	r3, [pc, #636]	; (800f0d4 <_dtoa_r+0x5f4>)
 800ee56:	4fa0      	ldr	r7, [pc, #640]	; (800f0d8 <_dtoa_r+0x5f8>)
 800ee58:	f006 020f 	and.w	r2, r6, #15
 800ee5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee68:	f7f1 fbce 	bl	8000608 <__aeabi_dmul>
 800ee6c:	e9cd 0100 	strd	r0, r1, [sp]
 800ee70:	1136      	asrs	r6, r6, #4
 800ee72:	2300      	movs	r3, #0
 800ee74:	2502      	movs	r5, #2
 800ee76:	2e00      	cmp	r6, #0
 800ee78:	d17f      	bne.n	800ef7a <_dtoa_r+0x49a>
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d1e1      	bne.n	800ee42 <_dtoa_r+0x362>
 800ee7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f000 8087 	beq.w	800ef94 <_dtoa_r+0x4b4>
 800ee86:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	4b93      	ldr	r3, [pc, #588]	; (800f0dc <_dtoa_r+0x5fc>)
 800ee8e:	4630      	mov	r0, r6
 800ee90:	4639      	mov	r1, r7
 800ee92:	f7f1 fe2b 	bl	8000aec <__aeabi_dcmplt>
 800ee96:	2800      	cmp	r0, #0
 800ee98:	d07c      	beq.n	800ef94 <_dtoa_r+0x4b4>
 800ee9a:	f1b9 0f00 	cmp.w	r9, #0
 800ee9e:	d079      	beq.n	800ef94 <_dtoa_r+0x4b4>
 800eea0:	9b02      	ldr	r3, [sp, #8]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	dd35      	ble.n	800ef12 <_dtoa_r+0x432>
 800eea6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800eeaa:	9308      	str	r3, [sp, #32]
 800eeac:	4639      	mov	r1, r7
 800eeae:	2200      	movs	r2, #0
 800eeb0:	4b8b      	ldr	r3, [pc, #556]	; (800f0e0 <_dtoa_r+0x600>)
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	f7f1 fba8 	bl	8000608 <__aeabi_dmul>
 800eeb8:	e9cd 0100 	strd	r0, r1, [sp]
 800eebc:	9f02      	ldr	r7, [sp, #8]
 800eebe:	3501      	adds	r5, #1
 800eec0:	4628      	mov	r0, r5
 800eec2:	f7f1 fb37 	bl	8000534 <__aeabi_i2d>
 800eec6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eeca:	f7f1 fb9d 	bl	8000608 <__aeabi_dmul>
 800eece:	2200      	movs	r2, #0
 800eed0:	4b84      	ldr	r3, [pc, #528]	; (800f0e4 <_dtoa_r+0x604>)
 800eed2:	f7f1 f9e3 	bl	800029c <__adddf3>
 800eed6:	4605      	mov	r5, r0
 800eed8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800eedc:	2f00      	cmp	r7, #0
 800eede:	d15d      	bne.n	800ef9c <_dtoa_r+0x4bc>
 800eee0:	2200      	movs	r2, #0
 800eee2:	4b81      	ldr	r3, [pc, #516]	; (800f0e8 <_dtoa_r+0x608>)
 800eee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eee8:	f7f1 f9d6 	bl	8000298 <__aeabi_dsub>
 800eeec:	462a      	mov	r2, r5
 800eeee:	4633      	mov	r3, r6
 800eef0:	e9cd 0100 	strd	r0, r1, [sp]
 800eef4:	f7f1 fe18 	bl	8000b28 <__aeabi_dcmpgt>
 800eef8:	2800      	cmp	r0, #0
 800eefa:	f040 8288 	bne.w	800f40e <_dtoa_r+0x92e>
 800eefe:	462a      	mov	r2, r5
 800ef00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ef04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef08:	f7f1 fdf0 	bl	8000aec <__aeabi_dcmplt>
 800ef0c:	2800      	cmp	r0, #0
 800ef0e:	f040 827c 	bne.w	800f40a <_dtoa_r+0x92a>
 800ef12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ef16:	e9cd 2300 	strd	r2, r3, [sp]
 800ef1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	f2c0 8150 	blt.w	800f1c2 <_dtoa_r+0x6e2>
 800ef22:	f1ba 0f0e 	cmp.w	sl, #14
 800ef26:	f300 814c 	bgt.w	800f1c2 <_dtoa_r+0x6e2>
 800ef2a:	4b6a      	ldr	r3, [pc, #424]	; (800f0d4 <_dtoa_r+0x5f4>)
 800ef2c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ef30:	ed93 7b00 	vldr	d7, [r3]
 800ef34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ef3c:	f280 80d8 	bge.w	800f0f0 <_dtoa_r+0x610>
 800ef40:	f1b9 0f00 	cmp.w	r9, #0
 800ef44:	f300 80d4 	bgt.w	800f0f0 <_dtoa_r+0x610>
 800ef48:	f040 825e 	bne.w	800f408 <_dtoa_r+0x928>
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	4b66      	ldr	r3, [pc, #408]	; (800f0e8 <_dtoa_r+0x608>)
 800ef50:	ec51 0b17 	vmov	r0, r1, d7
 800ef54:	f7f1 fb58 	bl	8000608 <__aeabi_dmul>
 800ef58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef5c:	f7f1 fdda 	bl	8000b14 <__aeabi_dcmpge>
 800ef60:	464f      	mov	r7, r9
 800ef62:	464e      	mov	r6, r9
 800ef64:	2800      	cmp	r0, #0
 800ef66:	f040 8234 	bne.w	800f3d2 <_dtoa_r+0x8f2>
 800ef6a:	2331      	movs	r3, #49	; 0x31
 800ef6c:	f10b 0501 	add.w	r5, fp, #1
 800ef70:	f88b 3000 	strb.w	r3, [fp]
 800ef74:	f10a 0a01 	add.w	sl, sl, #1
 800ef78:	e22f      	b.n	800f3da <_dtoa_r+0x8fa>
 800ef7a:	07f2      	lsls	r2, r6, #31
 800ef7c:	d505      	bpl.n	800ef8a <_dtoa_r+0x4aa>
 800ef7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef82:	f7f1 fb41 	bl	8000608 <__aeabi_dmul>
 800ef86:	3501      	adds	r5, #1
 800ef88:	2301      	movs	r3, #1
 800ef8a:	1076      	asrs	r6, r6, #1
 800ef8c:	3708      	adds	r7, #8
 800ef8e:	e772      	b.n	800ee76 <_dtoa_r+0x396>
 800ef90:	2502      	movs	r5, #2
 800ef92:	e774      	b.n	800ee7e <_dtoa_r+0x39e>
 800ef94:	f8cd a020 	str.w	sl, [sp, #32]
 800ef98:	464f      	mov	r7, r9
 800ef9a:	e791      	b.n	800eec0 <_dtoa_r+0x3e0>
 800ef9c:	4b4d      	ldr	r3, [pc, #308]	; (800f0d4 <_dtoa_r+0x5f4>)
 800ef9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800efa2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800efa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d047      	beq.n	800f03c <_dtoa_r+0x55c>
 800efac:	4602      	mov	r2, r0
 800efae:	460b      	mov	r3, r1
 800efb0:	2000      	movs	r0, #0
 800efb2:	494e      	ldr	r1, [pc, #312]	; (800f0ec <_dtoa_r+0x60c>)
 800efb4:	f7f1 fc52 	bl	800085c <__aeabi_ddiv>
 800efb8:	462a      	mov	r2, r5
 800efba:	4633      	mov	r3, r6
 800efbc:	f7f1 f96c 	bl	8000298 <__aeabi_dsub>
 800efc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800efc4:	465d      	mov	r5, fp
 800efc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800efca:	f7f1 fdcd 	bl	8000b68 <__aeabi_d2iz>
 800efce:	4606      	mov	r6, r0
 800efd0:	f7f1 fab0 	bl	8000534 <__aeabi_i2d>
 800efd4:	4602      	mov	r2, r0
 800efd6:	460b      	mov	r3, r1
 800efd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800efdc:	f7f1 f95c 	bl	8000298 <__aeabi_dsub>
 800efe0:	3630      	adds	r6, #48	; 0x30
 800efe2:	f805 6b01 	strb.w	r6, [r5], #1
 800efe6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800efea:	e9cd 0100 	strd	r0, r1, [sp]
 800efee:	f7f1 fd7d 	bl	8000aec <__aeabi_dcmplt>
 800eff2:	2800      	cmp	r0, #0
 800eff4:	d163      	bne.n	800f0be <_dtoa_r+0x5de>
 800eff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800effa:	2000      	movs	r0, #0
 800effc:	4937      	ldr	r1, [pc, #220]	; (800f0dc <_dtoa_r+0x5fc>)
 800effe:	f7f1 f94b 	bl	8000298 <__aeabi_dsub>
 800f002:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f006:	f7f1 fd71 	bl	8000aec <__aeabi_dcmplt>
 800f00a:	2800      	cmp	r0, #0
 800f00c:	f040 80b7 	bne.w	800f17e <_dtoa_r+0x69e>
 800f010:	eba5 030b 	sub.w	r3, r5, fp
 800f014:	429f      	cmp	r7, r3
 800f016:	f77f af7c 	ble.w	800ef12 <_dtoa_r+0x432>
 800f01a:	2200      	movs	r2, #0
 800f01c:	4b30      	ldr	r3, [pc, #192]	; (800f0e0 <_dtoa_r+0x600>)
 800f01e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f022:	f7f1 faf1 	bl	8000608 <__aeabi_dmul>
 800f026:	2200      	movs	r2, #0
 800f028:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f02c:	4b2c      	ldr	r3, [pc, #176]	; (800f0e0 <_dtoa_r+0x600>)
 800f02e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f032:	f7f1 fae9 	bl	8000608 <__aeabi_dmul>
 800f036:	e9cd 0100 	strd	r0, r1, [sp]
 800f03a:	e7c4      	b.n	800efc6 <_dtoa_r+0x4e6>
 800f03c:	462a      	mov	r2, r5
 800f03e:	4633      	mov	r3, r6
 800f040:	f7f1 fae2 	bl	8000608 <__aeabi_dmul>
 800f044:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f048:	eb0b 0507 	add.w	r5, fp, r7
 800f04c:	465e      	mov	r6, fp
 800f04e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f052:	f7f1 fd89 	bl	8000b68 <__aeabi_d2iz>
 800f056:	4607      	mov	r7, r0
 800f058:	f7f1 fa6c 	bl	8000534 <__aeabi_i2d>
 800f05c:	3730      	adds	r7, #48	; 0x30
 800f05e:	4602      	mov	r2, r0
 800f060:	460b      	mov	r3, r1
 800f062:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f066:	f7f1 f917 	bl	8000298 <__aeabi_dsub>
 800f06a:	f806 7b01 	strb.w	r7, [r6], #1
 800f06e:	42ae      	cmp	r6, r5
 800f070:	e9cd 0100 	strd	r0, r1, [sp]
 800f074:	f04f 0200 	mov.w	r2, #0
 800f078:	d126      	bne.n	800f0c8 <_dtoa_r+0x5e8>
 800f07a:	4b1c      	ldr	r3, [pc, #112]	; (800f0ec <_dtoa_r+0x60c>)
 800f07c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f080:	f7f1 f90c 	bl	800029c <__adddf3>
 800f084:	4602      	mov	r2, r0
 800f086:	460b      	mov	r3, r1
 800f088:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f08c:	f7f1 fd4c 	bl	8000b28 <__aeabi_dcmpgt>
 800f090:	2800      	cmp	r0, #0
 800f092:	d174      	bne.n	800f17e <_dtoa_r+0x69e>
 800f094:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f098:	2000      	movs	r0, #0
 800f09a:	4914      	ldr	r1, [pc, #80]	; (800f0ec <_dtoa_r+0x60c>)
 800f09c:	f7f1 f8fc 	bl	8000298 <__aeabi_dsub>
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	460b      	mov	r3, r1
 800f0a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f0a8:	f7f1 fd20 	bl	8000aec <__aeabi_dcmplt>
 800f0ac:	2800      	cmp	r0, #0
 800f0ae:	f43f af30 	beq.w	800ef12 <_dtoa_r+0x432>
 800f0b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f0b6:	2b30      	cmp	r3, #48	; 0x30
 800f0b8:	f105 32ff 	add.w	r2, r5, #4294967295
 800f0bc:	d002      	beq.n	800f0c4 <_dtoa_r+0x5e4>
 800f0be:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f0c2:	e04a      	b.n	800f15a <_dtoa_r+0x67a>
 800f0c4:	4615      	mov	r5, r2
 800f0c6:	e7f4      	b.n	800f0b2 <_dtoa_r+0x5d2>
 800f0c8:	4b05      	ldr	r3, [pc, #20]	; (800f0e0 <_dtoa_r+0x600>)
 800f0ca:	f7f1 fa9d 	bl	8000608 <__aeabi_dmul>
 800f0ce:	e9cd 0100 	strd	r0, r1, [sp]
 800f0d2:	e7bc      	b.n	800f04e <_dtoa_r+0x56e>
 800f0d4:	08011820 	.word	0x08011820
 800f0d8:	080117f8 	.word	0x080117f8
 800f0dc:	3ff00000 	.word	0x3ff00000
 800f0e0:	40240000 	.word	0x40240000
 800f0e4:	401c0000 	.word	0x401c0000
 800f0e8:	40140000 	.word	0x40140000
 800f0ec:	3fe00000 	.word	0x3fe00000
 800f0f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f0f4:	465d      	mov	r5, fp
 800f0f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f0fa:	4630      	mov	r0, r6
 800f0fc:	4639      	mov	r1, r7
 800f0fe:	f7f1 fbad 	bl	800085c <__aeabi_ddiv>
 800f102:	f7f1 fd31 	bl	8000b68 <__aeabi_d2iz>
 800f106:	4680      	mov	r8, r0
 800f108:	f7f1 fa14 	bl	8000534 <__aeabi_i2d>
 800f10c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f110:	f7f1 fa7a 	bl	8000608 <__aeabi_dmul>
 800f114:	4602      	mov	r2, r0
 800f116:	460b      	mov	r3, r1
 800f118:	4630      	mov	r0, r6
 800f11a:	4639      	mov	r1, r7
 800f11c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f120:	f7f1 f8ba 	bl	8000298 <__aeabi_dsub>
 800f124:	f805 6b01 	strb.w	r6, [r5], #1
 800f128:	eba5 060b 	sub.w	r6, r5, fp
 800f12c:	45b1      	cmp	r9, r6
 800f12e:	4602      	mov	r2, r0
 800f130:	460b      	mov	r3, r1
 800f132:	d139      	bne.n	800f1a8 <_dtoa_r+0x6c8>
 800f134:	f7f1 f8b2 	bl	800029c <__adddf3>
 800f138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f13c:	4606      	mov	r6, r0
 800f13e:	460f      	mov	r7, r1
 800f140:	f7f1 fcf2 	bl	8000b28 <__aeabi_dcmpgt>
 800f144:	b9c8      	cbnz	r0, 800f17a <_dtoa_r+0x69a>
 800f146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f14a:	4630      	mov	r0, r6
 800f14c:	4639      	mov	r1, r7
 800f14e:	f7f1 fcc3 	bl	8000ad8 <__aeabi_dcmpeq>
 800f152:	b110      	cbz	r0, 800f15a <_dtoa_r+0x67a>
 800f154:	f018 0f01 	tst.w	r8, #1
 800f158:	d10f      	bne.n	800f17a <_dtoa_r+0x69a>
 800f15a:	9904      	ldr	r1, [sp, #16]
 800f15c:	4620      	mov	r0, r4
 800f15e:	f000 fb8b 	bl	800f878 <_Bfree>
 800f162:	2300      	movs	r3, #0
 800f164:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f166:	702b      	strb	r3, [r5, #0]
 800f168:	f10a 0301 	add.w	r3, sl, #1
 800f16c:	6013      	str	r3, [r2, #0]
 800f16e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f170:	2b00      	cmp	r3, #0
 800f172:	f000 8241 	beq.w	800f5f8 <_dtoa_r+0xb18>
 800f176:	601d      	str	r5, [r3, #0]
 800f178:	e23e      	b.n	800f5f8 <_dtoa_r+0xb18>
 800f17a:	f8cd a020 	str.w	sl, [sp, #32]
 800f17e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f182:	2a39      	cmp	r2, #57	; 0x39
 800f184:	f105 33ff 	add.w	r3, r5, #4294967295
 800f188:	d108      	bne.n	800f19c <_dtoa_r+0x6bc>
 800f18a:	459b      	cmp	fp, r3
 800f18c:	d10a      	bne.n	800f1a4 <_dtoa_r+0x6c4>
 800f18e:	9b08      	ldr	r3, [sp, #32]
 800f190:	3301      	adds	r3, #1
 800f192:	9308      	str	r3, [sp, #32]
 800f194:	2330      	movs	r3, #48	; 0x30
 800f196:	f88b 3000 	strb.w	r3, [fp]
 800f19a:	465b      	mov	r3, fp
 800f19c:	781a      	ldrb	r2, [r3, #0]
 800f19e:	3201      	adds	r2, #1
 800f1a0:	701a      	strb	r2, [r3, #0]
 800f1a2:	e78c      	b.n	800f0be <_dtoa_r+0x5de>
 800f1a4:	461d      	mov	r5, r3
 800f1a6:	e7ea      	b.n	800f17e <_dtoa_r+0x69e>
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	4b9b      	ldr	r3, [pc, #620]	; (800f418 <_dtoa_r+0x938>)
 800f1ac:	f7f1 fa2c 	bl	8000608 <__aeabi_dmul>
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	4606      	mov	r6, r0
 800f1b6:	460f      	mov	r7, r1
 800f1b8:	f7f1 fc8e 	bl	8000ad8 <__aeabi_dcmpeq>
 800f1bc:	2800      	cmp	r0, #0
 800f1be:	d09a      	beq.n	800f0f6 <_dtoa_r+0x616>
 800f1c0:	e7cb      	b.n	800f15a <_dtoa_r+0x67a>
 800f1c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1c4:	2a00      	cmp	r2, #0
 800f1c6:	f000 808b 	beq.w	800f2e0 <_dtoa_r+0x800>
 800f1ca:	9a06      	ldr	r2, [sp, #24]
 800f1cc:	2a01      	cmp	r2, #1
 800f1ce:	dc6e      	bgt.n	800f2ae <_dtoa_r+0x7ce>
 800f1d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f1d2:	2a00      	cmp	r2, #0
 800f1d4:	d067      	beq.n	800f2a6 <_dtoa_r+0x7c6>
 800f1d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f1da:	9f07      	ldr	r7, [sp, #28]
 800f1dc:	9d05      	ldr	r5, [sp, #20]
 800f1de:	9a05      	ldr	r2, [sp, #20]
 800f1e0:	2101      	movs	r1, #1
 800f1e2:	441a      	add	r2, r3
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	9205      	str	r2, [sp, #20]
 800f1e8:	4498      	add	r8, r3
 800f1ea:	f000 fbe5 	bl	800f9b8 <__i2b>
 800f1ee:	4606      	mov	r6, r0
 800f1f0:	2d00      	cmp	r5, #0
 800f1f2:	dd0c      	ble.n	800f20e <_dtoa_r+0x72e>
 800f1f4:	f1b8 0f00 	cmp.w	r8, #0
 800f1f8:	dd09      	ble.n	800f20e <_dtoa_r+0x72e>
 800f1fa:	4545      	cmp	r5, r8
 800f1fc:	9a05      	ldr	r2, [sp, #20]
 800f1fe:	462b      	mov	r3, r5
 800f200:	bfa8      	it	ge
 800f202:	4643      	movge	r3, r8
 800f204:	1ad2      	subs	r2, r2, r3
 800f206:	9205      	str	r2, [sp, #20]
 800f208:	1aed      	subs	r5, r5, r3
 800f20a:	eba8 0803 	sub.w	r8, r8, r3
 800f20e:	9b07      	ldr	r3, [sp, #28]
 800f210:	b1eb      	cbz	r3, 800f24e <_dtoa_r+0x76e>
 800f212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f214:	2b00      	cmp	r3, #0
 800f216:	d067      	beq.n	800f2e8 <_dtoa_r+0x808>
 800f218:	b18f      	cbz	r7, 800f23e <_dtoa_r+0x75e>
 800f21a:	4631      	mov	r1, r6
 800f21c:	463a      	mov	r2, r7
 800f21e:	4620      	mov	r0, r4
 800f220:	f000 fc6a 	bl	800faf8 <__pow5mult>
 800f224:	9a04      	ldr	r2, [sp, #16]
 800f226:	4601      	mov	r1, r0
 800f228:	4606      	mov	r6, r0
 800f22a:	4620      	mov	r0, r4
 800f22c:	f000 fbcd 	bl	800f9ca <__multiply>
 800f230:	9904      	ldr	r1, [sp, #16]
 800f232:	9008      	str	r0, [sp, #32]
 800f234:	4620      	mov	r0, r4
 800f236:	f000 fb1f 	bl	800f878 <_Bfree>
 800f23a:	9b08      	ldr	r3, [sp, #32]
 800f23c:	9304      	str	r3, [sp, #16]
 800f23e:	9b07      	ldr	r3, [sp, #28]
 800f240:	1bda      	subs	r2, r3, r7
 800f242:	d004      	beq.n	800f24e <_dtoa_r+0x76e>
 800f244:	9904      	ldr	r1, [sp, #16]
 800f246:	4620      	mov	r0, r4
 800f248:	f000 fc56 	bl	800faf8 <__pow5mult>
 800f24c:	9004      	str	r0, [sp, #16]
 800f24e:	2101      	movs	r1, #1
 800f250:	4620      	mov	r0, r4
 800f252:	f000 fbb1 	bl	800f9b8 <__i2b>
 800f256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f258:	4607      	mov	r7, r0
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	f000 81d0 	beq.w	800f600 <_dtoa_r+0xb20>
 800f260:	461a      	mov	r2, r3
 800f262:	4601      	mov	r1, r0
 800f264:	4620      	mov	r0, r4
 800f266:	f000 fc47 	bl	800faf8 <__pow5mult>
 800f26a:	9b06      	ldr	r3, [sp, #24]
 800f26c:	2b01      	cmp	r3, #1
 800f26e:	4607      	mov	r7, r0
 800f270:	dc40      	bgt.n	800f2f4 <_dtoa_r+0x814>
 800f272:	9b00      	ldr	r3, [sp, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d139      	bne.n	800f2ec <_dtoa_r+0x80c>
 800f278:	9b01      	ldr	r3, [sp, #4]
 800f27a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d136      	bne.n	800f2f0 <_dtoa_r+0x810>
 800f282:	9b01      	ldr	r3, [sp, #4]
 800f284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f288:	0d1b      	lsrs	r3, r3, #20
 800f28a:	051b      	lsls	r3, r3, #20
 800f28c:	b12b      	cbz	r3, 800f29a <_dtoa_r+0x7ba>
 800f28e:	9b05      	ldr	r3, [sp, #20]
 800f290:	3301      	adds	r3, #1
 800f292:	9305      	str	r3, [sp, #20]
 800f294:	f108 0801 	add.w	r8, r8, #1
 800f298:	2301      	movs	r3, #1
 800f29a:	9307      	str	r3, [sp, #28]
 800f29c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d12a      	bne.n	800f2f8 <_dtoa_r+0x818>
 800f2a2:	2001      	movs	r0, #1
 800f2a4:	e030      	b.n	800f308 <_dtoa_r+0x828>
 800f2a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f2a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f2ac:	e795      	b.n	800f1da <_dtoa_r+0x6fa>
 800f2ae:	9b07      	ldr	r3, [sp, #28]
 800f2b0:	f109 37ff 	add.w	r7, r9, #4294967295
 800f2b4:	42bb      	cmp	r3, r7
 800f2b6:	bfbf      	itttt	lt
 800f2b8:	9b07      	ldrlt	r3, [sp, #28]
 800f2ba:	9707      	strlt	r7, [sp, #28]
 800f2bc:	1afa      	sublt	r2, r7, r3
 800f2be:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f2c0:	bfbb      	ittet	lt
 800f2c2:	189b      	addlt	r3, r3, r2
 800f2c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f2c6:	1bdf      	subge	r7, r3, r7
 800f2c8:	2700      	movlt	r7, #0
 800f2ca:	f1b9 0f00 	cmp.w	r9, #0
 800f2ce:	bfb5      	itete	lt
 800f2d0:	9b05      	ldrlt	r3, [sp, #20]
 800f2d2:	9d05      	ldrge	r5, [sp, #20]
 800f2d4:	eba3 0509 	sublt.w	r5, r3, r9
 800f2d8:	464b      	movge	r3, r9
 800f2da:	bfb8      	it	lt
 800f2dc:	2300      	movlt	r3, #0
 800f2de:	e77e      	b.n	800f1de <_dtoa_r+0x6fe>
 800f2e0:	9f07      	ldr	r7, [sp, #28]
 800f2e2:	9d05      	ldr	r5, [sp, #20]
 800f2e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f2e6:	e783      	b.n	800f1f0 <_dtoa_r+0x710>
 800f2e8:	9a07      	ldr	r2, [sp, #28]
 800f2ea:	e7ab      	b.n	800f244 <_dtoa_r+0x764>
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	e7d4      	b.n	800f29a <_dtoa_r+0x7ba>
 800f2f0:	9b00      	ldr	r3, [sp, #0]
 800f2f2:	e7d2      	b.n	800f29a <_dtoa_r+0x7ba>
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	9307      	str	r3, [sp, #28]
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f2fe:	6918      	ldr	r0, [r3, #16]
 800f300:	f000 fb0c 	bl	800f91c <__hi0bits>
 800f304:	f1c0 0020 	rsb	r0, r0, #32
 800f308:	4440      	add	r0, r8
 800f30a:	f010 001f 	ands.w	r0, r0, #31
 800f30e:	d047      	beq.n	800f3a0 <_dtoa_r+0x8c0>
 800f310:	f1c0 0320 	rsb	r3, r0, #32
 800f314:	2b04      	cmp	r3, #4
 800f316:	dd3b      	ble.n	800f390 <_dtoa_r+0x8b0>
 800f318:	9b05      	ldr	r3, [sp, #20]
 800f31a:	f1c0 001c 	rsb	r0, r0, #28
 800f31e:	4403      	add	r3, r0
 800f320:	9305      	str	r3, [sp, #20]
 800f322:	4405      	add	r5, r0
 800f324:	4480      	add	r8, r0
 800f326:	9b05      	ldr	r3, [sp, #20]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	dd05      	ble.n	800f338 <_dtoa_r+0x858>
 800f32c:	461a      	mov	r2, r3
 800f32e:	9904      	ldr	r1, [sp, #16]
 800f330:	4620      	mov	r0, r4
 800f332:	f000 fc2f 	bl	800fb94 <__lshift>
 800f336:	9004      	str	r0, [sp, #16]
 800f338:	f1b8 0f00 	cmp.w	r8, #0
 800f33c:	dd05      	ble.n	800f34a <_dtoa_r+0x86a>
 800f33e:	4639      	mov	r1, r7
 800f340:	4642      	mov	r2, r8
 800f342:	4620      	mov	r0, r4
 800f344:	f000 fc26 	bl	800fb94 <__lshift>
 800f348:	4607      	mov	r7, r0
 800f34a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f34c:	b353      	cbz	r3, 800f3a4 <_dtoa_r+0x8c4>
 800f34e:	4639      	mov	r1, r7
 800f350:	9804      	ldr	r0, [sp, #16]
 800f352:	f000 fc73 	bl	800fc3c <__mcmp>
 800f356:	2800      	cmp	r0, #0
 800f358:	da24      	bge.n	800f3a4 <_dtoa_r+0x8c4>
 800f35a:	2300      	movs	r3, #0
 800f35c:	220a      	movs	r2, #10
 800f35e:	9904      	ldr	r1, [sp, #16]
 800f360:	4620      	mov	r0, r4
 800f362:	f000 faa0 	bl	800f8a6 <__multadd>
 800f366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f368:	9004      	str	r0, [sp, #16]
 800f36a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f36e:	2b00      	cmp	r3, #0
 800f370:	f000 814d 	beq.w	800f60e <_dtoa_r+0xb2e>
 800f374:	2300      	movs	r3, #0
 800f376:	4631      	mov	r1, r6
 800f378:	220a      	movs	r2, #10
 800f37a:	4620      	mov	r0, r4
 800f37c:	f000 fa93 	bl	800f8a6 <__multadd>
 800f380:	9b02      	ldr	r3, [sp, #8]
 800f382:	2b00      	cmp	r3, #0
 800f384:	4606      	mov	r6, r0
 800f386:	dc4f      	bgt.n	800f428 <_dtoa_r+0x948>
 800f388:	9b06      	ldr	r3, [sp, #24]
 800f38a:	2b02      	cmp	r3, #2
 800f38c:	dd4c      	ble.n	800f428 <_dtoa_r+0x948>
 800f38e:	e011      	b.n	800f3b4 <_dtoa_r+0x8d4>
 800f390:	d0c9      	beq.n	800f326 <_dtoa_r+0x846>
 800f392:	9a05      	ldr	r2, [sp, #20]
 800f394:	331c      	adds	r3, #28
 800f396:	441a      	add	r2, r3
 800f398:	9205      	str	r2, [sp, #20]
 800f39a:	441d      	add	r5, r3
 800f39c:	4498      	add	r8, r3
 800f39e:	e7c2      	b.n	800f326 <_dtoa_r+0x846>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	e7f6      	b.n	800f392 <_dtoa_r+0x8b2>
 800f3a4:	f1b9 0f00 	cmp.w	r9, #0
 800f3a8:	dc38      	bgt.n	800f41c <_dtoa_r+0x93c>
 800f3aa:	9b06      	ldr	r3, [sp, #24]
 800f3ac:	2b02      	cmp	r3, #2
 800f3ae:	dd35      	ble.n	800f41c <_dtoa_r+0x93c>
 800f3b0:	f8cd 9008 	str.w	r9, [sp, #8]
 800f3b4:	9b02      	ldr	r3, [sp, #8]
 800f3b6:	b963      	cbnz	r3, 800f3d2 <_dtoa_r+0x8f2>
 800f3b8:	4639      	mov	r1, r7
 800f3ba:	2205      	movs	r2, #5
 800f3bc:	4620      	mov	r0, r4
 800f3be:	f000 fa72 	bl	800f8a6 <__multadd>
 800f3c2:	4601      	mov	r1, r0
 800f3c4:	4607      	mov	r7, r0
 800f3c6:	9804      	ldr	r0, [sp, #16]
 800f3c8:	f000 fc38 	bl	800fc3c <__mcmp>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	f73f adcc 	bgt.w	800ef6a <_dtoa_r+0x48a>
 800f3d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3d4:	465d      	mov	r5, fp
 800f3d6:	ea6f 0a03 	mvn.w	sl, r3
 800f3da:	f04f 0900 	mov.w	r9, #0
 800f3de:	4639      	mov	r1, r7
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	f000 fa49 	bl	800f878 <_Bfree>
 800f3e6:	2e00      	cmp	r6, #0
 800f3e8:	f43f aeb7 	beq.w	800f15a <_dtoa_r+0x67a>
 800f3ec:	f1b9 0f00 	cmp.w	r9, #0
 800f3f0:	d005      	beq.n	800f3fe <_dtoa_r+0x91e>
 800f3f2:	45b1      	cmp	r9, r6
 800f3f4:	d003      	beq.n	800f3fe <_dtoa_r+0x91e>
 800f3f6:	4649      	mov	r1, r9
 800f3f8:	4620      	mov	r0, r4
 800f3fa:	f000 fa3d 	bl	800f878 <_Bfree>
 800f3fe:	4631      	mov	r1, r6
 800f400:	4620      	mov	r0, r4
 800f402:	f000 fa39 	bl	800f878 <_Bfree>
 800f406:	e6a8      	b.n	800f15a <_dtoa_r+0x67a>
 800f408:	2700      	movs	r7, #0
 800f40a:	463e      	mov	r6, r7
 800f40c:	e7e1      	b.n	800f3d2 <_dtoa_r+0x8f2>
 800f40e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f412:	463e      	mov	r6, r7
 800f414:	e5a9      	b.n	800ef6a <_dtoa_r+0x48a>
 800f416:	bf00      	nop
 800f418:	40240000 	.word	0x40240000
 800f41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f41e:	f8cd 9008 	str.w	r9, [sp, #8]
 800f422:	2b00      	cmp	r3, #0
 800f424:	f000 80fa 	beq.w	800f61c <_dtoa_r+0xb3c>
 800f428:	2d00      	cmp	r5, #0
 800f42a:	dd05      	ble.n	800f438 <_dtoa_r+0x958>
 800f42c:	4631      	mov	r1, r6
 800f42e:	462a      	mov	r2, r5
 800f430:	4620      	mov	r0, r4
 800f432:	f000 fbaf 	bl	800fb94 <__lshift>
 800f436:	4606      	mov	r6, r0
 800f438:	9b07      	ldr	r3, [sp, #28]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d04c      	beq.n	800f4d8 <_dtoa_r+0x9f8>
 800f43e:	6871      	ldr	r1, [r6, #4]
 800f440:	4620      	mov	r0, r4
 800f442:	f000 f9e5 	bl	800f810 <_Balloc>
 800f446:	6932      	ldr	r2, [r6, #16]
 800f448:	3202      	adds	r2, #2
 800f44a:	4605      	mov	r5, r0
 800f44c:	0092      	lsls	r2, r2, #2
 800f44e:	f106 010c 	add.w	r1, r6, #12
 800f452:	300c      	adds	r0, #12
 800f454:	f7fe fe2e 	bl	800e0b4 <memcpy>
 800f458:	2201      	movs	r2, #1
 800f45a:	4629      	mov	r1, r5
 800f45c:	4620      	mov	r0, r4
 800f45e:	f000 fb99 	bl	800fb94 <__lshift>
 800f462:	9b00      	ldr	r3, [sp, #0]
 800f464:	f8cd b014 	str.w	fp, [sp, #20]
 800f468:	f003 0301 	and.w	r3, r3, #1
 800f46c:	46b1      	mov	r9, r6
 800f46e:	9307      	str	r3, [sp, #28]
 800f470:	4606      	mov	r6, r0
 800f472:	4639      	mov	r1, r7
 800f474:	9804      	ldr	r0, [sp, #16]
 800f476:	f7ff faa5 	bl	800e9c4 <quorem>
 800f47a:	4649      	mov	r1, r9
 800f47c:	4605      	mov	r5, r0
 800f47e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f482:	9804      	ldr	r0, [sp, #16]
 800f484:	f000 fbda 	bl	800fc3c <__mcmp>
 800f488:	4632      	mov	r2, r6
 800f48a:	9000      	str	r0, [sp, #0]
 800f48c:	4639      	mov	r1, r7
 800f48e:	4620      	mov	r0, r4
 800f490:	f000 fbee 	bl	800fc70 <__mdiff>
 800f494:	68c3      	ldr	r3, [r0, #12]
 800f496:	4602      	mov	r2, r0
 800f498:	bb03      	cbnz	r3, 800f4dc <_dtoa_r+0x9fc>
 800f49a:	4601      	mov	r1, r0
 800f49c:	9008      	str	r0, [sp, #32]
 800f49e:	9804      	ldr	r0, [sp, #16]
 800f4a0:	f000 fbcc 	bl	800fc3c <__mcmp>
 800f4a4:	9a08      	ldr	r2, [sp, #32]
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	4611      	mov	r1, r2
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	9308      	str	r3, [sp, #32]
 800f4ae:	f000 f9e3 	bl	800f878 <_Bfree>
 800f4b2:	9b08      	ldr	r3, [sp, #32]
 800f4b4:	b9a3      	cbnz	r3, 800f4e0 <_dtoa_r+0xa00>
 800f4b6:	9a06      	ldr	r2, [sp, #24]
 800f4b8:	b992      	cbnz	r2, 800f4e0 <_dtoa_r+0xa00>
 800f4ba:	9a07      	ldr	r2, [sp, #28]
 800f4bc:	b982      	cbnz	r2, 800f4e0 <_dtoa_r+0xa00>
 800f4be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f4c2:	d029      	beq.n	800f518 <_dtoa_r+0xa38>
 800f4c4:	9b00      	ldr	r3, [sp, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	dd01      	ble.n	800f4ce <_dtoa_r+0x9ee>
 800f4ca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f4ce:	9b05      	ldr	r3, [sp, #20]
 800f4d0:	1c5d      	adds	r5, r3, #1
 800f4d2:	f883 8000 	strb.w	r8, [r3]
 800f4d6:	e782      	b.n	800f3de <_dtoa_r+0x8fe>
 800f4d8:	4630      	mov	r0, r6
 800f4da:	e7c2      	b.n	800f462 <_dtoa_r+0x982>
 800f4dc:	2301      	movs	r3, #1
 800f4de:	e7e3      	b.n	800f4a8 <_dtoa_r+0x9c8>
 800f4e0:	9a00      	ldr	r2, [sp, #0]
 800f4e2:	2a00      	cmp	r2, #0
 800f4e4:	db04      	blt.n	800f4f0 <_dtoa_r+0xa10>
 800f4e6:	d125      	bne.n	800f534 <_dtoa_r+0xa54>
 800f4e8:	9a06      	ldr	r2, [sp, #24]
 800f4ea:	bb1a      	cbnz	r2, 800f534 <_dtoa_r+0xa54>
 800f4ec:	9a07      	ldr	r2, [sp, #28]
 800f4ee:	bb0a      	cbnz	r2, 800f534 <_dtoa_r+0xa54>
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	ddec      	ble.n	800f4ce <_dtoa_r+0x9ee>
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	9904      	ldr	r1, [sp, #16]
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	f000 fb4b 	bl	800fb94 <__lshift>
 800f4fe:	4639      	mov	r1, r7
 800f500:	9004      	str	r0, [sp, #16]
 800f502:	f000 fb9b 	bl	800fc3c <__mcmp>
 800f506:	2800      	cmp	r0, #0
 800f508:	dc03      	bgt.n	800f512 <_dtoa_r+0xa32>
 800f50a:	d1e0      	bne.n	800f4ce <_dtoa_r+0x9ee>
 800f50c:	f018 0f01 	tst.w	r8, #1
 800f510:	d0dd      	beq.n	800f4ce <_dtoa_r+0x9ee>
 800f512:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f516:	d1d8      	bne.n	800f4ca <_dtoa_r+0x9ea>
 800f518:	9b05      	ldr	r3, [sp, #20]
 800f51a:	9a05      	ldr	r2, [sp, #20]
 800f51c:	1c5d      	adds	r5, r3, #1
 800f51e:	2339      	movs	r3, #57	; 0x39
 800f520:	7013      	strb	r3, [r2, #0]
 800f522:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f526:	2b39      	cmp	r3, #57	; 0x39
 800f528:	f105 32ff 	add.w	r2, r5, #4294967295
 800f52c:	d04f      	beq.n	800f5ce <_dtoa_r+0xaee>
 800f52e:	3301      	adds	r3, #1
 800f530:	7013      	strb	r3, [r2, #0]
 800f532:	e754      	b.n	800f3de <_dtoa_r+0x8fe>
 800f534:	9a05      	ldr	r2, [sp, #20]
 800f536:	2b00      	cmp	r3, #0
 800f538:	f102 0501 	add.w	r5, r2, #1
 800f53c:	dd06      	ble.n	800f54c <_dtoa_r+0xa6c>
 800f53e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f542:	d0e9      	beq.n	800f518 <_dtoa_r+0xa38>
 800f544:	f108 0801 	add.w	r8, r8, #1
 800f548:	9b05      	ldr	r3, [sp, #20]
 800f54a:	e7c2      	b.n	800f4d2 <_dtoa_r+0x9f2>
 800f54c:	9a02      	ldr	r2, [sp, #8]
 800f54e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f552:	eba5 030b 	sub.w	r3, r5, fp
 800f556:	4293      	cmp	r3, r2
 800f558:	d021      	beq.n	800f59e <_dtoa_r+0xabe>
 800f55a:	2300      	movs	r3, #0
 800f55c:	220a      	movs	r2, #10
 800f55e:	9904      	ldr	r1, [sp, #16]
 800f560:	4620      	mov	r0, r4
 800f562:	f000 f9a0 	bl	800f8a6 <__multadd>
 800f566:	45b1      	cmp	r9, r6
 800f568:	9004      	str	r0, [sp, #16]
 800f56a:	f04f 0300 	mov.w	r3, #0
 800f56e:	f04f 020a 	mov.w	r2, #10
 800f572:	4649      	mov	r1, r9
 800f574:	4620      	mov	r0, r4
 800f576:	d105      	bne.n	800f584 <_dtoa_r+0xaa4>
 800f578:	f000 f995 	bl	800f8a6 <__multadd>
 800f57c:	4681      	mov	r9, r0
 800f57e:	4606      	mov	r6, r0
 800f580:	9505      	str	r5, [sp, #20]
 800f582:	e776      	b.n	800f472 <_dtoa_r+0x992>
 800f584:	f000 f98f 	bl	800f8a6 <__multadd>
 800f588:	4631      	mov	r1, r6
 800f58a:	4681      	mov	r9, r0
 800f58c:	2300      	movs	r3, #0
 800f58e:	220a      	movs	r2, #10
 800f590:	4620      	mov	r0, r4
 800f592:	f000 f988 	bl	800f8a6 <__multadd>
 800f596:	4606      	mov	r6, r0
 800f598:	e7f2      	b.n	800f580 <_dtoa_r+0xaa0>
 800f59a:	f04f 0900 	mov.w	r9, #0
 800f59e:	2201      	movs	r2, #1
 800f5a0:	9904      	ldr	r1, [sp, #16]
 800f5a2:	4620      	mov	r0, r4
 800f5a4:	f000 faf6 	bl	800fb94 <__lshift>
 800f5a8:	4639      	mov	r1, r7
 800f5aa:	9004      	str	r0, [sp, #16]
 800f5ac:	f000 fb46 	bl	800fc3c <__mcmp>
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	dcb6      	bgt.n	800f522 <_dtoa_r+0xa42>
 800f5b4:	d102      	bne.n	800f5bc <_dtoa_r+0xadc>
 800f5b6:	f018 0f01 	tst.w	r8, #1
 800f5ba:	d1b2      	bne.n	800f522 <_dtoa_r+0xa42>
 800f5bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f5c0:	2b30      	cmp	r3, #48	; 0x30
 800f5c2:	f105 32ff 	add.w	r2, r5, #4294967295
 800f5c6:	f47f af0a 	bne.w	800f3de <_dtoa_r+0x8fe>
 800f5ca:	4615      	mov	r5, r2
 800f5cc:	e7f6      	b.n	800f5bc <_dtoa_r+0xadc>
 800f5ce:	4593      	cmp	fp, r2
 800f5d0:	d105      	bne.n	800f5de <_dtoa_r+0xafe>
 800f5d2:	2331      	movs	r3, #49	; 0x31
 800f5d4:	f10a 0a01 	add.w	sl, sl, #1
 800f5d8:	f88b 3000 	strb.w	r3, [fp]
 800f5dc:	e6ff      	b.n	800f3de <_dtoa_r+0x8fe>
 800f5de:	4615      	mov	r5, r2
 800f5e0:	e79f      	b.n	800f522 <_dtoa_r+0xa42>
 800f5e2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f648 <_dtoa_r+0xb68>
 800f5e6:	e007      	b.n	800f5f8 <_dtoa_r+0xb18>
 800f5e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5ea:	f8df b060 	ldr.w	fp, [pc, #96]	; 800f64c <_dtoa_r+0xb6c>
 800f5ee:	b11b      	cbz	r3, 800f5f8 <_dtoa_r+0xb18>
 800f5f0:	f10b 0308 	add.w	r3, fp, #8
 800f5f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f5f6:	6013      	str	r3, [r2, #0]
 800f5f8:	4658      	mov	r0, fp
 800f5fa:	b017      	add	sp, #92	; 0x5c
 800f5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f600:	9b06      	ldr	r3, [sp, #24]
 800f602:	2b01      	cmp	r3, #1
 800f604:	f77f ae35 	ble.w	800f272 <_dtoa_r+0x792>
 800f608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f60a:	9307      	str	r3, [sp, #28]
 800f60c:	e649      	b.n	800f2a2 <_dtoa_r+0x7c2>
 800f60e:	9b02      	ldr	r3, [sp, #8]
 800f610:	2b00      	cmp	r3, #0
 800f612:	dc03      	bgt.n	800f61c <_dtoa_r+0xb3c>
 800f614:	9b06      	ldr	r3, [sp, #24]
 800f616:	2b02      	cmp	r3, #2
 800f618:	f73f aecc 	bgt.w	800f3b4 <_dtoa_r+0x8d4>
 800f61c:	465d      	mov	r5, fp
 800f61e:	4639      	mov	r1, r7
 800f620:	9804      	ldr	r0, [sp, #16]
 800f622:	f7ff f9cf 	bl	800e9c4 <quorem>
 800f626:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f62a:	f805 8b01 	strb.w	r8, [r5], #1
 800f62e:	9a02      	ldr	r2, [sp, #8]
 800f630:	eba5 030b 	sub.w	r3, r5, fp
 800f634:	429a      	cmp	r2, r3
 800f636:	ddb0      	ble.n	800f59a <_dtoa_r+0xaba>
 800f638:	2300      	movs	r3, #0
 800f63a:	220a      	movs	r2, #10
 800f63c:	9904      	ldr	r1, [sp, #16]
 800f63e:	4620      	mov	r0, r4
 800f640:	f000 f931 	bl	800f8a6 <__multadd>
 800f644:	9004      	str	r0, [sp, #16]
 800f646:	e7ea      	b.n	800f61e <_dtoa_r+0xb3e>
 800f648:	08011760 	.word	0x08011760
 800f64c:	08011784 	.word	0x08011784

0800f650 <std>:
 800f650:	2300      	movs	r3, #0
 800f652:	b510      	push	{r4, lr}
 800f654:	4604      	mov	r4, r0
 800f656:	e9c0 3300 	strd	r3, r3, [r0]
 800f65a:	6083      	str	r3, [r0, #8]
 800f65c:	8181      	strh	r1, [r0, #12]
 800f65e:	6643      	str	r3, [r0, #100]	; 0x64
 800f660:	81c2      	strh	r2, [r0, #14]
 800f662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f666:	6183      	str	r3, [r0, #24]
 800f668:	4619      	mov	r1, r3
 800f66a:	2208      	movs	r2, #8
 800f66c:	305c      	adds	r0, #92	; 0x5c
 800f66e:	f7fe fd2c 	bl	800e0ca <memset>
 800f672:	4b05      	ldr	r3, [pc, #20]	; (800f688 <std+0x38>)
 800f674:	6263      	str	r3, [r4, #36]	; 0x24
 800f676:	4b05      	ldr	r3, [pc, #20]	; (800f68c <std+0x3c>)
 800f678:	62a3      	str	r3, [r4, #40]	; 0x28
 800f67a:	4b05      	ldr	r3, [pc, #20]	; (800f690 <std+0x40>)
 800f67c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f67e:	4b05      	ldr	r3, [pc, #20]	; (800f694 <std+0x44>)
 800f680:	6224      	str	r4, [r4, #32]
 800f682:	6323      	str	r3, [r4, #48]	; 0x30
 800f684:	bd10      	pop	{r4, pc}
 800f686:	bf00      	nop
 800f688:	080101d5 	.word	0x080101d5
 800f68c:	080101f7 	.word	0x080101f7
 800f690:	0801022f 	.word	0x0801022f
 800f694:	08010253 	.word	0x08010253

0800f698 <_cleanup_r>:
 800f698:	4901      	ldr	r1, [pc, #4]	; (800f6a0 <_cleanup_r+0x8>)
 800f69a:	f000 b885 	b.w	800f7a8 <_fwalk_reent>
 800f69e:	bf00      	nop
 800f6a0:	0801052d 	.word	0x0801052d

0800f6a4 <__sfmoreglue>:
 800f6a4:	b570      	push	{r4, r5, r6, lr}
 800f6a6:	1e4a      	subs	r2, r1, #1
 800f6a8:	2568      	movs	r5, #104	; 0x68
 800f6aa:	4355      	muls	r5, r2
 800f6ac:	460e      	mov	r6, r1
 800f6ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f6b2:	f000 fbe5 	bl	800fe80 <_malloc_r>
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	b140      	cbz	r0, 800f6cc <__sfmoreglue+0x28>
 800f6ba:	2100      	movs	r1, #0
 800f6bc:	e9c0 1600 	strd	r1, r6, [r0]
 800f6c0:	300c      	adds	r0, #12
 800f6c2:	60a0      	str	r0, [r4, #8]
 800f6c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f6c8:	f7fe fcff 	bl	800e0ca <memset>
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	bd70      	pop	{r4, r5, r6, pc}

0800f6d0 <__sinit>:
 800f6d0:	6983      	ldr	r3, [r0, #24]
 800f6d2:	b510      	push	{r4, lr}
 800f6d4:	4604      	mov	r4, r0
 800f6d6:	bb33      	cbnz	r3, 800f726 <__sinit+0x56>
 800f6d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f6dc:	6503      	str	r3, [r0, #80]	; 0x50
 800f6de:	4b12      	ldr	r3, [pc, #72]	; (800f728 <__sinit+0x58>)
 800f6e0:	4a12      	ldr	r2, [pc, #72]	; (800f72c <__sinit+0x5c>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	6282      	str	r2, [r0, #40]	; 0x28
 800f6e6:	4298      	cmp	r0, r3
 800f6e8:	bf04      	itt	eq
 800f6ea:	2301      	moveq	r3, #1
 800f6ec:	6183      	streq	r3, [r0, #24]
 800f6ee:	f000 f81f 	bl	800f730 <__sfp>
 800f6f2:	6060      	str	r0, [r4, #4]
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	f000 f81b 	bl	800f730 <__sfp>
 800f6fa:	60a0      	str	r0, [r4, #8]
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	f000 f817 	bl	800f730 <__sfp>
 800f702:	2200      	movs	r2, #0
 800f704:	60e0      	str	r0, [r4, #12]
 800f706:	2104      	movs	r1, #4
 800f708:	6860      	ldr	r0, [r4, #4]
 800f70a:	f7ff ffa1 	bl	800f650 <std>
 800f70e:	2201      	movs	r2, #1
 800f710:	2109      	movs	r1, #9
 800f712:	68a0      	ldr	r0, [r4, #8]
 800f714:	f7ff ff9c 	bl	800f650 <std>
 800f718:	2202      	movs	r2, #2
 800f71a:	2112      	movs	r1, #18
 800f71c:	68e0      	ldr	r0, [r4, #12]
 800f71e:	f7ff ff97 	bl	800f650 <std>
 800f722:	2301      	movs	r3, #1
 800f724:	61a3      	str	r3, [r4, #24]
 800f726:	bd10      	pop	{r4, pc}
 800f728:	0801174c 	.word	0x0801174c
 800f72c:	0800f699 	.word	0x0800f699

0800f730 <__sfp>:
 800f730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f732:	4b1b      	ldr	r3, [pc, #108]	; (800f7a0 <__sfp+0x70>)
 800f734:	681e      	ldr	r6, [r3, #0]
 800f736:	69b3      	ldr	r3, [r6, #24]
 800f738:	4607      	mov	r7, r0
 800f73a:	b913      	cbnz	r3, 800f742 <__sfp+0x12>
 800f73c:	4630      	mov	r0, r6
 800f73e:	f7ff ffc7 	bl	800f6d0 <__sinit>
 800f742:	3648      	adds	r6, #72	; 0x48
 800f744:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f748:	3b01      	subs	r3, #1
 800f74a:	d503      	bpl.n	800f754 <__sfp+0x24>
 800f74c:	6833      	ldr	r3, [r6, #0]
 800f74e:	b133      	cbz	r3, 800f75e <__sfp+0x2e>
 800f750:	6836      	ldr	r6, [r6, #0]
 800f752:	e7f7      	b.n	800f744 <__sfp+0x14>
 800f754:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f758:	b16d      	cbz	r5, 800f776 <__sfp+0x46>
 800f75a:	3468      	adds	r4, #104	; 0x68
 800f75c:	e7f4      	b.n	800f748 <__sfp+0x18>
 800f75e:	2104      	movs	r1, #4
 800f760:	4638      	mov	r0, r7
 800f762:	f7ff ff9f 	bl	800f6a4 <__sfmoreglue>
 800f766:	6030      	str	r0, [r6, #0]
 800f768:	2800      	cmp	r0, #0
 800f76a:	d1f1      	bne.n	800f750 <__sfp+0x20>
 800f76c:	230c      	movs	r3, #12
 800f76e:	603b      	str	r3, [r7, #0]
 800f770:	4604      	mov	r4, r0
 800f772:	4620      	mov	r0, r4
 800f774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f776:	4b0b      	ldr	r3, [pc, #44]	; (800f7a4 <__sfp+0x74>)
 800f778:	6665      	str	r5, [r4, #100]	; 0x64
 800f77a:	e9c4 5500 	strd	r5, r5, [r4]
 800f77e:	60a5      	str	r5, [r4, #8]
 800f780:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f784:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f788:	2208      	movs	r2, #8
 800f78a:	4629      	mov	r1, r5
 800f78c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f790:	f7fe fc9b 	bl	800e0ca <memset>
 800f794:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f798:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f79c:	e7e9      	b.n	800f772 <__sfp+0x42>
 800f79e:	bf00      	nop
 800f7a0:	0801174c 	.word	0x0801174c
 800f7a4:	ffff0001 	.word	0xffff0001

0800f7a8 <_fwalk_reent>:
 800f7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7ac:	4680      	mov	r8, r0
 800f7ae:	4689      	mov	r9, r1
 800f7b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f7b4:	2600      	movs	r6, #0
 800f7b6:	b914      	cbnz	r4, 800f7be <_fwalk_reent+0x16>
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f7c2:	3f01      	subs	r7, #1
 800f7c4:	d501      	bpl.n	800f7ca <_fwalk_reent+0x22>
 800f7c6:	6824      	ldr	r4, [r4, #0]
 800f7c8:	e7f5      	b.n	800f7b6 <_fwalk_reent+0xe>
 800f7ca:	89ab      	ldrh	r3, [r5, #12]
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	d907      	bls.n	800f7e0 <_fwalk_reent+0x38>
 800f7d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	d003      	beq.n	800f7e0 <_fwalk_reent+0x38>
 800f7d8:	4629      	mov	r1, r5
 800f7da:	4640      	mov	r0, r8
 800f7dc:	47c8      	blx	r9
 800f7de:	4306      	orrs	r6, r0
 800f7e0:	3568      	adds	r5, #104	; 0x68
 800f7e2:	e7ee      	b.n	800f7c2 <_fwalk_reent+0x1a>

0800f7e4 <_localeconv_r>:
 800f7e4:	4b04      	ldr	r3, [pc, #16]	; (800f7f8 <_localeconv_r+0x14>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	6a18      	ldr	r0, [r3, #32]
 800f7ea:	4b04      	ldr	r3, [pc, #16]	; (800f7fc <_localeconv_r+0x18>)
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	bf08      	it	eq
 800f7f0:	4618      	moveq	r0, r3
 800f7f2:	30f0      	adds	r0, #240	; 0xf0
 800f7f4:	4770      	bx	lr
 800f7f6:	bf00      	nop
 800f7f8:	20001300 	.word	0x20001300
 800f7fc:	20001364 	.word	0x20001364

0800f800 <malloc>:
 800f800:	4b02      	ldr	r3, [pc, #8]	; (800f80c <malloc+0xc>)
 800f802:	4601      	mov	r1, r0
 800f804:	6818      	ldr	r0, [r3, #0]
 800f806:	f000 bb3b 	b.w	800fe80 <_malloc_r>
 800f80a:	bf00      	nop
 800f80c:	20001300 	.word	0x20001300

0800f810 <_Balloc>:
 800f810:	b570      	push	{r4, r5, r6, lr}
 800f812:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f814:	4604      	mov	r4, r0
 800f816:	460e      	mov	r6, r1
 800f818:	b93d      	cbnz	r5, 800f82a <_Balloc+0x1a>
 800f81a:	2010      	movs	r0, #16
 800f81c:	f7ff fff0 	bl	800f800 <malloc>
 800f820:	6260      	str	r0, [r4, #36]	; 0x24
 800f822:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f826:	6005      	str	r5, [r0, #0]
 800f828:	60c5      	str	r5, [r0, #12]
 800f82a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f82c:	68eb      	ldr	r3, [r5, #12]
 800f82e:	b183      	cbz	r3, 800f852 <_Balloc+0x42>
 800f830:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f832:	68db      	ldr	r3, [r3, #12]
 800f834:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f838:	b9b8      	cbnz	r0, 800f86a <_Balloc+0x5a>
 800f83a:	2101      	movs	r1, #1
 800f83c:	fa01 f506 	lsl.w	r5, r1, r6
 800f840:	1d6a      	adds	r2, r5, #5
 800f842:	0092      	lsls	r2, r2, #2
 800f844:	4620      	mov	r0, r4
 800f846:	f000 fabf 	bl	800fdc8 <_calloc_r>
 800f84a:	b160      	cbz	r0, 800f866 <_Balloc+0x56>
 800f84c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f850:	e00e      	b.n	800f870 <_Balloc+0x60>
 800f852:	2221      	movs	r2, #33	; 0x21
 800f854:	2104      	movs	r1, #4
 800f856:	4620      	mov	r0, r4
 800f858:	f000 fab6 	bl	800fdc8 <_calloc_r>
 800f85c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f85e:	60e8      	str	r0, [r5, #12]
 800f860:	68db      	ldr	r3, [r3, #12]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d1e4      	bne.n	800f830 <_Balloc+0x20>
 800f866:	2000      	movs	r0, #0
 800f868:	bd70      	pop	{r4, r5, r6, pc}
 800f86a:	6802      	ldr	r2, [r0, #0]
 800f86c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f870:	2300      	movs	r3, #0
 800f872:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f876:	e7f7      	b.n	800f868 <_Balloc+0x58>

0800f878 <_Bfree>:
 800f878:	b570      	push	{r4, r5, r6, lr}
 800f87a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f87c:	4606      	mov	r6, r0
 800f87e:	460d      	mov	r5, r1
 800f880:	b93c      	cbnz	r4, 800f892 <_Bfree+0x1a>
 800f882:	2010      	movs	r0, #16
 800f884:	f7ff ffbc 	bl	800f800 <malloc>
 800f888:	6270      	str	r0, [r6, #36]	; 0x24
 800f88a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f88e:	6004      	str	r4, [r0, #0]
 800f890:	60c4      	str	r4, [r0, #12]
 800f892:	b13d      	cbz	r5, 800f8a4 <_Bfree+0x2c>
 800f894:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f896:	686a      	ldr	r2, [r5, #4]
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f89e:	6029      	str	r1, [r5, #0]
 800f8a0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f8a4:	bd70      	pop	{r4, r5, r6, pc}

0800f8a6 <__multadd>:
 800f8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8aa:	690d      	ldr	r5, [r1, #16]
 800f8ac:	461f      	mov	r7, r3
 800f8ae:	4606      	mov	r6, r0
 800f8b0:	460c      	mov	r4, r1
 800f8b2:	f101 0c14 	add.w	ip, r1, #20
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	f8dc 0000 	ldr.w	r0, [ip]
 800f8bc:	b281      	uxth	r1, r0
 800f8be:	fb02 7101 	mla	r1, r2, r1, r7
 800f8c2:	0c0f      	lsrs	r7, r1, #16
 800f8c4:	0c00      	lsrs	r0, r0, #16
 800f8c6:	fb02 7000 	mla	r0, r2, r0, r7
 800f8ca:	b289      	uxth	r1, r1
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f8d2:	429d      	cmp	r5, r3
 800f8d4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f8d8:	f84c 1b04 	str.w	r1, [ip], #4
 800f8dc:	dcec      	bgt.n	800f8b8 <__multadd+0x12>
 800f8de:	b1d7      	cbz	r7, 800f916 <__multadd+0x70>
 800f8e0:	68a3      	ldr	r3, [r4, #8]
 800f8e2:	42ab      	cmp	r3, r5
 800f8e4:	dc12      	bgt.n	800f90c <__multadd+0x66>
 800f8e6:	6861      	ldr	r1, [r4, #4]
 800f8e8:	4630      	mov	r0, r6
 800f8ea:	3101      	adds	r1, #1
 800f8ec:	f7ff ff90 	bl	800f810 <_Balloc>
 800f8f0:	6922      	ldr	r2, [r4, #16]
 800f8f2:	3202      	adds	r2, #2
 800f8f4:	f104 010c 	add.w	r1, r4, #12
 800f8f8:	4680      	mov	r8, r0
 800f8fa:	0092      	lsls	r2, r2, #2
 800f8fc:	300c      	adds	r0, #12
 800f8fe:	f7fe fbd9 	bl	800e0b4 <memcpy>
 800f902:	4621      	mov	r1, r4
 800f904:	4630      	mov	r0, r6
 800f906:	f7ff ffb7 	bl	800f878 <_Bfree>
 800f90a:	4644      	mov	r4, r8
 800f90c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f910:	3501      	adds	r5, #1
 800f912:	615f      	str	r7, [r3, #20]
 800f914:	6125      	str	r5, [r4, #16]
 800f916:	4620      	mov	r0, r4
 800f918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f91c <__hi0bits>:
 800f91c:	0c02      	lsrs	r2, r0, #16
 800f91e:	0412      	lsls	r2, r2, #16
 800f920:	4603      	mov	r3, r0
 800f922:	b9b2      	cbnz	r2, 800f952 <__hi0bits+0x36>
 800f924:	0403      	lsls	r3, r0, #16
 800f926:	2010      	movs	r0, #16
 800f928:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f92c:	bf04      	itt	eq
 800f92e:	021b      	lsleq	r3, r3, #8
 800f930:	3008      	addeq	r0, #8
 800f932:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f936:	bf04      	itt	eq
 800f938:	011b      	lsleq	r3, r3, #4
 800f93a:	3004      	addeq	r0, #4
 800f93c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f940:	bf04      	itt	eq
 800f942:	009b      	lsleq	r3, r3, #2
 800f944:	3002      	addeq	r0, #2
 800f946:	2b00      	cmp	r3, #0
 800f948:	db06      	blt.n	800f958 <__hi0bits+0x3c>
 800f94a:	005b      	lsls	r3, r3, #1
 800f94c:	d503      	bpl.n	800f956 <__hi0bits+0x3a>
 800f94e:	3001      	adds	r0, #1
 800f950:	4770      	bx	lr
 800f952:	2000      	movs	r0, #0
 800f954:	e7e8      	b.n	800f928 <__hi0bits+0xc>
 800f956:	2020      	movs	r0, #32
 800f958:	4770      	bx	lr

0800f95a <__lo0bits>:
 800f95a:	6803      	ldr	r3, [r0, #0]
 800f95c:	f013 0207 	ands.w	r2, r3, #7
 800f960:	4601      	mov	r1, r0
 800f962:	d00b      	beq.n	800f97c <__lo0bits+0x22>
 800f964:	07da      	lsls	r2, r3, #31
 800f966:	d423      	bmi.n	800f9b0 <__lo0bits+0x56>
 800f968:	0798      	lsls	r0, r3, #30
 800f96a:	bf49      	itett	mi
 800f96c:	085b      	lsrmi	r3, r3, #1
 800f96e:	089b      	lsrpl	r3, r3, #2
 800f970:	2001      	movmi	r0, #1
 800f972:	600b      	strmi	r3, [r1, #0]
 800f974:	bf5c      	itt	pl
 800f976:	600b      	strpl	r3, [r1, #0]
 800f978:	2002      	movpl	r0, #2
 800f97a:	4770      	bx	lr
 800f97c:	b298      	uxth	r0, r3
 800f97e:	b9a8      	cbnz	r0, 800f9ac <__lo0bits+0x52>
 800f980:	0c1b      	lsrs	r3, r3, #16
 800f982:	2010      	movs	r0, #16
 800f984:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f988:	bf04      	itt	eq
 800f98a:	0a1b      	lsreq	r3, r3, #8
 800f98c:	3008      	addeq	r0, #8
 800f98e:	071a      	lsls	r2, r3, #28
 800f990:	bf04      	itt	eq
 800f992:	091b      	lsreq	r3, r3, #4
 800f994:	3004      	addeq	r0, #4
 800f996:	079a      	lsls	r2, r3, #30
 800f998:	bf04      	itt	eq
 800f99a:	089b      	lsreq	r3, r3, #2
 800f99c:	3002      	addeq	r0, #2
 800f99e:	07da      	lsls	r2, r3, #31
 800f9a0:	d402      	bmi.n	800f9a8 <__lo0bits+0x4e>
 800f9a2:	085b      	lsrs	r3, r3, #1
 800f9a4:	d006      	beq.n	800f9b4 <__lo0bits+0x5a>
 800f9a6:	3001      	adds	r0, #1
 800f9a8:	600b      	str	r3, [r1, #0]
 800f9aa:	4770      	bx	lr
 800f9ac:	4610      	mov	r0, r2
 800f9ae:	e7e9      	b.n	800f984 <__lo0bits+0x2a>
 800f9b0:	2000      	movs	r0, #0
 800f9b2:	4770      	bx	lr
 800f9b4:	2020      	movs	r0, #32
 800f9b6:	4770      	bx	lr

0800f9b8 <__i2b>:
 800f9b8:	b510      	push	{r4, lr}
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	2101      	movs	r1, #1
 800f9be:	f7ff ff27 	bl	800f810 <_Balloc>
 800f9c2:	2201      	movs	r2, #1
 800f9c4:	6144      	str	r4, [r0, #20]
 800f9c6:	6102      	str	r2, [r0, #16]
 800f9c8:	bd10      	pop	{r4, pc}

0800f9ca <__multiply>:
 800f9ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ce:	4614      	mov	r4, r2
 800f9d0:	690a      	ldr	r2, [r1, #16]
 800f9d2:	6923      	ldr	r3, [r4, #16]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	bfb8      	it	lt
 800f9d8:	460b      	movlt	r3, r1
 800f9da:	4688      	mov	r8, r1
 800f9dc:	bfbc      	itt	lt
 800f9de:	46a0      	movlt	r8, r4
 800f9e0:	461c      	movlt	r4, r3
 800f9e2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f9e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f9ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f9ee:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f9f2:	eb07 0609 	add.w	r6, r7, r9
 800f9f6:	42b3      	cmp	r3, r6
 800f9f8:	bfb8      	it	lt
 800f9fa:	3101      	addlt	r1, #1
 800f9fc:	f7ff ff08 	bl	800f810 <_Balloc>
 800fa00:	f100 0514 	add.w	r5, r0, #20
 800fa04:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800fa08:	462b      	mov	r3, r5
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	4573      	cmp	r3, lr
 800fa0e:	d316      	bcc.n	800fa3e <__multiply+0x74>
 800fa10:	f104 0214 	add.w	r2, r4, #20
 800fa14:	f108 0114 	add.w	r1, r8, #20
 800fa18:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800fa1c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800fa20:	9300      	str	r3, [sp, #0]
 800fa22:	9b00      	ldr	r3, [sp, #0]
 800fa24:	9201      	str	r2, [sp, #4]
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d80c      	bhi.n	800fa44 <__multiply+0x7a>
 800fa2a:	2e00      	cmp	r6, #0
 800fa2c:	dd03      	ble.n	800fa36 <__multiply+0x6c>
 800fa2e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d05d      	beq.n	800faf2 <__multiply+0x128>
 800fa36:	6106      	str	r6, [r0, #16]
 800fa38:	b003      	add	sp, #12
 800fa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa3e:	f843 2b04 	str.w	r2, [r3], #4
 800fa42:	e7e3      	b.n	800fa0c <__multiply+0x42>
 800fa44:	f8b2 b000 	ldrh.w	fp, [r2]
 800fa48:	f1bb 0f00 	cmp.w	fp, #0
 800fa4c:	d023      	beq.n	800fa96 <__multiply+0xcc>
 800fa4e:	4689      	mov	r9, r1
 800fa50:	46ac      	mov	ip, r5
 800fa52:	f04f 0800 	mov.w	r8, #0
 800fa56:	f859 4b04 	ldr.w	r4, [r9], #4
 800fa5a:	f8dc a000 	ldr.w	sl, [ip]
 800fa5e:	b2a3      	uxth	r3, r4
 800fa60:	fa1f fa8a 	uxth.w	sl, sl
 800fa64:	fb0b a303 	mla	r3, fp, r3, sl
 800fa68:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fa6c:	f8dc 4000 	ldr.w	r4, [ip]
 800fa70:	4443      	add	r3, r8
 800fa72:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fa76:	fb0b 840a 	mla	r4, fp, sl, r8
 800fa7a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800fa7e:	46e2      	mov	sl, ip
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fa86:	454f      	cmp	r7, r9
 800fa88:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fa8c:	f84a 3b04 	str.w	r3, [sl], #4
 800fa90:	d82b      	bhi.n	800faea <__multiply+0x120>
 800fa92:	f8cc 8004 	str.w	r8, [ip, #4]
 800fa96:	9b01      	ldr	r3, [sp, #4]
 800fa98:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800fa9c:	3204      	adds	r2, #4
 800fa9e:	f1ba 0f00 	cmp.w	sl, #0
 800faa2:	d020      	beq.n	800fae6 <__multiply+0x11c>
 800faa4:	682b      	ldr	r3, [r5, #0]
 800faa6:	4689      	mov	r9, r1
 800faa8:	46a8      	mov	r8, r5
 800faaa:	f04f 0b00 	mov.w	fp, #0
 800faae:	f8b9 c000 	ldrh.w	ip, [r9]
 800fab2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800fab6:	fb0a 440c 	mla	r4, sl, ip, r4
 800faba:	445c      	add	r4, fp
 800fabc:	46c4      	mov	ip, r8
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fac4:	f84c 3b04 	str.w	r3, [ip], #4
 800fac8:	f859 3b04 	ldr.w	r3, [r9], #4
 800facc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800fad0:	0c1b      	lsrs	r3, r3, #16
 800fad2:	fb0a b303 	mla	r3, sl, r3, fp
 800fad6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800fada:	454f      	cmp	r7, r9
 800fadc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800fae0:	d805      	bhi.n	800faee <__multiply+0x124>
 800fae2:	f8c8 3004 	str.w	r3, [r8, #4]
 800fae6:	3504      	adds	r5, #4
 800fae8:	e79b      	b.n	800fa22 <__multiply+0x58>
 800faea:	46d4      	mov	ip, sl
 800faec:	e7b3      	b.n	800fa56 <__multiply+0x8c>
 800faee:	46e0      	mov	r8, ip
 800faf0:	e7dd      	b.n	800faae <__multiply+0xe4>
 800faf2:	3e01      	subs	r6, #1
 800faf4:	e799      	b.n	800fa2a <__multiply+0x60>
	...

0800faf8 <__pow5mult>:
 800faf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fafc:	4615      	mov	r5, r2
 800fafe:	f012 0203 	ands.w	r2, r2, #3
 800fb02:	4606      	mov	r6, r0
 800fb04:	460f      	mov	r7, r1
 800fb06:	d007      	beq.n	800fb18 <__pow5mult+0x20>
 800fb08:	3a01      	subs	r2, #1
 800fb0a:	4c21      	ldr	r4, [pc, #132]	; (800fb90 <__pow5mult+0x98>)
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb12:	f7ff fec8 	bl	800f8a6 <__multadd>
 800fb16:	4607      	mov	r7, r0
 800fb18:	10ad      	asrs	r5, r5, #2
 800fb1a:	d035      	beq.n	800fb88 <__pow5mult+0x90>
 800fb1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fb1e:	b93c      	cbnz	r4, 800fb30 <__pow5mult+0x38>
 800fb20:	2010      	movs	r0, #16
 800fb22:	f7ff fe6d 	bl	800f800 <malloc>
 800fb26:	6270      	str	r0, [r6, #36]	; 0x24
 800fb28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb2c:	6004      	str	r4, [r0, #0]
 800fb2e:	60c4      	str	r4, [r0, #12]
 800fb30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fb34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb38:	b94c      	cbnz	r4, 800fb4e <__pow5mult+0x56>
 800fb3a:	f240 2171 	movw	r1, #625	; 0x271
 800fb3e:	4630      	mov	r0, r6
 800fb40:	f7ff ff3a 	bl	800f9b8 <__i2b>
 800fb44:	2300      	movs	r3, #0
 800fb46:	f8c8 0008 	str.w	r0, [r8, #8]
 800fb4a:	4604      	mov	r4, r0
 800fb4c:	6003      	str	r3, [r0, #0]
 800fb4e:	f04f 0800 	mov.w	r8, #0
 800fb52:	07eb      	lsls	r3, r5, #31
 800fb54:	d50a      	bpl.n	800fb6c <__pow5mult+0x74>
 800fb56:	4639      	mov	r1, r7
 800fb58:	4622      	mov	r2, r4
 800fb5a:	4630      	mov	r0, r6
 800fb5c:	f7ff ff35 	bl	800f9ca <__multiply>
 800fb60:	4639      	mov	r1, r7
 800fb62:	4681      	mov	r9, r0
 800fb64:	4630      	mov	r0, r6
 800fb66:	f7ff fe87 	bl	800f878 <_Bfree>
 800fb6a:	464f      	mov	r7, r9
 800fb6c:	106d      	asrs	r5, r5, #1
 800fb6e:	d00b      	beq.n	800fb88 <__pow5mult+0x90>
 800fb70:	6820      	ldr	r0, [r4, #0]
 800fb72:	b938      	cbnz	r0, 800fb84 <__pow5mult+0x8c>
 800fb74:	4622      	mov	r2, r4
 800fb76:	4621      	mov	r1, r4
 800fb78:	4630      	mov	r0, r6
 800fb7a:	f7ff ff26 	bl	800f9ca <__multiply>
 800fb7e:	6020      	str	r0, [r4, #0]
 800fb80:	f8c0 8000 	str.w	r8, [r0]
 800fb84:	4604      	mov	r4, r0
 800fb86:	e7e4      	b.n	800fb52 <__pow5mult+0x5a>
 800fb88:	4638      	mov	r0, r7
 800fb8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb8e:	bf00      	nop
 800fb90:	080118e8 	.word	0x080118e8

0800fb94 <__lshift>:
 800fb94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb98:	460c      	mov	r4, r1
 800fb9a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb9e:	6923      	ldr	r3, [r4, #16]
 800fba0:	6849      	ldr	r1, [r1, #4]
 800fba2:	eb0a 0903 	add.w	r9, sl, r3
 800fba6:	68a3      	ldr	r3, [r4, #8]
 800fba8:	4607      	mov	r7, r0
 800fbaa:	4616      	mov	r6, r2
 800fbac:	f109 0501 	add.w	r5, r9, #1
 800fbb0:	42ab      	cmp	r3, r5
 800fbb2:	db32      	blt.n	800fc1a <__lshift+0x86>
 800fbb4:	4638      	mov	r0, r7
 800fbb6:	f7ff fe2b 	bl	800f810 <_Balloc>
 800fbba:	2300      	movs	r3, #0
 800fbbc:	4680      	mov	r8, r0
 800fbbe:	f100 0114 	add.w	r1, r0, #20
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	4553      	cmp	r3, sl
 800fbc6:	db2b      	blt.n	800fc20 <__lshift+0x8c>
 800fbc8:	6920      	ldr	r0, [r4, #16]
 800fbca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fbce:	f104 0314 	add.w	r3, r4, #20
 800fbd2:	f016 021f 	ands.w	r2, r6, #31
 800fbd6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fbda:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fbde:	d025      	beq.n	800fc2c <__lshift+0x98>
 800fbe0:	f1c2 0e20 	rsb	lr, r2, #32
 800fbe4:	2000      	movs	r0, #0
 800fbe6:	681e      	ldr	r6, [r3, #0]
 800fbe8:	468a      	mov	sl, r1
 800fbea:	4096      	lsls	r6, r2
 800fbec:	4330      	orrs	r0, r6
 800fbee:	f84a 0b04 	str.w	r0, [sl], #4
 800fbf2:	f853 0b04 	ldr.w	r0, [r3], #4
 800fbf6:	459c      	cmp	ip, r3
 800fbf8:	fa20 f00e 	lsr.w	r0, r0, lr
 800fbfc:	d814      	bhi.n	800fc28 <__lshift+0x94>
 800fbfe:	6048      	str	r0, [r1, #4]
 800fc00:	b108      	cbz	r0, 800fc06 <__lshift+0x72>
 800fc02:	f109 0502 	add.w	r5, r9, #2
 800fc06:	3d01      	subs	r5, #1
 800fc08:	4638      	mov	r0, r7
 800fc0a:	f8c8 5010 	str.w	r5, [r8, #16]
 800fc0e:	4621      	mov	r1, r4
 800fc10:	f7ff fe32 	bl	800f878 <_Bfree>
 800fc14:	4640      	mov	r0, r8
 800fc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc1a:	3101      	adds	r1, #1
 800fc1c:	005b      	lsls	r3, r3, #1
 800fc1e:	e7c7      	b.n	800fbb0 <__lshift+0x1c>
 800fc20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fc24:	3301      	adds	r3, #1
 800fc26:	e7cd      	b.n	800fbc4 <__lshift+0x30>
 800fc28:	4651      	mov	r1, sl
 800fc2a:	e7dc      	b.n	800fbe6 <__lshift+0x52>
 800fc2c:	3904      	subs	r1, #4
 800fc2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc32:	f841 2f04 	str.w	r2, [r1, #4]!
 800fc36:	459c      	cmp	ip, r3
 800fc38:	d8f9      	bhi.n	800fc2e <__lshift+0x9a>
 800fc3a:	e7e4      	b.n	800fc06 <__lshift+0x72>

0800fc3c <__mcmp>:
 800fc3c:	6903      	ldr	r3, [r0, #16]
 800fc3e:	690a      	ldr	r2, [r1, #16]
 800fc40:	1a9b      	subs	r3, r3, r2
 800fc42:	b530      	push	{r4, r5, lr}
 800fc44:	d10c      	bne.n	800fc60 <__mcmp+0x24>
 800fc46:	0092      	lsls	r2, r2, #2
 800fc48:	3014      	adds	r0, #20
 800fc4a:	3114      	adds	r1, #20
 800fc4c:	1884      	adds	r4, r0, r2
 800fc4e:	4411      	add	r1, r2
 800fc50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fc54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fc58:	4295      	cmp	r5, r2
 800fc5a:	d003      	beq.n	800fc64 <__mcmp+0x28>
 800fc5c:	d305      	bcc.n	800fc6a <__mcmp+0x2e>
 800fc5e:	2301      	movs	r3, #1
 800fc60:	4618      	mov	r0, r3
 800fc62:	bd30      	pop	{r4, r5, pc}
 800fc64:	42a0      	cmp	r0, r4
 800fc66:	d3f3      	bcc.n	800fc50 <__mcmp+0x14>
 800fc68:	e7fa      	b.n	800fc60 <__mcmp+0x24>
 800fc6a:	f04f 33ff 	mov.w	r3, #4294967295
 800fc6e:	e7f7      	b.n	800fc60 <__mcmp+0x24>

0800fc70 <__mdiff>:
 800fc70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc74:	460d      	mov	r5, r1
 800fc76:	4607      	mov	r7, r0
 800fc78:	4611      	mov	r1, r2
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	4614      	mov	r4, r2
 800fc7e:	f7ff ffdd 	bl	800fc3c <__mcmp>
 800fc82:	1e06      	subs	r6, r0, #0
 800fc84:	d108      	bne.n	800fc98 <__mdiff+0x28>
 800fc86:	4631      	mov	r1, r6
 800fc88:	4638      	mov	r0, r7
 800fc8a:	f7ff fdc1 	bl	800f810 <_Balloc>
 800fc8e:	2301      	movs	r3, #1
 800fc90:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fc94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc98:	bfa4      	itt	ge
 800fc9a:	4623      	movge	r3, r4
 800fc9c:	462c      	movge	r4, r5
 800fc9e:	4638      	mov	r0, r7
 800fca0:	6861      	ldr	r1, [r4, #4]
 800fca2:	bfa6      	itte	ge
 800fca4:	461d      	movge	r5, r3
 800fca6:	2600      	movge	r6, #0
 800fca8:	2601      	movlt	r6, #1
 800fcaa:	f7ff fdb1 	bl	800f810 <_Balloc>
 800fcae:	692b      	ldr	r3, [r5, #16]
 800fcb0:	60c6      	str	r6, [r0, #12]
 800fcb2:	6926      	ldr	r6, [r4, #16]
 800fcb4:	f105 0914 	add.w	r9, r5, #20
 800fcb8:	f104 0214 	add.w	r2, r4, #20
 800fcbc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fcc0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fcc4:	f100 0514 	add.w	r5, r0, #20
 800fcc8:	f04f 0e00 	mov.w	lr, #0
 800fccc:	f852 ab04 	ldr.w	sl, [r2], #4
 800fcd0:	f859 4b04 	ldr.w	r4, [r9], #4
 800fcd4:	fa1e f18a 	uxtah	r1, lr, sl
 800fcd8:	b2a3      	uxth	r3, r4
 800fcda:	1ac9      	subs	r1, r1, r3
 800fcdc:	0c23      	lsrs	r3, r4, #16
 800fcde:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800fce2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fce6:	b289      	uxth	r1, r1
 800fce8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800fcec:	45c8      	cmp	r8, r9
 800fcee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fcf2:	4694      	mov	ip, r2
 800fcf4:	f845 3b04 	str.w	r3, [r5], #4
 800fcf8:	d8e8      	bhi.n	800fccc <__mdiff+0x5c>
 800fcfa:	45bc      	cmp	ip, r7
 800fcfc:	d304      	bcc.n	800fd08 <__mdiff+0x98>
 800fcfe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800fd02:	b183      	cbz	r3, 800fd26 <__mdiff+0xb6>
 800fd04:	6106      	str	r6, [r0, #16]
 800fd06:	e7c5      	b.n	800fc94 <__mdiff+0x24>
 800fd08:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fd0c:	fa1e f381 	uxtah	r3, lr, r1
 800fd10:	141a      	asrs	r2, r3, #16
 800fd12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd1c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800fd20:	f845 3b04 	str.w	r3, [r5], #4
 800fd24:	e7e9      	b.n	800fcfa <__mdiff+0x8a>
 800fd26:	3e01      	subs	r6, #1
 800fd28:	e7e9      	b.n	800fcfe <__mdiff+0x8e>

0800fd2a <__d2b>:
 800fd2a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd2e:	460e      	mov	r6, r1
 800fd30:	2101      	movs	r1, #1
 800fd32:	ec59 8b10 	vmov	r8, r9, d0
 800fd36:	4615      	mov	r5, r2
 800fd38:	f7ff fd6a 	bl	800f810 <_Balloc>
 800fd3c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fd40:	4607      	mov	r7, r0
 800fd42:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd46:	bb34      	cbnz	r4, 800fd96 <__d2b+0x6c>
 800fd48:	9301      	str	r3, [sp, #4]
 800fd4a:	f1b8 0300 	subs.w	r3, r8, #0
 800fd4e:	d027      	beq.n	800fda0 <__d2b+0x76>
 800fd50:	a802      	add	r0, sp, #8
 800fd52:	f840 3d08 	str.w	r3, [r0, #-8]!
 800fd56:	f7ff fe00 	bl	800f95a <__lo0bits>
 800fd5a:	9900      	ldr	r1, [sp, #0]
 800fd5c:	b1f0      	cbz	r0, 800fd9c <__d2b+0x72>
 800fd5e:	9a01      	ldr	r2, [sp, #4]
 800fd60:	f1c0 0320 	rsb	r3, r0, #32
 800fd64:	fa02 f303 	lsl.w	r3, r2, r3
 800fd68:	430b      	orrs	r3, r1
 800fd6a:	40c2      	lsrs	r2, r0
 800fd6c:	617b      	str	r3, [r7, #20]
 800fd6e:	9201      	str	r2, [sp, #4]
 800fd70:	9b01      	ldr	r3, [sp, #4]
 800fd72:	61bb      	str	r3, [r7, #24]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	bf14      	ite	ne
 800fd78:	2102      	movne	r1, #2
 800fd7a:	2101      	moveq	r1, #1
 800fd7c:	6139      	str	r1, [r7, #16]
 800fd7e:	b1c4      	cbz	r4, 800fdb2 <__d2b+0x88>
 800fd80:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fd84:	4404      	add	r4, r0
 800fd86:	6034      	str	r4, [r6, #0]
 800fd88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fd8c:	6028      	str	r0, [r5, #0]
 800fd8e:	4638      	mov	r0, r7
 800fd90:	b003      	add	sp, #12
 800fd92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd9a:	e7d5      	b.n	800fd48 <__d2b+0x1e>
 800fd9c:	6179      	str	r1, [r7, #20]
 800fd9e:	e7e7      	b.n	800fd70 <__d2b+0x46>
 800fda0:	a801      	add	r0, sp, #4
 800fda2:	f7ff fdda 	bl	800f95a <__lo0bits>
 800fda6:	9b01      	ldr	r3, [sp, #4]
 800fda8:	617b      	str	r3, [r7, #20]
 800fdaa:	2101      	movs	r1, #1
 800fdac:	6139      	str	r1, [r7, #16]
 800fdae:	3020      	adds	r0, #32
 800fdb0:	e7e5      	b.n	800fd7e <__d2b+0x54>
 800fdb2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fdb6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fdba:	6030      	str	r0, [r6, #0]
 800fdbc:	6918      	ldr	r0, [r3, #16]
 800fdbe:	f7ff fdad 	bl	800f91c <__hi0bits>
 800fdc2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fdc6:	e7e1      	b.n	800fd8c <__d2b+0x62>

0800fdc8 <_calloc_r>:
 800fdc8:	b538      	push	{r3, r4, r5, lr}
 800fdca:	fb02 f401 	mul.w	r4, r2, r1
 800fdce:	4621      	mov	r1, r4
 800fdd0:	f000 f856 	bl	800fe80 <_malloc_r>
 800fdd4:	4605      	mov	r5, r0
 800fdd6:	b118      	cbz	r0, 800fde0 <_calloc_r+0x18>
 800fdd8:	4622      	mov	r2, r4
 800fdda:	2100      	movs	r1, #0
 800fddc:	f7fe f975 	bl	800e0ca <memset>
 800fde0:	4628      	mov	r0, r5
 800fde2:	bd38      	pop	{r3, r4, r5, pc}

0800fde4 <_free_r>:
 800fde4:	b538      	push	{r3, r4, r5, lr}
 800fde6:	4605      	mov	r5, r0
 800fde8:	2900      	cmp	r1, #0
 800fdea:	d045      	beq.n	800fe78 <_free_r+0x94>
 800fdec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdf0:	1f0c      	subs	r4, r1, #4
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	bfb8      	it	lt
 800fdf6:	18e4      	addlt	r4, r4, r3
 800fdf8:	f000 fc4a 	bl	8010690 <__malloc_lock>
 800fdfc:	4a1f      	ldr	r2, [pc, #124]	; (800fe7c <_free_r+0x98>)
 800fdfe:	6813      	ldr	r3, [r2, #0]
 800fe00:	4610      	mov	r0, r2
 800fe02:	b933      	cbnz	r3, 800fe12 <_free_r+0x2e>
 800fe04:	6063      	str	r3, [r4, #4]
 800fe06:	6014      	str	r4, [r2, #0]
 800fe08:	4628      	mov	r0, r5
 800fe0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe0e:	f000 bc40 	b.w	8010692 <__malloc_unlock>
 800fe12:	42a3      	cmp	r3, r4
 800fe14:	d90c      	bls.n	800fe30 <_free_r+0x4c>
 800fe16:	6821      	ldr	r1, [r4, #0]
 800fe18:	1862      	adds	r2, r4, r1
 800fe1a:	4293      	cmp	r3, r2
 800fe1c:	bf04      	itt	eq
 800fe1e:	681a      	ldreq	r2, [r3, #0]
 800fe20:	685b      	ldreq	r3, [r3, #4]
 800fe22:	6063      	str	r3, [r4, #4]
 800fe24:	bf04      	itt	eq
 800fe26:	1852      	addeq	r2, r2, r1
 800fe28:	6022      	streq	r2, [r4, #0]
 800fe2a:	6004      	str	r4, [r0, #0]
 800fe2c:	e7ec      	b.n	800fe08 <_free_r+0x24>
 800fe2e:	4613      	mov	r3, r2
 800fe30:	685a      	ldr	r2, [r3, #4]
 800fe32:	b10a      	cbz	r2, 800fe38 <_free_r+0x54>
 800fe34:	42a2      	cmp	r2, r4
 800fe36:	d9fa      	bls.n	800fe2e <_free_r+0x4a>
 800fe38:	6819      	ldr	r1, [r3, #0]
 800fe3a:	1858      	adds	r0, r3, r1
 800fe3c:	42a0      	cmp	r0, r4
 800fe3e:	d10b      	bne.n	800fe58 <_free_r+0x74>
 800fe40:	6820      	ldr	r0, [r4, #0]
 800fe42:	4401      	add	r1, r0
 800fe44:	1858      	adds	r0, r3, r1
 800fe46:	4282      	cmp	r2, r0
 800fe48:	6019      	str	r1, [r3, #0]
 800fe4a:	d1dd      	bne.n	800fe08 <_free_r+0x24>
 800fe4c:	6810      	ldr	r0, [r2, #0]
 800fe4e:	6852      	ldr	r2, [r2, #4]
 800fe50:	605a      	str	r2, [r3, #4]
 800fe52:	4401      	add	r1, r0
 800fe54:	6019      	str	r1, [r3, #0]
 800fe56:	e7d7      	b.n	800fe08 <_free_r+0x24>
 800fe58:	d902      	bls.n	800fe60 <_free_r+0x7c>
 800fe5a:	230c      	movs	r3, #12
 800fe5c:	602b      	str	r3, [r5, #0]
 800fe5e:	e7d3      	b.n	800fe08 <_free_r+0x24>
 800fe60:	6820      	ldr	r0, [r4, #0]
 800fe62:	1821      	adds	r1, r4, r0
 800fe64:	428a      	cmp	r2, r1
 800fe66:	bf04      	itt	eq
 800fe68:	6811      	ldreq	r1, [r2, #0]
 800fe6a:	6852      	ldreq	r2, [r2, #4]
 800fe6c:	6062      	str	r2, [r4, #4]
 800fe6e:	bf04      	itt	eq
 800fe70:	1809      	addeq	r1, r1, r0
 800fe72:	6021      	streq	r1, [r4, #0]
 800fe74:	605c      	str	r4, [r3, #4]
 800fe76:	e7c7      	b.n	800fe08 <_free_r+0x24>
 800fe78:	bd38      	pop	{r3, r4, r5, pc}
 800fe7a:	bf00      	nop
 800fe7c:	20009084 	.word	0x20009084

0800fe80 <_malloc_r>:
 800fe80:	b570      	push	{r4, r5, r6, lr}
 800fe82:	1ccd      	adds	r5, r1, #3
 800fe84:	f025 0503 	bic.w	r5, r5, #3
 800fe88:	3508      	adds	r5, #8
 800fe8a:	2d0c      	cmp	r5, #12
 800fe8c:	bf38      	it	cc
 800fe8e:	250c      	movcc	r5, #12
 800fe90:	2d00      	cmp	r5, #0
 800fe92:	4606      	mov	r6, r0
 800fe94:	db01      	blt.n	800fe9a <_malloc_r+0x1a>
 800fe96:	42a9      	cmp	r1, r5
 800fe98:	d903      	bls.n	800fea2 <_malloc_r+0x22>
 800fe9a:	230c      	movs	r3, #12
 800fe9c:	6033      	str	r3, [r6, #0]
 800fe9e:	2000      	movs	r0, #0
 800fea0:	bd70      	pop	{r4, r5, r6, pc}
 800fea2:	f000 fbf5 	bl	8010690 <__malloc_lock>
 800fea6:	4a21      	ldr	r2, [pc, #132]	; (800ff2c <_malloc_r+0xac>)
 800fea8:	6814      	ldr	r4, [r2, #0]
 800feaa:	4621      	mov	r1, r4
 800feac:	b991      	cbnz	r1, 800fed4 <_malloc_r+0x54>
 800feae:	4c20      	ldr	r4, [pc, #128]	; (800ff30 <_malloc_r+0xb0>)
 800feb0:	6823      	ldr	r3, [r4, #0]
 800feb2:	b91b      	cbnz	r3, 800febc <_malloc_r+0x3c>
 800feb4:	4630      	mov	r0, r6
 800feb6:	f000 f97d 	bl	80101b4 <_sbrk_r>
 800feba:	6020      	str	r0, [r4, #0]
 800febc:	4629      	mov	r1, r5
 800febe:	4630      	mov	r0, r6
 800fec0:	f000 f978 	bl	80101b4 <_sbrk_r>
 800fec4:	1c43      	adds	r3, r0, #1
 800fec6:	d124      	bne.n	800ff12 <_malloc_r+0x92>
 800fec8:	230c      	movs	r3, #12
 800feca:	6033      	str	r3, [r6, #0]
 800fecc:	4630      	mov	r0, r6
 800fece:	f000 fbe0 	bl	8010692 <__malloc_unlock>
 800fed2:	e7e4      	b.n	800fe9e <_malloc_r+0x1e>
 800fed4:	680b      	ldr	r3, [r1, #0]
 800fed6:	1b5b      	subs	r3, r3, r5
 800fed8:	d418      	bmi.n	800ff0c <_malloc_r+0x8c>
 800feda:	2b0b      	cmp	r3, #11
 800fedc:	d90f      	bls.n	800fefe <_malloc_r+0x7e>
 800fede:	600b      	str	r3, [r1, #0]
 800fee0:	50cd      	str	r5, [r1, r3]
 800fee2:	18cc      	adds	r4, r1, r3
 800fee4:	4630      	mov	r0, r6
 800fee6:	f000 fbd4 	bl	8010692 <__malloc_unlock>
 800feea:	f104 000b 	add.w	r0, r4, #11
 800feee:	1d23      	adds	r3, r4, #4
 800fef0:	f020 0007 	bic.w	r0, r0, #7
 800fef4:	1ac3      	subs	r3, r0, r3
 800fef6:	d0d3      	beq.n	800fea0 <_malloc_r+0x20>
 800fef8:	425a      	negs	r2, r3
 800fefa:	50e2      	str	r2, [r4, r3]
 800fefc:	e7d0      	b.n	800fea0 <_malloc_r+0x20>
 800fefe:	428c      	cmp	r4, r1
 800ff00:	684b      	ldr	r3, [r1, #4]
 800ff02:	bf16      	itet	ne
 800ff04:	6063      	strne	r3, [r4, #4]
 800ff06:	6013      	streq	r3, [r2, #0]
 800ff08:	460c      	movne	r4, r1
 800ff0a:	e7eb      	b.n	800fee4 <_malloc_r+0x64>
 800ff0c:	460c      	mov	r4, r1
 800ff0e:	6849      	ldr	r1, [r1, #4]
 800ff10:	e7cc      	b.n	800feac <_malloc_r+0x2c>
 800ff12:	1cc4      	adds	r4, r0, #3
 800ff14:	f024 0403 	bic.w	r4, r4, #3
 800ff18:	42a0      	cmp	r0, r4
 800ff1a:	d005      	beq.n	800ff28 <_malloc_r+0xa8>
 800ff1c:	1a21      	subs	r1, r4, r0
 800ff1e:	4630      	mov	r0, r6
 800ff20:	f000 f948 	bl	80101b4 <_sbrk_r>
 800ff24:	3001      	adds	r0, #1
 800ff26:	d0cf      	beq.n	800fec8 <_malloc_r+0x48>
 800ff28:	6025      	str	r5, [r4, #0]
 800ff2a:	e7db      	b.n	800fee4 <_malloc_r+0x64>
 800ff2c:	20009084 	.word	0x20009084
 800ff30:	20009088 	.word	0x20009088

0800ff34 <__sfputc_r>:
 800ff34:	6893      	ldr	r3, [r2, #8]
 800ff36:	3b01      	subs	r3, #1
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	b410      	push	{r4}
 800ff3c:	6093      	str	r3, [r2, #8]
 800ff3e:	da08      	bge.n	800ff52 <__sfputc_r+0x1e>
 800ff40:	6994      	ldr	r4, [r2, #24]
 800ff42:	42a3      	cmp	r3, r4
 800ff44:	db01      	blt.n	800ff4a <__sfputc_r+0x16>
 800ff46:	290a      	cmp	r1, #10
 800ff48:	d103      	bne.n	800ff52 <__sfputc_r+0x1e>
 800ff4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff4e:	f000 b985 	b.w	801025c <__swbuf_r>
 800ff52:	6813      	ldr	r3, [r2, #0]
 800ff54:	1c58      	adds	r0, r3, #1
 800ff56:	6010      	str	r0, [r2, #0]
 800ff58:	7019      	strb	r1, [r3, #0]
 800ff5a:	4608      	mov	r0, r1
 800ff5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff60:	4770      	bx	lr

0800ff62 <__sfputs_r>:
 800ff62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff64:	4606      	mov	r6, r0
 800ff66:	460f      	mov	r7, r1
 800ff68:	4614      	mov	r4, r2
 800ff6a:	18d5      	adds	r5, r2, r3
 800ff6c:	42ac      	cmp	r4, r5
 800ff6e:	d101      	bne.n	800ff74 <__sfputs_r+0x12>
 800ff70:	2000      	movs	r0, #0
 800ff72:	e007      	b.n	800ff84 <__sfputs_r+0x22>
 800ff74:	463a      	mov	r2, r7
 800ff76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff7a:	4630      	mov	r0, r6
 800ff7c:	f7ff ffda 	bl	800ff34 <__sfputc_r>
 800ff80:	1c43      	adds	r3, r0, #1
 800ff82:	d1f3      	bne.n	800ff6c <__sfputs_r+0xa>
 800ff84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ff88 <_vfiprintf_r>:
 800ff88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff8c:	460c      	mov	r4, r1
 800ff8e:	b09d      	sub	sp, #116	; 0x74
 800ff90:	4617      	mov	r7, r2
 800ff92:	461d      	mov	r5, r3
 800ff94:	4606      	mov	r6, r0
 800ff96:	b118      	cbz	r0, 800ffa0 <_vfiprintf_r+0x18>
 800ff98:	6983      	ldr	r3, [r0, #24]
 800ff9a:	b90b      	cbnz	r3, 800ffa0 <_vfiprintf_r+0x18>
 800ff9c:	f7ff fb98 	bl	800f6d0 <__sinit>
 800ffa0:	4b7c      	ldr	r3, [pc, #496]	; (8010194 <_vfiprintf_r+0x20c>)
 800ffa2:	429c      	cmp	r4, r3
 800ffa4:	d158      	bne.n	8010058 <_vfiprintf_r+0xd0>
 800ffa6:	6874      	ldr	r4, [r6, #4]
 800ffa8:	89a3      	ldrh	r3, [r4, #12]
 800ffaa:	0718      	lsls	r0, r3, #28
 800ffac:	d55e      	bpl.n	801006c <_vfiprintf_r+0xe4>
 800ffae:	6923      	ldr	r3, [r4, #16]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d05b      	beq.n	801006c <_vfiprintf_r+0xe4>
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	9309      	str	r3, [sp, #36]	; 0x24
 800ffb8:	2320      	movs	r3, #32
 800ffba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffbe:	2330      	movs	r3, #48	; 0x30
 800ffc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ffc4:	9503      	str	r5, [sp, #12]
 800ffc6:	f04f 0b01 	mov.w	fp, #1
 800ffca:	46b8      	mov	r8, r7
 800ffcc:	4645      	mov	r5, r8
 800ffce:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ffd2:	b10b      	cbz	r3, 800ffd8 <_vfiprintf_r+0x50>
 800ffd4:	2b25      	cmp	r3, #37	; 0x25
 800ffd6:	d154      	bne.n	8010082 <_vfiprintf_r+0xfa>
 800ffd8:	ebb8 0a07 	subs.w	sl, r8, r7
 800ffdc:	d00b      	beq.n	800fff6 <_vfiprintf_r+0x6e>
 800ffde:	4653      	mov	r3, sl
 800ffe0:	463a      	mov	r2, r7
 800ffe2:	4621      	mov	r1, r4
 800ffe4:	4630      	mov	r0, r6
 800ffe6:	f7ff ffbc 	bl	800ff62 <__sfputs_r>
 800ffea:	3001      	adds	r0, #1
 800ffec:	f000 80c2 	beq.w	8010174 <_vfiprintf_r+0x1ec>
 800fff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fff2:	4453      	add	r3, sl
 800fff4:	9309      	str	r3, [sp, #36]	; 0x24
 800fff6:	f898 3000 	ldrb.w	r3, [r8]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	f000 80ba 	beq.w	8010174 <_vfiprintf_r+0x1ec>
 8010000:	2300      	movs	r3, #0
 8010002:	f04f 32ff 	mov.w	r2, #4294967295
 8010006:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801000a:	9304      	str	r3, [sp, #16]
 801000c:	9307      	str	r3, [sp, #28]
 801000e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010012:	931a      	str	r3, [sp, #104]	; 0x68
 8010014:	46a8      	mov	r8, r5
 8010016:	2205      	movs	r2, #5
 8010018:	f818 1b01 	ldrb.w	r1, [r8], #1
 801001c:	485e      	ldr	r0, [pc, #376]	; (8010198 <_vfiprintf_r+0x210>)
 801001e:	f7f0 f8e7 	bl	80001f0 <memchr>
 8010022:	9b04      	ldr	r3, [sp, #16]
 8010024:	bb78      	cbnz	r0, 8010086 <_vfiprintf_r+0xfe>
 8010026:	06d9      	lsls	r1, r3, #27
 8010028:	bf44      	itt	mi
 801002a:	2220      	movmi	r2, #32
 801002c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010030:	071a      	lsls	r2, r3, #28
 8010032:	bf44      	itt	mi
 8010034:	222b      	movmi	r2, #43	; 0x2b
 8010036:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801003a:	782a      	ldrb	r2, [r5, #0]
 801003c:	2a2a      	cmp	r2, #42	; 0x2a
 801003e:	d02a      	beq.n	8010096 <_vfiprintf_r+0x10e>
 8010040:	9a07      	ldr	r2, [sp, #28]
 8010042:	46a8      	mov	r8, r5
 8010044:	2000      	movs	r0, #0
 8010046:	250a      	movs	r5, #10
 8010048:	4641      	mov	r1, r8
 801004a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801004e:	3b30      	subs	r3, #48	; 0x30
 8010050:	2b09      	cmp	r3, #9
 8010052:	d969      	bls.n	8010128 <_vfiprintf_r+0x1a0>
 8010054:	b360      	cbz	r0, 80100b0 <_vfiprintf_r+0x128>
 8010056:	e024      	b.n	80100a2 <_vfiprintf_r+0x11a>
 8010058:	4b50      	ldr	r3, [pc, #320]	; (801019c <_vfiprintf_r+0x214>)
 801005a:	429c      	cmp	r4, r3
 801005c:	d101      	bne.n	8010062 <_vfiprintf_r+0xda>
 801005e:	68b4      	ldr	r4, [r6, #8]
 8010060:	e7a2      	b.n	800ffa8 <_vfiprintf_r+0x20>
 8010062:	4b4f      	ldr	r3, [pc, #316]	; (80101a0 <_vfiprintf_r+0x218>)
 8010064:	429c      	cmp	r4, r3
 8010066:	bf08      	it	eq
 8010068:	68f4      	ldreq	r4, [r6, #12]
 801006a:	e79d      	b.n	800ffa8 <_vfiprintf_r+0x20>
 801006c:	4621      	mov	r1, r4
 801006e:	4630      	mov	r0, r6
 8010070:	f000 f958 	bl	8010324 <__swsetup_r>
 8010074:	2800      	cmp	r0, #0
 8010076:	d09d      	beq.n	800ffb4 <_vfiprintf_r+0x2c>
 8010078:	f04f 30ff 	mov.w	r0, #4294967295
 801007c:	b01d      	add	sp, #116	; 0x74
 801007e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010082:	46a8      	mov	r8, r5
 8010084:	e7a2      	b.n	800ffcc <_vfiprintf_r+0x44>
 8010086:	4a44      	ldr	r2, [pc, #272]	; (8010198 <_vfiprintf_r+0x210>)
 8010088:	1a80      	subs	r0, r0, r2
 801008a:	fa0b f000 	lsl.w	r0, fp, r0
 801008e:	4318      	orrs	r0, r3
 8010090:	9004      	str	r0, [sp, #16]
 8010092:	4645      	mov	r5, r8
 8010094:	e7be      	b.n	8010014 <_vfiprintf_r+0x8c>
 8010096:	9a03      	ldr	r2, [sp, #12]
 8010098:	1d11      	adds	r1, r2, #4
 801009a:	6812      	ldr	r2, [r2, #0]
 801009c:	9103      	str	r1, [sp, #12]
 801009e:	2a00      	cmp	r2, #0
 80100a0:	db01      	blt.n	80100a6 <_vfiprintf_r+0x11e>
 80100a2:	9207      	str	r2, [sp, #28]
 80100a4:	e004      	b.n	80100b0 <_vfiprintf_r+0x128>
 80100a6:	4252      	negs	r2, r2
 80100a8:	f043 0302 	orr.w	r3, r3, #2
 80100ac:	9207      	str	r2, [sp, #28]
 80100ae:	9304      	str	r3, [sp, #16]
 80100b0:	f898 3000 	ldrb.w	r3, [r8]
 80100b4:	2b2e      	cmp	r3, #46	; 0x2e
 80100b6:	d10e      	bne.n	80100d6 <_vfiprintf_r+0x14e>
 80100b8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80100bc:	2b2a      	cmp	r3, #42	; 0x2a
 80100be:	d138      	bne.n	8010132 <_vfiprintf_r+0x1aa>
 80100c0:	9b03      	ldr	r3, [sp, #12]
 80100c2:	1d1a      	adds	r2, r3, #4
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	9203      	str	r2, [sp, #12]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	bfb8      	it	lt
 80100cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80100d0:	f108 0802 	add.w	r8, r8, #2
 80100d4:	9305      	str	r3, [sp, #20]
 80100d6:	4d33      	ldr	r5, [pc, #204]	; (80101a4 <_vfiprintf_r+0x21c>)
 80100d8:	f898 1000 	ldrb.w	r1, [r8]
 80100dc:	2203      	movs	r2, #3
 80100de:	4628      	mov	r0, r5
 80100e0:	f7f0 f886 	bl	80001f0 <memchr>
 80100e4:	b140      	cbz	r0, 80100f8 <_vfiprintf_r+0x170>
 80100e6:	2340      	movs	r3, #64	; 0x40
 80100e8:	1b40      	subs	r0, r0, r5
 80100ea:	fa03 f000 	lsl.w	r0, r3, r0
 80100ee:	9b04      	ldr	r3, [sp, #16]
 80100f0:	4303      	orrs	r3, r0
 80100f2:	f108 0801 	add.w	r8, r8, #1
 80100f6:	9304      	str	r3, [sp, #16]
 80100f8:	f898 1000 	ldrb.w	r1, [r8]
 80100fc:	482a      	ldr	r0, [pc, #168]	; (80101a8 <_vfiprintf_r+0x220>)
 80100fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010102:	2206      	movs	r2, #6
 8010104:	f108 0701 	add.w	r7, r8, #1
 8010108:	f7f0 f872 	bl	80001f0 <memchr>
 801010c:	2800      	cmp	r0, #0
 801010e:	d037      	beq.n	8010180 <_vfiprintf_r+0x1f8>
 8010110:	4b26      	ldr	r3, [pc, #152]	; (80101ac <_vfiprintf_r+0x224>)
 8010112:	bb1b      	cbnz	r3, 801015c <_vfiprintf_r+0x1d4>
 8010114:	9b03      	ldr	r3, [sp, #12]
 8010116:	3307      	adds	r3, #7
 8010118:	f023 0307 	bic.w	r3, r3, #7
 801011c:	3308      	adds	r3, #8
 801011e:	9303      	str	r3, [sp, #12]
 8010120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010122:	444b      	add	r3, r9
 8010124:	9309      	str	r3, [sp, #36]	; 0x24
 8010126:	e750      	b.n	800ffca <_vfiprintf_r+0x42>
 8010128:	fb05 3202 	mla	r2, r5, r2, r3
 801012c:	2001      	movs	r0, #1
 801012e:	4688      	mov	r8, r1
 8010130:	e78a      	b.n	8010048 <_vfiprintf_r+0xc0>
 8010132:	2300      	movs	r3, #0
 8010134:	f108 0801 	add.w	r8, r8, #1
 8010138:	9305      	str	r3, [sp, #20]
 801013a:	4619      	mov	r1, r3
 801013c:	250a      	movs	r5, #10
 801013e:	4640      	mov	r0, r8
 8010140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010144:	3a30      	subs	r2, #48	; 0x30
 8010146:	2a09      	cmp	r2, #9
 8010148:	d903      	bls.n	8010152 <_vfiprintf_r+0x1ca>
 801014a:	2b00      	cmp	r3, #0
 801014c:	d0c3      	beq.n	80100d6 <_vfiprintf_r+0x14e>
 801014e:	9105      	str	r1, [sp, #20]
 8010150:	e7c1      	b.n	80100d6 <_vfiprintf_r+0x14e>
 8010152:	fb05 2101 	mla	r1, r5, r1, r2
 8010156:	2301      	movs	r3, #1
 8010158:	4680      	mov	r8, r0
 801015a:	e7f0      	b.n	801013e <_vfiprintf_r+0x1b6>
 801015c:	ab03      	add	r3, sp, #12
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	4622      	mov	r2, r4
 8010162:	4b13      	ldr	r3, [pc, #76]	; (80101b0 <_vfiprintf_r+0x228>)
 8010164:	a904      	add	r1, sp, #16
 8010166:	4630      	mov	r0, r6
 8010168:	f7fe f84c 	bl	800e204 <_printf_float>
 801016c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010170:	4681      	mov	r9, r0
 8010172:	d1d5      	bne.n	8010120 <_vfiprintf_r+0x198>
 8010174:	89a3      	ldrh	r3, [r4, #12]
 8010176:	065b      	lsls	r3, r3, #25
 8010178:	f53f af7e 	bmi.w	8010078 <_vfiprintf_r+0xf0>
 801017c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801017e:	e77d      	b.n	801007c <_vfiprintf_r+0xf4>
 8010180:	ab03      	add	r3, sp, #12
 8010182:	9300      	str	r3, [sp, #0]
 8010184:	4622      	mov	r2, r4
 8010186:	4b0a      	ldr	r3, [pc, #40]	; (80101b0 <_vfiprintf_r+0x228>)
 8010188:	a904      	add	r1, sp, #16
 801018a:	4630      	mov	r0, r6
 801018c:	f7fe faf0 	bl	800e770 <_printf_i>
 8010190:	e7ec      	b.n	801016c <_vfiprintf_r+0x1e4>
 8010192:	bf00      	nop
 8010194:	080117b4 	.word	0x080117b4
 8010198:	080118f4 	.word	0x080118f4
 801019c:	080117d4 	.word	0x080117d4
 80101a0:	08011794 	.word	0x08011794
 80101a4:	080118fa 	.word	0x080118fa
 80101a8:	080118fe 	.word	0x080118fe
 80101ac:	0800e205 	.word	0x0800e205
 80101b0:	0800ff63 	.word	0x0800ff63

080101b4 <_sbrk_r>:
 80101b4:	b538      	push	{r3, r4, r5, lr}
 80101b6:	4c06      	ldr	r4, [pc, #24]	; (80101d0 <_sbrk_r+0x1c>)
 80101b8:	2300      	movs	r3, #0
 80101ba:	4605      	mov	r5, r0
 80101bc:	4608      	mov	r0, r1
 80101be:	6023      	str	r3, [r4, #0]
 80101c0:	f7f1 fbe6 	bl	8001990 <_sbrk>
 80101c4:	1c43      	adds	r3, r0, #1
 80101c6:	d102      	bne.n	80101ce <_sbrk_r+0x1a>
 80101c8:	6823      	ldr	r3, [r4, #0]
 80101ca:	b103      	cbz	r3, 80101ce <_sbrk_r+0x1a>
 80101cc:	602b      	str	r3, [r5, #0]
 80101ce:	bd38      	pop	{r3, r4, r5, pc}
 80101d0:	2000c3a8 	.word	0x2000c3a8

080101d4 <__sread>:
 80101d4:	b510      	push	{r4, lr}
 80101d6:	460c      	mov	r4, r1
 80101d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101dc:	f000 fa5a 	bl	8010694 <_read_r>
 80101e0:	2800      	cmp	r0, #0
 80101e2:	bfab      	itete	ge
 80101e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80101e6:	89a3      	ldrhlt	r3, [r4, #12]
 80101e8:	181b      	addge	r3, r3, r0
 80101ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80101ee:	bfac      	ite	ge
 80101f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80101f2:	81a3      	strhlt	r3, [r4, #12]
 80101f4:	bd10      	pop	{r4, pc}

080101f6 <__swrite>:
 80101f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101fa:	461f      	mov	r7, r3
 80101fc:	898b      	ldrh	r3, [r1, #12]
 80101fe:	05db      	lsls	r3, r3, #23
 8010200:	4605      	mov	r5, r0
 8010202:	460c      	mov	r4, r1
 8010204:	4616      	mov	r6, r2
 8010206:	d505      	bpl.n	8010214 <__swrite+0x1e>
 8010208:	2302      	movs	r3, #2
 801020a:	2200      	movs	r2, #0
 801020c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010210:	f000 f9b6 	bl	8010580 <_lseek_r>
 8010214:	89a3      	ldrh	r3, [r4, #12]
 8010216:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801021a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801021e:	81a3      	strh	r3, [r4, #12]
 8010220:	4632      	mov	r2, r6
 8010222:	463b      	mov	r3, r7
 8010224:	4628      	mov	r0, r5
 8010226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801022a:	f000 b869 	b.w	8010300 <_write_r>

0801022e <__sseek>:
 801022e:	b510      	push	{r4, lr}
 8010230:	460c      	mov	r4, r1
 8010232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010236:	f000 f9a3 	bl	8010580 <_lseek_r>
 801023a:	1c43      	adds	r3, r0, #1
 801023c:	89a3      	ldrh	r3, [r4, #12]
 801023e:	bf15      	itete	ne
 8010240:	6560      	strne	r0, [r4, #84]	; 0x54
 8010242:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010246:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801024a:	81a3      	strheq	r3, [r4, #12]
 801024c:	bf18      	it	ne
 801024e:	81a3      	strhne	r3, [r4, #12]
 8010250:	bd10      	pop	{r4, pc}

08010252 <__sclose>:
 8010252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010256:	f000 b8d3 	b.w	8010400 <_close_r>
	...

0801025c <__swbuf_r>:
 801025c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801025e:	460e      	mov	r6, r1
 8010260:	4614      	mov	r4, r2
 8010262:	4605      	mov	r5, r0
 8010264:	b118      	cbz	r0, 801026e <__swbuf_r+0x12>
 8010266:	6983      	ldr	r3, [r0, #24]
 8010268:	b90b      	cbnz	r3, 801026e <__swbuf_r+0x12>
 801026a:	f7ff fa31 	bl	800f6d0 <__sinit>
 801026e:	4b21      	ldr	r3, [pc, #132]	; (80102f4 <__swbuf_r+0x98>)
 8010270:	429c      	cmp	r4, r3
 8010272:	d12a      	bne.n	80102ca <__swbuf_r+0x6e>
 8010274:	686c      	ldr	r4, [r5, #4]
 8010276:	69a3      	ldr	r3, [r4, #24]
 8010278:	60a3      	str	r3, [r4, #8]
 801027a:	89a3      	ldrh	r3, [r4, #12]
 801027c:	071a      	lsls	r2, r3, #28
 801027e:	d52e      	bpl.n	80102de <__swbuf_r+0x82>
 8010280:	6923      	ldr	r3, [r4, #16]
 8010282:	b363      	cbz	r3, 80102de <__swbuf_r+0x82>
 8010284:	6923      	ldr	r3, [r4, #16]
 8010286:	6820      	ldr	r0, [r4, #0]
 8010288:	1ac0      	subs	r0, r0, r3
 801028a:	6963      	ldr	r3, [r4, #20]
 801028c:	b2f6      	uxtb	r6, r6
 801028e:	4283      	cmp	r3, r0
 8010290:	4637      	mov	r7, r6
 8010292:	dc04      	bgt.n	801029e <__swbuf_r+0x42>
 8010294:	4621      	mov	r1, r4
 8010296:	4628      	mov	r0, r5
 8010298:	f000 f948 	bl	801052c <_fflush_r>
 801029c:	bb28      	cbnz	r0, 80102ea <__swbuf_r+0x8e>
 801029e:	68a3      	ldr	r3, [r4, #8]
 80102a0:	3b01      	subs	r3, #1
 80102a2:	60a3      	str	r3, [r4, #8]
 80102a4:	6823      	ldr	r3, [r4, #0]
 80102a6:	1c5a      	adds	r2, r3, #1
 80102a8:	6022      	str	r2, [r4, #0]
 80102aa:	701e      	strb	r6, [r3, #0]
 80102ac:	6963      	ldr	r3, [r4, #20]
 80102ae:	3001      	adds	r0, #1
 80102b0:	4283      	cmp	r3, r0
 80102b2:	d004      	beq.n	80102be <__swbuf_r+0x62>
 80102b4:	89a3      	ldrh	r3, [r4, #12]
 80102b6:	07db      	lsls	r3, r3, #31
 80102b8:	d519      	bpl.n	80102ee <__swbuf_r+0x92>
 80102ba:	2e0a      	cmp	r6, #10
 80102bc:	d117      	bne.n	80102ee <__swbuf_r+0x92>
 80102be:	4621      	mov	r1, r4
 80102c0:	4628      	mov	r0, r5
 80102c2:	f000 f933 	bl	801052c <_fflush_r>
 80102c6:	b190      	cbz	r0, 80102ee <__swbuf_r+0x92>
 80102c8:	e00f      	b.n	80102ea <__swbuf_r+0x8e>
 80102ca:	4b0b      	ldr	r3, [pc, #44]	; (80102f8 <__swbuf_r+0x9c>)
 80102cc:	429c      	cmp	r4, r3
 80102ce:	d101      	bne.n	80102d4 <__swbuf_r+0x78>
 80102d0:	68ac      	ldr	r4, [r5, #8]
 80102d2:	e7d0      	b.n	8010276 <__swbuf_r+0x1a>
 80102d4:	4b09      	ldr	r3, [pc, #36]	; (80102fc <__swbuf_r+0xa0>)
 80102d6:	429c      	cmp	r4, r3
 80102d8:	bf08      	it	eq
 80102da:	68ec      	ldreq	r4, [r5, #12]
 80102dc:	e7cb      	b.n	8010276 <__swbuf_r+0x1a>
 80102de:	4621      	mov	r1, r4
 80102e0:	4628      	mov	r0, r5
 80102e2:	f000 f81f 	bl	8010324 <__swsetup_r>
 80102e6:	2800      	cmp	r0, #0
 80102e8:	d0cc      	beq.n	8010284 <__swbuf_r+0x28>
 80102ea:	f04f 37ff 	mov.w	r7, #4294967295
 80102ee:	4638      	mov	r0, r7
 80102f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102f2:	bf00      	nop
 80102f4:	080117b4 	.word	0x080117b4
 80102f8:	080117d4 	.word	0x080117d4
 80102fc:	08011794 	.word	0x08011794

08010300 <_write_r>:
 8010300:	b538      	push	{r3, r4, r5, lr}
 8010302:	4c07      	ldr	r4, [pc, #28]	; (8010320 <_write_r+0x20>)
 8010304:	4605      	mov	r5, r0
 8010306:	4608      	mov	r0, r1
 8010308:	4611      	mov	r1, r2
 801030a:	2200      	movs	r2, #0
 801030c:	6022      	str	r2, [r4, #0]
 801030e:	461a      	mov	r2, r3
 8010310:	f7f1 faed 	bl	80018ee <_write>
 8010314:	1c43      	adds	r3, r0, #1
 8010316:	d102      	bne.n	801031e <_write_r+0x1e>
 8010318:	6823      	ldr	r3, [r4, #0]
 801031a:	b103      	cbz	r3, 801031e <_write_r+0x1e>
 801031c:	602b      	str	r3, [r5, #0]
 801031e:	bd38      	pop	{r3, r4, r5, pc}
 8010320:	2000c3a8 	.word	0x2000c3a8

08010324 <__swsetup_r>:
 8010324:	4b32      	ldr	r3, [pc, #200]	; (80103f0 <__swsetup_r+0xcc>)
 8010326:	b570      	push	{r4, r5, r6, lr}
 8010328:	681d      	ldr	r5, [r3, #0]
 801032a:	4606      	mov	r6, r0
 801032c:	460c      	mov	r4, r1
 801032e:	b125      	cbz	r5, 801033a <__swsetup_r+0x16>
 8010330:	69ab      	ldr	r3, [r5, #24]
 8010332:	b913      	cbnz	r3, 801033a <__swsetup_r+0x16>
 8010334:	4628      	mov	r0, r5
 8010336:	f7ff f9cb 	bl	800f6d0 <__sinit>
 801033a:	4b2e      	ldr	r3, [pc, #184]	; (80103f4 <__swsetup_r+0xd0>)
 801033c:	429c      	cmp	r4, r3
 801033e:	d10f      	bne.n	8010360 <__swsetup_r+0x3c>
 8010340:	686c      	ldr	r4, [r5, #4]
 8010342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010346:	b29a      	uxth	r2, r3
 8010348:	0715      	lsls	r5, r2, #28
 801034a:	d42c      	bmi.n	80103a6 <__swsetup_r+0x82>
 801034c:	06d0      	lsls	r0, r2, #27
 801034e:	d411      	bmi.n	8010374 <__swsetup_r+0x50>
 8010350:	2209      	movs	r2, #9
 8010352:	6032      	str	r2, [r6, #0]
 8010354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010358:	81a3      	strh	r3, [r4, #12]
 801035a:	f04f 30ff 	mov.w	r0, #4294967295
 801035e:	e03e      	b.n	80103de <__swsetup_r+0xba>
 8010360:	4b25      	ldr	r3, [pc, #148]	; (80103f8 <__swsetup_r+0xd4>)
 8010362:	429c      	cmp	r4, r3
 8010364:	d101      	bne.n	801036a <__swsetup_r+0x46>
 8010366:	68ac      	ldr	r4, [r5, #8]
 8010368:	e7eb      	b.n	8010342 <__swsetup_r+0x1e>
 801036a:	4b24      	ldr	r3, [pc, #144]	; (80103fc <__swsetup_r+0xd8>)
 801036c:	429c      	cmp	r4, r3
 801036e:	bf08      	it	eq
 8010370:	68ec      	ldreq	r4, [r5, #12]
 8010372:	e7e6      	b.n	8010342 <__swsetup_r+0x1e>
 8010374:	0751      	lsls	r1, r2, #29
 8010376:	d512      	bpl.n	801039e <__swsetup_r+0x7a>
 8010378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801037a:	b141      	cbz	r1, 801038e <__swsetup_r+0x6a>
 801037c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010380:	4299      	cmp	r1, r3
 8010382:	d002      	beq.n	801038a <__swsetup_r+0x66>
 8010384:	4630      	mov	r0, r6
 8010386:	f7ff fd2d 	bl	800fde4 <_free_r>
 801038a:	2300      	movs	r3, #0
 801038c:	6363      	str	r3, [r4, #52]	; 0x34
 801038e:	89a3      	ldrh	r3, [r4, #12]
 8010390:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010394:	81a3      	strh	r3, [r4, #12]
 8010396:	2300      	movs	r3, #0
 8010398:	6063      	str	r3, [r4, #4]
 801039a:	6923      	ldr	r3, [r4, #16]
 801039c:	6023      	str	r3, [r4, #0]
 801039e:	89a3      	ldrh	r3, [r4, #12]
 80103a0:	f043 0308 	orr.w	r3, r3, #8
 80103a4:	81a3      	strh	r3, [r4, #12]
 80103a6:	6923      	ldr	r3, [r4, #16]
 80103a8:	b94b      	cbnz	r3, 80103be <__swsetup_r+0x9a>
 80103aa:	89a3      	ldrh	r3, [r4, #12]
 80103ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80103b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103b4:	d003      	beq.n	80103be <__swsetup_r+0x9a>
 80103b6:	4621      	mov	r1, r4
 80103b8:	4630      	mov	r0, r6
 80103ba:	f000 f917 	bl	80105ec <__smakebuf_r>
 80103be:	89a2      	ldrh	r2, [r4, #12]
 80103c0:	f012 0301 	ands.w	r3, r2, #1
 80103c4:	d00c      	beq.n	80103e0 <__swsetup_r+0xbc>
 80103c6:	2300      	movs	r3, #0
 80103c8:	60a3      	str	r3, [r4, #8]
 80103ca:	6963      	ldr	r3, [r4, #20]
 80103cc:	425b      	negs	r3, r3
 80103ce:	61a3      	str	r3, [r4, #24]
 80103d0:	6923      	ldr	r3, [r4, #16]
 80103d2:	b953      	cbnz	r3, 80103ea <__swsetup_r+0xc6>
 80103d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80103dc:	d1ba      	bne.n	8010354 <__swsetup_r+0x30>
 80103de:	bd70      	pop	{r4, r5, r6, pc}
 80103e0:	0792      	lsls	r2, r2, #30
 80103e2:	bf58      	it	pl
 80103e4:	6963      	ldrpl	r3, [r4, #20]
 80103e6:	60a3      	str	r3, [r4, #8]
 80103e8:	e7f2      	b.n	80103d0 <__swsetup_r+0xac>
 80103ea:	2000      	movs	r0, #0
 80103ec:	e7f7      	b.n	80103de <__swsetup_r+0xba>
 80103ee:	bf00      	nop
 80103f0:	20001300 	.word	0x20001300
 80103f4:	080117b4 	.word	0x080117b4
 80103f8:	080117d4 	.word	0x080117d4
 80103fc:	08011794 	.word	0x08011794

08010400 <_close_r>:
 8010400:	b538      	push	{r3, r4, r5, lr}
 8010402:	4c06      	ldr	r4, [pc, #24]	; (801041c <_close_r+0x1c>)
 8010404:	2300      	movs	r3, #0
 8010406:	4605      	mov	r5, r0
 8010408:	4608      	mov	r0, r1
 801040a:	6023      	str	r3, [r4, #0]
 801040c:	f7f1 fa8b 	bl	8001926 <_close>
 8010410:	1c43      	adds	r3, r0, #1
 8010412:	d102      	bne.n	801041a <_close_r+0x1a>
 8010414:	6823      	ldr	r3, [r4, #0]
 8010416:	b103      	cbz	r3, 801041a <_close_r+0x1a>
 8010418:	602b      	str	r3, [r5, #0]
 801041a:	bd38      	pop	{r3, r4, r5, pc}
 801041c:	2000c3a8 	.word	0x2000c3a8

08010420 <__sflush_r>:
 8010420:	898a      	ldrh	r2, [r1, #12]
 8010422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010426:	4605      	mov	r5, r0
 8010428:	0710      	lsls	r0, r2, #28
 801042a:	460c      	mov	r4, r1
 801042c:	d458      	bmi.n	80104e0 <__sflush_r+0xc0>
 801042e:	684b      	ldr	r3, [r1, #4]
 8010430:	2b00      	cmp	r3, #0
 8010432:	dc05      	bgt.n	8010440 <__sflush_r+0x20>
 8010434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010436:	2b00      	cmp	r3, #0
 8010438:	dc02      	bgt.n	8010440 <__sflush_r+0x20>
 801043a:	2000      	movs	r0, #0
 801043c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010442:	2e00      	cmp	r6, #0
 8010444:	d0f9      	beq.n	801043a <__sflush_r+0x1a>
 8010446:	2300      	movs	r3, #0
 8010448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801044c:	682f      	ldr	r7, [r5, #0]
 801044e:	6a21      	ldr	r1, [r4, #32]
 8010450:	602b      	str	r3, [r5, #0]
 8010452:	d032      	beq.n	80104ba <__sflush_r+0x9a>
 8010454:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010456:	89a3      	ldrh	r3, [r4, #12]
 8010458:	075a      	lsls	r2, r3, #29
 801045a:	d505      	bpl.n	8010468 <__sflush_r+0x48>
 801045c:	6863      	ldr	r3, [r4, #4]
 801045e:	1ac0      	subs	r0, r0, r3
 8010460:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010462:	b10b      	cbz	r3, 8010468 <__sflush_r+0x48>
 8010464:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010466:	1ac0      	subs	r0, r0, r3
 8010468:	2300      	movs	r3, #0
 801046a:	4602      	mov	r2, r0
 801046c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801046e:	6a21      	ldr	r1, [r4, #32]
 8010470:	4628      	mov	r0, r5
 8010472:	47b0      	blx	r6
 8010474:	1c43      	adds	r3, r0, #1
 8010476:	89a3      	ldrh	r3, [r4, #12]
 8010478:	d106      	bne.n	8010488 <__sflush_r+0x68>
 801047a:	6829      	ldr	r1, [r5, #0]
 801047c:	291d      	cmp	r1, #29
 801047e:	d848      	bhi.n	8010512 <__sflush_r+0xf2>
 8010480:	4a29      	ldr	r2, [pc, #164]	; (8010528 <__sflush_r+0x108>)
 8010482:	40ca      	lsrs	r2, r1
 8010484:	07d6      	lsls	r6, r2, #31
 8010486:	d544      	bpl.n	8010512 <__sflush_r+0xf2>
 8010488:	2200      	movs	r2, #0
 801048a:	6062      	str	r2, [r4, #4]
 801048c:	04d9      	lsls	r1, r3, #19
 801048e:	6922      	ldr	r2, [r4, #16]
 8010490:	6022      	str	r2, [r4, #0]
 8010492:	d504      	bpl.n	801049e <__sflush_r+0x7e>
 8010494:	1c42      	adds	r2, r0, #1
 8010496:	d101      	bne.n	801049c <__sflush_r+0x7c>
 8010498:	682b      	ldr	r3, [r5, #0]
 801049a:	b903      	cbnz	r3, 801049e <__sflush_r+0x7e>
 801049c:	6560      	str	r0, [r4, #84]	; 0x54
 801049e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104a0:	602f      	str	r7, [r5, #0]
 80104a2:	2900      	cmp	r1, #0
 80104a4:	d0c9      	beq.n	801043a <__sflush_r+0x1a>
 80104a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104aa:	4299      	cmp	r1, r3
 80104ac:	d002      	beq.n	80104b4 <__sflush_r+0x94>
 80104ae:	4628      	mov	r0, r5
 80104b0:	f7ff fc98 	bl	800fde4 <_free_r>
 80104b4:	2000      	movs	r0, #0
 80104b6:	6360      	str	r0, [r4, #52]	; 0x34
 80104b8:	e7c0      	b.n	801043c <__sflush_r+0x1c>
 80104ba:	2301      	movs	r3, #1
 80104bc:	4628      	mov	r0, r5
 80104be:	47b0      	blx	r6
 80104c0:	1c41      	adds	r1, r0, #1
 80104c2:	d1c8      	bne.n	8010456 <__sflush_r+0x36>
 80104c4:	682b      	ldr	r3, [r5, #0]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d0c5      	beq.n	8010456 <__sflush_r+0x36>
 80104ca:	2b1d      	cmp	r3, #29
 80104cc:	d001      	beq.n	80104d2 <__sflush_r+0xb2>
 80104ce:	2b16      	cmp	r3, #22
 80104d0:	d101      	bne.n	80104d6 <__sflush_r+0xb6>
 80104d2:	602f      	str	r7, [r5, #0]
 80104d4:	e7b1      	b.n	801043a <__sflush_r+0x1a>
 80104d6:	89a3      	ldrh	r3, [r4, #12]
 80104d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104dc:	81a3      	strh	r3, [r4, #12]
 80104de:	e7ad      	b.n	801043c <__sflush_r+0x1c>
 80104e0:	690f      	ldr	r7, [r1, #16]
 80104e2:	2f00      	cmp	r7, #0
 80104e4:	d0a9      	beq.n	801043a <__sflush_r+0x1a>
 80104e6:	0793      	lsls	r3, r2, #30
 80104e8:	680e      	ldr	r6, [r1, #0]
 80104ea:	bf08      	it	eq
 80104ec:	694b      	ldreq	r3, [r1, #20]
 80104ee:	600f      	str	r7, [r1, #0]
 80104f0:	bf18      	it	ne
 80104f2:	2300      	movne	r3, #0
 80104f4:	eba6 0807 	sub.w	r8, r6, r7
 80104f8:	608b      	str	r3, [r1, #8]
 80104fa:	f1b8 0f00 	cmp.w	r8, #0
 80104fe:	dd9c      	ble.n	801043a <__sflush_r+0x1a>
 8010500:	4643      	mov	r3, r8
 8010502:	463a      	mov	r2, r7
 8010504:	6a21      	ldr	r1, [r4, #32]
 8010506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010508:	4628      	mov	r0, r5
 801050a:	47b0      	blx	r6
 801050c:	2800      	cmp	r0, #0
 801050e:	dc06      	bgt.n	801051e <__sflush_r+0xfe>
 8010510:	89a3      	ldrh	r3, [r4, #12]
 8010512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010516:	81a3      	strh	r3, [r4, #12]
 8010518:	f04f 30ff 	mov.w	r0, #4294967295
 801051c:	e78e      	b.n	801043c <__sflush_r+0x1c>
 801051e:	4407      	add	r7, r0
 8010520:	eba8 0800 	sub.w	r8, r8, r0
 8010524:	e7e9      	b.n	80104fa <__sflush_r+0xda>
 8010526:	bf00      	nop
 8010528:	20400001 	.word	0x20400001

0801052c <_fflush_r>:
 801052c:	b538      	push	{r3, r4, r5, lr}
 801052e:	690b      	ldr	r3, [r1, #16]
 8010530:	4605      	mov	r5, r0
 8010532:	460c      	mov	r4, r1
 8010534:	b1db      	cbz	r3, 801056e <_fflush_r+0x42>
 8010536:	b118      	cbz	r0, 8010540 <_fflush_r+0x14>
 8010538:	6983      	ldr	r3, [r0, #24]
 801053a:	b90b      	cbnz	r3, 8010540 <_fflush_r+0x14>
 801053c:	f7ff f8c8 	bl	800f6d0 <__sinit>
 8010540:	4b0c      	ldr	r3, [pc, #48]	; (8010574 <_fflush_r+0x48>)
 8010542:	429c      	cmp	r4, r3
 8010544:	d109      	bne.n	801055a <_fflush_r+0x2e>
 8010546:	686c      	ldr	r4, [r5, #4]
 8010548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801054c:	b17b      	cbz	r3, 801056e <_fflush_r+0x42>
 801054e:	4621      	mov	r1, r4
 8010550:	4628      	mov	r0, r5
 8010552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010556:	f7ff bf63 	b.w	8010420 <__sflush_r>
 801055a:	4b07      	ldr	r3, [pc, #28]	; (8010578 <_fflush_r+0x4c>)
 801055c:	429c      	cmp	r4, r3
 801055e:	d101      	bne.n	8010564 <_fflush_r+0x38>
 8010560:	68ac      	ldr	r4, [r5, #8]
 8010562:	e7f1      	b.n	8010548 <_fflush_r+0x1c>
 8010564:	4b05      	ldr	r3, [pc, #20]	; (801057c <_fflush_r+0x50>)
 8010566:	429c      	cmp	r4, r3
 8010568:	bf08      	it	eq
 801056a:	68ec      	ldreq	r4, [r5, #12]
 801056c:	e7ec      	b.n	8010548 <_fflush_r+0x1c>
 801056e:	2000      	movs	r0, #0
 8010570:	bd38      	pop	{r3, r4, r5, pc}
 8010572:	bf00      	nop
 8010574:	080117b4 	.word	0x080117b4
 8010578:	080117d4 	.word	0x080117d4
 801057c:	08011794 	.word	0x08011794

08010580 <_lseek_r>:
 8010580:	b538      	push	{r3, r4, r5, lr}
 8010582:	4c07      	ldr	r4, [pc, #28]	; (80105a0 <_lseek_r+0x20>)
 8010584:	4605      	mov	r5, r0
 8010586:	4608      	mov	r0, r1
 8010588:	4611      	mov	r1, r2
 801058a:	2200      	movs	r2, #0
 801058c:	6022      	str	r2, [r4, #0]
 801058e:	461a      	mov	r2, r3
 8010590:	f7f1 f9f0 	bl	8001974 <_lseek>
 8010594:	1c43      	adds	r3, r0, #1
 8010596:	d102      	bne.n	801059e <_lseek_r+0x1e>
 8010598:	6823      	ldr	r3, [r4, #0]
 801059a:	b103      	cbz	r3, 801059e <_lseek_r+0x1e>
 801059c:	602b      	str	r3, [r5, #0]
 801059e:	bd38      	pop	{r3, r4, r5, pc}
 80105a0:	2000c3a8 	.word	0x2000c3a8

080105a4 <__swhatbuf_r>:
 80105a4:	b570      	push	{r4, r5, r6, lr}
 80105a6:	460e      	mov	r6, r1
 80105a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105ac:	2900      	cmp	r1, #0
 80105ae:	b096      	sub	sp, #88	; 0x58
 80105b0:	4614      	mov	r4, r2
 80105b2:	461d      	mov	r5, r3
 80105b4:	da07      	bge.n	80105c6 <__swhatbuf_r+0x22>
 80105b6:	2300      	movs	r3, #0
 80105b8:	602b      	str	r3, [r5, #0]
 80105ba:	89b3      	ldrh	r3, [r6, #12]
 80105bc:	061a      	lsls	r2, r3, #24
 80105be:	d410      	bmi.n	80105e2 <__swhatbuf_r+0x3e>
 80105c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105c4:	e00e      	b.n	80105e4 <__swhatbuf_r+0x40>
 80105c6:	466a      	mov	r2, sp
 80105c8:	f000 f884 	bl	80106d4 <_fstat_r>
 80105cc:	2800      	cmp	r0, #0
 80105ce:	dbf2      	blt.n	80105b6 <__swhatbuf_r+0x12>
 80105d0:	9a01      	ldr	r2, [sp, #4]
 80105d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80105d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80105da:	425a      	negs	r2, r3
 80105dc:	415a      	adcs	r2, r3
 80105de:	602a      	str	r2, [r5, #0]
 80105e0:	e7ee      	b.n	80105c0 <__swhatbuf_r+0x1c>
 80105e2:	2340      	movs	r3, #64	; 0x40
 80105e4:	2000      	movs	r0, #0
 80105e6:	6023      	str	r3, [r4, #0]
 80105e8:	b016      	add	sp, #88	; 0x58
 80105ea:	bd70      	pop	{r4, r5, r6, pc}

080105ec <__smakebuf_r>:
 80105ec:	898b      	ldrh	r3, [r1, #12]
 80105ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80105f0:	079d      	lsls	r5, r3, #30
 80105f2:	4606      	mov	r6, r0
 80105f4:	460c      	mov	r4, r1
 80105f6:	d507      	bpl.n	8010608 <__smakebuf_r+0x1c>
 80105f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80105fc:	6023      	str	r3, [r4, #0]
 80105fe:	6123      	str	r3, [r4, #16]
 8010600:	2301      	movs	r3, #1
 8010602:	6163      	str	r3, [r4, #20]
 8010604:	b002      	add	sp, #8
 8010606:	bd70      	pop	{r4, r5, r6, pc}
 8010608:	ab01      	add	r3, sp, #4
 801060a:	466a      	mov	r2, sp
 801060c:	f7ff ffca 	bl	80105a4 <__swhatbuf_r>
 8010610:	9900      	ldr	r1, [sp, #0]
 8010612:	4605      	mov	r5, r0
 8010614:	4630      	mov	r0, r6
 8010616:	f7ff fc33 	bl	800fe80 <_malloc_r>
 801061a:	b948      	cbnz	r0, 8010630 <__smakebuf_r+0x44>
 801061c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010620:	059a      	lsls	r2, r3, #22
 8010622:	d4ef      	bmi.n	8010604 <__smakebuf_r+0x18>
 8010624:	f023 0303 	bic.w	r3, r3, #3
 8010628:	f043 0302 	orr.w	r3, r3, #2
 801062c:	81a3      	strh	r3, [r4, #12]
 801062e:	e7e3      	b.n	80105f8 <__smakebuf_r+0xc>
 8010630:	4b0d      	ldr	r3, [pc, #52]	; (8010668 <__smakebuf_r+0x7c>)
 8010632:	62b3      	str	r3, [r6, #40]	; 0x28
 8010634:	89a3      	ldrh	r3, [r4, #12]
 8010636:	6020      	str	r0, [r4, #0]
 8010638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801063c:	81a3      	strh	r3, [r4, #12]
 801063e:	9b00      	ldr	r3, [sp, #0]
 8010640:	6163      	str	r3, [r4, #20]
 8010642:	9b01      	ldr	r3, [sp, #4]
 8010644:	6120      	str	r0, [r4, #16]
 8010646:	b15b      	cbz	r3, 8010660 <__smakebuf_r+0x74>
 8010648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801064c:	4630      	mov	r0, r6
 801064e:	f000 f853 	bl	80106f8 <_isatty_r>
 8010652:	b128      	cbz	r0, 8010660 <__smakebuf_r+0x74>
 8010654:	89a3      	ldrh	r3, [r4, #12]
 8010656:	f023 0303 	bic.w	r3, r3, #3
 801065a:	f043 0301 	orr.w	r3, r3, #1
 801065e:	81a3      	strh	r3, [r4, #12]
 8010660:	89a3      	ldrh	r3, [r4, #12]
 8010662:	431d      	orrs	r5, r3
 8010664:	81a5      	strh	r5, [r4, #12]
 8010666:	e7cd      	b.n	8010604 <__smakebuf_r+0x18>
 8010668:	0800f699 	.word	0x0800f699

0801066c <__ascii_mbtowc>:
 801066c:	b082      	sub	sp, #8
 801066e:	b901      	cbnz	r1, 8010672 <__ascii_mbtowc+0x6>
 8010670:	a901      	add	r1, sp, #4
 8010672:	b142      	cbz	r2, 8010686 <__ascii_mbtowc+0x1a>
 8010674:	b14b      	cbz	r3, 801068a <__ascii_mbtowc+0x1e>
 8010676:	7813      	ldrb	r3, [r2, #0]
 8010678:	600b      	str	r3, [r1, #0]
 801067a:	7812      	ldrb	r2, [r2, #0]
 801067c:	1c10      	adds	r0, r2, #0
 801067e:	bf18      	it	ne
 8010680:	2001      	movne	r0, #1
 8010682:	b002      	add	sp, #8
 8010684:	4770      	bx	lr
 8010686:	4610      	mov	r0, r2
 8010688:	e7fb      	b.n	8010682 <__ascii_mbtowc+0x16>
 801068a:	f06f 0001 	mvn.w	r0, #1
 801068e:	e7f8      	b.n	8010682 <__ascii_mbtowc+0x16>

08010690 <__malloc_lock>:
 8010690:	4770      	bx	lr

08010692 <__malloc_unlock>:
 8010692:	4770      	bx	lr

08010694 <_read_r>:
 8010694:	b538      	push	{r3, r4, r5, lr}
 8010696:	4c07      	ldr	r4, [pc, #28]	; (80106b4 <_read_r+0x20>)
 8010698:	4605      	mov	r5, r0
 801069a:	4608      	mov	r0, r1
 801069c:	4611      	mov	r1, r2
 801069e:	2200      	movs	r2, #0
 80106a0:	6022      	str	r2, [r4, #0]
 80106a2:	461a      	mov	r2, r3
 80106a4:	f7f1 f906 	bl	80018b4 <_read>
 80106a8:	1c43      	adds	r3, r0, #1
 80106aa:	d102      	bne.n	80106b2 <_read_r+0x1e>
 80106ac:	6823      	ldr	r3, [r4, #0]
 80106ae:	b103      	cbz	r3, 80106b2 <_read_r+0x1e>
 80106b0:	602b      	str	r3, [r5, #0]
 80106b2:	bd38      	pop	{r3, r4, r5, pc}
 80106b4:	2000c3a8 	.word	0x2000c3a8

080106b8 <__ascii_wctomb>:
 80106b8:	b149      	cbz	r1, 80106ce <__ascii_wctomb+0x16>
 80106ba:	2aff      	cmp	r2, #255	; 0xff
 80106bc:	bf85      	ittet	hi
 80106be:	238a      	movhi	r3, #138	; 0x8a
 80106c0:	6003      	strhi	r3, [r0, #0]
 80106c2:	700a      	strbls	r2, [r1, #0]
 80106c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80106c8:	bf98      	it	ls
 80106ca:	2001      	movls	r0, #1
 80106cc:	4770      	bx	lr
 80106ce:	4608      	mov	r0, r1
 80106d0:	4770      	bx	lr
	...

080106d4 <_fstat_r>:
 80106d4:	b538      	push	{r3, r4, r5, lr}
 80106d6:	4c07      	ldr	r4, [pc, #28]	; (80106f4 <_fstat_r+0x20>)
 80106d8:	2300      	movs	r3, #0
 80106da:	4605      	mov	r5, r0
 80106dc:	4608      	mov	r0, r1
 80106de:	4611      	mov	r1, r2
 80106e0:	6023      	str	r3, [r4, #0]
 80106e2:	f7f1 f92c 	bl	800193e <_fstat>
 80106e6:	1c43      	adds	r3, r0, #1
 80106e8:	d102      	bne.n	80106f0 <_fstat_r+0x1c>
 80106ea:	6823      	ldr	r3, [r4, #0]
 80106ec:	b103      	cbz	r3, 80106f0 <_fstat_r+0x1c>
 80106ee:	602b      	str	r3, [r5, #0]
 80106f0:	bd38      	pop	{r3, r4, r5, pc}
 80106f2:	bf00      	nop
 80106f4:	2000c3a8 	.word	0x2000c3a8

080106f8 <_isatty_r>:
 80106f8:	b538      	push	{r3, r4, r5, lr}
 80106fa:	4c06      	ldr	r4, [pc, #24]	; (8010714 <_isatty_r+0x1c>)
 80106fc:	2300      	movs	r3, #0
 80106fe:	4605      	mov	r5, r0
 8010700:	4608      	mov	r0, r1
 8010702:	6023      	str	r3, [r4, #0]
 8010704:	f7f1 f92b 	bl	800195e <_isatty>
 8010708:	1c43      	adds	r3, r0, #1
 801070a:	d102      	bne.n	8010712 <_isatty_r+0x1a>
 801070c:	6823      	ldr	r3, [r4, #0]
 801070e:	b103      	cbz	r3, 8010712 <_isatty_r+0x1a>
 8010710:	602b      	str	r3, [r5, #0]
 8010712:	bd38      	pop	{r3, r4, r5, pc}
 8010714:	2000c3a8 	.word	0x2000c3a8

08010718 <asin>:
 8010718:	b5f0      	push	{r4, r5, r6, r7, lr}
 801071a:	ed2d 8b02 	vpush	{d8}
 801071e:	4e26      	ldr	r6, [pc, #152]	; (80107b8 <asin+0xa0>)
 8010720:	b08b      	sub	sp, #44	; 0x2c
 8010722:	ec55 4b10 	vmov	r4, r5, d0
 8010726:	f000 f8ab 	bl	8010880 <__ieee754_asin>
 801072a:	f996 3000 	ldrsb.w	r3, [r6]
 801072e:	eeb0 8a40 	vmov.f32	s16, s0
 8010732:	eef0 8a60 	vmov.f32	s17, s1
 8010736:	3301      	adds	r3, #1
 8010738:	d036      	beq.n	80107a8 <asin+0x90>
 801073a:	4622      	mov	r2, r4
 801073c:	462b      	mov	r3, r5
 801073e:	4620      	mov	r0, r4
 8010740:	4629      	mov	r1, r5
 8010742:	f7f0 f9fb 	bl	8000b3c <__aeabi_dcmpun>
 8010746:	4607      	mov	r7, r0
 8010748:	bb70      	cbnz	r0, 80107a8 <asin+0x90>
 801074a:	ec45 4b10 	vmov	d0, r4, r5
 801074e:	f000 fdd7 	bl	8011300 <fabs>
 8010752:	2200      	movs	r2, #0
 8010754:	4b19      	ldr	r3, [pc, #100]	; (80107bc <asin+0xa4>)
 8010756:	ec51 0b10 	vmov	r0, r1, d0
 801075a:	f7f0 f9e5 	bl	8000b28 <__aeabi_dcmpgt>
 801075e:	b318      	cbz	r0, 80107a8 <asin+0x90>
 8010760:	2301      	movs	r3, #1
 8010762:	9300      	str	r3, [sp, #0]
 8010764:	4816      	ldr	r0, [pc, #88]	; (80107c0 <asin+0xa8>)
 8010766:	4b17      	ldr	r3, [pc, #92]	; (80107c4 <asin+0xac>)
 8010768:	9301      	str	r3, [sp, #4]
 801076a:	9708      	str	r7, [sp, #32]
 801076c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8010770:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8010774:	f000 fdd0 	bl	8011318 <nan>
 8010778:	f996 3000 	ldrsb.w	r3, [r6]
 801077c:	2b02      	cmp	r3, #2
 801077e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8010782:	d104      	bne.n	801078e <asin+0x76>
 8010784:	f7fd fc6c 	bl	800e060 <__errno>
 8010788:	2321      	movs	r3, #33	; 0x21
 801078a:	6003      	str	r3, [r0, #0]
 801078c:	e004      	b.n	8010798 <asin+0x80>
 801078e:	4668      	mov	r0, sp
 8010790:	f000 fdbf 	bl	8011312 <matherr>
 8010794:	2800      	cmp	r0, #0
 8010796:	d0f5      	beq.n	8010784 <asin+0x6c>
 8010798:	9b08      	ldr	r3, [sp, #32]
 801079a:	b11b      	cbz	r3, 80107a4 <asin+0x8c>
 801079c:	f7fd fc60 	bl	800e060 <__errno>
 80107a0:	9b08      	ldr	r3, [sp, #32]
 80107a2:	6003      	str	r3, [r0, #0]
 80107a4:	ed9d 8b06 	vldr	d8, [sp, #24]
 80107a8:	eeb0 0a48 	vmov.f32	s0, s16
 80107ac:	eef0 0a68 	vmov.f32	s1, s17
 80107b0:	b00b      	add	sp, #44	; 0x2c
 80107b2:	ecbd 8b02 	vpop	{d8}
 80107b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107b8:	200014d0 	.word	0x200014d0
 80107bc:	3ff00000 	.word	0x3ff00000
 80107c0:	080118f9 	.word	0x080118f9
 80107c4:	08011a10 	.word	0x08011a10

080107c8 <atan2>:
 80107c8:	f000 ba6a 	b.w	8010ca0 <__ieee754_atan2>

080107cc <sqrt>:
 80107cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107d0:	ed2d 8b02 	vpush	{d8}
 80107d4:	b08b      	sub	sp, #44	; 0x2c
 80107d6:	ec55 4b10 	vmov	r4, r5, d0
 80107da:	f000 fb3f 	bl	8010e5c <__ieee754_sqrt>
 80107de:	4b26      	ldr	r3, [pc, #152]	; (8010878 <sqrt+0xac>)
 80107e0:	eeb0 8a40 	vmov.f32	s16, s0
 80107e4:	eef0 8a60 	vmov.f32	s17, s1
 80107e8:	f993 6000 	ldrsb.w	r6, [r3]
 80107ec:	1c73      	adds	r3, r6, #1
 80107ee:	d02a      	beq.n	8010846 <sqrt+0x7a>
 80107f0:	4622      	mov	r2, r4
 80107f2:	462b      	mov	r3, r5
 80107f4:	4620      	mov	r0, r4
 80107f6:	4629      	mov	r1, r5
 80107f8:	f7f0 f9a0 	bl	8000b3c <__aeabi_dcmpun>
 80107fc:	4607      	mov	r7, r0
 80107fe:	bb10      	cbnz	r0, 8010846 <sqrt+0x7a>
 8010800:	f04f 0800 	mov.w	r8, #0
 8010804:	f04f 0900 	mov.w	r9, #0
 8010808:	4642      	mov	r2, r8
 801080a:	464b      	mov	r3, r9
 801080c:	4620      	mov	r0, r4
 801080e:	4629      	mov	r1, r5
 8010810:	f7f0 f96c 	bl	8000aec <__aeabi_dcmplt>
 8010814:	b1b8      	cbz	r0, 8010846 <sqrt+0x7a>
 8010816:	2301      	movs	r3, #1
 8010818:	9300      	str	r3, [sp, #0]
 801081a:	4b18      	ldr	r3, [pc, #96]	; (801087c <sqrt+0xb0>)
 801081c:	9301      	str	r3, [sp, #4]
 801081e:	9708      	str	r7, [sp, #32]
 8010820:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8010824:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8010828:	b9b6      	cbnz	r6, 8010858 <sqrt+0x8c>
 801082a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801082e:	4668      	mov	r0, sp
 8010830:	f000 fd6f 	bl	8011312 <matherr>
 8010834:	b1d0      	cbz	r0, 801086c <sqrt+0xa0>
 8010836:	9b08      	ldr	r3, [sp, #32]
 8010838:	b11b      	cbz	r3, 8010842 <sqrt+0x76>
 801083a:	f7fd fc11 	bl	800e060 <__errno>
 801083e:	9b08      	ldr	r3, [sp, #32]
 8010840:	6003      	str	r3, [r0, #0]
 8010842:	ed9d 8b06 	vldr	d8, [sp, #24]
 8010846:	eeb0 0a48 	vmov.f32	s0, s16
 801084a:	eef0 0a68 	vmov.f32	s1, s17
 801084e:	b00b      	add	sp, #44	; 0x2c
 8010850:	ecbd 8b02 	vpop	{d8}
 8010854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010858:	4642      	mov	r2, r8
 801085a:	464b      	mov	r3, r9
 801085c:	4640      	mov	r0, r8
 801085e:	4649      	mov	r1, r9
 8010860:	f7ef fffc 	bl	800085c <__aeabi_ddiv>
 8010864:	2e02      	cmp	r6, #2
 8010866:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801086a:	d1e0      	bne.n	801082e <sqrt+0x62>
 801086c:	f7fd fbf8 	bl	800e060 <__errno>
 8010870:	2321      	movs	r3, #33	; 0x21
 8010872:	6003      	str	r3, [r0, #0]
 8010874:	e7df      	b.n	8010836 <sqrt+0x6a>
 8010876:	bf00      	nop
 8010878:	200014d0 	.word	0x200014d0
 801087c:	08011a15 	.word	0x08011a15

08010880 <__ieee754_asin>:
 8010880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010884:	ec55 4b10 	vmov	r4, r5, d0
 8010888:	4bcb      	ldr	r3, [pc, #812]	; (8010bb8 <__ieee754_asin+0x338>)
 801088a:	b087      	sub	sp, #28
 801088c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8010890:	429f      	cmp	r7, r3
 8010892:	9501      	str	r5, [sp, #4]
 8010894:	dd31      	ble.n	80108fa <__ieee754_asin+0x7a>
 8010896:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801089a:	ee10 3a10 	vmov	r3, s0
 801089e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80108a2:	433b      	orrs	r3, r7
 80108a4:	d117      	bne.n	80108d6 <__ieee754_asin+0x56>
 80108a6:	a3aa      	add	r3, pc, #680	; (adr r3, 8010b50 <__ieee754_asin+0x2d0>)
 80108a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ac:	ee10 0a10 	vmov	r0, s0
 80108b0:	4629      	mov	r1, r5
 80108b2:	f7ef fea9 	bl	8000608 <__aeabi_dmul>
 80108b6:	a3a8      	add	r3, pc, #672	; (adr r3, 8010b58 <__ieee754_asin+0x2d8>)
 80108b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108bc:	4606      	mov	r6, r0
 80108be:	460f      	mov	r7, r1
 80108c0:	4620      	mov	r0, r4
 80108c2:	4629      	mov	r1, r5
 80108c4:	f7ef fea0 	bl	8000608 <__aeabi_dmul>
 80108c8:	4602      	mov	r2, r0
 80108ca:	460b      	mov	r3, r1
 80108cc:	4630      	mov	r0, r6
 80108ce:	4639      	mov	r1, r7
 80108d0:	f7ef fce4 	bl	800029c <__adddf3>
 80108d4:	e00a      	b.n	80108ec <__ieee754_asin+0x6c>
 80108d6:	ee10 2a10 	vmov	r2, s0
 80108da:	462b      	mov	r3, r5
 80108dc:	4620      	mov	r0, r4
 80108de:	4629      	mov	r1, r5
 80108e0:	f7ef fcda 	bl	8000298 <__aeabi_dsub>
 80108e4:	4602      	mov	r2, r0
 80108e6:	460b      	mov	r3, r1
 80108e8:	f7ef ffb8 	bl	800085c <__aeabi_ddiv>
 80108ec:	4604      	mov	r4, r0
 80108ee:	460d      	mov	r5, r1
 80108f0:	ec45 4b10 	vmov	d0, r4, r5
 80108f4:	b007      	add	sp, #28
 80108f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108fa:	4bb0      	ldr	r3, [pc, #704]	; (8010bbc <__ieee754_asin+0x33c>)
 80108fc:	429f      	cmp	r7, r3
 80108fe:	dc11      	bgt.n	8010924 <__ieee754_asin+0xa4>
 8010900:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8010904:	f280 80ae 	bge.w	8010a64 <__ieee754_asin+0x1e4>
 8010908:	a395      	add	r3, pc, #596	; (adr r3, 8010b60 <__ieee754_asin+0x2e0>)
 801090a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090e:	ee10 0a10 	vmov	r0, s0
 8010912:	4629      	mov	r1, r5
 8010914:	f7ef fcc2 	bl	800029c <__adddf3>
 8010918:	2200      	movs	r2, #0
 801091a:	4ba9      	ldr	r3, [pc, #676]	; (8010bc0 <__ieee754_asin+0x340>)
 801091c:	f7f0 f904 	bl	8000b28 <__aeabi_dcmpgt>
 8010920:	2800      	cmp	r0, #0
 8010922:	d1e5      	bne.n	80108f0 <__ieee754_asin+0x70>
 8010924:	ec45 4b10 	vmov	d0, r4, r5
 8010928:	f000 fcea 	bl	8011300 <fabs>
 801092c:	2000      	movs	r0, #0
 801092e:	ec53 2b10 	vmov	r2, r3, d0
 8010932:	49a3      	ldr	r1, [pc, #652]	; (8010bc0 <__ieee754_asin+0x340>)
 8010934:	f7ef fcb0 	bl	8000298 <__aeabi_dsub>
 8010938:	2200      	movs	r2, #0
 801093a:	4ba2      	ldr	r3, [pc, #648]	; (8010bc4 <__ieee754_asin+0x344>)
 801093c:	f7ef fe64 	bl	8000608 <__aeabi_dmul>
 8010940:	a389      	add	r3, pc, #548	; (adr r3, 8010b68 <__ieee754_asin+0x2e8>)
 8010942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010946:	4604      	mov	r4, r0
 8010948:	460d      	mov	r5, r1
 801094a:	f7ef fe5d 	bl	8000608 <__aeabi_dmul>
 801094e:	a388      	add	r3, pc, #544	; (adr r3, 8010b70 <__ieee754_asin+0x2f0>)
 8010950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010954:	f7ef fca2 	bl	800029c <__adddf3>
 8010958:	4622      	mov	r2, r4
 801095a:	462b      	mov	r3, r5
 801095c:	f7ef fe54 	bl	8000608 <__aeabi_dmul>
 8010960:	a385      	add	r3, pc, #532	; (adr r3, 8010b78 <__ieee754_asin+0x2f8>)
 8010962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010966:	f7ef fc97 	bl	8000298 <__aeabi_dsub>
 801096a:	4622      	mov	r2, r4
 801096c:	462b      	mov	r3, r5
 801096e:	f7ef fe4b 	bl	8000608 <__aeabi_dmul>
 8010972:	a383      	add	r3, pc, #524	; (adr r3, 8010b80 <__ieee754_asin+0x300>)
 8010974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010978:	f7ef fc90 	bl	800029c <__adddf3>
 801097c:	4622      	mov	r2, r4
 801097e:	462b      	mov	r3, r5
 8010980:	f7ef fe42 	bl	8000608 <__aeabi_dmul>
 8010984:	a380      	add	r3, pc, #512	; (adr r3, 8010b88 <__ieee754_asin+0x308>)
 8010986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801098a:	f7ef fc85 	bl	8000298 <__aeabi_dsub>
 801098e:	4622      	mov	r2, r4
 8010990:	462b      	mov	r3, r5
 8010992:	f7ef fe39 	bl	8000608 <__aeabi_dmul>
 8010996:	a37e      	add	r3, pc, #504	; (adr r3, 8010b90 <__ieee754_asin+0x310>)
 8010998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801099c:	f7ef fc7e 	bl	800029c <__adddf3>
 80109a0:	4622      	mov	r2, r4
 80109a2:	462b      	mov	r3, r5
 80109a4:	f7ef fe30 	bl	8000608 <__aeabi_dmul>
 80109a8:	a37b      	add	r3, pc, #492	; (adr r3, 8010b98 <__ieee754_asin+0x318>)
 80109aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ae:	4680      	mov	r8, r0
 80109b0:	4689      	mov	r9, r1
 80109b2:	4620      	mov	r0, r4
 80109b4:	4629      	mov	r1, r5
 80109b6:	f7ef fe27 	bl	8000608 <__aeabi_dmul>
 80109ba:	a379      	add	r3, pc, #484	; (adr r3, 8010ba0 <__ieee754_asin+0x320>)
 80109bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c0:	f7ef fc6a 	bl	8000298 <__aeabi_dsub>
 80109c4:	4622      	mov	r2, r4
 80109c6:	462b      	mov	r3, r5
 80109c8:	f7ef fe1e 	bl	8000608 <__aeabi_dmul>
 80109cc:	a376      	add	r3, pc, #472	; (adr r3, 8010ba8 <__ieee754_asin+0x328>)
 80109ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d2:	f7ef fc63 	bl	800029c <__adddf3>
 80109d6:	4622      	mov	r2, r4
 80109d8:	462b      	mov	r3, r5
 80109da:	f7ef fe15 	bl	8000608 <__aeabi_dmul>
 80109de:	a374      	add	r3, pc, #464	; (adr r3, 8010bb0 <__ieee754_asin+0x330>)
 80109e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e4:	f7ef fc58 	bl	8000298 <__aeabi_dsub>
 80109e8:	4622      	mov	r2, r4
 80109ea:	462b      	mov	r3, r5
 80109ec:	f7ef fe0c 	bl	8000608 <__aeabi_dmul>
 80109f0:	4b73      	ldr	r3, [pc, #460]	; (8010bc0 <__ieee754_asin+0x340>)
 80109f2:	2200      	movs	r2, #0
 80109f4:	f7ef fc52 	bl	800029c <__adddf3>
 80109f8:	ec45 4b10 	vmov	d0, r4, r5
 80109fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a00:	f000 fa2c 	bl	8010e5c <__ieee754_sqrt>
 8010a04:	4b70      	ldr	r3, [pc, #448]	; (8010bc8 <__ieee754_asin+0x348>)
 8010a06:	429f      	cmp	r7, r3
 8010a08:	ec5b ab10 	vmov	sl, fp, d0
 8010a0c:	f340 80de 	ble.w	8010bcc <__ieee754_asin+0x34c>
 8010a10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a14:	4640      	mov	r0, r8
 8010a16:	4649      	mov	r1, r9
 8010a18:	f7ef ff20 	bl	800085c <__aeabi_ddiv>
 8010a1c:	4652      	mov	r2, sl
 8010a1e:	465b      	mov	r3, fp
 8010a20:	f7ef fdf2 	bl	8000608 <__aeabi_dmul>
 8010a24:	4652      	mov	r2, sl
 8010a26:	465b      	mov	r3, fp
 8010a28:	f7ef fc38 	bl	800029c <__adddf3>
 8010a2c:	4602      	mov	r2, r0
 8010a2e:	460b      	mov	r3, r1
 8010a30:	f7ef fc34 	bl	800029c <__adddf3>
 8010a34:	a348      	add	r3, pc, #288	; (adr r3, 8010b58 <__ieee754_asin+0x2d8>)
 8010a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a3a:	f7ef fc2d 	bl	8000298 <__aeabi_dsub>
 8010a3e:	4602      	mov	r2, r0
 8010a40:	460b      	mov	r3, r1
 8010a42:	a143      	add	r1, pc, #268	; (adr r1, 8010b50 <__ieee754_asin+0x2d0>)
 8010a44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a48:	f7ef fc26 	bl	8000298 <__aeabi_dsub>
 8010a4c:	9b01      	ldr	r3, [sp, #4]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	bfdc      	itt	le
 8010a52:	4602      	movle	r2, r0
 8010a54:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8010a58:	4604      	mov	r4, r0
 8010a5a:	460d      	mov	r5, r1
 8010a5c:	bfdc      	itt	le
 8010a5e:	4614      	movle	r4, r2
 8010a60:	461d      	movle	r5, r3
 8010a62:	e745      	b.n	80108f0 <__ieee754_asin+0x70>
 8010a64:	ee10 2a10 	vmov	r2, s0
 8010a68:	ee10 0a10 	vmov	r0, s0
 8010a6c:	462b      	mov	r3, r5
 8010a6e:	4629      	mov	r1, r5
 8010a70:	f7ef fdca 	bl	8000608 <__aeabi_dmul>
 8010a74:	a33c      	add	r3, pc, #240	; (adr r3, 8010b68 <__ieee754_asin+0x2e8>)
 8010a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a7a:	4606      	mov	r6, r0
 8010a7c:	460f      	mov	r7, r1
 8010a7e:	f7ef fdc3 	bl	8000608 <__aeabi_dmul>
 8010a82:	a33b      	add	r3, pc, #236	; (adr r3, 8010b70 <__ieee754_asin+0x2f0>)
 8010a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a88:	f7ef fc08 	bl	800029c <__adddf3>
 8010a8c:	4632      	mov	r2, r6
 8010a8e:	463b      	mov	r3, r7
 8010a90:	f7ef fdba 	bl	8000608 <__aeabi_dmul>
 8010a94:	a338      	add	r3, pc, #224	; (adr r3, 8010b78 <__ieee754_asin+0x2f8>)
 8010a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a9a:	f7ef fbfd 	bl	8000298 <__aeabi_dsub>
 8010a9e:	4632      	mov	r2, r6
 8010aa0:	463b      	mov	r3, r7
 8010aa2:	f7ef fdb1 	bl	8000608 <__aeabi_dmul>
 8010aa6:	a336      	add	r3, pc, #216	; (adr r3, 8010b80 <__ieee754_asin+0x300>)
 8010aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aac:	f7ef fbf6 	bl	800029c <__adddf3>
 8010ab0:	4632      	mov	r2, r6
 8010ab2:	463b      	mov	r3, r7
 8010ab4:	f7ef fda8 	bl	8000608 <__aeabi_dmul>
 8010ab8:	a333      	add	r3, pc, #204	; (adr r3, 8010b88 <__ieee754_asin+0x308>)
 8010aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010abe:	f7ef fbeb 	bl	8000298 <__aeabi_dsub>
 8010ac2:	4632      	mov	r2, r6
 8010ac4:	463b      	mov	r3, r7
 8010ac6:	f7ef fd9f 	bl	8000608 <__aeabi_dmul>
 8010aca:	a331      	add	r3, pc, #196	; (adr r3, 8010b90 <__ieee754_asin+0x310>)
 8010acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad0:	f7ef fbe4 	bl	800029c <__adddf3>
 8010ad4:	4632      	mov	r2, r6
 8010ad6:	463b      	mov	r3, r7
 8010ad8:	f7ef fd96 	bl	8000608 <__aeabi_dmul>
 8010adc:	a32e      	add	r3, pc, #184	; (adr r3, 8010b98 <__ieee754_asin+0x318>)
 8010ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ae2:	4680      	mov	r8, r0
 8010ae4:	4689      	mov	r9, r1
 8010ae6:	4630      	mov	r0, r6
 8010ae8:	4639      	mov	r1, r7
 8010aea:	f7ef fd8d 	bl	8000608 <__aeabi_dmul>
 8010aee:	a32c      	add	r3, pc, #176	; (adr r3, 8010ba0 <__ieee754_asin+0x320>)
 8010af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af4:	f7ef fbd0 	bl	8000298 <__aeabi_dsub>
 8010af8:	4632      	mov	r2, r6
 8010afa:	463b      	mov	r3, r7
 8010afc:	f7ef fd84 	bl	8000608 <__aeabi_dmul>
 8010b00:	a329      	add	r3, pc, #164	; (adr r3, 8010ba8 <__ieee754_asin+0x328>)
 8010b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b06:	f7ef fbc9 	bl	800029c <__adddf3>
 8010b0a:	4632      	mov	r2, r6
 8010b0c:	463b      	mov	r3, r7
 8010b0e:	f7ef fd7b 	bl	8000608 <__aeabi_dmul>
 8010b12:	a327      	add	r3, pc, #156	; (adr r3, 8010bb0 <__ieee754_asin+0x330>)
 8010b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b18:	f7ef fbbe 	bl	8000298 <__aeabi_dsub>
 8010b1c:	4632      	mov	r2, r6
 8010b1e:	463b      	mov	r3, r7
 8010b20:	f7ef fd72 	bl	8000608 <__aeabi_dmul>
 8010b24:	2200      	movs	r2, #0
 8010b26:	4b26      	ldr	r3, [pc, #152]	; (8010bc0 <__ieee754_asin+0x340>)
 8010b28:	f7ef fbb8 	bl	800029c <__adddf3>
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	460b      	mov	r3, r1
 8010b30:	4640      	mov	r0, r8
 8010b32:	4649      	mov	r1, r9
 8010b34:	f7ef fe92 	bl	800085c <__aeabi_ddiv>
 8010b38:	4622      	mov	r2, r4
 8010b3a:	462b      	mov	r3, r5
 8010b3c:	f7ef fd64 	bl	8000608 <__aeabi_dmul>
 8010b40:	4602      	mov	r2, r0
 8010b42:	460b      	mov	r3, r1
 8010b44:	4620      	mov	r0, r4
 8010b46:	4629      	mov	r1, r5
 8010b48:	e6c2      	b.n	80108d0 <__ieee754_asin+0x50>
 8010b4a:	bf00      	nop
 8010b4c:	f3af 8000 	nop.w
 8010b50:	54442d18 	.word	0x54442d18
 8010b54:	3ff921fb 	.word	0x3ff921fb
 8010b58:	33145c07 	.word	0x33145c07
 8010b5c:	3c91a626 	.word	0x3c91a626
 8010b60:	8800759c 	.word	0x8800759c
 8010b64:	7e37e43c 	.word	0x7e37e43c
 8010b68:	0dfdf709 	.word	0x0dfdf709
 8010b6c:	3f023de1 	.word	0x3f023de1
 8010b70:	7501b288 	.word	0x7501b288
 8010b74:	3f49efe0 	.word	0x3f49efe0
 8010b78:	b5688f3b 	.word	0xb5688f3b
 8010b7c:	3fa48228 	.word	0x3fa48228
 8010b80:	0e884455 	.word	0x0e884455
 8010b84:	3fc9c155 	.word	0x3fc9c155
 8010b88:	03eb6f7d 	.word	0x03eb6f7d
 8010b8c:	3fd4d612 	.word	0x3fd4d612
 8010b90:	55555555 	.word	0x55555555
 8010b94:	3fc55555 	.word	0x3fc55555
 8010b98:	b12e9282 	.word	0xb12e9282
 8010b9c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010ba0:	1b8d0159 	.word	0x1b8d0159
 8010ba4:	3fe6066c 	.word	0x3fe6066c
 8010ba8:	9c598ac8 	.word	0x9c598ac8
 8010bac:	40002ae5 	.word	0x40002ae5
 8010bb0:	1c8a2d4b 	.word	0x1c8a2d4b
 8010bb4:	40033a27 	.word	0x40033a27
 8010bb8:	3fefffff 	.word	0x3fefffff
 8010bbc:	3fdfffff 	.word	0x3fdfffff
 8010bc0:	3ff00000 	.word	0x3ff00000
 8010bc4:	3fe00000 	.word	0x3fe00000
 8010bc8:	3fef3332 	.word	0x3fef3332
 8010bcc:	ee10 2a10 	vmov	r2, s0
 8010bd0:	ee10 0a10 	vmov	r0, s0
 8010bd4:	465b      	mov	r3, fp
 8010bd6:	4659      	mov	r1, fp
 8010bd8:	f7ef fb60 	bl	800029c <__adddf3>
 8010bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010be0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010be4:	4640      	mov	r0, r8
 8010be6:	4649      	mov	r1, r9
 8010be8:	f7ef fe38 	bl	800085c <__aeabi_ddiv>
 8010bec:	4602      	mov	r2, r0
 8010bee:	460b      	mov	r3, r1
 8010bf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bf4:	f7ef fd08 	bl	8000608 <__aeabi_dmul>
 8010bf8:	2600      	movs	r6, #0
 8010bfa:	4680      	mov	r8, r0
 8010bfc:	4689      	mov	r9, r1
 8010bfe:	4632      	mov	r2, r6
 8010c00:	465b      	mov	r3, fp
 8010c02:	4630      	mov	r0, r6
 8010c04:	4659      	mov	r1, fp
 8010c06:	f7ef fcff 	bl	8000608 <__aeabi_dmul>
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	460b      	mov	r3, r1
 8010c0e:	4620      	mov	r0, r4
 8010c10:	4629      	mov	r1, r5
 8010c12:	f7ef fb41 	bl	8000298 <__aeabi_dsub>
 8010c16:	4632      	mov	r2, r6
 8010c18:	4604      	mov	r4, r0
 8010c1a:	460d      	mov	r5, r1
 8010c1c:	465b      	mov	r3, fp
 8010c1e:	4650      	mov	r0, sl
 8010c20:	4659      	mov	r1, fp
 8010c22:	f7ef fb3b 	bl	800029c <__adddf3>
 8010c26:	4602      	mov	r2, r0
 8010c28:	460b      	mov	r3, r1
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	4629      	mov	r1, r5
 8010c2e:	f7ef fe15 	bl	800085c <__aeabi_ddiv>
 8010c32:	4602      	mov	r2, r0
 8010c34:	460b      	mov	r3, r1
 8010c36:	f7ef fb31 	bl	800029c <__adddf3>
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	460b      	mov	r3, r1
 8010c3e:	a114      	add	r1, pc, #80	; (adr r1, 8010c90 <__ieee754_asin+0x410>)
 8010c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c44:	f7ef fb28 	bl	8000298 <__aeabi_dsub>
 8010c48:	4602      	mov	r2, r0
 8010c4a:	460b      	mov	r3, r1
 8010c4c:	4640      	mov	r0, r8
 8010c4e:	4649      	mov	r1, r9
 8010c50:	f7ef fb22 	bl	8000298 <__aeabi_dsub>
 8010c54:	465f      	mov	r7, fp
 8010c56:	4604      	mov	r4, r0
 8010c58:	460d      	mov	r5, r1
 8010c5a:	4632      	mov	r2, r6
 8010c5c:	465b      	mov	r3, fp
 8010c5e:	4630      	mov	r0, r6
 8010c60:	4639      	mov	r1, r7
 8010c62:	f7ef fb1b 	bl	800029c <__adddf3>
 8010c66:	4602      	mov	r2, r0
 8010c68:	460b      	mov	r3, r1
 8010c6a:	a10b      	add	r1, pc, #44	; (adr r1, 8010c98 <__ieee754_asin+0x418>)
 8010c6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c70:	f7ef fb12 	bl	8000298 <__aeabi_dsub>
 8010c74:	4602      	mov	r2, r0
 8010c76:	460b      	mov	r3, r1
 8010c78:	4620      	mov	r0, r4
 8010c7a:	4629      	mov	r1, r5
 8010c7c:	f7ef fb0c 	bl	8000298 <__aeabi_dsub>
 8010c80:	4602      	mov	r2, r0
 8010c82:	460b      	mov	r3, r1
 8010c84:	a104      	add	r1, pc, #16	; (adr r1, 8010c98 <__ieee754_asin+0x418>)
 8010c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c8a:	e6dd      	b.n	8010a48 <__ieee754_asin+0x1c8>
 8010c8c:	f3af 8000 	nop.w
 8010c90:	33145c07 	.word	0x33145c07
 8010c94:	3c91a626 	.word	0x3c91a626
 8010c98:	54442d18 	.word	0x54442d18
 8010c9c:	3fe921fb 	.word	0x3fe921fb

08010ca0 <__ieee754_atan2>:
 8010ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ca4:	ec57 6b11 	vmov	r6, r7, d1
 8010ca8:	4273      	negs	r3, r6
 8010caa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010cae:	4333      	orrs	r3, r6
 8010cb0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8010e58 <__ieee754_atan2+0x1b8>
 8010cb4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010cb8:	4573      	cmp	r3, lr
 8010cba:	ec51 0b10 	vmov	r0, r1, d0
 8010cbe:	ee11 8a10 	vmov	r8, s2
 8010cc2:	d80a      	bhi.n	8010cda <__ieee754_atan2+0x3a>
 8010cc4:	4244      	negs	r4, r0
 8010cc6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010cca:	4304      	orrs	r4, r0
 8010ccc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010cd0:	4574      	cmp	r4, lr
 8010cd2:	468c      	mov	ip, r1
 8010cd4:	ee10 9a10 	vmov	r9, s0
 8010cd8:	d907      	bls.n	8010cea <__ieee754_atan2+0x4a>
 8010cda:	4632      	mov	r2, r6
 8010cdc:	463b      	mov	r3, r7
 8010cde:	f7ef fadd 	bl	800029c <__adddf3>
 8010ce2:	ec41 0b10 	vmov	d0, r0, r1
 8010ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010cee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010cf2:	4334      	orrs	r4, r6
 8010cf4:	d103      	bne.n	8010cfe <__ieee754_atan2+0x5e>
 8010cf6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cfa:	f000 b961 	b.w	8010fc0 <atan>
 8010cfe:	17bc      	asrs	r4, r7, #30
 8010d00:	f004 0402 	and.w	r4, r4, #2
 8010d04:	ea53 0909 	orrs.w	r9, r3, r9
 8010d08:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010d0c:	d107      	bne.n	8010d1e <__ieee754_atan2+0x7e>
 8010d0e:	2c02      	cmp	r4, #2
 8010d10:	d073      	beq.n	8010dfa <__ieee754_atan2+0x15a>
 8010d12:	2c03      	cmp	r4, #3
 8010d14:	d1e5      	bne.n	8010ce2 <__ieee754_atan2+0x42>
 8010d16:	a13e      	add	r1, pc, #248	; (adr r1, 8010e10 <__ieee754_atan2+0x170>)
 8010d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d1c:	e7e1      	b.n	8010ce2 <__ieee754_atan2+0x42>
 8010d1e:	ea52 0808 	orrs.w	r8, r2, r8
 8010d22:	d106      	bne.n	8010d32 <__ieee754_atan2+0x92>
 8010d24:	f1bc 0f00 	cmp.w	ip, #0
 8010d28:	da6b      	bge.n	8010e02 <__ieee754_atan2+0x162>
 8010d2a:	a13b      	add	r1, pc, #236	; (adr r1, 8010e18 <__ieee754_atan2+0x178>)
 8010d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d30:	e7d7      	b.n	8010ce2 <__ieee754_atan2+0x42>
 8010d32:	4572      	cmp	r2, lr
 8010d34:	d120      	bne.n	8010d78 <__ieee754_atan2+0xd8>
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d111      	bne.n	8010d5e <__ieee754_atan2+0xbe>
 8010d3a:	2c02      	cmp	r4, #2
 8010d3c:	d007      	beq.n	8010d4e <__ieee754_atan2+0xae>
 8010d3e:	2c03      	cmp	r4, #3
 8010d40:	d009      	beq.n	8010d56 <__ieee754_atan2+0xb6>
 8010d42:	2c01      	cmp	r4, #1
 8010d44:	d155      	bne.n	8010df2 <__ieee754_atan2+0x152>
 8010d46:	a136      	add	r1, pc, #216	; (adr r1, 8010e20 <__ieee754_atan2+0x180>)
 8010d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d4c:	e7c9      	b.n	8010ce2 <__ieee754_atan2+0x42>
 8010d4e:	a136      	add	r1, pc, #216	; (adr r1, 8010e28 <__ieee754_atan2+0x188>)
 8010d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d54:	e7c5      	b.n	8010ce2 <__ieee754_atan2+0x42>
 8010d56:	a136      	add	r1, pc, #216	; (adr r1, 8010e30 <__ieee754_atan2+0x190>)
 8010d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d5c:	e7c1      	b.n	8010ce2 <__ieee754_atan2+0x42>
 8010d5e:	2c02      	cmp	r4, #2
 8010d60:	d04b      	beq.n	8010dfa <__ieee754_atan2+0x15a>
 8010d62:	2c03      	cmp	r4, #3
 8010d64:	d0d7      	beq.n	8010d16 <__ieee754_atan2+0x76>
 8010d66:	2c01      	cmp	r4, #1
 8010d68:	f04f 0000 	mov.w	r0, #0
 8010d6c:	d102      	bne.n	8010d74 <__ieee754_atan2+0xd4>
 8010d6e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010d72:	e7b6      	b.n	8010ce2 <__ieee754_atan2+0x42>
 8010d74:	2100      	movs	r1, #0
 8010d76:	e7b4      	b.n	8010ce2 <__ieee754_atan2+0x42>
 8010d78:	4573      	cmp	r3, lr
 8010d7a:	d0d3      	beq.n	8010d24 <__ieee754_atan2+0x84>
 8010d7c:	1a9b      	subs	r3, r3, r2
 8010d7e:	151b      	asrs	r3, r3, #20
 8010d80:	2b3c      	cmp	r3, #60	; 0x3c
 8010d82:	dc1e      	bgt.n	8010dc2 <__ieee754_atan2+0x122>
 8010d84:	2f00      	cmp	r7, #0
 8010d86:	da01      	bge.n	8010d8c <__ieee754_atan2+0xec>
 8010d88:	333c      	adds	r3, #60	; 0x3c
 8010d8a:	db1e      	blt.n	8010dca <__ieee754_atan2+0x12a>
 8010d8c:	4632      	mov	r2, r6
 8010d8e:	463b      	mov	r3, r7
 8010d90:	f7ef fd64 	bl	800085c <__aeabi_ddiv>
 8010d94:	ec41 0b10 	vmov	d0, r0, r1
 8010d98:	f000 fab2 	bl	8011300 <fabs>
 8010d9c:	f000 f910 	bl	8010fc0 <atan>
 8010da0:	ec51 0b10 	vmov	r0, r1, d0
 8010da4:	2c01      	cmp	r4, #1
 8010da6:	d013      	beq.n	8010dd0 <__ieee754_atan2+0x130>
 8010da8:	2c02      	cmp	r4, #2
 8010daa:	d015      	beq.n	8010dd8 <__ieee754_atan2+0x138>
 8010dac:	2c00      	cmp	r4, #0
 8010dae:	d098      	beq.n	8010ce2 <__ieee754_atan2+0x42>
 8010db0:	a321      	add	r3, pc, #132	; (adr r3, 8010e38 <__ieee754_atan2+0x198>)
 8010db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db6:	f7ef fa6f 	bl	8000298 <__aeabi_dsub>
 8010dba:	a321      	add	r3, pc, #132	; (adr r3, 8010e40 <__ieee754_atan2+0x1a0>)
 8010dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc0:	e014      	b.n	8010dec <__ieee754_atan2+0x14c>
 8010dc2:	a121      	add	r1, pc, #132	; (adr r1, 8010e48 <__ieee754_atan2+0x1a8>)
 8010dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010dc8:	e7ec      	b.n	8010da4 <__ieee754_atan2+0x104>
 8010dca:	2000      	movs	r0, #0
 8010dcc:	2100      	movs	r1, #0
 8010dce:	e7e9      	b.n	8010da4 <__ieee754_atan2+0x104>
 8010dd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010dd4:	4619      	mov	r1, r3
 8010dd6:	e784      	b.n	8010ce2 <__ieee754_atan2+0x42>
 8010dd8:	a317      	add	r3, pc, #92	; (adr r3, 8010e38 <__ieee754_atan2+0x198>)
 8010dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dde:	f7ef fa5b 	bl	8000298 <__aeabi_dsub>
 8010de2:	4602      	mov	r2, r0
 8010de4:	460b      	mov	r3, r1
 8010de6:	a116      	add	r1, pc, #88	; (adr r1, 8010e40 <__ieee754_atan2+0x1a0>)
 8010de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010dec:	f7ef fa54 	bl	8000298 <__aeabi_dsub>
 8010df0:	e777      	b.n	8010ce2 <__ieee754_atan2+0x42>
 8010df2:	a117      	add	r1, pc, #92	; (adr r1, 8010e50 <__ieee754_atan2+0x1b0>)
 8010df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010df8:	e773      	b.n	8010ce2 <__ieee754_atan2+0x42>
 8010dfa:	a111      	add	r1, pc, #68	; (adr r1, 8010e40 <__ieee754_atan2+0x1a0>)
 8010dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e00:	e76f      	b.n	8010ce2 <__ieee754_atan2+0x42>
 8010e02:	a111      	add	r1, pc, #68	; (adr r1, 8010e48 <__ieee754_atan2+0x1a8>)
 8010e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e08:	e76b      	b.n	8010ce2 <__ieee754_atan2+0x42>
 8010e0a:	bf00      	nop
 8010e0c:	f3af 8000 	nop.w
 8010e10:	54442d18 	.word	0x54442d18
 8010e14:	c00921fb 	.word	0xc00921fb
 8010e18:	54442d18 	.word	0x54442d18
 8010e1c:	bff921fb 	.word	0xbff921fb
 8010e20:	54442d18 	.word	0x54442d18
 8010e24:	bfe921fb 	.word	0xbfe921fb
 8010e28:	7f3321d2 	.word	0x7f3321d2
 8010e2c:	4002d97c 	.word	0x4002d97c
 8010e30:	7f3321d2 	.word	0x7f3321d2
 8010e34:	c002d97c 	.word	0xc002d97c
 8010e38:	33145c07 	.word	0x33145c07
 8010e3c:	3ca1a626 	.word	0x3ca1a626
 8010e40:	54442d18 	.word	0x54442d18
 8010e44:	400921fb 	.word	0x400921fb
 8010e48:	54442d18 	.word	0x54442d18
 8010e4c:	3ff921fb 	.word	0x3ff921fb
 8010e50:	54442d18 	.word	0x54442d18
 8010e54:	3fe921fb 	.word	0x3fe921fb
 8010e58:	7ff00000 	.word	0x7ff00000

08010e5c <__ieee754_sqrt>:
 8010e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e60:	4955      	ldr	r1, [pc, #340]	; (8010fb8 <__ieee754_sqrt+0x15c>)
 8010e62:	ec55 4b10 	vmov	r4, r5, d0
 8010e66:	43a9      	bics	r1, r5
 8010e68:	462b      	mov	r3, r5
 8010e6a:	462a      	mov	r2, r5
 8010e6c:	d112      	bne.n	8010e94 <__ieee754_sqrt+0x38>
 8010e6e:	ee10 2a10 	vmov	r2, s0
 8010e72:	ee10 0a10 	vmov	r0, s0
 8010e76:	4629      	mov	r1, r5
 8010e78:	f7ef fbc6 	bl	8000608 <__aeabi_dmul>
 8010e7c:	4602      	mov	r2, r0
 8010e7e:	460b      	mov	r3, r1
 8010e80:	4620      	mov	r0, r4
 8010e82:	4629      	mov	r1, r5
 8010e84:	f7ef fa0a 	bl	800029c <__adddf3>
 8010e88:	4604      	mov	r4, r0
 8010e8a:	460d      	mov	r5, r1
 8010e8c:	ec45 4b10 	vmov	d0, r4, r5
 8010e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e94:	2d00      	cmp	r5, #0
 8010e96:	ee10 0a10 	vmov	r0, s0
 8010e9a:	4621      	mov	r1, r4
 8010e9c:	dc0f      	bgt.n	8010ebe <__ieee754_sqrt+0x62>
 8010e9e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010ea2:	4330      	orrs	r0, r6
 8010ea4:	d0f2      	beq.n	8010e8c <__ieee754_sqrt+0x30>
 8010ea6:	b155      	cbz	r5, 8010ebe <__ieee754_sqrt+0x62>
 8010ea8:	ee10 2a10 	vmov	r2, s0
 8010eac:	4620      	mov	r0, r4
 8010eae:	4629      	mov	r1, r5
 8010eb0:	f7ef f9f2 	bl	8000298 <__aeabi_dsub>
 8010eb4:	4602      	mov	r2, r0
 8010eb6:	460b      	mov	r3, r1
 8010eb8:	f7ef fcd0 	bl	800085c <__aeabi_ddiv>
 8010ebc:	e7e4      	b.n	8010e88 <__ieee754_sqrt+0x2c>
 8010ebe:	151b      	asrs	r3, r3, #20
 8010ec0:	d073      	beq.n	8010faa <__ieee754_sqrt+0x14e>
 8010ec2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010ec6:	07dd      	lsls	r5, r3, #31
 8010ec8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8010ecc:	bf48      	it	mi
 8010ece:	0fc8      	lsrmi	r0, r1, #31
 8010ed0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8010ed4:	bf44      	itt	mi
 8010ed6:	0049      	lslmi	r1, r1, #1
 8010ed8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8010edc:	2500      	movs	r5, #0
 8010ede:	1058      	asrs	r0, r3, #1
 8010ee0:	0fcb      	lsrs	r3, r1, #31
 8010ee2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8010ee6:	0049      	lsls	r1, r1, #1
 8010ee8:	2316      	movs	r3, #22
 8010eea:	462c      	mov	r4, r5
 8010eec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8010ef0:	19a7      	adds	r7, r4, r6
 8010ef2:	4297      	cmp	r7, r2
 8010ef4:	bfde      	ittt	le
 8010ef6:	19bc      	addle	r4, r7, r6
 8010ef8:	1bd2      	suble	r2, r2, r7
 8010efa:	19ad      	addle	r5, r5, r6
 8010efc:	0fcf      	lsrs	r7, r1, #31
 8010efe:	3b01      	subs	r3, #1
 8010f00:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8010f04:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010f08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010f0c:	d1f0      	bne.n	8010ef0 <__ieee754_sqrt+0x94>
 8010f0e:	f04f 0c20 	mov.w	ip, #32
 8010f12:	469e      	mov	lr, r3
 8010f14:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010f18:	42a2      	cmp	r2, r4
 8010f1a:	eb06 070e 	add.w	r7, r6, lr
 8010f1e:	dc02      	bgt.n	8010f26 <__ieee754_sqrt+0xca>
 8010f20:	d112      	bne.n	8010f48 <__ieee754_sqrt+0xec>
 8010f22:	428f      	cmp	r7, r1
 8010f24:	d810      	bhi.n	8010f48 <__ieee754_sqrt+0xec>
 8010f26:	2f00      	cmp	r7, #0
 8010f28:	eb07 0e06 	add.w	lr, r7, r6
 8010f2c:	da42      	bge.n	8010fb4 <__ieee754_sqrt+0x158>
 8010f2e:	f1be 0f00 	cmp.w	lr, #0
 8010f32:	db3f      	blt.n	8010fb4 <__ieee754_sqrt+0x158>
 8010f34:	f104 0801 	add.w	r8, r4, #1
 8010f38:	1b12      	subs	r2, r2, r4
 8010f3a:	428f      	cmp	r7, r1
 8010f3c:	bf88      	it	hi
 8010f3e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8010f42:	1bc9      	subs	r1, r1, r7
 8010f44:	4433      	add	r3, r6
 8010f46:	4644      	mov	r4, r8
 8010f48:	0052      	lsls	r2, r2, #1
 8010f4a:	f1bc 0c01 	subs.w	ip, ip, #1
 8010f4e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8010f52:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010f56:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010f5a:	d1dd      	bne.n	8010f18 <__ieee754_sqrt+0xbc>
 8010f5c:	430a      	orrs	r2, r1
 8010f5e:	d006      	beq.n	8010f6e <__ieee754_sqrt+0x112>
 8010f60:	1c5c      	adds	r4, r3, #1
 8010f62:	bf13      	iteet	ne
 8010f64:	3301      	addne	r3, #1
 8010f66:	3501      	addeq	r5, #1
 8010f68:	4663      	moveq	r3, ip
 8010f6a:	f023 0301 	bicne.w	r3, r3, #1
 8010f6e:	106a      	asrs	r2, r5, #1
 8010f70:	085b      	lsrs	r3, r3, #1
 8010f72:	07e9      	lsls	r1, r5, #31
 8010f74:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010f78:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010f7c:	bf48      	it	mi
 8010f7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010f82:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8010f86:	461c      	mov	r4, r3
 8010f88:	e780      	b.n	8010e8c <__ieee754_sqrt+0x30>
 8010f8a:	0aca      	lsrs	r2, r1, #11
 8010f8c:	3815      	subs	r0, #21
 8010f8e:	0549      	lsls	r1, r1, #21
 8010f90:	2a00      	cmp	r2, #0
 8010f92:	d0fa      	beq.n	8010f8a <__ieee754_sqrt+0x12e>
 8010f94:	02d6      	lsls	r6, r2, #11
 8010f96:	d50a      	bpl.n	8010fae <__ieee754_sqrt+0x152>
 8010f98:	f1c3 0420 	rsb	r4, r3, #32
 8010f9c:	fa21 f404 	lsr.w	r4, r1, r4
 8010fa0:	1e5d      	subs	r5, r3, #1
 8010fa2:	4099      	lsls	r1, r3
 8010fa4:	4322      	orrs	r2, r4
 8010fa6:	1b43      	subs	r3, r0, r5
 8010fa8:	e78b      	b.n	8010ec2 <__ieee754_sqrt+0x66>
 8010faa:	4618      	mov	r0, r3
 8010fac:	e7f0      	b.n	8010f90 <__ieee754_sqrt+0x134>
 8010fae:	0052      	lsls	r2, r2, #1
 8010fb0:	3301      	adds	r3, #1
 8010fb2:	e7ef      	b.n	8010f94 <__ieee754_sqrt+0x138>
 8010fb4:	46a0      	mov	r8, r4
 8010fb6:	e7bf      	b.n	8010f38 <__ieee754_sqrt+0xdc>
 8010fb8:	7ff00000 	.word	0x7ff00000
 8010fbc:	00000000 	.word	0x00000000

08010fc0 <atan>:
 8010fc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc4:	ec55 4b10 	vmov	r4, r5, d0
 8010fc8:	4bc3      	ldr	r3, [pc, #780]	; (80112d8 <atan+0x318>)
 8010fca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010fce:	429e      	cmp	r6, r3
 8010fd0:	46ab      	mov	fp, r5
 8010fd2:	dd18      	ble.n	8011006 <atan+0x46>
 8010fd4:	4bc1      	ldr	r3, [pc, #772]	; (80112dc <atan+0x31c>)
 8010fd6:	429e      	cmp	r6, r3
 8010fd8:	dc01      	bgt.n	8010fde <atan+0x1e>
 8010fda:	d109      	bne.n	8010ff0 <atan+0x30>
 8010fdc:	b144      	cbz	r4, 8010ff0 <atan+0x30>
 8010fde:	4622      	mov	r2, r4
 8010fe0:	462b      	mov	r3, r5
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	4629      	mov	r1, r5
 8010fe6:	f7ef f959 	bl	800029c <__adddf3>
 8010fea:	4604      	mov	r4, r0
 8010fec:	460d      	mov	r5, r1
 8010fee:	e006      	b.n	8010ffe <atan+0x3e>
 8010ff0:	f1bb 0f00 	cmp.w	fp, #0
 8010ff4:	f340 8131 	ble.w	801125a <atan+0x29a>
 8010ff8:	a59b      	add	r5, pc, #620	; (adr r5, 8011268 <atan+0x2a8>)
 8010ffa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010ffe:	ec45 4b10 	vmov	d0, r4, r5
 8011002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011006:	4bb6      	ldr	r3, [pc, #728]	; (80112e0 <atan+0x320>)
 8011008:	429e      	cmp	r6, r3
 801100a:	dc14      	bgt.n	8011036 <atan+0x76>
 801100c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011010:	429e      	cmp	r6, r3
 8011012:	dc0d      	bgt.n	8011030 <atan+0x70>
 8011014:	a396      	add	r3, pc, #600	; (adr r3, 8011270 <atan+0x2b0>)
 8011016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101a:	ee10 0a10 	vmov	r0, s0
 801101e:	4629      	mov	r1, r5
 8011020:	f7ef f93c 	bl	800029c <__adddf3>
 8011024:	2200      	movs	r2, #0
 8011026:	4baf      	ldr	r3, [pc, #700]	; (80112e4 <atan+0x324>)
 8011028:	f7ef fd7e 	bl	8000b28 <__aeabi_dcmpgt>
 801102c:	2800      	cmp	r0, #0
 801102e:	d1e6      	bne.n	8010ffe <atan+0x3e>
 8011030:	f04f 3aff 	mov.w	sl, #4294967295
 8011034:	e02b      	b.n	801108e <atan+0xce>
 8011036:	f000 f963 	bl	8011300 <fabs>
 801103a:	4bab      	ldr	r3, [pc, #684]	; (80112e8 <atan+0x328>)
 801103c:	429e      	cmp	r6, r3
 801103e:	ec55 4b10 	vmov	r4, r5, d0
 8011042:	f300 80bf 	bgt.w	80111c4 <atan+0x204>
 8011046:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801104a:	429e      	cmp	r6, r3
 801104c:	f300 80a0 	bgt.w	8011190 <atan+0x1d0>
 8011050:	ee10 2a10 	vmov	r2, s0
 8011054:	ee10 0a10 	vmov	r0, s0
 8011058:	462b      	mov	r3, r5
 801105a:	4629      	mov	r1, r5
 801105c:	f7ef f91e 	bl	800029c <__adddf3>
 8011060:	2200      	movs	r2, #0
 8011062:	4ba0      	ldr	r3, [pc, #640]	; (80112e4 <atan+0x324>)
 8011064:	f7ef f918 	bl	8000298 <__aeabi_dsub>
 8011068:	2200      	movs	r2, #0
 801106a:	4606      	mov	r6, r0
 801106c:	460f      	mov	r7, r1
 801106e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011072:	4620      	mov	r0, r4
 8011074:	4629      	mov	r1, r5
 8011076:	f7ef f911 	bl	800029c <__adddf3>
 801107a:	4602      	mov	r2, r0
 801107c:	460b      	mov	r3, r1
 801107e:	4630      	mov	r0, r6
 8011080:	4639      	mov	r1, r7
 8011082:	f7ef fbeb 	bl	800085c <__aeabi_ddiv>
 8011086:	f04f 0a00 	mov.w	sl, #0
 801108a:	4604      	mov	r4, r0
 801108c:	460d      	mov	r5, r1
 801108e:	4622      	mov	r2, r4
 8011090:	462b      	mov	r3, r5
 8011092:	4620      	mov	r0, r4
 8011094:	4629      	mov	r1, r5
 8011096:	f7ef fab7 	bl	8000608 <__aeabi_dmul>
 801109a:	4602      	mov	r2, r0
 801109c:	460b      	mov	r3, r1
 801109e:	4680      	mov	r8, r0
 80110a0:	4689      	mov	r9, r1
 80110a2:	f7ef fab1 	bl	8000608 <__aeabi_dmul>
 80110a6:	a374      	add	r3, pc, #464	; (adr r3, 8011278 <atan+0x2b8>)
 80110a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ac:	4606      	mov	r6, r0
 80110ae:	460f      	mov	r7, r1
 80110b0:	f7ef faaa 	bl	8000608 <__aeabi_dmul>
 80110b4:	a372      	add	r3, pc, #456	; (adr r3, 8011280 <atan+0x2c0>)
 80110b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ba:	f7ef f8ef 	bl	800029c <__adddf3>
 80110be:	4632      	mov	r2, r6
 80110c0:	463b      	mov	r3, r7
 80110c2:	f7ef faa1 	bl	8000608 <__aeabi_dmul>
 80110c6:	a370      	add	r3, pc, #448	; (adr r3, 8011288 <atan+0x2c8>)
 80110c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110cc:	f7ef f8e6 	bl	800029c <__adddf3>
 80110d0:	4632      	mov	r2, r6
 80110d2:	463b      	mov	r3, r7
 80110d4:	f7ef fa98 	bl	8000608 <__aeabi_dmul>
 80110d8:	a36d      	add	r3, pc, #436	; (adr r3, 8011290 <atan+0x2d0>)
 80110da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110de:	f7ef f8dd 	bl	800029c <__adddf3>
 80110e2:	4632      	mov	r2, r6
 80110e4:	463b      	mov	r3, r7
 80110e6:	f7ef fa8f 	bl	8000608 <__aeabi_dmul>
 80110ea:	a36b      	add	r3, pc, #428	; (adr r3, 8011298 <atan+0x2d8>)
 80110ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f0:	f7ef f8d4 	bl	800029c <__adddf3>
 80110f4:	4632      	mov	r2, r6
 80110f6:	463b      	mov	r3, r7
 80110f8:	f7ef fa86 	bl	8000608 <__aeabi_dmul>
 80110fc:	a368      	add	r3, pc, #416	; (adr r3, 80112a0 <atan+0x2e0>)
 80110fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011102:	f7ef f8cb 	bl	800029c <__adddf3>
 8011106:	4642      	mov	r2, r8
 8011108:	464b      	mov	r3, r9
 801110a:	f7ef fa7d 	bl	8000608 <__aeabi_dmul>
 801110e:	a366      	add	r3, pc, #408	; (adr r3, 80112a8 <atan+0x2e8>)
 8011110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011114:	4680      	mov	r8, r0
 8011116:	4689      	mov	r9, r1
 8011118:	4630      	mov	r0, r6
 801111a:	4639      	mov	r1, r7
 801111c:	f7ef fa74 	bl	8000608 <__aeabi_dmul>
 8011120:	a363      	add	r3, pc, #396	; (adr r3, 80112b0 <atan+0x2f0>)
 8011122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011126:	f7ef f8b7 	bl	8000298 <__aeabi_dsub>
 801112a:	4632      	mov	r2, r6
 801112c:	463b      	mov	r3, r7
 801112e:	f7ef fa6b 	bl	8000608 <__aeabi_dmul>
 8011132:	a361      	add	r3, pc, #388	; (adr r3, 80112b8 <atan+0x2f8>)
 8011134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011138:	f7ef f8ae 	bl	8000298 <__aeabi_dsub>
 801113c:	4632      	mov	r2, r6
 801113e:	463b      	mov	r3, r7
 8011140:	f7ef fa62 	bl	8000608 <__aeabi_dmul>
 8011144:	a35e      	add	r3, pc, #376	; (adr r3, 80112c0 <atan+0x300>)
 8011146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114a:	f7ef f8a5 	bl	8000298 <__aeabi_dsub>
 801114e:	4632      	mov	r2, r6
 8011150:	463b      	mov	r3, r7
 8011152:	f7ef fa59 	bl	8000608 <__aeabi_dmul>
 8011156:	a35c      	add	r3, pc, #368	; (adr r3, 80112c8 <atan+0x308>)
 8011158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115c:	f7ef f89c 	bl	8000298 <__aeabi_dsub>
 8011160:	4632      	mov	r2, r6
 8011162:	463b      	mov	r3, r7
 8011164:	f7ef fa50 	bl	8000608 <__aeabi_dmul>
 8011168:	4602      	mov	r2, r0
 801116a:	460b      	mov	r3, r1
 801116c:	4640      	mov	r0, r8
 801116e:	4649      	mov	r1, r9
 8011170:	f7ef f894 	bl	800029c <__adddf3>
 8011174:	4622      	mov	r2, r4
 8011176:	462b      	mov	r3, r5
 8011178:	f7ef fa46 	bl	8000608 <__aeabi_dmul>
 801117c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011180:	4602      	mov	r2, r0
 8011182:	460b      	mov	r3, r1
 8011184:	d14b      	bne.n	801121e <atan+0x25e>
 8011186:	4620      	mov	r0, r4
 8011188:	4629      	mov	r1, r5
 801118a:	f7ef f885 	bl	8000298 <__aeabi_dsub>
 801118e:	e72c      	b.n	8010fea <atan+0x2a>
 8011190:	ee10 0a10 	vmov	r0, s0
 8011194:	2200      	movs	r2, #0
 8011196:	4b53      	ldr	r3, [pc, #332]	; (80112e4 <atan+0x324>)
 8011198:	4629      	mov	r1, r5
 801119a:	f7ef f87d 	bl	8000298 <__aeabi_dsub>
 801119e:	2200      	movs	r2, #0
 80111a0:	4606      	mov	r6, r0
 80111a2:	460f      	mov	r7, r1
 80111a4:	4b4f      	ldr	r3, [pc, #316]	; (80112e4 <atan+0x324>)
 80111a6:	4620      	mov	r0, r4
 80111a8:	4629      	mov	r1, r5
 80111aa:	f7ef f877 	bl	800029c <__adddf3>
 80111ae:	4602      	mov	r2, r0
 80111b0:	460b      	mov	r3, r1
 80111b2:	4630      	mov	r0, r6
 80111b4:	4639      	mov	r1, r7
 80111b6:	f7ef fb51 	bl	800085c <__aeabi_ddiv>
 80111ba:	f04f 0a01 	mov.w	sl, #1
 80111be:	4604      	mov	r4, r0
 80111c0:	460d      	mov	r5, r1
 80111c2:	e764      	b.n	801108e <atan+0xce>
 80111c4:	4b49      	ldr	r3, [pc, #292]	; (80112ec <atan+0x32c>)
 80111c6:	429e      	cmp	r6, r3
 80111c8:	dc1d      	bgt.n	8011206 <atan+0x246>
 80111ca:	ee10 0a10 	vmov	r0, s0
 80111ce:	2200      	movs	r2, #0
 80111d0:	4b47      	ldr	r3, [pc, #284]	; (80112f0 <atan+0x330>)
 80111d2:	4629      	mov	r1, r5
 80111d4:	f7ef f860 	bl	8000298 <__aeabi_dsub>
 80111d8:	2200      	movs	r2, #0
 80111da:	4606      	mov	r6, r0
 80111dc:	460f      	mov	r7, r1
 80111de:	4b44      	ldr	r3, [pc, #272]	; (80112f0 <atan+0x330>)
 80111e0:	4620      	mov	r0, r4
 80111e2:	4629      	mov	r1, r5
 80111e4:	f7ef fa10 	bl	8000608 <__aeabi_dmul>
 80111e8:	2200      	movs	r2, #0
 80111ea:	4b3e      	ldr	r3, [pc, #248]	; (80112e4 <atan+0x324>)
 80111ec:	f7ef f856 	bl	800029c <__adddf3>
 80111f0:	4602      	mov	r2, r0
 80111f2:	460b      	mov	r3, r1
 80111f4:	4630      	mov	r0, r6
 80111f6:	4639      	mov	r1, r7
 80111f8:	f7ef fb30 	bl	800085c <__aeabi_ddiv>
 80111fc:	f04f 0a02 	mov.w	sl, #2
 8011200:	4604      	mov	r4, r0
 8011202:	460d      	mov	r5, r1
 8011204:	e743      	b.n	801108e <atan+0xce>
 8011206:	462b      	mov	r3, r5
 8011208:	ee10 2a10 	vmov	r2, s0
 801120c:	2000      	movs	r0, #0
 801120e:	4939      	ldr	r1, [pc, #228]	; (80112f4 <atan+0x334>)
 8011210:	f7ef fb24 	bl	800085c <__aeabi_ddiv>
 8011214:	f04f 0a03 	mov.w	sl, #3
 8011218:	4604      	mov	r4, r0
 801121a:	460d      	mov	r5, r1
 801121c:	e737      	b.n	801108e <atan+0xce>
 801121e:	4b36      	ldr	r3, [pc, #216]	; (80112f8 <atan+0x338>)
 8011220:	4e36      	ldr	r6, [pc, #216]	; (80112fc <atan+0x33c>)
 8011222:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8011226:	4456      	add	r6, sl
 8011228:	449a      	add	sl, r3
 801122a:	e9da 2300 	ldrd	r2, r3, [sl]
 801122e:	f7ef f833 	bl	8000298 <__aeabi_dsub>
 8011232:	4622      	mov	r2, r4
 8011234:	462b      	mov	r3, r5
 8011236:	f7ef f82f 	bl	8000298 <__aeabi_dsub>
 801123a:	4602      	mov	r2, r0
 801123c:	460b      	mov	r3, r1
 801123e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011242:	f7ef f829 	bl	8000298 <__aeabi_dsub>
 8011246:	f1bb 0f00 	cmp.w	fp, #0
 801124a:	4604      	mov	r4, r0
 801124c:	460d      	mov	r5, r1
 801124e:	f6bf aed6 	bge.w	8010ffe <atan+0x3e>
 8011252:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011256:	461d      	mov	r5, r3
 8011258:	e6d1      	b.n	8010ffe <atan+0x3e>
 801125a:	a51d      	add	r5, pc, #116	; (adr r5, 80112d0 <atan+0x310>)
 801125c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011260:	e6cd      	b.n	8010ffe <atan+0x3e>
 8011262:	bf00      	nop
 8011264:	f3af 8000 	nop.w
 8011268:	54442d18 	.word	0x54442d18
 801126c:	3ff921fb 	.word	0x3ff921fb
 8011270:	8800759c 	.word	0x8800759c
 8011274:	7e37e43c 	.word	0x7e37e43c
 8011278:	e322da11 	.word	0xe322da11
 801127c:	3f90ad3a 	.word	0x3f90ad3a
 8011280:	24760deb 	.word	0x24760deb
 8011284:	3fa97b4b 	.word	0x3fa97b4b
 8011288:	a0d03d51 	.word	0xa0d03d51
 801128c:	3fb10d66 	.word	0x3fb10d66
 8011290:	c54c206e 	.word	0xc54c206e
 8011294:	3fb745cd 	.word	0x3fb745cd
 8011298:	920083ff 	.word	0x920083ff
 801129c:	3fc24924 	.word	0x3fc24924
 80112a0:	5555550d 	.word	0x5555550d
 80112a4:	3fd55555 	.word	0x3fd55555
 80112a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80112ac:	bfa2b444 	.word	0xbfa2b444
 80112b0:	52defd9a 	.word	0x52defd9a
 80112b4:	3fadde2d 	.word	0x3fadde2d
 80112b8:	af749a6d 	.word	0xaf749a6d
 80112bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80112c0:	fe231671 	.word	0xfe231671
 80112c4:	3fbc71c6 	.word	0x3fbc71c6
 80112c8:	9998ebc4 	.word	0x9998ebc4
 80112cc:	3fc99999 	.word	0x3fc99999
 80112d0:	54442d18 	.word	0x54442d18
 80112d4:	bff921fb 	.word	0xbff921fb
 80112d8:	440fffff 	.word	0x440fffff
 80112dc:	7ff00000 	.word	0x7ff00000
 80112e0:	3fdbffff 	.word	0x3fdbffff
 80112e4:	3ff00000 	.word	0x3ff00000
 80112e8:	3ff2ffff 	.word	0x3ff2ffff
 80112ec:	40037fff 	.word	0x40037fff
 80112f0:	3ff80000 	.word	0x3ff80000
 80112f4:	bff00000 	.word	0xbff00000
 80112f8:	08011a40 	.word	0x08011a40
 80112fc:	08011a20 	.word	0x08011a20

08011300 <fabs>:
 8011300:	ec51 0b10 	vmov	r0, r1, d0
 8011304:	ee10 2a10 	vmov	r2, s0
 8011308:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801130c:	ec43 2b10 	vmov	d0, r2, r3
 8011310:	4770      	bx	lr

08011312 <matherr>:
 8011312:	2000      	movs	r0, #0
 8011314:	4770      	bx	lr
	...

08011318 <nan>:
 8011318:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011320 <nan+0x8>
 801131c:	4770      	bx	lr
 801131e:	bf00      	nop
 8011320:	00000000 	.word	0x00000000
 8011324:	7ff80000 	.word	0x7ff80000

08011328 <_init>:
 8011328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801132a:	bf00      	nop
 801132c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801132e:	bc08      	pop	{r3}
 8011330:	469e      	mov	lr, r3
 8011332:	4770      	bx	lr

08011334 <_fini>:
 8011334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011336:	bf00      	nop
 8011338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801133a:	bc08      	pop	{r3}
 801133c:	469e      	mov	lr, r3
 801133e:	4770      	bx	lr
